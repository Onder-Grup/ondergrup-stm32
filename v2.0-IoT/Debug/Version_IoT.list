
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc04  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cde8  0800cde8  0001cde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddc4  0800ddc4  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800ddc4  0800ddc4  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ddc4  0800ddc4  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddc4  0800ddc4  0001ddc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddc8  0800ddc8  0001ddc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800ddcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000110  0800dedc  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800dedc  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016721  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e7  00000000  00000000  0003689d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e67  00000000  00000000  0003b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0f2  00000000  00000000  0005852c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eeb1  00000000  00000000  0007461e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052dc  00000000  00000000  001134d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001187ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cdd0 	.word	0x0800cdd0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800cdd0 	.word	0x0800cdd0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fbfc 	bl	8009a4c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa74 	bl	8008744 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	200002b8 	.word	0x200002b8
 80004c0:	20000201 	.word	0x20000201
 80004c4:	20000229 	.word	0x20000229
 80004c8:	2000022c 	.word	0x2000022c
 80004cc:	2000022d 	.word	0x2000022d
 80004d0:	2000022e 	.word	0x2000022e
 80004d4:	2000022f 	.word	0x2000022f
 80004d8:	20000230 	.word	0x20000230
 80004dc:	20000231 	.word	0x20000231
 80004e0:	20000241 	.word	0x20000241
 80004e4:	20000232 	.word	0x20000232
 80004e8:	20000242 	.word	0x20000242
 80004ec:	20000233 	.word	0x20000233
 80004f0:	20000243 	.word	0x20000243
 80004f4:	20000236 	.word	0x20000236
 80004f8:	20000237 	.word	0x20000237
 80004fc:	20000238 	.word	0x20000238
 8000500:	20000239 	.word	0x20000239
 8000504:	2000023a 	.word	0x2000023a
 8000508:	2000023b 	.word	0x2000023b
 800050c:	2000023c 	.word	0x2000023c
 8000510:	2000023d 	.word	0x2000023d
 8000514:	2000023e 	.word	0x2000023e
 8000518:	2000023f 	.word	0x2000023f
 800051c:	20000240 	.word	0x20000240
 8000520:	20000244 	.word	0x20000244
 8000524:	20000246 	.word	0x20000246
 8000528:	20000224 	.word	0x20000224
 800052c:	20000225 	.word	0x20000225
 8000530:	20000226 	.word	0x20000226
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000227 	.word	0x20000227
 8000540:	20000249 	.word	0x20000249
 8000544:	20000247 	.word	0x20000247
 8000548:	20000235 	.word	0x20000235
 800054c:	20000248 	.word	0x20000248
 8000550:	20000234 	.word	0x20000234
 8000554:	2000024a 	.word	0x2000024a
 8000558:	2000024b 	.word	0x2000024b
 800055c:	2000024c 	.word	0x2000024c
 8000560:	2000024d 	.word	0x2000024d
 8000564:	2000024e 	.word	0x2000024e
 8000568:	2000024f 	.word	0x2000024f
 800056c:	20000250 	.word	0x20000250
 8000570:	20000251 	.word	0x20000251
 8000574:	20000252 	.word	0x20000252
 8000578:	20000253 	.word	0x20000253
 800057c:	20000200 	.word	0x20000200
	}

	if(kapi1AcSure>5) {
 8000580:	4b6d      	ldr	r3, [pc, #436]	; (8000738 <eepromKontrol+0x504>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b6b      	ldr	r3, [pc, #428]	; (8000738 <eepromKontrol+0x504>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b6b      	ldr	r3, [pc, #428]	; (800073c <eepromKontrol+0x508>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b69      	ldr	r3, [pc, #420]	; (800073c <eepromKontrol+0x508>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b68      	ldr	r3, [pc, #416]	; (8000740 <eepromKontrol+0x50c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b66      	ldr	r3, [pc, #408]	; (8000740 <eepromKontrol+0x50c>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <eepromKontrol+0x510>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b64      	ldr	r3, [pc, #400]	; (8000744 <eepromKontrol+0x510>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b63      	ldr	r3, [pc, #396]	; (8000748 <eepromKontrol+0x514>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b61      	ldr	r3, [pc, #388]	; (8000748 <eepromKontrol+0x514>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b61      	ldr	r3, [pc, #388]	; (800074c <eepromKontrol+0x518>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5f      	ldr	r3, [pc, #380]	; (800074c <eepromKontrol+0x518>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5e      	ldr	r3, [pc, #376]	; (8000750 <eepromKontrol+0x51c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5c      	ldr	r3, [pc, #368]	; (8000750 <eepromKontrol+0x51c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5c      	ldr	r3, [pc, #368]	; (8000754 <eepromKontrol+0x520>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b5a      	ldr	r3, [pc, #360]	; (8000754 <eepromKontrol+0x520>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b59      	ldr	r3, [pc, #356]	; (8000758 <eepromKontrol+0x524>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b57      	ldr	r3, [pc, #348]	; (8000758 <eepromKontrol+0x524>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b57      	ldr	r3, [pc, #348]	; (800075c <eepromKontrol+0x528>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <eepromKontrol+0x528>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b54      	ldr	r3, [pc, #336]	; (8000760 <eepromKontrol+0x52c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <eepromKontrol+0x52c>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b52      	ldr	r3, [pc, #328]	; (8000764 <eepromKontrol+0x530>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b50      	ldr	r3, [pc, #320]	; (8000764 <eepromKontrol+0x530>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <eepromKontrol+0x534>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <eepromKontrol+0x534>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4d      	ldr	r3, [pc, #308]	; (800076c <eepromKontrol+0x538>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b4b      	ldr	r3, [pc, #300]	; (800076c <eepromKontrol+0x538>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <eepromKontrol+0x53c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b48      	ldr	r3, [pc, #288]	; (8000770 <eepromKontrol+0x53c>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b48      	ldr	r3, [pc, #288]	; (8000774 <eepromKontrol+0x540>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b46      	ldr	r3, [pc, #280]	; (8000774 <eepromKontrol+0x540>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b45      	ldr	r3, [pc, #276]	; (8000778 <eepromKontrol+0x544>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b43      	ldr	r3, [pc, #268]	; (8000778 <eepromKontrol+0x544>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b43      	ldr	r3, [pc, #268]	; (800077c <eepromKontrol+0x548>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b41      	ldr	r3, [pc, #260]	; (800077c <eepromKontrol+0x548>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <eepromKontrol+0x54c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <eepromKontrol+0x54c>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <eepromKontrol+0x550>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <eepromKontrol+0x550>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <eepromKontrol+0x554>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <eepromKontrol+0x554>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b39      	ldr	r3, [pc, #228]	; (800078c <eepromKontrol+0x558>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <eepromKontrol+0x558>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <eepromKontrol+0x55c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a36      	ldr	r2, [pc, #216]	; (8000794 <eepromKontrol+0x560>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <eepromKontrol+0x564>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f008 f839 	bl	8008744 <HAL_Delay>
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], wifiCharacterLimit);
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <eepromKontrol+0x568>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <eepromKontrol+0x560>)
 80006d8:	441a      	add	r2, r3
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <eepromKontrol+0x56c>)
 80006dc:	6811      	ldr	r1, [r2, #0]
 80006de:	6855      	ldr	r5, [r2, #4]
 80006e0:	6894      	ldr	r4, [r2, #8]
 80006e2:	68d0      	ldr	r0, [r2, #12]
 80006e4:	6019      	str	r1, [r3, #0]
 80006e6:	605d      	str	r5, [r3, #4]
 80006e8:	609c      	str	r4, [r3, #8]
 80006ea:	60d8      	str	r0, [r3, #12]
 80006ec:	6911      	ldr	r1, [r2, #16]
 80006ee:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f008 f826 	bl	8008744 <HAL_Delay>
	memcpy(wifiPassInt, &eepromData[passStartPos], wifiCharacterLimit);
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <eepromKontrol+0x570>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <eepromKontrol+0x560>)
 80006fe:	441a      	add	r2, r3
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <eepromKontrol+0x574>)
 8000702:	6811      	ldr	r1, [r2, #0]
 8000704:	6855      	ldr	r5, [r2, #4]
 8000706:	6894      	ldr	r4, [r2, #8]
 8000708:	68d0      	ldr	r0, [r2, #12]
 800070a:	6019      	str	r1, [r3, #0]
 800070c:	605d      	str	r5, [r3, #4]
 800070e:	609c      	str	r4, [r3, #8]
 8000710:	60d8      	str	r0, [r3, #12]
 8000712:	6911      	ldr	r1, [r2, #16]
 8000714:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f008 f813 	bl	8008744 <HAL_Delay>
	readFromEEPROM(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f000 f864 	bl	80007ec <readFromEEPROM>
	HAL_Delay(200);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f008 f80d 	bl	8008744 <HAL_Delay>
	readFromEEPROM(2);
 800072a:	2002      	movs	r0, #2
 800072c:	f000 f85e 	bl	80007ec <readFromEEPROM>
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bdb0      	pop	{r4, r5, r7, pc}
 8000736:	bf00      	nop
 8000738:	20000241 	.word	0x20000241
 800073c:	20000232 	.word	0x20000232
 8000740:	20000242 	.word	0x20000242
 8000744:	20000233 	.word	0x20000233
 8000748:	20000235 	.word	0x20000235
 800074c:	20000243 	.word	0x20000243
 8000750:	20000236 	.word	0x20000236
 8000754:	20000237 	.word	0x20000237
 8000758:	20000238 	.word	0x20000238
 800075c:	20000239 	.word	0x20000239
 8000760:	2000023a 	.word	0x2000023a
 8000764:	2000023b 	.word	0x2000023b
 8000768:	2000023c 	.word	0x2000023c
 800076c:	2000023d 	.word	0x2000023d
 8000770:	2000023e 	.word	0x2000023e
 8000774:	2000023f 	.word	0x2000023f
 8000778:	20000240 	.word	0x20000240
 800077c:	20000244 	.word	0x20000244
 8000780:	20000246 	.word	0x20000246
 8000784:	20000248 	.word	0x20000248
 8000788:	20000249 	.word	0x20000249
 800078c:	20000247 	.word	0x20000247
 8000790:	20000004 	.word	0x20000004
 8000794:	2000012c 	.word	0x2000012c
 8000798:	200001a4 	.word	0x200001a4
 800079c:	20000008 	.word	0x20000008
 80007a0:	200001d8 	.word	0x200001d8
 80007a4:	2000000c 	.word	0x2000000c
 80007a8:	200001ec 	.word	0x200001ec

080007ac <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <getCharFromCursorPosition+0x1c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000030 	.word	0x20000030

080007cc <getIDCharFromCursorPosition>:

char getIDCharFromCursorPosition(uint8_t selectedInt) {
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	return idCharactersArray[selectedInt];
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4a03      	ldr	r2, [pc, #12]	; (80007e8 <getIDCharFromCursorPosition+0x1c>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000024 	.word	0x20000024

080007ec <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d117      	bne.n	800082a <readFromEEPROM+0x3e>
		//Wifi SSID Okuma
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	e010      	b.n	8000822 <readFromEEPROM+0x36>
			wifiSSID[i] = getCharFromCursorPosition(wifiSSIDInt[i]);
 8000800:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <readFromEEPROM+0xb8>)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffcf 	bl	80007ac <getCharFromCursorPosition>
 800080e:	4603      	mov	r3, r0
 8000810:	4619      	mov	r1, r3
 8000812:	4a25      	ldr	r2, [pc, #148]	; (80008a8 <readFromEEPROM+0xbc>)
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	4413      	add	r3, r2
 8000818:	460a      	mov	r2, r1
 800081a:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3301      	adds	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	2b13      	cmp	r3, #19
 8000826:	ddeb      	ble.n	8000800 <readFromEEPROM+0x14>
		for(int i=0; i<wifiCharacterLimit; i++) {
			machineID[i] = getIDCharFromCursorPosition(eepromData[machineIDTempLoc]);
			machineIDTempLoc++;
		}
	}
}
 8000828:	e037      	b.n	800089a <readFromEEPROM+0xae>
	} else if(state == 2) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d117      	bne.n	8000860 <readFromEEPROM+0x74>
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	e010      	b.n	8000858 <readFromEEPROM+0x6c>
			wifiPass[i] = getCharFromCursorPosition(wifiPassInt[i]);
 8000836:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <readFromEEPROM+0xc0>)
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffb4 	bl	80007ac <getCharFromCursorPosition>
 8000844:	4603      	mov	r3, r0
 8000846:	4619      	mov	r1, r3
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <readFromEEPROM+0xc4>)
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	4413      	add	r3, r2
 800084e:	460a      	mov	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	3301      	adds	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	2b13      	cmp	r3, #19
 800085c:	ddeb      	ble.n	8000836 <readFromEEPROM+0x4a>
}
 800085e:	e01c      	b.n	800089a <readFromEEPROM+0xae>
		int machineIDTempLoc = idStartPos;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <readFromEEPROM+0xc8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	e013      	b.n	8000894 <readFromEEPROM+0xa8>
			machineID[i] = getIDCharFromCursorPosition(eepromData[machineIDTempLoc]);
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <readFromEEPROM+0xcc>)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ffa9 	bl	80007cc <getIDCharFromCursorPosition>
 800087a:	4603      	mov	r3, r0
 800087c:	4619      	mov	r1, r3
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <readFromEEPROM+0xd0>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4413      	add	r3, r2
 8000884:	460a      	mov	r2, r1
 8000886:	701a      	strb	r2, [r3, #0]
			machineIDTempLoc++;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b13      	cmp	r3, #19
 8000898:	dde8      	ble.n	800086c <readFromEEPROM+0x80>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200001d8 	.word	0x200001d8
 80008a8:	200001b0 	.word	0x200001b0
 80008ac:	200001ec 	.word	0x200001ec
 80008b0:	200001c4 	.word	0x200001c4
 80008b4:	20000004 	.word	0x20000004
 80008b8:	2000012c 	.word	0x2000012c
 80008bc:	200001a4 	.word	0x200001a4

080008c0 <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	4613      	mov	r3, r2
 80008cc:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 80008ce:	68b8      	ldr	r0, [r7, #8]
 80008d0:	f7ff fca8 	bl	8000224 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f00a fffd 	bl	800b8dc <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 80008e2:	88fb      	ldrh	r3, [r7, #6]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f007 ff2d 	bl	8008744 <HAL_Delay>
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <ESP8266_Init>:

void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0a0      	sub	sp, #128	; 0x80
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
    sendATCommand(huart, "AT+RESTORE\r\n", 1000);
 8000900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000904:	4915      	ldr	r1, [pc, #84]	; (800095c <ESP8266_Init+0x68>)
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f7ff ffda 	bl	80008c0 <sendATCommand>
    sendATCommand(huart, "AT+RST\r\n", 1000);
 800090c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000910:	4913      	ldr	r1, [pc, #76]	; (8000960 <ESP8266_Init+0x6c>)
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f7ff ffd4 	bl	80008c0 <sendATCommand>
    sendATCommand(huart, "AT\r\n", 2000);
 8000918:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800091c:	4911      	ldr	r1, [pc, #68]	; (8000964 <ESP8266_Init+0x70>)
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f7ff ffce 	bl	80008c0 <sendATCommand>
    sendATCommand(huart, "AT+CWMODE=1\r\n", 2000);
 8000924:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000928:	490f      	ldr	r1, [pc, #60]	; (8000968 <ESP8266_Init+0x74>)
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ffc8 	bl	80008c0 <sendATCommand>

    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
 8000930:	f107 0014 	add.w	r0, r7, #20
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4a0c      	ldr	r2, [pc, #48]	; (800096c <ESP8266_Init+0x78>)
 800093c:	2164      	movs	r1, #100	; 0x64
 800093e:	f00b fda7 	bl	800c490 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff ffb7 	bl	80008c0 <sendATCommand>
}
 8000952:	bf00      	nop
 8000954:	3778      	adds	r7, #120	; 0x78
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	0800cde8 	.word	0x0800cde8
 8000960:	0800cdf8 	.word	0x0800cdf8
 8000964:	0800ce04 	.word	0x0800ce04
 8000968:	0800ce0c 	.word	0x0800ce0c
 800096c:	0800ce1c 	.word	0x0800ce1c

08000970 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b0c6      	sub	sp, #280	; 0x118
 8000974:	af02      	add	r7, sp, #8
 8000976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800097a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097e:	6018      	str	r0, [r3, #0]
 8000980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000988:	6019      	str	r1, [r3, #0]
 800098a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000992:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000994:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <sendMachineData+0xb8>)
 800099a:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <sendMachineData+0xbc>)
 800099c:	21c8      	movs	r1, #200	; 0xc8
 800099e:	f00b fd77 	bl	800c490 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 80009a2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80009a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009ae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	f7ff ff84 	bl	80008c0 <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 80009b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009c0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80009c4:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <sendMachineData+0xc0>)
 80009c6:	9201      	str	r2, [sp, #4]
 80009c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009cc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009d0:	6812      	ldr	r2, [r2, #0]
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <sendMachineData+0xc4>)
 80009d8:	21c8      	movs	r1, #200	; 0xc8
 80009da:	f00b fd59 	bl	800c490 <sniprintf>
 80009de:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 80009e2:	f107 0010 	add.w	r0, r7, #16
 80009e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <sendMachineData+0xc8>)
 80009ec:	2132      	movs	r1, #50	; 0x32
 80009ee:	f00b fd4f 	bl	800c490 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 80009f2:	f107 0110 	add.w	r1, r7, #16
 80009f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009fe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	f7ff ff5c 	bl	80008c0 <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000a08:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a14:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f7ff ff51 	bl	80008c0 <sendATCommand>
}
 8000a1e:	bf00      	nop
 8000a20:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0800ce38 	.word	0x0800ce38
 8000a2c:	0800ce48 	.word	0x0800ce48
 8000a30:	0800cec4 	.word	0x0800cec4
 8000a34:	0800ce68 	.word	0x0800ce68
 8000a38:	0800ced8 	.word	0x0800ced8

08000a3c <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af04      	add	r7, sp, #16
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <hata2EEPROM+0xa4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	1e5a      	subs	r2, r3, #1
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <hata2EEPROM+0xac>)
 8000a54:	5cd3      	ldrb	r3, [r2, r3]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a5a:	f000 f92b 	bl	8000cb4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a5e:	e000      	b.n	8000a62 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a60:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e012      	b.n	8000a8e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <hata2EEPROM+0xac>)
 8000a72:	5cd3      	ldrb	r3, [r2, r3]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d107      	bne.n	8000a88 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4919      	ldr	r1, [pc, #100]	; (8000ae8 <hata2EEPROM+0xac>)
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	54ca      	strb	r2, [r1, r3]
					break;
 8000a86:	e007      	b.n	8000a98 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <hata2EEPROM+0xa4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbe7      	blt.n	8000a68 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <hata2EEPROM+0xa4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b298      	uxth	r0, r3
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <hata2EEPROM+0xac>)
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <hata2EEPROM+0xa4>)
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	b292      	uxth	r2, r2
 8000ab2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000ab6:	9402      	str	r4, [sp, #8]
 8000ab8:	9201      	str	r2, [sp, #4]
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	4603      	mov	r3, r0
 8000abe:	460a      	mov	r2, r1
 8000ac0:	21a0      	movs	r1, #160	; 0xa0
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <hata2EEPROM+0xb0>)
 8000ac4:	f008 fec8 	bl	8009858 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000ac8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000acc:	f007 fe3a 	bl	8008744 <HAL_Delay>
	eepromKontrol(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fbaf 	bl	8000234 <eepromKontrol>
}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000ac 	.word	0x200000ac
 8000ae4:	200000b0 	.word	0x200000b0
 8000ae8:	2000012c 	.word	0x2000012c
 8000aec:	200002b8 	.word	0x200002b8

08000af0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d11d      	bne.n	8000b3c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b00:	4b62      	ldr	r3, [pc, #392]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d105      	bne.n	8000b14 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b08:	4a61      	ldr	r2, [pc, #388]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f007 f8c3 	bl	8007c98 <lcd_print>
 8000b12:	e008      	b.n	8000b26 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000b14:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d104      	bne.n	8000b26 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b1c:	4a5d      	ldr	r2, [pc, #372]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2001      	movs	r0, #1
 8000b22:	f007 f8b9 	bl	8007c98 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b26:	4a5c      	ldr	r2, [pc, #368]	; (8000c98 <hataKoduLcdGoster+0x1a8>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f007 f8b4 	bl	8007c98 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b30:	4a5a      	ldr	r2, [pc, #360]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000b32:	2107      	movs	r1, #7
 8000b34:	2002      	movs	r0, #2
 8000b36:	f007 f8af 	bl	8007c98 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b3a:	e0a3      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d11d      	bne.n	8000b7e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000b42:	4b52      	ldr	r3, [pc, #328]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000b4a:	4a51      	ldr	r2, [pc, #324]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f007 f8a2 	bl	8007c98 <lcd_print>
 8000b54:	e008      	b.n	8000b68 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000b5e:	4a4d      	ldr	r2, [pc, #308]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	2001      	movs	r0, #1
 8000b64:	f007 f898 	bl	8007c98 <lcd_print>
		lcd_print(2, 2, "2");
 8000b68:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <hataKoduLcdGoster+0x1b0>)
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f007 f893 	bl	8007c98 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b72:	4a4a      	ldr	r2, [pc, #296]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000b74:	2107      	movs	r1, #7
 8000b76:	2002      	movs	r0, #2
 8000b78:	f007 f88e 	bl	8007c98 <lcd_print>
}
 8000b7c:	e082      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d11d      	bne.n	8000bc0 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000b84:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000b8c:	4a40      	ldr	r2, [pc, #256]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2001      	movs	r0, #1
 8000b92:	f007 f881 	bl	8007c98 <lcd_print>
 8000b96:	e008      	b.n	8000baa <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000b98:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d104      	bne.n	8000baa <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000ba0:	4a3c      	ldr	r2, [pc, #240]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f007 f877 	bl	8007c98 <lcd_print>
		lcd_print(2, 3, "3");
 8000baa:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <hataKoduLcdGoster+0x1b4>)
 8000bac:	2103      	movs	r1, #3
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f007 f872 	bl	8007c98 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bb4:	4a39      	ldr	r2, [pc, #228]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f007 f86d 	bl	8007c98 <lcd_print>
}
 8000bbe:	e061      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d11d      	bne.n	8000c02 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000bce:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f007 f860 	bl	8007c98 <lcd_print>
 8000bd8:	e008      	b.n	8000bec <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d104      	bne.n	8000bec <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000be2:	4a2c      	ldr	r2, [pc, #176]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	2001      	movs	r0, #1
 8000be8:	f007 f856 	bl	8007c98 <lcd_print>
		lcd_print(2, 4, "4");
 8000bec:	4a2e      	ldr	r2, [pc, #184]	; (8000ca8 <hataKoduLcdGoster+0x1b8>)
 8000bee:	2104      	movs	r1, #4
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f007 f851 	bl	8007c98 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bf6:	4a29      	ldr	r2, [pc, #164]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f007 f84c 	bl	8007c98 <lcd_print>
}
 8000c00:	e040      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b05      	cmp	r3, #5
 8000c06:	d11d      	bne.n	8000c44 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000c10:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	2001      	movs	r0, #1
 8000c16:	f007 f83f 	bl	8007c98 <lcd_print>
 8000c1a:	e008      	b.n	8000c2e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d104      	bne.n	8000c2e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f007 f835 	bl	8007c98 <lcd_print>
		lcd_print(2, 5, "5");
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <hataKoduLcdGoster+0x1bc>)
 8000c30:	2105      	movs	r1, #5
 8000c32:	2002      	movs	r0, #2
 8000c34:	f007 f830 	bl	8007c98 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c38:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000c3a:	2107      	movs	r1, #7
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f007 f82b 	bl	8007c98 <lcd_print>
}
 8000c42:	e01f      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d11c      	bne.n	8000c84 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d105      	bne.n	8000c5e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	2001      	movs	r0, #1
 8000c58:	f007 f81e 	bl	8007c98 <lcd_print>
 8000c5c:	e008      	b.n	8000c70 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d104      	bne.n	8000c70 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f007 f814 	bl	8007c98 <lcd_print>
		lcd_print(2, 6, "6");
 8000c70:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <hataKoduLcdGoster+0x1c0>)
 8000c72:	2106      	movs	r1, #6
 8000c74:	2002      	movs	r0, #2
 8000c76:	f007 f80f 	bl	8007c98 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f007 f80a 	bl	8007c98 <lcd_print>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000249 	.word	0x20000249
 8000c90:	0800cf64 	.word	0x0800cf64
 8000c94:	0800cf74 	.word	0x0800cf74
 8000c98:	0800cf84 	.word	0x0800cf84
 8000c9c:	0800cf88 	.word	0x0800cf88
 8000ca0:	0800cf94 	.word	0x0800cf94
 8000ca4:	0800cf98 	.word	0x0800cf98
 8000ca8:	0800cf9c 	.word	0x0800cf9c
 8000cac:	0800cfa0 	.word	0x0800cfa0
 8000cb0:	0800cfa4 	.word	0x0800cfa4

08000cb4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	e009      	b.n	8000cd4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <eepromDataFillWithEmpty+0x38>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc8:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <eepromDataFillWithEmpty+0x3c>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <eepromDataFillWithEmpty+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dbf0      	blt.n	8000cc0 <eepromDataFillWithEmpty+0xc>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000084 	.word	0x20000084
 8000cf0:	2000012c 	.word	0x2000012c
 8000cf4:	200000ac 	.word	0x200000ac

08000cf8 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d0a:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <i2cTest+0x154>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <i2cTest+0x154>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0201 	bic.w	r2, r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d1a:	484c      	ldr	r0, [pc, #304]	; (8000e4c <i2cTest+0x154>)
 8000d1c:	f008 fc6e 	bl	80095fc <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d20:	23c0      	movs	r3, #192	; 0xc0
 8000d22:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d24:	2311      	movs	r3, #17
 8000d26:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4846      	ldr	r0, [pc, #280]	; (8000e50 <i2cTest+0x158>)
 8000d36:	f008 f875 	bl	8008e24 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2140      	movs	r1, #64	; 0x40
 8000d3e:	4844      	ldr	r0, [pc, #272]	; (8000e50 <i2cTest+0x158>)
 8000d40:	f008 fae7 	bl	8009312 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	4841      	ldr	r0, [pc, #260]	; (8000e50 <i2cTest+0x158>)
 8000d4a:	f008 fae2 	bl	8009312 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000d4e:	200a      	movs	r0, #10
 8000d50:	f007 fcf8 	bl	8008744 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d54:	bf00      	nop
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	483d      	ldr	r0, [pc, #244]	; (8000e50 <i2cTest+0x158>)
 8000d5a:	f008 fac3 	bl	80092e4 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d006      	beq.n	8000d72 <i2cTest+0x7a>
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	483a      	ldr	r0, [pc, #232]	; (8000e50 <i2cTest+0x158>)
 8000d68:	f008 fabc 	bl	80092e4 <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d1f1      	bne.n	8000d56 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	4836      	ldr	r0, [pc, #216]	; (8000e50 <i2cTest+0x158>)
 8000d78:	f008 facb 	bl	8009312 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f007 fce1 	bl	8008744 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d82:	bf00      	nop
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	4832      	ldr	r0, [pc, #200]	; (8000e50 <i2cTest+0x158>)
 8000d88:	f008 faac 	bl	80092e4 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d0f8      	beq.n	8000d84 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	482e      	ldr	r0, [pc, #184]	; (8000e50 <i2cTest+0x158>)
 8000d98:	f008 fabb 	bl	8009312 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f007 fcd1 	bl	8008744 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000da2:	bf00      	nop
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	482a      	ldr	r0, [pc, #168]	; (8000e50 <i2cTest+0x158>)
 8000da8:	f008 fa9c 	bl	80092e4 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d0f8      	beq.n	8000da4 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4826      	ldr	r0, [pc, #152]	; (8000e50 <i2cTest+0x158>)
 8000db8:	f008 faab 	bl	8009312 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000dbc:	200a      	movs	r0, #10
 8000dbe:	f007 fcc1 	bl	8008744 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000dc2:	bf00      	nop
 8000dc4:	2140      	movs	r1, #64	; 0x40
 8000dc6:	4822      	ldr	r0, [pc, #136]	; (8000e50 <i2cTest+0x158>)
 8000dc8:	f008 fa8c 	bl	80092e4 <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d1f8      	bne.n	8000dc4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	481e      	ldr	r0, [pc, #120]	; (8000e50 <i2cTest+0x158>)
 8000dd8:	f008 fa9b 	bl	8009312 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f007 fcb1 	bl	8008744 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000de2:	bf00      	nop
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	481a      	ldr	r0, [pc, #104]	; (8000e50 <i2cTest+0x158>)
 8000de8:	f008 fa7c 	bl	80092e4 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d1f8      	bne.n	8000de4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4619      	mov	r1, r3
 8000e06:	4812      	ldr	r0, [pc, #72]	; (8000e50 <i2cTest+0x158>)
 8000e08:	f008 f80c 	bl	8008e24 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <i2cTest+0x154>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <i2cTest+0x154>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e1a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <i2cTest+0x154>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <i2cTest+0x154>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e2a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <i2cTest+0x154>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <i2cTest+0x154>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0201 	orr.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <i2cTest+0x154>)
 8000e3e:	f008 fa99 	bl	8009374 <HAL_I2C_Init>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200002b8 	.word	0x200002b8
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000e5e:	20c8      	movs	r0, #200	; 0xc8
 8000e60:	f007 fc70 	bl	8008744 <HAL_Delay>
	lcd_clear();
 8000e64:	f006 ff44 	bl	8007cf0 <lcd_clear>
	if(type == 1 && page == 0) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d143      	bne.n	8000ef6 <printTemplate+0xa2>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d140      	bne.n	8000ef6 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000e74:	4a9d      	ldr	r2, [pc, #628]	; (80010ec <printTemplate+0x298>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f006 ff0d 	bl	8007c98 <lcd_print>
		lcd_print(2, 3, "0");
 8000e7e:	4a9c      	ldr	r2, [pc, #624]	; (80010f0 <printTemplate+0x29c>)
 8000e80:	2103      	movs	r1, #3
 8000e82:	2002      	movs	r0, #2
 8000e84:	f006 ff08 	bl	8007c98 <lcd_print>
		lcd_print(2, 4, "1");
 8000e88:	4a9a      	ldr	r2, [pc, #616]	; (80010f4 <printTemplate+0x2a0>)
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f006 ff03 	bl	8007c98 <lcd_print>
		lcd_print(2, 5, "2");
 8000e92:	4a99      	ldr	r2, [pc, #612]	; (80010f8 <printTemplate+0x2a4>)
 8000e94:	2105      	movs	r1, #5
 8000e96:	2002      	movs	r0, #2
 8000e98:	f006 fefe 	bl	8007c98 <lcd_print>
		lcd_print(2, 6, "3");
 8000e9c:	4a97      	ldr	r2, [pc, #604]	; (80010fc <printTemplate+0x2a8>)
 8000e9e:	2106      	movs	r1, #6
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f006 fef9 	bl	8007c98 <lcd_print>
		lcd_print(2, 7, "4");
 8000ea6:	4a96      	ldr	r2, [pc, #600]	; (8001100 <printTemplate+0x2ac>)
 8000ea8:	2107      	movs	r1, #7
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f006 fef4 	bl	8007c98 <lcd_print>
		lcd_print(2, 10, "5");
 8000eb0:	4a94      	ldr	r2, [pc, #592]	; (8001104 <printTemplate+0x2b0>)
 8000eb2:	210a      	movs	r1, #10
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f006 feef 	bl	8007c98 <lcd_print>
		lcd_print(2, 11, "6");
 8000eba:	4a93      	ldr	r2, [pc, #588]	; (8001108 <printTemplate+0x2b4>)
 8000ebc:	210b      	movs	r1, #11
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f006 feea 	bl	8007c98 <lcd_print>
		lcd_print(2, 12, "7");
 8000ec4:	4a91      	ldr	r2, [pc, #580]	; (800110c <printTemplate+0x2b8>)
 8000ec6:	210c      	movs	r1, #12
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f006 fee5 	bl	8007c98 <lcd_print>
		lcd_print(2, 13, "8");
 8000ece:	4a90      	ldr	r2, [pc, #576]	; (8001110 <printTemplate+0x2bc>)
 8000ed0:	210d      	movs	r1, #13
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f006 fee0 	bl	8007c98 <lcd_print>
		lcd_print(2, 14, "9");
 8000ed8:	4a8e      	ldr	r2, [pc, #568]	; (8001114 <printTemplate+0x2c0>)
 8000eda:	210e      	movs	r1, #14
 8000edc:	2002      	movs	r0, #2
 8000ede:	f006 fedb 	bl	8007c98 <lcd_print>
		lcd_print(1, 5, machineID);
 8000ee2:	4a8d      	ldr	r2, [pc, #564]	; (8001118 <printTemplate+0x2c4>)
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f006 fed6 	bl	8007c98 <lcd_print>
		lcd_gotoxy(2, 3);
 8000eec:	2103      	movs	r1, #3
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f006 feb3 	bl	8007c5a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000ef4:	e0f5      	b.n	80010e2 <printTemplate+0x28e>
	} else if(type == 2) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d178      	bne.n	8000fee <printTemplate+0x19a>
		if(page == 1) {
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d114      	bne.n	8000f2c <printTemplate+0xd8>
			lcd_clear();
 8000f02:	f006 fef5 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 8000f06:	2064      	movs	r0, #100	; 0x64
 8000f08:	f007 fc1c 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f0c:	4a83      	ldr	r2, [pc, #524]	; (800111c <printTemplate+0x2c8>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2001      	movs	r0, #1
 8000f12:	f006 fec1 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f16:	4a82      	ldr	r2, [pc, #520]	; (8001120 <printTemplate+0x2cc>)
 8000f18:	2107      	movs	r1, #7
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f006 febc 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f20:	4a80      	ldr	r2, [pc, #512]	; (8001124 <printTemplate+0x2d0>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	2002      	movs	r0, #2
 8000f26:	f006 feb7 	bl	8007c98 <lcd_print>
}
 8000f2a:	e0da      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 2) {
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d114      	bne.n	8000f5c <printTemplate+0x108>
			lcd_clear();
 8000f32:	f006 fedd 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 8000f36:	2064      	movs	r0, #100	; 0x64
 8000f38:	f007 fc04 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f3c:	4a77      	ldr	r2, [pc, #476]	; (800111c <printTemplate+0x2c8>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2001      	movs	r0, #1
 8000f42:	f006 fea9 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f46:	4a76      	ldr	r2, [pc, #472]	; (8001120 <printTemplate+0x2cc>)
 8000f48:	2107      	movs	r1, #7
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f006 fea4 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f50:	4a75      	ldr	r2, [pc, #468]	; (8001128 <printTemplate+0x2d4>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	2002      	movs	r0, #2
 8000f56:	f006 fe9f 	bl	8007c98 <lcd_print>
}
 8000f5a:	e0c2      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 3) {
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d114      	bne.n	8000f8c <printTemplate+0x138>
			lcd_clear();
 8000f62:	f006 fec5 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f007 fbec 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f6c:	4a6b      	ldr	r2, [pc, #428]	; (800111c <printTemplate+0x2c8>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f006 fe91 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f76:	4a6a      	ldr	r2, [pc, #424]	; (8001120 <printTemplate+0x2cc>)
 8000f78:	2107      	movs	r1, #7
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 fe8c 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000f80:	4a6a      	ldr	r2, [pc, #424]	; (800112c <printTemplate+0x2d8>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2002      	movs	r0, #2
 8000f86:	f006 fe87 	bl	8007c98 <lcd_print>
}
 8000f8a:	e0aa      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 4) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d114      	bne.n	8000fbc <printTemplate+0x168>
			lcd_clear();
 8000f92:	f006 fead 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f007 fbd4 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f9c:	4a5f      	ldr	r2, [pc, #380]	; (800111c <printTemplate+0x2c8>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 fe79 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fa6:	4a5e      	ldr	r2, [pc, #376]	; (8001120 <printTemplate+0x2cc>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2001      	movs	r0, #1
 8000fac:	f006 fe74 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fb0:	4a5f      	ldr	r2, [pc, #380]	; (8001130 <printTemplate+0x2dc>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f006 fe6f 	bl	8007c98 <lcd_print>
}
 8000fba:	e092      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 5) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	f040 808f 	bne.w	80010e2 <printTemplate+0x28e>
			lcd_clear();
 8000fc4:	f006 fe94 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	f007 fbbb 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fce:	4a53      	ldr	r2, [pc, #332]	; (800111c <printTemplate+0x2c8>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f006 fe60 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fd8:	4a51      	ldr	r2, [pc, #324]	; (8001120 <printTemplate+0x2cc>)
 8000fda:	2107      	movs	r1, #7
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f006 fe5b 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000fe2:	4a54      	ldr	r2, [pc, #336]	; (8001134 <printTemplate+0x2e0>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f006 fe56 	bl	8007c98 <lcd_print>
}
 8000fec:	e079      	b.n	80010e2 <printTemplate+0x28e>
	} else if(type == 3) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d176      	bne.n	80010e2 <printTemplate+0x28e>
		if(page == 1) {
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d114      	bne.n	8001024 <printTemplate+0x1d0>
			lcd_clear();
 8000ffa:	f006 fe79 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	; 0x64
 8001000:	f007 fba0 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <printTemplate+0x2e4>)
 8001006:	2101      	movs	r1, #1
 8001008:	2001      	movs	r0, #1
 800100a:	f006 fe45 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800100e:	4a4b      	ldr	r2, [pc, #300]	; (800113c <printTemplate+0x2e8>)
 8001010:	2107      	movs	r1, #7
 8001012:	2001      	movs	r0, #1
 8001014:	f006 fe40 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001018:	4a42      	ldr	r2, [pc, #264]	; (8001124 <printTemplate+0x2d0>)
 800101a:	2101      	movs	r1, #1
 800101c:	2002      	movs	r0, #2
 800101e:	f006 fe3b 	bl	8007c98 <lcd_print>
}
 8001022:	e05e      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 2) {
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d114      	bne.n	8001054 <printTemplate+0x200>
			lcd_clear();
 800102a:	f006 fe61 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f007 fb88 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001034:	4a40      	ldr	r2, [pc, #256]	; (8001138 <printTemplate+0x2e4>)
 8001036:	2101      	movs	r1, #1
 8001038:	2001      	movs	r0, #1
 800103a:	f006 fe2d 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800103e:	4a3f      	ldr	r2, [pc, #252]	; (800113c <printTemplate+0x2e8>)
 8001040:	2107      	movs	r1, #7
 8001042:	2001      	movs	r0, #1
 8001044:	f006 fe28 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001048:	4a37      	ldr	r2, [pc, #220]	; (8001128 <printTemplate+0x2d4>)
 800104a:	2101      	movs	r1, #1
 800104c:	2002      	movs	r0, #2
 800104e:	f006 fe23 	bl	8007c98 <lcd_print>
}
 8001052:	e046      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 3) {
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d114      	bne.n	8001084 <printTemplate+0x230>
			lcd_clear();
 800105a:	f006 fe49 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f007 fb70 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001064:	4a34      	ldr	r2, [pc, #208]	; (8001138 <printTemplate+0x2e4>)
 8001066:	2101      	movs	r1, #1
 8001068:	2001      	movs	r0, #1
 800106a:	f006 fe15 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800106e:	4a33      	ldr	r2, [pc, #204]	; (800113c <printTemplate+0x2e8>)
 8001070:	2107      	movs	r1, #7
 8001072:	2001      	movs	r0, #1
 8001074:	f006 fe10 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001078:	4a2c      	ldr	r2, [pc, #176]	; (800112c <printTemplate+0x2d8>)
 800107a:	2101      	movs	r1, #1
 800107c:	2002      	movs	r0, #2
 800107e:	f006 fe0b 	bl	8007c98 <lcd_print>
}
 8001082:	e02e      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 4) {
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d114      	bne.n	80010b4 <printTemplate+0x260>
			lcd_clear();
 800108a:	f006 fe31 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f007 fb58 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <printTemplate+0x2e4>)
 8001096:	2101      	movs	r1, #1
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fdfd 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800109e:	4a27      	ldr	r2, [pc, #156]	; (800113c <printTemplate+0x2e8>)
 80010a0:	2107      	movs	r1, #7
 80010a2:	2001      	movs	r0, #1
 80010a4:	f006 fdf8 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <printTemplate+0x2dc>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	2002      	movs	r0, #2
 80010ae:	f006 fdf3 	bl	8007c98 <lcd_print>
}
 80010b2:	e016      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 5) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d113      	bne.n	80010e2 <printTemplate+0x28e>
			lcd_clear();
 80010ba:	f006 fe19 	bl	8007cf0 <lcd_clear>
			HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f007 fb40 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c4:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <printTemplate+0x2e4>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	2001      	movs	r0, #1
 80010ca:	f006 fde5 	bl	8007c98 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010ce:	4a1b      	ldr	r2, [pc, #108]	; (800113c <printTemplate+0x2e8>)
 80010d0:	2107      	movs	r1, #7
 80010d2:	2001      	movs	r0, #1
 80010d4:	f006 fde0 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <printTemplate+0x2e0>)
 80010da:	2101      	movs	r1, #1
 80010dc:	2002      	movs	r0, #2
 80010de:	f006 fddb 	bl	8007c98 <lcd_print>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0800cfa8 	.word	0x0800cfa8
 80010f0:	0800cfb0 	.word	0x0800cfb0
 80010f4:	0800cfb4 	.word	0x0800cfb4
 80010f8:	0800cfb8 	.word	0x0800cfb8
 80010fc:	0800cfbc 	.word	0x0800cfbc
 8001100:	0800cfc0 	.word	0x0800cfc0
 8001104:	0800cfc4 	.word	0x0800cfc4
 8001108:	0800cfc8 	.word	0x0800cfc8
 800110c:	0800cfcc 	.word	0x0800cfcc
 8001110:	0800cfd0 	.word	0x0800cfd0
 8001114:	0800cfd4 	.word	0x0800cfd4
 8001118:	200001a4 	.word	0x200001a4
 800111c:	0800cfd8 	.word	0x0800cfd8
 8001120:	200001b0 	.word	0x200001b0
 8001124:	0800cfe0 	.word	0x0800cfe0
 8001128:	0800cff4 	.word	0x0800cff4
 800112c:	0800d008 	.word	0x0800d008
 8001130:	0800d01c 	.word	0x0800d01c
 8001134:	0800d030 	.word	0x0800d030
 8001138:	0800d044 	.word	0x0800d044
 800113c:	200001c4 	.word	0x200001c4

08001140 <checkSlideVal>:

int checkSlideVal(int state) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d111      	bne.n	8001172 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800114e:	2101      	movs	r1, #1
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <checkSlideVal+0x60>)
 8001152:	f008 f8c7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <checkSlideVal+0x20>
			return 34;
 800115c:	2322      	movs	r3, #34	; 0x22
 800115e:	e01b      	b.n	8001198 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001160:	2108      	movs	r1, #8
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <checkSlideVal+0x64>)
 8001164:	f008 f8be 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d113      	bne.n	8001196 <checkSlideVal+0x56>
			return 32;
 800116e:	2320      	movs	r3, #32
 8001170:	e012      	b.n	8001198 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001172:	2101      	movs	r1, #1
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <checkSlideVal+0x60>)
 8001176:	f008 f8b5 	bl	80092e4 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <checkSlideVal+0x44>
			return 35;
 8001180:	2323      	movs	r3, #35	; 0x23
 8001182:	e009      	b.n	8001198 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001184:	2108      	movs	r1, #8
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <checkSlideVal+0x64>)
 8001188:	f008 f8ac 	bl	80092e4 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <checkSlideVal+0x56>
			return 33;
 8001192:	2321      	movs	r3, #33	; 0x21
 8001194:	e000      	b.n	8001198 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40011000 	.word	0x40011000

080011a8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff f834 	bl	8000224 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80011c4:	e08a      	b.n	80012dc <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80011c6:	6838      	ldr	r0, [r7, #0]
 80011c8:	f7ff ffba 	bl	8001140 <checkSlideVal>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd07      	ble.n	80011e2 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80011d2:	6838      	ldr	r0, [r7, #0]
 80011d4:	f7ff ffb4 	bl	8001140 <checkSlideVal>
 80011d8:	4603      	mov	r3, r0
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <slideText+0x148>)
 80011de:	701a      	strb	r2, [r3, #0]
			break;
 80011e0:	e081      	b.n	80012e6 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	e075      	b.n	80012d4 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f7ff ffa9 	bl	8001140 <checkSlideVal>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dd09      	ble.n	8001208 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f7ff ffa3 	bl	8001140 <checkSlideVal>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <slideText+0x148>)
 8001200:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001206:	e069      	b.n	80012dc <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	4413      	add	r3, r2
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	e029      	b.n	8001266 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001212:	6838      	ldr	r0, [r7, #0]
 8001214:	f7ff ff94 	bl	8001140 <checkSlideVal>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	dd0b      	ble.n	8001236 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f7ff ff8e 	bl	8001140 <checkSlideVal>
 8001224:	4603      	mov	r3, r0
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <slideText+0x148>)
 800122a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001234:	e01d      	b.n	8001272 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	b2d8      	uxtb	r0, r3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b2d9      	uxtb	r1, r3
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	461a      	mov	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	f006 fd34 	bl	8007cc2 <lcd_print_char>
				HAL_Delay(30);
 800125a:	201e      	movs	r0, #30
 800125c:	f007 fa72 	bl	8008744 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	3301      	adds	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	7dfa      	ldrb	r2, [r7, #23]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbcf      	blt.n	8001212 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	3b01      	subs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	e023      	b.n	80012c2 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7ff ff60 	bl	8001140 <checkSlideVal>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	dd0b      	ble.n	800129e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f7ff ff5a 	bl	8001140 <checkSlideVal>
 800128c:	4603      	mov	r3, r0
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <slideText+0x148>)
 8001292:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800129c:	e017      	b.n	80012ce <slideText+0x126>
				}
			     if(j >= startPos) {
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	db0a      	blt.n	80012bc <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	b2d1      	uxtb	r1, r2
 80012ae:	2220      	movs	r2, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 fd06 	bl	8007cc2 <lcd_print_char>
			    	 HAL_Delay(30);
 80012b6:	201e      	movs	r0, #30
 80012b8:	f007 fa44 	bl	8008744 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	3b01      	subs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	7dfa      	ldrb	r2, [r7, #23]
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	dad5      	bge.n	800127a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	3301      	adds	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	6a3a      	ldr	r2, [r7, #32]
 80012d8:	429a      	cmp	r2, r3
 80012da:	db85      	blt.n	80011e8 <slideText+0x40>
	while(mainLoopVal == 1) {
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	2b01      	cmp	r3, #1
 80012e0:	f43f af71 	beq.w	80011c6 <slideText+0x1e>
			     }
			}
		}
	}
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000228 	.word	0x20000228

080012f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012f8:	f3bf 8f4f 	dsb	sy
}
 80012fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <__NVIC_SystemReset+0x24>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001306:	4904      	ldr	r1, [pc, #16]	; (8001318 <__NVIC_SystemReset+0x24>)
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_SystemReset+0x28>)
 800130a:	4313      	orrs	r3, r2
 800130c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <__NVIC_SystemReset+0x20>
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	05fa0004 	.word	0x05fa0004

08001320 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001326:	2101      	movs	r1, #1
 8001328:	488e      	ldr	r0, [pc, #568]	; (8001564 <menu+0x244>)
 800132a:	f007 ffdb 	bl	80092e4 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	f040 808e 	bne.w	8001452 <menu+0x132>
 8001336:	4b8c      	ldr	r3, [pc, #560]	; (8001568 <menu+0x248>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f083 0301 	eor.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 8086 	beq.w	8001452 <menu+0x132>
		menuSayac = menuSayac+1;
 8001346:	4b89      	ldr	r3, [pc, #548]	; (800156c <menu+0x24c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b87      	ldr	r3, [pc, #540]	; (800156c <menu+0x24c>)
 8001350:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001352:	4b86      	ldr	r3, [pc, #536]	; (800156c <menu+0x24c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b24      	cmp	r3, #36	; 0x24
 8001358:	d102      	bne.n	8001360 <menu+0x40>
			menuSayac = 1;
 800135a:	4b84      	ldr	r3, [pc, #528]	; (800156c <menu+0x24c>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001360:	4b82      	ldr	r3, [pc, #520]	; (800156c <menu+0x24c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b12      	cmp	r3, #18
 8001366:	d106      	bne.n	8001376 <menu+0x56>
 8001368:	4b81      	ldr	r3, [pc, #516]	; (8001570 <menu+0x250>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <menu+0x56>
			menuSayac = 21;
 8001370:	4b7e      	ldr	r3, [pc, #504]	; (800156c <menu+0x24c>)
 8001372:	2215      	movs	r2, #21
 8001374:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001376:	4b7d      	ldr	r3, [pc, #500]	; (800156c <menu+0x24c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b08      	cmp	r3, #8
 800137c:	d106      	bne.n	800138c <menu+0x6c>
 800137e:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <menu+0x254>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <menu+0x6c>
			menuSayac = 16;
 8001386:	4b79      	ldr	r3, [pc, #484]	; (800156c <menu+0x24c>)
 8001388:	2210      	movs	r2, #16
 800138a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800138c:	4b77      	ldr	r3, [pc, #476]	; (800156c <menu+0x24c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b0d      	cmp	r3, #13
 8001392:	d106      	bne.n	80013a2 <menu+0x82>
 8001394:	4b77      	ldr	r3, [pc, #476]	; (8001574 <menu+0x254>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <menu+0x82>
			menuSayac = 16;
 800139c:	4b73      	ldr	r3, [pc, #460]	; (800156c <menu+0x24c>)
 800139e:	2210      	movs	r2, #16
 80013a0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80013a2:	4b72      	ldr	r3, [pc, #456]	; (800156c <menu+0x24c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b09      	cmp	r3, #9
 80013a8:	d106      	bne.n	80013b8 <menu+0x98>
 80013aa:	4b72      	ldr	r3, [pc, #456]	; (8001574 <menu+0x254>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d102      	bne.n	80013b8 <menu+0x98>
			menuSayac = 13;
 80013b2:	4b6e      	ldr	r3, [pc, #440]	; (800156c <menu+0x24c>)
 80013b4:	220d      	movs	r2, #13
 80013b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013b8:	4b6c      	ldr	r3, [pc, #432]	; (800156c <menu+0x24c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b0a      	cmp	r3, #10
 80013be:	d10a      	bne.n	80013d6 <menu+0xb6>
 80013c0:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <menu+0x258>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d003      	beq.n	80013d0 <menu+0xb0>
 80013c8:	4b6b      	ldr	r3, [pc, #428]	; (8001578 <menu+0x258>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d102      	bne.n	80013d6 <menu+0xb6>
			menuSayac = 11;
 80013d0:	4b66      	ldr	r3, [pc, #408]	; (800156c <menu+0x24c>)
 80013d2:	220b      	movs	r2, #11
 80013d4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <menu+0x24c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d10e      	bne.n	80013fc <menu+0xdc>
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <menu+0x25c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d003      	beq.n	80013ee <menu+0xce>
 80013e6:	4b65      	ldr	r3, [pc, #404]	; (800157c <menu+0x25c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d106      	bne.n	80013fc <menu+0xdc>
 80013ee:	4b61      	ldr	r3, [pc, #388]	; (8001574 <menu+0x254>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d102      	bne.n	80013fc <menu+0xdc>
			menuSayac = 16;
 80013f6:	4b5d      	ldr	r3, [pc, #372]	; (800156c <menu+0x24c>)
 80013f8:	2210      	movs	r2, #16
 80013fa:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80013fc:	4b5b      	ldr	r3, [pc, #364]	; (800156c <menu+0x24c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b0c      	cmp	r3, #12
 8001402:	d10e      	bne.n	8001422 <menu+0x102>
 8001404:	4b5d      	ldr	r3, [pc, #372]	; (800157c <menu+0x25c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d003      	beq.n	8001414 <menu+0xf4>
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <menu+0x25c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d106      	bne.n	8001422 <menu+0x102>
 8001414:	4b57      	ldr	r3, [pc, #348]	; (8001574 <menu+0x254>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d102      	bne.n	8001422 <menu+0x102>
			menuSayac = 13;
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <menu+0x24c>)
 800141e:	220d      	movs	r2, #13
 8001420:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001422:	4b52      	ldr	r3, [pc, #328]	; (800156c <menu+0x24c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	d106      	bne.n	8001438 <menu+0x118>
 800142a:	4b55      	ldr	r3, [pc, #340]	; (8001580 <menu+0x260>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d102      	bne.n	8001438 <menu+0x118>
			menuSayac = 16;
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <menu+0x24c>)
 8001434:	2210      	movs	r2, #16
 8001436:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001438:	4b4c      	ldr	r3, [pc, #304]	; (800156c <menu+0x24c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b18      	cmp	r3, #24
 800143e:	d106      	bne.n	800144e <menu+0x12e>
 8001440:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <menu+0x250>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <menu+0x12e>
			menuSayac = 26;
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <menu+0x24c>)
 800144a:	221a      	movs	r2, #26
 800144c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800144e:	f003 fb31 	bl	8004ab4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001452:	2108      	movs	r1, #8
 8001454:	484b      	ldr	r0, [pc, #300]	; (8001584 <menu+0x264>)
 8001456:	f007 ff45 	bl	80092e4 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d175      	bne.n	800154c <menu+0x22c>
 8001460:	4b41      	ldr	r3, [pc, #260]	; (8001568 <menu+0x248>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f083 0301 	eor.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d06e      	beq.n	800154c <menu+0x22c>
		if (menuSayac <= 1) {
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <menu+0x24c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d802      	bhi.n	800147c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001476:	4b3d      	ldr	r3, [pc, #244]	; (800156c <menu+0x24c>)
 8001478:	2224      	movs	r2, #36	; 0x24
 800147a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800147c:	4b3b      	ldr	r3, [pc, #236]	; (800156c <menu+0x24c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <menu+0x24c>)
 8001486:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001488:	4b38      	ldr	r3, [pc, #224]	; (800156c <menu+0x24c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b14      	cmp	r3, #20
 800148e:	d106      	bne.n	800149e <menu+0x17e>
 8001490:	4b37      	ldr	r3, [pc, #220]	; (8001570 <menu+0x250>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <menu+0x17e>
			menuSayac = 17;
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <menu+0x24c>)
 800149a:	2211      	movs	r2, #17
 800149c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800149e:	4b33      	ldr	r3, [pc, #204]	; (800156c <menu+0x24c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	d106      	bne.n	80014b4 <menu+0x194>
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <menu+0x254>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <menu+0x194>
			menuSayac = 7;
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <menu+0x24c>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <menu+0x24c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d106      	bne.n	80014ca <menu+0x1aa>
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <menu+0x254>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d102      	bne.n	80014ca <menu+0x1aa>
			menuSayac = 12;
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <menu+0x24c>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <menu+0x24c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d106      	bne.n	80014e0 <menu+0x1c0>
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <menu+0x254>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d102      	bne.n	80014e0 <menu+0x1c0>
			menuSayac = 8;
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <menu+0x24c>)
 80014dc:	2208      	movs	r2, #8
 80014de:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <menu+0x24c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b0a      	cmp	r3, #10
 80014e6:	d10a      	bne.n	80014fe <menu+0x1de>
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <menu+0x258>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d003      	beq.n	80014f8 <menu+0x1d8>
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <menu+0x258>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d102      	bne.n	80014fe <menu+0x1de>
			menuSayac = 9;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <menu+0x24c>)
 80014fa:	2209      	movs	r2, #9
 80014fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <menu+0x24c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d10a      	bne.n	800151c <menu+0x1fc>
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <menu+0x25c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d003      	beq.n	8001516 <menu+0x1f6>
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <menu+0x25c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d102      	bne.n	800151c <menu+0x1fc>
			menuSayac = 11;
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <menu+0x24c>)
 8001518:	220b      	movs	r2, #11
 800151a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <menu+0x24c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d106      	bne.n	8001532 <menu+0x212>
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <menu+0x260>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d102      	bne.n	8001532 <menu+0x212>
			menuSayac = 14;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <menu+0x24c>)
 800152e:	220e      	movs	r2, #14
 8001530:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <menu+0x24c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b19      	cmp	r3, #25
 8001538:	d106      	bne.n	8001548 <menu+0x228>
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <menu+0x250>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <menu+0x228>
			menuSayac = 23;
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <menu+0x24c>)
 8001544:	2217      	movs	r2, #23
 8001546:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001548:	f003 fab4 	bl	8004ab4 <bekle>
	}

	if (menuSayac == 0) {
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <menu+0x24c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d133      	bne.n	80015bc <menu+0x29c>
		if(dilSecim == 0) {
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <menu+0x268>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d121      	bne.n	80015a0 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <menu+0x26c>)
 800155e:	2101      	movs	r1, #1
 8001560:	2001      	movs	r0, #1
 8001562:	e015      	b.n	8001590 <menu+0x270>
 8001564:	40010800 	.word	0x40010800
 8001568:	20000257 	.word	0x20000257
 800156c:	20000228 	.word	0x20000228
 8001570:	20000237 	.word	0x20000237
 8001574:	20000230 	.word	0x20000230
 8001578:	20000231 	.word	0x20000231
 800157c:	20000232 	.word	0x20000232
 8001580:	20000233 	.word	0x20000233
 8001584:	40011000 	.word	0x40011000
 8001588:	20000249 	.word	0x20000249
 800158c:	0800d04c 	.word	0x0800d04c
 8001590:	f006 fb82 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001594:	4a94      	ldr	r2, [pc, #592]	; (80017e8 <menu+0x4c8>)
 8001596:	2101      	movs	r1, #1
 8001598:	2002      	movs	r0, #2
 800159a:	f006 fb7d 	bl	8007c98 <lcd_print>
 800159e:	e00d      	b.n	80015bc <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80015a0:	4b92      	ldr	r3, [pc, #584]	; (80017ec <menu+0x4cc>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d109      	bne.n	80015bc <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80015a8:	4a91      	ldr	r2, [pc, #580]	; (80017f0 <menu+0x4d0>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	2001      	movs	r0, #1
 80015ae:	f006 fb73 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80015b2:	4a90      	ldr	r2, [pc, #576]	; (80017f4 <menu+0x4d4>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	2002      	movs	r0, #2
 80015b8:	f006 fb6e 	bl	8007c98 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80015bc:	4b8e      	ldr	r3, [pc, #568]	; (80017f8 <menu+0x4d8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 82b5 	bne.w	8001b30 <menu+0x810>
		if(dilSecim == 0) {
 80015c6:	4b89      	ldr	r3, [pc, #548]	; (80017ec <menu+0x4cc>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80015ce:	4a8b      	ldr	r2, [pc, #556]	; (80017fc <menu+0x4dc>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	2001      	movs	r0, #1
 80015d4:	f006 fb60 	bl	8007c98 <lcd_print>
 80015d8:	e008      	b.n	80015ec <menu+0x2cc>
		} else if(dilSecim == 1) {
 80015da:	4b84      	ldr	r3, [pc, #528]	; (80017ec <menu+0x4cc>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d104      	bne.n	80015ec <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80015e2:	4a87      	ldr	r2, [pc, #540]	; (8001800 <menu+0x4e0>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	2001      	movs	r0, #1
 80015e8:	f006 fb56 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80015ec:	4b85      	ldr	r3, [pc, #532]	; (8001804 <menu+0x4e4>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d123      	bne.n	800163c <menu+0x31c>
			if(dilSecim == 0) {
 80015f4:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <menu+0x4cc>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d105      	bne.n	8001608 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80015fc:	4a82      	ldr	r2, [pc, #520]	; (8001808 <menu+0x4e8>)
 80015fe:	2101      	movs	r1, #1
 8001600:	2002      	movs	r0, #2
 8001602:	f006 fb49 	bl	8007c98 <lcd_print>
 8001606:	e008      	b.n	800161a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001608:	4b78      	ldr	r3, [pc, #480]	; (80017ec <menu+0x4cc>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d104      	bne.n	800161a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001610:	4a7e      	ldr	r2, [pc, #504]	; (800180c <menu+0x4ec>)
 8001612:	2101      	movs	r1, #1
 8001614:	2002      	movs	r0, #2
 8001616:	f006 fb3f 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800161a:	4a7d      	ldr	r2, [pc, #500]	; (8001810 <menu+0x4f0>)
 800161c:	210f      	movs	r1, #15
 800161e:	2002      	movs	r0, #2
 8001620:	f006 fb3a 	bl	8007c98 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001624:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <menu+0x4f4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	220a      	movs	r2, #10
 800162a:	497b      	ldr	r1, [pc, #492]	; (8001818 <menu+0x4f8>)
 800162c:	4618      	mov	r0, r3
 800162e:	f00a fe85 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 8001632:	4a79      	ldr	r2, [pc, #484]	; (8001818 <menu+0x4f8>)
 8001634:	210e      	movs	r1, #14
 8001636:	2002      	movs	r0, #2
 8001638:	f006 fb2e 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800163c:	4b71      	ldr	r3, [pc, #452]	; (8001804 <menu+0x4e4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d123      	bne.n	800168c <menu+0x36c>
			if(dilSecim == 0) {
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <menu+0x4cc>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d105      	bne.n	8001658 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800164c:	4a73      	ldr	r2, [pc, #460]	; (800181c <menu+0x4fc>)
 800164e:	2101      	movs	r1, #1
 8001650:	2002      	movs	r0, #2
 8001652:	f006 fb21 	bl	8007c98 <lcd_print>
 8001656:	e008      	b.n	800166a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001658:	4b64      	ldr	r3, [pc, #400]	; (80017ec <menu+0x4cc>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d104      	bne.n	800166a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001660:	4a6f      	ldr	r2, [pc, #444]	; (8001820 <menu+0x500>)
 8001662:	2101      	movs	r1, #1
 8001664:	2002      	movs	r0, #2
 8001666:	f006 fb17 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800166a:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <menu+0x504>)
 800166c:	210f      	movs	r1, #15
 800166e:	2002      	movs	r0, #2
 8001670:	f006 fb12 	bl	8007c98 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001674:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <menu+0x508>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	220a      	movs	r2, #10
 800167a:	4967      	ldr	r1, [pc, #412]	; (8001818 <menu+0x4f8>)
 800167c:	4618      	mov	r0, r3
 800167e:	f00a fe5d 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 8001682:	4a65      	ldr	r2, [pc, #404]	; (8001818 <menu+0x4f8>)
 8001684:	210e      	movs	r1, #14
 8001686:	2002      	movs	r0, #2
 8001688:	f006 fb06 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <menu+0x4e4>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d123      	bne.n	80016dc <menu+0x3bc>
			if(dilSecim == 0) {
 8001694:	4b55      	ldr	r3, [pc, #340]	; (80017ec <menu+0x4cc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800169c:	4a63      	ldr	r2, [pc, #396]	; (800182c <menu+0x50c>)
 800169e:	2101      	movs	r1, #1
 80016a0:	2002      	movs	r0, #2
 80016a2:	f006 faf9 	bl	8007c98 <lcd_print>
 80016a6:	e008      	b.n	80016ba <menu+0x39a>
			} else if(dilSecim == 1) {
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <menu+0x4cc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d104      	bne.n	80016ba <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80016b0:	4a5f      	ldr	r2, [pc, #380]	; (8001830 <menu+0x510>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	2002      	movs	r0, #2
 80016b6:	f006 faef 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016ba:	4a5a      	ldr	r2, [pc, #360]	; (8001824 <menu+0x504>)
 80016bc:	210f      	movs	r1, #15
 80016be:	2002      	movs	r0, #2
 80016c0:	f006 faea 	bl	8007c98 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80016c4:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <menu+0x514>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	220a      	movs	r2, #10
 80016ca:	4953      	ldr	r1, [pc, #332]	; (8001818 <menu+0x4f8>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00a fe35 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 80016d2:	4a51      	ldr	r2, [pc, #324]	; (8001818 <menu+0x4f8>)
 80016d4:	210e      	movs	r1, #14
 80016d6:	2002      	movs	r0, #2
 80016d8:	f006 fade 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80016dc:	4b49      	ldr	r3, [pc, #292]	; (8001804 <menu+0x4e4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d123      	bne.n	800172c <menu+0x40c>
			if(dilSecim == 0) {
 80016e4:	4b41      	ldr	r3, [pc, #260]	; (80017ec <menu+0x4cc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <menu+0x518>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	2002      	movs	r0, #2
 80016f2:	f006 fad1 	bl	8007c98 <lcd_print>
 80016f6:	e008      	b.n	800170a <menu+0x3ea>
			} else if(dilSecim == 1) {
 80016f8:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <menu+0x4cc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d104      	bne.n	800170a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001700:	4a4e      	ldr	r2, [pc, #312]	; (800183c <menu+0x51c>)
 8001702:	2101      	movs	r1, #1
 8001704:	2002      	movs	r0, #2
 8001706:	f006 fac7 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800170a:	4a46      	ldr	r2, [pc, #280]	; (8001824 <menu+0x504>)
 800170c:	210f      	movs	r1, #15
 800170e:	2002      	movs	r0, #2
 8001710:	f006 fac2 	bl	8007c98 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001714:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <menu+0x520>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	220a      	movs	r2, #10
 800171a:	493f      	ldr	r1, [pc, #252]	; (8001818 <menu+0x4f8>)
 800171c:	4618      	mov	r0, r3
 800171e:	f00a fe0d 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 8001722:	4a3d      	ldr	r2, [pc, #244]	; (8001818 <menu+0x4f8>)
 8001724:	210e      	movs	r1, #14
 8001726:	2002      	movs	r0, #2
 8001728:	f006 fab6 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800172c:	4b35      	ldr	r3, [pc, #212]	; (8001804 <menu+0x4e4>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d123      	bne.n	800177c <menu+0x45c>
			if(dilSecim == 0) {
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <menu+0x4cc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800173c:	4a41      	ldr	r2, [pc, #260]	; (8001844 <menu+0x524>)
 800173e:	2101      	movs	r1, #1
 8001740:	2002      	movs	r0, #2
 8001742:	f006 faa9 	bl	8007c98 <lcd_print>
 8001746:	e008      	b.n	800175a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <menu+0x4cc>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d104      	bne.n	800175a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001750:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <menu+0x528>)
 8001752:	2101      	movs	r1, #1
 8001754:	2002      	movs	r0, #2
 8001756:	f006 fa9f 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800175a:	4a32      	ldr	r2, [pc, #200]	; (8001824 <menu+0x504>)
 800175c:	210f      	movs	r1, #15
 800175e:	2002      	movs	r0, #2
 8001760:	f006 fa9a 	bl	8007c98 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001764:	4b39      	ldr	r3, [pc, #228]	; (800184c <menu+0x52c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	220a      	movs	r2, #10
 800176a:	492b      	ldr	r1, [pc, #172]	; (8001818 <menu+0x4f8>)
 800176c:	4618      	mov	r0, r3
 800176e:	f00a fde5 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 8001772:	4a29      	ldr	r2, [pc, #164]	; (8001818 <menu+0x4f8>)
 8001774:	210e      	movs	r1, #14
 8001776:	2002      	movs	r0, #2
 8001778:	f006 fa8e 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <menu+0x4e4>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b05      	cmp	r3, #5
 8001782:	d123      	bne.n	80017cc <menu+0x4ac>
			if(dilSecim == 0) {
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <menu+0x4cc>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d105      	bne.n	8001798 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800178c:	4a30      	ldr	r2, [pc, #192]	; (8001850 <menu+0x530>)
 800178e:	2101      	movs	r1, #1
 8001790:	2002      	movs	r0, #2
 8001792:	f006 fa81 	bl	8007c98 <lcd_print>
 8001796:	e008      	b.n	80017aa <menu+0x48a>
			} else if(dilSecim == 1) {
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <menu+0x4cc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d104      	bne.n	80017aa <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80017a0:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <menu+0x534>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	2002      	movs	r0, #2
 80017a6:	f006 fa77 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <menu+0x504>)
 80017ac:	210f      	movs	r1, #15
 80017ae:	2002      	movs	r0, #2
 80017b0:	f006 fa72 	bl	8007c98 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <menu+0x538>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	220a      	movs	r2, #10
 80017ba:	4917      	ldr	r1, [pc, #92]	; (8001818 <menu+0x4f8>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f00a fdbd 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 80017c2:	4a15      	ldr	r2, [pc, #84]	; (8001818 <menu+0x4f8>)
 80017c4:	210e      	movs	r1, #14
 80017c6:	2002      	movs	r0, #2
 80017c8:	f006 fa66 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <menu+0x4e4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b06      	cmp	r3, #6
 80017d2:	d15f      	bne.n	8001894 <menu+0x574>
			if(dilSecim == 0) {
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <menu+0x4cc>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d141      	bne.n	8001860 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <menu+0x53c>)
 80017de:	2101      	movs	r1, #1
 80017e0:	2002      	movs	r0, #2
 80017e2:	f006 fa59 	bl	8007c98 <lcd_print>
 80017e6:	e044      	b.n	8001872 <menu+0x552>
 80017e8:	0800d060 	.word	0x0800d060
 80017ec:	20000249 	.word	0x20000249
 80017f0:	0800d074 	.word	0x0800d074
 80017f4:	0800d088 	.word	0x0800d088
 80017f8:	20000228 	.word	0x20000228
 80017fc:	0800d09c 	.word	0x0800d09c
 8001800:	0800d0b0 	.word	0x0800d0b0
 8001804:	2000022a 	.word	0x2000022a
 8001808:	0800d0c4 	.word	0x0800d0c4
 800180c:	0800d0d4 	.word	0x0800d0d4
 8001810:	0800d0e4 	.word	0x0800d0e4
 8001814:	2000024a 	.word	0x2000024a
 8001818:	2000019c 	.word	0x2000019c
 800181c:	0800d0e8 	.word	0x0800d0e8
 8001820:	0800d0f8 	.word	0x0800d0f8
 8001824:	0800d108 	.word	0x0800d108
 8001828:	2000024b 	.word	0x2000024b
 800182c:	0800d10c 	.word	0x0800d10c
 8001830:	0800d11c 	.word	0x0800d11c
 8001834:	2000024c 	.word	0x2000024c
 8001838:	0800d12c 	.word	0x0800d12c
 800183c:	0800d13c 	.word	0x0800d13c
 8001840:	2000024d 	.word	0x2000024d
 8001844:	0800d14c 	.word	0x0800d14c
 8001848:	0800d15c 	.word	0x0800d15c
 800184c:	2000024e 	.word	0x2000024e
 8001850:	0800d16c 	.word	0x0800d16c
 8001854:	0800d17c 	.word	0x0800d17c
 8001858:	2000024f 	.word	0x2000024f
 800185c:	0800d18c 	.word	0x0800d18c
			} else if(dilSecim == 1) {
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <menu+0x680>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d104      	bne.n	8001872 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001868:	4a4e      	ldr	r2, [pc, #312]	; (80019a4 <menu+0x684>)
 800186a:	2101      	movs	r1, #1
 800186c:	2002      	movs	r0, #2
 800186e:	f006 fa13 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001872:	4a4d      	ldr	r2, [pc, #308]	; (80019a8 <menu+0x688>)
 8001874:	210f      	movs	r1, #15
 8001876:	2002      	movs	r0, #2
 8001878:	f006 fa0e 	bl	8007c98 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <menu+0x68c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	220a      	movs	r2, #10
 8001882:	494b      	ldr	r1, [pc, #300]	; (80019b0 <menu+0x690>)
 8001884:	4618      	mov	r0, r3
 8001886:	f00a fd59 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 800188a:	4a49      	ldr	r2, [pc, #292]	; (80019b0 <menu+0x690>)
 800188c:	210e      	movs	r1, #14
 800188e:	2002      	movs	r0, #2
 8001890:	f006 fa02 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001894:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <menu+0x694>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b07      	cmp	r3, #7
 800189a:	d123      	bne.n	80018e4 <menu+0x5c4>
			if(dilSecim == 0) {
 800189c:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <menu+0x680>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80018a4:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <menu+0x698>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	2002      	movs	r0, #2
 80018aa:	f006 f9f5 	bl	8007c98 <lcd_print>
 80018ae:	e008      	b.n	80018c2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80018b0:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <menu+0x680>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d104      	bne.n	80018c2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80018b8:	4a40      	ldr	r2, [pc, #256]	; (80019bc <menu+0x69c>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	2002      	movs	r0, #2
 80018be:	f006 f9eb 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018c2:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <menu+0x688>)
 80018c4:	210f      	movs	r1, #15
 80018c6:	2002      	movs	r0, #2
 80018c8:	f006 f9e6 	bl	8007c98 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80018cc:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <menu+0x6a0>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	220a      	movs	r2, #10
 80018d2:	4937      	ldr	r1, [pc, #220]	; (80019b0 <menu+0x690>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00a fd31 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 80018da:	4a35      	ldr	r2, [pc, #212]	; (80019b0 <menu+0x690>)
 80018dc:	210e      	movs	r1, #14
 80018de:	2002      	movs	r0, #2
 80018e0:	f006 f9da 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <menu+0x694>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d123      	bne.n	8001934 <menu+0x614>
			if(dilSecim == 0) {
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <menu+0x680>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80018f4:	4a33      	ldr	r2, [pc, #204]	; (80019c4 <menu+0x6a4>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	2002      	movs	r0, #2
 80018fa:	f006 f9cd 	bl	8007c98 <lcd_print>
 80018fe:	e008      	b.n	8001912 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <menu+0x680>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d104      	bne.n	8001912 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001908:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <menu+0x6a8>)
 800190a:	2101      	movs	r1, #1
 800190c:	2002      	movs	r0, #2
 800190e:	f006 f9c3 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <menu+0x688>)
 8001914:	210f      	movs	r1, #15
 8001916:	2002      	movs	r0, #2
 8001918:	f006 f9be 	bl	8007c98 <lcd_print>
			itoa(hataKayit9, snum, 10);
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <menu+0x6ac>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	220a      	movs	r2, #10
 8001922:	4923      	ldr	r1, [pc, #140]	; (80019b0 <menu+0x690>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00a fd09 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 800192a:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <menu+0x690>)
 800192c:	210e      	movs	r1, #14
 800192e:	2002      	movs	r0, #2
 8001930:	f006 f9b2 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <menu+0x694>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b09      	cmp	r3, #9
 800193a:	d123      	bne.n	8001984 <menu+0x664>
			if(dilSecim == 0) {
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <menu+0x680>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001944:	4a22      	ldr	r2, [pc, #136]	; (80019d0 <menu+0x6b0>)
 8001946:	2101      	movs	r1, #1
 8001948:	2002      	movs	r0, #2
 800194a:	f006 f9a5 	bl	8007c98 <lcd_print>
 800194e:	e008      	b.n	8001962 <menu+0x642>
			} else if(dilSecim == 1) {
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <menu+0x680>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d104      	bne.n	8001962 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001958:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <menu+0x6b4>)
 800195a:	2101      	movs	r1, #1
 800195c:	2002      	movs	r0, #2
 800195e:	f006 f99b 	bl	8007c98 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <menu+0x6b8>)
 8001964:	2110      	movs	r1, #16
 8001966:	2002      	movs	r0, #2
 8001968:	f006 f996 	bl	8007c98 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <menu+0x6bc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	220a      	movs	r2, #10
 8001972:	490f      	ldr	r1, [pc, #60]	; (80019b0 <menu+0x690>)
 8001974:	4618      	mov	r0, r3
 8001976:	f00a fce1 	bl	800c33c <itoa>
			lcd_print(2, 15, snum);
 800197a:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <menu+0x690>)
 800197c:	210f      	movs	r1, #15
 800197e:	2002      	movs	r0, #2
 8001980:	f006 f98a 	bl	8007c98 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <menu+0x694>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b0a      	cmp	r3, #10
 800198a:	d134      	bne.n	80019f6 <menu+0x6d6>
			if(dilSecim == 0) {
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <menu+0x680>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d127      	bne.n	80019e4 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001994:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <menu+0x6c0>)
 8001996:	2101      	movs	r1, #1
 8001998:	2002      	movs	r0, #2
 800199a:	f006 f97d 	bl	8007c98 <lcd_print>
 800199e:	e02a      	b.n	80019f6 <menu+0x6d6>
 80019a0:	20000249 	.word	0x20000249
 80019a4:	0800d19c 	.word	0x0800d19c
 80019a8:	0800d108 	.word	0x0800d108
 80019ac:	20000250 	.word	0x20000250
 80019b0:	2000019c 	.word	0x2000019c
 80019b4:	2000022a 	.word	0x2000022a
 80019b8:	0800d1ac 	.word	0x0800d1ac
 80019bc:	0800d1bc 	.word	0x0800d1bc
 80019c0:	20000251 	.word	0x20000251
 80019c4:	0800d1cc 	.word	0x0800d1cc
 80019c8:	0800d1dc 	.word	0x0800d1dc
 80019cc:	20000252 	.word	0x20000252
 80019d0:	0800d1ec 	.word	0x0800d1ec
 80019d4:	0800d1fc 	.word	0x0800d1fc
 80019d8:	0800d20c 	.word	0x0800d20c
 80019dc:	20000253 	.word	0x20000253
 80019e0:	0800d210 	.word	0x0800d210
			} else if(dilSecim == 1) {
 80019e4:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <menu+0x8d0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d104      	bne.n	80019f6 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80019ec:	4a81      	ldr	r2, [pc, #516]	; (8001bf4 <menu+0x8d4>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	2002      	movs	r0, #2
 80019f2:	f006 f951 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019f6:	2102      	movs	r1, #2
 80019f8:	487f      	ldr	r0, [pc, #508]	; (8001bf8 <menu+0x8d8>)
 80019fa:	f007 fc73 	bl	80092e4 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d119      	bne.n	8001a38 <menu+0x718>
 8001a04:	4b7d      	ldr	r3, [pc, #500]	; (8001bfc <menu+0x8dc>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f083 0301 	eor.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d012      	beq.n	8001a38 <menu+0x718>
 8001a12:	4b7b      	ldr	r3, [pc, #492]	; (8001c00 <menu+0x8e0>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10e      	bne.n	8001a38 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a1a:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <menu+0x8e4>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <menu+0x8e4>)
 8001a24:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a26:	4b77      	ldr	r3, [pc, #476]	; (8001c04 <menu+0x8e4>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d902      	bls.n	8001a34 <menu+0x714>
				hataGostermeSirasi = 0;
 8001a2e:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <menu+0x8e4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a34:	f003 f83e 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a38:	2104      	movs	r1, #4
 8001a3a:	486f      	ldr	r0, [pc, #444]	; (8001bf8 <menu+0x8d8>)
 8001a3c:	f007 fc52 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d119      	bne.n	8001a7a <menu+0x75a>
 8001a46:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <menu+0x8dc>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f083 0301 	eor.w	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d012      	beq.n	8001a7a <menu+0x75a>
 8001a54:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <menu+0x8e0>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10e      	bne.n	8001a7a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a5c:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <menu+0x8e4>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <menu+0x8e4>)
 8001a66:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a68:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <menu+0x8e4>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0b      	cmp	r3, #11
 8001a6e:	d902      	bls.n	8001a76 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001a70:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <menu+0x8e4>)
 8001a72:	220a      	movs	r2, #10
 8001a74:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a76:	f003 f81d 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a7a:	2108      	movs	r1, #8
 8001a7c:	485e      	ldr	r0, [pc, #376]	; (8001bf8 <menu+0x8d8>)
 8001a7e:	f007 fc31 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d153      	bne.n	8001b30 <menu+0x810>
 8001a88:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <menu+0x8dc>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	f083 0301 	eor.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d04c      	beq.n	8001b30 <menu+0x810>
 8001a96:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <menu+0x8e4>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d148      	bne.n	8001b30 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	; (8001c08 <menu+0x8e8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <menu+0x8ec>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001aac:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <menu+0x8f0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <menu+0x8ec>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001aba:	4b56      	ldr	r3, [pc, #344]	; (8001c14 <menu+0x8f4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	4b52      	ldr	r3, [pc, #328]	; (8001c0c <menu+0x8ec>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <menu+0x8f8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <menu+0x8ec>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001ad6:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <menu+0x8fc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	4b4b      	ldr	r3, [pc, #300]	; (8001c0c <menu+0x8ec>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001ae4:	4b4e      	ldr	r3, [pc, #312]	; (8001c20 <menu+0x900>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <menu+0x8ec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001af2:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <menu+0x904>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <menu+0x8ec>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <menu+0x908>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <menu+0x8ec>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <menu+0x90c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <menu+0x8ec>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001b1c:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <menu+0x910>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <menu+0x8ec>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <menu+0x914>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001b30:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <menu+0x918>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	f040 80fc 	bne.w	8001d32 <menu+0xa12>
		if(dilSecim == 0) {
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <menu+0x8d0>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d105      	bne.n	8001b4e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001b42:	4a3e      	ldr	r2, [pc, #248]	; (8001c3c <menu+0x91c>)
 8001b44:	2101      	movs	r1, #1
 8001b46:	2001      	movs	r0, #1
 8001b48:	f006 f8a6 	bl	8007c98 <lcd_print>
 8001b4c:	e008      	b.n	8001b60 <menu+0x840>
		} else if(dilSecim == 1) {
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <menu+0x8d0>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d104      	bne.n	8001b60 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001b56:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <menu+0x920>)
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f006 f89c 	bl	8007c98 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <menu+0x8e0>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d003      	beq.n	8001b70 <menu+0x850>
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <menu+0x8e0>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d112      	bne.n	8001b96 <menu+0x876>
			if(dilSecim == 0) {
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <menu+0x8d0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001b78:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <menu+0x924>)
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f006 f88b 	bl	8007c98 <lcd_print>
 8001b82:	e008      	b.n	8001b96 <menu+0x876>
			} else if(dilSecim == 1) {
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <menu+0x8d0>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d104      	bne.n	8001b96 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001b8c:	4a2e      	ldr	r2, [pc, #184]	; (8001c48 <menu+0x928>)
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2002      	movs	r0, #2
 8001b92:	f006 f881 	bl	8007c98 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <menu+0x92c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d116      	bne.n	8001bcc <menu+0x8ac>
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <menu+0x8e0>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d112      	bne.n	8001bcc <menu+0x8ac>
			if(dilSecim == 0) {
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <menu+0x8d0>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001bae:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <menu+0x930>)
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f006 f870 	bl	8007c98 <lcd_print>
 8001bb8:	e008      	b.n	8001bcc <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <menu+0x8d0>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d104      	bne.n	8001bcc <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001bc2:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <menu+0x934>)
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f006 f866 	bl	8007c98 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <menu+0x92c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d14c      	bne.n	8001c6e <menu+0x94e>
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <menu+0x8e0>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d148      	bne.n	8001c6e <menu+0x94e>
			if(dilSecim == 0) {
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <menu+0x8d0>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d13b      	bne.n	8001c5c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <menu+0x938>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	2002      	movs	r0, #2
 8001bea:	f006 f855 	bl	8007c98 <lcd_print>
 8001bee:	e03e      	b.n	8001c6e <menu+0x94e>
 8001bf0:	20000249 	.word	0x20000249
 8001bf4:	0800d224 	.word	0x0800d224
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	20000257 	.word	0x20000257
 8001c00:	20000237 	.word	0x20000237
 8001c04:	2000022a 	.word	0x2000022a
 8001c08:	2000024a 	.word	0x2000024a
 8001c0c:	2000012c 	.word	0x2000012c
 8001c10:	2000024b 	.word	0x2000024b
 8001c14:	2000024c 	.word	0x2000024c
 8001c18:	2000024d 	.word	0x2000024d
 8001c1c:	2000024e 	.word	0x2000024e
 8001c20:	2000024f 	.word	0x2000024f
 8001c24:	20000250 	.word	0x20000250
 8001c28:	20000251 	.word	0x20000251
 8001c2c:	20000252 	.word	0x20000252
 8001c30:	20000253 	.word	0x20000253
 8001c34:	20000254 	.word	0x20000254
 8001c38:	20000228 	.word	0x20000228
 8001c3c:	0800d238 	.word	0x0800d238
 8001c40:	0800d24c 	.word	0x0800d24c
 8001c44:	0800d260 	.word	0x0800d260
 8001c48:	0800d274 	.word	0x0800d274
 8001c4c:	20000229 	.word	0x20000229
 8001c50:	0800d288 	.word	0x0800d288
 8001c54:	0800d298 	.word	0x0800d298
 8001c58:	0800d2a8 	.word	0x0800d2a8
			} else if(dilSecim == 1) {
 8001c5c:	4b98      	ldr	r3, [pc, #608]	; (8001ec0 <menu+0xba0>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d104      	bne.n	8001c6e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001c64:	4a97      	ldr	r2, [pc, #604]	; (8001ec4 <menu+0xba4>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f006 f815 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4895      	ldr	r0, [pc, #596]	; (8001ec8 <menu+0xba8>)
 8001c72:	f007 fb37 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d119      	bne.n	8001cb0 <menu+0x990>
 8001c7c:	4b93      	ldr	r3, [pc, #588]	; (8001ecc <menu+0xbac>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	f083 0301 	eor.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <menu+0x990>
 8001c8a:	4b91      	ldr	r3, [pc, #580]	; (8001ed0 <menu+0xbb0>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001c92:	4b90      	ldr	r3, [pc, #576]	; (8001ed4 <menu+0xbb4>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b8e      	ldr	r3, [pc, #568]	; (8001ed4 <menu+0xbb4>)
 8001c9c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c9e:	4b8d      	ldr	r3, [pc, #564]	; (8001ed4 <menu+0xbb4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d902      	bls.n	8001cac <menu+0x98c>
				calismaSekli = 0;
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <menu+0xbb4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cac:	f002 ff02 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	4885      	ldr	r0, [pc, #532]	; (8001ec8 <menu+0xba8>)
 8001cb4:	f007 fb16 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d119      	bne.n	8001cf2 <menu+0x9d2>
 8001cbe:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <menu+0xbac>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	f083 0301 	eor.w	r3, r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d012      	beq.n	8001cf2 <menu+0x9d2>
 8001ccc:	4b80      	ldr	r3, [pc, #512]	; (8001ed0 <menu+0xbb0>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10e      	bne.n	8001cf2 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001cd4:	4b7f      	ldr	r3, [pc, #508]	; (8001ed4 <menu+0xbb4>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b7d      	ldr	r3, [pc, #500]	; (8001ed4 <menu+0xbb4>)
 8001cde:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001ce0:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <menu+0xbb4>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <menu+0x9ce>
	    		calismaSekli = 1;
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <menu+0xbb4>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cee:	f002 fee1 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cf2:	2108      	movs	r1, #8
 8001cf4:	4874      	ldr	r0, [pc, #464]	; (8001ec8 <menu+0xba8>)
 8001cf6:	f007 faf5 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d118      	bne.n	8001d32 <menu+0xa12>
 8001d00:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <menu+0xbac>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f083 0301 	eor.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d011      	beq.n	8001d32 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d0e:	4b71      	ldr	r3, [pc, #452]	; (8001ed4 <menu+0xbb4>)
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	4b71      	ldr	r3, [pc, #452]	; (8001ed8 <menu+0xbb8>)
 8001d14:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d16:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <menu+0xbb4>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d106      	bne.n	8001d2c <menu+0xa0c>
				altLimit = 1;
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <menu+0xbbc>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d24:	4b6d      	ldr	r3, [pc, #436]	; (8001edc <menu+0xbbc>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <menu+0xbb8>)
 8001d2a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <menu+0xbc0>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d32:	4b6c      	ldr	r3, [pc, #432]	; (8001ee4 <menu+0xbc4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	f040 8083 	bne.w	8001e42 <menu+0xb22>
		if(dilSecim == 0) {
 8001d3c:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <menu+0xba0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001d44:	4a68      	ldr	r2, [pc, #416]	; (8001ee8 <menu+0xbc8>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f005 ffa5 	bl	8007c98 <lcd_print>
 8001d4e:	e008      	b.n	8001d62 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001d50:	4b5b      	ldr	r3, [pc, #364]	; (8001ec0 <menu+0xba0>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d104      	bne.n	8001d62 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001d58:	4a64      	ldr	r2, [pc, #400]	; (8001eec <menu+0xbcc>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f005 ff9b 	bl	8007c98 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <menu+0xbd0>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d113      	bne.n	8001d92 <menu+0xa72>
			if(dilSecim == 0) {
 8001d6a:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <menu+0xba0>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001d72:	4a60      	ldr	r2, [pc, #384]	; (8001ef4 <menu+0xbd4>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	2002      	movs	r0, #2
 8001d78:	f005 ff8e 	bl	8007c98 <lcd_print>
 8001d7c:	e012      	b.n	8001da4 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001d7e:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <menu+0xba0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d10e      	bne.n	8001da4 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001d86:	4a5c      	ldr	r2, [pc, #368]	; (8001ef8 <menu+0xbd8>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f005 ff84 	bl	8007c98 <lcd_print>
 8001d90:	e008      	b.n	8001da4 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001d92:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <menu+0xbd0>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d104      	bne.n	8001da4 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001d9a:	4a58      	ldr	r2, [pc, #352]	; (8001efc <menu+0xbdc>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f005 ff7a 	bl	8007c98 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001da4:	2102      	movs	r1, #2
 8001da6:	4848      	ldr	r0, [pc, #288]	; (8001ec8 <menu+0xba8>)
 8001da8:	f007 fa9c 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d115      	bne.n	8001dde <menu+0xabe>
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <menu+0xbac>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	f083 0301 	eor.w	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00e      	beq.n	8001dde <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <menu+0xbd0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <menu+0xbd0>)
 8001dca:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001dcc:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <menu+0xbd0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d902      	bls.n	8001dda <menu+0xaba>
				emniyetCercevesi = 0;
 8001dd4:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <menu+0xbd0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dda:	f002 fe6b 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dde:	2104      	movs	r1, #4
 8001de0:	4839      	ldr	r0, [pc, #228]	; (8001ec8 <menu+0xba8>)
 8001de2:	f007 fa7f 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d115      	bne.n	8001e18 <menu+0xaf8>
 8001dec:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <menu+0xbac>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	f083 0301 	eor.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00e      	beq.n	8001e18 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <menu+0xbd0>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <menu+0xbd0>)
 8001e04:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <menu+0xbd0>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <menu+0xbd0>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e14:	f002 fe4e 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e18:	2108      	movs	r1, #8
 8001e1a:	482b      	ldr	r0, [pc, #172]	; (8001ec8 <menu+0xba8>)
 8001e1c:	f007 fa62 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10d      	bne.n	8001e42 <menu+0xb22>
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <menu+0xbac>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f083 0301 	eor.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <menu+0xbd0>)
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <menu+0xbb8>)
 8001e3a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <menu+0xbc0>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <menu+0xbc4>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	f040 80ba 	bne.w	8001fc0 <menu+0xca0>
		if(dilSecim == 0) {
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <menu+0xba0>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001e54:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <menu+0xbe0>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f005 ff1d 	bl	8007c98 <lcd_print>
 8001e5e:	e008      	b.n	8001e72 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <menu+0xba0>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d104      	bne.n	8001e72 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001e68:	4a26      	ldr	r2, [pc, #152]	; (8001f04 <menu+0xbe4>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f005 ff13 	bl	8007c98 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <menu+0xbe8>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d113      	bne.n	8001ea2 <menu+0xb82>
			if(dilSecim == 0) {
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <menu+0xba0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <menu+0xbd4>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	2002      	movs	r0, #2
 8001e88:	f005 ff06 	bl	8007c98 <lcd_print>
 8001e8c:	e049      	b.n	8001f22 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <menu+0xba0>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d145      	bne.n	8001f22 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <menu+0xbd8>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f005 fefc 	bl	8007c98 <lcd_print>
 8001ea0:	e03f      	b.n	8001f22 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <menu+0xbe8>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d13b      	bne.n	8001f22 <menu+0xc02>
			if(dilSecim == 0) {
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <menu+0xba0>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d12e      	bne.n	8001f10 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001eb2:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <menu+0xbec>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	f005 feee 	bl	8007c98 <lcd_print>
 8001ebc:	e031      	b.n	8001f22 <menu+0xc02>
 8001ebe:	bf00      	nop
 8001ec0:	20000249 	.word	0x20000249
 8001ec4:	0800d2b8 	.word	0x0800d2b8
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	20000257 	.word	0x20000257
 8001ed0:	20000237 	.word	0x20000237
 8001ed4:	20000229 	.word	0x20000229
 8001ed8:	2000012c 	.word	0x2000012c
 8001edc:	2000022e 	.word	0x2000022e
 8001ee0:	20000254 	.word	0x20000254
 8001ee4:	20000228 	.word	0x20000228
 8001ee8:	0800d2c8 	.word	0x0800d2c8
 8001eec:	0800d2dc 	.word	0x0800d2dc
 8001ef0:	2000022c 	.word	0x2000022c
 8001ef4:	0800d2f0 	.word	0x0800d2f0
 8001ef8:	0800d304 	.word	0x0800d304
 8001efc:	0800d318 	.word	0x0800d318
 8001f00:	0800d328 	.word	0x0800d328
 8001f04:	0800d33c 	.word	0x0800d33c
 8001f08:	2000022d 	.word	0x2000022d
 8001f0c:	0800d350 	.word	0x0800d350
			} else if(dilSecim == 1) {
 8001f10:	4b92      	ldr	r3, [pc, #584]	; (800215c <menu+0xe3c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d104      	bne.n	8001f22 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001f18:	4a91      	ldr	r2, [pc, #580]	; (8002160 <menu+0xe40>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f005 febb 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f22:	2102      	movs	r1, #2
 8001f24:	488f      	ldr	r0, [pc, #572]	; (8002164 <menu+0xe44>)
 8001f26:	f007 f9dd 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d115      	bne.n	8001f5c <menu+0xc3c>
 8001f30:	4b8d      	ldr	r3, [pc, #564]	; (8002168 <menu+0xe48>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00e      	beq.n	8001f5c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <menu+0xe4c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b89      	ldr	r3, [pc, #548]	; (800216c <menu+0xe4c>)
 8001f48:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <menu+0xe4c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d902      	bls.n	8001f58 <menu+0xc38>
				yavaslamaLimit = 0;
 8001f52:	4b86      	ldr	r3, [pc, #536]	; (800216c <menu+0xe4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f58:	f002 fdac 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4881      	ldr	r0, [pc, #516]	; (8002164 <menu+0xe44>)
 8001f60:	f007 f9c0 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d115      	bne.n	8001f96 <menu+0xc76>
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	; (8002168 <menu+0xe48>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f78:	4b7c      	ldr	r3, [pc, #496]	; (800216c <menu+0xe4c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b7a      	ldr	r3, [pc, #488]	; (800216c <menu+0xe4c>)
 8001f82:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f84:	4b79      	ldr	r3, [pc, #484]	; (800216c <menu+0xe4c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001f8c:	4b77      	ldr	r3, [pc, #476]	; (800216c <menu+0xe4c>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f92:	f002 fd8f 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f96:	2108      	movs	r1, #8
 8001f98:	4872      	ldr	r0, [pc, #456]	; (8002164 <menu+0xe44>)
 8001f9a:	f007 f9a3 	bl	80092e4 <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10d      	bne.n	8001fc0 <menu+0xca0>
 8001fa4:	4b70      	ldr	r3, [pc, #448]	; (8002168 <menu+0xe48>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001fb2:	4b6e      	ldr	r3, [pc, #440]	; (800216c <menu+0xe4c>)
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	; (8002170 <menu+0xe50>)
 8001fb8:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001fba:	4b6e      	ldr	r3, [pc, #440]	; (8002174 <menu+0xe54>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001fc0:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <menu+0xe58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	f040 80b9 	bne.w	800213c <menu+0xe1c>
		if(dilSecim == 0) {
 8001fca:	4b64      	ldr	r3, [pc, #400]	; (800215c <menu+0xe3c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001fd2:	4a6a      	ldr	r2, [pc, #424]	; (800217c <menu+0xe5c>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f005 fe5e 	bl	8007c98 <lcd_print>
 8001fdc:	e008      	b.n	8001ff0 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001fde:	4b5f      	ldr	r3, [pc, #380]	; (800215c <menu+0xe3c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d104      	bne.n	8001ff0 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001fe6:	4a66      	ldr	r2, [pc, #408]	; (8002180 <menu+0xe60>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	2001      	movs	r0, #1
 8001fec:	f005 fe54 	bl	8007c98 <lcd_print>
		}

		if(altLimit == 0) {
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <menu+0xe64>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d113      	bne.n	8002020 <menu+0xd00>
			if(dilSecim == 0) {
 8001ff8:	4b58      	ldr	r3, [pc, #352]	; (800215c <menu+0xe3c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002000:	4a61      	ldr	r2, [pc, #388]	; (8002188 <menu+0xe68>)
 8002002:	2101      	movs	r1, #1
 8002004:	2002      	movs	r0, #2
 8002006:	f005 fe47 	bl	8007c98 <lcd_print>
 800200a:	e020      	b.n	800204e <menu+0xd2e>
			} else if(dilSecim == 1) {
 800200c:	4b53      	ldr	r3, [pc, #332]	; (800215c <menu+0xe3c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d11c      	bne.n	800204e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002014:	4a5d      	ldr	r2, [pc, #372]	; (800218c <menu+0xe6c>)
 8002016:	2101      	movs	r1, #1
 8002018:	2002      	movs	r0, #2
 800201a:	f005 fe3d 	bl	8007c98 <lcd_print>
 800201e:	e016      	b.n	800204e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002020:	4b58      	ldr	r3, [pc, #352]	; (8002184 <menu+0xe64>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d112      	bne.n	800204e <menu+0xd2e>
			if(dilSecim == 0){
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <menu+0xe3c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002030:	4a57      	ldr	r2, [pc, #348]	; (8002190 <menu+0xe70>)
 8002032:	2101      	movs	r1, #1
 8002034:	2002      	movs	r0, #2
 8002036:	f005 fe2f 	bl	8007c98 <lcd_print>
 800203a:	e008      	b.n	800204e <menu+0xd2e>
			} else if(dilSecim == 1){
 800203c:	4b47      	ldr	r3, [pc, #284]	; (800215c <menu+0xe3c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d104      	bne.n	800204e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002044:	4a46      	ldr	r2, [pc, #280]	; (8002160 <menu+0xe40>)
 8002046:	2101      	movs	r1, #1
 8002048:	2002      	movs	r0, #2
 800204a:	f005 fe25 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800204e:	2102      	movs	r1, #2
 8002050:	4844      	ldr	r0, [pc, #272]	; (8002164 <menu+0xe44>)
 8002052:	f007 f947 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d119      	bne.n	8002090 <menu+0xd70>
 800205c:	4b42      	ldr	r3, [pc, #264]	; (8002168 <menu+0xe48>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	f083 0301 	eor.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <menu+0xd70>
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <menu+0xe74>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10e      	bne.n	8002090 <menu+0xd70>
			altLimit = altLimit + 1;
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <menu+0xe64>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b42      	ldr	r3, [pc, #264]	; (8002184 <menu+0xe64>)
 800207c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <menu+0xe64>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d902      	bls.n	800208c <menu+0xd6c>
				altLimit = 0;
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <menu+0xe64>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800208c:	f002 fd12 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002090:	2104      	movs	r1, #4
 8002092:	4834      	ldr	r0, [pc, #208]	; (8002164 <menu+0xe44>)
 8002094:	f007 f926 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d119      	bne.n	80020d2 <menu+0xdb2>
 800209e:	4b32      	ldr	r3, [pc, #200]	; (8002168 <menu+0xe48>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f083 0301 	eor.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <menu+0xdb2>
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <menu+0xe74>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10e      	bne.n	80020d2 <menu+0xdb2>
			altLimit = altLimit - 1;
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <menu+0xe64>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <menu+0xe64>)
 80020be:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80020c0:	4b30      	ldr	r3, [pc, #192]	; (8002184 <menu+0xe64>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <menu+0xdae>
		   		altLimit = 1;
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <menu+0xe64>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020ce:	f002 fcf1 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020d2:	2108      	movs	r1, #8
 80020d4:	4823      	ldr	r0, [pc, #140]	; (8002164 <menu+0xe44>)
 80020d6:	f007 f905 	bl	80092e4 <HAL_GPIO_ReadPin>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d12d      	bne.n	800213c <menu+0xe1c>
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <menu+0xe48>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d026      	beq.n	800213c <menu+0xe1c>
			eepromData[5] = altLimit;
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <menu+0xe64>)
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <menu+0xe50>)
 80020f4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <menu+0xe64>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d110      	bne.n	8002120 <menu+0xe00>
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <menu+0xe78>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <menu+0xdee>
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <menu+0xe78>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d108      	bne.n	8002120 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <menu+0xe78>)
 8002110:	2203      	movs	r2, #3
 8002112:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <menu+0xe78>)
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <menu+0xe50>)
 800211a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800211e:	e00a      	b.n	8002136 <menu+0xe16>
			} else if(altLimit == 0) {
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <menu+0xe64>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <menu+0xe16>
				platformSilindirTipi = 0;
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <menu+0xe7c>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <menu+0xe7c>)
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <menu+0xe50>)
 8002134:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <menu+0xe54>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <menu+0xe58>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b06      	cmp	r3, #6
 8002142:	f040 80b6 	bne.w	80022b2 <menu+0xf92>
		if(dilSecim == 0) {
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <menu+0xe3c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d12a      	bne.n	80021a4 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800214e:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <menu+0xe80>)
 8002150:	2101      	movs	r1, #1
 8002152:	2001      	movs	r0, #1
 8002154:	f005 fda0 	bl	8007c98 <lcd_print>
 8002158:	e02d      	b.n	80021b6 <menu+0xe96>
 800215a:	bf00      	nop
 800215c:	20000249 	.word	0x20000249
 8002160:	0800d364 	.word	0x0800d364
 8002164:	40010800 	.word	0x40010800
 8002168:	20000257 	.word	0x20000257
 800216c:	2000022d 	.word	0x2000022d
 8002170:	2000012c 	.word	0x2000012c
 8002174:	20000254 	.word	0x20000254
 8002178:	20000228 	.word	0x20000228
 800217c:	0800d378 	.word	0x0800d378
 8002180:	0800d38c 	.word	0x0800d38c
 8002184:	2000022e 	.word	0x2000022e
 8002188:	0800d2f0 	.word	0x0800d2f0
 800218c:	0800d304 	.word	0x0800d304
 8002190:	0800d350 	.word	0x0800d350
 8002194:	20000229 	.word	0x20000229
 8002198:	20000235 	.word	0x20000235
 800219c:	2000023b 	.word	0x2000023b
 80021a0:	0800d3a0 	.word	0x0800d3a0
		} else if(dilSecim == 1){
 80021a4:	4b7a      	ldr	r3, [pc, #488]	; (8002390 <menu+0x1070>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d104      	bne.n	80021b6 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80021ac:	4a79      	ldr	r2, [pc, #484]	; (8002394 <menu+0x1074>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	2001      	movs	r0, #1
 80021b2:	f005 fd71 	bl	8007c98 <lcd_print>
		}
		if(basincSalteri == 0){
 80021b6:	4b78      	ldr	r3, [pc, #480]	; (8002398 <menu+0x1078>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d113      	bne.n	80021e6 <menu+0xec6>
			if(dilSecim == 0) {
 80021be:	4b74      	ldr	r3, [pc, #464]	; (8002390 <menu+0x1070>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80021c6:	4a75      	ldr	r2, [pc, #468]	; (800239c <menu+0x107c>)
 80021c8:	2101      	movs	r1, #1
 80021ca:	2002      	movs	r0, #2
 80021cc:	f005 fd64 	bl	8007c98 <lcd_print>
 80021d0:	e020      	b.n	8002214 <menu+0xef4>
			} else if(dilSecim == 1){
 80021d2:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <menu+0x1070>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d11c      	bne.n	8002214 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80021da:	4a71      	ldr	r2, [pc, #452]	; (80023a0 <menu+0x1080>)
 80021dc:	2101      	movs	r1, #1
 80021de:	2002      	movs	r0, #2
 80021e0:	f005 fd5a 	bl	8007c98 <lcd_print>
 80021e4:	e016      	b.n	8002214 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80021e6:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <menu+0x1078>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d112      	bne.n	8002214 <menu+0xef4>
			if(dilSecim == 0) {
 80021ee:	4b68      	ldr	r3, [pc, #416]	; (8002390 <menu+0x1070>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80021f6:	4a6b      	ldr	r2, [pc, #428]	; (80023a4 <menu+0x1084>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	2002      	movs	r0, #2
 80021fc:	f005 fd4c 	bl	8007c98 <lcd_print>
 8002200:	e008      	b.n	8002214 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <menu+0x1070>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d104      	bne.n	8002214 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800220a:	4a67      	ldr	r2, [pc, #412]	; (80023a8 <menu+0x1088>)
 800220c:	2101      	movs	r1, #1
 800220e:	2002      	movs	r0, #2
 8002210:	f005 fd42 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002214:	2102      	movs	r1, #2
 8002216:	4865      	ldr	r0, [pc, #404]	; (80023ac <menu+0x108c>)
 8002218:	f007 f864 	bl	80092e4 <HAL_GPIO_ReadPin>
 800221c:	4603      	mov	r3, r0
 800221e:	2b01      	cmp	r3, #1
 8002220:	d115      	bne.n	800224e <menu+0xf2e>
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <menu+0x1090>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f083 0301 	eor.w	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <menu+0x1078>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <menu+0x1078>)
 800223a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800223c:	4b56      	ldr	r3, [pc, #344]	; (8002398 <menu+0x1078>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d902      	bls.n	800224a <menu+0xf2a>
				basincSalteri = 0;
 8002244:	4b54      	ldr	r3, [pc, #336]	; (8002398 <menu+0x1078>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800224a:	f002 fc33 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800224e:	2104      	movs	r1, #4
 8002250:	4856      	ldr	r0, [pc, #344]	; (80023ac <menu+0x108c>)
 8002252:	f007 f847 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002256:	4603      	mov	r3, r0
 8002258:	2b01      	cmp	r3, #1
 800225a:	d115      	bne.n	8002288 <menu+0xf68>
 800225c:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <menu+0x1090>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f083 0301 	eor.w	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00e      	beq.n	8002288 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800226a:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <menu+0x1078>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <menu+0x1078>)
 8002274:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002276:	4b48      	ldr	r3, [pc, #288]	; (8002398 <menu+0x1078>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <menu+0xf64>
		   		basincSalteri = 1;
 800227e:	4b46      	ldr	r3, [pc, #280]	; (8002398 <menu+0x1078>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002284:	f002 fc16 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002288:	2108      	movs	r1, #8
 800228a:	4848      	ldr	r0, [pc, #288]	; (80023ac <menu+0x108c>)
 800228c:	f007 f82a 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10d      	bne.n	80022b2 <menu+0xf92>
 8002296:	4b46      	ldr	r3, [pc, #280]	; (80023b0 <menu+0x1090>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80022a4:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <menu+0x1078>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <menu+0x1094>)
 80022aa:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <menu+0x1098>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80022b2:	4b42      	ldr	r3, [pc, #264]	; (80023bc <menu+0x109c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b07      	cmp	r3, #7
 80022b8:	f040 80f5 	bne.w	80024a6 <menu+0x1186>
		if(dilSecim == 0) {
 80022bc:	4b34      	ldr	r3, [pc, #208]	; (8002390 <menu+0x1070>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80022c4:	4a3e      	ldr	r2, [pc, #248]	; (80023c0 <menu+0x10a0>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	2001      	movs	r0, #1
 80022ca:	f005 fce5 	bl	8007c98 <lcd_print>
 80022ce:	e008      	b.n	80022e2 <menu+0xfc2>
		} else if(dilSecim == 1){
 80022d0:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <menu+0x1070>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d104      	bne.n	80022e2 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80022d8:	4a3a      	ldr	r2, [pc, #232]	; (80023c4 <menu+0x10a4>)
 80022da:	2101      	movs	r1, #1
 80022dc:	2001      	movs	r0, #1
 80022de:	f005 fcdb 	bl	8007c98 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <menu+0x10a8>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d113      	bne.n	8002312 <menu+0xff2>
			if(dilSecim == 0) {
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <menu+0x1070>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80022f2:	4a2a      	ldr	r2, [pc, #168]	; (800239c <menu+0x107c>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	2002      	movs	r0, #2
 80022f8:	f005 fcce 	bl	8007c98 <lcd_print>
 80022fc:	e079      	b.n	80023f2 <menu+0x10d2>
			} else if(dilSecim == 1){
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <menu+0x1070>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d175      	bne.n	80023f2 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002306:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <menu+0x1080>)
 8002308:	2101      	movs	r1, #1
 800230a:	2002      	movs	r0, #2
 800230c:	f005 fcc4 	bl	8007c98 <lcd_print>
 8002310:	e06f      	b.n	80023f2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <menu+0x10a8>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d113      	bne.n	8002342 <menu+0x1022>
			if(dilSecim == 0) {
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <menu+0x1070>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002322:	4a2a      	ldr	r2, [pc, #168]	; (80023cc <menu+0x10ac>)
 8002324:	2101      	movs	r1, #1
 8002326:	2002      	movs	r0, #2
 8002328:	f005 fcb6 	bl	8007c98 <lcd_print>
 800232c:	e061      	b.n	80023f2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <menu+0x1070>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d15d      	bne.n	80023f2 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002336:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <menu+0x10b0>)
 8002338:	2101      	movs	r1, #1
 800233a:	2002      	movs	r0, #2
 800233c:	f005 fcac 	bl	8007c98 <lcd_print>
 8002340:	e057      	b.n	80023f2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <menu+0x10a8>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d113      	bne.n	8002372 <menu+0x1052>
			if(dilSecim == 0) {
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <menu+0x1070>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002352:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <menu+0x10b4>)
 8002354:	2101      	movs	r1, #1
 8002356:	2002      	movs	r0, #2
 8002358:	f005 fc9e 	bl	8007c98 <lcd_print>
 800235c:	e049      	b.n	80023f2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <menu+0x1070>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d145      	bne.n	80023f2 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <menu+0x10b8>)
 8002368:	2101      	movs	r1, #1
 800236a:	2002      	movs	r0, #2
 800236c:	f005 fc94 	bl	8007c98 <lcd_print>
 8002370:	e03f      	b.n	80023f2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <menu+0x10a8>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d13b      	bne.n	80023f2 <menu+0x10d2>
			if(dilSecim == 0) {
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <menu+0x1070>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12e      	bne.n	80023e0 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002382:	4a16      	ldr	r2, [pc, #88]	; (80023dc <menu+0x10bc>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f005 fc86 	bl	8007c98 <lcd_print>
 800238c:	e031      	b.n	80023f2 <menu+0x10d2>
 800238e:	bf00      	nop
 8002390:	20000249 	.word	0x20000249
 8002394:	0800d3b0 	.word	0x0800d3b0
 8002398:	2000022f 	.word	0x2000022f
 800239c:	0800d2f0 	.word	0x0800d2f0
 80023a0:	0800d304 	.word	0x0800d304
 80023a4:	0800d350 	.word	0x0800d350
 80023a8:	0800d364 	.word	0x0800d364
 80023ac:	40010800 	.word	0x40010800
 80023b0:	20000257 	.word	0x20000257
 80023b4:	2000012c 	.word	0x2000012c
 80023b8:	20000254 	.word	0x20000254
 80023bc:	20000228 	.word	0x20000228
 80023c0:	0800d3c0 	.word	0x0800d3c0
 80023c4:	0800d3d4 	.word	0x0800d3d4
 80023c8:	20000230 	.word	0x20000230
 80023cc:	0800d3e8 	.word	0x0800d3e8
 80023d0:	0800d3fc 	.word	0x0800d3fc
 80023d4:	0800d410 	.word	0x0800d410
 80023d8:	0800d424 	.word	0x0800d424
 80023dc:	0800d438 	.word	0x0800d438
			} else if(dilSecim == 1){
 80023e0:	4b99      	ldr	r3, [pc, #612]	; (8002648 <menu+0x1328>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d104      	bne.n	80023f2 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80023e8:	4a98      	ldr	r2, [pc, #608]	; (800264c <menu+0x132c>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	2002      	movs	r0, #2
 80023ee:	f005 fc53 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f2:	2102      	movs	r1, #2
 80023f4:	4896      	ldr	r0, [pc, #600]	; (8002650 <menu+0x1330>)
 80023f6:	f006 ff75 	bl	80092e4 <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d115      	bne.n	800242c <menu+0x110c>
 8002400:	4b94      	ldr	r3, [pc, #592]	; (8002654 <menu+0x1334>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f083 0301 	eor.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800240e:	4b92      	ldr	r3, [pc, #584]	; (8002658 <menu+0x1338>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b90      	ldr	r3, [pc, #576]	; (8002658 <menu+0x1338>)
 8002418:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800241a:	4b8f      	ldr	r3, [pc, #572]	; (8002658 <menu+0x1338>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d902      	bls.n	8002428 <menu+0x1108>
				kapiSecimleri = 0;
 8002422:	4b8d      	ldr	r3, [pc, #564]	; (8002658 <menu+0x1338>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002428:	f002 fb44 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800242c:	2104      	movs	r1, #4
 800242e:	4888      	ldr	r0, [pc, #544]	; (8002650 <menu+0x1330>)
 8002430:	f006 ff58 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002434:	4603      	mov	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d115      	bne.n	8002466 <menu+0x1146>
 800243a:	4b86      	ldr	r3, [pc, #536]	; (8002654 <menu+0x1334>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00e      	beq.n	8002466 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002448:	4b83      	ldr	r3, [pc, #524]	; (8002658 <menu+0x1338>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3b01      	subs	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b81      	ldr	r3, [pc, #516]	; (8002658 <menu+0x1338>)
 8002452:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002454:	4b80      	ldr	r3, [pc, #512]	; (8002658 <menu+0x1338>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d902      	bls.n	8002462 <menu+0x1142>
		   		kapiSecimleri = 3;
 800245c:	4b7e      	ldr	r3, [pc, #504]	; (8002658 <menu+0x1338>)
 800245e:	2203      	movs	r2, #3
 8002460:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002462:	f002 fb27 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002466:	2108      	movs	r1, #8
 8002468:	4879      	ldr	r0, [pc, #484]	; (8002650 <menu+0x1330>)
 800246a:	f006 ff3b 	bl	80092e4 <HAL_GPIO_ReadPin>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d118      	bne.n	80024a6 <menu+0x1186>
 8002474:	4b77      	ldr	r3, [pc, #476]	; (8002654 <menu+0x1334>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	f083 0301 	eor.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d011      	beq.n	80024a6 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002482:	4b75      	ldr	r3, [pc, #468]	; (8002658 <menu+0x1338>)
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	4b75      	ldr	r3, [pc, #468]	; (800265c <menu+0x133c>)
 8002488:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800248a:	4b73      	ldr	r3, [pc, #460]	; (8002658 <menu+0x1338>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <menu+0x1180>
				altLimit = 1;
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <menu+0x1340>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002498:	4b71      	ldr	r3, [pc, #452]	; (8002660 <menu+0x1340>)
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	4b6f      	ldr	r3, [pc, #444]	; (800265c <menu+0x133c>)
 800249e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80024a0:	4b70      	ldr	r3, [pc, #448]	; (8002664 <menu+0x1344>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80024a6:	4b70      	ldr	r3, [pc, #448]	; (8002668 <menu+0x1348>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	f040 8092 	bne.w	80025d4 <menu+0x12b4>
		if(dilSecim == 0) {
 80024b0:	4b65      	ldr	r3, [pc, #404]	; (8002648 <menu+0x1328>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80024b8:	4a6c      	ldr	r2, [pc, #432]	; (800266c <menu+0x134c>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	2001      	movs	r0, #1
 80024be:	f005 fbeb 	bl	8007c98 <lcd_print>
 80024c2:	e008      	b.n	80024d6 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80024c4:	4b60      	ldr	r3, [pc, #384]	; (8002648 <menu+0x1328>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d104      	bne.n	80024d6 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80024cc:	4a68      	ldr	r2, [pc, #416]	; (8002670 <menu+0x1350>)
 80024ce:	2101      	movs	r1, #1
 80024d0:	2001      	movs	r0, #1
 80024d2:	f005 fbe1 	bl	8007c98 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <menu+0x1354>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d113      	bne.n	8002506 <menu+0x11e6>
			if(dilSecim == 0) {
 80024de:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <menu+0x1328>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80024e6:	4a64      	ldr	r2, [pc, #400]	; (8002678 <menu+0x1358>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	2002      	movs	r0, #2
 80024ec:	f005 fbd4 	bl	8007c98 <lcd_print>
 80024f0:	e020      	b.n	8002534 <menu+0x1214>
			} else if(dilSecim == 1) {
 80024f2:	4b55      	ldr	r3, [pc, #340]	; (8002648 <menu+0x1328>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d11c      	bne.n	8002534 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80024fa:	4a60      	ldr	r2, [pc, #384]	; (800267c <menu+0x135c>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	2002      	movs	r0, #2
 8002500:	f005 fbca 	bl	8007c98 <lcd_print>
 8002504:	e016      	b.n	8002534 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002506:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <menu+0x1354>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d112      	bne.n	8002534 <menu+0x1214>
			if(dilSecim == 0){
 800250e:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <menu+0x1328>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002516:	4a5a      	ldr	r2, [pc, #360]	; (8002680 <menu+0x1360>)
 8002518:	2101      	movs	r1, #1
 800251a:	2002      	movs	r0, #2
 800251c:	f005 fbbc 	bl	8007c98 <lcd_print>
 8002520:	e008      	b.n	8002534 <menu+0x1214>
			} else if(dilSecim == 1){
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <menu+0x1328>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d104      	bne.n	8002534 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800252a:	4a56      	ldr	r2, [pc, #344]	; (8002684 <menu+0x1364>)
 800252c:	2101      	movs	r1, #1
 800252e:	2002      	movs	r0, #2
 8002530:	f005 fbb2 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002534:	2102      	movs	r1, #2
 8002536:	4846      	ldr	r0, [pc, #280]	; (8002650 <menu+0x1330>)
 8002538:	f006 fed4 	bl	80092e4 <HAL_GPIO_ReadPin>
 800253c:	4603      	mov	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d115      	bne.n	800256e <menu+0x124e>
 8002542:	4b44      	ldr	r3, [pc, #272]	; (8002654 <menu+0x1334>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	f083 0301 	eor.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00e      	beq.n	800256e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002550:	4b48      	ldr	r3, [pc, #288]	; (8002674 <menu+0x1354>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b46      	ldr	r3, [pc, #280]	; (8002674 <menu+0x1354>)
 800255a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800255c:	4b45      	ldr	r3, [pc, #276]	; (8002674 <menu+0x1354>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d902      	bls.n	800256a <menu+0x124a>
				kapiAcTipi = 0;
 8002564:	4b43      	ldr	r3, [pc, #268]	; (8002674 <menu+0x1354>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800256a:	f002 faa3 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800256e:	2104      	movs	r1, #4
 8002570:	4837      	ldr	r0, [pc, #220]	; (8002650 <menu+0x1330>)
 8002572:	f006 feb7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	d115      	bne.n	80025a8 <menu+0x1288>
 800257c:	4b35      	ldr	r3, [pc, #212]	; (8002654 <menu+0x1334>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00e      	beq.n	80025a8 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800258a:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <menu+0x1354>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	3b01      	subs	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b38      	ldr	r3, [pc, #224]	; (8002674 <menu+0x1354>)
 8002594:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002596:	4b37      	ldr	r3, [pc, #220]	; (8002674 <menu+0x1354>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <menu+0x1284>
		   		kapiAcTipi = 1;
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <menu+0x1354>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025a4:	f002 fa86 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025a8:	2108      	movs	r1, #8
 80025aa:	4829      	ldr	r0, [pc, #164]	; (8002650 <menu+0x1330>)
 80025ac:	f006 fe9a 	bl	80092e4 <HAL_GPIO_ReadPin>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10e      	bne.n	80025d4 <menu+0x12b4>
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <menu+0x1334>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	f083 0301 	eor.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <menu+0x1354>)
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <menu+0x133c>)
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <menu+0x1344>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <menu+0x1348>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b09      	cmp	r3, #9
 80025da:	f040 80b9 	bne.w	8002750 <menu+0x1430>
		if(dilSecim == 0){
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <menu+0x1328>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80025e6:	4a28      	ldr	r2, [pc, #160]	; (8002688 <menu+0x1368>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	2001      	movs	r0, #1
 80025ec:	f005 fb54 	bl	8007c98 <lcd_print>
 80025f0:	e008      	b.n	8002604 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <menu+0x1328>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d104      	bne.n	8002604 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80025fa:	4a24      	ldr	r2, [pc, #144]	; (800268c <menu+0x136c>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	2001      	movs	r0, #1
 8002600:	f005 fb4a 	bl	8007c98 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <menu+0x1370>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <menu+0x1374>)
 800260e:	2101      	movs	r1, #1
 8002610:	2002      	movs	r0, #2
 8002612:	f005 fb41 	bl	8007c98 <lcd_print>
 8002616:	e04c      	b.n	80026b2 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <menu+0x1370>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d13f      	bne.n	80026a0 <menu+0x1380>
			if(dilSecim == 0){
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <menu+0x1328>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d105      	bne.n	8002634 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002628:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <menu+0x1378>)
 800262a:	2101      	movs	r1, #1
 800262c:	2002      	movs	r0, #2
 800262e:	f005 fb33 	bl	8007c98 <lcd_print>
 8002632:	e03e      	b.n	80026b2 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <menu+0x1328>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d13a      	bne.n	80026b2 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800263c:	4a17      	ldr	r2, [pc, #92]	; (800269c <menu+0x137c>)
 800263e:	2101      	movs	r1, #1
 8002640:	2002      	movs	r0, #2
 8002642:	f005 fb29 	bl	8007c98 <lcd_print>
 8002646:	e034      	b.n	80026b2 <menu+0x1392>
 8002648:	20000249 	.word	0x20000249
 800264c:	0800d44c 	.word	0x0800d44c
 8002650:	40010800 	.word	0x40010800
 8002654:	20000257 	.word	0x20000257
 8002658:	20000230 	.word	0x20000230
 800265c:	2000012c 	.word	0x2000012c
 8002660:	2000022e 	.word	0x2000022e
 8002664:	20000254 	.word	0x20000254
 8002668:	20000228 	.word	0x20000228
 800266c:	0800d460 	.word	0x0800d460
 8002670:	0800d474 	.word	0x0800d474
 8002674:	20000234 	.word	0x20000234
 8002678:	0800d488 	.word	0x0800d488
 800267c:	0800d498 	.word	0x0800d498
 8002680:	0800d4a8 	.word	0x0800d4a8
 8002684:	0800d4bc 	.word	0x0800d4bc
 8002688:	0800d4d0 	.word	0x0800d4d0
 800268c:	0800d4e4 	.word	0x0800d4e4
 8002690:	20000231 	.word	0x20000231
 8002694:	0800d4f8 	.word	0x0800d4f8
 8002698:	0800d50c 	.word	0x0800d50c
 800269c:	0800d51c 	.word	0x0800d51c
			}
		} else if(kapi1Tip == 2) {
 80026a0:	4b8a      	ldr	r3, [pc, #552]	; (80028cc <menu+0x15ac>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d104      	bne.n	80026b2 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80026a8:	4a89      	ldr	r2, [pc, #548]	; (80028d0 <menu+0x15b0>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2002      	movs	r0, #2
 80026ae:	f005 faf3 	bl	8007c98 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b2:	2102      	movs	r1, #2
 80026b4:	4887      	ldr	r0, [pc, #540]	; (80028d4 <menu+0x15b4>)
 80026b6:	f006 fe15 	bl	80092e4 <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d115      	bne.n	80026ec <menu+0x13cc>
 80026c0:	4b85      	ldr	r3, [pc, #532]	; (80028d8 <menu+0x15b8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f083 0301 	eor.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00e      	beq.n	80026ec <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80026ce:	4b7f      	ldr	r3, [pc, #508]	; (80028cc <menu+0x15ac>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <menu+0x15ac>)
 80026d8:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80026da:	4b7c      	ldr	r3, [pc, #496]	; (80028cc <menu+0x15ac>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <menu+0x13c8>
				kapi1Tip = 0;
 80026e2:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <menu+0x15ac>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026e8:	f002 f9e4 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ec:	2104      	movs	r1, #4
 80026ee:	4879      	ldr	r0, [pc, #484]	; (80028d4 <menu+0x15b4>)
 80026f0:	f006 fdf8 	bl	80092e4 <HAL_GPIO_ReadPin>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d115      	bne.n	8002726 <menu+0x1406>
 80026fa:	4b77      	ldr	r3, [pc, #476]	; (80028d8 <menu+0x15b8>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002708:	4b70      	ldr	r3, [pc, #448]	; (80028cc <menu+0x15ac>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <menu+0x15ac>)
 8002712:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002714:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <menu+0x15ac>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d902      	bls.n	8002722 <menu+0x1402>
		   		kapi1Tip = 2;
 800271c:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <menu+0x15ac>)
 800271e:	2202      	movs	r2, #2
 8002720:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002722:	f002 f9c7 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002726:	2108      	movs	r1, #8
 8002728:	486a      	ldr	r0, [pc, #424]	; (80028d4 <menu+0x15b4>)
 800272a:	f006 fddb 	bl	80092e4 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10d      	bne.n	8002750 <menu+0x1430>
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <menu+0x15b8>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <menu+0x15ac>)
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	4b65      	ldr	r3, [pc, #404]	; (80028dc <menu+0x15bc>)
 8002748:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800274a:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <menu+0x15c0>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002750:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <menu+0x15c4>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b0a      	cmp	r3, #10
 8002756:	d17f      	bne.n	8002858 <menu+0x1538>
		if(dilSecim == 0) {
 8002758:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <menu+0x15c8>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002760:	4a62      	ldr	r2, [pc, #392]	; (80028ec <menu+0x15cc>)
 8002762:	2101      	movs	r1, #1
 8002764:	2001      	movs	r0, #1
 8002766:	f005 fa97 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800276a:	4a61      	ldr	r2, [pc, #388]	; (80028f0 <menu+0x15d0>)
 800276c:	2101      	movs	r1, #1
 800276e:	2002      	movs	r0, #2
 8002770:	f005 fa92 	bl	8007c98 <lcd_print>
 8002774:	e00d      	b.n	8002792 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <menu+0x15c8>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d109      	bne.n	8002792 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800277e:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <menu+0x15d4>)
 8002780:	2101      	movs	r1, #1
 8002782:	2001      	movs	r0, #1
 8002784:	f005 fa88 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002788:	4a5b      	ldr	r2, [pc, #364]	; (80028f8 <menu+0x15d8>)
 800278a:	2101      	movs	r1, #1
 800278c:	2002      	movs	r0, #2
 800278e:	f005 fa83 	bl	8007c98 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002792:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <menu+0x15dc>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	220a      	movs	r2, #10
 8002798:	4959      	ldr	r1, [pc, #356]	; (8002900 <menu+0x15e0>)
 800279a:	4618      	mov	r0, r3
 800279c:	f009 fdce 	bl	800c33c <itoa>
		lcd_print(2,16,snum);
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <menu+0x15e0>)
 80027a2:	2110      	movs	r1, #16
 80027a4:	2002      	movs	r0, #2
 80027a6:	f005 fa77 	bl	8007c98 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027aa:	2102      	movs	r1, #2
 80027ac:	4849      	ldr	r0, [pc, #292]	; (80028d4 <menu+0x15b4>)
 80027ae:	f006 fd99 	bl	80092e4 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d119      	bne.n	80027ec <menu+0x14cc>
 80027b8:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <menu+0x15b8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <menu+0x14cc>
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <menu+0x15ac>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10e      	bne.n	80027ec <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80027ce:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <menu+0x15dc>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <menu+0x15dc>)
 80027d8:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <menu+0x15dc>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d902      	bls.n	80027e8 <menu+0x14c8>
				kapi1AcSure = 0;
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <menu+0x15dc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027e8:	f002 f964 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027ec:	2104      	movs	r1, #4
 80027ee:	4839      	ldr	r0, [pc, #228]	; (80028d4 <menu+0x15b4>)
 80027f0:	f006 fd78 	bl	80092e4 <HAL_GPIO_ReadPin>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d119      	bne.n	800282e <menu+0x150e>
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <menu+0x15b8>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <menu+0x150e>
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <menu+0x15ac>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10e      	bne.n	800282e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002810:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <menu+0x15dc>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <menu+0x15dc>)
 800281a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <menu+0x15dc>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d902      	bls.n	800282a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <menu+0x15dc>)
 8002826:	2205      	movs	r2, #5
 8002828:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800282a:	f002 f943 	bl	8004ab4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282e:	2108      	movs	r1, #8
 8002830:	4828      	ldr	r0, [pc, #160]	; (80028d4 <menu+0x15b4>)
 8002832:	f006 fd57 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10d      	bne.n	8002858 <menu+0x1538>
 800283c:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <menu+0x15b8>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <menu+0x15dc>)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <menu+0x15bc>)
 8002850:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <menu+0x15c0>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <menu+0x15c4>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b0b      	cmp	r3, #11
 800285e:	f040 80b5 	bne.w	80029cc <menu+0x16ac>
		if(dilSecim == 0) {
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <menu+0x15c8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800286a:	4a26      	ldr	r2, [pc, #152]	; (8002904 <menu+0x15e4>)
 800286c:	2101      	movs	r1, #1
 800286e:	2001      	movs	r0, #1
 8002870:	f005 fa12 	bl	8007c98 <lcd_print>
 8002874:	e008      	b.n	8002888 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <menu+0x15c8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d104      	bne.n	8002888 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <menu+0x15e8>)
 8002880:	2101      	movs	r1, #1
 8002882:	2001      	movs	r0, #1
 8002884:	f005 fa08 	bl	8007c98 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <menu+0x15ec>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <menu+0x15f0>)
 8002892:	2101      	movs	r1, #1
 8002894:	2002      	movs	r0, #2
 8002896:	f005 f9ff 	bl	8007c98 <lcd_print>
 800289a:	e048      	b.n	800292e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <menu+0x15ec>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d13b      	bne.n	800291c <menu+0x15fc>
			if(dilSecim == 0) {
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <menu+0x15c8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <menu+0x15f4>)
 80028ae:	2101      	movs	r1, #1
 80028b0:	2002      	movs	r0, #2
 80028b2:	f005 f9f1 	bl	8007c98 <lcd_print>
 80028b6:	e03a      	b.n	800292e <menu+0x160e>
			} else if(dilSecim == 1) {
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <menu+0x15c8>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d136      	bne.n	800292e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <menu+0x15f8>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	2002      	movs	r0, #2
 80028c6:	f005 f9e7 	bl	8007c98 <lcd_print>
 80028ca:	e030      	b.n	800292e <menu+0x160e>
 80028cc:	20000231 	.word	0x20000231
 80028d0:	0800d530 	.word	0x0800d530
 80028d4:	40010800 	.word	0x40010800
 80028d8:	20000257 	.word	0x20000257
 80028dc:	2000012c 	.word	0x2000012c
 80028e0:	20000254 	.word	0x20000254
 80028e4:	20000228 	.word	0x20000228
 80028e8:	20000249 	.word	0x20000249
 80028ec:	0800d540 	.word	0x0800d540
 80028f0:	0800d554 	.word	0x0800d554
 80028f4:	0800d564 	.word	0x0800d564
 80028f8:	0800d578 	.word	0x0800d578
 80028fc:	20000241 	.word	0x20000241
 8002900:	2000019c 	.word	0x2000019c
 8002904:	0800d588 	.word	0x0800d588
 8002908:	0800d59c 	.word	0x0800d59c
 800290c:	20000232 	.word	0x20000232
 8002910:	0800d4f8 	.word	0x0800d4f8
 8002914:	0800d50c 	.word	0x0800d50c
 8002918:	0800d51c 	.word	0x0800d51c
			}
		} else if(kapi2Tip == 2) {
 800291c:	4b8a      	ldr	r3, [pc, #552]	; (8002b48 <menu+0x1828>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d104      	bne.n	800292e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002924:	4a89      	ldr	r2, [pc, #548]	; (8002b4c <menu+0x182c>)
 8002926:	2101      	movs	r1, #1
 8002928:	2002      	movs	r0, #2
 800292a:	f005 f9b5 	bl	8007c98 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800292e:	2102      	movs	r1, #2
 8002930:	4887      	ldr	r0, [pc, #540]	; (8002b50 <menu+0x1830>)
 8002932:	f006 fcd7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d115      	bne.n	8002968 <menu+0x1648>
 800293c:	4b85      	ldr	r3, [pc, #532]	; (8002b54 <menu+0x1834>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f083 0301 	eor.w	r3, r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00e      	beq.n	8002968 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800294a:	4b7f      	ldr	r3, [pc, #508]	; (8002b48 <menu+0x1828>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b7d      	ldr	r3, [pc, #500]	; (8002b48 <menu+0x1828>)
 8002954:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002956:	4b7c      	ldr	r3, [pc, #496]	; (8002b48 <menu+0x1828>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <menu+0x1644>
				kapi2Tip = 0;
 800295e:	4b7a      	ldr	r3, [pc, #488]	; (8002b48 <menu+0x1828>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002964:	f002 f8a6 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002968:	2104      	movs	r1, #4
 800296a:	4879      	ldr	r0, [pc, #484]	; (8002b50 <menu+0x1830>)
 800296c:	f006 fcba 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002970:	4603      	mov	r3, r0
 8002972:	2b01      	cmp	r3, #1
 8002974:	d115      	bne.n	80029a2 <menu+0x1682>
 8002976:	4b77      	ldr	r3, [pc, #476]	; (8002b54 <menu+0x1834>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002984:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <menu+0x1828>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b6e      	ldr	r3, [pc, #440]	; (8002b48 <menu+0x1828>)
 800298e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002990:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <menu+0x1828>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d902      	bls.n	800299e <menu+0x167e>
		   		kapi2Tip = 2;
 8002998:	4b6b      	ldr	r3, [pc, #428]	; (8002b48 <menu+0x1828>)
 800299a:	2202      	movs	r2, #2
 800299c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800299e:	f002 f889 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029a2:	2108      	movs	r1, #8
 80029a4:	486a      	ldr	r0, [pc, #424]	; (8002b50 <menu+0x1830>)
 80029a6:	f006 fc9d 	bl	80092e4 <HAL_GPIO_ReadPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10d      	bne.n	80029cc <menu+0x16ac>
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <menu+0x1834>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80029be:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <menu+0x1828>)
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	4b65      	ldr	r3, [pc, #404]	; (8002b58 <menu+0x1838>)
 80029c4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <menu+0x183c>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80029cc:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <menu+0x1840>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	d17f      	bne.n	8002ad4 <menu+0x17b4>
		if(dilSecim == 0) {
 80029d4:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <menu+0x1844>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80029dc:	4a62      	ldr	r2, [pc, #392]	; (8002b68 <menu+0x1848>)
 80029de:	2101      	movs	r1, #1
 80029e0:	2001      	movs	r0, #1
 80029e2:	f005 f959 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029e6:	4a61      	ldr	r2, [pc, #388]	; (8002b6c <menu+0x184c>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	2002      	movs	r0, #2
 80029ec:	f005 f954 	bl	8007c98 <lcd_print>
 80029f0:	e00d      	b.n	8002a0e <menu+0x16ee>
		} else if(dilSecim == 1) {
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <menu+0x1844>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d109      	bne.n	8002a0e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80029fa:	4a5d      	ldr	r2, [pc, #372]	; (8002b70 <menu+0x1850>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	2001      	movs	r0, #1
 8002a00:	f005 f94a 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a04:	4a5b      	ldr	r2, [pc, #364]	; (8002b74 <menu+0x1854>)
 8002a06:	2101      	movs	r1, #1
 8002a08:	2002      	movs	r0, #2
 8002a0a:	f005 f945 	bl	8007c98 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a0e:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <menu+0x1858>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	220a      	movs	r2, #10
 8002a14:	4959      	ldr	r1, [pc, #356]	; (8002b7c <menu+0x185c>)
 8002a16:	4618      	mov	r0, r3
 8002a18:	f009 fc90 	bl	800c33c <itoa>
		lcd_print(2,16,snum);
 8002a1c:	4a57      	ldr	r2, [pc, #348]	; (8002b7c <menu+0x185c>)
 8002a1e:	2110      	movs	r1, #16
 8002a20:	2002      	movs	r0, #2
 8002a22:	f005 f939 	bl	8007c98 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a26:	2102      	movs	r1, #2
 8002a28:	4849      	ldr	r0, [pc, #292]	; (8002b50 <menu+0x1830>)
 8002a2a:	f006 fc5b 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d119      	bne.n	8002a68 <menu+0x1748>
 8002a34:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <menu+0x1834>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d012      	beq.n	8002a68 <menu+0x1748>
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <menu+0x1828>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10e      	bne.n	8002a68 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <menu+0x1858>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <menu+0x1858>)
 8002a54:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002a56:	4b48      	ldr	r3, [pc, #288]	; (8002b78 <menu+0x1858>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d902      	bls.n	8002a64 <menu+0x1744>
				kapi2AcSure = 0;
 8002a5e:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <menu+0x1858>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a64:	f002 f826 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a68:	2104      	movs	r1, #4
 8002a6a:	4839      	ldr	r0, [pc, #228]	; (8002b50 <menu+0x1830>)
 8002a6c:	f006 fc3a 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d119      	bne.n	8002aaa <menu+0x178a>
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <menu+0x1834>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	f083 0301 	eor.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d012      	beq.n	8002aaa <menu+0x178a>
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <menu+0x1828>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10e      	bne.n	8002aaa <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002a8c:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <menu+0x1858>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <menu+0x1858>)
 8002a96:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a98:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <menu+0x1858>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b06      	cmp	r3, #6
 8002a9e:	d902      	bls.n	8002aa6 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <menu+0x1858>)
 8002aa2:	2205      	movs	r2, #5
 8002aa4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aa6:	f002 f805 	bl	8004ab4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aaa:	2108      	movs	r1, #8
 8002aac:	4828      	ldr	r0, [pc, #160]	; (8002b50 <menu+0x1830>)
 8002aae:	f006 fc19 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10d      	bne.n	8002ad4 <menu+0x17b4>
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <menu+0x1834>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <menu+0x1858>)
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <menu+0x1838>)
 8002acc:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <menu+0x183c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002ad4:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <menu+0x1840>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b0d      	cmp	r3, #13
 8002ada:	f040 80b5 	bne.w	8002c48 <menu+0x1928>
		if(dilSecim == 0) {
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <menu+0x1844>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d105      	bne.n	8002af2 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002ae6:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <menu+0x1860>)
 8002ae8:	2101      	movs	r1, #1
 8002aea:	2001      	movs	r0, #1
 8002aec:	f005 f8d4 	bl	8007c98 <lcd_print>
 8002af0:	e008      	b.n	8002b04 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <menu+0x1844>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d104      	bne.n	8002b04 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002afa:	4a22      	ldr	r2, [pc, #136]	; (8002b84 <menu+0x1864>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	2001      	movs	r0, #1
 8002b00:	f005 f8ca 	bl	8007c98 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <menu+0x1868>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <menu+0x186c>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2002      	movs	r0, #2
 8002b12:	f005 f8c1 	bl	8007c98 <lcd_print>
 8002b16:	e048      	b.n	8002baa <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <menu+0x1868>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d13b      	bne.n	8002b98 <menu+0x1878>
			if(dilSecim == 0) {
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <menu+0x1844>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <menu+0x1870>)
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f005 f8b3 	bl	8007c98 <lcd_print>
 8002b32:	e03a      	b.n	8002baa <menu+0x188a>
			} else if(dilSecim == 1) {
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <menu+0x1844>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d136      	bne.n	8002baa <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002b3c:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <menu+0x1874>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2002      	movs	r0, #2
 8002b42:	f005 f8a9 	bl	8007c98 <lcd_print>
 8002b46:	e030      	b.n	8002baa <menu+0x188a>
 8002b48:	20000232 	.word	0x20000232
 8002b4c:	0800d530 	.word	0x0800d530
 8002b50:	40010800 	.word	0x40010800
 8002b54:	20000257 	.word	0x20000257
 8002b58:	2000012c 	.word	0x2000012c
 8002b5c:	20000254 	.word	0x20000254
 8002b60:	20000228 	.word	0x20000228
 8002b64:	20000249 	.word	0x20000249
 8002b68:	0800d5b0 	.word	0x0800d5b0
 8002b6c:	0800d554 	.word	0x0800d554
 8002b70:	0800d5c4 	.word	0x0800d5c4
 8002b74:	0800d578 	.word	0x0800d578
 8002b78:	20000242 	.word	0x20000242
 8002b7c:	2000019c 	.word	0x2000019c
 8002b80:	0800d5d8 	.word	0x0800d5d8
 8002b84:	0800d5ec 	.word	0x0800d5ec
 8002b88:	20000233 	.word	0x20000233
 8002b8c:	0800d4f8 	.word	0x0800d4f8
 8002b90:	0800d50c 	.word	0x0800d50c
 8002b94:	0800d51c 	.word	0x0800d51c
			}
		} else if(kapitablaTip == 2) {
 8002b98:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <menu+0x19e8>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d104      	bne.n	8002baa <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002ba0:	4a5a      	ldr	r2, [pc, #360]	; (8002d0c <menu+0x19ec>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f005 f877 	bl	8007c98 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002baa:	2102      	movs	r1, #2
 8002bac:	4858      	ldr	r0, [pc, #352]	; (8002d10 <menu+0x19f0>)
 8002bae:	f006 fb99 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d115      	bne.n	8002be4 <menu+0x18c4>
 8002bb8:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <menu+0x19f4>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	f083 0301 	eor.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00e      	beq.n	8002be4 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002bc6:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <menu+0x19e8>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <menu+0x19e8>)
 8002bd0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002bd2:	4b4d      	ldr	r3, [pc, #308]	; (8002d08 <menu+0x19e8>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d902      	bls.n	8002be0 <menu+0x18c0>
				kapitablaTip = 0;
 8002bda:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <menu+0x19e8>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002be0:	f001 ff68 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be4:	2104      	movs	r1, #4
 8002be6:	484a      	ldr	r0, [pc, #296]	; (8002d10 <menu+0x19f0>)
 8002be8:	f006 fb7c 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d115      	bne.n	8002c1e <menu+0x18fe>
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <menu+0x19f4>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00e      	beq.n	8002c1e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <menu+0x19e8>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <menu+0x19e8>)
 8002c0a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c0c:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <menu+0x19e8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d902      	bls.n	8002c1a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002c14:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <menu+0x19e8>)
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c1a:	f001 ff4b 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c1e:	2108      	movs	r1, #8
 8002c20:	483b      	ldr	r0, [pc, #236]	; (8002d10 <menu+0x19f0>)
 8002c22:	f006 fb5f 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d10d      	bne.n	8002c48 <menu+0x1928>
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <menu+0x19f4>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f083 0301 	eor.w	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002c3a:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <menu+0x19e8>)
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <menu+0x19f8>)
 8002c40:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002c42:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <menu+0x19fc>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <menu+0x1a00>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b0e      	cmp	r3, #14
 8002c4e:	f040 80f2 	bne.w	8002e36 <menu+0x1b16>
		if(dilSecim == 0) {
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <menu+0x1a04>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002c5a:	4a33      	ldr	r2, [pc, #204]	; (8002d28 <menu+0x1a08>)
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f005 f81a 	bl	8007c98 <lcd_print>
 8002c64:	e008      	b.n	8002c78 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002c66:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <menu+0x1a04>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d104      	bne.n	8002c78 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <menu+0x1a0c>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	2001      	movs	r0, #1
 8002c74:	f005 f810 	bl	8007c98 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002c78:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <menu+0x1a10>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d113      	bne.n	8002ca8 <menu+0x1988>
			if(dilSecim == 0){
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <menu+0x1a04>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002c88:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <menu+0x1a14>)
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f005 f803 	bl	8007c98 <lcd_print>
 8002c92:	e071      	b.n	8002d78 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c94:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <menu+0x1a04>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d16d      	bne.n	8002d78 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002c9c:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <menu+0x1a18>)
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	f004 fff9 	bl	8007c98 <lcd_print>
 8002ca6:	e067      	b.n	8002d78 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <menu+0x1a10>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d112      	bne.n	8002cd6 <menu+0x19b6>
			if(dilSecim == 0){
 8002cb0:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <menu+0x1a04>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <menu+0x1a1c>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2002      	movs	r0, #2
 8002cbe:	f004 ffeb 	bl	8007c98 <lcd_print>
			}
			if(dilSecim == 1){
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <menu+0x1a04>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d156      	bne.n	8002d78 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002cca:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <menu+0x1a20>)
 8002ccc:	2101      	movs	r1, #1
 8002cce:	2002      	movs	r0, #2
 8002cd0:	f004 ffe2 	bl	8007c98 <lcd_print>
 8002cd4:	e050      	b.n	8002d78 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002cd6:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <menu+0x1a10>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d136      	bne.n	8002d4c <menu+0x1a2c>
			if(dilSecim == 0){
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <menu+0x1a04>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <menu+0x1a24>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2002      	movs	r0, #2
 8002cec:	f004 ffd4 	bl	8007c98 <lcd_print>
 8002cf0:	e042      	b.n	8002d78 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <menu+0x1a04>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002cfa:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <menu+0x1a28>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f004 ffca 	bl	8007c98 <lcd_print>
 8002d04:	e038      	b.n	8002d78 <menu+0x1a58>
 8002d06:	bf00      	nop
 8002d08:	20000233 	.word	0x20000233
 8002d0c:	0800d530 	.word	0x0800d530
 8002d10:	40010800 	.word	0x40010800
 8002d14:	20000257 	.word	0x20000257
 8002d18:	2000012c 	.word	0x2000012c
 8002d1c:	20000254 	.word	0x20000254
 8002d20:	20000228 	.word	0x20000228
 8002d24:	20000249 	.word	0x20000249
 8002d28:	0800d600 	.word	0x0800d600
 8002d2c:	0800d614 	.word	0x0800d614
 8002d30:	20000235 	.word	0x20000235
 8002d34:	0800d628 	.word	0x0800d628
 8002d38:	0800d638 	.word	0x0800d638
 8002d3c:	0800d648 	.word	0x0800d648
 8002d40:	0800d658 	.word	0x0800d658
 8002d44:	0800d668 	.word	0x0800d668
 8002d48:	0800d67c 	.word	0x0800d67c
			}
		} else if(kapiTablaAcKonum == 3) {
 8002d4c:	4b9b      	ldr	r3, [pc, #620]	; (8002fbc <menu+0x1c9c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d111      	bne.n	8002d78 <menu+0x1a58>
			if(dilSecim == 0) {
 8002d54:	4b9a      	ldr	r3, [pc, #616]	; (8002fc0 <menu+0x1ca0>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002d5c:	4a99      	ldr	r2, [pc, #612]	; (8002fc4 <menu+0x1ca4>)
 8002d5e:	2101      	movs	r1, #1
 8002d60:	2002      	movs	r0, #2
 8002d62:	f004 ff99 	bl	8007c98 <lcd_print>
			}
			if(dilSecim == 1) {
 8002d66:	4b96      	ldr	r3, [pc, #600]	; (8002fc0 <menu+0x1ca0>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d104      	bne.n	8002d78 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002d6e:	4a96      	ldr	r2, [pc, #600]	; (8002fc8 <menu+0x1ca8>)
 8002d70:	2101      	movs	r1, #1
 8002d72:	2002      	movs	r0, #2
 8002d74:	f004 ff90 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4894      	ldr	r0, [pc, #592]	; (8002fcc <menu+0x1cac>)
 8002d7c:	f006 fab2 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d115      	bne.n	8002db2 <menu+0x1a92>
 8002d86:	4b92      	ldr	r3, [pc, #584]	; (8002fd0 <menu+0x1cb0>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002d94:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <menu+0x1c9c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b87      	ldr	r3, [pc, #540]	; (8002fbc <menu+0x1c9c>)
 8002d9e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002da0:	4b86      	ldr	r3, [pc, #536]	; (8002fbc <menu+0x1c9c>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d902      	bls.n	8002dae <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002da8:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <menu+0x1c9c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dae:	f001 fe81 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002db2:	2104      	movs	r1, #4
 8002db4:	4885      	ldr	r0, [pc, #532]	; (8002fcc <menu+0x1cac>)
 8002db6:	f006 fa95 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d115      	bne.n	8002dec <menu+0x1acc>
 8002dc0:	4b83      	ldr	r3, [pc, #524]	; (8002fd0 <menu+0x1cb0>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00e      	beq.n	8002dec <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002dce:	4b7b      	ldr	r3, [pc, #492]	; (8002fbc <menu+0x1c9c>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b79      	ldr	r3, [pc, #484]	; (8002fbc <menu+0x1c9c>)
 8002dd8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002dda:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <menu+0x1c9c>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d902      	bls.n	8002de8 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002de2:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <menu+0x1c9c>)
 8002de4:	2202      	movs	r2, #2
 8002de6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002de8:	f001 fe64 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dec:	2108      	movs	r1, #8
 8002dee:	4877      	ldr	r0, [pc, #476]	; (8002fcc <menu+0x1cac>)
 8002df0:	f006 fa78 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d11d      	bne.n	8002e36 <menu+0x1b16>
 8002dfa:	4b75      	ldr	r3, [pc, #468]	; (8002fd0 <menu+0x1cb0>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	f083 0301 	eor.w	r3, r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d016      	beq.n	8002e36 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e08:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <menu+0x1c9c>)
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	4b71      	ldr	r3, [pc, #452]	; (8002fd4 <menu+0x1cb4>)
 8002e0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002e12:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <menu+0x1c9c>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <menu+0x1b02>
 8002e1a:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <menu+0x1c9c>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d106      	bne.n	8002e30 <menu+0x1b10>
				altLimit = 1;
 8002e22:	4b6d      	ldr	r3, [pc, #436]	; (8002fd8 <menu+0x1cb8>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e28:	4b6b      	ldr	r3, [pc, #428]	; (8002fd8 <menu+0x1cb8>)
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <menu+0x1cb4>)
 8002e2e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002e30:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <menu+0x1cbc>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002e36:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <menu+0x1cc0>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d17f      	bne.n	8002f3e <menu+0x1c1e>
		if(dilSecim == 0) {
 8002e3e:	4b60      	ldr	r3, [pc, #384]	; (8002fc0 <menu+0x1ca0>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002e46:	4a67      	ldr	r2, [pc, #412]	; (8002fe4 <menu+0x1cc4>)
 8002e48:	2101      	movs	r1, #1
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f004 ff24 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002e50:	4a65      	ldr	r2, [pc, #404]	; (8002fe8 <menu+0x1cc8>)
 8002e52:	2101      	movs	r1, #1
 8002e54:	2002      	movs	r0, #2
 8002e56:	f004 ff1f 	bl	8007c98 <lcd_print>
 8002e5a:	e00d      	b.n	8002e78 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002e5c:	4b58      	ldr	r3, [pc, #352]	; (8002fc0 <menu+0x1ca0>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d109      	bne.n	8002e78 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002e64:	4a61      	ldr	r2, [pc, #388]	; (8002fec <menu+0x1ccc>)
 8002e66:	2101      	movs	r1, #1
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f004 ff15 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002e6e:	4a60      	ldr	r2, [pc, #384]	; (8002ff0 <menu+0x1cd0>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	2002      	movs	r0, #2
 8002e74:	f004 ff10 	bl	8007c98 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002e78:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <menu+0x1cd4>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	495e      	ldr	r1, [pc, #376]	; (8002ff8 <menu+0x1cd8>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	f009 fa5b 	bl	800c33c <itoa>
		lcd_print(2,16,snum);
 8002e86:	4a5c      	ldr	r2, [pc, #368]	; (8002ff8 <menu+0x1cd8>)
 8002e88:	2110      	movs	r1, #16
 8002e8a:	2002      	movs	r0, #2
 8002e8c:	f004 ff04 	bl	8007c98 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e90:	2102      	movs	r1, #2
 8002e92:	484e      	ldr	r0, [pc, #312]	; (8002fcc <menu+0x1cac>)
 8002e94:	f006 fa26 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d119      	bne.n	8002ed2 <menu+0x1bb2>
 8002e9e:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <menu+0x1cb0>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d012      	beq.n	8002ed2 <menu+0x1bb2>
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <menu+0x1cdc>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10e      	bne.n	8002ed2 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <menu+0x1cd4>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <menu+0x1cd4>)
 8002ebe:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <menu+0x1cd4>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d902      	bls.n	8002ece <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <menu+0x1cd4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ece:	f001 fdf1 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	483d      	ldr	r0, [pc, #244]	; (8002fcc <menu+0x1cac>)
 8002ed6:	f006 fa05 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d119      	bne.n	8002f14 <menu+0x1bf4>
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <menu+0x1cb0>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	f083 0301 	eor.w	r3, r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <menu+0x1bf4>
 8002eee:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <menu+0x1cdc>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10e      	bne.n	8002f14 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002ef6:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <menu+0x1cd4>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <menu+0x1cd4>)
 8002f00:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f02:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <menu+0x1cd4>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d902      	bls.n	8002f10 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <menu+0x1cd4>)
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002f10:	f001 fdd0 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f14:	2108      	movs	r1, #8
 8002f16:	482d      	ldr	r0, [pc, #180]	; (8002fcc <menu+0x1cac>)
 8002f18:	f006 f9e4 	bl	80092e4 <HAL_GPIO_ReadPin>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d10d      	bne.n	8002f3e <menu+0x1c1e>
 8002f22:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <menu+0x1cb0>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	f083 0301 	eor.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002f30:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <menu+0x1cd4>)
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <menu+0x1cb4>)
 8002f36:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002f38:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <menu+0x1cbc>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <menu+0x1cc0>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	f040 80bc 	bne.w	80030c0 <menu+0x1da0>
		if(dilSecim == 0) {
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <menu+0x1ca0>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002f50:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <menu+0x1ce0>)
 8002f52:	2101      	movs	r1, #1
 8002f54:	2001      	movs	r0, #1
 8002f56:	f004 fe9f 	bl	8007c98 <lcd_print>
 8002f5a:	e008      	b.n	8002f6e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <menu+0x1ca0>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d104      	bne.n	8002f6e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002f64:	4a27      	ldr	r2, [pc, #156]	; (8003004 <menu+0x1ce4>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f004 fe95 	bl	8007c98 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <menu+0x1ce8>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d113      	bne.n	8002f9e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <menu+0x1ca0>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002f7e:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <menu+0x1ca4>)
 8002f80:	2101      	movs	r1, #1
 8002f82:	2002      	movs	r0, #2
 8002f84:	f004 fe88 	bl	8007c98 <lcd_print>
 8002f88:	e04b      	b.n	8003022 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <menu+0x1ca0>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d147      	bne.n	8003022 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002f92:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <menu+0x1ca8>)
 8002f94:	2101      	movs	r1, #1
 8002f96:	2002      	movs	r0, #2
 8002f98:	f004 fe7e 	bl	8007c98 <lcd_print>
 8002f9c:	e041      	b.n	8003022 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <menu+0x1ce8>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d13d      	bne.n	8003022 <menu+0x1d02>
			if(dilSecim == 0) {
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <menu+0x1ca0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d130      	bne.n	8003010 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <menu+0x1cec>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f004 fe70 	bl	8007c98 <lcd_print>
 8002fb8:	e033      	b.n	8003022 <menu+0x1d02>
 8002fba:	bf00      	nop
 8002fbc:	20000235 	.word	0x20000235
 8002fc0:	20000249 	.word	0x20000249
 8002fc4:	0800d2f0 	.word	0x0800d2f0
 8002fc8:	0800d304 	.word	0x0800d304
 8002fcc:	40010800 	.word	0x40010800
 8002fd0:	20000257 	.word	0x20000257
 8002fd4:	2000012c 	.word	0x2000012c
 8002fd8:	2000022e 	.word	0x2000022e
 8002fdc:	20000254 	.word	0x20000254
 8002fe0:	20000228 	.word	0x20000228
 8002fe4:	0800d690 	.word	0x0800d690
 8002fe8:	0800d554 	.word	0x0800d554
 8002fec:	0800d6a4 	.word	0x0800d6a4
 8002ff0:	0800d578 	.word	0x0800d578
 8002ff4:	20000243 	.word	0x20000243
 8002ff8:	2000019c 	.word	0x2000019c
 8002ffc:	20000233 	.word	0x20000233
 8003000:	0800d6b8 	.word	0x0800d6b8
 8003004:	0800d6cc 	.word	0x0800d6cc
 8003008:	20000236 	.word	0x20000236
 800300c:	0800d350 	.word	0x0800d350
			} else if(dilSecim == 1) {
 8003010:	4b99      	ldr	r3, [pc, #612]	; (8003278 <menu+0x1f58>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d104      	bne.n	8003022 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003018:	4a98      	ldr	r2, [pc, #608]	; (800327c <menu+0x1f5c>)
 800301a:	2101      	movs	r1, #1
 800301c:	2002      	movs	r0, #2
 800301e:	f004 fe3b 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003022:	2102      	movs	r1, #2
 8003024:	4896      	ldr	r0, [pc, #600]	; (8003280 <menu+0x1f60>)
 8003026:	f006 f95d 	bl	80092e4 <HAL_GPIO_ReadPin>
 800302a:	4603      	mov	r3, r0
 800302c:	2b01      	cmp	r3, #1
 800302e:	d115      	bne.n	800305c <menu+0x1d3c>
 8003030:	4b94      	ldr	r3, [pc, #592]	; (8003284 <menu+0x1f64>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800303e:	4b92      	ldr	r3, [pc, #584]	; (8003288 <menu+0x1f68>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b90      	ldr	r3, [pc, #576]	; (8003288 <menu+0x1f68>)
 8003048:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800304a:	4b8f      	ldr	r3, [pc, #572]	; (8003288 <menu+0x1f68>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d902      	bls.n	8003058 <menu+0x1d38>
				yukariYavasLimit = 0;
 8003052:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <menu+0x1f68>)
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003058:	f001 fd2c 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800305c:	2104      	movs	r1, #4
 800305e:	4888      	ldr	r0, [pc, #544]	; (8003280 <menu+0x1f60>)
 8003060:	f006 f940 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003064:	4603      	mov	r3, r0
 8003066:	2b01      	cmp	r3, #1
 8003068:	d115      	bne.n	8003096 <menu+0x1d76>
 800306a:	4b86      	ldr	r3, [pc, #536]	; (8003284 <menu+0x1f64>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	f083 0301 	eor.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00e      	beq.n	8003096 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003078:	4b83      	ldr	r3, [pc, #524]	; (8003288 <menu+0x1f68>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	3b01      	subs	r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b81      	ldr	r3, [pc, #516]	; (8003288 <menu+0x1f68>)
 8003082:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003084:	4b80      	ldr	r3, [pc, #512]	; (8003288 <menu+0x1f68>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800308c:	4b7e      	ldr	r3, [pc, #504]	; (8003288 <menu+0x1f68>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003092:	f001 fd0f 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003096:	2108      	movs	r1, #8
 8003098:	4879      	ldr	r0, [pc, #484]	; (8003280 <menu+0x1f60>)
 800309a:	f006 f923 	bl	80092e4 <HAL_GPIO_ReadPin>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10d      	bne.n	80030c0 <menu+0x1da0>
 80030a4:	4b77      	ldr	r3, [pc, #476]	; (8003284 <menu+0x1f64>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80030b2:	4b75      	ldr	r3, [pc, #468]	; (8003288 <menu+0x1f68>)
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	4b75      	ldr	r3, [pc, #468]	; (800328c <menu+0x1f6c>)
 80030b8:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80030ba:	4b75      	ldr	r3, [pc, #468]	; (8003290 <menu+0x1f70>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80030c0:	4b74      	ldr	r3, [pc, #464]	; (8003294 <menu+0x1f74>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b11      	cmp	r3, #17
 80030c6:	f040 80c3 	bne.w	8003250 <menu+0x1f30>
		if(dilSecim == 0) {
 80030ca:	4b6b      	ldr	r3, [pc, #428]	; (8003278 <menu+0x1f58>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80030d2:	4a71      	ldr	r2, [pc, #452]	; (8003298 <menu+0x1f78>)
 80030d4:	2101      	movs	r1, #1
 80030d6:	2001      	movs	r0, #1
 80030d8:	f004 fdde 	bl	8007c98 <lcd_print>
 80030dc:	e008      	b.n	80030f0 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80030de:	4b66      	ldr	r3, [pc, #408]	; (8003278 <menu+0x1f58>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d104      	bne.n	80030f0 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80030e6:	4a6d      	ldr	r2, [pc, #436]	; (800329c <menu+0x1f7c>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	2001      	movs	r0, #1
 80030ec:	f004 fdd4 	bl	8007c98 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80030f0:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <menu+0x1f80>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d113      	bne.n	8003120 <menu+0x1e00>
			if(dilSecim == 0){
 80030f8:	4b5f      	ldr	r3, [pc, #380]	; (8003278 <menu+0x1f58>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003100:	4a68      	ldr	r2, [pc, #416]	; (80032a4 <menu+0x1f84>)
 8003102:	2101      	movs	r1, #1
 8003104:	2002      	movs	r0, #2
 8003106:	f004 fdc7 	bl	8007c98 <lcd_print>
 800310a:	e038      	b.n	800317e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800310c:	4b5a      	ldr	r3, [pc, #360]	; (8003278 <menu+0x1f58>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d134      	bne.n	800317e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003114:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <menu+0x1f88>)
 8003116:	2101      	movs	r1, #1
 8003118:	2002      	movs	r0, #2
 800311a:	f004 fdbd 	bl	8007c98 <lcd_print>
 800311e:	e02e      	b.n	800317e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003120:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <menu+0x1f80>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d113      	bne.n	8003150 <menu+0x1e30>
			if(dilSecim == 0){
 8003128:	4b53      	ldr	r3, [pc, #332]	; (8003278 <menu+0x1f58>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003130:	4a5e      	ldr	r2, [pc, #376]	; (80032ac <menu+0x1f8c>)
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f004 fdaf 	bl	8007c98 <lcd_print>
 800313a:	e020      	b.n	800317e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800313c:	4b4e      	ldr	r3, [pc, #312]	; (8003278 <menu+0x1f58>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d11c      	bne.n	800317e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003144:	4a5a      	ldr	r2, [pc, #360]	; (80032b0 <menu+0x1f90>)
 8003146:	2101      	movs	r1, #1
 8003148:	2002      	movs	r0, #2
 800314a:	f004 fda5 	bl	8007c98 <lcd_print>
 800314e:	e016      	b.n	800317e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <menu+0x1f80>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d112      	bne.n	800317e <menu+0x1e5e>
			if(dilSecim == 0) {
 8003158:	4b47      	ldr	r3, [pc, #284]	; (8003278 <menu+0x1f58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003160:	4a54      	ldr	r2, [pc, #336]	; (80032b4 <menu+0x1f94>)
 8003162:	2101      	movs	r1, #1
 8003164:	2002      	movs	r0, #2
 8003166:	f004 fd97 	bl	8007c98 <lcd_print>
 800316a:	e008      	b.n	800317e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800316c:	4b42      	ldr	r3, [pc, #264]	; (8003278 <menu+0x1f58>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d104      	bne.n	800317e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003174:	4a50      	ldr	r2, [pc, #320]	; (80032b8 <menu+0x1f98>)
 8003176:	2101      	movs	r1, #1
 8003178:	2002      	movs	r0, #2
 800317a:	f004 fd8d 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800317e:	2102      	movs	r1, #2
 8003180:	483f      	ldr	r0, [pc, #252]	; (8003280 <menu+0x1f60>)
 8003182:	f006 f8af 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003186:	4603      	mov	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d115      	bne.n	80031b8 <menu+0x1e98>
 800318c:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <menu+0x1f64>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	f083 0301 	eor.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00e      	beq.n	80031b8 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <menu+0x1f80>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <menu+0x1f80>)
 80031a4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80031a6:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <menu+0x1f80>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d902      	bls.n	80031b4 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <menu+0x1f80>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031b4:	f001 fc7e 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b8:	2104      	movs	r1, #4
 80031ba:	4831      	ldr	r0, [pc, #196]	; (8003280 <menu+0x1f60>)
 80031bc:	f006 f892 	bl	80092e4 <HAL_GPIO_ReadPin>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d115      	bne.n	80031f2 <menu+0x1ed2>
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <menu+0x1f64>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00e      	beq.n	80031f2 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <menu+0x1f80>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	3b01      	subs	r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <menu+0x1f80>)
 80031de:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <menu+0x1f80>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d902      	bls.n	80031ee <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <menu+0x1f80>)
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ee:	f001 fc61 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f2:	2108      	movs	r1, #8
 80031f4:	4822      	ldr	r0, [pc, #136]	; (8003280 <menu+0x1f60>)
 80031f6:	f006 f875 	bl	80092e4 <HAL_GPIO_ReadPin>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d127      	bne.n	8003250 <menu+0x1f30>
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <menu+0x1f64>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	f083 0301 	eor.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d020      	beq.n	8003250 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <menu+0x1f80>)
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <menu+0x1f6c>)
 8003214:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <menu+0x1f80>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d003      	beq.n	8003226 <menu+0x1f06>
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <menu+0x1f80>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d106      	bne.n	8003234 <menu+0x1f14>
				calismaSekli = 0;
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <menu+0x1f9c>)
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800322c:	4b23      	ldr	r3, [pc, #140]	; (80032bc <menu+0x1f9c>)
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <menu+0x1f6c>)
 8003232:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <menu+0x1f80>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d106      	bne.n	800324a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <menu+0x1fa0>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <menu+0x1fa0>)
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <menu+0x1f6c>)
 8003248:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <menu+0x1f70>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <menu+0x1f74>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b12      	cmp	r3, #18
 8003256:	f040 80d5 	bne.w	8003404 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <menu+0x1f80>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d13c      	bne.n	80032dc <menu+0x1fbc>
			if(dilSecim == 0) {
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <menu+0x1f58>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d12e      	bne.n	80032c8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800326a:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <menu+0x1fa4>)
 800326c:	2101      	movs	r1, #1
 800326e:	2001      	movs	r0, #1
 8003270:	f004 fd12 	bl	8007c98 <lcd_print>
 8003274:	e048      	b.n	8003308 <menu+0x1fe8>
 8003276:	bf00      	nop
 8003278:	20000249 	.word	0x20000249
 800327c:	0800d364 	.word	0x0800d364
 8003280:	40010800 	.word	0x40010800
 8003284:	20000257 	.word	0x20000257
 8003288:	20000236 	.word	0x20000236
 800328c:	2000012c 	.word	0x2000012c
 8003290:	20000254 	.word	0x20000254
 8003294:	20000228 	.word	0x20000228
 8003298:	0800d6e0 	.word	0x0800d6e0
 800329c:	0800d6f4 	.word	0x0800d6f4
 80032a0:	20000237 	.word	0x20000237
 80032a4:	0800d708 	.word	0x0800d708
 80032a8:	0800d718 	.word	0x0800d718
 80032ac:	0800d728 	.word	0x0800d728
 80032b0:	0800d738 	.word	0x0800d738
 80032b4:	0800d2f0 	.word	0x0800d2f0
 80032b8:	0800d304 	.word	0x0800d304
 80032bc:	20000229 	.word	0x20000229
 80032c0:	2000023a 	.word	0x2000023a
 80032c4:	0800d748 	.word	0x0800d748
			} else if(dilSecim == 1) {
 80032c8:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <menu+0x2198>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d11b      	bne.n	8003308 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80032d0:	4a7a      	ldr	r2, [pc, #488]	; (80034bc <menu+0x219c>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	2001      	movs	r0, #1
 80032d6:	f004 fcdf 	bl	8007c98 <lcd_print>
 80032da:	e015      	b.n	8003308 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032dc:	4b78      	ldr	r3, [pc, #480]	; (80034c0 <menu+0x21a0>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d111      	bne.n	8003308 <menu+0x1fe8>
			if(dilSecim == 0){
 80032e4:	4b74      	ldr	r3, [pc, #464]	; (80034b8 <menu+0x2198>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80032ec:	4a75      	ldr	r2, [pc, #468]	; (80034c4 <menu+0x21a4>)
 80032ee:	2101      	movs	r1, #1
 80032f0:	2001      	movs	r0, #1
 80032f2:	f004 fcd1 	bl	8007c98 <lcd_print>
			}
			if(dilSecim == 1){
 80032f6:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <menu+0x2198>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d104      	bne.n	8003308 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80032fe:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <menu+0x21a8>)
 8003300:	2101      	movs	r1, #1
 8003302:	2001      	movs	r0, #1
 8003304:	f004 fcc8 	bl	8007c98 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003308:	4b70      	ldr	r3, [pc, #448]	; (80034cc <menu+0x21ac>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d113      	bne.n	8003338 <menu+0x2018>
			if(dilSecim == 0) {
 8003310:	4b69      	ldr	r3, [pc, #420]	; (80034b8 <menu+0x2198>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003318:	4a6d      	ldr	r2, [pc, #436]	; (80034d0 <menu+0x21b0>)
 800331a:	2101      	movs	r1, #1
 800331c:	2002      	movs	r0, #2
 800331e:	f004 fcbb 	bl	8007c98 <lcd_print>
 8003322:	e020      	b.n	8003366 <menu+0x2046>
			} else if(dilSecim == 1){
 8003324:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <menu+0x2198>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d11c      	bne.n	8003366 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800332c:	4a69      	ldr	r2, [pc, #420]	; (80034d4 <menu+0x21b4>)
 800332e:	2101      	movs	r1, #1
 8003330:	2002      	movs	r0, #2
 8003332:	f004 fcb1 	bl	8007c98 <lcd_print>
 8003336:	e016      	b.n	8003366 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003338:	4b64      	ldr	r3, [pc, #400]	; (80034cc <menu+0x21ac>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d112      	bne.n	8003366 <menu+0x2046>
			if(dilSecim == 0){
 8003340:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <menu+0x2198>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003348:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <menu+0x21b8>)
 800334a:	2101      	movs	r1, #1
 800334c:	2002      	movs	r0, #2
 800334e:	f004 fca3 	bl	8007c98 <lcd_print>
 8003352:	e008      	b.n	8003366 <menu+0x2046>
			} else if(dilSecim == 1){
 8003354:	4b58      	ldr	r3, [pc, #352]	; (80034b8 <menu+0x2198>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d104      	bne.n	8003366 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800335c:	4a5f      	ldr	r2, [pc, #380]	; (80034dc <menu+0x21bc>)
 800335e:	2101      	movs	r1, #1
 8003360:	2002      	movs	r0, #2
 8003362:	f004 fc99 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003366:	2102      	movs	r1, #2
 8003368:	485d      	ldr	r0, [pc, #372]	; (80034e0 <menu+0x21c0>)
 800336a:	f005 ffbb 	bl	80092e4 <HAL_GPIO_ReadPin>
 800336e:	4603      	mov	r3, r0
 8003370:	2b01      	cmp	r3, #1
 8003372:	d115      	bne.n	80033a0 <menu+0x2080>
 8003374:	4b5b      	ldr	r3, [pc, #364]	; (80034e4 <menu+0x21c4>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	f083 0301 	eor.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00e      	beq.n	80033a0 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003382:	4b52      	ldr	r3, [pc, #328]	; (80034cc <menu+0x21ac>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b50      	ldr	r3, [pc, #320]	; (80034cc <menu+0x21ac>)
 800338c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800338e:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <menu+0x21ac>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d902      	bls.n	800339c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003396:	4b4d      	ldr	r3, [pc, #308]	; (80034cc <menu+0x21ac>)
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800339c:	f001 fb8a 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033a0:	2104      	movs	r1, #4
 80033a2:	484f      	ldr	r0, [pc, #316]	; (80034e0 <menu+0x21c0>)
 80033a4:	f005 ff9e 	bl	80092e4 <HAL_GPIO_ReadPin>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d115      	bne.n	80033da <menu+0x20ba>
 80033ae:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <menu+0x21c4>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	f083 0301 	eor.w	r3, r3, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80033bc:	4b43      	ldr	r3, [pc, #268]	; (80034cc <menu+0x21ac>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <menu+0x21ac>)
 80033c6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80033c8:	4b40      	ldr	r3, [pc, #256]	; (80034cc <menu+0x21ac>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80033d0:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <menu+0x21ac>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033d6:	f001 fb6d 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033da:	2108      	movs	r1, #8
 80033dc:	4840      	ldr	r0, [pc, #256]	; (80034e0 <menu+0x21c0>)
 80033de:	f005 ff81 	bl	80092e4 <HAL_GPIO_ReadPin>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10d      	bne.n	8003404 <menu+0x20e4>
 80033e8:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <menu+0x21c4>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	f083 0301 	eor.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80033f6:	4b35      	ldr	r3, [pc, #212]	; (80034cc <menu+0x21ac>)
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <menu+0x21c8>)
 80033fc:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <menu+0x21cc>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003404:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <menu+0x21d0>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b13      	cmp	r3, #19
 800340a:	f040 80d5 	bne.w	80035b8 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <menu+0x21a0>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d113      	bne.n	800343e <menu+0x211e>
			if(dilSecim == 0) {
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <menu+0x2198>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d105      	bne.n	800342a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800341e:	4a35      	ldr	r2, [pc, #212]	; (80034f4 <menu+0x21d4>)
 8003420:	2101      	movs	r1, #1
 8003422:	2001      	movs	r0, #1
 8003424:	f004 fc38 	bl	8007c98 <lcd_print>
 8003428:	e01f      	b.n	800346a <menu+0x214a>
			} else if(dilSecim == 1) {
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <menu+0x2198>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d11b      	bne.n	800346a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003432:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <menu+0x21d8>)
 8003434:	2101      	movs	r1, #1
 8003436:	2001      	movs	r0, #1
 8003438:	f004 fc2e 	bl	8007c98 <lcd_print>
 800343c:	e015      	b.n	800346a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <menu+0x21a0>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d111      	bne.n	800346a <menu+0x214a>
			if(dilSecim == 0) {
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <menu+0x2198>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d104      	bne.n	8003458 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800344e:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <menu+0x21dc>)
 8003450:	2101      	movs	r1, #1
 8003452:	2001      	movs	r0, #1
 8003454:	f004 fc20 	bl	8007c98 <lcd_print>
			}
			if(dilSecim == 1) {
 8003458:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <menu+0x2198>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d104      	bne.n	800346a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003460:	4a27      	ldr	r2, [pc, #156]	; (8003500 <menu+0x21e0>)
 8003462:	2101      	movs	r1, #1
 8003464:	2001      	movs	r0, #1
 8003466:	f004 fc17 	bl	8007c98 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <menu+0x21e4>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d113      	bne.n	800349a <menu+0x217a>
			if(dilSecim == 0) {
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <menu+0x2198>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800347a:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <menu+0x21b0>)
 800347c:	2101      	movs	r1, #1
 800347e:	2002      	movs	r0, #2
 8003480:	f004 fc0a 	bl	8007c98 <lcd_print>
 8003484:	e049      	b.n	800351a <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <menu+0x2198>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d145      	bne.n	800351a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800348e:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <menu+0x21b4>)
 8003490:	2101      	movs	r1, #1
 8003492:	2002      	movs	r0, #2
 8003494:	f004 fc00 	bl	8007c98 <lcd_print>
 8003498:	e03f      	b.n	800351a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <menu+0x21e4>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d13b      	bne.n	800351a <menu+0x21fa>
			if(dilSecim == 0) {
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <menu+0x2198>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12e      	bne.n	8003508 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80034aa:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <menu+0x21b8>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	2002      	movs	r0, #2
 80034b0:	f004 fbf2 	bl	8007c98 <lcd_print>
 80034b4:	e031      	b.n	800351a <menu+0x21fa>
 80034b6:	bf00      	nop
 80034b8:	20000249 	.word	0x20000249
 80034bc:	0800d75c 	.word	0x0800d75c
 80034c0:	20000237 	.word	0x20000237
 80034c4:	0800d76c 	.word	0x0800d76c
 80034c8:	0800d780 	.word	0x0800d780
 80034cc:	20000238 	.word	0x20000238
 80034d0:	0800d2f0 	.word	0x0800d2f0
 80034d4:	0800d304 	.word	0x0800d304
 80034d8:	0800d350 	.word	0x0800d350
 80034dc:	0800d364 	.word	0x0800d364
 80034e0:	40010800 	.word	0x40010800
 80034e4:	20000257 	.word	0x20000257
 80034e8:	2000012c 	.word	0x2000012c
 80034ec:	20000254 	.word	0x20000254
 80034f0:	20000228 	.word	0x20000228
 80034f4:	0800d794 	.word	0x0800d794
 80034f8:	0800d7a8 	.word	0x0800d7a8
 80034fc:	0800d7bc 	.word	0x0800d7bc
 8003500:	0800d7d0 	.word	0x0800d7d0
 8003504:	20000239 	.word	0x20000239
			} else if(dilSecim == 1) {
 8003508:	4b90      	ldr	r3, [pc, #576]	; (800374c <menu+0x242c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d104      	bne.n	800351a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003510:	4a8f      	ldr	r2, [pc, #572]	; (8003750 <menu+0x2430>)
 8003512:	2101      	movs	r1, #1
 8003514:	2002      	movs	r0, #2
 8003516:	f004 fbbf 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800351a:	2102      	movs	r1, #2
 800351c:	488d      	ldr	r0, [pc, #564]	; (8003754 <menu+0x2434>)
 800351e:	f005 fee1 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	d115      	bne.n	8003554 <menu+0x2234>
 8003528:	4b8b      	ldr	r3, [pc, #556]	; (8003758 <menu+0x2438>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	f083 0301 	eor.w	r3, r3, #1
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00e      	beq.n	8003554 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003536:	4b89      	ldr	r3, [pc, #548]	; (800375c <menu+0x243c>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b87      	ldr	r3, [pc, #540]	; (800375c <menu+0x243c>)
 8003540:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003542:	4b86      	ldr	r3, [pc, #536]	; (800375c <menu+0x243c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d902      	bls.n	8003550 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800354a:	4b84      	ldr	r3, [pc, #528]	; (800375c <menu+0x243c>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003550:	f001 fab0 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003554:	2104      	movs	r1, #4
 8003556:	487f      	ldr	r0, [pc, #508]	; (8003754 <menu+0x2434>)
 8003558:	f005 fec4 	bl	80092e4 <HAL_GPIO_ReadPin>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d115      	bne.n	800358e <menu+0x226e>
 8003562:	4b7d      	ldr	r3, [pc, #500]	; (8003758 <menu+0x2438>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	f083 0301 	eor.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003570:	4b7a      	ldr	r3, [pc, #488]	; (800375c <menu+0x243c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	3b01      	subs	r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b78      	ldr	r3, [pc, #480]	; (800375c <menu+0x243c>)
 800357a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800357c:	4b77      	ldr	r3, [pc, #476]	; (800375c <menu+0x243c>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003584:	4b75      	ldr	r3, [pc, #468]	; (800375c <menu+0x243c>)
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800358a:	f001 fa93 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800358e:	2108      	movs	r1, #8
 8003590:	4870      	ldr	r0, [pc, #448]	; (8003754 <menu+0x2434>)
 8003592:	f005 fea7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10d      	bne.n	80035b8 <menu+0x2298>
 800359c:	4b6e      	ldr	r3, [pc, #440]	; (8003758 <menu+0x2438>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	f083 0301 	eor.w	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80035aa:	4b6c      	ldr	r3, [pc, #432]	; (800375c <menu+0x243c>)
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <menu+0x2440>)
 80035b0:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80035b2:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <menu+0x2444>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80035b8:	4b6b      	ldr	r3, [pc, #428]	; (8003768 <menu+0x2448>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b14      	cmp	r3, #20
 80035be:	f040 80b5 	bne.w	800372c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80035c2:	4b6a      	ldr	r3, [pc, #424]	; (800376c <menu+0x244c>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d113      	bne.n	80035f2 <menu+0x22d2>
			if(dilSecim == 0) {
 80035ca:	4b60      	ldr	r3, [pc, #384]	; (800374c <menu+0x242c>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d105      	bne.n	80035de <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80035d2:	4a67      	ldr	r2, [pc, #412]	; (8003770 <menu+0x2450>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	2001      	movs	r0, #1
 80035d8:	f004 fb5e 	bl	8007c98 <lcd_print>
 80035dc:	e020      	b.n	8003620 <menu+0x2300>
			} else if(dilSecim == 1) {
 80035de:	4b5b      	ldr	r3, [pc, #364]	; (800374c <menu+0x242c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d11c      	bne.n	8003620 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80035e6:	4a63      	ldr	r2, [pc, #396]	; (8003774 <menu+0x2454>)
 80035e8:	2101      	movs	r1, #1
 80035ea:	2001      	movs	r0, #1
 80035ec:	f004 fb54 	bl	8007c98 <lcd_print>
 80035f0:	e016      	b.n	8003620 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80035f2:	4b5e      	ldr	r3, [pc, #376]	; (800376c <menu+0x244c>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d112      	bne.n	8003620 <menu+0x2300>
			if(dilSecim == 0) {
 80035fa:	4b54      	ldr	r3, [pc, #336]	; (800374c <menu+0x242c>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003602:	4a5d      	ldr	r2, [pc, #372]	; (8003778 <menu+0x2458>)
 8003604:	2101      	movs	r1, #1
 8003606:	2001      	movs	r0, #1
 8003608:	f004 fb46 	bl	8007c98 <lcd_print>
 800360c:	e008      	b.n	8003620 <menu+0x2300>
			} else if(dilSecim == 1) {
 800360e:	4b4f      	ldr	r3, [pc, #316]	; (800374c <menu+0x242c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d104      	bne.n	8003620 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003616:	4a59      	ldr	r2, [pc, #356]	; (800377c <menu+0x245c>)
 8003618:	2101      	movs	r1, #1
 800361a:	2001      	movs	r0, #1
 800361c:	f004 fb3c 	bl	8007c98 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <menu+0x2460>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d113      	bne.n	8003650 <menu+0x2330>
			if(dilSecim == 0) {
 8003628:	4b48      	ldr	r3, [pc, #288]	; (800374c <menu+0x242c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003630:	4a54      	ldr	r2, [pc, #336]	; (8003784 <menu+0x2464>)
 8003632:	2101      	movs	r1, #1
 8003634:	2002      	movs	r0, #2
 8003636:	f004 fb2f 	bl	8007c98 <lcd_print>
 800363a:	e020      	b.n	800367e <menu+0x235e>
			} else if(dilSecim == 1) {
 800363c:	4b43      	ldr	r3, [pc, #268]	; (800374c <menu+0x242c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d11c      	bne.n	800367e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003644:	4a50      	ldr	r2, [pc, #320]	; (8003788 <menu+0x2468>)
 8003646:	2101      	movs	r1, #1
 8003648:	2002      	movs	r0, #2
 800364a:	f004 fb25 	bl	8007c98 <lcd_print>
 800364e:	e016      	b.n	800367e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003650:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <menu+0x2460>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d112      	bne.n	800367e <menu+0x235e>
			if(dilSecim == 0) {
 8003658:	4b3c      	ldr	r3, [pc, #240]	; (800374c <menu+0x242c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003660:	4a4a      	ldr	r2, [pc, #296]	; (800378c <menu+0x246c>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f004 fb17 	bl	8007c98 <lcd_print>
 800366a:	e008      	b.n	800367e <menu+0x235e>
			} else if(dilSecim == 1) {
 800366c:	4b37      	ldr	r3, [pc, #220]	; (800374c <menu+0x242c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d104      	bne.n	800367e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003674:	4a46      	ldr	r2, [pc, #280]	; (8003790 <menu+0x2470>)
 8003676:	2101      	movs	r1, #1
 8003678:	2002      	movs	r0, #2
 800367a:	f004 fb0d 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800367e:	2102      	movs	r1, #2
 8003680:	4834      	ldr	r0, [pc, #208]	; (8003754 <menu+0x2434>)
 8003682:	f005 fe2f 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003686:	4603      	mov	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d119      	bne.n	80036c0 <menu+0x23a0>
 800368c:	4b32      	ldr	r3, [pc, #200]	; (8003758 <menu+0x2438>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	f083 0301 	eor.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d012      	beq.n	80036c0 <menu+0x23a0>
 800369a:	4b34      	ldr	r3, [pc, #208]	; (800376c <menu+0x244c>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d10e      	bne.n	80036c0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80036a2:	4b37      	ldr	r3, [pc, #220]	; (8003780 <menu+0x2460>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b35      	ldr	r3, [pc, #212]	; (8003780 <menu+0x2460>)
 80036ac:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <menu+0x2460>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d902      	bls.n	80036bc <menu+0x239c>
				devirmeSilindirTipi = 0;
 80036b6:	4b32      	ldr	r3, [pc, #200]	; (8003780 <menu+0x2460>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036bc:	f001 f9fa 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80036c0:	2104      	movs	r1, #4
 80036c2:	4824      	ldr	r0, [pc, #144]	; (8003754 <menu+0x2434>)
 80036c4:	f005 fe0e 	bl	80092e4 <HAL_GPIO_ReadPin>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d119      	bne.n	8003702 <menu+0x23e2>
 80036ce:	4b22      	ldr	r3, [pc, #136]	; (8003758 <menu+0x2438>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	f083 0301 	eor.w	r3, r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d012      	beq.n	8003702 <menu+0x23e2>
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <menu+0x244c>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d10e      	bne.n	8003702 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80036e4:	4b26      	ldr	r3, [pc, #152]	; (8003780 <menu+0x2460>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <menu+0x2460>)
 80036ee:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <menu+0x2460>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80036f8:	4b21      	ldr	r3, [pc, #132]	; (8003780 <menu+0x2460>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036fe:	f001 f9d9 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003702:	2108      	movs	r1, #8
 8003704:	4813      	ldr	r0, [pc, #76]	; (8003754 <menu+0x2434>)
 8003706:	f005 fded 	bl	80092e4 <HAL_GPIO_ReadPin>
 800370a:	4603      	mov	r3, r0
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10d      	bne.n	800372c <menu+0x240c>
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <menu+0x2438>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	f083 0301 	eor.w	r3, r3, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <menu+0x2460>)
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <menu+0x2440>)
 8003724:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <menu+0x2444>)
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <menu+0x2448>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b15      	cmp	r3, #21
 8003732:	f040 80c2 	bne.w	80038ba <menu+0x259a>
		if(dilSecim == 0) {
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <menu+0x242c>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d12c      	bne.n	8003798 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <menu+0x2474>)
 8003740:	2101      	movs	r1, #1
 8003742:	2001      	movs	r0, #1
 8003744:	f004 faa8 	bl	8007c98 <lcd_print>
 8003748:	e02f      	b.n	80037aa <menu+0x248a>
 800374a:	bf00      	nop
 800374c:	20000249 	.word	0x20000249
 8003750:	0800d364 	.word	0x0800d364
 8003754:	40010800 	.word	0x40010800
 8003758:	20000257 	.word	0x20000257
 800375c:	20000239 	.word	0x20000239
 8003760:	2000012c 	.word	0x2000012c
 8003764:	20000254 	.word	0x20000254
 8003768:	20000228 	.word	0x20000228
 800376c:	20000237 	.word	0x20000237
 8003770:	0800d7e4 	.word	0x0800d7e4
 8003774:	0800d7f8 	.word	0x0800d7f8
 8003778:	0800d80c 	.word	0x0800d80c
 800377c:	0800d820 	.word	0x0800d820
 8003780:	2000023a 	.word	0x2000023a
 8003784:	0800d834 	.word	0x0800d834
 8003788:	0800d848 	.word	0x0800d848
 800378c:	0800d858 	.word	0x0800d858
 8003790:	0800d86c 	.word	0x0800d86c
 8003794:	0800d87c 	.word	0x0800d87c
		} else if(dilSecim == 1) {
 8003798:	4b9c      	ldr	r3, [pc, #624]	; (8003a0c <menu+0x26ec>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d104      	bne.n	80037aa <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80037a0:	4a9b      	ldr	r2, [pc, #620]	; (8003a10 <menu+0x26f0>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	2001      	movs	r0, #1
 80037a6:	f004 fa77 	bl	8007c98 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80037aa:	4b9a      	ldr	r3, [pc, #616]	; (8003a14 <menu+0x26f4>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d112      	bne.n	80037d8 <menu+0x24b8>
			if(dilSecim == 0) {
 80037b2:	4b96      	ldr	r3, [pc, #600]	; (8003a0c <menu+0x26ec>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80037ba:	4a97      	ldr	r2, [pc, #604]	; (8003a18 <menu+0x26f8>)
 80037bc:	2101      	movs	r1, #1
 80037be:	2002      	movs	r0, #2
 80037c0:	f004 fa6a 	bl	8007c98 <lcd_print>
			}
			if(dilSecim == 1) {
 80037c4:	4b91      	ldr	r3, [pc, #580]	; (8003a0c <menu+0x26ec>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d11c      	bne.n	8003806 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80037cc:	4a93      	ldr	r2, [pc, #588]	; (8003a1c <menu+0x26fc>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	2002      	movs	r0, #2
 80037d2:	f004 fa61 	bl	8007c98 <lcd_print>
 80037d6:	e016      	b.n	8003806 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80037d8:	4b8e      	ldr	r3, [pc, #568]	; (8003a14 <menu+0x26f4>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d112      	bne.n	8003806 <menu+0x24e6>
			if(dilSecim == 0) {
 80037e0:	4b8a      	ldr	r3, [pc, #552]	; (8003a0c <menu+0x26ec>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80037e8:	4a8d      	ldr	r2, [pc, #564]	; (8003a20 <menu+0x2700>)
 80037ea:	2101      	movs	r1, #1
 80037ec:	2002      	movs	r0, #2
 80037ee:	f004 fa53 	bl	8007c98 <lcd_print>
 80037f2:	e008      	b.n	8003806 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80037f4:	4b85      	ldr	r3, [pc, #532]	; (8003a0c <menu+0x26ec>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d104      	bne.n	8003806 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80037fc:	4a89      	ldr	r2, [pc, #548]	; (8003a24 <menu+0x2704>)
 80037fe:	2101      	movs	r1, #1
 8003800:	2002      	movs	r0, #2
 8003802:	f004 fa49 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003806:	2102      	movs	r1, #2
 8003808:	4887      	ldr	r0, [pc, #540]	; (8003a28 <menu+0x2708>)
 800380a:	f005 fd6b 	bl	80092e4 <HAL_GPIO_ReadPin>
 800380e:	4603      	mov	r3, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	d115      	bne.n	8003840 <menu+0x2520>
 8003814:	4b85      	ldr	r3, [pc, #532]	; (8003a2c <menu+0x270c>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	f083 0301 	eor.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003822:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <menu+0x26f4>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	3301      	adds	r3, #1
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4b7a      	ldr	r3, [pc, #488]	; (8003a14 <menu+0x26f4>)
 800382c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800382e:	4b79      	ldr	r3, [pc, #484]	; (8003a14 <menu+0x26f4>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d902      	bls.n	800383c <menu+0x251c>
				platformSilindirTipi = 0;
 8003836:	4b77      	ldr	r3, [pc, #476]	; (8003a14 <menu+0x26f4>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800383c:	f001 f93a 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003840:	2104      	movs	r1, #4
 8003842:	4879      	ldr	r0, [pc, #484]	; (8003a28 <menu+0x2708>)
 8003844:	f005 fd4e 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003848:	4603      	mov	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d115      	bne.n	800387a <menu+0x255a>
 800384e:	4b77      	ldr	r3, [pc, #476]	; (8003a2c <menu+0x270c>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	f083 0301 	eor.w	r3, r3, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00e      	beq.n	800387a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 800385c:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <menu+0x26f4>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b6b      	ldr	r3, [pc, #428]	; (8003a14 <menu+0x26f4>)
 8003866:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <menu+0x26f4>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003870:	4b68      	ldr	r3, [pc, #416]	; (8003a14 <menu+0x26f4>)
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003876:	f001 f91d 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800387a:	2108      	movs	r1, #8
 800387c:	486a      	ldr	r0, [pc, #424]	; (8003a28 <menu+0x2708>)
 800387e:	f005 fd31 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003882:	4603      	mov	r3, r0
 8003884:	2b01      	cmp	r3, #1
 8003886:	d118      	bne.n	80038ba <menu+0x259a>
 8003888:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <menu+0x270c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	f083 0301 	eor.w	r3, r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d011      	beq.n	80038ba <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003896:	4b5f      	ldr	r3, [pc, #380]	; (8003a14 <menu+0x26f4>)
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <menu+0x2710>)
 800389c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800389e:	4b5d      	ldr	r3, [pc, #372]	; (8003a14 <menu+0x26f4>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d106      	bne.n	80038b4 <menu+0x2594>
				altLimit = 1;
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <menu+0x2714>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80038ac:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <menu+0x2714>)
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	4b5f      	ldr	r3, [pc, #380]	; (8003a30 <menu+0x2710>)
 80038b2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80038b4:	4b60      	ldr	r3, [pc, #384]	; (8003a38 <menu+0x2718>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80038ba:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <menu+0x271c>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b16      	cmp	r3, #22
 80038c0:	f040 8081 	bne.w	80039c6 <menu+0x26a6>
		if(dilSecim == 0) {
 80038c4:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <menu+0x26ec>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80038cc:	4a5c      	ldr	r2, [pc, #368]	; (8003a40 <menu+0x2720>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	2001      	movs	r0, #1
 80038d2:	f004 f9e1 	bl	8007c98 <lcd_print>
 80038d6:	e008      	b.n	80038ea <menu+0x25ca>
		} else if(dilSecim == 1) {
 80038d8:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <menu+0x26ec>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d104      	bne.n	80038ea <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80038e0:	4a58      	ldr	r2, [pc, #352]	; (8003a44 <menu+0x2724>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	2001      	movs	r0, #1
 80038e6:	f004 f9d7 	bl	8007c98 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80038ea:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <menu+0x26ec>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80038f2:	4a55      	ldr	r2, [pc, #340]	; (8003a48 <menu+0x2728>)
 80038f4:	2101      	movs	r1, #1
 80038f6:	2002      	movs	r0, #2
 80038f8:	f004 f9ce 	bl	8007c98 <lcd_print>
 80038fc:	e008      	b.n	8003910 <menu+0x25f0>
			} else if(dilSecim == 1){
 80038fe:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <menu+0x26ec>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d104      	bne.n	8003910 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003906:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <menu+0x272c>)
 8003908:	2101      	movs	r1, #1
 800390a:	2002      	movs	r0, #2
 800390c:	f004 f9c4 	bl	8007c98 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003910:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <menu+0x2730>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	220a      	movs	r2, #10
 8003916:	494f      	ldr	r1, [pc, #316]	; (8003a54 <menu+0x2734>)
 8003918:	4618      	mov	r0, r3
 800391a:	f008 fd0f 	bl	800c33c <itoa>
		lcd_print(2,16,snum);
 800391e:	4a4d      	ldr	r2, [pc, #308]	; (8003a54 <menu+0x2734>)
 8003920:	2110      	movs	r1, #16
 8003922:	2002      	movs	r0, #2
 8003924:	f004 f9b8 	bl	8007c98 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003928:	2102      	movs	r1, #2
 800392a:	483f      	ldr	r0, [pc, #252]	; (8003a28 <menu+0x2708>)
 800392c:	f005 fcda 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d115      	bne.n	8003962 <menu+0x2642>
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <menu+0x270c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	f083 0301 	eor.w	r3, r3, #1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003944:	4b42      	ldr	r3, [pc, #264]	; (8003a50 <menu+0x2730>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	3301      	adds	r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <menu+0x2730>)
 800394e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003950:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <menu+0x2730>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d902      	bls.n	800395e <menu+0x263e>
				yukariValfTmr = 0;
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <menu+0x2730>)
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800395e:	f001 f8a9 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003962:	2104      	movs	r1, #4
 8003964:	4830      	ldr	r0, [pc, #192]	; (8003a28 <menu+0x2708>)
 8003966:	f005 fcbd 	bl	80092e4 <HAL_GPIO_ReadPin>
 800396a:	4603      	mov	r3, r0
 800396c:	2b01      	cmp	r3, #1
 800396e:	d115      	bne.n	800399c <menu+0x267c>
 8003970:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <menu+0x270c>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	f083 0301 	eor.w	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800397e:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <menu+0x2730>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <menu+0x2730>)
 8003988:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <menu+0x2730>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b06      	cmp	r3, #6
 8003990:	d902      	bls.n	8003998 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003992:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <menu+0x2730>)
 8003994:	2205      	movs	r2, #5
 8003996:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003998:	f001 f88c 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800399c:	2108      	movs	r1, #8
 800399e:	4822      	ldr	r0, [pc, #136]	; (8003a28 <menu+0x2708>)
 80039a0:	f005 fca0 	bl	80092e4 <HAL_GPIO_ReadPin>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d10d      	bne.n	80039c6 <menu+0x26a6>
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <menu+0x270c>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	f083 0301 	eor.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d006      	beq.n	80039c6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <menu+0x2730>)
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <menu+0x2710>)
 80039be:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <menu+0x2718>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <menu+0x271c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b17      	cmp	r3, #23
 80039cc:	f040 80ac 	bne.w	8003b28 <menu+0x2808>
		if(dilSecim == 0) {
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <menu+0x26ec>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <menu+0x2738>)
 80039da:	2101      	movs	r1, #1
 80039dc:	2001      	movs	r0, #1
 80039de:	f004 f95b 	bl	8007c98 <lcd_print>
 80039e2:	e008      	b.n	80039f6 <menu+0x26d6>
		} else if(dilSecim == 1) {
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <menu+0x26ec>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d104      	bne.n	80039f6 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <menu+0x273c>)
 80039ee:	2101      	movs	r1, #1
 80039f0:	2001      	movs	r0, #1
 80039f2:	f004 f951 	bl	8007c98 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <menu+0x26ec>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d130      	bne.n	8003a60 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <menu+0x2728>)
 8003a00:	2101      	movs	r1, #1
 8003a02:	2002      	movs	r0, #2
 8003a04:	f004 f948 	bl	8007c98 <lcd_print>
 8003a08:	e033      	b.n	8003a72 <menu+0x2752>
 8003a0a:	bf00      	nop
 8003a0c:	20000249 	.word	0x20000249
 8003a10:	0800d890 	.word	0x0800d890
 8003a14:	2000023b 	.word	0x2000023b
 8003a18:	0800d834 	.word	0x0800d834
 8003a1c:	0800d848 	.word	0x0800d848
 8003a20:	0800d858 	.word	0x0800d858
 8003a24:	0800d86c 	.word	0x0800d86c
 8003a28:	40010800 	.word	0x40010800
 8003a2c:	20000257 	.word	0x20000257
 8003a30:	2000012c 	.word	0x2000012c
 8003a34:	2000022e 	.word	0x2000022e
 8003a38:	20000254 	.word	0x20000254
 8003a3c:	20000228 	.word	0x20000228
 8003a40:	0800d8a0 	.word	0x0800d8a0
 8003a44:	0800d8b4 	.word	0x0800d8b4
 8003a48:	0800d554 	.word	0x0800d554
 8003a4c:	0800d8c8 	.word	0x0800d8c8
 8003a50:	2000023c 	.word	0x2000023c
 8003a54:	2000019c 	.word	0x2000019c
 8003a58:	0800d8d8 	.word	0x0800d8d8
 8003a5c:	0800d8ec 	.word	0x0800d8ec
			} else if(dilSecim == 1) {
 8003a60:	4b98      	ldr	r3, [pc, #608]	; (8003cc4 <menu+0x29a4>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d104      	bne.n	8003a72 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003a68:	4a97      	ldr	r2, [pc, #604]	; (8003cc8 <menu+0x29a8>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2002      	movs	r0, #2
 8003a6e:	f004 f913 	bl	8007c98 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003a72:	4b96      	ldr	r3, [pc, #600]	; (8003ccc <menu+0x29ac>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	220a      	movs	r2, #10
 8003a78:	4995      	ldr	r1, [pc, #596]	; (8003cd0 <menu+0x29b0>)
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f008 fc5e 	bl	800c33c <itoa>
		lcd_print(2,16,snum);
 8003a80:	4a93      	ldr	r2, [pc, #588]	; (8003cd0 <menu+0x29b0>)
 8003a82:	2110      	movs	r1, #16
 8003a84:	2002      	movs	r0, #2
 8003a86:	f004 f907 	bl	8007c98 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4891      	ldr	r0, [pc, #580]	; (8003cd4 <menu+0x29b4>)
 8003a8e:	f005 fc29 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d115      	bne.n	8003ac4 <menu+0x27a4>
 8003a98:	4b8f      	ldr	r3, [pc, #572]	; (8003cd8 <menu+0x29b8>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f083 0301 	eor.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003aa6:	4b89      	ldr	r3, [pc, #548]	; (8003ccc <menu+0x29ac>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4b87      	ldr	r3, [pc, #540]	; (8003ccc <menu+0x29ac>)
 8003ab0:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003ab2:	4b86      	ldr	r3, [pc, #536]	; (8003ccc <menu+0x29ac>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d902      	bls.n	8003ac0 <menu+0x27a0>
				asagiValfTmr = 0;
 8003aba:	4b84      	ldr	r3, [pc, #528]	; (8003ccc <menu+0x29ac>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ac0:	f000 fff8 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	4883      	ldr	r0, [pc, #524]	; (8003cd4 <menu+0x29b4>)
 8003ac8:	f005 fc0c 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d115      	bne.n	8003afe <menu+0x27de>
 8003ad2:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <menu+0x29b8>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	f083 0301 	eor.w	r3, r3, #1
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003ae0:	4b7a      	ldr	r3, [pc, #488]	; (8003ccc <menu+0x29ac>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	4b78      	ldr	r3, [pc, #480]	; (8003ccc <menu+0x29ac>)
 8003aea:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003aec:	4b77      	ldr	r3, [pc, #476]	; (8003ccc <menu+0x29ac>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b06      	cmp	r3, #6
 8003af2:	d902      	bls.n	8003afa <menu+0x27da>
		   		asagiValfTmr = 5;
 8003af4:	4b75      	ldr	r3, [pc, #468]	; (8003ccc <menu+0x29ac>)
 8003af6:	2205      	movs	r2, #5
 8003af8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003afa:	f000 ffdb 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003afe:	2108      	movs	r1, #8
 8003b00:	4874      	ldr	r0, [pc, #464]	; (8003cd4 <menu+0x29b4>)
 8003b02:	f005 fbef 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10d      	bne.n	8003b28 <menu+0x2808>
 8003b0c:	4b72      	ldr	r3, [pc, #456]	; (8003cd8 <menu+0x29b8>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f083 0301 	eor.w	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003b1a:	4b6c      	ldr	r3, [pc, #432]	; (8003ccc <menu+0x29ac>)
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	4b6f      	ldr	r3, [pc, #444]	; (8003cdc <menu+0x29bc>)
 8003b20:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003b22:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <menu+0x29c0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003b28:	4b6e      	ldr	r3, [pc, #440]	; (8003ce4 <menu+0x29c4>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b18      	cmp	r3, #24
 8003b2e:	f040 809d 	bne.w	8003c6c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003b32:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <menu+0x29c8>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d113      	bne.n	8003b62 <menu+0x2842>
			if(dilSecim == 0) {
 8003b3a:	4b62      	ldr	r3, [pc, #392]	; (8003cc4 <menu+0x29a4>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003b42:	4a6a      	ldr	r2, [pc, #424]	; (8003cec <menu+0x29cc>)
 8003b44:	2101      	movs	r1, #1
 8003b46:	2001      	movs	r0, #1
 8003b48:	f004 f8a6 	bl	8007c98 <lcd_print>
 8003b4c:	e020      	b.n	8003b90 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b4e:	4b5d      	ldr	r3, [pc, #372]	; (8003cc4 <menu+0x29a4>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d11c      	bne.n	8003b90 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003b56:	4a66      	ldr	r2, [pc, #408]	; (8003cf0 <menu+0x29d0>)
 8003b58:	2101      	movs	r1, #1
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	f004 f89c 	bl	8007c98 <lcd_print>
 8003b60:	e016      	b.n	8003b90 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b62:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <menu+0x29c8>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d112      	bne.n	8003b90 <menu+0x2870>
			if(dilSecim == 0) {
 8003b6a:	4b56      	ldr	r3, [pc, #344]	; (8003cc4 <menu+0x29a4>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003b72:	4a60      	ldr	r2, [pc, #384]	; (8003cf4 <menu+0x29d4>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	2001      	movs	r0, #1
 8003b78:	f004 f88e 	bl	8007c98 <lcd_print>
 8003b7c:	e008      	b.n	8003b90 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b7e:	4b51      	ldr	r3, [pc, #324]	; (8003cc4 <menu+0x29a4>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d104      	bne.n	8003b90 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003b86:	4a5c      	ldr	r2, [pc, #368]	; (8003cf8 <menu+0x29d8>)
 8003b88:	2101      	movs	r1, #1
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	f004 f884 	bl	8007c98 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003b90:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <menu+0x29a4>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b98:	4a58      	ldr	r2, [pc, #352]	; (8003cfc <menu+0x29dc>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	2002      	movs	r0, #2
 8003b9e:	f004 f87b 	bl	8007c98 <lcd_print>
 8003ba2:	e008      	b.n	8003bb6 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003ba4:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <menu+0x29a4>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d104      	bne.n	8003bb6 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003bac:	4a46      	ldr	r2, [pc, #280]	; (8003cc8 <menu+0x29a8>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	f004 f871 	bl	8007c98 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003bb6:	4b52      	ldr	r3, [pc, #328]	; (8003d00 <menu+0x29e0>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	220a      	movs	r2, #10
 8003bbc:	4944      	ldr	r1, [pc, #272]	; (8003cd0 <menu+0x29b0>)
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f008 fbbc 	bl	800c33c <itoa>
		lcd_print(2, 16, snum);
 8003bc4:	4a42      	ldr	r2, [pc, #264]	; (8003cd0 <menu+0x29b0>)
 8003bc6:	2110      	movs	r1, #16
 8003bc8:	2002      	movs	r0, #2
 8003bca:	f004 f865 	bl	8007c98 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bce:	2102      	movs	r1, #2
 8003bd0:	4840      	ldr	r0, [pc, #256]	; (8003cd4 <menu+0x29b4>)
 8003bd2:	f005 fb87 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d115      	bne.n	8003c08 <menu+0x28e8>
 8003bdc:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <menu+0x29b8>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	f083 0301 	eor.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00e      	beq.n	8003c08 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003bea:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <menu+0x29e0>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <menu+0x29e0>)
 8003bf4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003bf6:	4b42      	ldr	r3, [pc, #264]	; (8003d00 <menu+0x29e0>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d902      	bls.n	8003c04 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003bfe:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <menu+0x29e0>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c04:	f000 ff56 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c08:	2104      	movs	r1, #4
 8003c0a:	4832      	ldr	r0, [pc, #200]	; (8003cd4 <menu+0x29b4>)
 8003c0c:	f005 fb6a 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d115      	bne.n	8003c42 <menu+0x2922>
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <menu+0x29b8>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	f083 0301 	eor.w	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003c24:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <menu+0x29e0>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <menu+0x29e0>)
 8003c2e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003c30:	4b33      	ldr	r3, [pc, #204]	; (8003d00 <menu+0x29e0>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d902      	bls.n	8003c3e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <menu+0x29e0>)
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c3e:	f000 ff39 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c42:	2108      	movs	r1, #8
 8003c44:	4823      	ldr	r0, [pc, #140]	; (8003cd4 <menu+0x29b4>)
 8003c46:	f005 fb4d 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10d      	bne.n	8003c6c <menu+0x294c>
 8003c50:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <menu+0x29b8>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	f083 0301 	eor.w	r3, r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003c5e:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <menu+0x29e0>)
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <menu+0x29bc>)
 8003c64:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <menu+0x29c0>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <menu+0x29c4>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b19      	cmp	r3, #25
 8003c72:	f040 80c4 	bne.w	8003dfe <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003c76:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <menu+0x29c8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d113      	bne.n	8003ca6 <menu+0x2986>
			if(dilSecim == 0) {
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <menu+0x29a4>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003c86:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <menu+0x29e4>)
 8003c88:	2101      	movs	r1, #1
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	f004 f804 	bl	8007c98 <lcd_print>
 8003c90:	e047      	b.n	8003d22 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <menu+0x29a4>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d143      	bne.n	8003d22 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <menu+0x29e8>)
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f003 fffa 	bl	8007c98 <lcd_print>
 8003ca4:	e03d      	b.n	8003d22 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <menu+0x29c8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d139      	bne.n	8003d22 <menu+0x2a02>
			if(dilSecim == 0) {
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <menu+0x29a4>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d12c      	bne.n	8003d10 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003cb6:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <menu+0x29ec>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f003 ffec 	bl	8007c98 <lcd_print>
 8003cc0:	e02f      	b.n	8003d22 <menu+0x2a02>
 8003cc2:	bf00      	nop
 8003cc4:	20000249 	.word	0x20000249
 8003cc8:	0800d8c8 	.word	0x0800d8c8
 8003ccc:	2000023d 	.word	0x2000023d
 8003cd0:	2000019c 	.word	0x2000019c
 8003cd4:	40010800 	.word	0x40010800
 8003cd8:	20000257 	.word	0x20000257
 8003cdc:	2000012c 	.word	0x2000012c
 8003ce0:	20000254 	.word	0x20000254
 8003ce4:	20000228 	.word	0x20000228
 8003ce8:	20000237 	.word	0x20000237
 8003cec:	0800d900 	.word	0x0800d900
 8003cf0:	0800d914 	.word	0x0800d914
 8003cf4:	0800d928 	.word	0x0800d928
 8003cf8:	0800d93c 	.word	0x0800d93c
 8003cfc:	0800d554 	.word	0x0800d554
 8003d00:	2000023e 	.word	0x2000023e
 8003d04:	0800d950 	.word	0x0800d950
 8003d08:	0800d964 	.word	0x0800d964
 8003d0c:	0800d978 	.word	0x0800d978
			} else if(dilSecim == 1) {
 8003d10:	4b73      	ldr	r3, [pc, #460]	; (8003ee0 <menu+0x2bc0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d104      	bne.n	8003d22 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003d18:	4a72      	ldr	r2, [pc, #456]	; (8003ee4 <menu+0x2bc4>)
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f003 ffbb 	bl	8007c98 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003d22:	4b6f      	ldr	r3, [pc, #444]	; (8003ee0 <menu+0x2bc0>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d105      	bne.n	8003d36 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d2a:	4a6f      	ldr	r2, [pc, #444]	; (8003ee8 <menu+0x2bc8>)
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f003 ffb2 	bl	8007c98 <lcd_print>
 8003d34:	e008      	b.n	8003d48 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003d36:	4b6a      	ldr	r3, [pc, #424]	; (8003ee0 <menu+0x2bc0>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d104      	bne.n	8003d48 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003d3e:	4a6b      	ldr	r2, [pc, #428]	; (8003eec <menu+0x2bcc>)
 8003d40:	2101      	movs	r1, #1
 8003d42:	2002      	movs	r0, #2
 8003d44:	f003 ffa8 	bl	8007c98 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003d48:	4b69      	ldr	r3, [pc, #420]	; (8003ef0 <menu+0x2bd0>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	220a      	movs	r2, #10
 8003d4e:	4969      	ldr	r1, [pc, #420]	; (8003ef4 <menu+0x2bd4>)
 8003d50:	4618      	mov	r0, r3
 8003d52:	f008 faf3 	bl	800c33c <itoa>
		lcd_print(2,16,snum);
 8003d56:	4a67      	ldr	r2, [pc, #412]	; (8003ef4 <menu+0x2bd4>)
 8003d58:	2110      	movs	r1, #16
 8003d5a:	2002      	movs	r0, #2
 8003d5c:	f003 ff9c 	bl	8007c98 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d60:	2102      	movs	r1, #2
 8003d62:	4865      	ldr	r0, [pc, #404]	; (8003ef8 <menu+0x2bd8>)
 8003d64:	f005 fabe 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d115      	bne.n	8003d9a <menu+0x2a7a>
 8003d6e:	4b63      	ldr	r3, [pc, #396]	; (8003efc <menu+0x2bdc>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f083 0301 	eor.w	r3, r3, #1
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003d7c:	4b5c      	ldr	r3, [pc, #368]	; (8003ef0 <menu+0x2bd0>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	4b5a      	ldr	r3, [pc, #360]	; (8003ef0 <menu+0x2bd0>)
 8003d86:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <menu+0x2bd0>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d902      	bls.n	8003d96 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003d90:	4b57      	ldr	r3, [pc, #348]	; (8003ef0 <menu+0x2bd0>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d96:	f000 fe8d 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d9a:	2104      	movs	r1, #4
 8003d9c:	4856      	ldr	r0, [pc, #344]	; (8003ef8 <menu+0x2bd8>)
 8003d9e:	f005 faa1 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d115      	bne.n	8003dd4 <menu+0x2ab4>
 8003da8:	4b54      	ldr	r3, [pc, #336]	; (8003efc <menu+0x2bdc>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f083 0301 	eor.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00e      	beq.n	8003dd4 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003db6:	4b4e      	ldr	r3, [pc, #312]	; (8003ef0 <menu+0x2bd0>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <menu+0x2bd0>)
 8003dc0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003dc2:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <menu+0x2bd0>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b06      	cmp	r3, #6
 8003dc8:	d902      	bls.n	8003dd0 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003dca:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <menu+0x2bd0>)
 8003dcc:	2205      	movs	r2, #5
 8003dce:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dd0:	f000 fe70 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd4:	2108      	movs	r1, #8
 8003dd6:	4848      	ldr	r0, [pc, #288]	; (8003ef8 <menu+0x2bd8>)
 8003dd8:	f005 fa84 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d10d      	bne.n	8003dfe <menu+0x2ade>
 8003de2:	4b46      	ldr	r3, [pc, #280]	; (8003efc <menu+0x2bdc>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003df0:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <menu+0x2bd0>)
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	4b42      	ldr	r3, [pc, #264]	; (8003f00 <menu+0x2be0>)
 8003df6:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003df8:	4b42      	ldr	r3, [pc, #264]	; (8003f04 <menu+0x2be4>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003dfe:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <menu+0x2be8>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b1a      	cmp	r3, #26
 8003e04:	f040 80ec 	bne.w	8003fe0 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e08:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <menu+0x2bc0>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d105      	bne.n	8003e1c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003e10:	4a3e      	ldr	r2, [pc, #248]	; (8003f0c <menu+0x2bec>)
 8003e12:	2101      	movs	r1, #1
 8003e14:	2001      	movs	r0, #1
 8003e16:	f003 ff3f 	bl	8007c98 <lcd_print>
 8003e1a:	e008      	b.n	8003e2e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003e1c:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <menu+0x2bc0>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d104      	bne.n	8003e2e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003e24:	4a3a      	ldr	r2, [pc, #232]	; (8003f10 <menu+0x2bf0>)
 8003e26:	2101      	movs	r1, #1
 8003e28:	2001      	movs	r0, #1
 8003e2a:	f003 ff35 	bl	8007c98 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003e2e:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <menu+0x2bf4>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b63      	cmp	r3, #99	; 0x63
 8003e34:	d91e      	bls.n	8003e74 <menu+0x2b54>
			if(dilSecim == 0) {
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <menu+0x2bc0>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <menu+0x2bc8>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	2002      	movs	r0, #2
 8003e44:	f003 ff28 	bl	8007c98 <lcd_print>
			}
			if(dilSecim == 1) {
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <menu+0x2bc0>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d104      	bne.n	8003e5a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003e50:	4a26      	ldr	r2, [pc, #152]	; (8003eec <menu+0x2bcc>)
 8003e52:	2101      	movs	r1, #1
 8003e54:	2002      	movs	r0, #2
 8003e56:	f003 ff1f 	bl	8007c98 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e5a:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <menu+0x2bf4>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	220a      	movs	r2, #10
 8003e60:	4924      	ldr	r1, [pc, #144]	; (8003ef4 <menu+0x2bd4>)
 8003e62:	4618      	mov	r0, r3
 8003e64:	f008 fa6a 	bl	800c33c <itoa>
			lcd_print(2,14,snum);
 8003e68:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <menu+0x2bd4>)
 8003e6a:	210e      	movs	r1, #14
 8003e6c:	2002      	movs	r0, #2
 8003e6e:	f003 ff13 	bl	8007c98 <lcd_print>
 8003e72:	e066      	b.n	8003f42 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003e74:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <menu+0x2bf4>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b09      	cmp	r3, #9
 8003e7a:	d923      	bls.n	8003ec4 <menu+0x2ba4>
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <menu+0x2bf4>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b63      	cmp	r3, #99	; 0x63
 8003e82:	d81f      	bhi.n	8003ec4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <menu+0x2bc0>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e8c:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <menu+0x2bc8>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	2002      	movs	r0, #2
 8003e92:	f003 ff01 	bl	8007c98 <lcd_print>
 8003e96:	e008      	b.n	8003eaa <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <menu+0x2bc0>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d104      	bne.n	8003eaa <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003ea0:	4a12      	ldr	r2, [pc, #72]	; (8003eec <menu+0x2bcc>)
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	2002      	movs	r0, #2
 8003ea6:	f003 fef7 	bl	8007c98 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <menu+0x2bf4>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	220a      	movs	r2, #10
 8003eb0:	4910      	ldr	r1, [pc, #64]	; (8003ef4 <menu+0x2bd4>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f008 fa42 	bl	800c33c <itoa>
			lcd_print(2, 15, snum);
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <menu+0x2bd4>)
 8003eba:	210f      	movs	r1, #15
 8003ebc:	2002      	movs	r0, #2
 8003ebe:	f003 feeb 	bl	8007c98 <lcd_print>
 8003ec2:	e03e      	b.n	8003f42 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003ec4:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <menu+0x2bf4>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b09      	cmp	r3, #9
 8003eca:	d83a      	bhi.n	8003f42 <menu+0x2c22>
			if(dilSecim == 0) {
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <menu+0x2bc0>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d121      	bne.n	8003f18 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <menu+0x2bc8>)
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f003 fedd 	bl	8007c98 <lcd_print>
 8003ede:	e024      	b.n	8003f2a <menu+0x2c0a>
 8003ee0:	20000249 	.word	0x20000249
 8003ee4:	0800d98c 	.word	0x0800d98c
 8003ee8:	0800d554 	.word	0x0800d554
 8003eec:	0800d8c8 	.word	0x0800d8c8
 8003ef0:	2000023f 	.word	0x2000023f
 8003ef4:	2000019c 	.word	0x2000019c
 8003ef8:	40010800 	.word	0x40010800
 8003efc:	20000257 	.word	0x20000257
 8003f00:	2000012c 	.word	0x2000012c
 8003f04:	20000254 	.word	0x20000254
 8003f08:	20000228 	.word	0x20000228
 8003f0c:	0800d9a0 	.word	0x0800d9a0
 8003f10:	0800d9b4 	.word	0x0800d9b4
 8003f14:	20000240 	.word	0x20000240
			} else if(dilSecim == 1) {
 8003f18:	4b8f      	ldr	r3, [pc, #572]	; (8004158 <menu+0x2e38>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d104      	bne.n	8003f2a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003f20:	4a8e      	ldr	r2, [pc, #568]	; (800415c <menu+0x2e3c>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	2002      	movs	r0, #2
 8003f26:	f003 feb7 	bl	8007c98 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f2a:	4b8d      	ldr	r3, [pc, #564]	; (8004160 <menu+0x2e40>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	220a      	movs	r2, #10
 8003f30:	498c      	ldr	r1, [pc, #560]	; (8004164 <menu+0x2e44>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	f008 fa02 	bl	800c33c <itoa>
			lcd_print(2, 16, snum);
 8003f38:	4a8a      	ldr	r2, [pc, #552]	; (8004164 <menu+0x2e44>)
 8003f3a:	2110      	movs	r1, #16
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	f003 feab 	bl	8007c98 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f42:	2102      	movs	r1, #2
 8003f44:	4888      	ldr	r0, [pc, #544]	; (8004168 <menu+0x2e48>)
 8003f46:	f005 f9cd 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d115      	bne.n	8003f7c <menu+0x2c5c>
 8003f50:	4b86      	ldr	r3, [pc, #536]	; (800416c <menu+0x2e4c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	f083 0301 	eor.w	r3, r3, #1
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00e      	beq.n	8003f7c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003f5e:	4b80      	ldr	r3, [pc, #512]	; (8004160 <menu+0x2e40>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4b7e      	ldr	r3, [pc, #504]	; (8004160 <menu+0x2e40>)
 8003f68:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003f6a:	4b7d      	ldr	r3, [pc, #500]	; (8004160 <menu+0x2e40>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2bb4      	cmp	r3, #180	; 0xb4
 8003f70:	d902      	bls.n	8003f78 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003f72:	4b7b      	ldr	r3, [pc, #492]	; (8004160 <menu+0x2e40>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f78:	f000 fd9c 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	487a      	ldr	r0, [pc, #488]	; (8004168 <menu+0x2e48>)
 8003f80:	f005 f9b0 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d115      	bne.n	8003fb6 <menu+0x2c96>
 8003f8a:	4b78      	ldr	r3, [pc, #480]	; (800416c <menu+0x2e4c>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	f083 0301 	eor.w	r3, r3, #1
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003f98:	4b71      	ldr	r3, [pc, #452]	; (8004160 <menu+0x2e40>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <menu+0x2e40>)
 8003fa2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003fa4:	4b6e      	ldr	r3, [pc, #440]	; (8004160 <menu+0x2e40>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2bb5      	cmp	r3, #181	; 0xb5
 8003faa:	d902      	bls.n	8003fb2 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003fac:	4b6c      	ldr	r3, [pc, #432]	; (8004160 <menu+0x2e40>)
 8003fae:	22b4      	movs	r2, #180	; 0xb4
 8003fb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fb2:	f000 fd7f 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fb6:	2108      	movs	r1, #8
 8003fb8:	486b      	ldr	r0, [pc, #428]	; (8004168 <menu+0x2e48>)
 8003fba:	f005 f993 	bl	80092e4 <HAL_GPIO_ReadPin>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d10d      	bne.n	8003fe0 <menu+0x2cc0>
 8003fc4:	4b69      	ldr	r3, [pc, #420]	; (800416c <menu+0x2e4c>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	f083 0301 	eor.w	r3, r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003fd2:	4b63      	ldr	r3, [pc, #396]	; (8004160 <menu+0x2e40>)
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	4b66      	ldr	r3, [pc, #408]	; (8004170 <menu+0x2e50>)
 8003fd8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003fda:	4b66      	ldr	r3, [pc, #408]	; (8004174 <menu+0x2e54>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003fe0:	4b65      	ldr	r3, [pc, #404]	; (8004178 <menu+0x2e58>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b1b      	cmp	r3, #27
 8003fe6:	f040 8083 	bne.w	80040f0 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003fea:	4a64      	ldr	r2, [pc, #400]	; (800417c <menu+0x2e5c>)
 8003fec:	2101      	movs	r1, #1
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f003 fe52 	bl	8007c98 <lcd_print>

		if(buzzer == 0) {
 8003ff4:	4b62      	ldr	r3, [pc, #392]	; (8004180 <menu+0x2e60>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d113      	bne.n	8004024 <menu+0x2d04>
			if(dilSecim == 0) {
 8003ffc:	4b56      	ldr	r3, [pc, #344]	; (8004158 <menu+0x2e38>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004004:	4a5f      	ldr	r2, [pc, #380]	; (8004184 <menu+0x2e64>)
 8004006:	2101      	movs	r1, #1
 8004008:	2002      	movs	r0, #2
 800400a:	f003 fe45 	bl	8007c98 <lcd_print>
 800400e:	e020      	b.n	8004052 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004010:	4b51      	ldr	r3, [pc, #324]	; (8004158 <menu+0x2e38>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d11c      	bne.n	8004052 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004018:	4a5b      	ldr	r2, [pc, #364]	; (8004188 <menu+0x2e68>)
 800401a:	2101      	movs	r1, #1
 800401c:	2002      	movs	r0, #2
 800401e:	f003 fe3b 	bl	8007c98 <lcd_print>
 8004022:	e016      	b.n	8004052 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004024:	4b56      	ldr	r3, [pc, #344]	; (8004180 <menu+0x2e60>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d112      	bne.n	8004052 <menu+0x2d32>
			if(dilSecim == 0) {
 800402c:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <menu+0x2e38>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004034:	4a55      	ldr	r2, [pc, #340]	; (800418c <menu+0x2e6c>)
 8004036:	2101      	movs	r1, #1
 8004038:	2002      	movs	r0, #2
 800403a:	f003 fe2d 	bl	8007c98 <lcd_print>
 800403e:	e008      	b.n	8004052 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004040:	4b45      	ldr	r3, [pc, #276]	; (8004158 <menu+0x2e38>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d104      	bne.n	8004052 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004048:	4a51      	ldr	r2, [pc, #324]	; (8004190 <menu+0x2e70>)
 800404a:	2101      	movs	r1, #1
 800404c:	2002      	movs	r0, #2
 800404e:	f003 fe23 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004052:	2102      	movs	r1, #2
 8004054:	4844      	ldr	r0, [pc, #272]	; (8004168 <menu+0x2e48>)
 8004056:	f005 f945 	bl	80092e4 <HAL_GPIO_ReadPin>
 800405a:	4603      	mov	r3, r0
 800405c:	2b01      	cmp	r3, #1
 800405e:	d115      	bne.n	800408c <menu+0x2d6c>
 8004060:	4b42      	ldr	r3, [pc, #264]	; (800416c <menu+0x2e4c>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f083 0301 	eor.w	r3, r3, #1
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00e      	beq.n	800408c <menu+0x2d6c>
			buzzer = buzzer + 1;
 800406e:	4b44      	ldr	r3, [pc, #272]	; (8004180 <menu+0x2e60>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4b42      	ldr	r3, [pc, #264]	; (8004180 <menu+0x2e60>)
 8004078:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800407a:	4b41      	ldr	r3, [pc, #260]	; (8004180 <menu+0x2e60>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d902      	bls.n	8004088 <menu+0x2d68>
				buzzer = 0;
 8004082:	4b3f      	ldr	r3, [pc, #252]	; (8004180 <menu+0x2e60>)
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004088:	f000 fd14 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800408c:	2104      	movs	r1, #4
 800408e:	4836      	ldr	r0, [pc, #216]	; (8004168 <menu+0x2e48>)
 8004090:	f005 f928 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004094:	4603      	mov	r3, r0
 8004096:	2b01      	cmp	r3, #1
 8004098:	d115      	bne.n	80040c6 <menu+0x2da6>
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <menu+0x2e4c>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	f083 0301 	eor.w	r3, r3, #1
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <menu+0x2da6>
			buzzer = buzzer - 1;
 80040a8:	4b35      	ldr	r3, [pc, #212]	; (8004180 <menu+0x2e60>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	4b33      	ldr	r3, [pc, #204]	; (8004180 <menu+0x2e60>)
 80040b2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <menu+0x2e60>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <menu+0x2da2>
		   		buzzer = 1;
 80040bc:	4b30      	ldr	r3, [pc, #192]	; (8004180 <menu+0x2e60>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040c2:	f000 fcf7 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040c6:	2108      	movs	r1, #8
 80040c8:	4827      	ldr	r0, [pc, #156]	; (8004168 <menu+0x2e48>)
 80040ca:	f005 f90b 	bl	80092e4 <HAL_GPIO_ReadPin>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10d      	bne.n	80040f0 <menu+0x2dd0>
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <menu+0x2e4c>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f083 0301 	eor.w	r3, r3, #1
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d006      	beq.n	80040f0 <menu+0x2dd0>
			eepromData[25] = buzzer;
 80040e2:	4b27      	ldr	r3, [pc, #156]	; (8004180 <menu+0x2e60>)
 80040e4:	781a      	ldrb	r2, [r3, #0]
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <menu+0x2e50>)
 80040e8:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80040ea:	4b22      	ldr	r3, [pc, #136]	; (8004174 <menu+0x2e54>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80040f0:	4b21      	ldr	r3, [pc, #132]	; (8004178 <menu+0x2e58>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b1c      	cmp	r3, #28
 80040f6:	f040 80ab 	bne.w	8004250 <menu+0x2f30>
		calismaSayModu = 0;
 80040fa:	4b26      	ldr	r3, [pc, #152]	; (8004194 <menu+0x2e74>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004100:	4a25      	ldr	r2, [pc, #148]	; (8004198 <menu+0x2e78>)
 8004102:	2101      	movs	r1, #1
 8004104:	2001      	movs	r0, #1
 8004106:	f003 fdc7 	bl	8007c98 <lcd_print>

		if(demoMode == 0) {
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <menu+0x2e7c>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d113      	bne.n	800413a <menu+0x2e1a>
			if(dilSecim == 0) {
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <menu+0x2e38>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <menu+0x2e64>)
 800411c:	2101      	movs	r1, #1
 800411e:	2002      	movs	r0, #2
 8004120:	f003 fdba 	bl	8007c98 <lcd_print>
 8004124:	e045      	b.n	80041b2 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <menu+0x2e38>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d141      	bne.n	80041b2 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <menu+0x2e68>)
 8004130:	2101      	movs	r1, #1
 8004132:	2002      	movs	r0, #2
 8004134:	f003 fdb0 	bl	8007c98 <lcd_print>
 8004138:	e03b      	b.n	80041b2 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800413a:	4b18      	ldr	r3, [pc, #96]	; (800419c <menu+0x2e7c>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d137      	bne.n	80041b2 <menu+0x2e92>
			if(dilSecim == 0){
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <menu+0x2e38>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12a      	bne.n	80041a0 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800414a:	4a10      	ldr	r2, [pc, #64]	; (800418c <menu+0x2e6c>)
 800414c:	2101      	movs	r1, #1
 800414e:	2002      	movs	r0, #2
 8004150:	f003 fda2 	bl	8007c98 <lcd_print>
 8004154:	e02d      	b.n	80041b2 <menu+0x2e92>
 8004156:	bf00      	nop
 8004158:	20000249 	.word	0x20000249
 800415c:	0800d8c8 	.word	0x0800d8c8
 8004160:	20000240 	.word	0x20000240
 8004164:	2000019c 	.word	0x2000019c
 8004168:	40010800 	.word	0x40010800
 800416c:	20000257 	.word	0x20000257
 8004170:	2000012c 	.word	0x2000012c
 8004174:	20000254 	.word	0x20000254
 8004178:	20000228 	.word	0x20000228
 800417c:	0800d9c8 	.word	0x0800d9c8
 8004180:	20000244 	.word	0x20000244
 8004184:	0800d2f0 	.word	0x0800d2f0
 8004188:	0800d304 	.word	0x0800d304
 800418c:	0800d350 	.word	0x0800d350
 8004190:	0800d364 	.word	0x0800d364
 8004194:	20000248 	.word	0x20000248
 8004198:	0800d9dc 	.word	0x0800d9dc
 800419c:	20000246 	.word	0x20000246
			} else if(dilSecim == 1) {
 80041a0:	4b71      	ldr	r3, [pc, #452]	; (8004368 <menu+0x3048>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d104      	bne.n	80041b2 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80041a8:	4a70      	ldr	r2, [pc, #448]	; (800436c <menu+0x304c>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	2002      	movs	r0, #2
 80041ae:	f003 fd73 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041b2:	2102      	movs	r1, #2
 80041b4:	486e      	ldr	r0, [pc, #440]	; (8004370 <menu+0x3050>)
 80041b6:	f005 f895 	bl	80092e4 <HAL_GPIO_ReadPin>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d115      	bne.n	80041ec <menu+0x2ecc>
 80041c0:	4b6c      	ldr	r3, [pc, #432]	; (8004374 <menu+0x3054>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f083 0301 	eor.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <menu+0x2ecc>
			demoMode = demoMode + 1;
 80041ce:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <menu+0x3058>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4b68      	ldr	r3, [pc, #416]	; (8004378 <menu+0x3058>)
 80041d8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80041da:	4b67      	ldr	r3, [pc, #412]	; (8004378 <menu+0x3058>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d902      	bls.n	80041e8 <menu+0x2ec8>
				demoMode = 0;
 80041e2:	4b65      	ldr	r3, [pc, #404]	; (8004378 <menu+0x3058>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041e8:	f000 fc64 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041ec:	2104      	movs	r1, #4
 80041ee:	4860      	ldr	r0, [pc, #384]	; (8004370 <menu+0x3050>)
 80041f0:	f005 f878 	bl	80092e4 <HAL_GPIO_ReadPin>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d115      	bne.n	8004226 <menu+0x2f06>
 80041fa:	4b5e      	ldr	r3, [pc, #376]	; (8004374 <menu+0x3054>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	f083 0301 	eor.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004208:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <menu+0x3058>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	3b01      	subs	r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	4b59      	ldr	r3, [pc, #356]	; (8004378 <menu+0x3058>)
 8004212:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004214:	4b58      	ldr	r3, [pc, #352]	; (8004378 <menu+0x3058>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <menu+0x2f02>
		   		demoMode = 1;
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <menu+0x3058>)
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004222:	f000 fc47 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004226:	2108      	movs	r1, #8
 8004228:	4851      	ldr	r0, [pc, #324]	; (8004370 <menu+0x3050>)
 800422a:	f005 f85b 	bl	80092e4 <HAL_GPIO_ReadPin>
 800422e:	4603      	mov	r3, r0
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10d      	bne.n	8004250 <menu+0x2f30>
 8004234:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <menu+0x3054>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	f083 0301 	eor.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d006      	beq.n	8004250 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004242:	4b4d      	ldr	r3, [pc, #308]	; (8004378 <menu+0x3058>)
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	4b4d      	ldr	r3, [pc, #308]	; (800437c <menu+0x305c>)
 8004248:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800424a:	4b4d      	ldr	r3, [pc, #308]	; (8004380 <menu+0x3060>)
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004250:	4b4c      	ldr	r3, [pc, #304]	; (8004384 <menu+0x3064>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b1d      	cmp	r3, #29
 8004256:	f040 8132 	bne.w	80044be <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800425a:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <menu+0x3068>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d113      	bne.n	800428a <menu+0x2f6a>
 8004262:	4b4a      	ldr	r3, [pc, #296]	; (800438c <menu+0x306c>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <menu+0x2f6a>
 800426a:	4b49      	ldr	r3, [pc, #292]	; (8004390 <menu+0x3070>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <menu+0x2f6a>
 8004272:	4b48      	ldr	r3, [pc, #288]	; (8004394 <menu+0x3074>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d107      	bne.n	800428a <menu+0x2f6a>
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <menu+0x3078>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004282:	4b46      	ldr	r3, [pc, #280]	; (800439c <menu+0x307c>)
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e002      	b.n	8004290 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800428a:	4b44      	ldr	r3, [pc, #272]	; (800439c <menu+0x307c>)
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <menu+0x3080>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d154      	bne.n	8004342 <menu+0x3022>
			if(dilSecim == 0) {
 8004298:	4b33      	ldr	r3, [pc, #204]	; (8004368 <menu+0x3048>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80042a0:	4a40      	ldr	r2, [pc, #256]	; (80043a4 <menu+0x3084>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	2001      	movs	r0, #1
 80042a6:	f003 fcf7 	bl	8007c98 <lcd_print>
 80042aa:	e008      	b.n	80042be <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80042ac:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <menu+0x3048>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d104      	bne.n	80042be <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80042b4:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <menu+0x3088>)
 80042b6:	2101      	movs	r1, #1
 80042b8:	2001      	movs	r0, #1
 80042ba:	f003 fced 	bl	8007c98 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <menu+0x3078>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	220a      	movs	r2, #10
 80042c4:	4939      	ldr	r1, [pc, #228]	; (80043ac <menu+0x308c>)
 80042c6:	4618      	mov	r0, r3
 80042c8:	f008 f838 	bl	800c33c <itoa>
			lcd_print(2, 12, snum);
 80042cc:	4a37      	ldr	r2, [pc, #220]	; (80043ac <menu+0x308c>)
 80042ce:	210c      	movs	r1, #12
 80042d0:	2002      	movs	r0, #2
 80042d2:	f003 fce1 	bl	8007c98 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80042d6:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <menu+0x3074>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	220a      	movs	r2, #10
 80042dc:	4933      	ldr	r1, [pc, #204]	; (80043ac <menu+0x308c>)
 80042de:	4618      	mov	r0, r3
 80042e0:	f008 f82c 	bl	800c33c <itoa>
			lcd_print(2, 13, snum);
 80042e4:	4a31      	ldr	r2, [pc, #196]	; (80043ac <menu+0x308c>)
 80042e6:	210d      	movs	r1, #13
 80042e8:	2002      	movs	r0, #2
 80042ea:	f003 fcd5 	bl	8007c98 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80042ee:	4b28      	ldr	r3, [pc, #160]	; (8004390 <menu+0x3070>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	220a      	movs	r2, #10
 80042f4:	492d      	ldr	r1, [pc, #180]	; (80043ac <menu+0x308c>)
 80042f6:	4618      	mov	r0, r3
 80042f8:	f008 f820 	bl	800c33c <itoa>
			lcd_print(2, 14, snum);
 80042fc:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <menu+0x308c>)
 80042fe:	210e      	movs	r1, #14
 8004300:	2002      	movs	r0, #2
 8004302:	f003 fcc9 	bl	8007c98 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <menu+0x306c>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	220a      	movs	r2, #10
 800430c:	4927      	ldr	r1, [pc, #156]	; (80043ac <menu+0x308c>)
 800430e:	4618      	mov	r0, r3
 8004310:	f008 f814 	bl	800c33c <itoa>
			lcd_print(2, 15, snum);
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <menu+0x308c>)
 8004316:	210f      	movs	r1, #15
 8004318:	2002      	movs	r0, #2
 800431a:	f003 fcbd 	bl	8007c98 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <menu+0x3068>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	220a      	movs	r2, #10
 8004324:	4921      	ldr	r1, [pc, #132]	; (80043ac <menu+0x308c>)
 8004326:	4618      	mov	r0, r3
 8004328:	f008 f808 	bl	800c33c <itoa>
			lcd_print(2, 16, snum);
 800432c:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <menu+0x308c>)
 800432e:	2110      	movs	r1, #16
 8004330:	2002      	movs	r0, #2
 8004332:	f003 fcb1 	bl	8007c98 <lcd_print>

			lcd_print(2, 1, "           ");
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <menu+0x3090>)
 8004338:	2101      	movs	r1, #1
 800433a:	2002      	movs	r0, #2
 800433c:	f003 fcac 	bl	8007c98 <lcd_print>
 8004340:	e048      	b.n	80043d4 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <menu+0x3080>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d144      	bne.n	80043d4 <menu+0x30b4>
			if(dilSecim == 0) {
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <menu+0x3048>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d132      	bne.n	80043b8 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004352:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <menu+0x3084>)
 8004354:	2101      	movs	r1, #1
 8004356:	2001      	movs	r0, #1
 8004358:	f003 fc9e 	bl	8007c98 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800435c:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <menu+0x3094>)
 800435e:	2101      	movs	r1, #1
 8004360:	2002      	movs	r0, #2
 8004362:	f003 fc99 	bl	8007c98 <lcd_print>
 8004366:	e035      	b.n	80043d4 <menu+0x30b4>
 8004368:	20000249 	.word	0x20000249
 800436c:	0800d364 	.word	0x0800d364
 8004370:	40010800 	.word	0x40010800
 8004374:	20000257 	.word	0x20000257
 8004378:	20000246 	.word	0x20000246
 800437c:	2000012c 	.word	0x2000012c
 8004380:	20000254 	.word	0x20000254
 8004384:	20000228 	.word	0x20000228
 8004388:	20000225 	.word	0x20000225
 800438c:	20000226 	.word	0x20000226
 8004390:	20000000 	.word	0x20000000
 8004394:	20000001 	.word	0x20000001
 8004398:	20000227 	.word	0x20000227
 800439c:	20000269 	.word	0x20000269
 80043a0:	20000248 	.word	0x20000248
 80043a4:	0800d9ec 	.word	0x0800d9ec
 80043a8:	0800da00 	.word	0x0800da00
 80043ac:	2000019c 	.word	0x2000019c
 80043b0:	0800da14 	.word	0x0800da14
 80043b4:	0800da20 	.word	0x0800da20
			} else if(dilSecim == 1) {
 80043b8:	4b94      	ldr	r3, [pc, #592]	; (800460c <menu+0x32ec>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d109      	bne.n	80043d4 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80043c0:	4a93      	ldr	r2, [pc, #588]	; (8004610 <menu+0x32f0>)
 80043c2:	2101      	movs	r1, #1
 80043c4:	2001      	movs	r0, #1
 80043c6:	f003 fc67 	bl	8007c98 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80043ca:	4a92      	ldr	r2, [pc, #584]	; (8004614 <menu+0x32f4>)
 80043cc:	2101      	movs	r1, #1
 80043ce:	2002      	movs	r0, #2
 80043d0:	f003 fc62 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80043d4:	2102      	movs	r1, #2
 80043d6:	4890      	ldr	r0, [pc, #576]	; (8004618 <menu+0x32f8>)
 80043d8:	f004 ff84 	bl	80092e4 <HAL_GPIO_ReadPin>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d119      	bne.n	8004416 <menu+0x30f6>
 80043e2:	4b8e      	ldr	r3, [pc, #568]	; (800461c <menu+0x32fc>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d012      	beq.n	8004416 <menu+0x30f6>
 80043f0:	4b8b      	ldr	r3, [pc, #556]	; (8004620 <menu+0x3300>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00e      	beq.n	8004416 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80043f8:	4b8a      	ldr	r3, [pc, #552]	; (8004624 <menu+0x3304>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	4b88      	ldr	r3, [pc, #544]	; (8004624 <menu+0x3304>)
 8004402:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004404:	4b87      	ldr	r3, [pc, #540]	; (8004624 <menu+0x3304>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d902      	bls.n	8004412 <menu+0x30f2>
				calismaSayModu = 0;
 800440c:	4b85      	ldr	r3, [pc, #532]	; (8004624 <menu+0x3304>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004412:	f000 fb4f 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004416:	2104      	movs	r1, #4
 8004418:	487f      	ldr	r0, [pc, #508]	; (8004618 <menu+0x32f8>)
 800441a:	f004 ff63 	bl	80092e4 <HAL_GPIO_ReadPin>
 800441e:	4603      	mov	r3, r0
 8004420:	2b01      	cmp	r3, #1
 8004422:	d119      	bne.n	8004458 <menu+0x3138>
 8004424:	4b7d      	ldr	r3, [pc, #500]	; (800461c <menu+0x32fc>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f083 0301 	eor.w	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d012      	beq.n	8004458 <menu+0x3138>
 8004432:	4b7b      	ldr	r3, [pc, #492]	; (8004620 <menu+0x3300>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00e      	beq.n	8004458 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800443a:	4b7a      	ldr	r3, [pc, #488]	; (8004624 <menu+0x3304>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	3b01      	subs	r3, #1
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4b78      	ldr	r3, [pc, #480]	; (8004624 <menu+0x3304>)
 8004444:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004446:	4b77      	ldr	r3, [pc, #476]	; (8004624 <menu+0x3304>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <menu+0x3134>
		   		calismaSayModu = 1;
 800444e:	4b75      	ldr	r3, [pc, #468]	; (8004624 <menu+0x3304>)
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004454:	f000 fb2e 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004458:	2108      	movs	r1, #8
 800445a:	486f      	ldr	r0, [pc, #444]	; (8004618 <menu+0x32f8>)
 800445c:	f004 ff42 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d12b      	bne.n	80044be <menu+0x319e>
 8004466:	4b6d      	ldr	r3, [pc, #436]	; (800461c <menu+0x32fc>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	f083 0301 	eor.w	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d024      	beq.n	80044be <menu+0x319e>
			eepromData[32] = 0;
 8004474:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <menu+0x3308>)
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800447c:	4b6a      	ldr	r3, [pc, #424]	; (8004628 <menu+0x3308>)
 800447e:	2200      	movs	r2, #0
 8004480:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004482:	4b69      	ldr	r3, [pc, #420]	; (8004628 <menu+0x3308>)
 8004484:	2200      	movs	r2, #0
 8004486:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004488:	4b67      	ldr	r3, [pc, #412]	; (8004628 <menu+0x3308>)
 800448a:	2200      	movs	r2, #0
 800448c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800448e:	4b66      	ldr	r3, [pc, #408]	; (8004628 <menu+0x3308>)
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004494:	4b65      	ldr	r3, [pc, #404]	; (800462c <menu+0x330c>)
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800449a:	4b65      	ldr	r3, [pc, #404]	; (8004630 <menu+0x3310>)
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80044a0:	4b64      	ldr	r3, [pc, #400]	; (8004634 <menu+0x3314>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80044a6:	4b64      	ldr	r3, [pc, #400]	; (8004638 <menu+0x3318>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80044ac:	4b63      	ldr	r3, [pc, #396]	; (800463c <menu+0x331c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <menu+0x3304>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80044b8:	4b61      	ldr	r3, [pc, #388]	; (8004640 <menu+0x3320>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <menu+0x3324>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b1e      	cmp	r3, #30
 80044c4:	d16f      	bne.n	80045a6 <menu+0x3286>
		calismaSayModu = 0;
 80044c6:	4b57      	ldr	r3, [pc, #348]	; (8004624 <menu+0x3304>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044cc:	4b4f      	ldr	r3, [pc, #316]	; (800460c <menu+0x32ec>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80044d4:	4a5c      	ldr	r2, [pc, #368]	; (8004648 <menu+0x3328>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	2001      	movs	r0, #1
 80044da:	f003 fbdd 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80044de:	4a5b      	ldr	r2, [pc, #364]	; (800464c <menu+0x332c>)
 80044e0:	2101      	movs	r1, #1
 80044e2:	2002      	movs	r0, #2
 80044e4:	f003 fbd8 	bl	8007c98 <lcd_print>
 80044e8:	e00d      	b.n	8004506 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80044ea:	4b48      	ldr	r3, [pc, #288]	; (800460c <menu+0x32ec>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d109      	bne.n	8004506 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80044f2:	4a57      	ldr	r2, [pc, #348]	; (8004650 <menu+0x3330>)
 80044f4:	2101      	movs	r1, #1
 80044f6:	2001      	movs	r0, #1
 80044f8:	f003 fbce 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80044fc:	4a55      	ldr	r2, [pc, #340]	; (8004654 <menu+0x3334>)
 80044fe:	2101      	movs	r1, #1
 8004500:	2002      	movs	r0, #2
 8004502:	f003 fbc9 	bl	8007c98 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004506:	2102      	movs	r1, #2
 8004508:	4843      	ldr	r0, [pc, #268]	; (8004618 <menu+0x32f8>)
 800450a:	f004 feeb 	bl	80092e4 <HAL_GPIO_ReadPin>
 800450e:	4603      	mov	r3, r0
 8004510:	2b01      	cmp	r3, #1
 8004512:	d115      	bne.n	8004540 <menu+0x3220>
 8004514:	4b41      	ldr	r3, [pc, #260]	; (800461c <menu+0x32fc>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f083 0301 	eor.w	r3, r3, #1
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00e      	beq.n	8004540 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004522:	4b3a      	ldr	r3, [pc, #232]	; (800460c <menu+0x32ec>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	b2da      	uxtb	r2, r3
 800452a:	4b38      	ldr	r3, [pc, #224]	; (800460c <menu+0x32ec>)
 800452c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <menu+0x32ec>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d902      	bls.n	800453c <menu+0x321c>
				dilSecim = 0;
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <menu+0x32ec>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800453c:	f000 faba 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004540:	2104      	movs	r1, #4
 8004542:	4835      	ldr	r0, [pc, #212]	; (8004618 <menu+0x32f8>)
 8004544:	f004 fece 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004548:	4603      	mov	r3, r0
 800454a:	2b01      	cmp	r3, #1
 800454c:	d115      	bne.n	800457a <menu+0x325a>
 800454e:	4b33      	ldr	r3, [pc, #204]	; (800461c <menu+0x32fc>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	f083 0301 	eor.w	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <menu+0x325a>
			dilSecim = dilSecim - 1;
 800455c:	4b2b      	ldr	r3, [pc, #172]	; (800460c <menu+0x32ec>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	3b01      	subs	r3, #1
 8004562:	b2da      	uxtb	r2, r3
 8004564:	4b29      	ldr	r3, [pc, #164]	; (800460c <menu+0x32ec>)
 8004566:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004568:	4b28      	ldr	r3, [pc, #160]	; (800460c <menu+0x32ec>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <menu+0x3256>
		   		dilSecim = 1;
 8004570:	4b26      	ldr	r3, [pc, #152]	; (800460c <menu+0x32ec>)
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004576:	f000 fa9d 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800457a:	2108      	movs	r1, #8
 800457c:	4826      	ldr	r0, [pc, #152]	; (8004618 <menu+0x32f8>)
 800457e:	f004 feb1 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004582:	4603      	mov	r3, r0
 8004584:	2b01      	cmp	r3, #1
 8004586:	d10e      	bne.n	80045a6 <menu+0x3286>
 8004588:	4b24      	ldr	r3, [pc, #144]	; (800461c <menu+0x32fc>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	f083 0301 	eor.w	r3, r3, #1
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <menu+0x32ec>)
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	4b23      	ldr	r3, [pc, #140]	; (8004628 <menu+0x3308>)
 800459c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80045a0:	4b27      	ldr	r3, [pc, #156]	; (8004640 <menu+0x3320>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <menu+0x3324>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b1f      	cmp	r3, #31
 80045ac:	f040 80b7 	bne.w	800471e <menu+0x33fe>
		calismaSayModu = 0;
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <menu+0x3304>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80045b6:	4a28      	ldr	r2, [pc, #160]	; (8004658 <menu+0x3338>)
 80045b8:	2101      	movs	r1, #1
 80045ba:	2001      	movs	r0, #1
 80045bc:	f003 fb6c 	bl	8007c98 <lcd_print>

		if(iotMode == 0) {
 80045c0:	4b26      	ldr	r3, [pc, #152]	; (800465c <menu+0x333c>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d113      	bne.n	80045f0 <menu+0x32d0>
			if(dilSecim == 0) {
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <menu+0x32ec>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80045d0:	4a23      	ldr	r2, [pc, #140]	; (8004660 <menu+0x3340>)
 80045d2:	2101      	movs	r1, #1
 80045d4:	2002      	movs	r0, #2
 80045d6:	f003 fb5f 	bl	8007c98 <lcd_print>
 80045da:	e050      	b.n	800467e <menu+0x335e>
			} else if(dilSecim == 1) {
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <menu+0x32ec>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d14c      	bne.n	800467e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <menu+0x3344>)
 80045e6:	2101      	movs	r1, #1
 80045e8:	2002      	movs	r0, #2
 80045ea:	f003 fb55 	bl	8007c98 <lcd_print>
 80045ee:	e046      	b.n	800467e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <menu+0x333c>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d142      	bne.n	800467e <menu+0x335e>
			if(dilSecim == 0) {
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <menu+0x32ec>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d135      	bne.n	800466c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004600:	4a19      	ldr	r2, [pc, #100]	; (8004668 <menu+0x3348>)
 8004602:	2101      	movs	r1, #1
 8004604:	2002      	movs	r0, #2
 8004606:	f003 fb47 	bl	8007c98 <lcd_print>
 800460a:	e038      	b.n	800467e <menu+0x335e>
 800460c:	20000249 	.word	0x20000249
 8004610:	0800da00 	.word	0x0800da00
 8004614:	0800da34 	.word	0x0800da34
 8004618:	40010800 	.word	0x40010800
 800461c:	20000257 	.word	0x20000257
 8004620:	20000269 	.word	0x20000269
 8004624:	20000248 	.word	0x20000248
 8004628:	2000012c 	.word	0x2000012c
 800462c:	20000227 	.word	0x20000227
 8004630:	20000001 	.word	0x20000001
 8004634:	20000000 	.word	0x20000000
 8004638:	20000226 	.word	0x20000226
 800463c:	20000225 	.word	0x20000225
 8004640:	20000254 	.word	0x20000254
 8004644:	20000228 	.word	0x20000228
 8004648:	0800da48 	.word	0x0800da48
 800464c:	0800da5c 	.word	0x0800da5c
 8004650:	0800da70 	.word	0x0800da70
 8004654:	0800da84 	.word	0x0800da84
 8004658:	0800da98 	.word	0x0800da98
 800465c:	20000247 	.word	0x20000247
 8004660:	0800d2f0 	.word	0x0800d2f0
 8004664:	0800d304 	.word	0x0800d304
 8004668:	0800d350 	.word	0x0800d350
			} else if(dilSecim == 1) {
 800466c:	4baa      	ldr	r3, [pc, #680]	; (8004918 <menu+0x35f8>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d104      	bne.n	800467e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004674:	4aa9      	ldr	r2, [pc, #676]	; (800491c <menu+0x35fc>)
 8004676:	2101      	movs	r1, #1
 8004678:	2002      	movs	r0, #2
 800467a:	f003 fb0d 	bl	8007c98 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800467e:	2102      	movs	r1, #2
 8004680:	48a7      	ldr	r0, [pc, #668]	; (8004920 <menu+0x3600>)
 8004682:	f004 fe2f 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004686:	4603      	mov	r3, r0
 8004688:	2b01      	cmp	r3, #1
 800468a:	d115      	bne.n	80046b8 <menu+0x3398>
 800468c:	4ba5      	ldr	r3, [pc, #660]	; (8004924 <menu+0x3604>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	f083 0301 	eor.w	r3, r3, #1
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00e      	beq.n	80046b8 <menu+0x3398>
			iotMode = iotMode + 1;
 800469a:	4ba3      	ldr	r3, [pc, #652]	; (8004928 <menu+0x3608>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	4ba1      	ldr	r3, [pc, #644]	; (8004928 <menu+0x3608>)
 80046a4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80046a6:	4ba0      	ldr	r3, [pc, #640]	; (8004928 <menu+0x3608>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d902      	bls.n	80046b4 <menu+0x3394>
				iotMode = 0;
 80046ae:	4b9e      	ldr	r3, [pc, #632]	; (8004928 <menu+0x3608>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046b4:	f000 f9fe 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046b8:	2104      	movs	r1, #4
 80046ba:	4899      	ldr	r0, [pc, #612]	; (8004920 <menu+0x3600>)
 80046bc:	f004 fe12 	bl	80092e4 <HAL_GPIO_ReadPin>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d115      	bne.n	80046f2 <menu+0x33d2>
 80046c6:	4b97      	ldr	r3, [pc, #604]	; (8004924 <menu+0x3604>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	f083 0301 	eor.w	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00e      	beq.n	80046f2 <menu+0x33d2>
			iotMode = iotMode - 1;
 80046d4:	4b94      	ldr	r3, [pc, #592]	; (8004928 <menu+0x3608>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	3b01      	subs	r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	4b92      	ldr	r3, [pc, #584]	; (8004928 <menu+0x3608>)
 80046de:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80046e0:	4b91      	ldr	r3, [pc, #580]	; (8004928 <menu+0x3608>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <menu+0x33ce>
		   		iotMode = 1;
 80046e8:	4b8f      	ldr	r3, [pc, #572]	; (8004928 <menu+0x3608>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046ee:	f000 f9e1 	bl	8004ab4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046f2:	2108      	movs	r1, #8
 80046f4:	488a      	ldr	r0, [pc, #552]	; (8004920 <menu+0x3600>)
 80046f6:	f004 fdf5 	bl	80092e4 <HAL_GPIO_ReadPin>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10e      	bne.n	800471e <menu+0x33fe>
 8004700:	4b88      	ldr	r3, [pc, #544]	; (8004924 <menu+0x3604>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f083 0301 	eor.w	r3, r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <menu+0x33fe>
			eepromData[48] = iotMode;
 800470e:	4b86      	ldr	r3, [pc, #536]	; (8004928 <menu+0x3608>)
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	4b86      	ldr	r3, [pc, #536]	; (800492c <menu+0x360c>)
 8004714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004718:	4b85      	ldr	r3, [pc, #532]	; (8004930 <menu+0x3610>)
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800471e:	4b85      	ldr	r3, [pc, #532]	; (8004934 <menu+0x3614>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b20      	cmp	r3, #32
 8004724:	d13e      	bne.n	80047a4 <menu+0x3484>
		calismaSayModu = 0;
 8004726:	4b84      	ldr	r3, [pc, #528]	; (8004938 <menu+0x3618>)
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800472c:	4b7a      	ldr	r3, [pc, #488]	; (8004918 <menu+0x35f8>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d105      	bne.n	8004740 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 8004734:	4a81      	ldr	r2, [pc, #516]	; (800493c <menu+0x361c>)
 8004736:	2101      	movs	r1, #1
 8004738:	2001      	movs	r0, #1
 800473a:	f003 faad 	bl	8007c98 <lcd_print>
 800473e:	e004      	b.n	800474a <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004740:	4a7f      	ldr	r2, [pc, #508]	; (8004940 <menu+0x3620>)
 8004742:	2101      	movs	r1, #1
 8004744:	2001      	movs	r0, #1
 8004746:	f003 faa7 	bl	8007c98 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 800474a:	4a7e      	ldr	r2, [pc, #504]	; (8004944 <menu+0x3624>)
 800474c:	2101      	movs	r1, #1
 800474e:	2002      	movs	r0, #2
 8004750:	f003 faa2 	bl	8007c98 <lcd_print>
		lcd_print(2, 13, "    ");
 8004754:	4a7c      	ldr	r2, [pc, #496]	; (8004948 <menu+0x3628>)
 8004756:	210d      	movs	r1, #13
 8004758:	2002      	movs	r0, #2
 800475a:	f003 fa9d 	bl	8007c98 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800475e:	2102      	movs	r1, #2
 8004760:	486f      	ldr	r0, [pc, #444]	; (8004920 <menu+0x3600>)
 8004762:	f004 fdbf 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004766:	4603      	mov	r3, r0
 8004768:	2b01      	cmp	r3, #1
 800476a:	d11b      	bne.n	80047a4 <menu+0x3484>
 800476c:	2104      	movs	r1, #4
 800476e:	486c      	ldr	r0, [pc, #432]	; (8004920 <menu+0x3600>)
 8004770:	f004 fdb8 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d114      	bne.n	80047a4 <menu+0x3484>
 800477a:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <menu+0x3604>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	f083 0301 	eor.w	r3, r3, #1
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <menu+0x3484>
			takeMachineID();
 8004788:	f002 faa0 	bl	8006ccc <takeMachineID>

			lcd_print(2, 1, machineID);
 800478c:	4a6d      	ldr	r2, [pc, #436]	; (8004944 <menu+0x3624>)
 800478e:	2101      	movs	r1, #1
 8004790:	2002      	movs	r0, #2
 8004792:	f003 fa81 	bl	8007c98 <lcd_print>
			lcd_print(2, 13, "    ");
 8004796:	4a6c      	ldr	r2, [pc, #432]	; (8004948 <menu+0x3628>)
 8004798:	210d      	movs	r1, #13
 800479a:	2002      	movs	r0, #2
 800479c:	f003 fa7c 	bl	8007c98 <lcd_print>

			bekle();
 80047a0:	f000 f988 	bl	8004ab4 <bekle>
		}
	}

	if (menuSayac == 33) {
 80047a4:	4b63      	ldr	r3, [pc, #396]	; (8004934 <menu+0x3614>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b21      	cmp	r3, #33	; 0x21
 80047aa:	d14e      	bne.n	800484a <menu+0x352a>
		calismaSayModu = 0;
 80047ac:	4b62      	ldr	r3, [pc, #392]	; (8004938 <menu+0x3618>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 80047b2:	4866      	ldr	r0, [pc, #408]	; (800494c <menu+0x362c>)
 80047b4:	f7fb fd36 	bl	8000224 <strlen>
 80047b8:	4603      	mov	r3, r0
 80047ba:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 80047bc:	4a64      	ldr	r2, [pc, #400]	; (8004950 <menu+0x3630>)
 80047be:	2101      	movs	r1, #1
 80047c0:	2001      	movs	r0, #1
 80047c2:	f003 fa69 	bl	8007c98 <lcd_print>

		if(ssidLength <=16) {
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	dc0e      	bgt.n	80047ea <menu+0x34ca>
			lcd_print(2, 1, wifiSSID);
 80047cc:	4a5f      	ldr	r2, [pc, #380]	; (800494c <menu+0x362c>)
 80047ce:	2101      	movs	r1, #1
 80047d0:	2002      	movs	r0, #2
 80047d2:	f003 fa61 	bl	8007c98 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	3301      	adds	r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	4a5d      	ldr	r2, [pc, #372]	; (8004954 <menu+0x3634>)
 80047e0:	4619      	mov	r1, r3
 80047e2:	2002      	movs	r0, #2
 80047e4:	f003 fa58 	bl	8007c98 <lcd_print>
 80047e8:	e005      	b.n	80047f6 <menu+0x34d6>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 80047ea:	2300      	movs	r3, #0
 80047ec:	2202      	movs	r2, #2
 80047ee:	2101      	movs	r1, #1
 80047f0:	4856      	ldr	r0, [pc, #344]	; (800494c <menu+0x362c>)
 80047f2:	f7fc fcd9 	bl	80011a8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047f6:	2102      	movs	r1, #2
 80047f8:	4849      	ldr	r0, [pc, #292]	; (8004920 <menu+0x3600>)
 80047fa:	f004 fd73 	bl	80092e4 <HAL_GPIO_ReadPin>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d122      	bne.n	800484a <menu+0x352a>
 8004804:	2104      	movs	r1, #4
 8004806:	4846      	ldr	r0, [pc, #280]	; (8004920 <menu+0x3600>)
 8004808:	f004 fd6c 	bl	80092e4 <HAL_GPIO_ReadPin>
 800480c:	4603      	mov	r3, r0
 800480e:	2b01      	cmp	r3, #1
 8004810:	d11b      	bne.n	800484a <menu+0x352a>
 8004812:	4b44      	ldr	r3, [pc, #272]	; (8004924 <menu+0x3604>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	f083 0301 	eor.w	r3, r3, #1
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d014      	beq.n	800484a <menu+0x352a>
			takeWifiSSID();
 8004820:	f002 fba4 	bl	8006f6c <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 8004824:	4a49      	ldr	r2, [pc, #292]	; (800494c <menu+0x362c>)
 8004826:	2101      	movs	r1, #1
 8004828:	2002      	movs	r0, #2
 800482a:	f003 fa35 	bl	8007c98 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 800482e:	4847      	ldr	r0, [pc, #284]	; (800494c <menu+0x362c>)
 8004830:	f7fb fcf8 	bl	8000224 <strlen>
 8004834:	4603      	mov	r3, r0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	3301      	adds	r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4a45      	ldr	r2, [pc, #276]	; (8004954 <menu+0x3634>)
 800483e:	4619      	mov	r1, r3
 8004840:	2002      	movs	r0, #2
 8004842:	f003 fa29 	bl	8007c98 <lcd_print>

			bekle();
 8004846:	f000 f935 	bl	8004ab4 <bekle>
		}
	}

	if (menuSayac == 34) {
 800484a:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <menu+0x3614>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b22      	cmp	r3, #34	; 0x22
 8004850:	d14e      	bne.n	80048f0 <menu+0x35d0>
		calismaSayModu = 0;
 8004852:	4b39      	ldr	r3, [pc, #228]	; (8004938 <menu+0x3618>)
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 8004858:	483f      	ldr	r0, [pc, #252]	; (8004958 <menu+0x3638>)
 800485a:	f7fb fce3 	bl	8000224 <strlen>
 800485e:	4603      	mov	r3, r0
 8004860:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004862:	4a3e      	ldr	r2, [pc, #248]	; (800495c <menu+0x363c>)
 8004864:	2101      	movs	r1, #1
 8004866:	2001      	movs	r0, #1
 8004868:	f003 fa16 	bl	8007c98 <lcd_print>

		if(passLength <= 16) {
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b10      	cmp	r3, #16
 8004870:	dc0e      	bgt.n	8004890 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004872:	4a39      	ldr	r2, [pc, #228]	; (8004958 <menu+0x3638>)
 8004874:	2101      	movs	r1, #1
 8004876:	2002      	movs	r0, #2
 8004878:	f003 fa0e 	bl	8007c98 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	3301      	adds	r3, #1
 8004882:	b2db      	uxtb	r3, r3
 8004884:	4a33      	ldr	r2, [pc, #204]	; (8004954 <menu+0x3634>)
 8004886:	4619      	mov	r1, r3
 8004888:	2002      	movs	r0, #2
 800488a:	f003 fa05 	bl	8007c98 <lcd_print>
 800488e:	e005      	b.n	800489c <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004890:	2301      	movs	r3, #1
 8004892:	2202      	movs	r2, #2
 8004894:	2101      	movs	r1, #1
 8004896:	4830      	ldr	r0, [pc, #192]	; (8004958 <menu+0x3638>)
 8004898:	f7fc fc86 	bl	80011a8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800489c:	2102      	movs	r1, #2
 800489e:	4820      	ldr	r0, [pc, #128]	; (8004920 <menu+0x3600>)
 80048a0:	f004 fd20 	bl	80092e4 <HAL_GPIO_ReadPin>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d122      	bne.n	80048f0 <menu+0x35d0>
 80048aa:	2104      	movs	r1, #4
 80048ac:	481c      	ldr	r0, [pc, #112]	; (8004920 <menu+0x3600>)
 80048ae:	f004 fd19 	bl	80092e4 <HAL_GPIO_ReadPin>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d11b      	bne.n	80048f0 <menu+0x35d0>
 80048b8:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <menu+0x3604>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f083 0301 	eor.w	r3, r3, #1
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d014      	beq.n	80048f0 <menu+0x35d0>
			takeWifiPass();
 80048c6:	f002 fcff 	bl	80072c8 <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 80048ca:	4a23      	ldr	r2, [pc, #140]	; (8004958 <menu+0x3638>)
 80048cc:	2101      	movs	r1, #1
 80048ce:	2002      	movs	r0, #2
 80048d0:	f003 f9e2 	bl	8007c98 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80048d4:	4820      	ldr	r0, [pc, #128]	; (8004958 <menu+0x3638>)
 80048d6:	f7fb fca5 	bl	8000224 <strlen>
 80048da:	4603      	mov	r3, r0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	3301      	adds	r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <menu+0x3634>)
 80048e4:	4619      	mov	r1, r3
 80048e6:	2002      	movs	r0, #2
 80048e8:	f003 f9d6 	bl	8007c98 <lcd_print>

			bekle();
 80048ec:	f000 f8e2 	bl	8004ab4 <bekle>
		}
	}

	if (menuSayac == 35) {
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <menu+0x3614>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b23      	cmp	r3, #35	; 0x23
 80048f6:	d176      	bne.n	80049e6 <menu+0x36c6>
		if(dilSecim == 0) {
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <menu+0x35f8>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d133      	bne.n	8004968 <menu+0x3648>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <menu+0x3640>)
 8004902:	2101      	movs	r1, #1
 8004904:	2001      	movs	r0, #1
 8004906:	f003 f9c7 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800490a:	4a16      	ldr	r2, [pc, #88]	; (8004964 <menu+0x3644>)
 800490c:	2101      	movs	r1, #1
 800490e:	2002      	movs	r0, #2
 8004910:	f003 f9c2 	bl	8007c98 <lcd_print>
 8004914:	e036      	b.n	8004984 <menu+0x3664>
 8004916:	bf00      	nop
 8004918:	20000249 	.word	0x20000249
 800491c:	0800d364 	.word	0x0800d364
 8004920:	40010800 	.word	0x40010800
 8004924:	20000257 	.word	0x20000257
 8004928:	20000247 	.word	0x20000247
 800492c:	2000012c 	.word	0x2000012c
 8004930:	20000254 	.word	0x20000254
 8004934:	20000228 	.word	0x20000228
 8004938:	20000248 	.word	0x20000248
 800493c:	0800daac 	.word	0x0800daac
 8004940:	0800dac0 	.word	0x0800dac0
 8004944:	200001a4 	.word	0x200001a4
 8004948:	0800dad4 	.word	0x0800dad4
 800494c:	200001b0 	.word	0x200001b0
 8004950:	0800dadc 	.word	0x0800dadc
 8004954:	20000010 	.word	0x20000010
 8004958:	200001c4 	.word	0x200001c4
 800495c:	0800daf0 	.word	0x0800daf0
 8004960:	0800db04 	.word	0x0800db04
 8004964:	0800db18 	.word	0x0800db18
		} else if(dilSecim == 1) {
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <menu+0x36d0>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d109      	bne.n	8004984 <menu+0x3664>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004970:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <menu+0x36d4>)
 8004972:	2101      	movs	r1, #1
 8004974:	2001      	movs	r0, #1
 8004976:	f003 f98f 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800497a:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <menu+0x36d8>)
 800497c:	2101      	movs	r1, #1
 800497e:	2002      	movs	r0, #2
 8004980:	f003 f98a 	bl	8007c98 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004984:	2108      	movs	r1, #8
 8004986:	481d      	ldr	r0, [pc, #116]	; (80049fc <menu+0x36dc>)
 8004988:	f004 fcac 	bl	80092e4 <HAL_GPIO_ReadPin>
 800498c:	4603      	mov	r3, r0
 800498e:	2b01      	cmp	r3, #1
 8004990:	d129      	bne.n	80049e6 <menu+0x36c6>
			menuGiris = 0;
 8004992:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <menu+0x36e0>)
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004998:	bf00      	nop
 800499a:	481a      	ldr	r0, [pc, #104]	; (8004a04 <menu+0x36e4>)
 800499c:	f005 facb 	bl	8009f36 <HAL_I2C_GetError>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d0f9      	beq.n	800499a <menu+0x367a>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80049a6:	bf00      	nop
 80049a8:	4816      	ldr	r0, [pc, #88]	; (8004a04 <menu+0x36e4>)
 80049aa:	f005 fab7 	bl	8009f1c <HAL_I2C_GetState>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d1f9      	bne.n	80049a8 <menu+0x3688>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80049b4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80049b8:	9302      	str	r3, [sp, #8]
 80049ba:	236e      	movs	r3, #110	; 0x6e
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <menu+0x36e8>)
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	236e      	movs	r3, #110	; 0x6e
 80049c4:	2200      	movs	r2, #0
 80049c6:	21a0      	movs	r1, #160	; 0xa0
 80049c8:	480e      	ldr	r0, [pc, #56]	; (8004a04 <menu+0x36e4>)
 80049ca:	f004 ff45 	bl	8009858 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80049ce:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80049d2:	f003 feb7 	bl	8008744 <HAL_Delay>

			lcd_clear();
 80049d6:	f003 f98b 	bl	8007cf0 <lcd_clear>
			HAL_Delay(500);
 80049da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049de:	f003 feb1 	bl	8008744 <HAL_Delay>
			NVIC_SystemReset();
 80049e2:	f7fc fc87 	bl	80012f4 <__NVIC_SystemReset>
		}
	}
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000249 	.word	0x20000249
 80049f4:	0800db2c 	.word	0x0800db2c
 80049f8:	0800db40 	.word	0x0800db40
 80049fc:	40010800 	.word	0x40010800
 8004a00:	20000245 	.word	0x20000245
 8004a04:	200002b8 	.word	0x200002b8
 8004a08:	2000012c 	.word	0x2000012c

08004a0c <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d105      	bne.n	8004a28 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a1c:	4a22      	ldr	r2, [pc, #136]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a1e:	2101      	movs	r1, #1
 8004a20:	2002      	movs	r0, #2
 8004a22:	f003 f939 	bl	8007c98 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a26:	e03b      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d105      	bne.n	8004a3a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a30:	2102      	movs	r1, #2
 8004a32:	2002      	movs	r0, #2
 8004a34:	f003 f930 	bl	8007c98 <lcd_print>
}
 8004a38:	e032      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==3) {
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d105      	bne.n	8004a4c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a40:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a42:	2103      	movs	r1, #3
 8004a44:	2002      	movs	r0, #2
 8004a46:	f003 f927 	bl	8007c98 <lcd_print>
}
 8004a4a:	e029      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==4) {
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d105      	bne.n	8004a5e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004a52:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a54:	2104      	movs	r1, #4
 8004a56:	2002      	movs	r0, #2
 8004a58:	f003 f91e 	bl	8007c98 <lcd_print>
}
 8004a5c:	e020      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==5) {
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	d105      	bne.n	8004a70 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004a64:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a66:	2105      	movs	r1, #5
 8004a68:	2002      	movs	r0, #2
 8004a6a:	f003 f915 	bl	8007c98 <lcd_print>
}
 8004a6e:	e017      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if(y==6) {
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d105      	bne.n	8004a82 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004a76:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <lcdUpdate+0x9c>)
 8004a78:	2106      	movs	r1, #6
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	f003 f90c 	bl	8007c98 <lcd_print>
}
 8004a80:	e00e      	b.n	8004aa0 <lcdUpdate+0x94>
	} else if (y==7) {
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	2b07      	cmp	r3, #7
 8004a86:	d10b      	bne.n	8004aa0 <lcdUpdate+0x94>
		lcd_clear();
 8004a88:	f003 f932 	bl	8007cf0 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004a8c:	4a07      	ldr	r2, [pc, #28]	; (8004aac <lcdUpdate+0xa0>)
 8004a8e:	2104      	movs	r1, #4
 8004a90:	2001      	movs	r0, #1
 8004a92:	f003 f901 	bl	8007c98 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004a96:	4a06      	ldr	r2, [pc, #24]	; (8004ab0 <lcdUpdate+0xa4>)
 8004a98:	2106      	movs	r1, #6
 8004a9a:	2002      	movs	r0, #2
 8004a9c:	f003 f8fc 	bl	8007c98 <lcd_print>
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	0800db54 	.word	0x0800db54
 8004aac:	0800db58 	.word	0x0800db58
 8004ab0:	0800db60 	.word	0x0800db60

08004ab4 <bekle>:

void bekle() {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
	timer1=millis;
 8004ab8:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <bekle+0x124>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a47      	ldr	r2, [pc, #284]	; (8004bdc <bekle+0x128>)
 8004abe:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ac0:	e002      	b.n	8004ac8 <bekle+0x14>
    	butonKontrol = 1;
 8004ac2:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <bekle+0x12c>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4846      	ldr	r0, [pc, #280]	; (8004be4 <bekle+0x130>)
 8004acc:	f004 fc0a 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d109      	bne.n	8004aea <bekle+0x36>
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <bekle+0x124>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b40      	ldr	r3, [pc, #256]	; (8004bdc <bekle+0x128>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d0ef      	beq.n	8004ac2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ae2:	e002      	b.n	8004aea <bekle+0x36>
    	butonKontrol = 1;
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <bekle+0x12c>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004aea:	2108      	movs	r1, #8
 8004aec:	483e      	ldr	r0, [pc, #248]	; (8004be8 <bekle+0x134>)
 8004aee:	f004 fbf9 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d109      	bne.n	8004b0c <bekle+0x58>
 8004af8:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <bekle+0x124>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4b37      	ldr	r3, [pc, #220]	; (8004bdc <bekle+0x128>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d0ef      	beq.n	8004ae4 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b04:	e002      	b.n	8004b0c <bekle+0x58>
    	butonKontrol = 1;
 8004b06:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <bekle+0x12c>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	4835      	ldr	r0, [pc, #212]	; (8004be4 <bekle+0x130>)
 8004b10:	f004 fbe8 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d109      	bne.n	8004b2e <bekle+0x7a>
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <bekle+0x124>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b2f      	ldr	r3, [pc, #188]	; (8004bdc <bekle+0x128>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d0ef      	beq.n	8004b06 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b26:	e002      	b.n	8004b2e <bekle+0x7a>
    	butonKontrol = 1;
 8004b28:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <bekle+0x12c>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b2e:	2104      	movs	r1, #4
 8004b30:	482c      	ldr	r0, [pc, #176]	; (8004be4 <bekle+0x130>)
 8004b32:	f004 fbd7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d109      	bne.n	8004b50 <bekle+0x9c>
 8004b3c:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <bekle+0x124>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <bekle+0x128>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d0ef      	beq.n	8004b28 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b48:	e002      	b.n	8004b50 <bekle+0x9c>
    	butonKontrol = 1;
 8004b4a:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <bekle+0x12c>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b50:	2108      	movs	r1, #8
 8004b52:	4824      	ldr	r0, [pc, #144]	; (8004be4 <bekle+0x130>)
 8004b54:	f004 fbc6 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d109      	bne.n	8004b72 <bekle+0xbe>
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <bekle+0x124>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <bekle+0x128>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d0ef      	beq.n	8004b4a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b6a:	e002      	b.n	8004b72 <bekle+0xbe>
    	butonKontrol = 1;
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <bekle+0x12c>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	481c      	ldr	r0, [pc, #112]	; (8004be8 <bekle+0x134>)
 8004b76:	f004 fbb5 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <bekle+0xe0>
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <bekle+0x124>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <bekle+0x128>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d0ef      	beq.n	8004b6c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b8c:	e002      	b.n	8004b94 <bekle+0xe0>
    	butonKontrol = 1;
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <bekle+0x12c>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b98:	4813      	ldr	r0, [pc, #76]	; (8004be8 <bekle+0x134>)
 8004b9a:	f004 fba3 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <bekle+0x104>
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <bekle+0x124>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <bekle+0x128>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d0ee      	beq.n	8004b8e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bb0:	e002      	b.n	8004bb8 <bekle+0x104>
    	butonKontrol = 1;
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <bekle+0x12c>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bbc:	480a      	ldr	r0, [pc, #40]	; (8004be8 <bekle+0x134>)
 8004bbe:	f004 fb91 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <bekle+0x120>
 8004bc8:	4b03      	ldr	r3, [pc, #12]	; (8004bd8 <bekle+0x124>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <bekle+0x128>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0ee      	beq.n	8004bb2 <bekle+0xfe>
    }

}
 8004bd4:	bf00      	nop
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000204 	.word	0x20000204
 8004bdc:	2000020c 	.word	0x2000020c
 8004be0:	20000257 	.word	0x20000257
 8004be4:	40010800 	.word	0x40010800
 8004be8:	40011000 	.word	0x40011000

08004bec <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <checkLCDBacklight+0x24>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <checkLCDBacklight+0x28>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b3b      	cmp	r3, #59	; 0x3b
 8004bfc:	d903      	bls.n	8004c06 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f003 f896 	bl	8007d30 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c04:	e002      	b.n	8004c0c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c06:	2001      	movs	r0, #1
 8004c08:	f003 f892 	bl	8007d30 <lcd_backlight>
}
 8004c0c:	bf00      	nop
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000204 	.word	0x20000204
 8004c14:	20000220 	.word	0x20000220

08004c18 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <checkBasincSalteri+0x54>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <checkBasincSalteri+0x12>
		basincVar=1;
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <checkBasincSalteri+0x58>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <checkBasincSalteri+0x54>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d119      	bne.n	8004c66 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c36:	480f      	ldr	r0, [pc, #60]	; (8004c74 <checkBasincSalteri+0x5c>)
 8004c38:	f004 fb54 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <checkBasincSalteri+0x60>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <checkBasincSalteri+0x64>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d90a      	bls.n	8004c66 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <checkBasincSalteri+0x58>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004c56:	e006      	b.n	8004c66 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <checkBasincSalteri+0x60>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a07      	ldr	r2, [pc, #28]	; (8004c7c <checkBasincSalteri+0x64>)
 8004c5e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <checkBasincSalteri+0x58>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	701a      	strb	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	2000022f 	.word	0x2000022f
 8004c70:	2000022b 	.word	0x2000022b
 8004c74:	40011000 	.word	0x40011000
 8004c78:	20000204 	.word	0x20000204
 8004c7c:	2000021c 	.word	0x2000021c

08004c80 <checkBasGonder>:

void checkBasGonder() {
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <checkBasGonder+0x74>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10b      	bne.n	8004ca4 <checkBasGonder+0x24>
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <checkBasGonder+0x78>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <checkBasGonder+0x24>
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <checkBasGonder+0x7c>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <checkBasGonder+0x80>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e009      	b.n	8004cb8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004ca4:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <checkBasGonder+0x78>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	f083 0301 	eor.w	r3, r3, #1
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004cb2:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <checkBasGonder+0x80>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <checkBasGonder+0x74>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d10b      	bne.n	8004cd8 <checkBasGonder+0x58>
 8004cc0:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <checkBasGonder+0x84>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <checkBasGonder+0x58>
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <checkBasGonder+0x7c>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <checkBasGonder+0x88>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004cd6:	e009      	b.n	8004cec <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <checkBasGonder+0x84>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	f083 0301 	eor.w	r3, r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <checkBasGonder+0x88>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	20000229 	.word	0x20000229
 8004cf8:	2000025d 	.word	0x2000025d
 8004cfc:	20000237 	.word	0x20000237
 8004d00:	20000264 	.word	0x20000264
 8004d04:	20000260 	.word	0x20000260
 8004d08:	20000265 	.word	0x20000265

08004d0c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <checkKapiSecimleri+0x98>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d18:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d1e:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <checkKapiSecimleri+0x98>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10e      	bne.n	8004d44 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d2a:	4820      	ldr	r0, [pc, #128]	; (8004dac <checkKapiSecimleri+0xa0>)
 8004d2c:	f004 fada 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004d36:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	e002      	b.n	8004d44 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <checkKapiSecimleri+0x98>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d10e      	bne.n	8004d6a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d50:	4816      	ldr	r0, [pc, #88]	; (8004dac <checkKapiSecimleri+0xa0>)
 8004d52:	f004 fac7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004d5c:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004d64:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <checkKapiSecimleri+0x98>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d116      	bne.n	8004da0 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d76:	480d      	ldr	r0, [pc, #52]	; (8004dac <checkKapiSecimleri+0xa0>)
 8004d78:	f004 fab4 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <checkKapiSecimleri+0x8e>
 8004d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d86:	4809      	ldr	r0, [pc, #36]	; (8004dac <checkKapiSecimleri+0xa0>)
 8004d88:	f004 faac 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004d98:	e002      	b.n	8004da0 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004d9a:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <checkKapiSecimleri+0x9c>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000230 	.word	0x20000230
 8004da8:	2000027b 	.word	0x2000027b
 8004dac:	40010800 	.word	0x40010800

08004db0 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004db4:	4b62      	ldr	r3, [pc, #392]	; (8004f40 <checkAktifCalisma+0x190>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f041 833e 	bne.w	800643a <checkAktifCalisma+0x168a>
 8004dbe:	4b61      	ldr	r3, [pc, #388]	; (8004f44 <checkAktifCalisma+0x194>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f041 8339 	bne.w	800643a <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004dc8:	4b5f      	ldr	r3, [pc, #380]	; (8004f48 <checkAktifCalisma+0x198>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11a      	bne.n	8004e06 <checkAktifCalisma+0x56>
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	; (8004f4c <checkAktifCalisma+0x19c>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d116      	bne.n	8004e06 <checkAktifCalisma+0x56>
 8004dd8:	4b5d      	ldr	r3, [pc, #372]	; (8004f50 <checkAktifCalisma+0x1a0>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <checkAktifCalisma+0x46>
 8004de0:	4b5c      	ldr	r3, [pc, #368]	; (8004f54 <checkAktifCalisma+0x1a4>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	f083 0301 	eor.w	r3, r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <checkAktifCalisma+0x46>
 8004dee:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <checkAktifCalisma+0x1a8>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d007      	beq.n	8004e06 <checkAktifCalisma+0x56>
 8004df6:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <checkAktifCalisma+0x1ac>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d018      	beq.n	8004e30 <checkAktifCalisma+0x80>
 8004dfe:	4b58      	ldr	r3, [pc, #352]	; (8004f60 <checkAktifCalisma+0x1b0>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d114      	bne.n	8004e30 <checkAktifCalisma+0x80>
 8004e06:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <checkAktifCalisma+0x1b4>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d010      	beq.n	8004e30 <checkAktifCalisma+0x80>
 8004e0e:	4b56      	ldr	r3, [pc, #344]	; (8004f68 <checkAktifCalisma+0x1b8>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00c      	beq.n	8004e30 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e16:	2201      	movs	r2, #1
 8004e18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e1c:	4853      	ldr	r0, [pc, #332]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e1e:	f004 fa78 	bl	8009312 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004e22:	4b53      	ldr	r3, [pc, #332]	; (8004f70 <checkAktifCalisma+0x1c0>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004e28:	4b52      	ldr	r3, [pc, #328]	; (8004f74 <checkAktifCalisma+0x1c4>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e008      	b.n	8004e42 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e36:	484d      	ldr	r0, [pc, #308]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e38:	f004 fa6b 	bl	8009312 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004e3c:	4b4c      	ldr	r3, [pc, #304]	; (8004f70 <checkAktifCalisma+0x1c0>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004e42:	4b40      	ldr	r3, [pc, #256]	; (8004f44 <checkAktifCalisma+0x194>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d160      	bne.n	8004f0c <checkAktifCalisma+0x15c>
 8004e4a:	4b46      	ldr	r3, [pc, #280]	; (8004f64 <checkAktifCalisma+0x1b4>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d05c      	beq.n	8004f0c <checkAktifCalisma+0x15c>
 8004e52:	4b45      	ldr	r3, [pc, #276]	; (8004f68 <checkAktifCalisma+0x1b8>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d058      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e5e:	4843      	ldr	r0, [pc, #268]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e60:	f004 fa40 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <checkAktifCalisma+0xc2>
 8004e6a:	4b43      	ldr	r3, [pc, #268]	; (8004f78 <checkAktifCalisma+0x1c8>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04c      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e72:	2102      	movs	r1, #2
 8004e74:	4841      	ldr	r0, [pc, #260]	; (8004f7c <checkAktifCalisma+0x1cc>)
 8004e76:	f004 fa35 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d145      	bne.n	8004f0c <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004e80:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <checkAktifCalisma+0x1d0>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d041      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e8c:	4837      	ldr	r0, [pc, #220]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e8e:	f004 fa29 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10e      	bne.n	8004eb6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e9c:	4833      	ldr	r0, [pc, #204]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004e9e:	f004 fa21 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d106      	bne.n	8004eb6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004ea8:	2140      	movs	r1, #64	; 0x40
 8004eaa:	4834      	ldr	r0, [pc, #208]	; (8004f7c <checkAktifCalisma+0x1cc>)
 8004eac:	f004 fa1a 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d003      	beq.n	8004ebe <checkAktifCalisma+0x10e>
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <checkAktifCalisma+0x198>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d026      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004ebe:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <checkAktifCalisma+0x1a0>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	f083 0301 	eor.w	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01f      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004ecc:	4b1f      	ldr	r3, [pc, #124]	; (8004f4c <checkAktifCalisma+0x19c>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	f083 0301 	eor.w	r3, r3, #1
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d018      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004eda:	4b20      	ldr	r3, [pc, #128]	; (8004f5c <checkAktifCalisma+0x1ac>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f083 0301 	eor.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d011      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004ee8:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <checkAktifCalisma+0x1d4>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f083 0301 	eor.w	r3, r3, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <checkAktifCalisma+0x1d8>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	f083 0301 	eor.w	r3, r3, #1
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f04:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <checkAktifCalisma+0x198>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <checkAktifCalisma+0x198>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f12:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <checkAktifCalisma+0x198>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d03a      	beq.n	8004f90 <checkAktifCalisma+0x1e0>
 8004f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f1e:	4817      	ldr	r0, [pc, #92]	; (8004f7c <checkAktifCalisma+0x1cc>)
 8004f20:	f004 f9e0 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d132      	bne.n	8004f90 <checkAktifCalisma+0x1e0>
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <checkAktifCalisma+0x1dc>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d02e      	beq.n	8004f90 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f32:	2201      	movs	r2, #1
 8004f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f38:	480c      	ldr	r0, [pc, #48]	; (8004f6c <checkAktifCalisma+0x1bc>)
 8004f3a:	f004 f9ea 	bl	8009312 <HAL_GPIO_WritePin>
 8004f3e:	e02d      	b.n	8004f9c <checkAktifCalisma+0x1ec>
 8004f40:	20000246 	.word	0x20000246
 8004f44:	20000245 	.word	0x20000245
 8004f48:	2000025d 	.word	0x2000025d
 8004f4c:	2000025e 	.word	0x2000025e
 8004f50:	20000260 	.word	0x20000260
 8004f54:	20000258 	.word	0x20000258
 8004f58:	2000023b 	.word	0x2000023b
 8004f5c:	2000025f 	.word	0x2000025f
 8004f60:	2000023a 	.word	0x2000023a
 8004f64:	2000027a 	.word	0x2000027a
 8004f68:	2000027b 	.word	0x2000027b
 8004f6c:	40010c00 	.word	0x40010c00
 8004f70:	2000027c 	.word	0x2000027c
 8004f74:	20000267 	.word	0x20000267
 8004f78:	20000264 	.word	0x20000264
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	2000022b 	.word	0x2000022b
 8004f84:	20000262 	.word	0x20000262
 8004f88:	20000263 	.word	0x20000263
 8004f8c:	20000236 	.word	0x20000236
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004f90:	2200      	movs	r2, #0
 8004f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f96:	4860      	ldr	r0, [pc, #384]	; (8005118 <checkAktifCalisma+0x368>)
 8004f98:	f004 f9bb 	bl	8009312 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004f9c:	4b5f      	ldr	r3, [pc, #380]	; (800511c <checkAktifCalisma+0x36c>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d013      	beq.n	8004fcc <checkAktifCalisma+0x21c>
 8004fa4:	4b5e      	ldr	r3, [pc, #376]	; (8005120 <checkAktifCalisma+0x370>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d007      	beq.n	8004fbc <checkAktifCalisma+0x20c>
 8004fac:	4b5c      	ldr	r3, [pc, #368]	; (8005120 <checkAktifCalisma+0x370>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d003      	beq.n	8004fbc <checkAktifCalisma+0x20c>
 8004fb4:	4b5b      	ldr	r3, [pc, #364]	; (8005124 <checkAktifCalisma+0x374>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d107      	bne.n	8004fcc <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	4855      	ldr	r0, [pc, #340]	; (8005118 <checkAktifCalisma+0x368>)
 8004fc2:	f004 f9a6 	bl	8009312 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004fc6:	4b58      	ldr	r3, [pc, #352]	; (8005128 <checkAktifCalisma+0x378>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004fcc:	4b56      	ldr	r3, [pc, #344]	; (8005128 <checkAktifCalisma+0x378>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d02f      	beq.n	8005034 <checkAktifCalisma+0x284>
 8004fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fd8:	484f      	ldr	r0, [pc, #316]	; (8005118 <checkAktifCalisma+0x368>)
 8004fda:	f004 f983 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d106      	bne.n	8004ff2 <checkAktifCalisma+0x242>
 8004fe4:	4b51      	ldr	r3, [pc, #324]	; (800512c <checkAktifCalisma+0x37c>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	f083 0301 	eor.w	r3, r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <checkAktifCalisma+0x250>
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	484e      	ldr	r0, [pc, #312]	; (8005130 <checkAktifCalisma+0x380>)
 8004ff6:	f004 f975 	bl	80092e4 <HAL_GPIO_ReadPin>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d119      	bne.n	8005034 <checkAktifCalisma+0x284>
 8005000:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <checkAktifCalisma+0x384>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <checkAktifCalisma+0x284>
 8005008:	4b4b      	ldr	r3, [pc, #300]	; (8005138 <checkAktifCalisma+0x388>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d011      	beq.n	8005034 <checkAktifCalisma+0x284>
 8005010:	4b4a      	ldr	r3, [pc, #296]	; (800513c <checkAktifCalisma+0x38c>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <checkAktifCalisma+0x284>
 8005018:	4b49      	ldr	r3, [pc, #292]	; (8005140 <checkAktifCalisma+0x390>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	f083 0301 	eor.w	r3, r3, #1
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d006      	beq.n	8005034 <checkAktifCalisma+0x284>
			timer2=millis;
 8005026:	4b47      	ldr	r3, [pc, #284]	; (8005144 <checkAktifCalisma+0x394>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a47      	ldr	r2, [pc, #284]	; (8005148 <checkAktifCalisma+0x398>)
 800502c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800502e:	4b44      	ldr	r3, [pc, #272]	; (8005140 <checkAktifCalisma+0x390>)
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <checkAktifCalisma+0x394>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4b43      	ldr	r3, [pc, #268]	; (8005148 <checkAktifCalisma+0x398>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	4a43      	ldr	r2, [pc, #268]	; (800514c <checkAktifCalisma+0x39c>)
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	4293      	cmp	r3, r2
 8005044:	d303      	bcc.n	800504e <checkAktifCalisma+0x29e>
 8005046:	4b3e      	ldr	r3, [pc, #248]	; (8005140 <checkAktifCalisma+0x390>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d111      	bne.n	8005072 <checkAktifCalisma+0x2c2>
 800504e:	4b39      	ldr	r3, [pc, #228]	; (8005134 <checkAktifCalisma+0x384>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	f083 0301 	eor.w	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <checkAktifCalisma+0x2c2>
 800505c:	4b36      	ldr	r3, [pc, #216]	; (8005138 <checkAktifCalisma+0x388>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f083 0301 	eor.w	r3, r3, #1
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <checkAktifCalisma+0x2c2>
 800506a:	4b34      	ldr	r3, [pc, #208]	; (800513c <checkAktifCalisma+0x38c>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005072:	2200      	movs	r2, #0
 8005074:	2104      	movs	r1, #4
 8005076:	4828      	ldr	r0, [pc, #160]	; (8005118 <checkAktifCalisma+0x368>)
 8005078:	f004 f94b 	bl	8009312 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800507c:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <checkAktifCalisma+0x378>)
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005082:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <checkAktifCalisma+0x390>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005088:	4b31      	ldr	r3, [pc, #196]	; (8005150 <checkAktifCalisma+0x3a0>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005090:	4b30      	ldr	r3, [pc, #192]	; (8005154 <checkAktifCalisma+0x3a4>)
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005096:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <checkAktifCalisma+0x3a0>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d116      	bne.n	80050cc <checkAktifCalisma+0x31c>
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <checkAktifCalisma+0x3a8>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d112      	bne.n	80050cc <checkAktifCalisma+0x31c>
 80050a6:	2101      	movs	r1, #1
 80050a8:	4821      	ldr	r0, [pc, #132]	; (8005130 <checkAktifCalisma+0x380>)
 80050aa:	f004 f91b 	bl	80092e4 <HAL_GPIO_ReadPin>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <checkAktifCalisma+0x31c>
 80050b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050b8:	4817      	ldr	r0, [pc, #92]	; (8005118 <checkAktifCalisma+0x368>)
 80050ba:	f004 f913 	bl	80092e4 <HAL_GPIO_ReadPin>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80050c4:	4b23      	ldr	r3, [pc, #140]	; (8005154 <checkAktifCalisma+0x3a4>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	e011      	b.n	80050f0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80050cc:	4b20      	ldr	r3, [pc, #128]	; (8005150 <checkAktifCalisma+0x3a0>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d10d      	bne.n	80050f0 <checkAktifCalisma+0x340>
 80050d4:	2101      	movs	r1, #1
 80050d6:	4816      	ldr	r0, [pc, #88]	; (8005130 <checkAktifCalisma+0x380>)
 80050d8:	f004 f904 	bl	80092e4 <HAL_GPIO_ReadPin>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d106      	bne.n	80050f0 <checkAktifCalisma+0x340>
 80050e2:	4b1d      	ldr	r3, [pc, #116]	; (8005158 <checkAktifCalisma+0x3a8>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <checkAktifCalisma+0x3a4>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <checkAktifCalisma+0x3a0>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d134      	bne.n	8005162 <checkAktifCalisma+0x3b2>
 80050f8:	4b17      	ldr	r3, [pc, #92]	; (8005158 <checkAktifCalisma+0x3a8>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d130      	bne.n	8005162 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005100:	2101      	movs	r1, #1
 8005102:	480b      	ldr	r0, [pc, #44]	; (8005130 <checkAktifCalisma+0x380>)
 8005104:	f004 f8ee 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d126      	bne.n	800515c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <checkAktifCalisma+0x3a4>)
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e025      	b.n	8005162 <checkAktifCalisma+0x3b2>
 8005116:	bf00      	nop
 8005118:	40010c00 	.word	0x40010c00
 800511c:	2000025d 	.word	0x2000025d
 8005120:	20000237 	.word	0x20000237
 8005124:	2000023b 	.word	0x2000023b
 8005128:	20000261 	.word	0x20000261
 800512c:	20000264 	.word	0x20000264
 8005130:	40011000 	.word	0x40011000
 8005134:	2000027a 	.word	0x2000027a
 8005138:	2000027b 	.word	0x2000027b
 800513c:	2000022b 	.word	0x2000022b
 8005140:	20000259 	.word	0x20000259
 8005144:	20000204 	.word	0x20000204
 8005148:	20000210 	.word	0x20000210
 800514c:	2000023c 	.word	0x2000023c
 8005150:	2000022c 	.word	0x2000022c
 8005154:	2000027f 	.word	0x2000027f
 8005158:	20000229 	.word	0x20000229
			} else {
				cerceveVar=0;
 800515c:	4b7f      	ldr	r3, [pc, #508]	; (800535c <checkAktifCalisma+0x5ac>)
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005162:	4b7f      	ldr	r3, [pc, #508]	; (8005360 <checkAktifCalisma+0x5b0>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d17c      	bne.n	8005264 <checkAktifCalisma+0x4b4>
 800516a:	4b7e      	ldr	r3, [pc, #504]	; (8005364 <checkAktifCalisma+0x5b4>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d078      	beq.n	8005264 <checkAktifCalisma+0x4b4>
 8005172:	4b7d      	ldr	r3, [pc, #500]	; (8005368 <checkAktifCalisma+0x5b8>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d074      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800517a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800517e:	487b      	ldr	r0, [pc, #492]	; (800536c <checkAktifCalisma+0x5bc>)
 8005180:	f004 f8b0 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <checkAktifCalisma+0x3e2>
 800518a:	4b79      	ldr	r3, [pc, #484]	; (8005370 <checkAktifCalisma+0x5c0>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d068      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005192:	4b72      	ldr	r3, [pc, #456]	; (800535c <checkAktifCalisma+0x5ac>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d064      	beq.n	8005264 <checkAktifCalisma+0x4b4>
 800519a:	4b76      	ldr	r3, [pc, #472]	; (8005374 <checkAktifCalisma+0x5c4>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	f083 0301 	eor.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d05d      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80051a8:	2104      	movs	r1, #4
 80051aa:	4873      	ldr	r0, [pc, #460]	; (8005378 <checkAktifCalisma+0x5c8>)
 80051ac:	f004 f89a 	bl	80092e4 <HAL_GPIO_ReadPin>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <checkAktifCalisma+0x40e>
 80051b6:	4b71      	ldr	r3, [pc, #452]	; (800537c <checkAktifCalisma+0x5cc>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d152      	bne.n	8005264 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051c2:	486a      	ldr	r0, [pc, #424]	; (800536c <checkAktifCalisma+0x5bc>)
 80051c4:	f004 f88e 	bl	80092e4 <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d10e      	bne.n	80051ec <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80051ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051d2:	4866      	ldr	r0, [pc, #408]	; (800536c <checkAktifCalisma+0x5bc>)
 80051d4:	f004 f886 	bl	80092e4 <HAL_GPIO_ReadPin>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d106      	bne.n	80051ec <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80051de:	2140      	movs	r1, #64	; 0x40
 80051e0:	4865      	ldr	r0, [pc, #404]	; (8005378 <checkAktifCalisma+0x5c8>)
 80051e2:	f004 f87f 	bl	80092e4 <HAL_GPIO_ReadPin>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d003      	beq.n	80051f4 <checkAktifCalisma+0x444>
 80051ec:	4b64      	ldr	r3, [pc, #400]	; (8005380 <checkAktifCalisma+0x5d0>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d037      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80051f4:	4b63      	ldr	r3, [pc, #396]	; (8005384 <checkAktifCalisma+0x5d4>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	f083 0301 	eor.w	r3, r3, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d030      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005202:	4b61      	ldr	r3, [pc, #388]	; (8005388 <checkAktifCalisma+0x5d8>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f083 0301 	eor.w	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d029      	beq.n	8005264 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005210:	4b5e      	ldr	r3, [pc, #376]	; (800538c <checkAktifCalisma+0x5dc>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f083 0301 	eor.w	r3, r3, #1
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d022      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800521e:	4b5c      	ldr	r3, [pc, #368]	; (8005390 <checkAktifCalisma+0x5e0>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	f083 0301 	eor.w	r3, r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800522c:	4b59      	ldr	r3, [pc, #356]	; (8005394 <checkAktifCalisma+0x5e4>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f083 0301 	eor.w	r3, r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d014      	beq.n	8005264 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800523a:	4b57      	ldr	r3, [pc, #348]	; (8005398 <checkAktifCalisma+0x5e8>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	f083 0301 	eor.w	r3, r3, #1
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005248:	2201      	movs	r2, #1
 800524a:	2102      	movs	r1, #2
 800524c:	4847      	ldr	r0, [pc, #284]	; (800536c <checkAktifCalisma+0x5bc>)
 800524e:	f004 f860 	bl	8009312 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005252:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <checkAktifCalisma+0x5d0>)
 8005254:	2201      	movs	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005258:	4b50      	ldr	r3, [pc, #320]	; (800539c <checkAktifCalisma+0x5ec>)
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800525e:	4b50      	ldr	r3, [pc, #320]	; (80053a0 <checkAktifCalisma+0x5f0>)
 8005260:	2201      	movs	r2, #1
 8005262:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005264:	4b46      	ldr	r3, [pc, #280]	; (8005380 <checkAktifCalisma+0x5d0>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d033      	beq.n	80052d4 <checkAktifCalisma+0x524>
 800526c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005270:	483e      	ldr	r0, [pc, #248]	; (800536c <checkAktifCalisma+0x5bc>)
 8005272:	f004 f837 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005276:	4603      	mov	r3, r0
 8005278:	2b01      	cmp	r3, #1
 800527a:	d106      	bne.n	800528a <checkAktifCalisma+0x4da>
 800527c:	4b3c      	ldr	r3, [pc, #240]	; (8005370 <checkAktifCalisma+0x5c0>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f083 0301 	eor.w	r3, r3, #1
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <checkAktifCalisma+0x4f0>
 800528a:	2104      	movs	r1, #4
 800528c:	483a      	ldr	r0, [pc, #232]	; (8005378 <checkAktifCalisma+0x5c8>)
 800528e:	f004 f829 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005292:	4603      	mov	r3, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	d11d      	bne.n	80052d4 <checkAktifCalisma+0x524>
 8005298:	4b38      	ldr	r3, [pc, #224]	; (800537c <checkAktifCalisma+0x5cc>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d019      	beq.n	80052d4 <checkAktifCalisma+0x524>
 80052a0:	4b30      	ldr	r3, [pc, #192]	; (8005364 <checkAktifCalisma+0x5b4>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d015      	beq.n	80052d4 <checkAktifCalisma+0x524>
 80052a8:	4b2f      	ldr	r3, [pc, #188]	; (8005368 <checkAktifCalisma+0x5b8>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d011      	beq.n	80052d4 <checkAktifCalisma+0x524>
 80052b0:	4b2a      	ldr	r3, [pc, #168]	; (800535c <checkAktifCalisma+0x5ac>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <checkAktifCalisma+0x524>
 80052b8:	4b3a      	ldr	r3, [pc, #232]	; (80053a4 <checkAktifCalisma+0x5f4>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f083 0301 	eor.w	r3, r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <checkAktifCalisma+0x524>
			timer2=millis;
 80052c6:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <checkAktifCalisma+0x5f8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a38      	ldr	r2, [pc, #224]	; (80053ac <checkAktifCalisma+0x5fc>)
 80052cc:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80052ce:	4b35      	ldr	r3, [pc, #212]	; (80053a4 <checkAktifCalisma+0x5f4>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80052d4:	4b34      	ldr	r3, [pc, #208]	; (80053a8 <checkAktifCalisma+0x5f8>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b34      	ldr	r3, [pc, #208]	; (80053ac <checkAktifCalisma+0x5fc>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <checkAktifCalisma+0x600>)
 80052e0:	7812      	ldrb	r2, [r2, #0]
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d303      	bcc.n	80052ee <checkAktifCalisma+0x53e>
 80052e6:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <checkAktifCalisma+0x5f4>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d114      	bne.n	8005318 <checkAktifCalisma+0x568>
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <checkAktifCalisma+0x5b4>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f083 0301 	eor.w	r3, r3, #1
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <checkAktifCalisma+0x568>
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <checkAktifCalisma+0x5b8>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <checkAktifCalisma+0x568>
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <checkAktifCalisma+0x5ac>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	f083 0301 	eor.w	r3, r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005318:	2200      	movs	r2, #0
 800531a:	2102      	movs	r1, #2
 800531c:	4813      	ldr	r0, [pc, #76]	; (800536c <checkAktifCalisma+0x5bc>)
 800531e:	f003 fff8 	bl	8009312 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005322:	4b17      	ldr	r3, [pc, #92]	; (8005380 <checkAktifCalisma+0x5d0>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <checkAktifCalisma+0x5f4>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800532e:	4b14      	ldr	r3, [pc, #80]	; (8005380 <checkAktifCalisma+0x5d0>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d040      	beq.n	80053b8 <checkAktifCalisma+0x608>
 8005336:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800533a:	480f      	ldr	r0, [pc, #60]	; (8005378 <checkAktifCalisma+0x5c8>)
 800533c:	f003 ffd2 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d138      	bne.n	80053b8 <checkAktifCalisma+0x608>
 8005346:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <checkAktifCalisma+0x604>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d034      	beq.n	80053b8 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800534e:	2201      	movs	r2, #1
 8005350:	2101      	movs	r1, #1
 8005352:	4806      	ldr	r0, [pc, #24]	; (800536c <checkAktifCalisma+0x5bc>)
 8005354:	f003 ffdd 	bl	8009312 <HAL_GPIO_WritePin>
 8005358:	e033      	b.n	80053c2 <checkAktifCalisma+0x612>
 800535a:	bf00      	nop
 800535c:	2000027f 	.word	0x2000027f
 8005360:	20000245 	.word	0x20000245
 8005364:	2000027a 	.word	0x2000027a
 8005368:	2000027b 	.word	0x2000027b
 800536c:	40010c00 	.word	0x40010c00
 8005370:	20000265 	.word	0x20000265
 8005374:	20000279 	.word	0x20000279
 8005378:	40011000 	.word	0x40011000
 800537c:	2000022e 	.word	0x2000022e
 8005380:	20000260 	.word	0x20000260
 8005384:	2000025d 	.word	0x2000025d
 8005388:	20000261 	.word	0x20000261
 800538c:	2000025e 	.word	0x2000025e
 8005390:	2000025f 	.word	0x2000025f
 8005394:	20000262 	.word	0x20000262
 8005398:	20000263 	.word	0x20000263
 800539c:	20000268 	.word	0x20000268
 80053a0:	20000289 	.word	0x20000289
 80053a4:	20000258 	.word	0x20000258
 80053a8:	20000204 	.word	0x20000204
 80053ac:	20000210 	.word	0x20000210
 80053b0:	2000023d 	.word	0x2000023d
 80053b4:	2000022d 	.word	0x2000022d
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80053b8:	2200      	movs	r2, #0
 80053ba:	2101      	movs	r1, #1
 80053bc:	4836      	ldr	r0, [pc, #216]	; (8005498 <checkAktifCalisma+0x6e8>)
 80053be:	f003 ffa8 	bl	8009312 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80053c2:	4b36      	ldr	r3, [pc, #216]	; (800549c <checkAktifCalisma+0x6ec>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 8080 	bne.w	80054cc <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053cc:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <checkAktifCalisma+0x6f0>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d003      	beq.n	80053dc <checkAktifCalisma+0x62c>
 80053d4:	4b32      	ldr	r3, [pc, #200]	; (80054a0 <checkAktifCalisma+0x6f0>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d177      	bne.n	80054cc <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80053dc:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <checkAktifCalisma+0x6f4>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d073      	beq.n	80054cc <checkAktifCalisma+0x71c>
 80053e4:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <checkAktifCalisma+0x6f8>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d06f      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80053ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053f0:	4829      	ldr	r0, [pc, #164]	; (8005498 <checkAktifCalisma+0x6e8>)
 80053f2:	f003 ff77 	bl	80092e4 <HAL_GPIO_ReadPin>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d167      	bne.n	80054cc <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80053fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005400:	482a      	ldr	r0, [pc, #168]	; (80054ac <checkAktifCalisma+0x6fc>)
 8005402:	f003 ff6f 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <checkAktifCalisma+0x664>
 800540c:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <checkAktifCalisma+0x700>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d15b      	bne.n	80054cc <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005414:	2140      	movs	r1, #64	; 0x40
 8005416:	4825      	ldr	r0, [pc, #148]	; (80054ac <checkAktifCalisma+0x6fc>)
 8005418:	f003 ff64 	bl	80092e4 <HAL_GPIO_ReadPin>
 800541c:	4603      	mov	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d10f      	bne.n	8005442 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005426:	481c      	ldr	r0, [pc, #112]	; (8005498 <checkAktifCalisma+0x6e8>)
 8005428:	f003 ff5c 	bl	80092e4 <HAL_GPIO_ReadPin>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d107      	bne.n	8005442 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005436:	4818      	ldr	r0, [pc, #96]	; (8005498 <checkAktifCalisma+0x6e8>)
 8005438:	f003 ff54 	bl	80092e4 <HAL_GPIO_ReadPin>
 800543c:	4603      	mov	r3, r0
 800543e:	2b01      	cmp	r3, #1
 8005440:	d003      	beq.n	800544a <checkAktifCalisma+0x69a>
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <checkAktifCalisma+0x704>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d040      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800544a:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <checkAktifCalisma+0x708>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f083 0301 	eor.w	r3, r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d039      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005458:	4b18      	ldr	r3, [pc, #96]	; (80054bc <checkAktifCalisma+0x70c>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f083 0301 	eor.w	r3, r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d032      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005466:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <checkAktifCalisma+0x710>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f083 0301 	eor.w	r3, r3, #1
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02b      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005474:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <checkAktifCalisma+0x714>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f083 0301 	eor.w	r3, r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d024      	beq.n	80054cc <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005482:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <checkAktifCalisma+0x718>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f083 0301 	eor.w	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01d      	beq.n	80054cc <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005490:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <checkAktifCalisma+0x704>)
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e01c      	b.n	80054d2 <checkAktifCalisma+0x722>
 8005498:	40010c00 	.word	0x40010c00
 800549c:	20000245 	.word	0x20000245
 80054a0:	20000237 	.word	0x20000237
 80054a4:	2000027a 	.word	0x2000027a
 80054a8:	2000027b 	.word	0x2000027b
 80054ac:	40011000 	.word	0x40011000
 80054b0:	20000238 	.word	0x20000238
 80054b4:	2000025e 	.word	0x2000025e
 80054b8:	2000025d 	.word	0x2000025d
 80054bc:	20000261 	.word	0x20000261
 80054c0:	20000260 	.word	0x20000260
 80054c4:	2000025f 	.word	0x2000025f
 80054c8:	20000263 	.word	0x20000263
		} else {
			devmotoryukaricalisiyor=0;
 80054cc:	4b64      	ldr	r3, [pc, #400]	; (8005660 <checkAktifCalisma+0x8b0>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80054d2:	4b63      	ldr	r3, [pc, #396]	; (8005660 <checkAktifCalisma+0x8b0>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80054da:	2201      	movs	r2, #1
 80054dc:	2120      	movs	r1, #32
 80054de:	4861      	ldr	r0, [pc, #388]	; (8005664 <checkAktifCalisma+0x8b4>)
 80054e0:	f003 ff17 	bl	8009312 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80054e4:	4b60      	ldr	r3, [pc, #384]	; (8005668 <checkAktifCalisma+0x8b8>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80054ea:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <checkAktifCalisma+0x8b8>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d025      	beq.n	800553e <checkAktifCalisma+0x78e>
 80054f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f6:	485d      	ldr	r0, [pc, #372]	; (800566c <checkAktifCalisma+0x8bc>)
 80054f8:	f003 fef4 	bl	80092e4 <HAL_GPIO_ReadPin>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d007      	beq.n	8005512 <checkAktifCalisma+0x762>
 8005502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005506:	4857      	ldr	r0, [pc, #348]	; (8005664 <checkAktifCalisma+0x8b4>)
 8005508:	f003 feec 	bl	80092e4 <HAL_GPIO_ReadPin>
 800550c:	4603      	mov	r3, r0
 800550e:	2b01      	cmp	r3, #1
 8005510:	d115      	bne.n	800553e <checkAktifCalisma+0x78e>
 8005512:	4b57      	ldr	r3, [pc, #348]	; (8005670 <checkAktifCalisma+0x8c0>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d011      	beq.n	800553e <checkAktifCalisma+0x78e>
 800551a:	4b56      	ldr	r3, [pc, #344]	; (8005674 <checkAktifCalisma+0x8c4>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <checkAktifCalisma+0x78e>
 8005522:	4b55      	ldr	r3, [pc, #340]	; (8005678 <checkAktifCalisma+0x8c8>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f083 0301 	eor.w	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <checkAktifCalisma+0x78e>
			timer2=millis;
 8005530:	4b52      	ldr	r3, [pc, #328]	; (800567c <checkAktifCalisma+0x8cc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a52      	ldr	r2, [pc, #328]	; (8005680 <checkAktifCalisma+0x8d0>)
 8005536:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005538:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <checkAktifCalisma+0x8c8>)
 800553a:	2201      	movs	r2, #1
 800553c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800553e:	4b4f      	ldr	r3, [pc, #316]	; (800567c <checkAktifCalisma+0x8cc>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b4f      	ldr	r3, [pc, #316]	; (8005680 <checkAktifCalisma+0x8d0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	4a4e      	ldr	r2, [pc, #312]	; (8005684 <checkAktifCalisma+0x8d4>)
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	4293      	cmp	r3, r2
 800554e:	d303      	bcc.n	8005558 <checkAktifCalisma+0x7a8>
 8005550:	4b49      	ldr	r3, [pc, #292]	; (8005678 <checkAktifCalisma+0x8c8>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10d      	bne.n	8005574 <checkAktifCalisma+0x7c4>
 8005558:	4b45      	ldr	r3, [pc, #276]	; (8005670 <checkAktifCalisma+0x8c0>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f083 0301 	eor.w	r3, r3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <checkAktifCalisma+0x7c4>
 8005566:	4b43      	ldr	r3, [pc, #268]	; (8005674 <checkAktifCalisma+0x8c4>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	f083 0301 	eor.w	r3, r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005574:	2200      	movs	r2, #0
 8005576:	2120      	movs	r1, #32
 8005578:	483a      	ldr	r0, [pc, #232]	; (8005664 <checkAktifCalisma+0x8b4>)
 800557a:	f003 feca 	bl	8009312 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800557e:	4b3a      	ldr	r3, [pc, #232]	; (8005668 <checkAktifCalisma+0x8b8>)
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005584:	4b3c      	ldr	r3, [pc, #240]	; (8005678 <checkAktifCalisma+0x8c8>)
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800558a:	4b3f      	ldr	r3, [pc, #252]	; (8005688 <checkAktifCalisma+0x8d8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f040 8088 	bne.w	80056a4 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005594:	4b3d      	ldr	r3, [pc, #244]	; (800568c <checkAktifCalisma+0x8dc>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d003      	beq.n	80055a4 <checkAktifCalisma+0x7f4>
 800559c:	4b3b      	ldr	r3, [pc, #236]	; (800568c <checkAktifCalisma+0x8dc>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d17f      	bne.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <checkAktifCalisma+0x8c0>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d07b      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
 80055ac:	4b31      	ldr	r3, [pc, #196]	; (8005674 <checkAktifCalisma+0x8c4>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d077      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80055b4:	2140      	movs	r1, #64	; 0x40
 80055b6:	482b      	ldr	r0, [pc, #172]	; (8005664 <checkAktifCalisma+0x8b4>)
 80055b8:	f003 fe94 	bl	80092e4 <HAL_GPIO_ReadPin>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d170      	bne.n	80056a4 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80055c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055c6:	4827      	ldr	r0, [pc, #156]	; (8005664 <checkAktifCalisma+0x8b4>)
 80055c8:	f003 fe8c 	bl	80092e4 <HAL_GPIO_ReadPin>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <checkAktifCalisma+0x82a>
 80055d2:	4b2f      	ldr	r3, [pc, #188]	; (8005690 <checkAktifCalisma+0x8e0>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d164      	bne.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80055da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055de:	4823      	ldr	r0, [pc, #140]	; (800566c <checkAktifCalisma+0x8bc>)
 80055e0:	f003 fe80 	bl	80092e4 <HAL_GPIO_ReadPin>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d10f      	bne.n	800560a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80055ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055ee:	481f      	ldr	r0, [pc, #124]	; (800566c <checkAktifCalisma+0x8bc>)
 80055f0:	f003 fe78 	bl	80092e4 <HAL_GPIO_ReadPin>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d107      	bne.n	800560a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80055fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055fe:	481b      	ldr	r0, [pc, #108]	; (800566c <checkAktifCalisma+0x8bc>)
 8005600:	f003 fe70 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d003      	beq.n	8005612 <checkAktifCalisma+0x862>
 800560a:	4b22      	ldr	r3, [pc, #136]	; (8005694 <checkAktifCalisma+0x8e4>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d048      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005612:	4b21      	ldr	r3, [pc, #132]	; (8005698 <checkAktifCalisma+0x8e8>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f083 0301 	eor.w	r3, r3, #1
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d041      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005620:	4b1e      	ldr	r3, [pc, #120]	; (800569c <checkAktifCalisma+0x8ec>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f083 0301 	eor.w	r3, r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d03a      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800562e:	4b1c      	ldr	r3, [pc, #112]	; (80056a0 <checkAktifCalisma+0x8f0>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	f083 0301 	eor.w	r3, r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d033      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <checkAktifCalisma+0x8b8>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f083 0301 	eor.w	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d02c      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <checkAktifCalisma+0x8b0>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	f083 0301 	eor.w	r3, r3, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d025      	beq.n	80056a4 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <checkAktifCalisma+0x8e4>)
 800565a:	2201      	movs	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e024      	b.n	80056aa <checkAktifCalisma+0x8fa>
 8005660:	2000025e 	.word	0x2000025e
 8005664:	40011000 	.word	0x40011000
 8005668:	20000262 	.word	0x20000262
 800566c:	40010c00 	.word	0x40010c00
 8005670:	2000027a 	.word	0x2000027a
 8005674:	2000027b 	.word	0x2000027b
 8005678:	2000025a 	.word	0x2000025a
 800567c:	20000204 	.word	0x20000204
 8005680:	20000210 	.word	0x20000210
 8005684:	2000023e 	.word	0x2000023e
 8005688:	20000245 	.word	0x20000245
 800568c:	20000237 	.word	0x20000237
 8005690:	20000239 	.word	0x20000239
 8005694:	2000025f 	.word	0x2000025f
 8005698:	2000025d 	.word	0x2000025d
 800569c:	20000261 	.word	0x20000261
 80056a0:	20000260 	.word	0x20000260
		} else {
			devmotorasagicalisiyor=0;
 80056a4:	4b96      	ldr	r3, [pc, #600]	; (8005900 <checkAktifCalisma+0xb50>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80056aa:	4b95      	ldr	r3, [pc, #596]	; (8005900 <checkAktifCalisma+0xb50>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80056b2:	2201      	movs	r2, #1
 80056b4:	2110      	movs	r1, #16
 80056b6:	4893      	ldr	r0, [pc, #588]	; (8005904 <checkAktifCalisma+0xb54>)
 80056b8:	f003 fe2b 	bl	8009312 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80056bc:	4b92      	ldr	r3, [pc, #584]	; (8005908 <checkAktifCalisma+0xb58>)
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80056c2:	4b91      	ldr	r3, [pc, #580]	; (8005908 <checkAktifCalisma+0xb58>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d024      	beq.n	8005714 <checkAktifCalisma+0x964>
 80056ca:	2140      	movs	r1, #64	; 0x40
 80056cc:	488d      	ldr	r0, [pc, #564]	; (8005904 <checkAktifCalisma+0xb54>)
 80056ce:	f003 fe09 	bl	80092e4 <HAL_GPIO_ReadPin>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d007      	beq.n	80056e8 <checkAktifCalisma+0x938>
 80056d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056dc:	4889      	ldr	r0, [pc, #548]	; (8005904 <checkAktifCalisma+0xb54>)
 80056de:	f003 fe01 	bl	80092e4 <HAL_GPIO_ReadPin>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d115      	bne.n	8005714 <checkAktifCalisma+0x964>
 80056e8:	4b88      	ldr	r3, [pc, #544]	; (800590c <checkAktifCalisma+0xb5c>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d011      	beq.n	8005714 <checkAktifCalisma+0x964>
 80056f0:	4b87      	ldr	r3, [pc, #540]	; (8005910 <checkAktifCalisma+0xb60>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <checkAktifCalisma+0x964>
 80056f8:	4b86      	ldr	r3, [pc, #536]	; (8005914 <checkAktifCalisma+0xb64>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f083 0301 	eor.w	r3, r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d006      	beq.n	8005714 <checkAktifCalisma+0x964>
			timer2=millis;
 8005706:	4b84      	ldr	r3, [pc, #528]	; (8005918 <checkAktifCalisma+0xb68>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a84      	ldr	r2, [pc, #528]	; (800591c <checkAktifCalisma+0xb6c>)
 800570c:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800570e:	4b81      	ldr	r3, [pc, #516]	; (8005914 <checkAktifCalisma+0xb64>)
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005714:	4b80      	ldr	r3, [pc, #512]	; (8005918 <checkAktifCalisma+0xb68>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b80      	ldr	r3, [pc, #512]	; (800591c <checkAktifCalisma+0xb6c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	4a80      	ldr	r2, [pc, #512]	; (8005920 <checkAktifCalisma+0xb70>)
 8005720:	7812      	ldrb	r2, [r2, #0]
 8005722:	4293      	cmp	r3, r2
 8005724:	d303      	bcc.n	800572e <checkAktifCalisma+0x97e>
 8005726:	4b7b      	ldr	r3, [pc, #492]	; (8005914 <checkAktifCalisma+0xb64>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <checkAktifCalisma+0x99a>
 800572e:	4b77      	ldr	r3, [pc, #476]	; (800590c <checkAktifCalisma+0xb5c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f083 0301 	eor.w	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d106      	bne.n	800574a <checkAktifCalisma+0x99a>
 800573c:	4b74      	ldr	r3, [pc, #464]	; (8005910 <checkAktifCalisma+0xb60>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f083 0301 	eor.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800574a:	2200      	movs	r2, #0
 800574c:	2110      	movs	r1, #16
 800574e:	486d      	ldr	r0, [pc, #436]	; (8005904 <checkAktifCalisma+0xb54>)
 8005750:	f003 fddf 	bl	8009312 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005754:	4b6c      	ldr	r3, [pc, #432]	; (8005908 <checkAktifCalisma+0xb58>)
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800575a:	4b6e      	ldr	r3, [pc, #440]	; (8005914 <checkAktifCalisma+0xb64>)
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005764:	486f      	ldr	r0, [pc, #444]	; (8005924 <checkAktifCalisma+0xb74>)
 8005766:	f003 fdbd 	bl	80092e4 <HAL_GPIO_ReadPin>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d120      	bne.n	80057b2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005774:	486b      	ldr	r0, [pc, #428]	; (8005924 <checkAktifCalisma+0xb74>)
 8005776:	f003 fdb5 	bl	80092e4 <HAL_GPIO_ReadPin>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d118      	bne.n	80057b2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005780:	2104      	movs	r1, #4
 8005782:	4868      	ldr	r0, [pc, #416]	; (8005924 <checkAktifCalisma+0xb74>)
 8005784:	f003 fdae 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d111      	bne.n	80057b2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800578e:	2102      	movs	r1, #2
 8005790:	4864      	ldr	r0, [pc, #400]	; (8005924 <checkAktifCalisma+0xb74>)
 8005792:	f003 fda7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800579c:	2101      	movs	r1, #1
 800579e:	4861      	ldr	r0, [pc, #388]	; (8005924 <checkAktifCalisma+0xb74>)
 80057a0:	f003 fda0 	bl	80092e4 <HAL_GPIO_ReadPin>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <checkAktifCalisma+0xa02>
			makineStop=1;
 80057aa:	4b5f      	ldr	r3, [pc, #380]	; (8005928 <checkAktifCalisma+0xb78>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e002      	b.n	80057b8 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80057b2:	4b5d      	ldr	r3, [pc, #372]	; (8005928 <checkAktifCalisma+0xb78>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057b8:	4b5c      	ldr	r3, [pc, #368]	; (800592c <checkAktifCalisma+0xb7c>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d144      	bne.n	800584a <checkAktifCalisma+0xa9a>
 80057c0:	4b5b      	ldr	r3, [pc, #364]	; (8005930 <checkAktifCalisma+0xb80>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d003      	beq.n	80057d0 <checkAktifCalisma+0xa20>
 80057c8:	4b59      	ldr	r3, [pc, #356]	; (8005930 <checkAktifCalisma+0xb80>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d13c      	bne.n	800584a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057d0:	2180      	movs	r1, #128	; 0x80
 80057d2:	484c      	ldr	r0, [pc, #304]	; (8005904 <checkAktifCalisma+0xb54>)
 80057d4:	f003 fd86 	bl	80092e4 <HAL_GPIO_ReadPin>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <checkAktifCalisma+0xa36>
 80057de:	4b55      	ldr	r3, [pc, #340]	; (8005934 <checkAktifCalisma+0xb84>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <checkAktifCalisma+0xa4e>
 80057e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057ea:	484e      	ldr	r0, [pc, #312]	; (8005924 <checkAktifCalisma+0xb74>)
 80057ec:	f003 fd7a 	bl	80092e4 <HAL_GPIO_ReadPin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d129      	bne.n	800584a <checkAktifCalisma+0xa9a>
 80057f6:	4b4f      	ldr	r3, [pc, #316]	; (8005934 <checkAktifCalisma+0xb84>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d125      	bne.n	800584a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80057fe:	2104      	movs	r1, #4
 8005800:	4840      	ldr	r0, [pc, #256]	; (8005904 <checkAktifCalisma+0xb54>)
 8005802:	f003 fd6f 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d003      	beq.n	8005814 <checkAktifCalisma+0xa64>
 800580c:	4b4a      	ldr	r3, [pc, #296]	; (8005938 <checkAktifCalisma+0xb88>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d11a      	bne.n	800584a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005814:	2102      	movs	r1, #2
 8005816:	483b      	ldr	r0, [pc, #236]	; (8005904 <checkAktifCalisma+0xb54>)
 8005818:	f003 fd64 	bl	80092e4 <HAL_GPIO_ReadPin>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d113      	bne.n	800584a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005822:	4b46      	ldr	r3, [pc, #280]	; (800593c <checkAktifCalisma+0xb8c>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f083 0301 	eor.w	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005830:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <checkAktifCalisma+0xb78>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005838:	4b41      	ldr	r3, [pc, #260]	; (8005940 <checkAktifCalisma+0xb90>)
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <checkAktifCalisma+0xb68>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a40      	ldr	r2, [pc, #256]	; (8005944 <checkAktifCalisma+0xb94>)
 8005844:	6013      	str	r3, [r2, #0]
			bekle();
 8005846:	f7ff f935 	bl	8004ab4 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800584a:	4b33      	ldr	r3, [pc, #204]	; (8005918 <checkAktifCalisma+0xb68>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b3d      	ldr	r3, [pc, #244]	; (8005944 <checkAktifCalisma+0xb94>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	4a3c      	ldr	r2, [pc, #240]	; (8005948 <checkAktifCalisma+0xb98>)
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	4293      	cmp	r3, r2
 800585a:	d211      	bcs.n	8005880 <checkAktifCalisma+0xad0>
 800585c:	2104      	movs	r1, #4
 800585e:	4829      	ldr	r0, [pc, #164]	; (8005904 <checkAktifCalisma+0xb54>)
 8005860:	f003 fd40 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <checkAktifCalisma+0xad0>
 800586a:	4b33      	ldr	r3, [pc, #204]	; (8005938 <checkAktifCalisma+0xb88>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d006      	beq.n	8005880 <checkAktifCalisma+0xad0>
 8005872:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <checkAktifCalisma+0xb78>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	f083 0301 	eor.w	r3, r3, #1
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005880:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <checkAktifCalisma+0xb90>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005886:	4b29      	ldr	r3, [pc, #164]	; (800592c <checkAktifCalisma+0xb7c>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d160      	bne.n	8005950 <checkAktifCalisma+0xba0>
 800588e:	4b28      	ldr	r3, [pc, #160]	; (8005930 <checkAktifCalisma+0xb80>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d003      	beq.n	800589e <checkAktifCalisma+0xaee>
 8005896:	4b26      	ldr	r3, [pc, #152]	; (8005930 <checkAktifCalisma+0xb80>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d158      	bne.n	8005950 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800589e:	2104      	movs	r1, #4
 80058a0:	4818      	ldr	r0, [pc, #96]	; (8005904 <checkAktifCalisma+0xb54>)
 80058a2:	f003 fd1f 	bl	80092e4 <HAL_GPIO_ReadPin>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d003      	beq.n	80058b4 <checkAktifCalisma+0xb04>
 80058ac:	4b22      	ldr	r3, [pc, #136]	; (8005938 <checkAktifCalisma+0xb88>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d14d      	bne.n	8005950 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058b4:	2102      	movs	r1, #2
 80058b6:	4813      	ldr	r0, [pc, #76]	; (8005904 <checkAktifCalisma+0xb54>)
 80058b8:	f003 fd14 	bl	80092e4 <HAL_GPIO_ReadPin>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d146      	bne.n	8005950 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058c2:	2180      	movs	r1, #128	; 0x80
 80058c4:	480f      	ldr	r0, [pc, #60]	; (8005904 <checkAktifCalisma+0xb54>)
 80058c6:	f003 fd0d 	bl	80092e4 <HAL_GPIO_ReadPin>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <checkAktifCalisma+0xb28>
 80058d0:	4b18      	ldr	r3, [pc, #96]	; (8005934 <checkAktifCalisma+0xb84>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <checkAktifCalisma+0xb40>
 80058d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058dc:	4811      	ldr	r0, [pc, #68]	; (8005924 <checkAktifCalisma+0xb74>)
 80058de:	f003 fd01 	bl	80092e4 <HAL_GPIO_ReadPin>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d133      	bne.n	8005950 <checkAktifCalisma+0xba0>
 80058e8:	4b12      	ldr	r3, [pc, #72]	; (8005934 <checkAktifCalisma+0xb84>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d12f      	bne.n	8005950 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80058f0:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <checkAktifCalisma+0xb78>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d02b      	beq.n	8005950 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80058f8:	4b14      	ldr	r3, [pc, #80]	; (800594c <checkAktifCalisma+0xb9c>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e02a      	b.n	8005956 <checkAktifCalisma+0xba6>
 8005900:	2000025f 	.word	0x2000025f
 8005904:	40011000 	.word	0x40011000
 8005908:	20000263 	.word	0x20000263
 800590c:	2000027a 	.word	0x2000027a
 8005910:	2000027b 	.word	0x2000027b
 8005914:	2000025b 	.word	0x2000025b
 8005918:	20000204 	.word	0x20000204
 800591c:	20000210 	.word	0x20000210
 8005920:	2000023e 	.word	0x2000023e
 8005924:	40010c00 	.word	0x40010c00
 8005928:	2000026a 	.word	0x2000026a
 800592c:	20000231 	.word	0x20000231
 8005930:	20000230 	.word	0x20000230
 8005934:	20000234 	.word	0x20000234
 8005938:	2000022e 	.word	0x2000022e
 800593c:	20000257 	.word	0x20000257
 8005940:	2000026b 	.word	0x2000026b
 8005944:	20000208 	.word	0x20000208
 8005948:	20000241 	.word	0x20000241
 800594c:	2000026c 	.word	0x2000026c
		} else {
			kapi1butonkontrol=0;
 8005950:	4b8b      	ldr	r3, [pc, #556]	; (8005b80 <checkAktifCalisma+0xdd0>)
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005956:	4b8b      	ldr	r3, [pc, #556]	; (8005b84 <checkAktifCalisma+0xdd4>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d121      	bne.n	80059a2 <checkAktifCalisma+0xbf2>
 800595e:	4b8a      	ldr	r3, [pc, #552]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d003      	beq.n	800596e <checkAktifCalisma+0xbbe>
 8005966:	4b88      	ldr	r3, [pc, #544]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d119      	bne.n	80059a2 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800596e:	2104      	movs	r1, #4
 8005970:	4886      	ldr	r0, [pc, #536]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005972:	f003 fcb7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005976:	4603      	mov	r3, r0
 8005978:	2b01      	cmp	r3, #1
 800597a:	d003      	beq.n	8005984 <checkAktifCalisma+0xbd4>
 800597c:	4b84      	ldr	r3, [pc, #528]	; (8005b90 <checkAktifCalisma+0xde0>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10e      	bne.n	80059a2 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005984:	2102      	movs	r1, #2
 8005986:	4881      	ldr	r0, [pc, #516]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005988:	f003 fcac 	bl	80092e4 <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005992:	4b80      	ldr	r3, [pc, #512]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800599a:	4b7f      	ldr	r3, [pc, #508]	; (8005b98 <checkAktifCalisma+0xde8>)
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e002      	b.n	80059a8 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80059a2:	4b7d      	ldr	r3, [pc, #500]	; (8005b98 <checkAktifCalisma+0xde8>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80059a8:	4b75      	ldr	r3, [pc, #468]	; (8005b80 <checkAktifCalisma+0xdd0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <checkAktifCalisma+0xc10>
 80059b0:	4b79      	ldr	r3, [pc, #484]	; (8005b98 <checkAktifCalisma+0xde8>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <checkAktifCalisma+0xc10>
 80059b8:	4b78      	ldr	r3, [pc, #480]	; (8005b9c <checkAktifCalisma+0xdec>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059c0:	2201      	movs	r2, #1
 80059c2:	2180      	movs	r1, #128	; 0x80
 80059c4:	4876      	ldr	r0, [pc, #472]	; (8005ba0 <checkAktifCalisma+0xdf0>)
 80059c6:	f003 fca4 	bl	8009312 <HAL_GPIO_WritePin>
 80059ca:	e004      	b.n	80059d6 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059cc:	2200      	movs	r2, #0
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	4873      	ldr	r0, [pc, #460]	; (8005ba0 <checkAktifCalisma+0xdf0>)
 80059d2:	f003 fc9e 	bl	8009312 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059d6:	4b73      	ldr	r3, [pc, #460]	; (8005ba4 <checkAktifCalisma+0xdf4>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d141      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
 80059de:	4b6a      	ldr	r3, [pc, #424]	; (8005b88 <checkAktifCalisma+0xdd8>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d003      	beq.n	80059ee <checkAktifCalisma+0xc3e>
 80059e6:	4b68      	ldr	r3, [pc, #416]	; (8005b88 <checkAktifCalisma+0xdd8>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d139      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059f2:	4866      	ldr	r0, [pc, #408]	; (8005b8c <checkAktifCalisma+0xddc>)
 80059f4:	f003 fc76 	bl	80092e4 <HAL_GPIO_ReadPin>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <checkAktifCalisma+0xc56>
 80059fe:	4b6a      	ldr	r3, [pc, #424]	; (8005ba8 <checkAktifCalisma+0xdf8>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <checkAktifCalisma+0xc6e>
 8005a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a0a:	4868      	ldr	r0, [pc, #416]	; (8005bac <checkAktifCalisma+0xdfc>)
 8005a0c:	f003 fc6a 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d125      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
 8005a16:	4b64      	ldr	r3, [pc, #400]	; (8005ba8 <checkAktifCalisma+0xdf8>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d121      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a1e:	2102      	movs	r1, #2
 8005a20:	485a      	ldr	r0, [pc, #360]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005a22:	f003 fc5f 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d11a      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	4857      	ldr	r0, [pc, #348]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005a30:	f003 fc58 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d113      	bne.n	8005a62 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005a3a:	4b56      	ldr	r3, [pc, #344]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00f      	beq.n	8005a62 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005a42:	4b5b      	ldr	r3, [pc, #364]	; (8005bb0 <checkAktifCalisma+0xe00>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f083 0301 	eor.w	r3, r3, #1
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005a50:	4b58      	ldr	r3, [pc, #352]	; (8005bb4 <checkAktifCalisma+0xe04>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a56:	4b58      	ldr	r3, [pc, #352]	; (8005bb8 <checkAktifCalisma+0xe08>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a58      	ldr	r2, [pc, #352]	; (8005bbc <checkAktifCalisma+0xe0c>)
 8005a5c:	6013      	str	r3, [r2, #0]
			bekle();
 8005a5e:	f7ff f829 	bl	8004ab4 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005a62:	4b55      	ldr	r3, [pc, #340]	; (8005bb8 <checkAktifCalisma+0xe08>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b55      	ldr	r3, [pc, #340]	; (8005bbc <checkAktifCalisma+0xe0c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	4a54      	ldr	r2, [pc, #336]	; (8005bc0 <checkAktifCalisma+0xe10>)
 8005a6e:	7812      	ldrb	r2, [r2, #0]
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d20d      	bcs.n	8005a90 <checkAktifCalisma+0xce0>
 8005a74:	2102      	movs	r1, #2
 8005a76:	4845      	ldr	r0, [pc, #276]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005a78:	f003 fc34 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <checkAktifCalisma+0xce0>
 8005a82:	4b44      	ldr	r3, [pc, #272]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f083 0301 	eor.w	r3, r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005a90:	4b48      	ldr	r3, [pc, #288]	; (8005bb4 <checkAktifCalisma+0xe04>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a96:	4b43      	ldr	r3, [pc, #268]	; (8005ba4 <checkAktifCalisma+0xdf4>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d135      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
 8005a9e:	4b3a      	ldr	r3, [pc, #232]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d003      	beq.n	8005aae <checkAktifCalisma+0xcfe>
 8005aa6:	4b38      	ldr	r3, [pc, #224]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d12d      	bne.n	8005b0a <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ab2:	4836      	ldr	r0, [pc, #216]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005ab4:	f003 fc16 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <checkAktifCalisma+0xd16>
 8005abe:	4b3a      	ldr	r3, [pc, #232]	; (8005ba8 <checkAktifCalisma+0xdf8>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <checkAktifCalisma+0xd2e>
 8005ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005aca:	4838      	ldr	r0, [pc, #224]	; (8005bac <checkAktifCalisma+0xdfc>)
 8005acc:	f003 fc0a 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d119      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
 8005ad6:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <checkAktifCalisma+0xdf8>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d115      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ade:	2102      	movs	r1, #2
 8005ae0:	482a      	ldr	r0, [pc, #168]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005ae2:	f003 fbff 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d10e      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005aec:	2104      	movs	r1, #4
 8005aee:	4827      	ldr	r0, [pc, #156]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005af0:	f003 fbf8 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b02:	4b30      	ldr	r3, [pc, #192]	; (8005bc4 <checkAktifCalisma+0xe14>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e002      	b.n	8005b10 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b0a:	4b2e      	ldr	r3, [pc, #184]	; (8005bc4 <checkAktifCalisma+0xe14>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b10:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <checkAktifCalisma+0xdf4>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d11d      	bne.n	8005b54 <checkAktifCalisma+0xda4>
 8005b18:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d003      	beq.n	8005b28 <checkAktifCalisma+0xd78>
 8005b20:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <checkAktifCalisma+0xdd8>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d115      	bne.n	8005b54 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b28:	2102      	movs	r1, #2
 8005b2a:	4818      	ldr	r0, [pc, #96]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005b2c:	f003 fbda 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10e      	bne.n	8005b54 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b36:	2104      	movs	r1, #4
 8005b38:	4814      	ldr	r0, [pc, #80]	; (8005b8c <checkAktifCalisma+0xddc>)
 8005b3a:	f003 fbd3 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d107      	bne.n	8005b54 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005b44:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <checkAktifCalisma+0xde4>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005b4c:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <checkAktifCalisma+0xe18>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005b54:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <checkAktifCalisma+0xe18>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005b5a:	4b1a      	ldr	r3, [pc, #104]	; (8005bc4 <checkAktifCalisma+0xe14>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d107      	bne.n	8005b72 <checkAktifCalisma+0xdc2>
 8005b62:	4b19      	ldr	r3, [pc, #100]	; (8005bc8 <checkAktifCalisma+0xe18>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <checkAktifCalisma+0xdc2>
 8005b6a:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <checkAktifCalisma+0xe04>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d02c      	beq.n	8005bcc <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005b72:	2201      	movs	r2, #1
 8005b74:	2140      	movs	r1, #64	; 0x40
 8005b76:	480a      	ldr	r0, [pc, #40]	; (8005ba0 <checkAktifCalisma+0xdf0>)
 8005b78:	f003 fbcb 	bl	8009312 <HAL_GPIO_WritePin>
 8005b7c:	e02b      	b.n	8005bd6 <checkAktifCalisma+0xe26>
 8005b7e:	bf00      	nop
 8005b80:	2000026c 	.word	0x2000026c
 8005b84:	20000231 	.word	0x20000231
 8005b88:	20000230 	.word	0x20000230
 8005b8c:	40011000 	.word	0x40011000
 8005b90:	2000022e 	.word	0x2000022e
 8005b94:	2000026a 	.word	0x2000026a
 8005b98:	2000026d 	.word	0x2000026d
 8005b9c:	2000026b 	.word	0x2000026b
 8005ba0:	40010800 	.word	0x40010800
 8005ba4:	20000232 	.word	0x20000232
 8005ba8:	20000234 	.word	0x20000234
 8005bac:	40010c00 	.word	0x40010c00
 8005bb0:	20000257 	.word	0x20000257
 8005bb4:	2000026e 	.word	0x2000026e
 8005bb8:	20000204 	.word	0x20000204
 8005bbc:	20000208 	.word	0x20000208
 8005bc0:	20000242 	.word	0x20000242
 8005bc4:	2000026f 	.word	0x2000026f
 8005bc8:	20000270 	.word	0x20000270
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2140      	movs	r1, #64	; 0x40
 8005bd0:	488d      	ldr	r0, [pc, #564]	; (8005e08 <checkAktifCalisma+0x1058>)
 8005bd2:	f003 fb9e 	bl	8009312 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005bd6:	4b8d      	ldr	r3, [pc, #564]	; (8005e0c <checkAktifCalisma+0x105c>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <checkAktifCalisma+0xe36>
 8005bde:	4b8b      	ldr	r3, [pc, #556]	; (8005e0c <checkAktifCalisma+0x105c>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d115      	bne.n	8005c12 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005be6:	2104      	movs	r1, #4
 8005be8:	4889      	ldr	r0, [pc, #548]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005bea:	f003 fb7b 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d003      	beq.n	8005bfc <checkAktifCalisma+0xe4c>
 8005bf4:	4b87      	ldr	r3, [pc, #540]	; (8005e14 <checkAktifCalisma+0x1064>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005bfc:	2102      	movs	r1, #2
 8005bfe:	4884      	ldr	r0, [pc, #528]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005c00:	f003 fb70 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c0a:	4b83      	ldr	r3, [pc, #524]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	e002      	b.n	8005c18 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c12:	4b81      	ldr	r3, [pc, #516]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c18:	4b7c      	ldr	r3, [pc, #496]	; (8005e0c <checkAktifCalisma+0x105c>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d003      	beq.n	8005c28 <checkAktifCalisma+0xe78>
 8005c20:	4b7a      	ldr	r3, [pc, #488]	; (8005e0c <checkAktifCalisma+0x105c>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d111      	bne.n	8005c4c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c28:	2102      	movs	r1, #2
 8005c2a:	4879      	ldr	r0, [pc, #484]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005c2c:	f003 fb5a 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10a      	bne.n	8005c4c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c36:	2104      	movs	r1, #4
 8005c38:	4875      	ldr	r0, [pc, #468]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005c3a:	f003 fb53 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005c44:	4b75      	ldr	r3, [pc, #468]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005c4c:	4b73      	ldr	r3, [pc, #460]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005c52:	4b71      	ldr	r3, [pc, #452]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00f      	beq.n	8005c7a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005c5a:	4b71      	ldr	r3, [pc, #452]	; (8005e20 <checkAktifCalisma+0x1070>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d10b      	bne.n	8005c7a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c66:	486f      	ldr	r0, [pc, #444]	; (8005e24 <checkAktifCalisma+0x1074>)
 8005c68:	f003 fb3c 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005c72:	4b6d      	ldr	r3, [pc, #436]	; (8005e28 <checkAktifCalisma+0x1078>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e002      	b.n	8005c80 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005c7a:	4b6b      	ldr	r3, [pc, #428]	; (8005e28 <checkAktifCalisma+0x1078>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005c80:	4b66      	ldr	r3, [pc, #408]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00f      	beq.n	8005ca8 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005c88:	4b65      	ldr	r3, [pc, #404]	; (8005e20 <checkAktifCalisma+0x1070>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10b      	bne.n	8005ca8 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005c90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c94:	4863      	ldr	r0, [pc, #396]	; (8005e24 <checkAktifCalisma+0x1074>)
 8005c96:	f003 fb25 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d103      	bne.n	8005ca8 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005ca0:	4b62      	ldr	r3, [pc, #392]	; (8005e2c <checkAktifCalisma+0x107c>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005ca8:	4b60      	ldr	r3, [pc, #384]	; (8005e2c <checkAktifCalisma+0x107c>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cae:	4b60      	ldr	r3, [pc, #384]	; (8005e30 <checkAktifCalisma+0x1080>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d137      	bne.n	8005d26 <checkAktifCalisma+0xf76>
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d003      	beq.n	8005cc6 <checkAktifCalisma+0xf16>
 8005cbe:	4b5d      	ldr	r3, [pc, #372]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d12f      	bne.n	8005d26 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cc6:	4b54      	ldr	r3, [pc, #336]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <checkAktifCalisma+0xf26>
 8005cce:	4b53      	ldr	r3, [pc, #332]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d027      	beq.n	8005d26 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cda:	484d      	ldr	r0, [pc, #308]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005cdc:	f003 fb02 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <checkAktifCalisma+0xf3e>
 8005ce6:	4b4e      	ldr	r3, [pc, #312]	; (8005e20 <checkAktifCalisma+0x1070>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005cee:	4b4e      	ldr	r3, [pc, #312]	; (8005e28 <checkAktifCalisma+0x1078>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <checkAktifCalisma+0xf4e>
 8005cf6:	4b4d      	ldr	r3, [pc, #308]	; (8005e2c <checkAktifCalisma+0x107c>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d013      	beq.n	8005d26 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005cfe:	4b4e      	ldr	r3, [pc, #312]	; (8005e38 <checkAktifCalisma+0x1088>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d06:	4b4d      	ldr	r3, [pc, #308]	; (8005e3c <checkAktifCalisma+0x108c>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f083 0301 	eor.w	r3, r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d14:	4b4a      	ldr	r3, [pc, #296]	; (8005e40 <checkAktifCalisma+0x1090>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d1a:	4b4a      	ldr	r3, [pc, #296]	; (8005e44 <checkAktifCalisma+0x1094>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a4a      	ldr	r2, [pc, #296]	; (8005e48 <checkAktifCalisma+0x1098>)
 8005d20:	6013      	str	r3, [r2, #0]
			bekle();
 8005d22:	f7fe fec7 	bl	8004ab4 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005d26:	4b47      	ldr	r3, [pc, #284]	; (8005e44 <checkAktifCalisma+0x1094>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b47      	ldr	r3, [pc, #284]	; (8005e48 <checkAktifCalisma+0x1098>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	4a46      	ldr	r2, [pc, #280]	; (8005e4c <checkAktifCalisma+0x109c>)
 8005d32:	7812      	ldrb	r2, [r2, #0]
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d214      	bcs.n	8005d62 <checkAktifCalisma+0xfb2>
 8005d38:	4b37      	ldr	r3, [pc, #220]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	f083 0301 	eor.w	r3, r3, #1
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d006      	beq.n	8005d54 <checkAktifCalisma+0xfa4>
 8005d46:	4b35      	ldr	r3, [pc, #212]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f083 0301 	eor.w	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <checkAktifCalisma+0xfb2>
 8005d54:	4b38      	ldr	r3, [pc, #224]	; (8005e38 <checkAktifCalisma+0x1088>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005d62:	4b37      	ldr	r3, [pc, #220]	; (8005e40 <checkAktifCalisma+0x1090>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d68:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <checkAktifCalisma+0x1080>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d12b      	bne.n	8005dc8 <checkAktifCalisma+0x1018>
 8005d70:	4b30      	ldr	r3, [pc, #192]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d003      	beq.n	8005d80 <checkAktifCalisma+0xfd0>
 8005d78:	4b2e      	ldr	r3, [pc, #184]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d123      	bne.n	8005dc8 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <checkAktifCalisma+0xfe0>
 8005d88:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01b      	beq.n	8005dc8 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d94:	481e      	ldr	r0, [pc, #120]	; (8005e10 <checkAktifCalisma+0x1060>)
 8005d96:	f003 faa5 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <checkAktifCalisma+0xff8>
 8005da0:	4b1f      	ldr	r3, [pc, #124]	; (8005e20 <checkAktifCalisma+0x1070>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005da8:	4b1f      	ldr	r3, [pc, #124]	; (8005e28 <checkAktifCalisma+0x1078>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <checkAktifCalisma+0x1008>
 8005db0:	4b1e      	ldr	r3, [pc, #120]	; (8005e2c <checkAktifCalisma+0x107c>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005db8:	4b1f      	ldr	r3, [pc, #124]	; (8005e38 <checkAktifCalisma+0x1088>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005dc0:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <checkAktifCalisma+0x10a0>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e002      	b.n	8005dce <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005dc8:	4b21      	ldr	r3, [pc, #132]	; (8005e50 <checkAktifCalisma+0x10a0>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005dce:	4b18      	ldr	r3, [pc, #96]	; (8005e30 <checkAktifCalisma+0x1080>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d140      	bne.n	8005e58 <checkAktifCalisma+0x10a8>
 8005dd6:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d003      	beq.n	8005de6 <checkAktifCalisma+0x1036>
 8005dde:	4b15      	ldr	r3, [pc, #84]	; (8005e34 <checkAktifCalisma+0x1084>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d138      	bne.n	8005e58 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <checkAktifCalisma+0x1068>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <checkAktifCalisma+0x1046>
 8005dee:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <checkAktifCalisma+0x106c>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d030      	beq.n	8005e58 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005df6:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <checkAktifCalisma+0x1088>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d02c      	beq.n	8005e58 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005dfe:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <checkAktifCalisma+0x10a4>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e02b      	b.n	8005e5e <checkAktifCalisma+0x10ae>
 8005e06:	bf00      	nop
 8005e08:	40010800 	.word	0x40010800
 8005e0c:	20000235 	.word	0x20000235
 8005e10:	40011000 	.word	0x40011000
 8005e14:	2000022e 	.word	0x2000022e
 8005e18:	20000274 	.word	0x20000274
 8005e1c:	20000275 	.word	0x20000275
 8005e20:	20000234 	.word	0x20000234
 8005e24:	40010c00 	.word	0x40010c00
 8005e28:	20000284 	.word	0x20000284
 8005e2c:	20000285 	.word	0x20000285
 8005e30:	20000233 	.word	0x20000233
 8005e34:	20000230 	.word	0x20000230
 8005e38:	2000026a 	.word	0x2000026a
 8005e3c:	20000257 	.word	0x20000257
 8005e40:	20000271 	.word	0x20000271
 8005e44:	20000204 	.word	0x20000204
 8005e48:	20000208 	.word	0x20000208
 8005e4c:	20000243 	.word	0x20000243
 8005e50:	20000272 	.word	0x20000272
 8005e54:	20000273 	.word	0x20000273
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005e58:	4b8b      	ldr	r3, [pc, #556]	; (8006088 <checkAktifCalisma+0x12d8>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005e5e:	4b8b      	ldr	r3, [pc, #556]	; (800608c <checkAktifCalisma+0x12dc>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d107      	bne.n	8005e76 <checkAktifCalisma+0x10c6>
 8005e66:	4b8a      	ldr	r3, [pc, #552]	; (8006090 <checkAktifCalisma+0x12e0>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <checkAktifCalisma+0x10c6>
 8005e6e:	4b86      	ldr	r3, [pc, #536]	; (8006088 <checkAktifCalisma+0x12d8>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005e76:	2201      	movs	r2, #1
 8005e78:	2120      	movs	r1, #32
 8005e7a:	4886      	ldr	r0, [pc, #536]	; (8006094 <checkAktifCalisma+0x12e4>)
 8005e7c:	f003 fa49 	bl	8009312 <HAL_GPIO_WritePin>
 8005e80:	e004      	b.n	8005e8c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e82:	2200      	movs	r2, #0
 8005e84:	2120      	movs	r1, #32
 8005e86:	4883      	ldr	r0, [pc, #524]	; (8006094 <checkAktifCalisma+0x12e4>)
 8005e88:	f003 fa43 	bl	8009312 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005e8c:	4b82      	ldr	r3, [pc, #520]	; (8006098 <checkAktifCalisma+0x12e8>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00e      	beq.n	8005eb2 <checkAktifCalisma+0x1102>
 8005e94:	2102      	movs	r1, #2
 8005e96:	4881      	ldr	r0, [pc, #516]	; (800609c <checkAktifCalisma+0x12ec>)
 8005e98:	f003 fa24 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <checkAktifCalisma+0x1102>
 8005ea2:	4b7f      	ldr	r3, [pc, #508]	; (80060a0 <checkAktifCalisma+0x12f0>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <checkAktifCalisma+0x1102>
 8005eaa:	4b7e      	ldr	r3, [pc, #504]	; (80060a4 <checkAktifCalisma+0x12f4>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d112      	bne.n	8005ed8 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005eb2:	4b7d      	ldr	r3, [pc, #500]	; (80060a8 <checkAktifCalisma+0x12f8>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d066      	beq.n	8005f88 <checkAktifCalisma+0x11d8>
 8005eba:	2104      	movs	r1, #4
 8005ebc:	4877      	ldr	r0, [pc, #476]	; (800609c <checkAktifCalisma+0x12ec>)
 8005ebe:	f003 fa11 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d15f      	bne.n	8005f88 <checkAktifCalisma+0x11d8>
 8005ec8:	4b75      	ldr	r3, [pc, #468]	; (80060a0 <checkAktifCalisma+0x12f0>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d05b      	beq.n	8005f88 <checkAktifCalisma+0x11d8>
 8005ed0:	4b74      	ldr	r3, [pc, #464]	; (80060a4 <checkAktifCalisma+0x12f4>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d057      	beq.n	8005f88 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005ed8:	4b74      	ldr	r3, [pc, #464]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	4b72      	ldr	r3, [pc, #456]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005ee2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005ee4:	4b71      	ldr	r3, [pc, #452]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b09      	cmp	r3, #9
 8005eea:	d908      	bls.n	8005efe <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005eec:	4b6f      	ldr	r3, [pc, #444]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005ef2:	4b6f      	ldr	r3, [pc, #444]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	4b6d      	ldr	r3, [pc, #436]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005efc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005efe:	4b6c      	ldr	r3, [pc, #432]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b09      	cmp	r3, #9
 8005f04:	d908      	bls.n	8005f18 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f06:	4b6a      	ldr	r3, [pc, #424]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f0c:	4b69      	ldr	r3, [pc, #420]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	4b67      	ldr	r3, [pc, #412]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f16:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f18:	4b66      	ldr	r3, [pc, #408]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b09      	cmp	r3, #9
 8005f1e:	d908      	bls.n	8005f32 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005f20:	4b64      	ldr	r3, [pc, #400]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005f26:	4b64      	ldr	r3, [pc, #400]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	4b62      	ldr	r3, [pc, #392]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f30:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005f32:	4b61      	ldr	r3, [pc, #388]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b09      	cmp	r3, #9
 8005f38:	d908      	bls.n	8005f4c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005f3a:	4b5f      	ldr	r3, [pc, #380]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005f40:	4b5e      	ldr	r3, [pc, #376]	; (80060bc <checkAktifCalisma+0x130c>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	3301      	adds	r3, #1
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	4b5c      	ldr	r3, [pc, #368]	; (80060bc <checkAktifCalisma+0x130c>)
 8005f4a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005f4c:	4b5b      	ldr	r3, [pc, #364]	; (80060bc <checkAktifCalisma+0x130c>)
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	4b5b      	ldr	r3, [pc, #364]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f52:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005f56:	4b58      	ldr	r3, [pc, #352]	; (80060b8 <checkAktifCalisma+0x1308>)
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	4b59      	ldr	r3, [pc, #356]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f5c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005f5e:	4b55      	ldr	r3, [pc, #340]	; (80060b4 <checkAktifCalisma+0x1304>)
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	4b57      	ldr	r3, [pc, #348]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f64:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005f66:	4b52      	ldr	r3, [pc, #328]	; (80060b0 <checkAktifCalisma+0x1300>)
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	4b55      	ldr	r3, [pc, #340]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f6c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005f6e:	4b4f      	ldr	r3, [pc, #316]	; (80060ac <checkAktifCalisma+0x12fc>)
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	4b53      	ldr	r3, [pc, #332]	; (80060c0 <checkAktifCalisma+0x1310>)
 8005f74:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005f76:	4b53      	ldr	r3, [pc, #332]	; (80060c4 <checkAktifCalisma+0x1314>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005f7c:	4b46      	ldr	r3, [pc, #280]	; (8006098 <checkAktifCalisma+0x12e8>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005f82:	4b49      	ldr	r3, [pc, #292]	; (80060a8 <checkAktifCalisma+0x12f8>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f8c:	484e      	ldr	r0, [pc, #312]	; (80060c8 <checkAktifCalisma+0x1318>)
 8005f8e:	f003 f9a9 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d016      	beq.n	8005fc6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f9c:	484a      	ldr	r0, [pc, #296]	; (80060c8 <checkAktifCalisma+0x1318>)
 8005f9e:	f003 f9a1 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00e      	beq.n	8005fc6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fac:	4846      	ldr	r0, [pc, #280]	; (80060c8 <checkAktifCalisma+0x1318>)
 8005fae:	f003 f999 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d006      	beq.n	8005fc6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	4838      	ldr	r0, [pc, #224]	; (800609c <checkAktifCalisma+0x12ec>)
 8005fbc:	f003 f992 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <checkAktifCalisma+0x121e>
			startBasili=1;
 8005fc6:	4b41      	ldr	r3, [pc, #260]	; (80060cc <checkAktifCalisma+0x131c>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	e002      	b.n	8005fd4 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005fce:	4b3f      	ldr	r3, [pc, #252]	; (80060cc <checkAktifCalisma+0x131c>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005fd4:	4b3d      	ldr	r3, [pc, #244]	; (80060cc <checkAktifCalisma+0x131c>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d016      	beq.n	800600a <checkAktifCalisma+0x125a>
 8005fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fe0:	4839      	ldr	r0, [pc, #228]	; (80060c8 <checkAktifCalisma+0x1318>)
 8005fe2:	f003 f97f 	bl	80092e4 <HAL_GPIO_ReadPin>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d10e      	bne.n	800600a <checkAktifCalisma+0x125a>
			hataVar=1;
 8005fec:	4b38      	ldr	r3, [pc, #224]	; (80060d0 <checkAktifCalisma+0x1320>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	f7fa fd7c 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	f7fa fd1f 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 8005ffe:	f001 fc31 	bl	8007864 <convertAndSendData>
			acilstophatasi=1;
 8006002:	4b34      	ldr	r3, [pc, #208]	; (80060d4 <checkAktifCalisma+0x1324>)
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e018      	b.n	800603c <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800600a:	4b32      	ldr	r3, [pc, #200]	; (80060d4 <checkAktifCalisma+0x1324>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d014      	beq.n	800603c <checkAktifCalisma+0x128c>
 8006012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006016:	482c      	ldr	r0, [pc, #176]	; (80060c8 <checkAktifCalisma+0x1318>)
 8006018:	f003 f964 	bl	80092e4 <HAL_GPIO_ReadPin>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10c      	bne.n	800603c <checkAktifCalisma+0x128c>
 8006022:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <checkAktifCalisma+0x131c>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f083 0301 	eor.w	r3, r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006030:	4b28      	ldr	r3, [pc, #160]	; (80060d4 <checkAktifCalisma+0x1324>)
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006036:	2001      	movs	r0, #1
 8006038:	f7fe fce8 	bl	8004a0c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800603c:	4b26      	ldr	r3, [pc, #152]	; (80060d8 <checkAktifCalisma+0x1328>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	f083 0301 	eor.w	r3, r3, #1
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d04e      	beq.n	80060e8 <checkAktifCalisma+0x1338>
 800604a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800604e:	481e      	ldr	r0, [pc, #120]	; (80060c8 <checkAktifCalisma+0x1318>)
 8006050:	f003 f948 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <checkAktifCalisma+0x12b2>
 800605a:	4b20      	ldr	r3, [pc, #128]	; (80060dc <checkAktifCalisma+0x132c>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d042      	beq.n	80060e8 <checkAktifCalisma+0x1338>
 8006062:	4b1f      	ldr	r3, [pc, #124]	; (80060e0 <checkAktifCalisma+0x1330>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d13e      	bne.n	80060e8 <checkAktifCalisma+0x1338>
			hataVar=1;
 800606a:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <checkAktifCalisma+0x1320>)
 800606c:	2201      	movs	r2, #1
 800606e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006070:	2002      	movs	r0, #2
 8006072:	f7fa fd3d 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006076:	2002      	movs	r0, #2
 8006078:	f7fa fce0 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 800607c:	f001 fbf2 	bl	8007864 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006080:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <checkAktifCalisma+0x1334>)
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e047      	b.n	8006118 <checkAktifCalisma+0x1368>
 8006088:	20000273 	.word	0x20000273
 800608c:	20000272 	.word	0x20000272
 8006090:	20000271 	.word	0x20000271
 8006094:	40010800 	.word	0x40010800
 8006098:	20000267 	.word	0x20000267
 800609c:	40011000 	.word	0x40011000
 80060a0:	2000022e 	.word	0x2000022e
 80060a4:	2000026a 	.word	0x2000026a
 80060a8:	20000268 	.word	0x20000268
 80060ac:	20000225 	.word	0x20000225
 80060b0:	20000226 	.word	0x20000226
 80060b4:	20000000 	.word	0x20000000
 80060b8:	20000001 	.word	0x20000001
 80060bc:	20000227 	.word	0x20000227
 80060c0:	2000012c 	.word	0x2000012c
 80060c4:	20000254 	.word	0x20000254
 80060c8:	40010c00 	.word	0x40010c00
 80060cc:	20000276 	.word	0x20000276
 80060d0:	2000027d 	.word	0x2000027d
 80060d4:	20000278 	.word	0x20000278
 80060d8:	2000027f 	.word	0x2000027f
 80060dc:	20000289 	.word	0x20000289
 80060e0:	2000022c 	.word	0x2000022c
 80060e4:	20000279 	.word	0x20000279
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80060e8:	4b9b      	ldr	r3, [pc, #620]	; (8006358 <checkAktifCalisma+0x15a8>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d013      	beq.n	8006118 <checkAktifCalisma+0x1368>
 80060f0:	4b9a      	ldr	r3, [pc, #616]	; (800635c <checkAktifCalisma+0x15ac>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00f      	beq.n	8006118 <checkAktifCalisma+0x1368>
 80060f8:	4b99      	ldr	r3, [pc, #612]	; (8006360 <checkAktifCalisma+0x15b0>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f083 0301 	eor.w	r3, r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006106:	4b94      	ldr	r3, [pc, #592]	; (8006358 <checkAktifCalisma+0x15a8>)
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 800610c:	4b95      	ldr	r3, [pc, #596]	; (8006364 <checkAktifCalisma+0x15b4>)
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006112:	2002      	movs	r0, #2
 8006114:	f7fe fc7a 	bl	8004a0c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006118:	4b93      	ldr	r3, [pc, #588]	; (8006368 <checkAktifCalisma+0x15b8>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d11e      	bne.n	800615e <checkAktifCalisma+0x13ae>
 8006120:	4b92      	ldr	r3, [pc, #584]	; (800636c <checkAktifCalisma+0x15bc>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d11a      	bne.n	800615e <checkAktifCalisma+0x13ae>
 8006128:	4b91      	ldr	r3, [pc, #580]	; (8006370 <checkAktifCalisma+0x15c0>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d016      	beq.n	800615e <checkAktifCalisma+0x13ae>
 8006130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006134:	488f      	ldr	r0, [pc, #572]	; (8006374 <checkAktifCalisma+0x15c4>)
 8006136:	f003 f8d5 	bl	80092e4 <HAL_GPIO_ReadPin>
 800613a:	4603      	mov	r3, r0
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10e      	bne.n	800615e <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006140:	4b8d      	ldr	r3, [pc, #564]	; (8006378 <checkAktifCalisma+0x15c8>)
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006146:	2003      	movs	r0, #3
 8006148:	f7fa fcd2 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(3);
 800614c:	2003      	movs	r0, #3
 800614e:	f7fa fc75 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 8006152:	f001 fb87 	bl	8007864 <convertAndSendData>
			basinchatasi=1;
 8006156:	4b89      	ldr	r3, [pc, #548]	; (800637c <checkAktifCalisma+0x15cc>)
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e015      	b.n	800618a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800615e:	4b87      	ldr	r3, [pc, #540]	; (800637c <checkAktifCalisma+0x15cc>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d011      	beq.n	800618a <checkAktifCalisma+0x13da>
 8006166:	4b80      	ldr	r3, [pc, #512]	; (8006368 <checkAktifCalisma+0x15b8>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10d      	bne.n	800618a <checkAktifCalisma+0x13da>
 800616e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006172:	4883      	ldr	r0, [pc, #524]	; (8006380 <checkAktifCalisma+0x15d0>)
 8006174:	f003 f8b6 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d105      	bne.n	800618a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800617e:	4b7f      	ldr	r3, [pc, #508]	; (800637c <checkAktifCalisma+0x15cc>)
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006184:	2003      	movs	r0, #3
 8006186:	f7fe fc41 	bl	8004a0c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800618a:	4b7e      	ldr	r3, [pc, #504]	; (8006384 <checkAktifCalisma+0x15d4>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <checkAktifCalisma+0x13ea>
 8006192:	4b7d      	ldr	r3, [pc, #500]	; (8006388 <checkAktifCalisma+0x15d8>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01e      	beq.n	80061d8 <checkAktifCalisma+0x1428>
 800619a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800619e:	487b      	ldr	r0, [pc, #492]	; (800638c <checkAktifCalisma+0x15dc>)
 80061a0:	f003 f8a0 	bl	80092e4 <HAL_GPIO_ReadPin>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d116      	bne.n	80061d8 <checkAktifCalisma+0x1428>
 80061aa:	4b79      	ldr	r3, [pc, #484]	; (8006390 <checkAktifCalisma+0x15e0>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d003      	beq.n	80061ba <checkAktifCalisma+0x140a>
 80061b2:	4b77      	ldr	r3, [pc, #476]	; (8006390 <checkAktifCalisma+0x15e0>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d10e      	bne.n	80061d8 <checkAktifCalisma+0x1428>
			hataVar=1;
 80061ba:	4b6f      	ldr	r3, [pc, #444]	; (8006378 <checkAktifCalisma+0x15c8>)
 80061bc:	2201      	movs	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80061c0:	2004      	movs	r0, #4
 80061c2:	f7fa fc95 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80061c6:	2004      	movs	r0, #4
 80061c8:	f7fa fc38 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 80061cc:	f001 fb4a 	bl	8007864 <convertAndSendData>
			katkapisivicihatasi=1;
 80061d0:	4b70      	ldr	r3, [pc, #448]	; (8006394 <checkAktifCalisma+0x15e4>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	e01f      	b.n	8006218 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80061d8:	4b6e      	ldr	r3, [pc, #440]	; (8006394 <checkAktifCalisma+0x15e4>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01b      	beq.n	8006218 <checkAktifCalisma+0x1468>
 80061e0:	4b6d      	ldr	r3, [pc, #436]	; (8006398 <checkAktifCalisma+0x15e8>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d017      	beq.n	8006218 <checkAktifCalisma+0x1468>
 80061e8:	4b66      	ldr	r3, [pc, #408]	; (8006384 <checkAktifCalisma+0x15d4>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	f083 0301 	eor.w	r3, r3, #1
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d010      	beq.n	8006218 <checkAktifCalisma+0x1468>
 80061f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061fa:	4864      	ldr	r0, [pc, #400]	; (800638c <checkAktifCalisma+0x15dc>)
 80061fc:	f003 f872 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d108      	bne.n	8006218 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006206:	4b63      	ldr	r3, [pc, #396]	; (8006394 <checkAktifCalisma+0x15e4>)
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 800620c:	4b5e      	ldr	r3, [pc, #376]	; (8006388 <checkAktifCalisma+0x15d8>)
 800620e:	2200      	movs	r2, #0
 8006210:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006212:	2004      	movs	r0, #4
 8006214:	f7fe fbfa 	bl	8004a0c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006218:	4b5a      	ldr	r3, [pc, #360]	; (8006384 <checkAktifCalisma+0x15d4>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <checkAktifCalisma+0x1478>
 8006220:	4b5e      	ldr	r3, [pc, #376]	; (800639c <checkAktifCalisma+0x15ec>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01e      	beq.n	8006266 <checkAktifCalisma+0x14b6>
 8006228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800622c:	4857      	ldr	r0, [pc, #348]	; (800638c <checkAktifCalisma+0x15dc>)
 800622e:	f003 f859 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006232:	4603      	mov	r3, r0
 8006234:	2b01      	cmp	r3, #1
 8006236:	d116      	bne.n	8006266 <checkAktifCalisma+0x14b6>
 8006238:	4b55      	ldr	r3, [pc, #340]	; (8006390 <checkAktifCalisma+0x15e0>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d003      	beq.n	8006248 <checkAktifCalisma+0x1498>
 8006240:	4b53      	ldr	r3, [pc, #332]	; (8006390 <checkAktifCalisma+0x15e0>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d10e      	bne.n	8006266 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006248:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <checkAktifCalisma+0x15c8>)
 800624a:	2201      	movs	r2, #1
 800624c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800624e:	2005      	movs	r0, #5
 8006250:	f7fa fc4e 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006254:	2005      	movs	r0, #5
 8006256:	f7fa fbf1 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 800625a:	f001 fb03 	bl	8007864 <convertAndSendData>
			tablakapisivicihatasi=1;
 800625e:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <checkAktifCalisma+0x15f0>)
 8006260:	2201      	movs	r2, #1
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e023      	b.n	80062ae <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006266:	4b4e      	ldr	r3, [pc, #312]	; (80063a0 <checkAktifCalisma+0x15f0>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01f      	beq.n	80062ae <checkAktifCalisma+0x14fe>
 800626e:	4b4a      	ldr	r3, [pc, #296]	; (8006398 <checkAktifCalisma+0x15e8>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01b      	beq.n	80062ae <checkAktifCalisma+0x14fe>
 8006276:	4b43      	ldr	r3, [pc, #268]	; (8006384 <checkAktifCalisma+0x15d4>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f083 0301 	eor.w	r3, r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d014      	beq.n	80062ae <checkAktifCalisma+0x14fe>
 8006284:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006288:	4840      	ldr	r0, [pc, #256]	; (800638c <checkAktifCalisma+0x15dc>)
 800628a:	f003 f82b 	bl	80092e4 <HAL_GPIO_ReadPin>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10c      	bne.n	80062ae <checkAktifCalisma+0x14fe>
 8006294:	4b40      	ldr	r3, [pc, #256]	; (8006398 <checkAktifCalisma+0x15e8>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800629c:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <checkAktifCalisma+0x15f0>)
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80062a2:	4b3e      	ldr	r3, [pc, #248]	; (800639c <checkAktifCalisma+0x15ec>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80062a8:	2005      	movs	r0, #5
 80062aa:	f7fe fbaf 	bl	8004a0c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80062ae:	4b30      	ldr	r3, [pc, #192]	; (8006370 <checkAktifCalisma+0x15c0>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d107      	bne.n	80062c6 <checkAktifCalisma+0x1516>
 80062b6:	4b2a      	ldr	r3, [pc, #168]	; (8006360 <checkAktifCalisma+0x15b0>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <checkAktifCalisma+0x1516>
 80062be:	4b39      	ldr	r3, [pc, #228]	; (80063a4 <checkAktifCalisma+0x15f4>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d016      	beq.n	80062f4 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80062c6:	4b38      	ldr	r3, [pc, #224]	; (80063a8 <checkAktifCalisma+0x15f8>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b38      	ldr	r3, [pc, #224]	; (80063ac <checkAktifCalisma+0x15fc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	4a37      	ldr	r2, [pc, #220]	; (80063b0 <checkAktifCalisma+0x1600>)
 80062d2:	7812      	ldrb	r2, [r2, #0]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d30d      	bcc.n	80062f4 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80062d8:	4b27      	ldr	r3, [pc, #156]	; (8006378 <checkAktifCalisma+0x15c8>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80062de:	2006      	movs	r0, #6
 80062e0:	f7fa fc06 	bl	8000af0 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80062e4:	2006      	movs	r0, #6
 80062e6:	f7fa fba9 	bl	8000a3c <hata2EEPROM>
			  	convertAndSendData();
 80062ea:	f001 fabb 	bl	8007864 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80062ee:	4b31      	ldr	r3, [pc, #196]	; (80063b4 <checkAktifCalisma+0x1604>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80062f4:	4b2f      	ldr	r3, [pc, #188]	; (80063b4 <checkAktifCalisma+0x1604>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d013      	beq.n	8006324 <checkAktifCalisma+0x1574>
 80062fc:	2108      	movs	r1, #8
 80062fe:	4823      	ldr	r0, [pc, #140]	; (800638c <checkAktifCalisma+0x15dc>)
 8006300:	f002 fff0 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00c      	beq.n	8006324 <checkAktifCalisma+0x1574>
 800630a:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <checkAktifCalisma+0x15d4>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f083 0301 	eor.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006318:	4b26      	ldr	r3, [pc, #152]	; (80063b4 <checkAktifCalisma+0x1604>)
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800631e:	2006      	movs	r0, #6
 8006320:	f7fe fb74 	bl	8004a0c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006324:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <checkAktifCalisma+0x1608>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <checkAktifCalisma+0x1594>
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <checkAktifCalisma+0x15b0>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d107      	bne.n	8006344 <checkAktifCalisma+0x1594>
 8006334:	4b21      	ldr	r3, [pc, #132]	; (80063bc <checkAktifCalisma+0x160c>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d103      	bne.n	8006344 <checkAktifCalisma+0x1594>
 800633c:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <checkAktifCalisma+0x15f4>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d03f      	beq.n	80063c4 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006344:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <checkAktifCalisma+0x1610>)
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800634a:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <checkAktifCalisma+0x15d8>)
 800634c:	2201      	movs	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006350:	4b12      	ldr	r3, [pc, #72]	; (800639c <checkAktifCalisma+0x15ec>)
 8006352:	2201      	movs	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e03c      	b.n	80063d2 <checkAktifCalisma+0x1622>
 8006358:	20000279 	.word	0x20000279
 800635c:	2000027f 	.word	0x2000027f
 8006360:	20000260 	.word	0x20000260
 8006364:	20000289 	.word	0x20000289
 8006368:	2000022b 	.word	0x2000022b
 800636c:	2000022f 	.word	0x2000022f
 8006370:	2000027c 	.word	0x2000027c
 8006374:	40011000 	.word	0x40011000
 8006378:	2000027d 	.word	0x2000027d
 800637c:	20000286 	.word	0x20000286
 8006380:	40010c00 	.word	0x40010c00
 8006384:	20000276 	.word	0x20000276
 8006388:	2000028a 	.word	0x2000028a
 800638c:	40010800 	.word	0x40010800
 8006390:	20000230 	.word	0x20000230
 8006394:	20000287 	.word	0x20000287
 8006398:	2000026a 	.word	0x2000026a
 800639c:	2000028b 	.word	0x2000028b
 80063a0:	20000288 	.word	0x20000288
 80063a4:	2000025f 	.word	0x2000025f
 80063a8:	20000204 	.word	0x20000204
 80063ac:	20000218 	.word	0x20000218
 80063b0:	20000240 	.word	0x20000240
 80063b4:	20000277 	.word	0x20000277
 80063b8:	2000025d 	.word	0x2000025d
 80063bc:	2000025e 	.word	0x2000025e
 80063c0:	2000027e 	.word	0x2000027e
		} else {
			makineCalisiyor=1;
 80063c4:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <checkAktifCalisma+0x1690>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80063ca:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <checkAktifCalisma+0x1694>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1e      	ldr	r2, [pc, #120]	; (8006448 <checkAktifCalisma+0x1698>)
 80063d0:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80063d2:	4b1e      	ldr	r3, [pc, #120]	; (800644c <checkAktifCalisma+0x169c>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d02f      	beq.n	800643a <checkAktifCalisma+0x168a>
 80063da:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <checkAktifCalisma+0x16a0>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f083 0301 	eor.w	r3, r3, #1
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d028      	beq.n	800643a <checkAktifCalisma+0x168a>
 80063e8:	4b1a      	ldr	r3, [pc, #104]	; (8006454 <checkAktifCalisma+0x16a4>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f083 0301 	eor.w	r3, r3, #1
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d021      	beq.n	800643a <checkAktifCalisma+0x168a>
 80063f6:	4b18      	ldr	r3, [pc, #96]	; (8006458 <checkAktifCalisma+0x16a8>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f083 0301 	eor.w	r3, r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01a      	beq.n	800643a <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006404:	4b15      	ldr	r3, [pc, #84]	; (800645c <checkAktifCalisma+0x16ac>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f083 0301 	eor.w	r3, r3, #1
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d013      	beq.n	800643a <checkAktifCalisma+0x168a>
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <checkAktifCalisma+0x16b0>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f083 0301 	eor.w	r3, r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00c      	beq.n	800643a <checkAktifCalisma+0x168a>
 8006420:	4b10      	ldr	r3, [pc, #64]	; (8006464 <checkAktifCalisma+0x16b4>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f083 0301 	eor.w	r3, r3, #1
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <checkAktifCalisma+0x168a>
			hataVar=0;
 800642e:	4b07      	ldr	r3, [pc, #28]	; (800644c <checkAktifCalisma+0x169c>)
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006434:	2007      	movs	r0, #7
 8006436:	f7fe fae9 	bl	8004a0c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	2000027e 	.word	0x2000027e
 8006444:	20000204 	.word	0x20000204
 8006448:	20000218 	.word	0x20000218
 800644c:	2000027d 	.word	0x2000027d
 8006450:	20000278 	.word	0x20000278
 8006454:	20000279 	.word	0x20000279
 8006458:	20000286 	.word	0x20000286
 800645c:	20000287 	.word	0x20000287
 8006460:	20000288 	.word	0x20000288
 8006464:	20000277 	.word	0x20000277

08006468 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800646c:	4b8b      	ldr	r3, [pc, #556]	; (800669c <checkDemoModCalisma+0x234>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b01      	cmp	r3, #1
 8006472:	f040 8229 	bne.w	80068c8 <checkDemoModCalisma+0x460>
 8006476:	4b8a      	ldr	r3, [pc, #552]	; (80066a0 <checkDemoModCalisma+0x238>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8224 	beq.w	80068c8 <checkDemoModCalisma+0x460>
 8006480:	4b88      	ldr	r3, [pc, #544]	; (80066a4 <checkDemoModCalisma+0x23c>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 821f 	bne.w	80068c8 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800648a:	2102      	movs	r1, #2
 800648c:	4886      	ldr	r0, [pc, #536]	; (80066a8 <checkDemoModCalisma+0x240>)
 800648e:	f002 ff29 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11d      	bne.n	80064d4 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006498:	4b84      	ldr	r3, [pc, #528]	; (80066ac <checkDemoModCalisma+0x244>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f083 0301 	eor.w	r3, r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d016      	beq.n	80064d4 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80064a6:	4b82      	ldr	r3, [pc, #520]	; (80066b0 <checkDemoModCalisma+0x248>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f083 0301 	eor.w	r3, r3, #1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00f      	beq.n	80064d4 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80064b4:	4b7f      	ldr	r3, [pc, #508]	; (80066b4 <checkDemoModCalisma+0x24c>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f083 0301 	eor.w	r3, r3, #1
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80064c2:	2201      	movs	r2, #1
 80064c4:	2104      	movs	r1, #4
 80064c6:	487c      	ldr	r0, [pc, #496]	; (80066b8 <checkDemoModCalisma+0x250>)
 80064c8:	f002 ff23 	bl	8009312 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80064cc:	4b7b      	ldr	r3, [pc, #492]	; (80066bc <checkDemoModCalisma+0x254>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	e00e      	b.n	80064f2 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80064d4:	2102      	movs	r1, #2
 80064d6:	4874      	ldr	r0, [pc, #464]	; (80066a8 <checkDemoModCalisma+0x240>)
 80064d8:	f002 ff04 	bl	80092e4 <HAL_GPIO_ReadPin>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d107      	bne.n	80064f2 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80064e2:	2200      	movs	r2, #0
 80064e4:	2104      	movs	r1, #4
 80064e6:	4874      	ldr	r0, [pc, #464]	; (80066b8 <checkDemoModCalisma+0x250>)
 80064e8:	f002 ff13 	bl	8009312 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80064ec:	4b73      	ldr	r3, [pc, #460]	; (80066bc <checkDemoModCalisma+0x254>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80064f2:	4b72      	ldr	r3, [pc, #456]	; (80066bc <checkDemoModCalisma+0x254>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <checkDemoModCalisma+0xaa>
 80064fa:	4b6d      	ldr	r3, [pc, #436]	; (80066b0 <checkDemoModCalisma+0x248>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <checkDemoModCalisma+0xaa>
 8006502:	4b6c      	ldr	r3, [pc, #432]	; (80066b4 <checkDemoModCalisma+0x24c>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d103      	bne.n	8006512 <checkDemoModCalisma+0xaa>
 800650a:	4b68      	ldr	r3, [pc, #416]	; (80066ac <checkDemoModCalisma+0x244>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00c      	beq.n	800652c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006512:	2201      	movs	r2, #1
 8006514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006518:	4867      	ldr	r0, [pc, #412]	; (80066b8 <checkDemoModCalisma+0x250>)
 800651a:	f002 fefa 	bl	8009312 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800651e:	2201      	movs	r2, #1
 8006520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006524:	4864      	ldr	r0, [pc, #400]	; (80066b8 <checkDemoModCalisma+0x250>)
 8006526:	f002 fef4 	bl	8009312 <HAL_GPIO_WritePin>
 800652a:	e00b      	b.n	8006544 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800652c:	2200      	movs	r2, #0
 800652e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006532:	4861      	ldr	r0, [pc, #388]	; (80066b8 <checkDemoModCalisma+0x250>)
 8006534:	f002 feed 	bl	8009312 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006538:	2200      	movs	r2, #0
 800653a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800653e:	485e      	ldr	r0, [pc, #376]	; (80066b8 <checkDemoModCalisma+0x250>)
 8006540:	f002 fee7 	bl	8009312 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006544:	2102      	movs	r1, #2
 8006546:	4858      	ldr	r0, [pc, #352]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006548:	f002 fecc 	bl	80092e4 <HAL_GPIO_ReadPin>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d10d      	bne.n	800656e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006556:	4854      	ldr	r0, [pc, #336]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006558:	f002 fec4 	bl	80092e4 <HAL_GPIO_ReadPin>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006562:	4b56      	ldr	r3, [pc, #344]	; (80066bc <checkDemoModCalisma+0x254>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f083 0301 	eor.w	r3, r3, #1
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800656e:	2102      	movs	r1, #2
 8006570:	484d      	ldr	r0, [pc, #308]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006572:	f002 feb7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006576:	4603      	mov	r3, r0
 8006578:	2b01      	cmp	r3, #1
 800657a:	d125      	bne.n	80065c8 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800657c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006580:	4849      	ldr	r0, [pc, #292]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006582:	f002 feaf 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11d      	bne.n	80065c8 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800658c:	4b4b      	ldr	r3, [pc, #300]	; (80066bc <checkDemoModCalisma+0x254>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f083 0301 	eor.w	r3, r3, #1
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d016      	beq.n	80065c8 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800659a:	4b44      	ldr	r3, [pc, #272]	; (80066ac <checkDemoModCalisma+0x244>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f083 0301 	eor.w	r3, r3, #1
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00f      	beq.n	80065c8 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80065a8:	4b42      	ldr	r3, [pc, #264]	; (80066b4 <checkDemoModCalisma+0x24c>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f083 0301 	eor.w	r3, r3, #1
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80065b6:	2201      	movs	r2, #1
 80065b8:	2120      	movs	r1, #32
 80065ba:	483b      	ldr	r0, [pc, #236]	; (80066a8 <checkDemoModCalisma+0x240>)
 80065bc:	f002 fea9 	bl	8009312 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80065c0:	4b3b      	ldr	r3, [pc, #236]	; (80066b0 <checkDemoModCalisma+0x248>)
 80065c2:	2201      	movs	r2, #1
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	e007      	b.n	80065d8 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80065c8:	2200      	movs	r2, #0
 80065ca:	2120      	movs	r1, #32
 80065cc:	4836      	ldr	r0, [pc, #216]	; (80066a8 <checkDemoModCalisma+0x240>)
 80065ce:	f002 fea0 	bl	8009312 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80065d2:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <checkDemoModCalisma+0x248>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065d8:	2102      	movs	r1, #2
 80065da:	4833      	ldr	r0, [pc, #204]	; (80066a8 <checkDemoModCalisma+0x240>)
 80065dc:	f002 fe82 	bl	80092e4 <HAL_GPIO_ReadPin>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d125      	bne.n	8006632 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80065e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065ea:	482f      	ldr	r0, [pc, #188]	; (80066a8 <checkDemoModCalisma+0x240>)
 80065ec:	f002 fe7a 	bl	80092e4 <HAL_GPIO_ReadPin>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d11d      	bne.n	8006632 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80065f6:	4b31      	ldr	r3, [pc, #196]	; (80066bc <checkDemoModCalisma+0x254>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f083 0301 	eor.w	r3, r3, #1
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d016      	beq.n	8006632 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006604:	4b2a      	ldr	r3, [pc, #168]	; (80066b0 <checkDemoModCalisma+0x248>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	f083 0301 	eor.w	r3, r3, #1
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00f      	beq.n	8006632 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006612:	4b26      	ldr	r3, [pc, #152]	; (80066ac <checkDemoModCalisma+0x244>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f083 0301 	eor.w	r3, r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006620:	2201      	movs	r2, #1
 8006622:	2110      	movs	r1, #16
 8006624:	4820      	ldr	r0, [pc, #128]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006626:	f002 fe74 	bl	8009312 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800662a:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <checkDemoModCalisma+0x24c>)
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	e007      	b.n	8006642 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006632:	2200      	movs	r2, #0
 8006634:	2110      	movs	r1, #16
 8006636:	481c      	ldr	r0, [pc, #112]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006638:	f002 fe6b 	bl	8009312 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 800663c:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <checkDemoModCalisma+0x24c>)
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006642:	2104      	movs	r1, #4
 8006644:	4818      	ldr	r0, [pc, #96]	; (80066a8 <checkDemoModCalisma+0x240>)
 8006646:	f002 fe4d 	bl	80092e4 <HAL_GPIO_ReadPin>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d139      	bne.n	80066c4 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006650:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <checkDemoModCalisma+0x254>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f083 0301 	eor.w	r3, r3, #1
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d032      	beq.n	80066c4 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800665e:	4b15      	ldr	r3, [pc, #84]	; (80066b4 <checkDemoModCalisma+0x24c>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f083 0301 	eor.w	r3, r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d02b      	beq.n	80066c4 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 800666c:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <checkDemoModCalisma+0x248>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f083 0301 	eor.w	r3, r3, #1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d024      	beq.n	80066c4 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800667a:	2201      	movs	r2, #1
 800667c:	2102      	movs	r1, #2
 800667e:	480e      	ldr	r0, [pc, #56]	; (80066b8 <checkDemoModCalisma+0x250>)
 8006680:	f002 fe47 	bl	8009312 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006684:	2201      	movs	r2, #1
 8006686:	2101      	movs	r1, #1
 8006688:	480b      	ldr	r0, [pc, #44]	; (80066b8 <checkDemoModCalisma+0x250>)
 800668a:	f002 fe42 	bl	8009312 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800668e:	4b07      	ldr	r3, [pc, #28]	; (80066ac <checkDemoModCalisma+0x244>)
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006694:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <checkDemoModCalisma+0x258>)
 8006696:	2201      	movs	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	e027      	b.n	80066ec <checkDemoModCalisma+0x284>
 800669c:	20000246 	.word	0x20000246
 80066a0:	2000027a 	.word	0x2000027a
 80066a4:	20000245 	.word	0x20000245
 80066a8:	40011000 	.word	0x40011000
 80066ac:	20000281 	.word	0x20000281
 80066b0:	20000282 	.word	0x20000282
 80066b4:	20000283 	.word	0x20000283
 80066b8:	40010c00 	.word	0x40010c00
 80066bc:	20000280 	.word	0x20000280
 80066c0:	20000266 	.word	0x20000266
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80066c4:	2104      	movs	r1, #4
 80066c6:	48a0      	ldr	r0, [pc, #640]	; (8006948 <checkDemoModCalisma+0x4e0>)
 80066c8:	f002 fe0c 	bl	80092e4 <HAL_GPIO_ReadPin>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d10c      	bne.n	80066ec <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2102      	movs	r1, #2
 80066d6:	489d      	ldr	r0, [pc, #628]	; (800694c <checkDemoModCalisma+0x4e4>)
 80066d8:	f002 fe1b 	bl	8009312 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066dc:	2200      	movs	r2, #0
 80066de:	2101      	movs	r1, #1
 80066e0:	489a      	ldr	r0, [pc, #616]	; (800694c <checkDemoModCalisma+0x4e4>)
 80066e2:	f002 fe16 	bl	8009312 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80066e6:	4b9a      	ldr	r3, [pc, #616]	; (8006950 <checkDemoModCalisma+0x4e8>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80066ec:	2104      	movs	r1, #4
 80066ee:	4896      	ldr	r0, [pc, #600]	; (8006948 <checkDemoModCalisma+0x4e0>)
 80066f0:	f002 fdf8 	bl	80092e4 <HAL_GPIO_ReadPin>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d10d      	bne.n	8006716 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80066fa:	2201      	movs	r2, #1
 80066fc:	2180      	movs	r1, #128	; 0x80
 80066fe:	4895      	ldr	r0, [pc, #596]	; (8006954 <checkDemoModCalisma+0x4ec>)
 8006700:	f002 fe07 	bl	8009312 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006704:	2201      	movs	r2, #1
 8006706:	2120      	movs	r1, #32
 8006708:	4892      	ldr	r0, [pc, #584]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800670a:	f002 fe02 	bl	8009312 <HAL_GPIO_WritePin>
			timer3 = millis;
 800670e:	4b92      	ldr	r3, [pc, #584]	; (8006958 <checkDemoModCalisma+0x4f0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a92      	ldr	r2, [pc, #584]	; (800695c <checkDemoModCalisma+0x4f4>)
 8006714:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006716:	4b90      	ldr	r3, [pc, #576]	; (8006958 <checkDemoModCalisma+0x4f0>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4b90      	ldr	r3, [pc, #576]	; (800695c <checkDemoModCalisma+0x4f4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b04      	cmp	r3, #4
 8006722:	d909      	bls.n	8006738 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006724:	2200      	movs	r2, #0
 8006726:	2180      	movs	r1, #128	; 0x80
 8006728:	488a      	ldr	r0, [pc, #552]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800672a:	f002 fdf2 	bl	8009312 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800672e:	2200      	movs	r2, #0
 8006730:	2120      	movs	r1, #32
 8006732:	4888      	ldr	r0, [pc, #544]	; (8006954 <checkDemoModCalisma+0x4ec>)
 8006734:	f002 fded 	bl	8009312 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006738:	2102      	movs	r1, #2
 800673a:	4883      	ldr	r0, [pc, #524]	; (8006948 <checkDemoModCalisma+0x4e0>)
 800673c:	f002 fdd2 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006740:	4603      	mov	r3, r0
 8006742:	2b01      	cmp	r3, #1
 8006744:	d108      	bne.n	8006758 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006746:	2201      	movs	r2, #1
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	4882      	ldr	r0, [pc, #520]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800674c:	f002 fde1 	bl	8009312 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006750:	4b81      	ldr	r3, [pc, #516]	; (8006958 <checkDemoModCalisma+0x4f0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a81      	ldr	r2, [pc, #516]	; (800695c <checkDemoModCalisma+0x4f4>)
 8006756:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006758:	4b7f      	ldr	r3, [pc, #508]	; (8006958 <checkDemoModCalisma+0x4f0>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	4b7f      	ldr	r3, [pc, #508]	; (800695c <checkDemoModCalisma+0x4f4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b04      	cmp	r3, #4
 8006764:	d904      	bls.n	8006770 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006766:	2200      	movs	r2, #0
 8006768:	2140      	movs	r1, #64	; 0x40
 800676a:	487a      	ldr	r0, [pc, #488]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800676c:	f002 fdd1 	bl	8009312 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006770:	4b7b      	ldr	r3, [pc, #492]	; (8006960 <checkDemoModCalisma+0x4f8>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d058      	beq.n	800682a <checkDemoModCalisma+0x3c2>
 8006778:	4b7a      	ldr	r3, [pc, #488]	; (8006964 <checkDemoModCalisma+0x4fc>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d054      	beq.n	800682a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006780:	4b79      	ldr	r3, [pc, #484]	; (8006968 <checkDemoModCalisma+0x500>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	4b77      	ldr	r3, [pc, #476]	; (8006968 <checkDemoModCalisma+0x500>)
 800678a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800678c:	4b76      	ldr	r3, [pc, #472]	; (8006968 <checkDemoModCalisma+0x500>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b09      	cmp	r3, #9
 8006792:	d908      	bls.n	80067a6 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006794:	4b74      	ldr	r3, [pc, #464]	; (8006968 <checkDemoModCalisma+0x500>)
 8006796:	2200      	movs	r2, #0
 8006798:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800679a:	4b74      	ldr	r3, [pc, #464]	; (800696c <checkDemoModCalisma+0x504>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	4b72      	ldr	r3, [pc, #456]	; (800696c <checkDemoModCalisma+0x504>)
 80067a4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80067a6:	4b71      	ldr	r3, [pc, #452]	; (800696c <checkDemoModCalisma+0x504>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b09      	cmp	r3, #9
 80067ac:	d908      	bls.n	80067c0 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80067ae:	4b6f      	ldr	r3, [pc, #444]	; (800696c <checkDemoModCalisma+0x504>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80067b4:	4b6e      	ldr	r3, [pc, #440]	; (8006970 <checkDemoModCalisma+0x508>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	4b6c      	ldr	r3, [pc, #432]	; (8006970 <checkDemoModCalisma+0x508>)
 80067be:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80067c0:	4b6b      	ldr	r3, [pc, #428]	; (8006970 <checkDemoModCalisma+0x508>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	d908      	bls.n	80067da <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80067c8:	4b69      	ldr	r3, [pc, #420]	; (8006970 <checkDemoModCalisma+0x508>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80067ce:	4b69      	ldr	r3, [pc, #420]	; (8006974 <checkDemoModCalisma+0x50c>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	4b67      	ldr	r3, [pc, #412]	; (8006974 <checkDemoModCalisma+0x50c>)
 80067d8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80067da:	4b66      	ldr	r3, [pc, #408]	; (8006974 <checkDemoModCalisma+0x50c>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b09      	cmp	r3, #9
 80067e0:	d908      	bls.n	80067f4 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80067e2:	4b64      	ldr	r3, [pc, #400]	; (8006974 <checkDemoModCalisma+0x50c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80067e8:	4b63      	ldr	r3, [pc, #396]	; (8006978 <checkDemoModCalisma+0x510>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	4b61      	ldr	r3, [pc, #388]	; (8006978 <checkDemoModCalisma+0x510>)
 80067f2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80067f4:	4b60      	ldr	r3, [pc, #384]	; (8006978 <checkDemoModCalisma+0x510>)
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	4b60      	ldr	r3, [pc, #384]	; (800697c <checkDemoModCalisma+0x514>)
 80067fa:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80067fe:	4b5d      	ldr	r3, [pc, #372]	; (8006974 <checkDemoModCalisma+0x50c>)
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	4b5e      	ldr	r3, [pc, #376]	; (800697c <checkDemoModCalisma+0x514>)
 8006804:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006806:	4b5a      	ldr	r3, [pc, #360]	; (8006970 <checkDemoModCalisma+0x508>)
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	4b5c      	ldr	r3, [pc, #368]	; (800697c <checkDemoModCalisma+0x514>)
 800680c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800680e:	4b57      	ldr	r3, [pc, #348]	; (800696c <checkDemoModCalisma+0x504>)
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	4b5a      	ldr	r3, [pc, #360]	; (800697c <checkDemoModCalisma+0x514>)
 8006814:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006816:	4b54      	ldr	r3, [pc, #336]	; (8006968 <checkDemoModCalisma+0x500>)
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	4b58      	ldr	r3, [pc, #352]	; (800697c <checkDemoModCalisma+0x514>)
 800681c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800681e:	4b58      	ldr	r3, [pc, #352]	; (8006980 <checkDemoModCalisma+0x518>)
 8006820:	2201      	movs	r2, #1
 8006822:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006824:	4b4f      	ldr	r3, [pc, #316]	; (8006964 <checkDemoModCalisma+0x4fc>)
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800682a:	4b56      	ldr	r3, [pc, #344]	; (8006984 <checkDemoModCalisma+0x51c>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 8087 	bne.w	8006942 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006834:	4a54      	ldr	r2, [pc, #336]	; (8006988 <checkDemoModCalisma+0x520>)
 8006836:	2101      	movs	r1, #1
 8006838:	2002      	movs	r0, #2
 800683a:	f001 fa2d 	bl	8007c98 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800683e:	4a53      	ldr	r2, [pc, #332]	; (800698c <checkDemoModCalisma+0x524>)
 8006840:	2101      	movs	r1, #1
 8006842:	2001      	movs	r0, #1
 8006844:	f001 fa28 	bl	8007c98 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006848:	4b4b      	ldr	r3, [pc, #300]	; (8006978 <checkDemoModCalisma+0x510>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	220a      	movs	r2, #10
 800684e:	4950      	ldr	r1, [pc, #320]	; (8006990 <checkDemoModCalisma+0x528>)
 8006850:	4618      	mov	r0, r3
 8006852:	f005 fd73 	bl	800c33c <itoa>
			lcd_print(2,12,snum);
 8006856:	4a4e      	ldr	r2, [pc, #312]	; (8006990 <checkDemoModCalisma+0x528>)
 8006858:	210c      	movs	r1, #12
 800685a:	2002      	movs	r0, #2
 800685c:	f001 fa1c 	bl	8007c98 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006860:	4b44      	ldr	r3, [pc, #272]	; (8006974 <checkDemoModCalisma+0x50c>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	220a      	movs	r2, #10
 8006866:	494a      	ldr	r1, [pc, #296]	; (8006990 <checkDemoModCalisma+0x528>)
 8006868:	4618      	mov	r0, r3
 800686a:	f005 fd67 	bl	800c33c <itoa>
			lcd_print(2,13,snum);
 800686e:	4a48      	ldr	r2, [pc, #288]	; (8006990 <checkDemoModCalisma+0x528>)
 8006870:	210d      	movs	r1, #13
 8006872:	2002      	movs	r0, #2
 8006874:	f001 fa10 	bl	8007c98 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006878:	4b3d      	ldr	r3, [pc, #244]	; (8006970 <checkDemoModCalisma+0x508>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	220a      	movs	r2, #10
 800687e:	4944      	ldr	r1, [pc, #272]	; (8006990 <checkDemoModCalisma+0x528>)
 8006880:	4618      	mov	r0, r3
 8006882:	f005 fd5b 	bl	800c33c <itoa>
			lcd_print(2,14,snum);
 8006886:	4a42      	ldr	r2, [pc, #264]	; (8006990 <checkDemoModCalisma+0x528>)
 8006888:	210e      	movs	r1, #14
 800688a:	2002      	movs	r0, #2
 800688c:	f001 fa04 	bl	8007c98 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006890:	4b36      	ldr	r3, [pc, #216]	; (800696c <checkDemoModCalisma+0x504>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	220a      	movs	r2, #10
 8006896:	493e      	ldr	r1, [pc, #248]	; (8006990 <checkDemoModCalisma+0x528>)
 8006898:	4618      	mov	r0, r3
 800689a:	f005 fd4f 	bl	800c33c <itoa>
			lcd_print(2,15,snum);
 800689e:	4a3c      	ldr	r2, [pc, #240]	; (8006990 <checkDemoModCalisma+0x528>)
 80068a0:	210f      	movs	r1, #15
 80068a2:	2002      	movs	r0, #2
 80068a4:	f001 f9f8 	bl	8007c98 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80068a8:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <checkDemoModCalisma+0x500>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	220a      	movs	r2, #10
 80068ae:	4938      	ldr	r1, [pc, #224]	; (8006990 <checkDemoModCalisma+0x528>)
 80068b0:	4618      	mov	r0, r3
 80068b2:	f005 fd43 	bl	800c33c <itoa>
			lcd_print(2,16,snum);
 80068b6:	4a36      	ldr	r2, [pc, #216]	; (8006990 <checkDemoModCalisma+0x528>)
 80068b8:	2110      	movs	r1, #16
 80068ba:	2002      	movs	r0, #2
 80068bc:	f001 f9ec 	bl	8007c98 <lcd_print>
			mesajYazildi=1;
 80068c0:	4b34      	ldr	r3, [pc, #208]	; (8006994 <checkDemoModCalisma+0x52c>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80068c6:	e03c      	b.n	8006942 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80068c8:	4b33      	ldr	r3, [pc, #204]	; (8006998 <checkDemoModCalisma+0x530>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d003      	beq.n	80068d8 <checkDemoModCalisma+0x470>
 80068d0:	4b2c      	ldr	r3, [pc, #176]	; (8006984 <checkDemoModCalisma+0x51c>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d134      	bne.n	8006942 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80068d8:	2200      	movs	r2, #0
 80068da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068de:	481b      	ldr	r0, [pc, #108]	; (800694c <checkDemoModCalisma+0x4e4>)
 80068e0:	f002 fd17 	bl	8009312 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80068e4:	2200      	movs	r2, #0
 80068e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068ea:	4818      	ldr	r0, [pc, #96]	; (800694c <checkDemoModCalisma+0x4e4>)
 80068ec:	f002 fd11 	bl	8009312 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80068f0:	2200      	movs	r2, #0
 80068f2:	2104      	movs	r1, #4
 80068f4:	4815      	ldr	r0, [pc, #84]	; (800694c <checkDemoModCalisma+0x4e4>)
 80068f6:	f002 fd0c 	bl	8009312 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2102      	movs	r1, #2
 80068fe:	4813      	ldr	r0, [pc, #76]	; (800694c <checkDemoModCalisma+0x4e4>)
 8006900:	f002 fd07 	bl	8009312 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006904:	2200      	movs	r2, #0
 8006906:	2101      	movs	r1, #1
 8006908:	4810      	ldr	r0, [pc, #64]	; (800694c <checkDemoModCalisma+0x4e4>)
 800690a:	f002 fd02 	bl	8009312 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800690e:	2200      	movs	r2, #0
 8006910:	2120      	movs	r1, #32
 8006912:	480d      	ldr	r0, [pc, #52]	; (8006948 <checkDemoModCalisma+0x4e0>)
 8006914:	f002 fcfd 	bl	8009312 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006918:	2200      	movs	r2, #0
 800691a:	2110      	movs	r1, #16
 800691c:	480a      	ldr	r0, [pc, #40]	; (8006948 <checkDemoModCalisma+0x4e0>)
 800691e:	f002 fcf8 	bl	8009312 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006922:	2200      	movs	r2, #0
 8006924:	2180      	movs	r1, #128	; 0x80
 8006926:	480b      	ldr	r0, [pc, #44]	; (8006954 <checkDemoModCalisma+0x4ec>)
 8006928:	f002 fcf3 	bl	8009312 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800692c:	2200      	movs	r2, #0
 800692e:	2140      	movs	r1, #64	; 0x40
 8006930:	4808      	ldr	r0, [pc, #32]	; (8006954 <checkDemoModCalisma+0x4ec>)
 8006932:	f002 fcee 	bl	8009312 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006936:	2200      	movs	r2, #0
 8006938:	2120      	movs	r1, #32
 800693a:	4806      	ldr	r0, [pc, #24]	; (8006954 <checkDemoModCalisma+0x4ec>)
 800693c:	f002 fce9 	bl	8009312 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006940:	e7ff      	b.n	8006942 <checkDemoModCalisma+0x4da>
 8006942:	bf00      	nop
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	40011000 	.word	0x40011000
 800694c:	40010c00 	.word	0x40010c00
 8006950:	20000281 	.word	0x20000281
 8006954:	40010800 	.word	0x40010800
 8006958:	20000204 	.word	0x20000204
 800695c:	20000214 	.word	0x20000214
 8006960:	20000280 	.word	0x20000280
 8006964:	20000266 	.word	0x20000266
 8006968:	20000225 	.word	0x20000225
 800696c:	20000226 	.word	0x20000226
 8006970:	20000000 	.word	0x20000000
 8006974:	20000001 	.word	0x20000001
 8006978:	20000227 	.word	0x20000227
 800697c:	2000012c 	.word	0x2000012c
 8006980:	20000254 	.word	0x20000254
 8006984:	20000245 	.word	0x20000245
 8006988:	0800db64 	.word	0x0800db64
 800698c:	0800db70 	.word	0x0800db70
 8006990:	2000019c 	.word	0x2000019c
 8006994:	2000025c 	.word	0x2000025c
 8006998:	20000246 	.word	0x20000246

0800699c <mainLoop>:

void mainLoop() {
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80069a2:	f7fe f923 	bl	8004bec <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80069a6:	2101      	movs	r1, #1
 80069a8:	48ac      	ldr	r0, [pc, #688]	; (8006c5c <mainLoop+0x2c0>)
 80069aa:	f002 fc9b 	bl	80092e4 <HAL_GPIO_ReadPin>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d136      	bne.n	8006a22 <mainLoop+0x86>
 80069b4:	2108      	movs	r1, #8
 80069b6:	48aa      	ldr	r0, [pc, #680]	; (8006c60 <mainLoop+0x2c4>)
 80069b8:	f002 fc94 	bl	80092e4 <HAL_GPIO_ReadPin>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d12f      	bne.n	8006a22 <mainLoop+0x86>
 80069c2:	2102      	movs	r1, #2
 80069c4:	48a5      	ldr	r0, [pc, #660]	; (8006c5c <mainLoop+0x2c0>)
 80069c6:	f002 fc8d 	bl	80092e4 <HAL_GPIO_ReadPin>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d128      	bne.n	8006a22 <mainLoop+0x86>
 80069d0:	2104      	movs	r1, #4
 80069d2:	48a2      	ldr	r0, [pc, #648]	; (8006c5c <mainLoop+0x2c0>)
 80069d4:	f002 fc86 	bl	80092e4 <HAL_GPIO_ReadPin>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d121      	bne.n	8006a22 <mainLoop+0x86>
 80069de:	2108      	movs	r1, #8
 80069e0:	489e      	ldr	r0, [pc, #632]	; (8006c5c <mainLoop+0x2c0>)
 80069e2:	f002 fc7f 	bl	80092e4 <HAL_GPIO_ReadPin>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11a      	bne.n	8006a22 <mainLoop+0x86>
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	489c      	ldr	r0, [pc, #624]	; (8006c60 <mainLoop+0x2c4>)
 80069f0:	f002 fc78 	bl	80092e4 <HAL_GPIO_ReadPin>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d113      	bne.n	8006a22 <mainLoop+0x86>
 80069fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069fe:	4898      	ldr	r0, [pc, #608]	; (8006c60 <mainLoop+0x2c4>)
 8006a00:	f002 fc70 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d10b      	bne.n	8006a22 <mainLoop+0x86>
 8006a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a0e:	4894      	ldr	r0, [pc, #592]	; (8006c60 <mainLoop+0x2c4>)
 8006a10:	f002 fc68 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d103      	bne.n	8006a22 <mainLoop+0x86>
			butonKontrol=0;
 8006a1a:	4b92      	ldr	r3, [pc, #584]	; (8006c64 <mainLoop+0x2c8>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	e003      	b.n	8006a2a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006a22:	4b91      	ldr	r3, [pc, #580]	; (8006c68 <mainLoop+0x2cc>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a91      	ldr	r2, [pc, #580]	; (8006c6c <mainLoop+0x2d0>)
 8006a28:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a2a:	4b91      	ldr	r3, [pc, #580]	; (8006c70 <mainLoop+0x2d4>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d03a      	beq.n	8006aa8 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a32:	bf00      	nop
 8006a34:	488f      	ldr	r0, [pc, #572]	; (8006c74 <mainLoop+0x2d8>)
 8006a36:	f003 fa7e 	bl	8009f36 <HAL_I2C_GetError>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d0f9      	beq.n	8006a34 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006a40:	bf00      	nop
 8006a42:	488c      	ldr	r0, [pc, #560]	; (8006c74 <mainLoop+0x2d8>)
 8006a44:	f003 fa6a 	bl	8009f1c <HAL_I2C_GetState>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d1f9      	bne.n	8006a42 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006a4e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a52:	9302      	str	r3, [sp, #8]
 8006a54:	236e      	movs	r3, #110	; 0x6e
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	4b87      	ldr	r3, [pc, #540]	; (8006c78 <mainLoop+0x2dc>)
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	236e      	movs	r3, #110	; 0x6e
 8006a5e:	2200      	movs	r2, #0
 8006a60:	21a0      	movs	r1, #160	; 0xa0
 8006a62:	4884      	ldr	r0, [pc, #528]	; (8006c74 <mainLoop+0x2d8>)
 8006a64:	f002 fef8 	bl	8009858 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006a68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a6c:	f001 fe6a 	bl	8008744 <HAL_Delay>

		  hafizaYaz=0;
 8006a70:	4b7f      	ldr	r3, [pc, #508]	; (8006c70 <mainLoop+0x2d4>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006a76:	4b81      	ldr	r3, [pc, #516]	; (8006c7c <mainLoop+0x2e0>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006a7e:	4a80      	ldr	r2, [pc, #512]	; (8006c80 <mainLoop+0x2e4>)
 8006a80:	2101      	movs	r1, #1
 8006a82:	2002      	movs	r0, #2
 8006a84:	f001 f908 	bl	8007c98 <lcd_print>
 8006a88:	e008      	b.n	8006a9c <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006a8a:	4b7c      	ldr	r3, [pc, #496]	; (8006c7c <mainLoop+0x2e0>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d104      	bne.n	8006a9c <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006a92:	4a7c      	ldr	r2, [pc, #496]	; (8006c84 <mainLoop+0x2e8>)
 8006a94:	2101      	movs	r1, #1
 8006a96:	2002      	movs	r0, #2
 8006a98:	f001 f8fe 	bl	8007c98 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006aa0:	f001 fe50 	bl	8008744 <HAL_Delay>
		  lcd_clear();
 8006aa4:	f001 f924 	bl	8007cf0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006aa8:	4b77      	ldr	r3, [pc, #476]	; (8006c88 <mainLoop+0x2ec>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f083 0301 	eor.w	r3, r3, #1
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d06d      	beq.n	8006b92 <mainLoop+0x1f6>
 8006ab6:	486f      	ldr	r0, [pc, #444]	; (8006c74 <mainLoop+0x2d8>)
 8006ab8:	f003 fa30 	bl	8009f1c <HAL_I2C_GetState>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d167      	bne.n	8006b92 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006ac2:	4b72      	ldr	r3, [pc, #456]	; (8006c8c <mainLoop+0x2f0>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f083 0301 	eor.w	r3, r3, #1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d044      	beq.n	8006b5a <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006ad0:	4a6f      	ldr	r2, [pc, #444]	; (8006c90 <mainLoop+0x2f4>)
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	f001 f8df 	bl	8007c98 <lcd_print>
			  if(dilSecim==0) {
 8006ada:	4b68      	ldr	r3, [pc, #416]	; (8006c7c <mainLoop+0x2e0>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006ae2:	4a6c      	ldr	r2, [pc, #432]	; (8006c94 <mainLoop+0x2f8>)
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	2002      	movs	r0, #2
 8006ae8:	f001 f8d6 	bl	8007c98 <lcd_print>
 8006aec:	e008      	b.n	8006b00 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006aee:	4b63      	ldr	r3, [pc, #396]	; (8006c7c <mainLoop+0x2e0>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d104      	bne.n	8006b00 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006af6:	4a68      	ldr	r2, [pc, #416]	; (8006c98 <mainLoop+0x2fc>)
 8006af8:	2101      	movs	r1, #1
 8006afa:	2002      	movs	r0, #2
 8006afc:	f001 f8cc 	bl	8007c98 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b04:	f001 fe1e 	bl	8008744 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b08:	bf00      	nop
 8006b0a:	485a      	ldr	r0, [pc, #360]	; (8006c74 <mainLoop+0x2d8>)
 8006b0c:	f003 fa13 	bl	8009f36 <HAL_I2C_GetError>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d0f9      	beq.n	8006b0a <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b16:	e003      	b.n	8006b20 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b1c:	f001 fe12 	bl	8008744 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b20:	4854      	ldr	r0, [pc, #336]	; (8006c74 <mainLoop+0x2d8>)
 8006b22:	f003 f9fb 	bl	8009f1c <HAL_I2C_GetState>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d1f5      	bne.n	8006b18 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006b2c:	4b53      	ldr	r3, [pc, #332]	; (8006c7c <mainLoop+0x2e0>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006b34:	4a59      	ldr	r2, [pc, #356]	; (8006c9c <mainLoop+0x300>)
 8006b36:	2101      	movs	r1, #1
 8006b38:	2002      	movs	r0, #2
 8006b3a:	f001 f8ad 	bl	8007c98 <lcd_print>
 8006b3e:	e008      	b.n	8006b52 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006b40:	4b4e      	ldr	r3, [pc, #312]	; (8006c7c <mainLoop+0x2e0>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d104      	bne.n	8006b52 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006b48:	4a55      	ldr	r2, [pc, #340]	; (8006ca0 <mainLoop+0x304>)
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	2002      	movs	r0, #2
 8006b4e:	f001 f8a3 	bl	8007c98 <lcd_print>
			  }

			  ilkOkuma=1;
 8006b52:	4b4e      	ldr	r3, [pc, #312]	; (8006c8c <mainLoop+0x2f0>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e014      	b.n	8006b84 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006b5a:	4b48      	ldr	r3, [pc, #288]	; (8006c7c <mainLoop+0x2e0>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006b62:	4a50      	ldr	r2, [pc, #320]	; (8006ca4 <mainLoop+0x308>)
 8006b64:	2101      	movs	r1, #1
 8006b66:	2002      	movs	r0, #2
 8006b68:	f001 f896 	bl	8007c98 <lcd_print>
 8006b6c:	e008      	b.n	8006b80 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006b6e:	4b43      	ldr	r3, [pc, #268]	; (8006c7c <mainLoop+0x2e0>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d104      	bne.n	8006b80 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006b76:	4a4c      	ldr	r2, [pc, #304]	; (8006ca8 <mainLoop+0x30c>)
 8006b78:	2101      	movs	r1, #1
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f001 f88c 	bl	8007c98 <lcd_print>
			  }
			  lcd_clear();
 8006b80:	f001 f8b6 	bl	8007cf0 <lcd_clear>
		  }

		  lcd_clear();
 8006b84:	f001 f8b4 	bl	8007cf0 <lcd_clear>

		  eepromKontrol();
 8006b88:	f7f9 fb54 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006b8c:	4b3e      	ldr	r3, [pc, #248]	; (8006c88 <mainLoop+0x2ec>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006b92:	4b46      	ldr	r3, [pc, #280]	; (8006cac <mainLoop+0x310>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d11c      	bne.n	8006bd4 <mainLoop+0x238>
 8006b9a:	4b45      	ldr	r3, [pc, #276]	; (8006cb0 <mainLoop+0x314>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f083 0301 	eor.w	r3, r3, #1
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d015      	beq.n	8006bd4 <mainLoop+0x238>
 8006ba8:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <mainLoop+0x318>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d111      	bne.n	8006bd4 <mainLoop+0x238>
			lcd_clear();
 8006bb0:	f001 f89e 	bl	8007cf0 <lcd_clear>
			HAL_Delay(10);
 8006bb4:	200a      	movs	r0, #10
 8006bb6:	f001 fdc5 	bl	8008744 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006bba:	4a3f      	ldr	r2, [pc, #252]	; (8006cb8 <mainLoop+0x31c>)
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f001 f86a 	bl	8007c98 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006bc4:	4a3d      	ldr	r2, [pc, #244]	; (8006cbc <mainLoop+0x320>)
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	2002      	movs	r0, #2
 8006bca:	f001 f865 	bl	8007c98 <lcd_print>
			mesajYazildi=1;
 8006bce:	4b38      	ldr	r3, [pc, #224]	; (8006cb0 <mainLoop+0x314>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006bd4:	4b35      	ldr	r3, [pc, #212]	; (8006cac <mainLoop+0x310>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d112      	bne.n	8006c02 <mainLoop+0x266>
 8006bdc:	2102      	movs	r1, #2
 8006bde:	481f      	ldr	r0, [pc, #124]	; (8006c5c <mainLoop+0x2c0>)
 8006be0:	f002 fb80 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d10b      	bne.n	8006c02 <mainLoop+0x266>
 8006bea:	2104      	movs	r1, #4
 8006bec:	481b      	ldr	r0, [pc, #108]	; (8006c5c <mainLoop+0x2c0>)
 8006bee:	f002 fb79 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d104      	bne.n	8006c02 <mainLoop+0x266>
			menuGiris=1;
 8006bf8:	4b2c      	ldr	r3, [pc, #176]	; (8006cac <mainLoop+0x310>)
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006bfe:	f001 f877 	bl	8007cf0 <lcd_clear>
		}

		if(menuGiris==1) {
 8006c02:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <mainLoop+0x310>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <mainLoop+0x272>
			menu();
 8006c0a:	f7fa fb89 	bl	8001320 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c12:	4813      	ldr	r0, [pc, #76]	; (8006c60 <mainLoop+0x2c4>)
 8006c14:	f002 fb95 	bl	8009342 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c1c:	4828      	ldr	r0, [pc, #160]	; (8006cc0 <mainLoop+0x324>)
 8006c1e:	f002 fb61 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <mainLoop+0x2a2>
 8006c28:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <mainLoop+0x328>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f083 0301 	eor.w	r3, r3, #1
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <mainLoop+0x2a2>
			stopVar=1;
 8006c36:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <mainLoop+0x32c>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	e002      	b.n	8006c44 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006c3e:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <mainLoop+0x32c>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c44:	f7fd ffe8 	bl	8004c18 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c48:	f7fe f81a 	bl	8004c80 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c4c:	f7fe f85e 	bl	8004d0c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c50:	f7fe f8ae 	bl	8004db0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c54:	f7ff fc08 	bl	8006468 <checkDemoModCalisma>
		checkLCDBacklight();
 8006c58:	e6a3      	b.n	80069a2 <mainLoop+0x6>
 8006c5a:	bf00      	nop
 8006c5c:	40010800 	.word	0x40010800
 8006c60:	40011000 	.word	0x40011000
 8006c64:	20000257 	.word	0x20000257
 8006c68:	20000204 	.word	0x20000204
 8006c6c:	20000220 	.word	0x20000220
 8006c70:	20000254 	.word	0x20000254
 8006c74:	200002b8 	.word	0x200002b8
 8006c78:	2000012c 	.word	0x2000012c
 8006c7c:	20000249 	.word	0x20000249
 8006c80:	0800db84 	.word	0x0800db84
 8006c84:	0800db98 	.word	0x0800db98
 8006c88:	20000255 	.word	0x20000255
 8006c8c:	20000256 	.word	0x20000256
 8006c90:	0800dbac 	.word	0x0800dbac
 8006c94:	0800dbc0 	.word	0x0800dbc0
 8006c98:	0800dbd4 	.word	0x0800dbd4
 8006c9c:	0800dbe8 	.word	0x0800dbe8
 8006ca0:	0800dbfc 	.word	0x0800dbfc
 8006ca4:	0800dc10 	.word	0x0800dc10
 8006ca8:	0800dc24 	.word	0x0800dc24
 8006cac:	20000245 	.word	0x20000245
 8006cb0:	2000025c 	.word	0x2000025c
 8006cb4:	20000246 	.word	0x20000246
 8006cb8:	0800dc38 	.word	0x0800dc38
 8006cbc:	0800dc4c 	.word	0x0800dc4c
 8006cc0:	40010c00 	.word	0x40010c00
 8006cc4:	2000027d 	.word	0x2000027d
 8006cc8:	2000027a 	.word	0x2000027a

08006ccc <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b089      	sub	sp, #36	; 0x24
 8006cd0:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	f001 f83e 	bl	8007d54 <lcd_cursor>

	int writeLoc = 5; //lcdnin ilk satırındaki başlangıç karakteri
 8006cd8:	2305      	movs	r3, #5
 8006cda:	60fb      	str	r3, [r7, #12]

    int cursorPos = 3; //işaretçi konumu
 8006cdc:	2303      	movs	r3, #3
 8006cde:	60bb      	str	r3, [r7, #8]

    int idStart = idStartPos; //eepromKonumu
 8006ce0:	4b9a      	ldr	r3, [pc, #616]	; (8006f4c <takeMachineID+0x280>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	607b      	str	r3, [r7, #4]

    memset(machineID, 0, sizeof(machineID));
 8006ce6:	220c      	movs	r2, #12
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4899      	ldr	r0, [pc, #612]	; (8006f50 <takeMachineID+0x284>)
 8006cec:	f005 fc81 	bl	800c5f2 <memset>
    HAL_Delay(100);
 8006cf0:	2064      	movs	r0, #100	; 0x64
 8006cf2:	f001 fd27 	bl	8008744 <HAL_Delay>

    printTemplate(1, 0);
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	f7fa f8ab 	bl	8000e54 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006cfe:	2108      	movs	r1, #8
 8006d00:	4894      	ldr	r0, [pc, #592]	; (8006f54 <takeMachineID+0x288>)
 8006d02:	f002 faef 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d130      	bne.n	8006d6e <takeMachineID+0xa2>
        	lcd_cursor(0);
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f001 f821 	bl	8007d54 <lcd_cursor>

        	if(machineID[11] == '\0' || machineID[12] != '\0') {
 8006d12:	4b8f      	ldr	r3, [pc, #572]	; (8006f50 <takeMachineID+0x284>)
 8006d14:	7adb      	ldrb	r3, [r3, #11]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <takeMachineID+0x56>
 8006d1a:	4b8d      	ldr	r3, [pc, #564]	; (8006f50 <takeMachineID+0x284>)
 8006d1c:	7b1b      	ldrb	r3, [r3, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d010      	beq.n	8006d44 <takeMachineID+0x78>
        		lcd_clear();
 8006d22:	f000 ffe5 	bl	8007cf0 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006d26:	4a8c      	ldr	r2, [pc, #560]	; (8006f58 <takeMachineID+0x28c>)
 8006d28:	2101      	movs	r1, #1
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	f000 ffb4 	bl	8007c98 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006d30:	4a8a      	ldr	r2, [pc, #552]	; (8006f5c <takeMachineID+0x290>)
 8006d32:	2101      	movs	r1, #1
 8006d34:	2002      	movs	r0, #2
 8006d36:	f000 ffaf 	bl	8007c98 <lcd_print>
        		HAL_Delay(1200);
 8006d3a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d3e:	f001 fd01 	bl	8008744 <HAL_Delay>
        		goto mainSection;
 8006d42:	e7c6      	b.n	8006cd2 <takeMachineID+0x6>
        	}

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d48:	9302      	str	r3, [sp, #8]
 8006d4a:	236e      	movs	r3, #110	; 0x6e
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	4b84      	ldr	r3, [pc, #528]	; (8006f60 <takeMachineID+0x294>)
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	236e      	movs	r3, #110	; 0x6e
 8006d54:	2200      	movs	r2, #0
 8006d56:	21a0      	movs	r1, #160	; 0xa0
 8006d58:	4882      	ldr	r0, [pc, #520]	; (8006f64 <takeMachineID+0x298>)
 8006d5a:	f002 fd7d 	bl	8009858 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8006d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d62:	f001 fcef 	bl	8008744 <HAL_Delay>

        	readFromEEPROM(3);
 8006d66:	2003      	movs	r0, #3
 8006d68:	f7f9 fd40 	bl	80007ec <readFromEEPROM>

            break;
 8006d6c:	e0e9      	b.n	8006f42 <takeMachineID+0x276>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006d6e:	2101      	movs	r1, #1
 8006d70:	4878      	ldr	r0, [pc, #480]	; (8006f54 <takeMachineID+0x288>)
 8006d72:	f002 fab7 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d114      	bne.n	8006da6 <takeMachineID+0xda>
        	HAL_Delay(50);
 8006d7c:	2032      	movs	r0, #50	; 0x32
 8006d7e:	f001 fce1 	bl	8008744 <HAL_Delay>
        	if(cursorPos == 7) {
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b07      	cmp	r3, #7
 8006d86:	d102      	bne.n	8006d8e <takeMachineID+0xc2>
        		cursorPos = 10;
 8006d88:	230a      	movs	r3, #10
 8006d8a:	60bb      	str	r3, [r7, #8]
 8006d8c:	e008      	b.n	8006da0 <takeMachineID+0xd4>
        	} else if (cursorPos == 14) {
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b0e      	cmp	r3, #14
 8006d92:	d102      	bne.n	8006d9a <takeMachineID+0xce>
                cursorPos = 3;
 8006d94:	2303      	movs	r3, #3
 8006d96:	60bb      	str	r3, [r7, #8]
 8006d98:	e002      	b.n	8006da0 <takeMachineID+0xd4>
            } else {
            	cursorPos++;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006da0:	2096      	movs	r0, #150	; 0x96
 8006da2:	f001 fccf 	bl	8008744 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006da6:	2108      	movs	r1, #8
 8006da8:	486f      	ldr	r0, [pc, #444]	; (8006f68 <takeMachineID+0x29c>)
 8006daa:	f002 fa9b 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d114      	bne.n	8006dde <takeMachineID+0x112>
        	HAL_Delay(50);
 8006db4:	2032      	movs	r0, #50	; 0x32
 8006db6:	f001 fcc5 	bl	8008744 <HAL_Delay>
            if (cursorPos == 3) {
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d102      	bne.n	8006dc6 <takeMachineID+0xfa>
                cursorPos = 14;
 8006dc0:	230e      	movs	r3, #14
 8006dc2:	60bb      	str	r3, [r7, #8]
 8006dc4:	e008      	b.n	8006dd8 <takeMachineID+0x10c>
            } else if(cursorPos == 10) {
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b0a      	cmp	r3, #10
 8006dca:	d102      	bne.n	8006dd2 <takeMachineID+0x106>
            	cursorPos = 7;
 8006dcc:	2307      	movs	r3, #7
 8006dce:	60bb      	str	r3, [r7, #8]
 8006dd0:	e002      	b.n	8006dd8 <takeMachineID+0x10c>
            } else {
            	cursorPos--;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006dd8:	2096      	movs	r0, #150	; 0x96
 8006dda:	f001 fcb3 	bl	8008744 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006dde:	2102      	movs	r1, #2
 8006de0:	485c      	ldr	r0, [pc, #368]	; (8006f54 <takeMachineID+0x288>)
 8006de2:	f002 fa7f 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d173      	bne.n	8006ed4 <takeMachineID+0x208>
        	HAL_Delay(50);
 8006dec:	2032      	movs	r0, #50	; 0x32
 8006dee:	f001 fca9 	bl	8008744 <HAL_Delay>
        	if(cursorPos == 3) {
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d105      	bne.n	8006e04 <takeMachineID+0x138>
        		eepromData[idStart] = 0;
 8006df8:	4a59      	ldr	r2, [pc, #356]	; (8006f60 <takeMachineID+0x294>)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	e04f      	b.n	8006ea4 <takeMachineID+0x1d8>
        	} else if(cursorPos == 4) {
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d105      	bne.n	8006e16 <takeMachineID+0x14a>
        		eepromData[idStart] = 1;
 8006e0a:	4a55      	ldr	r2, [pc, #340]	; (8006f60 <takeMachineID+0x294>)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4413      	add	r3, r2
 8006e10:	2201      	movs	r2, #1
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	e046      	b.n	8006ea4 <takeMachineID+0x1d8>
        	} else if(cursorPos == 5) {
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	d105      	bne.n	8006e28 <takeMachineID+0x15c>
        		eepromData[idStart] = 2;
 8006e1c:	4a50      	ldr	r2, [pc, #320]	; (8006f60 <takeMachineID+0x294>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	2202      	movs	r2, #2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	e03d      	b.n	8006ea4 <takeMachineID+0x1d8>
        	} else if(cursorPos == 6) {
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b06      	cmp	r3, #6
 8006e2c:	d105      	bne.n	8006e3a <takeMachineID+0x16e>
        		eepromData[idStart] = 3;
 8006e2e:	4a4c      	ldr	r2, [pc, #304]	; (8006f60 <takeMachineID+0x294>)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4413      	add	r3, r2
 8006e34:	2203      	movs	r2, #3
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e034      	b.n	8006ea4 <takeMachineID+0x1d8>
        	} else if(cursorPos == 7) {
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b07      	cmp	r3, #7
 8006e3e:	d105      	bne.n	8006e4c <takeMachineID+0x180>
        		eepromData[idStart] = 4;
 8006e40:	4a47      	ldr	r2, [pc, #284]	; (8006f60 <takeMachineID+0x294>)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	2204      	movs	r2, #4
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e02b      	b.n	8006ea4 <takeMachineID+0x1d8>
        	} else if(cursorPos == 10) {
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b0a      	cmp	r3, #10
 8006e50:	d105      	bne.n	8006e5e <takeMachineID+0x192>
        		eepromData[idStart] = 5;
 8006e52:	4a43      	ldr	r2, [pc, #268]	; (8006f60 <takeMachineID+0x294>)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4413      	add	r3, r2
 8006e58:	2205      	movs	r2, #5
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e022      	b.n	8006ea4 <takeMachineID+0x1d8>
        	} else if(cursorPos == 11) {
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b0b      	cmp	r3, #11
 8006e62:	d105      	bne.n	8006e70 <takeMachineID+0x1a4>
        		eepromData[idStart] = 6;
 8006e64:	4a3e      	ldr	r2, [pc, #248]	; (8006f60 <takeMachineID+0x294>)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4413      	add	r3, r2
 8006e6a:	2206      	movs	r2, #6
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e019      	b.n	8006ea4 <takeMachineID+0x1d8>
        	} else if(cursorPos == 12) {
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b0c      	cmp	r3, #12
 8006e74:	d105      	bne.n	8006e82 <takeMachineID+0x1b6>
        		eepromData[idStart] = 7;
 8006e76:	4a3a      	ldr	r2, [pc, #232]	; (8006f60 <takeMachineID+0x294>)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	2207      	movs	r2, #7
 8006e7e:	701a      	strb	r2, [r3, #0]
 8006e80:	e010      	b.n	8006ea4 <takeMachineID+0x1d8>
        	} else if(cursorPos == 13) {
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b0d      	cmp	r3, #13
 8006e86:	d105      	bne.n	8006e94 <takeMachineID+0x1c8>
        		eepromData[idStart] = 8;
 8006e88:	4a35      	ldr	r2, [pc, #212]	; (8006f60 <takeMachineID+0x294>)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	2208      	movs	r2, #8
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e007      	b.n	8006ea4 <takeMachineID+0x1d8>
        	} else if(cursorPos == 14) {
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b0e      	cmp	r3, #14
 8006e98:	d104      	bne.n	8006ea4 <takeMachineID+0x1d8>
        		eepromData[idStart] = 9;
 8006e9a:	4a31      	ldr	r2, [pc, #196]	; (8006f60 <takeMachineID+0x294>)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	2209      	movs	r2, #9
 8006ea2:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, getIDCharFromCursorPosition(eepromData[idStart]));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	b2dc      	uxtb	r4, r3
 8006ea8:	4a2d      	ldr	r2, [pc, #180]	; (8006f60 <takeMachineID+0x294>)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7f9 fc8b 	bl	80007cc <getIDCharFromCursorPosition>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4621      	mov	r1, r4
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	f000 ff00 	bl	8007cc2 <lcd_print_char>

        	writeLoc++;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	60fb      	str	r3, [r7, #12]
        	idStart++;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	607b      	str	r3, [r7, #4]

        	HAL_Delay(150);
 8006ece:	2096      	movs	r0, #150	; 0x96
 8006ed0:	f001 fc38 	bl	8008744 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006ed4:	2104      	movs	r1, #4
 8006ed6:	481f      	ldr	r0, [pc, #124]	; (8006f54 <takeMachineID+0x288>)
 8006ed8:	f002 fa04 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d128      	bne.n	8006f34 <takeMachineID+0x268>
        	HAL_Delay(50);
 8006ee2:	2032      	movs	r0, #50	; 0x32
 8006ee4:	f001 fc2e 	bl	8008744 <HAL_Delay>
            if(strlen(machineID) >= 1) {
 8006ee8:	4b19      	ldr	r3, [pc, #100]	; (8006f50 <takeMachineID+0x284>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01e      	beq.n	8006f2e <takeMachineID+0x262>

            	if(writeLoc > 5) {
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	dd03      	ble.n	8006efe <takeMachineID+0x232>
            	    writeLoc--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e004      	b.n	8006f08 <takeMachineID+0x23c>
            	} else if(writeLoc < 5) {
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	dc01      	bgt.n	8006f08 <takeMachineID+0x23c>
            	    writeLoc = 5;
 8006f04:	2305      	movs	r3, #5
 8006f06:	60fb      	str	r3, [r7, #12]
            	}

            	idStart--;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	607b      	str	r3, [r7, #4]

            	eepromData[idStart] = '\0';
 8006f0e:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <takeMachineID+0x294>)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	2200      	movs	r2, #0
 8006f16:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+writeLoc);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	4619      	mov	r1, r3
 8006f22:	2001      	movs	r0, #1
 8006f24:	f000 feee 	bl	8007d04 <lcd_delete_char>
                HAL_Delay(50);
 8006f28:	2032      	movs	r0, #50	; 0x32
 8006f2a:	f001 fc0b 	bl	8008744 <HAL_Delay>
            }

            HAL_Delay(150);
 8006f2e:	2096      	movs	r0, #150	; 0x96
 8006f30:	f001 fc08 	bl	8008744 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPos);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	4619      	mov	r1, r3
 8006f3a:	2002      	movs	r0, #2
 8006f3c:	f000 fe8d 	bl	8007c5a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f40:	e6dd      	b.n	8006cfe <takeMachineID+0x32>
    }
}
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd90      	pop	{r4, r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000004 	.word	0x20000004
 8006f50:	200001a4 	.word	0x200001a4
 8006f54:	40010800 	.word	0x40010800
 8006f58:	0800dc60 	.word	0x0800dc60
 8006f5c:	0800dc74 	.word	0x0800dc74
 8006f60:	2000012c 	.word	0x2000012c
 8006f64:	200002b8 	.word	0x200002b8
 8006f68:	40011000 	.word	0x40011000

08006f6c <takeWifiSSID>:

void takeWifiSSID() {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006f72:	2001      	movs	r0, #1
 8006f74:	f000 feee 	bl	8007d54 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006f78:	2214      	movs	r2, #20
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	48a8      	ldr	r0, [pc, #672]	; (8007220 <takeWifiSSID+0x2b4>)
 8006f7e:	f005 fb38 	bl	800c5f2 <memset>
    HAL_Delay(100);
 8006f82:	2064      	movs	r0, #100	; 0x64
 8006f84:	f001 fbde 	bl	8008744 <HAL_Delay>

    int realCharPos = 1;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	613b      	str	r3, [r7, #16]
    int page = 1;
 8006f90:	2301      	movs	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
    int wifiNameLoc = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006f98:	2307      	movs	r3, #7
 8006f9a:	607b      	str	r3, [r7, #4]

    int idStart = ssidStartPos;
 8006f9c:	4ba1      	ldr	r3, [pc, #644]	; (8007224 <takeWifiSSID+0x2b8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	603b      	str	r3, [r7, #0]

    printTemplate(2, 1);
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	2002      	movs	r0, #2
 8006fa6:	f7f9 ff55 	bl	8000e54 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006faa:	2108      	movs	r1, #8
 8006fac:	489e      	ldr	r0, [pc, #632]	; (8007228 <takeWifiSSID+0x2bc>)
 8006fae:	f002 f999 	bl	80092e4 <HAL_GPIO_ReadPin>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d12e      	bne.n	8007016 <takeWifiSSID+0xaa>
        	HAL_Delay(50);
 8006fb8:	2032      	movs	r0, #50	; 0x32
 8006fba:	f001 fbc3 	bl	8008744 <HAL_Delay>
            lcd_cursor(0);
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f000 fec8 	bl	8007d54 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006fc4:	4896      	ldr	r0, [pc, #600]	; (8007220 <takeWifiSSID+0x2b4>)
 8006fc6:	f7f9 f92d 	bl	8000224 <strlen>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b14      	cmp	r3, #20
 8006fce:	d910      	bls.n	8006ff2 <takeWifiSSID+0x86>
                lcd_clear();
 8006fd0:	f000 fe8e 	bl	8007cf0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006fd4:	4a95      	ldr	r2, [pc, #596]	; (800722c <takeWifiSSID+0x2c0>)
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	2001      	movs	r0, #1
 8006fda:	f000 fe5d 	bl	8007c98 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006fde:	4a94      	ldr	r2, [pc, #592]	; (8007230 <takeWifiSSID+0x2c4>)
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	2002      	movs	r0, #2
 8006fe4:	f000 fe58 	bl	8007c98 <lcd_print>
                HAL_Delay(1200);
 8006fe8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006fec:	f001 fbaa 	bl	8008744 <HAL_Delay>
                goto mainSSIDSection;
 8006ff0:	e7bf      	b.n	8006f72 <takeWifiSSID+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ff2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ff6:	9302      	str	r3, [sp, #8]
 8006ff8:	236e      	movs	r3, #110	; 0x6e
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	4b8d      	ldr	r3, [pc, #564]	; (8007234 <takeWifiSSID+0x2c8>)
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	236e      	movs	r3, #110	; 0x6e
 8007002:	2200      	movs	r2, #0
 8007004:	21a0      	movs	r1, #160	; 0xa0
 8007006:	488c      	ldr	r0, [pc, #560]	; (8007238 <takeWifiSSID+0x2cc>)
 8007008:	f002 fc26 	bl	8009858 <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 800700c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007010:	f001 fb98 	bl	8008744 <HAL_Delay>

            break;
 8007014:	e14e      	b.n	80072b4 <takeWifiSSID+0x348>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007016:	2101      	movs	r1, #1
 8007018:	4883      	ldr	r0, [pc, #524]	; (8007228 <takeWifiSSID+0x2bc>)
 800701a:	f002 f963 	bl	80092e4 <HAL_GPIO_ReadPin>
 800701e:	4603      	mov	r3, r0
 8007020:	2b01      	cmp	r3, #1
 8007022:	d153      	bne.n	80070cc <takeWifiSSID+0x160>
        	HAL_Delay(50);
 8007024:	2032      	movs	r0, #50	; 0x32
 8007026:	f001 fb8d 	bl	8008744 <HAL_Delay>

        	realCharPos++;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	3301      	adds	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2b50      	cmp	r3, #80	; 0x50
 8007034:	dd01      	ble.n	800703a <takeWifiSSID+0xce>
        		realCharPos = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	2b10      	cmp	r3, #16
 800703e:	d13f      	bne.n	80070c0 <takeWifiSSID+0x154>
            	if(page == 1) {
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d109      	bne.n	800705a <takeWifiSSID+0xee>
            		cursorPosition = 1;
 8007046:	2301      	movs	r3, #1
 8007048:	613b      	str	r3, [r7, #16]
            		page++;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8007050:	2102      	movs	r1, #2
 8007052:	2002      	movs	r0, #2
 8007054:	f7f9 fefe 	bl	8000e54 <printTemplate>
 8007058:	e035      	b.n	80070c6 <takeWifiSSID+0x15a>
            	} else if(page == 2) {
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b02      	cmp	r3, #2
 800705e:	d109      	bne.n	8007074 <takeWifiSSID+0x108>
            		cursorPosition = 1;
 8007060:	2301      	movs	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
            		page++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3301      	adds	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 800706a:	2103      	movs	r1, #3
 800706c:	2002      	movs	r0, #2
 800706e:	f7f9 fef1 	bl	8000e54 <printTemplate>
 8007072:	e028      	b.n	80070c6 <takeWifiSSID+0x15a>
            	} else if(page == 3) {
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b03      	cmp	r3, #3
 8007078:	d109      	bne.n	800708e <takeWifiSSID+0x122>
            		cursorPosition = 1;
 800707a:	2301      	movs	r3, #1
 800707c:	613b      	str	r3, [r7, #16]
            		page++;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8007084:	2104      	movs	r1, #4
 8007086:	2002      	movs	r0, #2
 8007088:	f7f9 fee4 	bl	8000e54 <printTemplate>
 800708c:	e01b      	b.n	80070c6 <takeWifiSSID+0x15a>
            	} else if(page == 4) {
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d109      	bne.n	80070a8 <takeWifiSSID+0x13c>
            		cursorPosition = 1;
 8007094:	2301      	movs	r3, #1
 8007096:	613b      	str	r3, [r7, #16]
            		page++;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3301      	adds	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 800709e:	2105      	movs	r1, #5
 80070a0:	2002      	movs	r0, #2
 80070a2:	f7f9 fed7 	bl	8000e54 <printTemplate>
 80070a6:	e00e      	b.n	80070c6 <takeWifiSSID+0x15a>
            	} else if(page == 5) {
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b05      	cmp	r3, #5
 80070ac:	d10b      	bne.n	80070c6 <takeWifiSSID+0x15a>
            		cursorPosition = 1;
 80070ae:	2301      	movs	r3, #1
 80070b0:	613b      	str	r3, [r7, #16]
            		page = 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 80070b6:	2101      	movs	r1, #1
 80070b8:	2002      	movs	r0, #2
 80070ba:	f7f9 fecb 	bl	8000e54 <printTemplate>
 80070be:	e002      	b.n	80070c6 <takeWifiSSID+0x15a>
            	}
            } else {
            	cursorPosition++;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	3301      	adds	r3, #1
 80070c4:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 80070c6:	2096      	movs	r0, #150	; 0x96
 80070c8:	f001 fb3c 	bl	8008744 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80070cc:	2108      	movs	r1, #8
 80070ce:	485b      	ldr	r0, [pc, #364]	; (800723c <takeWifiSSID+0x2d0>)
 80070d0:	f002 f908 	bl	80092e4 <HAL_GPIO_ReadPin>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d14f      	bne.n	800717a <takeWifiSSID+0x20e>
        	HAL_Delay(50);
 80070da:	2032      	movs	r0, #50	; 0x32
 80070dc:	f001 fb32 	bl	8008744 <HAL_Delay>

        	realCharPos--;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dc01      	bgt.n	80070f0 <takeWifiSSID+0x184>
        		realCharPos = 80;
 80070ec:	2350      	movs	r3, #80	; 0x50
 80070ee:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d13b      	bne.n	800716e <takeWifiSSID+0x202>
            	if(page == 1) {
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d108      	bne.n	800710e <takeWifiSSID+0x1a2>
            		cursorPosition = 16;
 80070fc:	2310      	movs	r3, #16
 80070fe:	613b      	str	r3, [r7, #16]
            		page = 5;
 8007100:	2305      	movs	r3, #5
 8007102:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8007104:	2105      	movs	r1, #5
 8007106:	2002      	movs	r0, #2
 8007108:	f7f9 fea4 	bl	8000e54 <printTemplate>
 800710c:	e032      	b.n	8007174 <takeWifiSSID+0x208>
            	} else if(page == 2) {
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d108      	bne.n	8007126 <takeWifiSSID+0x1ba>
            		cursorPosition = 16;
 8007114:	2310      	movs	r3, #16
 8007116:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007118:	2301      	movs	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 800711c:	2101      	movs	r1, #1
 800711e:	2002      	movs	r0, #2
 8007120:	f7f9 fe98 	bl	8000e54 <printTemplate>
 8007124:	e026      	b.n	8007174 <takeWifiSSID+0x208>
            	} else if(page == 3) {
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b03      	cmp	r3, #3
 800712a:	d108      	bne.n	800713e <takeWifiSSID+0x1d2>
            		cursorPosition = 16;
 800712c:	2310      	movs	r3, #16
 800712e:	613b      	str	r3, [r7, #16]
            		page = 2;
 8007130:	2302      	movs	r3, #2
 8007132:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8007134:	2102      	movs	r1, #2
 8007136:	2002      	movs	r0, #2
 8007138:	f7f9 fe8c 	bl	8000e54 <printTemplate>
 800713c:	e01a      	b.n	8007174 <takeWifiSSID+0x208>
            	} else if(page == 4) {
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b04      	cmp	r3, #4
 8007142:	d108      	bne.n	8007156 <takeWifiSSID+0x1ea>
            		cursorPosition = 16;
 8007144:	2310      	movs	r3, #16
 8007146:	613b      	str	r3, [r7, #16]
            		page = 3;
 8007148:	2303      	movs	r3, #3
 800714a:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 800714c:	2103      	movs	r1, #3
 800714e:	2002      	movs	r0, #2
 8007150:	f7f9 fe80 	bl	8000e54 <printTemplate>
 8007154:	e00e      	b.n	8007174 <takeWifiSSID+0x208>
            	} else if(page == 5) {
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b05      	cmp	r3, #5
 800715a:	d10b      	bne.n	8007174 <takeWifiSSID+0x208>
            		cursorPosition = 16;
 800715c:	2310      	movs	r3, #16
 800715e:	613b      	str	r3, [r7, #16]
            		page = 4;
 8007160:	2304      	movs	r3, #4
 8007162:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8007164:	2104      	movs	r1, #4
 8007166:	2002      	movs	r0, #2
 8007168:	f7f9 fe74 	bl	8000e54 <printTemplate>
 800716c:	e002      	b.n	8007174 <takeWifiSSID+0x208>
            	}
            } else {
            	cursorPosition--;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	3b01      	subs	r3, #1
 8007172:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007174:	2096      	movs	r0, #150	; 0x96
 8007176:	f001 fae5 	bl	8008744 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800717a:	2102      	movs	r1, #2
 800717c:	482a      	ldr	r0, [pc, #168]	; (8007228 <takeWifiSSID+0x2bc>)
 800717e:	f002 f8b1 	bl	80092e4 <HAL_GPIO_ReadPin>
 8007182:	4603      	mov	r3, r0
 8007184:	2b01      	cmp	r3, #1
 8007186:	d136      	bne.n	80071f6 <takeWifiSSID+0x28a>
        	HAL_Delay(50);
 8007188:	2032      	movs	r0, #50	; 0x32
 800718a:	f001 fadb 	bl	8008744 <HAL_Delay>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	3b01      	subs	r3, #1
 8007192:	4618      	mov	r0, r3
 8007194:	f7f9 fb0a 	bl	80007ac <getCharFromCursorPosition>
 8007198:	4603      	mov	r3, r0
 800719a:	4619      	mov	r1, r3
 800719c:	4a20      	ldr	r2, [pc, #128]	; (8007220 <takeWifiSSID+0x2b4>)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4413      	add	r3, r2
 80071a2:	460a      	mov	r2, r1
 80071a4:	701a      	strb	r2, [r3, #0]
            eepromData[idStart] = realCharPos - 1;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b2d9      	uxtb	r1, r3
 80071ae:	4a21      	ldr	r2, [pc, #132]	; (8007234 <takeWifiSSID+0x2c8>)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	4413      	add	r3, r2
 80071b4:	460a      	mov	r2, r1
 80071b6:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[wifiNameLoc] = realCharPos - 1;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	b2d9      	uxtb	r1, r3
 80071c0:	4a1f      	ldr	r2, [pc, #124]	; (8007240 <takeWifiSSID+0x2d4>)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	4413      	add	r3, r2
 80071c6:	460a      	mov	r2, r1
 80071c8:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	b2d9      	uxtb	r1, r3
 80071ce:	4a14      	ldr	r2, [pc, #80]	; (8007220 <takeWifiSSID+0x2b4>)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4413      	add	r3, r2
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	2001      	movs	r0, #1
 80071da:	f000 fd72 	bl	8007cc2 <lcd_print_char>

            writeLoc++;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3301      	adds	r3, #1
 80071e2:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	3301      	adds	r3, #1
 80071e8:	60bb      	str	r3, [r7, #8]
            idStart++;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	3301      	adds	r3, #1
 80071ee:	603b      	str	r3, [r7, #0]

            HAL_Delay(150);
 80071f0:	2096      	movs	r0, #150	; 0x96
 80071f2:	f001 faa7 	bl	8008744 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80071f6:	2104      	movs	r1, #4
 80071f8:	480b      	ldr	r0, [pc, #44]	; (8007228 <takeWifiSSID+0x2bc>)
 80071fa:	f002 f873 	bl	80092e4 <HAL_GPIO_ReadPin>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b01      	cmp	r3, #1
 8007202:	d150      	bne.n	80072a6 <takeWifiSSID+0x33a>
        	HAL_Delay(50);
 8007204:	2032      	movs	r0, #50	; 0x32
 8007206:	f001 fa9d 	bl	8008744 <HAL_Delay>

        	if(strlen(wifiSSID) >= 1) {
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <takeWifiSSID+0x2b4>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d046      	beq.n	80072a0 <takeWifiSSID+0x334>
        		if(writeLoc > 7) {
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b07      	cmp	r3, #7
 8007216:	dd15      	ble.n	8007244 <takeWifiSSID+0x2d8>
        			writeLoc--;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3b01      	subs	r3, #1
 800721c:	607b      	str	r3, [r7, #4]
 800721e:	e016      	b.n	800724e <takeWifiSSID+0x2e2>
 8007220:	200001b0 	.word	0x200001b0
 8007224:	20000008 	.word	0x20000008
 8007228:	40010800 	.word	0x40010800
 800722c:	0800dc88 	.word	0x0800dc88
 8007230:	0800dc9c 	.word	0x0800dc9c
 8007234:	2000012c 	.word	0x2000012c
 8007238:	200002b8 	.word	0x200002b8
 800723c:	40011000 	.word	0x40011000
 8007240:	200001d8 	.word	0x200001d8
        		} else if(writeLoc < 7) {
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b06      	cmp	r3, #6
 8007248:	dc01      	bgt.n	800724e <takeWifiSSID+0x2e2>
        			writeLoc = 7;
 800724a:	2307      	movs	r3, #7
 800724c:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	dd06      	ble.n	8007262 <takeWifiSSID+0x2f6>
        			wifiNameLoc--;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	3b01      	subs	r3, #1
 8007258:	60bb      	str	r3, [r7, #8]
        			idStart--;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	3b01      	subs	r3, #1
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	e004      	b.n	800726c <takeWifiSSID+0x300>
        		} else if(wifiNameLoc < 0) {
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	da01      	bge.n	800726c <takeWifiSSID+0x300>
        			wifiNameLoc = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
        		}

        		wifiSSID[wifiNameLoc] = '\0';
 800726c:	4a13      	ldr	r2, [pc, #76]	; (80072bc <takeWifiSSID+0x350>)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	4413      	add	r3, r2
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = '\0';
 8007276:	4a12      	ldr	r2, [pc, #72]	; (80072c0 <takeWifiSSID+0x354>)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	4413      	add	r3, r2
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[wifiNameLoc] = '\0';
 8007280:	4a10      	ldr	r2, [pc, #64]	; (80072c4 <takeWifiSSID+0x358>)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	4413      	add	r3, r2
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	3306      	adds	r3, #6
 8007290:	b2db      	uxtb	r3, r3
 8007292:	4619      	mov	r1, r3
 8007294:	2001      	movs	r0, #1
 8007296:	f000 fd35 	bl	8007d04 <lcd_delete_char>
        		HAL_Delay(50);
 800729a:	2032      	movs	r0, #50	; 0x32
 800729c:	f001 fa52 	bl	8008744 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80072a0:	2096      	movs	r0, #150	; 0x96
 80072a2:	f001 fa4f 	bl	8008744 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	4619      	mov	r1, r3
 80072ac:	2002      	movs	r0, #2
 80072ae:	f000 fcd4 	bl	8007c5a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80072b2:	e67a      	b.n	8006faa <takeWifiSSID+0x3e>
    }
}
 80072b4:	bf00      	nop
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	200001b0 	.word	0x200001b0
 80072c0:	2000012c 	.word	0x2000012c
 80072c4:	200001d8 	.word	0x200001d8

080072c8 <takeWifiPass>:

void takeWifiPass() {
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 80072ce:	2001      	movs	r0, #1
 80072d0:	f000 fd40 	bl	8007d54 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 80072d4:	2214      	movs	r2, #20
 80072d6:	2100      	movs	r1, #0
 80072d8:	48a5      	ldr	r0, [pc, #660]	; (8007570 <takeWifiPass+0x2a8>)
 80072da:	f005 f98a 	bl	800c5f2 <memset>
    HAL_Delay(100);
 80072de:	2064      	movs	r0, #100	; 0x64
 80072e0:	f001 fa30 	bl	8008744 <HAL_Delay>

    int realCharPos = 1;
 80072e4:	2301      	movs	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 80072e8:	2301      	movs	r3, #1
 80072ea:	613b      	str	r3, [r7, #16]
    int page = 1;
 80072ec:	2301      	movs	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
    int wifiPassLoc = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 80072f4:	2307      	movs	r3, #7
 80072f6:	607b      	str	r3, [r7, #4]

    int passStart = passStartPos;
 80072f8:	4b9e      	ldr	r3, [pc, #632]	; (8007574 <takeWifiPass+0x2ac>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	603b      	str	r3, [r7, #0]

    printTemplate(3, 1);
 80072fe:	2101      	movs	r1, #1
 8007300:	2003      	movs	r0, #3
 8007302:	f7f9 fda7 	bl	8000e54 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007306:	2108      	movs	r1, #8
 8007308:	489b      	ldr	r0, [pc, #620]	; (8007578 <takeWifiPass+0x2b0>)
 800730a:	f001 ffeb 	bl	80092e4 <HAL_GPIO_ReadPin>
 800730e:	4603      	mov	r3, r0
 8007310:	2b01      	cmp	r3, #1
 8007312:	d12e      	bne.n	8007372 <takeWifiPass+0xaa>
        	HAL_Delay(50);
 8007314:	2032      	movs	r0, #50	; 0x32
 8007316:	f001 fa15 	bl	8008744 <HAL_Delay>
            lcd_cursor(0);
 800731a:	2000      	movs	r0, #0
 800731c:	f000 fd1a 	bl	8007d54 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007320:	4893      	ldr	r0, [pc, #588]	; (8007570 <takeWifiPass+0x2a8>)
 8007322:	f7f8 ff7f 	bl	8000224 <strlen>
 8007326:	4603      	mov	r3, r0
 8007328:	2b14      	cmp	r3, #20
 800732a:	d910      	bls.n	800734e <takeWifiPass+0x86>
                lcd_clear();
 800732c:	f000 fce0 	bl	8007cf0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007330:	4a92      	ldr	r2, [pc, #584]	; (800757c <takeWifiPass+0x2b4>)
 8007332:	2101      	movs	r1, #1
 8007334:	2001      	movs	r0, #1
 8007336:	f000 fcaf 	bl	8007c98 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800733a:	4a91      	ldr	r2, [pc, #580]	; (8007580 <takeWifiPass+0x2b8>)
 800733c:	2101      	movs	r1, #1
 800733e:	2002      	movs	r0, #2
 8007340:	f000 fcaa 	bl	8007c98 <lcd_print>
                HAL_Delay(1200);
 8007344:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007348:	f001 f9fc 	bl	8008744 <HAL_Delay>
                goto mainPASSSection;
 800734c:	e7bf      	b.n	80072ce <takeWifiPass+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800734e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007352:	9302      	str	r3, [sp, #8]
 8007354:	236e      	movs	r3, #110	; 0x6e
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	4b8a      	ldr	r3, [pc, #552]	; (8007584 <takeWifiPass+0x2bc>)
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	236e      	movs	r3, #110	; 0x6e
 800735e:	2200      	movs	r2, #0
 8007360:	21a0      	movs	r1, #160	; 0xa0
 8007362:	4889      	ldr	r0, [pc, #548]	; (8007588 <takeWifiPass+0x2c0>)
 8007364:	f002 fa78 	bl	8009858 <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 8007368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800736c:	f001 f9ea 	bl	8008744 <HAL_Delay>

            break;
 8007370:	e14a      	b.n	8007608 <takeWifiPass+0x340>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007372:	2101      	movs	r1, #1
 8007374:	4880      	ldr	r0, [pc, #512]	; (8007578 <takeWifiPass+0x2b0>)
 8007376:	f001 ffb5 	bl	80092e4 <HAL_GPIO_ReadPin>
 800737a:	4603      	mov	r3, r0
 800737c:	2b01      	cmp	r3, #1
 800737e:	d153      	bne.n	8007428 <takeWifiPass+0x160>
        	HAL_Delay(50);
 8007380:	2032      	movs	r0, #50	; 0x32
 8007382:	f001 f9df 	bl	8008744 <HAL_Delay>

        	realCharPos++;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	3301      	adds	r3, #1
 800738a:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2b50      	cmp	r3, #80	; 0x50
 8007390:	dd01      	ble.n	8007396 <takeWifiPass+0xce>
        	    realCharPos = 1;
 8007392:	2301      	movs	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b10      	cmp	r3, #16
 800739a:	d13f      	bne.n	800741c <takeWifiPass+0x154>
            	if(page == 1) {
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d109      	bne.n	80073b6 <takeWifiPass+0xee>
            		cursorPosition = 1;
 80073a2:	2301      	movs	r3, #1
 80073a4:	613b      	str	r3, [r7, #16]
            		page++;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3301      	adds	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 80073ac:	2102      	movs	r1, #2
 80073ae:	2003      	movs	r0, #3
 80073b0:	f7f9 fd50 	bl	8000e54 <printTemplate>
 80073b4:	e035      	b.n	8007422 <takeWifiPass+0x15a>
            	} else if(page == 2) {
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d109      	bne.n	80073d0 <takeWifiPass+0x108>
            		cursorPosition = 1;
 80073bc:	2301      	movs	r3, #1
 80073be:	613b      	str	r3, [r7, #16]
            		page++;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 80073c6:	2103      	movs	r1, #3
 80073c8:	2003      	movs	r0, #3
 80073ca:	f7f9 fd43 	bl	8000e54 <printTemplate>
 80073ce:	e028      	b.n	8007422 <takeWifiPass+0x15a>
            	} else if(page == 3) {
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d109      	bne.n	80073ea <takeWifiPass+0x122>
            		cursorPosition = 1;
 80073d6:	2301      	movs	r3, #1
 80073d8:	613b      	str	r3, [r7, #16]
            		page++;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3301      	adds	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 80073e0:	2104      	movs	r1, #4
 80073e2:	2003      	movs	r0, #3
 80073e4:	f7f9 fd36 	bl	8000e54 <printTemplate>
 80073e8:	e01b      	b.n	8007422 <takeWifiPass+0x15a>
            	} else if(page == 4) {
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d109      	bne.n	8007404 <takeWifiPass+0x13c>
            		cursorPosition = 1;
 80073f0:	2301      	movs	r3, #1
 80073f2:	613b      	str	r3, [r7, #16]
            		page++;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3301      	adds	r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 80073fa:	2105      	movs	r1, #5
 80073fc:	2003      	movs	r0, #3
 80073fe:	f7f9 fd29 	bl	8000e54 <printTemplate>
 8007402:	e00e      	b.n	8007422 <takeWifiPass+0x15a>
            	} else if(page == 5) {
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b05      	cmp	r3, #5
 8007408:	d10b      	bne.n	8007422 <takeWifiPass+0x15a>
            		cursorPosition = 1;
 800740a:	2301      	movs	r3, #1
 800740c:	613b      	str	r3, [r7, #16]
            		page = 1;
 800740e:	2301      	movs	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 8007412:	2101      	movs	r1, #1
 8007414:	2003      	movs	r0, #3
 8007416:	f7f9 fd1d 	bl	8000e54 <printTemplate>
 800741a:	e002      	b.n	8007422 <takeWifiPass+0x15a>
            	}
            } else {
            	cursorPosition++;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	3301      	adds	r3, #1
 8007420:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007422:	2096      	movs	r0, #150	; 0x96
 8007424:	f001 f98e 	bl	8008744 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007428:	2108      	movs	r1, #8
 800742a:	4858      	ldr	r0, [pc, #352]	; (800758c <takeWifiPass+0x2c4>)
 800742c:	f001 ff5a 	bl	80092e4 <HAL_GPIO_ReadPin>
 8007430:	4603      	mov	r3, r0
 8007432:	2b01      	cmp	r3, #1
 8007434:	d14f      	bne.n	80074d6 <takeWifiPass+0x20e>
        	HAL_Delay(50);
 8007436:	2032      	movs	r0, #50	; 0x32
 8007438:	f001 f984 	bl	8008744 <HAL_Delay>

        	realCharPos--;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	3b01      	subs	r3, #1
 8007440:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	dc01      	bgt.n	800744c <takeWifiPass+0x184>
        	    realCharPos = 80;
 8007448:	2350      	movs	r3, #80	; 0x50
 800744a:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d13b      	bne.n	80074ca <takeWifiPass+0x202>
            	if(page == 1) {
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d108      	bne.n	800746a <takeWifiPass+0x1a2>
            		cursorPosition = 16;
 8007458:	2310      	movs	r3, #16
 800745a:	613b      	str	r3, [r7, #16]
            		page = 5;
 800745c:	2305      	movs	r3, #5
 800745e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 8007460:	2105      	movs	r1, #5
 8007462:	2003      	movs	r0, #3
 8007464:	f7f9 fcf6 	bl	8000e54 <printTemplate>
 8007468:	e032      	b.n	80074d0 <takeWifiPass+0x208>
            	} else if(page == 2) {
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b02      	cmp	r3, #2
 800746e:	d108      	bne.n	8007482 <takeWifiPass+0x1ba>
            		cursorPosition = 16;
 8007470:	2310      	movs	r3, #16
 8007472:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007474:	2301      	movs	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 8007478:	2101      	movs	r1, #1
 800747a:	2003      	movs	r0, #3
 800747c:	f7f9 fcea 	bl	8000e54 <printTemplate>
 8007480:	e026      	b.n	80074d0 <takeWifiPass+0x208>
            	} else if(page == 3) {
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d108      	bne.n	800749a <takeWifiPass+0x1d2>
            		cursorPosition = 16;
 8007488:	2310      	movs	r3, #16
 800748a:	613b      	str	r3, [r7, #16]
            		page = 2;
 800748c:	2302      	movs	r3, #2
 800748e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007490:	2102      	movs	r1, #2
 8007492:	2003      	movs	r0, #3
 8007494:	f7f9 fcde 	bl	8000e54 <printTemplate>
 8007498:	e01a      	b.n	80074d0 <takeWifiPass+0x208>
            	} else if(page == 4) {
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b04      	cmp	r3, #4
 800749e:	d108      	bne.n	80074b2 <takeWifiPass+0x1ea>
            		cursorPosition = 16;
 80074a0:	2310      	movs	r3, #16
 80074a2:	613b      	str	r3, [r7, #16]
            		page = 3;
 80074a4:	2303      	movs	r3, #3
 80074a6:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 80074a8:	2103      	movs	r1, #3
 80074aa:	2003      	movs	r0, #3
 80074ac:	f7f9 fcd2 	bl	8000e54 <printTemplate>
 80074b0:	e00e      	b.n	80074d0 <takeWifiPass+0x208>
            	} else if(page == 5) {
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b05      	cmp	r3, #5
 80074b6:	d10b      	bne.n	80074d0 <takeWifiPass+0x208>
            		cursorPosition = 16;
 80074b8:	2310      	movs	r3, #16
 80074ba:	613b      	str	r3, [r7, #16]
            		page = 4;
 80074bc:	2304      	movs	r3, #4
 80074be:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 80074c0:	2104      	movs	r1, #4
 80074c2:	2003      	movs	r0, #3
 80074c4:	f7f9 fcc6 	bl	8000e54 <printTemplate>
 80074c8:	e002      	b.n	80074d0 <takeWifiPass+0x208>
            	}
            } else {
            	cursorPosition--;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 80074d0:	2096      	movs	r0, #150	; 0x96
 80074d2:	f001 f937 	bl	8008744 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80074d6:	2102      	movs	r1, #2
 80074d8:	4827      	ldr	r0, [pc, #156]	; (8007578 <takeWifiPass+0x2b0>)
 80074da:	f001 ff03 	bl	80092e4 <HAL_GPIO_ReadPin>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d133      	bne.n	800754c <takeWifiPass+0x284>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7f9 f95f 	bl	80007ac <getCharFromCursorPosition>
 80074ee:	4603      	mov	r3, r0
 80074f0:	4619      	mov	r1, r3
 80074f2:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <takeWifiPass+0x2a8>)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4413      	add	r3, r2
 80074f8:	460a      	mov	r2, r1
 80074fa:	701a      	strb	r2, [r3, #0]
        	eepromData[passStart] = realCharPos - 1;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	3b01      	subs	r3, #1
 8007502:	b2d9      	uxtb	r1, r3
 8007504:	4a1f      	ldr	r2, [pc, #124]	; (8007584 <takeWifiPass+0x2bc>)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	4413      	add	r3, r2
 800750a:	460a      	mov	r2, r1
 800750c:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[wifiPassLoc] = realCharPos - 1;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b2d9      	uxtb	r1, r3
 8007516:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <takeWifiPass+0x2c8>)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4413      	add	r3, r2
 800751c:	460a      	mov	r2, r1
 800751e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	b2d9      	uxtb	r1, r3
 8007524:	4a12      	ldr	r2, [pc, #72]	; (8007570 <takeWifiPass+0x2a8>)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	2001      	movs	r0, #1
 8007530:	f000 fbc7 	bl	8007cc2 <lcd_print_char>

            writeLoc++;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3301      	adds	r3, #1
 8007538:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	3301      	adds	r3, #1
 800753e:	60bb      	str	r3, [r7, #8]
            passStart++;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	603b      	str	r3, [r7, #0]

            HAL_Delay(150);
 8007546:	2096      	movs	r0, #150	; 0x96
 8007548:	f001 f8fc 	bl	8008744 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800754c:	2104      	movs	r1, #4
 800754e:	480a      	ldr	r0, [pc, #40]	; (8007578 <takeWifiPass+0x2b0>)
 8007550:	f001 fec8 	bl	80092e4 <HAL_GPIO_ReadPin>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d14f      	bne.n	80075fa <takeWifiPass+0x332>
            if(strlen(wifiPass) >= 1) {
 800755a:	4b05      	ldr	r3, [pc, #20]	; (8007570 <takeWifiPass+0x2a8>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d048      	beq.n	80075f4 <takeWifiPass+0x32c>
            	if(writeLoc > 7) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b07      	cmp	r3, #7
 8007566:	dd15      	ble.n	8007594 <takeWifiPass+0x2cc>
            		writeLoc--;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3b01      	subs	r3, #1
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	e016      	b.n	800759e <takeWifiPass+0x2d6>
 8007570:	200001c4 	.word	0x200001c4
 8007574:	2000000c 	.word	0x2000000c
 8007578:	40010800 	.word	0x40010800
 800757c:	0800dc88 	.word	0x0800dc88
 8007580:	0800dcb0 	.word	0x0800dcb0
 8007584:	2000012c 	.word	0x2000012c
 8007588:	200002b8 	.word	0x200002b8
 800758c:	40011000 	.word	0x40011000
 8007590:	200001ec 	.word	0x200001ec
            	} else if(writeLoc < 7) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b06      	cmp	r3, #6
 8007598:	dc01      	bgt.n	800759e <takeWifiPass+0x2d6>
            		writeLoc = 7;
 800759a:	2307      	movs	r3, #7
 800759c:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dd08      	ble.n	80075b6 <takeWifiPass+0x2ee>
            		wifiPassLoc--;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	60bb      	str	r3, [r7, #8]
            		passStartPos--;
 80075aa:	4b19      	ldr	r3, [pc, #100]	; (8007610 <takeWifiPass+0x348>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	4a17      	ldr	r2, [pc, #92]	; (8007610 <takeWifiPass+0x348>)
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	e004      	b.n	80075c0 <takeWifiPass+0x2f8>
            	} else if(wifiPassLoc < 0) {
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da01      	bge.n	80075c0 <takeWifiPass+0x2f8>
            		wifiPassLoc = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	60bb      	str	r3, [r7, #8]
            	}

            	wifiPass[wifiPassLoc] = '\0';
 80075c0:	4a14      	ldr	r2, [pc, #80]	; (8007614 <takeWifiPass+0x34c>)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	4413      	add	r3, r2
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
            	eepromData[passStartPos] = '\0';
 80075ca:	4b11      	ldr	r3, [pc, #68]	; (8007610 <takeWifiPass+0x348>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a12      	ldr	r2, [pc, #72]	; (8007618 <takeWifiPass+0x350>)
 80075d0:	2100      	movs	r1, #0
 80075d2:	54d1      	strb	r1, [r2, r3]
            	wifiPassInt[wifiPassLoc] = '\0';
 80075d4:	4a11      	ldr	r2, [pc, #68]	; (800761c <takeWifiPass+0x354>)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	4413      	add	r3, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	3306      	adds	r3, #6
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4619      	mov	r1, r3
 80075e8:	2001      	movs	r0, #1
 80075ea:	f000 fb8b 	bl	8007d04 <lcd_delete_char>
            	HAL_Delay(50);
 80075ee:	2032      	movs	r0, #50	; 0x32
 80075f0:	f001 f8a8 	bl	8008744 <HAL_Delay>
            }

            HAL_Delay(150);
 80075f4:	2096      	movs	r0, #150	; 0x96
 80075f6:	f001 f8a5 	bl	8008744 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4619      	mov	r1, r3
 8007600:	2002      	movs	r0, #2
 8007602:	f000 fb2a 	bl	8007c5a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007606:	e67e      	b.n	8007306 <takeWifiPass+0x3e>
    }
}
 8007608:	bf00      	nop
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	2000000c 	.word	0x2000000c
 8007614:	200001c4 	.word	0x200001c4
 8007618:	2000012c 	.word	0x2000012c
 800761c:	200001ec 	.word	0x200001ec

08007620 <mergeData>:

char* mergeData() {
 8007620:	b580      	push	{r7, lr}
 8007622:	b09c      	sub	sp, #112	; 0x70
 8007624:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007626:	2300      	movs	r3, #0
 8007628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800762a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800762e:	2228      	movs	r2, #40	; 0x28
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f004 ffdd 	bl	800c5f2 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007638:	4b67      	ldr	r3, [pc, #412]	; (80077d8 <mergeData+0x1b8>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	713b      	strb	r3, [r7, #4]
 800763e:	4b67      	ldr	r3, [pc, #412]	; (80077dc <mergeData+0x1bc>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	717b      	strb	r3, [r7, #5]
 8007644:	4b66      	ldr	r3, [pc, #408]	; (80077e0 <mergeData+0x1c0>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	71bb      	strb	r3, [r7, #6]
 800764a:	4b66      	ldr	r3, [pc, #408]	; (80077e4 <mergeData+0x1c4>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	71fb      	strb	r3, [r7, #7]
 8007650:	4b65      	ldr	r3, [pc, #404]	; (80077e8 <mergeData+0x1c8>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	723b      	strb	r3, [r7, #8]
 8007656:	4b65      	ldr	r3, [pc, #404]	; (80077ec <mergeData+0x1cc>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	727b      	strb	r3, [r7, #9]
 800765c:	4b64      	ldr	r3, [pc, #400]	; (80077f0 <mergeData+0x1d0>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	72bb      	strb	r3, [r7, #10]
 8007662:	4b64      	ldr	r3, [pc, #400]	; (80077f4 <mergeData+0x1d4>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	72fb      	strb	r3, [r7, #11]
 8007668:	4b63      	ldr	r3, [pc, #396]	; (80077f8 <mergeData+0x1d8>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	733b      	strb	r3, [r7, #12]
 800766e:	4b63      	ldr	r3, [pc, #396]	; (80077fc <mergeData+0x1dc>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	737b      	strb	r3, [r7, #13]
 8007674:	4b62      	ldr	r3, [pc, #392]	; (8007800 <mergeData+0x1e0>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	73bb      	strb	r3, [r7, #14]
 800767a:	4b62      	ldr	r3, [pc, #392]	; (8007804 <mergeData+0x1e4>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	73fb      	strb	r3, [r7, #15]
 8007680:	4b61      	ldr	r3, [pc, #388]	; (8007808 <mergeData+0x1e8>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	743b      	strb	r3, [r7, #16]
 8007686:	4b61      	ldr	r3, [pc, #388]	; (800780c <mergeData+0x1ec>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	747b      	strb	r3, [r7, #17]
 800768c:	4b60      	ldr	r3, [pc, #384]	; (8007810 <mergeData+0x1f0>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	74bb      	strb	r3, [r7, #18]
 8007692:	4b60      	ldr	r3, [pc, #384]	; (8007814 <mergeData+0x1f4>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	74fb      	strb	r3, [r7, #19]
 8007698:	4b5f      	ldr	r3, [pc, #380]	; (8007818 <mergeData+0x1f8>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	753b      	strb	r3, [r7, #20]
 800769e:	4b5f      	ldr	r3, [pc, #380]	; (800781c <mergeData+0x1fc>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	757b      	strb	r3, [r7, #21]
 80076a4:	4b5e      	ldr	r3, [pc, #376]	; (8007820 <mergeData+0x200>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	75bb      	strb	r3, [r7, #22]
 80076aa:	4b5e      	ldr	r3, [pc, #376]	; (8007824 <mergeData+0x204>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	75fb      	strb	r3, [r7, #23]
 80076b0:	4b5d      	ldr	r3, [pc, #372]	; (8007828 <mergeData+0x208>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	763b      	strb	r3, [r7, #24]
 80076b6:	4b5d      	ldr	r3, [pc, #372]	; (800782c <mergeData+0x20c>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	767b      	strb	r3, [r7, #25]
 80076bc:	4b5c      	ldr	r3, [pc, #368]	; (8007830 <mergeData+0x210>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	76bb      	strb	r3, [r7, #26]
 80076c2:	4b5c      	ldr	r3, [pc, #368]	; (8007834 <mergeData+0x214>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	76fb      	strb	r3, [r7, #27]
 80076c8:	4b5b      	ldr	r3, [pc, #364]	; (8007838 <mergeData+0x218>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	773b      	strb	r3, [r7, #28]
 80076ce:	4b5b      	ldr	r3, [pc, #364]	; (800783c <mergeData+0x21c>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	777b      	strb	r3, [r7, #29]
 80076d4:	4b5a      	ldr	r3, [pc, #360]	; (8007840 <mergeData+0x220>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	77bb      	strb	r3, [r7, #30]
 80076da:	4b5a      	ldr	r3, [pc, #360]	; (8007844 <mergeData+0x224>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	4b59      	ldr	r3, [pc, #356]	; (8007848 <mergeData+0x228>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	f887 3020 	strb.w	r3, [r7, #32]
 80076e8:	4b58      	ldr	r3, [pc, #352]	; (800784c <mergeData+0x22c>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80076f0:	4b57      	ldr	r3, [pc, #348]	; (8007850 <mergeData+0x230>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076f8:	4b56      	ldr	r3, [pc, #344]	; (8007854 <mergeData+0x234>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007700:	4b55      	ldr	r3, [pc, #340]	; (8007858 <mergeData+0x238>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007708:	4b54      	ldr	r3, [pc, #336]	; (800785c <mergeData+0x23c>)
 800770a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800770e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007712:	4b52      	ldr	r3, [pc, #328]	; (800785c <mergeData+0x23c>)
 8007714:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 800771c:	4b4f      	ldr	r3, [pc, #316]	; (800785c <mergeData+0x23c>)
 800771e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007726:	4b4d      	ldr	r3, [pc, #308]	; (800785c <mergeData+0x23c>)
 8007728:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800772c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007730:	4b4a      	ldr	r3, [pc, #296]	; (800785c <mergeData+0x23c>)
 8007732:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007736:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800773a:	4b48      	ldr	r3, [pc, #288]	; (800785c <mergeData+0x23c>)
 800773c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007744:	4b45      	ldr	r3, [pc, #276]	; (800785c <mergeData+0x23c>)
 8007746:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800774a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800774e:	4b43      	ldr	r3, [pc, #268]	; (800785c <mergeData+0x23c>)
 8007750:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007754:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007758:	4b40      	ldr	r3, [pc, #256]	; (800785c <mergeData+0x23c>)
 800775a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800775e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007762:	4b3e      	ldr	r3, [pc, #248]	; (800785c <mergeData+0x23c>)
 8007764:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007768:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800776c:	2306      	movs	r3, #6
 800776e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007772:	2300      	movs	r3, #0
 8007774:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007776:	e015      	b.n	80077a4 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007778:	1d3a      	adds	r2, r7, #4
 800777a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777c:	4413      	add	r3, r2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007786:	4936      	ldr	r1, [pc, #216]	; (8007860 <mergeData+0x240>)
 8007788:	4618      	mov	r0, r3
 800778a:	f004 fec1 	bl	800c510 <siprintf>
	    strcat(combinedString, temp);
 800778e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007792:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f004 ff1b 	bl	800c5d4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800779e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a0:	3301      	adds	r3, #1
 80077a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a6:	2b2b      	cmp	r3, #43	; 0x2b
 80077a8:	d9e6      	bls.n	8007778 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80077aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7f8 fd38 	bl	8000224 <strlen>
 80077b4:	4603      	mov	r3, r0
 80077b6:	3301      	adds	r3, #1
 80077b8:	4618      	mov	r0, r3
 80077ba:	f004 fdc1 	bl	800c340 <malloc>
 80077be:	4603      	mov	r3, r0
 80077c0:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80077c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077c6:	4619      	mov	r1, r3
 80077c8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80077ca:	f004 ff57 	bl	800c67c <strcpy>
	return result;
 80077ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3770      	adds	r7, #112	; 0x70
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000237 	.word	0x20000237
 80077dc:	20000229 	.word	0x20000229
 80077e0:	2000022c 	.word	0x2000022c
 80077e4:	2000022d 	.word	0x2000022d
 80077e8:	2000022e 	.word	0x2000022e
 80077ec:	20000235 	.word	0x20000235
 80077f0:	2000022f 	.word	0x2000022f
 80077f4:	20000230 	.word	0x20000230
 80077f8:	20000234 	.word	0x20000234
 80077fc:	20000231 	.word	0x20000231
 8007800:	20000241 	.word	0x20000241
 8007804:	20000232 	.word	0x20000232
 8007808:	20000242 	.word	0x20000242
 800780c:	20000233 	.word	0x20000233
 8007810:	20000243 	.word	0x20000243
 8007814:	20000236 	.word	0x20000236
 8007818:	20000238 	.word	0x20000238
 800781c:	20000239 	.word	0x20000239
 8007820:	2000023a 	.word	0x2000023a
 8007824:	2000023b 	.word	0x2000023b
 8007828:	2000023c 	.word	0x2000023c
 800782c:	2000023d 	.word	0x2000023d
 8007830:	2000023e 	.word	0x2000023e
 8007834:	2000023f 	.word	0x2000023f
 8007838:	20000240 	.word	0x20000240
 800783c:	20000244 	.word	0x20000244
 8007840:	20000246 	.word	0x20000246
 8007844:	20000225 	.word	0x20000225
 8007848:	20000226 	.word	0x20000226
 800784c:	20000000 	.word	0x20000000
 8007850:	20000001 	.word	0x20000001
 8007854:	20000227 	.word	0x20000227
 8007858:	20000249 	.word	0x20000249
 800785c:	2000012c 	.word	0x2000012c
 8007860:	0800dcc4 	.word	0x0800dcc4

08007864 <convertAndSendData>:

void convertAndSendData() {
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800786a:	4b1a      	ldr	r3, [pc, #104]	; (80078d4 <convertAndSendData+0x70>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007872:	4a19      	ldr	r2, [pc, #100]	; (80078d8 <convertAndSendData+0x74>)
 8007874:	2101      	movs	r1, #1
 8007876:	2001      	movs	r0, #1
 8007878:	f000 fa0e 	bl	8007c98 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 800787c:	4a17      	ldr	r2, [pc, #92]	; (80078dc <convertAndSendData+0x78>)
 800787e:	2101      	movs	r1, #1
 8007880:	2002      	movs	r0, #2
 8007882:	f000 fa09 	bl	8007c98 <lcd_print>
 8007886:	e009      	b.n	800789c <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007888:	4a15      	ldr	r2, [pc, #84]	; (80078e0 <convertAndSendData+0x7c>)
 800788a:	2101      	movs	r1, #1
 800788c:	2001      	movs	r0, #1
 800788e:	f000 fa03 	bl	8007c98 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007892:	4a14      	ldr	r2, [pc, #80]	; (80078e4 <convertAndSendData+0x80>)
 8007894:	2101      	movs	r1, #1
 8007896:	2002      	movs	r0, #2
 8007898:	f000 f9fe 	bl	8007c98 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 800789c:	2300      	movs	r3, #0
 800789e:	607b      	str	r3, [r7, #4]
 80078a0:	e00a      	b.n	80078b8 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80078a2:	f7ff febd 	bl	8007620 <mergeData>
 80078a6:	4603      	mov	r3, r0
 80078a8:	461a      	mov	r2, r3
 80078aa:	490f      	ldr	r1, [pc, #60]	; (80078e8 <convertAndSendData+0x84>)
 80078ac:	480f      	ldr	r0, [pc, #60]	; (80078ec <convertAndSendData+0x88>)
 80078ae:	f7f9 f85f 	bl	8000970 <sendMachineData>
	for(int i=0; i<2; i++) {
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3301      	adds	r3, #1
 80078b6:	607b      	str	r3, [r7, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	ddf1      	ble.n	80078a2 <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 80078be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078c2:	f000 ff3f 	bl	8008744 <HAL_Delay>
	lcd_clear();
 80078c6:	f000 fa13 	bl	8007cf0 <lcd_clear>
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20000249 	.word	0x20000249
 80078d8:	0800dcc8 	.word	0x0800dcc8
 80078dc:	0800dcdc 	.word	0x0800dcdc
 80078e0:	0800dcf0 	.word	0x0800dcf0
 80078e4:	0800dd04 	.word	0x0800dd04
 80078e8:	200001a4 	.word	0x200001a4
 80078ec:	20000354 	.word	0x20000354

080078f0 <iotSetup>:

void iotSetup() {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80078f4:	4b17      	ldr	r3, [pc, #92]	; (8007954 <iotSetup+0x64>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01d      	beq.n	8007938 <iotSetup+0x48>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <iotSetup+0x68>)
 80078fe:	7adb      	ldrb	r3, [r3, #11]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <iotSetup+0x18>
			takeMachineID();
 8007904:	f7ff f9e2 	bl	8006ccc <takeMachineID>
		}
		HAL_Delay(500);
 8007908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800790c:	f000 ff1a 	bl	8008744 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 8007910:	4b12      	ldr	r3, [pc, #72]	; (800795c <iotSetup+0x6c>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <iotSetup+0x2c>
			takeWifiSSID();
 8007918:	f7ff fb28 	bl	8006f6c <takeWifiSSID>
		}
		HAL_Delay(500);
 800791c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007920:	f000 ff10 	bl	8008744 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 8007924:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <iotSetup+0x70>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <iotSetup+0x40>
			takeWifiPass();
 800792c:	f7ff fccc 	bl	80072c8 <takeWifiPass>
		}
		HAL_Delay(500);
 8007930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007934:	f000 ff06 	bl	8008744 <HAL_Delay>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007938:	4a09      	ldr	r2, [pc, #36]	; (8007960 <iotSetup+0x70>)
 800793a:	4908      	ldr	r1, [pc, #32]	; (800795c <iotSetup+0x6c>)
 800793c:	4809      	ldr	r0, [pc, #36]	; (8007964 <iotSetup+0x74>)
 800793e:	f7f8 ffd9 	bl	80008f4 <ESP8266_Init>
	HAL_Delay(500);
 8007942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007946:	f000 fefd 	bl	8008744 <HAL_Delay>
	convertAndSendData();
 800794a:	f7ff ff8b 	bl	8007864 <convertAndSendData>
}
 800794e:	bf00      	nop
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000247 	.word	0x20000247
 8007958:	200001a4 	.word	0x200001a4
 800795c:	200001b0 	.word	0x200001b0
 8007960:	200001c4 	.word	0x200001c4
 8007964:	20000354 	.word	0x20000354

08007968 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af02      	add	r7, sp, #8
 800796e:	4603      	mov	r3, r0
 8007970:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007972:	79fb      	ldrb	r3, [r7, #7]
 8007974:	f023 030f 	bic.w	r3, r3, #15
 8007978:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007980:	7b7b      	ldrb	r3, [r7, #13]
 8007982:	f043 030c 	orr.w	r3, r3, #12
 8007986:	b2db      	uxtb	r3, r3
 8007988:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800798a:	7b7b      	ldrb	r3, [r7, #13]
 800798c:	f043 0308 	orr.w	r3, r3, #8
 8007990:	b2db      	uxtb	r3, r3
 8007992:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007994:	7b3b      	ldrb	r3, [r7, #12]
 8007996:	f043 030c 	orr.w	r3, r3, #12
 800799a:	b2db      	uxtb	r3, r3
 800799c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800799e:	7b3b      	ldrb	r3, [r7, #12]
 80079a0:	f043 0308 	orr.w	r3, r3, #8
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079a8:	bf00      	nop
 80079aa:	4825      	ldr	r0, [pc, #148]	; (8007a40 <lcd_send_cmd+0xd8>)
 80079ac:	f002 fac3 	bl	8009f36 <HAL_I2C_GetError>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d0f9      	beq.n	80079aa <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80079b6:	bf00      	nop
 80079b8:	4821      	ldr	r0, [pc, #132]	; (8007a40 <lcd_send_cmd+0xd8>)
 80079ba:	f002 faaf 	bl	8009f1c <HAL_I2C_GetState>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	d1f9      	bne.n	80079b8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80079c4:	4b1f      	ldr	r3, [pc, #124]	; (8007a44 <lcd_send_cmd+0xdc>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d116      	bne.n	80079fa <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80079cc:	2300      	movs	r3, #0
 80079ce:	73fb      	strb	r3, [r7, #15]
 80079d0:	e00f      	b.n	80079f2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	3310      	adds	r3, #16
 80079d6:	443b      	add	r3, r7
 80079d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	f022 0208 	bic.w	r2, r2, #8
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	3310      	adds	r3, #16
 80079e6:	443b      	add	r3, r7
 80079e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	3301      	adds	r3, #1
 80079f0:	73fb      	strb	r3, [r7, #15]
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d9ec      	bls.n	80079d2 <lcd_send_cmd+0x6a>
 80079f8:	e015      	b.n	8007a26 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80079fa:	2300      	movs	r3, #0
 80079fc:	73bb      	strb	r3, [r7, #14]
 80079fe:	e00f      	b.n	8007a20 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	3310      	adds	r3, #16
 8007a04:	443b      	add	r3, r7
 8007a06:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	f042 0208 	orr.w	r2, r2, #8
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	3310      	adds	r3, #16
 8007a14:	443b      	add	r3, r7
 8007a16:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	73bb      	strb	r3, [r7, #14]
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d9ec      	bls.n	8007a00 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a26:	f107 0208 	add.w	r2, r7, #8
 8007a2a:	2364      	movs	r3, #100	; 0x64
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	2304      	movs	r3, #4
 8007a30:	214e      	movs	r1, #78	; 0x4e
 8007a32:	4803      	ldr	r0, [pc, #12]	; (8007a40 <lcd_send_cmd+0xd8>)
 8007a34:	f001 fe12 	bl	800965c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200002b8 	.word	0x200002b8
 8007a44:	2000028c 	.word	0x2000028c

08007a48 <lcd_send_data>:

void lcd_send_data (char data) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	f023 030f 	bic.w	r3, r3, #15
 8007a58:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007a60:	7b7b      	ldrb	r3, [r7, #13]
 8007a62:	f043 030d 	orr.w	r3, r3, #13
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007a6a:	7b7b      	ldrb	r3, [r7, #13]
 8007a6c:	f043 0309 	orr.w	r3, r3, #9
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007a74:	7b3b      	ldrb	r3, [r7, #12]
 8007a76:	f043 030d 	orr.w	r3, r3, #13
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007a7e:	7b3b      	ldrb	r3, [r7, #12]
 8007a80:	f043 0309 	orr.w	r3, r3, #9
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a88:	bf00      	nop
 8007a8a:	4825      	ldr	r0, [pc, #148]	; (8007b20 <lcd_send_data+0xd8>)
 8007a8c:	f002 fa53 	bl	8009f36 <HAL_I2C_GetError>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d0f9      	beq.n	8007a8a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a96:	bf00      	nop
 8007a98:	4821      	ldr	r0, [pc, #132]	; (8007b20 <lcd_send_data+0xd8>)
 8007a9a:	f002 fa3f 	bl	8009f1c <HAL_I2C_GetState>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d1f9      	bne.n	8007a98 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007aa4:	4b1f      	ldr	r3, [pc, #124]	; (8007b24 <lcd_send_data+0xdc>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d116      	bne.n	8007ada <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]
 8007ab0:	e00f      	b.n	8007ad2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	3310      	adds	r3, #16
 8007ab6:	443b      	add	r3, r7
 8007ab8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	f022 0208 	bic.w	r2, r2, #8
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	3310      	adds	r3, #16
 8007ac6:	443b      	add	r3, r7
 8007ac8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	73fb      	strb	r3, [r7, #15]
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d9ec      	bls.n	8007ab2 <lcd_send_data+0x6a>
 8007ad8:	e015      	b.n	8007b06 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007ada:	2300      	movs	r3, #0
 8007adc:	73bb      	strb	r3, [r7, #14]
 8007ade:	e00f      	b.n	8007b00 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	3310      	adds	r3, #16
 8007ae4:	443b      	add	r3, r7
 8007ae6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	f042 0208 	orr.w	r2, r2, #8
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	3310      	adds	r3, #16
 8007af4:	443b      	add	r3, r7
 8007af6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	3301      	adds	r3, #1
 8007afe:	73bb      	strb	r3, [r7, #14]
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d9ec      	bls.n	8007ae0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b06:	f107 0208 	add.w	r2, r7, #8
 8007b0a:	2364      	movs	r3, #100	; 0x64
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	2304      	movs	r3, #4
 8007b10:	214e      	movs	r1, #78	; 0x4e
 8007b12:	4803      	ldr	r0, [pc, #12]	; (8007b20 <lcd_send_data+0xd8>)
 8007b14:	f001 fda2 	bl	800965c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	200002b8 	.word	0x200002b8
 8007b24:	2000028c 	.word	0x2000028c

08007b28 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007b30:	e006      	b.n	8007b40 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff ff84 	bl	8007a48 <lcd_send_data>
	while (*str) {
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f4      	bne.n	8007b32 <lcd_send_string+0xa>
	}
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	f023 030f 	bic.w	r3, r3, #15
 8007b64:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007b6c:	7b7b      	ldrb	r3, [r7, #13]
 8007b6e:	f043 030d 	orr.w	r3, r3, #13
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007b76:	7b7b      	ldrb	r3, [r7, #13]
 8007b78:	f043 0309 	orr.w	r3, r3, #9
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007b80:	7b3b      	ldrb	r3, [r7, #12]
 8007b82:	f043 030d 	orr.w	r3, r3, #13
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007b8a:	7b3b      	ldrb	r3, [r7, #12]
 8007b8c:	f043 0309 	orr.w	r3, r3, #9
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b94:	bf00      	nop
 8007b96:	4825      	ldr	r0, [pc, #148]	; (8007c2c <lcd_send_char+0xd8>)
 8007b98:	f002 f9cd 	bl	8009f36 <HAL_I2C_GetError>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d0f9      	beq.n	8007b96 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ba2:	bf00      	nop
 8007ba4:	4821      	ldr	r0, [pc, #132]	; (8007c2c <lcd_send_char+0xd8>)
 8007ba6:	f002 f9b9 	bl	8009f1c <HAL_I2C_GetState>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	d1f9      	bne.n	8007ba4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007bb0:	4b1f      	ldr	r3, [pc, #124]	; (8007c30 <lcd_send_char+0xdc>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d116      	bne.n	8007be6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]
 8007bbc:	e00f      	b.n	8007bde <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	3310      	adds	r3, #16
 8007bc2:	443b      	add	r3, r7
 8007bc4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	f022 0208 	bic.w	r2, r2, #8
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	3310      	adds	r3, #16
 8007bd2:	443b      	add	r3, r7
 8007bd4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	73fb      	strb	r3, [r7, #15]
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d9ec      	bls.n	8007bbe <lcd_send_char+0x6a>
 8007be4:	e015      	b.n	8007c12 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007be6:	2300      	movs	r3, #0
 8007be8:	73bb      	strb	r3, [r7, #14]
 8007bea:	e00f      	b.n	8007c0c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	3310      	adds	r3, #16
 8007bf0:	443b      	add	r3, r7
 8007bf2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	f042 0208 	orr.w	r2, r2, #8
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	3310      	adds	r3, #16
 8007c00:	443b      	add	r3, r7
 8007c02:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	73bb      	strb	r3, [r7, #14]
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d9ec      	bls.n	8007bec <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007c12:	f107 0208 	add.w	r2, r7, #8
 8007c16:	2364      	movs	r3, #100	; 0x64
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	2304      	movs	r3, #4
 8007c1c:	214e      	movs	r1, #78	; 0x4e
 8007c1e:	4803      	ldr	r0, [pc, #12]	; (8007c2c <lcd_send_char+0xd8>)
 8007c20:	f001 fd1c 	bl	800965c <HAL_I2C_Master_Transmit>
}
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	200002b8 	.word	0x200002b8
 8007c30:	2000028c 	.word	0x2000028c

08007c34 <lcd_init>:

void lcd_init (void) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007c38:	2002      	movs	r0, #2
 8007c3a:	f7ff fe95 	bl	8007968 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007c3e:	2028      	movs	r0, #40	; 0x28
 8007c40:	f7ff fe92 	bl	8007968 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007c44:	200c      	movs	r0, #12
 8007c46:	f7ff fe8f 	bl	8007968 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007c4a:	2080      	movs	r0, #128	; 0x80
 8007c4c:	f7ff fe8c 	bl	8007968 <lcd_send_cmd>
	lcd_backlight(1);
 8007c50:	2001      	movs	r0, #1
 8007c52:	f000 f86d 	bl	8007d30 <lcd_backlight>
}
 8007c56:	bf00      	nop
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	4603      	mov	r3, r0
 8007c62:	460a      	mov	r2, r1
 8007c64:	71fb      	strb	r3, [r7, #7]
 8007c66:	4613      	mov	r3, r2
 8007c68:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d106      	bne.n	8007c7e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007c70:	79bb      	ldrb	r3, [r7, #6]
 8007c72:	337f      	adds	r3, #127	; 0x7f
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff fe76 	bl	8007968 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007c7c:	e008      	b.n	8007c90 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d105      	bne.n	8007c90 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007c84:	79bb      	ldrb	r3, [r7, #6]
 8007c86:	3b41      	subs	r3, #65	; 0x41
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fe6c 	bl	8007968 <lcd_send_cmd>
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	603a      	str	r2, [r7, #0]
 8007ca2:	71fb      	strb	r3, [r7, #7]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007ca8:	79ba      	ldrb	r2, [r7, #6]
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	4611      	mov	r1, r2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff ffd3 	bl	8007c5a <lcd_gotoxy>
	lcd_send_string(str);
 8007cb4:	6838      	ldr	r0, [r7, #0]
 8007cb6:	f7ff ff37 	bl	8007b28 <lcd_send_string>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	4603      	mov	r3, r0
 8007cca:	71fb      	strb	r3, [r7, #7]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	71bb      	strb	r3, [r7, #6]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007cd4:	79ba      	ldrb	r2, [r7, #6]
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	4611      	mov	r1, r2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff ffbd 	bl	8007c5a <lcd_gotoxy>
    lcd_send_char(ch);
 8007ce0:	797b      	ldrb	r3, [r7, #5]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff ff36 	bl	8007b54 <lcd_send_char>
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <lcd_clear>:

void lcd_clear(void) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	f7ff fe37 	bl	8007968 <lcd_send_cmd>
    HAL_Delay(2);
 8007cfa:	2002      	movs	r0, #2
 8007cfc:	f000 fd22 	bl	8008744 <HAL_Delay>
}
 8007d00:	bf00      	nop
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	460a      	mov	r2, r1
 8007d0e:	71fb      	strb	r3, [r7, #7]
 8007d10:	4613      	mov	r3, r2
 8007d12:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007d14:	79ba      	ldrb	r2, [r7, #6]
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff ff9d 	bl	8007c5a <lcd_gotoxy>

    lcd_send_char(' ');
 8007d20:	2020      	movs	r0, #32
 8007d22:	f7ff ff17 	bl	8007b54 <lcd_send_char>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007d3a:	4a05      	ldr	r2, [pc, #20]	; (8007d50 <lcd_backlight+0x20>)
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007d40:	2000      	movs	r0, #0
 8007d42:	f7ff fe11 	bl	8007968 <lcd_send_cmd>
}
 8007d46:	bf00      	nop
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	2000028c 	.word	0x2000028c

08007d54 <lcd_cursor>:

void lcd_cursor(int state) {
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d106      	bne.n	8007d70 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007d62:	200e      	movs	r0, #14
 8007d64:	f7ff fe00 	bl	8007968 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007d68:	200f      	movs	r0, #15
 8007d6a:	f7ff fdfd 	bl	8007968 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007d6e:	e002      	b.n	8007d76 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007d70:	200c      	movs	r0, #12
 8007d72:	f7ff fdf9 	bl	8007968 <lcd_send_cmd>
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007d88:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	4a03      	ldr	r2, [pc, #12]	; (8007d9c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d90:	6013      	str	r3, [r2, #0]
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr
 8007d9c:	20000204 	.word	0x20000204

08007da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007da4:	f000 fc6c 	bl	8008680 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dac:	f000 fcca 	bl	8008744 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007db0:	f000 f89c 	bl	8007eec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007db4:	f000 f9be 	bl	8008134 <MX_GPIO_Init>
  MX_CAN_Init();
 8007db8:	f000 f8de 	bl	8007f78 <MX_CAN_Init>
  MX_I2C1_Init();
 8007dbc:	f000 f910 	bl	8007fe0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007dc0:	f000 f93c 	bl	800803c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007dc4:	f000 f98c 	bl	80080e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007dc8:	2201      	movs	r2, #1
 8007dca:	2140      	movs	r1, #64	; 0x40
 8007dcc:	483e      	ldr	r0, [pc, #248]	; (8007ec8 <main+0x128>)
 8007dce:	f001 faa0 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	2180      	movs	r1, #128	; 0x80
 8007dd6:	483c      	ldr	r0, [pc, #240]	; (8007ec8 <main+0x128>)
 8007dd8:	f001 fa9b 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007ddc:	200a      	movs	r0, #10
 8007dde:	f000 fcb1 	bl	8008744 <HAL_Delay>
  lcd_init();
 8007de2:	f7ff ff27 	bl	8007c34 <lcd_init>
  HAL_Delay(10);
 8007de6:	200a      	movs	r0, #10
 8007de8:	f000 fcac 	bl	8008744 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007dec:	4837      	ldr	r0, [pc, #220]	; (8007ecc <main+0x12c>)
 8007dee:	f003 f943 	bl	800b078 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007df2:	bf00      	nop
 8007df4:	4836      	ldr	r0, [pc, #216]	; (8007ed0 <main+0x130>)
 8007df6:	f002 f89e 	bl	8009f36 <HAL_I2C_GetError>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d0f9      	beq.n	8007df4 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e00:	bf00      	nop
 8007e02:	4833      	ldr	r0, [pc, #204]	; (8007ed0 <main+0x130>)
 8007e04:	f002 f88a 	bl	8009f1c <HAL_I2C_GetState>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d1f9      	bne.n	8007e02 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e14:	482c      	ldr	r0, [pc, #176]	; (8007ec8 <main+0x128>)
 8007e16:	f001 fa7c 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e20:	4829      	ldr	r0, [pc, #164]	; (8007ec8 <main+0x128>)
 8007e22:	f001 fa76 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e26:	2200      	movs	r2, #0
 8007e28:	2104      	movs	r1, #4
 8007e2a:	4827      	ldr	r0, [pc, #156]	; (8007ec8 <main+0x128>)
 8007e2c:	f001 fa71 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e30:	2200      	movs	r2, #0
 8007e32:	2102      	movs	r1, #2
 8007e34:	4824      	ldr	r0, [pc, #144]	; (8007ec8 <main+0x128>)
 8007e36:	f001 fa6c 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	4822      	ldr	r0, [pc, #136]	; (8007ec8 <main+0x128>)
 8007e40:	f001 fa67 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e44:	2200      	movs	r2, #0
 8007e46:	2120      	movs	r1, #32
 8007e48:	4822      	ldr	r0, [pc, #136]	; (8007ed4 <main+0x134>)
 8007e4a:	f001 fa62 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2110      	movs	r1, #16
 8007e52:	4820      	ldr	r0, [pc, #128]	; (8007ed4 <main+0x134>)
 8007e54:	f001 fa5d 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2180      	movs	r1, #128	; 0x80
 8007e5c:	481e      	ldr	r0, [pc, #120]	; (8007ed8 <main+0x138>)
 8007e5e:	f001 fa58 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2140      	movs	r1, #64	; 0x40
 8007e66:	481c      	ldr	r0, [pc, #112]	; (8007ed8 <main+0x138>)
 8007e68:	f001 fa53 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2120      	movs	r1, #32
 8007e70:	4819      	ldr	r0, [pc, #100]	; (8007ed8 <main+0x138>)
 8007e72:	f001 fa4e 	bl	8009312 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007e76:	2200      	movs	r2, #0
 8007e78:	2110      	movs	r1, #16
 8007e7a:	4817      	ldr	r0, [pc, #92]	; (8007ed8 <main+0x138>)
 8007e7c:	f001 fa49 	bl	8009312 <HAL_GPIO_WritePin>

  i2cTest();
 8007e80:	f7f8 ff3a 	bl	8000cf8 <i2cTest>
  HAL_Delay(100);
 8007e84:	2064      	movs	r0, #100	; 0x64
 8007e86:	f000 fc5d 	bl	8008744 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007e8a:	4a14      	ldr	r2, [pc, #80]	; (8007edc <main+0x13c>)
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f7ff ff02 	bl	8007c98 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007e94:	4a12      	ldr	r2, [pc, #72]	; (8007ee0 <main+0x140>)
 8007e96:	2101      	movs	r1, #1
 8007e98:	2002      	movs	r0, #2
 8007e9a:	f7ff fefd 	bl	8007c98 <lcd_print>
  HAL_Delay(1000);
 8007e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ea2:	f000 fc4f 	bl	8008744 <HAL_Delay>
  lcd_clear();
 8007ea6:	f7ff ff23 	bl	8007cf0 <lcd_clear>

  eepromKontrol();
 8007eaa:	f7f8 f9c3 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007eae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007eb2:	f000 fc47 	bl	8008744 <HAL_Delay>

  backLightTimer = millis;
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <main+0x144>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a0b      	ldr	r2, [pc, #44]	; (8007ee8 <main+0x148>)
 8007ebc:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007ebe:	f7ff fd17 	bl	80078f0 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007ec2:	f7fe fd6b 	bl	800699c <mainLoop>
 8007ec6:	e7fc      	b.n	8007ec2 <main+0x122>
 8007ec8:	40010c00 	.word	0x40010c00
 8007ecc:	2000030c 	.word	0x2000030c
 8007ed0:	200002b8 	.word	0x200002b8
 8007ed4:	40011000 	.word	0x40011000
 8007ed8:	40010800 	.word	0x40010800
 8007edc:	0800dd18 	.word	0x0800dd18
 8007ee0:	0800dd2c 	.word	0x0800dd2c
 8007ee4:	20000204 	.word	0x20000204
 8007ee8:	20000220 	.word	0x20000220

08007eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b090      	sub	sp, #64	; 0x40
 8007ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ef2:	f107 0318 	add.w	r3, r7, #24
 8007ef6:	2228      	movs	r2, #40	; 0x28
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f004 fb79 	bl	800c5f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f00:	1d3b      	adds	r3, r7, #4
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	605a      	str	r2, [r3, #4]
 8007f08:	609a      	str	r2, [r3, #8]
 8007f0a:	60da      	str	r2, [r3, #12]
 8007f0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f20:	2302      	movs	r3, #2
 8007f22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f30:	f107 0318 	add.w	r3, r7, #24
 8007f34:	4618      	mov	r0, r3
 8007f36:	f002 fc3f 	bl	800a7b8 <HAL_RCC_OscConfig>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007f40:	f000 f9a2 	bl	8008288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f44:	230f      	movs	r3, #15
 8007f46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f48:	2302      	movs	r3, #2
 8007f4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f56:	2300      	movs	r3, #0
 8007f58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f5a:	1d3b      	adds	r3, r7, #4
 8007f5c:	2102      	movs	r1, #2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f002 feac 	bl	800acbc <HAL_RCC_ClockConfig>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007f6a:	f000 f98d 	bl	8008288 <Error_Handler>
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3740      	adds	r7, #64	; 0x40
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007f7c:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007f7e:	4a17      	ldr	r2, [pc, #92]	; (8007fdc <MX_CAN_Init+0x64>)
 8007f80:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007f84:	2210      	movs	r2, #16
 8007f86:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007f88:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007f94:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007f9a:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007fa0:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007fb2:	4b09      	ldr	r3, [pc, #36]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007fb8:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007fbe:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007fc4:	4804      	ldr	r0, [pc, #16]	; (8007fd8 <MX_CAN_Init+0x60>)
 8007fc6:	f000 fbe1 	bl	800878c <HAL_CAN_Init>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007fd0:	f000 f95a 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000290 	.word	0x20000290
 8007fdc:	40006400 	.word	0x40006400

08007fe0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007fe4:	4b12      	ldr	r3, [pc, #72]	; (8008030 <MX_I2C1_Init+0x50>)
 8007fe6:	4a13      	ldr	r2, [pc, #76]	; (8008034 <MX_I2C1_Init+0x54>)
 8007fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007fea:	4b11      	ldr	r3, [pc, #68]	; (8008030 <MX_I2C1_Init+0x50>)
 8007fec:	4a12      	ldr	r2, [pc, #72]	; (8008038 <MX_I2C1_Init+0x58>)
 8007fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <MX_I2C1_Init+0x50>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007ff6:	4b0e      	ldr	r3, [pc, #56]	; (8008030 <MX_I2C1_Init+0x50>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007ffc:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <MX_I2C1_Init+0x50>)
 8007ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008002:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <MX_I2C1_Init+0x50>)
 8008006:	2200      	movs	r2, #0
 8008008:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800800a:	4b09      	ldr	r3, [pc, #36]	; (8008030 <MX_I2C1_Init+0x50>)
 800800c:	2200      	movs	r2, #0
 800800e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <MX_I2C1_Init+0x50>)
 8008012:	2200      	movs	r2, #0
 8008014:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008016:	4b06      	ldr	r3, [pc, #24]	; (8008030 <MX_I2C1_Init+0x50>)
 8008018:	2200      	movs	r2, #0
 800801a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800801c:	4804      	ldr	r0, [pc, #16]	; (8008030 <MX_I2C1_Init+0x50>)
 800801e:	f001 f9a9 	bl	8009374 <HAL_I2C_Init>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008028:	f000 f92e 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800802c:	bf00      	nop
 800802e:	bd80      	pop	{r7, pc}
 8008030:	200002b8 	.word	0x200002b8
 8008034:	40005400 	.word	0x40005400
 8008038:	00061a80 	.word	0x00061a80

0800803c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008042:	f107 0308 	add.w	r3, r7, #8
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	605a      	str	r2, [r3, #4]
 800804c:	609a      	str	r2, [r3, #8]
 800804e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008050:	463b      	mov	r3, r7
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008058:	4b1f      	ldr	r3, [pc, #124]	; (80080d8 <MX_TIM1_Init+0x9c>)
 800805a:	4a20      	ldr	r2, [pc, #128]	; (80080dc <MX_TIM1_Init+0xa0>)
 800805c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800805e:	4b1e      	ldr	r3, [pc, #120]	; (80080d8 <MX_TIM1_Init+0x9c>)
 8008060:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008064:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008066:	4b1c      	ldr	r3, [pc, #112]	; (80080d8 <MX_TIM1_Init+0x9c>)
 8008068:	2200      	movs	r2, #0
 800806a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800806c:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <MX_TIM1_Init+0x9c>)
 800806e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008072:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008074:	4b18      	ldr	r3, [pc, #96]	; (80080d8 <MX_TIM1_Init+0x9c>)
 8008076:	2200      	movs	r2, #0
 8008078:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800807a:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <MX_TIM1_Init+0x9c>)
 800807c:	2200      	movs	r2, #0
 800807e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008080:	4b15      	ldr	r3, [pc, #84]	; (80080d8 <MX_TIM1_Init+0x9c>)
 8008082:	2200      	movs	r2, #0
 8008084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008086:	4814      	ldr	r0, [pc, #80]	; (80080d8 <MX_TIM1_Init+0x9c>)
 8008088:	f002 ffa6 	bl	800afd8 <HAL_TIM_Base_Init>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008092:	f000 f8f9 	bl	8008288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800809a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800809c:	f107 0308 	add.w	r3, r7, #8
 80080a0:	4619      	mov	r1, r3
 80080a2:	480d      	ldr	r0, [pc, #52]	; (80080d8 <MX_TIM1_Init+0x9c>)
 80080a4:	f003 f950 	bl	800b348 <HAL_TIM_ConfigClockSource>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80080ae:	f000 f8eb 	bl	8008288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080b2:	2300      	movs	r3, #0
 80080b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80080ba:	463b      	mov	r3, r7
 80080bc:	4619      	mov	r1, r3
 80080be:	4806      	ldr	r0, [pc, #24]	; (80080d8 <MX_TIM1_Init+0x9c>)
 80080c0:	f003 fb3e 	bl	800b740 <HAL_TIMEx_MasterConfigSynchronization>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80080ca:	f000 f8dd 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80080ce:	bf00      	nop
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	2000030c 	.word	0x2000030c
 80080dc:	40012c00 	.word	0x40012c00

080080e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80080e4:	4b11      	ldr	r3, [pc, #68]	; (800812c <MX_USART1_UART_Init+0x4c>)
 80080e6:	4a12      	ldr	r2, [pc, #72]	; (8008130 <MX_USART1_UART_Init+0x50>)
 80080e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80080ea:	4b10      	ldr	r3, [pc, #64]	; (800812c <MX_USART1_UART_Init+0x4c>)
 80080ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80080f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80080f2:	4b0e      	ldr	r3, [pc, #56]	; (800812c <MX_USART1_UART_Init+0x4c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <MX_USART1_UART_Init+0x4c>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80080fe:	4b0b      	ldr	r3, [pc, #44]	; (800812c <MX_USART1_UART_Init+0x4c>)
 8008100:	2200      	movs	r2, #0
 8008102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008104:	4b09      	ldr	r3, [pc, #36]	; (800812c <MX_USART1_UART_Init+0x4c>)
 8008106:	220c      	movs	r2, #12
 8008108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800810a:	4b08      	ldr	r3, [pc, #32]	; (800812c <MX_USART1_UART_Init+0x4c>)
 800810c:	2200      	movs	r2, #0
 800810e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008110:	4b06      	ldr	r3, [pc, #24]	; (800812c <MX_USART1_UART_Init+0x4c>)
 8008112:	2200      	movs	r2, #0
 8008114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008116:	4805      	ldr	r0, [pc, #20]	; (800812c <MX_USART1_UART_Init+0x4c>)
 8008118:	f003 fb90 	bl	800b83c <HAL_UART_Init>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008122:	f000 f8b1 	bl	8008288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008126:	bf00      	nop
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000354 	.word	0x20000354
 8008130:	40013800 	.word	0x40013800

08008134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813a:	f107 0310 	add.w	r3, r7, #16
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	605a      	str	r2, [r3, #4]
 8008144:	609a      	str	r2, [r3, #8]
 8008146:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008148:	4b4b      	ldr	r3, [pc, #300]	; (8008278 <MX_GPIO_Init+0x144>)
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	4a4a      	ldr	r2, [pc, #296]	; (8008278 <MX_GPIO_Init+0x144>)
 800814e:	f043 0310 	orr.w	r3, r3, #16
 8008152:	6193      	str	r3, [r2, #24]
 8008154:	4b48      	ldr	r3, [pc, #288]	; (8008278 <MX_GPIO_Init+0x144>)
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008160:	4b45      	ldr	r3, [pc, #276]	; (8008278 <MX_GPIO_Init+0x144>)
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	4a44      	ldr	r2, [pc, #272]	; (8008278 <MX_GPIO_Init+0x144>)
 8008166:	f043 0320 	orr.w	r3, r3, #32
 800816a:	6193      	str	r3, [r2, #24]
 800816c:	4b42      	ldr	r3, [pc, #264]	; (8008278 <MX_GPIO_Init+0x144>)
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f003 0320 	and.w	r3, r3, #32
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008178:	4b3f      	ldr	r3, [pc, #252]	; (8008278 <MX_GPIO_Init+0x144>)
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	4a3e      	ldr	r2, [pc, #248]	; (8008278 <MX_GPIO_Init+0x144>)
 800817e:	f043 0304 	orr.w	r3, r3, #4
 8008182:	6193      	str	r3, [r2, #24]
 8008184:	4b3c      	ldr	r3, [pc, #240]	; (8008278 <MX_GPIO_Init+0x144>)
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	607b      	str	r3, [r7, #4]
 800818e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008190:	4b39      	ldr	r3, [pc, #228]	; (8008278 <MX_GPIO_Init+0x144>)
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4a38      	ldr	r2, [pc, #224]	; (8008278 <MX_GPIO_Init+0x144>)
 8008196:	f043 0308 	orr.w	r3, r3, #8
 800819a:	6193      	str	r3, [r2, #24]
 800819c:	4b36      	ldr	r3, [pc, #216]	; (8008278 <MX_GPIO_Init+0x144>)
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	603b      	str	r3, [r7, #0]
 80081a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80081a8:	2200      	movs	r2, #0
 80081aa:	21f0      	movs	r1, #240	; 0xf0
 80081ac:	4833      	ldr	r0, [pc, #204]	; (800827c <MX_GPIO_Init+0x148>)
 80081ae:	f001 f8b0 	bl	8009312 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80081b2:	2200      	movs	r2, #0
 80081b4:	f241 0130 	movw	r1, #4144	; 0x1030
 80081b8:	4831      	ldr	r0, [pc, #196]	; (8008280 <MX_GPIO_Init+0x14c>)
 80081ba:	f001 f8aa 	bl	8009312 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80081be:	2200      	movs	r2, #0
 80081c0:	f640 4107 	movw	r1, #3079	; 0xc07
 80081c4:	482f      	ldr	r0, [pc, #188]	; (8008284 <MX_GPIO_Init+0x150>)
 80081c6:	f001 f8a4 	bl	8009312 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80081ca:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80081ce:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081d8:	f107 0310 	add.w	r3, r7, #16
 80081dc:	4619      	mov	r1, r3
 80081de:	4828      	ldr	r0, [pc, #160]	; (8008280 <MX_GPIO_Init+0x14c>)
 80081e0:	f000 fe20 	bl	8008e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80081e4:	f248 130f 	movw	r3, #33039	; 0x810f
 80081e8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081f2:	f107 0310 	add.w	r3, r7, #16
 80081f6:	4619      	mov	r1, r3
 80081f8:	4820      	ldr	r0, [pc, #128]	; (800827c <MX_GPIO_Init+0x148>)
 80081fa:	f000 fe13 	bl	8008e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80081fe:	23f0      	movs	r3, #240	; 0xf0
 8008200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008202:	2301      	movs	r3, #1
 8008204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008206:	2300      	movs	r3, #0
 8008208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800820a:	2302      	movs	r3, #2
 800820c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800820e:	f107 0310 	add.w	r3, r7, #16
 8008212:	4619      	mov	r1, r3
 8008214:	4819      	ldr	r0, [pc, #100]	; (800827c <MX_GPIO_Init+0x148>)
 8008216:	f000 fe05 	bl	8008e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800821a:	f241 0330 	movw	r3, #4144	; 0x1030
 800821e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008220:	2301      	movs	r3, #1
 8008222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008224:	2300      	movs	r3, #0
 8008226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008228:	2302      	movs	r3, #2
 800822a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800822c:	f107 0310 	add.w	r3, r7, #16
 8008230:	4619      	mov	r1, r3
 8008232:	4813      	ldr	r0, [pc, #76]	; (8008280 <MX_GPIO_Init+0x14c>)
 8008234:	f000 fdf6 	bl	8008e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008238:	f640 4307 	movw	r3, #3079	; 0xc07
 800823c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800823e:	2301      	movs	r3, #1
 8008240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008242:	2300      	movs	r3, #0
 8008244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008246:	2302      	movs	r3, #2
 8008248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800824a:	f107 0310 	add.w	r3, r7, #16
 800824e:	4619      	mov	r1, r3
 8008250:	480c      	ldr	r0, [pc, #48]	; (8008284 <MX_GPIO_Init+0x150>)
 8008252:	f000 fde7 	bl	8008e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008256:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800825a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008260:	2300      	movs	r3, #0
 8008262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008264:	f107 0310 	add.w	r3, r7, #16
 8008268:	4619      	mov	r1, r3
 800826a:	4806      	ldr	r0, [pc, #24]	; (8008284 <MX_GPIO_Init+0x150>)
 800826c:	f000 fdda 	bl	8008e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008270:	bf00      	nop
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40021000 	.word	0x40021000
 800827c:	40010800 	.word	0x40010800
 8008280:	40011000 	.word	0x40011000
 8008284:	40010c00 	.word	0x40010c00

08008288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008288:	b480      	push	{r7}
 800828a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800828c:	bf00      	nop
 800828e:	46bd      	mov	sp, r7
 8008290:	bc80      	pop	{r7}
 8008292:	4770      	bx	lr

08008294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800829a:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <HAL_MspInit+0x5c>)
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	4a14      	ldr	r2, [pc, #80]	; (80082f0 <HAL_MspInit+0x5c>)
 80082a0:	f043 0301 	orr.w	r3, r3, #1
 80082a4:	6193      	str	r3, [r2, #24]
 80082a6:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <HAL_MspInit+0x5c>)
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	60bb      	str	r3, [r7, #8]
 80082b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082b2:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <HAL_MspInit+0x5c>)
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	4a0e      	ldr	r2, [pc, #56]	; (80082f0 <HAL_MspInit+0x5c>)
 80082b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082bc:	61d3      	str	r3, [r2, #28]
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <HAL_MspInit+0x5c>)
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c6:	607b      	str	r3, [r7, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <HAL_MspInit+0x60>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	4a04      	ldr	r2, [pc, #16]	; (80082f4 <HAL_MspInit+0x60>)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	4770      	bx	lr
 80082f0:	40021000 	.word	0x40021000
 80082f4:	40010000 	.word	0x40010000

080082f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008300:	f107 0310 	add.w	r3, r7, #16
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	605a      	str	r2, [r3, #4]
 800830a:	609a      	str	r2, [r3, #8]
 800830c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a1c      	ldr	r2, [pc, #112]	; (8008384 <HAL_CAN_MspInit+0x8c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d131      	bne.n	800837c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008318:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <HAL_CAN_MspInit+0x90>)
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	4a1a      	ldr	r2, [pc, #104]	; (8008388 <HAL_CAN_MspInit+0x90>)
 800831e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008322:	61d3      	str	r3, [r2, #28]
 8008324:	4b18      	ldr	r3, [pc, #96]	; (8008388 <HAL_CAN_MspInit+0x90>)
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008330:	4b15      	ldr	r3, [pc, #84]	; (8008388 <HAL_CAN_MspInit+0x90>)
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	4a14      	ldr	r2, [pc, #80]	; (8008388 <HAL_CAN_MspInit+0x90>)
 8008336:	f043 0304 	orr.w	r3, r3, #4
 800833a:	6193      	str	r3, [r2, #24]
 800833c:	4b12      	ldr	r3, [pc, #72]	; (8008388 <HAL_CAN_MspInit+0x90>)
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	60bb      	str	r3, [r7, #8]
 8008346:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800834c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008352:	2300      	movs	r3, #0
 8008354:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008356:	f107 0310 	add.w	r3, r7, #16
 800835a:	4619      	mov	r1, r3
 800835c:	480b      	ldr	r0, [pc, #44]	; (800838c <HAL_CAN_MspInit+0x94>)
 800835e:	f000 fd61 	bl	8008e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008368:	2302      	movs	r3, #2
 800836a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800836c:	2303      	movs	r3, #3
 800836e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008370:	f107 0310 	add.w	r3, r7, #16
 8008374:	4619      	mov	r1, r3
 8008376:	4805      	ldr	r0, [pc, #20]	; (800838c <HAL_CAN_MspInit+0x94>)
 8008378:	f000 fd54 	bl	8008e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800837c:	bf00      	nop
 800837e:	3720      	adds	r7, #32
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40006400 	.word	0x40006400
 8008388:	40021000 	.word	0x40021000
 800838c:	40010800 	.word	0x40010800

08008390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008398:	f107 0310 	add.w	r3, r7, #16
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	609a      	str	r2, [r3, #8]
 80083a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a15      	ldr	r2, [pc, #84]	; (8008400 <HAL_I2C_MspInit+0x70>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d123      	bne.n	80083f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083b0:	4b14      	ldr	r3, [pc, #80]	; (8008404 <HAL_I2C_MspInit+0x74>)
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	4a13      	ldr	r2, [pc, #76]	; (8008404 <HAL_I2C_MspInit+0x74>)
 80083b6:	f043 0308 	orr.w	r3, r3, #8
 80083ba:	6193      	str	r3, [r2, #24]
 80083bc:	4b11      	ldr	r3, [pc, #68]	; (8008404 <HAL_I2C_MspInit+0x74>)
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f003 0308 	and.w	r3, r3, #8
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80083c8:	23c0      	movs	r3, #192	; 0xc0
 80083ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083cc:	2312      	movs	r3, #18
 80083ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083d0:	2303      	movs	r3, #3
 80083d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083d4:	f107 0310 	add.w	r3, r7, #16
 80083d8:	4619      	mov	r1, r3
 80083da:	480b      	ldr	r0, [pc, #44]	; (8008408 <HAL_I2C_MspInit+0x78>)
 80083dc:	f000 fd22 	bl	8008e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80083e0:	4b08      	ldr	r3, [pc, #32]	; (8008404 <HAL_I2C_MspInit+0x74>)
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	4a07      	ldr	r2, [pc, #28]	; (8008404 <HAL_I2C_MspInit+0x74>)
 80083e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083ea:	61d3      	str	r3, [r2, #28]
 80083ec:	4b05      	ldr	r3, [pc, #20]	; (8008404 <HAL_I2C_MspInit+0x74>)
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083f4:	60bb      	str	r3, [r7, #8]
 80083f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80083f8:	bf00      	nop
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40005400 	.word	0x40005400
 8008404:	40021000 	.word	0x40021000
 8008408:	40010c00 	.word	0x40010c00

0800840c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a0a      	ldr	r2, [pc, #40]	; (8008444 <HAL_I2C_MspDeInit+0x38>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d10d      	bne.n	800843a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800841e:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <HAL_I2C_MspDeInit+0x3c>)
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	4a09      	ldr	r2, [pc, #36]	; (8008448 <HAL_I2C_MspDeInit+0x3c>)
 8008424:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008428:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800842a:	2140      	movs	r1, #64	; 0x40
 800842c:	4807      	ldr	r0, [pc, #28]	; (800844c <HAL_I2C_MspDeInit+0x40>)
 800842e:	f000 fe8d 	bl	800914c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008432:	2180      	movs	r1, #128	; 0x80
 8008434:	4805      	ldr	r0, [pc, #20]	; (800844c <HAL_I2C_MspDeInit+0x40>)
 8008436:	f000 fe89 	bl	800914c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	40005400 	.word	0x40005400
 8008448:	40021000 	.word	0x40021000
 800844c:	40010c00 	.word	0x40010c00

08008450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a0d      	ldr	r2, [pc, #52]	; (8008494 <HAL_TIM_Base_MspInit+0x44>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d113      	bne.n	800848a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008462:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <HAL_TIM_Base_MspInit+0x48>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	4a0c      	ldr	r2, [pc, #48]	; (8008498 <HAL_TIM_Base_MspInit+0x48>)
 8008468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800846c:	6193      	str	r3, [r2, #24]
 800846e:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <HAL_TIM_Base_MspInit+0x48>)
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	2019      	movs	r0, #25
 8008480:	f000 fb57 	bl	8008b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008484:	2019      	movs	r0, #25
 8008486:	f000 fb70 	bl	8008b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	40012c00 	.word	0x40012c00
 8008498:	40021000 	.word	0x40021000

0800849c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084a4:	f107 0310 	add.w	r3, r7, #16
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	605a      	str	r2, [r3, #4]
 80084ae:	609a      	str	r2, [r3, #8]
 80084b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a20      	ldr	r2, [pc, #128]	; (8008538 <HAL_UART_MspInit+0x9c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d139      	bne.n	8008530 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80084bc:	4b1f      	ldr	r3, [pc, #124]	; (800853c <HAL_UART_MspInit+0xa0>)
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	4a1e      	ldr	r2, [pc, #120]	; (800853c <HAL_UART_MspInit+0xa0>)
 80084c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084c6:	6193      	str	r3, [r2, #24]
 80084c8:	4b1c      	ldr	r3, [pc, #112]	; (800853c <HAL_UART_MspInit+0xa0>)
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084d4:	4b19      	ldr	r3, [pc, #100]	; (800853c <HAL_UART_MspInit+0xa0>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	4a18      	ldr	r2, [pc, #96]	; (800853c <HAL_UART_MspInit+0xa0>)
 80084da:	f043 0304 	orr.w	r3, r3, #4
 80084de:	6193      	str	r3, [r2, #24]
 80084e0:	4b16      	ldr	r3, [pc, #88]	; (800853c <HAL_UART_MspInit+0xa0>)
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	60bb      	str	r3, [r7, #8]
 80084ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80084ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084f2:	2302      	movs	r3, #2
 80084f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084f6:	2303      	movs	r3, #3
 80084f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084fa:	f107 0310 	add.w	r3, r7, #16
 80084fe:	4619      	mov	r1, r3
 8008500:	480f      	ldr	r0, [pc, #60]	; (8008540 <HAL_UART_MspInit+0xa4>)
 8008502:	f000 fc8f 	bl	8008e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800850a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008514:	f107 0310 	add.w	r3, r7, #16
 8008518:	4619      	mov	r1, r3
 800851a:	4809      	ldr	r0, [pc, #36]	; (8008540 <HAL_UART_MspInit+0xa4>)
 800851c:	f000 fc82 	bl	8008e24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008520:	2200      	movs	r2, #0
 8008522:	2100      	movs	r1, #0
 8008524:	2025      	movs	r0, #37	; 0x25
 8008526:	f000 fb04 	bl	8008b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800852a:	2025      	movs	r0, #37	; 0x25
 800852c:	f000 fb1d 	bl	8008b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008530:	bf00      	nop
 8008532:	3720      	adds	r7, #32
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	40013800 	.word	0x40013800
 800853c:	40021000 	.word	0x40021000
 8008540:	40010800 	.word	0x40010800

08008544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008548:	e7fe      	b.n	8008548 <NMI_Handler+0x4>

0800854a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800854a:	b480      	push	{r7}
 800854c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800854e:	e7fe      	b.n	800854e <HardFault_Handler+0x4>

08008550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008554:	e7fe      	b.n	8008554 <MemManage_Handler+0x4>

08008556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008556:	b480      	push	{r7}
 8008558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800855a:	e7fe      	b.n	800855a <BusFault_Handler+0x4>

0800855c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008560:	e7fe      	b.n	8008560 <UsageFault_Handler+0x4>

08008562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008562:	b480      	push	{r7}
 8008564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008566:	bf00      	nop
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr

0800856e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800856e:	b480      	push	{r7}
 8008570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008572:	bf00      	nop
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800857a:	b480      	push	{r7}
 800857c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800857e:	bf00      	nop
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr

08008586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800858a:	f000 f8bf 	bl	800870c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800858e:	bf00      	nop
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008598:	4802      	ldr	r0, [pc, #8]	; (80085a4 <TIM1_UP_IRQHandler+0x10>)
 800859a:	f002 fdcd 	bl	800b138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800859e:	bf00      	nop
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	2000030c 	.word	0x2000030c

080085a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80085ac:	4802      	ldr	r0, [pc, #8]	; (80085b8 <USART1_IRQHandler+0x10>)
 80085ae:	f003 f9cb 	bl	800b948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80085b2:	bf00      	nop
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20000354 	.word	0x20000354

080085bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085c4:	4a14      	ldr	r2, [pc, #80]	; (8008618 <_sbrk+0x5c>)
 80085c6:	4b15      	ldr	r3, [pc, #84]	; (800861c <_sbrk+0x60>)
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085d0:	4b13      	ldr	r3, [pc, #76]	; (8008620 <_sbrk+0x64>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d102      	bne.n	80085de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085d8:	4b11      	ldr	r3, [pc, #68]	; (8008620 <_sbrk+0x64>)
 80085da:	4a12      	ldr	r2, [pc, #72]	; (8008624 <_sbrk+0x68>)
 80085dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085de:	4b10      	ldr	r3, [pc, #64]	; (8008620 <_sbrk+0x64>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4413      	add	r3, r2
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d207      	bcs.n	80085fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085ec:	f004 f81a 	bl	800c624 <__errno>
 80085f0:	4603      	mov	r3, r0
 80085f2:	220c      	movs	r2, #12
 80085f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085fa:	e009      	b.n	8008610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085fc:	4b08      	ldr	r3, [pc, #32]	; (8008620 <_sbrk+0x64>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008602:	4b07      	ldr	r3, [pc, #28]	; (8008620 <_sbrk+0x64>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4413      	add	r3, r2
 800860a:	4a05      	ldr	r2, [pc, #20]	; (8008620 <_sbrk+0x64>)
 800860c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800860e:	68fb      	ldr	r3, [r7, #12]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	2000c000 	.word	0x2000c000
 800861c:	00000400 	.word	0x00000400
 8008620:	2000039c 	.word	0x2000039c
 8008624:	200004f0 	.word	0x200004f0

08008628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800862c:	bf00      	nop
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr

08008634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008634:	480c      	ldr	r0, [pc, #48]	; (8008668 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008636:	490d      	ldr	r1, [pc, #52]	; (800866c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008638:	4a0d      	ldr	r2, [pc, #52]	; (8008670 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800863a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800863c:	e002      	b.n	8008644 <LoopCopyDataInit>

0800863e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800863e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008642:	3304      	adds	r3, #4

08008644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008648:	d3f9      	bcc.n	800863e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800864a:	4a0a      	ldr	r2, [pc, #40]	; (8008674 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800864c:	4c0a      	ldr	r4, [pc, #40]	; (8008678 <LoopFillZerobss+0x22>)
  movs r3, #0
 800864e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008650:	e001      	b.n	8008656 <LoopFillZerobss>

08008652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008654:	3204      	adds	r2, #4

08008656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008658:	d3fb      	bcc.n	8008652 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800865a:	f7ff ffe5 	bl	8008628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800865e:	f003 ffe7 	bl	800c630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008662:	f7ff fb9d 	bl	8007da0 <main>
  bx lr
 8008666:	4770      	bx	lr
  ldr r0, =_sdata
 8008668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800866c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8008670:	0800ddcc 	.word	0x0800ddcc
  ldr r2, =_sbss
 8008674:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8008678:	200004ec 	.word	0x200004ec

0800867c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800867c:	e7fe      	b.n	800867c <ADC1_2_IRQHandler>
	...

08008680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008684:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <HAL_Init+0x28>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a07      	ldr	r2, [pc, #28]	; (80086a8 <HAL_Init+0x28>)
 800868a:	f043 0310 	orr.w	r3, r3, #16
 800868e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008690:	2003      	movs	r0, #3
 8008692:	f000 fa43 	bl	8008b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008696:	200f      	movs	r0, #15
 8008698:	f000 f808 	bl	80086ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800869c:	f7ff fdfa 	bl	8008294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	40022000 	.word	0x40022000

080086ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086b4:	4b12      	ldr	r3, [pc, #72]	; (8008700 <HAL_InitTick+0x54>)
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	4b12      	ldr	r3, [pc, #72]	; (8008704 <HAL_InitTick+0x58>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	4619      	mov	r1, r3
 80086be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fa5b 	bl	8008b86 <HAL_SYSTICK_Config>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e00e      	b.n	80086f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b0f      	cmp	r3, #15
 80086de:	d80a      	bhi.n	80086f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086e0:	2200      	movs	r2, #0
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e8:	f000 fa23 	bl	8008b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80086ec:	4a06      	ldr	r2, [pc, #24]	; (8008708 <HAL_InitTick+0x5c>)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	e000      	b.n	80086f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	200000b4 	.word	0x200000b4
 8008704:	200000bc 	.word	0x200000bc
 8008708:	200000b8 	.word	0x200000b8

0800870c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008710:	4b05      	ldr	r3, [pc, #20]	; (8008728 <HAL_IncTick+0x1c>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	4b05      	ldr	r3, [pc, #20]	; (800872c <HAL_IncTick+0x20>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4413      	add	r3, r2
 800871c:	4a03      	ldr	r2, [pc, #12]	; (800872c <HAL_IncTick+0x20>)
 800871e:	6013      	str	r3, [r2, #0]
}
 8008720:	bf00      	nop
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr
 8008728:	200000bc 	.word	0x200000bc
 800872c:	200003a0 	.word	0x200003a0

08008730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  return uwTick;
 8008734:	4b02      	ldr	r3, [pc, #8]	; (8008740 <HAL_GetTick+0x10>)
 8008736:	681b      	ldr	r3, [r3, #0]
}
 8008738:	4618      	mov	r0, r3
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr
 8008740:	200003a0 	.word	0x200003a0

08008744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800874c:	f7ff fff0 	bl	8008730 <HAL_GetTick>
 8008750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800875c:	d005      	beq.n	800876a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <HAL_Delay+0x44>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800876a:	bf00      	nop
 800876c:	f7ff ffe0 	bl	8008730 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	429a      	cmp	r2, r3
 800877a:	d8f7      	bhi.n	800876c <HAL_Delay+0x28>
  {
  }
}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	200000bc 	.word	0x200000bc

0800878c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e0ed      	b.n	800897a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d102      	bne.n	80087b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff fda4 	bl	80082f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087c0:	f7ff ffb6 	bl	8008730 <HAL_GetTick>
 80087c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087c6:	e012      	b.n	80087ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80087c8:	f7ff ffb2 	bl	8008730 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b0a      	cmp	r3, #10
 80087d4:	d90b      	bls.n	80087ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2205      	movs	r2, #5
 80087e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e0c5      	b.n	800897a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0e5      	beq.n	80087c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0202 	bic.w	r2, r2, #2
 800880a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800880c:	f7ff ff90 	bl	8008730 <HAL_GetTick>
 8008810:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008812:	e012      	b.n	800883a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008814:	f7ff ff8c 	bl	8008730 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b0a      	cmp	r3, #10
 8008820:	d90b      	bls.n	800883a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2205      	movs	r2, #5
 8008832:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e09f      	b.n	800897a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e5      	bne.n	8008814 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	7e1b      	ldrb	r3, [r3, #24]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d108      	bne.n	8008862 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	e007      	b.n	8008872 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008870:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	7e5b      	ldrb	r3, [r3, #25]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d108      	bne.n	800888c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	e007      	b.n	800889c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800889a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7e9b      	ldrb	r3, [r3, #26]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d108      	bne.n	80088b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0220 	orr.w	r2, r2, #32
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	e007      	b.n	80088c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0220 	bic.w	r2, r2, #32
 80088c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	7edb      	ldrb	r3, [r3, #27]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d108      	bne.n	80088e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0210 	bic.w	r2, r2, #16
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	e007      	b.n	80088f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 0210 	orr.w	r2, r2, #16
 80088ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7f1b      	ldrb	r3, [r3, #28]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d108      	bne.n	800890a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0208 	orr.w	r2, r2, #8
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	e007      	b.n	800891a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0208 	bic.w	r2, r2, #8
 8008918:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7f5b      	ldrb	r3, [r3, #29]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d108      	bne.n	8008934 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0204 	orr.w	r2, r2, #4
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	e007      	b.n	8008944 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0204 	bic.w	r2, r2, #4
 8008942:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	ea42 0103 	orr.w	r1, r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	1e5a      	subs	r2, r3, #1
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <__NVIC_SetPriorityGrouping>:
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008994:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <__NVIC_SetPriorityGrouping+0x44>)
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089a0:	4013      	ands	r3, r2
 80089a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089b6:	4a04      	ldr	r2, [pc, #16]	; (80089c8 <__NVIC_SetPriorityGrouping+0x44>)
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	60d3      	str	r3, [r2, #12]
}
 80089bc:	bf00      	nop
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bc80      	pop	{r7}
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	e000ed00 	.word	0xe000ed00

080089cc <__NVIC_GetPriorityGrouping>:
{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089d0:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <__NVIC_GetPriorityGrouping+0x18>)
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	0a1b      	lsrs	r3, r3, #8
 80089d6:	f003 0307 	and.w	r3, r3, #7
}
 80089da:	4618      	mov	r0, r3
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	e000ed00 	.word	0xe000ed00

080089e8 <__NVIC_EnableIRQ>:
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	db0b      	blt.n	8008a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	f003 021f 	and.w	r2, r3, #31
 8008a00:	4906      	ldr	r1, [pc, #24]	; (8008a1c <__NVIC_EnableIRQ+0x34>)
 8008a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a06:	095b      	lsrs	r3, r3, #5
 8008a08:	2001      	movs	r0, #1
 8008a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8008a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr
 8008a1c:	e000e100 	.word	0xe000e100

08008a20 <__NVIC_SetPriority>:
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	6039      	str	r1, [r7, #0]
 8008a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	db0a      	blt.n	8008a4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	490c      	ldr	r1, [pc, #48]	; (8008a6c <__NVIC_SetPriority+0x4c>)
 8008a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a3e:	0112      	lsls	r2, r2, #4
 8008a40:	b2d2      	uxtb	r2, r2
 8008a42:	440b      	add	r3, r1
 8008a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a48:	e00a      	b.n	8008a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	4908      	ldr	r1, [pc, #32]	; (8008a70 <__NVIC_SetPriority+0x50>)
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	3b04      	subs	r3, #4
 8008a58:	0112      	lsls	r2, r2, #4
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	761a      	strb	r2, [r3, #24]
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	e000e100 	.word	0xe000e100
 8008a70:	e000ed00 	.word	0xe000ed00

08008a74 <NVIC_EncodePriority>:
{
 8008a74:	b480      	push	{r7}
 8008a76:	b089      	sub	sp, #36	; 0x24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f1c3 0307 	rsb	r3, r3, #7
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	bf28      	it	cs
 8008a92:	2304      	movcs	r3, #4
 8008a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	2b06      	cmp	r3, #6
 8008a9c:	d902      	bls.n	8008aa4 <NVIC_EncodePriority+0x30>
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	3b03      	subs	r3, #3
 8008aa2:	e000      	b.n	8008aa6 <NVIC_EncodePriority+0x32>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab2:	43da      	mvns	r2, r3
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	401a      	ands	r2, r3
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008abc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac6:	43d9      	mvns	r1, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008acc:	4313      	orrs	r3, r2
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3724      	adds	r7, #36	; 0x24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr

08008ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ae8:	d301      	bcc.n	8008aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008aea:	2301      	movs	r3, #1
 8008aec:	e00f      	b.n	8008b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008aee:	4a0a      	ldr	r2, [pc, #40]	; (8008b18 <SysTick_Config+0x40>)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008af6:	210f      	movs	r1, #15
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008afc:	f7ff ff90 	bl	8008a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <SysTick_Config+0x40>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b06:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <SysTick_Config+0x40>)
 8008b08:	2207      	movs	r2, #7
 8008b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000e010 	.word	0xe000e010

08008b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff ff2d 	bl	8008984 <__NVIC_SetPriorityGrouping>
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b086      	sub	sp, #24
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	4603      	mov	r3, r0
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
 8008b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b44:	f7ff ff42 	bl	80089cc <__NVIC_GetPriorityGrouping>
 8008b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	68b9      	ldr	r1, [r7, #8]
 8008b4e:	6978      	ldr	r0, [r7, #20]
 8008b50:	f7ff ff90 	bl	8008a74 <NVIC_EncodePriority>
 8008b54:	4602      	mov	r2, r0
 8008b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff ff5f 	bl	8008a20 <__NVIC_SetPriority>
}
 8008b62:	bf00      	nop
 8008b64:	3718      	adds	r7, #24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	4603      	mov	r3, r0
 8008b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff ff35 	bl	80089e8 <__NVIC_EnableIRQ>
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7ff ffa2 	bl	8008ad8 <SysTick_Config>
 8008b94:	4603      	mov	r3, r0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d008      	beq.n	8008bc8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2204      	movs	r2, #4
 8008bba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e020      	b.n	8008c0a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 020e 	bic.w	r2, r2, #14
 8008bd6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0201 	bic.w	r2, r2, #1
 8008be6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8008bf6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d005      	beq.n	8008c38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2204      	movs	r2, #4
 8008c30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	73fb      	strb	r3, [r7, #15]
 8008c36:	e0d6      	b.n	8008de6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 020e 	bic.w	r2, r2, #14
 8008c46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0201 	bic.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	4b64      	ldr	r3, [pc, #400]	; (8008df0 <HAL_DMA_Abort_IT+0x1dc>)
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d958      	bls.n	8008d16 <HAL_DMA_Abort_IT+0x102>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a62      	ldr	r2, [pc, #392]	; (8008df4 <HAL_DMA_Abort_IT+0x1e0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d04f      	beq.n	8008d0e <HAL_DMA_Abort_IT+0xfa>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a61      	ldr	r2, [pc, #388]	; (8008df8 <HAL_DMA_Abort_IT+0x1e4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d048      	beq.n	8008d0a <HAL_DMA_Abort_IT+0xf6>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a5f      	ldr	r2, [pc, #380]	; (8008dfc <HAL_DMA_Abort_IT+0x1e8>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d040      	beq.n	8008d04 <HAL_DMA_Abort_IT+0xf0>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a5e      	ldr	r2, [pc, #376]	; (8008e00 <HAL_DMA_Abort_IT+0x1ec>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d038      	beq.n	8008cfe <HAL_DMA_Abort_IT+0xea>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a5c      	ldr	r2, [pc, #368]	; (8008e04 <HAL_DMA_Abort_IT+0x1f0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d030      	beq.n	8008cf8 <HAL_DMA_Abort_IT+0xe4>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a5b      	ldr	r2, [pc, #364]	; (8008e08 <HAL_DMA_Abort_IT+0x1f4>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d028      	beq.n	8008cf2 <HAL_DMA_Abort_IT+0xde>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a52      	ldr	r2, [pc, #328]	; (8008df0 <HAL_DMA_Abort_IT+0x1dc>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d020      	beq.n	8008cec <HAL_DMA_Abort_IT+0xd8>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a57      	ldr	r2, [pc, #348]	; (8008e0c <HAL_DMA_Abort_IT+0x1f8>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d019      	beq.n	8008ce8 <HAL_DMA_Abort_IT+0xd4>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a55      	ldr	r2, [pc, #340]	; (8008e10 <HAL_DMA_Abort_IT+0x1fc>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d012      	beq.n	8008ce4 <HAL_DMA_Abort_IT+0xd0>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a54      	ldr	r2, [pc, #336]	; (8008e14 <HAL_DMA_Abort_IT+0x200>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d00a      	beq.n	8008cde <HAL_DMA_Abort_IT+0xca>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a52      	ldr	r2, [pc, #328]	; (8008e18 <HAL_DMA_Abort_IT+0x204>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d102      	bne.n	8008cd8 <HAL_DMA_Abort_IT+0xc4>
 8008cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd6:	e01b      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cdc:	e018      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ce2:	e015      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	e013      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e011      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cf0:	e00e      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008cf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cf6:	e00b      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cfc:	e008      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d02:	e005      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d08:	e002      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008d0a:	2310      	movs	r3, #16
 8008d0c:	e000      	b.n	8008d10 <HAL_DMA_Abort_IT+0xfc>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4a42      	ldr	r2, [pc, #264]	; (8008e1c <HAL_DMA_Abort_IT+0x208>)
 8008d12:	6053      	str	r3, [r2, #4]
 8008d14:	e057      	b.n	8008dc6 <HAL_DMA_Abort_IT+0x1b2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a36      	ldr	r2, [pc, #216]	; (8008df4 <HAL_DMA_Abort_IT+0x1e0>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d04f      	beq.n	8008dc0 <HAL_DMA_Abort_IT+0x1ac>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a34      	ldr	r2, [pc, #208]	; (8008df8 <HAL_DMA_Abort_IT+0x1e4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d048      	beq.n	8008dbc <HAL_DMA_Abort_IT+0x1a8>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a33      	ldr	r2, [pc, #204]	; (8008dfc <HAL_DMA_Abort_IT+0x1e8>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d040      	beq.n	8008db6 <HAL_DMA_Abort_IT+0x1a2>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a31      	ldr	r2, [pc, #196]	; (8008e00 <HAL_DMA_Abort_IT+0x1ec>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d038      	beq.n	8008db0 <HAL_DMA_Abort_IT+0x19c>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a30      	ldr	r2, [pc, #192]	; (8008e04 <HAL_DMA_Abort_IT+0x1f0>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d030      	beq.n	8008daa <HAL_DMA_Abort_IT+0x196>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a2e      	ldr	r2, [pc, #184]	; (8008e08 <HAL_DMA_Abort_IT+0x1f4>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d028      	beq.n	8008da4 <HAL_DMA_Abort_IT+0x190>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a26      	ldr	r2, [pc, #152]	; (8008df0 <HAL_DMA_Abort_IT+0x1dc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d020      	beq.n	8008d9e <HAL_DMA_Abort_IT+0x18a>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a2a      	ldr	r2, [pc, #168]	; (8008e0c <HAL_DMA_Abort_IT+0x1f8>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d019      	beq.n	8008d9a <HAL_DMA_Abort_IT+0x186>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a29      	ldr	r2, [pc, #164]	; (8008e10 <HAL_DMA_Abort_IT+0x1fc>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d012      	beq.n	8008d96 <HAL_DMA_Abort_IT+0x182>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a27      	ldr	r2, [pc, #156]	; (8008e14 <HAL_DMA_Abort_IT+0x200>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d00a      	beq.n	8008d90 <HAL_DMA_Abort_IT+0x17c>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a26      	ldr	r2, [pc, #152]	; (8008e18 <HAL_DMA_Abort_IT+0x204>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d102      	bne.n	8008d8a <HAL_DMA_Abort_IT+0x176>
 8008d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d88:	e01b      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d8e:	e018      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d94:	e015      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008d96:	2310      	movs	r3, #16
 8008d98:	e013      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e011      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008d9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008da2:	e00e      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008da8:	e00b      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dae:	e008      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db4:	e005      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dba:	e002      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	e000      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1ae>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4a17      	ldr	r2, [pc, #92]	; (8008e20 <HAL_DMA_Abort_IT+0x20c>)
 8008dc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
    } 
  }
  return status;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	40020080 	.word	0x40020080
 8008df4:	40020008 	.word	0x40020008
 8008df8:	4002001c 	.word	0x4002001c
 8008dfc:	40020030 	.word	0x40020030
 8008e00:	40020044 	.word	0x40020044
 8008e04:	40020058 	.word	0x40020058
 8008e08:	4002006c 	.word	0x4002006c
 8008e0c:	40020408 	.word	0x40020408
 8008e10:	4002041c 	.word	0x4002041c
 8008e14:	40020430 	.word	0x40020430
 8008e18:	40020444 	.word	0x40020444
 8008e1c:	40020400 	.word	0x40020400
 8008e20:	40020000 	.word	0x40020000

08008e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b08b      	sub	sp, #44	; 0x2c
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e32:	2300      	movs	r3, #0
 8008e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e36:	e179      	b.n	800912c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e38:	2201      	movs	r2, #1
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69fa      	ldr	r2, [r7, #28]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	f040 8168 	bne.w	8009126 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	4a96      	ldr	r2, [pc, #600]	; (80090b4 <HAL_GPIO_Init+0x290>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d05e      	beq.n	8008f1e <HAL_GPIO_Init+0xfa>
 8008e60:	4a94      	ldr	r2, [pc, #592]	; (80090b4 <HAL_GPIO_Init+0x290>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d875      	bhi.n	8008f52 <HAL_GPIO_Init+0x12e>
 8008e66:	4a94      	ldr	r2, [pc, #592]	; (80090b8 <HAL_GPIO_Init+0x294>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d058      	beq.n	8008f1e <HAL_GPIO_Init+0xfa>
 8008e6c:	4a92      	ldr	r2, [pc, #584]	; (80090b8 <HAL_GPIO_Init+0x294>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d86f      	bhi.n	8008f52 <HAL_GPIO_Init+0x12e>
 8008e72:	4a92      	ldr	r2, [pc, #584]	; (80090bc <HAL_GPIO_Init+0x298>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d052      	beq.n	8008f1e <HAL_GPIO_Init+0xfa>
 8008e78:	4a90      	ldr	r2, [pc, #576]	; (80090bc <HAL_GPIO_Init+0x298>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d869      	bhi.n	8008f52 <HAL_GPIO_Init+0x12e>
 8008e7e:	4a90      	ldr	r2, [pc, #576]	; (80090c0 <HAL_GPIO_Init+0x29c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d04c      	beq.n	8008f1e <HAL_GPIO_Init+0xfa>
 8008e84:	4a8e      	ldr	r2, [pc, #568]	; (80090c0 <HAL_GPIO_Init+0x29c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d863      	bhi.n	8008f52 <HAL_GPIO_Init+0x12e>
 8008e8a:	4a8e      	ldr	r2, [pc, #568]	; (80090c4 <HAL_GPIO_Init+0x2a0>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d046      	beq.n	8008f1e <HAL_GPIO_Init+0xfa>
 8008e90:	4a8c      	ldr	r2, [pc, #560]	; (80090c4 <HAL_GPIO_Init+0x2a0>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d85d      	bhi.n	8008f52 <HAL_GPIO_Init+0x12e>
 8008e96:	2b12      	cmp	r3, #18
 8008e98:	d82a      	bhi.n	8008ef0 <HAL_GPIO_Init+0xcc>
 8008e9a:	2b12      	cmp	r3, #18
 8008e9c:	d859      	bhi.n	8008f52 <HAL_GPIO_Init+0x12e>
 8008e9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <HAL_GPIO_Init+0x80>)
 8008ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea4:	08008f1f 	.word	0x08008f1f
 8008ea8:	08008ef9 	.word	0x08008ef9
 8008eac:	08008f0b 	.word	0x08008f0b
 8008eb0:	08008f4d 	.word	0x08008f4d
 8008eb4:	08008f53 	.word	0x08008f53
 8008eb8:	08008f53 	.word	0x08008f53
 8008ebc:	08008f53 	.word	0x08008f53
 8008ec0:	08008f53 	.word	0x08008f53
 8008ec4:	08008f53 	.word	0x08008f53
 8008ec8:	08008f53 	.word	0x08008f53
 8008ecc:	08008f53 	.word	0x08008f53
 8008ed0:	08008f53 	.word	0x08008f53
 8008ed4:	08008f53 	.word	0x08008f53
 8008ed8:	08008f53 	.word	0x08008f53
 8008edc:	08008f53 	.word	0x08008f53
 8008ee0:	08008f53 	.word	0x08008f53
 8008ee4:	08008f53 	.word	0x08008f53
 8008ee8:	08008f01 	.word	0x08008f01
 8008eec:	08008f15 	.word	0x08008f15
 8008ef0:	4a75      	ldr	r2, [pc, #468]	; (80090c8 <HAL_GPIO_Init+0x2a4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d013      	beq.n	8008f1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008ef6:	e02c      	b.n	8008f52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	623b      	str	r3, [r7, #32]
          break;
 8008efe:	e029      	b.n	8008f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	3304      	adds	r3, #4
 8008f06:	623b      	str	r3, [r7, #32]
          break;
 8008f08:	e024      	b.n	8008f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	623b      	str	r3, [r7, #32]
          break;
 8008f12:	e01f      	b.n	8008f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	330c      	adds	r3, #12
 8008f1a:	623b      	str	r3, [r7, #32]
          break;
 8008f1c:	e01a      	b.n	8008f54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f26:	2304      	movs	r3, #4
 8008f28:	623b      	str	r3, [r7, #32]
          break;
 8008f2a:	e013      	b.n	8008f54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d105      	bne.n	8008f40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f34:	2308      	movs	r3, #8
 8008f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	69fa      	ldr	r2, [r7, #28]
 8008f3c:	611a      	str	r2, [r3, #16]
          break;
 8008f3e:	e009      	b.n	8008f54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f40:	2308      	movs	r3, #8
 8008f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	615a      	str	r2, [r3, #20]
          break;
 8008f4a:	e003      	b.n	8008f54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	623b      	str	r3, [r7, #32]
          break;
 8008f50:	e000      	b.n	8008f54 <HAL_GPIO_Init+0x130>
          break;
 8008f52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2bff      	cmp	r3, #255	; 0xff
 8008f58:	d801      	bhi.n	8008f5e <HAL_GPIO_Init+0x13a>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	e001      	b.n	8008f62 <HAL_GPIO_Init+0x13e>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3304      	adds	r3, #4
 8008f62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2bff      	cmp	r3, #255	; 0xff
 8008f68:	d802      	bhi.n	8008f70 <HAL_GPIO_Init+0x14c>
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	e002      	b.n	8008f76 <HAL_GPIO_Init+0x152>
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	3b08      	subs	r3, #8
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	210f      	movs	r1, #15
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	fa01 f303 	lsl.w	r3, r1, r3
 8008f84:	43db      	mvns	r3, r3
 8008f86:	401a      	ands	r2, r3
 8008f88:	6a39      	ldr	r1, [r7, #32]
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f90:	431a      	orrs	r2, r3
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 80c1 	beq.w	8009126 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008fa4:	4b49      	ldr	r3, [pc, #292]	; (80090cc <HAL_GPIO_Init+0x2a8>)
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	4a48      	ldr	r2, [pc, #288]	; (80090cc <HAL_GPIO_Init+0x2a8>)
 8008faa:	f043 0301 	orr.w	r3, r3, #1
 8008fae:	6193      	str	r3, [r2, #24]
 8008fb0:	4b46      	ldr	r3, [pc, #280]	; (80090cc <HAL_GPIO_Init+0x2a8>)
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	60bb      	str	r3, [r7, #8]
 8008fba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008fbc:	4a44      	ldr	r2, [pc, #272]	; (80090d0 <HAL_GPIO_Init+0x2ac>)
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	089b      	lsrs	r3, r3, #2
 8008fc2:	3302      	adds	r3, #2
 8008fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	f003 0303 	and.w	r3, r3, #3
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	220f      	movs	r2, #15
 8008fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd8:	43db      	mvns	r3, r3
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4013      	ands	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a3c      	ldr	r2, [pc, #240]	; (80090d4 <HAL_GPIO_Init+0x2b0>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d01f      	beq.n	8009028 <HAL_GPIO_Init+0x204>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a3b      	ldr	r2, [pc, #236]	; (80090d8 <HAL_GPIO_Init+0x2b4>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d019      	beq.n	8009024 <HAL_GPIO_Init+0x200>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a3a      	ldr	r2, [pc, #232]	; (80090dc <HAL_GPIO_Init+0x2b8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d013      	beq.n	8009020 <HAL_GPIO_Init+0x1fc>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a39      	ldr	r2, [pc, #228]	; (80090e0 <HAL_GPIO_Init+0x2bc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d00d      	beq.n	800901c <HAL_GPIO_Init+0x1f8>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a38      	ldr	r2, [pc, #224]	; (80090e4 <HAL_GPIO_Init+0x2c0>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d007      	beq.n	8009018 <HAL_GPIO_Init+0x1f4>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a37      	ldr	r2, [pc, #220]	; (80090e8 <HAL_GPIO_Init+0x2c4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d101      	bne.n	8009014 <HAL_GPIO_Init+0x1f0>
 8009010:	2305      	movs	r3, #5
 8009012:	e00a      	b.n	800902a <HAL_GPIO_Init+0x206>
 8009014:	2306      	movs	r3, #6
 8009016:	e008      	b.n	800902a <HAL_GPIO_Init+0x206>
 8009018:	2304      	movs	r3, #4
 800901a:	e006      	b.n	800902a <HAL_GPIO_Init+0x206>
 800901c:	2303      	movs	r3, #3
 800901e:	e004      	b.n	800902a <HAL_GPIO_Init+0x206>
 8009020:	2302      	movs	r3, #2
 8009022:	e002      	b.n	800902a <HAL_GPIO_Init+0x206>
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <HAL_GPIO_Init+0x206>
 8009028:	2300      	movs	r3, #0
 800902a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902c:	f002 0203 	and.w	r2, r2, #3
 8009030:	0092      	lsls	r2, r2, #2
 8009032:	4093      	lsls	r3, r2
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	4313      	orrs	r3, r2
 8009038:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800903a:	4925      	ldr	r1, [pc, #148]	; (80090d0 <HAL_GPIO_Init+0x2ac>)
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	089b      	lsrs	r3, r3, #2
 8009040:	3302      	adds	r3, #2
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009054:	4b25      	ldr	r3, [pc, #148]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	4924      	ldr	r1, [pc, #144]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	4313      	orrs	r3, r2
 800905e:	608b      	str	r3, [r1, #8]
 8009060:	e006      	b.n	8009070 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009062:	4b22      	ldr	r3, [pc, #136]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	43db      	mvns	r3, r3
 800906a:	4920      	ldr	r1, [pc, #128]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 800906c:	4013      	ands	r3, r2
 800906e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d006      	beq.n	800908a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800907c:	4b1b      	ldr	r3, [pc, #108]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	491a      	ldr	r1, [pc, #104]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	4313      	orrs	r3, r2
 8009086:	60cb      	str	r3, [r1, #12]
 8009088:	e006      	b.n	8009098 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800908a:	4b18      	ldr	r3, [pc, #96]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	43db      	mvns	r3, r3
 8009092:	4916      	ldr	r1, [pc, #88]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 8009094:	4013      	ands	r3, r2
 8009096:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d025      	beq.n	80090f0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80090a4:	4b11      	ldr	r3, [pc, #68]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	4910      	ldr	r1, [pc, #64]	; (80090ec <HAL_GPIO_Init+0x2c8>)
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	604b      	str	r3, [r1, #4]
 80090b0:	e025      	b.n	80090fe <HAL_GPIO_Init+0x2da>
 80090b2:	bf00      	nop
 80090b4:	10320000 	.word	0x10320000
 80090b8:	10310000 	.word	0x10310000
 80090bc:	10220000 	.word	0x10220000
 80090c0:	10210000 	.word	0x10210000
 80090c4:	10120000 	.word	0x10120000
 80090c8:	10110000 	.word	0x10110000
 80090cc:	40021000 	.word	0x40021000
 80090d0:	40010000 	.word	0x40010000
 80090d4:	40010800 	.word	0x40010800
 80090d8:	40010c00 	.word	0x40010c00
 80090dc:	40011000 	.word	0x40011000
 80090e0:	40011400 	.word	0x40011400
 80090e4:	40011800 	.word	0x40011800
 80090e8:	40011c00 	.word	0x40011c00
 80090ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80090f0:	4b15      	ldr	r3, [pc, #84]	; (8009148 <HAL_GPIO_Init+0x324>)
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	43db      	mvns	r3, r3
 80090f8:	4913      	ldr	r1, [pc, #76]	; (8009148 <HAL_GPIO_Init+0x324>)
 80090fa:	4013      	ands	r3, r2
 80090fc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d006      	beq.n	8009118 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <HAL_GPIO_Init+0x324>)
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	490e      	ldr	r1, [pc, #56]	; (8009148 <HAL_GPIO_Init+0x324>)
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	4313      	orrs	r3, r2
 8009114:	600b      	str	r3, [r1, #0]
 8009116:	e006      	b.n	8009126 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <HAL_GPIO_Init+0x324>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	43db      	mvns	r3, r3
 8009120:	4909      	ldr	r1, [pc, #36]	; (8009148 <HAL_GPIO_Init+0x324>)
 8009122:	4013      	ands	r3, r2
 8009124:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	3301      	adds	r3, #1
 800912a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	fa22 f303 	lsr.w	r3, r2, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	f47f ae7e 	bne.w	8008e38 <HAL_GPIO_Init+0x14>
  }
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	372c      	adds	r7, #44	; 0x2c
 8009142:	46bd      	mov	sp, r7
 8009144:	bc80      	pop	{r7}
 8009146:	4770      	bx	lr
 8009148:	40010400 	.word	0x40010400

0800914c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800914c:	b480      	push	{r7}
 800914e:	b089      	sub	sp, #36	; 0x24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009156:	2300      	movs	r3, #0
 8009158:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800915a:	e0a6      	b.n	80092aa <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800915c:	2201      	movs	r2, #1
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	4013      	ands	r3, r2
 8009168:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 8099 	beq.w	80092a4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009172:	4a54      	ldr	r2, [pc, #336]	; (80092c4 <HAL_GPIO_DeInit+0x178>)
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	089b      	lsrs	r3, r3, #2
 8009178:	3302      	adds	r3, #2
 800917a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800917e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	f003 0303 	and.w	r3, r3, #3
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	220f      	movs	r2, #15
 800918a:	fa02 f303 	lsl.w	r3, r2, r3
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	4013      	ands	r3, r2
 8009192:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a4c      	ldr	r2, [pc, #304]	; (80092c8 <HAL_GPIO_DeInit+0x17c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d01f      	beq.n	80091dc <HAL_GPIO_DeInit+0x90>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a4b      	ldr	r2, [pc, #300]	; (80092cc <HAL_GPIO_DeInit+0x180>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d019      	beq.n	80091d8 <HAL_GPIO_DeInit+0x8c>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a4a      	ldr	r2, [pc, #296]	; (80092d0 <HAL_GPIO_DeInit+0x184>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d013      	beq.n	80091d4 <HAL_GPIO_DeInit+0x88>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a49      	ldr	r2, [pc, #292]	; (80092d4 <HAL_GPIO_DeInit+0x188>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00d      	beq.n	80091d0 <HAL_GPIO_DeInit+0x84>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a48      	ldr	r2, [pc, #288]	; (80092d8 <HAL_GPIO_DeInit+0x18c>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <HAL_GPIO_DeInit+0x80>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a47      	ldr	r2, [pc, #284]	; (80092dc <HAL_GPIO_DeInit+0x190>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d101      	bne.n	80091c8 <HAL_GPIO_DeInit+0x7c>
 80091c4:	2305      	movs	r3, #5
 80091c6:	e00a      	b.n	80091de <HAL_GPIO_DeInit+0x92>
 80091c8:	2306      	movs	r3, #6
 80091ca:	e008      	b.n	80091de <HAL_GPIO_DeInit+0x92>
 80091cc:	2304      	movs	r3, #4
 80091ce:	e006      	b.n	80091de <HAL_GPIO_DeInit+0x92>
 80091d0:	2303      	movs	r3, #3
 80091d2:	e004      	b.n	80091de <HAL_GPIO_DeInit+0x92>
 80091d4:	2302      	movs	r3, #2
 80091d6:	e002      	b.n	80091de <HAL_GPIO_DeInit+0x92>
 80091d8:	2301      	movs	r3, #1
 80091da:	e000      	b.n	80091de <HAL_GPIO_DeInit+0x92>
 80091dc:	2300      	movs	r3, #0
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	f002 0203 	and.w	r2, r2, #3
 80091e4:	0092      	lsls	r2, r2, #2
 80091e6:	4093      	lsls	r3, r2
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d132      	bne.n	8009254 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80091ee:	4b3c      	ldr	r3, [pc, #240]	; (80092e0 <HAL_GPIO_DeInit+0x194>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	43db      	mvns	r3, r3
 80091f6:	493a      	ldr	r1, [pc, #232]	; (80092e0 <HAL_GPIO_DeInit+0x194>)
 80091f8:	4013      	ands	r3, r2
 80091fa:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80091fc:	4b38      	ldr	r3, [pc, #224]	; (80092e0 <HAL_GPIO_DeInit+0x194>)
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	43db      	mvns	r3, r3
 8009204:	4936      	ldr	r1, [pc, #216]	; (80092e0 <HAL_GPIO_DeInit+0x194>)
 8009206:	4013      	ands	r3, r2
 8009208:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800920a:	4b35      	ldr	r3, [pc, #212]	; (80092e0 <HAL_GPIO_DeInit+0x194>)
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	43db      	mvns	r3, r3
 8009212:	4933      	ldr	r1, [pc, #204]	; (80092e0 <HAL_GPIO_DeInit+0x194>)
 8009214:	4013      	ands	r3, r2
 8009216:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009218:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <HAL_GPIO_DeInit+0x194>)
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	43db      	mvns	r3, r3
 8009220:	492f      	ldr	r1, [pc, #188]	; (80092e0 <HAL_GPIO_DeInit+0x194>)
 8009222:	4013      	ands	r3, r2
 8009224:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	f003 0303 	and.w	r3, r3, #3
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	220f      	movs	r2, #15
 8009230:	fa02 f303 	lsl.w	r3, r2, r3
 8009234:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009236:	4a23      	ldr	r2, [pc, #140]	; (80092c4 <HAL_GPIO_DeInit+0x178>)
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	089b      	lsrs	r3, r3, #2
 800923c:	3302      	adds	r3, #2
 800923e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	43da      	mvns	r2, r3
 8009246:	481f      	ldr	r0, [pc, #124]	; (80092c4 <HAL_GPIO_DeInit+0x178>)
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	089b      	lsrs	r3, r3, #2
 800924c:	400a      	ands	r2, r1
 800924e:	3302      	adds	r3, #2
 8009250:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	2bff      	cmp	r3, #255	; 0xff
 8009258:	d801      	bhi.n	800925e <HAL_GPIO_DeInit+0x112>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	e001      	b.n	8009262 <HAL_GPIO_DeInit+0x116>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3304      	adds	r3, #4
 8009262:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	2bff      	cmp	r3, #255	; 0xff
 8009268:	d802      	bhi.n	8009270 <HAL_GPIO_DeInit+0x124>
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	e002      	b.n	8009276 <HAL_GPIO_DeInit+0x12a>
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	3b08      	subs	r3, #8
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	210f      	movs	r1, #15
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	fa01 f303 	lsl.w	r3, r1, r3
 8009284:	43db      	mvns	r3, r3
 8009286:	401a      	ands	r2, r3
 8009288:	2104      	movs	r1, #4
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	fa01 f303 	lsl.w	r3, r1, r3
 8009290:	431a      	orrs	r2, r3
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	43db      	mvns	r3, r3
 800929e:	401a      	ands	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	3301      	adds	r3, #1
 80092a8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	fa22 f303 	lsr.w	r3, r2, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f47f af52 	bne.w	800915c <HAL_GPIO_DeInit+0x10>
  }
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	3724      	adds	r7, #36	; 0x24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr
 80092c4:	40010000 	.word	0x40010000
 80092c8:	40010800 	.word	0x40010800
 80092cc:	40010c00 	.word	0x40010c00
 80092d0:	40011000 	.word	0x40011000
 80092d4:	40011400 	.word	0x40011400
 80092d8:	40011800 	.word	0x40011800
 80092dc:	40011c00 	.word	0x40011c00
 80092e0:	40010400 	.word	0x40010400

080092e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	887b      	ldrh	r3, [r7, #2]
 80092f6:	4013      	ands	r3, r2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092fc:	2301      	movs	r3, #1
 80092fe:	73fb      	strb	r3, [r7, #15]
 8009300:	e001      	b.n	8009306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009306:	7bfb      	ldrb	r3, [r7, #15]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr

08009312 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	807b      	strh	r3, [r7, #2]
 800931e:	4613      	mov	r3, r2
 8009320:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009322:	787b      	ldrb	r3, [r7, #1]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009328:	887a      	ldrh	r2, [r7, #2]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800932e:	e003      	b.n	8009338 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009330:	887b      	ldrh	r3, [r7, #2]
 8009332:	041a      	lsls	r2, r3, #16
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	611a      	str	r2, [r3, #16]
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	bc80      	pop	{r7}
 8009340:	4770      	bx	lr

08009342 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009342:	b480      	push	{r7}
 8009344:	b085      	sub	sp, #20
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009354:	887a      	ldrh	r2, [r7, #2]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	4013      	ands	r3, r2
 800935a:	041a      	lsls	r2, r3, #16
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	43d9      	mvns	r1, r3
 8009360:	887b      	ldrh	r3, [r7, #2]
 8009362:	400b      	ands	r3, r1
 8009364:	431a      	orrs	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	611a      	str	r2, [r3, #16]
}
 800936a:	bf00      	nop
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	bc80      	pop	{r7}
 8009372:	4770      	bx	lr

08009374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e12b      	b.n	80095de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7fe fff8 	bl	8008390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2224      	movs	r2, #36	; 0x24
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 0201 	bic.w	r2, r2, #1
 80093b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093d8:	f001 fdb8 	bl	800af4c <HAL_RCC_GetPCLK1Freq>
 80093dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	4a81      	ldr	r2, [pc, #516]	; (80095e8 <HAL_I2C_Init+0x274>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d807      	bhi.n	80093f8 <HAL_I2C_Init+0x84>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4a80      	ldr	r2, [pc, #512]	; (80095ec <HAL_I2C_Init+0x278>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	bf94      	ite	ls
 80093f0:	2301      	movls	r3, #1
 80093f2:	2300      	movhi	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	e006      	b.n	8009406 <HAL_I2C_Init+0x92>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4a7d      	ldr	r2, [pc, #500]	; (80095f0 <HAL_I2C_Init+0x27c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	bf94      	ite	ls
 8009400:	2301      	movls	r3, #1
 8009402:	2300      	movhi	r3, #0
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e0e7      	b.n	80095de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4a78      	ldr	r2, [pc, #480]	; (80095f4 <HAL_I2C_Init+0x280>)
 8009412:	fba2 2303 	umull	r2, r3, r2, r3
 8009416:	0c9b      	lsrs	r3, r3, #18
 8009418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	430a      	orrs	r2, r1
 800942c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	4a6a      	ldr	r2, [pc, #424]	; (80095e8 <HAL_I2C_Init+0x274>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d802      	bhi.n	8009448 <HAL_I2C_Init+0xd4>
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	3301      	adds	r3, #1
 8009446:	e009      	b.n	800945c <HAL_I2C_Init+0xe8>
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800944e:	fb02 f303 	mul.w	r3, r2, r3
 8009452:	4a69      	ldr	r2, [pc, #420]	; (80095f8 <HAL_I2C_Init+0x284>)
 8009454:	fba2 2303 	umull	r2, r3, r2, r3
 8009458:	099b      	lsrs	r3, r3, #6
 800945a:	3301      	adds	r3, #1
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	6812      	ldr	r2, [r2, #0]
 8009460:	430b      	orrs	r3, r1
 8009462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800946e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	495c      	ldr	r1, [pc, #368]	; (80095e8 <HAL_I2C_Init+0x274>)
 8009478:	428b      	cmp	r3, r1
 800947a:	d819      	bhi.n	80094b0 <HAL_I2C_Init+0x13c>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	1e59      	subs	r1, r3, #1
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	fbb1 f3f3 	udiv	r3, r1, r3
 800948a:	1c59      	adds	r1, r3, #1
 800948c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009490:	400b      	ands	r3, r1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <HAL_I2C_Init+0x138>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1e59      	subs	r1, r3, #1
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80094a4:	3301      	adds	r3, #1
 80094a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094aa:	e051      	b.n	8009550 <HAL_I2C_Init+0x1dc>
 80094ac:	2304      	movs	r3, #4
 80094ae:	e04f      	b.n	8009550 <HAL_I2C_Init+0x1dc>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d111      	bne.n	80094dc <HAL_I2C_Init+0x168>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	1e58      	subs	r0, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6859      	ldr	r1, [r3, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	440b      	add	r3, r1
 80094c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80094ca:	3301      	adds	r3, #1
 80094cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bf0c      	ite	eq
 80094d4:	2301      	moveq	r3, #1
 80094d6:	2300      	movne	r3, #0
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	e012      	b.n	8009502 <HAL_I2C_Init+0x18e>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	1e58      	subs	r0, r3, #1
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6859      	ldr	r1, [r3, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	0099      	lsls	r1, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80094f2:	3301      	adds	r3, #1
 80094f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bf0c      	ite	eq
 80094fc:	2301      	moveq	r3, #1
 80094fe:	2300      	movne	r3, #0
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <HAL_I2C_Init+0x196>
 8009506:	2301      	movs	r3, #1
 8009508:	e022      	b.n	8009550 <HAL_I2C_Init+0x1dc>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10e      	bne.n	8009530 <HAL_I2C_Init+0x1bc>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	1e58      	subs	r0, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6859      	ldr	r1, [r3, #4]
 800951a:	460b      	mov	r3, r1
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	440b      	add	r3, r1
 8009520:	fbb0 f3f3 	udiv	r3, r0, r3
 8009524:	3301      	adds	r3, #1
 8009526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800952a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800952e:	e00f      	b.n	8009550 <HAL_I2C_Init+0x1dc>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	1e58      	subs	r0, r3, #1
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6859      	ldr	r1, [r3, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	0099      	lsls	r1, r3, #2
 8009540:	440b      	add	r3, r1
 8009542:	fbb0 f3f3 	udiv	r3, r0, r3
 8009546:	3301      	adds	r3, #1
 8009548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800954c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009550:	6879      	ldr	r1, [r7, #4]
 8009552:	6809      	ldr	r1, [r1, #0]
 8009554:	4313      	orrs	r3, r2
 8009556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69da      	ldr	r2, [r3, #28]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800957e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6911      	ldr	r1, [r2, #16]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	68d2      	ldr	r2, [r2, #12]
 800958a:	4311      	orrs	r1, r2
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	6812      	ldr	r2, [r2, #0]
 8009590:	430b      	orrs	r3, r1
 8009592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695a      	ldr	r2, [r3, #20]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0201 	orr.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	000186a0 	.word	0x000186a0
 80095ec:	001e847f 	.word	0x001e847f
 80095f0:	003d08ff 	.word	0x003d08ff
 80095f4:	431bde83 	.word	0x431bde83
 80095f8:	10624dd3 	.word	0x10624dd3

080095fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e021      	b.n	8009652 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2224      	movs	r2, #36	; 0x24
 8009612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0201 	bic.w	r2, r2, #1
 8009624:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fe fef0 	bl	800840c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b088      	sub	sp, #32
 8009660:	af02      	add	r7, sp, #8
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	607a      	str	r2, [r7, #4]
 8009666:	461a      	mov	r2, r3
 8009668:	460b      	mov	r3, r1
 800966a:	817b      	strh	r3, [r7, #10]
 800966c:	4613      	mov	r3, r2
 800966e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009670:	f7ff f85e 	bl	8008730 <HAL_GetTick>
 8009674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b20      	cmp	r3, #32
 8009680:	f040 80e0 	bne.w	8009844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	2319      	movs	r3, #25
 800968a:	2201      	movs	r2, #1
 800968c:	4970      	ldr	r1, [pc, #448]	; (8009850 <HAL_I2C_Master_Transmit+0x1f4>)
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 fe5c 	bl	800a34c <I2C_WaitOnFlagUntilTimeout>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800969a:	2302      	movs	r3, #2
 800969c:	e0d3      	b.n	8009846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d101      	bne.n	80096ac <HAL_I2C_Master_Transmit+0x50>
 80096a8:	2302      	movs	r3, #2
 80096aa:	e0cc      	b.n	8009846 <HAL_I2C_Master_Transmit+0x1ea>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d007      	beq.n	80096d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f042 0201 	orr.w	r2, r2, #1
 80096d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2221      	movs	r2, #33	; 0x21
 80096e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2210      	movs	r2, #16
 80096ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	893a      	ldrh	r2, [r7, #8]
 8009702:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009708:	b29a      	uxth	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4a50      	ldr	r2, [pc, #320]	; (8009854 <HAL_I2C_Master_Transmit+0x1f8>)
 8009712:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009714:	8979      	ldrh	r1, [r7, #10]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	6a3a      	ldr	r2, [r7, #32]
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 fc16 	bl	8009f4c <I2C_MasterRequestWrite>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e08d      	b.n	8009846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800972a:	2300      	movs	r3, #0
 800972c:	613b      	str	r3, [r7, #16]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	613b      	str	r3, [r7, #16]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	613b      	str	r3, [r7, #16]
 800973e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009740:	e066      	b.n	8009810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	6a39      	ldr	r1, [r7, #32]
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 ff1a 	bl	800a580 <I2C_WaitOnTXEFlagUntilTimeout>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00d      	beq.n	800976e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009756:	2b04      	cmp	r3, #4
 8009758:	d107      	bne.n	800976a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e06b      	b.n	8009846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	781a      	ldrb	r2, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	1c5a      	adds	r2, r3, #1
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009788:	b29b      	uxth	r3, r3
 800978a:	3b01      	subs	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009796:	3b01      	subs	r3, #1
 8009798:	b29a      	uxth	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d11b      	bne.n	80097e4 <HAL_I2C_Master_Transmit+0x188>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d017      	beq.n	80097e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	3b01      	subs	r3, #1
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097dc:	3b01      	subs	r3, #1
 80097de:	b29a      	uxth	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	6a39      	ldr	r1, [r7, #32]
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f000 ff11 	bl	800a610 <I2C_WaitOnBTFFlagUntilTimeout>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00d      	beq.n	8009810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	d107      	bne.n	800980c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800980a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e01a      	b.n	8009846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009814:	2b00      	cmp	r3, #0
 8009816:	d194      	bne.n	8009742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2220      	movs	r2, #32
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	e000      	b.n	8009846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009844:	2302      	movs	r3, #2
  }
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	00100002 	.word	0x00100002
 8009854:	ffff0000 	.word	0xffff0000

08009858 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af02      	add	r7, sp, #8
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	4608      	mov	r0, r1
 8009862:	4611      	mov	r1, r2
 8009864:	461a      	mov	r2, r3
 8009866:	4603      	mov	r3, r0
 8009868:	817b      	strh	r3, [r7, #10]
 800986a:	460b      	mov	r3, r1
 800986c:	813b      	strh	r3, [r7, #8]
 800986e:	4613      	mov	r3, r2
 8009870:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009872:	f7fe ff5d 	bl	8008730 <HAL_GetTick>
 8009876:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b20      	cmp	r3, #32
 8009882:	f040 80d9 	bne.w	8009a38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	2319      	movs	r3, #25
 800988c:	2201      	movs	r2, #1
 800988e:	496d      	ldr	r1, [pc, #436]	; (8009a44 <HAL_I2C_Mem_Write+0x1ec>)
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 fd5b 	bl	800a34c <I2C_WaitOnFlagUntilTimeout>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800989c:	2302      	movs	r3, #2
 800989e:	e0cc      	b.n	8009a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_I2C_Mem_Write+0x56>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e0c5      	b.n	8009a3a <HAL_I2C_Mem_Write+0x1e2>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d007      	beq.n	80098d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0201 	orr.w	r2, r2, #1
 80098d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2221      	movs	r2, #33	; 0x21
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2240      	movs	r2, #64	; 0x40
 80098f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6a3a      	ldr	r2, [r7, #32]
 80098fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009904:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4a4d      	ldr	r2, [pc, #308]	; (8009a48 <HAL_I2C_Mem_Write+0x1f0>)
 8009914:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009916:	88f8      	ldrh	r0, [r7, #6]
 8009918:	893a      	ldrh	r2, [r7, #8]
 800991a:	8979      	ldrh	r1, [r7, #10]
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	4603      	mov	r3, r0
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 fb92 	bl	800a050 <I2C_RequestMemoryWrite>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d052      	beq.n	80099d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e081      	b.n	8009a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 fe20 	bl	800a580 <I2C_WaitOnTXEFlagUntilTimeout>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00d      	beq.n	8009962 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994a:	2b04      	cmp	r3, #4
 800994c:	d107      	bne.n	800995e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800995c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e06b      	b.n	8009a3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	781a      	ldrb	r2, [r3, #0]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997c:	3b01      	subs	r3, #1
 800997e:	b29a      	uxth	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009988:	b29b      	uxth	r3, r3
 800998a:	3b01      	subs	r3, #1
 800998c:	b29a      	uxth	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b04      	cmp	r3, #4
 800999e:	d11b      	bne.n	80099d8 <HAL_I2C_Mem_Write+0x180>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d017      	beq.n	80099d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	781a      	ldrb	r2, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c2:	3b01      	subs	r3, #1
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	3b01      	subs	r3, #1
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1aa      	bne.n	8009936 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 fe13 	bl	800a610 <I2C_WaitOnBTFFlagUntilTimeout>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00d      	beq.n	8009a0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f4:	2b04      	cmp	r3, #4
 80099f6:	d107      	bne.n	8009a08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e016      	b.n	8009a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	e000      	b.n	8009a3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a38:	2302      	movs	r3, #2
  }
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	00100002 	.word	0x00100002
 8009a48:	ffff0000 	.word	0xffff0000

08009a4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08c      	sub	sp, #48	; 0x30
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	4608      	mov	r0, r1
 8009a56:	4611      	mov	r1, r2
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	817b      	strh	r3, [r7, #10]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	813b      	strh	r3, [r7, #8]
 8009a62:	4613      	mov	r3, r2
 8009a64:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a6a:	f7fe fe61 	bl	8008730 <HAL_GetTick>
 8009a6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b20      	cmp	r3, #32
 8009a7a:	f040 8244 	bne.w	8009f06 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	2319      	movs	r3, #25
 8009a84:	2201      	movs	r2, #1
 8009a86:	4982      	ldr	r1, [pc, #520]	; (8009c90 <HAL_I2C_Mem_Read+0x244>)
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 fc5f 	bl	800a34c <I2C_WaitOnFlagUntilTimeout>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009a94:	2302      	movs	r3, #2
 8009a96:	e237      	b.n	8009f08 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d101      	bne.n	8009aa6 <HAL_I2C_Mem_Read+0x5a>
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	e230      	b.n	8009f08 <HAL_I2C_Mem_Read+0x4bc>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d007      	beq.n	8009acc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f042 0201 	orr.w	r2, r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ada:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2222      	movs	r2, #34	; 0x22
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2240      	movs	r2, #64	; 0x40
 8009ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4a62      	ldr	r2, [pc, #392]	; (8009c94 <HAL_I2C_Mem_Read+0x248>)
 8009b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b0e:	88f8      	ldrh	r0, [r7, #6]
 8009b10:	893a      	ldrh	r2, [r7, #8]
 8009b12:	8979      	ldrh	r1, [r7, #10]
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	9301      	str	r3, [sp, #4]
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fb2c 	bl	800a17c <I2C_RequestMemoryRead>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e1ec      	b.n	8009f08 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d113      	bne.n	8009b5e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b36:	2300      	movs	r3, #0
 8009b38:	61fb      	str	r3, [r7, #28]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	61fb      	str	r3, [r7, #28]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	61fb      	str	r3, [r7, #28]
 8009b4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	e1c0      	b.n	8009ee0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d11e      	bne.n	8009ba4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b76:	b672      	cpsid	i
}
 8009b78:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	61bb      	str	r3, [r7, #24]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	695b      	ldr	r3, [r3, #20]
 8009b84:	61bb      	str	r3, [r7, #24]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	61bb      	str	r3, [r7, #24]
 8009b8e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009ba0:	b662      	cpsie	i
}
 8009ba2:	e035      	b.n	8009c10 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d11e      	bne.n	8009bea <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bbc:	b672      	cpsid	i
}
 8009bbe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009be4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009be6:	b662      	cpsie	i
}
 8009be8:	e012      	b.n	8009c10 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bf8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	613b      	str	r3, [r7, #16]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	613b      	str	r3, [r7, #16]
 8009c0e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c10:	e166      	b.n	8009ee0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	f200 811f 	bhi.w	8009e5a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d123      	bne.n	8009c6c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 fd39 	bl	800a6a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e167      	b.n	8009f08 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	691a      	ldr	r2, [r3, #16]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c6a:	e139      	b.n	8009ee0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d152      	bne.n	8009d1a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	4906      	ldr	r1, [pc, #24]	; (8009c98 <HAL_I2C_Mem_Read+0x24c>)
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 fb64 	bl	800a34c <I2C_WaitOnFlagUntilTimeout>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d008      	beq.n	8009c9c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e13c      	b.n	8009f08 <HAL_I2C_Mem_Read+0x4bc>
 8009c8e:	bf00      	nop
 8009c90:	00100002 	.word	0x00100002
 8009c94:	ffff0000 	.word	0xffff0000
 8009c98:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009c9c:	b672      	cpsid	i
}
 8009c9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	691a      	ldr	r2, [r3, #16]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	b2d2      	uxtb	r2, r2
 8009cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009ce2:	b662      	cpsie	i
}
 8009ce4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	691a      	ldr	r2, [r3, #16]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d02:	3b01      	subs	r3, #1
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d18:	e0e2      	b.n	8009ee0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d20:	2200      	movs	r2, #0
 8009d22:	497b      	ldr	r1, [pc, #492]	; (8009f10 <HAL_I2C_Mem_Read+0x4c4>)
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 fb11 	bl	800a34c <I2C_WaitOnFlagUntilTimeout>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e0e9      	b.n	8009f08 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d44:	b672      	cpsid	i
}
 8009d46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691a      	ldr	r2, [r3, #16]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	1c5a      	adds	r2, r3, #1
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d64:	3b01      	subs	r3, #1
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009d7a:	4b66      	ldr	r3, [pc, #408]	; (8009f14 <HAL_I2C_Mem_Read+0x4c8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	08db      	lsrs	r3, r3, #3
 8009d80:	4a65      	ldr	r2, [pc, #404]	; (8009f18 <HAL_I2C_Mem_Read+0x4cc>)
 8009d82:	fba2 2303 	umull	r2, r3, r2, r3
 8009d86:	0a1a      	lsrs	r2, r3, #8
 8009d88:	4613      	mov	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	00da      	lsls	r2, r3, #3
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	3b01      	subs	r3, #1
 8009d98:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d118      	bne.n	8009dd2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2220      	movs	r2, #32
 8009daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dba:	f043 0220 	orr.w	r2, r3, #32
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009dc2:	b662      	cpsie	i
}
 8009dc4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e09a      	b.n	8009f08 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	695b      	ldr	r3, [r3, #20]
 8009dd8:	f003 0304 	and.w	r3, r3, #4
 8009ddc:	2b04      	cmp	r3, #4
 8009dde:	d1d9      	bne.n	8009d94 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691a      	ldr	r2, [r3, #16]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e22:	b662      	cpsie	i
}
 8009e24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	691a      	ldr	r2, [r3, #16]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e30:	b2d2      	uxtb	r2, r2
 8009e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e38:	1c5a      	adds	r2, r3, #1
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e42:	3b01      	subs	r3, #1
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	3b01      	subs	r3, #1
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e58:	e042      	b.n	8009ee0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f000 fc1e 	bl	800a6a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e04c      	b.n	8009f08 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	b2d2      	uxtb	r2, r2
 8009e7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d118      	bne.n	8009ee0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	691a      	ldr	r2, [r3, #16]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	b2d2      	uxtb	r2, r2
 8009eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f47f ae94 	bne.w	8009c12 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2220      	movs	r2, #32
 8009eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e000      	b.n	8009f08 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f06:	2302      	movs	r3, #2
  }
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3728      	adds	r7, #40	; 0x28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	00010004 	.word	0x00010004
 8009f14:	200000b4 	.word	0x200000b4
 8009f18:	14f8b589 	.word	0x14f8b589

08009f1c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f2a:	b2db      	uxtb	r3, r3
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bc80      	pop	{r7}
 8009f34:	4770      	bx	lr

08009f36 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bc80      	pop	{r7}
 8009f4a:	4770      	bx	lr

08009f4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b088      	sub	sp, #32
 8009f50:	af02      	add	r7, sp, #8
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	607a      	str	r2, [r7, #4]
 8009f56:	603b      	str	r3, [r7, #0]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d006      	beq.n	8009f76 <I2C_MasterRequestWrite+0x2a>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d003      	beq.n	8009f76 <I2C_MasterRequestWrite+0x2a>
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f74:	d108      	bne.n	8009f88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	e00b      	b.n	8009fa0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8c:	2b12      	cmp	r3, #18
 8009f8e:	d107      	bne.n	8009fa0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 f9cd 	bl	800a34c <I2C_WaitOnFlagUntilTimeout>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00d      	beq.n	8009fd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc6:	d103      	bne.n	8009fd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e035      	b.n	800a040 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fdc:	d108      	bne.n	8009ff0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fde:	897b      	ldrh	r3, [r7, #10]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fec:	611a      	str	r2, [r3, #16]
 8009fee:	e01b      	b.n	800a028 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009ff0:	897b      	ldrh	r3, [r7, #10]
 8009ff2:	11db      	asrs	r3, r3, #7
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	f003 0306 	and.w	r3, r3, #6
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	f063 030f 	orn	r3, r3, #15
 800a000:	b2da      	uxtb	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	490e      	ldr	r1, [pc, #56]	; (800a048 <I2C_MasterRequestWrite+0xfc>)
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f000 fa16 	bl	800a440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e010      	b.n	800a040 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a01e:	897b      	ldrh	r3, [r7, #10]
 800a020:	b2da      	uxtb	r2, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	4907      	ldr	r1, [pc, #28]	; (800a04c <I2C_MasterRequestWrite+0x100>)
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 fa06 	bl	800a440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e000      	b.n	800a040 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	00010008 	.word	0x00010008
 800a04c:	00010002 	.word	0x00010002

0800a050 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af02      	add	r7, sp, #8
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	4608      	mov	r0, r1
 800a05a:	4611      	mov	r1, r2
 800a05c:	461a      	mov	r2, r3
 800a05e:	4603      	mov	r3, r0
 800a060:	817b      	strh	r3, [r7, #10]
 800a062:	460b      	mov	r3, r1
 800a064:	813b      	strh	r3, [r7, #8]
 800a066:	4613      	mov	r3, r2
 800a068:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a078:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	2200      	movs	r2, #0
 800a082:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 f960 	bl	800a34c <I2C_WaitOnFlagUntilTimeout>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00d      	beq.n	800a0ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a0:	d103      	bne.n	800a0aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e05f      	b.n	800a16e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0ae:	897b      	ldrh	r3, [r7, #10]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	6a3a      	ldr	r2, [r7, #32]
 800a0c2:	492d      	ldr	r1, [pc, #180]	; (800a178 <I2C_RequestMemoryWrite+0x128>)
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f9bb 	bl	800a440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e04c      	b.n	800a16e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ec:	6a39      	ldr	r1, [r7, #32]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fa46 	bl	800a580 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00d      	beq.n	800a116 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d107      	bne.n	800a112 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e02b      	b.n	800a16e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d105      	bne.n	800a128 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a11c:	893b      	ldrh	r3, [r7, #8]
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	611a      	str	r2, [r3, #16]
 800a126:	e021      	b.n	800a16c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a128:	893b      	ldrh	r3, [r7, #8]
 800a12a:	0a1b      	lsrs	r3, r3, #8
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a138:	6a39      	ldr	r1, [r7, #32]
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 fa20 	bl	800a580 <I2C_WaitOnTXEFlagUntilTimeout>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00d      	beq.n	800a162 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d107      	bne.n	800a15e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a15c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e005      	b.n	800a16e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a162:	893b      	ldrh	r3, [r7, #8]
 800a164:	b2da      	uxtb	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	00010002 	.word	0x00010002

0800a17c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af02      	add	r7, sp, #8
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	4608      	mov	r0, r1
 800a186:	4611      	mov	r1, r2
 800a188:	461a      	mov	r2, r3
 800a18a:	4603      	mov	r3, r0
 800a18c:	817b      	strh	r3, [r7, #10]
 800a18e:	460b      	mov	r3, r1
 800a190:	813b      	strh	r3, [r7, #8]
 800a192:	4613      	mov	r3, r2
 800a194:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 f8c2 	bl	800a34c <I2C_WaitOnFlagUntilTimeout>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00d      	beq.n	800a1ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1dc:	d103      	bne.n	800a1e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e0aa      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1ea:	897b      	ldrh	r3, [r7, #10]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	6a3a      	ldr	r2, [r7, #32]
 800a1fe:	4952      	ldr	r1, [pc, #328]	; (800a348 <I2C_RequestMemoryRead+0x1cc>)
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f91d 	bl	800a440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e097      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	617b      	str	r3, [r7, #20]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a228:	6a39      	ldr	r1, [r7, #32]
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f000 f9a8 	bl	800a580 <I2C_WaitOnTXEFlagUntilTimeout>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00d      	beq.n	800a252 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d107      	bne.n	800a24e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a24c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e076      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a252:	88fb      	ldrh	r3, [r7, #6]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d105      	bne.n	800a264 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a258:	893b      	ldrh	r3, [r7, #8]
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	611a      	str	r2, [r3, #16]
 800a262:	e021      	b.n	800a2a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a264:	893b      	ldrh	r3, [r7, #8]
 800a266:	0a1b      	lsrs	r3, r3, #8
 800a268:	b29b      	uxth	r3, r3
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a274:	6a39      	ldr	r1, [r7, #32]
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 f982 	bl	800a580 <I2C_WaitOnTXEFlagUntilTimeout>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00d      	beq.n	800a29e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	2b04      	cmp	r3, #4
 800a288:	d107      	bne.n	800a29a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a298:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e050      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a29e:	893b      	ldrh	r3, [r7, #8]
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2aa:	6a39      	ldr	r1, [r7, #32]
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f967 	bl	800a580 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00d      	beq.n	800a2d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2bc:	2b04      	cmp	r3, #4
 800a2be:	d107      	bne.n	800a2d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e035      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 f82b 	bl	800a34c <I2C_WaitOnFlagUntilTimeout>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00d      	beq.n	800a318 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a30a:	d103      	bne.n	800a314 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e013      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a318:	897b      	ldrh	r3, [r7, #10]
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f043 0301 	orr.w	r3, r3, #1
 800a320:	b2da      	uxtb	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	6a3a      	ldr	r2, [r7, #32]
 800a32c:	4906      	ldr	r1, [pc, #24]	; (800a348 <I2C_RequestMemoryRead+0x1cc>)
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 f886 	bl	800a440 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	00010002 	.word	0x00010002

0800a34c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	4613      	mov	r3, r2
 800a35a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a35c:	e048      	b.n	800a3f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a364:	d044      	beq.n	800a3f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a366:	f7fe f9e3 	bl	8008730 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	429a      	cmp	r2, r3
 800a374:	d302      	bcc.n	800a37c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d139      	bne.n	800a3f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	0c1b      	lsrs	r3, r3, #16
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b01      	cmp	r3, #1
 800a384:	d10d      	bne.n	800a3a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	43da      	mvns	r2, r3
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	4013      	ands	r3, r2
 800a392:	b29b      	uxth	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	bf0c      	ite	eq
 800a398:	2301      	moveq	r3, #1
 800a39a:	2300      	movne	r3, #0
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	461a      	mov	r2, r3
 800a3a0:	e00c      	b.n	800a3bc <I2C_WaitOnFlagUntilTimeout+0x70>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	43da      	mvns	r2, r3
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	bf0c      	ite	eq
 800a3b4:	2301      	moveq	r3, #1
 800a3b6:	2300      	movne	r3, #0
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d116      	bne.n	800a3f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3dc:	f043 0220 	orr.w	r2, r3, #32
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e023      	b.n	800a438 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	0c1b      	lsrs	r3, r3, #16
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d10d      	bne.n	800a416 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	695b      	ldr	r3, [r3, #20]
 800a400:	43da      	mvns	r2, r3
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	4013      	ands	r3, r2
 800a406:	b29b      	uxth	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	bf0c      	ite	eq
 800a40c:	2301      	moveq	r3, #1
 800a40e:	2300      	movne	r3, #0
 800a410:	b2db      	uxtb	r3, r3
 800a412:	461a      	mov	r2, r3
 800a414:	e00c      	b.n	800a430 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	43da      	mvns	r2, r3
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	4013      	ands	r3, r2
 800a422:	b29b      	uxth	r3, r3
 800a424:	2b00      	cmp	r3, #0
 800a426:	bf0c      	ite	eq
 800a428:	2301      	moveq	r3, #1
 800a42a:	2300      	movne	r3, #0
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	461a      	mov	r2, r3
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	429a      	cmp	r2, r3
 800a434:	d093      	beq.n	800a35e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a44e:	e071      	b.n	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a45a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a45e:	d123      	bne.n	800a4a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a46e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a478:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2220      	movs	r2, #32
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a494:	f043 0204 	orr.w	r2, r3, #4
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e067      	b.n	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ae:	d041      	beq.n	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b0:	f7fe f93e 	bl	8008730 <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d302      	bcc.n	800a4c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d136      	bne.n	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	0c1b      	lsrs	r3, r3, #16
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d10c      	bne.n	800a4ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	43da      	mvns	r2, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	bf14      	ite	ne
 800a4e2:	2301      	movne	r3, #1
 800a4e4:	2300      	moveq	r3, #0
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	e00b      	b.n	800a502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	43da      	mvns	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bf14      	ite	ne
 800a4fc:	2301      	movne	r3, #1
 800a4fe:	2300      	moveq	r3, #0
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d016      	beq.n	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a520:	f043 0220 	orr.w	r2, r3, #32
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e021      	b.n	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	0c1b      	lsrs	r3, r3, #16
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d10c      	bne.n	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	43da      	mvns	r2, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	4013      	ands	r3, r2
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	bf14      	ite	ne
 800a550:	2301      	movne	r3, #1
 800a552:	2300      	moveq	r3, #0
 800a554:	b2db      	uxtb	r3, r3
 800a556:	e00b      	b.n	800a570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	43da      	mvns	r2, r3
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4013      	ands	r3, r2
 800a564:	b29b      	uxth	r3, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	bf14      	ite	ne
 800a56a:	2301      	movne	r3, #1
 800a56c:	2300      	moveq	r3, #0
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	f47f af6d 	bne.w	800a450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a58c:	e034      	b.n	800a5f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 f8e3 	bl	800a75a <I2C_IsAcknowledgeFailed>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e034      	b.n	800a608 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5a4:	d028      	beq.n	800a5f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5a6:	f7fe f8c3 	bl	8008730 <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d302      	bcc.n	800a5bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d11d      	bne.n	800a5f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c6:	2b80      	cmp	r3, #128	; 0x80
 800a5c8:	d016      	beq.n	800a5f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2220      	movs	r2, #32
 800a5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e4:	f043 0220 	orr.w	r2, r3, #32
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e007      	b.n	800a608 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a602:	2b80      	cmp	r3, #128	; 0x80
 800a604:	d1c3      	bne.n	800a58e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a61c:	e034      	b.n	800a688 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 f89b 	bl	800a75a <I2C_IsAcknowledgeFailed>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e034      	b.n	800a698 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a634:	d028      	beq.n	800a688 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a636:	f7fe f87b 	bl	8008730 <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	429a      	cmp	r2, r3
 800a644:	d302      	bcc.n	800a64c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d11d      	bne.n	800a688 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b04      	cmp	r3, #4
 800a658:	d016      	beq.n	800a688 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2220      	movs	r2, #32
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a674:	f043 0220 	orr.w	r2, r3, #32
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e007      	b.n	800a698 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	f003 0304 	and.w	r3, r3, #4
 800a692:	2b04      	cmp	r3, #4
 800a694:	d1c3      	bne.n	800a61e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6ac:	e049      	b.n	800a742 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	f003 0310 	and.w	r3, r3, #16
 800a6b8:	2b10      	cmp	r3, #16
 800a6ba:	d119      	bne.n	800a6f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f06f 0210 	mvn.w	r2, #16
 800a6c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e030      	b.n	800a752 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6f0:	f7fe f81e 	bl	8008730 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d302      	bcc.n	800a706 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d11d      	bne.n	800a742 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a710:	2b40      	cmp	r3, #64	; 0x40
 800a712:	d016      	beq.n	800a742 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2220      	movs	r2, #32
 800a71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72e:	f043 0220 	orr.w	r2, r3, #32
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e007      	b.n	800a752 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74c:	2b40      	cmp	r3, #64	; 0x40
 800a74e:	d1ae      	bne.n	800a6ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a76c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a770:	d11b      	bne.n	800a7aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a77a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2220      	movs	r2, #32
 800a786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	f043 0204 	orr.w	r2, r3, #4
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bc80      	pop	{r7}
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e272      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 8087 	beq.w	800a8e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a7d8:	4b92      	ldr	r3, [pc, #584]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f003 030c 	and.w	r3, r3, #12
 800a7e0:	2b04      	cmp	r3, #4
 800a7e2:	d00c      	beq.n	800a7fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a7e4:	4b8f      	ldr	r3, [pc, #572]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f003 030c 	and.w	r3, r3, #12
 800a7ec:	2b08      	cmp	r3, #8
 800a7ee:	d112      	bne.n	800a816 <HAL_RCC_OscConfig+0x5e>
 800a7f0:	4b8c      	ldr	r3, [pc, #560]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7fc:	d10b      	bne.n	800a816 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7fe:	4b89      	ldr	r3, [pc, #548]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d06c      	beq.n	800a8e4 <HAL_RCC_OscConfig+0x12c>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d168      	bne.n	800a8e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e24c      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a81e:	d106      	bne.n	800a82e <HAL_RCC_OscConfig+0x76>
 800a820:	4b80      	ldr	r3, [pc, #512]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a7f      	ldr	r2, [pc, #508]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	e02e      	b.n	800a88c <HAL_RCC_OscConfig+0xd4>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10c      	bne.n	800a850 <HAL_RCC_OscConfig+0x98>
 800a836:	4b7b      	ldr	r3, [pc, #492]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a7a      	ldr	r2, [pc, #488]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a83c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	4b78      	ldr	r3, [pc, #480]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a77      	ldr	r2, [pc, #476]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	e01d      	b.n	800a88c <HAL_RCC_OscConfig+0xd4>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a858:	d10c      	bne.n	800a874 <HAL_RCC_OscConfig+0xbc>
 800a85a:	4b72      	ldr	r3, [pc, #456]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a71      	ldr	r2, [pc, #452]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	4b6f      	ldr	r3, [pc, #444]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a6e      	ldr	r2, [pc, #440]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a86c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a870:	6013      	str	r3, [r2, #0]
 800a872:	e00b      	b.n	800a88c <HAL_RCC_OscConfig+0xd4>
 800a874:	4b6b      	ldr	r3, [pc, #428]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a6a      	ldr	r2, [pc, #424]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a87a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	4b68      	ldr	r3, [pc, #416]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a67      	ldr	r2, [pc, #412]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a88a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d013      	beq.n	800a8bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a894:	f7fd ff4c 	bl	8008730 <HAL_GetTick>
 800a898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a89a:	e008      	b.n	800a8ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a89c:	f7fd ff48 	bl	8008730 <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	2b64      	cmp	r3, #100	; 0x64
 800a8a8:	d901      	bls.n	800a8ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e200      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8ae:	4b5d      	ldr	r3, [pc, #372]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0f0      	beq.n	800a89c <HAL_RCC_OscConfig+0xe4>
 800a8ba:	e014      	b.n	800a8e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8bc:	f7fd ff38 	bl	8008730 <HAL_GetTick>
 800a8c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8c2:	e008      	b.n	800a8d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8c4:	f7fd ff34 	bl	8008730 <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	2b64      	cmp	r3, #100	; 0x64
 800a8d0:	d901      	bls.n	800a8d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e1ec      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8d6:	4b53      	ldr	r3, [pc, #332]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1f0      	bne.n	800a8c4 <HAL_RCC_OscConfig+0x10c>
 800a8e2:	e000      	b.n	800a8e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d063      	beq.n	800a9ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a8f2:	4b4c      	ldr	r3, [pc, #304]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f003 030c 	and.w	r3, r3, #12
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00b      	beq.n	800a916 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a8fe:	4b49      	ldr	r3, [pc, #292]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f003 030c 	and.w	r3, r3, #12
 800a906:	2b08      	cmp	r3, #8
 800a908:	d11c      	bne.n	800a944 <HAL_RCC_OscConfig+0x18c>
 800a90a:	4b46      	ldr	r3, [pc, #280]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d116      	bne.n	800a944 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a916:	4b43      	ldr	r3, [pc, #268]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0302 	and.w	r3, r3, #2
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d005      	beq.n	800a92e <HAL_RCC_OscConfig+0x176>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d001      	beq.n	800a92e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e1c0      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a92e:	4b3d      	ldr	r3, [pc, #244]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	695b      	ldr	r3, [r3, #20]
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	4939      	ldr	r1, [pc, #228]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a942:	e03a      	b.n	800a9ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d020      	beq.n	800a98e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a94c:	4b36      	ldr	r3, [pc, #216]	; (800aa28 <HAL_RCC_OscConfig+0x270>)
 800a94e:	2201      	movs	r2, #1
 800a950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a952:	f7fd feed 	bl	8008730 <HAL_GetTick>
 800a956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a958:	e008      	b.n	800a96c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a95a:	f7fd fee9 	bl	8008730 <HAL_GetTick>
 800a95e:	4602      	mov	r2, r0
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	2b02      	cmp	r3, #2
 800a966:	d901      	bls.n	800a96c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e1a1      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a96c:	4b2d      	ldr	r3, [pc, #180]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0f0      	beq.n	800a95a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a978:	4b2a      	ldr	r3, [pc, #168]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	4927      	ldr	r1, [pc, #156]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	600b      	str	r3, [r1, #0]
 800a98c:	e015      	b.n	800a9ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a98e:	4b26      	ldr	r3, [pc, #152]	; (800aa28 <HAL_RCC_OscConfig+0x270>)
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a994:	f7fd fecc 	bl	8008730 <HAL_GetTick>
 800a998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a99a:	e008      	b.n	800a9ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a99c:	f7fd fec8 	bl	8008730 <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d901      	bls.n	800a9ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e180      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9ae:	4b1d      	ldr	r3, [pc, #116]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1f0      	bne.n	800a99c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0308 	and.w	r3, r3, #8
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d03a      	beq.n	800aa3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d019      	beq.n	800aa02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9ce:	4b17      	ldr	r3, [pc, #92]	; (800aa2c <HAL_RCC_OscConfig+0x274>)
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9d4:	f7fd feac 	bl	8008730 <HAL_GetTick>
 800a9d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9da:	e008      	b.n	800a9ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9dc:	f7fd fea8 	bl	8008730 <HAL_GetTick>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d901      	bls.n	800a9ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e160      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <HAL_RCC_OscConfig+0x26c>)
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	f003 0302 	and.w	r3, r3, #2
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d0f0      	beq.n	800a9dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	f000 face 	bl	800af9c <RCC_Delay>
 800aa00:	e01c      	b.n	800aa3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa02:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <HAL_RCC_OscConfig+0x274>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa08:	f7fd fe92 	bl	8008730 <HAL_GetTick>
 800aa0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa0e:	e00f      	b.n	800aa30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa10:	f7fd fe8e 	bl	8008730 <HAL_GetTick>
 800aa14:	4602      	mov	r2, r0
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d908      	bls.n	800aa30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e146      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
 800aa22:	bf00      	nop
 800aa24:	40021000 	.word	0x40021000
 800aa28:	42420000 	.word	0x42420000
 800aa2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa30:	4b92      	ldr	r3, [pc, #584]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	f003 0302 	and.w	r3, r3, #2
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1e9      	bne.n	800aa10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 0304 	and.w	r3, r3, #4
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 80a6 	beq.w	800ab96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa4e:	4b8b      	ldr	r3, [pc, #556]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10d      	bne.n	800aa76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa5a:	4b88      	ldr	r3, [pc, #544]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	4a87      	ldr	r2, [pc, #540]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aa60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa64:	61d3      	str	r3, [r2, #28]
 800aa66:	4b85      	ldr	r3, [pc, #532]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa6e:	60bb      	str	r3, [r7, #8]
 800aa70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa72:	2301      	movs	r3, #1
 800aa74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa76:	4b82      	ldr	r3, [pc, #520]	; (800ac80 <HAL_RCC_OscConfig+0x4c8>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d118      	bne.n	800aab4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa82:	4b7f      	ldr	r3, [pc, #508]	; (800ac80 <HAL_RCC_OscConfig+0x4c8>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a7e      	ldr	r2, [pc, #504]	; (800ac80 <HAL_RCC_OscConfig+0x4c8>)
 800aa88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa8e:	f7fd fe4f 	bl	8008730 <HAL_GetTick>
 800aa92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa94:	e008      	b.n	800aaa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa96:	f7fd fe4b 	bl	8008730 <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	2b64      	cmp	r3, #100	; 0x64
 800aaa2:	d901      	bls.n	800aaa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e103      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaa8:	4b75      	ldr	r3, [pc, #468]	; (800ac80 <HAL_RCC_OscConfig+0x4c8>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0f0      	beq.n	800aa96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d106      	bne.n	800aaca <HAL_RCC_OscConfig+0x312>
 800aabc:	4b6f      	ldr	r3, [pc, #444]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	4a6e      	ldr	r2, [pc, #440]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aac2:	f043 0301 	orr.w	r3, r3, #1
 800aac6:	6213      	str	r3, [r2, #32]
 800aac8:	e02d      	b.n	800ab26 <HAL_RCC_OscConfig+0x36e>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10c      	bne.n	800aaec <HAL_RCC_OscConfig+0x334>
 800aad2:	4b6a      	ldr	r3, [pc, #424]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	4a69      	ldr	r2, [pc, #420]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aad8:	f023 0301 	bic.w	r3, r3, #1
 800aadc:	6213      	str	r3, [r2, #32]
 800aade:	4b67      	ldr	r3, [pc, #412]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	4a66      	ldr	r2, [pc, #408]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aae4:	f023 0304 	bic.w	r3, r3, #4
 800aae8:	6213      	str	r3, [r2, #32]
 800aaea:	e01c      	b.n	800ab26 <HAL_RCC_OscConfig+0x36e>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	2b05      	cmp	r3, #5
 800aaf2:	d10c      	bne.n	800ab0e <HAL_RCC_OscConfig+0x356>
 800aaf4:	4b61      	ldr	r3, [pc, #388]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	4a60      	ldr	r2, [pc, #384]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aafa:	f043 0304 	orr.w	r3, r3, #4
 800aafe:	6213      	str	r3, [r2, #32]
 800ab00:	4b5e      	ldr	r3, [pc, #376]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	4a5d      	ldr	r2, [pc, #372]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	6213      	str	r3, [r2, #32]
 800ab0c:	e00b      	b.n	800ab26 <HAL_RCC_OscConfig+0x36e>
 800ab0e:	4b5b      	ldr	r3, [pc, #364]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	4a5a      	ldr	r2, [pc, #360]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab14:	f023 0301 	bic.w	r3, r3, #1
 800ab18:	6213      	str	r3, [r2, #32]
 800ab1a:	4b58      	ldr	r3, [pc, #352]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	4a57      	ldr	r2, [pc, #348]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab20:	f023 0304 	bic.w	r3, r3, #4
 800ab24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d015      	beq.n	800ab5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab2e:	f7fd fdff 	bl	8008730 <HAL_GetTick>
 800ab32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab34:	e00a      	b.n	800ab4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab36:	f7fd fdfb 	bl	8008730 <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d901      	bls.n	800ab4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e0b1      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab4c:	4b4b      	ldr	r3, [pc, #300]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	f003 0302 	and.w	r3, r3, #2
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d0ee      	beq.n	800ab36 <HAL_RCC_OscConfig+0x37e>
 800ab58:	e014      	b.n	800ab84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab5a:	f7fd fde9 	bl	8008730 <HAL_GetTick>
 800ab5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab60:	e00a      	b.n	800ab78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab62:	f7fd fde5 	bl	8008730 <HAL_GetTick>
 800ab66:	4602      	mov	r2, r0
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d901      	bls.n	800ab78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e09b      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab78:	4b40      	ldr	r3, [pc, #256]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	f003 0302 	and.w	r3, r3, #2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1ee      	bne.n	800ab62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d105      	bne.n	800ab96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab8a:	4b3c      	ldr	r3, [pc, #240]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	4a3b      	ldr	r2, [pc, #236]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ab90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f000 8087 	beq.w	800acae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aba0:	4b36      	ldr	r3, [pc, #216]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f003 030c 	and.w	r3, r3, #12
 800aba8:	2b08      	cmp	r3, #8
 800abaa:	d061      	beq.n	800ac70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d146      	bne.n	800ac42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abb4:	4b33      	ldr	r3, [pc, #204]	; (800ac84 <HAL_RCC_OscConfig+0x4cc>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abba:	f7fd fdb9 	bl	8008730 <HAL_GetTick>
 800abbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abc0:	e008      	b.n	800abd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abc2:	f7fd fdb5 	bl	8008730 <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d901      	bls.n	800abd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e06d      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abd4:	4b29      	ldr	r3, [pc, #164]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1f0      	bne.n	800abc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe8:	d108      	bne.n	800abfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800abea:	4b24      	ldr	r3, [pc, #144]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	4921      	ldr	r1, [pc, #132]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800abf8:	4313      	orrs	r3, r2
 800abfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abfc:	4b1f      	ldr	r3, [pc, #124]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a19      	ldr	r1, [r3, #32]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0c:	430b      	orrs	r3, r1
 800ac0e:	491b      	ldr	r1, [pc, #108]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac14:	4b1b      	ldr	r3, [pc, #108]	; (800ac84 <HAL_RCC_OscConfig+0x4cc>)
 800ac16:	2201      	movs	r2, #1
 800ac18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac1a:	f7fd fd89 	bl	8008730 <HAL_GetTick>
 800ac1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac20:	e008      	b.n	800ac34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac22:	f7fd fd85 	bl	8008730 <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d901      	bls.n	800ac34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e03d      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac34:	4b11      	ldr	r3, [pc, #68]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0f0      	beq.n	800ac22 <HAL_RCC_OscConfig+0x46a>
 800ac40:	e035      	b.n	800acae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac42:	4b10      	ldr	r3, [pc, #64]	; (800ac84 <HAL_RCC_OscConfig+0x4cc>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac48:	f7fd fd72 	bl	8008730 <HAL_GetTick>
 800ac4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac4e:	e008      	b.n	800ac62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac50:	f7fd fd6e 	bl	8008730 <HAL_GetTick>
 800ac54:	4602      	mov	r2, r0
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d901      	bls.n	800ac62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e026      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac62:	4b06      	ldr	r3, [pc, #24]	; (800ac7c <HAL_RCC_OscConfig+0x4c4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1f0      	bne.n	800ac50 <HAL_RCC_OscConfig+0x498>
 800ac6e:	e01e      	b.n	800acae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d107      	bne.n	800ac88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e019      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
 800ac7c:	40021000 	.word	0x40021000
 800ac80:	40007000 	.word	0x40007000
 800ac84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ac88:	4b0b      	ldr	r3, [pc, #44]	; (800acb8 <HAL_RCC_OscConfig+0x500>)
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d106      	bne.n	800acaa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d001      	beq.n	800acae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e000      	b.n	800acb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	40021000 	.word	0x40021000

0800acbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e0d0      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acd0:	4b6a      	ldr	r3, [pc, #424]	; (800ae7c <HAL_RCC_ClockConfig+0x1c0>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0307 	and.w	r3, r3, #7
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d910      	bls.n	800ad00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acde:	4b67      	ldr	r3, [pc, #412]	; (800ae7c <HAL_RCC_ClockConfig+0x1c0>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f023 0207 	bic.w	r2, r3, #7
 800ace6:	4965      	ldr	r1, [pc, #404]	; (800ae7c <HAL_RCC_ClockConfig+0x1c0>)
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	4313      	orrs	r3, r2
 800acec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acee:	4b63      	ldr	r3, [pc, #396]	; (800ae7c <HAL_RCC_ClockConfig+0x1c0>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0307 	and.w	r3, r3, #7
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d001      	beq.n	800ad00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e0b8      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 0302 	and.w	r3, r3, #2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d020      	beq.n	800ad4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0304 	and.w	r3, r3, #4
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d005      	beq.n	800ad24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad18:	4b59      	ldr	r3, [pc, #356]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	4a58      	ldr	r2, [pc, #352]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0308 	and.w	r3, r3, #8
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d005      	beq.n	800ad3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad30:	4b53      	ldr	r3, [pc, #332]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	4a52      	ldr	r2, [pc, #328]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad3c:	4b50      	ldr	r3, [pc, #320]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	494d      	ldr	r1, [pc, #308]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d040      	beq.n	800addc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d107      	bne.n	800ad72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad62:	4b47      	ldr	r3, [pc, #284]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d115      	bne.n	800ad9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e07f      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d107      	bne.n	800ad8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad7a:	4b41      	ldr	r3, [pc, #260]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d109      	bne.n	800ad9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e073      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad8a:	4b3d      	ldr	r3, [pc, #244]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d101      	bne.n	800ad9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e06b      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad9a:	4b39      	ldr	r3, [pc, #228]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	f023 0203 	bic.w	r2, r3, #3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	4936      	ldr	r1, [pc, #216]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ada8:	4313      	orrs	r3, r2
 800adaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adac:	f7fd fcc0 	bl	8008730 <HAL_GetTick>
 800adb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adb2:	e00a      	b.n	800adca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adb4:	f7fd fcbc 	bl	8008730 <HAL_GetTick>
 800adb8:	4602      	mov	r2, r0
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d901      	bls.n	800adca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e053      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adca:	4b2d      	ldr	r3, [pc, #180]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	f003 020c 	and.w	r2, r3, #12
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	429a      	cmp	r2, r3
 800adda:	d1eb      	bne.n	800adb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800addc:	4b27      	ldr	r3, [pc, #156]	; (800ae7c <HAL_RCC_ClockConfig+0x1c0>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0307 	and.w	r3, r3, #7
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d210      	bcs.n	800ae0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adea:	4b24      	ldr	r3, [pc, #144]	; (800ae7c <HAL_RCC_ClockConfig+0x1c0>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f023 0207 	bic.w	r2, r3, #7
 800adf2:	4922      	ldr	r1, [pc, #136]	; (800ae7c <HAL_RCC_ClockConfig+0x1c0>)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adfa:	4b20      	ldr	r3, [pc, #128]	; (800ae7c <HAL_RCC_ClockConfig+0x1c0>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d001      	beq.n	800ae0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e032      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d008      	beq.n	800ae2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae18:	4b19      	ldr	r3, [pc, #100]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	4916      	ldr	r1, [pc, #88]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0308 	and.w	r3, r3, #8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d009      	beq.n	800ae4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae36:	4b12      	ldr	r3, [pc, #72]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	490e      	ldr	r1, [pc, #56]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ae46:	4313      	orrs	r3, r2
 800ae48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae4a:	f000 f821 	bl	800ae90 <HAL_RCC_GetSysClockFreq>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <HAL_RCC_ClockConfig+0x1c4>)
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	091b      	lsrs	r3, r3, #4
 800ae56:	f003 030f 	and.w	r3, r3, #15
 800ae5a:	490a      	ldr	r1, [pc, #40]	; (800ae84 <HAL_RCC_ClockConfig+0x1c8>)
 800ae5c:	5ccb      	ldrb	r3, [r1, r3]
 800ae5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae62:	4a09      	ldr	r2, [pc, #36]	; (800ae88 <HAL_RCC_ClockConfig+0x1cc>)
 800ae64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ae66:	4b09      	ldr	r3, [pc, #36]	; (800ae8c <HAL_RCC_ClockConfig+0x1d0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fd fc1e 	bl	80086ac <HAL_InitTick>

  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	40022000 	.word	0x40022000
 800ae80:	40021000 	.word	0x40021000
 800ae84:	0800dd40 	.word	0x0800dd40
 800ae88:	200000b4 	.word	0x200000b4
 800ae8c:	200000b8 	.word	0x200000b8

0800ae90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b087      	sub	sp, #28
 800ae94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60fb      	str	r3, [r7, #12]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60bb      	str	r3, [r7, #8]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	617b      	str	r3, [r7, #20]
 800aea2:	2300      	movs	r3, #0
 800aea4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aeaa:	4b1e      	ldr	r3, [pc, #120]	; (800af24 <HAL_RCC_GetSysClockFreq+0x94>)
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f003 030c 	and.w	r3, r3, #12
 800aeb6:	2b04      	cmp	r3, #4
 800aeb8:	d002      	beq.n	800aec0 <HAL_RCC_GetSysClockFreq+0x30>
 800aeba:	2b08      	cmp	r3, #8
 800aebc:	d003      	beq.n	800aec6 <HAL_RCC_GetSysClockFreq+0x36>
 800aebe:	e027      	b.n	800af10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aec0:	4b19      	ldr	r3, [pc, #100]	; (800af28 <HAL_RCC_GetSysClockFreq+0x98>)
 800aec2:	613b      	str	r3, [r7, #16]
      break;
 800aec4:	e027      	b.n	800af16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	0c9b      	lsrs	r3, r3, #18
 800aeca:	f003 030f 	and.w	r3, r3, #15
 800aece:	4a17      	ldr	r2, [pc, #92]	; (800af2c <HAL_RCC_GetSysClockFreq+0x9c>)
 800aed0:	5cd3      	ldrb	r3, [r2, r3]
 800aed2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d010      	beq.n	800af00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aede:	4b11      	ldr	r3, [pc, #68]	; (800af24 <HAL_RCC_GetSysClockFreq+0x94>)
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	0c5b      	lsrs	r3, r3, #17
 800aee4:	f003 0301 	and.w	r3, r3, #1
 800aee8:	4a11      	ldr	r2, [pc, #68]	; (800af30 <HAL_RCC_GetSysClockFreq+0xa0>)
 800aeea:	5cd3      	ldrb	r3, [r2, r3]
 800aeec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a0d      	ldr	r2, [pc, #52]	; (800af28 <HAL_RCC_GetSysClockFreq+0x98>)
 800aef2:	fb03 f202 	mul.w	r2, r3, r2
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aefc:	617b      	str	r3, [r7, #20]
 800aefe:	e004      	b.n	800af0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a0c      	ldr	r2, [pc, #48]	; (800af34 <HAL_RCC_GetSysClockFreq+0xa4>)
 800af04:	fb02 f303 	mul.w	r3, r2, r3
 800af08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	613b      	str	r3, [r7, #16]
      break;
 800af0e:	e002      	b.n	800af16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af10:	4b05      	ldr	r3, [pc, #20]	; (800af28 <HAL_RCC_GetSysClockFreq+0x98>)
 800af12:	613b      	str	r3, [r7, #16]
      break;
 800af14:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af16:	693b      	ldr	r3, [r7, #16]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	371c      	adds	r7, #28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bc80      	pop	{r7}
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	40021000 	.word	0x40021000
 800af28:	007a1200 	.word	0x007a1200
 800af2c:	0800dd58 	.word	0x0800dd58
 800af30:	0800dd68 	.word	0x0800dd68
 800af34:	003d0900 	.word	0x003d0900

0800af38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af38:	b480      	push	{r7}
 800af3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af3c:	4b02      	ldr	r3, [pc, #8]	; (800af48 <HAL_RCC_GetHCLKFreq+0x10>)
 800af3e:	681b      	ldr	r3, [r3, #0]
}
 800af40:	4618      	mov	r0, r3
 800af42:	46bd      	mov	sp, r7
 800af44:	bc80      	pop	{r7}
 800af46:	4770      	bx	lr
 800af48:	200000b4 	.word	0x200000b4

0800af4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af50:	f7ff fff2 	bl	800af38 <HAL_RCC_GetHCLKFreq>
 800af54:	4602      	mov	r2, r0
 800af56:	4b05      	ldr	r3, [pc, #20]	; (800af6c <HAL_RCC_GetPCLK1Freq+0x20>)
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	0a1b      	lsrs	r3, r3, #8
 800af5c:	f003 0307 	and.w	r3, r3, #7
 800af60:	4903      	ldr	r1, [pc, #12]	; (800af70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af62:	5ccb      	ldrb	r3, [r1, r3]
 800af64:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af68:	4618      	mov	r0, r3
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	40021000 	.word	0x40021000
 800af70:	0800dd50 	.word	0x0800dd50

0800af74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af78:	f7ff ffde 	bl	800af38 <HAL_RCC_GetHCLKFreq>
 800af7c:	4602      	mov	r2, r0
 800af7e:	4b05      	ldr	r3, [pc, #20]	; (800af94 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	0adb      	lsrs	r3, r3, #11
 800af84:	f003 0307 	and.w	r3, r3, #7
 800af88:	4903      	ldr	r1, [pc, #12]	; (800af98 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af8a:	5ccb      	ldrb	r3, [r1, r3]
 800af8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af90:	4618      	mov	r0, r3
 800af92:	bd80      	pop	{r7, pc}
 800af94:	40021000 	.word	0x40021000
 800af98:	0800dd50 	.word	0x0800dd50

0800af9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800afa4:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <RCC_Delay+0x34>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a0a      	ldr	r2, [pc, #40]	; (800afd4 <RCC_Delay+0x38>)
 800afaa:	fba2 2303 	umull	r2, r3, r2, r3
 800afae:	0a5b      	lsrs	r3, r3, #9
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	fb02 f303 	mul.w	r3, r2, r3
 800afb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800afb8:	bf00      	nop
  }
  while (Delay --);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	1e5a      	subs	r2, r3, #1
 800afbe:	60fa      	str	r2, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1f9      	bne.n	800afb8 <RCC_Delay+0x1c>
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	bc80      	pop	{r7}
 800afce:	4770      	bx	lr
 800afd0:	200000b4 	.word	0x200000b4
 800afd4:	10624dd3 	.word	0x10624dd3

0800afd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e041      	b.n	800b06e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d106      	bne.n	800b004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7fd fa26 	bl	8008450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3304      	adds	r3, #4
 800b014:	4619      	mov	r1, r3
 800b016:	4610      	mov	r0, r2
 800b018:	f000 fa82 	bl	800b520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
	...

0800b078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d001      	beq.n	800b090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e044      	b.n	800b11a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68da      	ldr	r2, [r3, #12]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f042 0201 	orr.w	r2, r2, #1
 800b0a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a1d      	ldr	r2, [pc, #116]	; (800b124 <HAL_TIM_Base_Start_IT+0xac>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d018      	beq.n	800b0e4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a1c      	ldr	r2, [pc, #112]	; (800b128 <HAL_TIM_Base_Start_IT+0xb0>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d013      	beq.n	800b0e4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0c4:	d00e      	beq.n	800b0e4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a18      	ldr	r2, [pc, #96]	; (800b12c <HAL_TIM_Base_Start_IT+0xb4>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d009      	beq.n	800b0e4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a16      	ldr	r2, [pc, #88]	; (800b130 <HAL_TIM_Base_Start_IT+0xb8>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d004      	beq.n	800b0e4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a15      	ldr	r2, [pc, #84]	; (800b134 <HAL_TIM_Base_Start_IT+0xbc>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d111      	bne.n	800b108 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	f003 0307 	and.w	r3, r3, #7
 800b0ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b06      	cmp	r3, #6
 800b0f4:	d010      	beq.n	800b118 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f042 0201 	orr.w	r2, r2, #1
 800b104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b106:	e007      	b.n	800b118 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f042 0201 	orr.w	r2, r2, #1
 800b116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	bc80      	pop	{r7}
 800b122:	4770      	bx	lr
 800b124:	40012c00 	.word	0x40012c00
 800b128:	40013400 	.word	0x40013400
 800b12c:	40000400 	.word	0x40000400
 800b130:	40000800 	.word	0x40000800
 800b134:	40000c00 	.word	0x40000c00

0800b138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f003 0302 	and.w	r3, r3, #2
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d122      	bne.n	800b194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d11b      	bne.n	800b194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f06f 0202 	mvn.w	r2, #2
 800b164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f9b4 	bl	800b4e8 <HAL_TIM_IC_CaptureCallback>
 800b180:	e005      	b.n	800b18e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f9a7 	bl	800b4d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f9b6 	bl	800b4fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	f003 0304 	and.w	r3, r3, #4
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d122      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b04      	cmp	r3, #4
 800b1ae:	d11b      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f06f 0204 	mvn.w	r2, #4
 800b1b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2202      	movs	r2, #2
 800b1be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f98a 	bl	800b4e8 <HAL_TIM_IC_CaptureCallback>
 800b1d4:	e005      	b.n	800b1e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f97d 	bl	800b4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 f98c 	bl	800b4fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	d122      	bne.n	800b23c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f003 0308 	and.w	r3, r3, #8
 800b200:	2b08      	cmp	r3, #8
 800b202:	d11b      	bne.n	800b23c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f06f 0208 	mvn.w	r2, #8
 800b20c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2204      	movs	r2, #4
 800b212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	f003 0303 	and.w	r3, r3, #3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f960 	bl	800b4e8 <HAL_TIM_IC_CaptureCallback>
 800b228:	e005      	b.n	800b236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f953 	bl	800b4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f962 	bl	800b4fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	f003 0310 	and.w	r3, r3, #16
 800b246:	2b10      	cmp	r3, #16
 800b248:	d122      	bne.n	800b290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	f003 0310 	and.w	r3, r3, #16
 800b254:	2b10      	cmp	r3, #16
 800b256:	d11b      	bne.n	800b290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f06f 0210 	mvn.w	r2, #16
 800b260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2208      	movs	r2, #8
 800b266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f936 	bl	800b4e8 <HAL_TIM_IC_CaptureCallback>
 800b27c:	e005      	b.n	800b28a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f929 	bl	800b4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f938 	bl	800b4fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	f003 0301 	and.w	r3, r3, #1
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d10e      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d107      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f06f 0201 	mvn.w	r2, #1
 800b2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7fc fd62 	bl	8007d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c6:	2b80      	cmp	r3, #128	; 0x80
 800b2c8:	d10e      	bne.n	800b2e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d4:	2b80      	cmp	r3, #128	; 0x80
 800b2d6:	d107      	bne.n	800b2e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 faa1 	bl	800b82a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f2:	2b40      	cmp	r3, #64	; 0x40
 800b2f4:	d10e      	bne.n	800b314 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b300:	2b40      	cmp	r3, #64	; 0x40
 800b302:	d107      	bne.n	800b314 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b30c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f8fc 	bl	800b50c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	f003 0320 	and.w	r3, r3, #32
 800b31e:	2b20      	cmp	r3, #32
 800b320:	d10e      	bne.n	800b340 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f003 0320 	and.w	r3, r3, #32
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	d107      	bne.n	800b340 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f06f 0220 	mvn.w	r2, #32
 800b338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fa6c 	bl	800b818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d101      	bne.n	800b364 <HAL_TIM_ConfigClockSource+0x1c>
 800b360:	2302      	movs	r3, #2
 800b362:	e0b4      	b.n	800b4ce <HAL_TIM_ConfigClockSource+0x186>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2202      	movs	r2, #2
 800b370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b38a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b39c:	d03e      	beq.n	800b41c <HAL_TIM_ConfigClockSource+0xd4>
 800b39e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3a2:	f200 8087 	bhi.w	800b4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3aa:	f000 8086 	beq.w	800b4ba <HAL_TIM_ConfigClockSource+0x172>
 800b3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3b2:	d87f      	bhi.n	800b4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b4:	2b70      	cmp	r3, #112	; 0x70
 800b3b6:	d01a      	beq.n	800b3ee <HAL_TIM_ConfigClockSource+0xa6>
 800b3b8:	2b70      	cmp	r3, #112	; 0x70
 800b3ba:	d87b      	bhi.n	800b4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3bc:	2b60      	cmp	r3, #96	; 0x60
 800b3be:	d050      	beq.n	800b462 <HAL_TIM_ConfigClockSource+0x11a>
 800b3c0:	2b60      	cmp	r3, #96	; 0x60
 800b3c2:	d877      	bhi.n	800b4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3c4:	2b50      	cmp	r3, #80	; 0x50
 800b3c6:	d03c      	beq.n	800b442 <HAL_TIM_ConfigClockSource+0xfa>
 800b3c8:	2b50      	cmp	r3, #80	; 0x50
 800b3ca:	d873      	bhi.n	800b4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3cc:	2b40      	cmp	r3, #64	; 0x40
 800b3ce:	d058      	beq.n	800b482 <HAL_TIM_ConfigClockSource+0x13a>
 800b3d0:	2b40      	cmp	r3, #64	; 0x40
 800b3d2:	d86f      	bhi.n	800b4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3d4:	2b30      	cmp	r3, #48	; 0x30
 800b3d6:	d064      	beq.n	800b4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b3d8:	2b30      	cmp	r3, #48	; 0x30
 800b3da:	d86b      	bhi.n	800b4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3dc:	2b20      	cmp	r3, #32
 800b3de:	d060      	beq.n	800b4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	d867      	bhi.n	800b4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d05c      	beq.n	800b4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b3e8:	2b10      	cmp	r3, #16
 800b3ea:	d05a      	beq.n	800b4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b3ec:	e062      	b.n	800b4b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3fe:	f000 f980 	bl	800b702 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	609a      	str	r2, [r3, #8]
      break;
 800b41a:	e04f      	b.n	800b4bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b42c:	f000 f969 	bl	800b702 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	689a      	ldr	r2, [r3, #8]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b43e:	609a      	str	r2, [r3, #8]
      break;
 800b440:	e03c      	b.n	800b4bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b44e:	461a      	mov	r2, r3
 800b450:	f000 f8e0 	bl	800b614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2150      	movs	r1, #80	; 0x50
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 f937 	bl	800b6ce <TIM_ITRx_SetConfig>
      break;
 800b460:	e02c      	b.n	800b4bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b46e:	461a      	mov	r2, r3
 800b470:	f000 f8fe 	bl	800b670 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2160      	movs	r1, #96	; 0x60
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 f927 	bl	800b6ce <TIM_ITRx_SetConfig>
      break;
 800b480:	e01c      	b.n	800b4bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b48e:	461a      	mov	r2, r3
 800b490:	f000 f8c0 	bl	800b614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2140      	movs	r1, #64	; 0x40
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f917 	bl	800b6ce <TIM_ITRx_SetConfig>
      break;
 800b4a0:	e00c      	b.n	800b4bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	f000 f90e 	bl	800b6ce <TIM_ITRx_SetConfig>
      break;
 800b4b2:	e003      	b.n	800b4bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4b8:	e000      	b.n	800b4bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b4ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	b083      	sub	sp, #12
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4de:	bf00      	nop
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bc80      	pop	{r7}
 800b4e6:	4770      	bx	lr

0800b4e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bc80      	pop	{r7}
 800b4f8:	4770      	bx	lr

0800b4fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b502:	bf00      	nop
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	bc80      	pop	{r7}
 800b50a:	4770      	bx	lr

0800b50c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	bc80      	pop	{r7}
 800b51c:	4770      	bx	lr
	...

0800b520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a33      	ldr	r2, [pc, #204]	; (800b600 <TIM_Base_SetConfig+0xe0>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d013      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a32      	ldr	r2, [pc, #200]	; (800b604 <TIM_Base_SetConfig+0xe4>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00f      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b546:	d00b      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a2f      	ldr	r2, [pc, #188]	; (800b608 <TIM_Base_SetConfig+0xe8>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d007      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a2e      	ldr	r2, [pc, #184]	; (800b60c <TIM_Base_SetConfig+0xec>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d003      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a2d      	ldr	r2, [pc, #180]	; (800b610 <TIM_Base_SetConfig+0xf0>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d108      	bne.n	800b572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4a22      	ldr	r2, [pc, #136]	; (800b600 <TIM_Base_SetConfig+0xe0>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d013      	beq.n	800b5a2 <TIM_Base_SetConfig+0x82>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a21      	ldr	r2, [pc, #132]	; (800b604 <TIM_Base_SetConfig+0xe4>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d00f      	beq.n	800b5a2 <TIM_Base_SetConfig+0x82>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b588:	d00b      	beq.n	800b5a2 <TIM_Base_SetConfig+0x82>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a1e      	ldr	r2, [pc, #120]	; (800b608 <TIM_Base_SetConfig+0xe8>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d007      	beq.n	800b5a2 <TIM_Base_SetConfig+0x82>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a1d      	ldr	r2, [pc, #116]	; (800b60c <TIM_Base_SetConfig+0xec>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d003      	beq.n	800b5a2 <TIM_Base_SetConfig+0x82>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a1c      	ldr	r2, [pc, #112]	; (800b610 <TIM_Base_SetConfig+0xf0>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d108      	bne.n	800b5b4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	689a      	ldr	r2, [r3, #8]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a09      	ldr	r2, [pc, #36]	; (800b600 <TIM_Base_SetConfig+0xe0>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d003      	beq.n	800b5e8 <TIM_Base_SetConfig+0xc8>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a08      	ldr	r2, [pc, #32]	; (800b604 <TIM_Base_SetConfig+0xe4>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d103      	bne.n	800b5f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	691a      	ldr	r2, [r3, #16]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	615a      	str	r2, [r3, #20]
}
 800b5f6:	bf00      	nop
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bc80      	pop	{r7}
 800b5fe:	4770      	bx	lr
 800b600:	40012c00 	.word	0x40012c00
 800b604:	40013400 	.word	0x40013400
 800b608:	40000400 	.word	0x40000400
 800b60c:	40000800 	.word	0x40000800
 800b610:	40000c00 	.word	0x40000c00

0800b614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b614:	b480      	push	{r7}
 800b616:	b087      	sub	sp, #28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	f023 0201 	bic.w	r2, r3, #1
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b63e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	011b      	lsls	r3, r3, #4
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	4313      	orrs	r3, r2
 800b648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f023 030a 	bic.w	r3, r3, #10
 800b650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	4313      	orrs	r3, r2
 800b658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	621a      	str	r2, [r3, #32]
}
 800b666:	bf00      	nop
 800b668:	371c      	adds	r7, #28
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bc80      	pop	{r7}
 800b66e:	4770      	bx	lr

0800b670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b670:	b480      	push	{r7}
 800b672:	b087      	sub	sp, #28
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	f023 0210 	bic.w	r2, r3, #16
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b69a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	031b      	lsls	r3, r3, #12
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	011b      	lsls	r3, r3, #4
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	621a      	str	r2, [r3, #32]
}
 800b6c4:	bf00      	nop
 800b6c6:	371c      	adds	r7, #28
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bc80      	pop	{r7}
 800b6cc:	4770      	bx	lr

0800b6ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b085      	sub	sp, #20
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	f043 0307 	orr.w	r3, r3, #7
 800b6f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	609a      	str	r2, [r3, #8]
}
 800b6f8:	bf00      	nop
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bc80      	pop	{r7}
 800b700:	4770      	bx	lr

0800b702 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b702:	b480      	push	{r7}
 800b704:	b087      	sub	sp, #28
 800b706:	af00      	add	r7, sp, #0
 800b708:	60f8      	str	r0, [r7, #12]
 800b70a:	60b9      	str	r1, [r7, #8]
 800b70c:	607a      	str	r2, [r7, #4]
 800b70e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b71c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	021a      	lsls	r2, r3, #8
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	431a      	orrs	r2, r3
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	4313      	orrs	r3, r2
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	609a      	str	r2, [r3, #8]
}
 800b736:	bf00      	nop
 800b738:	371c      	adds	r7, #28
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bc80      	pop	{r7}
 800b73e:	4770      	bx	lr

0800b740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b750:	2b01      	cmp	r3, #1
 800b752:	d101      	bne.n	800b758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b754:	2302      	movs	r3, #2
 800b756:	e050      	b.n	800b7fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2202      	movs	r2, #2
 800b764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a1b      	ldr	r2, [pc, #108]	; (800b804 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d018      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a19      	ldr	r2, [pc, #100]	; (800b808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d013      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ae:	d00e      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a15      	ldr	r2, [pc, #84]	; (800b80c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d009      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a14      	ldr	r2, [pc, #80]	; (800b810 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d004      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a12      	ldr	r2, [pc, #72]	; (800b814 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d10c      	bne.n	800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bc80      	pop	{r7}
 800b802:	4770      	bx	lr
 800b804:	40012c00 	.word	0x40012c00
 800b808:	40013400 	.word	0x40013400
 800b80c:	40000400 	.word	0x40000400
 800b810:	40000800 	.word	0x40000800
 800b814:	40000c00 	.word	0x40000c00

0800b818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	bc80      	pop	{r7}
 800b828:	4770      	bx	lr

0800b82a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b083      	sub	sp, #12
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b832:	bf00      	nop
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	bc80      	pop	{r7}
 800b83a:	4770      	bx	lr

0800b83c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	e042      	b.n	800b8d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b00      	cmp	r3, #0
 800b858:	d106      	bne.n	800b868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f7fc fe1a 	bl	800849c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2224      	movs	r2, #36	; 0x24
 800b86c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68da      	ldr	r2, [r3, #12]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b87e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fcb5 	bl	800c1f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	691a      	ldr	r2, [r3, #16]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	695a      	ldr	r2, [r3, #20]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2220      	movs	r2, #32
 800b8c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2220      	movs	r2, #32
 800b8c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b20      	cmp	r3, #32
 800b8f4:	d121      	bne.n	800b93a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <HAL_UART_Transmit_IT+0x26>
 800b8fc:	88fb      	ldrh	r3, [r7, #6]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e01a      	b.n	800b93c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	88fa      	ldrh	r2, [r7, #6]
 800b910:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	88fa      	ldrh	r2, [r7, #6]
 800b916:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2221      	movs	r2, #33	; 0x21
 800b922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68da      	ldr	r2, [r3, #12]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b934:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	e000      	b.n	800b93c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b93a:	2302      	movs	r3, #2
  }
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	bc80      	pop	{r7}
 800b944:	4770      	bx	lr
	...

0800b948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b0ba      	sub	sp, #232	; 0xe8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b96e:	2300      	movs	r3, #0
 800b970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b974:	2300      	movs	r3, #0
 800b976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b97e:	f003 030f 	and.w	r3, r3, #15
 800b982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10f      	bne.n	800b9ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b992:	f003 0320 	and.w	r3, r3, #32
 800b996:	2b00      	cmp	r3, #0
 800b998:	d009      	beq.n	800b9ae <HAL_UART_IRQHandler+0x66>
 800b99a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b99e:	f003 0320 	and.w	r3, r3, #32
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d003      	beq.n	800b9ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fb63 	bl	800c072 <UART_Receive_IT>
      return;
 800b9ac:	e25b      	b.n	800be66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 80de 	beq.w	800bb74 <HAL_UART_IRQHandler+0x22c>
 800b9b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d106      	bne.n	800b9d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 80d1 	beq.w	800bb74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d6:	f003 0301 	and.w	r3, r3, #1
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00b      	beq.n	800b9f6 <HAL_UART_IRQHandler+0xae>
 800b9de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d005      	beq.n	800b9f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ee:	f043 0201 	orr.w	r2, r3, #1
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fa:	f003 0304 	and.w	r3, r3, #4
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00b      	beq.n	800ba1a <HAL_UART_IRQHandler+0xd2>
 800ba02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d005      	beq.n	800ba1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba12:	f043 0202 	orr.w	r2, r3, #2
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00b      	beq.n	800ba3e <HAL_UART_IRQHandler+0xf6>
 800ba26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d005      	beq.n	800ba3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba36:	f043 0204 	orr.w	r2, r3, #4
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba42:	f003 0308 	and.w	r3, r3, #8
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d011      	beq.n	800ba6e <HAL_UART_IRQHandler+0x126>
 800ba4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba4e:	f003 0320 	and.w	r3, r3, #32
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d105      	bne.n	800ba62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d005      	beq.n	800ba6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba66:	f043 0208 	orr.w	r2, r3, #8
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 81f2 	beq.w	800be5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba7c:	f003 0320 	and.w	r3, r3, #32
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d008      	beq.n	800ba96 <HAL_UART_IRQHandler+0x14e>
 800ba84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba88:	f003 0320 	and.w	r3, r3, #32
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 faee 	bl	800c072 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	bf14      	ite	ne
 800baa4:	2301      	movne	r3, #1
 800baa6:	2300      	moveq	r3, #0
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab2:	f003 0308 	and.w	r3, r3, #8
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d103      	bne.n	800bac2 <HAL_UART_IRQHandler+0x17a>
 800baba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d04f      	beq.n	800bb62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f9f8 	bl	800beb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d041      	beq.n	800bb5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3314      	adds	r3, #20
 800badc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bae4:	e853 3f00 	ldrex	r3, [r3]
 800bae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800baec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800baf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3314      	adds	r3, #20
 800bafe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb12:	e841 2300 	strex	r3, r2, [r1]
 800bb16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1d9      	bne.n	800bad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d013      	beq.n	800bb52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2e:	4a7e      	ldr	r2, [pc, #504]	; (800bd28 <HAL_UART_IRQHandler+0x3e0>)
 800bb30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fd f86c 	bl	8008c14 <HAL_DMA_Abort_IT>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d016      	beq.n	800bb70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb50:	e00e      	b.n	800bb70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f99c 	bl	800be90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb58:	e00a      	b.n	800bb70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f998 	bl	800be90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb60:	e006      	b.n	800bb70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f994 	bl	800be90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bb6e:	e175      	b.n	800be5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb70:	bf00      	nop
    return;
 800bb72:	e173      	b.n	800be5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	f040 814f 	bne.w	800be1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bb7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb82:	f003 0310 	and.w	r3, r3, #16
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 8148 	beq.w	800be1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb90:	f003 0310 	and.w	r3, r3, #16
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8141 	beq.w	800be1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60bb      	str	r3, [r7, #8]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	60bb      	str	r3, [r7, #8]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	60bb      	str	r3, [r7, #8]
 800bbae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 80b6 	beq.w	800bd2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f000 8145 	beq.w	800be60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	f080 813e 	bcs.w	800be60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	2b20      	cmp	r3, #32
 800bbf4:	f000 8088 	beq.w	800bd08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	330c      	adds	r3, #12
 800bbfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc06:	e853 3f00 	ldrex	r3, [r3]
 800bc0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	330c      	adds	r3, #12
 800bc20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc24:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc34:	e841 2300 	strex	r3, r2, [r1]
 800bc38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1d9      	bne.n	800bbf8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	3314      	adds	r3, #20
 800bc4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc4e:	e853 3f00 	ldrex	r3, [r3]
 800bc52:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc56:	f023 0301 	bic.w	r3, r3, #1
 800bc5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3314      	adds	r3, #20
 800bc64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc74:	e841 2300 	strex	r3, r2, [r1]
 800bc78:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1e1      	bne.n	800bc44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	3314      	adds	r3, #20
 800bc86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc8a:	e853 3f00 	ldrex	r3, [r3]
 800bc8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3314      	adds	r3, #20
 800bca0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bca4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bca6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bcaa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bcac:	e841 2300 	strex	r3, r2, [r1]
 800bcb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1e3      	bne.n	800bc80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	330c      	adds	r3, #12
 800bccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcd0:	e853 3f00 	ldrex	r3, [r3]
 800bcd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcd8:	f023 0310 	bic.w	r3, r3, #16
 800bcdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	330c      	adds	r3, #12
 800bce6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bcea:	65ba      	str	r2, [r7, #88]	; 0x58
 800bcec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bcf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e3      	bne.n	800bcc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fc ff4b 	bl	8008b9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f8bf 	bl	800bea2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd24:	e09c      	b.n	800be60 <HAL_UART_IRQHandler+0x518>
 800bd26:	bf00      	nop
 800bd28:	0800bf7d 	.word	0x0800bf7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f000 808e 	beq.w	800be64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 8089 	beq.w	800be64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	330c      	adds	r3, #12
 800bd58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	e853 3f00 	ldrex	r3, [r3]
 800bd60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	330c      	adds	r3, #12
 800bd72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd76:	647a      	str	r2, [r7, #68]	; 0x44
 800bd78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd7e:	e841 2300 	strex	r3, r2, [r1]
 800bd82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1e3      	bne.n	800bd52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	3314      	adds	r3, #20
 800bd90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	e853 3f00 	ldrex	r3, [r3]
 800bd98:	623b      	str	r3, [r7, #32]
   return(result);
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	f023 0301 	bic.w	r3, r3, #1
 800bda0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3314      	adds	r3, #20
 800bdaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdae:	633a      	str	r2, [r7, #48]	; 0x30
 800bdb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdb6:	e841 2300 	strex	r3, r2, [r1]
 800bdba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1e3      	bne.n	800bd8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2220      	movs	r2, #32
 800bdc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	330c      	adds	r3, #12
 800bdd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	e853 3f00 	ldrex	r3, [r3]
 800bdde:	60fb      	str	r3, [r7, #12]
   return(result);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f023 0310 	bic.w	r3, r3, #16
 800bde6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	330c      	adds	r3, #12
 800bdf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bdf4:	61fa      	str	r2, [r7, #28]
 800bdf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf8:	69b9      	ldr	r1, [r7, #24]
 800bdfa:	69fa      	ldr	r2, [r7, #28]
 800bdfc:	e841 2300 	strex	r3, r2, [r1]
 800be00:	617b      	str	r3, [r7, #20]
   return(result);
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1e3      	bne.n	800bdd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2202      	movs	r2, #2
 800be0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be12:	4619      	mov	r1, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f844 	bl	800bea2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be1a:	e023      	b.n	800be64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be24:	2b00      	cmp	r3, #0
 800be26:	d009      	beq.n	800be3c <HAL_UART_IRQHandler+0x4f4>
 800be28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be30:	2b00      	cmp	r3, #0
 800be32:	d003      	beq.n	800be3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f8b5 	bl	800bfa4 <UART_Transmit_IT>
    return;
 800be3a:	e014      	b.n	800be66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00e      	beq.n	800be66 <HAL_UART_IRQHandler+0x51e>
 800be48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be50:	2b00      	cmp	r3, #0
 800be52:	d008      	beq.n	800be66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f8f4 	bl	800c042 <UART_EndTransmit_IT>
    return;
 800be5a:	e004      	b.n	800be66 <HAL_UART_IRQHandler+0x51e>
    return;
 800be5c:	bf00      	nop
 800be5e:	e002      	b.n	800be66 <HAL_UART_IRQHandler+0x51e>
      return;
 800be60:	bf00      	nop
 800be62:	e000      	b.n	800be66 <HAL_UART_IRQHandler+0x51e>
      return;
 800be64:	bf00      	nop
  }
}
 800be66:	37e8      	adds	r7, #232	; 0xe8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	bc80      	pop	{r7}
 800be7c:	4770      	bx	lr

0800be7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bc80      	pop	{r7}
 800be8e:	4770      	bx	lr

0800be90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bc80      	pop	{r7}
 800bea0:	4770      	bx	lr

0800bea2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b083      	sub	sp, #12
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	460b      	mov	r3, r1
 800beac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800beae:	bf00      	nop
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bc80      	pop	{r7}
 800beb6:	4770      	bx	lr

0800beb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800beb8:	b480      	push	{r7}
 800beba:	b095      	sub	sp, #84	; 0x54
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	330c      	adds	r3, #12
 800bec6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beca:	e853 3f00 	ldrex	r3, [r3]
 800bece:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	330c      	adds	r3, #12
 800bede:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bee0:	643a      	str	r2, [r7, #64]	; 0x40
 800bee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bee6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bee8:	e841 2300 	strex	r3, r2, [r1]
 800beec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800beee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1e5      	bne.n	800bec0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3314      	adds	r3, #20
 800befa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befc:	6a3b      	ldr	r3, [r7, #32]
 800befe:	e853 3f00 	ldrex	r3, [r3]
 800bf02:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	f023 0301 	bic.w	r3, r3, #1
 800bf0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3314      	adds	r3, #20
 800bf12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf1c:	e841 2300 	strex	r3, r2, [r1]
 800bf20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d1e5      	bne.n	800bef4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d119      	bne.n	800bf64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	330c      	adds	r3, #12
 800bf36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	e853 3f00 	ldrex	r3, [r3]
 800bf3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	f023 0310 	bic.w	r3, r3, #16
 800bf46:	647b      	str	r3, [r7, #68]	; 0x44
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	330c      	adds	r3, #12
 800bf4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf50:	61ba      	str	r2, [r7, #24]
 800bf52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf54:	6979      	ldr	r1, [r7, #20]
 800bf56:	69ba      	ldr	r2, [r7, #24]
 800bf58:	e841 2300 	strex	r3, r2, [r1]
 800bf5c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1e5      	bne.n	800bf30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2220      	movs	r2, #32
 800bf68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf72:	bf00      	nop
 800bf74:	3754      	adds	r7, #84	; 0x54
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bc80      	pop	{r7}
 800bf7a:	4770      	bx	lr

0800bf7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f7ff ff7a 	bl	800be90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf9c:	bf00      	nop
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	2b21      	cmp	r3, #33	; 0x21
 800bfb6:	d13e      	bne.n	800c036 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc0:	d114      	bne.n	800bfec <UART_Transmit_IT+0x48>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d110      	bne.n	800bfec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a1b      	ldr	r3, [r3, #32]
 800bfe4:	1c9a      	adds	r2, r3, #2
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	621a      	str	r2, [r3, #32]
 800bfea:	e008      	b.n	800bffe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	1c59      	adds	r1, r3, #1
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	6211      	str	r1, [r2, #32]
 800bff6:	781a      	ldrb	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c002:	b29b      	uxth	r3, r3
 800c004:	3b01      	subs	r3, #1
 800c006:	b29b      	uxth	r3, r3
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	4619      	mov	r1, r3
 800c00c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10f      	bne.n	800c032 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68da      	ldr	r2, [r3, #12]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c020:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68da      	ldr	r2, [r3, #12]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c030:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	e000      	b.n	800c038 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c036:	2302      	movs	r3, #2
  }
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bc80      	pop	{r7}
 800c040:	4770      	bx	lr

0800c042 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68da      	ldr	r2, [r3, #12]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c058:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2220      	movs	r2, #32
 800c05e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7ff ff02 	bl	800be6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b08c      	sub	sp, #48	; 0x30
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b22      	cmp	r3, #34	; 0x22
 800c084:	f040 80ae 	bne.w	800c1e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c090:	d117      	bne.n	800c0c2 <UART_Receive_IT+0x50>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d113      	bne.n	800c0c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ba:	1c9a      	adds	r2, r3, #2
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	629a      	str	r2, [r3, #40]	; 0x28
 800c0c0:	e026      	b.n	800c110 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d4:	d007      	beq.n	800c0e6 <UART_Receive_IT+0x74>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10a      	bne.n	800c0f4 <UART_Receive_IT+0x82>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d106      	bne.n	800c0f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f0:	701a      	strb	r2, [r3, #0]
 800c0f2:	e008      	b.n	800c106 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c100:	b2da      	uxtb	r2, r3
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10a:	1c5a      	adds	r2, r3, #1
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c114:	b29b      	uxth	r3, r3
 800c116:	3b01      	subs	r3, #1
 800c118:	b29b      	uxth	r3, r3
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	4619      	mov	r1, r3
 800c11e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c120:	2b00      	cmp	r3, #0
 800c122:	d15d      	bne.n	800c1e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68da      	ldr	r2, [r3, #12]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f022 0220 	bic.w	r2, r2, #32
 800c132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c142:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	695a      	ldr	r2, [r3, #20]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f022 0201 	bic.w	r2, r2, #1
 800c152:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2220      	movs	r2, #32
 800c158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c166:	2b01      	cmp	r3, #1
 800c168:	d135      	bne.n	800c1d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	330c      	adds	r3, #12
 800c176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	e853 3f00 	ldrex	r3, [r3]
 800c17e:	613b      	str	r3, [r7, #16]
   return(result);
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f023 0310 	bic.w	r3, r3, #16
 800c186:	627b      	str	r3, [r7, #36]	; 0x24
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	330c      	adds	r3, #12
 800c18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c190:	623a      	str	r2, [r7, #32]
 800c192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c194:	69f9      	ldr	r1, [r7, #28]
 800c196:	6a3a      	ldr	r2, [r7, #32]
 800c198:	e841 2300 	strex	r3, r2, [r1]
 800c19c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1e5      	bne.n	800c170 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 0310 	and.w	r3, r3, #16
 800c1ae:	2b10      	cmp	r3, #16
 800c1b0:	d10a      	bne.n	800c1c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	60fb      	str	r3, [r7, #12]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	60fb      	str	r3, [r7, #12]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7ff fe67 	bl	800bea2 <HAL_UARTEx_RxEventCallback>
 800c1d4:	e002      	b.n	800c1dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff fe51 	bl	800be7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	e002      	b.n	800c1e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	e000      	b.n	800c1e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c1e4:	2302      	movs	r3, #2
  }
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3730      	adds	r7, #48	; 0x30
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
	...

0800c1f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	68da      	ldr	r2, [r3, #12]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	430a      	orrs	r2, r1
 800c20c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	689a      	ldr	r2, [r3, #8]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	431a      	orrs	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c22a:	f023 030c 	bic.w	r3, r3, #12
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	6812      	ldr	r2, [r2, #0]
 800c232:	68b9      	ldr	r1, [r7, #8]
 800c234:	430b      	orrs	r3, r1
 800c236:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	699a      	ldr	r2, [r3, #24]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	430a      	orrs	r2, r1
 800c24c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a2c      	ldr	r2, [pc, #176]	; (800c304 <UART_SetConfig+0x114>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d103      	bne.n	800c260 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c258:	f7fe fe8c 	bl	800af74 <HAL_RCC_GetPCLK2Freq>
 800c25c:	60f8      	str	r0, [r7, #12]
 800c25e:	e002      	b.n	800c266 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c260:	f7fe fe74 	bl	800af4c <HAL_RCC_GetPCLK1Freq>
 800c264:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	4613      	mov	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	009a      	lsls	r2, r3, #2
 800c270:	441a      	add	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	fbb2 f3f3 	udiv	r3, r2, r3
 800c27c:	4a22      	ldr	r2, [pc, #136]	; (800c308 <UART_SetConfig+0x118>)
 800c27e:	fba2 2303 	umull	r2, r3, r2, r3
 800c282:	095b      	lsrs	r3, r3, #5
 800c284:	0119      	lsls	r1, r3, #4
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	009a      	lsls	r2, r3, #2
 800c290:	441a      	add	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	fbb2 f2f3 	udiv	r2, r2, r3
 800c29c:	4b1a      	ldr	r3, [pc, #104]	; (800c308 <UART_SetConfig+0x118>)
 800c29e:	fba3 0302 	umull	r0, r3, r3, r2
 800c2a2:	095b      	lsrs	r3, r3, #5
 800c2a4:	2064      	movs	r0, #100	; 0x64
 800c2a6:	fb00 f303 	mul.w	r3, r0, r3
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	011b      	lsls	r3, r3, #4
 800c2ae:	3332      	adds	r3, #50	; 0x32
 800c2b0:	4a15      	ldr	r2, [pc, #84]	; (800c308 <UART_SetConfig+0x118>)
 800c2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b6:	095b      	lsrs	r3, r3, #5
 800c2b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2bc:	4419      	add	r1, r3
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4413      	add	r3, r2
 800c2c6:	009a      	lsls	r2, r3, #2
 800c2c8:	441a      	add	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2d4:	4b0c      	ldr	r3, [pc, #48]	; (800c308 <UART_SetConfig+0x118>)
 800c2d6:	fba3 0302 	umull	r0, r3, r3, r2
 800c2da:	095b      	lsrs	r3, r3, #5
 800c2dc:	2064      	movs	r0, #100	; 0x64
 800c2de:	fb00 f303 	mul.w	r3, r0, r3
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	011b      	lsls	r3, r3, #4
 800c2e6:	3332      	adds	r3, #50	; 0x32
 800c2e8:	4a07      	ldr	r2, [pc, #28]	; (800c308 <UART_SetConfig+0x118>)
 800c2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ee:	095b      	lsrs	r3, r3, #5
 800c2f0:	f003 020f 	and.w	r2, r3, #15
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	440a      	add	r2, r1
 800c2fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c2fc:	bf00      	nop
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	40013800 	.word	0x40013800
 800c308:	51eb851f 	.word	0x51eb851f

0800c30c <__itoa>:
 800c30c:	1e93      	subs	r3, r2, #2
 800c30e:	2b22      	cmp	r3, #34	; 0x22
 800c310:	b510      	push	{r4, lr}
 800c312:	460c      	mov	r4, r1
 800c314:	d904      	bls.n	800c320 <__itoa+0x14>
 800c316:	2300      	movs	r3, #0
 800c318:	461c      	mov	r4, r3
 800c31a:	700b      	strb	r3, [r1, #0]
 800c31c:	4620      	mov	r0, r4
 800c31e:	bd10      	pop	{r4, pc}
 800c320:	2a0a      	cmp	r2, #10
 800c322:	d109      	bne.n	800c338 <__itoa+0x2c>
 800c324:	2800      	cmp	r0, #0
 800c326:	da07      	bge.n	800c338 <__itoa+0x2c>
 800c328:	232d      	movs	r3, #45	; 0x2d
 800c32a:	700b      	strb	r3, [r1, #0]
 800c32c:	2101      	movs	r1, #1
 800c32e:	4240      	negs	r0, r0
 800c330:	4421      	add	r1, r4
 800c332:	f000 f90d 	bl	800c550 <__utoa>
 800c336:	e7f1      	b.n	800c31c <__itoa+0x10>
 800c338:	2100      	movs	r1, #0
 800c33a:	e7f9      	b.n	800c330 <__itoa+0x24>

0800c33c <itoa>:
 800c33c:	f7ff bfe6 	b.w	800c30c <__itoa>

0800c340 <malloc>:
 800c340:	4b02      	ldr	r3, [pc, #8]	; (800c34c <malloc+0xc>)
 800c342:	4601      	mov	r1, r0
 800c344:	6818      	ldr	r0, [r3, #0]
 800c346:	f000 b823 	b.w	800c390 <_malloc_r>
 800c34a:	bf00      	nop
 800c34c:	2000010c 	.word	0x2000010c

0800c350 <sbrk_aligned>:
 800c350:	b570      	push	{r4, r5, r6, lr}
 800c352:	4e0e      	ldr	r6, [pc, #56]	; (800c38c <sbrk_aligned+0x3c>)
 800c354:	460c      	mov	r4, r1
 800c356:	6831      	ldr	r1, [r6, #0]
 800c358:	4605      	mov	r5, r0
 800c35a:	b911      	cbnz	r1, 800c362 <sbrk_aligned+0x12>
 800c35c:	f000 f952 	bl	800c604 <_sbrk_r>
 800c360:	6030      	str	r0, [r6, #0]
 800c362:	4621      	mov	r1, r4
 800c364:	4628      	mov	r0, r5
 800c366:	f000 f94d 	bl	800c604 <_sbrk_r>
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	d00a      	beq.n	800c384 <sbrk_aligned+0x34>
 800c36e:	1cc4      	adds	r4, r0, #3
 800c370:	f024 0403 	bic.w	r4, r4, #3
 800c374:	42a0      	cmp	r0, r4
 800c376:	d007      	beq.n	800c388 <sbrk_aligned+0x38>
 800c378:	1a21      	subs	r1, r4, r0
 800c37a:	4628      	mov	r0, r5
 800c37c:	f000 f942 	bl	800c604 <_sbrk_r>
 800c380:	3001      	adds	r0, #1
 800c382:	d101      	bne.n	800c388 <sbrk_aligned+0x38>
 800c384:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c388:	4620      	mov	r0, r4
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
 800c38c:	200003a8 	.word	0x200003a8

0800c390 <_malloc_r>:
 800c390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c394:	1ccd      	adds	r5, r1, #3
 800c396:	f025 0503 	bic.w	r5, r5, #3
 800c39a:	3508      	adds	r5, #8
 800c39c:	2d0c      	cmp	r5, #12
 800c39e:	bf38      	it	cc
 800c3a0:	250c      	movcc	r5, #12
 800c3a2:	2d00      	cmp	r5, #0
 800c3a4:	4607      	mov	r7, r0
 800c3a6:	db01      	blt.n	800c3ac <_malloc_r+0x1c>
 800c3a8:	42a9      	cmp	r1, r5
 800c3aa:	d905      	bls.n	800c3b8 <_malloc_r+0x28>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	2600      	movs	r6, #0
 800c3b0:	603b      	str	r3, [r7, #0]
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c48c <_malloc_r+0xfc>
 800c3bc:	f000 f89c 	bl	800c4f8 <__malloc_lock>
 800c3c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3c4:	461c      	mov	r4, r3
 800c3c6:	bb5c      	cbnz	r4, 800c420 <_malloc_r+0x90>
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	f7ff ffc0 	bl	800c350 <sbrk_aligned>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	d155      	bne.n	800c482 <_malloc_r+0xf2>
 800c3d6:	f8d8 4000 	ldr.w	r4, [r8]
 800c3da:	4626      	mov	r6, r4
 800c3dc:	2e00      	cmp	r6, #0
 800c3de:	d145      	bne.n	800c46c <_malloc_r+0xdc>
 800c3e0:	2c00      	cmp	r4, #0
 800c3e2:	d048      	beq.n	800c476 <_malloc_r+0xe6>
 800c3e4:	6823      	ldr	r3, [r4, #0]
 800c3e6:	4631      	mov	r1, r6
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	eb04 0903 	add.w	r9, r4, r3
 800c3ee:	f000 f909 	bl	800c604 <_sbrk_r>
 800c3f2:	4581      	cmp	r9, r0
 800c3f4:	d13f      	bne.n	800c476 <_malloc_r+0xe6>
 800c3f6:	6821      	ldr	r1, [r4, #0]
 800c3f8:	4638      	mov	r0, r7
 800c3fa:	1a6d      	subs	r5, r5, r1
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	f7ff ffa7 	bl	800c350 <sbrk_aligned>
 800c402:	3001      	adds	r0, #1
 800c404:	d037      	beq.n	800c476 <_malloc_r+0xe6>
 800c406:	6823      	ldr	r3, [r4, #0]
 800c408:	442b      	add	r3, r5
 800c40a:	6023      	str	r3, [r4, #0]
 800c40c:	f8d8 3000 	ldr.w	r3, [r8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d038      	beq.n	800c486 <_malloc_r+0xf6>
 800c414:	685a      	ldr	r2, [r3, #4]
 800c416:	42a2      	cmp	r2, r4
 800c418:	d12b      	bne.n	800c472 <_malloc_r+0xe2>
 800c41a:	2200      	movs	r2, #0
 800c41c:	605a      	str	r2, [r3, #4]
 800c41e:	e00f      	b.n	800c440 <_malloc_r+0xb0>
 800c420:	6822      	ldr	r2, [r4, #0]
 800c422:	1b52      	subs	r2, r2, r5
 800c424:	d41f      	bmi.n	800c466 <_malloc_r+0xd6>
 800c426:	2a0b      	cmp	r2, #11
 800c428:	d917      	bls.n	800c45a <_malloc_r+0xca>
 800c42a:	1961      	adds	r1, r4, r5
 800c42c:	42a3      	cmp	r3, r4
 800c42e:	6025      	str	r5, [r4, #0]
 800c430:	bf18      	it	ne
 800c432:	6059      	strne	r1, [r3, #4]
 800c434:	6863      	ldr	r3, [r4, #4]
 800c436:	bf08      	it	eq
 800c438:	f8c8 1000 	streq.w	r1, [r8]
 800c43c:	5162      	str	r2, [r4, r5]
 800c43e:	604b      	str	r3, [r1, #4]
 800c440:	4638      	mov	r0, r7
 800c442:	f104 060b 	add.w	r6, r4, #11
 800c446:	f000 f85d 	bl	800c504 <__malloc_unlock>
 800c44a:	f026 0607 	bic.w	r6, r6, #7
 800c44e:	1d23      	adds	r3, r4, #4
 800c450:	1af2      	subs	r2, r6, r3
 800c452:	d0ae      	beq.n	800c3b2 <_malloc_r+0x22>
 800c454:	1b9b      	subs	r3, r3, r6
 800c456:	50a3      	str	r3, [r4, r2]
 800c458:	e7ab      	b.n	800c3b2 <_malloc_r+0x22>
 800c45a:	42a3      	cmp	r3, r4
 800c45c:	6862      	ldr	r2, [r4, #4]
 800c45e:	d1dd      	bne.n	800c41c <_malloc_r+0x8c>
 800c460:	f8c8 2000 	str.w	r2, [r8]
 800c464:	e7ec      	b.n	800c440 <_malloc_r+0xb0>
 800c466:	4623      	mov	r3, r4
 800c468:	6864      	ldr	r4, [r4, #4]
 800c46a:	e7ac      	b.n	800c3c6 <_malloc_r+0x36>
 800c46c:	4634      	mov	r4, r6
 800c46e:	6876      	ldr	r6, [r6, #4]
 800c470:	e7b4      	b.n	800c3dc <_malloc_r+0x4c>
 800c472:	4613      	mov	r3, r2
 800c474:	e7cc      	b.n	800c410 <_malloc_r+0x80>
 800c476:	230c      	movs	r3, #12
 800c478:	4638      	mov	r0, r7
 800c47a:	603b      	str	r3, [r7, #0]
 800c47c:	f000 f842 	bl	800c504 <__malloc_unlock>
 800c480:	e797      	b.n	800c3b2 <_malloc_r+0x22>
 800c482:	6025      	str	r5, [r4, #0]
 800c484:	e7dc      	b.n	800c440 <_malloc_r+0xb0>
 800c486:	605b      	str	r3, [r3, #4]
 800c488:	deff      	udf	#255	; 0xff
 800c48a:	bf00      	nop
 800c48c:	200003a4 	.word	0x200003a4

0800c490 <sniprintf>:
 800c490:	b40c      	push	{r2, r3}
 800c492:	b530      	push	{r4, r5, lr}
 800c494:	4b17      	ldr	r3, [pc, #92]	; (800c4f4 <sniprintf+0x64>)
 800c496:	1e0c      	subs	r4, r1, #0
 800c498:	681d      	ldr	r5, [r3, #0]
 800c49a:	b09d      	sub	sp, #116	; 0x74
 800c49c:	da08      	bge.n	800c4b0 <sniprintf+0x20>
 800c49e:	238b      	movs	r3, #139	; 0x8b
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4a4:	602b      	str	r3, [r5, #0]
 800c4a6:	b01d      	add	sp, #116	; 0x74
 800c4a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4ac:	b002      	add	sp, #8
 800c4ae:	4770      	bx	lr
 800c4b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c4b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c4b8:	bf0c      	ite	eq
 800c4ba:	4623      	moveq	r3, r4
 800c4bc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c4c0:	9304      	str	r3, [sp, #16]
 800c4c2:	9307      	str	r3, [sp, #28]
 800c4c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4c8:	9002      	str	r0, [sp, #8]
 800c4ca:	9006      	str	r0, [sp, #24]
 800c4cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	ab21      	add	r3, sp, #132	; 0x84
 800c4d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c4d6:	a902      	add	r1, sp, #8
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	f000 f979 	bl	800c7d0 <_svfiprintf_r>
 800c4de:	1c43      	adds	r3, r0, #1
 800c4e0:	bfbc      	itt	lt
 800c4e2:	238b      	movlt	r3, #139	; 0x8b
 800c4e4:	602b      	strlt	r3, [r5, #0]
 800c4e6:	2c00      	cmp	r4, #0
 800c4e8:	d0dd      	beq.n	800c4a6 <sniprintf+0x16>
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	9b02      	ldr	r3, [sp, #8]
 800c4ee:	701a      	strb	r2, [r3, #0]
 800c4f0:	e7d9      	b.n	800c4a6 <sniprintf+0x16>
 800c4f2:	bf00      	nop
 800c4f4:	2000010c 	.word	0x2000010c

0800c4f8 <__malloc_lock>:
 800c4f8:	4801      	ldr	r0, [pc, #4]	; (800c500 <__malloc_lock+0x8>)
 800c4fa:	f000 b8bd 	b.w	800c678 <__retarget_lock_acquire_recursive>
 800c4fe:	bf00      	nop
 800c500:	200004e4 	.word	0x200004e4

0800c504 <__malloc_unlock>:
 800c504:	4801      	ldr	r0, [pc, #4]	; (800c50c <__malloc_unlock+0x8>)
 800c506:	f000 b8b8 	b.w	800c67a <__retarget_lock_release_recursive>
 800c50a:	bf00      	nop
 800c50c:	200004e4 	.word	0x200004e4

0800c510 <siprintf>:
 800c510:	b40e      	push	{r1, r2, r3}
 800c512:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c516:	b500      	push	{lr}
 800c518:	b09c      	sub	sp, #112	; 0x70
 800c51a:	ab1d      	add	r3, sp, #116	; 0x74
 800c51c:	9002      	str	r0, [sp, #8]
 800c51e:	9006      	str	r0, [sp, #24]
 800c520:	9107      	str	r1, [sp, #28]
 800c522:	9104      	str	r1, [sp, #16]
 800c524:	4808      	ldr	r0, [pc, #32]	; (800c548 <siprintf+0x38>)
 800c526:	4909      	ldr	r1, [pc, #36]	; (800c54c <siprintf+0x3c>)
 800c528:	f853 2b04 	ldr.w	r2, [r3], #4
 800c52c:	9105      	str	r1, [sp, #20]
 800c52e:	6800      	ldr	r0, [r0, #0]
 800c530:	a902      	add	r1, sp, #8
 800c532:	9301      	str	r3, [sp, #4]
 800c534:	f000 f94c 	bl	800c7d0 <_svfiprintf_r>
 800c538:	2200      	movs	r2, #0
 800c53a:	9b02      	ldr	r3, [sp, #8]
 800c53c:	701a      	strb	r2, [r3, #0]
 800c53e:	b01c      	add	sp, #112	; 0x70
 800c540:	f85d eb04 	ldr.w	lr, [sp], #4
 800c544:	b003      	add	sp, #12
 800c546:	4770      	bx	lr
 800c548:	2000010c 	.word	0x2000010c
 800c54c:	ffff0208 	.word	0xffff0208

0800c550 <__utoa>:
 800c550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c552:	b08b      	sub	sp, #44	; 0x2c
 800c554:	4605      	mov	r5, r0
 800c556:	460b      	mov	r3, r1
 800c558:	466e      	mov	r6, sp
 800c55a:	4c1d      	ldr	r4, [pc, #116]	; (800c5d0 <__utoa+0x80>)
 800c55c:	f104 0c20 	add.w	ip, r4, #32
 800c560:	4637      	mov	r7, r6
 800c562:	6820      	ldr	r0, [r4, #0]
 800c564:	6861      	ldr	r1, [r4, #4]
 800c566:	3408      	adds	r4, #8
 800c568:	c703      	stmia	r7!, {r0, r1}
 800c56a:	4564      	cmp	r4, ip
 800c56c:	463e      	mov	r6, r7
 800c56e:	d1f7      	bne.n	800c560 <__utoa+0x10>
 800c570:	7921      	ldrb	r1, [r4, #4]
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	7139      	strb	r1, [r7, #4]
 800c576:	1e91      	subs	r1, r2, #2
 800c578:	2922      	cmp	r1, #34	; 0x22
 800c57a:	6038      	str	r0, [r7, #0]
 800c57c:	f04f 0100 	mov.w	r1, #0
 800c580:	d904      	bls.n	800c58c <__utoa+0x3c>
 800c582:	7019      	strb	r1, [r3, #0]
 800c584:	460b      	mov	r3, r1
 800c586:	4618      	mov	r0, r3
 800c588:	b00b      	add	sp, #44	; 0x2c
 800c58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c58c:	1e58      	subs	r0, r3, #1
 800c58e:	4684      	mov	ip, r0
 800c590:	fbb5 f7f2 	udiv	r7, r5, r2
 800c594:	fb02 5617 	mls	r6, r2, r7, r5
 800c598:	3628      	adds	r6, #40	; 0x28
 800c59a:	446e      	add	r6, sp
 800c59c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5a6:	462e      	mov	r6, r5
 800c5a8:	42b2      	cmp	r2, r6
 800c5aa:	463d      	mov	r5, r7
 800c5ac:	f101 0101 	add.w	r1, r1, #1
 800c5b0:	d9ee      	bls.n	800c590 <__utoa+0x40>
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	545a      	strb	r2, [r3, r1]
 800c5b6:	1919      	adds	r1, r3, r4
 800c5b8:	1aa5      	subs	r5, r4, r2
 800c5ba:	42aa      	cmp	r2, r5
 800c5bc:	dae3      	bge.n	800c586 <__utoa+0x36>
 800c5be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5c2:	780e      	ldrb	r6, [r1, #0]
 800c5c4:	3201      	adds	r2, #1
 800c5c6:	7006      	strb	r6, [r0, #0]
 800c5c8:	f801 5901 	strb.w	r5, [r1], #-1
 800c5cc:	e7f4      	b.n	800c5b8 <__utoa+0x68>
 800c5ce:	bf00      	nop
 800c5d0:	0800dd6a 	.word	0x0800dd6a

0800c5d4 <strcat>:
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	7814      	ldrb	r4, [r2, #0]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	3201      	adds	r2, #1
 800c5de:	2c00      	cmp	r4, #0
 800c5e0:	d1fa      	bne.n	800c5d8 <strcat+0x4>
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5ec:	2a00      	cmp	r2, #0
 800c5ee:	d1f9      	bne.n	800c5e4 <strcat+0x10>
 800c5f0:	bd10      	pop	{r4, pc}

0800c5f2 <memset>:
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	4402      	add	r2, r0
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d100      	bne.n	800c5fc <memset+0xa>
 800c5fa:	4770      	bx	lr
 800c5fc:	f803 1b01 	strb.w	r1, [r3], #1
 800c600:	e7f9      	b.n	800c5f6 <memset+0x4>
	...

0800c604 <_sbrk_r>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	2300      	movs	r3, #0
 800c608:	4d05      	ldr	r5, [pc, #20]	; (800c620 <_sbrk_r+0x1c>)
 800c60a:	4604      	mov	r4, r0
 800c60c:	4608      	mov	r0, r1
 800c60e:	602b      	str	r3, [r5, #0]
 800c610:	f7fb ffd4 	bl	80085bc <_sbrk>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_sbrk_r+0x1a>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_sbrk_r+0x1a>
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	200004e8 	.word	0x200004e8

0800c624 <__errno>:
 800c624:	4b01      	ldr	r3, [pc, #4]	; (800c62c <__errno+0x8>)
 800c626:	6818      	ldr	r0, [r3, #0]
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	2000010c 	.word	0x2000010c

0800c630 <__libc_init_array>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	2600      	movs	r6, #0
 800c634:	4d0c      	ldr	r5, [pc, #48]	; (800c668 <__libc_init_array+0x38>)
 800c636:	4c0d      	ldr	r4, [pc, #52]	; (800c66c <__libc_init_array+0x3c>)
 800c638:	1b64      	subs	r4, r4, r5
 800c63a:	10a4      	asrs	r4, r4, #2
 800c63c:	42a6      	cmp	r6, r4
 800c63e:	d109      	bne.n	800c654 <__libc_init_array+0x24>
 800c640:	f000 fbc6 	bl	800cdd0 <_init>
 800c644:	2600      	movs	r6, #0
 800c646:	4d0a      	ldr	r5, [pc, #40]	; (800c670 <__libc_init_array+0x40>)
 800c648:	4c0a      	ldr	r4, [pc, #40]	; (800c674 <__libc_init_array+0x44>)
 800c64a:	1b64      	subs	r4, r4, r5
 800c64c:	10a4      	asrs	r4, r4, #2
 800c64e:	42a6      	cmp	r6, r4
 800c650:	d105      	bne.n	800c65e <__libc_init_array+0x2e>
 800c652:	bd70      	pop	{r4, r5, r6, pc}
 800c654:	f855 3b04 	ldr.w	r3, [r5], #4
 800c658:	4798      	blx	r3
 800c65a:	3601      	adds	r6, #1
 800c65c:	e7ee      	b.n	800c63c <__libc_init_array+0xc>
 800c65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c662:	4798      	blx	r3
 800c664:	3601      	adds	r6, #1
 800c666:	e7f2      	b.n	800c64e <__libc_init_array+0x1e>
 800c668:	0800ddc4 	.word	0x0800ddc4
 800c66c:	0800ddc4 	.word	0x0800ddc4
 800c670:	0800ddc4 	.word	0x0800ddc4
 800c674:	0800ddc8 	.word	0x0800ddc8

0800c678 <__retarget_lock_acquire_recursive>:
 800c678:	4770      	bx	lr

0800c67a <__retarget_lock_release_recursive>:
 800c67a:	4770      	bx	lr

0800c67c <strcpy>:
 800c67c:	4603      	mov	r3, r0
 800c67e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c682:	f803 2b01 	strb.w	r2, [r3], #1
 800c686:	2a00      	cmp	r2, #0
 800c688:	d1f9      	bne.n	800c67e <strcpy+0x2>
 800c68a:	4770      	bx	lr

0800c68c <_free_r>:
 800c68c:	b538      	push	{r3, r4, r5, lr}
 800c68e:	4605      	mov	r5, r0
 800c690:	2900      	cmp	r1, #0
 800c692:	d040      	beq.n	800c716 <_free_r+0x8a>
 800c694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c698:	1f0c      	subs	r4, r1, #4
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bfb8      	it	lt
 800c69e:	18e4      	addlt	r4, r4, r3
 800c6a0:	f7ff ff2a 	bl	800c4f8 <__malloc_lock>
 800c6a4:	4a1c      	ldr	r2, [pc, #112]	; (800c718 <_free_r+0x8c>)
 800c6a6:	6813      	ldr	r3, [r2, #0]
 800c6a8:	b933      	cbnz	r3, 800c6b8 <_free_r+0x2c>
 800c6aa:	6063      	str	r3, [r4, #4]
 800c6ac:	6014      	str	r4, [r2, #0]
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b4:	f7ff bf26 	b.w	800c504 <__malloc_unlock>
 800c6b8:	42a3      	cmp	r3, r4
 800c6ba:	d908      	bls.n	800c6ce <_free_r+0x42>
 800c6bc:	6820      	ldr	r0, [r4, #0]
 800c6be:	1821      	adds	r1, r4, r0
 800c6c0:	428b      	cmp	r3, r1
 800c6c2:	bf01      	itttt	eq
 800c6c4:	6819      	ldreq	r1, [r3, #0]
 800c6c6:	685b      	ldreq	r3, [r3, #4]
 800c6c8:	1809      	addeq	r1, r1, r0
 800c6ca:	6021      	streq	r1, [r4, #0]
 800c6cc:	e7ed      	b.n	800c6aa <_free_r+0x1e>
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	b10b      	cbz	r3, 800c6d8 <_free_r+0x4c>
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	d9fa      	bls.n	800c6ce <_free_r+0x42>
 800c6d8:	6811      	ldr	r1, [r2, #0]
 800c6da:	1850      	adds	r0, r2, r1
 800c6dc:	42a0      	cmp	r0, r4
 800c6de:	d10b      	bne.n	800c6f8 <_free_r+0x6c>
 800c6e0:	6820      	ldr	r0, [r4, #0]
 800c6e2:	4401      	add	r1, r0
 800c6e4:	1850      	adds	r0, r2, r1
 800c6e6:	4283      	cmp	r3, r0
 800c6e8:	6011      	str	r1, [r2, #0]
 800c6ea:	d1e0      	bne.n	800c6ae <_free_r+0x22>
 800c6ec:	6818      	ldr	r0, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	4408      	add	r0, r1
 800c6f2:	6010      	str	r0, [r2, #0]
 800c6f4:	6053      	str	r3, [r2, #4]
 800c6f6:	e7da      	b.n	800c6ae <_free_r+0x22>
 800c6f8:	d902      	bls.n	800c700 <_free_r+0x74>
 800c6fa:	230c      	movs	r3, #12
 800c6fc:	602b      	str	r3, [r5, #0]
 800c6fe:	e7d6      	b.n	800c6ae <_free_r+0x22>
 800c700:	6820      	ldr	r0, [r4, #0]
 800c702:	1821      	adds	r1, r4, r0
 800c704:	428b      	cmp	r3, r1
 800c706:	bf01      	itttt	eq
 800c708:	6819      	ldreq	r1, [r3, #0]
 800c70a:	685b      	ldreq	r3, [r3, #4]
 800c70c:	1809      	addeq	r1, r1, r0
 800c70e:	6021      	streq	r1, [r4, #0]
 800c710:	6063      	str	r3, [r4, #4]
 800c712:	6054      	str	r4, [r2, #4]
 800c714:	e7cb      	b.n	800c6ae <_free_r+0x22>
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	200003a4 	.word	0x200003a4

0800c71c <__ssputs_r>:
 800c71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c720:	461f      	mov	r7, r3
 800c722:	688e      	ldr	r6, [r1, #8]
 800c724:	4682      	mov	sl, r0
 800c726:	42be      	cmp	r6, r7
 800c728:	460c      	mov	r4, r1
 800c72a:	4690      	mov	r8, r2
 800c72c:	680b      	ldr	r3, [r1, #0]
 800c72e:	d82c      	bhi.n	800c78a <__ssputs_r+0x6e>
 800c730:	898a      	ldrh	r2, [r1, #12]
 800c732:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c736:	d026      	beq.n	800c786 <__ssputs_r+0x6a>
 800c738:	6965      	ldr	r5, [r4, #20]
 800c73a:	6909      	ldr	r1, [r1, #16]
 800c73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c740:	eba3 0901 	sub.w	r9, r3, r1
 800c744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c748:	1c7b      	adds	r3, r7, #1
 800c74a:	444b      	add	r3, r9
 800c74c:	106d      	asrs	r5, r5, #1
 800c74e:	429d      	cmp	r5, r3
 800c750:	bf38      	it	cc
 800c752:	461d      	movcc	r5, r3
 800c754:	0553      	lsls	r3, r2, #21
 800c756:	d527      	bpl.n	800c7a8 <__ssputs_r+0x8c>
 800c758:	4629      	mov	r1, r5
 800c75a:	f7ff fe19 	bl	800c390 <_malloc_r>
 800c75e:	4606      	mov	r6, r0
 800c760:	b360      	cbz	r0, 800c7bc <__ssputs_r+0xa0>
 800c762:	464a      	mov	r2, r9
 800c764:	6921      	ldr	r1, [r4, #16]
 800c766:	f000 fb1c 	bl	800cda2 <memcpy>
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	6126      	str	r6, [r4, #16]
 800c778:	444e      	add	r6, r9
 800c77a:	6026      	str	r6, [r4, #0]
 800c77c:	463e      	mov	r6, r7
 800c77e:	6165      	str	r5, [r4, #20]
 800c780:	eba5 0509 	sub.w	r5, r5, r9
 800c784:	60a5      	str	r5, [r4, #8]
 800c786:	42be      	cmp	r6, r7
 800c788:	d900      	bls.n	800c78c <__ssputs_r+0x70>
 800c78a:	463e      	mov	r6, r7
 800c78c:	4632      	mov	r2, r6
 800c78e:	4641      	mov	r1, r8
 800c790:	6820      	ldr	r0, [r4, #0]
 800c792:	f000 fade 	bl	800cd52 <memmove>
 800c796:	2000      	movs	r0, #0
 800c798:	68a3      	ldr	r3, [r4, #8]
 800c79a:	1b9b      	subs	r3, r3, r6
 800c79c:	60a3      	str	r3, [r4, #8]
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	4433      	add	r3, r6
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a8:	462a      	mov	r2, r5
 800c7aa:	f000 faa3 	bl	800ccf4 <_realloc_r>
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d1e0      	bne.n	800c776 <__ssputs_r+0x5a>
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	6921      	ldr	r1, [r4, #16]
 800c7b8:	f7ff ff68 	bl	800c68c <_free_r>
 800c7bc:	230c      	movs	r3, #12
 800c7be:	f8ca 3000 	str.w	r3, [sl]
 800c7c2:	89a3      	ldrh	r3, [r4, #12]
 800c7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	e7e9      	b.n	800c7a4 <__ssputs_r+0x88>

0800c7d0 <_svfiprintf_r>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	4698      	mov	r8, r3
 800c7d6:	898b      	ldrh	r3, [r1, #12]
 800c7d8:	4607      	mov	r7, r0
 800c7da:	061b      	lsls	r3, r3, #24
 800c7dc:	460d      	mov	r5, r1
 800c7de:	4614      	mov	r4, r2
 800c7e0:	b09d      	sub	sp, #116	; 0x74
 800c7e2:	d50e      	bpl.n	800c802 <_svfiprintf_r+0x32>
 800c7e4:	690b      	ldr	r3, [r1, #16]
 800c7e6:	b963      	cbnz	r3, 800c802 <_svfiprintf_r+0x32>
 800c7e8:	2140      	movs	r1, #64	; 0x40
 800c7ea:	f7ff fdd1 	bl	800c390 <_malloc_r>
 800c7ee:	6028      	str	r0, [r5, #0]
 800c7f0:	6128      	str	r0, [r5, #16]
 800c7f2:	b920      	cbnz	r0, 800c7fe <_svfiprintf_r+0x2e>
 800c7f4:	230c      	movs	r3, #12
 800c7f6:	603b      	str	r3, [r7, #0]
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7fc:	e0d0      	b.n	800c9a0 <_svfiprintf_r+0x1d0>
 800c7fe:	2340      	movs	r3, #64	; 0x40
 800c800:	616b      	str	r3, [r5, #20]
 800c802:	2300      	movs	r3, #0
 800c804:	9309      	str	r3, [sp, #36]	; 0x24
 800c806:	2320      	movs	r3, #32
 800c808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c80c:	2330      	movs	r3, #48	; 0x30
 800c80e:	f04f 0901 	mov.w	r9, #1
 800c812:	f8cd 800c 	str.w	r8, [sp, #12]
 800c816:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c9b8 <_svfiprintf_r+0x1e8>
 800c81a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c81e:	4623      	mov	r3, r4
 800c820:	469a      	mov	sl, r3
 800c822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c826:	b10a      	cbz	r2, 800c82c <_svfiprintf_r+0x5c>
 800c828:	2a25      	cmp	r2, #37	; 0x25
 800c82a:	d1f9      	bne.n	800c820 <_svfiprintf_r+0x50>
 800c82c:	ebba 0b04 	subs.w	fp, sl, r4
 800c830:	d00b      	beq.n	800c84a <_svfiprintf_r+0x7a>
 800c832:	465b      	mov	r3, fp
 800c834:	4622      	mov	r2, r4
 800c836:	4629      	mov	r1, r5
 800c838:	4638      	mov	r0, r7
 800c83a:	f7ff ff6f 	bl	800c71c <__ssputs_r>
 800c83e:	3001      	adds	r0, #1
 800c840:	f000 80a9 	beq.w	800c996 <_svfiprintf_r+0x1c6>
 800c844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c846:	445a      	add	r2, fp
 800c848:	9209      	str	r2, [sp, #36]	; 0x24
 800c84a:	f89a 3000 	ldrb.w	r3, [sl]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 80a1 	beq.w	800c996 <_svfiprintf_r+0x1c6>
 800c854:	2300      	movs	r3, #0
 800c856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c85e:	f10a 0a01 	add.w	sl, sl, #1
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	9307      	str	r3, [sp, #28]
 800c866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c86a:	931a      	str	r3, [sp, #104]	; 0x68
 800c86c:	4654      	mov	r4, sl
 800c86e:	2205      	movs	r2, #5
 800c870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c874:	4850      	ldr	r0, [pc, #320]	; (800c9b8 <_svfiprintf_r+0x1e8>)
 800c876:	f000 fa86 	bl	800cd86 <memchr>
 800c87a:	9a04      	ldr	r2, [sp, #16]
 800c87c:	b9d8      	cbnz	r0, 800c8b6 <_svfiprintf_r+0xe6>
 800c87e:	06d0      	lsls	r0, r2, #27
 800c880:	bf44      	itt	mi
 800c882:	2320      	movmi	r3, #32
 800c884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c888:	0711      	lsls	r1, r2, #28
 800c88a:	bf44      	itt	mi
 800c88c:	232b      	movmi	r3, #43	; 0x2b
 800c88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c892:	f89a 3000 	ldrb.w	r3, [sl]
 800c896:	2b2a      	cmp	r3, #42	; 0x2a
 800c898:	d015      	beq.n	800c8c6 <_svfiprintf_r+0xf6>
 800c89a:	4654      	mov	r4, sl
 800c89c:	2000      	movs	r0, #0
 800c89e:	f04f 0c0a 	mov.w	ip, #10
 800c8a2:	9a07      	ldr	r2, [sp, #28]
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8aa:	3b30      	subs	r3, #48	; 0x30
 800c8ac:	2b09      	cmp	r3, #9
 800c8ae:	d94d      	bls.n	800c94c <_svfiprintf_r+0x17c>
 800c8b0:	b1b0      	cbz	r0, 800c8e0 <_svfiprintf_r+0x110>
 800c8b2:	9207      	str	r2, [sp, #28]
 800c8b4:	e014      	b.n	800c8e0 <_svfiprintf_r+0x110>
 800c8b6:	eba0 0308 	sub.w	r3, r0, r8
 800c8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	46a2      	mov	sl, r4
 800c8c2:	9304      	str	r3, [sp, #16]
 800c8c4:	e7d2      	b.n	800c86c <_svfiprintf_r+0x9c>
 800c8c6:	9b03      	ldr	r3, [sp, #12]
 800c8c8:	1d19      	adds	r1, r3, #4
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	9103      	str	r1, [sp, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	bfbb      	ittet	lt
 800c8d2:	425b      	neglt	r3, r3
 800c8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8d8:	9307      	strge	r3, [sp, #28]
 800c8da:	9307      	strlt	r3, [sp, #28]
 800c8dc:	bfb8      	it	lt
 800c8de:	9204      	strlt	r2, [sp, #16]
 800c8e0:	7823      	ldrb	r3, [r4, #0]
 800c8e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8e4:	d10c      	bne.n	800c900 <_svfiprintf_r+0x130>
 800c8e6:	7863      	ldrb	r3, [r4, #1]
 800c8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ea:	d134      	bne.n	800c956 <_svfiprintf_r+0x186>
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	3402      	adds	r4, #2
 800c8f0:	1d1a      	adds	r2, r3, #4
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	9203      	str	r2, [sp, #12]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	bfb8      	it	lt
 800c8fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8fe:	9305      	str	r3, [sp, #20]
 800c900:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c9bc <_svfiprintf_r+0x1ec>
 800c904:	2203      	movs	r2, #3
 800c906:	4650      	mov	r0, sl
 800c908:	7821      	ldrb	r1, [r4, #0]
 800c90a:	f000 fa3c 	bl	800cd86 <memchr>
 800c90e:	b138      	cbz	r0, 800c920 <_svfiprintf_r+0x150>
 800c910:	2240      	movs	r2, #64	; 0x40
 800c912:	9b04      	ldr	r3, [sp, #16]
 800c914:	eba0 000a 	sub.w	r0, r0, sl
 800c918:	4082      	lsls	r2, r0
 800c91a:	4313      	orrs	r3, r2
 800c91c:	3401      	adds	r4, #1
 800c91e:	9304      	str	r3, [sp, #16]
 800c920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c924:	2206      	movs	r2, #6
 800c926:	4826      	ldr	r0, [pc, #152]	; (800c9c0 <_svfiprintf_r+0x1f0>)
 800c928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c92c:	f000 fa2b 	bl	800cd86 <memchr>
 800c930:	2800      	cmp	r0, #0
 800c932:	d038      	beq.n	800c9a6 <_svfiprintf_r+0x1d6>
 800c934:	4b23      	ldr	r3, [pc, #140]	; (800c9c4 <_svfiprintf_r+0x1f4>)
 800c936:	bb1b      	cbnz	r3, 800c980 <_svfiprintf_r+0x1b0>
 800c938:	9b03      	ldr	r3, [sp, #12]
 800c93a:	3307      	adds	r3, #7
 800c93c:	f023 0307 	bic.w	r3, r3, #7
 800c940:	3308      	adds	r3, #8
 800c942:	9303      	str	r3, [sp, #12]
 800c944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c946:	4433      	add	r3, r6
 800c948:	9309      	str	r3, [sp, #36]	; 0x24
 800c94a:	e768      	b.n	800c81e <_svfiprintf_r+0x4e>
 800c94c:	460c      	mov	r4, r1
 800c94e:	2001      	movs	r0, #1
 800c950:	fb0c 3202 	mla	r2, ip, r2, r3
 800c954:	e7a6      	b.n	800c8a4 <_svfiprintf_r+0xd4>
 800c956:	2300      	movs	r3, #0
 800c958:	f04f 0c0a 	mov.w	ip, #10
 800c95c:	4619      	mov	r1, r3
 800c95e:	3401      	adds	r4, #1
 800c960:	9305      	str	r3, [sp, #20]
 800c962:	4620      	mov	r0, r4
 800c964:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c968:	3a30      	subs	r2, #48	; 0x30
 800c96a:	2a09      	cmp	r2, #9
 800c96c:	d903      	bls.n	800c976 <_svfiprintf_r+0x1a6>
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0c6      	beq.n	800c900 <_svfiprintf_r+0x130>
 800c972:	9105      	str	r1, [sp, #20]
 800c974:	e7c4      	b.n	800c900 <_svfiprintf_r+0x130>
 800c976:	4604      	mov	r4, r0
 800c978:	2301      	movs	r3, #1
 800c97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c97e:	e7f0      	b.n	800c962 <_svfiprintf_r+0x192>
 800c980:	ab03      	add	r3, sp, #12
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	462a      	mov	r2, r5
 800c986:	4638      	mov	r0, r7
 800c988:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <_svfiprintf_r+0x1f8>)
 800c98a:	a904      	add	r1, sp, #16
 800c98c:	f3af 8000 	nop.w
 800c990:	1c42      	adds	r2, r0, #1
 800c992:	4606      	mov	r6, r0
 800c994:	d1d6      	bne.n	800c944 <_svfiprintf_r+0x174>
 800c996:	89ab      	ldrh	r3, [r5, #12]
 800c998:	065b      	lsls	r3, r3, #25
 800c99a:	f53f af2d 	bmi.w	800c7f8 <_svfiprintf_r+0x28>
 800c99e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9a0:	b01d      	add	sp, #116	; 0x74
 800c9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a6:	ab03      	add	r3, sp, #12
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <_svfiprintf_r+0x1f8>)
 800c9b0:	a904      	add	r1, sp, #16
 800c9b2:	f000 f87d 	bl	800cab0 <_printf_i>
 800c9b6:	e7eb      	b.n	800c990 <_svfiprintf_r+0x1c0>
 800c9b8:	0800dd8f 	.word	0x0800dd8f
 800c9bc:	0800dd95 	.word	0x0800dd95
 800c9c0:	0800dd99 	.word	0x0800dd99
 800c9c4:	00000000 	.word	0x00000000
 800c9c8:	0800c71d 	.word	0x0800c71d

0800c9cc <_printf_common>:
 800c9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d0:	4616      	mov	r6, r2
 800c9d2:	4699      	mov	r9, r3
 800c9d4:	688a      	ldr	r2, [r1, #8]
 800c9d6:	690b      	ldr	r3, [r1, #16]
 800c9d8:	4607      	mov	r7, r0
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	bfb8      	it	lt
 800c9de:	4613      	movlt	r3, r2
 800c9e0:	6033      	str	r3, [r6, #0]
 800c9e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9ec:	b10a      	cbz	r2, 800c9f2 <_printf_common+0x26>
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	6033      	str	r3, [r6, #0]
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	0699      	lsls	r1, r3, #26
 800c9f6:	bf42      	ittt	mi
 800c9f8:	6833      	ldrmi	r3, [r6, #0]
 800c9fa:	3302      	addmi	r3, #2
 800c9fc:	6033      	strmi	r3, [r6, #0]
 800c9fe:	6825      	ldr	r5, [r4, #0]
 800ca00:	f015 0506 	ands.w	r5, r5, #6
 800ca04:	d106      	bne.n	800ca14 <_printf_common+0x48>
 800ca06:	f104 0a19 	add.w	sl, r4, #25
 800ca0a:	68e3      	ldr	r3, [r4, #12]
 800ca0c:	6832      	ldr	r2, [r6, #0]
 800ca0e:	1a9b      	subs	r3, r3, r2
 800ca10:	42ab      	cmp	r3, r5
 800ca12:	dc2b      	bgt.n	800ca6c <_printf_common+0xa0>
 800ca14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca18:	1e13      	subs	r3, r2, #0
 800ca1a:	6822      	ldr	r2, [r4, #0]
 800ca1c:	bf18      	it	ne
 800ca1e:	2301      	movne	r3, #1
 800ca20:	0692      	lsls	r2, r2, #26
 800ca22:	d430      	bmi.n	800ca86 <_printf_common+0xba>
 800ca24:	4649      	mov	r1, r9
 800ca26:	4638      	mov	r0, r7
 800ca28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca2c:	47c0      	blx	r8
 800ca2e:	3001      	adds	r0, #1
 800ca30:	d023      	beq.n	800ca7a <_printf_common+0xae>
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	6922      	ldr	r2, [r4, #16]
 800ca36:	f003 0306 	and.w	r3, r3, #6
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	bf14      	ite	ne
 800ca3e:	2500      	movne	r5, #0
 800ca40:	6833      	ldreq	r3, [r6, #0]
 800ca42:	f04f 0600 	mov.w	r6, #0
 800ca46:	bf08      	it	eq
 800ca48:	68e5      	ldreq	r5, [r4, #12]
 800ca4a:	f104 041a 	add.w	r4, r4, #26
 800ca4e:	bf08      	it	eq
 800ca50:	1aed      	subeq	r5, r5, r3
 800ca52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca56:	bf08      	it	eq
 800ca58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	bfc4      	itt	gt
 800ca60:	1a9b      	subgt	r3, r3, r2
 800ca62:	18ed      	addgt	r5, r5, r3
 800ca64:	42b5      	cmp	r5, r6
 800ca66:	d11a      	bne.n	800ca9e <_printf_common+0xd2>
 800ca68:	2000      	movs	r0, #0
 800ca6a:	e008      	b.n	800ca7e <_printf_common+0xb2>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	4652      	mov	r2, sl
 800ca70:	4649      	mov	r1, r9
 800ca72:	4638      	mov	r0, r7
 800ca74:	47c0      	blx	r8
 800ca76:	3001      	adds	r0, #1
 800ca78:	d103      	bne.n	800ca82 <_printf_common+0xb6>
 800ca7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca82:	3501      	adds	r5, #1
 800ca84:	e7c1      	b.n	800ca0a <_printf_common+0x3e>
 800ca86:	2030      	movs	r0, #48	; 0x30
 800ca88:	18e1      	adds	r1, r4, r3
 800ca8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca94:	4422      	add	r2, r4
 800ca96:	3302      	adds	r3, #2
 800ca98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca9c:	e7c2      	b.n	800ca24 <_printf_common+0x58>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4622      	mov	r2, r4
 800caa2:	4649      	mov	r1, r9
 800caa4:	4638      	mov	r0, r7
 800caa6:	47c0      	blx	r8
 800caa8:	3001      	adds	r0, #1
 800caaa:	d0e6      	beq.n	800ca7a <_printf_common+0xae>
 800caac:	3601      	adds	r6, #1
 800caae:	e7d9      	b.n	800ca64 <_printf_common+0x98>

0800cab0 <_printf_i>:
 800cab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cab4:	7e0f      	ldrb	r7, [r1, #24]
 800cab6:	4691      	mov	r9, r2
 800cab8:	2f78      	cmp	r7, #120	; 0x78
 800caba:	4680      	mov	r8, r0
 800cabc:	460c      	mov	r4, r1
 800cabe:	469a      	mov	sl, r3
 800cac0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cac6:	d807      	bhi.n	800cad8 <_printf_i+0x28>
 800cac8:	2f62      	cmp	r7, #98	; 0x62
 800caca:	d80a      	bhi.n	800cae2 <_printf_i+0x32>
 800cacc:	2f00      	cmp	r7, #0
 800cace:	f000 80d5 	beq.w	800cc7c <_printf_i+0x1cc>
 800cad2:	2f58      	cmp	r7, #88	; 0x58
 800cad4:	f000 80c1 	beq.w	800cc5a <_printf_i+0x1aa>
 800cad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cadc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cae0:	e03a      	b.n	800cb58 <_printf_i+0xa8>
 800cae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cae6:	2b15      	cmp	r3, #21
 800cae8:	d8f6      	bhi.n	800cad8 <_printf_i+0x28>
 800caea:	a101      	add	r1, pc, #4	; (adr r1, 800caf0 <_printf_i+0x40>)
 800caec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caf0:	0800cb49 	.word	0x0800cb49
 800caf4:	0800cb5d 	.word	0x0800cb5d
 800caf8:	0800cad9 	.word	0x0800cad9
 800cafc:	0800cad9 	.word	0x0800cad9
 800cb00:	0800cad9 	.word	0x0800cad9
 800cb04:	0800cad9 	.word	0x0800cad9
 800cb08:	0800cb5d 	.word	0x0800cb5d
 800cb0c:	0800cad9 	.word	0x0800cad9
 800cb10:	0800cad9 	.word	0x0800cad9
 800cb14:	0800cad9 	.word	0x0800cad9
 800cb18:	0800cad9 	.word	0x0800cad9
 800cb1c:	0800cc63 	.word	0x0800cc63
 800cb20:	0800cb89 	.word	0x0800cb89
 800cb24:	0800cc1d 	.word	0x0800cc1d
 800cb28:	0800cad9 	.word	0x0800cad9
 800cb2c:	0800cad9 	.word	0x0800cad9
 800cb30:	0800cc85 	.word	0x0800cc85
 800cb34:	0800cad9 	.word	0x0800cad9
 800cb38:	0800cb89 	.word	0x0800cb89
 800cb3c:	0800cad9 	.word	0x0800cad9
 800cb40:	0800cad9 	.word	0x0800cad9
 800cb44:	0800cc25 	.word	0x0800cc25
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	1d1a      	adds	r2, r3, #4
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	602a      	str	r2, [r5, #0]
 800cb50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e0a0      	b.n	800cc9e <_printf_i+0x1ee>
 800cb5c:	6820      	ldr	r0, [r4, #0]
 800cb5e:	682b      	ldr	r3, [r5, #0]
 800cb60:	0607      	lsls	r7, r0, #24
 800cb62:	f103 0104 	add.w	r1, r3, #4
 800cb66:	6029      	str	r1, [r5, #0]
 800cb68:	d501      	bpl.n	800cb6e <_printf_i+0xbe>
 800cb6a:	681e      	ldr	r6, [r3, #0]
 800cb6c:	e003      	b.n	800cb76 <_printf_i+0xc6>
 800cb6e:	0646      	lsls	r6, r0, #25
 800cb70:	d5fb      	bpl.n	800cb6a <_printf_i+0xba>
 800cb72:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	da03      	bge.n	800cb82 <_printf_i+0xd2>
 800cb7a:	232d      	movs	r3, #45	; 0x2d
 800cb7c:	4276      	negs	r6, r6
 800cb7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb82:	230a      	movs	r3, #10
 800cb84:	4859      	ldr	r0, [pc, #356]	; (800ccec <_printf_i+0x23c>)
 800cb86:	e012      	b.n	800cbae <_printf_i+0xfe>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	6820      	ldr	r0, [r4, #0]
 800cb8c:	1d19      	adds	r1, r3, #4
 800cb8e:	6029      	str	r1, [r5, #0]
 800cb90:	0605      	lsls	r5, r0, #24
 800cb92:	d501      	bpl.n	800cb98 <_printf_i+0xe8>
 800cb94:	681e      	ldr	r6, [r3, #0]
 800cb96:	e002      	b.n	800cb9e <_printf_i+0xee>
 800cb98:	0641      	lsls	r1, r0, #25
 800cb9a:	d5fb      	bpl.n	800cb94 <_printf_i+0xe4>
 800cb9c:	881e      	ldrh	r6, [r3, #0]
 800cb9e:	2f6f      	cmp	r7, #111	; 0x6f
 800cba0:	bf0c      	ite	eq
 800cba2:	2308      	moveq	r3, #8
 800cba4:	230a      	movne	r3, #10
 800cba6:	4851      	ldr	r0, [pc, #324]	; (800ccec <_printf_i+0x23c>)
 800cba8:	2100      	movs	r1, #0
 800cbaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbae:	6865      	ldr	r5, [r4, #4]
 800cbb0:	2d00      	cmp	r5, #0
 800cbb2:	bfa8      	it	ge
 800cbb4:	6821      	ldrge	r1, [r4, #0]
 800cbb6:	60a5      	str	r5, [r4, #8]
 800cbb8:	bfa4      	itt	ge
 800cbba:	f021 0104 	bicge.w	r1, r1, #4
 800cbbe:	6021      	strge	r1, [r4, #0]
 800cbc0:	b90e      	cbnz	r6, 800cbc6 <_printf_i+0x116>
 800cbc2:	2d00      	cmp	r5, #0
 800cbc4:	d04b      	beq.n	800cc5e <_printf_i+0x1ae>
 800cbc6:	4615      	mov	r5, r2
 800cbc8:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbcc:	fb03 6711 	mls	r7, r3, r1, r6
 800cbd0:	5dc7      	ldrb	r7, [r0, r7]
 800cbd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbd6:	4637      	mov	r7, r6
 800cbd8:	42bb      	cmp	r3, r7
 800cbda:	460e      	mov	r6, r1
 800cbdc:	d9f4      	bls.n	800cbc8 <_printf_i+0x118>
 800cbde:	2b08      	cmp	r3, #8
 800cbe0:	d10b      	bne.n	800cbfa <_printf_i+0x14a>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	07de      	lsls	r6, r3, #31
 800cbe6:	d508      	bpl.n	800cbfa <_printf_i+0x14a>
 800cbe8:	6923      	ldr	r3, [r4, #16]
 800cbea:	6861      	ldr	r1, [r4, #4]
 800cbec:	4299      	cmp	r1, r3
 800cbee:	bfde      	ittt	le
 800cbf0:	2330      	movle	r3, #48	; 0x30
 800cbf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbf6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cbfa:	1b52      	subs	r2, r2, r5
 800cbfc:	6122      	str	r2, [r4, #16]
 800cbfe:	464b      	mov	r3, r9
 800cc00:	4621      	mov	r1, r4
 800cc02:	4640      	mov	r0, r8
 800cc04:	f8cd a000 	str.w	sl, [sp]
 800cc08:	aa03      	add	r2, sp, #12
 800cc0a:	f7ff fedf 	bl	800c9cc <_printf_common>
 800cc0e:	3001      	adds	r0, #1
 800cc10:	d14a      	bne.n	800cca8 <_printf_i+0x1f8>
 800cc12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc16:	b004      	add	sp, #16
 800cc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1c:	6823      	ldr	r3, [r4, #0]
 800cc1e:	f043 0320 	orr.w	r3, r3, #32
 800cc22:	6023      	str	r3, [r4, #0]
 800cc24:	2778      	movs	r7, #120	; 0x78
 800cc26:	4832      	ldr	r0, [pc, #200]	; (800ccf0 <_printf_i+0x240>)
 800cc28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	6829      	ldr	r1, [r5, #0]
 800cc30:	061f      	lsls	r7, r3, #24
 800cc32:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc36:	d402      	bmi.n	800cc3e <_printf_i+0x18e>
 800cc38:	065f      	lsls	r7, r3, #25
 800cc3a:	bf48      	it	mi
 800cc3c:	b2b6      	uxthmi	r6, r6
 800cc3e:	07df      	lsls	r7, r3, #31
 800cc40:	bf48      	it	mi
 800cc42:	f043 0320 	orrmi.w	r3, r3, #32
 800cc46:	6029      	str	r1, [r5, #0]
 800cc48:	bf48      	it	mi
 800cc4a:	6023      	strmi	r3, [r4, #0]
 800cc4c:	b91e      	cbnz	r6, 800cc56 <_printf_i+0x1a6>
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	f023 0320 	bic.w	r3, r3, #32
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	2310      	movs	r3, #16
 800cc58:	e7a6      	b.n	800cba8 <_printf_i+0xf8>
 800cc5a:	4824      	ldr	r0, [pc, #144]	; (800ccec <_printf_i+0x23c>)
 800cc5c:	e7e4      	b.n	800cc28 <_printf_i+0x178>
 800cc5e:	4615      	mov	r5, r2
 800cc60:	e7bd      	b.n	800cbde <_printf_i+0x12e>
 800cc62:	682b      	ldr	r3, [r5, #0]
 800cc64:	6826      	ldr	r6, [r4, #0]
 800cc66:	1d18      	adds	r0, r3, #4
 800cc68:	6961      	ldr	r1, [r4, #20]
 800cc6a:	6028      	str	r0, [r5, #0]
 800cc6c:	0635      	lsls	r5, r6, #24
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	d501      	bpl.n	800cc76 <_printf_i+0x1c6>
 800cc72:	6019      	str	r1, [r3, #0]
 800cc74:	e002      	b.n	800cc7c <_printf_i+0x1cc>
 800cc76:	0670      	lsls	r0, r6, #25
 800cc78:	d5fb      	bpl.n	800cc72 <_printf_i+0x1c2>
 800cc7a:	8019      	strh	r1, [r3, #0]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	4615      	mov	r5, r2
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	e7bc      	b.n	800cbfe <_printf_i+0x14e>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	2100      	movs	r1, #0
 800cc88:	1d1a      	adds	r2, r3, #4
 800cc8a:	602a      	str	r2, [r5, #0]
 800cc8c:	681d      	ldr	r5, [r3, #0]
 800cc8e:	6862      	ldr	r2, [r4, #4]
 800cc90:	4628      	mov	r0, r5
 800cc92:	f000 f878 	bl	800cd86 <memchr>
 800cc96:	b108      	cbz	r0, 800cc9c <_printf_i+0x1ec>
 800cc98:	1b40      	subs	r0, r0, r5
 800cc9a:	6060      	str	r0, [r4, #4]
 800cc9c:	6863      	ldr	r3, [r4, #4]
 800cc9e:	6123      	str	r3, [r4, #16]
 800cca0:	2300      	movs	r3, #0
 800cca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cca6:	e7aa      	b.n	800cbfe <_printf_i+0x14e>
 800cca8:	462a      	mov	r2, r5
 800ccaa:	4649      	mov	r1, r9
 800ccac:	4640      	mov	r0, r8
 800ccae:	6923      	ldr	r3, [r4, #16]
 800ccb0:	47d0      	blx	sl
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	d0ad      	beq.n	800cc12 <_printf_i+0x162>
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	079b      	lsls	r3, r3, #30
 800ccba:	d413      	bmi.n	800cce4 <_printf_i+0x234>
 800ccbc:	68e0      	ldr	r0, [r4, #12]
 800ccbe:	9b03      	ldr	r3, [sp, #12]
 800ccc0:	4298      	cmp	r0, r3
 800ccc2:	bfb8      	it	lt
 800ccc4:	4618      	movlt	r0, r3
 800ccc6:	e7a6      	b.n	800cc16 <_printf_i+0x166>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	4632      	mov	r2, r6
 800cccc:	4649      	mov	r1, r9
 800ccce:	4640      	mov	r0, r8
 800ccd0:	47d0      	blx	sl
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	d09d      	beq.n	800cc12 <_printf_i+0x162>
 800ccd6:	3501      	adds	r5, #1
 800ccd8:	68e3      	ldr	r3, [r4, #12]
 800ccda:	9903      	ldr	r1, [sp, #12]
 800ccdc:	1a5b      	subs	r3, r3, r1
 800ccde:	42ab      	cmp	r3, r5
 800cce0:	dcf2      	bgt.n	800ccc8 <_printf_i+0x218>
 800cce2:	e7eb      	b.n	800ccbc <_printf_i+0x20c>
 800cce4:	2500      	movs	r5, #0
 800cce6:	f104 0619 	add.w	r6, r4, #25
 800ccea:	e7f5      	b.n	800ccd8 <_printf_i+0x228>
 800ccec:	0800dda0 	.word	0x0800dda0
 800ccf0:	0800ddb1 	.word	0x0800ddb1

0800ccf4 <_realloc_r>:
 800ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf8:	4680      	mov	r8, r0
 800ccfa:	4614      	mov	r4, r2
 800ccfc:	460e      	mov	r6, r1
 800ccfe:	b921      	cbnz	r1, 800cd0a <_realloc_r+0x16>
 800cd00:	4611      	mov	r1, r2
 800cd02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd06:	f7ff bb43 	b.w	800c390 <_malloc_r>
 800cd0a:	b92a      	cbnz	r2, 800cd18 <_realloc_r+0x24>
 800cd0c:	f7ff fcbe 	bl	800c68c <_free_r>
 800cd10:	4625      	mov	r5, r4
 800cd12:	4628      	mov	r0, r5
 800cd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd18:	f000 f851 	bl	800cdbe <_malloc_usable_size_r>
 800cd1c:	4284      	cmp	r4, r0
 800cd1e:	4607      	mov	r7, r0
 800cd20:	d802      	bhi.n	800cd28 <_realloc_r+0x34>
 800cd22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd26:	d812      	bhi.n	800cd4e <_realloc_r+0x5a>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	4640      	mov	r0, r8
 800cd2c:	f7ff fb30 	bl	800c390 <_malloc_r>
 800cd30:	4605      	mov	r5, r0
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d0ed      	beq.n	800cd12 <_realloc_r+0x1e>
 800cd36:	42bc      	cmp	r4, r7
 800cd38:	4622      	mov	r2, r4
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	bf28      	it	cs
 800cd3e:	463a      	movcs	r2, r7
 800cd40:	f000 f82f 	bl	800cda2 <memcpy>
 800cd44:	4631      	mov	r1, r6
 800cd46:	4640      	mov	r0, r8
 800cd48:	f7ff fca0 	bl	800c68c <_free_r>
 800cd4c:	e7e1      	b.n	800cd12 <_realloc_r+0x1e>
 800cd4e:	4635      	mov	r5, r6
 800cd50:	e7df      	b.n	800cd12 <_realloc_r+0x1e>

0800cd52 <memmove>:
 800cd52:	4288      	cmp	r0, r1
 800cd54:	b510      	push	{r4, lr}
 800cd56:	eb01 0402 	add.w	r4, r1, r2
 800cd5a:	d902      	bls.n	800cd62 <memmove+0x10>
 800cd5c:	4284      	cmp	r4, r0
 800cd5e:	4623      	mov	r3, r4
 800cd60:	d807      	bhi.n	800cd72 <memmove+0x20>
 800cd62:	1e43      	subs	r3, r0, #1
 800cd64:	42a1      	cmp	r1, r4
 800cd66:	d008      	beq.n	800cd7a <memmove+0x28>
 800cd68:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd70:	e7f8      	b.n	800cd64 <memmove+0x12>
 800cd72:	4601      	mov	r1, r0
 800cd74:	4402      	add	r2, r0
 800cd76:	428a      	cmp	r2, r1
 800cd78:	d100      	bne.n	800cd7c <memmove+0x2a>
 800cd7a:	bd10      	pop	{r4, pc}
 800cd7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd80:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd84:	e7f7      	b.n	800cd76 <memmove+0x24>

0800cd86 <memchr>:
 800cd86:	4603      	mov	r3, r0
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	b2c9      	uxtb	r1, r1
 800cd8c:	4402      	add	r2, r0
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	d101      	bne.n	800cd98 <memchr+0x12>
 800cd94:	2000      	movs	r0, #0
 800cd96:	e003      	b.n	800cda0 <memchr+0x1a>
 800cd98:	7804      	ldrb	r4, [r0, #0]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	428c      	cmp	r4, r1
 800cd9e:	d1f6      	bne.n	800cd8e <memchr+0x8>
 800cda0:	bd10      	pop	{r4, pc}

0800cda2 <memcpy>:
 800cda2:	440a      	add	r2, r1
 800cda4:	4291      	cmp	r1, r2
 800cda6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdaa:	d100      	bne.n	800cdae <memcpy+0xc>
 800cdac:	4770      	bx	lr
 800cdae:	b510      	push	{r4, lr}
 800cdb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdb4:	4291      	cmp	r1, r2
 800cdb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdba:	d1f9      	bne.n	800cdb0 <memcpy+0xe>
 800cdbc:	bd10      	pop	{r4, pc}

0800cdbe <_malloc_usable_size_r>:
 800cdbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc2:	1f18      	subs	r0, r3, #4
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bfbc      	itt	lt
 800cdc8:	580b      	ldrlt	r3, [r1, r0]
 800cdca:	18c0      	addlt	r0, r0, r3
 800cdcc:	4770      	bx	lr
	...

0800cdd0 <_init>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr

0800cddc <_fini>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	bf00      	nop
 800cde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde2:	bc08      	pop	{r3}
 800cde4:	469e      	mov	lr, r3
 800cde6:	4770      	bx	lr
