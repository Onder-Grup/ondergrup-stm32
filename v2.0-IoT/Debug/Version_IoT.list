
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d508  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  0800d6ec  0800d6ec  0001d6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5f0  0800e5f0  00020a10  2**0
                  CONTENTS
  4 .ARM          00000000  0800e5f0  0800e5f0  00020a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e5f0  0800e5f0  00020a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5f0  0800e5f0  0001e5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5f4  0800e5f4  0001e5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a10  20000000  0800e5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000a10  0800f008  00020a10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  0800f008  0002102c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a39  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135d2  00000000  00000000  00020a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026e6  00000000  00000000  0003404e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0f  00000000  00000000  000378f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  00038707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018987  00000000  00000000  00053609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd7b  00000000  00000000  0006bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005204  00000000  00000000  0010bd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a10 	.word	0x20000a10
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d6d4 	.word	0x0800d6d4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a14 	.word	0x20000a14
 8000220:	0800d6d4 	.word	0x0800d6d4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c fe28 	bl	800ce98 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00b fff6 	bl	800c248 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 ff26 	bl	80090b0 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c fe16 	bl	800ce98 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00b ffe4 	bl	800c248 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 ff14 	bl	80090b0 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c fe04 	bl	800ce98 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b ffd2 	bl	800c248 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 ff02 	bl	80090b0 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c fdf2 	bl	800ce98 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b ffc0 	bl	800c248 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 fef0 	bl	80090b0 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c fdfd 	bl	800cee8 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c fdea 	bl	800cee8 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c fdae 	bl	800ce98 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00b ff7c 	bl	800c248 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 feac 	bl	80090b0 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d6ec 	.word	0x0800d6ec
 8000364:	20000a2c 	.word	0x20000a2c
 8000368:	0800d6fc 	.word	0x0800d6fc
 800036c:	0800d708 	.word	0x0800d708
 8000370:	0800d710 	.word	0x0800d710
 8000374:	0800d720 	.word	0x0800d720
 8000378:	0800d72c 	.word	0x0800d72c
 800037c:	0800d730 	.word	0x0800d730
 8000380:	0800d734 	.word	0x0800d734

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c fd73 	bl	800ce98 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00b ff3e 	bl	800c248 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 fe6e 	bl	80090b0 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c fd51 	bl	800ce98 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c fd41 	bl	800ce98 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00b ff09 	bl	800c248 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 fe39 	bl	80090b0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00b fef5 	bl	800c248 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 fe25 	bl	80090b0 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800d738 	.word	0x0800d738
 8000474:	0800d748 	.word	0x0800d748
 8000478:	20000a2c 	.word	0x20000a2c
 800047c:	0800d7c4 	.word	0x0800d7c4
 8000480:	0800d768 	.word	0x0800d768
 8000484:	0800d7d8 	.word	0x0800d7d8

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f00a f9e9 	bl	800a8a2 <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f00a f9d5 	bl	800a888 <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 fd38 	bl	8009fc8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000df8 	.word	0x20000df8
 8000564:	20000b26 	.word	0x20000b26

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f00a f979 	bl	800a8a2 <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f00a f965 	bl	800a888 <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 fcc8 	bl	8009fc8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000df8 	.word	0x20000df8
 8000644:	20000b26 	.word	0x20000b26

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f00a f8f3 	bl	800a8a2 <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f00a f8df 	bl	800a888 <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f009 fc42 	bl	8009fc8 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000df8 	.word	0x20000df8
 8000750:	20000b26 	.word	0x20000b26

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f86d 	bl	8000850 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f008 fc48 	bl	80090b0 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff9d 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff ff17 	bl	8000674 <lcd_send_char>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <lcd_backlight+0x20>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe11 	bl	8000488 <lcd_send_cmd>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000b26 	.word	0x20000b26

08000874 <lcd_cursor>:

void lcd_cursor(int state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe00 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fdfd 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800088e:	e002      	b.n	8000896 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff fdf9 	bl	8000488 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
}
 80008a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_SystemReset+0x28>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <__NVIC_SystemReset+0x20>
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	05fa0004 	.word	0x05fa0004

080008cc <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fca5 	bl	8000224 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	3301      	adds	r3, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f00c f9e4 	bl	800ccac <malloc>
 80008e4:	4603      	mov	r3, r0
 80008e6:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <copyText+0x2a>
        strcpy(result, text);
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f00c fb45 	bl	800cf80 <strcpy>
    }
    return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800090a:	20c8      	movs	r0, #200	; 0xc8
 800090c:	f008 fbd0 	bl	80090b0 <HAL_Delay>
	lcd_clear();
 8000910:	f7ff ff7e 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d143      	bne.n	80009a2 <printTemplate+0xa2>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d140      	bne.n	80009a2 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000920:	4ac1      	ldr	r2, [pc, #772]	; (8000c28 <printTemplate+0x328>)
 8000922:	2101      	movs	r1, #1
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff ff47 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 800092a:	4ac0      	ldr	r2, [pc, #768]	; (8000c2c <printTemplate+0x32c>)
 800092c:	2103      	movs	r1, #3
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff ff42 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 8000934:	4abe      	ldr	r2, [pc, #760]	; (8000c30 <printTemplate+0x330>)
 8000936:	2104      	movs	r1, #4
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff ff3d 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 800093e:	4abd      	ldr	r2, [pc, #756]	; (8000c34 <printTemplate+0x334>)
 8000940:	2105      	movs	r1, #5
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff ff38 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8000948:	4abb      	ldr	r2, [pc, #748]	; (8000c38 <printTemplate+0x338>)
 800094a:	2106      	movs	r1, #6
 800094c:	2002      	movs	r0, #2
 800094e:	f7ff ff33 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 8000952:	4aba      	ldr	r2, [pc, #744]	; (8000c3c <printTemplate+0x33c>)
 8000954:	2107      	movs	r1, #7
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff ff2e 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 800095c:	4ab8      	ldr	r2, [pc, #736]	; (8000c40 <printTemplate+0x340>)
 800095e:	210a      	movs	r1, #10
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff ff29 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 8000966:	4ab7      	ldr	r2, [pc, #732]	; (8000c44 <printTemplate+0x344>)
 8000968:	210b      	movs	r1, #11
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff ff24 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 8000970:	4ab5      	ldr	r2, [pc, #724]	; (8000c48 <printTemplate+0x348>)
 8000972:	210c      	movs	r1, #12
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff ff1f 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 800097a:	4ab4      	ldr	r2, [pc, #720]	; (8000c4c <printTemplate+0x34c>)
 800097c:	210d      	movs	r1, #13
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ff1a 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 8000984:	4ab2      	ldr	r2, [pc, #712]	; (8000c50 <printTemplate+0x350>)
 8000986:	210e      	movs	r1, #14
 8000988:	2002      	movs	r0, #2
 800098a:	f7ff ff15 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 800098e:	4ab1      	ldr	r2, [pc, #708]	; (8000c54 <printTemplate+0x354>)
 8000990:	2105      	movs	r1, #5
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff10 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000998:	2103      	movs	r1, #3
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff feed 	bl	800077a <lcd_gotoxy>
				slideText(wifiPass, 7, 1);
			}
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 80009a0:	e19a      	b.n	8000cd8 <printTemplate+0x3d8>
	} else if(type == 2) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	f040 80b5 	bne.w	8000b14 <printTemplate+0x214>
		if(page == 1) {
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d120      	bne.n	80009f2 <printTemplate+0xf2>
			lcd_clear();
 80009b0:	f7ff ff2e 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009b4:	2064      	movs	r0, #100	; 0x64
 80009b6:	f008 fb7b 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009ba:	4aa7      	ldr	r2, [pc, #668]	; (8000c58 <printTemplate+0x358>)
 80009bc:	2101      	movs	r1, #1
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fefa 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 80009c4:	48a5      	ldr	r0, [pc, #660]	; (8000c5c <printTemplate+0x35c>)
 80009c6:	f7ff fc2d 	bl	8000224 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b0a      	cmp	r3, #10
 80009ce:	d805      	bhi.n	80009dc <printTemplate+0xdc>
				lcd_print(1, 7, wifiSSID);
 80009d0:	4aa2      	ldr	r2, [pc, #648]	; (8000c5c <printTemplate+0x35c>)
 80009d2:	2107      	movs	r1, #7
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff feef 	bl	80007b8 <lcd_print>
 80009da:	e004      	b.n	80009e6 <printTemplate+0xe6>
				slideText(wifiSSID, 7, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	2107      	movs	r1, #7
 80009e0:	489e      	ldr	r0, [pc, #632]	; (8000c5c <printTemplate+0x35c>)
 80009e2:	f000 fda1 	bl	8001528 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 80009e6:	4a9e      	ldr	r2, [pc, #632]	; (8000c60 <printTemplate+0x360>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fee4 	bl	80007b8 <lcd_print>
}
 80009f0:	e172      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 2) {
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d120      	bne.n	8000a3a <printTemplate+0x13a>
			lcd_clear();
 80009f8:	f7ff ff0a 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f008 fb57 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a02:	4a95      	ldr	r2, [pc, #596]	; (8000c58 <printTemplate+0x358>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fed6 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a0c:	4893      	ldr	r0, [pc, #588]	; (8000c5c <printTemplate+0x35c>)
 8000a0e:	f7ff fc09 	bl	8000224 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b0a      	cmp	r3, #10
 8000a16:	d805      	bhi.n	8000a24 <printTemplate+0x124>
				lcd_print(1, 7, wifiSSID);
 8000a18:	4a90      	ldr	r2, [pc, #576]	; (8000c5c <printTemplate+0x35c>)
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fecb 	bl	80007b8 <lcd_print>
 8000a22:	e004      	b.n	8000a2e <printTemplate+0x12e>
				slideText(wifiSSID, 7, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2107      	movs	r1, #7
 8000a28:	488c      	ldr	r0, [pc, #560]	; (8000c5c <printTemplate+0x35c>)
 8000a2a:	f000 fd7d 	bl	8001528 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000a2e:	4a8d      	ldr	r2, [pc, #564]	; (8000c64 <printTemplate+0x364>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fec0 	bl	80007b8 <lcd_print>
}
 8000a38:	e14e      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	d120      	bne.n	8000a82 <printTemplate+0x182>
			lcd_clear();
 8000a40:	f7ff fee6 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f008 fb33 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a4a:	4a83      	ldr	r2, [pc, #524]	; (8000c58 <printTemplate+0x358>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff feb2 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a54:	4881      	ldr	r0, [pc, #516]	; (8000c5c <printTemplate+0x35c>)
 8000a56:	f7ff fbe5 	bl	8000224 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d805      	bhi.n	8000a6c <printTemplate+0x16c>
				lcd_print(1, 7, wifiSSID);
 8000a60:	4a7e      	ldr	r2, [pc, #504]	; (8000c5c <printTemplate+0x35c>)
 8000a62:	2107      	movs	r1, #7
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fea7 	bl	80007b8 <lcd_print>
 8000a6a:	e004      	b.n	8000a76 <printTemplate+0x176>
				slideText(wifiSSID, 7, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2107      	movs	r1, #7
 8000a70:	487a      	ldr	r0, [pc, #488]	; (8000c5c <printTemplate+0x35c>)
 8000a72:	f000 fd59 	bl	8001528 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000a76:	4a7c      	ldr	r2, [pc, #496]	; (8000c68 <printTemplate+0x368>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f7ff fe9c 	bl	80007b8 <lcd_print>
}
 8000a80:	e12a      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d120      	bne.n	8000aca <printTemplate+0x1ca>
			lcd_clear();
 8000a88:	f7ff fec2 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f008 fb0f 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a92:	4a71      	ldr	r2, [pc, #452]	; (8000c58 <printTemplate+0x358>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fe8e 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a9c:	486f      	ldr	r0, [pc, #444]	; (8000c5c <printTemplate+0x35c>)
 8000a9e:	f7ff fbc1 	bl	8000224 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b0a      	cmp	r3, #10
 8000aa6:	d805      	bhi.n	8000ab4 <printTemplate+0x1b4>
				lcd_print(1, 7, wifiSSID);
 8000aa8:	4a6c      	ldr	r2, [pc, #432]	; (8000c5c <printTemplate+0x35c>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fe83 	bl	80007b8 <lcd_print>
 8000ab2:	e004      	b.n	8000abe <printTemplate+0x1be>
				slideText(wifiSSID, 7, 1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	4868      	ldr	r0, [pc, #416]	; (8000c5c <printTemplate+0x35c>)
 8000aba:	f000 fd35 	bl	8001528 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000abe:	4a6b      	ldr	r2, [pc, #428]	; (8000c6c <printTemplate+0x36c>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff fe78 	bl	80007b8 <lcd_print>
}
 8000ac8:	e106      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	f040 8103 	bne.w	8000cd8 <printTemplate+0x3d8>
			lcd_clear();
 8000ad2:	f7ff fe9d 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f008 faea 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000adc:	4a5e      	ldr	r2, [pc, #376]	; (8000c58 <printTemplate+0x358>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fe69 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000ae6:	485d      	ldr	r0, [pc, #372]	; (8000c5c <printTemplate+0x35c>)
 8000ae8:	f7ff fb9c 	bl	8000224 <strlen>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b0a      	cmp	r3, #10
 8000af0:	d805      	bhi.n	8000afe <printTemplate+0x1fe>
				lcd_print(1, 7, wifiSSID);
 8000af2:	4a5a      	ldr	r2, [pc, #360]	; (8000c5c <printTemplate+0x35c>)
 8000af4:	2107      	movs	r1, #7
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fe5e 	bl	80007b8 <lcd_print>
 8000afc:	e004      	b.n	8000b08 <printTemplate+0x208>
				slideText(wifiSSID, 7, 1);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2107      	movs	r1, #7
 8000b02:	4856      	ldr	r0, [pc, #344]	; (8000c5c <printTemplate+0x35c>)
 8000b04:	f000 fd10 	bl	8001528 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b08:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <printTemplate+0x370>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fe53 	bl	80007b8 <lcd_print>
}
 8000b12:	e0e1      	b.n	8000cd8 <printTemplate+0x3d8>
	} else if(type == 3) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	f040 80de 	bne.w	8000cd8 <printTemplate+0x3d8>
		if(page == 1) {
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d120      	bne.n	8000b64 <printTemplate+0x264>
			lcd_clear();
 8000b22:	f7ff fe75 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f008 fac2 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b2c:	4a51      	ldr	r2, [pc, #324]	; (8000c74 <printTemplate+0x374>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff fe41 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000b36:	4850      	ldr	r0, [pc, #320]	; (8000c78 <printTemplate+0x378>)
 8000b38:	f7ff fb74 	bl	8000224 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b0a      	cmp	r3, #10
 8000b40:	d805      	bhi.n	8000b4e <printTemplate+0x24e>
				lcd_print(1, 7, wifiPass);
 8000b42:	4a4d      	ldr	r2, [pc, #308]	; (8000c78 <printTemplate+0x378>)
 8000b44:	2107      	movs	r1, #7
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff fe36 	bl	80007b8 <lcd_print>
 8000b4c:	e004      	b.n	8000b58 <printTemplate+0x258>
				slideText(wifiPass, 7, 1);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2107      	movs	r1, #7
 8000b52:	4849      	ldr	r0, [pc, #292]	; (8000c78 <printTemplate+0x378>)
 8000b54:	f000 fce8 	bl	8001528 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000b58:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <printTemplate+0x360>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f7ff fe2b 	bl	80007b8 <lcd_print>
}
 8000b62:	e0b9      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 2) {
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d120      	bne.n	8000bac <printTemplate+0x2ac>
			lcd_clear();
 8000b6a:	f7ff fe51 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b6e:	2064      	movs	r0, #100	; 0x64
 8000b70:	f008 fa9e 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b74:	4a3f      	ldr	r2, [pc, #252]	; (8000c74 <printTemplate+0x374>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff fe1d 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000b7e:	483e      	ldr	r0, [pc, #248]	; (8000c78 <printTemplate+0x378>)
 8000b80:	f7ff fb50 	bl	8000224 <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b0a      	cmp	r3, #10
 8000b88:	d805      	bhi.n	8000b96 <printTemplate+0x296>
				lcd_print(1, 7, wifiPass);
 8000b8a:	4a3b      	ldr	r2, [pc, #236]	; (8000c78 <printTemplate+0x378>)
 8000b8c:	2107      	movs	r1, #7
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff fe12 	bl	80007b8 <lcd_print>
 8000b94:	e004      	b.n	8000ba0 <printTemplate+0x2a0>
				slideText(wifiPass, 7, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2107      	movs	r1, #7
 8000b9a:	4837      	ldr	r0, [pc, #220]	; (8000c78 <printTemplate+0x378>)
 8000b9c:	f000 fcc4 	bl	8001528 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ba0:	4a30      	ldr	r2, [pc, #192]	; (8000c64 <printTemplate+0x364>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff fe07 	bl	80007b8 <lcd_print>
}
 8000baa:	e095      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d120      	bne.n	8000bf4 <printTemplate+0x2f4>
			lcd_clear();
 8000bb2:	f7ff fe2d 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000bb6:	2064      	movs	r0, #100	; 0x64
 8000bb8:	f008 fa7a 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000bbc:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <printTemplate+0x374>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fdf9 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000bc6:	482c      	ldr	r0, [pc, #176]	; (8000c78 <printTemplate+0x378>)
 8000bc8:	f7ff fb2c 	bl	8000224 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b0a      	cmp	r3, #10
 8000bd0:	d805      	bhi.n	8000bde <printTemplate+0x2de>
				lcd_print(1, 7, wifiPass);
 8000bd2:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <printTemplate+0x378>)
 8000bd4:	2107      	movs	r1, #7
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff fdee 	bl	80007b8 <lcd_print>
 8000bdc:	e004      	b.n	8000be8 <printTemplate+0x2e8>
				slideText(wifiPass, 7, 1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2107      	movs	r1, #7
 8000be2:	4825      	ldr	r0, [pc, #148]	; (8000c78 <printTemplate+0x378>)
 8000be4:	f000 fca0 	bl	8001528 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <printTemplate+0x368>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	2002      	movs	r0, #2
 8000bee:	f7ff fde3 	bl	80007b8 <lcd_print>
}
 8000bf2:	e071      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d14b      	bne.n	8000c92 <printTemplate+0x392>
			lcd_clear();
 8000bfa:	f7ff fe09 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f008 fa56 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <printTemplate+0x374>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fdd5 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000c0e:	481a      	ldr	r0, [pc, #104]	; (8000c78 <printTemplate+0x378>)
 8000c10:	f7ff fb08 	bl	8000224 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d830      	bhi.n	8000c7c <printTemplate+0x37c>
				lcd_print(1, 7, wifiPass);
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <printTemplate+0x378>)
 8000c1c:	2107      	movs	r1, #7
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff fdca 	bl	80007b8 <lcd_print>
 8000c24:	e02f      	b.n	8000c86 <printTemplate+0x386>
 8000c26:	bf00      	nop
 8000c28:	0800d83c 	.word	0x0800d83c
 8000c2c:	0800d844 	.word	0x0800d844
 8000c30:	0800d848 	.word	0x0800d848
 8000c34:	0800d84c 	.word	0x0800d84c
 8000c38:	0800d850 	.word	0x0800d850
 8000c3c:	0800d854 	.word	0x0800d854
 8000c40:	0800d858 	.word	0x0800d858
 8000c44:	0800d85c 	.word	0x0800d85c
 8000c48:	0800d860 	.word	0x0800d860
 8000c4c:	0800d864 	.word	0x0800d864
 8000c50:	0800d868 	.word	0x0800d868
 8000c54:	20000be4 	.word	0x20000be4
 8000c58:	0800d86c 	.word	0x0800d86c
 8000c5c:	20000bf0 	.word	0x20000bf0
 8000c60:	0800d874 	.word	0x0800d874
 8000c64:	0800d888 	.word	0x0800d888
 8000c68:	0800d89c 	.word	0x0800d89c
 8000c6c:	0800d8b0 	.word	0x0800d8b0
 8000c70:	0800d8c4 	.word	0x0800d8c4
 8000c74:	0800d8d8 	.word	0x0800d8d8
 8000c78:	20000c14 	.word	0x20000c14
				slideText(wifiPass, 7, 1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2107      	movs	r1, #7
 8000c80:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <printTemplate+0x3e0>)
 8000c82:	f000 fc51 	bl	8001528 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <printTemplate+0x3e4>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f7ff fd94 	bl	80007b8 <lcd_print>
}
 8000c90:	e022      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d11f      	bne.n	8000cd8 <printTemplate+0x3d8>
			lcd_clear();
 8000c98:	f7ff fdba 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000c9c:	2064      	movs	r0, #100	; 0x64
 8000c9e:	f008 fa07 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ca2:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <printTemplate+0x3e8>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fd86 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <printTemplate+0x3e0>)
 8000cae:	f7ff fab9 	bl	8000224 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b0a      	cmp	r3, #10
 8000cb6:	d805      	bhi.n	8000cc4 <printTemplate+0x3c4>
				lcd_print(1, 7, wifiPass);
 8000cb8:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <printTemplate+0x3e0>)
 8000cba:	2107      	movs	r1, #7
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f7ff fd7b 	bl	80007b8 <lcd_print>
 8000cc2:	e004      	b.n	8000cce <printTemplate+0x3ce>
				slideText(wifiPass, 7, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2107      	movs	r1, #7
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <printTemplate+0x3e0>)
 8000cca:	f000 fc2d 	bl	8001528 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <printTemplate+0x3ec>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f7ff fd70 	bl	80007b8 <lcd_print>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000c14 	.word	0x20000c14
 8000ce4:	0800d8b0 	.word	0x0800d8b0
 8000ce8:	0800d8d8 	.word	0x0800d8d8
 8000cec:	0800d8c4 	.word	0x0800d8c4

08000cf0 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
    return characters[cursorPosition];
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <getCharFromCursorPosition+0x1c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000960 	.word	0x20000960

08000d10 <takeMachineID>:
			machineID[i] = '9';
		}
	}
}

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fdaa 	bl	8000874 <lcd_cursor>

	if(state == 0) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d104      	bne.n	8000d30 <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 8000d26:	220c      	movs	r2, #12
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4880      	ldr	r0, [pc, #512]	; (8000f2c <takeMachineID+0x21c>)
 8000d2c:	f00c f8d4 	bl	800ced8 <memset>
	}

    int cursorPosition = 3;
 8000d30:	2303      	movs	r3, #3
 8000d32:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff fdde 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d44:	2108      	movs	r1, #8
 8000d46:	487a      	ldr	r0, [pc, #488]	; (8000f30 <takeMachineID+0x220>)
 8000d48:	f008 ff82 	bl	8009c50 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d103      	bne.n	8000d5a <takeMachineID+0x4a>
        	lcd_cursor(0);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fd8e 	bl	8000874 <lcd_cursor>

            break;
 8000d58:	e0e4      	b.n	8000f24 <takeMachineID+0x214>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4874      	ldr	r0, [pc, #464]	; (8000f30 <takeMachineID+0x220>)
 8000d5e:	f008 ff77 	bl	8009c50 <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d112      	bne.n	8000d8e <takeMachineID+0x7e>
        	if(cursorPosition == 7) {
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	2b07      	cmp	r3, #7
 8000d6c:	d102      	bne.n	8000d74 <takeMachineID+0x64>
        		cursorPosition = 10;
 8000d6e:	230a      	movs	r3, #10
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e008      	b.n	8000d86 <takeMachineID+0x76>
        	} else if (cursorPosition == 14) {
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	2b0e      	cmp	r3, #14
 8000d78:	d102      	bne.n	8000d80 <takeMachineID+0x70>
                cursorPosition = 3;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e002      	b.n	8000d86 <takeMachineID+0x76>
            } else {
            	cursorPosition++;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000d86:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d8a:	f008 f991 	bl	80090b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000d8e:	2108      	movs	r1, #8
 8000d90:	4868      	ldr	r0, [pc, #416]	; (8000f34 <takeMachineID+0x224>)
 8000d92:	f008 ff5d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d112      	bne.n	8000dc2 <takeMachineID+0xb2>
            if (cursorPosition == 3) {
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d102      	bne.n	8000da8 <takeMachineID+0x98>
                cursorPosition = 14;
 8000da2:	230e      	movs	r3, #14
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e008      	b.n	8000dba <takeMachineID+0xaa>
            } else if(cursorPosition == 10) {
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	2b0a      	cmp	r3, #10
 8000dac:	d102      	bne.n	8000db4 <takeMachineID+0xa4>
            	cursorPosition = 7;
 8000dae:	2307      	movs	r3, #7
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e002      	b.n	8000dba <takeMachineID+0xaa>
            } else {
            	cursorPosition--;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000dba:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000dbe:	f008 f977 	bl	80090b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	485a      	ldr	r0, [pc, #360]	; (8000f30 <takeMachineID+0x220>)
 8000dc6:	f008 ff43 	bl	8009c50 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d16c      	bne.n	8000eaa <takeMachineID+0x19a>
        	if(cursorPosition == 3) {
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d105      	bne.n	8000de2 <takeMachineID+0xd2>
        		machineID[machineIDLoc] = '0';
 8000dd6:	4a55      	ldr	r2, [pc, #340]	; (8000f2c <takeMachineID+0x21c>)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4413      	add	r3, r2
 8000ddc:	2230      	movs	r2, #48	; 0x30
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e04f      	b.n	8000e82 <takeMachineID+0x172>
        	} else if(cursorPosition == 4) {
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d105      	bne.n	8000df4 <takeMachineID+0xe4>
        		machineID[machineIDLoc] = '1';
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <takeMachineID+0x21c>)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4413      	add	r3, r2
 8000dee:	2231      	movs	r2, #49	; 0x31
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	e046      	b.n	8000e82 <takeMachineID+0x172>
        	} else if(cursorPosition == 5) {
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2b05      	cmp	r3, #5
 8000df8:	d105      	bne.n	8000e06 <takeMachineID+0xf6>
        		machineID[machineIDLoc] = '2';
 8000dfa:	4a4c      	ldr	r2, [pc, #304]	; (8000f2c <takeMachineID+0x21c>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4413      	add	r3, r2
 8000e00:	2232      	movs	r2, #50	; 0x32
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e03d      	b.n	8000e82 <takeMachineID+0x172>
        	} else if(cursorPosition == 6) {
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d105      	bne.n	8000e18 <takeMachineID+0x108>
        		machineID[machineIDLoc] = '3';
 8000e0c:	4a47      	ldr	r2, [pc, #284]	; (8000f2c <takeMachineID+0x21c>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4413      	add	r3, r2
 8000e12:	2233      	movs	r2, #51	; 0x33
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e034      	b.n	8000e82 <takeMachineID+0x172>
        	} else if(cursorPosition == 7) {
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2b07      	cmp	r3, #7
 8000e1c:	d105      	bne.n	8000e2a <takeMachineID+0x11a>
        		machineID[machineIDLoc] = '4';
 8000e1e:	4a43      	ldr	r2, [pc, #268]	; (8000f2c <takeMachineID+0x21c>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4413      	add	r3, r2
 8000e24:	2234      	movs	r2, #52	; 0x34
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	e02b      	b.n	8000e82 <takeMachineID+0x172>
        	} else if(cursorPosition == 10) {
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2b0a      	cmp	r3, #10
 8000e2e:	d105      	bne.n	8000e3c <takeMachineID+0x12c>
        		machineID[machineIDLoc] = '5';
 8000e30:	4a3e      	ldr	r2, [pc, #248]	; (8000f2c <takeMachineID+0x21c>)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4413      	add	r3, r2
 8000e36:	2235      	movs	r2, #53	; 0x35
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	e022      	b.n	8000e82 <takeMachineID+0x172>
        	} else if(cursorPosition == 11) {
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b0b      	cmp	r3, #11
 8000e40:	d105      	bne.n	8000e4e <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '6';
 8000e42:	4a3a      	ldr	r2, [pc, #232]	; (8000f2c <takeMachineID+0x21c>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4413      	add	r3, r2
 8000e48:	2236      	movs	r2, #54	; 0x36
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e019      	b.n	8000e82 <takeMachineID+0x172>
        	} else if(cursorPosition == 12) {
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b0c      	cmp	r3, #12
 8000e52:	d105      	bne.n	8000e60 <takeMachineID+0x150>
        		machineID[machineIDLoc] = '7';
 8000e54:	4a35      	ldr	r2, [pc, #212]	; (8000f2c <takeMachineID+0x21c>)
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4413      	add	r3, r2
 8000e5a:	2237      	movs	r2, #55	; 0x37
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e010      	b.n	8000e82 <takeMachineID+0x172>
        	} else if(cursorPosition == 13) {
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	2b0d      	cmp	r3, #13
 8000e64:	d105      	bne.n	8000e72 <takeMachineID+0x162>
        		machineID[machineIDLoc] = '8';
 8000e66:	4a31      	ldr	r2, [pc, #196]	; (8000f2c <takeMachineID+0x21c>)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	2238      	movs	r2, #56	; 0x38
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e007      	b.n	8000e82 <takeMachineID+0x172>
        	} else if(cursorPosition == 14) {
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b0e      	cmp	r3, #14
 8000e76:	d104      	bne.n	8000e82 <takeMachineID+0x172>
        		machineID[machineIDLoc] = '9';
 8000e78:	4a2c      	ldr	r2, [pc, #176]	; (8000f2c <takeMachineID+0x21c>)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	2239      	movs	r2, #57	; 0x39
 8000e80:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	b2d9      	uxtb	r1, r3
 8000e86:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <takeMachineID+0x21c>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff fca6 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8000ea2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ea6:	f008 f903 	bl	80090b0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000eaa:	2104      	movs	r1, #4
 8000eac:	4820      	ldr	r0, [pc, #128]	; (8000f30 <takeMachineID+0x220>)
 8000eae:	f008 fecf 	bl	8009c50 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d12e      	bne.n	8000f16 <takeMachineID+0x206>
            if(strlen(machineID) >= 1) {
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <takeMachineID+0x21c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d027      	beq.n	8000f10 <takeMachineID+0x200>

                machineID[machineIDLoc] = '\0';
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <takeMachineID+0x21c>)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	3304      	adds	r3, #4
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff fca5 	bl	8000824 <lcd_delete_char>
                HAL_Delay(50);
 8000eda:	2032      	movs	r0, #50	; 0x32
 8000edc:	f008 f8e8 	bl	80090b0 <HAL_Delay>

                if(writeLoc > 5) {
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	dd03      	ble.n	8000eee <takeMachineID+0x1de>
                	writeLoc--;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e004      	b.n	8000ef8 <takeMachineID+0x1e8>
                } else if(writeLoc < 5) {
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	dc01      	bgt.n	8000ef8 <takeMachineID+0x1e8>
                	writeLoc = 5;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	dd03      	ble.n	8000f06 <takeMachineID+0x1f6>
                	machineIDLoc--;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	e004      	b.n	8000f10 <takeMachineID+0x200>
                } else if(machineIDLoc < 0) {
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da01      	bge.n	8000f10 <takeMachineID+0x200>
                	machineIDLoc = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8000f10:	20fa      	movs	r0, #250	; 0xfa
 8000f12:	f008 f8cd 	bl	80090b0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f7ff fc2c 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f22:	e70f      	b.n	8000d44 <takeMachineID+0x34>
    }
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000be4 	.word	0x20000be4
 8000f30:	40010800 	.word	0x40010800
 8000f34:	40011000 	.word	0x40011000

08000f38 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	; 0x38
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    lcd_cursor(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff fc97 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d104      	bne.n	8000f56 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000f4c:	2221      	movs	r2, #33	; 0x21
 8000f4e:	2100      	movs	r1, #0
 8000f50:	48a1      	ldr	r0, [pc, #644]	; (80011d8 <takeWifiSSID+0x2a0>)
 8000f52:	f00b ffc1 	bl	800ced8 <memset>
    }

    int realCharPos = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 8000f5a:	4ba0      	ldr	r3, [pc, #640]	; (80011dc <takeWifiSSID+0x2a4>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
    page = 1;
 8000f60:	4b9f      	ldr	r3, [pc, #636]	; (80011e0 <takeWifiSSID+0x2a8>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(2, 1);
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2002      	movs	r0, #2
 8000f72:	f7ff fcc5 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f76:	2108      	movs	r1, #8
 8000f78:	489a      	ldr	r0, [pc, #616]	; (80011e4 <takeWifiSSID+0x2ac>)
 8000f7a:	f008 fe69 	bl	8009c50 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d103      	bne.n	8000f8c <takeWifiSSID+0x54>
            lcd_cursor(0);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fc75 	bl	8000874 <lcd_cursor>

            break;
 8000f8a:	e14b      	b.n	8001224 <takeWifiSSID+0x2ec>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4895      	ldr	r0, [pc, #596]	; (80011e4 <takeWifiSSID+0x2ac>)
 8000f90:	f008 fe5e 	bl	8009c50 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d166      	bne.n	8001068 <takeWifiSSID+0x130>
        	realCharPos++;
 8000f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 8000fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa2:	2b50      	cmp	r3, #80	; 0x50
 8000fa4:	dd01      	ble.n	8000faa <takeWifiSSID+0x72>
        		realCharPos = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 8000faa:	4b8c      	ldr	r3, [pc, #560]	; (80011dc <takeWifiSSID+0x2a4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d152      	bne.n	8001058 <takeWifiSSID+0x120>
            	if(page == 1) {
 8000fb2:	4b8b      	ldr	r3, [pc, #556]	; (80011e0 <takeWifiSSID+0x2a8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10c      	bne.n	8000fd4 <takeWifiSSID+0x9c>
            		cursorPosition = 1;
 8000fba:	4b88      	ldr	r3, [pc, #544]	; (80011dc <takeWifiSSID+0x2a4>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
            		page++;
 8000fc0:	4b87      	ldr	r3, [pc, #540]	; (80011e0 <takeWifiSSID+0x2a8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a86      	ldr	r2, [pc, #536]	; (80011e0 <takeWifiSSID+0x2a8>)
 8000fc8:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000fca:	2102      	movs	r1, #2
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f7ff fc97 	bl	8000900 <printTemplate>
 8000fd2:	e046      	b.n	8001062 <takeWifiSSID+0x12a>
            	} else if(page == 2) {
 8000fd4:	4b82      	ldr	r3, [pc, #520]	; (80011e0 <takeWifiSSID+0x2a8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d10c      	bne.n	8000ff6 <takeWifiSSID+0xbe>
            		cursorPosition = 1;
 8000fdc:	4b7f      	ldr	r3, [pc, #508]	; (80011dc <takeWifiSSID+0x2a4>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
            		page++;
 8000fe2:	4b7f      	ldr	r3, [pc, #508]	; (80011e0 <takeWifiSSID+0x2a8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a7d      	ldr	r2, [pc, #500]	; (80011e0 <takeWifiSSID+0x2a8>)
 8000fea:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000fec:	2103      	movs	r1, #3
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff fc86 	bl	8000900 <printTemplate>
 8000ff4:	e035      	b.n	8001062 <takeWifiSSID+0x12a>
            	} else if(page == 3) {
 8000ff6:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <takeWifiSSID+0x2a8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d10c      	bne.n	8001018 <takeWifiSSID+0xe0>
            		cursorPosition = 1;
 8000ffe:	4b77      	ldr	r3, [pc, #476]	; (80011dc <takeWifiSSID+0x2a4>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
            		page++;
 8001004:	4b76      	ldr	r3, [pc, #472]	; (80011e0 <takeWifiSSID+0x2a8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a75      	ldr	r2, [pc, #468]	; (80011e0 <takeWifiSSID+0x2a8>)
 800100c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 800100e:	2104      	movs	r1, #4
 8001010:	2002      	movs	r0, #2
 8001012:	f7ff fc75 	bl	8000900 <printTemplate>
 8001016:	e024      	b.n	8001062 <takeWifiSSID+0x12a>
            	} else if(page == 4) {
 8001018:	4b71      	ldr	r3, [pc, #452]	; (80011e0 <takeWifiSSID+0x2a8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d10c      	bne.n	800103a <takeWifiSSID+0x102>
            		cursorPosition = 1;
 8001020:	4b6e      	ldr	r3, [pc, #440]	; (80011dc <takeWifiSSID+0x2a4>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]
            		page++;
 8001026:	4b6e      	ldr	r3, [pc, #440]	; (80011e0 <takeWifiSSID+0x2a8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	4a6c      	ldr	r2, [pc, #432]	; (80011e0 <takeWifiSSID+0x2a8>)
 800102e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8001030:	2105      	movs	r1, #5
 8001032:	2002      	movs	r0, #2
 8001034:	f7ff fc64 	bl	8000900 <printTemplate>
 8001038:	e013      	b.n	8001062 <takeWifiSSID+0x12a>
            	} else if(page == 5) {
 800103a:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <takeWifiSSID+0x2a8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b05      	cmp	r3, #5
 8001040:	d10f      	bne.n	8001062 <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 8001042:	4b66      	ldr	r3, [pc, #408]	; (80011dc <takeWifiSSID+0x2a4>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001048:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <takeWifiSSID+0x2a8>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 800104e:	2101      	movs	r1, #1
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff fc55 	bl	8000900 <printTemplate>
 8001056:	e004      	b.n	8001062 <takeWifiSSID+0x12a>
            	}
            } else {
            	cursorPosition++;
 8001058:	4b60      	ldr	r3, [pc, #384]	; (80011dc <takeWifiSSID+0x2a4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	4a5f      	ldr	r2, [pc, #380]	; (80011dc <takeWifiSSID+0x2a4>)
 8001060:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001062:	20fa      	movs	r0, #250	; 0xfa
 8001064:	f008 f824 	bl	80090b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001068:	2108      	movs	r1, #8
 800106a:	485f      	ldr	r0, [pc, #380]	; (80011e8 <takeWifiSSID+0x2b0>)
 800106c:	f008 fdf0 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d15e      	bne.n	8001134 <takeWifiSSID+0x1fc>
        	realCharPos--;
 8001076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001078:	3b01      	subs	r3, #1
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 800107c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107e:	2b00      	cmp	r3, #0
 8001080:	dc01      	bgt.n	8001086 <takeWifiSSID+0x14e>
        		realCharPos = 80;
 8001082:	2350      	movs	r3, #80	; 0x50
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 8001086:	4b55      	ldr	r3, [pc, #340]	; (80011dc <takeWifiSSID+0x2a4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d14a      	bne.n	8001124 <takeWifiSSID+0x1ec>
            	if(page == 1) {
 800108e:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <takeWifiSSID+0x2a8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d10a      	bne.n	80010ac <takeWifiSSID+0x174>
            		cursorPosition = 16;
 8001096:	4b51      	ldr	r3, [pc, #324]	; (80011dc <takeWifiSSID+0x2a4>)
 8001098:	2210      	movs	r2, #16
 800109a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800109c:	4b50      	ldr	r3, [pc, #320]	; (80011e0 <takeWifiSSID+0x2a8>)
 800109e:	2205      	movs	r2, #5
 80010a0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 80010a2:	2105      	movs	r1, #5
 80010a4:	2002      	movs	r0, #2
 80010a6:	f7ff fc2b 	bl	8000900 <printTemplate>
 80010aa:	e040      	b.n	800112e <takeWifiSSID+0x1f6>
            	} else if(page == 2) {
 80010ac:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <takeWifiSSID+0x2a8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d10a      	bne.n	80010ca <takeWifiSSID+0x192>
            		cursorPosition = 16;
 80010b4:	4b49      	ldr	r3, [pc, #292]	; (80011dc <takeWifiSSID+0x2a4>)
 80010b6:	2210      	movs	r2, #16
 80010b8:	601a      	str	r2, [r3, #0]
            		page = 1;
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <takeWifiSSID+0x2a8>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80010c0:	2101      	movs	r1, #1
 80010c2:	2002      	movs	r0, #2
 80010c4:	f7ff fc1c 	bl	8000900 <printTemplate>
 80010c8:	e031      	b.n	800112e <takeWifiSSID+0x1f6>
            	} else if(page == 3) {
 80010ca:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <takeWifiSSID+0x2a8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d10a      	bne.n	80010e8 <takeWifiSSID+0x1b0>
            		cursorPosition = 16;
 80010d2:	4b42      	ldr	r3, [pc, #264]	; (80011dc <takeWifiSSID+0x2a4>)
 80010d4:	2210      	movs	r2, #16
 80010d6:	601a      	str	r2, [r3, #0]
            		page = 2;
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <takeWifiSSID+0x2a8>)
 80010da:	2202      	movs	r2, #2
 80010dc:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 80010de:	2102      	movs	r1, #2
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff fc0d 	bl	8000900 <printTemplate>
 80010e6:	e022      	b.n	800112e <takeWifiSSID+0x1f6>
            	} else if(page == 4) {
 80010e8:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <takeWifiSSID+0x2a8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d10a      	bne.n	8001106 <takeWifiSSID+0x1ce>
            		cursorPosition = 16;
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <takeWifiSSID+0x2a4>)
 80010f2:	2210      	movs	r2, #16
 80010f4:	601a      	str	r2, [r3, #0]
            		page = 3;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <takeWifiSSID+0x2a8>)
 80010f8:	2203      	movs	r2, #3
 80010fa:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80010fc:	2103      	movs	r1, #3
 80010fe:	2002      	movs	r0, #2
 8001100:	f7ff fbfe 	bl	8000900 <printTemplate>
 8001104:	e013      	b.n	800112e <takeWifiSSID+0x1f6>
            	} else if(page == 5) {
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <takeWifiSSID+0x2a8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b05      	cmp	r3, #5
 800110c:	d10f      	bne.n	800112e <takeWifiSSID+0x1f6>
            		cursorPosition = 16;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <takeWifiSSID+0x2a4>)
 8001110:	2210      	movs	r2, #16
 8001112:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <takeWifiSSID+0x2a8>)
 8001116:	2204      	movs	r2, #4
 8001118:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 800111a:	2104      	movs	r1, #4
 800111c:	2002      	movs	r0, #2
 800111e:	f7ff fbef 	bl	8000900 <printTemplate>
 8001122:	e004      	b.n	800112e <takeWifiSSID+0x1f6>
            	}
            } else {
            	cursorPosition--;
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <takeWifiSSID+0x2a4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3b01      	subs	r3, #1
 800112a:	4a2c      	ldr	r2, [pc, #176]	; (80011dc <takeWifiSSID+0x2a4>)
 800112c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800112e:	20fa      	movs	r0, #250	; 0xfa
 8001130:	f007 ffbe 	bl	80090b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001134:	2102      	movs	r1, #2
 8001136:	482b      	ldr	r0, [pc, #172]	; (80011e4 <takeWifiSSID+0x2ac>)
 8001138:	f008 fd8a 	bl	8009c50 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d128      	bne.n	8001194 <takeWifiSSID+0x25c>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	3b01      	subs	r3, #1
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fdd2 	bl	8000cf0 <getCharFromCursorPosition>
 800114c:	4603      	mov	r3, r0
 800114e:	4619      	mov	r1, r3
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <takeWifiSSID+0x2a0>)
 8001152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001154:	4413      	add	r3, r2
 8001156:	460a      	mov	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115c:	b2d9      	uxtb	r1, r3
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <takeWifiSSID+0x2a0>)
 8001160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	2001      	movs	r0, #1
 800116a:	f7ff fb3a 	bl	80007e2 <lcd_print_char>

            realCharPosLoc[wifiNameLoc] = realCharPos-1;
 800116e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3b01      	subs	r3, #1
 8001174:	b2d9      	uxtb	r1, r3
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	4413      	add	r3, r2
 800117e:	460a      	mov	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	3301      	adds	r3, #1
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiNameLoc++;
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	3301      	adds	r3, #1
 800118c:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 800118e:	20fa      	movs	r0, #250	; 0xfa
 8001190:	f007 ff8e 	bl	80090b0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001194:	2104      	movs	r1, #4
 8001196:	4813      	ldr	r0, [pc, #76]	; (80011e4 <takeWifiSSID+0x2ac>)
 8001198:	f008 fd5a 	bl	8009c50 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d138      	bne.n	8001214 <takeWifiSSID+0x2dc>
        	if(strlen(wifiSSID) >= 1) {
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <takeWifiSSID+0x2a0>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d031      	beq.n	800120e <takeWifiSSID+0x2d6>
        		wifiSSID[wifiNameLoc] = '\0';
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <takeWifiSSID+0x2a0>)
 80011ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ae:	4413      	add	r3, r2
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80011b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	3306      	adds	r3, #6
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4619      	mov	r1, r3
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff fb30 	bl	8000824 <lcd_delete_char>
        		HAL_Delay(50);
 80011c4:	2032      	movs	r0, #50	; 0x32
 80011c6:	f007 ff73 	bl	80090b0 <HAL_Delay>
        		if(writeLoc > 7) {
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	dd0d      	ble.n	80011ec <takeWifiSSID+0x2b4>
        			writeLoc--;
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	3b01      	subs	r3, #1
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d6:	e00e      	b.n	80011f6 <takeWifiSSID+0x2be>
 80011d8:	20000bf0 	.word	0x20000bf0
 80011dc:	20000944 	.word	0x20000944
 80011e0:	20000948 	.word	0x20000948
 80011e4:	40010800 	.word	0x40010800
 80011e8:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	dc01      	bgt.n	80011f6 <takeWifiSSID+0x2be>
        			writeLoc = 7;
 80011f2:	2307      	movs	r3, #7
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        		}

        		if(wifiNameLoc > 0) {
 80011f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dd03      	ble.n	8001204 <takeWifiSSID+0x2cc>
        			wifiNameLoc--;
 80011fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fe:	3b01      	subs	r3, #1
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
 8001202:	e004      	b.n	800120e <takeWifiSSID+0x2d6>
        		} else if(wifiNameLoc < 0) {
 8001204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001206:	2b00      	cmp	r3, #0
 8001208:	da01      	bge.n	800120e <takeWifiSSID+0x2d6>
        			wifiNameLoc = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
        		}
        	}

        	HAL_Delay(250);
 800120e:	20fa      	movs	r0, #250	; 0xfa
 8001210:	f007 ff4e 	bl	80090b0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <takeWifiSSID+0x2f4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff faac 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001222:	e6a8      	b.n	8000f76 <takeWifiSSID+0x3e>
    }
}
 8001224:	bf00      	nop
 8001226:	3738      	adds	r7, #56	; 0x38
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000944 	.word	0x20000944

08001230 <takeWifiPass>:

void takeWifiPass(int state) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    lcd_cursor(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff fb1b 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d104      	bne.n	800124e <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001244:	2221      	movs	r2, #33	; 0x21
 8001246:	2100      	movs	r1, #0
 8001248:	48a1      	ldr	r0, [pc, #644]	; (80014d0 <takeWifiPass+0x2a0>)
 800124a:	f00b fe45 	bl	800ced8 <memset>
    }

    int realCharPos = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 8001252:	4ba0      	ldr	r3, [pc, #640]	; (80014d4 <takeWifiPass+0x2a4>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
    page = 1;
 8001258:	4b9f      	ldr	r3, [pc, #636]	; (80014d8 <takeWifiPass+0x2a8>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 8001262:	2307      	movs	r3, #7
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(3, 1);
 8001266:	2101      	movs	r1, #1
 8001268:	2003      	movs	r0, #3
 800126a:	f7ff fb49 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800126e:	2108      	movs	r1, #8
 8001270:	489a      	ldr	r0, [pc, #616]	; (80014dc <takeWifiPass+0x2ac>)
 8001272:	f008 fced 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b01      	cmp	r3, #1
 800127a:	d103      	bne.n	8001284 <takeWifiPass+0x54>
            lcd_cursor(0);
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff faf9 	bl	8000874 <lcd_cursor>

            break;
 8001282:	e14b      	b.n	800151c <takeWifiPass+0x2ec>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001284:	2101      	movs	r1, #1
 8001286:	4895      	ldr	r0, [pc, #596]	; (80014dc <takeWifiPass+0x2ac>)
 8001288:	f008 fce2 	bl	8009c50 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d166      	bne.n	8001360 <takeWifiPass+0x130>
        	realCharPos++;
 8001292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001294:	3301      	adds	r3, #1
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	2b50      	cmp	r3, #80	; 0x50
 800129c:	dd01      	ble.n	80012a2 <takeWifiPass+0x72>
        	    realCharPos = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 80012a2:	4b8c      	ldr	r3, [pc, #560]	; (80014d4 <takeWifiPass+0x2a4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d152      	bne.n	8001350 <takeWifiPass+0x120>
            	if(page == 1) {
 80012aa:	4b8b      	ldr	r3, [pc, #556]	; (80014d8 <takeWifiPass+0x2a8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d10c      	bne.n	80012cc <takeWifiPass+0x9c>
            		cursorPosition = 1;
 80012b2:	4b88      	ldr	r3, [pc, #544]	; (80014d4 <takeWifiPass+0x2a4>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
            		page++;
 80012b8:	4b87      	ldr	r3, [pc, #540]	; (80014d8 <takeWifiPass+0x2a8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a86      	ldr	r2, [pc, #536]	; (80014d8 <takeWifiPass+0x2a8>)
 80012c0:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80012c2:	2102      	movs	r1, #2
 80012c4:	2003      	movs	r0, #3
 80012c6:	f7ff fb1b 	bl	8000900 <printTemplate>
 80012ca:	e046      	b.n	800135a <takeWifiPass+0x12a>
            	} else if(page == 2) {
 80012cc:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <takeWifiPass+0x2a8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d10c      	bne.n	80012ee <takeWifiPass+0xbe>
            		cursorPosition = 1;
 80012d4:	4b7f      	ldr	r3, [pc, #508]	; (80014d4 <takeWifiPass+0x2a4>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
            		page++;
 80012da:	4b7f      	ldr	r3, [pc, #508]	; (80014d8 <takeWifiPass+0x2a8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a7d      	ldr	r2, [pc, #500]	; (80014d8 <takeWifiPass+0x2a8>)
 80012e2:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80012e4:	2103      	movs	r1, #3
 80012e6:	2003      	movs	r0, #3
 80012e8:	f7ff fb0a 	bl	8000900 <printTemplate>
 80012ec:	e035      	b.n	800135a <takeWifiPass+0x12a>
            	} else if(page == 3) {
 80012ee:	4b7a      	ldr	r3, [pc, #488]	; (80014d8 <takeWifiPass+0x2a8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d10c      	bne.n	8001310 <takeWifiPass+0xe0>
            		cursorPosition = 1;
 80012f6:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <takeWifiPass+0x2a4>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
            		page++;
 80012fc:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <takeWifiPass+0x2a8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a75      	ldr	r2, [pc, #468]	; (80014d8 <takeWifiPass+0x2a8>)
 8001304:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001306:	2104      	movs	r1, #4
 8001308:	2003      	movs	r0, #3
 800130a:	f7ff faf9 	bl	8000900 <printTemplate>
 800130e:	e024      	b.n	800135a <takeWifiPass+0x12a>
            	} else if(page == 4) {
 8001310:	4b71      	ldr	r3, [pc, #452]	; (80014d8 <takeWifiPass+0x2a8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d10c      	bne.n	8001332 <takeWifiPass+0x102>
            		cursorPosition = 1;
 8001318:	4b6e      	ldr	r3, [pc, #440]	; (80014d4 <takeWifiPass+0x2a4>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]
            		page++;
 800131e:	4b6e      	ldr	r3, [pc, #440]	; (80014d8 <takeWifiPass+0x2a8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a6c      	ldr	r2, [pc, #432]	; (80014d8 <takeWifiPass+0x2a8>)
 8001326:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001328:	2105      	movs	r1, #5
 800132a:	2003      	movs	r0, #3
 800132c:	f7ff fae8 	bl	8000900 <printTemplate>
 8001330:	e013      	b.n	800135a <takeWifiPass+0x12a>
            	} else if(page == 5) {
 8001332:	4b69      	ldr	r3, [pc, #420]	; (80014d8 <takeWifiPass+0x2a8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b05      	cmp	r3, #5
 8001338:	d10f      	bne.n	800135a <takeWifiPass+0x12a>
            		cursorPosition = 1;
 800133a:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <takeWifiPass+0x2a4>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001340:	4b65      	ldr	r3, [pc, #404]	; (80014d8 <takeWifiPass+0x2a8>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001346:	2101      	movs	r1, #1
 8001348:	2003      	movs	r0, #3
 800134a:	f7ff fad9 	bl	8000900 <printTemplate>
 800134e:	e004      	b.n	800135a <takeWifiPass+0x12a>
            	}
            } else {
            	cursorPosition++;
 8001350:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <takeWifiPass+0x2a4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <takeWifiPass+0x2a4>)
 8001358:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800135a:	20fa      	movs	r0, #250	; 0xfa
 800135c:	f007 fea8 	bl	80090b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001360:	2108      	movs	r1, #8
 8001362:	485f      	ldr	r0, [pc, #380]	; (80014e0 <takeWifiPass+0x2b0>)
 8001364:	f008 fc74 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d15e      	bne.n	800142c <takeWifiPass+0x1fc>
        	realCharPos--;
 800136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001370:	3b01      	subs	r3, #1
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 8001374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001376:	2b00      	cmp	r3, #0
 8001378:	dc01      	bgt.n	800137e <takeWifiPass+0x14e>
        	    realCharPos = 80;
 800137a:	2350      	movs	r3, #80	; 0x50
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 800137e:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <takeWifiPass+0x2a4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d14a      	bne.n	800141c <takeWifiPass+0x1ec>
            	if(page == 1) {
 8001386:	4b54      	ldr	r3, [pc, #336]	; (80014d8 <takeWifiPass+0x2a8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10a      	bne.n	80013a4 <takeWifiPass+0x174>
            		cursorPosition = 16;
 800138e:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <takeWifiPass+0x2a4>)
 8001390:	2210      	movs	r2, #16
 8001392:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001394:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <takeWifiPass+0x2a8>)
 8001396:	2205      	movs	r2, #5
 8001398:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800139a:	2105      	movs	r1, #5
 800139c:	2003      	movs	r0, #3
 800139e:	f7ff faaf 	bl	8000900 <printTemplate>
 80013a2:	e040      	b.n	8001426 <takeWifiPass+0x1f6>
            	} else if(page == 2) {
 80013a4:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <takeWifiPass+0x2a8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d10a      	bne.n	80013c2 <takeWifiPass+0x192>
            		cursorPosition = 16;
 80013ac:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <takeWifiPass+0x2a4>)
 80013ae:	2210      	movs	r2, #16
 80013b0:	601a      	str	r2, [r3, #0]
            		page = 1;
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <takeWifiPass+0x2a8>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80013b8:	2101      	movs	r1, #1
 80013ba:	2003      	movs	r0, #3
 80013bc:	f7ff faa0 	bl	8000900 <printTemplate>
 80013c0:	e031      	b.n	8001426 <takeWifiPass+0x1f6>
            	} else if(page == 3) {
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <takeWifiPass+0x2a8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d10a      	bne.n	80013e0 <takeWifiPass+0x1b0>
            		cursorPosition = 16;
 80013ca:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <takeWifiPass+0x2a4>)
 80013cc:	2210      	movs	r2, #16
 80013ce:	601a      	str	r2, [r3, #0]
            		page = 2;
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <takeWifiPass+0x2a8>)
 80013d2:	2202      	movs	r2, #2
 80013d4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80013d6:	2102      	movs	r1, #2
 80013d8:	2003      	movs	r0, #3
 80013da:	f7ff fa91 	bl	8000900 <printTemplate>
 80013de:	e022      	b.n	8001426 <takeWifiPass+0x1f6>
            	} else if(page == 4) {
 80013e0:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <takeWifiPass+0x2a8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d10a      	bne.n	80013fe <takeWifiPass+0x1ce>
            		cursorPosition = 16;
 80013e8:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <takeWifiPass+0x2a4>)
 80013ea:	2210      	movs	r2, #16
 80013ec:	601a      	str	r2, [r3, #0]
            		page = 3;
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <takeWifiPass+0x2a8>)
 80013f0:	2203      	movs	r2, #3
 80013f2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80013f4:	2103      	movs	r1, #3
 80013f6:	2003      	movs	r0, #3
 80013f8:	f7ff fa82 	bl	8000900 <printTemplate>
 80013fc:	e013      	b.n	8001426 <takeWifiPass+0x1f6>
            	} else if(page == 5) {
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <takeWifiPass+0x2a8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d10f      	bne.n	8001426 <takeWifiPass+0x1f6>
            		cursorPosition = 16;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <takeWifiPass+0x2a4>)
 8001408:	2210      	movs	r2, #16
 800140a:	601a      	str	r2, [r3, #0]
            		page = 4;
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <takeWifiPass+0x2a8>)
 800140e:	2204      	movs	r2, #4
 8001410:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 8001412:	2104      	movs	r1, #4
 8001414:	2003      	movs	r0, #3
 8001416:	f7ff fa73 	bl	8000900 <printTemplate>
 800141a:	e004      	b.n	8001426 <takeWifiPass+0x1f6>
            	}
            } else {
            	cursorPosition--;
 800141c:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <takeWifiPass+0x2a4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	4a2c      	ldr	r2, [pc, #176]	; (80014d4 <takeWifiPass+0x2a4>)
 8001424:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001426:	20fa      	movs	r0, #250	; 0xfa
 8001428:	f007 fe42 	bl	80090b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800142c:	2102      	movs	r1, #2
 800142e:	482b      	ldr	r0, [pc, #172]	; (80014dc <takeWifiPass+0x2ac>)
 8001430:	f008 fc0e 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d128      	bne.n	800148c <takeWifiPass+0x25c>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143c:	3b01      	subs	r3, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc56 	bl	8000cf0 <getCharFromCursorPosition>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <takeWifiPass+0x2a0>)
 800144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144c:	4413      	add	r3, r2
 800144e:	460a      	mov	r2, r1
 8001450:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	b2d9      	uxtb	r1, r3
 8001456:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <takeWifiPass+0x2a0>)
 8001458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff f9be 	bl	80007e2 <lcd_print_char>

            realCharPosLoc[wifiPassLoc] = realCharPos-1;
 8001466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001468:	b2db      	uxtb	r3, r3
 800146a:	3b01      	subs	r3, #1
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	f107 0208 	add.w	r2, r7, #8
 8001472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001474:	4413      	add	r3, r2
 8001476:	460a      	mov	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	3301      	adds	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiPassLoc++;
 8001480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001482:	3301      	adds	r3, #1
 8001484:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 8001486:	20fa      	movs	r0, #250	; 0xfa
 8001488:	f007 fe12 	bl	80090b0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800148c:	2104      	movs	r1, #4
 800148e:	4813      	ldr	r0, [pc, #76]	; (80014dc <takeWifiPass+0x2ac>)
 8001490:	f008 fbde 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d138      	bne.n	800150c <takeWifiPass+0x2dc>
            if(strlen(wifiPass) >= 1) {
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <takeWifiPass+0x2a0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d031      	beq.n	8001506 <takeWifiPass+0x2d6>
            	wifiPass[wifiPassLoc] = '\0';
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <takeWifiPass+0x2a0>)
 80014a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a6:	4413      	add	r3, r2
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	3306      	adds	r3, #6
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff f9b4 	bl	8000824 <lcd_delete_char>
            	HAL_Delay(50);
 80014bc:	2032      	movs	r0, #50	; 0x32
 80014be:	f007 fdf7 	bl	80090b0 <HAL_Delay>

            	if(writeLoc > 7) {
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	2b07      	cmp	r3, #7
 80014c6:	dd0d      	ble.n	80014e4 <takeWifiPass+0x2b4>
            		writeLoc--;
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	3b01      	subs	r3, #1
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ce:	e00e      	b.n	80014ee <takeWifiPass+0x2be>
 80014d0:	20000c14 	.word	0x20000c14
 80014d4:	20000944 	.word	0x20000944
 80014d8:	20000948 	.word	0x20000948
 80014dc:	40010800 	.word	0x40010800
 80014e0:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	dc01      	bgt.n	80014ee <takeWifiPass+0x2be>
            		writeLoc = 7;
 80014ea:	2307      	movs	r3, #7
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
            	}

            	if(wifiPassLoc > 0) {
 80014ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	dd03      	ble.n	80014fc <takeWifiPass+0x2cc>
            		wifiPassLoc--;
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	3b01      	subs	r3, #1
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
 80014fa:	e004      	b.n	8001506 <takeWifiPass+0x2d6>
            	} else if(wifiPassLoc < 0) {
 80014fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da01      	bge.n	8001506 <takeWifiPass+0x2d6>
            		wifiPassLoc = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
            	}
            }

            HAL_Delay(250);
 8001506:	20fa      	movs	r0, #250	; 0xfa
 8001508:	f007 fdd2 	bl	80090b0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <takeWifiPass+0x2f4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	2002      	movs	r0, #2
 8001516:	f7ff f930 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800151a:	e6a8      	b.n	800126e <takeWifiPass+0x3e>
    }
}
 800151c:	bf00      	nop
 800151e:	3738      	adds	r7, #56	; 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000944 	.word	0x20000944

08001528 <slideText>:

void slideText(const char* text, int startPos, int startLine) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	lcd_gotoxy(startLine, startPos);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f91b 	bl	800077a <lcd_gotoxy>

	//lcd_clear_line(startLine);

	for(int z=0; z < strlen(text); z++) {
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e023      	b.n	8001592 <slideText+0x6a>
		for(int i=startPos + z; i < strlen(text); i++) {
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	4413      	add	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	e014      	b.n	800157e <slideText+0x56>
			lcd_print_char(startLine, i-z, text[i]);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	b2d8      	uxtb	r0, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	b2d9      	uxtb	r1, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4413      	add	r3, r2
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	f7ff f938 	bl	80007e2 <lcd_print_char>
			HAL_Delay(50);
 8001572:	2032      	movs	r0, #50	; 0x32
 8001574:	f007 fd9c 	bl	80090b0 <HAL_Delay>
		for(int i=startPos + z; i < strlen(text); i++) {
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	3301      	adds	r3, #1
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f7fe fe50 	bl	8000224 <strlen>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d8e3      	bhi.n	8001554 <slideText+0x2c>
	for(int z=0; z < strlen(text); z++) {
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7fe fe46 	bl	8000224 <strlen>
 8001598:	4602      	mov	r2, r0
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8d4      	bhi.n	800154a <slideText+0x22>
		}
	}
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <menu>:

void menu(I2C_HandleTypeDef *hi2c1) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015b4:	2101      	movs	r1, #1
 80015b6:	488f      	ldr	r0, [pc, #572]	; (80017f4 <menu+0x248>)
 80015b8:	f008 fb4a 	bl	8009c50 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b01      	cmp	r3, #1
 80015c0:	f040 808e 	bne.w	80016e0 <menu+0x134>
 80015c4:	4b8c      	ldr	r3, [pc, #560]	; (80017f8 <menu+0x24c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f083 0301 	eor.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8086 	beq.w	80016e0 <menu+0x134>
		menuSayac = menuSayac+1;
 80015d4:	4b89      	ldr	r3, [pc, #548]	; (80017fc <menu+0x250>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b87      	ldr	r3, [pc, #540]	; (80017fc <menu+0x250>)
 80015de:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015e0:	4b86      	ldr	r3, [pc, #536]	; (80017fc <menu+0x250>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b24      	cmp	r3, #36	; 0x24
 80015e6:	d102      	bne.n	80015ee <menu+0x42>
			menuSayac = 1;
 80015e8:	4b84      	ldr	r3, [pc, #528]	; (80017fc <menu+0x250>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015ee:	4b83      	ldr	r3, [pc, #524]	; (80017fc <menu+0x250>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d106      	bne.n	8001604 <menu+0x58>
 80015f6:	4b82      	ldr	r3, [pc, #520]	; (8001800 <menu+0x254>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <menu+0x58>
			menuSayac = 21;
 80015fe:	4b7f      	ldr	r3, [pc, #508]	; (80017fc <menu+0x250>)
 8001600:	2215      	movs	r2, #21
 8001602:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001604:	4b7d      	ldr	r3, [pc, #500]	; (80017fc <menu+0x250>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b08      	cmp	r3, #8
 800160a:	d106      	bne.n	800161a <menu+0x6e>
 800160c:	4b7d      	ldr	r3, [pc, #500]	; (8001804 <menu+0x258>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <menu+0x6e>
			menuSayac = 16;
 8001614:	4b79      	ldr	r3, [pc, #484]	; (80017fc <menu+0x250>)
 8001616:	2210      	movs	r2, #16
 8001618:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800161a:	4b78      	ldr	r3, [pc, #480]	; (80017fc <menu+0x250>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b0d      	cmp	r3, #13
 8001620:	d106      	bne.n	8001630 <menu+0x84>
 8001622:	4b78      	ldr	r3, [pc, #480]	; (8001804 <menu+0x258>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d102      	bne.n	8001630 <menu+0x84>
			menuSayac = 16;
 800162a:	4b74      	ldr	r3, [pc, #464]	; (80017fc <menu+0x250>)
 800162c:	2210      	movs	r2, #16
 800162e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001630:	4b72      	ldr	r3, [pc, #456]	; (80017fc <menu+0x250>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b09      	cmp	r3, #9
 8001636:	d106      	bne.n	8001646 <menu+0x9a>
 8001638:	4b72      	ldr	r3, [pc, #456]	; (8001804 <menu+0x258>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d102      	bne.n	8001646 <menu+0x9a>
			menuSayac = 13;
 8001640:	4b6e      	ldr	r3, [pc, #440]	; (80017fc <menu+0x250>)
 8001642:	220d      	movs	r2, #13
 8001644:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001646:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <menu+0x250>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b0a      	cmp	r3, #10
 800164c:	d10a      	bne.n	8001664 <menu+0xb8>
 800164e:	4b6e      	ldr	r3, [pc, #440]	; (8001808 <menu+0x25c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d003      	beq.n	800165e <menu+0xb2>
 8001656:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <menu+0x25c>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d102      	bne.n	8001664 <menu+0xb8>
			menuSayac = 11;
 800165e:	4b67      	ldr	r3, [pc, #412]	; (80017fc <menu+0x250>)
 8001660:	220b      	movs	r2, #11
 8001662:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001664:	4b65      	ldr	r3, [pc, #404]	; (80017fc <menu+0x250>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d10e      	bne.n	800168a <menu+0xde>
 800166c:	4b67      	ldr	r3, [pc, #412]	; (800180c <menu+0x260>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d003      	beq.n	800167c <menu+0xd0>
 8001674:	4b65      	ldr	r3, [pc, #404]	; (800180c <menu+0x260>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d106      	bne.n	800168a <menu+0xde>
 800167c:	4b61      	ldr	r3, [pc, #388]	; (8001804 <menu+0x258>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d102      	bne.n	800168a <menu+0xde>
			menuSayac = 16;
 8001684:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <menu+0x250>)
 8001686:	2210      	movs	r2, #16
 8001688:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800168a:	4b5c      	ldr	r3, [pc, #368]	; (80017fc <menu+0x250>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d10e      	bne.n	80016b0 <menu+0x104>
 8001692:	4b5e      	ldr	r3, [pc, #376]	; (800180c <menu+0x260>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d003      	beq.n	80016a2 <menu+0xf6>
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <menu+0x260>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d106      	bne.n	80016b0 <menu+0x104>
 80016a2:	4b58      	ldr	r3, [pc, #352]	; (8001804 <menu+0x258>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d102      	bne.n	80016b0 <menu+0x104>
			menuSayac = 13;
 80016aa:	4b54      	ldr	r3, [pc, #336]	; (80017fc <menu+0x250>)
 80016ac:	220d      	movs	r2, #13
 80016ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016b0:	4b52      	ldr	r3, [pc, #328]	; (80017fc <menu+0x250>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d106      	bne.n	80016c6 <menu+0x11a>
 80016b8:	4b55      	ldr	r3, [pc, #340]	; (8001810 <menu+0x264>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <menu+0x11a>
			menuSayac = 16;
 80016c0:	4b4e      	ldr	r3, [pc, #312]	; (80017fc <menu+0x250>)
 80016c2:	2210      	movs	r2, #16
 80016c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016c6:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <menu+0x250>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b18      	cmp	r3, #24
 80016cc:	d106      	bne.n	80016dc <menu+0x130>
 80016ce:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <menu+0x254>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <menu+0x130>
			menuSayac = 26;
 80016d6:	4b49      	ldr	r3, [pc, #292]	; (80017fc <menu+0x250>)
 80016d8:	221a      	movs	r2, #26
 80016da:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016dc:	f004 fcdc 	bl	8006098 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016e0:	2108      	movs	r1, #8
 80016e2:	484c      	ldr	r0, [pc, #304]	; (8001814 <menu+0x268>)
 80016e4:	f008 fab4 	bl	8009c50 <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d175      	bne.n	80017da <menu+0x22e>
 80016ee:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <menu+0x24c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f083 0301 	eor.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d06e      	beq.n	80017da <menu+0x22e>
		if (menuSayac <= 1) {
 80016fc:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <menu+0x250>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d802      	bhi.n	800170a <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001704:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <menu+0x250>)
 8001706:	2224      	movs	r2, #36	; 0x24
 8001708:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <menu+0x250>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	3b01      	subs	r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <menu+0x250>)
 8001714:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <menu+0x250>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b14      	cmp	r3, #20
 800171c:	d106      	bne.n	800172c <menu+0x180>
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <menu+0x254>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <menu+0x180>
			menuSayac = 17;
 8001726:	4b35      	ldr	r3, [pc, #212]	; (80017fc <menu+0x250>)
 8001728:	2211      	movs	r2, #17
 800172a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800172c:	4b33      	ldr	r3, [pc, #204]	; (80017fc <menu+0x250>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d106      	bne.n	8001742 <menu+0x196>
 8001734:	4b33      	ldr	r3, [pc, #204]	; (8001804 <menu+0x258>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <menu+0x196>
			menuSayac = 7;
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <menu+0x250>)
 800173e:	2207      	movs	r2, #7
 8001740:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <menu+0x250>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	d106      	bne.n	8001758 <menu+0x1ac>
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <menu+0x258>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d102      	bne.n	8001758 <menu+0x1ac>
			menuSayac = 12;
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <menu+0x250>)
 8001754:	220c      	movs	r2, #12
 8001756:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <menu+0x250>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d106      	bne.n	800176e <menu+0x1c2>
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <menu+0x258>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d102      	bne.n	800176e <menu+0x1c2>
			menuSayac = 8;
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <menu+0x250>)
 800176a:	2208      	movs	r2, #8
 800176c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <menu+0x250>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b0a      	cmp	r3, #10
 8001774:	d10a      	bne.n	800178c <menu+0x1e0>
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <menu+0x25c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d003      	beq.n	8001786 <menu+0x1da>
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <menu+0x25c>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d102      	bne.n	800178c <menu+0x1e0>
			menuSayac = 9;
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <menu+0x250>)
 8001788:	2209      	movs	r2, #9
 800178a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <menu+0x250>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d10a      	bne.n	80017aa <menu+0x1fe>
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <menu+0x260>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d003      	beq.n	80017a4 <menu+0x1f8>
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <menu+0x260>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d102      	bne.n	80017aa <menu+0x1fe>
			menuSayac = 11;
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <menu+0x250>)
 80017a6:	220b      	movs	r2, #11
 80017a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <menu+0x250>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	d106      	bne.n	80017c0 <menu+0x214>
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <menu+0x264>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d102      	bne.n	80017c0 <menu+0x214>
			menuSayac = 14;
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <menu+0x250>)
 80017bc:	220e      	movs	r2, #14
 80017be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <menu+0x250>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b19      	cmp	r3, #25
 80017c6:	d106      	bne.n	80017d6 <menu+0x22a>
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <menu+0x254>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <menu+0x22a>
			menuSayac = 23;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <menu+0x250>)
 80017d2:	2217      	movs	r2, #23
 80017d4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017d6:	f004 fc5f 	bl	8006098 <bekle>
	}

	if (menuSayac == 0) {
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <menu+0x250>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d134      	bne.n	800184c <menu+0x2a0>
		if(dilSecim == 0) {
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <menu+0x26c>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d122      	bne.n	8001830 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <menu+0x270>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	2001      	movs	r0, #1
 80017f0:	e016      	b.n	8001820 <menu+0x274>
 80017f2:	bf00      	nop
 80017f4:	40010800 	.word	0x40010800
 80017f8:	20000c68 	.word	0x20000c68
 80017fc:	20000c39 	.word	0x20000c39
 8001800:	20000c48 	.word	0x20000c48
 8001804:	20000c41 	.word	0x20000c41
 8001808:	20000c42 	.word	0x20000c42
 800180c:	20000c43 	.word	0x20000c43
 8001810:	20000c44 	.word	0x20000c44
 8001814:	40011000 	.word	0x40011000
 8001818:	20000c5a 	.word	0x20000c5a
 800181c:	0800d8e0 	.word	0x0800d8e0
 8001820:	f7fe ffca 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001824:	4a94      	ldr	r2, [pc, #592]	; (8001a78 <menu+0x4cc>)
 8001826:	2101      	movs	r1, #1
 8001828:	2002      	movs	r0, #2
 800182a:	f7fe ffc5 	bl	80007b8 <lcd_print>
 800182e:	e00d      	b.n	800184c <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 8001830:	4b92      	ldr	r3, [pc, #584]	; (8001a7c <menu+0x4d0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d109      	bne.n	800184c <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001838:	4a91      	ldr	r2, [pc, #580]	; (8001a80 <menu+0x4d4>)
 800183a:	2101      	movs	r1, #1
 800183c:	2001      	movs	r0, #1
 800183e:	f7fe ffbb 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001842:	4a90      	ldr	r2, [pc, #576]	; (8001a84 <menu+0x4d8>)
 8001844:	2101      	movs	r1, #1
 8001846:	2002      	movs	r0, #2
 8001848:	f7fe ffb6 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800184c:	4b8e      	ldr	r3, [pc, #568]	; (8001a88 <menu+0x4dc>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	f040 82b5 	bne.w	8001dc0 <menu+0x814>
		if(dilSecim == 0) {
 8001856:	4b89      	ldr	r3, [pc, #548]	; (8001a7c <menu+0x4d0>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800185e:	4a8b      	ldr	r2, [pc, #556]	; (8001a8c <menu+0x4e0>)
 8001860:	2101      	movs	r1, #1
 8001862:	2001      	movs	r0, #1
 8001864:	f7fe ffa8 	bl	80007b8 <lcd_print>
 8001868:	e008      	b.n	800187c <menu+0x2d0>
		} else if(dilSecim == 1) {
 800186a:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <menu+0x4d0>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d104      	bne.n	800187c <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001872:	4a87      	ldr	r2, [pc, #540]	; (8001a90 <menu+0x4e4>)
 8001874:	2101      	movs	r1, #1
 8001876:	2001      	movs	r0, #1
 8001878:	f7fe ff9e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800187c:	4b85      	ldr	r3, [pc, #532]	; (8001a94 <menu+0x4e8>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d123      	bne.n	80018cc <menu+0x320>
			if(dilSecim == 0) {
 8001884:	4b7d      	ldr	r3, [pc, #500]	; (8001a7c <menu+0x4d0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800188c:	4a82      	ldr	r2, [pc, #520]	; (8001a98 <menu+0x4ec>)
 800188e:	2101      	movs	r1, #1
 8001890:	2002      	movs	r0, #2
 8001892:	f7fe ff91 	bl	80007b8 <lcd_print>
 8001896:	e008      	b.n	80018aa <menu+0x2fe>

			} else if(dilSecim == 1) {
 8001898:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <menu+0x4d0>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d104      	bne.n	80018aa <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 80018a0:	4a7e      	ldr	r2, [pc, #504]	; (8001a9c <menu+0x4f0>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	2002      	movs	r0, #2
 80018a6:	f7fe ff87 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80018aa:	4a7d      	ldr	r2, [pc, #500]	; (8001aa0 <menu+0x4f4>)
 80018ac:	210f      	movs	r1, #15
 80018ae:	2002      	movs	r0, #2
 80018b0:	f7fe ff82 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80018b4:	4b7b      	ldr	r3, [pc, #492]	; (8001aa4 <menu+0x4f8>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	220a      	movs	r2, #10
 80018ba:	497b      	ldr	r1, [pc, #492]	; (8001aa8 <menu+0x4fc>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f00b f9f3 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 80018c2:	4a79      	ldr	r2, [pc, #484]	; (8001aa8 <menu+0x4fc>)
 80018c4:	210e      	movs	r1, #14
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7fe ff76 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80018cc:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <menu+0x4e8>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d123      	bne.n	800191c <menu+0x370>
			if(dilSecim == 0) {
 80018d4:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <menu+0x4d0>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80018dc:	4a73      	ldr	r2, [pc, #460]	; (8001aac <menu+0x500>)
 80018de:	2101      	movs	r1, #1
 80018e0:	2002      	movs	r0, #2
 80018e2:	f7fe ff69 	bl	80007b8 <lcd_print>
 80018e6:	e008      	b.n	80018fa <menu+0x34e>
			} else if(dilSecim == 1) {
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <menu+0x4d0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d104      	bne.n	80018fa <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 80018f0:	4a6f      	ldr	r2, [pc, #444]	; (8001ab0 <menu+0x504>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	2002      	movs	r0, #2
 80018f6:	f7fe ff5f 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018fa:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <menu+0x508>)
 80018fc:	210f      	movs	r1, #15
 80018fe:	2002      	movs	r0, #2
 8001900:	f7fe ff5a 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <menu+0x50c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	220a      	movs	r2, #10
 800190a:	4967      	ldr	r1, [pc, #412]	; (8001aa8 <menu+0x4fc>)
 800190c:	4618      	mov	r0, r3
 800190e:	f00b f9cb 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 8001912:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <menu+0x4fc>)
 8001914:	210e      	movs	r1, #14
 8001916:	2002      	movs	r0, #2
 8001918:	f7fe ff4e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800191c:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <menu+0x4e8>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d123      	bne.n	800196c <menu+0x3c0>
			if(dilSecim == 0) {
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <menu+0x4d0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800192c:	4a63      	ldr	r2, [pc, #396]	; (8001abc <menu+0x510>)
 800192e:	2101      	movs	r1, #1
 8001930:	2002      	movs	r0, #2
 8001932:	f7fe ff41 	bl	80007b8 <lcd_print>
 8001936:	e008      	b.n	800194a <menu+0x39e>
			} else if(dilSecim == 1) {
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <menu+0x4d0>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d104      	bne.n	800194a <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 8001940:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <menu+0x514>)
 8001942:	2101      	movs	r1, #1
 8001944:	2002      	movs	r0, #2
 8001946:	f7fe ff37 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <menu+0x508>)
 800194c:	210f      	movs	r1, #15
 800194e:	2002      	movs	r0, #2
 8001950:	f7fe ff32 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001954:	4b5b      	ldr	r3, [pc, #364]	; (8001ac4 <menu+0x518>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	220a      	movs	r2, #10
 800195a:	4953      	ldr	r1, [pc, #332]	; (8001aa8 <menu+0x4fc>)
 800195c:	4618      	mov	r0, r3
 800195e:	f00b f9a3 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 8001962:	4a51      	ldr	r2, [pc, #324]	; (8001aa8 <menu+0x4fc>)
 8001964:	210e      	movs	r1, #14
 8001966:	2002      	movs	r0, #2
 8001968:	f7fe ff26 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800196c:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <menu+0x4e8>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d123      	bne.n	80019bc <menu+0x410>
			if(dilSecim == 0) {
 8001974:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <menu+0x4d0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <menu+0x51c>)
 800197e:	2101      	movs	r1, #1
 8001980:	2002      	movs	r0, #2
 8001982:	f7fe ff19 	bl	80007b8 <lcd_print>
 8001986:	e008      	b.n	800199a <menu+0x3ee>
			} else if(dilSecim == 1) {
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <menu+0x4d0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d104      	bne.n	800199a <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 8001990:	4a4e      	ldr	r2, [pc, #312]	; (8001acc <menu+0x520>)
 8001992:	2101      	movs	r1, #1
 8001994:	2002      	movs	r0, #2
 8001996:	f7fe ff0f 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800199a:	4a46      	ldr	r2, [pc, #280]	; (8001ab4 <menu+0x508>)
 800199c:	210f      	movs	r1, #15
 800199e:	2002      	movs	r0, #2
 80019a0:	f7fe ff0a 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <menu+0x524>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	220a      	movs	r2, #10
 80019aa:	493f      	ldr	r1, [pc, #252]	; (8001aa8 <menu+0x4fc>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00b f97b 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 80019b2:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <menu+0x4fc>)
 80019b4:	210e      	movs	r1, #14
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7fe fefe 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80019bc:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <menu+0x4e8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d123      	bne.n	8001a0c <menu+0x460>
			if(dilSecim == 0) {
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <menu+0x4d0>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80019cc:	4a41      	ldr	r2, [pc, #260]	; (8001ad4 <menu+0x528>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	2002      	movs	r0, #2
 80019d2:	f7fe fef1 	bl	80007b8 <lcd_print>
 80019d6:	e008      	b.n	80019ea <menu+0x43e>
			} else if(dilSecim == 1) {
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <menu+0x4d0>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d104      	bne.n	80019ea <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 80019e0:	4a3d      	ldr	r2, [pc, #244]	; (8001ad8 <menu+0x52c>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	2002      	movs	r0, #2
 80019e6:	f7fe fee7 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019ea:	4a32      	ldr	r2, [pc, #200]	; (8001ab4 <menu+0x508>)
 80019ec:	210f      	movs	r1, #15
 80019ee:	2002      	movs	r0, #2
 80019f0:	f7fe fee2 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80019f4:	4b39      	ldr	r3, [pc, #228]	; (8001adc <menu+0x530>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	220a      	movs	r2, #10
 80019fa:	492b      	ldr	r1, [pc, #172]	; (8001aa8 <menu+0x4fc>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00b f953 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 8001a02:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <menu+0x4fc>)
 8001a04:	210e      	movs	r1, #14
 8001a06:	2002      	movs	r0, #2
 8001a08:	f7fe fed6 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <menu+0x4e8>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d123      	bne.n	8001a5c <menu+0x4b0>
			if(dilSecim == 0) {
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <menu+0x4d0>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001a1c:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <menu+0x534>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7fe fec9 	bl	80007b8 <lcd_print>
 8001a26:	e008      	b.n	8001a3a <menu+0x48e>
			} else if(dilSecim == 1) {
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <menu+0x4d0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d104      	bne.n	8001a3a <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 8001a30:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <menu+0x538>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7fe febf 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <menu+0x508>)
 8001a3c:	210f      	movs	r1, #15
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f7fe feba 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <menu+0x53c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	220a      	movs	r2, #10
 8001a4a:	4917      	ldr	r1, [pc, #92]	; (8001aa8 <menu+0x4fc>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00b f92b 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <menu+0x4fc>)
 8001a54:	210e      	movs	r1, #14
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7fe feae 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <menu+0x4e8>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d15f      	bne.n	8001b24 <menu+0x578>
			if(dilSecim == 0) {
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <menu+0x4d0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d141      	bne.n	8001af0 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001a6c:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <menu+0x540>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2002      	movs	r0, #2
 8001a72:	f7fe fea1 	bl	80007b8 <lcd_print>
 8001a76:	e044      	b.n	8001b02 <menu+0x556>
 8001a78:	0800d8f4 	.word	0x0800d8f4
 8001a7c:	20000c5a 	.word	0x20000c5a
 8001a80:	0800d908 	.word	0x0800d908
 8001a84:	0800d91c 	.word	0x0800d91c
 8001a88:	20000c39 	.word	0x20000c39
 8001a8c:	0800d930 	.word	0x0800d930
 8001a90:	0800d944 	.word	0x0800d944
 8001a94:	20000c3b 	.word	0x20000c3b
 8001a98:	0800d958 	.word	0x0800d958
 8001a9c:	0800d968 	.word	0x0800d968
 8001aa0:	0800d978 	.word	0x0800d978
 8001aa4:	20000c5b 	.word	0x20000c5b
 8001aa8:	20000bbc 	.word	0x20000bbc
 8001aac:	0800d97c 	.word	0x0800d97c
 8001ab0:	0800d98c 	.word	0x0800d98c
 8001ab4:	0800d99c 	.word	0x0800d99c
 8001ab8:	20000c5c 	.word	0x20000c5c
 8001abc:	0800d9a0 	.word	0x0800d9a0
 8001ac0:	0800d9b0 	.word	0x0800d9b0
 8001ac4:	20000c5d 	.word	0x20000c5d
 8001ac8:	0800d9c0 	.word	0x0800d9c0
 8001acc:	0800d9d0 	.word	0x0800d9d0
 8001ad0:	20000c5e 	.word	0x20000c5e
 8001ad4:	0800d9e0 	.word	0x0800d9e0
 8001ad8:	0800d9f0 	.word	0x0800d9f0
 8001adc:	20000c5f 	.word	0x20000c5f
 8001ae0:	0800da00 	.word	0x0800da00
 8001ae4:	0800da10 	.word	0x0800da10
 8001ae8:	20000c60 	.word	0x20000c60
 8001aec:	0800da20 	.word	0x0800da20
			} else if(dilSecim == 1) {
 8001af0:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <menu+0x684>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d104      	bne.n	8001b02 <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <menu+0x688>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	2002      	movs	r0, #2
 8001afe:	f7fe fe5b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b02:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <menu+0x68c>)
 8001b04:	210f      	movs	r1, #15
 8001b06:	2002      	movs	r0, #2
 8001b08:	f7fe fe56 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <menu+0x690>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	220a      	movs	r2, #10
 8001b12:	494b      	ldr	r1, [pc, #300]	; (8001c40 <menu+0x694>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00b f8c7 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 8001b1a:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <menu+0x694>)
 8001b1c:	210e      	movs	r1, #14
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f7fe fe4a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001b24:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <menu+0x698>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b07      	cmp	r3, #7
 8001b2a:	d123      	bne.n	8001b74 <menu+0x5c8>
			if(dilSecim == 0) {
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <menu+0x684>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001b34:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <menu+0x69c>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7fe fe3d 	bl	80007b8 <lcd_print>
 8001b3e:	e008      	b.n	8001b52 <menu+0x5a6>
			} else if(dilSecim == 1) {
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <menu+0x684>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d104      	bne.n	8001b52 <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8001b48:	4a40      	ldr	r2, [pc, #256]	; (8001c4c <menu+0x6a0>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7fe fe33 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b52:	4a39      	ldr	r2, [pc, #228]	; (8001c38 <menu+0x68c>)
 8001b54:	210f      	movs	r1, #15
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7fe fe2e 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b5c:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <menu+0x6a4>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	220a      	movs	r2, #10
 8001b62:	4937      	ldr	r1, [pc, #220]	; (8001c40 <menu+0x694>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00b f89f 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 8001b6a:	4a35      	ldr	r2, [pc, #212]	; (8001c40 <menu+0x694>)
 8001b6c:	210e      	movs	r1, #14
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f7fe fe22 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <menu+0x698>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d123      	bne.n	8001bc4 <menu+0x618>
			if(dilSecim == 0) {
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <menu+0x684>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001b84:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <menu+0x6a8>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7fe fe15 	bl	80007b8 <lcd_print>
 8001b8e:	e008      	b.n	8001ba2 <menu+0x5f6>
			} else if(dilSecim == 1) {
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <menu+0x684>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d104      	bne.n	8001ba2 <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8001b98:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <menu+0x6ac>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f7fe fe0b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ba2:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <menu+0x68c>)
 8001ba4:	210f      	movs	r1, #15
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f7fe fe06 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <menu+0x6b0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	4923      	ldr	r1, [pc, #140]	; (8001c40 <menu+0x694>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00b f877 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <menu+0x694>)
 8001bbc:	210e      	movs	r1, #14
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7fe fdfa 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <menu+0x698>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	d123      	bne.n	8001c14 <menu+0x668>
			if(dilSecim == 0) {
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <menu+0x684>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <menu+0x6b4>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7fe fded 	bl	80007b8 <lcd_print>
 8001bde:	e008      	b.n	8001bf2 <menu+0x646>
			} else if(dilSecim == 1) {
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <menu+0x684>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d104      	bne.n	8001bf2 <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <menu+0x6b8>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	2002      	movs	r0, #2
 8001bee:	f7fe fde3 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <menu+0x6bc>)
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f7fe fdde 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <menu+0x6c0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	220a      	movs	r2, #10
 8001c02:	490f      	ldr	r1, [pc, #60]	; (8001c40 <menu+0x694>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00b f84f 	bl	800cca8 <itoa>
			lcd_print(2, 15, snum);
 8001c0a:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <menu+0x694>)
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7fe fdd2 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <menu+0x698>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b0a      	cmp	r3, #10
 8001c1a:	d134      	bne.n	8001c86 <menu+0x6da>
			if(dilSecim == 0) {
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <menu+0x684>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d127      	bne.n	8001c74 <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 8001c24:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <menu+0x6c4>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f7fe fdc5 	bl	80007b8 <lcd_print>
 8001c2e:	e02a      	b.n	8001c86 <menu+0x6da>
 8001c30:	20000c5a 	.word	0x20000c5a
 8001c34:	0800da30 	.word	0x0800da30
 8001c38:	0800d99c 	.word	0x0800d99c
 8001c3c:	20000c61 	.word	0x20000c61
 8001c40:	20000bbc 	.word	0x20000bbc
 8001c44:	20000c3b 	.word	0x20000c3b
 8001c48:	0800da40 	.word	0x0800da40
 8001c4c:	0800da50 	.word	0x0800da50
 8001c50:	20000c62 	.word	0x20000c62
 8001c54:	0800da60 	.word	0x0800da60
 8001c58:	0800da70 	.word	0x0800da70
 8001c5c:	20000c63 	.word	0x20000c63
 8001c60:	0800da80 	.word	0x0800da80
 8001c64:	0800da90 	.word	0x0800da90
 8001c68:	0800daa0 	.word	0x0800daa0
 8001c6c:	20000c64 	.word	0x20000c64
 8001c70:	0800daa4 	.word	0x0800daa4
			} else if(dilSecim == 1) {
 8001c74:	4b82      	ldr	r3, [pc, #520]	; (8001e80 <menu+0x8d4>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d104      	bne.n	8001c86 <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 8001c7c:	4a81      	ldr	r2, [pc, #516]	; (8001e84 <menu+0x8d8>)
 8001c7e:	2101      	movs	r1, #1
 8001c80:	2002      	movs	r0, #2
 8001c82:	f7fe fd99 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c86:	2102      	movs	r1, #2
 8001c88:	487f      	ldr	r0, [pc, #508]	; (8001e88 <menu+0x8dc>)
 8001c8a:	f007 ffe1 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d119      	bne.n	8001cc8 <menu+0x71c>
 8001c94:	4b7d      	ldr	r3, [pc, #500]	; (8001e8c <menu+0x8e0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	f083 0301 	eor.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <menu+0x71c>
 8001ca2:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <menu+0x8e4>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10e      	bne.n	8001cc8 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001caa:	4b7a      	ldr	r3, [pc, #488]	; (8001e94 <menu+0x8e8>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <menu+0x8e8>)
 8001cb4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001cb6:	4b77      	ldr	r3, [pc, #476]	; (8001e94 <menu+0x8e8>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b0a      	cmp	r3, #10
 8001cbc:	d902      	bls.n	8001cc4 <menu+0x718>
				hataGostermeSirasi = 0;
 8001cbe:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <menu+0x8e8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cc4:	f004 f9e8 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cc8:	2104      	movs	r1, #4
 8001cca:	486f      	ldr	r0, [pc, #444]	; (8001e88 <menu+0x8dc>)
 8001ccc:	f007 ffc0 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d119      	bne.n	8001d0a <menu+0x75e>
 8001cd6:	4b6d      	ldr	r3, [pc, #436]	; (8001e8c <menu+0x8e0>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f083 0301 	eor.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d012      	beq.n	8001d0a <menu+0x75e>
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <menu+0x8e4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10e      	bne.n	8001d0a <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001cec:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <menu+0x8e8>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <menu+0x8e8>)
 8001cf6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <menu+0x8e8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b0b      	cmp	r3, #11
 8001cfe:	d902      	bls.n	8001d06 <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8001d00:	4b64      	ldr	r3, [pc, #400]	; (8001e94 <menu+0x8e8>)
 8001d02:	220a      	movs	r2, #10
 8001d04:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d06:	f004 f9c7 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	485e      	ldr	r0, [pc, #376]	; (8001e88 <menu+0x8dc>)
 8001d0e:	f007 ff9f 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d153      	bne.n	8001dc0 <menu+0x814>
 8001d18:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <menu+0x8e0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d04c      	beq.n	8001dc0 <menu+0x814>
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <menu+0x8e8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b0a      	cmp	r3, #10
 8001d2c:	d148      	bne.n	8001dc0 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <menu+0x8ec>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <menu+0x8f0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001d3c:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <menu+0x8f4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <menu+0x8f0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001d4a:	4b56      	ldr	r3, [pc, #344]	; (8001ea4 <menu+0x8f8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	4b52      	ldr	r3, [pc, #328]	; (8001e9c <menu+0x8f0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001d58:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <menu+0x8fc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <menu+0x8f0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001d66:	4b51      	ldr	r3, [pc, #324]	; (8001eac <menu+0x900>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <menu+0x8f0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001d74:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <menu+0x904>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <menu+0x8f0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d82:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <menu+0x908>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <menu+0x8f0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001d90:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <menu+0x90c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <menu+0x8f0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <menu+0x910>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <menu+0x8f0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001dac:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <menu+0x914>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <menu+0x8f0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001dba:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <menu+0x918>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <menu+0x91c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	f040 80fc 	bne.w	8001fc2 <menu+0xa16>
		if(dilSecim == 0) {
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <menu+0x8d4>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001dd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <menu+0x920>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f7fe fcee 	bl	80007b8 <lcd_print>
 8001ddc:	e008      	b.n	8001df0 <menu+0x844>
		} else if(dilSecim == 1) {
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <menu+0x8d4>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d104      	bne.n	8001df0 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001de6:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <menu+0x924>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7fe fce4 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <menu+0x8e4>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d003      	beq.n	8001e00 <menu+0x854>
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <menu+0x8e4>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d112      	bne.n	8001e26 <menu+0x87a>
			if(dilSecim == 0) {
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <menu+0x8d4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001e08:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <menu+0x928>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f7fe fcd3 	bl	80007b8 <lcd_print>
 8001e12:	e008      	b.n	8001e26 <menu+0x87a>
			} else if(dilSecim == 1) {
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <menu+0x8d4>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d104      	bne.n	8001e26 <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001e1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ed8 <menu+0x92c>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2002      	movs	r0, #2
 8001e22:	f7fe fcc9 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <menu+0x930>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <menu+0x8b0>
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <menu+0x8e4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d112      	bne.n	8001e5c <menu+0x8b0>
			if(dilSecim == 0) {
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <menu+0x8d4>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <menu+0x934>)
 8001e40:	2101      	movs	r1, #1
 8001e42:	2002      	movs	r0, #2
 8001e44:	f7fe fcb8 	bl	80007b8 <lcd_print>
 8001e48:	e008      	b.n	8001e5c <menu+0x8b0>
			} else if(dilSecim == 1) {
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <menu+0x8d4>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d104      	bne.n	8001e5c <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 8001e52:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <menu+0x938>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	2002      	movs	r0, #2
 8001e58:	f7fe fcae 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <menu+0x930>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d14c      	bne.n	8001efe <menu+0x952>
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <menu+0x8e4>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d148      	bne.n	8001efe <menu+0x952>
			if(dilSecim == 0) {
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <menu+0x8d4>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d13b      	bne.n	8001eec <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <menu+0x93c>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f7fe fc9d 	bl	80007b8 <lcd_print>
 8001e7e:	e03e      	b.n	8001efe <menu+0x952>
 8001e80:	20000c5a 	.word	0x20000c5a
 8001e84:	0800dab8 	.word	0x0800dab8
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	20000c68 	.word	0x20000c68
 8001e90:	20000c48 	.word	0x20000c48
 8001e94:	20000c3b 	.word	0x20000c3b
 8001e98:	20000c5b 	.word	0x20000c5b
 8001e9c:	20000b28 	.word	0x20000b28
 8001ea0:	20000c5c 	.word	0x20000c5c
 8001ea4:	20000c5d 	.word	0x20000c5d
 8001ea8:	20000c5e 	.word	0x20000c5e
 8001eac:	20000c5f 	.word	0x20000c5f
 8001eb0:	20000c60 	.word	0x20000c60
 8001eb4:	20000c61 	.word	0x20000c61
 8001eb8:	20000c62 	.word	0x20000c62
 8001ebc:	20000c63 	.word	0x20000c63
 8001ec0:	20000c64 	.word	0x20000c64
 8001ec4:	20000c65 	.word	0x20000c65
 8001ec8:	20000c39 	.word	0x20000c39
 8001ecc:	0800dacc 	.word	0x0800dacc
 8001ed0:	0800dae0 	.word	0x0800dae0
 8001ed4:	0800daf4 	.word	0x0800daf4
 8001ed8:	0800db08 	.word	0x0800db08
 8001edc:	20000c3a 	.word	0x20000c3a
 8001ee0:	0800db1c 	.word	0x0800db1c
 8001ee4:	0800db2c 	.word	0x0800db2c
 8001ee8:	0800db3c 	.word	0x0800db3c
			} else if(dilSecim == 1) {
 8001eec:	4b98      	ldr	r3, [pc, #608]	; (8002150 <menu+0xba4>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d104      	bne.n	8001efe <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 8001ef4:	4a97      	ldr	r2, [pc, #604]	; (8002154 <menu+0xba8>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f7fe fc5d 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001efe:	2102      	movs	r1, #2
 8001f00:	4895      	ldr	r0, [pc, #596]	; (8002158 <menu+0xbac>)
 8001f02:	f007 fea5 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d119      	bne.n	8001f40 <menu+0x994>
 8001f0c:	4b93      	ldr	r3, [pc, #588]	; (800215c <menu+0xbb0>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d012      	beq.n	8001f40 <menu+0x994>
 8001f1a:	4b91      	ldr	r3, [pc, #580]	; (8002160 <menu+0xbb4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10e      	bne.n	8001f40 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 8001f22:	4b90      	ldr	r3, [pc, #576]	; (8002164 <menu+0xbb8>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <menu+0xbb8>)
 8001f2c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f2e:	4b8d      	ldr	r3, [pc, #564]	; (8002164 <menu+0xbb8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d902      	bls.n	8001f3c <menu+0x990>
				calismaSekli = 0;
 8001f36:	4b8b      	ldr	r3, [pc, #556]	; (8002164 <menu+0xbb8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f3c:	f004 f8ac 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f40:	2104      	movs	r1, #4
 8001f42:	4885      	ldr	r0, [pc, #532]	; (8002158 <menu+0xbac>)
 8001f44:	f007 fe84 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d119      	bne.n	8001f82 <menu+0x9d6>
 8001f4e:	4b83      	ldr	r3, [pc, #524]	; (800215c <menu+0xbb0>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d012      	beq.n	8001f82 <menu+0x9d6>
 8001f5c:	4b80      	ldr	r3, [pc, #512]	; (8002160 <menu+0xbb4>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10e      	bne.n	8001f82 <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 8001f64:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <menu+0xbb8>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <menu+0xbb8>)
 8001f6e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001f70:	4b7c      	ldr	r3, [pc, #496]	; (8002164 <menu+0xbb8>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <menu+0x9d2>
	    		calismaSekli = 1;
 8001f78:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <menu+0xbb8>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001f7e:	f004 f88b 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f82:	2108      	movs	r1, #8
 8001f84:	4874      	ldr	r0, [pc, #464]	; (8002158 <menu+0xbac>)
 8001f86:	f007 fe63 	bl	8009c50 <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d118      	bne.n	8001fc2 <menu+0xa16>
 8001f90:	4b72      	ldr	r3, [pc, #456]	; (800215c <menu+0xbb0>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	f083 0301 	eor.w	r3, r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d011      	beq.n	8001fc2 <menu+0xa16>
			eepromData[1] = calismaSekli;
 8001f9e:	4b71      	ldr	r3, [pc, #452]	; (8002164 <menu+0xbb8>)
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b71      	ldr	r3, [pc, #452]	; (8002168 <menu+0xbbc>)
 8001fa4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <menu+0xbb8>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d106      	bne.n	8001fbc <menu+0xa10>
				altLimit = 1;
 8001fae:	4b6f      	ldr	r3, [pc, #444]	; (800216c <menu+0xbc0>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	; (800216c <menu+0xbc0>)
 8001fb6:	781a      	ldrb	r2, [r3, #0]
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <menu+0xbbc>)
 8001fba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001fbc:	4b6c      	ldr	r3, [pc, #432]	; (8002170 <menu+0xbc4>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001fc2:	4b6c      	ldr	r3, [pc, #432]	; (8002174 <menu+0xbc8>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	f040 8083 	bne.w	80020d2 <menu+0xb26>
		if(dilSecim == 0) {
 8001fcc:	4b60      	ldr	r3, [pc, #384]	; (8002150 <menu+0xba4>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001fd4:	4a68      	ldr	r2, [pc, #416]	; (8002178 <menu+0xbcc>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7fe fbed 	bl	80007b8 <lcd_print>
 8001fde:	e008      	b.n	8001ff2 <menu+0xa46>
		} else if(dilSecim == 1) {
 8001fe0:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <menu+0xba4>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d104      	bne.n	8001ff2 <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001fe8:	4a64      	ldr	r2, [pc, #400]	; (800217c <menu+0xbd0>)
 8001fea:	2101      	movs	r1, #1
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7fe fbe3 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <menu+0xbd4>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d113      	bne.n	8002022 <menu+0xa76>
			if(dilSecim == 0) {
 8001ffa:	4b55      	ldr	r3, [pc, #340]	; (8002150 <menu+0xba4>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 8002002:	4a60      	ldr	r2, [pc, #384]	; (8002184 <menu+0xbd8>)
 8002004:	2101      	movs	r1, #1
 8002006:	2002      	movs	r0, #2
 8002008:	f7fe fbd6 	bl	80007b8 <lcd_print>
 800200c:	e012      	b.n	8002034 <menu+0xa88>
			} else if(dilSecim == 1) {
 800200e:	4b50      	ldr	r3, [pc, #320]	; (8002150 <menu+0xba4>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10e      	bne.n	8002034 <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 8002016:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <menu+0xbdc>)
 8002018:	2101      	movs	r1, #1
 800201a:	2002      	movs	r0, #2
 800201c:	f7fe fbcc 	bl	80007b8 <lcd_print>
 8002020:	e008      	b.n	8002034 <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 8002022:	4b57      	ldr	r3, [pc, #348]	; (8002180 <menu+0xbd4>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d104      	bne.n	8002034 <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <menu+0xbe0>)
 800202c:	2101      	movs	r1, #1
 800202e:	2002      	movs	r0, #2
 8002030:	f7fe fbc2 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002034:	2102      	movs	r1, #2
 8002036:	4848      	ldr	r0, [pc, #288]	; (8002158 <menu+0xbac>)
 8002038:	f007 fe0a 	bl	8009c50 <HAL_GPIO_ReadPin>
 800203c:	4603      	mov	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d115      	bne.n	800206e <menu+0xac2>
 8002042:	4b46      	ldr	r3, [pc, #280]	; (800215c <menu+0xbb0>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	f083 0301 	eor.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00e      	beq.n	800206e <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <menu+0xbd4>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <menu+0xbd4>)
 800205a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800205c:	4b48      	ldr	r3, [pc, #288]	; (8002180 <menu+0xbd4>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d902      	bls.n	800206a <menu+0xabe>
				emniyetCercevesi = 0;
 8002064:	4b46      	ldr	r3, [pc, #280]	; (8002180 <menu+0xbd4>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800206a:	f004 f815 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800206e:	2104      	movs	r1, #4
 8002070:	4839      	ldr	r0, [pc, #228]	; (8002158 <menu+0xbac>)
 8002072:	f007 fded 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002076:	4603      	mov	r3, r0
 8002078:	2b01      	cmp	r3, #1
 800207a:	d115      	bne.n	80020a8 <menu+0xafc>
 800207c:	4b37      	ldr	r3, [pc, #220]	; (800215c <menu+0xbb0>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	f083 0301 	eor.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00e      	beq.n	80020a8 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <menu+0xbd4>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	3b01      	subs	r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <menu+0xbd4>)
 8002094:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8002096:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <menu+0xbd4>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <menu+0xaf8>
		   		emniyetCercevesi = 1;
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <menu+0xbd4>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020a4:	f003 fff8 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80020a8:	2108      	movs	r1, #8
 80020aa:	482b      	ldr	r0, [pc, #172]	; (8002158 <menu+0xbac>)
 80020ac:	f007 fdd0 	bl	8009c50 <HAL_GPIO_ReadPin>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10d      	bne.n	80020d2 <menu+0xb26>
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <menu+0xbb0>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <menu+0xbd4>)
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <menu+0xbbc>)
 80020ca:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <menu+0xbc4>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <menu+0xbc8>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	f040 80ba 	bne.w	8002250 <menu+0xca4>
		if(dilSecim == 0) {
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <menu+0xba4>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80020e4:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <menu+0xbe4>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7fe fb65 	bl	80007b8 <lcd_print>
 80020ee:	e008      	b.n	8002102 <menu+0xb56>
		} else if(dilSecim == 1) {
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <menu+0xba4>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d104      	bne.n	8002102 <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80020f8:	4a26      	ldr	r2, [pc, #152]	; (8002194 <menu+0xbe8>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7fe fb5b 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <menu+0xbec>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d113      	bne.n	8002132 <menu+0xb86>
			if(dilSecim == 0) {
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <menu+0xba4>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <menu+0xbd8>)
 8002114:	2101      	movs	r1, #1
 8002116:	2002      	movs	r0, #2
 8002118:	f7fe fb4e 	bl	80007b8 <lcd_print>
 800211c:	e049      	b.n	80021b2 <menu+0xc06>
			} else if(dilSecim == 1) {
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <menu+0xba4>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d145      	bne.n	80021b2 <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 8002126:	4a18      	ldr	r2, [pc, #96]	; (8002188 <menu+0xbdc>)
 8002128:	2101      	movs	r1, #1
 800212a:	2002      	movs	r0, #2
 800212c:	f7fe fb44 	bl	80007b8 <lcd_print>
 8002130:	e03f      	b.n	80021b2 <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <menu+0xbec>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d13b      	bne.n	80021b2 <menu+0xc06>
			if(dilSecim == 0) {
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <menu+0xba4>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d12e      	bne.n	80021a0 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 8002142:	4a16      	ldr	r2, [pc, #88]	; (800219c <menu+0xbf0>)
 8002144:	2101      	movs	r1, #1
 8002146:	2002      	movs	r0, #2
 8002148:	f7fe fb36 	bl	80007b8 <lcd_print>
 800214c:	e031      	b.n	80021b2 <menu+0xc06>
 800214e:	bf00      	nop
 8002150:	20000c5a 	.word	0x20000c5a
 8002154:	0800db4c 	.word	0x0800db4c
 8002158:	40010800 	.word	0x40010800
 800215c:	20000c68 	.word	0x20000c68
 8002160:	20000c48 	.word	0x20000c48
 8002164:	20000c3a 	.word	0x20000c3a
 8002168:	20000b28 	.word	0x20000b28
 800216c:	20000c3f 	.word	0x20000c3f
 8002170:	20000c65 	.word	0x20000c65
 8002174:	20000c39 	.word	0x20000c39
 8002178:	0800db5c 	.word	0x0800db5c
 800217c:	0800db70 	.word	0x0800db70
 8002180:	20000c3d 	.word	0x20000c3d
 8002184:	0800db84 	.word	0x0800db84
 8002188:	0800db98 	.word	0x0800db98
 800218c:	0800dbac 	.word	0x0800dbac
 8002190:	0800dbbc 	.word	0x0800dbbc
 8002194:	0800dbd0 	.word	0x0800dbd0
 8002198:	20000c3e 	.word	0x20000c3e
 800219c:	0800dbe4 	.word	0x0800dbe4
			} else if(dilSecim == 1) {
 80021a0:	4b92      	ldr	r3, [pc, #584]	; (80023ec <menu+0xe40>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d104      	bne.n	80021b2 <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 80021a8:	4a91      	ldr	r2, [pc, #580]	; (80023f0 <menu+0xe44>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	2002      	movs	r0, #2
 80021ae:	f7fe fb03 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b2:	2102      	movs	r1, #2
 80021b4:	488f      	ldr	r0, [pc, #572]	; (80023f4 <menu+0xe48>)
 80021b6:	f007 fd4b 	bl	8009c50 <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d115      	bne.n	80021ec <menu+0xc40>
 80021c0:	4b8d      	ldr	r3, [pc, #564]	; (80023f8 <menu+0xe4c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f083 0301 	eor.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00e      	beq.n	80021ec <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <menu+0xe50>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b89      	ldr	r3, [pc, #548]	; (80023fc <menu+0xe50>)
 80021d8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <menu+0xe50>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d902      	bls.n	80021e8 <menu+0xc3c>
				yavaslamaLimit = 0;
 80021e2:	4b86      	ldr	r3, [pc, #536]	; (80023fc <menu+0xe50>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021e8:	f003 ff56 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ec:	2104      	movs	r1, #4
 80021ee:	4881      	ldr	r0, [pc, #516]	; (80023f4 <menu+0xe48>)
 80021f0:	f007 fd2e 	bl	8009c50 <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d115      	bne.n	8002226 <menu+0xc7a>
 80021fa:	4b7f      	ldr	r3, [pc, #508]	; (80023f8 <menu+0xe4c>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00e      	beq.n	8002226 <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002208:	4b7c      	ldr	r3, [pc, #496]	; (80023fc <menu+0xe50>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	3b01      	subs	r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b7a      	ldr	r3, [pc, #488]	; (80023fc <menu+0xe50>)
 8002212:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002214:	4b79      	ldr	r3, [pc, #484]	; (80023fc <menu+0xe50>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <menu+0xc76>
		   		yavaslamaLimit = 1;
 800221c:	4b77      	ldr	r3, [pc, #476]	; (80023fc <menu+0xe50>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002222:	f003 ff39 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002226:	2108      	movs	r1, #8
 8002228:	4872      	ldr	r0, [pc, #456]	; (80023f4 <menu+0xe48>)
 800222a:	f007 fd11 	bl	8009c50 <HAL_GPIO_ReadPin>
 800222e:	4603      	mov	r3, r0
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10d      	bne.n	8002250 <menu+0xca4>
 8002234:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <menu+0xe4c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 8002242:	4b6e      	ldr	r3, [pc, #440]	; (80023fc <menu+0xe50>)
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	4b6e      	ldr	r3, [pc, #440]	; (8002400 <menu+0xe54>)
 8002248:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800224a:	4b6e      	ldr	r3, [pc, #440]	; (8002404 <menu+0xe58>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002250:	4b6d      	ldr	r3, [pc, #436]	; (8002408 <menu+0xe5c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b05      	cmp	r3, #5
 8002256:	f040 80b9 	bne.w	80023cc <menu+0xe20>
		if(dilSecim == 0) {
 800225a:	4b64      	ldr	r3, [pc, #400]	; (80023ec <menu+0xe40>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d105      	bne.n	800226e <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002262:	4a6a      	ldr	r2, [pc, #424]	; (800240c <menu+0xe60>)
 8002264:	2101      	movs	r1, #1
 8002266:	2001      	movs	r0, #1
 8002268:	f7fe faa6 	bl	80007b8 <lcd_print>
 800226c:	e008      	b.n	8002280 <menu+0xcd4>
		} else if(dilSecim == 1) {
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <menu+0xe40>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d104      	bne.n	8002280 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002276:	4a66      	ldr	r2, [pc, #408]	; (8002410 <menu+0xe64>)
 8002278:	2101      	movs	r1, #1
 800227a:	2001      	movs	r0, #1
 800227c:	f7fe fa9c 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <menu+0xe68>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d113      	bne.n	80022b0 <menu+0xd04>
			if(dilSecim == 0) {
 8002288:	4b58      	ldr	r3, [pc, #352]	; (80023ec <menu+0xe40>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 8002290:	4a61      	ldr	r2, [pc, #388]	; (8002418 <menu+0xe6c>)
 8002292:	2101      	movs	r1, #1
 8002294:	2002      	movs	r0, #2
 8002296:	f7fe fa8f 	bl	80007b8 <lcd_print>
 800229a:	e020      	b.n	80022de <menu+0xd32>
			} else if(dilSecim == 1) {
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <menu+0xe40>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d11c      	bne.n	80022de <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 80022a4:	4a5d      	ldr	r2, [pc, #372]	; (800241c <menu+0xe70>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	2002      	movs	r0, #2
 80022aa:	f7fe fa85 	bl	80007b8 <lcd_print>
 80022ae:	e016      	b.n	80022de <menu+0xd32>
			}
		} else if(altLimit == 1) {
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <menu+0xe68>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d112      	bne.n	80022de <menu+0xd32>
			if(dilSecim == 0){
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <menu+0xe40>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 80022c0:	4a57      	ldr	r2, [pc, #348]	; (8002420 <menu+0xe74>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	2002      	movs	r0, #2
 80022c6:	f7fe fa77 	bl	80007b8 <lcd_print>
 80022ca:	e008      	b.n	80022de <menu+0xd32>
			} else if(dilSecim == 1){
 80022cc:	4b47      	ldr	r3, [pc, #284]	; (80023ec <menu+0xe40>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d104      	bne.n	80022de <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 80022d4:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <menu+0xe44>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	2002      	movs	r0, #2
 80022da:	f7fe fa6d 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80022de:	2102      	movs	r1, #2
 80022e0:	4844      	ldr	r0, [pc, #272]	; (80023f4 <menu+0xe48>)
 80022e2:	f007 fcb5 	bl	8009c50 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d119      	bne.n	8002320 <menu+0xd74>
 80022ec:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <menu+0xe4c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <menu+0xd74>
 80022fa:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <menu+0xe78>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10e      	bne.n	8002320 <menu+0xd74>
			altLimit = altLimit + 1;
 8002302:	4b44      	ldr	r3, [pc, #272]	; (8002414 <menu+0xe68>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b42      	ldr	r3, [pc, #264]	; (8002414 <menu+0xe68>)
 800230c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <menu+0xe68>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d902      	bls.n	800231c <menu+0xd70>
				altLimit = 0;
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <menu+0xe68>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800231c:	f003 febc 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002320:	2104      	movs	r1, #4
 8002322:	4834      	ldr	r0, [pc, #208]	; (80023f4 <menu+0xe48>)
 8002324:	f007 fc94 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	d119      	bne.n	8002362 <menu+0xdb6>
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <menu+0xe4c>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f083 0301 	eor.w	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d012      	beq.n	8002362 <menu+0xdb6>
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <menu+0xe78>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10e      	bne.n	8002362 <menu+0xdb6>
			altLimit = altLimit - 1;
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <menu+0xe68>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <menu+0xe68>)
 800234e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002350:	4b30      	ldr	r3, [pc, #192]	; (8002414 <menu+0xe68>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <menu+0xdb2>
		   		altLimit = 1;
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <menu+0xe68>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800235e:	f003 fe9b 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002362:	2108      	movs	r1, #8
 8002364:	4823      	ldr	r0, [pc, #140]	; (80023f4 <menu+0xe48>)
 8002366:	f007 fc73 	bl	8009c50 <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	2b01      	cmp	r3, #1
 800236e:	d12d      	bne.n	80023cc <menu+0xe20>
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <menu+0xe4c>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d026      	beq.n	80023cc <menu+0xe20>
			eepromData[5] = altLimit;
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <menu+0xe68>)
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <menu+0xe54>)
 8002384:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <menu+0xe68>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d110      	bne.n	80023b0 <menu+0xe04>
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <menu+0xe7c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <menu+0xdf2>
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <menu+0xe7c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d108      	bne.n	80023b0 <menu+0xe04>
				kapiTablaAcKonum = 3;
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <menu+0xe7c>)
 80023a0:	2203      	movs	r2, #3
 80023a2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <menu+0xe7c>)
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <menu+0xe54>)
 80023aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80023ae:	e00a      	b.n	80023c6 <menu+0xe1a>
			} else if(altLimit == 0) {
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <menu+0xe68>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <menu+0xe1a>
				platformSilindirTipi = 0;
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <menu+0xe80>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <menu+0xe80>)
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <menu+0xe54>)
 80023c4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <menu+0xe58>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <menu+0xe5c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b06      	cmp	r3, #6
 80023d2:	f040 80b6 	bne.w	8002542 <menu+0xf96>
		if(dilSecim == 0) {
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <menu+0xe40>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12a      	bne.n	8002434 <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <menu+0xe84>)
 80023e0:	2101      	movs	r1, #1
 80023e2:	2001      	movs	r0, #1
 80023e4:	f7fe f9e8 	bl	80007b8 <lcd_print>
 80023e8:	e02d      	b.n	8002446 <menu+0xe9a>
 80023ea:	bf00      	nop
 80023ec:	20000c5a 	.word	0x20000c5a
 80023f0:	0800dbf8 	.word	0x0800dbf8
 80023f4:	40010800 	.word	0x40010800
 80023f8:	20000c68 	.word	0x20000c68
 80023fc:	20000c3e 	.word	0x20000c3e
 8002400:	20000b28 	.word	0x20000b28
 8002404:	20000c65 	.word	0x20000c65
 8002408:	20000c39 	.word	0x20000c39
 800240c:	0800dc0c 	.word	0x0800dc0c
 8002410:	0800dc20 	.word	0x0800dc20
 8002414:	20000c3f 	.word	0x20000c3f
 8002418:	0800db84 	.word	0x0800db84
 800241c:	0800db98 	.word	0x0800db98
 8002420:	0800dbe4 	.word	0x0800dbe4
 8002424:	20000c3a 	.word	0x20000c3a
 8002428:	20000c46 	.word	0x20000c46
 800242c:	20000c4c 	.word	0x20000c4c
 8002430:	0800dc34 	.word	0x0800dc34
		} else if(dilSecim == 1){
 8002434:	4b7a      	ldr	r3, [pc, #488]	; (8002620 <menu+0x1074>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d104      	bne.n	8002446 <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800243c:	4a79      	ldr	r2, [pc, #484]	; (8002624 <menu+0x1078>)
 800243e:	2101      	movs	r1, #1
 8002440:	2001      	movs	r0, #1
 8002442:	f7fe f9b9 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 8002446:	4b78      	ldr	r3, [pc, #480]	; (8002628 <menu+0x107c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d113      	bne.n	8002476 <menu+0xeca>
			if(dilSecim == 0) {
 800244e:	4b74      	ldr	r3, [pc, #464]	; (8002620 <menu+0x1074>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 8002456:	4a75      	ldr	r2, [pc, #468]	; (800262c <menu+0x1080>)
 8002458:	2101      	movs	r1, #1
 800245a:	2002      	movs	r0, #2
 800245c:	f7fe f9ac 	bl	80007b8 <lcd_print>
 8002460:	e020      	b.n	80024a4 <menu+0xef8>
			} else if(dilSecim == 1){
 8002462:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <menu+0x1074>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d11c      	bne.n	80024a4 <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 800246a:	4a71      	ldr	r2, [pc, #452]	; (8002630 <menu+0x1084>)
 800246c:	2101      	movs	r1, #1
 800246e:	2002      	movs	r0, #2
 8002470:	f7fe f9a2 	bl	80007b8 <lcd_print>
 8002474:	e016      	b.n	80024a4 <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 8002476:	4b6c      	ldr	r3, [pc, #432]	; (8002628 <menu+0x107c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d112      	bne.n	80024a4 <menu+0xef8>
			if(dilSecim == 0) {
 800247e:	4b68      	ldr	r3, [pc, #416]	; (8002620 <menu+0x1074>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 8002486:	4a6b      	ldr	r2, [pc, #428]	; (8002634 <menu+0x1088>)
 8002488:	2101      	movs	r1, #1
 800248a:	2002      	movs	r0, #2
 800248c:	f7fe f994 	bl	80007b8 <lcd_print>
 8002490:	e008      	b.n	80024a4 <menu+0xef8>
			} else if(dilSecim == 1) {
 8002492:	4b63      	ldr	r3, [pc, #396]	; (8002620 <menu+0x1074>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d104      	bne.n	80024a4 <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 800249a:	4a67      	ldr	r2, [pc, #412]	; (8002638 <menu+0x108c>)
 800249c:	2101      	movs	r1, #1
 800249e:	2002      	movs	r0, #2
 80024a0:	f7fe f98a 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024a4:	2102      	movs	r1, #2
 80024a6:	4865      	ldr	r0, [pc, #404]	; (800263c <menu+0x1090>)
 80024a8:	f007 fbd2 	bl	8009c50 <HAL_GPIO_ReadPin>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d115      	bne.n	80024de <menu+0xf32>
 80024b2:	4b63      	ldr	r3, [pc, #396]	; (8002640 <menu+0x1094>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	f083 0301 	eor.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <menu+0x107c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <menu+0x107c>)
 80024ca:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80024cc:	4b56      	ldr	r3, [pc, #344]	; (8002628 <menu+0x107c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d902      	bls.n	80024da <menu+0xf2e>
				basincSalteri = 0;
 80024d4:	4b54      	ldr	r3, [pc, #336]	; (8002628 <menu+0x107c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024da:	f003 fddd 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024de:	2104      	movs	r1, #4
 80024e0:	4856      	ldr	r0, [pc, #344]	; (800263c <menu+0x1090>)
 80024e2:	f007 fbb5 	bl	8009c50 <HAL_GPIO_ReadPin>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d115      	bne.n	8002518 <menu+0xf6c>
 80024ec:	4b54      	ldr	r3, [pc, #336]	; (8002640 <menu+0x1094>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	f083 0301 	eor.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00e      	beq.n	8002518 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 80024fa:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <menu+0x107c>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	3b01      	subs	r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b49      	ldr	r3, [pc, #292]	; (8002628 <menu+0x107c>)
 8002504:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <menu+0x107c>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <menu+0xf68>
		   		basincSalteri = 1;
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <menu+0x107c>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002514:	f003 fdc0 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002518:	2108      	movs	r1, #8
 800251a:	4848      	ldr	r0, [pc, #288]	; (800263c <menu+0x1090>)
 800251c:	f007 fb98 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002520:	4603      	mov	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	d10d      	bne.n	8002542 <menu+0xf96>
 8002526:	4b46      	ldr	r3, [pc, #280]	; (8002640 <menu+0x1094>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f083 0301 	eor.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <menu+0xf96>
			eepromData[6] = basincSalteri;
 8002534:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <menu+0x107c>)
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	4b42      	ldr	r3, [pc, #264]	; (8002644 <menu+0x1098>)
 800253a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800253c:	4b42      	ldr	r3, [pc, #264]	; (8002648 <menu+0x109c>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002542:	4b42      	ldr	r3, [pc, #264]	; (800264c <menu+0x10a0>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b07      	cmp	r3, #7
 8002548:	f040 80f5 	bne.w	8002736 <menu+0x118a>
		if(dilSecim == 0) {
 800254c:	4b34      	ldr	r3, [pc, #208]	; (8002620 <menu+0x1074>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002554:	4a3e      	ldr	r2, [pc, #248]	; (8002650 <menu+0x10a4>)
 8002556:	2101      	movs	r1, #1
 8002558:	2001      	movs	r0, #1
 800255a:	f7fe f92d 	bl	80007b8 <lcd_print>
 800255e:	e008      	b.n	8002572 <menu+0xfc6>
		} else if(dilSecim == 1){
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <menu+0x1074>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d104      	bne.n	8002572 <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002568:	4a3a      	ldr	r2, [pc, #232]	; (8002654 <menu+0x10a8>)
 800256a:	2101      	movs	r1, #1
 800256c:	2001      	movs	r0, #1
 800256e:	f7fe f923 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <menu+0x10ac>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d113      	bne.n	80025a2 <menu+0xff6>
			if(dilSecim == 0) {
 800257a:	4b29      	ldr	r3, [pc, #164]	; (8002620 <menu+0x1074>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 8002582:	4a2a      	ldr	r2, [pc, #168]	; (800262c <menu+0x1080>)
 8002584:	2101      	movs	r1, #1
 8002586:	2002      	movs	r0, #2
 8002588:	f7fe f916 	bl	80007b8 <lcd_print>
 800258c:	e079      	b.n	8002682 <menu+0x10d6>
			} else if(dilSecim == 1){
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <menu+0x1074>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d175      	bne.n	8002682 <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 8002596:	4a26      	ldr	r2, [pc, #152]	; (8002630 <menu+0x1084>)
 8002598:	2101      	movs	r1, #1
 800259a:	2002      	movs	r0, #2
 800259c:	f7fe f90c 	bl	80007b8 <lcd_print>
 80025a0:	e06f      	b.n	8002682 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <menu+0x10ac>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d113      	bne.n	80025d2 <menu+0x1026>
			if(dilSecim == 0) {
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <menu+0x1074>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 80025b2:	4a2a      	ldr	r2, [pc, #168]	; (800265c <menu+0x10b0>)
 80025b4:	2101      	movs	r1, #1
 80025b6:	2002      	movs	r0, #2
 80025b8:	f7fe f8fe 	bl	80007b8 <lcd_print>
 80025bc:	e061      	b.n	8002682 <menu+0x10d6>
			} else if(dilSecim == 1) {
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <menu+0x1074>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d15d      	bne.n	8002682 <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 80025c6:	4a26      	ldr	r2, [pc, #152]	; (8002660 <menu+0x10b4>)
 80025c8:	2101      	movs	r1, #1
 80025ca:	2002      	movs	r0, #2
 80025cc:	f7fe f8f4 	bl	80007b8 <lcd_print>
 80025d0:	e057      	b.n	8002682 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <menu+0x10ac>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d113      	bne.n	8002602 <menu+0x1056>
			if(dilSecim == 0) {
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <menu+0x1074>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <menu+0x10b8>)
 80025e4:	2101      	movs	r1, #1
 80025e6:	2002      	movs	r0, #2
 80025e8:	f7fe f8e6 	bl	80007b8 <lcd_print>
 80025ec:	e049      	b.n	8002682 <menu+0x10d6>
			} else if(dilSecim == 1) {
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <menu+0x1074>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d145      	bne.n	8002682 <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <menu+0x10bc>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	2002      	movs	r0, #2
 80025fc:	f7fe f8dc 	bl	80007b8 <lcd_print>
 8002600:	e03f      	b.n	8002682 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <menu+0x10ac>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d13b      	bne.n	8002682 <menu+0x10d6>
			if(dilSecim == 0) {
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <menu+0x1074>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d12e      	bne.n	8002670 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002612:	4a16      	ldr	r2, [pc, #88]	; (800266c <menu+0x10c0>)
 8002614:	2101      	movs	r1, #1
 8002616:	2002      	movs	r0, #2
 8002618:	f7fe f8ce 	bl	80007b8 <lcd_print>
 800261c:	e031      	b.n	8002682 <menu+0x10d6>
 800261e:	bf00      	nop
 8002620:	20000c5a 	.word	0x20000c5a
 8002624:	0800dc44 	.word	0x0800dc44
 8002628:	20000c40 	.word	0x20000c40
 800262c:	0800db84 	.word	0x0800db84
 8002630:	0800db98 	.word	0x0800db98
 8002634:	0800dbe4 	.word	0x0800dbe4
 8002638:	0800dbf8 	.word	0x0800dbf8
 800263c:	40010800 	.word	0x40010800
 8002640:	20000c68 	.word	0x20000c68
 8002644:	20000b28 	.word	0x20000b28
 8002648:	20000c65 	.word	0x20000c65
 800264c:	20000c39 	.word	0x20000c39
 8002650:	0800dc54 	.word	0x0800dc54
 8002654:	0800dc68 	.word	0x0800dc68
 8002658:	20000c41 	.word	0x20000c41
 800265c:	0800dc7c 	.word	0x0800dc7c
 8002660:	0800dc90 	.word	0x0800dc90
 8002664:	0800dca4 	.word	0x0800dca4
 8002668:	0800dcb8 	.word	0x0800dcb8
 800266c:	0800dccc 	.word	0x0800dccc
			} else if(dilSecim == 1){
 8002670:	4b99      	ldr	r3, [pc, #612]	; (80028d8 <menu+0x132c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d104      	bne.n	8002682 <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002678:	4a98      	ldr	r2, [pc, #608]	; (80028dc <menu+0x1330>)
 800267a:	2101      	movs	r1, #1
 800267c:	2002      	movs	r0, #2
 800267e:	f7fe f89b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002682:	2102      	movs	r1, #2
 8002684:	4896      	ldr	r0, [pc, #600]	; (80028e0 <menu+0x1334>)
 8002686:	f007 fae3 	bl	8009c50 <HAL_GPIO_ReadPin>
 800268a:	4603      	mov	r3, r0
 800268c:	2b01      	cmp	r3, #1
 800268e:	d115      	bne.n	80026bc <menu+0x1110>
 8002690:	4b94      	ldr	r3, [pc, #592]	; (80028e4 <menu+0x1338>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f083 0301 	eor.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00e      	beq.n	80026bc <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 800269e:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <menu+0x133c>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b90      	ldr	r3, [pc, #576]	; (80028e8 <menu+0x133c>)
 80026a8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80026aa:	4b8f      	ldr	r3, [pc, #572]	; (80028e8 <menu+0x133c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d902      	bls.n	80026b8 <menu+0x110c>
				kapiSecimleri = 0;
 80026b2:	4b8d      	ldr	r3, [pc, #564]	; (80028e8 <menu+0x133c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026b8:	f003 fcee 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026bc:	2104      	movs	r1, #4
 80026be:	4888      	ldr	r0, [pc, #544]	; (80028e0 <menu+0x1334>)
 80026c0:	f007 fac6 	bl	8009c50 <HAL_GPIO_ReadPin>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d115      	bne.n	80026f6 <menu+0x114a>
 80026ca:	4b86      	ldr	r3, [pc, #536]	; (80028e4 <menu+0x1338>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f083 0301 	eor.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00e      	beq.n	80026f6 <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 80026d8:	4b83      	ldr	r3, [pc, #524]	; (80028e8 <menu+0x133c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	3b01      	subs	r3, #1
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b81      	ldr	r3, [pc, #516]	; (80028e8 <menu+0x133c>)
 80026e2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80026e4:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <menu+0x133c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d902      	bls.n	80026f2 <menu+0x1146>
		   		kapiSecimleri = 3;
 80026ec:	4b7e      	ldr	r3, [pc, #504]	; (80028e8 <menu+0x133c>)
 80026ee:	2203      	movs	r2, #3
 80026f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026f2:	f003 fcd1 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f6:	2108      	movs	r1, #8
 80026f8:	4879      	ldr	r0, [pc, #484]	; (80028e0 <menu+0x1334>)
 80026fa:	f007 faa9 	bl	8009c50 <HAL_GPIO_ReadPin>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b01      	cmp	r3, #1
 8002702:	d118      	bne.n	8002736 <menu+0x118a>
 8002704:	4b77      	ldr	r3, [pc, #476]	; (80028e4 <menu+0x1338>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d011      	beq.n	8002736 <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 8002712:	4b75      	ldr	r3, [pc, #468]	; (80028e8 <menu+0x133c>)
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	4b75      	ldr	r3, [pc, #468]	; (80028ec <menu+0x1340>)
 8002718:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <menu+0x133c>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <menu+0x1184>
				altLimit = 1;
 8002722:	4b73      	ldr	r3, [pc, #460]	; (80028f0 <menu+0x1344>)
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002728:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <menu+0x1344>)
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	4b6f      	ldr	r3, [pc, #444]	; (80028ec <menu+0x1340>)
 800272e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002730:	4b70      	ldr	r3, [pc, #448]	; (80028f4 <menu+0x1348>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002736:	4b70      	ldr	r3, [pc, #448]	; (80028f8 <menu+0x134c>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b08      	cmp	r3, #8
 800273c:	f040 8092 	bne.w	8002864 <menu+0x12b8>
		if(dilSecim == 0) {
 8002740:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <menu+0x132c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d105      	bne.n	8002754 <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002748:	4a6c      	ldr	r2, [pc, #432]	; (80028fc <menu+0x1350>)
 800274a:	2101      	movs	r1, #1
 800274c:	2001      	movs	r0, #1
 800274e:	f7fe f833 	bl	80007b8 <lcd_print>
 8002752:	e008      	b.n	8002766 <menu+0x11ba>
		} else if(dilSecim == 1) {
 8002754:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <menu+0x132c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d104      	bne.n	8002766 <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800275c:	4a68      	ldr	r2, [pc, #416]	; (8002900 <menu+0x1354>)
 800275e:	2101      	movs	r1, #1
 8002760:	2001      	movs	r0, #1
 8002762:	f7fe f829 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <menu+0x1358>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <menu+0x11ea>
			if(dilSecim == 0) {
 800276e:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <menu+0x132c>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002776:	4a64      	ldr	r2, [pc, #400]	; (8002908 <menu+0x135c>)
 8002778:	2101      	movs	r1, #1
 800277a:	2002      	movs	r0, #2
 800277c:	f7fe f81c 	bl	80007b8 <lcd_print>
 8002780:	e020      	b.n	80027c4 <menu+0x1218>
			} else if(dilSecim == 1) {
 8002782:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <menu+0x132c>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d11c      	bne.n	80027c4 <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 800278a:	4a60      	ldr	r2, [pc, #384]	; (800290c <menu+0x1360>)
 800278c:	2101      	movs	r1, #1
 800278e:	2002      	movs	r0, #2
 8002790:	f7fe f812 	bl	80007b8 <lcd_print>
 8002794:	e016      	b.n	80027c4 <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 8002796:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <menu+0x1358>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d112      	bne.n	80027c4 <menu+0x1218>
			if(dilSecim == 0){
 800279e:	4b4e      	ldr	r3, [pc, #312]	; (80028d8 <menu+0x132c>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80027a6:	4a5a      	ldr	r2, [pc, #360]	; (8002910 <menu+0x1364>)
 80027a8:	2101      	movs	r1, #1
 80027aa:	2002      	movs	r0, #2
 80027ac:	f7fe f804 	bl	80007b8 <lcd_print>
 80027b0:	e008      	b.n	80027c4 <menu+0x1218>
			} else if(dilSecim == 1){
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <menu+0x132c>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d104      	bne.n	80027c4 <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 80027ba:	4a56      	ldr	r2, [pc, #344]	; (8002914 <menu+0x1368>)
 80027bc:	2101      	movs	r1, #1
 80027be:	2002      	movs	r0, #2
 80027c0:	f7fd fffa 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027c4:	2102      	movs	r1, #2
 80027c6:	4846      	ldr	r0, [pc, #280]	; (80028e0 <menu+0x1334>)
 80027c8:	f007 fa42 	bl	8009c50 <HAL_GPIO_ReadPin>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d115      	bne.n	80027fe <menu+0x1252>
 80027d2:	4b44      	ldr	r3, [pc, #272]	; (80028e4 <menu+0x1338>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	f083 0301 	eor.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 80027e0:	4b48      	ldr	r3, [pc, #288]	; (8002904 <menu+0x1358>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b46      	ldr	r3, [pc, #280]	; (8002904 <menu+0x1358>)
 80027ea:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80027ec:	4b45      	ldr	r3, [pc, #276]	; (8002904 <menu+0x1358>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d902      	bls.n	80027fa <menu+0x124e>
				kapiAcTipi = 0;
 80027f4:	4b43      	ldr	r3, [pc, #268]	; (8002904 <menu+0x1358>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027fa:	f003 fc4d 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027fe:	2104      	movs	r1, #4
 8002800:	4837      	ldr	r0, [pc, #220]	; (80028e0 <menu+0x1334>)
 8002802:	f007 fa25 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	d115      	bne.n	8002838 <menu+0x128c>
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <menu+0x1338>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f083 0301 	eor.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 800281a:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <menu+0x1358>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	3b01      	subs	r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <menu+0x1358>)
 8002824:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <menu+0x1358>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <menu+0x1288>
		   		kapiAcTipi = 1;
 800282e:	4b35      	ldr	r3, [pc, #212]	; (8002904 <menu+0x1358>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002834:	f003 fc30 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002838:	2108      	movs	r1, #8
 800283a:	4829      	ldr	r0, [pc, #164]	; (80028e0 <menu+0x1334>)
 800283c:	f007 fa08 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002840:	4603      	mov	r3, r0
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10e      	bne.n	8002864 <menu+0x12b8>
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <menu+0x1338>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f083 0301 	eor.w	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <menu+0x1358>)
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <menu+0x1340>)
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <menu+0x1348>)
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <menu+0x134c>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b09      	cmp	r3, #9
 800286a:	f040 80b9 	bne.w	80029e0 <menu+0x1434>
		if(dilSecim == 0){
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <menu+0x132c>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002876:	4a28      	ldr	r2, [pc, #160]	; (8002918 <menu+0x136c>)
 8002878:	2101      	movs	r1, #1
 800287a:	2001      	movs	r0, #1
 800287c:	f7fd ff9c 	bl	80007b8 <lcd_print>
 8002880:	e008      	b.n	8002894 <menu+0x12e8>
		} else if(dilSecim == 1) {
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <menu+0x132c>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d104      	bne.n	8002894 <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800288a:	4a24      	ldr	r2, [pc, #144]	; (800291c <menu+0x1370>)
 800288c:	2101      	movs	r1, #1
 800288e:	2001      	movs	r0, #1
 8002890:	f7fd ff92 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <menu+0x1374>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 800289c:	4a21      	ldr	r2, [pc, #132]	; (8002924 <menu+0x1378>)
 800289e:	2101      	movs	r1, #1
 80028a0:	2002      	movs	r0, #2
 80028a2:	f7fd ff89 	bl	80007b8 <lcd_print>
 80028a6:	e04c      	b.n	8002942 <menu+0x1396>
		} else if(kapi1Tip == 1) {
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <menu+0x1374>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d13f      	bne.n	8002930 <menu+0x1384>
			if(dilSecim == 0){
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <menu+0x132c>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <menu+0x137c>)
 80028ba:	2101      	movs	r1, #1
 80028bc:	2002      	movs	r0, #2
 80028be:	f7fd ff7b 	bl	80007b8 <lcd_print>
 80028c2:	e03e      	b.n	8002942 <menu+0x1396>
			} else if(dilSecim == 1) {
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <menu+0x132c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d13a      	bne.n	8002942 <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 80028cc:	4a17      	ldr	r2, [pc, #92]	; (800292c <menu+0x1380>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2002      	movs	r0, #2
 80028d2:	f7fd ff71 	bl	80007b8 <lcd_print>
 80028d6:	e034      	b.n	8002942 <menu+0x1396>
 80028d8:	20000c5a 	.word	0x20000c5a
 80028dc:	0800dce0 	.word	0x0800dce0
 80028e0:	40010800 	.word	0x40010800
 80028e4:	20000c68 	.word	0x20000c68
 80028e8:	20000c41 	.word	0x20000c41
 80028ec:	20000b28 	.word	0x20000b28
 80028f0:	20000c3f 	.word	0x20000c3f
 80028f4:	20000c65 	.word	0x20000c65
 80028f8:	20000c39 	.word	0x20000c39
 80028fc:	0800dcf4 	.word	0x0800dcf4
 8002900:	0800dd08 	.word	0x0800dd08
 8002904:	20000c45 	.word	0x20000c45
 8002908:	0800dd1c 	.word	0x0800dd1c
 800290c:	0800dd2c 	.word	0x0800dd2c
 8002910:	0800dd3c 	.word	0x0800dd3c
 8002914:	0800dd50 	.word	0x0800dd50
 8002918:	0800dd64 	.word	0x0800dd64
 800291c:	0800dd78 	.word	0x0800dd78
 8002920:	20000c42 	.word	0x20000c42
 8002924:	0800dd8c 	.word	0x0800dd8c
 8002928:	0800dda0 	.word	0x0800dda0
 800292c:	0800ddb0 	.word	0x0800ddb0
			}
		} else if(kapi1Tip == 2) {
 8002930:	4b8a      	ldr	r3, [pc, #552]	; (8002b5c <menu+0x15b0>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d104      	bne.n	8002942 <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 8002938:	4a89      	ldr	r2, [pc, #548]	; (8002b60 <menu+0x15b4>)
 800293a:	2101      	movs	r1, #1
 800293c:	2002      	movs	r0, #2
 800293e:	f7fd ff3b 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002942:	2102      	movs	r1, #2
 8002944:	4887      	ldr	r0, [pc, #540]	; (8002b64 <menu+0x15b8>)
 8002946:	f007 f983 	bl	8009c50 <HAL_GPIO_ReadPin>
 800294a:	4603      	mov	r3, r0
 800294c:	2b01      	cmp	r3, #1
 800294e:	d115      	bne.n	800297c <menu+0x13d0>
 8002950:	4b85      	ldr	r3, [pc, #532]	; (8002b68 <menu+0x15bc>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f083 0301 	eor.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00e      	beq.n	800297c <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 800295e:	4b7f      	ldr	r3, [pc, #508]	; (8002b5c <menu+0x15b0>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b7d      	ldr	r3, [pc, #500]	; (8002b5c <menu+0x15b0>)
 8002968:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800296a:	4b7c      	ldr	r3, [pc, #496]	; (8002b5c <menu+0x15b0>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d902      	bls.n	8002978 <menu+0x13cc>
				kapi1Tip = 0;
 8002972:	4b7a      	ldr	r3, [pc, #488]	; (8002b5c <menu+0x15b0>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002978:	f003 fb8e 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800297c:	2104      	movs	r1, #4
 800297e:	4879      	ldr	r0, [pc, #484]	; (8002b64 <menu+0x15b8>)
 8002980:	f007 f966 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d115      	bne.n	80029b6 <menu+0x140a>
 800298a:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <menu+0x15bc>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	f083 0301 	eor.w	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00e      	beq.n	80029b6 <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 8002998:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <menu+0x15b0>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	3b01      	subs	r3, #1
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <menu+0x15b0>)
 80029a2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80029a4:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <menu+0x15b0>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d902      	bls.n	80029b2 <menu+0x1406>
		   		kapi1Tip = 2;
 80029ac:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <menu+0x15b0>)
 80029ae:	2202      	movs	r2, #2
 80029b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029b2:	f003 fb71 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029b6:	2108      	movs	r1, #8
 80029b8:	486a      	ldr	r0, [pc, #424]	; (8002b64 <menu+0x15b8>)
 80029ba:	f007 f949 	bl	8009c50 <HAL_GPIO_ReadPin>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10d      	bne.n	80029e0 <menu+0x1434>
 80029c4:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <menu+0x15bc>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f083 0301 	eor.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 80029d2:	4b62      	ldr	r3, [pc, #392]	; (8002b5c <menu+0x15b0>)
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <menu+0x15c0>)
 80029d8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80029da:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <menu+0x15c4>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80029e0:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <menu+0x15c8>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b0a      	cmp	r3, #10
 80029e6:	d17f      	bne.n	8002ae8 <menu+0x153c>
		if(dilSecim == 0) {
 80029e8:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <menu+0x15cc>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80029f0:	4a62      	ldr	r2, [pc, #392]	; (8002b7c <menu+0x15d0>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7fd fedf 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029fa:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <menu+0x15d4>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	2002      	movs	r0, #2
 8002a00:	f7fd feda 	bl	80007b8 <lcd_print>
 8002a04:	e00d      	b.n	8002a22 <menu+0x1476>
		} else if(dilSecim == 1) {
 8002a06:	4b5c      	ldr	r3, [pc, #368]	; (8002b78 <menu+0x15cc>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d109      	bne.n	8002a22 <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002a0e:	4a5d      	ldr	r2, [pc, #372]	; (8002b84 <menu+0x15d8>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7fd fed0 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a18:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <menu+0x15dc>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f7fd fecb 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002a22:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <menu+0x15e0>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	220a      	movs	r2, #10
 8002a28:	4959      	ldr	r1, [pc, #356]	; (8002b90 <menu+0x15e4>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f00a f93c 	bl	800cca8 <itoa>
		lcd_print(2,16,snum);
 8002a30:	4a57      	ldr	r2, [pc, #348]	; (8002b90 <menu+0x15e4>)
 8002a32:	2110      	movs	r1, #16
 8002a34:	2002      	movs	r0, #2
 8002a36:	f7fd febf 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4849      	ldr	r0, [pc, #292]	; (8002b64 <menu+0x15b8>)
 8002a3e:	f007 f907 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d119      	bne.n	8002a7c <menu+0x14d0>
 8002a48:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <menu+0x15bc>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	f083 0301 	eor.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d012      	beq.n	8002a7c <menu+0x14d0>
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <menu+0x15b0>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10e      	bne.n	8002a7c <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 8002a5e:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <menu+0x15e0>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <menu+0x15e0>)
 8002a68:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002a6a:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <menu+0x15e0>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d902      	bls.n	8002a78 <menu+0x14cc>
				kapi1AcSure = 0;
 8002a72:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <menu+0x15e0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a78:	f003 fb0e 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	4839      	ldr	r0, [pc, #228]	; (8002b64 <menu+0x15b8>)
 8002a80:	f007 f8e6 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d119      	bne.n	8002abe <menu+0x1512>
 8002a8a:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <menu+0x15bc>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <menu+0x1512>
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <menu+0x15b0>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10e      	bne.n	8002abe <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <menu+0x15e0>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <menu+0x15e0>)
 8002aaa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002aac:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <menu+0x15e0>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b06      	cmp	r3, #6
 8002ab2:	d902      	bls.n	8002aba <menu+0x150e>
		   		kapi1AcSure = 5;
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <menu+0x15e0>)
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aba:	f003 faed 	bl	8006098 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002abe:	2108      	movs	r1, #8
 8002ac0:	4828      	ldr	r0, [pc, #160]	; (8002b64 <menu+0x15b8>)
 8002ac2:	f007 f8c5 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10d      	bne.n	8002ae8 <menu+0x153c>
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <menu+0x15bc>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	f083 0301 	eor.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <menu+0x15e0>)
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <menu+0x15c0>)
 8002ae0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <menu+0x15c4>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002ae8:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <menu+0x15c8>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b0b      	cmp	r3, #11
 8002aee:	f040 80b5 	bne.w	8002c5c <menu+0x16b0>
		if(dilSecim == 0) {
 8002af2:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <menu+0x15cc>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002afa:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <menu+0x15e8>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	2001      	movs	r0, #1
 8002b00:	f7fd fe5a 	bl	80007b8 <lcd_print>
 8002b04:	e008      	b.n	8002b18 <menu+0x156c>
		} else if(dilSecim == 1) {
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <menu+0x15cc>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d104      	bne.n	8002b18 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002b0e:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <menu+0x15ec>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7fd fe50 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <menu+0x15f0>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 8002b20:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <menu+0x15f4>)
 8002b22:	2101      	movs	r1, #1
 8002b24:	2002      	movs	r0, #2
 8002b26:	f7fd fe47 	bl	80007b8 <lcd_print>
 8002b2a:	e048      	b.n	8002bbe <menu+0x1612>
		} else if(kapi2Tip == 1) {
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <menu+0x15f0>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d13b      	bne.n	8002bac <menu+0x1600>
			if(dilSecim == 0) {
 8002b34:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <menu+0x15cc>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 8002b3c:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <menu+0x15f8>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2002      	movs	r0, #2
 8002b42:	f7fd fe39 	bl	80007b8 <lcd_print>
 8002b46:	e03a      	b.n	8002bbe <menu+0x1612>
			} else if(dilSecim == 1) {
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <menu+0x15cc>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d136      	bne.n	8002bbe <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <menu+0x15fc>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	2002      	movs	r0, #2
 8002b56:	f7fd fe2f 	bl	80007b8 <lcd_print>
 8002b5a:	e030      	b.n	8002bbe <menu+0x1612>
 8002b5c:	20000c42 	.word	0x20000c42
 8002b60:	0800ddc4 	.word	0x0800ddc4
 8002b64:	40010800 	.word	0x40010800
 8002b68:	20000c68 	.word	0x20000c68
 8002b6c:	20000b28 	.word	0x20000b28
 8002b70:	20000c65 	.word	0x20000c65
 8002b74:	20000c39 	.word	0x20000c39
 8002b78:	20000c5a 	.word	0x20000c5a
 8002b7c:	0800ddd4 	.word	0x0800ddd4
 8002b80:	0800dde8 	.word	0x0800dde8
 8002b84:	0800ddf8 	.word	0x0800ddf8
 8002b88:	0800de0c 	.word	0x0800de0c
 8002b8c:	20000c52 	.word	0x20000c52
 8002b90:	20000bbc 	.word	0x20000bbc
 8002b94:	0800de1c 	.word	0x0800de1c
 8002b98:	0800de30 	.word	0x0800de30
 8002b9c:	20000c43 	.word	0x20000c43
 8002ba0:	0800dd8c 	.word	0x0800dd8c
 8002ba4:	0800dda0 	.word	0x0800dda0
 8002ba8:	0800ddb0 	.word	0x0800ddb0
			}
		} else if(kapi2Tip == 2) {
 8002bac:	4b8a      	ldr	r3, [pc, #552]	; (8002dd8 <menu+0x182c>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d104      	bne.n	8002bbe <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8002bb4:	4a89      	ldr	r2, [pc, #548]	; (8002ddc <menu+0x1830>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f7fd fdfd 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4887      	ldr	r0, [pc, #540]	; (8002de0 <menu+0x1834>)
 8002bc2:	f007 f845 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d115      	bne.n	8002bf8 <menu+0x164c>
 8002bcc:	4b85      	ldr	r3, [pc, #532]	; (8002de4 <menu+0x1838>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f083 0301 	eor.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00e      	beq.n	8002bf8 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 8002bda:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <menu+0x182c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b7d      	ldr	r3, [pc, #500]	; (8002dd8 <menu+0x182c>)
 8002be4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002be6:	4b7c      	ldr	r3, [pc, #496]	; (8002dd8 <menu+0x182c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <menu+0x1648>
				kapi2Tip = 0;
 8002bee:	4b7a      	ldr	r3, [pc, #488]	; (8002dd8 <menu+0x182c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bf4:	f003 fa50 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	4879      	ldr	r0, [pc, #484]	; (8002de0 <menu+0x1834>)
 8002bfc:	f007 f828 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d115      	bne.n	8002c32 <menu+0x1686>
 8002c06:	4b77      	ldr	r3, [pc, #476]	; (8002de4 <menu+0x1838>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f083 0301 	eor.w	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8002c14:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <menu+0x182c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b6e      	ldr	r3, [pc, #440]	; (8002dd8 <menu+0x182c>)
 8002c1e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002c20:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <menu+0x182c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d902      	bls.n	8002c2e <menu+0x1682>
		   		kapi2Tip = 2;
 8002c28:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <menu+0x182c>)
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c2e:	f003 fa33 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c32:	2108      	movs	r1, #8
 8002c34:	486a      	ldr	r0, [pc, #424]	; (8002de0 <menu+0x1834>)
 8002c36:	f007 f80b 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10d      	bne.n	8002c5c <menu+0x16b0>
 8002c40:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <menu+0x1838>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 8002c4e:	4b62      	ldr	r3, [pc, #392]	; (8002dd8 <menu+0x182c>)
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <menu+0x183c>)
 8002c54:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002c56:	4b65      	ldr	r3, [pc, #404]	; (8002dec <menu+0x1840>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002c5c:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <menu+0x1844>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d17f      	bne.n	8002d64 <menu+0x17b8>
		if(dilSecim == 0) {
 8002c64:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <menu+0x1848>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002c6c:	4a62      	ldr	r2, [pc, #392]	; (8002df8 <menu+0x184c>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7fd fda1 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c76:	4a61      	ldr	r2, [pc, #388]	; (8002dfc <menu+0x1850>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	f7fd fd9c 	bl	80007b8 <lcd_print>
 8002c80:	e00d      	b.n	8002c9e <menu+0x16f2>
		} else if(dilSecim == 1) {
 8002c82:	4b5c      	ldr	r3, [pc, #368]	; (8002df4 <menu+0x1848>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d109      	bne.n	8002c9e <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002c8a:	4a5d      	ldr	r2, [pc, #372]	; (8002e00 <menu+0x1854>)
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7fd fd92 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c94:	4a5b      	ldr	r2, [pc, #364]	; (8002e04 <menu+0x1858>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	2002      	movs	r0, #2
 8002c9a:	f7fd fd8d 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002c9e:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <menu+0x185c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	220a      	movs	r2, #10
 8002ca4:	4959      	ldr	r1, [pc, #356]	; (8002e0c <menu+0x1860>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f009 fffe 	bl	800cca8 <itoa>
		lcd_print(2,16,snum);
 8002cac:	4a57      	ldr	r2, [pc, #348]	; (8002e0c <menu+0x1860>)
 8002cae:	2110      	movs	r1, #16
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7fd fd81 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4849      	ldr	r0, [pc, #292]	; (8002de0 <menu+0x1834>)
 8002cba:	f006 ffc9 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d119      	bne.n	8002cf8 <menu+0x174c>
 8002cc4:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <menu+0x1838>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f083 0301 	eor.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d012      	beq.n	8002cf8 <menu+0x174c>
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <menu+0x182c>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10e      	bne.n	8002cf8 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <menu+0x185c>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b49      	ldr	r3, [pc, #292]	; (8002e08 <menu+0x185c>)
 8002ce4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002ce6:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <menu+0x185c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d902      	bls.n	8002cf4 <menu+0x1748>
				kapi2AcSure = 0;
 8002cee:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <menu+0x185c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cf4:	f003 f9d0 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	4839      	ldr	r0, [pc, #228]	; (8002de0 <menu+0x1834>)
 8002cfc:	f006 ffa8 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d119      	bne.n	8002d3a <menu+0x178e>
 8002d06:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <menu+0x1838>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d012      	beq.n	8002d3a <menu+0x178e>
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <menu+0x182c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10e      	bne.n	8002d3a <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <menu+0x185c>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <menu+0x185c>)
 8002d26:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002d28:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <menu+0x185c>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b06      	cmp	r3, #6
 8002d2e:	d902      	bls.n	8002d36 <menu+0x178a>
		   		kapi2AcSure = 5;
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <menu+0x185c>)
 8002d32:	2205      	movs	r2, #5
 8002d34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d36:	f003 f9af 	bl	8006098 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	4828      	ldr	r0, [pc, #160]	; (8002de0 <menu+0x1834>)
 8002d3e:	f006 ff87 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d10d      	bne.n	8002d64 <menu+0x17b8>
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <menu+0x1838>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f083 0301 	eor.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 8002d56:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <menu+0x185c>)
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <menu+0x183c>)
 8002d5c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <menu+0x1840>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <menu+0x1844>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b0d      	cmp	r3, #13
 8002d6a:	f040 80b5 	bne.w	8002ed8 <menu+0x192c>
		if(dilSecim == 0) {
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <menu+0x1848>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002d76:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <menu+0x1864>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f7fd fd1c 	bl	80007b8 <lcd_print>
 8002d80:	e008      	b.n	8002d94 <menu+0x17e8>
		} else if(dilSecim == 1){
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <menu+0x1848>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d104      	bne.n	8002d94 <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002d8a:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <menu+0x1868>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f7fd fd12 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <menu+0x186c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <menu+0x1870>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2002      	movs	r0, #2
 8002da2:	f7fd fd09 	bl	80007b8 <lcd_print>
 8002da6:	e048      	b.n	8002e3a <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <menu+0x186c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d13b      	bne.n	8002e28 <menu+0x187c>
			if(dilSecim == 0) {
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <menu+0x1848>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8002db8:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <menu+0x1874>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f7fd fcfb 	bl	80007b8 <lcd_print>
 8002dc2:	e03a      	b.n	8002e3a <menu+0x188e>
			} else if(dilSecim == 1) {
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <menu+0x1848>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d136      	bne.n	8002e3a <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <menu+0x1878>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f7fd fcf1 	bl	80007b8 <lcd_print>
 8002dd6:	e030      	b.n	8002e3a <menu+0x188e>
 8002dd8:	20000c43 	.word	0x20000c43
 8002ddc:	0800ddc4 	.word	0x0800ddc4
 8002de0:	40010800 	.word	0x40010800
 8002de4:	20000c68 	.word	0x20000c68
 8002de8:	20000b28 	.word	0x20000b28
 8002dec:	20000c65 	.word	0x20000c65
 8002df0:	20000c39 	.word	0x20000c39
 8002df4:	20000c5a 	.word	0x20000c5a
 8002df8:	0800de44 	.word	0x0800de44
 8002dfc:	0800dde8 	.word	0x0800dde8
 8002e00:	0800de58 	.word	0x0800de58
 8002e04:	0800de0c 	.word	0x0800de0c
 8002e08:	20000c53 	.word	0x20000c53
 8002e0c:	20000bbc 	.word	0x20000bbc
 8002e10:	0800de6c 	.word	0x0800de6c
 8002e14:	0800de80 	.word	0x0800de80
 8002e18:	20000c44 	.word	0x20000c44
 8002e1c:	0800dd8c 	.word	0x0800dd8c
 8002e20:	0800dda0 	.word	0x0800dda0
 8002e24:	0800ddb0 	.word	0x0800ddb0
			}
		} else if(kapitablaTip == 2) {
 8002e28:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <menu+0x19ec>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d104      	bne.n	8002e3a <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 8002e30:	4a5a      	ldr	r2, [pc, #360]	; (8002f9c <menu+0x19f0>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	2002      	movs	r0, #2
 8002e36:	f7fd fcbf 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4858      	ldr	r0, [pc, #352]	; (8002fa0 <menu+0x19f4>)
 8002e3e:	f006 ff07 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d115      	bne.n	8002e74 <menu+0x18c8>
 8002e48:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <menu+0x19f8>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00e      	beq.n	8002e74 <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 8002e56:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <menu+0x19ec>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <menu+0x19ec>)
 8002e60:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002e62:	4b4d      	ldr	r3, [pc, #308]	; (8002f98 <menu+0x19ec>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d902      	bls.n	8002e70 <menu+0x18c4>
				kapitablaTip = 0;
 8002e6a:	4b4b      	ldr	r3, [pc, #300]	; (8002f98 <menu+0x19ec>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e70:	f003 f912 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e74:	2104      	movs	r1, #4
 8002e76:	484a      	ldr	r0, [pc, #296]	; (8002fa0 <menu+0x19f4>)
 8002e78:	f006 feea 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d115      	bne.n	8002eae <menu+0x1902>
 8002e82:	4b48      	ldr	r3, [pc, #288]	; (8002fa4 <menu+0x19f8>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	f083 0301 	eor.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8002e90:	4b41      	ldr	r3, [pc, #260]	; (8002f98 <menu+0x19ec>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <menu+0x19ec>)
 8002e9a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002e9c:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <menu+0x19ec>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d902      	bls.n	8002eaa <menu+0x18fe>
		   		kapitablaTip = 2;
 8002ea4:	4b3c      	ldr	r3, [pc, #240]	; (8002f98 <menu+0x19ec>)
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002eaa:	f003 f8f5 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eae:	2108      	movs	r1, #8
 8002eb0:	483b      	ldr	r0, [pc, #236]	; (8002fa0 <menu+0x19f4>)
 8002eb2:	f006 fecd 	bl	8009c50 <HAL_GPIO_ReadPin>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10d      	bne.n	8002ed8 <menu+0x192c>
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <menu+0x19f8>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 8002eca:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <menu+0x19ec>)
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <menu+0x19fc>)
 8002ed0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <menu+0x1a00>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <menu+0x1a04>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b0e      	cmp	r3, #14
 8002ede:	f040 80f2 	bne.w	80030c6 <menu+0x1b1a>
		if(dilSecim == 0) {
 8002ee2:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <menu+0x1a08>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002eea:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <menu+0x1a0c>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f7fd fc62 	bl	80007b8 <lcd_print>
 8002ef4:	e008      	b.n	8002f08 <menu+0x195c>
		} else if(dilSecim == 1) {
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <menu+0x1a08>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d104      	bne.n	8002f08 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002efe:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <menu+0x1a10>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7fd fc58 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002f08:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <menu+0x1a14>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d113      	bne.n	8002f38 <menu+0x198c>
			if(dilSecim == 0){
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <menu+0x1a08>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <menu+0x1a18>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	2002      	movs	r0, #2
 8002f1e:	f7fd fc4b 	bl	80007b8 <lcd_print>
 8002f22:	e071      	b.n	8003008 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002f24:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <menu+0x1a08>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d16d      	bne.n	8003008 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 8002f2c:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <menu+0x1a1c>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2002      	movs	r0, #2
 8002f32:	f7fd fc41 	bl	80007b8 <lcd_print>
 8002f36:	e067      	b.n	8003008 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <menu+0x1a14>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d112      	bne.n	8002f66 <menu+0x19ba>
			if(dilSecim == 0){
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <menu+0x1a08>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 8002f48:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <menu+0x1a20>)
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	f7fd fc33 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <menu+0x1a08>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d156      	bne.n	8003008 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 8002f5a:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <menu+0x1a24>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2002      	movs	r0, #2
 8002f60:	f7fd fc2a 	bl	80007b8 <lcd_print>
 8002f64:	e050      	b.n	8003008 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <menu+0x1a14>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d136      	bne.n	8002fdc <menu+0x1a30>
			if(dilSecim == 0){
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <menu+0x1a08>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <menu+0x1a28>)
 8002f78:	2101      	movs	r1, #1
 8002f7a:	2002      	movs	r0, #2
 8002f7c:	f7fd fc1c 	bl	80007b8 <lcd_print>
 8002f80:	e042      	b.n	8003008 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <menu+0x1a08>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d13e      	bne.n	8003008 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 8002f8a:	4a13      	ldr	r2, [pc, #76]	; (8002fd8 <menu+0x1a2c>)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f7fd fc12 	bl	80007b8 <lcd_print>
 8002f94:	e038      	b.n	8003008 <menu+0x1a5c>
 8002f96:	bf00      	nop
 8002f98:	20000c44 	.word	0x20000c44
 8002f9c:	0800ddc4 	.word	0x0800ddc4
 8002fa0:	40010800 	.word	0x40010800
 8002fa4:	20000c68 	.word	0x20000c68
 8002fa8:	20000b28 	.word	0x20000b28
 8002fac:	20000c65 	.word	0x20000c65
 8002fb0:	20000c39 	.word	0x20000c39
 8002fb4:	20000c5a 	.word	0x20000c5a
 8002fb8:	0800de94 	.word	0x0800de94
 8002fbc:	0800dea8 	.word	0x0800dea8
 8002fc0:	20000c46 	.word	0x20000c46
 8002fc4:	0800debc 	.word	0x0800debc
 8002fc8:	0800decc 	.word	0x0800decc
 8002fcc:	0800dedc 	.word	0x0800dedc
 8002fd0:	0800deec 	.word	0x0800deec
 8002fd4:	0800defc 	.word	0x0800defc
 8002fd8:	0800df10 	.word	0x0800df10
			}
		} else if(kapiTablaAcKonum == 3) {
 8002fdc:	4b9b      	ldr	r3, [pc, #620]	; (800324c <menu+0x1ca0>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d111      	bne.n	8003008 <menu+0x1a5c>
			if(dilSecim == 0) {
 8002fe4:	4b9a      	ldr	r3, [pc, #616]	; (8003250 <menu+0x1ca4>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 8002fec:	4a99      	ldr	r2, [pc, #612]	; (8003254 <menu+0x1ca8>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f7fd fbe1 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002ff6:	4b96      	ldr	r3, [pc, #600]	; (8003250 <menu+0x1ca4>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d104      	bne.n	8003008 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 8002ffe:	4a96      	ldr	r2, [pc, #600]	; (8003258 <menu+0x1cac>)
 8003000:	2101      	movs	r1, #1
 8003002:	2002      	movs	r0, #2
 8003004:	f7fd fbd8 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003008:	2102      	movs	r1, #2
 800300a:	4894      	ldr	r0, [pc, #592]	; (800325c <menu+0x1cb0>)
 800300c:	f006 fe20 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003010:	4603      	mov	r3, r0
 8003012:	2b01      	cmp	r3, #1
 8003014:	d115      	bne.n	8003042 <menu+0x1a96>
 8003016:	4b92      	ldr	r3, [pc, #584]	; (8003260 <menu+0x1cb4>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00e      	beq.n	8003042 <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8003024:	4b89      	ldr	r3, [pc, #548]	; (800324c <menu+0x1ca0>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b87      	ldr	r3, [pc, #540]	; (800324c <menu+0x1ca0>)
 800302e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003030:	4b86      	ldr	r3, [pc, #536]	; (800324c <menu+0x1ca0>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <menu+0x1a92>
				kapiTablaAcKonum = 0;
 8003038:	4b84      	ldr	r3, [pc, #528]	; (800324c <menu+0x1ca0>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800303e:	f003 f82b 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003042:	2104      	movs	r1, #4
 8003044:	4885      	ldr	r0, [pc, #532]	; (800325c <menu+0x1cb0>)
 8003046:	f006 fe03 	bl	8009c50 <HAL_GPIO_ReadPin>
 800304a:	4603      	mov	r3, r0
 800304c:	2b01      	cmp	r3, #1
 800304e:	d115      	bne.n	800307c <menu+0x1ad0>
 8003050:	4b83      	ldr	r3, [pc, #524]	; (8003260 <menu+0x1cb4>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	f083 0301 	eor.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00e      	beq.n	800307c <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800305e:	4b7b      	ldr	r3, [pc, #492]	; (800324c <menu+0x1ca0>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	3b01      	subs	r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4b79      	ldr	r3, [pc, #484]	; (800324c <menu+0x1ca0>)
 8003068:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800306a:	4b78      	ldr	r3, [pc, #480]	; (800324c <menu+0x1ca0>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d902      	bls.n	8003078 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <menu+0x1ca0>)
 8003074:	2202      	movs	r2, #2
 8003076:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003078:	f003 f80e 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800307c:	2108      	movs	r1, #8
 800307e:	4877      	ldr	r0, [pc, #476]	; (800325c <menu+0x1cb0>)
 8003080:	f006 fde6 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003084:	4603      	mov	r3, r0
 8003086:	2b01      	cmp	r3, #1
 8003088:	d11d      	bne.n	80030c6 <menu+0x1b1a>
 800308a:	4b75      	ldr	r3, [pc, #468]	; (8003260 <menu+0x1cb4>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	f083 0301 	eor.w	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8003098:	4b6c      	ldr	r3, [pc, #432]	; (800324c <menu+0x1ca0>)
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	4b71      	ldr	r3, [pc, #452]	; (8003264 <menu+0x1cb8>)
 800309e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <menu+0x1ca0>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <menu+0x1b06>
 80030aa:	4b68      	ldr	r3, [pc, #416]	; (800324c <menu+0x1ca0>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d106      	bne.n	80030c0 <menu+0x1b14>
				altLimit = 1;
 80030b2:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <menu+0x1cbc>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80030b8:	4b6b      	ldr	r3, [pc, #428]	; (8003268 <menu+0x1cbc>)
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	4b69      	ldr	r3, [pc, #420]	; (8003264 <menu+0x1cb8>)
 80030be:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <menu+0x1cc0>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80030c6:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <menu+0x1cc4>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	d17f      	bne.n	80031ce <menu+0x1c22>
		if(dilSecim == 0) {
 80030ce:	4b60      	ldr	r3, [pc, #384]	; (8003250 <menu+0x1ca4>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80030d6:	4a67      	ldr	r2, [pc, #412]	; (8003274 <menu+0x1cc8>)
 80030d8:	2101      	movs	r1, #1
 80030da:	2001      	movs	r0, #1
 80030dc:	f7fd fb6c 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80030e0:	4a65      	ldr	r2, [pc, #404]	; (8003278 <menu+0x1ccc>)
 80030e2:	2101      	movs	r1, #1
 80030e4:	2002      	movs	r0, #2
 80030e6:	f7fd fb67 	bl	80007b8 <lcd_print>
 80030ea:	e00d      	b.n	8003108 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 80030ec:	4b58      	ldr	r3, [pc, #352]	; (8003250 <menu+0x1ca4>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d109      	bne.n	8003108 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80030f4:	4a61      	ldr	r2, [pc, #388]	; (800327c <menu+0x1cd0>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7fd fb5d 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80030fe:	4a60      	ldr	r2, [pc, #384]	; (8003280 <menu+0x1cd4>)
 8003100:	2101      	movs	r1, #1
 8003102:	2002      	movs	r0, #2
 8003104:	f7fd fb58 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003108:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <menu+0x1cd8>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	220a      	movs	r2, #10
 800310e:	495e      	ldr	r1, [pc, #376]	; (8003288 <menu+0x1cdc>)
 8003110:	4618      	mov	r0, r3
 8003112:	f009 fdc9 	bl	800cca8 <itoa>
		lcd_print(2,16,snum);
 8003116:	4a5c      	ldr	r2, [pc, #368]	; (8003288 <menu+0x1cdc>)
 8003118:	2110      	movs	r1, #16
 800311a:	2002      	movs	r0, #2
 800311c:	f7fd fb4c 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003120:	2102      	movs	r1, #2
 8003122:	484e      	ldr	r0, [pc, #312]	; (800325c <menu+0x1cb0>)
 8003124:	f006 fd94 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d119      	bne.n	8003162 <menu+0x1bb6>
 800312e:	4b4c      	ldr	r3, [pc, #304]	; (8003260 <menu+0x1cb4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d012      	beq.n	8003162 <menu+0x1bb6>
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <menu+0x1ce0>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10e      	bne.n	8003162 <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003144:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <menu+0x1cd8>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	b2da      	uxtb	r2, r3
 800314c:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <menu+0x1cd8>)
 800314e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003150:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <menu+0x1cd8>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d902      	bls.n	800315e <menu+0x1bb2>
				kapiTablaAcSure = 0;
 8003158:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <menu+0x1cd8>)
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800315e:	f002 ff9b 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003162:	2104      	movs	r1, #4
 8003164:	483d      	ldr	r0, [pc, #244]	; (800325c <menu+0x1cb0>)
 8003166:	f006 fd73 	bl	8009c50 <HAL_GPIO_ReadPin>
 800316a:	4603      	mov	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d119      	bne.n	80031a4 <menu+0x1bf8>
 8003170:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <menu+0x1cb4>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	f083 0301 	eor.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <menu+0x1bf8>
 800317e:	4b43      	ldr	r3, [pc, #268]	; (800328c <menu+0x1ce0>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10e      	bne.n	80031a4 <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003186:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <menu+0x1cd8>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	3b01      	subs	r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <menu+0x1cd8>)
 8003190:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003192:	4b3c      	ldr	r3, [pc, #240]	; (8003284 <menu+0x1cd8>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 800319a:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <menu+0x1cd8>)
 800319c:	2205      	movs	r2, #5
 800319e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80031a0:	f002 ff7a 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a4:	2108      	movs	r1, #8
 80031a6:	482d      	ldr	r0, [pc, #180]	; (800325c <menu+0x1cb0>)
 80031a8:	f006 fd52 	bl	8009c50 <HAL_GPIO_ReadPin>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10d      	bne.n	80031ce <menu+0x1c22>
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <menu+0x1cb4>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	f083 0301 	eor.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 80031c0:	4b30      	ldr	r3, [pc, #192]	; (8003284 <menu+0x1cd8>)
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <menu+0x1cb8>)
 80031c6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <menu+0x1cc0>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <menu+0x1cc4>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	f040 80bc 	bne.w	8003350 <menu+0x1da4>
		if(dilSecim == 0) {
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <menu+0x1ca4>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80031e0:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <menu+0x1ce4>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	2001      	movs	r0, #1
 80031e6:	f7fd fae7 	bl	80007b8 <lcd_print>
 80031ea:	e008      	b.n	80031fe <menu+0x1c52>
		} else if(dilSecim == 1) {
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <menu+0x1ca4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d104      	bne.n	80031fe <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80031f4:	4a27      	ldr	r2, [pc, #156]	; (8003294 <menu+0x1ce8>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7fd fadd 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <menu+0x1cec>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d113      	bne.n	800322e <menu+0x1c82>
			if(dilSecim == 0) {
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <menu+0x1ca4>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <menu+0x1ca8>)
 8003210:	2101      	movs	r1, #1
 8003212:	2002      	movs	r0, #2
 8003214:	f7fd fad0 	bl	80007b8 <lcd_print>
 8003218:	e04b      	b.n	80032b2 <menu+0x1d06>
			} else if(dilSecim == 1) {
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <menu+0x1ca4>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d147      	bne.n	80032b2 <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 8003222:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <menu+0x1cac>)
 8003224:	2101      	movs	r1, #1
 8003226:	2002      	movs	r0, #2
 8003228:	f7fd fac6 	bl	80007b8 <lcd_print>
 800322c:	e041      	b.n	80032b2 <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <menu+0x1cec>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d13d      	bne.n	80032b2 <menu+0x1d06>
			if(dilSecim == 0) {
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <menu+0x1ca4>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d130      	bne.n	80032a0 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <menu+0x1cf0>)
 8003240:	2101      	movs	r1, #1
 8003242:	2002      	movs	r0, #2
 8003244:	f7fd fab8 	bl	80007b8 <lcd_print>
 8003248:	e033      	b.n	80032b2 <menu+0x1d06>
 800324a:	bf00      	nop
 800324c:	20000c46 	.word	0x20000c46
 8003250:	20000c5a 	.word	0x20000c5a
 8003254:	0800db84 	.word	0x0800db84
 8003258:	0800db98 	.word	0x0800db98
 800325c:	40010800 	.word	0x40010800
 8003260:	20000c68 	.word	0x20000c68
 8003264:	20000b28 	.word	0x20000b28
 8003268:	20000c3f 	.word	0x20000c3f
 800326c:	20000c65 	.word	0x20000c65
 8003270:	20000c39 	.word	0x20000c39
 8003274:	0800df24 	.word	0x0800df24
 8003278:	0800dde8 	.word	0x0800dde8
 800327c:	0800df38 	.word	0x0800df38
 8003280:	0800de0c 	.word	0x0800de0c
 8003284:	20000c54 	.word	0x20000c54
 8003288:	20000bbc 	.word	0x20000bbc
 800328c:	20000c44 	.word	0x20000c44
 8003290:	0800df4c 	.word	0x0800df4c
 8003294:	0800df60 	.word	0x0800df60
 8003298:	20000c47 	.word	0x20000c47
 800329c:	0800dbe4 	.word	0x0800dbe4
			} else if(dilSecim == 1) {
 80032a0:	4b99      	ldr	r3, [pc, #612]	; (8003508 <menu+0x1f5c>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d104      	bne.n	80032b2 <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 80032a8:	4a98      	ldr	r2, [pc, #608]	; (800350c <menu+0x1f60>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	2002      	movs	r0, #2
 80032ae:	f7fd fa83 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b2:	2102      	movs	r1, #2
 80032b4:	4896      	ldr	r0, [pc, #600]	; (8003510 <menu+0x1f64>)
 80032b6:	f006 fccb 	bl	8009c50 <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d115      	bne.n	80032ec <menu+0x1d40>
 80032c0:	4b94      	ldr	r3, [pc, #592]	; (8003514 <menu+0x1f68>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 80032ce:	4b92      	ldr	r3, [pc, #584]	; (8003518 <menu+0x1f6c>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b90      	ldr	r3, [pc, #576]	; (8003518 <menu+0x1f6c>)
 80032d8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80032da:	4b8f      	ldr	r3, [pc, #572]	; (8003518 <menu+0x1f6c>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d902      	bls.n	80032e8 <menu+0x1d3c>
				yukariYavasLimit = 0;
 80032e2:	4b8d      	ldr	r3, [pc, #564]	; (8003518 <menu+0x1f6c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e8:	f002 fed6 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ec:	2104      	movs	r1, #4
 80032ee:	4888      	ldr	r0, [pc, #544]	; (8003510 <menu+0x1f64>)
 80032f0:	f006 fcae 	bl	8009c50 <HAL_GPIO_ReadPin>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d115      	bne.n	8003326 <menu+0x1d7a>
 80032fa:	4b86      	ldr	r3, [pc, #536]	; (8003514 <menu+0x1f68>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003308:	4b83      	ldr	r3, [pc, #524]	; (8003518 <menu+0x1f6c>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	4b81      	ldr	r3, [pc, #516]	; (8003518 <menu+0x1f6c>)
 8003312:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003314:	4b80      	ldr	r3, [pc, #512]	; (8003518 <menu+0x1f6c>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <menu+0x1d76>
		   		yukariYavasLimit = 1;
 800331c:	4b7e      	ldr	r3, [pc, #504]	; (8003518 <menu+0x1f6c>)
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003322:	f002 feb9 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003326:	2108      	movs	r1, #8
 8003328:	4879      	ldr	r0, [pc, #484]	; (8003510 <menu+0x1f64>)
 800332a:	f006 fc91 	bl	8009c50 <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10d      	bne.n	8003350 <menu+0x1da4>
 8003334:	4b77      	ldr	r3, [pc, #476]	; (8003514 <menu+0x1f68>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f083 0301 	eor.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 8003342:	4b75      	ldr	r3, [pc, #468]	; (8003518 <menu+0x1f6c>)
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	4b75      	ldr	r3, [pc, #468]	; (800351c <menu+0x1f70>)
 8003348:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800334a:	4b75      	ldr	r3, [pc, #468]	; (8003520 <menu+0x1f74>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003350:	4b74      	ldr	r3, [pc, #464]	; (8003524 <menu+0x1f78>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b11      	cmp	r3, #17
 8003356:	f040 80c3 	bne.w	80034e0 <menu+0x1f34>
		if(dilSecim == 0) {
 800335a:	4b6b      	ldr	r3, [pc, #428]	; (8003508 <menu+0x1f5c>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003362:	4a71      	ldr	r2, [pc, #452]	; (8003528 <menu+0x1f7c>)
 8003364:	2101      	movs	r1, #1
 8003366:	2001      	movs	r0, #1
 8003368:	f7fd fa26 	bl	80007b8 <lcd_print>
 800336c:	e008      	b.n	8003380 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 800336e:	4b66      	ldr	r3, [pc, #408]	; (8003508 <menu+0x1f5c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d104      	bne.n	8003380 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003376:	4a6d      	ldr	r2, [pc, #436]	; (800352c <menu+0x1f80>)
 8003378:	2101      	movs	r1, #1
 800337a:	2001      	movs	r0, #1
 800337c:	f7fd fa1c 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003380:	4b6b      	ldr	r3, [pc, #428]	; (8003530 <menu+0x1f84>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d113      	bne.n	80033b0 <menu+0x1e04>
			if(dilSecim == 0){
 8003388:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <menu+0x1f5c>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 8003390:	4a68      	ldr	r2, [pc, #416]	; (8003534 <menu+0x1f88>)
 8003392:	2101      	movs	r1, #1
 8003394:	2002      	movs	r0, #2
 8003396:	f7fd fa0f 	bl	80007b8 <lcd_print>
 800339a:	e038      	b.n	800340e <menu+0x1e62>
			} else if(dilSecim == 1){
 800339c:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <menu+0x1f5c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d134      	bne.n	800340e <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 80033a4:	4a64      	ldr	r2, [pc, #400]	; (8003538 <menu+0x1f8c>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	2002      	movs	r0, #2
 80033aa:	f7fd fa05 	bl	80007b8 <lcd_print>
 80033ae:	e02e      	b.n	800340e <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033b0:	4b5f      	ldr	r3, [pc, #380]	; (8003530 <menu+0x1f84>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d113      	bne.n	80033e0 <menu+0x1e34>
			if(dilSecim == 0){
 80033b8:	4b53      	ldr	r3, [pc, #332]	; (8003508 <menu+0x1f5c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80033c0:	4a5e      	ldr	r2, [pc, #376]	; (800353c <menu+0x1f90>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	2002      	movs	r0, #2
 80033c6:	f7fd f9f7 	bl	80007b8 <lcd_print>
 80033ca:	e020      	b.n	800340e <menu+0x1e62>
			} else if(dilSecim == 1) {
 80033cc:	4b4e      	ldr	r3, [pc, #312]	; (8003508 <menu+0x1f5c>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d11c      	bne.n	800340e <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 80033d4:	4a5a      	ldr	r2, [pc, #360]	; (8003540 <menu+0x1f94>)
 80033d6:	2101      	movs	r1, #1
 80033d8:	2002      	movs	r0, #2
 80033da:	f7fd f9ed 	bl	80007b8 <lcd_print>
 80033de:	e016      	b.n	800340e <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <menu+0x1f84>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d112      	bne.n	800340e <menu+0x1e62>
			if(dilSecim == 0) {
 80033e8:	4b47      	ldr	r3, [pc, #284]	; (8003508 <menu+0x1f5c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 80033f0:	4a54      	ldr	r2, [pc, #336]	; (8003544 <menu+0x1f98>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	2002      	movs	r0, #2
 80033f6:	f7fd f9df 	bl	80007b8 <lcd_print>
 80033fa:	e008      	b.n	800340e <menu+0x1e62>
			} else if(dilSecim == 1) {
 80033fc:	4b42      	ldr	r3, [pc, #264]	; (8003508 <menu+0x1f5c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d104      	bne.n	800340e <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 8003404:	4a50      	ldr	r2, [pc, #320]	; (8003548 <menu+0x1f9c>)
 8003406:	2101      	movs	r1, #1
 8003408:	2002      	movs	r0, #2
 800340a:	f7fd f9d5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800340e:	2102      	movs	r1, #2
 8003410:	483f      	ldr	r0, [pc, #252]	; (8003510 <menu+0x1f64>)
 8003412:	f006 fc1d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003416:	4603      	mov	r3, r0
 8003418:	2b01      	cmp	r3, #1
 800341a:	d115      	bne.n	8003448 <menu+0x1e9c>
 800341c:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <menu+0x1f68>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	f083 0301 	eor.w	r3, r3, #1
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00e      	beq.n	8003448 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <menu+0x1f84>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <menu+0x1f84>)
 8003434:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003436:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <menu+0x1f84>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 800343e:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <menu+0x1f84>)
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003444:	f002 fe28 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003448:	2104      	movs	r1, #4
 800344a:	4831      	ldr	r0, [pc, #196]	; (8003510 <menu+0x1f64>)
 800344c:	f006 fc00 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	d115      	bne.n	8003482 <menu+0x1ed6>
 8003456:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <menu+0x1f68>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	f083 0301 	eor.w	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <menu+0x1f84>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4b30      	ldr	r3, [pc, #192]	; (8003530 <menu+0x1f84>)
 800346e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003470:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <menu+0x1f84>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d902      	bls.n	800347e <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <menu+0x1f84>)
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800347e:	f002 fe0b 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003482:	2108      	movs	r1, #8
 8003484:	4822      	ldr	r0, [pc, #136]	; (8003510 <menu+0x1f64>)
 8003486:	f006 fbe3 	bl	8009c50 <HAL_GPIO_ReadPin>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d127      	bne.n	80034e0 <menu+0x1f34>
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <menu+0x1f68>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f083 0301 	eor.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d020      	beq.n	80034e0 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <menu+0x1f84>)
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	4b1e      	ldr	r3, [pc, #120]	; (800351c <menu+0x1f70>)
 80034a4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80034a6:	4b22      	ldr	r3, [pc, #136]	; (8003530 <menu+0x1f84>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d003      	beq.n	80034b6 <menu+0x1f0a>
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <menu+0x1f84>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d106      	bne.n	80034c4 <menu+0x1f18>
				calismaSekli = 0;
 80034b6:	4b25      	ldr	r3, [pc, #148]	; (800354c <menu+0x1fa0>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80034bc:	4b23      	ldr	r3, [pc, #140]	; (800354c <menu+0x1fa0>)
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	4b16      	ldr	r3, [pc, #88]	; (800351c <menu+0x1f70>)
 80034c2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <menu+0x1f84>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d106      	bne.n	80034da <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 80034cc:	4b20      	ldr	r3, [pc, #128]	; (8003550 <menu+0x1fa4>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <menu+0x1fa4>)
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <menu+0x1f70>)
 80034d8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <menu+0x1f74>)
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <menu+0x1f78>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b12      	cmp	r3, #18
 80034e6:	f040 80d5 	bne.w	8003694 <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <menu+0x1f84>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d13c      	bne.n	800356c <menu+0x1fc0>
			if(dilSecim == 0) {
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <menu+0x1f5c>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d12e      	bne.n	8003558 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <menu+0x1fa8>)
 80034fc:	2101      	movs	r1, #1
 80034fe:	2001      	movs	r0, #1
 8003500:	f7fd f95a 	bl	80007b8 <lcd_print>
 8003504:	e048      	b.n	8003598 <menu+0x1fec>
 8003506:	bf00      	nop
 8003508:	20000c5a 	.word	0x20000c5a
 800350c:	0800dbf8 	.word	0x0800dbf8
 8003510:	40010800 	.word	0x40010800
 8003514:	20000c68 	.word	0x20000c68
 8003518:	20000c47 	.word	0x20000c47
 800351c:	20000b28 	.word	0x20000b28
 8003520:	20000c65 	.word	0x20000c65
 8003524:	20000c39 	.word	0x20000c39
 8003528:	0800df74 	.word	0x0800df74
 800352c:	0800df88 	.word	0x0800df88
 8003530:	20000c48 	.word	0x20000c48
 8003534:	0800df9c 	.word	0x0800df9c
 8003538:	0800dfac 	.word	0x0800dfac
 800353c:	0800dfbc 	.word	0x0800dfbc
 8003540:	0800dfcc 	.word	0x0800dfcc
 8003544:	0800db84 	.word	0x0800db84
 8003548:	0800db98 	.word	0x0800db98
 800354c:	20000c3a 	.word	0x20000c3a
 8003550:	20000c4b 	.word	0x20000c4b
 8003554:	0800dfdc 	.word	0x0800dfdc
			} else if(dilSecim == 1) {
 8003558:	4b7b      	ldr	r3, [pc, #492]	; (8003748 <menu+0x219c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d11b      	bne.n	8003598 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003560:	4a7a      	ldr	r2, [pc, #488]	; (800374c <menu+0x21a0>)
 8003562:	2101      	movs	r1, #1
 8003564:	2001      	movs	r0, #1
 8003566:	f7fd f927 	bl	80007b8 <lcd_print>
 800356a:	e015      	b.n	8003598 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800356c:	4b78      	ldr	r3, [pc, #480]	; (8003750 <menu+0x21a4>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d111      	bne.n	8003598 <menu+0x1fec>
			if(dilSecim == 0){
 8003574:	4b74      	ldr	r3, [pc, #464]	; (8003748 <menu+0x219c>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d104      	bne.n	8003586 <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800357c:	4a75      	ldr	r2, [pc, #468]	; (8003754 <menu+0x21a8>)
 800357e:	2101      	movs	r1, #1
 8003580:	2001      	movs	r0, #1
 8003582:	f7fd f919 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 8003586:	4b70      	ldr	r3, [pc, #448]	; (8003748 <menu+0x219c>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d104      	bne.n	8003598 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800358e:	4a72      	ldr	r2, [pc, #456]	; (8003758 <menu+0x21ac>)
 8003590:	2101      	movs	r1, #1
 8003592:	2001      	movs	r0, #1
 8003594:	f7fd f910 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003598:	4b70      	ldr	r3, [pc, #448]	; (800375c <menu+0x21b0>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d113      	bne.n	80035c8 <menu+0x201c>
			if(dilSecim == 0) {
 80035a0:	4b69      	ldr	r3, [pc, #420]	; (8003748 <menu+0x219c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 80035a8:	4a6d      	ldr	r2, [pc, #436]	; (8003760 <menu+0x21b4>)
 80035aa:	2101      	movs	r1, #1
 80035ac:	2002      	movs	r0, #2
 80035ae:	f7fd f903 	bl	80007b8 <lcd_print>
 80035b2:	e020      	b.n	80035f6 <menu+0x204a>
			} else if(dilSecim == 1){
 80035b4:	4b64      	ldr	r3, [pc, #400]	; (8003748 <menu+0x219c>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d11c      	bne.n	80035f6 <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 80035bc:	4a69      	ldr	r2, [pc, #420]	; (8003764 <menu+0x21b8>)
 80035be:	2101      	movs	r1, #1
 80035c0:	2002      	movs	r0, #2
 80035c2:	f7fd f8f9 	bl	80007b8 <lcd_print>
 80035c6:	e016      	b.n	80035f6 <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80035c8:	4b64      	ldr	r3, [pc, #400]	; (800375c <menu+0x21b0>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d112      	bne.n	80035f6 <menu+0x204a>
			if(dilSecim == 0){
 80035d0:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <menu+0x219c>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 80035d8:	4a63      	ldr	r2, [pc, #396]	; (8003768 <menu+0x21bc>)
 80035da:	2101      	movs	r1, #1
 80035dc:	2002      	movs	r0, #2
 80035de:	f7fd f8eb 	bl	80007b8 <lcd_print>
 80035e2:	e008      	b.n	80035f6 <menu+0x204a>
			} else if(dilSecim == 1){
 80035e4:	4b58      	ldr	r3, [pc, #352]	; (8003748 <menu+0x219c>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d104      	bne.n	80035f6 <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 80035ec:	4a5f      	ldr	r2, [pc, #380]	; (800376c <menu+0x21c0>)
 80035ee:	2101      	movs	r1, #1
 80035f0:	2002      	movs	r0, #2
 80035f2:	f7fd f8e1 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035f6:	2102      	movs	r1, #2
 80035f8:	485d      	ldr	r0, [pc, #372]	; (8003770 <menu+0x21c4>)
 80035fa:	f006 fb29 	bl	8009c50 <HAL_GPIO_ReadPin>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d115      	bne.n	8003630 <menu+0x2084>
 8003604:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <menu+0x21c8>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f083 0301 	eor.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003612:	4b52      	ldr	r3, [pc, #328]	; (800375c <menu+0x21b0>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b50      	ldr	r3, [pc, #320]	; (800375c <menu+0x21b0>)
 800361c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800361e:	4b4f      	ldr	r3, [pc, #316]	; (800375c <menu+0x21b0>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d902      	bls.n	800362c <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 8003626:	4b4d      	ldr	r3, [pc, #308]	; (800375c <menu+0x21b0>)
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800362c:	f002 fd34 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003630:	2104      	movs	r1, #4
 8003632:	484f      	ldr	r0, [pc, #316]	; (8003770 <menu+0x21c4>)
 8003634:	f006 fb0c 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d115      	bne.n	800366a <menu+0x20be>
 800363e:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <menu+0x21c8>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	f083 0301 	eor.w	r3, r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00e      	beq.n	800366a <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <menu+0x21b0>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	3b01      	subs	r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	4b41      	ldr	r3, [pc, #260]	; (800375c <menu+0x21b0>)
 8003656:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003658:	4b40      	ldr	r3, [pc, #256]	; (800375c <menu+0x21b0>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 8003660:	4b3e      	ldr	r3, [pc, #248]	; (800375c <menu+0x21b0>)
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003666:	f002 fd17 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800366a:	2108      	movs	r1, #8
 800366c:	4840      	ldr	r0, [pc, #256]	; (8003770 <menu+0x21c4>)
 800366e:	f006 faef 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10d      	bne.n	8003694 <menu+0x20e8>
 8003678:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <menu+0x21c8>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	f083 0301 	eor.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 8003686:	4b35      	ldr	r3, [pc, #212]	; (800375c <menu+0x21b0>)
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <menu+0x21cc>)
 800368c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <menu+0x21d0>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003694:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <menu+0x21d4>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b13      	cmp	r3, #19
 800369a:	f040 80d5 	bne.w	8003848 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 800369e:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <menu+0x21a4>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d113      	bne.n	80036ce <menu+0x2122>
			if(dilSecim == 0) {
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <menu+0x219c>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80036ae:	4a35      	ldr	r2, [pc, #212]	; (8003784 <menu+0x21d8>)
 80036b0:	2101      	movs	r1, #1
 80036b2:	2001      	movs	r0, #1
 80036b4:	f7fd f880 	bl	80007b8 <lcd_print>
 80036b8:	e01f      	b.n	80036fa <menu+0x214e>
			} else if(dilSecim == 1) {
 80036ba:	4b23      	ldr	r3, [pc, #140]	; (8003748 <menu+0x219c>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d11b      	bne.n	80036fa <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80036c2:	4a31      	ldr	r2, [pc, #196]	; (8003788 <menu+0x21dc>)
 80036c4:	2101      	movs	r1, #1
 80036c6:	2001      	movs	r0, #1
 80036c8:	f7fd f876 	bl	80007b8 <lcd_print>
 80036cc:	e015      	b.n	80036fa <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <menu+0x21a4>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d111      	bne.n	80036fa <menu+0x214e>
			if(dilSecim == 0) {
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <menu+0x219c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80036de:	4a2b      	ldr	r2, [pc, #172]	; (800378c <menu+0x21e0>)
 80036e0:	2101      	movs	r1, #1
 80036e2:	2001      	movs	r0, #1
 80036e4:	f7fd f868 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 80036e8:	4b17      	ldr	r3, [pc, #92]	; (8003748 <menu+0x219c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d104      	bne.n	80036fa <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80036f0:	4a27      	ldr	r2, [pc, #156]	; (8003790 <menu+0x21e4>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	2001      	movs	r0, #1
 80036f6:	f7fd f85f 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <menu+0x21e8>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <menu+0x217e>
			if(dilSecim == 0) {
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <menu+0x219c>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 800370a:	4a15      	ldr	r2, [pc, #84]	; (8003760 <menu+0x21b4>)
 800370c:	2101      	movs	r1, #1
 800370e:	2002      	movs	r0, #2
 8003710:	f7fd f852 	bl	80007b8 <lcd_print>
 8003714:	e049      	b.n	80037aa <menu+0x21fe>
			} else if(dilSecim == 1) {
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <menu+0x219c>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d145      	bne.n	80037aa <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 800371e:	4a11      	ldr	r2, [pc, #68]	; (8003764 <menu+0x21b8>)
 8003720:	2101      	movs	r1, #1
 8003722:	2002      	movs	r0, #2
 8003724:	f7fd f848 	bl	80007b8 <lcd_print>
 8003728:	e03f      	b.n	80037aa <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <menu+0x21e8>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d13b      	bne.n	80037aa <menu+0x21fe>
			if(dilSecim == 0) {
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <menu+0x219c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d12e      	bne.n	8003798 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 800373a:	4a0b      	ldr	r2, [pc, #44]	; (8003768 <menu+0x21bc>)
 800373c:	2101      	movs	r1, #1
 800373e:	2002      	movs	r0, #2
 8003740:	f7fd f83a 	bl	80007b8 <lcd_print>
 8003744:	e031      	b.n	80037aa <menu+0x21fe>
 8003746:	bf00      	nop
 8003748:	20000c5a 	.word	0x20000c5a
 800374c:	0800dff0 	.word	0x0800dff0
 8003750:	20000c48 	.word	0x20000c48
 8003754:	0800e000 	.word	0x0800e000
 8003758:	0800e014 	.word	0x0800e014
 800375c:	20000c49 	.word	0x20000c49
 8003760:	0800db84 	.word	0x0800db84
 8003764:	0800db98 	.word	0x0800db98
 8003768:	0800dbe4 	.word	0x0800dbe4
 800376c:	0800dbf8 	.word	0x0800dbf8
 8003770:	40010800 	.word	0x40010800
 8003774:	20000c68 	.word	0x20000c68
 8003778:	20000b28 	.word	0x20000b28
 800377c:	20000c65 	.word	0x20000c65
 8003780:	20000c39 	.word	0x20000c39
 8003784:	0800e028 	.word	0x0800e028
 8003788:	0800e03c 	.word	0x0800e03c
 800378c:	0800e050 	.word	0x0800e050
 8003790:	0800e064 	.word	0x0800e064
 8003794:	20000c4a 	.word	0x20000c4a
			} else if(dilSecim == 1) {
 8003798:	4b90      	ldr	r3, [pc, #576]	; (80039dc <menu+0x2430>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d104      	bne.n	80037aa <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 80037a0:	4a8f      	ldr	r2, [pc, #572]	; (80039e0 <menu+0x2434>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	2002      	movs	r0, #2
 80037a6:	f7fd f807 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037aa:	2102      	movs	r1, #2
 80037ac:	488d      	ldr	r0, [pc, #564]	; (80039e4 <menu+0x2438>)
 80037ae:	f006 fa4f 	bl	8009c50 <HAL_GPIO_ReadPin>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d115      	bne.n	80037e4 <menu+0x2238>
 80037b8:	4b8b      	ldr	r3, [pc, #556]	; (80039e8 <menu+0x243c>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	f083 0301 	eor.w	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00e      	beq.n	80037e4 <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80037c6:	4b89      	ldr	r3, [pc, #548]	; (80039ec <menu+0x2440>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4b87      	ldr	r3, [pc, #540]	; (80039ec <menu+0x2440>)
 80037d0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80037d2:	4b86      	ldr	r3, [pc, #536]	; (80039ec <menu+0x2440>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d902      	bls.n	80037e0 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 80037da:	4b84      	ldr	r3, [pc, #528]	; (80039ec <menu+0x2440>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037e0:	f002 fc5a 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037e4:	2104      	movs	r1, #4
 80037e6:	487f      	ldr	r0, [pc, #508]	; (80039e4 <menu+0x2438>)
 80037e8:	f006 fa32 	bl	8009c50 <HAL_GPIO_ReadPin>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d115      	bne.n	800381e <menu+0x2272>
 80037f2:	4b7d      	ldr	r3, [pc, #500]	; (80039e8 <menu+0x243c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	f083 0301 	eor.w	r3, r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003800:	4b7a      	ldr	r3, [pc, #488]	; (80039ec <menu+0x2440>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	3b01      	subs	r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	4b78      	ldr	r3, [pc, #480]	; (80039ec <menu+0x2440>)
 800380a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800380c:	4b77      	ldr	r3, [pc, #476]	; (80039ec <menu+0x2440>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 8003814:	4b75      	ldr	r3, [pc, #468]	; (80039ec <menu+0x2440>)
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800381a:	f002 fc3d 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800381e:	2108      	movs	r1, #8
 8003820:	4870      	ldr	r0, [pc, #448]	; (80039e4 <menu+0x2438>)
 8003822:	f006 fa15 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10d      	bne.n	8003848 <menu+0x229c>
 800382c:	4b6e      	ldr	r3, [pc, #440]	; (80039e8 <menu+0x243c>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	f083 0301 	eor.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 800383a:	4b6c      	ldr	r3, [pc, #432]	; (80039ec <menu+0x2440>)
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	4b6c      	ldr	r3, [pc, #432]	; (80039f0 <menu+0x2444>)
 8003840:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003842:	4b6c      	ldr	r3, [pc, #432]	; (80039f4 <menu+0x2448>)
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003848:	4b6b      	ldr	r3, [pc, #428]	; (80039f8 <menu+0x244c>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b14      	cmp	r3, #20
 800384e:	f040 80b5 	bne.w	80039bc <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 8003852:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <menu+0x2450>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d113      	bne.n	8003882 <menu+0x22d6>
			if(dilSecim == 0) {
 800385a:	4b60      	ldr	r3, [pc, #384]	; (80039dc <menu+0x2430>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003862:	4a67      	ldr	r2, [pc, #412]	; (8003a00 <menu+0x2454>)
 8003864:	2101      	movs	r1, #1
 8003866:	2001      	movs	r0, #1
 8003868:	f7fc ffa6 	bl	80007b8 <lcd_print>
 800386c:	e020      	b.n	80038b0 <menu+0x2304>
			} else if(dilSecim == 1) {
 800386e:	4b5b      	ldr	r3, [pc, #364]	; (80039dc <menu+0x2430>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d11c      	bne.n	80038b0 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003876:	4a63      	ldr	r2, [pc, #396]	; (8003a04 <menu+0x2458>)
 8003878:	2101      	movs	r1, #1
 800387a:	2001      	movs	r0, #1
 800387c:	f7fc ff9c 	bl	80007b8 <lcd_print>
 8003880:	e016      	b.n	80038b0 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003882:	4b5e      	ldr	r3, [pc, #376]	; (80039fc <menu+0x2450>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d112      	bne.n	80038b0 <menu+0x2304>
			if(dilSecim == 0) {
 800388a:	4b54      	ldr	r3, [pc, #336]	; (80039dc <menu+0x2430>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003892:	4a5d      	ldr	r2, [pc, #372]	; (8003a08 <menu+0x245c>)
 8003894:	2101      	movs	r1, #1
 8003896:	2001      	movs	r0, #1
 8003898:	f7fc ff8e 	bl	80007b8 <lcd_print>
 800389c:	e008      	b.n	80038b0 <menu+0x2304>
			} else if(dilSecim == 1) {
 800389e:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <menu+0x2430>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d104      	bne.n	80038b0 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80038a6:	4a59      	ldr	r2, [pc, #356]	; (8003a0c <menu+0x2460>)
 80038a8:	2101      	movs	r1, #1
 80038aa:	2001      	movs	r0, #1
 80038ac:	f7fc ff84 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80038b0:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <menu+0x2464>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d113      	bne.n	80038e0 <menu+0x2334>
			if(dilSecim == 0) {
 80038b8:	4b48      	ldr	r3, [pc, #288]	; (80039dc <menu+0x2430>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 80038c0:	4a54      	ldr	r2, [pc, #336]	; (8003a14 <menu+0x2468>)
 80038c2:	2101      	movs	r1, #1
 80038c4:	2002      	movs	r0, #2
 80038c6:	f7fc ff77 	bl	80007b8 <lcd_print>
 80038ca:	e020      	b.n	800390e <menu+0x2362>
			} else if(dilSecim == 1) {
 80038cc:	4b43      	ldr	r3, [pc, #268]	; (80039dc <menu+0x2430>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d11c      	bne.n	800390e <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 80038d4:	4a50      	ldr	r2, [pc, #320]	; (8003a18 <menu+0x246c>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	2002      	movs	r0, #2
 80038da:	f7fc ff6d 	bl	80007b8 <lcd_print>
 80038de:	e016      	b.n	800390e <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 80038e0:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <menu+0x2464>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d112      	bne.n	800390e <menu+0x2362>
			if(dilSecim == 0) {
 80038e8:	4b3c      	ldr	r3, [pc, #240]	; (80039dc <menu+0x2430>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d105      	bne.n	80038fc <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 80038f0:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <menu+0x2470>)
 80038f2:	2101      	movs	r1, #1
 80038f4:	2002      	movs	r0, #2
 80038f6:	f7fc ff5f 	bl	80007b8 <lcd_print>
 80038fa:	e008      	b.n	800390e <menu+0x2362>
			} else if(dilSecim == 1) {
 80038fc:	4b37      	ldr	r3, [pc, #220]	; (80039dc <menu+0x2430>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d104      	bne.n	800390e <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 8003904:	4a46      	ldr	r2, [pc, #280]	; (8003a20 <menu+0x2474>)
 8003906:	2101      	movs	r1, #1
 8003908:	2002      	movs	r0, #2
 800390a:	f7fc ff55 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800390e:	2102      	movs	r1, #2
 8003910:	4834      	ldr	r0, [pc, #208]	; (80039e4 <menu+0x2438>)
 8003912:	f006 f99d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d119      	bne.n	8003950 <menu+0x23a4>
 800391c:	4b32      	ldr	r3, [pc, #200]	; (80039e8 <menu+0x243c>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d012      	beq.n	8003950 <menu+0x23a4>
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <menu+0x2450>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d10e      	bne.n	8003950 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003932:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <menu+0x2464>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <menu+0x2464>)
 800393c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800393e:	4b34      	ldr	r3, [pc, #208]	; (8003a10 <menu+0x2464>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d902      	bls.n	800394c <menu+0x23a0>
				devirmeSilindirTipi = 0;
 8003946:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <menu+0x2464>)
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800394c:	f002 fba4 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003950:	2104      	movs	r1, #4
 8003952:	4824      	ldr	r0, [pc, #144]	; (80039e4 <menu+0x2438>)
 8003954:	f006 f97c 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003958:	4603      	mov	r3, r0
 800395a:	2b01      	cmp	r3, #1
 800395c:	d119      	bne.n	8003992 <menu+0x23e6>
 800395e:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <menu+0x243c>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	f083 0301 	eor.w	r3, r3, #1
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <menu+0x23e6>
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <menu+0x2450>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d10e      	bne.n	8003992 <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003974:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <menu+0x2464>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	3b01      	subs	r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <menu+0x2464>)
 800397e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003980:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <menu+0x2464>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 8003988:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <menu+0x2464>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800398e:	f002 fb83 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003992:	2108      	movs	r1, #8
 8003994:	4813      	ldr	r0, [pc, #76]	; (80039e4 <menu+0x2438>)
 8003996:	f006 f95b 	bl	8009c50 <HAL_GPIO_ReadPin>
 800399a:	4603      	mov	r3, r0
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10d      	bne.n	80039bc <menu+0x2410>
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <menu+0x243c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	f083 0301 	eor.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <menu+0x2464>)
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <menu+0x2444>)
 80039b4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <menu+0x2448>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <menu+0x244c>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b15      	cmp	r3, #21
 80039c2:	f040 80c2 	bne.w	8003b4a <menu+0x259e>
		if(dilSecim == 0) {
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <menu+0x2430>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d12c      	bne.n	8003a28 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80039ce:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <menu+0x2478>)
 80039d0:	2101      	movs	r1, #1
 80039d2:	2001      	movs	r0, #1
 80039d4:	f7fc fef0 	bl	80007b8 <lcd_print>
 80039d8:	e02f      	b.n	8003a3a <menu+0x248e>
 80039da:	bf00      	nop
 80039dc:	20000c5a 	.word	0x20000c5a
 80039e0:	0800dbf8 	.word	0x0800dbf8
 80039e4:	40010800 	.word	0x40010800
 80039e8:	20000c68 	.word	0x20000c68
 80039ec:	20000c4a 	.word	0x20000c4a
 80039f0:	20000b28 	.word	0x20000b28
 80039f4:	20000c65 	.word	0x20000c65
 80039f8:	20000c39 	.word	0x20000c39
 80039fc:	20000c48 	.word	0x20000c48
 8003a00:	0800e078 	.word	0x0800e078
 8003a04:	0800e08c 	.word	0x0800e08c
 8003a08:	0800e0a0 	.word	0x0800e0a0
 8003a0c:	0800e0b4 	.word	0x0800e0b4
 8003a10:	20000c4b 	.word	0x20000c4b
 8003a14:	0800e0c8 	.word	0x0800e0c8
 8003a18:	0800e0dc 	.word	0x0800e0dc
 8003a1c:	0800e0ec 	.word	0x0800e0ec
 8003a20:	0800e100 	.word	0x0800e100
 8003a24:	0800e110 	.word	0x0800e110
		} else if(dilSecim == 1) {
 8003a28:	4b9c      	ldr	r3, [pc, #624]	; (8003c9c <menu+0x26f0>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d104      	bne.n	8003a3a <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003a30:	4a9b      	ldr	r2, [pc, #620]	; (8003ca0 <menu+0x26f4>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	2001      	movs	r0, #1
 8003a36:	f7fc febf 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003a3a:	4b9a      	ldr	r3, [pc, #616]	; (8003ca4 <menu+0x26f8>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d112      	bne.n	8003a68 <menu+0x24bc>
			if(dilSecim == 0) {
 8003a42:	4b96      	ldr	r3, [pc, #600]	; (8003c9c <menu+0x26f0>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 8003a4a:	4a97      	ldr	r2, [pc, #604]	; (8003ca8 <menu+0x26fc>)
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	2002      	movs	r0, #2
 8003a50:	f7fc feb2 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a54:	4b91      	ldr	r3, [pc, #580]	; (8003c9c <menu+0x26f0>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d11c      	bne.n	8003a96 <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 8003a5c:	4a93      	ldr	r2, [pc, #588]	; (8003cac <menu+0x2700>)
 8003a5e:	2101      	movs	r1, #1
 8003a60:	2002      	movs	r0, #2
 8003a62:	f7fc fea9 	bl	80007b8 <lcd_print>
 8003a66:	e016      	b.n	8003a96 <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8003a68:	4b8e      	ldr	r3, [pc, #568]	; (8003ca4 <menu+0x26f8>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d112      	bne.n	8003a96 <menu+0x24ea>
			if(dilSecim == 0) {
 8003a70:	4b8a      	ldr	r3, [pc, #552]	; (8003c9c <menu+0x26f0>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 8003a78:	4a8d      	ldr	r2, [pc, #564]	; (8003cb0 <menu+0x2704>)
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	2002      	movs	r0, #2
 8003a7e:	f7fc fe9b 	bl	80007b8 <lcd_print>
 8003a82:	e008      	b.n	8003a96 <menu+0x24ea>
			} else if(dilSecim == 1) {
 8003a84:	4b85      	ldr	r3, [pc, #532]	; (8003c9c <menu+0x26f0>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d104      	bne.n	8003a96 <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 8003a8c:	4a89      	ldr	r2, [pc, #548]	; (8003cb4 <menu+0x2708>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	2002      	movs	r0, #2
 8003a92:	f7fc fe91 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a96:	2102      	movs	r1, #2
 8003a98:	4887      	ldr	r0, [pc, #540]	; (8003cb8 <menu+0x270c>)
 8003a9a:	f006 f8d9 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d115      	bne.n	8003ad0 <menu+0x2524>
 8003aa4:	4b85      	ldr	r3, [pc, #532]	; (8003cbc <menu+0x2710>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	f083 0301 	eor.w	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00e      	beq.n	8003ad0 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003ab2:	4b7c      	ldr	r3, [pc, #496]	; (8003ca4 <menu+0x26f8>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b7a      	ldr	r3, [pc, #488]	; (8003ca4 <menu+0x26f8>)
 8003abc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003abe:	4b79      	ldr	r3, [pc, #484]	; (8003ca4 <menu+0x26f8>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d902      	bls.n	8003acc <menu+0x2520>
				platformSilindirTipi = 0;
 8003ac6:	4b77      	ldr	r3, [pc, #476]	; (8003ca4 <menu+0x26f8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003acc:	f002 fae4 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ad0:	2104      	movs	r1, #4
 8003ad2:	4879      	ldr	r0, [pc, #484]	; (8003cb8 <menu+0x270c>)
 8003ad4:	f006 f8bc 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d115      	bne.n	8003b0a <menu+0x255e>
 8003ade:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <menu+0x2710>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	f083 0301 	eor.w	r3, r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003aec:	4b6d      	ldr	r3, [pc, #436]	; (8003ca4 <menu+0x26f8>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	4b6b      	ldr	r3, [pc, #428]	; (8003ca4 <menu+0x26f8>)
 8003af6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003af8:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <menu+0x26f8>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <menu+0x255a>
		   		platformSilindirTipi = 1;
 8003b00:	4b68      	ldr	r3, [pc, #416]	; (8003ca4 <menu+0x26f8>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b06:	f002 fac7 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b0a:	2108      	movs	r1, #8
 8003b0c:	486a      	ldr	r0, [pc, #424]	; (8003cb8 <menu+0x270c>)
 8003b0e:	f006 f89f 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d118      	bne.n	8003b4a <menu+0x259e>
 8003b18:	4b68      	ldr	r3, [pc, #416]	; (8003cbc <menu+0x2710>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	f083 0301 	eor.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d011      	beq.n	8003b4a <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 8003b26:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <menu+0x26f8>)
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	4b65      	ldr	r3, [pc, #404]	; (8003cc0 <menu+0x2714>)
 8003b2c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003b2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ca4 <menu+0x26f8>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d106      	bne.n	8003b44 <menu+0x2598>
				altLimit = 1;
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <menu+0x2718>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003b3c:	4b61      	ldr	r3, [pc, #388]	; (8003cc4 <menu+0x2718>)
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	4b5f      	ldr	r3, [pc, #380]	; (8003cc0 <menu+0x2714>)
 8003b42:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003b44:	4b60      	ldr	r3, [pc, #384]	; (8003cc8 <menu+0x271c>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003b4a:	4b60      	ldr	r3, [pc, #384]	; (8003ccc <menu+0x2720>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b16      	cmp	r3, #22
 8003b50:	f040 8081 	bne.w	8003c56 <menu+0x26aa>
		if(dilSecim == 0) {
 8003b54:	4b51      	ldr	r3, [pc, #324]	; (8003c9c <menu+0x26f0>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003b5c:	4a5c      	ldr	r2, [pc, #368]	; (8003cd0 <menu+0x2724>)
 8003b5e:	2101      	movs	r1, #1
 8003b60:	2001      	movs	r0, #1
 8003b62:	f7fc fe29 	bl	80007b8 <lcd_print>
 8003b66:	e008      	b.n	8003b7a <menu+0x25ce>
		} else if(dilSecim == 1) {
 8003b68:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <menu+0x26f0>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d104      	bne.n	8003b7a <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003b70:	4a58      	ldr	r2, [pc, #352]	; (8003cd4 <menu+0x2728>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	2001      	movs	r0, #1
 8003b76:	f7fc fe1f 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b7a:	4b48      	ldr	r3, [pc, #288]	; (8003c9c <menu+0x26f0>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d105      	bne.n	8003b8e <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b82:	4a55      	ldr	r2, [pc, #340]	; (8003cd8 <menu+0x272c>)
 8003b84:	2101      	movs	r1, #1
 8003b86:	2002      	movs	r0, #2
 8003b88:	f7fc fe16 	bl	80007b8 <lcd_print>
 8003b8c:	e008      	b.n	8003ba0 <menu+0x25f4>
			} else if(dilSecim == 1){
 8003b8e:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <menu+0x26f0>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d104      	bne.n	8003ba0 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8003b96:	4a51      	ldr	r2, [pc, #324]	; (8003cdc <menu+0x2730>)
 8003b98:	2101      	movs	r1, #1
 8003b9a:	2002      	movs	r0, #2
 8003b9c:	f7fc fe0c 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003ba0:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <menu+0x2734>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	220a      	movs	r2, #10
 8003ba6:	494f      	ldr	r1, [pc, #316]	; (8003ce4 <menu+0x2738>)
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f009 f87d 	bl	800cca8 <itoa>
		lcd_print(2,16,snum);
 8003bae:	4a4d      	ldr	r2, [pc, #308]	; (8003ce4 <menu+0x2738>)
 8003bb0:	2110      	movs	r1, #16
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	f7fc fe00 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bb8:	2102      	movs	r1, #2
 8003bba:	483f      	ldr	r0, [pc, #252]	; (8003cb8 <menu+0x270c>)
 8003bbc:	f006 f848 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d115      	bne.n	8003bf2 <menu+0x2646>
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <menu+0x2710>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f083 0301 	eor.w	r3, r3, #1
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8003bd4:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <menu+0x2734>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <menu+0x2734>)
 8003bde:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003be0:	4b3f      	ldr	r3, [pc, #252]	; (8003ce0 <menu+0x2734>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	d902      	bls.n	8003bee <menu+0x2642>
				yukariValfTmr = 0;
 8003be8:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <menu+0x2734>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bee:	f002 fa53 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	4830      	ldr	r0, [pc, #192]	; (8003cb8 <menu+0x270c>)
 8003bf6:	f006 f82b 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d115      	bne.n	8003c2c <menu+0x2680>
 8003c00:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <menu+0x2710>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	f083 0301 	eor.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00e      	beq.n	8003c2c <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 8003c0e:	4b34      	ldr	r3, [pc, #208]	; (8003ce0 <menu+0x2734>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <menu+0x2734>)
 8003c18:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <menu+0x2734>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d902      	bls.n	8003c28 <menu+0x267c>
		   		yukariValfTmr = 5;
 8003c22:	4b2f      	ldr	r3, [pc, #188]	; (8003ce0 <menu+0x2734>)
 8003c24:	2205      	movs	r2, #5
 8003c26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c28:	f002 fa36 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2c:	2108      	movs	r1, #8
 8003c2e:	4822      	ldr	r0, [pc, #136]	; (8003cb8 <menu+0x270c>)
 8003c30:	f006 f80e 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10d      	bne.n	8003c56 <menu+0x26aa>
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <menu+0x2710>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	f083 0301 	eor.w	r3, r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8003c48:	4b25      	ldr	r3, [pc, #148]	; (8003ce0 <menu+0x2734>)
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <menu+0x2714>)
 8003c4e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <menu+0x271c>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <menu+0x2720>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b17      	cmp	r3, #23
 8003c5c:	f040 80ac 	bne.w	8003db8 <menu+0x280c>
		if(dilSecim == 0) {
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <menu+0x26f0>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003c68:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <menu+0x273c>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f7fc fda3 	bl	80007b8 <lcd_print>
 8003c72:	e008      	b.n	8003c86 <menu+0x26da>
		} else if(dilSecim == 1) {
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <menu+0x26f0>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d104      	bne.n	8003c86 <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <menu+0x2740>)
 8003c7e:	2101      	movs	r1, #1
 8003c80:	2001      	movs	r0, #1
 8003c82:	f7fc fd99 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <menu+0x26f0>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d130      	bne.n	8003cf0 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <menu+0x272c>)
 8003c90:	2101      	movs	r1, #1
 8003c92:	2002      	movs	r0, #2
 8003c94:	f7fc fd90 	bl	80007b8 <lcd_print>
 8003c98:	e033      	b.n	8003d02 <menu+0x2756>
 8003c9a:	bf00      	nop
 8003c9c:	20000c5a 	.word	0x20000c5a
 8003ca0:	0800e124 	.word	0x0800e124
 8003ca4:	20000c4c 	.word	0x20000c4c
 8003ca8:	0800e0c8 	.word	0x0800e0c8
 8003cac:	0800e0dc 	.word	0x0800e0dc
 8003cb0:	0800e0ec 	.word	0x0800e0ec
 8003cb4:	0800e100 	.word	0x0800e100
 8003cb8:	40010800 	.word	0x40010800
 8003cbc:	20000c68 	.word	0x20000c68
 8003cc0:	20000b28 	.word	0x20000b28
 8003cc4:	20000c3f 	.word	0x20000c3f
 8003cc8:	20000c65 	.word	0x20000c65
 8003ccc:	20000c39 	.word	0x20000c39
 8003cd0:	0800e134 	.word	0x0800e134
 8003cd4:	0800e148 	.word	0x0800e148
 8003cd8:	0800dde8 	.word	0x0800dde8
 8003cdc:	0800e15c 	.word	0x0800e15c
 8003ce0:	20000c4d 	.word	0x20000c4d
 8003ce4:	20000bbc 	.word	0x20000bbc
 8003ce8:	0800e16c 	.word	0x0800e16c
 8003cec:	0800e180 	.word	0x0800e180
			} else if(dilSecim == 1) {
 8003cf0:	4b98      	ldr	r3, [pc, #608]	; (8003f54 <menu+0x29a8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d104      	bne.n	8003d02 <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8003cf8:	4a97      	ldr	r2, [pc, #604]	; (8003f58 <menu+0x29ac>)
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f7fc fd5b 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003d02:	4b96      	ldr	r3, [pc, #600]	; (8003f5c <menu+0x29b0>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	220a      	movs	r2, #10
 8003d08:	4995      	ldr	r1, [pc, #596]	; (8003f60 <menu+0x29b4>)
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f008 ffcc 	bl	800cca8 <itoa>
		lcd_print(2,16,snum);
 8003d10:	4a93      	ldr	r2, [pc, #588]	; (8003f60 <menu+0x29b4>)
 8003d12:	2110      	movs	r1, #16
 8003d14:	2002      	movs	r0, #2
 8003d16:	f7fc fd4f 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4891      	ldr	r0, [pc, #580]	; (8003f64 <menu+0x29b8>)
 8003d1e:	f005 ff97 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d115      	bne.n	8003d54 <menu+0x27a8>
 8003d28:	4b8f      	ldr	r3, [pc, #572]	; (8003f68 <menu+0x29bc>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	f083 0301 	eor.w	r3, r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00e      	beq.n	8003d54 <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 8003d36:	4b89      	ldr	r3, [pc, #548]	; (8003f5c <menu+0x29b0>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4b87      	ldr	r3, [pc, #540]	; (8003f5c <menu+0x29b0>)
 8003d40:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003d42:	4b86      	ldr	r3, [pc, #536]	; (8003f5c <menu+0x29b0>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d902      	bls.n	8003d50 <menu+0x27a4>
				asagiValfTmr = 0;
 8003d4a:	4b84      	ldr	r3, [pc, #528]	; (8003f5c <menu+0x29b0>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d50:	f002 f9a2 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d54:	2104      	movs	r1, #4
 8003d56:	4883      	ldr	r0, [pc, #524]	; (8003f64 <menu+0x29b8>)
 8003d58:	f005 ff7a 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d115      	bne.n	8003d8e <menu+0x27e2>
 8003d62:	4b81      	ldr	r3, [pc, #516]	; (8003f68 <menu+0x29bc>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	f083 0301 	eor.w	r3, r3, #1
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00e      	beq.n	8003d8e <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 8003d70:	4b7a      	ldr	r3, [pc, #488]	; (8003f5c <menu+0x29b0>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	4b78      	ldr	r3, [pc, #480]	; (8003f5c <menu+0x29b0>)
 8003d7a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003d7c:	4b77      	ldr	r3, [pc, #476]	; (8003f5c <menu+0x29b0>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d902      	bls.n	8003d8a <menu+0x27de>
		   		asagiValfTmr = 5;
 8003d84:	4b75      	ldr	r3, [pc, #468]	; (8003f5c <menu+0x29b0>)
 8003d86:	2205      	movs	r2, #5
 8003d88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d8a:	f002 f985 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d8e:	2108      	movs	r1, #8
 8003d90:	4874      	ldr	r0, [pc, #464]	; (8003f64 <menu+0x29b8>)
 8003d92:	f005 ff5d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d10d      	bne.n	8003db8 <menu+0x280c>
 8003d9c:	4b72      	ldr	r3, [pc, #456]	; (8003f68 <menu+0x29bc>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	f083 0301 	eor.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d006      	beq.n	8003db8 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 8003daa:	4b6c      	ldr	r3, [pc, #432]	; (8003f5c <menu+0x29b0>)
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <menu+0x29c0>)
 8003db0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003db2:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <menu+0x29c4>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003db8:	4b6e      	ldr	r3, [pc, #440]	; (8003f74 <menu+0x29c8>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b18      	cmp	r3, #24
 8003dbe:	f040 809d 	bne.w	8003efc <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 8003dc2:	4b6d      	ldr	r3, [pc, #436]	; (8003f78 <menu+0x29cc>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d113      	bne.n	8003df2 <menu+0x2846>
			if(dilSecim == 0) {
 8003dca:	4b62      	ldr	r3, [pc, #392]	; (8003f54 <menu+0x29a8>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d105      	bne.n	8003dde <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003dd2:	4a6a      	ldr	r2, [pc, #424]	; (8003f7c <menu+0x29d0>)
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f7fc fcee 	bl	80007b8 <lcd_print>
 8003ddc:	e020      	b.n	8003e20 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003dde:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <menu+0x29a8>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d11c      	bne.n	8003e20 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003de6:	4a66      	ldr	r2, [pc, #408]	; (8003f80 <menu+0x29d4>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	2001      	movs	r0, #1
 8003dec:	f7fc fce4 	bl	80007b8 <lcd_print>
 8003df0:	e016      	b.n	8003e20 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003df2:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <menu+0x29cc>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d112      	bne.n	8003e20 <menu+0x2874>
			if(dilSecim == 0) {
 8003dfa:	4b56      	ldr	r3, [pc, #344]	; (8003f54 <menu+0x29a8>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d105      	bne.n	8003e0e <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003e02:	4a60      	ldr	r2, [pc, #384]	; (8003f84 <menu+0x29d8>)
 8003e04:	2101      	movs	r1, #1
 8003e06:	2001      	movs	r0, #1
 8003e08:	f7fc fcd6 	bl	80007b8 <lcd_print>
 8003e0c:	e008      	b.n	8003e20 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003e0e:	4b51      	ldr	r3, [pc, #324]	; (8003f54 <menu+0x29a8>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d104      	bne.n	8003e20 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003e16:	4a5c      	ldr	r2, [pc, #368]	; (8003f88 <menu+0x29dc>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f7fc fccc 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003e20:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <menu+0x29a8>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e28:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <menu+0x29e0>)
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	2002      	movs	r0, #2
 8003e2e:	f7fc fcc3 	bl	80007b8 <lcd_print>
 8003e32:	e008      	b.n	8003e46 <menu+0x289a>
			} else if(dilSecim == 1) {
 8003e34:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <menu+0x29a8>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d104      	bne.n	8003e46 <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 8003e3c:	4a46      	ldr	r2, [pc, #280]	; (8003f58 <menu+0x29ac>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	2002      	movs	r0, #2
 8003e42:	f7fc fcb9 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003e46:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <menu+0x29e4>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	220a      	movs	r2, #10
 8003e4c:	4944      	ldr	r1, [pc, #272]	; (8003f60 <menu+0x29b4>)
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f008 ff2a 	bl	800cca8 <itoa>
		lcd_print(2, 16, snum);
 8003e54:	4a42      	ldr	r2, [pc, #264]	; (8003f60 <menu+0x29b4>)
 8003e56:	2110      	movs	r1, #16
 8003e58:	2002      	movs	r0, #2
 8003e5a:	f7fc fcad 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4840      	ldr	r0, [pc, #256]	; (8003f64 <menu+0x29b8>)
 8003e62:	f005 fef5 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d115      	bne.n	8003e98 <menu+0x28ec>
 8003e6c:	4b3e      	ldr	r3, [pc, #248]	; (8003f68 <menu+0x29bc>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	f083 0301 	eor.w	r3, r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00e      	beq.n	8003e98 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003e7a:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <menu+0x29e4>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <menu+0x29e4>)
 8003e84:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003e86:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <menu+0x29e4>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d902      	bls.n	8003e94 <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 8003e8e:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <menu+0x29e4>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e94:	f002 f900 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e98:	2104      	movs	r1, #4
 8003e9a:	4832      	ldr	r0, [pc, #200]	; (8003f64 <menu+0x29b8>)
 8003e9c:	f005 fed8 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d115      	bne.n	8003ed2 <menu+0x2926>
 8003ea6:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <menu+0x29bc>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	f083 0301 	eor.w	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00e      	beq.n	8003ed2 <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <menu+0x29e4>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <menu+0x29e4>)
 8003ebe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003ec0:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <menu+0x29e4>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d902      	bls.n	8003ece <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <menu+0x29e4>)
 8003eca:	2205      	movs	r2, #5
 8003ecc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ece:	f002 f8e3 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ed2:	2108      	movs	r1, #8
 8003ed4:	4823      	ldr	r0, [pc, #140]	; (8003f64 <menu+0x29b8>)
 8003ed6:	f005 febb 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10d      	bne.n	8003efc <menu+0x2950>
 8003ee0:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <menu+0x29bc>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	f083 0301 	eor.w	r3, r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 8003eee:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <menu+0x29e4>)
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <menu+0x29c0>)
 8003ef4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <menu+0x29c4>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <menu+0x29c8>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b19      	cmp	r3, #25
 8003f02:	f040 80c4 	bne.w	800408e <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <menu+0x29cc>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d113      	bne.n	8003f36 <menu+0x298a>
			if(dilSecim == 0) {
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <menu+0x29a8>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003f16:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <menu+0x29e8>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f7fc fc4c 	bl	80007b8 <lcd_print>
 8003f20:	e047      	b.n	8003fb2 <menu+0x2a06>
			} else if(dilSecim == 1) {
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <menu+0x29a8>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d143      	bne.n	8003fb2 <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <menu+0x29ec>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	2001      	movs	r0, #1
 8003f30:	f7fc fc42 	bl	80007b8 <lcd_print>
 8003f34:	e03d      	b.n	8003fb2 <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <menu+0x29cc>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d139      	bne.n	8003fb2 <menu+0x2a06>
			if(dilSecim == 0) {
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <menu+0x29a8>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d12c      	bne.n	8003fa0 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003f46:	4a15      	ldr	r2, [pc, #84]	; (8003f9c <menu+0x29f0>)
 8003f48:	2101      	movs	r1, #1
 8003f4a:	2001      	movs	r0, #1
 8003f4c:	f7fc fc34 	bl	80007b8 <lcd_print>
 8003f50:	e02f      	b.n	8003fb2 <menu+0x2a06>
 8003f52:	bf00      	nop
 8003f54:	20000c5a 	.word	0x20000c5a
 8003f58:	0800e15c 	.word	0x0800e15c
 8003f5c:	20000c4e 	.word	0x20000c4e
 8003f60:	20000bbc 	.word	0x20000bbc
 8003f64:	40010800 	.word	0x40010800
 8003f68:	20000c68 	.word	0x20000c68
 8003f6c:	20000b28 	.word	0x20000b28
 8003f70:	20000c65 	.word	0x20000c65
 8003f74:	20000c39 	.word	0x20000c39
 8003f78:	20000c48 	.word	0x20000c48
 8003f7c:	0800e194 	.word	0x0800e194
 8003f80:	0800e1a8 	.word	0x0800e1a8
 8003f84:	0800e1bc 	.word	0x0800e1bc
 8003f88:	0800e1d0 	.word	0x0800e1d0
 8003f8c:	0800dde8 	.word	0x0800dde8
 8003f90:	20000c4f 	.word	0x20000c4f
 8003f94:	0800e1e4 	.word	0x0800e1e4
 8003f98:	0800e1f8 	.word	0x0800e1f8
 8003f9c:	0800e20c 	.word	0x0800e20c
			} else if(dilSecim == 1) {
 8003fa0:	4b73      	ldr	r3, [pc, #460]	; (8004170 <menu+0x2bc4>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d104      	bne.n	8003fb2 <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003fa8:	4a72      	ldr	r2, [pc, #456]	; (8004174 <menu+0x2bc8>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	2001      	movs	r0, #1
 8003fae:	f7fc fc03 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003fb2:	4b6f      	ldr	r3, [pc, #444]	; (8004170 <menu+0x2bc4>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fba:	4a6f      	ldr	r2, [pc, #444]	; (8004178 <menu+0x2bcc>)
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	2002      	movs	r0, #2
 8003fc0:	f7fc fbfa 	bl	80007b8 <lcd_print>
 8003fc4:	e008      	b.n	8003fd8 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 8003fc6:	4b6a      	ldr	r3, [pc, #424]	; (8004170 <menu+0x2bc4>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d104      	bne.n	8003fd8 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 8003fce:	4a6b      	ldr	r2, [pc, #428]	; (800417c <menu+0x2bd0>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	2002      	movs	r0, #2
 8003fd4:	f7fc fbf0 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003fd8:	4b69      	ldr	r3, [pc, #420]	; (8004180 <menu+0x2bd4>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	220a      	movs	r2, #10
 8003fde:	4969      	ldr	r1, [pc, #420]	; (8004184 <menu+0x2bd8>)
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f008 fe61 	bl	800cca8 <itoa>
		lcd_print(2,16,snum);
 8003fe6:	4a67      	ldr	r2, [pc, #412]	; (8004184 <menu+0x2bd8>)
 8003fe8:	2110      	movs	r1, #16
 8003fea:	2002      	movs	r0, #2
 8003fec:	f7fc fbe4 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4865      	ldr	r0, [pc, #404]	; (8004188 <menu+0x2bdc>)
 8003ff4:	f005 fe2c 	bl	8009c50 <HAL_GPIO_ReadPin>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d115      	bne.n	800402a <menu+0x2a7e>
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <menu+0x2be0>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	f083 0301 	eor.w	r3, r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00e      	beq.n	800402a <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800400c:	4b5c      	ldr	r3, [pc, #368]	; (8004180 <menu+0x2bd4>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	b2da      	uxtb	r2, r3
 8004014:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <menu+0x2bd4>)
 8004016:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004018:	4b59      	ldr	r3, [pc, #356]	; (8004180 <menu+0x2bd4>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b05      	cmp	r3, #5
 800401e:	d902      	bls.n	8004026 <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 8004020:	4b57      	ldr	r3, [pc, #348]	; (8004180 <menu+0x2bd4>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004026:	f002 f837 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800402a:	2104      	movs	r1, #4
 800402c:	4856      	ldr	r0, [pc, #344]	; (8004188 <menu+0x2bdc>)
 800402e:	f005 fe0f 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d115      	bne.n	8004064 <menu+0x2ab8>
 8004038:	4b54      	ldr	r3, [pc, #336]	; (800418c <menu+0x2be0>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	f083 0301 	eor.w	r3, r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8004046:	4b4e      	ldr	r3, [pc, #312]	; (8004180 <menu+0x2bd4>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	3b01      	subs	r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <menu+0x2bd4>)
 8004050:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8004052:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <menu+0x2bd4>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d902      	bls.n	8004060 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 800405a:	4b49      	ldr	r3, [pc, #292]	; (8004180 <menu+0x2bd4>)
 800405c:	2205      	movs	r2, #5
 800405e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004060:	f002 f81a 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004064:	2108      	movs	r1, #8
 8004066:	4848      	ldr	r0, [pc, #288]	; (8004188 <menu+0x2bdc>)
 8004068:	f005 fdf2 	bl	8009c50 <HAL_GPIO_ReadPin>
 800406c:	4603      	mov	r3, r0
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10d      	bne.n	800408e <menu+0x2ae2>
 8004072:	4b46      	ldr	r3, [pc, #280]	; (800418c <menu+0x2be0>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	f083 0301 	eor.w	r3, r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004080:	4b3f      	ldr	r3, [pc, #252]	; (8004180 <menu+0x2bd4>)
 8004082:	781a      	ldrb	r2, [r3, #0]
 8004084:	4b42      	ldr	r3, [pc, #264]	; (8004190 <menu+0x2be4>)
 8004086:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004088:	4b42      	ldr	r3, [pc, #264]	; (8004194 <menu+0x2be8>)
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800408e:	4b42      	ldr	r3, [pc, #264]	; (8004198 <menu+0x2bec>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b1a      	cmp	r3, #26
 8004094:	f040 80ec 	bne.w	8004270 <menu+0x2cc4>
		if(dilSecim == 0) {
 8004098:	4b35      	ldr	r3, [pc, #212]	; (8004170 <menu+0x2bc4>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80040a0:	4a3e      	ldr	r2, [pc, #248]	; (800419c <menu+0x2bf0>)
 80040a2:	2101      	movs	r1, #1
 80040a4:	2001      	movs	r0, #1
 80040a6:	f7fc fb87 	bl	80007b8 <lcd_print>
 80040aa:	e008      	b.n	80040be <menu+0x2b12>
		} else if(dilSecim == 1) {
 80040ac:	4b30      	ldr	r3, [pc, #192]	; (8004170 <menu+0x2bc4>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d104      	bne.n	80040be <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 80040b4:	4a3a      	ldr	r2, [pc, #232]	; (80041a0 <menu+0x2bf4>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7fc fb7d 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80040be:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <menu+0x2bf8>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b63      	cmp	r3, #99	; 0x63
 80040c4:	d91e      	bls.n	8004104 <menu+0x2b58>
			if(dilSecim == 0) {
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <menu+0x2bc4>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 80040ce:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <menu+0x2bcc>)
 80040d0:	2101      	movs	r1, #1
 80040d2:	2002      	movs	r0, #2
 80040d4:	f7fc fb70 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <menu+0x2bc4>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d104      	bne.n	80040ea <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 80040e0:	4a26      	ldr	r2, [pc, #152]	; (800417c <menu+0x2bd0>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	2002      	movs	r0, #2
 80040e6:	f7fc fb67 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040ea:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <menu+0x2bf8>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	220a      	movs	r2, #10
 80040f0:	4924      	ldr	r1, [pc, #144]	; (8004184 <menu+0x2bd8>)
 80040f2:	4618      	mov	r0, r3
 80040f4:	f008 fdd8 	bl	800cca8 <itoa>
			lcd_print(2,14,snum);
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <menu+0x2bd8>)
 80040fa:	210e      	movs	r1, #14
 80040fc:	2002      	movs	r0, #2
 80040fe:	f7fc fb5b 	bl	80007b8 <lcd_print>
 8004102:	e066      	b.n	80041d2 <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <menu+0x2bf8>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b09      	cmp	r3, #9
 800410a:	d923      	bls.n	8004154 <menu+0x2ba8>
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <menu+0x2bf8>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b63      	cmp	r3, #99	; 0x63
 8004112:	d81f      	bhi.n	8004154 <menu+0x2ba8>
			if(dilSecim == 0) {
 8004114:	4b16      	ldr	r3, [pc, #88]	; (8004170 <menu+0x2bc4>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 800411c:	4a16      	ldr	r2, [pc, #88]	; (8004178 <menu+0x2bcc>)
 800411e:	2101      	movs	r1, #1
 8004120:	2002      	movs	r0, #2
 8004122:	f7fc fb49 	bl	80007b8 <lcd_print>
 8004126:	e008      	b.n	800413a <menu+0x2b8e>
			} else if(dilSecim == 1) {
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <menu+0x2bc4>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d104      	bne.n	800413a <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 8004130:	4a12      	ldr	r2, [pc, #72]	; (800417c <menu+0x2bd0>)
 8004132:	2101      	movs	r1, #1
 8004134:	2002      	movs	r0, #2
 8004136:	f7fc fb3f 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <menu+0x2bf8>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	220a      	movs	r2, #10
 8004140:	4910      	ldr	r1, [pc, #64]	; (8004184 <menu+0x2bd8>)
 8004142:	4618      	mov	r0, r3
 8004144:	f008 fdb0 	bl	800cca8 <itoa>
			lcd_print(2, 15, snum);
 8004148:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <menu+0x2bd8>)
 800414a:	210f      	movs	r1, #15
 800414c:	2002      	movs	r0, #2
 800414e:	f7fc fb33 	bl	80007b8 <lcd_print>
 8004152:	e03e      	b.n	80041d2 <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <menu+0x2bf8>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b09      	cmp	r3, #9
 800415a:	d83a      	bhi.n	80041d2 <menu+0x2c26>
			if(dilSecim == 0) {
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <menu+0x2bc4>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d121      	bne.n	80041a8 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <menu+0x2bcc>)
 8004166:	2101      	movs	r1, #1
 8004168:	2002      	movs	r0, #2
 800416a:	f7fc fb25 	bl	80007b8 <lcd_print>
 800416e:	e024      	b.n	80041ba <menu+0x2c0e>
 8004170:	20000c5a 	.word	0x20000c5a
 8004174:	0800e220 	.word	0x0800e220
 8004178:	0800dde8 	.word	0x0800dde8
 800417c:	0800e15c 	.word	0x0800e15c
 8004180:	20000c50 	.word	0x20000c50
 8004184:	20000bbc 	.word	0x20000bbc
 8004188:	40010800 	.word	0x40010800
 800418c:	20000c68 	.word	0x20000c68
 8004190:	20000b28 	.word	0x20000b28
 8004194:	20000c65 	.word	0x20000c65
 8004198:	20000c39 	.word	0x20000c39
 800419c:	0800e234 	.word	0x0800e234
 80041a0:	0800e248 	.word	0x0800e248
 80041a4:	20000c51 	.word	0x20000c51
			} else if(dilSecim == 1) {
 80041a8:	4b8f      	ldr	r3, [pc, #572]	; (80043e8 <menu+0x2e3c>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d104      	bne.n	80041ba <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 80041b0:	4a8e      	ldr	r2, [pc, #568]	; (80043ec <menu+0x2e40>)
 80041b2:	2101      	movs	r1, #1
 80041b4:	2002      	movs	r0, #2
 80041b6:	f7fc faff 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041ba:	4b8d      	ldr	r3, [pc, #564]	; (80043f0 <menu+0x2e44>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	220a      	movs	r2, #10
 80041c0:	498c      	ldr	r1, [pc, #560]	; (80043f4 <menu+0x2e48>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f008 fd70 	bl	800cca8 <itoa>
			lcd_print(2, 16, snum);
 80041c8:	4a8a      	ldr	r2, [pc, #552]	; (80043f4 <menu+0x2e48>)
 80041ca:	2110      	movs	r1, #16
 80041cc:	2002      	movs	r0, #2
 80041ce:	f7fc faf3 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041d2:	2102      	movs	r1, #2
 80041d4:	4888      	ldr	r0, [pc, #544]	; (80043f8 <menu+0x2e4c>)
 80041d6:	f005 fd3b 	bl	8009c50 <HAL_GPIO_ReadPin>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d115      	bne.n	800420c <menu+0x2c60>
 80041e0:	4b86      	ldr	r3, [pc, #536]	; (80043fc <menu+0x2e50>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	f083 0301 	eor.w	r3, r3, #1
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 80041ee:	4b80      	ldr	r3, [pc, #512]	; (80043f0 <menu+0x2e44>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4b7e      	ldr	r3, [pc, #504]	; (80043f0 <menu+0x2e44>)
 80041f8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80041fa:	4b7d      	ldr	r3, [pc, #500]	; (80043f0 <menu+0x2e44>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2bb4      	cmp	r3, #180	; 0xb4
 8004200:	d902      	bls.n	8004208 <menu+0x2c5c>
				makineCalismaTmr = 0;
 8004202:	4b7b      	ldr	r3, [pc, #492]	; (80043f0 <menu+0x2e44>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004208:	f001 ff46 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800420c:	2104      	movs	r1, #4
 800420e:	487a      	ldr	r0, [pc, #488]	; (80043f8 <menu+0x2e4c>)
 8004210:	f005 fd1e 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004214:	4603      	mov	r3, r0
 8004216:	2b01      	cmp	r3, #1
 8004218:	d115      	bne.n	8004246 <menu+0x2c9a>
 800421a:	4b78      	ldr	r3, [pc, #480]	; (80043fc <menu+0x2e50>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	f083 0301 	eor.w	r3, r3, #1
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004228:	4b71      	ldr	r3, [pc, #452]	; (80043f0 <menu+0x2e44>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	3b01      	subs	r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b6f      	ldr	r3, [pc, #444]	; (80043f0 <menu+0x2e44>)
 8004232:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004234:	4b6e      	ldr	r3, [pc, #440]	; (80043f0 <menu+0x2e44>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2bb5      	cmp	r3, #181	; 0xb5
 800423a:	d902      	bls.n	8004242 <menu+0x2c96>
		   		makineCalismaTmr = 180;
 800423c:	4b6c      	ldr	r3, [pc, #432]	; (80043f0 <menu+0x2e44>)
 800423e:	22b4      	movs	r2, #180	; 0xb4
 8004240:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004242:	f001 ff29 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004246:	2108      	movs	r1, #8
 8004248:	486b      	ldr	r0, [pc, #428]	; (80043f8 <menu+0x2e4c>)
 800424a:	f005 fd01 	bl	8009c50 <HAL_GPIO_ReadPin>
 800424e:	4603      	mov	r3, r0
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10d      	bne.n	8004270 <menu+0x2cc4>
 8004254:	4b69      	ldr	r3, [pc, #420]	; (80043fc <menu+0x2e50>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <menu+0x2e44>)
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	4b66      	ldr	r3, [pc, #408]	; (8004400 <menu+0x2e54>)
 8004268:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800426a:	4b66      	ldr	r3, [pc, #408]	; (8004404 <menu+0x2e58>)
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004270:	4b65      	ldr	r3, [pc, #404]	; (8004408 <menu+0x2e5c>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b1b      	cmp	r3, #27
 8004276:	f040 8083 	bne.w	8004380 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 800427a:	4a64      	ldr	r2, [pc, #400]	; (800440c <menu+0x2e60>)
 800427c:	2101      	movs	r1, #1
 800427e:	2001      	movs	r0, #1
 8004280:	f7fc fa9a 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 8004284:	4b62      	ldr	r3, [pc, #392]	; (8004410 <menu+0x2e64>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d113      	bne.n	80042b4 <menu+0x2d08>
			if(dilSecim == 0) {
 800428c:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <menu+0x2e3c>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 8004294:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <menu+0x2e68>)
 8004296:	2101      	movs	r1, #1
 8004298:	2002      	movs	r0, #2
 800429a:	f7fc fa8d 	bl	80007b8 <lcd_print>
 800429e:	e020      	b.n	80042e2 <menu+0x2d36>
			} else if(dilSecim == 1) {
 80042a0:	4b51      	ldr	r3, [pc, #324]	; (80043e8 <menu+0x2e3c>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d11c      	bne.n	80042e2 <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 80042a8:	4a5b      	ldr	r2, [pc, #364]	; (8004418 <menu+0x2e6c>)
 80042aa:	2101      	movs	r1, #1
 80042ac:	2002      	movs	r0, #2
 80042ae:	f7fc fa83 	bl	80007b8 <lcd_print>
 80042b2:	e016      	b.n	80042e2 <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 80042b4:	4b56      	ldr	r3, [pc, #344]	; (8004410 <menu+0x2e64>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d112      	bne.n	80042e2 <menu+0x2d36>
			if(dilSecim == 0) {
 80042bc:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <menu+0x2e3c>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 80042c4:	4a55      	ldr	r2, [pc, #340]	; (800441c <menu+0x2e70>)
 80042c6:	2101      	movs	r1, #1
 80042c8:	2002      	movs	r0, #2
 80042ca:	f7fc fa75 	bl	80007b8 <lcd_print>
 80042ce:	e008      	b.n	80042e2 <menu+0x2d36>
			} else if(dilSecim == 1) {
 80042d0:	4b45      	ldr	r3, [pc, #276]	; (80043e8 <menu+0x2e3c>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d104      	bne.n	80042e2 <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 80042d8:	4a51      	ldr	r2, [pc, #324]	; (8004420 <menu+0x2e74>)
 80042da:	2101      	movs	r1, #1
 80042dc:	2002      	movs	r0, #2
 80042de:	f7fc fa6b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042e2:	2102      	movs	r1, #2
 80042e4:	4844      	ldr	r0, [pc, #272]	; (80043f8 <menu+0x2e4c>)
 80042e6:	f005 fcb3 	bl	8009c50 <HAL_GPIO_ReadPin>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d115      	bne.n	800431c <menu+0x2d70>
 80042f0:	4b42      	ldr	r3, [pc, #264]	; (80043fc <menu+0x2e50>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f083 0301 	eor.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00e      	beq.n	800431c <menu+0x2d70>
			buzzer = buzzer + 1;
 80042fe:	4b44      	ldr	r3, [pc, #272]	; (8004410 <menu+0x2e64>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4b42      	ldr	r3, [pc, #264]	; (8004410 <menu+0x2e64>)
 8004308:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <menu+0x2e64>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d902      	bls.n	8004318 <menu+0x2d6c>
				buzzer = 0;
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <menu+0x2e64>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004318:	f001 febe 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800431c:	2104      	movs	r1, #4
 800431e:	4836      	ldr	r0, [pc, #216]	; (80043f8 <menu+0x2e4c>)
 8004320:	f005 fc96 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004324:	4603      	mov	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d115      	bne.n	8004356 <menu+0x2daa>
 800432a:	4b34      	ldr	r3, [pc, #208]	; (80043fc <menu+0x2e50>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	f083 0301 	eor.w	r3, r3, #1
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <menu+0x2daa>
			buzzer = buzzer - 1;
 8004338:	4b35      	ldr	r3, [pc, #212]	; (8004410 <menu+0x2e64>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	3b01      	subs	r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b33      	ldr	r3, [pc, #204]	; (8004410 <menu+0x2e64>)
 8004342:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004344:	4b32      	ldr	r3, [pc, #200]	; (8004410 <menu+0x2e64>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <menu+0x2da6>
		   		buzzer = 1;
 800434c:	4b30      	ldr	r3, [pc, #192]	; (8004410 <menu+0x2e64>)
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004352:	f001 fea1 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004356:	2108      	movs	r1, #8
 8004358:	4827      	ldr	r0, [pc, #156]	; (80043f8 <menu+0x2e4c>)
 800435a:	f005 fc79 	bl	8009c50 <HAL_GPIO_ReadPin>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10d      	bne.n	8004380 <menu+0x2dd4>
 8004364:	4b25      	ldr	r3, [pc, #148]	; (80043fc <menu+0x2e50>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	f083 0301 	eor.w	r3, r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <menu+0x2dd4>
			eepromData[25] = buzzer;
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <menu+0x2e64>)
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <menu+0x2e54>)
 8004378:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <menu+0x2e58>)
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <menu+0x2e5c>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b1c      	cmp	r3, #28
 8004386:	f040 80ab 	bne.w	80044e0 <menu+0x2f34>
		calismaSayModu = 0;
 800438a:	4b26      	ldr	r3, [pc, #152]	; (8004424 <menu+0x2e78>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <menu+0x2e7c>)
 8004392:	2101      	movs	r1, #1
 8004394:	2001      	movs	r0, #1
 8004396:	f7fc fa0f 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 800439a:	4b24      	ldr	r3, [pc, #144]	; (800442c <menu+0x2e80>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d113      	bne.n	80043ca <menu+0x2e1e>
			if(dilSecim == 0) {
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <menu+0x2e3c>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 80043aa:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <menu+0x2e68>)
 80043ac:	2101      	movs	r1, #1
 80043ae:	2002      	movs	r0, #2
 80043b0:	f7fc fa02 	bl	80007b8 <lcd_print>
 80043b4:	e045      	b.n	8004442 <menu+0x2e96>
			} else if(dilSecim == 1) {
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <menu+0x2e3c>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d141      	bne.n	8004442 <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 80043be:	4a16      	ldr	r2, [pc, #88]	; (8004418 <menu+0x2e6c>)
 80043c0:	2101      	movs	r1, #1
 80043c2:	2002      	movs	r0, #2
 80043c4:	f7fc f9f8 	bl	80007b8 <lcd_print>
 80043c8:	e03b      	b.n	8004442 <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 80043ca:	4b18      	ldr	r3, [pc, #96]	; (800442c <menu+0x2e80>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d137      	bne.n	8004442 <menu+0x2e96>
			if(dilSecim == 0){
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <menu+0x2e3c>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d12a      	bne.n	8004430 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 80043da:	4a10      	ldr	r2, [pc, #64]	; (800441c <menu+0x2e70>)
 80043dc:	2101      	movs	r1, #1
 80043de:	2002      	movs	r0, #2
 80043e0:	f7fc f9ea 	bl	80007b8 <lcd_print>
 80043e4:	e02d      	b.n	8004442 <menu+0x2e96>
 80043e6:	bf00      	nop
 80043e8:	20000c5a 	.word	0x20000c5a
 80043ec:	0800e15c 	.word	0x0800e15c
 80043f0:	20000c51 	.word	0x20000c51
 80043f4:	20000bbc 	.word	0x20000bbc
 80043f8:	40010800 	.word	0x40010800
 80043fc:	20000c68 	.word	0x20000c68
 8004400:	20000b28 	.word	0x20000b28
 8004404:	20000c65 	.word	0x20000c65
 8004408:	20000c39 	.word	0x20000c39
 800440c:	0800e25c 	.word	0x0800e25c
 8004410:	20000c55 	.word	0x20000c55
 8004414:	0800db84 	.word	0x0800db84
 8004418:	0800db98 	.word	0x0800db98
 800441c:	0800dbe4 	.word	0x0800dbe4
 8004420:	0800dbf8 	.word	0x0800dbf8
 8004424:	20000c59 	.word	0x20000c59
 8004428:	0800e270 	.word	0x0800e270
 800442c:	20000c57 	.word	0x20000c57
			} else if(dilSecim == 1) {
 8004430:	4b71      	ldr	r3, [pc, #452]	; (80045f8 <menu+0x304c>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d104      	bne.n	8004442 <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 8004438:	4a70      	ldr	r2, [pc, #448]	; (80045fc <menu+0x3050>)
 800443a:	2101      	movs	r1, #1
 800443c:	2002      	movs	r0, #2
 800443e:	f7fc f9bb 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004442:	2102      	movs	r1, #2
 8004444:	486e      	ldr	r0, [pc, #440]	; (8004600 <menu+0x3054>)
 8004446:	f005 fc03 	bl	8009c50 <HAL_GPIO_ReadPin>
 800444a:	4603      	mov	r3, r0
 800444c:	2b01      	cmp	r3, #1
 800444e:	d115      	bne.n	800447c <menu+0x2ed0>
 8004450:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <menu+0x3058>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	f083 0301 	eor.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00e      	beq.n	800447c <menu+0x2ed0>
			demoMode = demoMode + 1;
 800445e:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <menu+0x305c>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4b68      	ldr	r3, [pc, #416]	; (8004608 <menu+0x305c>)
 8004468:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800446a:	4b67      	ldr	r3, [pc, #412]	; (8004608 <menu+0x305c>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d902      	bls.n	8004478 <menu+0x2ecc>
				demoMode = 0;
 8004472:	4b65      	ldr	r3, [pc, #404]	; (8004608 <menu+0x305c>)
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004478:	f001 fe0e 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800447c:	2104      	movs	r1, #4
 800447e:	4860      	ldr	r0, [pc, #384]	; (8004600 <menu+0x3054>)
 8004480:	f005 fbe6 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	d115      	bne.n	80044b6 <menu+0x2f0a>
 800448a:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <menu+0x3058>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	f083 0301 	eor.w	r3, r3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <menu+0x2f0a>
			demoMode = demoMode - 1;
 8004498:	4b5b      	ldr	r3, [pc, #364]	; (8004608 <menu+0x305c>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	3b01      	subs	r3, #1
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	4b59      	ldr	r3, [pc, #356]	; (8004608 <menu+0x305c>)
 80044a2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80044a4:	4b58      	ldr	r3, [pc, #352]	; (8004608 <menu+0x305c>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <menu+0x2f06>
		   		demoMode = 1;
 80044ac:	4b56      	ldr	r3, [pc, #344]	; (8004608 <menu+0x305c>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044b2:	f001 fdf1 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044b6:	2108      	movs	r1, #8
 80044b8:	4851      	ldr	r0, [pc, #324]	; (8004600 <menu+0x3054>)
 80044ba:	f005 fbc9 	bl	8009c50 <HAL_GPIO_ReadPin>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10d      	bne.n	80044e0 <menu+0x2f34>
 80044c4:	4b4f      	ldr	r3, [pc, #316]	; (8004604 <menu+0x3058>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f083 0301 	eor.w	r3, r3, #1
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <menu+0x2f34>
			eepromData[26] = demoMode;
 80044d2:	4b4d      	ldr	r3, [pc, #308]	; (8004608 <menu+0x305c>)
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	4b4d      	ldr	r3, [pc, #308]	; (800460c <menu+0x3060>)
 80044d8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80044da:	4b4d      	ldr	r3, [pc, #308]	; (8004610 <menu+0x3064>)
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80044e0:	4b4c      	ldr	r3, [pc, #304]	; (8004614 <menu+0x3068>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b1d      	cmp	r3, #29
 80044e6:	f040 8132 	bne.w	800474e <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80044ea:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <menu+0x306c>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d113      	bne.n	800451a <menu+0x2f6e>
 80044f2:	4b4a      	ldr	r3, [pc, #296]	; (800461c <menu+0x3070>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <menu+0x2f6e>
 80044fa:	4b49      	ldr	r3, [pc, #292]	; (8004620 <menu+0x3074>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <menu+0x2f6e>
 8004502:	4b48      	ldr	r3, [pc, #288]	; (8004624 <menu+0x3078>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <menu+0x2f6e>
 800450a:	4b47      	ldr	r3, [pc, #284]	; (8004628 <menu+0x307c>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <menu+0x2f6e>
			calismaSayisiYar = 0;
 8004512:	4b46      	ldr	r3, [pc, #280]	; (800462c <menu+0x3080>)
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	e002      	b.n	8004520 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 800451a:	4b44      	ldr	r3, [pc, #272]	; (800462c <menu+0x3080>)
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <menu+0x3084>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d154      	bne.n	80045d2 <menu+0x3026>
			if(dilSecim == 0) {
 8004528:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <menu+0x304c>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004530:	4a40      	ldr	r2, [pc, #256]	; (8004634 <menu+0x3088>)
 8004532:	2101      	movs	r1, #1
 8004534:	2001      	movs	r0, #1
 8004536:	f7fc f93f 	bl	80007b8 <lcd_print>
 800453a:	e008      	b.n	800454e <menu+0x2fa2>
			} else if(dilSecim == 1) {
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <menu+0x304c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d104      	bne.n	800454e <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 8004544:	4a3c      	ldr	r2, [pc, #240]	; (8004638 <menu+0x308c>)
 8004546:	2101      	movs	r1, #1
 8004548:	2001      	movs	r0, #1
 800454a:	f7fc f935 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800454e:	4b36      	ldr	r3, [pc, #216]	; (8004628 <menu+0x307c>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	220a      	movs	r2, #10
 8004554:	4939      	ldr	r1, [pc, #228]	; (800463c <menu+0x3090>)
 8004556:	4618      	mov	r0, r3
 8004558:	f008 fba6 	bl	800cca8 <itoa>
			lcd_print(2, 12, snum);
 800455c:	4a37      	ldr	r2, [pc, #220]	; (800463c <menu+0x3090>)
 800455e:	210c      	movs	r1, #12
 8004560:	2002      	movs	r0, #2
 8004562:	f7fc f929 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004566:	4b2f      	ldr	r3, [pc, #188]	; (8004624 <menu+0x3078>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	220a      	movs	r2, #10
 800456c:	4933      	ldr	r1, [pc, #204]	; (800463c <menu+0x3090>)
 800456e:	4618      	mov	r0, r3
 8004570:	f008 fb9a 	bl	800cca8 <itoa>
			lcd_print(2, 13, snum);
 8004574:	4a31      	ldr	r2, [pc, #196]	; (800463c <menu+0x3090>)
 8004576:	210d      	movs	r1, #13
 8004578:	2002      	movs	r0, #2
 800457a:	f7fc f91d 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800457e:	4b28      	ldr	r3, [pc, #160]	; (8004620 <menu+0x3074>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	220a      	movs	r2, #10
 8004584:	492d      	ldr	r1, [pc, #180]	; (800463c <menu+0x3090>)
 8004586:	4618      	mov	r0, r3
 8004588:	f008 fb8e 	bl	800cca8 <itoa>
			lcd_print(2, 14, snum);
 800458c:	4a2b      	ldr	r2, [pc, #172]	; (800463c <menu+0x3090>)
 800458e:	210e      	movs	r1, #14
 8004590:	2002      	movs	r0, #2
 8004592:	f7fc f911 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <menu+0x3070>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	220a      	movs	r2, #10
 800459c:	4927      	ldr	r1, [pc, #156]	; (800463c <menu+0x3090>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f008 fb82 	bl	800cca8 <itoa>
			lcd_print(2, 15, snum);
 80045a4:	4a25      	ldr	r2, [pc, #148]	; (800463c <menu+0x3090>)
 80045a6:	210f      	movs	r1, #15
 80045a8:	2002      	movs	r0, #2
 80045aa:	f7fc f905 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80045ae:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <menu+0x306c>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	220a      	movs	r2, #10
 80045b4:	4921      	ldr	r1, [pc, #132]	; (800463c <menu+0x3090>)
 80045b6:	4618      	mov	r0, r3
 80045b8:	f008 fb76 	bl	800cca8 <itoa>
			lcd_print(2, 16, snum);
 80045bc:	4a1f      	ldr	r2, [pc, #124]	; (800463c <menu+0x3090>)
 80045be:	2110      	movs	r1, #16
 80045c0:	2002      	movs	r0, #2
 80045c2:	f7fc f8f9 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 80045c6:	4a1e      	ldr	r2, [pc, #120]	; (8004640 <menu+0x3094>)
 80045c8:	2101      	movs	r1, #1
 80045ca:	2002      	movs	r0, #2
 80045cc:	f7fc f8f4 	bl	80007b8 <lcd_print>
 80045d0:	e048      	b.n	8004664 <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <menu+0x3084>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d144      	bne.n	8004664 <menu+0x30b8>
			if(dilSecim == 0) {
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <menu+0x304c>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d132      	bne.n	8004648 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80045e2:	4a14      	ldr	r2, [pc, #80]	; (8004634 <menu+0x3088>)
 80045e4:	2101      	movs	r1, #1
 80045e6:	2001      	movs	r0, #1
 80045e8:	f7fc f8e6 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <menu+0x3098>)
 80045ee:	2101      	movs	r1, #1
 80045f0:	2002      	movs	r0, #2
 80045f2:	f7fc f8e1 	bl	80007b8 <lcd_print>
 80045f6:	e035      	b.n	8004664 <menu+0x30b8>
 80045f8:	20000c5a 	.word	0x20000c5a
 80045fc:	0800dbf8 	.word	0x0800dbf8
 8004600:	40010800 	.word	0x40010800
 8004604:	20000c68 	.word	0x20000c68
 8004608:	20000c57 	.word	0x20000c57
 800460c:	20000b28 	.word	0x20000b28
 8004610:	20000c65 	.word	0x20000c65
 8004614:	20000c39 	.word	0x20000c39
 8004618:	20000c36 	.word	0x20000c36
 800461c:	20000c37 	.word	0x20000c37
 8004620:	200009b1 	.word	0x200009b1
 8004624:	200009b2 	.word	0x200009b2
 8004628:	20000c38 	.word	0x20000c38
 800462c:	20000c7a 	.word	0x20000c7a
 8004630:	20000c59 	.word	0x20000c59
 8004634:	0800e280 	.word	0x0800e280
 8004638:	0800e294 	.word	0x0800e294
 800463c:	20000bbc 	.word	0x20000bbc
 8004640:	0800e2a8 	.word	0x0800e2a8
 8004644:	0800e2b4 	.word	0x0800e2b4
			} else if(dilSecim == 1) {
 8004648:	4b94      	ldr	r3, [pc, #592]	; (800489c <menu+0x32f0>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d109      	bne.n	8004664 <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 8004650:	4a93      	ldr	r2, [pc, #588]	; (80048a0 <menu+0x32f4>)
 8004652:	2101      	movs	r1, #1
 8004654:	2001      	movs	r0, #1
 8004656:	f7fc f8af 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800465a:	4a92      	ldr	r2, [pc, #584]	; (80048a4 <menu+0x32f8>)
 800465c:	2101      	movs	r1, #1
 800465e:	2002      	movs	r0, #2
 8004660:	f7fc f8aa 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004664:	2102      	movs	r1, #2
 8004666:	4890      	ldr	r0, [pc, #576]	; (80048a8 <menu+0x32fc>)
 8004668:	f005 faf2 	bl	8009c50 <HAL_GPIO_ReadPin>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d119      	bne.n	80046a6 <menu+0x30fa>
 8004672:	4b8e      	ldr	r3, [pc, #568]	; (80048ac <menu+0x3300>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	f083 0301 	eor.w	r3, r3, #1
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d012      	beq.n	80046a6 <menu+0x30fa>
 8004680:	4b8b      	ldr	r3, [pc, #556]	; (80048b0 <menu+0x3304>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00e      	beq.n	80046a6 <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 8004688:	4b8a      	ldr	r3, [pc, #552]	; (80048b4 <menu+0x3308>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	4b88      	ldr	r3, [pc, #544]	; (80048b4 <menu+0x3308>)
 8004692:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004694:	4b87      	ldr	r3, [pc, #540]	; (80048b4 <menu+0x3308>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d902      	bls.n	80046a2 <menu+0x30f6>
				calismaSayModu = 0;
 800469c:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <menu+0x3308>)
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80046a2:	f001 fcf9 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80046a6:	2104      	movs	r1, #4
 80046a8:	487f      	ldr	r0, [pc, #508]	; (80048a8 <menu+0x32fc>)
 80046aa:	f005 fad1 	bl	8009c50 <HAL_GPIO_ReadPin>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d119      	bne.n	80046e8 <menu+0x313c>
 80046b4:	4b7d      	ldr	r3, [pc, #500]	; (80048ac <menu+0x3300>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f083 0301 	eor.w	r3, r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d012      	beq.n	80046e8 <menu+0x313c>
 80046c2:	4b7b      	ldr	r3, [pc, #492]	; (80048b0 <menu+0x3304>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 80046ca:	4b7a      	ldr	r3, [pc, #488]	; (80048b4 <menu+0x3308>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4b78      	ldr	r3, [pc, #480]	; (80048b4 <menu+0x3308>)
 80046d4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80046d6:	4b77      	ldr	r3, [pc, #476]	; (80048b4 <menu+0x3308>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <menu+0x3138>
		   		calismaSayModu = 1;
 80046de:	4b75      	ldr	r3, [pc, #468]	; (80048b4 <menu+0x3308>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046e4:	f001 fcd8 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046e8:	2108      	movs	r1, #8
 80046ea:	486f      	ldr	r0, [pc, #444]	; (80048a8 <menu+0x32fc>)
 80046ec:	f005 fab0 	bl	8009c50 <HAL_GPIO_ReadPin>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d12b      	bne.n	800474e <menu+0x31a2>
 80046f6:	4b6d      	ldr	r3, [pc, #436]	; (80048ac <menu+0x3300>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f083 0301 	eor.w	r3, r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d024      	beq.n	800474e <menu+0x31a2>
			eepromData[32] = 0;
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <menu+0x330c>)
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800470c:	4b6a      	ldr	r3, [pc, #424]	; (80048b8 <menu+0x330c>)
 800470e:	2200      	movs	r2, #0
 8004710:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004712:	4b69      	ldr	r3, [pc, #420]	; (80048b8 <menu+0x330c>)
 8004714:	2200      	movs	r2, #0
 8004716:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004718:	4b67      	ldr	r3, [pc, #412]	; (80048b8 <menu+0x330c>)
 800471a:	2200      	movs	r2, #0
 800471c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800471e:	4b66      	ldr	r3, [pc, #408]	; (80048b8 <menu+0x330c>)
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004724:	4b65      	ldr	r3, [pc, #404]	; (80048bc <menu+0x3310>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800472a:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <menu+0x3314>)
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004730:	4b64      	ldr	r3, [pc, #400]	; (80048c4 <menu+0x3318>)
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004736:	4b64      	ldr	r3, [pc, #400]	; (80048c8 <menu+0x331c>)
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800473c:	4b63      	ldr	r3, [pc, #396]	; (80048cc <menu+0x3320>)
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004742:	4b5c      	ldr	r3, [pc, #368]	; (80048b4 <menu+0x3308>)
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004748:	4b61      	ldr	r3, [pc, #388]	; (80048d0 <menu+0x3324>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800474e:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <menu+0x3328>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b1e      	cmp	r3, #30
 8004754:	d16f      	bne.n	8004836 <menu+0x328a>
		calismaSayModu = 0;
 8004756:	4b57      	ldr	r3, [pc, #348]	; (80048b4 <menu+0x3308>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800475c:	4b4f      	ldr	r3, [pc, #316]	; (800489c <menu+0x32f0>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004764:	4a5c      	ldr	r2, [pc, #368]	; (80048d8 <menu+0x332c>)
 8004766:	2101      	movs	r1, #1
 8004768:	2001      	movs	r0, #1
 800476a:	f7fc f825 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800476e:	4a5b      	ldr	r2, [pc, #364]	; (80048dc <menu+0x3330>)
 8004770:	2101      	movs	r1, #1
 8004772:	2002      	movs	r0, #2
 8004774:	f7fc f820 	bl	80007b8 <lcd_print>
 8004778:	e00d      	b.n	8004796 <menu+0x31ea>
		} else if(dilSecim == 1) {
 800477a:	4b48      	ldr	r3, [pc, #288]	; (800489c <menu+0x32f0>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d109      	bne.n	8004796 <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004782:	4a57      	ldr	r2, [pc, #348]	; (80048e0 <menu+0x3334>)
 8004784:	2101      	movs	r1, #1
 8004786:	2001      	movs	r0, #1
 8004788:	f7fc f816 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800478c:	4a55      	ldr	r2, [pc, #340]	; (80048e4 <menu+0x3338>)
 800478e:	2101      	movs	r1, #1
 8004790:	2002      	movs	r0, #2
 8004792:	f7fc f811 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004796:	2102      	movs	r1, #2
 8004798:	4843      	ldr	r0, [pc, #268]	; (80048a8 <menu+0x32fc>)
 800479a:	f005 fa59 	bl	8009c50 <HAL_GPIO_ReadPin>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d115      	bne.n	80047d0 <menu+0x3224>
 80047a4:	4b41      	ldr	r3, [pc, #260]	; (80048ac <menu+0x3300>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	f083 0301 	eor.w	r3, r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00e      	beq.n	80047d0 <menu+0x3224>
			dilSecim = dilSecim + 1;
 80047b2:	4b3a      	ldr	r3, [pc, #232]	; (800489c <menu+0x32f0>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	3301      	adds	r3, #1
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4b38      	ldr	r3, [pc, #224]	; (800489c <menu+0x32f0>)
 80047bc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80047be:	4b37      	ldr	r3, [pc, #220]	; (800489c <menu+0x32f0>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d902      	bls.n	80047cc <menu+0x3220>
				dilSecim = 0;
 80047c6:	4b35      	ldr	r3, [pc, #212]	; (800489c <menu+0x32f0>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047cc:	f001 fc64 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047d0:	2104      	movs	r1, #4
 80047d2:	4835      	ldr	r0, [pc, #212]	; (80048a8 <menu+0x32fc>)
 80047d4:	f005 fa3c 	bl	8009c50 <HAL_GPIO_ReadPin>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d115      	bne.n	800480a <menu+0x325e>
 80047de:	4b33      	ldr	r3, [pc, #204]	; (80048ac <menu+0x3300>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	f083 0301 	eor.w	r3, r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <menu+0x325e>
			dilSecim = dilSecim - 1;
 80047ec:	4b2b      	ldr	r3, [pc, #172]	; (800489c <menu+0x32f0>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	4b29      	ldr	r3, [pc, #164]	; (800489c <menu+0x32f0>)
 80047f6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80047f8:	4b28      	ldr	r3, [pc, #160]	; (800489c <menu+0x32f0>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <menu+0x325a>
		   		dilSecim = 1;
 8004800:	4b26      	ldr	r3, [pc, #152]	; (800489c <menu+0x32f0>)
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004806:	f001 fc47 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800480a:	2108      	movs	r1, #8
 800480c:	4826      	ldr	r0, [pc, #152]	; (80048a8 <menu+0x32fc>)
 800480e:	f005 fa1f 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10e      	bne.n	8004836 <menu+0x328a>
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <menu+0x3300>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	f083 0301 	eor.w	r3, r3, #1
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <menu+0x328a>
			eepromData[33] = dilSecim;
 8004826:	4b1d      	ldr	r3, [pc, #116]	; (800489c <menu+0x32f0>)
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <menu+0x330c>)
 800482c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004830:	4b27      	ldr	r3, [pc, #156]	; (80048d0 <menu+0x3324>)
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004836:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <menu+0x3328>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b1f      	cmp	r3, #31
 800483c:	f040 80b7 	bne.w	80049ae <menu+0x3402>
		calismaSayModu = 0;
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <menu+0x3308>)
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004846:	4a28      	ldr	r2, [pc, #160]	; (80048e8 <menu+0x333c>)
 8004848:	2101      	movs	r1, #1
 800484a:	2001      	movs	r0, #1
 800484c:	f7fb ffb4 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 8004850:	4b26      	ldr	r3, [pc, #152]	; (80048ec <menu+0x3340>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d113      	bne.n	8004880 <menu+0x32d4>
			if(dilSecim == 0) {
 8004858:	4b10      	ldr	r3, [pc, #64]	; (800489c <menu+0x32f0>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004860:	4a23      	ldr	r2, [pc, #140]	; (80048f0 <menu+0x3344>)
 8004862:	2101      	movs	r1, #1
 8004864:	2002      	movs	r0, #2
 8004866:	f7fb ffa7 	bl	80007b8 <lcd_print>
 800486a:	e050      	b.n	800490e <menu+0x3362>
			} else if(dilSecim == 1) {
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <menu+0x32f0>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d14c      	bne.n	800490e <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 8004874:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <menu+0x3348>)
 8004876:	2101      	movs	r1, #1
 8004878:	2002      	movs	r0, #2
 800487a:	f7fb ff9d 	bl	80007b8 <lcd_print>
 800487e:	e046      	b.n	800490e <menu+0x3362>
			}
		} else if(iotMode == 1) {
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <menu+0x3340>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d142      	bne.n	800490e <menu+0x3362>
			if(dilSecim == 0){
 8004888:	4b04      	ldr	r3, [pc, #16]	; (800489c <menu+0x32f0>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d135      	bne.n	80048fc <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <menu+0x334c>)
 8004892:	2101      	movs	r1, #1
 8004894:	2002      	movs	r0, #2
 8004896:	f7fb ff8f 	bl	80007b8 <lcd_print>
 800489a:	e038      	b.n	800490e <menu+0x3362>
 800489c:	20000c5a 	.word	0x20000c5a
 80048a0:	0800e294 	.word	0x0800e294
 80048a4:	0800e2c8 	.word	0x0800e2c8
 80048a8:	40010800 	.word	0x40010800
 80048ac:	20000c68 	.word	0x20000c68
 80048b0:	20000c7a 	.word	0x20000c7a
 80048b4:	20000c59 	.word	0x20000c59
 80048b8:	20000b28 	.word	0x20000b28
 80048bc:	20000c38 	.word	0x20000c38
 80048c0:	200009b2 	.word	0x200009b2
 80048c4:	200009b1 	.word	0x200009b1
 80048c8:	20000c37 	.word	0x20000c37
 80048cc:	20000c36 	.word	0x20000c36
 80048d0:	20000c65 	.word	0x20000c65
 80048d4:	20000c39 	.word	0x20000c39
 80048d8:	0800e2dc 	.word	0x0800e2dc
 80048dc:	0800e2f0 	.word	0x0800e2f0
 80048e0:	0800e304 	.word	0x0800e304
 80048e4:	0800e318 	.word	0x0800e318
 80048e8:	0800e32c 	.word	0x0800e32c
 80048ec:	20000c58 	.word	0x20000c58
 80048f0:	0800db84 	.word	0x0800db84
 80048f4:	0800db98 	.word	0x0800db98
 80048f8:	0800dbe4 	.word	0x0800dbe4
			} else if(dilSecim == 1) {
 80048fc:	4bae      	ldr	r3, [pc, #696]	; (8004bb8 <menu+0x360c>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d104      	bne.n	800490e <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 8004904:	4aad      	ldr	r2, [pc, #692]	; (8004bbc <menu+0x3610>)
 8004906:	2101      	movs	r1, #1
 8004908:	2002      	movs	r0, #2
 800490a:	f7fb ff55 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800490e:	2102      	movs	r1, #2
 8004910:	48ab      	ldr	r0, [pc, #684]	; (8004bc0 <menu+0x3614>)
 8004912:	f005 f99d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004916:	4603      	mov	r3, r0
 8004918:	2b01      	cmp	r3, #1
 800491a:	d115      	bne.n	8004948 <menu+0x339c>
 800491c:	4ba9      	ldr	r3, [pc, #676]	; (8004bc4 <menu+0x3618>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f083 0301 	eor.w	r3, r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00e      	beq.n	8004948 <menu+0x339c>
			iotMode = iotMode + 1;
 800492a:	4ba7      	ldr	r3, [pc, #668]	; (8004bc8 <menu+0x361c>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	3301      	adds	r3, #1
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4ba5      	ldr	r3, [pc, #660]	; (8004bc8 <menu+0x361c>)
 8004934:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004936:	4ba4      	ldr	r3, [pc, #656]	; (8004bc8 <menu+0x361c>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d902      	bls.n	8004944 <menu+0x3398>
				iotMode = 0;
 800493e:	4ba2      	ldr	r3, [pc, #648]	; (8004bc8 <menu+0x361c>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004944:	f001 fba8 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004948:	2104      	movs	r1, #4
 800494a:	489d      	ldr	r0, [pc, #628]	; (8004bc0 <menu+0x3614>)
 800494c:	f005 f980 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004950:	4603      	mov	r3, r0
 8004952:	2b01      	cmp	r3, #1
 8004954:	d115      	bne.n	8004982 <menu+0x33d6>
 8004956:	4b9b      	ldr	r3, [pc, #620]	; (8004bc4 <menu+0x3618>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	f083 0301 	eor.w	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00e      	beq.n	8004982 <menu+0x33d6>
			iotMode = iotMode - 1;
 8004964:	4b98      	ldr	r3, [pc, #608]	; (8004bc8 <menu+0x361c>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	3b01      	subs	r3, #1
 800496a:	b2da      	uxtb	r2, r3
 800496c:	4b96      	ldr	r3, [pc, #600]	; (8004bc8 <menu+0x361c>)
 800496e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004970:	4b95      	ldr	r3, [pc, #596]	; (8004bc8 <menu+0x361c>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <menu+0x33d2>
		   		iotMode = 1;
 8004978:	4b93      	ldr	r3, [pc, #588]	; (8004bc8 <menu+0x361c>)
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800497e:	f001 fb8b 	bl	8006098 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004982:	2108      	movs	r1, #8
 8004984:	488e      	ldr	r0, [pc, #568]	; (8004bc0 <menu+0x3614>)
 8004986:	f005 f963 	bl	8009c50 <HAL_GPIO_ReadPin>
 800498a:	4603      	mov	r3, r0
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10e      	bne.n	80049ae <menu+0x3402>
 8004990:	4b8c      	ldr	r3, [pc, #560]	; (8004bc4 <menu+0x3618>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	f083 0301 	eor.w	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <menu+0x3402>
			eepromData[37] = iotMode;
 800499e:	4b8a      	ldr	r3, [pc, #552]	; (8004bc8 <menu+0x361c>)
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	4b8a      	ldr	r3, [pc, #552]	; (8004bcc <menu+0x3620>)
 80049a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 80049a8:	4b89      	ldr	r3, [pc, #548]	; (8004bd0 <menu+0x3624>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80049ae:	4b89      	ldr	r3, [pc, #548]	; (8004bd4 <menu+0x3628>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d145      	bne.n	8004a42 <menu+0x3496>
		calismaSayModu = 0;
 80049b6:	4b88      	ldr	r3, [pc, #544]	; (8004bd8 <menu+0x362c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80049bc:	4a87      	ldr	r2, [pc, #540]	; (8004bdc <menu+0x3630>)
 80049be:	2101      	movs	r1, #1
 80049c0:	2001      	movs	r0, #1
 80049c2:	f7fb fef9 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 80049c6:	4a86      	ldr	r2, [pc, #536]	; (8004be0 <menu+0x3634>)
 80049c8:	2101      	movs	r1, #1
 80049ca:	2002      	movs	r0, #2
 80049cc:	f7fb fef4 	bl	80007b8 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 80049d0:	4883      	ldr	r0, [pc, #524]	; (8004be0 <menu+0x3634>)
 80049d2:	f7fb fc27 	bl	8000224 <strlen>
 80049d6:	4603      	mov	r3, r0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	3301      	adds	r3, #1
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	4a81      	ldr	r2, [pc, #516]	; (8004be4 <menu+0x3638>)
 80049e0:	4619      	mov	r1, r3
 80049e2:	2002      	movs	r0, #2
 80049e4:	f7fb fee8 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049e8:	2102      	movs	r1, #2
 80049ea:	4875      	ldr	r0, [pc, #468]	; (8004bc0 <menu+0x3614>)
 80049ec:	f005 f930 	bl	8009c50 <HAL_GPIO_ReadPin>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d125      	bne.n	8004a42 <menu+0x3496>
 80049f6:	2104      	movs	r1, #4
 80049f8:	4871      	ldr	r0, [pc, #452]	; (8004bc0 <menu+0x3614>)
 80049fa:	f005 f929 	bl	8009c50 <HAL_GPIO_ReadPin>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d11e      	bne.n	8004a42 <menu+0x3496>
 8004a04:	4b6f      	ldr	r3, [pc, #444]	; (8004bc4 <menu+0x3618>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	f083 0301 	eor.w	r3, r3, #1
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d017      	beq.n	8004a42 <menu+0x3496>
			takeMachineID(0, &hi2c1);
 8004a12:	1d3b      	adds	r3, r7, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	2000      	movs	r0, #0
 8004a18:	f7fc f97a 	bl	8000d10 <takeMachineID>

			lcd_print(2, 1, machineID);
 8004a1c:	4a70      	ldr	r2, [pc, #448]	; (8004be0 <menu+0x3634>)
 8004a1e:	2101      	movs	r1, #1
 8004a20:	2002      	movs	r0, #2
 8004a22:	f7fb fec9 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 8004a26:	486e      	ldr	r0, [pc, #440]	; (8004be0 <menu+0x3634>)
 8004a28:	f7fb fbfc 	bl	8000224 <strlen>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	3301      	adds	r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	4a6b      	ldr	r2, [pc, #428]	; (8004be4 <menu+0x3638>)
 8004a36:	4619      	mov	r1, r3
 8004a38:	2002      	movs	r0, #2
 8004a3a:	f7fb febd 	bl	80007b8 <lcd_print>

			bekle();
 8004a3e:	f001 fb2b 	bl	8006098 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004a42:	4b64      	ldr	r3, [pc, #400]	; (8004bd4 <menu+0x3628>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b21      	cmp	r3, #33	; 0x21
 8004a48:	d14f      	bne.n	8004aea <menu+0x353e>
		calismaSayModu = 0;
 8004a4a:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <menu+0x362c>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004a50:	4a65      	ldr	r2, [pc, #404]	; (8004be8 <menu+0x363c>)
 8004a52:	2101      	movs	r1, #1
 8004a54:	2001      	movs	r0, #1
 8004a56:	f7fb feaf 	bl	80007b8 <lcd_print>

		if(strlen(wifiSSID) <=16) {
 8004a5a:	4864      	ldr	r0, [pc, #400]	; (8004bec <menu+0x3640>)
 8004a5c:	f7fb fbe2 	bl	8000224 <strlen>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d811      	bhi.n	8004a8a <menu+0x34de>
			lcd_print(2, 1, wifiSSID);
 8004a66:	4a61      	ldr	r2, [pc, #388]	; (8004bec <menu+0x3640>)
 8004a68:	2101      	movs	r1, #1
 8004a6a:	2002      	movs	r0, #2
 8004a6c:	f7fb fea4 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004a70:	485e      	ldr	r0, [pc, #376]	; (8004bec <menu+0x3640>)
 8004a72:	f7fb fbd7 	bl	8000224 <strlen>
 8004a76:	4603      	mov	r3, r0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	4a59      	ldr	r2, [pc, #356]	; (8004be4 <menu+0x3638>)
 8004a80:	4619      	mov	r1, r3
 8004a82:	2002      	movs	r0, #2
 8004a84:	f7fb fe98 	bl	80007b8 <lcd_print>
 8004a88:	e004      	b.n	8004a94 <menu+0x34e8>
		} else {
			slideText(wifiSSID, 1, 2);
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	4857      	ldr	r0, [pc, #348]	; (8004bec <menu+0x3640>)
 8004a90:	f7fc fd4a 	bl	8001528 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a94:	2102      	movs	r1, #2
 8004a96:	484a      	ldr	r0, [pc, #296]	; (8004bc0 <menu+0x3614>)
 8004a98:	f005 f8da 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d123      	bne.n	8004aea <menu+0x353e>
 8004aa2:	2104      	movs	r1, #4
 8004aa4:	4846      	ldr	r0, [pc, #280]	; (8004bc0 <menu+0x3614>)
 8004aa6:	f005 f8d3 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d11c      	bne.n	8004aea <menu+0x353e>
 8004ab0:	4b44      	ldr	r3, [pc, #272]	; (8004bc4 <menu+0x3618>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	f083 0301 	eor.w	r3, r3, #1
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d015      	beq.n	8004aea <menu+0x353e>
			takeWifiSSID(0);
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f7fc fa3a 	bl	8000f38 <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 8004ac4:	4a49      	ldr	r2, [pc, #292]	; (8004bec <menu+0x3640>)
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	2002      	movs	r0, #2
 8004aca:	f7fb fe75 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004ace:	4847      	ldr	r0, [pc, #284]	; (8004bec <menu+0x3640>)
 8004ad0:	f7fb fba8 	bl	8000224 <strlen>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	3301      	adds	r3, #1
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	4a41      	ldr	r2, [pc, #260]	; (8004be4 <menu+0x3638>)
 8004ade:	4619      	mov	r1, r3
 8004ae0:	2002      	movs	r0, #2
 8004ae2:	f7fb fe69 	bl	80007b8 <lcd_print>

			bekle();
 8004ae6:	f001 fad7 	bl	8006098 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004aea:	4b3a      	ldr	r3, [pc, #232]	; (8004bd4 <menu+0x3628>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b22      	cmp	r3, #34	; 0x22
 8004af0:	d14f      	bne.n	8004b92 <menu+0x35e6>
		calismaSayModu = 0;
 8004af2:	4b39      	ldr	r3, [pc, #228]	; (8004bd8 <menu+0x362c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004af8:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <menu+0x3644>)
 8004afa:	2101      	movs	r1, #1
 8004afc:	2001      	movs	r0, #1
 8004afe:	f7fb fe5b 	bl	80007b8 <lcd_print>

		if(strlen(wifiPass) <= 16) {
 8004b02:	483c      	ldr	r0, [pc, #240]	; (8004bf4 <menu+0x3648>)
 8004b04:	f7fb fb8e 	bl	8000224 <strlen>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d811      	bhi.n	8004b32 <menu+0x3586>
			lcd_print(2, 1, wifiPass);
 8004b0e:	4a39      	ldr	r2, [pc, #228]	; (8004bf4 <menu+0x3648>)
 8004b10:	2101      	movs	r1, #1
 8004b12:	2002      	movs	r0, #2
 8004b14:	f7fb fe50 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004b18:	4836      	ldr	r0, [pc, #216]	; (8004bf4 <menu+0x3648>)
 8004b1a:	f7fb fb83 	bl	8000224 <strlen>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	3301      	adds	r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <menu+0x3638>)
 8004b28:	4619      	mov	r1, r3
 8004b2a:	2002      	movs	r0, #2
 8004b2c:	f7fb fe44 	bl	80007b8 <lcd_print>
 8004b30:	e004      	b.n	8004b3c <menu+0x3590>
		} else {
			slideText(wifiPass, 1, 2);
 8004b32:	2202      	movs	r2, #2
 8004b34:	2101      	movs	r1, #1
 8004b36:	482f      	ldr	r0, [pc, #188]	; (8004bf4 <menu+0x3648>)
 8004b38:	f7fc fcf6 	bl	8001528 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4820      	ldr	r0, [pc, #128]	; (8004bc0 <menu+0x3614>)
 8004b40:	f005 f886 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d123      	bne.n	8004b92 <menu+0x35e6>
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	481c      	ldr	r0, [pc, #112]	; (8004bc0 <menu+0x3614>)
 8004b4e:	f005 f87f 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d11c      	bne.n	8004b92 <menu+0x35e6>
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <menu+0x3618>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	f083 0301 	eor.w	r3, r3, #1
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d015      	beq.n	8004b92 <menu+0x35e6>
			takeWifiPass(0);
 8004b66:	2000      	movs	r0, #0
 8004b68:	f7fc fb62 	bl	8001230 <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 8004b6c:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <menu+0x3648>)
 8004b6e:	2101      	movs	r1, #1
 8004b70:	2002      	movs	r0, #2
 8004b72:	f7fb fe21 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004b76:	481f      	ldr	r0, [pc, #124]	; (8004bf4 <menu+0x3648>)
 8004b78:	f7fb fb54 	bl	8000224 <strlen>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	3301      	adds	r3, #1
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	4a17      	ldr	r2, [pc, #92]	; (8004be4 <menu+0x3638>)
 8004b86:	4619      	mov	r1, r3
 8004b88:	2002      	movs	r0, #2
 8004b8a:	f7fb fe15 	bl	80007b8 <lcd_print>

			bekle();
 8004b8e:	f001 fa83 	bl	8006098 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004b92:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <menu+0x3628>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b23      	cmp	r3, #35	; 0x23
 8004b98:	d152      	bne.n	8004c40 <menu+0x3694>
		if(dilSecim == 0) {
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <menu+0x360c>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d12e      	bne.n	8004c00 <menu+0x3654>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004ba2:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <menu+0x364c>)
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	f7fb fe06 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <menu+0x3650>)
 8004bae:	2101      	movs	r1, #1
 8004bb0:	2002      	movs	r0, #2
 8004bb2:	f7fb fe01 	bl	80007b8 <lcd_print>
 8004bb6:	e031      	b.n	8004c1c <menu+0x3670>
 8004bb8:	20000c5a 	.word	0x20000c5a
 8004bbc:	0800dbf8 	.word	0x0800dbf8
 8004bc0:	40010800 	.word	0x40010800
 8004bc4:	20000c68 	.word	0x20000c68
 8004bc8:	20000c58 	.word	0x20000c58
 8004bcc:	20000b28 	.word	0x20000b28
 8004bd0:	20000c65 	.word	0x20000c65
 8004bd4:	20000c39 	.word	0x20000c39
 8004bd8:	20000c59 	.word	0x20000c59
 8004bdc:	0800e340 	.word	0x0800e340
 8004be0:	20000be4 	.word	0x20000be4
 8004be4:	2000094c 	.word	0x2000094c
 8004be8:	0800e354 	.word	0x0800e354
 8004bec:	20000bf0 	.word	0x20000bf0
 8004bf0:	0800e368 	.word	0x0800e368
 8004bf4:	20000c14 	.word	0x20000c14
 8004bf8:	0800e37c 	.word	0x0800e37c
 8004bfc:	0800e390 	.word	0x0800e390
		} else if(dilSecim == 1) {
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <menu+0x369c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d109      	bne.n	8004c1c <menu+0x3670>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004c08:	4a10      	ldr	r2, [pc, #64]	; (8004c4c <menu+0x36a0>)
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	f7fb fdd3 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004c12:	4a0f      	ldr	r2, [pc, #60]	; (8004c50 <menu+0x36a4>)
 8004c14:	2101      	movs	r1, #1
 8004c16:	2002      	movs	r0, #2
 8004c18:	f7fb fdce 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004c1c:	2108      	movs	r1, #8
 8004c1e:	480d      	ldr	r0, [pc, #52]	; (8004c54 <menu+0x36a8>)
 8004c20:	f005 f816 	bl	8009c50 <HAL_GPIO_ReadPin>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10a      	bne.n	8004c40 <menu+0x3694>
			menuGiris = 0;
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <menu+0x36ac>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004c30:	f7fb fdee 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8004c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c38:	f004 fa3a 	bl	80090b0 <HAL_Delay>
			NVIC_SystemReset();
 8004c3c:	f7fb fe30 	bl	80008a0 <__NVIC_SystemReset>
		}
	}
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000c5a 	.word	0x20000c5a
 8004c4c:	0800e3a4 	.word	0x0800e3a4
 8004c50:	0800e3b8 	.word	0x0800e3b8
 8004c54:	40010800 	.word	0x40010800
 8004c58:	20000c56 	.word	0x20000c56

08004c5c <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004c66:	48a9      	ldr	r0, [pc, #676]	; (8004f0c <loadMenuTexts+0x2b0>)
 8004c68:	f7fb fe30 	bl	80008cc <copyText>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4aa8      	ldr	r2, [pc, #672]	; (8004f10 <loadMenuTexts+0x2b4>)
 8004c70:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004c72:	48a8      	ldr	r0, [pc, #672]	; (8004f14 <loadMenuTexts+0x2b8>)
 8004c74:	f7fb fe2a 	bl	80008cc <copyText>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4aa7      	ldr	r2, [pc, #668]	; (8004f18 <loadMenuTexts+0x2bc>)
 8004c7c:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004c7e:	48a7      	ldr	r0, [pc, #668]	; (8004f1c <loadMenuTexts+0x2c0>)
 8004c80:	f7fb fe24 	bl	80008cc <copyText>
 8004c84:	4603      	mov	r3, r0
 8004c86:	4aa6      	ldr	r2, [pc, #664]	; (8004f20 <loadMenuTexts+0x2c4>)
 8004c88:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004c8a:	48a6      	ldr	r0, [pc, #664]	; (8004f24 <loadMenuTexts+0x2c8>)
 8004c8c:	f7fb fe1e 	bl	80008cc <copyText>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4aa5      	ldr	r2, [pc, #660]	; (8004f28 <loadMenuTexts+0x2cc>)
 8004c94:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004c96:	48a5      	ldr	r0, [pc, #660]	; (8004f2c <loadMenuTexts+0x2d0>)
 8004c98:	f7fb fe18 	bl	80008cc <copyText>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4aa4      	ldr	r2, [pc, #656]	; (8004f30 <loadMenuTexts+0x2d4>)
 8004ca0:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004ca2:	48a4      	ldr	r0, [pc, #656]	; (8004f34 <loadMenuTexts+0x2d8>)
 8004ca4:	f7fb fe12 	bl	80008cc <copyText>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4aa3      	ldr	r2, [pc, #652]	; (8004f38 <loadMenuTexts+0x2dc>)
 8004cac:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004cae:	48a3      	ldr	r0, [pc, #652]	; (8004f3c <loadMenuTexts+0x2e0>)
 8004cb0:	f7fb fe0c 	bl	80008cc <copyText>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4aa2      	ldr	r2, [pc, #648]	; (8004f40 <loadMenuTexts+0x2e4>)
 8004cb8:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f040 82d1 	bne.w	8005264 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004cc2:	48a0      	ldr	r0, [pc, #640]	; (8004f44 <loadMenuTexts+0x2e8>)
 8004cc4:	f7fb fe02 	bl	80008cc <copyText>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4a9f      	ldr	r2, [pc, #636]	; (8004f48 <loadMenuTexts+0x2ec>)
 8004ccc:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004cce:	489f      	ldr	r0, [pc, #636]	; (8004f4c <loadMenuTexts+0x2f0>)
 8004cd0:	f7fb fdfc 	bl	80008cc <copyText>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4a9e      	ldr	r2, [pc, #632]	; (8004f50 <loadMenuTexts+0x2f4>)
 8004cd8:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004cda:	489e      	ldr	r0, [pc, #632]	; (8004f54 <loadMenuTexts+0x2f8>)
 8004cdc:	f7fb fdf6 	bl	80008cc <copyText>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a9d      	ldr	r2, [pc, #628]	; (8004f58 <loadMenuTexts+0x2fc>)
 8004ce4:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004ce6:	489d      	ldr	r0, [pc, #628]	; (8004f5c <loadMenuTexts+0x300>)
 8004ce8:	f7fb fdf0 	bl	80008cc <copyText>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4a9c      	ldr	r2, [pc, #624]	; (8004f60 <loadMenuTexts+0x304>)
 8004cf0:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004cf2:	489c      	ldr	r0, [pc, #624]	; (8004f64 <loadMenuTexts+0x308>)
 8004cf4:	f7fb fdea 	bl	80008cc <copyText>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4a9b      	ldr	r2, [pc, #620]	; (8004f68 <loadMenuTexts+0x30c>)
 8004cfc:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004cfe:	489b      	ldr	r0, [pc, #620]	; (8004f6c <loadMenuTexts+0x310>)
 8004d00:	f7fb fde4 	bl	80008cc <copyText>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4a9a      	ldr	r2, [pc, #616]	; (8004f70 <loadMenuTexts+0x314>)
 8004d08:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004d0a:	489a      	ldr	r0, [pc, #616]	; (8004f74 <loadMenuTexts+0x318>)
 8004d0c:	f7fb fdde 	bl	80008cc <copyText>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4a99      	ldr	r2, [pc, #612]	; (8004f78 <loadMenuTexts+0x31c>)
 8004d14:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004d16:	4899      	ldr	r0, [pc, #612]	; (8004f7c <loadMenuTexts+0x320>)
 8004d18:	f7fb fdd8 	bl	80008cc <copyText>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4a98      	ldr	r2, [pc, #608]	; (8004f80 <loadMenuTexts+0x324>)
 8004d20:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004d22:	4898      	ldr	r0, [pc, #608]	; (8004f84 <loadMenuTexts+0x328>)
 8004d24:	f7fb fdd2 	bl	80008cc <copyText>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4a97      	ldr	r2, [pc, #604]	; (8004f88 <loadMenuTexts+0x32c>)
 8004d2c:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004d2e:	4897      	ldr	r0, [pc, #604]	; (8004f8c <loadMenuTexts+0x330>)
 8004d30:	f7fb fdcc 	bl	80008cc <copyText>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4a96      	ldr	r2, [pc, #600]	; (8004f90 <loadMenuTexts+0x334>)
 8004d38:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004d3a:	4896      	ldr	r0, [pc, #600]	; (8004f94 <loadMenuTexts+0x338>)
 8004d3c:	f7fb fdc6 	bl	80008cc <copyText>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4a95      	ldr	r2, [pc, #596]	; (8004f98 <loadMenuTexts+0x33c>)
 8004d44:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004d46:	4895      	ldr	r0, [pc, #596]	; (8004f9c <loadMenuTexts+0x340>)
 8004d48:	f7fb fdc0 	bl	80008cc <copyText>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4a94      	ldr	r2, [pc, #592]	; (8004fa0 <loadMenuTexts+0x344>)
 8004d50:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004d52:	4894      	ldr	r0, [pc, #592]	; (8004fa4 <loadMenuTexts+0x348>)
 8004d54:	f7fb fdba 	bl	80008cc <copyText>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4a93      	ldr	r2, [pc, #588]	; (8004fa8 <loadMenuTexts+0x34c>)
 8004d5c:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004d5e:	4893      	ldr	r0, [pc, #588]	; (8004fac <loadMenuTexts+0x350>)
 8004d60:	f7fb fdb4 	bl	80008cc <copyText>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4a92      	ldr	r2, [pc, #584]	; (8004fb0 <loadMenuTexts+0x354>)
 8004d68:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004d6a:	4892      	ldr	r0, [pc, #584]	; (8004fb4 <loadMenuTexts+0x358>)
 8004d6c:	f7fb fdae 	bl	80008cc <copyText>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4a91      	ldr	r2, [pc, #580]	; (8004fb8 <loadMenuTexts+0x35c>)
 8004d74:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004d76:	4891      	ldr	r0, [pc, #580]	; (8004fbc <loadMenuTexts+0x360>)
 8004d78:	f7fb fda8 	bl	80008cc <copyText>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4a90      	ldr	r2, [pc, #576]	; (8004fc0 <loadMenuTexts+0x364>)
 8004d80:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004d82:	4890      	ldr	r0, [pc, #576]	; (8004fc4 <loadMenuTexts+0x368>)
 8004d84:	f7fb fda2 	bl	80008cc <copyText>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4a8f      	ldr	r2, [pc, #572]	; (8004fc8 <loadMenuTexts+0x36c>)
 8004d8c:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004d8e:	488f      	ldr	r0, [pc, #572]	; (8004fcc <loadMenuTexts+0x370>)
 8004d90:	f7fb fd9c 	bl	80008cc <copyText>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4a8e      	ldr	r2, [pc, #568]	; (8004fd0 <loadMenuTexts+0x374>)
 8004d98:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004d9a:	488e      	ldr	r0, [pc, #568]	; (8004fd4 <loadMenuTexts+0x378>)
 8004d9c:	f7fb fd96 	bl	80008cc <copyText>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4a8d      	ldr	r2, [pc, #564]	; (8004fd8 <loadMenuTexts+0x37c>)
 8004da4:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004da6:	488d      	ldr	r0, [pc, #564]	; (8004fdc <loadMenuTexts+0x380>)
 8004da8:	f7fb fd90 	bl	80008cc <copyText>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4a8c      	ldr	r2, [pc, #560]	; (8004fe0 <loadMenuTexts+0x384>)
 8004db0:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004db2:	488c      	ldr	r0, [pc, #560]	; (8004fe4 <loadMenuTexts+0x388>)
 8004db4:	f7fb fd8a 	bl	80008cc <copyText>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a8b      	ldr	r2, [pc, #556]	; (8004fe8 <loadMenuTexts+0x38c>)
 8004dbc:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004dbe:	488b      	ldr	r0, [pc, #556]	; (8004fec <loadMenuTexts+0x390>)
 8004dc0:	f7fb fd84 	bl	80008cc <copyText>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4a8a      	ldr	r2, [pc, #552]	; (8004ff0 <loadMenuTexts+0x394>)
 8004dc8:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004dca:	488a      	ldr	r0, [pc, #552]	; (8004ff4 <loadMenuTexts+0x398>)
 8004dcc:	f7fb fd7e 	bl	80008cc <copyText>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4a89      	ldr	r2, [pc, #548]	; (8004ff8 <loadMenuTexts+0x39c>)
 8004dd4:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004dd6:	4889      	ldr	r0, [pc, #548]	; (8004ffc <loadMenuTexts+0x3a0>)
 8004dd8:	f7fb fd78 	bl	80008cc <copyText>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a88      	ldr	r2, [pc, #544]	; (8005000 <loadMenuTexts+0x3a4>)
 8004de0:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004de2:	4888      	ldr	r0, [pc, #544]	; (8005004 <loadMenuTexts+0x3a8>)
 8004de4:	f7fb fd72 	bl	80008cc <copyText>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4a87      	ldr	r2, [pc, #540]	; (8005008 <loadMenuTexts+0x3ac>)
 8004dec:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004dee:	4887      	ldr	r0, [pc, #540]	; (800500c <loadMenuTexts+0x3b0>)
 8004df0:	f7fb fd6c 	bl	80008cc <copyText>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a86      	ldr	r2, [pc, #536]	; (8005010 <loadMenuTexts+0x3b4>)
 8004df8:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004dfa:	4886      	ldr	r0, [pc, #536]	; (8005014 <loadMenuTexts+0x3b8>)
 8004dfc:	f7fb fd66 	bl	80008cc <copyText>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4a85      	ldr	r2, [pc, #532]	; (8005018 <loadMenuTexts+0x3bc>)
 8004e04:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004e06:	4885      	ldr	r0, [pc, #532]	; (800501c <loadMenuTexts+0x3c0>)
 8004e08:	f7fb fd60 	bl	80008cc <copyText>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4a84      	ldr	r2, [pc, #528]	; (8005020 <loadMenuTexts+0x3c4>)
 8004e10:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004e12:	4884      	ldr	r0, [pc, #528]	; (8005024 <loadMenuTexts+0x3c8>)
 8004e14:	f7fb fd5a 	bl	80008cc <copyText>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4a83      	ldr	r2, [pc, #524]	; (8005028 <loadMenuTexts+0x3cc>)
 8004e1c:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004e1e:	4883      	ldr	r0, [pc, #524]	; (800502c <loadMenuTexts+0x3d0>)
 8004e20:	f7fb fd54 	bl	80008cc <copyText>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4a82      	ldr	r2, [pc, #520]	; (8005030 <loadMenuTexts+0x3d4>)
 8004e28:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004e2a:	4882      	ldr	r0, [pc, #520]	; (8005034 <loadMenuTexts+0x3d8>)
 8004e2c:	f7fb fd4e 	bl	80008cc <copyText>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4a81      	ldr	r2, [pc, #516]	; (8005038 <loadMenuTexts+0x3dc>)
 8004e34:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004e36:	4881      	ldr	r0, [pc, #516]	; (800503c <loadMenuTexts+0x3e0>)
 8004e38:	f7fb fd48 	bl	80008cc <copyText>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	4a80      	ldr	r2, [pc, #512]	; (8005040 <loadMenuTexts+0x3e4>)
 8004e40:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004e42:	4880      	ldr	r0, [pc, #512]	; (8005044 <loadMenuTexts+0x3e8>)
 8004e44:	f7fb fd42 	bl	80008cc <copyText>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4a7f      	ldr	r2, [pc, #508]	; (8005048 <loadMenuTexts+0x3ec>)
 8004e4c:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004e4e:	487f      	ldr	r0, [pc, #508]	; (800504c <loadMenuTexts+0x3f0>)
 8004e50:	f7fb fd3c 	bl	80008cc <copyText>
 8004e54:	4603      	mov	r3, r0
 8004e56:	4a7e      	ldr	r2, [pc, #504]	; (8005050 <loadMenuTexts+0x3f4>)
 8004e58:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004e5a:	487e      	ldr	r0, [pc, #504]	; (8005054 <loadMenuTexts+0x3f8>)
 8004e5c:	f7fb fd36 	bl	80008cc <copyText>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4a7d      	ldr	r2, [pc, #500]	; (8005058 <loadMenuTexts+0x3fc>)
 8004e64:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004e66:	487d      	ldr	r0, [pc, #500]	; (800505c <loadMenuTexts+0x400>)
 8004e68:	f7fb fd30 	bl	80008cc <copyText>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4a7c      	ldr	r2, [pc, #496]	; (8005060 <loadMenuTexts+0x404>)
 8004e70:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004e72:	487c      	ldr	r0, [pc, #496]	; (8005064 <loadMenuTexts+0x408>)
 8004e74:	f7fb fd2a 	bl	80008cc <copyText>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4a7b      	ldr	r2, [pc, #492]	; (8005068 <loadMenuTexts+0x40c>)
 8004e7c:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004e7e:	487b      	ldr	r0, [pc, #492]	; (800506c <loadMenuTexts+0x410>)
 8004e80:	f7fb fd24 	bl	80008cc <copyText>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4a7a      	ldr	r2, [pc, #488]	; (8005070 <loadMenuTexts+0x414>)
 8004e88:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004e8a:	487a      	ldr	r0, [pc, #488]	; (8005074 <loadMenuTexts+0x418>)
 8004e8c:	f7fb fd1e 	bl	80008cc <copyText>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4a79      	ldr	r2, [pc, #484]	; (8005078 <loadMenuTexts+0x41c>)
 8004e94:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004e96:	4879      	ldr	r0, [pc, #484]	; (800507c <loadMenuTexts+0x420>)
 8004e98:	f7fb fd18 	bl	80008cc <copyText>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4a78      	ldr	r2, [pc, #480]	; (8005080 <loadMenuTexts+0x424>)
 8004ea0:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004ea2:	4878      	ldr	r0, [pc, #480]	; (8005084 <loadMenuTexts+0x428>)
 8004ea4:	f7fb fd12 	bl	80008cc <copyText>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4a77      	ldr	r2, [pc, #476]	; (8005088 <loadMenuTexts+0x42c>)
 8004eac:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004eae:	4877      	ldr	r0, [pc, #476]	; (800508c <loadMenuTexts+0x430>)
 8004eb0:	f7fb fd0c 	bl	80008cc <copyText>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4a76      	ldr	r2, [pc, #472]	; (8005090 <loadMenuTexts+0x434>)
 8004eb8:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004eba:	4876      	ldr	r0, [pc, #472]	; (8005094 <loadMenuTexts+0x438>)
 8004ebc:	f7fb fd06 	bl	80008cc <copyText>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4a75      	ldr	r2, [pc, #468]	; (8005098 <loadMenuTexts+0x43c>)
 8004ec4:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004ec6:	4875      	ldr	r0, [pc, #468]	; (800509c <loadMenuTexts+0x440>)
 8004ec8:	f7fb fd00 	bl	80008cc <copyText>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4a74      	ldr	r2, [pc, #464]	; (80050a0 <loadMenuTexts+0x444>)
 8004ed0:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004ed2:	4874      	ldr	r0, [pc, #464]	; (80050a4 <loadMenuTexts+0x448>)
 8004ed4:	f7fb fcfa 	bl	80008cc <copyText>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4a73      	ldr	r2, [pc, #460]	; (80050a8 <loadMenuTexts+0x44c>)
 8004edc:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004ede:	4873      	ldr	r0, [pc, #460]	; (80050ac <loadMenuTexts+0x450>)
 8004ee0:	f7fb fcf4 	bl	80008cc <copyText>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4a72      	ldr	r2, [pc, #456]	; (80050b0 <loadMenuTexts+0x454>)
 8004ee8:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004eea:	4872      	ldr	r0, [pc, #456]	; (80050b4 <loadMenuTexts+0x458>)
 8004eec:	f7fb fcee 	bl	80008cc <copyText>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4a71      	ldr	r2, [pc, #452]	; (80050b8 <loadMenuTexts+0x45c>)
 8004ef4:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004ef6:	4871      	ldr	r0, [pc, #452]	; (80050bc <loadMenuTexts+0x460>)
 8004ef8:	f7fb fce8 	bl	80008cc <copyText>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4a70      	ldr	r2, [pc, #448]	; (80050c0 <loadMenuTexts+0x464>)
 8004f00:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004f02:	4870      	ldr	r0, [pc, #448]	; (80050c4 <loadMenuTexts+0x468>)
 8004f04:	f7fb fce2 	bl	80008cc <copyText>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	e0dd      	b.n	80050c8 <loadMenuTexts+0x46c>
 8004f0c:	20000000 	.word	0x20000000
 8004f10:	20000ca0 	.word	0x20000ca0
 8004f14:	20000010 	.word	0x20000010
 8004f18:	20000ca4 	.word	0x20000ca4
 8004f1c:	20000020 	.word	0x20000020
 8004f20:	20000cfc 	.word	0x20000cfc
 8004f24:	20000030 	.word	0x20000030
 8004f28:	20000d2c 	.word	0x20000d2c
 8004f2c:	20000040 	.word	0x20000040
 8004f30:	20000d34 	.word	0x20000d34
 8004f34:	20000050 	.word	0x20000050
 8004f38:	20000dac 	.word	0x20000dac
 8004f3c:	20000060 	.word	0x20000060
 8004f40:	20000db0 	.word	0x20000db0
 8004f44:	20000070 	.word	0x20000070
 8004f48:	20000ca8 	.word	0x20000ca8
 8004f4c:	20000080 	.word	0x20000080
 8004f50:	20000cac 	.word	0x20000cac
 8004f54:	20000090 	.word	0x20000090
 8004f58:	20000cb0 	.word	0x20000cb0
 8004f5c:	200000a0 	.word	0x200000a0
 8004f60:	20000cb4 	.word	0x20000cb4
 8004f64:	200000b0 	.word	0x200000b0
 8004f68:	20000cb8 	.word	0x20000cb8
 8004f6c:	200000c0 	.word	0x200000c0
 8004f70:	20000cbc 	.word	0x20000cbc
 8004f74:	200000d0 	.word	0x200000d0
 8004f78:	20000cc0 	.word	0x20000cc0
 8004f7c:	200000e0 	.word	0x200000e0
 8004f80:	20000cc4 	.word	0x20000cc4
 8004f84:	200000f0 	.word	0x200000f0
 8004f88:	20000cc8 	.word	0x20000cc8
 8004f8c:	20000100 	.word	0x20000100
 8004f90:	20000ccc 	.word	0x20000ccc
 8004f94:	20000110 	.word	0x20000110
 8004f98:	20000cd0 	.word	0x20000cd0
 8004f9c:	20000120 	.word	0x20000120
 8004fa0:	20000cd4 	.word	0x20000cd4
 8004fa4:	20000130 	.word	0x20000130
 8004fa8:	20000cd8 	.word	0x20000cd8
 8004fac:	20000140 	.word	0x20000140
 8004fb0:	20000cdc 	.word	0x20000cdc
 8004fb4:	20000150 	.word	0x20000150
 8004fb8:	20000ce0 	.word	0x20000ce0
 8004fbc:	20000160 	.word	0x20000160
 8004fc0:	20000ce4 	.word	0x20000ce4
 8004fc4:	20000170 	.word	0x20000170
 8004fc8:	20000ce8 	.word	0x20000ce8
 8004fcc:	20000180 	.word	0x20000180
 8004fd0:	20000cec 	.word	0x20000cec
 8004fd4:	20000190 	.word	0x20000190
 8004fd8:	20000cf0 	.word	0x20000cf0
 8004fdc:	200001a0 	.word	0x200001a0
 8004fe0:	20000cf4 	.word	0x20000cf4
 8004fe4:	200001b0 	.word	0x200001b0
 8004fe8:	20000cf8 	.word	0x20000cf8
 8004fec:	200001c0 	.word	0x200001c0
 8004ff0:	20000d00 	.word	0x20000d00
 8004ff4:	200001d0 	.word	0x200001d0
 8004ff8:	20000d04 	.word	0x20000d04
 8004ffc:	200001e0 	.word	0x200001e0
 8005000:	20000d08 	.word	0x20000d08
 8005004:	200001f0 	.word	0x200001f0
 8005008:	20000d0c 	.word	0x20000d0c
 800500c:	20000200 	.word	0x20000200
 8005010:	20000d10 	.word	0x20000d10
 8005014:	20000210 	.word	0x20000210
 8005018:	20000d14 	.word	0x20000d14
 800501c:	20000220 	.word	0x20000220
 8005020:	20000d18 	.word	0x20000d18
 8005024:	20000230 	.word	0x20000230
 8005028:	20000d1c 	.word	0x20000d1c
 800502c:	20000240 	.word	0x20000240
 8005030:	20000d20 	.word	0x20000d20
 8005034:	20000250 	.word	0x20000250
 8005038:	20000d24 	.word	0x20000d24
 800503c:	20000260 	.word	0x20000260
 8005040:	20000d28 	.word	0x20000d28
 8005044:	20000270 	.word	0x20000270
 8005048:	20000d30 	.word	0x20000d30
 800504c:	20000280 	.word	0x20000280
 8005050:	20000d38 	.word	0x20000d38
 8005054:	20000290 	.word	0x20000290
 8005058:	20000d3c 	.word	0x20000d3c
 800505c:	200002a0 	.word	0x200002a0
 8005060:	20000d40 	.word	0x20000d40
 8005064:	200002b0 	.word	0x200002b0
 8005068:	20000d44 	.word	0x20000d44
 800506c:	200002c0 	.word	0x200002c0
 8005070:	20000d48 	.word	0x20000d48
 8005074:	200002d0 	.word	0x200002d0
 8005078:	20000d4c 	.word	0x20000d4c
 800507c:	200002e0 	.word	0x200002e0
 8005080:	20000d50 	.word	0x20000d50
 8005084:	200002f0 	.word	0x200002f0
 8005088:	20000d54 	.word	0x20000d54
 800508c:	20000300 	.word	0x20000300
 8005090:	20000d58 	.word	0x20000d58
 8005094:	20000310 	.word	0x20000310
 8005098:	20000d5c 	.word	0x20000d5c
 800509c:	20000320 	.word	0x20000320
 80050a0:	20000d60 	.word	0x20000d60
 80050a4:	20000330 	.word	0x20000330
 80050a8:	20000d64 	.word	0x20000d64
 80050ac:	20000340 	.word	0x20000340
 80050b0:	20000d68 	.word	0x20000d68
 80050b4:	20000350 	.word	0x20000350
 80050b8:	20000d6c 	.word	0x20000d6c
 80050bc:	20000360 	.word	0x20000360
 80050c0:	20000d70 	.word	0x20000d70
 80050c4:	20000370 	.word	0x20000370
 80050c8:	4a3d      	ldr	r2, [pc, #244]	; (80051c0 <loadMenuTexts+0x564>)
 80050ca:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 80050cc:	483d      	ldr	r0, [pc, #244]	; (80051c4 <loadMenuTexts+0x568>)
 80050ce:	f7fb fbfd 	bl	80008cc <copyText>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4a3c      	ldr	r2, [pc, #240]	; (80051c8 <loadMenuTexts+0x56c>)
 80050d6:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 80050d8:	483c      	ldr	r0, [pc, #240]	; (80051cc <loadMenuTexts+0x570>)
 80050da:	f7fb fbf7 	bl	80008cc <copyText>
 80050de:	4603      	mov	r3, r0
 80050e0:	4a3b      	ldr	r2, [pc, #236]	; (80051d0 <loadMenuTexts+0x574>)
 80050e2:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 80050e4:	483b      	ldr	r0, [pc, #236]	; (80051d4 <loadMenuTexts+0x578>)
 80050e6:	f7fb fbf1 	bl	80008cc <copyText>
 80050ea:	4603      	mov	r3, r0
 80050ec:	4a3a      	ldr	r2, [pc, #232]	; (80051d8 <loadMenuTexts+0x57c>)
 80050ee:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 80050f0:	483a      	ldr	r0, [pc, #232]	; (80051dc <loadMenuTexts+0x580>)
 80050f2:	f7fb fbeb 	bl	80008cc <copyText>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4a39      	ldr	r2, [pc, #228]	; (80051e0 <loadMenuTexts+0x584>)
 80050fa:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 80050fc:	4839      	ldr	r0, [pc, #228]	; (80051e4 <loadMenuTexts+0x588>)
 80050fe:	f7fb fbe5 	bl	80008cc <copyText>
 8005102:	4603      	mov	r3, r0
 8005104:	4a38      	ldr	r2, [pc, #224]	; (80051e8 <loadMenuTexts+0x58c>)
 8005106:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005108:	4838      	ldr	r0, [pc, #224]	; (80051ec <loadMenuTexts+0x590>)
 800510a:	f7fb fbdf 	bl	80008cc <copyText>
 800510e:	4603      	mov	r3, r0
 8005110:	4a37      	ldr	r2, [pc, #220]	; (80051f0 <loadMenuTexts+0x594>)
 8005112:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005114:	4837      	ldr	r0, [pc, #220]	; (80051f4 <loadMenuTexts+0x598>)
 8005116:	f7fb fbd9 	bl	80008cc <copyText>
 800511a:	4603      	mov	r3, r0
 800511c:	4a36      	ldr	r2, [pc, #216]	; (80051f8 <loadMenuTexts+0x59c>)
 800511e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005120:	4836      	ldr	r0, [pc, #216]	; (80051fc <loadMenuTexts+0x5a0>)
 8005122:	f7fb fbd3 	bl	80008cc <copyText>
 8005126:	4603      	mov	r3, r0
 8005128:	4a35      	ldr	r2, [pc, #212]	; (8005200 <loadMenuTexts+0x5a4>)
 800512a:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 800512c:	4835      	ldr	r0, [pc, #212]	; (8005204 <loadMenuTexts+0x5a8>)
 800512e:	f7fb fbcd 	bl	80008cc <copyText>
 8005132:	4603      	mov	r3, r0
 8005134:	4a34      	ldr	r2, [pc, #208]	; (8005208 <loadMenuTexts+0x5ac>)
 8005136:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005138:	4834      	ldr	r0, [pc, #208]	; (800520c <loadMenuTexts+0x5b0>)
 800513a:	f7fb fbc7 	bl	80008cc <copyText>
 800513e:	4603      	mov	r3, r0
 8005140:	4a33      	ldr	r2, [pc, #204]	; (8005210 <loadMenuTexts+0x5b4>)
 8005142:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8005144:	4833      	ldr	r0, [pc, #204]	; (8005214 <loadMenuTexts+0x5b8>)
 8005146:	f7fb fbc1 	bl	80008cc <copyText>
 800514a:	4603      	mov	r3, r0
 800514c:	4a32      	ldr	r2, [pc, #200]	; (8005218 <loadMenuTexts+0x5bc>)
 800514e:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005150:	4832      	ldr	r0, [pc, #200]	; (800521c <loadMenuTexts+0x5c0>)
 8005152:	f7fb fbbb 	bl	80008cc <copyText>
 8005156:	4603      	mov	r3, r0
 8005158:	4a31      	ldr	r2, [pc, #196]	; (8005220 <loadMenuTexts+0x5c4>)
 800515a:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 800515c:	4831      	ldr	r0, [pc, #196]	; (8005224 <loadMenuTexts+0x5c8>)
 800515e:	f7fb fbb5 	bl	80008cc <copyText>
 8005162:	4603      	mov	r3, r0
 8005164:	4a30      	ldr	r2, [pc, #192]	; (8005228 <loadMenuTexts+0x5cc>)
 8005166:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8005168:	4830      	ldr	r0, [pc, #192]	; (800522c <loadMenuTexts+0x5d0>)
 800516a:	f7fb fbaf 	bl	80008cc <copyText>
 800516e:	4603      	mov	r3, r0
 8005170:	4a2f      	ldr	r2, [pc, #188]	; (8005230 <loadMenuTexts+0x5d4>)
 8005172:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8005174:	482f      	ldr	r0, [pc, #188]	; (8005234 <loadMenuTexts+0x5d8>)
 8005176:	f7fb fba9 	bl	80008cc <copyText>
 800517a:	4603      	mov	r3, r0
 800517c:	4a2e      	ldr	r2, [pc, #184]	; (8005238 <loadMenuTexts+0x5dc>)
 800517e:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005180:	482e      	ldr	r0, [pc, #184]	; (800523c <loadMenuTexts+0x5e0>)
 8005182:	f7fb fba3 	bl	80008cc <copyText>
 8005186:	4603      	mov	r3, r0
 8005188:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <loadMenuTexts+0x5e4>)
 800518a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 800518c:	482d      	ldr	r0, [pc, #180]	; (8005244 <loadMenuTexts+0x5e8>)
 800518e:	f7fb fb9d 	bl	80008cc <copyText>
 8005192:	4603      	mov	r3, r0
 8005194:	4a2c      	ldr	r2, [pc, #176]	; (8005248 <loadMenuTexts+0x5ec>)
 8005196:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005198:	482c      	ldr	r0, [pc, #176]	; (800524c <loadMenuTexts+0x5f0>)
 800519a:	f7fb fb97 	bl	80008cc <copyText>
 800519e:	4603      	mov	r3, r0
 80051a0:	4a2b      	ldr	r2, [pc, #172]	; (8005250 <loadMenuTexts+0x5f4>)
 80051a2:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80051a4:	482b      	ldr	r0, [pc, #172]	; (8005254 <loadMenuTexts+0x5f8>)
 80051a6:	f7fb fb91 	bl	80008cc <copyText>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <loadMenuTexts+0x5fc>)
 80051ae:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80051b0:	482a      	ldr	r0, [pc, #168]	; (800525c <loadMenuTexts+0x600>)
 80051b2:	f7fb fb8b 	bl	80008cc <copyText>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4a29      	ldr	r2, [pc, #164]	; (8005260 <loadMenuTexts+0x604>)
 80051ba:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80051bc:	e2d3      	b.n	8005766 <loadMenuTexts+0xb0a>
 80051be:	bf00      	nop
 80051c0:	20000d74 	.word	0x20000d74
 80051c4:	20000380 	.word	0x20000380
 80051c8:	20000d78 	.word	0x20000d78
 80051cc:	20000390 	.word	0x20000390
 80051d0:	20000d7c 	.word	0x20000d7c
 80051d4:	200003a0 	.word	0x200003a0
 80051d8:	20000d80 	.word	0x20000d80
 80051dc:	200003b0 	.word	0x200003b0
 80051e0:	20000d84 	.word	0x20000d84
 80051e4:	200003c0 	.word	0x200003c0
 80051e8:	20000d88 	.word	0x20000d88
 80051ec:	200003d0 	.word	0x200003d0
 80051f0:	20000d8c 	.word	0x20000d8c
 80051f4:	200003e0 	.word	0x200003e0
 80051f8:	20000d90 	.word	0x20000d90
 80051fc:	200003f0 	.word	0x200003f0
 8005200:	20000d94 	.word	0x20000d94
 8005204:	20000400 	.word	0x20000400
 8005208:	20000d98 	.word	0x20000d98
 800520c:	20000410 	.word	0x20000410
 8005210:	20000d9c 	.word	0x20000d9c
 8005214:	20000420 	.word	0x20000420
 8005218:	20000da0 	.word	0x20000da0
 800521c:	20000430 	.word	0x20000430
 8005220:	20000da4 	.word	0x20000da4
 8005224:	20000440 	.word	0x20000440
 8005228:	20000da8 	.word	0x20000da8
 800522c:	20000450 	.word	0x20000450
 8005230:	20000db4 	.word	0x20000db4
 8005234:	20000460 	.word	0x20000460
 8005238:	20000db8 	.word	0x20000db8
 800523c:	20000470 	.word	0x20000470
 8005240:	20000dbc 	.word	0x20000dbc
 8005244:	20000480 	.word	0x20000480
 8005248:	20000dc0 	.word	0x20000dc0
 800524c:	20000490 	.word	0x20000490
 8005250:	20000dc4 	.word	0x20000dc4
 8005254:	200004a0 	.word	0x200004a0
 8005258:	20000dc8 	.word	0x20000dc8
 800525c:	200004b0 	.word	0x200004b0
 8005260:	20000dcc 	.word	0x20000dcc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8005264:	48a9      	ldr	r0, [pc, #676]	; (800550c <loadMenuTexts+0x8b0>)
 8005266:	f7fb fb31 	bl	80008cc <copyText>
 800526a:	4603      	mov	r3, r0
 800526c:	4aa8      	ldr	r2, [pc, #672]	; (8005510 <loadMenuTexts+0x8b4>)
 800526e:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8005270:	48a8      	ldr	r0, [pc, #672]	; (8005514 <loadMenuTexts+0x8b8>)
 8005272:	f7fb fb2b 	bl	80008cc <copyText>
 8005276:	4603      	mov	r3, r0
 8005278:	4aa7      	ldr	r2, [pc, #668]	; (8005518 <loadMenuTexts+0x8bc>)
 800527a:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 800527c:	48a7      	ldr	r0, [pc, #668]	; (800551c <loadMenuTexts+0x8c0>)
 800527e:	f7fb fb25 	bl	80008cc <copyText>
 8005282:	4603      	mov	r3, r0
 8005284:	4aa6      	ldr	r2, [pc, #664]	; (8005520 <loadMenuTexts+0x8c4>)
 8005286:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005288:	48a6      	ldr	r0, [pc, #664]	; (8005524 <loadMenuTexts+0x8c8>)
 800528a:	f7fb fb1f 	bl	80008cc <copyText>
 800528e:	4603      	mov	r3, r0
 8005290:	4aa5      	ldr	r2, [pc, #660]	; (8005528 <loadMenuTexts+0x8cc>)
 8005292:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8005294:	48a5      	ldr	r0, [pc, #660]	; (800552c <loadMenuTexts+0x8d0>)
 8005296:	f7fb fb19 	bl	80008cc <copyText>
 800529a:	4603      	mov	r3, r0
 800529c:	4aa4      	ldr	r2, [pc, #656]	; (8005530 <loadMenuTexts+0x8d4>)
 800529e:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80052a0:	48a4      	ldr	r0, [pc, #656]	; (8005534 <loadMenuTexts+0x8d8>)
 80052a2:	f7fb fb13 	bl	80008cc <copyText>
 80052a6:	4603      	mov	r3, r0
 80052a8:	4aa3      	ldr	r2, [pc, #652]	; (8005538 <loadMenuTexts+0x8dc>)
 80052aa:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80052ac:	48a3      	ldr	r0, [pc, #652]	; (800553c <loadMenuTexts+0x8e0>)
 80052ae:	f7fb fb0d 	bl	80008cc <copyText>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4aa2      	ldr	r2, [pc, #648]	; (8005540 <loadMenuTexts+0x8e4>)
 80052b6:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80052b8:	48a2      	ldr	r0, [pc, #648]	; (8005544 <loadMenuTexts+0x8e8>)
 80052ba:	f7fb fb07 	bl	80008cc <copyText>
 80052be:	4603      	mov	r3, r0
 80052c0:	4aa1      	ldr	r2, [pc, #644]	; (8005548 <loadMenuTexts+0x8ec>)
 80052c2:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80052c4:	48a1      	ldr	r0, [pc, #644]	; (800554c <loadMenuTexts+0x8f0>)
 80052c6:	f7fb fb01 	bl	80008cc <copyText>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4aa0      	ldr	r2, [pc, #640]	; (8005550 <loadMenuTexts+0x8f4>)
 80052ce:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80052d0:	48a0      	ldr	r0, [pc, #640]	; (8005554 <loadMenuTexts+0x8f8>)
 80052d2:	f7fb fafb 	bl	80008cc <copyText>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4a9f      	ldr	r2, [pc, #636]	; (8005558 <loadMenuTexts+0x8fc>)
 80052da:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80052dc:	489f      	ldr	r0, [pc, #636]	; (800555c <loadMenuTexts+0x900>)
 80052de:	f7fb faf5 	bl	80008cc <copyText>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a9e      	ldr	r2, [pc, #632]	; (8005560 <loadMenuTexts+0x904>)
 80052e6:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80052e8:	489e      	ldr	r0, [pc, #632]	; (8005564 <loadMenuTexts+0x908>)
 80052ea:	f7fb faef 	bl	80008cc <copyText>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4a9d      	ldr	r2, [pc, #628]	; (8005568 <loadMenuTexts+0x90c>)
 80052f2:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80052f4:	489d      	ldr	r0, [pc, #628]	; (800556c <loadMenuTexts+0x910>)
 80052f6:	f7fb fae9 	bl	80008cc <copyText>
 80052fa:	4603      	mov	r3, r0
 80052fc:	4a9c      	ldr	r2, [pc, #624]	; (8005570 <loadMenuTexts+0x914>)
 80052fe:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005300:	489c      	ldr	r0, [pc, #624]	; (8005574 <loadMenuTexts+0x918>)
 8005302:	f7fb fae3 	bl	80008cc <copyText>
 8005306:	4603      	mov	r3, r0
 8005308:	4a9b      	ldr	r2, [pc, #620]	; (8005578 <loadMenuTexts+0x91c>)
 800530a:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 800530c:	489b      	ldr	r0, [pc, #620]	; (800557c <loadMenuTexts+0x920>)
 800530e:	f7fb fadd 	bl	80008cc <copyText>
 8005312:	4603      	mov	r3, r0
 8005314:	4a9a      	ldr	r2, [pc, #616]	; (8005580 <loadMenuTexts+0x924>)
 8005316:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005318:	489a      	ldr	r0, [pc, #616]	; (8005584 <loadMenuTexts+0x928>)
 800531a:	f7fb fad7 	bl	80008cc <copyText>
 800531e:	4603      	mov	r3, r0
 8005320:	4a99      	ldr	r2, [pc, #612]	; (8005588 <loadMenuTexts+0x92c>)
 8005322:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005324:	4899      	ldr	r0, [pc, #612]	; (800558c <loadMenuTexts+0x930>)
 8005326:	f7fb fad1 	bl	80008cc <copyText>
 800532a:	4603      	mov	r3, r0
 800532c:	4a98      	ldr	r2, [pc, #608]	; (8005590 <loadMenuTexts+0x934>)
 800532e:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005330:	4898      	ldr	r0, [pc, #608]	; (8005594 <loadMenuTexts+0x938>)
 8005332:	f7fb facb 	bl	80008cc <copyText>
 8005336:	4603      	mov	r3, r0
 8005338:	4a97      	ldr	r2, [pc, #604]	; (8005598 <loadMenuTexts+0x93c>)
 800533a:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 800533c:	4897      	ldr	r0, [pc, #604]	; (800559c <loadMenuTexts+0x940>)
 800533e:	f7fb fac5 	bl	80008cc <copyText>
 8005342:	4603      	mov	r3, r0
 8005344:	4a96      	ldr	r2, [pc, #600]	; (80055a0 <loadMenuTexts+0x944>)
 8005346:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005348:	4896      	ldr	r0, [pc, #600]	; (80055a4 <loadMenuTexts+0x948>)
 800534a:	f7fb fabf 	bl	80008cc <copyText>
 800534e:	4603      	mov	r3, r0
 8005350:	4a95      	ldr	r2, [pc, #596]	; (80055a8 <loadMenuTexts+0x94c>)
 8005352:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8005354:	4895      	ldr	r0, [pc, #596]	; (80055ac <loadMenuTexts+0x950>)
 8005356:	f7fb fab9 	bl	80008cc <copyText>
 800535a:	4603      	mov	r3, r0
 800535c:	4a94      	ldr	r2, [pc, #592]	; (80055b0 <loadMenuTexts+0x954>)
 800535e:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005360:	4894      	ldr	r0, [pc, #592]	; (80055b4 <loadMenuTexts+0x958>)
 8005362:	f7fb fab3 	bl	80008cc <copyText>
 8005366:	4603      	mov	r3, r0
 8005368:	4a93      	ldr	r2, [pc, #588]	; (80055b8 <loadMenuTexts+0x95c>)
 800536a:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 800536c:	4893      	ldr	r0, [pc, #588]	; (80055bc <loadMenuTexts+0x960>)
 800536e:	f7fb faad 	bl	80008cc <copyText>
 8005372:	4603      	mov	r3, r0
 8005374:	4a92      	ldr	r2, [pc, #584]	; (80055c0 <loadMenuTexts+0x964>)
 8005376:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005378:	4892      	ldr	r0, [pc, #584]	; (80055c4 <loadMenuTexts+0x968>)
 800537a:	f7fb faa7 	bl	80008cc <copyText>
 800537e:	4603      	mov	r3, r0
 8005380:	4a91      	ldr	r2, [pc, #580]	; (80055c8 <loadMenuTexts+0x96c>)
 8005382:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005384:	4891      	ldr	r0, [pc, #580]	; (80055cc <loadMenuTexts+0x970>)
 8005386:	f7fb faa1 	bl	80008cc <copyText>
 800538a:	4603      	mov	r3, r0
 800538c:	4a90      	ldr	r2, [pc, #576]	; (80055d0 <loadMenuTexts+0x974>)
 800538e:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005390:	4890      	ldr	r0, [pc, #576]	; (80055d4 <loadMenuTexts+0x978>)
 8005392:	f7fb fa9b 	bl	80008cc <copyText>
 8005396:	4603      	mov	r3, r0
 8005398:	4a8f      	ldr	r2, [pc, #572]	; (80055d8 <loadMenuTexts+0x97c>)
 800539a:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 800539c:	488f      	ldr	r0, [pc, #572]	; (80055dc <loadMenuTexts+0x980>)
 800539e:	f7fb fa95 	bl	80008cc <copyText>
 80053a2:	4603      	mov	r3, r0
 80053a4:	4a8e      	ldr	r2, [pc, #568]	; (80055e0 <loadMenuTexts+0x984>)
 80053a6:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80053a8:	488e      	ldr	r0, [pc, #568]	; (80055e4 <loadMenuTexts+0x988>)
 80053aa:	f7fb fa8f 	bl	80008cc <copyText>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a8d      	ldr	r2, [pc, #564]	; (80055e8 <loadMenuTexts+0x98c>)
 80053b2:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80053b4:	488d      	ldr	r0, [pc, #564]	; (80055ec <loadMenuTexts+0x990>)
 80053b6:	f7fb fa89 	bl	80008cc <copyText>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a8c      	ldr	r2, [pc, #560]	; (80055f0 <loadMenuTexts+0x994>)
 80053be:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80053c0:	488c      	ldr	r0, [pc, #560]	; (80055f4 <loadMenuTexts+0x998>)
 80053c2:	f7fb fa83 	bl	80008cc <copyText>
 80053c6:	4603      	mov	r3, r0
 80053c8:	4a8b      	ldr	r2, [pc, #556]	; (80055f8 <loadMenuTexts+0x99c>)
 80053ca:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80053cc:	488b      	ldr	r0, [pc, #556]	; (80055fc <loadMenuTexts+0x9a0>)
 80053ce:	f7fb fa7d 	bl	80008cc <copyText>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a8a      	ldr	r2, [pc, #552]	; (8005600 <loadMenuTexts+0x9a4>)
 80053d6:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80053d8:	488a      	ldr	r0, [pc, #552]	; (8005604 <loadMenuTexts+0x9a8>)
 80053da:	f7fb fa77 	bl	80008cc <copyText>
 80053de:	4603      	mov	r3, r0
 80053e0:	4a89      	ldr	r2, [pc, #548]	; (8005608 <loadMenuTexts+0x9ac>)
 80053e2:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80053e4:	4889      	ldr	r0, [pc, #548]	; (800560c <loadMenuTexts+0x9b0>)
 80053e6:	f7fb fa71 	bl	80008cc <copyText>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a88      	ldr	r2, [pc, #544]	; (8005610 <loadMenuTexts+0x9b4>)
 80053ee:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80053f0:	4888      	ldr	r0, [pc, #544]	; (8005614 <loadMenuTexts+0x9b8>)
 80053f2:	f7fb fa6b 	bl	80008cc <copyText>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4a87      	ldr	r2, [pc, #540]	; (8005618 <loadMenuTexts+0x9bc>)
 80053fa:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80053fc:	4887      	ldr	r0, [pc, #540]	; (800561c <loadMenuTexts+0x9c0>)
 80053fe:	f7fb fa65 	bl	80008cc <copyText>
 8005402:	4603      	mov	r3, r0
 8005404:	4a86      	ldr	r2, [pc, #536]	; (8005620 <loadMenuTexts+0x9c4>)
 8005406:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005408:	4886      	ldr	r0, [pc, #536]	; (8005624 <loadMenuTexts+0x9c8>)
 800540a:	f7fb fa5f 	bl	80008cc <copyText>
 800540e:	4603      	mov	r3, r0
 8005410:	4a85      	ldr	r2, [pc, #532]	; (8005628 <loadMenuTexts+0x9cc>)
 8005412:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005414:	4885      	ldr	r0, [pc, #532]	; (800562c <loadMenuTexts+0x9d0>)
 8005416:	f7fb fa59 	bl	80008cc <copyText>
 800541a:	4603      	mov	r3, r0
 800541c:	4a84      	ldr	r2, [pc, #528]	; (8005630 <loadMenuTexts+0x9d4>)
 800541e:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005420:	4884      	ldr	r0, [pc, #528]	; (8005634 <loadMenuTexts+0x9d8>)
 8005422:	f7fb fa53 	bl	80008cc <copyText>
 8005426:	4603      	mov	r3, r0
 8005428:	4a83      	ldr	r2, [pc, #524]	; (8005638 <loadMenuTexts+0x9dc>)
 800542a:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 800542c:	4883      	ldr	r0, [pc, #524]	; (800563c <loadMenuTexts+0x9e0>)
 800542e:	f7fb fa4d 	bl	80008cc <copyText>
 8005432:	4603      	mov	r3, r0
 8005434:	4a82      	ldr	r2, [pc, #520]	; (8005640 <loadMenuTexts+0x9e4>)
 8005436:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005438:	4882      	ldr	r0, [pc, #520]	; (8005644 <loadMenuTexts+0x9e8>)
 800543a:	f7fb fa47 	bl	80008cc <copyText>
 800543e:	4603      	mov	r3, r0
 8005440:	4a81      	ldr	r2, [pc, #516]	; (8005648 <loadMenuTexts+0x9ec>)
 8005442:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005444:	4881      	ldr	r0, [pc, #516]	; (800564c <loadMenuTexts+0x9f0>)
 8005446:	f7fb fa41 	bl	80008cc <copyText>
 800544a:	4603      	mov	r3, r0
 800544c:	4a80      	ldr	r2, [pc, #512]	; (8005650 <loadMenuTexts+0x9f4>)
 800544e:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005450:	4880      	ldr	r0, [pc, #512]	; (8005654 <loadMenuTexts+0x9f8>)
 8005452:	f7fb fa3b 	bl	80008cc <copyText>
 8005456:	4603      	mov	r3, r0
 8005458:	4a7f      	ldr	r2, [pc, #508]	; (8005658 <loadMenuTexts+0x9fc>)
 800545a:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 800545c:	487f      	ldr	r0, [pc, #508]	; (800565c <loadMenuTexts+0xa00>)
 800545e:	f7fb fa35 	bl	80008cc <copyText>
 8005462:	4603      	mov	r3, r0
 8005464:	4a7e      	ldr	r2, [pc, #504]	; (8005660 <loadMenuTexts+0xa04>)
 8005466:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005468:	487e      	ldr	r0, [pc, #504]	; (8005664 <loadMenuTexts+0xa08>)
 800546a:	f7fb fa2f 	bl	80008cc <copyText>
 800546e:	4603      	mov	r3, r0
 8005470:	4a7d      	ldr	r2, [pc, #500]	; (8005668 <loadMenuTexts+0xa0c>)
 8005472:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8005474:	487d      	ldr	r0, [pc, #500]	; (800566c <loadMenuTexts+0xa10>)
 8005476:	f7fb fa29 	bl	80008cc <copyText>
 800547a:	4603      	mov	r3, r0
 800547c:	4a7c      	ldr	r2, [pc, #496]	; (8005670 <loadMenuTexts+0xa14>)
 800547e:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005480:	487c      	ldr	r0, [pc, #496]	; (8005674 <loadMenuTexts+0xa18>)
 8005482:	f7fb fa23 	bl	80008cc <copyText>
 8005486:	4603      	mov	r3, r0
 8005488:	4a7b      	ldr	r2, [pc, #492]	; (8005678 <loadMenuTexts+0xa1c>)
 800548a:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 800548c:	487b      	ldr	r0, [pc, #492]	; (800567c <loadMenuTexts+0xa20>)
 800548e:	f7fb fa1d 	bl	80008cc <copyText>
 8005492:	4603      	mov	r3, r0
 8005494:	4a7a      	ldr	r2, [pc, #488]	; (8005680 <loadMenuTexts+0xa24>)
 8005496:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005498:	487a      	ldr	r0, [pc, #488]	; (8005684 <loadMenuTexts+0xa28>)
 800549a:	f7fb fa17 	bl	80008cc <copyText>
 800549e:	4603      	mov	r3, r0
 80054a0:	4a79      	ldr	r2, [pc, #484]	; (8005688 <loadMenuTexts+0xa2c>)
 80054a2:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80054a4:	4879      	ldr	r0, [pc, #484]	; (800568c <loadMenuTexts+0xa30>)
 80054a6:	f7fb fa11 	bl	80008cc <copyText>
 80054aa:	4603      	mov	r3, r0
 80054ac:	4a78      	ldr	r2, [pc, #480]	; (8005690 <loadMenuTexts+0xa34>)
 80054ae:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80054b0:	4878      	ldr	r0, [pc, #480]	; (8005694 <loadMenuTexts+0xa38>)
 80054b2:	f7fb fa0b 	bl	80008cc <copyText>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4a77      	ldr	r2, [pc, #476]	; (8005698 <loadMenuTexts+0xa3c>)
 80054ba:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80054bc:	4877      	ldr	r0, [pc, #476]	; (800569c <loadMenuTexts+0xa40>)
 80054be:	f7fb fa05 	bl	80008cc <copyText>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4a76      	ldr	r2, [pc, #472]	; (80056a0 <loadMenuTexts+0xa44>)
 80054c6:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80054c8:	4876      	ldr	r0, [pc, #472]	; (80056a4 <loadMenuTexts+0xa48>)
 80054ca:	f7fb f9ff 	bl	80008cc <copyText>
 80054ce:	4603      	mov	r3, r0
 80054d0:	4a75      	ldr	r2, [pc, #468]	; (80056a8 <loadMenuTexts+0xa4c>)
 80054d2:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80054d4:	4875      	ldr	r0, [pc, #468]	; (80056ac <loadMenuTexts+0xa50>)
 80054d6:	f7fb f9f9 	bl	80008cc <copyText>
 80054da:	4603      	mov	r3, r0
 80054dc:	4a74      	ldr	r2, [pc, #464]	; (80056b0 <loadMenuTexts+0xa54>)
 80054de:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80054e0:	4874      	ldr	r0, [pc, #464]	; (80056b4 <loadMenuTexts+0xa58>)
 80054e2:	f7fb f9f3 	bl	80008cc <copyText>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4a73      	ldr	r2, [pc, #460]	; (80056b8 <loadMenuTexts+0xa5c>)
 80054ea:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80054ec:	4873      	ldr	r0, [pc, #460]	; (80056bc <loadMenuTexts+0xa60>)
 80054ee:	f7fb f9ed 	bl	80008cc <copyText>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4a72      	ldr	r2, [pc, #456]	; (80056c0 <loadMenuTexts+0xa64>)
 80054f6:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80054f8:	4872      	ldr	r0, [pc, #456]	; (80056c4 <loadMenuTexts+0xa68>)
 80054fa:	f7fb f9e7 	bl	80008cc <copyText>
 80054fe:	4603      	mov	r3, r0
 8005500:	4a71      	ldr	r2, [pc, #452]	; (80056c8 <loadMenuTexts+0xa6c>)
 8005502:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005504:	4871      	ldr	r0, [pc, #452]	; (80056cc <loadMenuTexts+0xa70>)
 8005506:	f7fb f9e1 	bl	80008cc <copyText>
 800550a:	e0e1      	b.n	80056d0 <loadMenuTexts+0xa74>
 800550c:	200004c0 	.word	0x200004c0
 8005510:	20000ca8 	.word	0x20000ca8
 8005514:	200004d0 	.word	0x200004d0
 8005518:	20000cac 	.word	0x20000cac
 800551c:	200004e0 	.word	0x200004e0
 8005520:	20000cb0 	.word	0x20000cb0
 8005524:	200004f0 	.word	0x200004f0
 8005528:	20000cb4 	.word	0x20000cb4
 800552c:	20000500 	.word	0x20000500
 8005530:	20000cb8 	.word	0x20000cb8
 8005534:	20000510 	.word	0x20000510
 8005538:	20000cbc 	.word	0x20000cbc
 800553c:	20000520 	.word	0x20000520
 8005540:	20000cc0 	.word	0x20000cc0
 8005544:	20000530 	.word	0x20000530
 8005548:	20000cc4 	.word	0x20000cc4
 800554c:	20000540 	.word	0x20000540
 8005550:	20000cc8 	.word	0x20000cc8
 8005554:	20000550 	.word	0x20000550
 8005558:	20000ccc 	.word	0x20000ccc
 800555c:	20000560 	.word	0x20000560
 8005560:	20000cd0 	.word	0x20000cd0
 8005564:	20000570 	.word	0x20000570
 8005568:	20000cd4 	.word	0x20000cd4
 800556c:	20000580 	.word	0x20000580
 8005570:	20000cd8 	.word	0x20000cd8
 8005574:	20000590 	.word	0x20000590
 8005578:	20000cdc 	.word	0x20000cdc
 800557c:	200005a0 	.word	0x200005a0
 8005580:	20000ce0 	.word	0x20000ce0
 8005584:	200005b0 	.word	0x200005b0
 8005588:	20000ce4 	.word	0x20000ce4
 800558c:	200005c0 	.word	0x200005c0
 8005590:	20000ce8 	.word	0x20000ce8
 8005594:	200005d0 	.word	0x200005d0
 8005598:	20000cec 	.word	0x20000cec
 800559c:	200005e0 	.word	0x200005e0
 80055a0:	20000cf0 	.word	0x20000cf0
 80055a4:	200005f0 	.word	0x200005f0
 80055a8:	20000cf4 	.word	0x20000cf4
 80055ac:	20000600 	.word	0x20000600
 80055b0:	20000cf8 	.word	0x20000cf8
 80055b4:	20000610 	.word	0x20000610
 80055b8:	20000d00 	.word	0x20000d00
 80055bc:	20000620 	.word	0x20000620
 80055c0:	20000d04 	.word	0x20000d04
 80055c4:	20000630 	.word	0x20000630
 80055c8:	20000d08 	.word	0x20000d08
 80055cc:	20000640 	.word	0x20000640
 80055d0:	20000d0c 	.word	0x20000d0c
 80055d4:	20000650 	.word	0x20000650
 80055d8:	20000d10 	.word	0x20000d10
 80055dc:	20000660 	.word	0x20000660
 80055e0:	20000d14 	.word	0x20000d14
 80055e4:	20000670 	.word	0x20000670
 80055e8:	20000d18 	.word	0x20000d18
 80055ec:	20000680 	.word	0x20000680
 80055f0:	20000d1c 	.word	0x20000d1c
 80055f4:	20000690 	.word	0x20000690
 80055f8:	20000d20 	.word	0x20000d20
 80055fc:	200006a0 	.word	0x200006a0
 8005600:	20000d24 	.word	0x20000d24
 8005604:	200006b0 	.word	0x200006b0
 8005608:	20000d28 	.word	0x20000d28
 800560c:	200006c0 	.word	0x200006c0
 8005610:	20000d30 	.word	0x20000d30
 8005614:	200006d0 	.word	0x200006d0
 8005618:	20000d38 	.word	0x20000d38
 800561c:	200006e0 	.word	0x200006e0
 8005620:	20000d3c 	.word	0x20000d3c
 8005624:	200006f0 	.word	0x200006f0
 8005628:	20000d40 	.word	0x20000d40
 800562c:	20000700 	.word	0x20000700
 8005630:	20000d44 	.word	0x20000d44
 8005634:	20000710 	.word	0x20000710
 8005638:	20000d48 	.word	0x20000d48
 800563c:	20000720 	.word	0x20000720
 8005640:	20000d4c 	.word	0x20000d4c
 8005644:	20000730 	.word	0x20000730
 8005648:	20000d50 	.word	0x20000d50
 800564c:	20000740 	.word	0x20000740
 8005650:	20000d54 	.word	0x20000d54
 8005654:	20000750 	.word	0x20000750
 8005658:	20000d58 	.word	0x20000d58
 800565c:	20000760 	.word	0x20000760
 8005660:	20000d5c 	.word	0x20000d5c
 8005664:	20000770 	.word	0x20000770
 8005668:	20000d60 	.word	0x20000d60
 800566c:	20000780 	.word	0x20000780
 8005670:	20000d64 	.word	0x20000d64
 8005674:	20000790 	.word	0x20000790
 8005678:	20000d68 	.word	0x20000d68
 800567c:	200007a0 	.word	0x200007a0
 8005680:	20000d6c 	.word	0x20000d6c
 8005684:	200007b0 	.word	0x200007b0
 8005688:	20000d70 	.word	0x20000d70
 800568c:	200007c0 	.word	0x200007c0
 8005690:	20000d74 	.word	0x20000d74
 8005694:	200007d0 	.word	0x200007d0
 8005698:	20000d78 	.word	0x20000d78
 800569c:	200007e0 	.word	0x200007e0
 80056a0:	20000d7c 	.word	0x20000d7c
 80056a4:	200007f0 	.word	0x200007f0
 80056a8:	20000d80 	.word	0x20000d80
 80056ac:	20000800 	.word	0x20000800
 80056b0:	20000d84 	.word	0x20000d84
 80056b4:	20000810 	.word	0x20000810
 80056b8:	20000d88 	.word	0x20000d88
 80056bc:	20000820 	.word	0x20000820
 80056c0:	20000d8c 	.word	0x20000d8c
 80056c4:	20000830 	.word	0x20000830
 80056c8:	20000d90 	.word	0x20000d90
 80056cc:	20000840 	.word	0x20000840
 80056d0:	4603      	mov	r3, r0
 80056d2:	4a27      	ldr	r2, [pc, #156]	; (8005770 <loadMenuTexts+0xb14>)
 80056d4:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80056d6:	4827      	ldr	r0, [pc, #156]	; (8005774 <loadMenuTexts+0xb18>)
 80056d8:	f7fb f8f8 	bl	80008cc <copyText>
 80056dc:	4603      	mov	r3, r0
 80056de:	4a26      	ldr	r2, [pc, #152]	; (8005778 <loadMenuTexts+0xb1c>)
 80056e0:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80056e2:	4826      	ldr	r0, [pc, #152]	; (800577c <loadMenuTexts+0xb20>)
 80056e4:	f7fb f8f2 	bl	80008cc <copyText>
 80056e8:	4603      	mov	r3, r0
 80056ea:	4a25      	ldr	r2, [pc, #148]	; (8005780 <loadMenuTexts+0xb24>)
 80056ec:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80056ee:	4825      	ldr	r0, [pc, #148]	; (8005784 <loadMenuTexts+0xb28>)
 80056f0:	f7fb f8ec 	bl	80008cc <copyText>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4a24      	ldr	r2, [pc, #144]	; (8005788 <loadMenuTexts+0xb2c>)
 80056f8:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80056fa:	4824      	ldr	r0, [pc, #144]	; (800578c <loadMenuTexts+0xb30>)
 80056fc:	f7fb f8e6 	bl	80008cc <copyText>
 8005700:	4603      	mov	r3, r0
 8005702:	4a23      	ldr	r2, [pc, #140]	; (8005790 <loadMenuTexts+0xb34>)
 8005704:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005706:	4823      	ldr	r0, [pc, #140]	; (8005794 <loadMenuTexts+0xb38>)
 8005708:	f7fb f8e0 	bl	80008cc <copyText>
 800570c:	4603      	mov	r3, r0
 800570e:	4a22      	ldr	r2, [pc, #136]	; (8005798 <loadMenuTexts+0xb3c>)
 8005710:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005712:	4822      	ldr	r0, [pc, #136]	; (800579c <loadMenuTexts+0xb40>)
 8005714:	f7fb f8da 	bl	80008cc <copyText>
 8005718:	4603      	mov	r3, r0
 800571a:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <loadMenuTexts+0xb44>)
 800571c:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800571e:	4821      	ldr	r0, [pc, #132]	; (80057a4 <loadMenuTexts+0xb48>)
 8005720:	f7fb f8d4 	bl	80008cc <copyText>
 8005724:	4603      	mov	r3, r0
 8005726:	4a20      	ldr	r2, [pc, #128]	; (80057a8 <loadMenuTexts+0xb4c>)
 8005728:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800572a:	4820      	ldr	r0, [pc, #128]	; (80057ac <loadMenuTexts+0xb50>)
 800572c:	f7fb f8ce 	bl	80008cc <copyText>
 8005730:	4603      	mov	r3, r0
 8005732:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <loadMenuTexts+0xb54>)
 8005734:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005736:	481f      	ldr	r0, [pc, #124]	; (80057b4 <loadMenuTexts+0xb58>)
 8005738:	f7fb f8c8 	bl	80008cc <copyText>
 800573c:	4603      	mov	r3, r0
 800573e:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <loadMenuTexts+0xb5c>)
 8005740:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005742:	481e      	ldr	r0, [pc, #120]	; (80057bc <loadMenuTexts+0xb60>)
 8005744:	f7fb f8c2 	bl	80008cc <copyText>
 8005748:	4603      	mov	r3, r0
 800574a:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <loadMenuTexts+0xb64>)
 800574c:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800574e:	481d      	ldr	r0, [pc, #116]	; (80057c4 <loadMenuTexts+0xb68>)
 8005750:	f7fb f8bc 	bl	80008cc <copyText>
 8005754:	4603      	mov	r3, r0
 8005756:	4a1c      	ldr	r2, [pc, #112]	; (80057c8 <loadMenuTexts+0xb6c>)
 8005758:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 800575a:	481c      	ldr	r0, [pc, #112]	; (80057cc <loadMenuTexts+0xb70>)
 800575c:	f7fb f8b6 	bl	80008cc <copyText>
 8005760:	4603      	mov	r3, r0
 8005762:	4a1b      	ldr	r2, [pc, #108]	; (80057d0 <loadMenuTexts+0xb74>)
 8005764:	6013      	str	r3, [r2, #0]
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000d94 	.word	0x20000d94
 8005774:	20000850 	.word	0x20000850
 8005778:	20000d98 	.word	0x20000d98
 800577c:	20000860 	.word	0x20000860
 8005780:	20000d9c 	.word	0x20000d9c
 8005784:	20000870 	.word	0x20000870
 8005788:	20000da0 	.word	0x20000da0
 800578c:	20000880 	.word	0x20000880
 8005790:	20000da4 	.word	0x20000da4
 8005794:	20000890 	.word	0x20000890
 8005798:	20000da8 	.word	0x20000da8
 800579c:	200008a0 	.word	0x200008a0
 80057a0:	20000db4 	.word	0x20000db4
 80057a4:	200008b0 	.word	0x200008b0
 80057a8:	20000db8 	.word	0x20000db8
 80057ac:	200008c0 	.word	0x200008c0
 80057b0:	20000dbc 	.word	0x20000dbc
 80057b4:	200008d0 	.word	0x200008d0
 80057b8:	20000dc0 	.word	0x20000dc0
 80057bc:	200008e0 	.word	0x200008e0
 80057c0:	20000dc4 	.word	0x20000dc4
 80057c4:	200008f0 	.word	0x200008f0
 80057c8:	20000dc8 	.word	0x20000dc8
 80057cc:	20000900 	.word	0x20000900
 80057d0:	20000dcc 	.word	0x20000dcc

080057d4 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <lcdUpdate+0x9c>)
 80057e6:	2101      	movs	r1, #1
 80057e8:	2002      	movs	r0, #2
 80057ea:	f7fa ffe5 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80057ee:	e03b      	b.n	8005868 <lcdUpdate+0x94>
	} else if(y==2) {
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d105      	bne.n	8005802 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80057f6:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <lcdUpdate+0x9c>)
 80057f8:	2102      	movs	r1, #2
 80057fa:	2002      	movs	r0, #2
 80057fc:	f7fa ffdc 	bl	80007b8 <lcd_print>
}
 8005800:	e032      	b.n	8005868 <lcdUpdate+0x94>
	} else if(y==3) {
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d105      	bne.n	8005814 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005808:	4a19      	ldr	r2, [pc, #100]	; (8005870 <lcdUpdate+0x9c>)
 800580a:	2103      	movs	r1, #3
 800580c:	2002      	movs	r0, #2
 800580e:	f7fa ffd3 	bl	80007b8 <lcd_print>
}
 8005812:	e029      	b.n	8005868 <lcdUpdate+0x94>
	} else if(y==4) {
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	2b04      	cmp	r3, #4
 8005818:	d105      	bne.n	8005826 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800581a:	4a15      	ldr	r2, [pc, #84]	; (8005870 <lcdUpdate+0x9c>)
 800581c:	2104      	movs	r1, #4
 800581e:	2002      	movs	r0, #2
 8005820:	f7fa ffca 	bl	80007b8 <lcd_print>
}
 8005824:	e020      	b.n	8005868 <lcdUpdate+0x94>
	} else if(y==5) {
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2b05      	cmp	r3, #5
 800582a:	d105      	bne.n	8005838 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 800582c:	4a10      	ldr	r2, [pc, #64]	; (8005870 <lcdUpdate+0x9c>)
 800582e:	2105      	movs	r1, #5
 8005830:	2002      	movs	r0, #2
 8005832:	f7fa ffc1 	bl	80007b8 <lcd_print>
}
 8005836:	e017      	b.n	8005868 <lcdUpdate+0x94>
	} else if(y==6) {
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	2b06      	cmp	r3, #6
 800583c:	d105      	bne.n	800584a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800583e:	4a0c      	ldr	r2, [pc, #48]	; (8005870 <lcdUpdate+0x9c>)
 8005840:	2106      	movs	r1, #6
 8005842:	2002      	movs	r0, #2
 8005844:	f7fa ffb8 	bl	80007b8 <lcd_print>
}
 8005848:	e00e      	b.n	8005868 <lcdUpdate+0x94>
	} else if (y==7) {
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	2b07      	cmp	r3, #7
 800584e:	d10b      	bne.n	8005868 <lcdUpdate+0x94>
		lcd_clear();
 8005850:	f7fa ffde 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005854:	4a07      	ldr	r2, [pc, #28]	; (8005874 <lcdUpdate+0xa0>)
 8005856:	2101      	movs	r1, #1
 8005858:	2001      	movs	r0, #1
 800585a:	f7fa ffad 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800585e:	4a06      	ldr	r2, [pc, #24]	; (8005878 <lcdUpdate+0xa4>)
 8005860:	2101      	movs	r1, #1
 8005862:	2002      	movs	r0, #2
 8005864:	f7fa ffa8 	bl	80007b8 <lcd_print>
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	0800daa0 	.word	0x0800daa0
 8005874:	0800e3cc 	.word	0x0800e3cc
 8005878:	0800e3e0 	.word	0x0800e3e0

0800587c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d11d      	bne.n	80058c8 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 800588c:	4b62      	ldr	r3, [pc, #392]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005894:	4a61      	ldr	r2, [pc, #388]	; (8005a1c <hataKoduLcdGoster+0x1a0>)
 8005896:	2101      	movs	r1, #1
 8005898:	2001      	movs	r0, #1
 800589a:	f7fa ff8d 	bl	80007b8 <lcd_print>
 800589e:	e008      	b.n	80058b2 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80058a0:	4b5d      	ldr	r3, [pc, #372]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d104      	bne.n	80058b2 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058a8:	4a5d      	ldr	r2, [pc, #372]	; (8005a20 <hataKoduLcdGoster+0x1a4>)
 80058aa:	2101      	movs	r1, #1
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7fa ff83 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80058b2:	4a5c      	ldr	r2, [pc, #368]	; (8005a24 <hataKoduLcdGoster+0x1a8>)
 80058b4:	2101      	movs	r1, #1
 80058b6:	2002      	movs	r0, #2
 80058b8:	f7fa ff7e 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80058bc:	4a5a      	ldr	r2, [pc, #360]	; (8005a28 <hataKoduLcdGoster+0x1ac>)
 80058be:	2107      	movs	r1, #7
 80058c0:	2002      	movs	r0, #2
 80058c2:	f7fa ff79 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80058c6:	e0a3      	b.n	8005a10 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d11d      	bne.n	800590a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80058ce:	4b52      	ldr	r3, [pc, #328]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d105      	bne.n	80058e2 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 80058d6:	4a51      	ldr	r2, [pc, #324]	; (8005a1c <hataKoduLcdGoster+0x1a0>)
 80058d8:	2101      	movs	r1, #1
 80058da:	2001      	movs	r0, #1
 80058dc:	f7fa ff6c 	bl	80007b8 <lcd_print>
 80058e0:	e008      	b.n	80058f4 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80058e2:	4b4d      	ldr	r3, [pc, #308]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d104      	bne.n	80058f4 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058ea:	4a4d      	ldr	r2, [pc, #308]	; (8005a20 <hataKoduLcdGoster+0x1a4>)
 80058ec:	2101      	movs	r1, #1
 80058ee:	2001      	movs	r0, #1
 80058f0:	f7fa ff62 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 80058f4:	4a4d      	ldr	r2, [pc, #308]	; (8005a2c <hataKoduLcdGoster+0x1b0>)
 80058f6:	2102      	movs	r1, #2
 80058f8:	2002      	movs	r0, #2
 80058fa:	f7fa ff5d 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80058fe:	4a4a      	ldr	r2, [pc, #296]	; (8005a28 <hataKoduLcdGoster+0x1ac>)
 8005900:	2107      	movs	r1, #7
 8005902:	2002      	movs	r0, #2
 8005904:	f7fa ff58 	bl	80007b8 <lcd_print>
}
 8005908:	e082      	b.n	8005a10 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d11d      	bne.n	800594c <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005910:	4b41      	ldr	r3, [pc, #260]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005918:	4a40      	ldr	r2, [pc, #256]	; (8005a1c <hataKoduLcdGoster+0x1a0>)
 800591a:	2101      	movs	r1, #1
 800591c:	2001      	movs	r0, #1
 800591e:	f7fa ff4b 	bl	80007b8 <lcd_print>
 8005922:	e008      	b.n	8005936 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005924:	4b3c      	ldr	r3, [pc, #240]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d104      	bne.n	8005936 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 800592c:	4a3c      	ldr	r2, [pc, #240]	; (8005a20 <hataKoduLcdGoster+0x1a4>)
 800592e:	2101      	movs	r1, #1
 8005930:	2001      	movs	r0, #1
 8005932:	f7fa ff41 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 8005936:	4a3e      	ldr	r2, [pc, #248]	; (8005a30 <hataKoduLcdGoster+0x1b4>)
 8005938:	2103      	movs	r1, #3
 800593a:	2002      	movs	r0, #2
 800593c:	f7fa ff3c 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005940:	4a39      	ldr	r2, [pc, #228]	; (8005a28 <hataKoduLcdGoster+0x1ac>)
 8005942:	2107      	movs	r1, #7
 8005944:	2002      	movs	r0, #2
 8005946:	f7fa ff37 	bl	80007b8 <lcd_print>
}
 800594a:	e061      	b.n	8005a10 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	2b04      	cmp	r3, #4
 8005950:	d11d      	bne.n	800598e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005952:	4b31      	ldr	r3, [pc, #196]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 800595a:	4a30      	ldr	r2, [pc, #192]	; (8005a1c <hataKoduLcdGoster+0x1a0>)
 800595c:	2101      	movs	r1, #1
 800595e:	2001      	movs	r0, #1
 8005960:	f7fa ff2a 	bl	80007b8 <lcd_print>
 8005964:	e008      	b.n	8005978 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005966:	4b2c      	ldr	r3, [pc, #176]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d104      	bne.n	8005978 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 800596e:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <hataKoduLcdGoster+0x1a4>)
 8005970:	2101      	movs	r1, #1
 8005972:	2001      	movs	r0, #1
 8005974:	f7fa ff20 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 8005978:	4a2e      	ldr	r2, [pc, #184]	; (8005a34 <hataKoduLcdGoster+0x1b8>)
 800597a:	2104      	movs	r1, #4
 800597c:	2002      	movs	r0, #2
 800597e:	f7fa ff1b 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005982:	4a29      	ldr	r2, [pc, #164]	; (8005a28 <hataKoduLcdGoster+0x1ac>)
 8005984:	2107      	movs	r1, #7
 8005986:	2002      	movs	r0, #2
 8005988:	f7fa ff16 	bl	80007b8 <lcd_print>
}
 800598c:	e040      	b.n	8005a10 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	2b05      	cmp	r3, #5
 8005992:	d11d      	bne.n	80059d0 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005994:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 800599c:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <hataKoduLcdGoster+0x1a0>)
 800599e:	2101      	movs	r1, #1
 80059a0:	2001      	movs	r0, #1
 80059a2:	f7fa ff09 	bl	80007b8 <lcd_print>
 80059a6:	e008      	b.n	80059ba <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80059a8:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d104      	bne.n	80059ba <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059b0:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <hataKoduLcdGoster+0x1a4>)
 80059b2:	2101      	movs	r1, #1
 80059b4:	2001      	movs	r0, #1
 80059b6:	f7fa feff 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 80059ba:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <hataKoduLcdGoster+0x1bc>)
 80059bc:	2105      	movs	r1, #5
 80059be:	2002      	movs	r0, #2
 80059c0:	f7fa fefa 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80059c4:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <hataKoduLcdGoster+0x1ac>)
 80059c6:	2107      	movs	r1, #7
 80059c8:	2002      	movs	r0, #2
 80059ca:	f7fa fef5 	bl	80007b8 <lcd_print>
}
 80059ce:	e01f      	b.n	8005a10 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	2b06      	cmp	r3, #6
 80059d4:	d11c      	bne.n	8005a10 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80059d6:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80059de:	4a0f      	ldr	r2, [pc, #60]	; (8005a1c <hataKoduLcdGoster+0x1a0>)
 80059e0:	2101      	movs	r1, #1
 80059e2:	2001      	movs	r0, #1
 80059e4:	f7fa fee8 	bl	80007b8 <lcd_print>
 80059e8:	e008      	b.n	80059fc <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <hataKoduLcdGoster+0x19c>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d104      	bne.n	80059fc <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059f2:	4a0b      	ldr	r2, [pc, #44]	; (8005a20 <hataKoduLcdGoster+0x1a4>)
 80059f4:	2101      	movs	r1, #1
 80059f6:	2001      	movs	r0, #1
 80059f8:	f7fa fede 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 80059fc:	4a0f      	ldr	r2, [pc, #60]	; (8005a3c <hataKoduLcdGoster+0x1c0>)
 80059fe:	2106      	movs	r1, #6
 8005a00:	2002      	movs	r0, #2
 8005a02:	f7fa fed9 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a06:	4a08      	ldr	r2, [pc, #32]	; (8005a28 <hataKoduLcdGoster+0x1ac>)
 8005a08:	2107      	movs	r1, #7
 8005a0a:	2002      	movs	r0, #2
 8005a0c:	f7fa fed4 	bl	80007b8 <lcd_print>
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000c5a 	.word	0x20000c5a
 8005a1c:	0800e3f4 	.word	0x0800e3f4
 8005a20:	0800e408 	.word	0x0800e408
 8005a24:	0800d848 	.word	0x0800d848
 8005a28:	0800e41c 	.word	0x0800e41c
 8005a2c:	0800d84c 	.word	0x0800d84c
 8005a30:	0800d850 	.word	0x0800d850
 8005a34:	0800d854 	.word	0x0800d854
 8005a38:	0800d858 	.word	0x0800d858
 8005a3c:	0800d85c 	.word	0x0800d85c

08005a40 <convertAndSendData>:

void convertAndSendData() {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005a46:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <convertAndSendData+0x58>)
 8005a48:	2101      	movs	r1, #1
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	f7fa feb4 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005a50:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <convertAndSendData+0x5c>)
 8005a52:	2101      	movs	r1, #1
 8005a54:	2002      	movs	r0, #2
 8005a56:	f7fa feaf 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	e00a      	b.n	8005a76 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005a60:	f002 fb3a 	bl	80080d8 <mergeData>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	490d      	ldr	r1, [pc, #52]	; (8005aa0 <convertAndSendData+0x60>)
 8005a6a:	480e      	ldr	r0, [pc, #56]	; (8005aa4 <convertAndSendData+0x64>)
 8005a6c:	f7fa fc8a 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3301      	adds	r3, #1
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	ddf1      	ble.n	8005a60 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a80:	f003 fb16 	bl	80090b0 <HAL_Delay>
	lcd_clear();
 8005a84:	f7fa fec4 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8005a88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a8c:	f003 fb10 	bl	80090b0 <HAL_Delay>
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	0800e428 	.word	0x0800e428
 8005a9c:	0800e434 	.word	0x0800e434
 8005aa0:	20000be4 	.word	0x20000be4
 8005aa4:	20000e94 	.word	0x20000e94

08005aa8 <eepromKontrol>:

void eepromKontrol(int type) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af04      	add	r7, sp, #16
 8005aae:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8005ab0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005ab4:	9302      	str	r3, [sp, #8]
 8005ab6:	233f      	movs	r3, #63	; 0x3f
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	4b9c      	ldr	r3, [pc, #624]	; (8005d2c <eepromKontrol+0x284>)
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	233f      	movs	r3, #63	; 0x3f
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	21a0      	movs	r1, #160	; 0xa0
 8005ac4:	489a      	ldr	r0, [pc, #616]	; (8005d30 <eepromKontrol+0x288>)
 8005ac6:	f004 fc77 	bl	800a3b8 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8005aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ace:	f003 faef 	bl	80090b0 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005ad2:	4b96      	ldr	r3, [pc, #600]	; (8005d2c <eepromKontrol+0x284>)
 8005ad4:	78da      	ldrb	r2, [r3, #3]
 8005ad6:	4b97      	ldr	r3, [pc, #604]	; (8005d34 <eepromKontrol+0x28c>)
 8005ad8:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005ada:	4b94      	ldr	r3, [pc, #592]	; (8005d2c <eepromKontrol+0x284>)
 8005adc:	785a      	ldrb	r2, [r3, #1]
 8005ade:	4b96      	ldr	r3, [pc, #600]	; (8005d38 <eepromKontrol+0x290>)
 8005ae0:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005ae2:	4b92      	ldr	r3, [pc, #584]	; (8005d2c <eepromKontrol+0x284>)
 8005ae4:	789a      	ldrb	r2, [r3, #2]
 8005ae6:	4b95      	ldr	r3, [pc, #596]	; (8005d3c <eepromKontrol+0x294>)
 8005ae8:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005aea:	4b90      	ldr	r3, [pc, #576]	; (8005d2c <eepromKontrol+0x284>)
 8005aec:	791a      	ldrb	r2, [r3, #4]
 8005aee:	4b94      	ldr	r3, [pc, #592]	; (8005d40 <eepromKontrol+0x298>)
 8005af0:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005af2:	4b8e      	ldr	r3, [pc, #568]	; (8005d2c <eepromKontrol+0x284>)
 8005af4:	795a      	ldrb	r2, [r3, #5]
 8005af6:	4b93      	ldr	r3, [pc, #588]	; (8005d44 <eepromKontrol+0x29c>)
 8005af8:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005afa:	4b8c      	ldr	r3, [pc, #560]	; (8005d2c <eepromKontrol+0x284>)
 8005afc:	799a      	ldrb	r2, [r3, #6]
 8005afe:	4b92      	ldr	r3, [pc, #584]	; (8005d48 <eepromKontrol+0x2a0>)
 8005b00:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005b02:	4b8a      	ldr	r3, [pc, #552]	; (8005d2c <eepromKontrol+0x284>)
 8005b04:	79da      	ldrb	r2, [r3, #7]
 8005b06:	4b91      	ldr	r3, [pc, #580]	; (8005d4c <eepromKontrol+0x2a4>)
 8005b08:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005b0a:	4b88      	ldr	r3, [pc, #544]	; (8005d2c <eepromKontrol+0x284>)
 8005b0c:	7a1a      	ldrb	r2, [r3, #8]
 8005b0e:	4b90      	ldr	r3, [pc, #576]	; (8005d50 <eepromKontrol+0x2a8>)
 8005b10:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005b12:	4b86      	ldr	r3, [pc, #536]	; (8005d2c <eepromKontrol+0x284>)
 8005b14:	7a5a      	ldrb	r2, [r3, #9]
 8005b16:	4b8f      	ldr	r3, [pc, #572]	; (8005d54 <eepromKontrol+0x2ac>)
 8005b18:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005b1a:	4b84      	ldr	r3, [pc, #528]	; (8005d2c <eepromKontrol+0x284>)
 8005b1c:	7a9a      	ldrb	r2, [r3, #10]
 8005b1e:	4b8e      	ldr	r3, [pc, #568]	; (8005d58 <eepromKontrol+0x2b0>)
 8005b20:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005b22:	4b82      	ldr	r3, [pc, #520]	; (8005d2c <eepromKontrol+0x284>)
 8005b24:	7ada      	ldrb	r2, [r3, #11]
 8005b26:	4b8d      	ldr	r3, [pc, #564]	; (8005d5c <eepromKontrol+0x2b4>)
 8005b28:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005b2a:	4b80      	ldr	r3, [pc, #512]	; (8005d2c <eepromKontrol+0x284>)
 8005b2c:	7b1a      	ldrb	r2, [r3, #12]
 8005b2e:	4b8c      	ldr	r3, [pc, #560]	; (8005d60 <eepromKontrol+0x2b8>)
 8005b30:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005b32:	4b7e      	ldr	r3, [pc, #504]	; (8005d2c <eepromKontrol+0x284>)
 8005b34:	7b5a      	ldrb	r2, [r3, #13]
 8005b36:	4b8b      	ldr	r3, [pc, #556]	; (8005d64 <eepromKontrol+0x2bc>)
 8005b38:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005b3a:	4b7c      	ldr	r3, [pc, #496]	; (8005d2c <eepromKontrol+0x284>)
 8005b3c:	7b9a      	ldrb	r2, [r3, #14]
 8005b3e:	4b8a      	ldr	r3, [pc, #552]	; (8005d68 <eepromKontrol+0x2c0>)
 8005b40:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005b42:	4b7a      	ldr	r3, [pc, #488]	; (8005d2c <eepromKontrol+0x284>)
 8005b44:	7bda      	ldrb	r2, [r3, #15]
 8005b46:	4b89      	ldr	r3, [pc, #548]	; (8005d6c <eepromKontrol+0x2c4>)
 8005b48:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005b4a:	4b78      	ldr	r3, [pc, #480]	; (8005d2c <eepromKontrol+0x284>)
 8005b4c:	7c1a      	ldrb	r2, [r3, #16]
 8005b4e:	4b88      	ldr	r3, [pc, #544]	; (8005d70 <eepromKontrol+0x2c8>)
 8005b50:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005b52:	4b76      	ldr	r3, [pc, #472]	; (8005d2c <eepromKontrol+0x284>)
 8005b54:	7c5a      	ldrb	r2, [r3, #17]
 8005b56:	4b87      	ldr	r3, [pc, #540]	; (8005d74 <eepromKontrol+0x2cc>)
 8005b58:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005b5a:	4b74      	ldr	r3, [pc, #464]	; (8005d2c <eepromKontrol+0x284>)
 8005b5c:	7c9a      	ldrb	r2, [r3, #18]
 8005b5e:	4b86      	ldr	r3, [pc, #536]	; (8005d78 <eepromKontrol+0x2d0>)
 8005b60:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005b62:	4b72      	ldr	r3, [pc, #456]	; (8005d2c <eepromKontrol+0x284>)
 8005b64:	7cda      	ldrb	r2, [r3, #19]
 8005b66:	4b85      	ldr	r3, [pc, #532]	; (8005d7c <eepromKontrol+0x2d4>)
 8005b68:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005b6a:	4b70      	ldr	r3, [pc, #448]	; (8005d2c <eepromKontrol+0x284>)
 8005b6c:	7d1a      	ldrb	r2, [r3, #20]
 8005b6e:	4b84      	ldr	r3, [pc, #528]	; (8005d80 <eepromKontrol+0x2d8>)
 8005b70:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005b72:	4b6e      	ldr	r3, [pc, #440]	; (8005d2c <eepromKontrol+0x284>)
 8005b74:	7d5a      	ldrb	r2, [r3, #21]
 8005b76:	4b83      	ldr	r3, [pc, #524]	; (8005d84 <eepromKontrol+0x2dc>)
 8005b78:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005b7a:	4b6c      	ldr	r3, [pc, #432]	; (8005d2c <eepromKontrol+0x284>)
 8005b7c:	7d9a      	ldrb	r2, [r3, #22]
 8005b7e:	4b82      	ldr	r3, [pc, #520]	; (8005d88 <eepromKontrol+0x2e0>)
 8005b80:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005b82:	4b6a      	ldr	r3, [pc, #424]	; (8005d2c <eepromKontrol+0x284>)
 8005b84:	7dda      	ldrb	r2, [r3, #23]
 8005b86:	4b81      	ldr	r3, [pc, #516]	; (8005d8c <eepromKontrol+0x2e4>)
 8005b88:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005b8a:	4b68      	ldr	r3, [pc, #416]	; (8005d2c <eepromKontrol+0x284>)
 8005b8c:	7e1a      	ldrb	r2, [r3, #24]
 8005b8e:	4b80      	ldr	r3, [pc, #512]	; (8005d90 <eepromKontrol+0x2e8>)
 8005b90:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005b92:	4b66      	ldr	r3, [pc, #408]	; (8005d2c <eepromKontrol+0x284>)
 8005b94:	7e5a      	ldrb	r2, [r3, #25]
 8005b96:	4b7f      	ldr	r3, [pc, #508]	; (8005d94 <eepromKontrol+0x2ec>)
 8005b98:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005b9a:	4b64      	ldr	r3, [pc, #400]	; (8005d2c <eepromKontrol+0x284>)
 8005b9c:	7e9a      	ldrb	r2, [r3, #26]
 8005b9e:	4b7e      	ldr	r3, [pc, #504]	; (8005d98 <eepromKontrol+0x2f0>)
 8005ba0:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005ba2:	4b62      	ldr	r3, [pc, #392]	; (8005d2c <eepromKontrol+0x284>)
 8005ba4:	7eda      	ldrb	r2, [r3, #27]
 8005ba6:	4b7d      	ldr	r3, [pc, #500]	; (8005d9c <eepromKontrol+0x2f4>)
 8005ba8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005baa:	4b60      	ldr	r3, [pc, #384]	; (8005d2c <eepromKontrol+0x284>)
 8005bac:	7f1a      	ldrb	r2, [r3, #28]
 8005bae:	4b7c      	ldr	r3, [pc, #496]	; (8005da0 <eepromKontrol+0x2f8>)
 8005bb0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005bb2:	4b5e      	ldr	r3, [pc, #376]	; (8005d2c <eepromKontrol+0x284>)
 8005bb4:	7f5a      	ldrb	r2, [r3, #29]
 8005bb6:	4b7b      	ldr	r3, [pc, #492]	; (8005da4 <eepromKontrol+0x2fc>)
 8005bb8:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005bba:	4b5c      	ldr	r3, [pc, #368]	; (8005d2c <eepromKontrol+0x284>)
 8005bbc:	7f9a      	ldrb	r2, [r3, #30]
 8005bbe:	4b7a      	ldr	r3, [pc, #488]	; (8005da8 <eepromKontrol+0x300>)
 8005bc0:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005bc2:	4b5a      	ldr	r3, [pc, #360]	; (8005d2c <eepromKontrol+0x284>)
 8005bc4:	7fda      	ldrb	r2, [r3, #31]
 8005bc6:	4b79      	ldr	r3, [pc, #484]	; (8005dac <eepromKontrol+0x304>)
 8005bc8:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005bca:	4b58      	ldr	r3, [pc, #352]	; (8005d2c <eepromKontrol+0x284>)
 8005bcc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005bd0:	4b77      	ldr	r3, [pc, #476]	; (8005db0 <eepromKontrol+0x308>)
 8005bd2:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005bd4:	4b55      	ldr	r3, [pc, #340]	; (8005d2c <eepromKontrol+0x284>)
 8005bd6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005bda:	4b76      	ldr	r3, [pc, #472]	; (8005db4 <eepromKontrol+0x30c>)
 8005bdc:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005bde:	4b53      	ldr	r3, [pc, #332]	; (8005d2c <eepromKontrol+0x284>)
 8005be0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005be4:	4b74      	ldr	r3, [pc, #464]	; (8005db8 <eepromKontrol+0x310>)
 8005be6:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005be8:	4b50      	ldr	r3, [pc, #320]	; (8005d2c <eepromKontrol+0x284>)
 8005bea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005bee:	4b73      	ldr	r3, [pc, #460]	; (8005dbc <eepromKontrol+0x314>)
 8005bf0:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005bf2:	4b4e      	ldr	r3, [pc, #312]	; (8005d2c <eepromKontrol+0x284>)
 8005bf4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005bf8:	4b71      	ldr	r3, [pc, #452]	; (8005dc0 <eepromKontrol+0x318>)
 8005bfa:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005bfc:	4b4b      	ldr	r3, [pc, #300]	; (8005d2c <eepromKontrol+0x284>)
 8005bfe:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005c02:	4b70      	ldr	r3, [pc, #448]	; (8005dc4 <eepromKontrol+0x31c>)
 8005c04:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005c06:	4b49      	ldr	r3, [pc, #292]	; (8005d2c <eepromKontrol+0x284>)
 8005c08:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005c0c:	4b6e      	ldr	r3, [pc, #440]	; (8005dc8 <eepromKontrol+0x320>)
 8005c0e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005c10:	4b46      	ldr	r3, [pc, #280]	; (8005d2c <eepromKontrol+0x284>)
 8005c12:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005c16:	4b6d      	ldr	r3, [pc, #436]	; (8005dcc <eepromKontrol+0x324>)
 8005c18:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005c1a:	4b44      	ldr	r3, [pc, #272]	; (8005d2c <eepromKontrol+0x284>)
 8005c1c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005c20:	4b6b      	ldr	r3, [pc, #428]	; (8005dd0 <eepromKontrol+0x328>)
 8005c22:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005c24:	4b41      	ldr	r3, [pc, #260]	; (8005d2c <eepromKontrol+0x284>)
 8005c26:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005c2a:	4b6a      	ldr	r3, [pc, #424]	; (8005dd4 <eepromKontrol+0x32c>)
 8005c2c:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005c2e:	4b3f      	ldr	r3, [pc, #252]	; (8005d2c <eepromKontrol+0x284>)
 8005c30:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005c34:	4b68      	ldr	r3, [pc, #416]	; (8005dd8 <eepromKontrol+0x330>)
 8005c36:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005c38:	4b3c      	ldr	r3, [pc, #240]	; (8005d2c <eepromKontrol+0x284>)
 8005c3a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005c3e:	4b67      	ldr	r3, [pc, #412]	; (8005ddc <eepromKontrol+0x334>)
 8005c40:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005c42:	4b3a      	ldr	r3, [pc, #232]	; (8005d2c <eepromKontrol+0x284>)
 8005c44:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c48:	4b65      	ldr	r3, [pc, #404]	; (8005de0 <eepromKontrol+0x338>)
 8005c4a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005c4c:	4b37      	ldr	r3, [pc, #220]	; (8005d2c <eepromKontrol+0x284>)
 8005c4e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005c52:	4b64      	ldr	r3, [pc, #400]	; (8005de4 <eepromKontrol+0x33c>)
 8005c54:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005c56:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <eepromKontrol+0x284>)
 8005c58:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005c5c:	4b62      	ldr	r3, [pc, #392]	; (8005de8 <eepromKontrol+0x340>)
 8005c5e:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005c60:	4b32      	ldr	r3, [pc, #200]	; (8005d2c <eepromKontrol+0x284>)
 8005c62:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005c66:	4b61      	ldr	r3, [pc, #388]	; (8005dec <eepromKontrol+0x344>)
 8005c68:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005c6a:	4b52      	ldr	r3, [pc, #328]	; (8005db4 <eepromKontrol+0x30c>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fff4 	bl	8004c5c <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005c74:	4b4e      	ldr	r3, [pc, #312]	; (8005db0 <eepromKontrol+0x308>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b09      	cmp	r3, #9
 8005c7a:	d902      	bls.n	8005c82 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005c7c:	4b4c      	ldr	r3, [pc, #304]	; (8005db0 <eepromKontrol+0x308>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005c82:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <eepromKontrol+0x304>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b09      	cmp	r3, #9
 8005c88:	d902      	bls.n	8005c90 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005c8a:	4b48      	ldr	r3, [pc, #288]	; (8005dac <eepromKontrol+0x304>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005c90:	4b45      	ldr	r3, [pc, #276]	; (8005da8 <eepromKontrol+0x300>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b09      	cmp	r3, #9
 8005c96:	d902      	bls.n	8005c9e <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005c98:	4b43      	ldr	r3, [pc, #268]	; (8005da8 <eepromKontrol+0x300>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005c9e:	4b41      	ldr	r3, [pc, #260]	; (8005da4 <eepromKontrol+0x2fc>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b09      	cmp	r3, #9
 8005ca4:	d902      	bls.n	8005cac <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005ca6:	4b3f      	ldr	r3, [pc, #252]	; (8005da4 <eepromKontrol+0x2fc>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005cac:	4b3c      	ldr	r3, [pc, #240]	; (8005da0 <eepromKontrol+0x2f8>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d902      	bls.n	8005cba <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005cb4:	4b3a      	ldr	r3, [pc, #232]	; (8005da0 <eepromKontrol+0x2f8>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005cba:	4b1f      	ldr	r3, [pc, #124]	; (8005d38 <eepromKontrol+0x290>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d902      	bls.n	8005cc8 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005cc2:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <eepromKontrol+0x290>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <eepromKontrol+0x294>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d902      	bls.n	8005cd6 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <eepromKontrol+0x294>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <eepromKontrol+0x298>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d902      	bls.n	8005ce4 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005cde:	4b18      	ldr	r3, [pc, #96]	; (8005d40 <eepromKontrol+0x298>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005ce4:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <eepromKontrol+0x29c>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d902      	bls.n	8005cf2 <eepromKontrol+0x24a>
	    altLimit=1;
 8005cec:	4b15      	ldr	r3, [pc, #84]	; (8005d44 <eepromKontrol+0x29c>)
 8005cee:	2201      	movs	r2, #1
 8005cf0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <eepromKontrol+0x2a0>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d902      	bls.n	8005d00 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005cfa:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <eepromKontrol+0x2a0>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005d00:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <eepromKontrol+0x2a4>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d902      	bls.n	8005d0e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005d08:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <eepromKontrol+0x2a4>)
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005d0e:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <eepromKontrol+0x31c>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d902      	bls.n	8005d1c <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005d16:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <eepromKontrol+0x31c>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <eepromKontrol+0x2a8>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d965      	bls.n	8005df0 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005d24:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <eepromKontrol+0x2a8>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e061      	b.n	8005df0 <eepromKontrol+0x348>
 8005d2c:	20000b28 	.word	0x20000b28
 8005d30:	20000df8 	.word	0x20000df8
 8005d34:	20000bb9 	.word	0x20000bb9
 8005d38:	20000c3a 	.word	0x20000c3a
 8005d3c:	20000c3d 	.word	0x20000c3d
 8005d40:	20000c3e 	.word	0x20000c3e
 8005d44:	20000c3f 	.word	0x20000c3f
 8005d48:	20000c40 	.word	0x20000c40
 8005d4c:	20000c41 	.word	0x20000c41
 8005d50:	20000c42 	.word	0x20000c42
 8005d54:	20000c52 	.word	0x20000c52
 8005d58:	20000c43 	.word	0x20000c43
 8005d5c:	20000c53 	.word	0x20000c53
 8005d60:	20000c44 	.word	0x20000c44
 8005d64:	20000c54 	.word	0x20000c54
 8005d68:	20000c47 	.word	0x20000c47
 8005d6c:	20000c48 	.word	0x20000c48
 8005d70:	20000c49 	.word	0x20000c49
 8005d74:	20000c4a 	.word	0x20000c4a
 8005d78:	20000c4b 	.word	0x20000c4b
 8005d7c:	20000c4c 	.word	0x20000c4c
 8005d80:	20000c4d 	.word	0x20000c4d
 8005d84:	20000c4e 	.word	0x20000c4e
 8005d88:	20000c4f 	.word	0x20000c4f
 8005d8c:	20000c50 	.word	0x20000c50
 8005d90:	20000c51 	.word	0x20000c51
 8005d94:	20000c55 	.word	0x20000c55
 8005d98:	20000c57 	.word	0x20000c57
 8005d9c:	20000c35 	.word	0x20000c35
 8005da0:	20000c36 	.word	0x20000c36
 8005da4:	20000c37 	.word	0x20000c37
 8005da8:	200009b1 	.word	0x200009b1
 8005dac:	200009b2 	.word	0x200009b2
 8005db0:	20000c38 	.word	0x20000c38
 8005db4:	20000c5a 	.word	0x20000c5a
 8005db8:	20000c58 	.word	0x20000c58
 8005dbc:	20000c46 	.word	0x20000c46
 8005dc0:	20000c59 	.word	0x20000c59
 8005dc4:	20000c45 	.word	0x20000c45
 8005dc8:	20000c5b 	.word	0x20000c5b
 8005dcc:	20000c5c 	.word	0x20000c5c
 8005dd0:	20000c5d 	.word	0x20000c5d
 8005dd4:	20000c5e 	.word	0x20000c5e
 8005dd8:	20000c5f 	.word	0x20000c5f
 8005ddc:	20000c60 	.word	0x20000c60
 8005de0:	20000c61 	.word	0x20000c61
 8005de4:	20000c62 	.word	0x20000c62
 8005de8:	20000c63 	.word	0x20000c63
 8005dec:	20000c64 	.word	0x20000c64
	}

	if(kapi1AcSure>5) {
 8005df0:	4b55      	ldr	r3, [pc, #340]	; (8005f48 <eepromKontrol+0x4a0>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b05      	cmp	r3, #5
 8005df6:	d902      	bls.n	8005dfe <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005df8:	4b53      	ldr	r3, [pc, #332]	; (8005f48 <eepromKontrol+0x4a0>)
 8005dfa:	2205      	movs	r2, #5
 8005dfc:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005dfe:	4b53      	ldr	r3, [pc, #332]	; (8005f4c <eepromKontrol+0x4a4>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d902      	bls.n	8005e0c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005e06:	4b51      	ldr	r3, [pc, #324]	; (8005f4c <eepromKontrol+0x4a4>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005e0c:	4b50      	ldr	r3, [pc, #320]	; (8005f50 <eepromKontrol+0x4a8>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b05      	cmp	r3, #5
 8005e12:	d902      	bls.n	8005e1a <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005e14:	4b4e      	ldr	r3, [pc, #312]	; (8005f50 <eepromKontrol+0x4a8>)
 8005e16:	2205      	movs	r2, #5
 8005e18:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005e1a:	4b4e      	ldr	r3, [pc, #312]	; (8005f54 <eepromKontrol+0x4ac>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d902      	bls.n	8005e28 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005e22:	4b4c      	ldr	r3, [pc, #304]	; (8005f54 <eepromKontrol+0x4ac>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005e28:	4b4b      	ldr	r3, [pc, #300]	; (8005f58 <eepromKontrol+0x4b0>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d902      	bls.n	8005e36 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005e30:	4b49      	ldr	r3, [pc, #292]	; (8005f58 <eepromKontrol+0x4b0>)
 8005e32:	2202      	movs	r2, #2
 8005e34:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005e36:	4b49      	ldr	r3, [pc, #292]	; (8005f5c <eepromKontrol+0x4b4>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d902      	bls.n	8005e44 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005e3e:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <eepromKontrol+0x4b4>)
 8005e40:	2205      	movs	r2, #5
 8005e42:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005e44:	4b46      	ldr	r3, [pc, #280]	; (8005f60 <eepromKontrol+0x4b8>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d902      	bls.n	8005e52 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005e4c:	4b44      	ldr	r3, [pc, #272]	; (8005f60 <eepromKontrol+0x4b8>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005e52:	4b44      	ldr	r3, [pc, #272]	; (8005f64 <eepromKontrol+0x4bc>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d902      	bls.n	8005e60 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005e5a:	4b42      	ldr	r3, [pc, #264]	; (8005f64 <eepromKontrol+0x4bc>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005e60:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <eepromKontrol+0x4c0>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d902      	bls.n	8005e6e <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005e68:	4b3f      	ldr	r3, [pc, #252]	; (8005f68 <eepromKontrol+0x4c0>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005e6e:	4b3f      	ldr	r3, [pc, #252]	; (8005f6c <eepromKontrol+0x4c4>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d902      	bls.n	8005e7c <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005e76:	4b3d      	ldr	r3, [pc, #244]	; (8005f6c <eepromKontrol+0x4c4>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005e7c:	4b3c      	ldr	r3, [pc, #240]	; (8005f70 <eepromKontrol+0x4c8>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d902      	bls.n	8005e8a <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005e84:	4b3a      	ldr	r3, [pc, #232]	; (8005f70 <eepromKontrol+0x4c8>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005e8a:	4b3a      	ldr	r3, [pc, #232]	; (8005f74 <eepromKontrol+0x4cc>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d902      	bls.n	8005e98 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005e92:	4b38      	ldr	r3, [pc, #224]	; (8005f74 <eepromKontrol+0x4cc>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005e98:	4b37      	ldr	r3, [pc, #220]	; (8005f78 <eepromKontrol+0x4d0>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	d902      	bls.n	8005ea6 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005ea0:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <eepromKontrol+0x4d0>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005ea6:	4b35      	ldr	r3, [pc, #212]	; (8005f7c <eepromKontrol+0x4d4>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b05      	cmp	r3, #5
 8005eac:	d902      	bls.n	8005eb4 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005eae:	4b33      	ldr	r3, [pc, #204]	; (8005f7c <eepromKontrol+0x4d4>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005eb4:	4b32      	ldr	r3, [pc, #200]	; (8005f80 <eepromKontrol+0x4d8>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b05      	cmp	r3, #5
 8005eba:	d902      	bls.n	8005ec2 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005ebc:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <eepromKontrol+0x4d8>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005ec2:	4b30      	ldr	r3, [pc, #192]	; (8005f84 <eepromKontrol+0x4dc>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d902      	bls.n	8005ed0 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005eca:	4b2e      	ldr	r3, [pc, #184]	; (8005f84 <eepromKontrol+0x4dc>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <eepromKontrol+0x4e0>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2bb4      	cmp	r3, #180	; 0xb4
 8005ed6:	d902      	bls.n	8005ede <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <eepromKontrol+0x4e0>)
 8005eda:	223c      	movs	r2, #60	; 0x3c
 8005edc:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005ede:	4b2b      	ldr	r3, [pc, #172]	; (8005f8c <eepromKontrol+0x4e4>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d902      	bls.n	8005eec <eepromKontrol+0x444>
	    buzzer=0;
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <eepromKontrol+0x4e4>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005eec:	4b28      	ldr	r3, [pc, #160]	; (8005f90 <eepromKontrol+0x4e8>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d902      	bls.n	8005efa <eepromKontrol+0x452>
	    demoMode=0;
 8005ef4:	4b26      	ldr	r3, [pc, #152]	; (8005f90 <eepromKontrol+0x4e8>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005efa:	4b26      	ldr	r3, [pc, #152]	; (8005f94 <eepromKontrol+0x4ec>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d902      	bls.n	8005f08 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <eepromKontrol+0x4ec>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005f08:	4b23      	ldr	r3, [pc, #140]	; (8005f98 <eepromKontrol+0x4f0>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d902      	bls.n	8005f16 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005f10:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <eepromKontrol+0x4f0>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005f16:	4b21      	ldr	r3, [pc, #132]	; (8005f9c <eepromKontrol+0x4f4>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d902      	bls.n	8005f24 <eepromKontrol+0x47c>
		iotMode=0;
 8005f1e:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <eepromKontrol+0x4f4>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8005f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f28:	f003 f8c2 	bl	80090b0 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005f2c:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <eepromKontrol+0x4f4>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d104      	bne.n	8005f3e <eepromKontrol+0x496>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <eepromKontrol+0x496>
		convertAndSendData();
 8005f3a:	f7ff fd81 	bl	8005a40 <convertAndSendData>
	}
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000c52 	.word	0x20000c52
 8005f4c:	20000c43 	.word	0x20000c43
 8005f50:	20000c53 	.word	0x20000c53
 8005f54:	20000c44 	.word	0x20000c44
 8005f58:	20000c46 	.word	0x20000c46
 8005f5c:	20000c54 	.word	0x20000c54
 8005f60:	20000c47 	.word	0x20000c47
 8005f64:	20000c48 	.word	0x20000c48
 8005f68:	20000c49 	.word	0x20000c49
 8005f6c:	20000c4a 	.word	0x20000c4a
 8005f70:	20000c4b 	.word	0x20000c4b
 8005f74:	20000c4c 	.word	0x20000c4c
 8005f78:	20000c4d 	.word	0x20000c4d
 8005f7c:	20000c4e 	.word	0x20000c4e
 8005f80:	20000c4f 	.word	0x20000c4f
 8005f84:	20000c50 	.word	0x20000c50
 8005f88:	20000c51 	.word	0x20000c51
 8005f8c:	20000c55 	.word	0x20000c55
 8005f90:	20000c57 	.word	0x20000c57
 8005f94:	20000c59 	.word	0x20000c59
 8005f98:	20000c5a 	.word	0x20000c5a
 8005f9c:	20000c58 	.word	0x20000c58

08005fa0 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b089      	sub	sp, #36	; 0x24
 8005fa4:	af04      	add	r7, sp, #16
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005faa:	4b26      	ldr	r3, [pc, #152]	; (8006044 <hata2EEPROM+0xa4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	1e5a      	subs	r2, r3, #1
 8005fb0:	4b25      	ldr	r3, [pc, #148]	; (8006048 <hata2EEPROM+0xa8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	4a25      	ldr	r2, [pc, #148]	; (800604c <hata2EEPROM+0xac>)
 8005fb8:	5cd3      	ldrb	r3, [r2, r3]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005fbe:	f000 f849 	bl	8006054 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005fc2:	e000      	b.n	8005fc6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005fc4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e012      	b.n	8005ff2 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005fcc:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <hata2EEPROM+0xa8>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	4a1d      	ldr	r2, [pc, #116]	; (800604c <hata2EEPROM+0xac>)
 8005fd6:	5cd3      	ldrb	r3, [r2, r3]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d107      	bne.n	8005fec <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005fdc:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <hata2EEPROM+0xa8>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	4919      	ldr	r1, [pc, #100]	; (800604c <hata2EEPROM+0xac>)
 8005fe6:	79fa      	ldrb	r2, [r7, #7]
 8005fe8:	54ca      	strb	r2, [r1, r3]
					break;
 8005fea:	e007      	b.n	8005ffc <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	4b14      	ldr	r3, [pc, #80]	; (8006044 <hata2EEPROM+0xa4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	dbe7      	blt.n	8005fcc <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8005ffc:	4b12      	ldr	r3, [pc, #72]	; (8006048 <hata2EEPROM+0xa8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	b299      	uxth	r1, r3
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <hata2EEPROM+0xa4>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	b298      	uxth	r0, r3
 8006008:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <hata2EEPROM+0xa8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0f      	ldr	r2, [pc, #60]	; (800604c <hata2EEPROM+0xac>)
 800600e:	4413      	add	r3, r2
 8006010:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <hata2EEPROM+0xa4>)
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	b292      	uxth	r2, r2
 8006016:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800601a:	9402      	str	r4, [sp, #8]
 800601c:	9201      	str	r2, [sp, #4]
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	4603      	mov	r3, r0
 8006022:	460a      	mov	r2, r1
 8006024:	21a0      	movs	r1, #160	; 0xa0
 8006026:	480a      	ldr	r0, [pc, #40]	; (8006050 <hata2EEPROM+0xb0>)
 8006028:	f004 f8cc 	bl	800a1c4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800602c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006030:	f003 f83e 	bl	80090b0 <HAL_Delay>
	eepromKontrol(1);
 8006034:	2001      	movs	r0, #1
 8006036:	f7ff fd37 	bl	8005aa8 <eepromKontrol>
}
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	bd90      	pop	{r4, r7, pc}
 8006042:	bf00      	nop
 8006044:	20000938 	.word	0x20000938
 8006048:	2000093c 	.word	0x2000093c
 800604c:	20000b28 	.word	0x20000b28
 8006050:	20000df8 	.word	0x20000df8

08006054 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800605a:	2300      	movs	r3, #0
 800605c:	607b      	str	r3, [r7, #4]
 800605e:	e009      	b.n	8006074 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <eepromDataFillWithEmpty+0x38>)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006068:	4a09      	ldr	r2, [pc, #36]	; (8006090 <eepromDataFillWithEmpty+0x3c>)
 800606a:	2100      	movs	r1, #0
 800606c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3301      	adds	r3, #1
 8006072:	607b      	str	r3, [r7, #4]
 8006074:	4b07      	ldr	r3, [pc, #28]	; (8006094 <eepromDataFillWithEmpty+0x40>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	429a      	cmp	r2, r3
 800607c:	dbf0      	blt.n	8006060 <eepromDataFillWithEmpty+0xc>
	}
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000910 	.word	0x20000910
 8006090:	20000b28 	.word	0x20000b28
 8006094:	20000938 	.word	0x20000938

08006098 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
	timer1=millis;
 800609c:	4b47      	ldr	r3, [pc, #284]	; (80061bc <bekle+0x124>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a47      	ldr	r2, [pc, #284]	; (80061c0 <bekle+0x128>)
 80060a2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060a4:	e002      	b.n	80060ac <bekle+0x14>
    	butonKontrol = 1;
 80060a6:	4b47      	ldr	r3, [pc, #284]	; (80061c4 <bekle+0x12c>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060ac:	2101      	movs	r1, #1
 80060ae:	4846      	ldr	r0, [pc, #280]	; (80061c8 <bekle+0x130>)
 80060b0:	f003 fdce 	bl	8009c50 <HAL_GPIO_ReadPin>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d109      	bne.n	80060ce <bekle+0x36>
 80060ba:	4b40      	ldr	r3, [pc, #256]	; (80061bc <bekle+0x124>)
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <bekle+0x128>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d0ef      	beq.n	80060a6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060c6:	e002      	b.n	80060ce <bekle+0x36>
    	butonKontrol = 1;
 80060c8:	4b3e      	ldr	r3, [pc, #248]	; (80061c4 <bekle+0x12c>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060ce:	2108      	movs	r1, #8
 80060d0:	483e      	ldr	r0, [pc, #248]	; (80061cc <bekle+0x134>)
 80060d2:	f003 fdbd 	bl	8009c50 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d109      	bne.n	80060f0 <bekle+0x58>
 80060dc:	4b37      	ldr	r3, [pc, #220]	; (80061bc <bekle+0x124>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b37      	ldr	r3, [pc, #220]	; (80061c0 <bekle+0x128>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d0ef      	beq.n	80060c8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060e8:	e002      	b.n	80060f0 <bekle+0x58>
    	butonKontrol = 1;
 80060ea:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <bekle+0x12c>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060f0:	2102      	movs	r1, #2
 80060f2:	4835      	ldr	r0, [pc, #212]	; (80061c8 <bekle+0x130>)
 80060f4:	f003 fdac 	bl	8009c50 <HAL_GPIO_ReadPin>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d109      	bne.n	8006112 <bekle+0x7a>
 80060fe:	4b2f      	ldr	r3, [pc, #188]	; (80061bc <bekle+0x124>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b2f      	ldr	r3, [pc, #188]	; (80061c0 <bekle+0x128>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d0ef      	beq.n	80060ea <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800610a:	e002      	b.n	8006112 <bekle+0x7a>
    	butonKontrol = 1;
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <bekle+0x12c>)
 800610e:	2201      	movs	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006112:	2104      	movs	r1, #4
 8006114:	482c      	ldr	r0, [pc, #176]	; (80061c8 <bekle+0x130>)
 8006116:	f003 fd9b 	bl	8009c50 <HAL_GPIO_ReadPin>
 800611a:	4603      	mov	r3, r0
 800611c:	2b01      	cmp	r3, #1
 800611e:	d109      	bne.n	8006134 <bekle+0x9c>
 8006120:	4b26      	ldr	r3, [pc, #152]	; (80061bc <bekle+0x124>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	4b26      	ldr	r3, [pc, #152]	; (80061c0 <bekle+0x128>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d0ef      	beq.n	800610c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800612c:	e002      	b.n	8006134 <bekle+0x9c>
    	butonKontrol = 1;
 800612e:	4b25      	ldr	r3, [pc, #148]	; (80061c4 <bekle+0x12c>)
 8006130:	2201      	movs	r2, #1
 8006132:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006134:	2108      	movs	r1, #8
 8006136:	4824      	ldr	r0, [pc, #144]	; (80061c8 <bekle+0x130>)
 8006138:	f003 fd8a 	bl	8009c50 <HAL_GPIO_ReadPin>
 800613c:	4603      	mov	r3, r0
 800613e:	2b01      	cmp	r3, #1
 8006140:	d109      	bne.n	8006156 <bekle+0xbe>
 8006142:	4b1e      	ldr	r3, [pc, #120]	; (80061bc <bekle+0x124>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <bekle+0x128>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d0ef      	beq.n	800612e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800614e:	e002      	b.n	8006156 <bekle+0xbe>
    	butonKontrol = 1;
 8006150:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <bekle+0x12c>)
 8006152:	2201      	movs	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	481c      	ldr	r0, [pc, #112]	; (80061cc <bekle+0x134>)
 800615a:	f003 fd79 	bl	8009c50 <HAL_GPIO_ReadPin>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <bekle+0xe0>
 8006164:	4b15      	ldr	r3, [pc, #84]	; (80061bc <bekle+0x124>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <bekle+0x128>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d0ef      	beq.n	8006150 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006170:	e002      	b.n	8006178 <bekle+0xe0>
    	butonKontrol = 1;
 8006172:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <bekle+0x12c>)
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800617c:	4813      	ldr	r0, [pc, #76]	; (80061cc <bekle+0x134>)
 800617e:	f003 fd67 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <bekle+0x104>
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <bekle+0x124>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <bekle+0x128>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d0ee      	beq.n	8006172 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006194:	e002      	b.n	800619c <bekle+0x104>
    	butonKontrol = 1;
 8006196:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <bekle+0x12c>)
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800619c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061a0:	480a      	ldr	r0, [pc, #40]	; (80061cc <bekle+0x134>)
 80061a2:	f003 fd55 	bl	8009c50 <HAL_GPIO_ReadPin>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d105      	bne.n	80061b8 <bekle+0x120>
 80061ac:	4b03      	ldr	r3, [pc, #12]	; (80061bc <bekle+0x124>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b03      	ldr	r3, [pc, #12]	; (80061c0 <bekle+0x128>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d0ee      	beq.n	8006196 <bekle+0xfe>
    }

}
 80061b8:	bf00      	nop
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000bc4 	.word	0x20000bc4
 80061c0:	20000bcc 	.word	0x20000bcc
 80061c4:	20000c68 	.word	0x20000c68
 80061c8:	40010800 	.word	0x40010800
 80061cc:	40011000 	.word	0x40011000

080061d0 <i2cTest>:

void i2cTest() {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80061d6:	463b      	mov	r3, r7
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	609a      	str	r2, [r3, #8]
 80061e0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80061e2:	4b50      	ldr	r3, [pc, #320]	; (8006324 <i2cTest+0x154>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4b4e      	ldr	r3, [pc, #312]	; (8006324 <i2cTest+0x154>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80061f2:	484c      	ldr	r0, [pc, #304]	; (8006324 <i2cTest+0x154>)
 80061f4:	f003 feb8 	bl	8009f68 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061f8:	23c0      	movs	r3, #192	; 0xc0
 80061fa:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80061fc:	2311      	movs	r3, #17
 80061fe:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006200:	2301      	movs	r3, #1
 8006202:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006204:	2303      	movs	r3, #3
 8006206:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006208:	463b      	mov	r3, r7
 800620a:	4619      	mov	r1, r3
 800620c:	4846      	ldr	r0, [pc, #280]	; (8006328 <i2cTest+0x158>)
 800620e:	f003 fabf 	bl	8009790 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006212:	2201      	movs	r2, #1
 8006214:	2140      	movs	r1, #64	; 0x40
 8006216:	4844      	ldr	r0, [pc, #272]	; (8006328 <i2cTest+0x158>)
 8006218:	f003 fd31 	bl	8009c7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800621c:	2201      	movs	r2, #1
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	4841      	ldr	r0, [pc, #260]	; (8006328 <i2cTest+0x158>)
 8006222:	f003 fd2c 	bl	8009c7e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8006226:	200a      	movs	r0, #10
 8006228:	f002 ff42 	bl	80090b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800622c:	bf00      	nop
 800622e:	2140      	movs	r1, #64	; 0x40
 8006230:	483d      	ldr	r0, [pc, #244]	; (8006328 <i2cTest+0x158>)
 8006232:	f003 fd0d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006236:	4603      	mov	r3, r0
 8006238:	2b01      	cmp	r3, #1
 800623a:	d006      	beq.n	800624a <i2cTest+0x7a>
 800623c:	2180      	movs	r1, #128	; 0x80
 800623e:	483a      	ldr	r0, [pc, #232]	; (8006328 <i2cTest+0x158>)
 8006240:	f003 fd06 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d1f1      	bne.n	800622e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800624a:	2200      	movs	r2, #0
 800624c:	2180      	movs	r1, #128	; 0x80
 800624e:	4836      	ldr	r0, [pc, #216]	; (8006328 <i2cTest+0x158>)
 8006250:	f003 fd15 	bl	8009c7e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006254:	200a      	movs	r0, #10
 8006256:	f002 ff2b 	bl	80090b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800625a:	bf00      	nop
 800625c:	2180      	movs	r1, #128	; 0x80
 800625e:	4832      	ldr	r0, [pc, #200]	; (8006328 <i2cTest+0x158>)
 8006260:	f003 fcf6 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d0f8      	beq.n	800625c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800626a:	2200      	movs	r2, #0
 800626c:	2140      	movs	r1, #64	; 0x40
 800626e:	482e      	ldr	r0, [pc, #184]	; (8006328 <i2cTest+0x158>)
 8006270:	f003 fd05 	bl	8009c7e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006274:	200a      	movs	r0, #10
 8006276:	f002 ff1b 	bl	80090b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800627a:	bf00      	nop
 800627c:	2140      	movs	r1, #64	; 0x40
 800627e:	482a      	ldr	r0, [pc, #168]	; (8006328 <i2cTest+0x158>)
 8006280:	f003 fce6 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006284:	4603      	mov	r3, r0
 8006286:	2b01      	cmp	r3, #1
 8006288:	d0f8      	beq.n	800627c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800628a:	2201      	movs	r2, #1
 800628c:	2140      	movs	r1, #64	; 0x40
 800628e:	4826      	ldr	r0, [pc, #152]	; (8006328 <i2cTest+0x158>)
 8006290:	f003 fcf5 	bl	8009c7e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006294:	200a      	movs	r0, #10
 8006296:	f002 ff0b 	bl	80090b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800629a:	bf00      	nop
 800629c:	2140      	movs	r1, #64	; 0x40
 800629e:	4822      	ldr	r0, [pc, #136]	; (8006328 <i2cTest+0x158>)
 80062a0:	f003 fcd6 	bl	8009c50 <HAL_GPIO_ReadPin>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d1f8      	bne.n	800629c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80062aa:	2201      	movs	r2, #1
 80062ac:	2180      	movs	r1, #128	; 0x80
 80062ae:	481e      	ldr	r0, [pc, #120]	; (8006328 <i2cTest+0x158>)
 80062b0:	f003 fce5 	bl	8009c7e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80062b4:	200a      	movs	r0, #10
 80062b6:	f002 fefb 	bl	80090b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80062ba:	bf00      	nop
 80062bc:	2180      	movs	r1, #128	; 0x80
 80062be:	481a      	ldr	r0, [pc, #104]	; (8006328 <i2cTest+0x158>)
 80062c0:	f003 fcc6 	bl	8009c50 <HAL_GPIO_ReadPin>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d1f8      	bne.n	80062bc <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80062ca:	23c0      	movs	r3, #192	; 0xc0
 80062cc:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80062ce:	2312      	movs	r3, #18
 80062d0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80062d2:	2301      	movs	r3, #1
 80062d4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80062d6:	2303      	movs	r3, #3
 80062d8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80062da:	463b      	mov	r3, r7
 80062dc:	4619      	mov	r1, r3
 80062de:	4812      	ldr	r0, [pc, #72]	; (8006328 <i2cTest+0x158>)
 80062e0:	f003 fa56 	bl	8009790 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80062e4:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <i2cTest+0x154>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b0e      	ldr	r3, [pc, #56]	; (8006324 <i2cTest+0x154>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062f2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80062f4:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <i2cTest+0x154>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <i2cTest+0x154>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006302:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <i2cTest+0x154>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <i2cTest+0x154>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006314:	4803      	ldr	r0, [pc, #12]	; (8006324 <i2cTest+0x154>)
 8006316:	f003 fce3 	bl	8009ce0 <HAL_I2C_Init>
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000df8 	.word	0x20000df8
 8006328:	40010c00 	.word	0x40010c00

0800632c <checkLCDBacklight>:

void checkLCDBacklight() {
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <checkLCDBacklight+0x34>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <checkLCDBacklight+0x38>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	1ad2      	subs	r2, r2, r3
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <checkLCDBacklight+0x3c>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	4619      	mov	r1, r3
 8006340:	460b      	mov	r3, r1
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	429a      	cmp	r2, r3
 800634a:	d303      	bcc.n	8006354 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 800634c:	2000      	movs	r0, #0
 800634e:	f7fa fa7f 	bl	8000850 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8006352:	e002      	b.n	800635a <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006354:	2001      	movs	r0, #1
 8006356:	f7fa fa7b 	bl	8000850 <lcd_backlight>
}
 800635a:	bf00      	nop
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000bc4 	.word	0x20000bc4
 8006364:	20000be0 	.word	0x20000be0
 8006368:	20000940 	.word	0x20000940

0800636c <checkBasincSalteri>:

void checkBasincSalteri() {
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006370:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <checkBasincSalteri+0x54>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d102      	bne.n	800637e <checkBasincSalteri+0x12>
		basincVar=1;
 8006378:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <checkBasincSalteri+0x58>)
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800637e:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <checkBasincSalteri+0x54>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d119      	bne.n	80063ba <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8006386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800638a:	480f      	ldr	r0, [pc, #60]	; (80063c8 <checkBasincSalteri+0x5c>)
 800638c:	f003 fc60 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10a      	bne.n	80063ac <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <checkBasincSalteri+0x60>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <checkBasincSalteri+0x64>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d90a      	bls.n	80063ba <checkBasincSalteri+0x4e>
				basincVar=1;
 80063a4:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <checkBasincSalteri+0x58>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80063aa:	e006      	b.n	80063ba <checkBasincSalteri+0x4e>
			timer5=millis;
 80063ac:	4b07      	ldr	r3, [pc, #28]	; (80063cc <checkBasincSalteri+0x60>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a07      	ldr	r2, [pc, #28]	; (80063d0 <checkBasincSalteri+0x64>)
 80063b2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80063b4:	4b03      	ldr	r3, [pc, #12]	; (80063c4 <checkBasincSalteri+0x58>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
}
 80063ba:	bf00      	nop
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000c40 	.word	0x20000c40
 80063c4:	20000c3c 	.word	0x20000c3c
 80063c8:	40011000 	.word	0x40011000
 80063cc:	20000bc4 	.word	0x20000bc4
 80063d0:	20000bdc 	.word	0x20000bdc

080063d4 <checkBasGonder>:

void checkBasGonder() {
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80063d8:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <checkBasGonder+0x74>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d10b      	bne.n	80063f8 <checkBasGonder+0x24>
 80063e0:	4b1a      	ldr	r3, [pc, #104]	; (800644c <checkBasGonder+0x78>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <checkBasGonder+0x24>
 80063e8:	4b19      	ldr	r3, [pc, #100]	; (8006450 <checkBasGonder+0x7c>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80063f0:	4b18      	ldr	r3, [pc, #96]	; (8006454 <checkBasGonder+0x80>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e009      	b.n	800640c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80063f8:	4b14      	ldr	r3, [pc, #80]	; (800644c <checkBasGonder+0x78>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f083 0301 	eor.w	r3, r3, #1
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8006406:	4b13      	ldr	r3, [pc, #76]	; (8006454 <checkBasGonder+0x80>)
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <checkBasGonder+0x74>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d10b      	bne.n	800642c <checkBasGonder+0x58>
 8006414:	4b10      	ldr	r3, [pc, #64]	; (8006458 <checkBasGonder+0x84>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <checkBasGonder+0x58>
 800641c:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <checkBasGonder+0x7c>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d103      	bne.n	800642c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006424:	4b0d      	ldr	r3, [pc, #52]	; (800645c <checkBasGonder+0x88>)
 8006426:	2201      	movs	r2, #1
 8006428:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800642a:	e009      	b.n	8006440 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <checkBasGonder+0x84>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f083 0301 	eor.w	r3, r3, #1
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800643a:	4b08      	ldr	r3, [pc, #32]	; (800645c <checkBasGonder+0x88>)
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
}
 8006440:	bf00      	nop
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr
 8006448:	20000c3a 	.word	0x20000c3a
 800644c:	20000c6e 	.word	0x20000c6e
 8006450:	20000c48 	.word	0x20000c48
 8006454:	20000c75 	.word	0x20000c75
 8006458:	20000c71 	.word	0x20000c71
 800645c:	20000c76 	.word	0x20000c76

08006460 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006464:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <checkKapiSecimleri+0x98>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 800646c:	4b23      	ldr	r3, [pc, #140]	; (80064fc <checkKapiSecimleri+0x9c>)
 800646e:	2201      	movs	r2, #1
 8006470:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8006472:	4b21      	ldr	r3, [pc, #132]	; (80064f8 <checkKapiSecimleri+0x98>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d10e      	bne.n	8006498 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800647a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800647e:	4820      	ldr	r0, [pc, #128]	; (8006500 <checkKapiSecimleri+0xa0>)
 8006480:	f003 fbe6 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800648a:	4b1c      	ldr	r3, [pc, #112]	; (80064fc <checkKapiSecimleri+0x9c>)
 800648c:	2201      	movs	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	e002      	b.n	8006498 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8006492:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <checkKapiSecimleri+0x9c>)
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006498:	4b17      	ldr	r3, [pc, #92]	; (80064f8 <checkKapiSecimleri+0x98>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d10e      	bne.n	80064be <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80064a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064a4:	4816      	ldr	r0, [pc, #88]	; (8006500 <checkKapiSecimleri+0xa0>)
 80064a6:	f003 fbd3 	bl	8009c50 <HAL_GPIO_ReadPin>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d103      	bne.n	80064b8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80064b0:	4b12      	ldr	r3, [pc, #72]	; (80064fc <checkKapiSecimleri+0x9c>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	e002      	b.n	80064be <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80064b8:	4b10      	ldr	r3, [pc, #64]	; (80064fc <checkKapiSecimleri+0x9c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80064be:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <checkKapiSecimleri+0x98>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d116      	bne.n	80064f4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80064c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064ca:	480d      	ldr	r0, [pc, #52]	; (8006500 <checkKapiSecimleri+0xa0>)
 80064cc:	f003 fbc0 	bl	8009c50 <HAL_GPIO_ReadPin>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10b      	bne.n	80064ee <checkKapiSecimleri+0x8e>
 80064d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064da:	4809      	ldr	r0, [pc, #36]	; (8006500 <checkKapiSecimleri+0xa0>)
 80064dc:	f003 fbb8 	bl	8009c50 <HAL_GPIO_ReadPin>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d103      	bne.n	80064ee <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80064e6:	4b05      	ldr	r3, [pc, #20]	; (80064fc <checkKapiSecimleri+0x9c>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80064ec:	e002      	b.n	80064f4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80064ee:	4b03      	ldr	r3, [pc, #12]	; (80064fc <checkKapiSecimleri+0x9c>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	701a      	strb	r2, [r3, #0]
}
 80064f4:	bf00      	nop
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000c41 	.word	0x20000c41
 80064fc:	20000c8c 	.word	0x20000c8c
 8006500:	40010800 	.word	0x40010800

08006504 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006508:	4b62      	ldr	r3, [pc, #392]	; (8006694 <checkAktifCalisma+0x190>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f041 8332 	bne.w	8007b76 <checkAktifCalisma+0x1672>
 8006512:	4b61      	ldr	r3, [pc, #388]	; (8006698 <checkAktifCalisma+0x194>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f041 832d 	bne.w	8007b76 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 800651c:	4b5f      	ldr	r3, [pc, #380]	; (800669c <checkAktifCalisma+0x198>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d11a      	bne.n	800655a <checkAktifCalisma+0x56>
 8006524:	4b5e      	ldr	r3, [pc, #376]	; (80066a0 <checkAktifCalisma+0x19c>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d116      	bne.n	800655a <checkAktifCalisma+0x56>
 800652c:	4b5d      	ldr	r3, [pc, #372]	; (80066a4 <checkAktifCalisma+0x1a0>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <checkAktifCalisma+0x46>
 8006534:	4b5c      	ldr	r3, [pc, #368]	; (80066a8 <checkAktifCalisma+0x1a4>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f083 0301 	eor.w	r3, r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <checkAktifCalisma+0x46>
 8006542:	4b5a      	ldr	r3, [pc, #360]	; (80066ac <checkAktifCalisma+0x1a8>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d007      	beq.n	800655a <checkAktifCalisma+0x56>
 800654a:	4b59      	ldr	r3, [pc, #356]	; (80066b0 <checkAktifCalisma+0x1ac>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d018      	beq.n	8006584 <checkAktifCalisma+0x80>
 8006552:	4b58      	ldr	r3, [pc, #352]	; (80066b4 <checkAktifCalisma+0x1b0>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d114      	bne.n	8006584 <checkAktifCalisma+0x80>
 800655a:	4b57      	ldr	r3, [pc, #348]	; (80066b8 <checkAktifCalisma+0x1b4>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d010      	beq.n	8006584 <checkAktifCalisma+0x80>
 8006562:	4b56      	ldr	r3, [pc, #344]	; (80066bc <checkAktifCalisma+0x1b8>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00c      	beq.n	8006584 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800656a:	2201      	movs	r2, #1
 800656c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006570:	4853      	ldr	r0, [pc, #332]	; (80066c0 <checkAktifCalisma+0x1bc>)
 8006572:	f003 fb84 	bl	8009c7e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8006576:	4b53      	ldr	r3, [pc, #332]	; (80066c4 <checkAktifCalisma+0x1c0>)
 8006578:	2201      	movs	r2, #1
 800657a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 800657c:	4b52      	ldr	r3, [pc, #328]	; (80066c8 <checkAktifCalisma+0x1c4>)
 800657e:	2201      	movs	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	e008      	b.n	8006596 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006584:	2200      	movs	r2, #0
 8006586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800658a:	484d      	ldr	r0, [pc, #308]	; (80066c0 <checkAktifCalisma+0x1bc>)
 800658c:	f003 fb77 	bl	8009c7e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006590:	4b4c      	ldr	r3, [pc, #304]	; (80066c4 <checkAktifCalisma+0x1c0>)
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8006596:	4b40      	ldr	r3, [pc, #256]	; (8006698 <checkAktifCalisma+0x194>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d160      	bne.n	8006660 <checkAktifCalisma+0x15c>
 800659e:	4b46      	ldr	r3, [pc, #280]	; (80066b8 <checkAktifCalisma+0x1b4>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d05c      	beq.n	8006660 <checkAktifCalisma+0x15c>
 80065a6:	4b45      	ldr	r3, [pc, #276]	; (80066bc <checkAktifCalisma+0x1b8>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d058      	beq.n	8006660 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80065ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065b2:	4843      	ldr	r0, [pc, #268]	; (80066c0 <checkAktifCalisma+0x1bc>)
 80065b4:	f003 fb4c 	bl	8009c50 <HAL_GPIO_ReadPin>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <checkAktifCalisma+0xc2>
 80065be:	4b43      	ldr	r3, [pc, #268]	; (80066cc <checkAktifCalisma+0x1c8>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d04c      	beq.n	8006660 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80065c6:	2102      	movs	r1, #2
 80065c8:	4841      	ldr	r0, [pc, #260]	; (80066d0 <checkAktifCalisma+0x1cc>)
 80065ca:	f003 fb41 	bl	8009c50 <HAL_GPIO_ReadPin>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d145      	bne.n	8006660 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80065d4:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <checkAktifCalisma+0x1d0>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d041      	beq.n	8006660 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80065dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065e0:	4837      	ldr	r0, [pc, #220]	; (80066c0 <checkAktifCalisma+0x1bc>)
 80065e2:	f003 fb35 	bl	8009c50 <HAL_GPIO_ReadPin>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d10e      	bne.n	800660a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80065ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065f0:	4833      	ldr	r0, [pc, #204]	; (80066c0 <checkAktifCalisma+0x1bc>)
 80065f2:	f003 fb2d 	bl	8009c50 <HAL_GPIO_ReadPin>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d106      	bne.n	800660a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80065fc:	2140      	movs	r1, #64	; 0x40
 80065fe:	4834      	ldr	r0, [pc, #208]	; (80066d0 <checkAktifCalisma+0x1cc>)
 8006600:	f003 fb26 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006604:	4603      	mov	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d003      	beq.n	8006612 <checkAktifCalisma+0x10e>
 800660a:	4b24      	ldr	r3, [pc, #144]	; (800669c <checkAktifCalisma+0x198>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d026      	beq.n	8006660 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006612:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <checkAktifCalisma+0x1a0>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f083 0301 	eor.w	r3, r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01f      	beq.n	8006660 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006620:	4b1f      	ldr	r3, [pc, #124]	; (80066a0 <checkAktifCalisma+0x19c>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	f083 0301 	eor.w	r3, r3, #1
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d018      	beq.n	8006660 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800662e:	4b20      	ldr	r3, [pc, #128]	; (80066b0 <checkAktifCalisma+0x1ac>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f083 0301 	eor.w	r3, r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 800663c:	4b26      	ldr	r3, [pc, #152]	; (80066d8 <checkAktifCalisma+0x1d4>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f083 0301 	eor.w	r3, r3, #1
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <checkAktifCalisma+0x1d8>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	f083 0301 	eor.w	r3, r3, #1
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006658:	4b10      	ldr	r3, [pc, #64]	; (800669c <checkAktifCalisma+0x198>)
 800665a:	2201      	movs	r2, #1
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	e002      	b.n	8006666 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006660:	4b0e      	ldr	r3, [pc, #56]	; (800669c <checkAktifCalisma+0x198>)
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006666:	4b0d      	ldr	r3, [pc, #52]	; (800669c <checkAktifCalisma+0x198>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d03a      	beq.n	80066e4 <checkAktifCalisma+0x1e0>
 800666e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006672:	4817      	ldr	r0, [pc, #92]	; (80066d0 <checkAktifCalisma+0x1cc>)
 8006674:	f003 faec 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006678:	4603      	mov	r3, r0
 800667a:	2b01      	cmp	r3, #1
 800667c:	d132      	bne.n	80066e4 <checkAktifCalisma+0x1e0>
 800667e:	4b18      	ldr	r3, [pc, #96]	; (80066e0 <checkAktifCalisma+0x1dc>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d02e      	beq.n	80066e4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006686:	2201      	movs	r2, #1
 8006688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800668c:	480c      	ldr	r0, [pc, #48]	; (80066c0 <checkAktifCalisma+0x1bc>)
 800668e:	f003 faf6 	bl	8009c7e <HAL_GPIO_WritePin>
 8006692:	e02d      	b.n	80066f0 <checkAktifCalisma+0x1ec>
 8006694:	20000c57 	.word	0x20000c57
 8006698:	20000c56 	.word	0x20000c56
 800669c:	20000c6e 	.word	0x20000c6e
 80066a0:	20000c6f 	.word	0x20000c6f
 80066a4:	20000c71 	.word	0x20000c71
 80066a8:	20000c69 	.word	0x20000c69
 80066ac:	20000c4c 	.word	0x20000c4c
 80066b0:	20000c70 	.word	0x20000c70
 80066b4:	20000c4b 	.word	0x20000c4b
 80066b8:	20000c8b 	.word	0x20000c8b
 80066bc:	20000c8c 	.word	0x20000c8c
 80066c0:	40010c00 	.word	0x40010c00
 80066c4:	20000c8d 	.word	0x20000c8d
 80066c8:	20000c78 	.word	0x20000c78
 80066cc:	20000c75 	.word	0x20000c75
 80066d0:	40011000 	.word	0x40011000
 80066d4:	20000c3c 	.word	0x20000c3c
 80066d8:	20000c73 	.word	0x20000c73
 80066dc:	20000c74 	.word	0x20000c74
 80066e0:	20000c47 	.word	0x20000c47
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80066e4:	2200      	movs	r2, #0
 80066e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066ea:	4860      	ldr	r0, [pc, #384]	; (800686c <checkAktifCalisma+0x368>)
 80066ec:	f003 fac7 	bl	8009c7e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80066f0:	4b5f      	ldr	r3, [pc, #380]	; (8006870 <checkAktifCalisma+0x36c>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d013      	beq.n	8006720 <checkAktifCalisma+0x21c>
 80066f8:	4b5e      	ldr	r3, [pc, #376]	; (8006874 <checkAktifCalisma+0x370>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d007      	beq.n	8006710 <checkAktifCalisma+0x20c>
 8006700:	4b5c      	ldr	r3, [pc, #368]	; (8006874 <checkAktifCalisma+0x370>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d003      	beq.n	8006710 <checkAktifCalisma+0x20c>
 8006708:	4b5b      	ldr	r3, [pc, #364]	; (8006878 <checkAktifCalisma+0x374>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d107      	bne.n	8006720 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006710:	2201      	movs	r2, #1
 8006712:	2104      	movs	r1, #4
 8006714:	4855      	ldr	r0, [pc, #340]	; (800686c <checkAktifCalisma+0x368>)
 8006716:	f003 fab2 	bl	8009c7e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800671a:	4b58      	ldr	r3, [pc, #352]	; (800687c <checkAktifCalisma+0x378>)
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006720:	4b56      	ldr	r3, [pc, #344]	; (800687c <checkAktifCalisma+0x378>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02f      	beq.n	8006788 <checkAktifCalisma+0x284>
 8006728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800672c:	484f      	ldr	r0, [pc, #316]	; (800686c <checkAktifCalisma+0x368>)
 800672e:	f003 fa8f 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006732:	4603      	mov	r3, r0
 8006734:	2b01      	cmp	r3, #1
 8006736:	d106      	bne.n	8006746 <checkAktifCalisma+0x242>
 8006738:	4b51      	ldr	r3, [pc, #324]	; (8006880 <checkAktifCalisma+0x37c>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	f083 0301 	eor.w	r3, r3, #1
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <checkAktifCalisma+0x250>
 8006746:	2102      	movs	r1, #2
 8006748:	484e      	ldr	r0, [pc, #312]	; (8006884 <checkAktifCalisma+0x380>)
 800674a:	f003 fa81 	bl	8009c50 <HAL_GPIO_ReadPin>
 800674e:	4603      	mov	r3, r0
 8006750:	2b01      	cmp	r3, #1
 8006752:	d119      	bne.n	8006788 <checkAktifCalisma+0x284>
 8006754:	4b4c      	ldr	r3, [pc, #304]	; (8006888 <checkAktifCalisma+0x384>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d015      	beq.n	8006788 <checkAktifCalisma+0x284>
 800675c:	4b4b      	ldr	r3, [pc, #300]	; (800688c <checkAktifCalisma+0x388>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d011      	beq.n	8006788 <checkAktifCalisma+0x284>
 8006764:	4b4a      	ldr	r3, [pc, #296]	; (8006890 <checkAktifCalisma+0x38c>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00d      	beq.n	8006788 <checkAktifCalisma+0x284>
 800676c:	4b49      	ldr	r3, [pc, #292]	; (8006894 <checkAktifCalisma+0x390>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f083 0301 	eor.w	r3, r3, #1
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <checkAktifCalisma+0x284>
			timer2=millis;
 800677a:	4b47      	ldr	r3, [pc, #284]	; (8006898 <checkAktifCalisma+0x394>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a47      	ldr	r2, [pc, #284]	; (800689c <checkAktifCalisma+0x398>)
 8006780:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006782:	4b44      	ldr	r3, [pc, #272]	; (8006894 <checkAktifCalisma+0x390>)
 8006784:	2201      	movs	r2, #1
 8006786:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006788:	4b43      	ldr	r3, [pc, #268]	; (8006898 <checkAktifCalisma+0x394>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b43      	ldr	r3, [pc, #268]	; (800689c <checkAktifCalisma+0x398>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	4a43      	ldr	r2, [pc, #268]	; (80068a0 <checkAktifCalisma+0x39c>)
 8006794:	7812      	ldrb	r2, [r2, #0]
 8006796:	4293      	cmp	r3, r2
 8006798:	d303      	bcc.n	80067a2 <checkAktifCalisma+0x29e>
 800679a:	4b3e      	ldr	r3, [pc, #248]	; (8006894 <checkAktifCalisma+0x390>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d111      	bne.n	80067c6 <checkAktifCalisma+0x2c2>
 80067a2:	4b39      	ldr	r3, [pc, #228]	; (8006888 <checkAktifCalisma+0x384>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	f083 0301 	eor.w	r3, r3, #1
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10a      	bne.n	80067c6 <checkAktifCalisma+0x2c2>
 80067b0:	4b36      	ldr	r3, [pc, #216]	; (800688c <checkAktifCalisma+0x388>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	f083 0301 	eor.w	r3, r3, #1
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <checkAktifCalisma+0x2c2>
 80067be:	4b34      	ldr	r3, [pc, #208]	; (8006890 <checkAktifCalisma+0x38c>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80067c6:	2200      	movs	r2, #0
 80067c8:	2104      	movs	r1, #4
 80067ca:	4828      	ldr	r0, [pc, #160]	; (800686c <checkAktifCalisma+0x368>)
 80067cc:	f003 fa57 	bl	8009c7e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80067d0:	4b2a      	ldr	r3, [pc, #168]	; (800687c <checkAktifCalisma+0x378>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80067d6:	4b2f      	ldr	r3, [pc, #188]	; (8006894 <checkAktifCalisma+0x390>)
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80067dc:	4b31      	ldr	r3, [pc, #196]	; (80068a4 <checkAktifCalisma+0x3a0>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80067e4:	4b30      	ldr	r3, [pc, #192]	; (80068a8 <checkAktifCalisma+0x3a4>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80067ea:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <checkAktifCalisma+0x3a0>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d116      	bne.n	8006820 <checkAktifCalisma+0x31c>
 80067f2:	4b2e      	ldr	r3, [pc, #184]	; (80068ac <checkAktifCalisma+0x3a8>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d112      	bne.n	8006820 <checkAktifCalisma+0x31c>
 80067fa:	2101      	movs	r1, #1
 80067fc:	4821      	ldr	r0, [pc, #132]	; (8006884 <checkAktifCalisma+0x380>)
 80067fe:	f003 fa27 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10b      	bne.n	8006820 <checkAktifCalisma+0x31c>
 8006808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800680c:	4817      	ldr	r0, [pc, #92]	; (800686c <checkAktifCalisma+0x368>)
 800680e:	f003 fa1f 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006818:	4b23      	ldr	r3, [pc, #140]	; (80068a8 <checkAktifCalisma+0x3a4>)
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	e011      	b.n	8006844 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006820:	4b20      	ldr	r3, [pc, #128]	; (80068a4 <checkAktifCalisma+0x3a0>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d10d      	bne.n	8006844 <checkAktifCalisma+0x340>
 8006828:	2101      	movs	r1, #1
 800682a:	4816      	ldr	r0, [pc, #88]	; (8006884 <checkAktifCalisma+0x380>)
 800682c:	f003 fa10 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d106      	bne.n	8006844 <checkAktifCalisma+0x340>
 8006836:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <checkAktifCalisma+0x3a8>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800683e:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <checkAktifCalisma+0x3a4>)
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006844:	4b17      	ldr	r3, [pc, #92]	; (80068a4 <checkAktifCalisma+0x3a0>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d134      	bne.n	80068b6 <checkAktifCalisma+0x3b2>
 800684c:	4b17      	ldr	r3, [pc, #92]	; (80068ac <checkAktifCalisma+0x3a8>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d130      	bne.n	80068b6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006854:	2101      	movs	r1, #1
 8006856:	480b      	ldr	r0, [pc, #44]	; (8006884 <checkAktifCalisma+0x380>)
 8006858:	f003 f9fa 	bl	8009c50 <HAL_GPIO_ReadPin>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d126      	bne.n	80068b0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006862:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <checkAktifCalisma+0x3a4>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	e025      	b.n	80068b6 <checkAktifCalisma+0x3b2>
 800686a:	bf00      	nop
 800686c:	40010c00 	.word	0x40010c00
 8006870:	20000c6e 	.word	0x20000c6e
 8006874:	20000c48 	.word	0x20000c48
 8006878:	20000c4c 	.word	0x20000c4c
 800687c:	20000c72 	.word	0x20000c72
 8006880:	20000c75 	.word	0x20000c75
 8006884:	40011000 	.word	0x40011000
 8006888:	20000c8b 	.word	0x20000c8b
 800688c:	20000c8c 	.word	0x20000c8c
 8006890:	20000c3c 	.word	0x20000c3c
 8006894:	20000c6a 	.word	0x20000c6a
 8006898:	20000bc4 	.word	0x20000bc4
 800689c:	20000bd0 	.word	0x20000bd0
 80068a0:	20000c4d 	.word	0x20000c4d
 80068a4:	20000c3d 	.word	0x20000c3d
 80068a8:	20000c90 	.word	0x20000c90
 80068ac:	20000c3a 	.word	0x20000c3a
			} else {
				cerceveVar=0;
 80068b0:	4b7f      	ldr	r3, [pc, #508]	; (8006ab0 <checkAktifCalisma+0x5ac>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80068b6:	4b7f      	ldr	r3, [pc, #508]	; (8006ab4 <checkAktifCalisma+0x5b0>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d17c      	bne.n	80069b8 <checkAktifCalisma+0x4b4>
 80068be:	4b7e      	ldr	r3, [pc, #504]	; (8006ab8 <checkAktifCalisma+0x5b4>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d078      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
 80068c6:	4b7d      	ldr	r3, [pc, #500]	; (8006abc <checkAktifCalisma+0x5b8>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d074      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80068ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068d2:	487b      	ldr	r0, [pc, #492]	; (8006ac0 <checkAktifCalisma+0x5bc>)
 80068d4:	f003 f9bc 	bl	8009c50 <HAL_GPIO_ReadPin>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <checkAktifCalisma+0x3e2>
 80068de:	4b79      	ldr	r3, [pc, #484]	; (8006ac4 <checkAktifCalisma+0x5c0>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d068      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80068e6:	4b72      	ldr	r3, [pc, #456]	; (8006ab0 <checkAktifCalisma+0x5ac>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d064      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
 80068ee:	4b76      	ldr	r3, [pc, #472]	; (8006ac8 <checkAktifCalisma+0x5c4>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f083 0301 	eor.w	r3, r3, #1
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d05d      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80068fc:	2104      	movs	r1, #4
 80068fe:	4873      	ldr	r0, [pc, #460]	; (8006acc <checkAktifCalisma+0x5c8>)
 8006900:	f003 f9a6 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <checkAktifCalisma+0x40e>
 800690a:	4b71      	ldr	r3, [pc, #452]	; (8006ad0 <checkAktifCalisma+0x5cc>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d152      	bne.n	80069b8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006916:	486a      	ldr	r0, [pc, #424]	; (8006ac0 <checkAktifCalisma+0x5bc>)
 8006918:	f003 f99a 	bl	8009c50 <HAL_GPIO_ReadPin>
 800691c:	4603      	mov	r3, r0
 800691e:	2b01      	cmp	r3, #1
 8006920:	d10e      	bne.n	8006940 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006926:	4866      	ldr	r0, [pc, #408]	; (8006ac0 <checkAktifCalisma+0x5bc>)
 8006928:	f003 f992 	bl	8009c50 <HAL_GPIO_ReadPin>
 800692c:	4603      	mov	r3, r0
 800692e:	2b01      	cmp	r3, #1
 8006930:	d106      	bne.n	8006940 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006932:	2140      	movs	r1, #64	; 0x40
 8006934:	4865      	ldr	r0, [pc, #404]	; (8006acc <checkAktifCalisma+0x5c8>)
 8006936:	f003 f98b 	bl	8009c50 <HAL_GPIO_ReadPin>
 800693a:	4603      	mov	r3, r0
 800693c:	2b01      	cmp	r3, #1
 800693e:	d003      	beq.n	8006948 <checkAktifCalisma+0x444>
 8006940:	4b64      	ldr	r3, [pc, #400]	; (8006ad4 <checkAktifCalisma+0x5d0>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d037      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006948:	4b63      	ldr	r3, [pc, #396]	; (8006ad8 <checkAktifCalisma+0x5d4>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f083 0301 	eor.w	r3, r3, #1
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d030      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8006956:	4b61      	ldr	r3, [pc, #388]	; (8006adc <checkAktifCalisma+0x5d8>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	f083 0301 	eor.w	r3, r3, #1
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d029      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006964:	4b5e      	ldr	r3, [pc, #376]	; (8006ae0 <checkAktifCalisma+0x5dc>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	f083 0301 	eor.w	r3, r3, #1
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d022      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006972:	4b5c      	ldr	r3, [pc, #368]	; (8006ae4 <checkAktifCalisma+0x5e0>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	f083 0301 	eor.w	r3, r3, #1
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01b      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006980:	4b59      	ldr	r3, [pc, #356]	; (8006ae8 <checkAktifCalisma+0x5e4>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f083 0301 	eor.w	r3, r3, #1
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d014      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800698e:	4b57      	ldr	r3, [pc, #348]	; (8006aec <checkAktifCalisma+0x5e8>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	f083 0301 	eor.w	r3, r3, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00d      	beq.n	80069b8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800699c:	2201      	movs	r2, #1
 800699e:	2102      	movs	r1, #2
 80069a0:	4847      	ldr	r0, [pc, #284]	; (8006ac0 <checkAktifCalisma+0x5bc>)
 80069a2:	f003 f96c 	bl	8009c7e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80069a6:	4b4b      	ldr	r3, [pc, #300]	; (8006ad4 <checkAktifCalisma+0x5d0>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80069ac:	4b50      	ldr	r3, [pc, #320]	; (8006af0 <checkAktifCalisma+0x5ec>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80069b2:	4b50      	ldr	r3, [pc, #320]	; (8006af4 <checkAktifCalisma+0x5f0>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80069b8:	4b46      	ldr	r3, [pc, #280]	; (8006ad4 <checkAktifCalisma+0x5d0>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d033      	beq.n	8006a28 <checkAktifCalisma+0x524>
 80069c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069c4:	483e      	ldr	r0, [pc, #248]	; (8006ac0 <checkAktifCalisma+0x5bc>)
 80069c6:	f003 f943 	bl	8009c50 <HAL_GPIO_ReadPin>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d106      	bne.n	80069de <checkAktifCalisma+0x4da>
 80069d0:	4b3c      	ldr	r3, [pc, #240]	; (8006ac4 <checkAktifCalisma+0x5c0>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f083 0301 	eor.w	r3, r3, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <checkAktifCalisma+0x4f0>
 80069de:	2104      	movs	r1, #4
 80069e0:	483a      	ldr	r0, [pc, #232]	; (8006acc <checkAktifCalisma+0x5c8>)
 80069e2:	f003 f935 	bl	8009c50 <HAL_GPIO_ReadPin>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d11d      	bne.n	8006a28 <checkAktifCalisma+0x524>
 80069ec:	4b38      	ldr	r3, [pc, #224]	; (8006ad0 <checkAktifCalisma+0x5cc>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d019      	beq.n	8006a28 <checkAktifCalisma+0x524>
 80069f4:	4b30      	ldr	r3, [pc, #192]	; (8006ab8 <checkAktifCalisma+0x5b4>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d015      	beq.n	8006a28 <checkAktifCalisma+0x524>
 80069fc:	4b2f      	ldr	r3, [pc, #188]	; (8006abc <checkAktifCalisma+0x5b8>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d011      	beq.n	8006a28 <checkAktifCalisma+0x524>
 8006a04:	4b2a      	ldr	r3, [pc, #168]	; (8006ab0 <checkAktifCalisma+0x5ac>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <checkAktifCalisma+0x524>
 8006a0c:	4b3a      	ldr	r3, [pc, #232]	; (8006af8 <checkAktifCalisma+0x5f4>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f083 0301 	eor.w	r3, r3, #1
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d006      	beq.n	8006a28 <checkAktifCalisma+0x524>
			timer2=millis;
 8006a1a:	4b38      	ldr	r3, [pc, #224]	; (8006afc <checkAktifCalisma+0x5f8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a38      	ldr	r2, [pc, #224]	; (8006b00 <checkAktifCalisma+0x5fc>)
 8006a20:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006a22:	4b35      	ldr	r3, [pc, #212]	; (8006af8 <checkAktifCalisma+0x5f4>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006a28:	4b34      	ldr	r3, [pc, #208]	; (8006afc <checkAktifCalisma+0x5f8>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	4b34      	ldr	r3, [pc, #208]	; (8006b00 <checkAktifCalisma+0x5fc>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	4a34      	ldr	r2, [pc, #208]	; (8006b04 <checkAktifCalisma+0x600>)
 8006a34:	7812      	ldrb	r2, [r2, #0]
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d303      	bcc.n	8006a42 <checkAktifCalisma+0x53e>
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	; (8006af8 <checkAktifCalisma+0x5f4>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d114      	bne.n	8006a6c <checkAktifCalisma+0x568>
 8006a42:	4b1d      	ldr	r3, [pc, #116]	; (8006ab8 <checkAktifCalisma+0x5b4>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f083 0301 	eor.w	r3, r3, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10d      	bne.n	8006a6c <checkAktifCalisma+0x568>
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <checkAktifCalisma+0x5b8>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f083 0301 	eor.w	r3, r3, #1
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <checkAktifCalisma+0x568>
 8006a5e:	4b14      	ldr	r3, [pc, #80]	; (8006ab0 <checkAktifCalisma+0x5ac>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	f083 0301 	eor.w	r3, r3, #1
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00a      	beq.n	8006a82 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2102      	movs	r1, #2
 8006a70:	4813      	ldr	r0, [pc, #76]	; (8006ac0 <checkAktifCalisma+0x5bc>)
 8006a72:	f003 f904 	bl	8009c7e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006a76:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <checkAktifCalisma+0x5d0>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <checkAktifCalisma+0x5f4>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006a82:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <checkAktifCalisma+0x5d0>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d040      	beq.n	8006b0c <checkAktifCalisma+0x608>
 8006a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a8e:	480f      	ldr	r0, [pc, #60]	; (8006acc <checkAktifCalisma+0x5c8>)
 8006a90:	f003 f8de 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d138      	bne.n	8006b0c <checkAktifCalisma+0x608>
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <checkAktifCalisma+0x604>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d034      	beq.n	8006b0c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4806      	ldr	r0, [pc, #24]	; (8006ac0 <checkAktifCalisma+0x5bc>)
 8006aa8:	f003 f8e9 	bl	8009c7e <HAL_GPIO_WritePin>
 8006aac:	e033      	b.n	8006b16 <checkAktifCalisma+0x612>
 8006aae:	bf00      	nop
 8006ab0:	20000c90 	.word	0x20000c90
 8006ab4:	20000c56 	.word	0x20000c56
 8006ab8:	20000c8b 	.word	0x20000c8b
 8006abc:	20000c8c 	.word	0x20000c8c
 8006ac0:	40010c00 	.word	0x40010c00
 8006ac4:	20000c76 	.word	0x20000c76
 8006ac8:	20000c8a 	.word	0x20000c8a
 8006acc:	40011000 	.word	0x40011000
 8006ad0:	20000c3f 	.word	0x20000c3f
 8006ad4:	20000c71 	.word	0x20000c71
 8006ad8:	20000c6e 	.word	0x20000c6e
 8006adc:	20000c72 	.word	0x20000c72
 8006ae0:	20000c6f 	.word	0x20000c6f
 8006ae4:	20000c70 	.word	0x20000c70
 8006ae8:	20000c73 	.word	0x20000c73
 8006aec:	20000c74 	.word	0x20000c74
 8006af0:	20000c79 	.word	0x20000c79
 8006af4:	20000c9a 	.word	0x20000c9a
 8006af8:	20000c69 	.word	0x20000c69
 8006afc:	20000bc4 	.word	0x20000bc4
 8006b00:	20000bd0 	.word	0x20000bd0
 8006b04:	20000c4e 	.word	0x20000c4e
 8006b08:	20000c3e 	.word	0x20000c3e
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2101      	movs	r1, #1
 8006b10:	4836      	ldr	r0, [pc, #216]	; (8006bec <checkAktifCalisma+0x6e8>)
 8006b12:	f003 f8b4 	bl	8009c7e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006b16:	4b36      	ldr	r3, [pc, #216]	; (8006bf0 <checkAktifCalisma+0x6ec>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 8080 	bne.w	8006c20 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006b20:	4b34      	ldr	r3, [pc, #208]	; (8006bf4 <checkAktifCalisma+0x6f0>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d003      	beq.n	8006b30 <checkAktifCalisma+0x62c>
 8006b28:	4b32      	ldr	r3, [pc, #200]	; (8006bf4 <checkAktifCalisma+0x6f0>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d177      	bne.n	8006c20 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006b30:	4b31      	ldr	r3, [pc, #196]	; (8006bf8 <checkAktifCalisma+0x6f4>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d073      	beq.n	8006c20 <checkAktifCalisma+0x71c>
 8006b38:	4b30      	ldr	r3, [pc, #192]	; (8006bfc <checkAktifCalisma+0x6f8>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d06f      	beq.n	8006c20 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b44:	4829      	ldr	r0, [pc, #164]	; (8006bec <checkAktifCalisma+0x6e8>)
 8006b46:	f003 f883 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d167      	bne.n	8006c20 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b54:	482a      	ldr	r0, [pc, #168]	; (8006c00 <checkAktifCalisma+0x6fc>)
 8006b56:	f003 f87b 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <checkAktifCalisma+0x664>
 8006b60:	4b28      	ldr	r3, [pc, #160]	; (8006c04 <checkAktifCalisma+0x700>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d15b      	bne.n	8006c20 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006b68:	2140      	movs	r1, #64	; 0x40
 8006b6a:	4825      	ldr	r0, [pc, #148]	; (8006c00 <checkAktifCalisma+0x6fc>)
 8006b6c:	f003 f870 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d10f      	bne.n	8006b96 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b7a:	481c      	ldr	r0, [pc, #112]	; (8006bec <checkAktifCalisma+0x6e8>)
 8006b7c:	f003 f868 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d107      	bne.n	8006b96 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b8a:	4818      	ldr	r0, [pc, #96]	; (8006bec <checkAktifCalisma+0x6e8>)
 8006b8c:	f003 f860 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d003      	beq.n	8006b9e <checkAktifCalisma+0x69a>
 8006b96:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <checkAktifCalisma+0x704>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d040      	beq.n	8006c20 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006b9e:	4b1b      	ldr	r3, [pc, #108]	; (8006c0c <checkAktifCalisma+0x708>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	f083 0301 	eor.w	r3, r3, #1
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d039      	beq.n	8006c20 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006bac:	4b18      	ldr	r3, [pc, #96]	; (8006c10 <checkAktifCalisma+0x70c>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f083 0301 	eor.w	r3, r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d032      	beq.n	8006c20 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006bba:	4b16      	ldr	r3, [pc, #88]	; (8006c14 <checkAktifCalisma+0x710>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	f083 0301 	eor.w	r3, r3, #1
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d02b      	beq.n	8006c20 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006bc8:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <checkAktifCalisma+0x714>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f083 0301 	eor.w	r3, r3, #1
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d024      	beq.n	8006c20 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006bd6:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <checkAktifCalisma+0x718>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	f083 0301 	eor.w	r3, r3, #1
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01d      	beq.n	8006c20 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006be4:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <checkAktifCalisma+0x704>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	e01c      	b.n	8006c26 <checkAktifCalisma+0x722>
 8006bec:	40010c00 	.word	0x40010c00
 8006bf0:	20000c56 	.word	0x20000c56
 8006bf4:	20000c48 	.word	0x20000c48
 8006bf8:	20000c8b 	.word	0x20000c8b
 8006bfc:	20000c8c 	.word	0x20000c8c
 8006c00:	40011000 	.word	0x40011000
 8006c04:	20000c49 	.word	0x20000c49
 8006c08:	20000c6f 	.word	0x20000c6f
 8006c0c:	20000c6e 	.word	0x20000c6e
 8006c10:	20000c72 	.word	0x20000c72
 8006c14:	20000c71 	.word	0x20000c71
 8006c18:	20000c70 	.word	0x20000c70
 8006c1c:	20000c74 	.word	0x20000c74
		} else {
			devmotoryukaricalisiyor=0;
 8006c20:	4b64      	ldr	r3, [pc, #400]	; (8006db4 <checkAktifCalisma+0x8b0>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006c26:	4b63      	ldr	r3, [pc, #396]	; (8006db4 <checkAktifCalisma+0x8b0>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d007      	beq.n	8006c3e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006c2e:	2201      	movs	r2, #1
 8006c30:	2120      	movs	r1, #32
 8006c32:	4861      	ldr	r0, [pc, #388]	; (8006db8 <checkAktifCalisma+0x8b4>)
 8006c34:	f003 f823 	bl	8009c7e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006c38:	4b60      	ldr	r3, [pc, #384]	; (8006dbc <checkAktifCalisma+0x8b8>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006c3e:	4b5f      	ldr	r3, [pc, #380]	; (8006dbc <checkAktifCalisma+0x8b8>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d025      	beq.n	8006c92 <checkAktifCalisma+0x78e>
 8006c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c4a:	485d      	ldr	r0, [pc, #372]	; (8006dc0 <checkAktifCalisma+0x8bc>)
 8006c4c:	f003 f800 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d007      	beq.n	8006c66 <checkAktifCalisma+0x762>
 8006c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c5a:	4857      	ldr	r0, [pc, #348]	; (8006db8 <checkAktifCalisma+0x8b4>)
 8006c5c:	f002 fff8 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d115      	bne.n	8006c92 <checkAktifCalisma+0x78e>
 8006c66:	4b57      	ldr	r3, [pc, #348]	; (8006dc4 <checkAktifCalisma+0x8c0>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d011      	beq.n	8006c92 <checkAktifCalisma+0x78e>
 8006c6e:	4b56      	ldr	r3, [pc, #344]	; (8006dc8 <checkAktifCalisma+0x8c4>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00d      	beq.n	8006c92 <checkAktifCalisma+0x78e>
 8006c76:	4b55      	ldr	r3, [pc, #340]	; (8006dcc <checkAktifCalisma+0x8c8>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f083 0301 	eor.w	r3, r3, #1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d006      	beq.n	8006c92 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006c84:	4b52      	ldr	r3, [pc, #328]	; (8006dd0 <checkAktifCalisma+0x8cc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a52      	ldr	r2, [pc, #328]	; (8006dd4 <checkAktifCalisma+0x8d0>)
 8006c8a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006c8c:	4b4f      	ldr	r3, [pc, #316]	; (8006dcc <checkAktifCalisma+0x8c8>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006c92:	4b4f      	ldr	r3, [pc, #316]	; (8006dd0 <checkAktifCalisma+0x8cc>)
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b4f      	ldr	r3, [pc, #316]	; (8006dd4 <checkAktifCalisma+0x8d0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	4a4e      	ldr	r2, [pc, #312]	; (8006dd8 <checkAktifCalisma+0x8d4>)
 8006c9e:	7812      	ldrb	r2, [r2, #0]
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d303      	bcc.n	8006cac <checkAktifCalisma+0x7a8>
 8006ca4:	4b49      	ldr	r3, [pc, #292]	; (8006dcc <checkAktifCalisma+0x8c8>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10d      	bne.n	8006cc8 <checkAktifCalisma+0x7c4>
 8006cac:	4b45      	ldr	r3, [pc, #276]	; (8006dc4 <checkAktifCalisma+0x8c0>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f083 0301 	eor.w	r3, r3, #1
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <checkAktifCalisma+0x7c4>
 8006cba:	4b43      	ldr	r3, [pc, #268]	; (8006dc8 <checkAktifCalisma+0x8c4>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f083 0301 	eor.w	r3, r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2120      	movs	r1, #32
 8006ccc:	483a      	ldr	r0, [pc, #232]	; (8006db8 <checkAktifCalisma+0x8b4>)
 8006cce:	f002 ffd6 	bl	8009c7e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006cd2:	4b3a      	ldr	r3, [pc, #232]	; (8006dbc <checkAktifCalisma+0x8b8>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006cd8:	4b3c      	ldr	r3, [pc, #240]	; (8006dcc <checkAktifCalisma+0x8c8>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006cde:	4b3f      	ldr	r3, [pc, #252]	; (8006ddc <checkAktifCalisma+0x8d8>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f040 8088 	bne.w	8006df8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006ce8:	4b3d      	ldr	r3, [pc, #244]	; (8006de0 <checkAktifCalisma+0x8dc>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d003      	beq.n	8006cf8 <checkAktifCalisma+0x7f4>
 8006cf0:	4b3b      	ldr	r3, [pc, #236]	; (8006de0 <checkAktifCalisma+0x8dc>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d17f      	bne.n	8006df8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006cf8:	4b32      	ldr	r3, [pc, #200]	; (8006dc4 <checkAktifCalisma+0x8c0>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d07b      	beq.n	8006df8 <checkAktifCalisma+0x8f4>
 8006d00:	4b31      	ldr	r3, [pc, #196]	; (8006dc8 <checkAktifCalisma+0x8c4>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d077      	beq.n	8006df8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006d08:	2140      	movs	r1, #64	; 0x40
 8006d0a:	482b      	ldr	r0, [pc, #172]	; (8006db8 <checkAktifCalisma+0x8b4>)
 8006d0c:	f002 ffa0 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d170      	bne.n	8006df8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d1a:	4827      	ldr	r0, [pc, #156]	; (8006db8 <checkAktifCalisma+0x8b4>)
 8006d1c:	f002 ff98 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <checkAktifCalisma+0x82a>
 8006d26:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <checkAktifCalisma+0x8e0>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d164      	bne.n	8006df8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d32:	4823      	ldr	r0, [pc, #140]	; (8006dc0 <checkAktifCalisma+0x8bc>)
 8006d34:	f002 ff8c 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d10f      	bne.n	8006d5e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d42:	481f      	ldr	r0, [pc, #124]	; (8006dc0 <checkAktifCalisma+0x8bc>)
 8006d44:	f002 ff84 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d107      	bne.n	8006d5e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006d4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d52:	481b      	ldr	r0, [pc, #108]	; (8006dc0 <checkAktifCalisma+0x8bc>)
 8006d54:	f002 ff7c 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d003      	beq.n	8006d66 <checkAktifCalisma+0x862>
 8006d5e:	4b22      	ldr	r3, [pc, #136]	; (8006de8 <checkAktifCalisma+0x8e4>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d048      	beq.n	8006df8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006d66:	4b21      	ldr	r3, [pc, #132]	; (8006dec <checkAktifCalisma+0x8e8>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f083 0301 	eor.w	r3, r3, #1
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d041      	beq.n	8006df8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <checkAktifCalisma+0x8ec>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f083 0301 	eor.w	r3, r3, #1
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d03a      	beq.n	8006df8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <checkAktifCalisma+0x8f0>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	f083 0301 	eor.w	r3, r3, #1
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d033      	beq.n	8006df8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006d90:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <checkAktifCalisma+0x8b8>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f083 0301 	eor.w	r3, r3, #1
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d02c      	beq.n	8006df8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <checkAktifCalisma+0x8b0>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	f083 0301 	eor.w	r3, r3, #1
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d025      	beq.n	8006df8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006dac:	4b0e      	ldr	r3, [pc, #56]	; (8006de8 <checkAktifCalisma+0x8e4>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	e024      	b.n	8006dfe <checkAktifCalisma+0x8fa>
 8006db4:	20000c6f 	.word	0x20000c6f
 8006db8:	40011000 	.word	0x40011000
 8006dbc:	20000c73 	.word	0x20000c73
 8006dc0:	40010c00 	.word	0x40010c00
 8006dc4:	20000c8b 	.word	0x20000c8b
 8006dc8:	20000c8c 	.word	0x20000c8c
 8006dcc:	20000c6b 	.word	0x20000c6b
 8006dd0:	20000bc4 	.word	0x20000bc4
 8006dd4:	20000bd0 	.word	0x20000bd0
 8006dd8:	20000c4f 	.word	0x20000c4f
 8006ddc:	20000c56 	.word	0x20000c56
 8006de0:	20000c48 	.word	0x20000c48
 8006de4:	20000c4a 	.word	0x20000c4a
 8006de8:	20000c70 	.word	0x20000c70
 8006dec:	20000c6e 	.word	0x20000c6e
 8006df0:	20000c72 	.word	0x20000c72
 8006df4:	20000c71 	.word	0x20000c71
		} else {
			devmotorasagicalisiyor=0;
 8006df8:	4b96      	ldr	r3, [pc, #600]	; (8007054 <checkAktifCalisma+0xb50>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006dfe:	4b95      	ldr	r3, [pc, #596]	; (8007054 <checkAktifCalisma+0xb50>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006e06:	2201      	movs	r2, #1
 8006e08:	2110      	movs	r1, #16
 8006e0a:	4893      	ldr	r0, [pc, #588]	; (8007058 <checkAktifCalisma+0xb54>)
 8006e0c:	f002 ff37 	bl	8009c7e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006e10:	4b92      	ldr	r3, [pc, #584]	; (800705c <checkAktifCalisma+0xb58>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006e16:	4b91      	ldr	r3, [pc, #580]	; (800705c <checkAktifCalisma+0xb58>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d024      	beq.n	8006e68 <checkAktifCalisma+0x964>
 8006e1e:	2140      	movs	r1, #64	; 0x40
 8006e20:	488d      	ldr	r0, [pc, #564]	; (8007058 <checkAktifCalisma+0xb54>)
 8006e22:	f002 ff15 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d007      	beq.n	8006e3c <checkAktifCalisma+0x938>
 8006e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e30:	4889      	ldr	r0, [pc, #548]	; (8007058 <checkAktifCalisma+0xb54>)
 8006e32:	f002 ff0d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d115      	bne.n	8006e68 <checkAktifCalisma+0x964>
 8006e3c:	4b88      	ldr	r3, [pc, #544]	; (8007060 <checkAktifCalisma+0xb5c>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d011      	beq.n	8006e68 <checkAktifCalisma+0x964>
 8006e44:	4b87      	ldr	r3, [pc, #540]	; (8007064 <checkAktifCalisma+0xb60>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00d      	beq.n	8006e68 <checkAktifCalisma+0x964>
 8006e4c:	4b86      	ldr	r3, [pc, #536]	; (8007068 <checkAktifCalisma+0xb64>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f083 0301 	eor.w	r3, r3, #1
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d006      	beq.n	8006e68 <checkAktifCalisma+0x964>
			timer2=millis;
 8006e5a:	4b84      	ldr	r3, [pc, #528]	; (800706c <checkAktifCalisma+0xb68>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a84      	ldr	r2, [pc, #528]	; (8007070 <checkAktifCalisma+0xb6c>)
 8006e60:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006e62:	4b81      	ldr	r3, [pc, #516]	; (8007068 <checkAktifCalisma+0xb64>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006e68:	4b80      	ldr	r3, [pc, #512]	; (800706c <checkAktifCalisma+0xb68>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	4b80      	ldr	r3, [pc, #512]	; (8007070 <checkAktifCalisma+0xb6c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	4a80      	ldr	r2, [pc, #512]	; (8007074 <checkAktifCalisma+0xb70>)
 8006e74:	7812      	ldrb	r2, [r2, #0]
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d303      	bcc.n	8006e82 <checkAktifCalisma+0x97e>
 8006e7a:	4b7b      	ldr	r3, [pc, #492]	; (8007068 <checkAktifCalisma+0xb64>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10d      	bne.n	8006e9e <checkAktifCalisma+0x99a>
 8006e82:	4b77      	ldr	r3, [pc, #476]	; (8007060 <checkAktifCalisma+0xb5c>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	f083 0301 	eor.w	r3, r3, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <checkAktifCalisma+0x99a>
 8006e90:	4b74      	ldr	r3, [pc, #464]	; (8007064 <checkAktifCalisma+0xb60>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f083 0301 	eor.w	r3, r3, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2110      	movs	r1, #16
 8006ea2:	486d      	ldr	r0, [pc, #436]	; (8007058 <checkAktifCalisma+0xb54>)
 8006ea4:	f002 feeb 	bl	8009c7e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006ea8:	4b6c      	ldr	r3, [pc, #432]	; (800705c <checkAktifCalisma+0xb58>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006eae:	4b6e      	ldr	r3, [pc, #440]	; (8007068 <checkAktifCalisma+0xb64>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006eb8:	486f      	ldr	r0, [pc, #444]	; (8007078 <checkAktifCalisma+0xb74>)
 8006eba:	f002 fec9 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d120      	bne.n	8006f06 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ec8:	486b      	ldr	r0, [pc, #428]	; (8007078 <checkAktifCalisma+0xb74>)
 8006eca:	f002 fec1 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d118      	bne.n	8006f06 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006ed4:	2104      	movs	r1, #4
 8006ed6:	4868      	ldr	r0, [pc, #416]	; (8007078 <checkAktifCalisma+0xb74>)
 8006ed8:	f002 feba 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d111      	bne.n	8006f06 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006ee2:	2102      	movs	r1, #2
 8006ee4:	4864      	ldr	r0, [pc, #400]	; (8007078 <checkAktifCalisma+0xb74>)
 8006ee6:	f002 feb3 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	4861      	ldr	r0, [pc, #388]	; (8007078 <checkAktifCalisma+0xb74>)
 8006ef4:	f002 feac 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d103      	bne.n	8006f06 <checkAktifCalisma+0xa02>
			makineStop=1;
 8006efe:	4b5f      	ldr	r3, [pc, #380]	; (800707c <checkAktifCalisma+0xb78>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	e002      	b.n	8006f0c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006f06:	4b5d      	ldr	r3, [pc, #372]	; (800707c <checkAktifCalisma+0xb78>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f0c:	4b5c      	ldr	r3, [pc, #368]	; (8007080 <checkAktifCalisma+0xb7c>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d144      	bne.n	8006f9e <checkAktifCalisma+0xa9a>
 8006f14:	4b5b      	ldr	r3, [pc, #364]	; (8007084 <checkAktifCalisma+0xb80>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d003      	beq.n	8006f24 <checkAktifCalisma+0xa20>
 8006f1c:	4b59      	ldr	r3, [pc, #356]	; (8007084 <checkAktifCalisma+0xb80>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d13c      	bne.n	8006f9e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f24:	2180      	movs	r1, #128	; 0x80
 8006f26:	484c      	ldr	r0, [pc, #304]	; (8007058 <checkAktifCalisma+0xb54>)
 8006f28:	f002 fe92 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d103      	bne.n	8006f3a <checkAktifCalisma+0xa36>
 8006f32:	4b55      	ldr	r3, [pc, #340]	; (8007088 <checkAktifCalisma+0xb84>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <checkAktifCalisma+0xa4e>
 8006f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f3e:	484e      	ldr	r0, [pc, #312]	; (8007078 <checkAktifCalisma+0xb74>)
 8006f40:	f002 fe86 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d129      	bne.n	8006f9e <checkAktifCalisma+0xa9a>
 8006f4a:	4b4f      	ldr	r3, [pc, #316]	; (8007088 <checkAktifCalisma+0xb84>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d125      	bne.n	8006f9e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006f52:	2104      	movs	r1, #4
 8006f54:	4840      	ldr	r0, [pc, #256]	; (8007058 <checkAktifCalisma+0xb54>)
 8006f56:	f002 fe7b 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d003      	beq.n	8006f68 <checkAktifCalisma+0xa64>
 8006f60:	4b4a      	ldr	r3, [pc, #296]	; (800708c <checkAktifCalisma+0xb88>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d11a      	bne.n	8006f9e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f68:	2102      	movs	r1, #2
 8006f6a:	483b      	ldr	r0, [pc, #236]	; (8007058 <checkAktifCalisma+0xb54>)
 8006f6c:	f002 fe70 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d113      	bne.n	8006f9e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006f76:	4b46      	ldr	r3, [pc, #280]	; (8007090 <checkAktifCalisma+0xb8c>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	f083 0301 	eor.w	r3, r3, #1
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00c      	beq.n	8006f9e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006f84:	4b3d      	ldr	r3, [pc, #244]	; (800707c <checkAktifCalisma+0xb78>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d008      	beq.n	8006f9e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006f8c:	4b41      	ldr	r3, [pc, #260]	; (8007094 <checkAktifCalisma+0xb90>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006f92:	4b36      	ldr	r3, [pc, #216]	; (800706c <checkAktifCalisma+0xb68>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a40      	ldr	r2, [pc, #256]	; (8007098 <checkAktifCalisma+0xb94>)
 8006f98:	6013      	str	r3, [r2, #0]
			bekle();
 8006f9a:	f7ff f87d 	bl	8006098 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006f9e:	4b33      	ldr	r3, [pc, #204]	; (800706c <checkAktifCalisma+0xb68>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b3d      	ldr	r3, [pc, #244]	; (8007098 <checkAktifCalisma+0xb94>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	4a3c      	ldr	r2, [pc, #240]	; (800709c <checkAktifCalisma+0xb98>)
 8006faa:	7812      	ldrb	r2, [r2, #0]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d211      	bcs.n	8006fd4 <checkAktifCalisma+0xad0>
 8006fb0:	2104      	movs	r1, #4
 8006fb2:	4829      	ldr	r0, [pc, #164]	; (8007058 <checkAktifCalisma+0xb54>)
 8006fb4:	f002 fe4c 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <checkAktifCalisma+0xad0>
 8006fbe:	4b33      	ldr	r3, [pc, #204]	; (800708c <checkAktifCalisma+0xb88>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d006      	beq.n	8006fd4 <checkAktifCalisma+0xad0>
 8006fc6:	4b2d      	ldr	r3, [pc, #180]	; (800707c <checkAktifCalisma+0xb78>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	f083 0301 	eor.w	r3, r3, #1
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006fd4:	4b2f      	ldr	r3, [pc, #188]	; (8007094 <checkAktifCalisma+0xb90>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006fda:	4b29      	ldr	r3, [pc, #164]	; (8007080 <checkAktifCalisma+0xb7c>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d160      	bne.n	80070a4 <checkAktifCalisma+0xba0>
 8006fe2:	4b28      	ldr	r3, [pc, #160]	; (8007084 <checkAktifCalisma+0xb80>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d003      	beq.n	8006ff2 <checkAktifCalisma+0xaee>
 8006fea:	4b26      	ldr	r3, [pc, #152]	; (8007084 <checkAktifCalisma+0xb80>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d158      	bne.n	80070a4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006ff2:	2104      	movs	r1, #4
 8006ff4:	4818      	ldr	r0, [pc, #96]	; (8007058 <checkAktifCalisma+0xb54>)
 8006ff6:	f002 fe2b 	bl	8009c50 <HAL_GPIO_ReadPin>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d003      	beq.n	8007008 <checkAktifCalisma+0xb04>
 8007000:	4b22      	ldr	r3, [pc, #136]	; (800708c <checkAktifCalisma+0xb88>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d14d      	bne.n	80070a4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007008:	2102      	movs	r1, #2
 800700a:	4813      	ldr	r0, [pc, #76]	; (8007058 <checkAktifCalisma+0xb54>)
 800700c:	f002 fe20 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d146      	bne.n	80070a4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007016:	2180      	movs	r1, #128	; 0x80
 8007018:	480f      	ldr	r0, [pc, #60]	; (8007058 <checkAktifCalisma+0xb54>)
 800701a:	f002 fe19 	bl	8009c50 <HAL_GPIO_ReadPin>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <checkAktifCalisma+0xb28>
 8007024:	4b18      	ldr	r3, [pc, #96]	; (8007088 <checkAktifCalisma+0xb84>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <checkAktifCalisma+0xb40>
 800702c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007030:	4811      	ldr	r0, [pc, #68]	; (8007078 <checkAktifCalisma+0xb74>)
 8007032:	f002 fe0d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d133      	bne.n	80070a4 <checkAktifCalisma+0xba0>
 800703c:	4b12      	ldr	r3, [pc, #72]	; (8007088 <checkAktifCalisma+0xb84>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d12f      	bne.n	80070a4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8007044:	4b0d      	ldr	r3, [pc, #52]	; (800707c <checkAktifCalisma+0xb78>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d02b      	beq.n	80070a4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800704c:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <checkAktifCalisma+0xb9c>)
 800704e:	2201      	movs	r2, #1
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e02a      	b.n	80070aa <checkAktifCalisma+0xba6>
 8007054:	20000c70 	.word	0x20000c70
 8007058:	40011000 	.word	0x40011000
 800705c:	20000c74 	.word	0x20000c74
 8007060:	20000c8b 	.word	0x20000c8b
 8007064:	20000c8c 	.word	0x20000c8c
 8007068:	20000c6c 	.word	0x20000c6c
 800706c:	20000bc4 	.word	0x20000bc4
 8007070:	20000bd0 	.word	0x20000bd0
 8007074:	20000c4f 	.word	0x20000c4f
 8007078:	40010c00 	.word	0x40010c00
 800707c:	20000c7b 	.word	0x20000c7b
 8007080:	20000c42 	.word	0x20000c42
 8007084:	20000c41 	.word	0x20000c41
 8007088:	20000c45 	.word	0x20000c45
 800708c:	20000c3f 	.word	0x20000c3f
 8007090:	20000c68 	.word	0x20000c68
 8007094:	20000c7c 	.word	0x20000c7c
 8007098:	20000bc8 	.word	0x20000bc8
 800709c:	20000c52 	.word	0x20000c52
 80070a0:	20000c7d 	.word	0x20000c7d
		} else {
			kapi1butonkontrol=0;
 80070a4:	4b8b      	ldr	r3, [pc, #556]	; (80072d4 <checkAktifCalisma+0xdd0>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80070aa:	4b8b      	ldr	r3, [pc, #556]	; (80072d8 <checkAktifCalisma+0xdd4>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d121      	bne.n	80070f6 <checkAktifCalisma+0xbf2>
 80070b2:	4b8a      	ldr	r3, [pc, #552]	; (80072dc <checkAktifCalisma+0xdd8>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d003      	beq.n	80070c2 <checkAktifCalisma+0xbbe>
 80070ba:	4b88      	ldr	r3, [pc, #544]	; (80072dc <checkAktifCalisma+0xdd8>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d119      	bne.n	80070f6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80070c2:	2104      	movs	r1, #4
 80070c4:	4886      	ldr	r0, [pc, #536]	; (80072e0 <checkAktifCalisma+0xddc>)
 80070c6:	f002 fdc3 	bl	8009c50 <HAL_GPIO_ReadPin>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d003      	beq.n	80070d8 <checkAktifCalisma+0xbd4>
 80070d0:	4b84      	ldr	r3, [pc, #528]	; (80072e4 <checkAktifCalisma+0xde0>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10e      	bne.n	80070f6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80070d8:	2102      	movs	r1, #2
 80070da:	4881      	ldr	r0, [pc, #516]	; (80072e0 <checkAktifCalisma+0xddc>)
 80070dc:	f002 fdb8 	bl	8009c50 <HAL_GPIO_ReadPin>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d107      	bne.n	80070f6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80070e6:	4b80      	ldr	r3, [pc, #512]	; (80072e8 <checkAktifCalisma+0xde4>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80070ee:	4b7f      	ldr	r3, [pc, #508]	; (80072ec <checkAktifCalisma+0xde8>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	701a      	strb	r2, [r3, #0]
 80070f4:	e002      	b.n	80070fc <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80070f6:	4b7d      	ldr	r3, [pc, #500]	; (80072ec <checkAktifCalisma+0xde8>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80070fc:	4b75      	ldr	r3, [pc, #468]	; (80072d4 <checkAktifCalisma+0xdd0>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d107      	bne.n	8007114 <checkAktifCalisma+0xc10>
 8007104:	4b79      	ldr	r3, [pc, #484]	; (80072ec <checkAktifCalisma+0xde8>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d103      	bne.n	8007114 <checkAktifCalisma+0xc10>
 800710c:	4b78      	ldr	r3, [pc, #480]	; (80072f0 <checkAktifCalisma+0xdec>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007114:	2201      	movs	r2, #1
 8007116:	2180      	movs	r1, #128	; 0x80
 8007118:	4876      	ldr	r0, [pc, #472]	; (80072f4 <checkAktifCalisma+0xdf0>)
 800711a:	f002 fdb0 	bl	8009c7e <HAL_GPIO_WritePin>
 800711e:	e004      	b.n	800712a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007120:	2200      	movs	r2, #0
 8007122:	2180      	movs	r1, #128	; 0x80
 8007124:	4873      	ldr	r0, [pc, #460]	; (80072f4 <checkAktifCalisma+0xdf0>)
 8007126:	f002 fdaa 	bl	8009c7e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800712a:	4b73      	ldr	r3, [pc, #460]	; (80072f8 <checkAktifCalisma+0xdf4>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d141      	bne.n	80071b6 <checkAktifCalisma+0xcb2>
 8007132:	4b6a      	ldr	r3, [pc, #424]	; (80072dc <checkAktifCalisma+0xdd8>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d003      	beq.n	8007142 <checkAktifCalisma+0xc3e>
 800713a:	4b68      	ldr	r3, [pc, #416]	; (80072dc <checkAktifCalisma+0xdd8>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b03      	cmp	r3, #3
 8007140:	d139      	bne.n	80071b6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007146:	4866      	ldr	r0, [pc, #408]	; (80072e0 <checkAktifCalisma+0xddc>)
 8007148:	f002 fd82 	bl	8009c50 <HAL_GPIO_ReadPin>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <checkAktifCalisma+0xc56>
 8007152:	4b6a      	ldr	r3, [pc, #424]	; (80072fc <checkAktifCalisma+0xdf8>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <checkAktifCalisma+0xc6e>
 800715a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800715e:	4868      	ldr	r0, [pc, #416]	; (8007300 <checkAktifCalisma+0xdfc>)
 8007160:	f002 fd76 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d125      	bne.n	80071b6 <checkAktifCalisma+0xcb2>
 800716a:	4b64      	ldr	r3, [pc, #400]	; (80072fc <checkAktifCalisma+0xdf8>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d121      	bne.n	80071b6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007172:	2102      	movs	r1, #2
 8007174:	485a      	ldr	r0, [pc, #360]	; (80072e0 <checkAktifCalisma+0xddc>)
 8007176:	f002 fd6b 	bl	8009c50 <HAL_GPIO_ReadPin>
 800717a:	4603      	mov	r3, r0
 800717c:	2b01      	cmp	r3, #1
 800717e:	d11a      	bne.n	80071b6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007180:	2104      	movs	r1, #4
 8007182:	4857      	ldr	r0, [pc, #348]	; (80072e0 <checkAktifCalisma+0xddc>)
 8007184:	f002 fd64 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d113      	bne.n	80071b6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800718e:	4b56      	ldr	r3, [pc, #344]	; (80072e8 <checkAktifCalisma+0xde4>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00f      	beq.n	80071b6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8007196:	4b5b      	ldr	r3, [pc, #364]	; (8007304 <checkAktifCalisma+0xe00>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	f083 0301 	eor.w	r3, r3, #1
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80071a4:	4b58      	ldr	r3, [pc, #352]	; (8007308 <checkAktifCalisma+0xe04>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80071aa:	4b58      	ldr	r3, [pc, #352]	; (800730c <checkAktifCalisma+0xe08>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a58      	ldr	r2, [pc, #352]	; (8007310 <checkAktifCalisma+0xe0c>)
 80071b0:	6013      	str	r3, [r2, #0]
			bekle();
 80071b2:	f7fe ff71 	bl	8006098 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80071b6:	4b55      	ldr	r3, [pc, #340]	; (800730c <checkAktifCalisma+0xe08>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	4b55      	ldr	r3, [pc, #340]	; (8007310 <checkAktifCalisma+0xe0c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	4a54      	ldr	r2, [pc, #336]	; (8007314 <checkAktifCalisma+0xe10>)
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d20d      	bcs.n	80071e4 <checkAktifCalisma+0xce0>
 80071c8:	2102      	movs	r1, #2
 80071ca:	4845      	ldr	r0, [pc, #276]	; (80072e0 <checkAktifCalisma+0xddc>)
 80071cc:	f002 fd40 	bl	8009c50 <HAL_GPIO_ReadPin>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d006      	beq.n	80071e4 <checkAktifCalisma+0xce0>
 80071d6:	4b44      	ldr	r3, [pc, #272]	; (80072e8 <checkAktifCalisma+0xde4>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f083 0301 	eor.w	r3, r3, #1
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80071e4:	4b48      	ldr	r3, [pc, #288]	; (8007308 <checkAktifCalisma+0xe04>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80071ea:	4b43      	ldr	r3, [pc, #268]	; (80072f8 <checkAktifCalisma+0xdf4>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d135      	bne.n	800725e <checkAktifCalisma+0xd5a>
 80071f2:	4b3a      	ldr	r3, [pc, #232]	; (80072dc <checkAktifCalisma+0xdd8>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d003      	beq.n	8007202 <checkAktifCalisma+0xcfe>
 80071fa:	4b38      	ldr	r3, [pc, #224]	; (80072dc <checkAktifCalisma+0xdd8>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d12d      	bne.n	800725e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007206:	4836      	ldr	r0, [pc, #216]	; (80072e0 <checkAktifCalisma+0xddc>)
 8007208:	f002 fd22 	bl	8009c50 <HAL_GPIO_ReadPin>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <checkAktifCalisma+0xd16>
 8007212:	4b3a      	ldr	r3, [pc, #232]	; (80072fc <checkAktifCalisma+0xdf8>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00b      	beq.n	8007232 <checkAktifCalisma+0xd2e>
 800721a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800721e:	4838      	ldr	r0, [pc, #224]	; (8007300 <checkAktifCalisma+0xdfc>)
 8007220:	f002 fd16 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d119      	bne.n	800725e <checkAktifCalisma+0xd5a>
 800722a:	4b34      	ldr	r3, [pc, #208]	; (80072fc <checkAktifCalisma+0xdf8>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d115      	bne.n	800725e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007232:	2102      	movs	r1, #2
 8007234:	482a      	ldr	r0, [pc, #168]	; (80072e0 <checkAktifCalisma+0xddc>)
 8007236:	f002 fd0b 	bl	8009c50 <HAL_GPIO_ReadPin>
 800723a:	4603      	mov	r3, r0
 800723c:	2b01      	cmp	r3, #1
 800723e:	d10e      	bne.n	800725e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007240:	2104      	movs	r1, #4
 8007242:	4827      	ldr	r0, [pc, #156]	; (80072e0 <checkAktifCalisma+0xddc>)
 8007244:	f002 fd04 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d107      	bne.n	800725e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800724e:	4b26      	ldr	r3, [pc, #152]	; (80072e8 <checkAktifCalisma+0xde4>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8007256:	4b30      	ldr	r3, [pc, #192]	; (8007318 <checkAktifCalisma+0xe14>)
 8007258:	2201      	movs	r2, #1
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	e002      	b.n	8007264 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800725e:	4b2e      	ldr	r3, [pc, #184]	; (8007318 <checkAktifCalisma+0xe14>)
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007264:	4b24      	ldr	r3, [pc, #144]	; (80072f8 <checkAktifCalisma+0xdf4>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d11d      	bne.n	80072a8 <checkAktifCalisma+0xda4>
 800726c:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <checkAktifCalisma+0xdd8>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d003      	beq.n	800727c <checkAktifCalisma+0xd78>
 8007274:	4b19      	ldr	r3, [pc, #100]	; (80072dc <checkAktifCalisma+0xdd8>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b03      	cmp	r3, #3
 800727a:	d115      	bne.n	80072a8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800727c:	2102      	movs	r1, #2
 800727e:	4818      	ldr	r0, [pc, #96]	; (80072e0 <checkAktifCalisma+0xddc>)
 8007280:	f002 fce6 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007284:	4603      	mov	r3, r0
 8007286:	2b01      	cmp	r3, #1
 8007288:	d10e      	bne.n	80072a8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800728a:	2104      	movs	r1, #4
 800728c:	4814      	ldr	r0, [pc, #80]	; (80072e0 <checkAktifCalisma+0xddc>)
 800728e:	f002 fcdf 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d107      	bne.n	80072a8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <checkAktifCalisma+0xde4>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80072a0:	4b1e      	ldr	r3, [pc, #120]	; (800731c <checkAktifCalisma+0xe18>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	e002      	b.n	80072ae <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80072a8:	4b1c      	ldr	r3, [pc, #112]	; (800731c <checkAktifCalisma+0xe18>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80072ae:	4b1a      	ldr	r3, [pc, #104]	; (8007318 <checkAktifCalisma+0xe14>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d107      	bne.n	80072c6 <checkAktifCalisma+0xdc2>
 80072b6:	4b19      	ldr	r3, [pc, #100]	; (800731c <checkAktifCalisma+0xe18>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <checkAktifCalisma+0xdc2>
 80072be:	4b12      	ldr	r3, [pc, #72]	; (8007308 <checkAktifCalisma+0xe04>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d02c      	beq.n	8007320 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80072c6:	2201      	movs	r2, #1
 80072c8:	2140      	movs	r1, #64	; 0x40
 80072ca:	480a      	ldr	r0, [pc, #40]	; (80072f4 <checkAktifCalisma+0xdf0>)
 80072cc:	f002 fcd7 	bl	8009c7e <HAL_GPIO_WritePin>
 80072d0:	e02b      	b.n	800732a <checkAktifCalisma+0xe26>
 80072d2:	bf00      	nop
 80072d4:	20000c7d 	.word	0x20000c7d
 80072d8:	20000c42 	.word	0x20000c42
 80072dc:	20000c41 	.word	0x20000c41
 80072e0:	40011000 	.word	0x40011000
 80072e4:	20000c3f 	.word	0x20000c3f
 80072e8:	20000c7b 	.word	0x20000c7b
 80072ec:	20000c7e 	.word	0x20000c7e
 80072f0:	20000c7c 	.word	0x20000c7c
 80072f4:	40010800 	.word	0x40010800
 80072f8:	20000c43 	.word	0x20000c43
 80072fc:	20000c45 	.word	0x20000c45
 8007300:	40010c00 	.word	0x40010c00
 8007304:	20000c68 	.word	0x20000c68
 8007308:	20000c7f 	.word	0x20000c7f
 800730c:	20000bc4 	.word	0x20000bc4
 8007310:	20000bc8 	.word	0x20000bc8
 8007314:	20000c53 	.word	0x20000c53
 8007318:	20000c80 	.word	0x20000c80
 800731c:	20000c81 	.word	0x20000c81
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007320:	2200      	movs	r2, #0
 8007322:	2140      	movs	r1, #64	; 0x40
 8007324:	488d      	ldr	r0, [pc, #564]	; (800755c <checkAktifCalisma+0x1058>)
 8007326:	f002 fcaa 	bl	8009c7e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800732a:	4b8d      	ldr	r3, [pc, #564]	; (8007560 <checkAktifCalisma+0x105c>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <checkAktifCalisma+0xe36>
 8007332:	4b8b      	ldr	r3, [pc, #556]	; (8007560 <checkAktifCalisma+0x105c>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d115      	bne.n	8007366 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800733a:	2104      	movs	r1, #4
 800733c:	4889      	ldr	r0, [pc, #548]	; (8007564 <checkAktifCalisma+0x1060>)
 800733e:	f002 fc87 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007342:	4603      	mov	r3, r0
 8007344:	2b01      	cmp	r3, #1
 8007346:	d003      	beq.n	8007350 <checkAktifCalisma+0xe4c>
 8007348:	4b87      	ldr	r3, [pc, #540]	; (8007568 <checkAktifCalisma+0x1064>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007350:	2102      	movs	r1, #2
 8007352:	4884      	ldr	r0, [pc, #528]	; (8007564 <checkAktifCalisma+0x1060>)
 8007354:	f002 fc7c 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d103      	bne.n	8007366 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 800735e:	4b83      	ldr	r3, [pc, #524]	; (800756c <checkAktifCalisma+0x1068>)
 8007360:	2201      	movs	r2, #1
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e002      	b.n	800736c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8007366:	4b81      	ldr	r3, [pc, #516]	; (800756c <checkAktifCalisma+0x1068>)
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800736c:	4b7c      	ldr	r3, [pc, #496]	; (8007560 <checkAktifCalisma+0x105c>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d003      	beq.n	800737c <checkAktifCalisma+0xe78>
 8007374:	4b7a      	ldr	r3, [pc, #488]	; (8007560 <checkAktifCalisma+0x105c>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d111      	bne.n	80073a0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800737c:	2102      	movs	r1, #2
 800737e:	4879      	ldr	r0, [pc, #484]	; (8007564 <checkAktifCalisma+0x1060>)
 8007380:	f002 fc66 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007384:	4603      	mov	r3, r0
 8007386:	2b01      	cmp	r3, #1
 8007388:	d10a      	bne.n	80073a0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800738a:	2104      	movs	r1, #4
 800738c:	4875      	ldr	r0, [pc, #468]	; (8007564 <checkAktifCalisma+0x1060>)
 800738e:	f002 fc5f 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d103      	bne.n	80073a0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007398:	4b75      	ldr	r3, [pc, #468]	; (8007570 <checkAktifCalisma+0x106c>)
 800739a:	2201      	movs	r2, #1
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e002      	b.n	80073a6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80073a0:	4b73      	ldr	r3, [pc, #460]	; (8007570 <checkAktifCalisma+0x106c>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80073a6:	4b71      	ldr	r3, [pc, #452]	; (800756c <checkAktifCalisma+0x1068>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00f      	beq.n	80073ce <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80073ae:	4b71      	ldr	r3, [pc, #452]	; (8007574 <checkAktifCalisma+0x1070>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d10b      	bne.n	80073ce <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80073b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073ba:	486f      	ldr	r0, [pc, #444]	; (8007578 <checkAktifCalisma+0x1074>)
 80073bc:	f002 fc48 	bl	8009c50 <HAL_GPIO_ReadPin>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d103      	bne.n	80073ce <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80073c6:	4b6d      	ldr	r3, [pc, #436]	; (800757c <checkAktifCalisma+0x1078>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	e002      	b.n	80073d4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80073ce:	4b6b      	ldr	r3, [pc, #428]	; (800757c <checkAktifCalisma+0x1078>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80073d4:	4b66      	ldr	r3, [pc, #408]	; (8007570 <checkAktifCalisma+0x106c>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00f      	beq.n	80073fc <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80073dc:	4b65      	ldr	r3, [pc, #404]	; (8007574 <checkAktifCalisma+0x1070>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d10b      	bne.n	80073fc <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80073e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073e8:	4863      	ldr	r0, [pc, #396]	; (8007578 <checkAktifCalisma+0x1074>)
 80073ea:	f002 fc31 	bl	8009c50 <HAL_GPIO_ReadPin>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d103      	bne.n	80073fc <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80073f4:	4b62      	ldr	r3, [pc, #392]	; (8007580 <checkAktifCalisma+0x107c>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e002      	b.n	8007402 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 80073fc:	4b60      	ldr	r3, [pc, #384]	; (8007580 <checkAktifCalisma+0x107c>)
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007402:	4b60      	ldr	r3, [pc, #384]	; (8007584 <checkAktifCalisma+0x1080>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d137      	bne.n	800747a <checkAktifCalisma+0xf76>
 800740a:	4b5f      	ldr	r3, [pc, #380]	; (8007588 <checkAktifCalisma+0x1084>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d003      	beq.n	800741a <checkAktifCalisma+0xf16>
 8007412:	4b5d      	ldr	r3, [pc, #372]	; (8007588 <checkAktifCalisma+0x1084>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d12f      	bne.n	800747a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800741a:	4b54      	ldr	r3, [pc, #336]	; (800756c <checkAktifCalisma+0x1068>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d103      	bne.n	800742a <checkAktifCalisma+0xf26>
 8007422:	4b53      	ldr	r3, [pc, #332]	; (8007570 <checkAktifCalisma+0x106c>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d027      	beq.n	800747a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800742a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800742e:	484d      	ldr	r0, [pc, #308]	; (8007564 <checkAktifCalisma+0x1060>)
 8007430:	f002 fc0e 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d103      	bne.n	8007442 <checkAktifCalisma+0xf3e>
 800743a:	4b4e      	ldr	r3, [pc, #312]	; (8007574 <checkAktifCalisma+0x1070>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007442:	4b4e      	ldr	r3, [pc, #312]	; (800757c <checkAktifCalisma+0x1078>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <checkAktifCalisma+0xf4e>
 800744a:	4b4d      	ldr	r3, [pc, #308]	; (8007580 <checkAktifCalisma+0x107c>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d013      	beq.n	800747a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8007452:	4b4e      	ldr	r3, [pc, #312]	; (800758c <checkAktifCalisma+0x1088>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00f      	beq.n	800747a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800745a:	4b4d      	ldr	r3, [pc, #308]	; (8007590 <checkAktifCalisma+0x108c>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	f083 0301 	eor.w	r3, r3, #1
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d008      	beq.n	800747a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007468:	4b4a      	ldr	r3, [pc, #296]	; (8007594 <checkAktifCalisma+0x1090>)
 800746a:	2201      	movs	r2, #1
 800746c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800746e:	4b4a      	ldr	r3, [pc, #296]	; (8007598 <checkAktifCalisma+0x1094>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a4a      	ldr	r2, [pc, #296]	; (800759c <checkAktifCalisma+0x1098>)
 8007474:	6013      	str	r3, [r2, #0]
			bekle();
 8007476:	f7fe fe0f 	bl	8006098 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800747a:	4b47      	ldr	r3, [pc, #284]	; (8007598 <checkAktifCalisma+0x1094>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4b47      	ldr	r3, [pc, #284]	; (800759c <checkAktifCalisma+0x1098>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	4a46      	ldr	r2, [pc, #280]	; (80075a0 <checkAktifCalisma+0x109c>)
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	4293      	cmp	r3, r2
 800748a:	d214      	bcs.n	80074b6 <checkAktifCalisma+0xfb2>
 800748c:	4b37      	ldr	r3, [pc, #220]	; (800756c <checkAktifCalisma+0x1068>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f083 0301 	eor.w	r3, r3, #1
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d006      	beq.n	80074a8 <checkAktifCalisma+0xfa4>
 800749a:	4b35      	ldr	r3, [pc, #212]	; (8007570 <checkAktifCalisma+0x106c>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f083 0301 	eor.w	r3, r3, #1
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <checkAktifCalisma+0xfb2>
 80074a8:	4b38      	ldr	r3, [pc, #224]	; (800758c <checkAktifCalisma+0x1088>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	f083 0301 	eor.w	r3, r3, #1
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80074b6:	4b37      	ldr	r3, [pc, #220]	; (8007594 <checkAktifCalisma+0x1090>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80074bc:	4b31      	ldr	r3, [pc, #196]	; (8007584 <checkAktifCalisma+0x1080>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d12b      	bne.n	800751c <checkAktifCalisma+0x1018>
 80074c4:	4b30      	ldr	r3, [pc, #192]	; (8007588 <checkAktifCalisma+0x1084>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d003      	beq.n	80074d4 <checkAktifCalisma+0xfd0>
 80074cc:	4b2e      	ldr	r3, [pc, #184]	; (8007588 <checkAktifCalisma+0x1084>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d123      	bne.n	800751c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80074d4:	4b25      	ldr	r3, [pc, #148]	; (800756c <checkAktifCalisma+0x1068>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d103      	bne.n	80074e4 <checkAktifCalisma+0xfe0>
 80074dc:	4b24      	ldr	r3, [pc, #144]	; (8007570 <checkAktifCalisma+0x106c>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01b      	beq.n	800751c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80074e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074e8:	481e      	ldr	r0, [pc, #120]	; (8007564 <checkAktifCalisma+0x1060>)
 80074ea:	f002 fbb1 	bl	8009c50 <HAL_GPIO_ReadPin>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d103      	bne.n	80074fc <checkAktifCalisma+0xff8>
 80074f4:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <checkAktifCalisma+0x1070>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d007      	beq.n	800750c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80074fc:	4b1f      	ldr	r3, [pc, #124]	; (800757c <checkAktifCalisma+0x1078>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d103      	bne.n	800750c <checkAktifCalisma+0x1008>
 8007504:	4b1e      	ldr	r3, [pc, #120]	; (8007580 <checkAktifCalisma+0x107c>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800750c:	4b1f      	ldr	r3, [pc, #124]	; (800758c <checkAktifCalisma+0x1088>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007514:	4b23      	ldr	r3, [pc, #140]	; (80075a4 <checkAktifCalisma+0x10a0>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e002      	b.n	8007522 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 800751c:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <checkAktifCalisma+0x10a0>)
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007522:	4b18      	ldr	r3, [pc, #96]	; (8007584 <checkAktifCalisma+0x1080>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d140      	bne.n	80075ac <checkAktifCalisma+0x10a8>
 800752a:	4b17      	ldr	r3, [pc, #92]	; (8007588 <checkAktifCalisma+0x1084>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d003      	beq.n	800753a <checkAktifCalisma+0x1036>
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <checkAktifCalisma+0x1084>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b03      	cmp	r3, #3
 8007538:	d138      	bne.n	80075ac <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <checkAktifCalisma+0x1068>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d103      	bne.n	800754a <checkAktifCalisma+0x1046>
 8007542:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <checkAktifCalisma+0x106c>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d030      	beq.n	80075ac <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800754a:	4b10      	ldr	r3, [pc, #64]	; (800758c <checkAktifCalisma+0x1088>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02c      	beq.n	80075ac <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8007552:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <checkAktifCalisma+0x10a4>)
 8007554:	2201      	movs	r2, #1
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e02b      	b.n	80075b2 <checkAktifCalisma+0x10ae>
 800755a:	bf00      	nop
 800755c:	40010800 	.word	0x40010800
 8007560:	20000c46 	.word	0x20000c46
 8007564:	40011000 	.word	0x40011000
 8007568:	20000c3f 	.word	0x20000c3f
 800756c:	20000c85 	.word	0x20000c85
 8007570:	20000c86 	.word	0x20000c86
 8007574:	20000c45 	.word	0x20000c45
 8007578:	40010c00 	.word	0x40010c00
 800757c:	20000c95 	.word	0x20000c95
 8007580:	20000c96 	.word	0x20000c96
 8007584:	20000c44 	.word	0x20000c44
 8007588:	20000c41 	.word	0x20000c41
 800758c:	20000c7b 	.word	0x20000c7b
 8007590:	20000c68 	.word	0x20000c68
 8007594:	20000c82 	.word	0x20000c82
 8007598:	20000bc4 	.word	0x20000bc4
 800759c:	20000bc8 	.word	0x20000bc8
 80075a0:	20000c54 	.word	0x20000c54
 80075a4:	20000c83 	.word	0x20000c83
 80075a8:	20000c84 	.word	0x20000c84
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80075ac:	4b89      	ldr	r3, [pc, #548]	; (80077d4 <checkAktifCalisma+0x12d0>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80075b2:	4b89      	ldr	r3, [pc, #548]	; (80077d8 <checkAktifCalisma+0x12d4>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d107      	bne.n	80075ca <checkAktifCalisma+0x10c6>
 80075ba:	4b88      	ldr	r3, [pc, #544]	; (80077dc <checkAktifCalisma+0x12d8>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d103      	bne.n	80075ca <checkAktifCalisma+0x10c6>
 80075c2:	4b84      	ldr	r3, [pc, #528]	; (80077d4 <checkAktifCalisma+0x12d0>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80075ca:	2201      	movs	r2, #1
 80075cc:	2120      	movs	r1, #32
 80075ce:	4884      	ldr	r0, [pc, #528]	; (80077e0 <checkAktifCalisma+0x12dc>)
 80075d0:	f002 fb55 	bl	8009c7e <HAL_GPIO_WritePin>
 80075d4:	e004      	b.n	80075e0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80075d6:	2200      	movs	r2, #0
 80075d8:	2120      	movs	r1, #32
 80075da:	4881      	ldr	r0, [pc, #516]	; (80077e0 <checkAktifCalisma+0x12dc>)
 80075dc:	f002 fb4f 	bl	8009c7e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80075e0:	4b80      	ldr	r3, [pc, #512]	; (80077e4 <checkAktifCalisma+0x12e0>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00e      	beq.n	8007606 <checkAktifCalisma+0x1102>
 80075e8:	2102      	movs	r1, #2
 80075ea:	487f      	ldr	r0, [pc, #508]	; (80077e8 <checkAktifCalisma+0x12e4>)
 80075ec:	f002 fb30 	bl	8009c50 <HAL_GPIO_ReadPin>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d107      	bne.n	8007606 <checkAktifCalisma+0x1102>
 80075f6:	4b7d      	ldr	r3, [pc, #500]	; (80077ec <checkAktifCalisma+0x12e8>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <checkAktifCalisma+0x1102>
 80075fe:	4b7c      	ldr	r3, [pc, #496]	; (80077f0 <checkAktifCalisma+0x12ec>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d112      	bne.n	800762c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8007606:	4b7b      	ldr	r3, [pc, #492]	; (80077f4 <checkAktifCalisma+0x12f0>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d066      	beq.n	80076dc <checkAktifCalisma+0x11d8>
 800760e:	2104      	movs	r1, #4
 8007610:	4875      	ldr	r0, [pc, #468]	; (80077e8 <checkAktifCalisma+0x12e4>)
 8007612:	f002 fb1d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007616:	4603      	mov	r3, r0
 8007618:	2b01      	cmp	r3, #1
 800761a:	d15f      	bne.n	80076dc <checkAktifCalisma+0x11d8>
 800761c:	4b73      	ldr	r3, [pc, #460]	; (80077ec <checkAktifCalisma+0x12e8>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d05b      	beq.n	80076dc <checkAktifCalisma+0x11d8>
 8007624:	4b72      	ldr	r3, [pc, #456]	; (80077f0 <checkAktifCalisma+0x12ec>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d057      	beq.n	80076dc <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 800762c:	4b72      	ldr	r3, [pc, #456]	; (80077f8 <checkAktifCalisma+0x12f4>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	3301      	adds	r3, #1
 8007632:	b2da      	uxtb	r2, r3
 8007634:	4b70      	ldr	r3, [pc, #448]	; (80077f8 <checkAktifCalisma+0x12f4>)
 8007636:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007638:	4b6f      	ldr	r3, [pc, #444]	; (80077f8 <checkAktifCalisma+0x12f4>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b09      	cmp	r3, #9
 800763e:	d908      	bls.n	8007652 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007640:	4b6d      	ldr	r3, [pc, #436]	; (80077f8 <checkAktifCalisma+0x12f4>)
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8007646:	4b6d      	ldr	r3, [pc, #436]	; (80077fc <checkAktifCalisma+0x12f8>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	b2da      	uxtb	r2, r3
 800764e:	4b6b      	ldr	r3, [pc, #428]	; (80077fc <checkAktifCalisma+0x12f8>)
 8007650:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007652:	4b6a      	ldr	r3, [pc, #424]	; (80077fc <checkAktifCalisma+0x12f8>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b09      	cmp	r3, #9
 8007658:	d908      	bls.n	800766c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800765a:	4b68      	ldr	r3, [pc, #416]	; (80077fc <checkAktifCalisma+0x12f8>)
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007660:	4b67      	ldr	r3, [pc, #412]	; (8007800 <checkAktifCalisma+0x12fc>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	3301      	adds	r3, #1
 8007666:	b2da      	uxtb	r2, r3
 8007668:	4b65      	ldr	r3, [pc, #404]	; (8007800 <checkAktifCalisma+0x12fc>)
 800766a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 800766c:	4b64      	ldr	r3, [pc, #400]	; (8007800 <checkAktifCalisma+0x12fc>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b09      	cmp	r3, #9
 8007672:	d908      	bls.n	8007686 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007674:	4b62      	ldr	r3, [pc, #392]	; (8007800 <checkAktifCalisma+0x12fc>)
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800767a:	4b62      	ldr	r3, [pc, #392]	; (8007804 <checkAktifCalisma+0x1300>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	3301      	adds	r3, #1
 8007680:	b2da      	uxtb	r2, r3
 8007682:	4b60      	ldr	r3, [pc, #384]	; (8007804 <checkAktifCalisma+0x1300>)
 8007684:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007686:	4b5f      	ldr	r3, [pc, #380]	; (8007804 <checkAktifCalisma+0x1300>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b09      	cmp	r3, #9
 800768c:	d908      	bls.n	80076a0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800768e:	4b5d      	ldr	r3, [pc, #372]	; (8007804 <checkAktifCalisma+0x1300>)
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007694:	4b5c      	ldr	r3, [pc, #368]	; (8007808 <checkAktifCalisma+0x1304>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	3301      	adds	r3, #1
 800769a:	b2da      	uxtb	r2, r3
 800769c:	4b5a      	ldr	r3, [pc, #360]	; (8007808 <checkAktifCalisma+0x1304>)
 800769e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80076a0:	4b59      	ldr	r3, [pc, #356]	; (8007808 <checkAktifCalisma+0x1304>)
 80076a2:	781a      	ldrb	r2, [r3, #0]
 80076a4:	4b59      	ldr	r3, [pc, #356]	; (800780c <checkAktifCalisma+0x1308>)
 80076a6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80076aa:	4b56      	ldr	r3, [pc, #344]	; (8007804 <checkAktifCalisma+0x1300>)
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	4b57      	ldr	r3, [pc, #348]	; (800780c <checkAktifCalisma+0x1308>)
 80076b0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80076b2:	4b53      	ldr	r3, [pc, #332]	; (8007800 <checkAktifCalisma+0x12fc>)
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	4b55      	ldr	r3, [pc, #340]	; (800780c <checkAktifCalisma+0x1308>)
 80076b8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80076ba:	4b50      	ldr	r3, [pc, #320]	; (80077fc <checkAktifCalisma+0x12f8>)
 80076bc:	781a      	ldrb	r2, [r3, #0]
 80076be:	4b53      	ldr	r3, [pc, #332]	; (800780c <checkAktifCalisma+0x1308>)
 80076c0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80076c2:	4b4d      	ldr	r3, [pc, #308]	; (80077f8 <checkAktifCalisma+0x12f4>)
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	4b51      	ldr	r3, [pc, #324]	; (800780c <checkAktifCalisma+0x1308>)
 80076c8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80076ca:	4b51      	ldr	r3, [pc, #324]	; (8007810 <checkAktifCalisma+0x130c>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80076d0:	4b44      	ldr	r3, [pc, #272]	; (80077e4 <checkAktifCalisma+0x12e0>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80076d6:	4b47      	ldr	r3, [pc, #284]	; (80077f4 <checkAktifCalisma+0x12f0>)
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80076dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80076e0:	484c      	ldr	r0, [pc, #304]	; (8007814 <checkAktifCalisma+0x1310>)
 80076e2:	f002 fab5 	bl	8009c50 <HAL_GPIO_ReadPin>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d016      	beq.n	800771a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80076ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076f0:	4848      	ldr	r0, [pc, #288]	; (8007814 <checkAktifCalisma+0x1310>)
 80076f2:	f002 faad 	bl	8009c50 <HAL_GPIO_ReadPin>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00e      	beq.n	800771a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80076fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007700:	4844      	ldr	r0, [pc, #272]	; (8007814 <checkAktifCalisma+0x1310>)
 8007702:	f002 faa5 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d006      	beq.n	800771a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800770c:	2140      	movs	r1, #64	; 0x40
 800770e:	4836      	ldr	r0, [pc, #216]	; (80077e8 <checkAktifCalisma+0x12e4>)
 8007710:	f002 fa9e 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d103      	bne.n	8007722 <checkAktifCalisma+0x121e>
			startBasili=1;
 800771a:	4b3f      	ldr	r3, [pc, #252]	; (8007818 <checkAktifCalisma+0x1314>)
 800771c:	2201      	movs	r2, #1
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	e002      	b.n	8007728 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007722:	4b3d      	ldr	r3, [pc, #244]	; (8007818 <checkAktifCalisma+0x1314>)
 8007724:	2200      	movs	r2, #0
 8007726:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007728:	4b3b      	ldr	r3, [pc, #236]	; (8007818 <checkAktifCalisma+0x1314>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d014      	beq.n	800775a <checkAktifCalisma+0x1256>
 8007730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007734:	4837      	ldr	r0, [pc, #220]	; (8007814 <checkAktifCalisma+0x1310>)
 8007736:	f002 fa8b 	bl	8009c50 <HAL_GPIO_ReadPin>
 800773a:	4603      	mov	r3, r0
 800773c:	2b01      	cmp	r3, #1
 800773e:	d10c      	bne.n	800775a <checkAktifCalisma+0x1256>
			hataVar=1;
 8007740:	4b36      	ldr	r3, [pc, #216]	; (800781c <checkAktifCalisma+0x1318>)
 8007742:	2201      	movs	r2, #1
 8007744:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8007746:	2001      	movs	r0, #1
 8007748:	f7fe f898 	bl	800587c <hataKoduLcdGoster>
			hata2EEPROM(1);
 800774c:	2001      	movs	r0, #1
 800774e:	f7fe fc27 	bl	8005fa0 <hata2EEPROM>
			acilstophatasi=1;
 8007752:	4b33      	ldr	r3, [pc, #204]	; (8007820 <checkAktifCalisma+0x131c>)
 8007754:	2201      	movs	r2, #1
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	e018      	b.n	800778c <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800775a:	4b31      	ldr	r3, [pc, #196]	; (8007820 <checkAktifCalisma+0x131c>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d014      	beq.n	800778c <checkAktifCalisma+0x1288>
 8007762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007766:	482b      	ldr	r0, [pc, #172]	; (8007814 <checkAktifCalisma+0x1310>)
 8007768:	f002 fa72 	bl	8009c50 <HAL_GPIO_ReadPin>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10c      	bne.n	800778c <checkAktifCalisma+0x1288>
 8007772:	4b29      	ldr	r3, [pc, #164]	; (8007818 <checkAktifCalisma+0x1314>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	f083 0301 	eor.w	r3, r3, #1
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007780:	4b27      	ldr	r3, [pc, #156]	; (8007820 <checkAktifCalisma+0x131c>)
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007786:	2001      	movs	r0, #1
 8007788:	f7fe f824 	bl	80057d4 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800778c:	4b25      	ldr	r3, [pc, #148]	; (8007824 <checkAktifCalisma+0x1320>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f083 0301 	eor.w	r3, r3, #1
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04c      	beq.n	8007834 <checkAktifCalisma+0x1330>
 800779a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800779e:	481d      	ldr	r0, [pc, #116]	; (8007814 <checkAktifCalisma+0x1310>)
 80077a0:	f002 fa56 	bl	8009c50 <HAL_GPIO_ReadPin>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <checkAktifCalisma+0x12ae>
 80077aa:	4b1f      	ldr	r3, [pc, #124]	; (8007828 <checkAktifCalisma+0x1324>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d040      	beq.n	8007834 <checkAktifCalisma+0x1330>
 80077b2:	4b1e      	ldr	r3, [pc, #120]	; (800782c <checkAktifCalisma+0x1328>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d13c      	bne.n	8007834 <checkAktifCalisma+0x1330>
			hataVar=1;
 80077ba:	4b18      	ldr	r3, [pc, #96]	; (800781c <checkAktifCalisma+0x1318>)
 80077bc:	2201      	movs	r2, #1
 80077be:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80077c0:	2002      	movs	r0, #2
 80077c2:	f7fe f85b 	bl	800587c <hataKoduLcdGoster>
			hata2EEPROM(2);
 80077c6:	2002      	movs	r0, #2
 80077c8:	f7fe fbea 	bl	8005fa0 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 80077cc:	4b18      	ldr	r3, [pc, #96]	; (8007830 <checkAktifCalisma+0x132c>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	e047      	b.n	8007864 <checkAktifCalisma+0x1360>
 80077d4:	20000c84 	.word	0x20000c84
 80077d8:	20000c83 	.word	0x20000c83
 80077dc:	20000c82 	.word	0x20000c82
 80077e0:	40010800 	.word	0x40010800
 80077e4:	20000c78 	.word	0x20000c78
 80077e8:	40011000 	.word	0x40011000
 80077ec:	20000c3f 	.word	0x20000c3f
 80077f0:	20000c7b 	.word	0x20000c7b
 80077f4:	20000c79 	.word	0x20000c79
 80077f8:	20000c36 	.word	0x20000c36
 80077fc:	20000c37 	.word	0x20000c37
 8007800:	200009b1 	.word	0x200009b1
 8007804:	200009b2 	.word	0x200009b2
 8007808:	20000c38 	.word	0x20000c38
 800780c:	20000b28 	.word	0x20000b28
 8007810:	20000c65 	.word	0x20000c65
 8007814:	40010c00 	.word	0x40010c00
 8007818:	20000c87 	.word	0x20000c87
 800781c:	20000c8e 	.word	0x20000c8e
 8007820:	20000c89 	.word	0x20000c89
 8007824:	20000c90 	.word	0x20000c90
 8007828:	20000c9a 	.word	0x20000c9a
 800782c:	20000c3d 	.word	0x20000c3d
 8007830:	20000c8a 	.word	0x20000c8a
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007834:	4b97      	ldr	r3, [pc, #604]	; (8007a94 <checkAktifCalisma+0x1590>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d013      	beq.n	8007864 <checkAktifCalisma+0x1360>
 800783c:	4b96      	ldr	r3, [pc, #600]	; (8007a98 <checkAktifCalisma+0x1594>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00f      	beq.n	8007864 <checkAktifCalisma+0x1360>
 8007844:	4b95      	ldr	r3, [pc, #596]	; (8007a9c <checkAktifCalisma+0x1598>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f083 0301 	eor.w	r3, r3, #1
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007852:	4b90      	ldr	r3, [pc, #576]	; (8007a94 <checkAktifCalisma+0x1590>)
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007858:	4b91      	ldr	r3, [pc, #580]	; (8007aa0 <checkAktifCalisma+0x159c>)
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800785e:	2002      	movs	r0, #2
 8007860:	f7fd ffb8 	bl	80057d4 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007864:	4b8f      	ldr	r3, [pc, #572]	; (8007aa4 <checkAktifCalisma+0x15a0>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d11c      	bne.n	80078a6 <checkAktifCalisma+0x13a2>
 800786c:	4b8e      	ldr	r3, [pc, #568]	; (8007aa8 <checkAktifCalisma+0x15a4>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d118      	bne.n	80078a6 <checkAktifCalisma+0x13a2>
 8007874:	4b8d      	ldr	r3, [pc, #564]	; (8007aac <checkAktifCalisma+0x15a8>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d014      	beq.n	80078a6 <checkAktifCalisma+0x13a2>
 800787c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007880:	488b      	ldr	r0, [pc, #556]	; (8007ab0 <checkAktifCalisma+0x15ac>)
 8007882:	f002 f9e5 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007886:	4603      	mov	r3, r0
 8007888:	2b01      	cmp	r3, #1
 800788a:	d10c      	bne.n	80078a6 <checkAktifCalisma+0x13a2>
			hataVar=1;
 800788c:	4b89      	ldr	r3, [pc, #548]	; (8007ab4 <checkAktifCalisma+0x15b0>)
 800788e:	2201      	movs	r2, #1
 8007890:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007892:	2003      	movs	r0, #3
 8007894:	f7fd fff2 	bl	800587c <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007898:	2003      	movs	r0, #3
 800789a:	f7fe fb81 	bl	8005fa0 <hata2EEPROM>
			basinchatasi=1;
 800789e:	4b86      	ldr	r3, [pc, #536]	; (8007ab8 <checkAktifCalisma+0x15b4>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	701a      	strb	r2, [r3, #0]
 80078a4:	e015      	b.n	80078d2 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80078a6:	4b84      	ldr	r3, [pc, #528]	; (8007ab8 <checkAktifCalisma+0x15b4>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d011      	beq.n	80078d2 <checkAktifCalisma+0x13ce>
 80078ae:	4b7d      	ldr	r3, [pc, #500]	; (8007aa4 <checkAktifCalisma+0x15a0>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d10d      	bne.n	80078d2 <checkAktifCalisma+0x13ce>
 80078b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078ba:	4880      	ldr	r0, [pc, #512]	; (8007abc <checkAktifCalisma+0x15b8>)
 80078bc:	f002 f9c8 	bl	8009c50 <HAL_GPIO_ReadPin>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d105      	bne.n	80078d2 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 80078c6:	4b7c      	ldr	r3, [pc, #496]	; (8007ab8 <checkAktifCalisma+0x15b4>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80078cc:	2003      	movs	r0, #3
 80078ce:	f7fd ff81 	bl	80057d4 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80078d2:	4b7b      	ldr	r3, [pc, #492]	; (8007ac0 <checkAktifCalisma+0x15bc>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d103      	bne.n	80078e2 <checkAktifCalisma+0x13de>
 80078da:	4b7a      	ldr	r3, [pc, #488]	; (8007ac4 <checkAktifCalisma+0x15c0>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d01c      	beq.n	800791c <checkAktifCalisma+0x1418>
 80078e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078e6:	4878      	ldr	r0, [pc, #480]	; (8007ac8 <checkAktifCalisma+0x15c4>)
 80078e8:	f002 f9b2 	bl	8009c50 <HAL_GPIO_ReadPin>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d114      	bne.n	800791c <checkAktifCalisma+0x1418>
 80078f2:	4b76      	ldr	r3, [pc, #472]	; (8007acc <checkAktifCalisma+0x15c8>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d003      	beq.n	8007902 <checkAktifCalisma+0x13fe>
 80078fa:	4b74      	ldr	r3, [pc, #464]	; (8007acc <checkAktifCalisma+0x15c8>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d10c      	bne.n	800791c <checkAktifCalisma+0x1418>
			hataVar=1;
 8007902:	4b6c      	ldr	r3, [pc, #432]	; (8007ab4 <checkAktifCalisma+0x15b0>)
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007908:	2004      	movs	r0, #4
 800790a:	f7fd ffb7 	bl	800587c <hataKoduLcdGoster>
			hata2EEPROM(4);
 800790e:	2004      	movs	r0, #4
 8007910:	f7fe fb46 	bl	8005fa0 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007914:	4b6e      	ldr	r3, [pc, #440]	; (8007ad0 <checkAktifCalisma+0x15cc>)
 8007916:	2201      	movs	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	e01f      	b.n	800795c <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800791c:	4b6c      	ldr	r3, [pc, #432]	; (8007ad0 <checkAktifCalisma+0x15cc>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d01b      	beq.n	800795c <checkAktifCalisma+0x1458>
 8007924:	4b6b      	ldr	r3, [pc, #428]	; (8007ad4 <checkAktifCalisma+0x15d0>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d017      	beq.n	800795c <checkAktifCalisma+0x1458>
 800792c:	4b64      	ldr	r3, [pc, #400]	; (8007ac0 <checkAktifCalisma+0x15bc>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	f083 0301 	eor.w	r3, r3, #1
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d010      	beq.n	800795c <checkAktifCalisma+0x1458>
 800793a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800793e:	4862      	ldr	r0, [pc, #392]	; (8007ac8 <checkAktifCalisma+0x15c4>)
 8007940:	f002 f986 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d108      	bne.n	800795c <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 800794a:	4b61      	ldr	r3, [pc, #388]	; (8007ad0 <checkAktifCalisma+0x15cc>)
 800794c:	2200      	movs	r2, #0
 800794e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007950:	4b5c      	ldr	r3, [pc, #368]	; (8007ac4 <checkAktifCalisma+0x15c0>)
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007956:	2004      	movs	r0, #4
 8007958:	f7fd ff3c 	bl	80057d4 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800795c:	4b58      	ldr	r3, [pc, #352]	; (8007ac0 <checkAktifCalisma+0x15bc>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d103      	bne.n	800796c <checkAktifCalisma+0x1468>
 8007964:	4b5c      	ldr	r3, [pc, #368]	; (8007ad8 <checkAktifCalisma+0x15d4>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01c      	beq.n	80079a6 <checkAktifCalisma+0x14a2>
 800796c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007970:	4855      	ldr	r0, [pc, #340]	; (8007ac8 <checkAktifCalisma+0x15c4>)
 8007972:	f002 f96d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007976:	4603      	mov	r3, r0
 8007978:	2b01      	cmp	r3, #1
 800797a:	d114      	bne.n	80079a6 <checkAktifCalisma+0x14a2>
 800797c:	4b53      	ldr	r3, [pc, #332]	; (8007acc <checkAktifCalisma+0x15c8>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d003      	beq.n	800798c <checkAktifCalisma+0x1488>
 8007984:	4b51      	ldr	r3, [pc, #324]	; (8007acc <checkAktifCalisma+0x15c8>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b03      	cmp	r3, #3
 800798a:	d10c      	bne.n	80079a6 <checkAktifCalisma+0x14a2>
			hataVar=1;
 800798c:	4b49      	ldr	r3, [pc, #292]	; (8007ab4 <checkAktifCalisma+0x15b0>)
 800798e:	2201      	movs	r2, #1
 8007990:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007992:	2005      	movs	r0, #5
 8007994:	f7fd ff72 	bl	800587c <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007998:	2005      	movs	r0, #5
 800799a:	f7fe fb01 	bl	8005fa0 <hata2EEPROM>
			tablakapisivicihatasi=1;
 800799e:	4b4f      	ldr	r3, [pc, #316]	; (8007adc <checkAktifCalisma+0x15d8>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	e023      	b.n	80079ee <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80079a6:	4b4d      	ldr	r3, [pc, #308]	; (8007adc <checkAktifCalisma+0x15d8>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01f      	beq.n	80079ee <checkAktifCalisma+0x14ea>
 80079ae:	4b49      	ldr	r3, [pc, #292]	; (8007ad4 <checkAktifCalisma+0x15d0>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01b      	beq.n	80079ee <checkAktifCalisma+0x14ea>
 80079b6:	4b42      	ldr	r3, [pc, #264]	; (8007ac0 <checkAktifCalisma+0x15bc>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	f083 0301 	eor.w	r3, r3, #1
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d014      	beq.n	80079ee <checkAktifCalisma+0x14ea>
 80079c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079c8:	483f      	ldr	r0, [pc, #252]	; (8007ac8 <checkAktifCalisma+0x15c4>)
 80079ca:	f002 f941 	bl	8009c50 <HAL_GPIO_ReadPin>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10c      	bne.n	80079ee <checkAktifCalisma+0x14ea>
 80079d4:	4b3f      	ldr	r3, [pc, #252]	; (8007ad4 <checkAktifCalisma+0x15d0>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d008      	beq.n	80079ee <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 80079dc:	4b3f      	ldr	r3, [pc, #252]	; (8007adc <checkAktifCalisma+0x15d8>)
 80079de:	2200      	movs	r2, #0
 80079e0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80079e2:	4b3d      	ldr	r3, [pc, #244]	; (8007ad8 <checkAktifCalisma+0x15d4>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80079e8:	2005      	movs	r0, #5
 80079ea:	f7fd fef3 	bl	80057d4 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80079ee:	4b2f      	ldr	r3, [pc, #188]	; (8007aac <checkAktifCalisma+0x15a8>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d107      	bne.n	8007a06 <checkAktifCalisma+0x1502>
 80079f6:	4b29      	ldr	r3, [pc, #164]	; (8007a9c <checkAktifCalisma+0x1598>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d103      	bne.n	8007a06 <checkAktifCalisma+0x1502>
 80079fe:	4b38      	ldr	r3, [pc, #224]	; (8007ae0 <checkAktifCalisma+0x15dc>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d014      	beq.n	8007a30 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007a06:	4b37      	ldr	r3, [pc, #220]	; (8007ae4 <checkAktifCalisma+0x15e0>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	4b37      	ldr	r3, [pc, #220]	; (8007ae8 <checkAktifCalisma+0x15e4>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	4a36      	ldr	r2, [pc, #216]	; (8007aec <checkAktifCalisma+0x15e8>)
 8007a12:	7812      	ldrb	r2, [r2, #0]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d30b      	bcc.n	8007a30 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007a18:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <checkAktifCalisma+0x15b0>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007a1e:	2006      	movs	r0, #6
 8007a20:	f7fd ff2c 	bl	800587c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007a24:	2006      	movs	r0, #6
 8007a26:	f7fe fabb 	bl	8005fa0 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007a2a:	4b31      	ldr	r3, [pc, #196]	; (8007af0 <checkAktifCalisma+0x15ec>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007a30:	4b2f      	ldr	r3, [pc, #188]	; (8007af0 <checkAktifCalisma+0x15ec>)
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d013      	beq.n	8007a60 <checkAktifCalisma+0x155c>
 8007a38:	2108      	movs	r1, #8
 8007a3a:	4823      	ldr	r0, [pc, #140]	; (8007ac8 <checkAktifCalisma+0x15c4>)
 8007a3c:	f002 f908 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00c      	beq.n	8007a60 <checkAktifCalisma+0x155c>
 8007a46:	4b1e      	ldr	r3, [pc, #120]	; (8007ac0 <checkAktifCalisma+0x15bc>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	f083 0301 	eor.w	r3, r3, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007a54:	4b26      	ldr	r3, [pc, #152]	; (8007af0 <checkAktifCalisma+0x15ec>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007a5a:	2006      	movs	r0, #6
 8007a5c:	f7fd feba 	bl	80057d4 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007a60:	4b24      	ldr	r3, [pc, #144]	; (8007af4 <checkAktifCalisma+0x15f0>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10b      	bne.n	8007a80 <checkAktifCalisma+0x157c>
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <checkAktifCalisma+0x1598>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d107      	bne.n	8007a80 <checkAktifCalisma+0x157c>
 8007a70:	4b21      	ldr	r3, [pc, #132]	; (8007af8 <checkAktifCalisma+0x15f4>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d103      	bne.n	8007a80 <checkAktifCalisma+0x157c>
 8007a78:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <checkAktifCalisma+0x15dc>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d03f      	beq.n	8007b00 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007a80:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <checkAktifCalisma+0x15f8>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007a86:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <checkAktifCalisma+0x15c0>)
 8007a88:	2201      	movs	r2, #1
 8007a8a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007a8c:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <checkAktifCalisma+0x15d4>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	e03c      	b.n	8007b0e <checkAktifCalisma+0x160a>
 8007a94:	20000c8a 	.word	0x20000c8a
 8007a98:	20000c90 	.word	0x20000c90
 8007a9c:	20000c71 	.word	0x20000c71
 8007aa0:	20000c9a 	.word	0x20000c9a
 8007aa4:	20000c3c 	.word	0x20000c3c
 8007aa8:	20000c40 	.word	0x20000c40
 8007aac:	20000c8d 	.word	0x20000c8d
 8007ab0:	40011000 	.word	0x40011000
 8007ab4:	20000c8e 	.word	0x20000c8e
 8007ab8:	20000c97 	.word	0x20000c97
 8007abc:	40010c00 	.word	0x40010c00
 8007ac0:	20000c87 	.word	0x20000c87
 8007ac4:	20000c9b 	.word	0x20000c9b
 8007ac8:	40010800 	.word	0x40010800
 8007acc:	20000c41 	.word	0x20000c41
 8007ad0:	20000c98 	.word	0x20000c98
 8007ad4:	20000c7b 	.word	0x20000c7b
 8007ad8:	20000c9c 	.word	0x20000c9c
 8007adc:	20000c99 	.word	0x20000c99
 8007ae0:	20000c70 	.word	0x20000c70
 8007ae4:	20000bc4 	.word	0x20000bc4
 8007ae8:	20000bd8 	.word	0x20000bd8
 8007aec:	20000c51 	.word	0x20000c51
 8007af0:	20000c88 	.word	0x20000c88
 8007af4:	20000c6e 	.word	0x20000c6e
 8007af8:	20000c6f 	.word	0x20000c6f
 8007afc:	20000c8f 	.word	0x20000c8f
		} else {
			makineCalisiyor=1;
 8007b00:	4b1e      	ldr	r3, [pc, #120]	; (8007b7c <checkAktifCalisma+0x1678>)
 8007b02:	2201      	movs	r2, #1
 8007b04:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007b06:	4b1e      	ldr	r3, [pc, #120]	; (8007b80 <checkAktifCalisma+0x167c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <checkAktifCalisma+0x1680>)
 8007b0c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007b0e:	4b1e      	ldr	r3, [pc, #120]	; (8007b88 <checkAktifCalisma+0x1684>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d02f      	beq.n	8007b76 <checkAktifCalisma+0x1672>
 8007b16:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <checkAktifCalisma+0x1688>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f083 0301 	eor.w	r3, r3, #1
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d028      	beq.n	8007b76 <checkAktifCalisma+0x1672>
 8007b24:	4b1a      	ldr	r3, [pc, #104]	; (8007b90 <checkAktifCalisma+0x168c>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	f083 0301 	eor.w	r3, r3, #1
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d021      	beq.n	8007b76 <checkAktifCalisma+0x1672>
 8007b32:	4b18      	ldr	r3, [pc, #96]	; (8007b94 <checkAktifCalisma+0x1690>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	f083 0301 	eor.w	r3, r3, #1
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01a      	beq.n	8007b76 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007b40:	4b15      	ldr	r3, [pc, #84]	; (8007b98 <checkAktifCalisma+0x1694>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f083 0301 	eor.w	r3, r3, #1
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d013      	beq.n	8007b76 <checkAktifCalisma+0x1672>
 8007b4e:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <checkAktifCalisma+0x1698>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f083 0301 	eor.w	r3, r3, #1
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00c      	beq.n	8007b76 <checkAktifCalisma+0x1672>
 8007b5c:	4b10      	ldr	r3, [pc, #64]	; (8007ba0 <checkAktifCalisma+0x169c>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	f083 0301 	eor.w	r3, r3, #1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <checkAktifCalisma+0x1684>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007b70:	2007      	movs	r0, #7
 8007b72:	f7fd fe2f 	bl	80057d4 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007b76:	bf00      	nop
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000c8f 	.word	0x20000c8f
 8007b80:	20000bc4 	.word	0x20000bc4
 8007b84:	20000bd8 	.word	0x20000bd8
 8007b88:	20000c8e 	.word	0x20000c8e
 8007b8c:	20000c89 	.word	0x20000c89
 8007b90:	20000c8a 	.word	0x20000c8a
 8007b94:	20000c97 	.word	0x20000c97
 8007b98:	20000c98 	.word	0x20000c98
 8007b9c:	20000c99 	.word	0x20000c99
 8007ba0:	20000c88 	.word	0x20000c88

08007ba4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007ba8:	4b8b      	ldr	r3, [pc, #556]	; (8007dd8 <checkDemoModCalisma+0x234>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	f040 8229 	bne.w	8008004 <checkDemoModCalisma+0x460>
 8007bb2:	4b8a      	ldr	r3, [pc, #552]	; (8007ddc <checkDemoModCalisma+0x238>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 8224 	beq.w	8008004 <checkDemoModCalisma+0x460>
 8007bbc:	4b88      	ldr	r3, [pc, #544]	; (8007de0 <checkDemoModCalisma+0x23c>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f040 821f 	bne.w	8008004 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	4886      	ldr	r0, [pc, #536]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007bca:	f002 f841 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11d      	bne.n	8007c10 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007bd4:	4b84      	ldr	r3, [pc, #528]	; (8007de8 <checkDemoModCalisma+0x244>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f083 0301 	eor.w	r3, r3, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d016      	beq.n	8007c10 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007be2:	4b82      	ldr	r3, [pc, #520]	; (8007dec <checkDemoModCalisma+0x248>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f083 0301 	eor.w	r3, r3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00f      	beq.n	8007c10 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007bf0:	4b7f      	ldr	r3, [pc, #508]	; (8007df0 <checkDemoModCalisma+0x24c>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f083 0301 	eor.w	r3, r3, #1
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007bfe:	2201      	movs	r2, #1
 8007c00:	2104      	movs	r1, #4
 8007c02:	487c      	ldr	r0, [pc, #496]	; (8007df4 <checkDemoModCalisma+0x250>)
 8007c04:	f002 f83b 	bl	8009c7e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007c08:	4b7b      	ldr	r3, [pc, #492]	; (8007df8 <checkDemoModCalisma+0x254>)
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e00e      	b.n	8007c2e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007c10:	2102      	movs	r1, #2
 8007c12:	4874      	ldr	r0, [pc, #464]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007c14:	f002 f81c 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d107      	bne.n	8007c2e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2104      	movs	r1, #4
 8007c22:	4874      	ldr	r0, [pc, #464]	; (8007df4 <checkDemoModCalisma+0x250>)
 8007c24:	f002 f82b 	bl	8009c7e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007c28:	4b73      	ldr	r3, [pc, #460]	; (8007df8 <checkDemoModCalisma+0x254>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007c2e:	4b72      	ldr	r3, [pc, #456]	; (8007df8 <checkDemoModCalisma+0x254>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10b      	bne.n	8007c4e <checkDemoModCalisma+0xaa>
 8007c36:	4b6d      	ldr	r3, [pc, #436]	; (8007dec <checkDemoModCalisma+0x248>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d107      	bne.n	8007c4e <checkDemoModCalisma+0xaa>
 8007c3e:	4b6c      	ldr	r3, [pc, #432]	; (8007df0 <checkDemoModCalisma+0x24c>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d103      	bne.n	8007c4e <checkDemoModCalisma+0xaa>
 8007c46:	4b68      	ldr	r3, [pc, #416]	; (8007de8 <checkDemoModCalisma+0x244>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00c      	beq.n	8007c68 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c54:	4867      	ldr	r0, [pc, #412]	; (8007df4 <checkDemoModCalisma+0x250>)
 8007c56:	f002 f812 	bl	8009c7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c60:	4864      	ldr	r0, [pc, #400]	; (8007df4 <checkDemoModCalisma+0x250>)
 8007c62:	f002 f80c 	bl	8009c7e <HAL_GPIO_WritePin>
 8007c66:	e00b      	b.n	8007c80 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c6e:	4861      	ldr	r0, [pc, #388]	; (8007df4 <checkDemoModCalisma+0x250>)
 8007c70:	f002 f805 	bl	8009c7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007c74:	2200      	movs	r2, #0
 8007c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c7a:	485e      	ldr	r0, [pc, #376]	; (8007df4 <checkDemoModCalisma+0x250>)
 8007c7c:	f001 ffff 	bl	8009c7e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c80:	2102      	movs	r1, #2
 8007c82:	4858      	ldr	r0, [pc, #352]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007c84:	f001 ffe4 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d10d      	bne.n	8007caa <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c92:	4854      	ldr	r0, [pc, #336]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007c94:	f001 ffdc 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007c9e:	4b56      	ldr	r3, [pc, #344]	; (8007df8 <checkDemoModCalisma+0x254>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f083 0301 	eor.w	r3, r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007caa:	2102      	movs	r1, #2
 8007cac:	484d      	ldr	r0, [pc, #308]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007cae:	f001 ffcf 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d125      	bne.n	8007d04 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007cb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cbc:	4849      	ldr	r0, [pc, #292]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007cbe:	f001 ffc7 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d11d      	bne.n	8007d04 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007cc8:	4b4b      	ldr	r3, [pc, #300]	; (8007df8 <checkDemoModCalisma+0x254>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f083 0301 	eor.w	r3, r3, #1
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d016      	beq.n	8007d04 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007cd6:	4b44      	ldr	r3, [pc, #272]	; (8007de8 <checkDemoModCalisma+0x244>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f083 0301 	eor.w	r3, r3, #1
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00f      	beq.n	8007d04 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007ce4:	4b42      	ldr	r3, [pc, #264]	; (8007df0 <checkDemoModCalisma+0x24c>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	f083 0301 	eor.w	r3, r3, #1
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d008      	beq.n	8007d04 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	2120      	movs	r1, #32
 8007cf6:	483b      	ldr	r0, [pc, #236]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007cf8:	f001 ffc1 	bl	8009c7e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007cfc:	4b3b      	ldr	r3, [pc, #236]	; (8007dec <checkDemoModCalisma+0x248>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e007      	b.n	8007d14 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007d04:	2200      	movs	r2, #0
 8007d06:	2120      	movs	r1, #32
 8007d08:	4836      	ldr	r0, [pc, #216]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007d0a:	f001 ffb8 	bl	8009c7e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007d0e:	4b37      	ldr	r3, [pc, #220]	; (8007dec <checkDemoModCalisma+0x248>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007d14:	2102      	movs	r1, #2
 8007d16:	4833      	ldr	r0, [pc, #204]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007d18:	f001 ff9a 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d125      	bne.n	8007d6e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d26:	482f      	ldr	r0, [pc, #188]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007d28:	f001 ff92 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d11d      	bne.n	8007d6e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007d32:	4b31      	ldr	r3, [pc, #196]	; (8007df8 <checkDemoModCalisma+0x254>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f083 0301 	eor.w	r3, r3, #1
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d016      	beq.n	8007d6e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007d40:	4b2a      	ldr	r3, [pc, #168]	; (8007dec <checkDemoModCalisma+0x248>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	f083 0301 	eor.w	r3, r3, #1
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00f      	beq.n	8007d6e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007d4e:	4b26      	ldr	r3, [pc, #152]	; (8007de8 <checkDemoModCalisma+0x244>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f083 0301 	eor.w	r3, r3, #1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	2110      	movs	r1, #16
 8007d60:	4820      	ldr	r0, [pc, #128]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007d62:	f001 ff8c 	bl	8009c7e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007d66:	4b22      	ldr	r3, [pc, #136]	; (8007df0 <checkDemoModCalisma+0x24c>)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	e007      	b.n	8007d7e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2110      	movs	r1, #16
 8007d72:	481c      	ldr	r0, [pc, #112]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007d74:	f001 ff83 	bl	8009c7e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007d78:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <checkDemoModCalisma+0x24c>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007d7e:	2104      	movs	r1, #4
 8007d80:	4818      	ldr	r0, [pc, #96]	; (8007de4 <checkDemoModCalisma+0x240>)
 8007d82:	f001 ff65 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d139      	bne.n	8007e00 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007d8c:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <checkDemoModCalisma+0x254>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	f083 0301 	eor.w	r3, r3, #1
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d032      	beq.n	8007e00 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007d9a:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <checkDemoModCalisma+0x24c>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	f083 0301 	eor.w	r3, r3, #1
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d02b      	beq.n	8007e00 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007da8:	4b10      	ldr	r3, [pc, #64]	; (8007dec <checkDemoModCalisma+0x248>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	f083 0301 	eor.w	r3, r3, #1
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d024      	beq.n	8007e00 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007db6:	2201      	movs	r2, #1
 8007db8:	2102      	movs	r1, #2
 8007dba:	480e      	ldr	r0, [pc, #56]	; (8007df4 <checkDemoModCalisma+0x250>)
 8007dbc:	f001 ff5f 	bl	8009c7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	480b      	ldr	r0, [pc, #44]	; (8007df4 <checkDemoModCalisma+0x250>)
 8007dc6:	f001 ff5a 	bl	8009c7e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <checkDemoModCalisma+0x244>)
 8007dcc:	2201      	movs	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <checkDemoModCalisma+0x258>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e027      	b.n	8007e28 <checkDemoModCalisma+0x284>
 8007dd8:	20000c57 	.word	0x20000c57
 8007ddc:	20000c8b 	.word	0x20000c8b
 8007de0:	20000c56 	.word	0x20000c56
 8007de4:	40011000 	.word	0x40011000
 8007de8:	20000c92 	.word	0x20000c92
 8007dec:	20000c93 	.word	0x20000c93
 8007df0:	20000c94 	.word	0x20000c94
 8007df4:	40010c00 	.word	0x40010c00
 8007df8:	20000c91 	.word	0x20000c91
 8007dfc:	20000c77 	.word	0x20000c77
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007e00:	2104      	movs	r1, #4
 8007e02:	48a0      	ldr	r0, [pc, #640]	; (8008084 <checkDemoModCalisma+0x4e0>)
 8007e04:	f001 ff24 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d10c      	bne.n	8007e28 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2102      	movs	r1, #2
 8007e12:	489d      	ldr	r0, [pc, #628]	; (8008088 <checkDemoModCalisma+0x4e4>)
 8007e14:	f001 ff33 	bl	8009c7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	489a      	ldr	r0, [pc, #616]	; (8008088 <checkDemoModCalisma+0x4e4>)
 8007e1e:	f001 ff2e 	bl	8009c7e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007e22:	4b9a      	ldr	r3, [pc, #616]	; (800808c <checkDemoModCalisma+0x4e8>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007e28:	2104      	movs	r1, #4
 8007e2a:	4896      	ldr	r0, [pc, #600]	; (8008084 <checkDemoModCalisma+0x4e0>)
 8007e2c:	f001 ff10 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d10d      	bne.n	8007e52 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007e36:	2201      	movs	r2, #1
 8007e38:	2180      	movs	r1, #128	; 0x80
 8007e3a:	4895      	ldr	r0, [pc, #596]	; (8008090 <checkDemoModCalisma+0x4ec>)
 8007e3c:	f001 ff1f 	bl	8009c7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007e40:	2201      	movs	r2, #1
 8007e42:	2120      	movs	r1, #32
 8007e44:	4892      	ldr	r0, [pc, #584]	; (8008090 <checkDemoModCalisma+0x4ec>)
 8007e46:	f001 ff1a 	bl	8009c7e <HAL_GPIO_WritePin>
			timer3 = millis;
 8007e4a:	4b92      	ldr	r3, [pc, #584]	; (8008094 <checkDemoModCalisma+0x4f0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a92      	ldr	r2, [pc, #584]	; (8008098 <checkDemoModCalisma+0x4f4>)
 8007e50:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007e52:	4b90      	ldr	r3, [pc, #576]	; (8008094 <checkDemoModCalisma+0x4f0>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	4b90      	ldr	r3, [pc, #576]	; (8008098 <checkDemoModCalisma+0x4f4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d909      	bls.n	8007e74 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e60:	2200      	movs	r2, #0
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	488a      	ldr	r0, [pc, #552]	; (8008090 <checkDemoModCalisma+0x4ec>)
 8007e66:	f001 ff0a 	bl	8009c7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2120      	movs	r1, #32
 8007e6e:	4888      	ldr	r0, [pc, #544]	; (8008090 <checkDemoModCalisma+0x4ec>)
 8007e70:	f001 ff05 	bl	8009c7e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007e74:	2102      	movs	r1, #2
 8007e76:	4883      	ldr	r0, [pc, #524]	; (8008084 <checkDemoModCalisma+0x4e0>)
 8007e78:	f001 feea 	bl	8009c50 <HAL_GPIO_ReadPin>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d108      	bne.n	8007e94 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007e82:	2201      	movs	r2, #1
 8007e84:	2140      	movs	r1, #64	; 0x40
 8007e86:	4882      	ldr	r0, [pc, #520]	; (8008090 <checkDemoModCalisma+0x4ec>)
 8007e88:	f001 fef9 	bl	8009c7e <HAL_GPIO_WritePin>
			timer3 = millis;
 8007e8c:	4b81      	ldr	r3, [pc, #516]	; (8008094 <checkDemoModCalisma+0x4f0>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a81      	ldr	r2, [pc, #516]	; (8008098 <checkDemoModCalisma+0x4f4>)
 8007e92:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007e94:	4b7f      	ldr	r3, [pc, #508]	; (8008094 <checkDemoModCalisma+0x4f0>)
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	4b7f      	ldr	r3, [pc, #508]	; (8008098 <checkDemoModCalisma+0x4f4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d904      	bls.n	8007eac <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2140      	movs	r1, #64	; 0x40
 8007ea6:	487a      	ldr	r0, [pc, #488]	; (8008090 <checkDemoModCalisma+0x4ec>)
 8007ea8:	f001 fee9 	bl	8009c7e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007eac:	4b7b      	ldr	r3, [pc, #492]	; (800809c <checkDemoModCalisma+0x4f8>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d058      	beq.n	8007f66 <checkDemoModCalisma+0x3c2>
 8007eb4:	4b7a      	ldr	r3, [pc, #488]	; (80080a0 <checkDemoModCalisma+0x4fc>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d054      	beq.n	8007f66 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007ebc:	4b79      	ldr	r3, [pc, #484]	; (80080a4 <checkDemoModCalisma+0x500>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	4b77      	ldr	r3, [pc, #476]	; (80080a4 <checkDemoModCalisma+0x500>)
 8007ec6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007ec8:	4b76      	ldr	r3, [pc, #472]	; (80080a4 <checkDemoModCalisma+0x500>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b09      	cmp	r3, #9
 8007ece:	d908      	bls.n	8007ee2 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007ed0:	4b74      	ldr	r3, [pc, #464]	; (80080a4 <checkDemoModCalisma+0x500>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007ed6:	4b74      	ldr	r3, [pc, #464]	; (80080a8 <checkDemoModCalisma+0x504>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	4b72      	ldr	r3, [pc, #456]	; (80080a8 <checkDemoModCalisma+0x504>)
 8007ee0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007ee2:	4b71      	ldr	r3, [pc, #452]	; (80080a8 <checkDemoModCalisma+0x504>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b09      	cmp	r3, #9
 8007ee8:	d908      	bls.n	8007efc <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007eea:	4b6f      	ldr	r3, [pc, #444]	; (80080a8 <checkDemoModCalisma+0x504>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007ef0:	4b6e      	ldr	r3, [pc, #440]	; (80080ac <checkDemoModCalisma+0x508>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	4b6c      	ldr	r3, [pc, #432]	; (80080ac <checkDemoModCalisma+0x508>)
 8007efa:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007efc:	4b6b      	ldr	r3, [pc, #428]	; (80080ac <checkDemoModCalisma+0x508>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d908      	bls.n	8007f16 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007f04:	4b69      	ldr	r3, [pc, #420]	; (80080ac <checkDemoModCalisma+0x508>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007f0a:	4b69      	ldr	r3, [pc, #420]	; (80080b0 <checkDemoModCalisma+0x50c>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	4b67      	ldr	r3, [pc, #412]	; (80080b0 <checkDemoModCalisma+0x50c>)
 8007f14:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007f16:	4b66      	ldr	r3, [pc, #408]	; (80080b0 <checkDemoModCalisma+0x50c>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b09      	cmp	r3, #9
 8007f1c:	d908      	bls.n	8007f30 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007f1e:	4b64      	ldr	r3, [pc, #400]	; (80080b0 <checkDemoModCalisma+0x50c>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007f24:	4b63      	ldr	r3, [pc, #396]	; (80080b4 <checkDemoModCalisma+0x510>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	4b61      	ldr	r3, [pc, #388]	; (80080b4 <checkDemoModCalisma+0x510>)
 8007f2e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007f30:	4b60      	ldr	r3, [pc, #384]	; (80080b4 <checkDemoModCalisma+0x510>)
 8007f32:	781a      	ldrb	r2, [r3, #0]
 8007f34:	4b60      	ldr	r3, [pc, #384]	; (80080b8 <checkDemoModCalisma+0x514>)
 8007f36:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007f3a:	4b5d      	ldr	r3, [pc, #372]	; (80080b0 <checkDemoModCalisma+0x50c>)
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	4b5e      	ldr	r3, [pc, #376]	; (80080b8 <checkDemoModCalisma+0x514>)
 8007f40:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007f42:	4b5a      	ldr	r3, [pc, #360]	; (80080ac <checkDemoModCalisma+0x508>)
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	4b5c      	ldr	r3, [pc, #368]	; (80080b8 <checkDemoModCalisma+0x514>)
 8007f48:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007f4a:	4b57      	ldr	r3, [pc, #348]	; (80080a8 <checkDemoModCalisma+0x504>)
 8007f4c:	781a      	ldrb	r2, [r3, #0]
 8007f4e:	4b5a      	ldr	r3, [pc, #360]	; (80080b8 <checkDemoModCalisma+0x514>)
 8007f50:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007f52:	4b54      	ldr	r3, [pc, #336]	; (80080a4 <checkDemoModCalisma+0x500>)
 8007f54:	781a      	ldrb	r2, [r3, #0]
 8007f56:	4b58      	ldr	r3, [pc, #352]	; (80080b8 <checkDemoModCalisma+0x514>)
 8007f58:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007f5a:	4b58      	ldr	r3, [pc, #352]	; (80080bc <checkDemoModCalisma+0x518>)
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007f60:	4b4f      	ldr	r3, [pc, #316]	; (80080a0 <checkDemoModCalisma+0x4fc>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007f66:	4b56      	ldr	r3, [pc, #344]	; (80080c0 <checkDemoModCalisma+0x51c>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f040 8087 	bne.w	800807e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007f70:	4a54      	ldr	r2, [pc, #336]	; (80080c4 <checkDemoModCalisma+0x520>)
 8007f72:	2101      	movs	r1, #1
 8007f74:	2002      	movs	r0, #2
 8007f76:	f7f8 fc1f 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007f7a:	4a53      	ldr	r2, [pc, #332]	; (80080c8 <checkDemoModCalisma+0x524>)
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	2001      	movs	r0, #1
 8007f80:	f7f8 fc1a 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007f84:	4b4b      	ldr	r3, [pc, #300]	; (80080b4 <checkDemoModCalisma+0x510>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	220a      	movs	r2, #10
 8007f8a:	4950      	ldr	r1, [pc, #320]	; (80080cc <checkDemoModCalisma+0x528>)
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f004 fe8b 	bl	800cca8 <itoa>
			lcd_print(2,12,snum);
 8007f92:	4a4e      	ldr	r2, [pc, #312]	; (80080cc <checkDemoModCalisma+0x528>)
 8007f94:	210c      	movs	r1, #12
 8007f96:	2002      	movs	r0, #2
 8007f98:	f7f8 fc0e 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007f9c:	4b44      	ldr	r3, [pc, #272]	; (80080b0 <checkDemoModCalisma+0x50c>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	494a      	ldr	r1, [pc, #296]	; (80080cc <checkDemoModCalisma+0x528>)
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f004 fe7f 	bl	800cca8 <itoa>
			lcd_print(2,13,snum);
 8007faa:	4a48      	ldr	r2, [pc, #288]	; (80080cc <checkDemoModCalisma+0x528>)
 8007fac:	210d      	movs	r1, #13
 8007fae:	2002      	movs	r0, #2
 8007fb0:	f7f8 fc02 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007fb4:	4b3d      	ldr	r3, [pc, #244]	; (80080ac <checkDemoModCalisma+0x508>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	220a      	movs	r2, #10
 8007fba:	4944      	ldr	r1, [pc, #272]	; (80080cc <checkDemoModCalisma+0x528>)
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f004 fe73 	bl	800cca8 <itoa>
			lcd_print(2,14,snum);
 8007fc2:	4a42      	ldr	r2, [pc, #264]	; (80080cc <checkDemoModCalisma+0x528>)
 8007fc4:	210e      	movs	r1, #14
 8007fc6:	2002      	movs	r0, #2
 8007fc8:	f7f8 fbf6 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007fcc:	4b36      	ldr	r3, [pc, #216]	; (80080a8 <checkDemoModCalisma+0x504>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	493e      	ldr	r1, [pc, #248]	; (80080cc <checkDemoModCalisma+0x528>)
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f004 fe67 	bl	800cca8 <itoa>
			lcd_print(2,15,snum);
 8007fda:	4a3c      	ldr	r2, [pc, #240]	; (80080cc <checkDemoModCalisma+0x528>)
 8007fdc:	210f      	movs	r1, #15
 8007fde:	2002      	movs	r0, #2
 8007fe0:	f7f8 fbea 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007fe4:	4b2f      	ldr	r3, [pc, #188]	; (80080a4 <checkDemoModCalisma+0x500>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	220a      	movs	r2, #10
 8007fea:	4938      	ldr	r1, [pc, #224]	; (80080cc <checkDemoModCalisma+0x528>)
 8007fec:	4618      	mov	r0, r3
 8007fee:	f004 fe5b 	bl	800cca8 <itoa>
			lcd_print(2,16,snum);
 8007ff2:	4a36      	ldr	r2, [pc, #216]	; (80080cc <checkDemoModCalisma+0x528>)
 8007ff4:	2110      	movs	r1, #16
 8007ff6:	2002      	movs	r0, #2
 8007ff8:	f7f8 fbde 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8007ffc:	4b34      	ldr	r3, [pc, #208]	; (80080d0 <checkDemoModCalisma+0x52c>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8008002:	e03c      	b.n	800807e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8008004:	4b33      	ldr	r3, [pc, #204]	; (80080d4 <checkDemoModCalisma+0x530>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d003      	beq.n	8008014 <checkDemoModCalisma+0x470>
 800800c:	4b2c      	ldr	r3, [pc, #176]	; (80080c0 <checkDemoModCalisma+0x51c>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d134      	bne.n	800807e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008014:	2200      	movs	r2, #0
 8008016:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800801a:	481b      	ldr	r0, [pc, #108]	; (8008088 <checkDemoModCalisma+0x4e4>)
 800801c:	f001 fe2f 	bl	8009c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008020:	2200      	movs	r2, #0
 8008022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008026:	4818      	ldr	r0, [pc, #96]	; (8008088 <checkDemoModCalisma+0x4e4>)
 8008028:	f001 fe29 	bl	8009c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800802c:	2200      	movs	r2, #0
 800802e:	2104      	movs	r1, #4
 8008030:	4815      	ldr	r0, [pc, #84]	; (8008088 <checkDemoModCalisma+0x4e4>)
 8008032:	f001 fe24 	bl	8009c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008036:	2200      	movs	r2, #0
 8008038:	2102      	movs	r1, #2
 800803a:	4813      	ldr	r0, [pc, #76]	; (8008088 <checkDemoModCalisma+0x4e4>)
 800803c:	f001 fe1f 	bl	8009c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008040:	2200      	movs	r2, #0
 8008042:	2101      	movs	r1, #1
 8008044:	4810      	ldr	r0, [pc, #64]	; (8008088 <checkDemoModCalisma+0x4e4>)
 8008046:	f001 fe1a 	bl	8009c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800804a:	2200      	movs	r2, #0
 800804c:	2120      	movs	r1, #32
 800804e:	480d      	ldr	r0, [pc, #52]	; (8008084 <checkDemoModCalisma+0x4e0>)
 8008050:	f001 fe15 	bl	8009c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008054:	2200      	movs	r2, #0
 8008056:	2110      	movs	r1, #16
 8008058:	480a      	ldr	r0, [pc, #40]	; (8008084 <checkDemoModCalisma+0x4e0>)
 800805a:	f001 fe10 	bl	8009c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800805e:	2200      	movs	r2, #0
 8008060:	2180      	movs	r1, #128	; 0x80
 8008062:	480b      	ldr	r0, [pc, #44]	; (8008090 <checkDemoModCalisma+0x4ec>)
 8008064:	f001 fe0b 	bl	8009c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008068:	2200      	movs	r2, #0
 800806a:	2140      	movs	r1, #64	; 0x40
 800806c:	4808      	ldr	r0, [pc, #32]	; (8008090 <checkDemoModCalisma+0x4ec>)
 800806e:	f001 fe06 	bl	8009c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008072:	2200      	movs	r2, #0
 8008074:	2120      	movs	r1, #32
 8008076:	4806      	ldr	r0, [pc, #24]	; (8008090 <checkDemoModCalisma+0x4ec>)
 8008078:	f001 fe01 	bl	8009c7e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800807c:	e7ff      	b.n	800807e <checkDemoModCalisma+0x4da>
 800807e:	bf00      	nop
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40011000 	.word	0x40011000
 8008088:	40010c00 	.word	0x40010c00
 800808c:	20000c92 	.word	0x20000c92
 8008090:	40010800 	.word	0x40010800
 8008094:	20000bc4 	.word	0x20000bc4
 8008098:	20000bd4 	.word	0x20000bd4
 800809c:	20000c91 	.word	0x20000c91
 80080a0:	20000c77 	.word	0x20000c77
 80080a4:	20000c36 	.word	0x20000c36
 80080a8:	20000c37 	.word	0x20000c37
 80080ac:	200009b1 	.word	0x200009b1
 80080b0:	200009b2 	.word	0x200009b2
 80080b4:	20000c38 	.word	0x20000c38
 80080b8:	20000b28 	.word	0x20000b28
 80080bc:	20000c65 	.word	0x20000c65
 80080c0:	20000c56 	.word	0x20000c56
 80080c4:	0800e444 	.word	0x0800e444
 80080c8:	0800e450 	.word	0x0800e450
 80080cc:	20000bbc 	.word	0x20000bbc
 80080d0:	20000c6d 	.word	0x20000c6d
 80080d4:	20000c57 	.word	0x20000c57

080080d8 <mergeData>:

char* mergeData() {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b09e      	sub	sp, #120	; 0x78
 80080dc:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80080de:	2300      	movs	r3, #0
 80080e0:	643b      	str	r3, [r7, #64]	; 0x40
 80080e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080e6:	2229      	movs	r2, #41	; 0x29
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f004 fef4 	bl	800ced8 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80080f0:	4b6a      	ldr	r3, [pc, #424]	; (800829c <mergeData+0x1c4>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	713b      	strb	r3, [r7, #4]
 80080f6:	4b6a      	ldr	r3, [pc, #424]	; (80082a0 <mergeData+0x1c8>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	717b      	strb	r3, [r7, #5]
 80080fc:	4b69      	ldr	r3, [pc, #420]	; (80082a4 <mergeData+0x1cc>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	71bb      	strb	r3, [r7, #6]
 8008102:	4b69      	ldr	r3, [pc, #420]	; (80082a8 <mergeData+0x1d0>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
 8008108:	4b68      	ldr	r3, [pc, #416]	; (80082ac <mergeData+0x1d4>)
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	723b      	strb	r3, [r7, #8]
 800810e:	4b68      	ldr	r3, [pc, #416]	; (80082b0 <mergeData+0x1d8>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	727b      	strb	r3, [r7, #9]
 8008114:	4b67      	ldr	r3, [pc, #412]	; (80082b4 <mergeData+0x1dc>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	72bb      	strb	r3, [r7, #10]
 800811a:	4b67      	ldr	r3, [pc, #412]	; (80082b8 <mergeData+0x1e0>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	72fb      	strb	r3, [r7, #11]
 8008120:	4b66      	ldr	r3, [pc, #408]	; (80082bc <mergeData+0x1e4>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	733b      	strb	r3, [r7, #12]
 8008126:	4b66      	ldr	r3, [pc, #408]	; (80082c0 <mergeData+0x1e8>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	737b      	strb	r3, [r7, #13]
 800812c:	4b65      	ldr	r3, [pc, #404]	; (80082c4 <mergeData+0x1ec>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	73bb      	strb	r3, [r7, #14]
 8008132:	4b65      	ldr	r3, [pc, #404]	; (80082c8 <mergeData+0x1f0>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	73fb      	strb	r3, [r7, #15]
 8008138:	4b64      	ldr	r3, [pc, #400]	; (80082cc <mergeData+0x1f4>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	743b      	strb	r3, [r7, #16]
 800813e:	4b64      	ldr	r3, [pc, #400]	; (80082d0 <mergeData+0x1f8>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	747b      	strb	r3, [r7, #17]
 8008144:	4b63      	ldr	r3, [pc, #396]	; (80082d4 <mergeData+0x1fc>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	74bb      	strb	r3, [r7, #18]
 800814a:	4b63      	ldr	r3, [pc, #396]	; (80082d8 <mergeData+0x200>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	74fb      	strb	r3, [r7, #19]
 8008150:	4b62      	ldr	r3, [pc, #392]	; (80082dc <mergeData+0x204>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	753b      	strb	r3, [r7, #20]
 8008156:	4b62      	ldr	r3, [pc, #392]	; (80082e0 <mergeData+0x208>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	757b      	strb	r3, [r7, #21]
 800815c:	4b61      	ldr	r3, [pc, #388]	; (80082e4 <mergeData+0x20c>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	75bb      	strb	r3, [r7, #22]
 8008162:	4b61      	ldr	r3, [pc, #388]	; (80082e8 <mergeData+0x210>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	75fb      	strb	r3, [r7, #23]
 8008168:	4b60      	ldr	r3, [pc, #384]	; (80082ec <mergeData+0x214>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	763b      	strb	r3, [r7, #24]
 800816e:	4b60      	ldr	r3, [pc, #384]	; (80082f0 <mergeData+0x218>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	767b      	strb	r3, [r7, #25]
 8008174:	4b5f      	ldr	r3, [pc, #380]	; (80082f4 <mergeData+0x21c>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	76bb      	strb	r3, [r7, #26]
 800817a:	4b5f      	ldr	r3, [pc, #380]	; (80082f8 <mergeData+0x220>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	76fb      	strb	r3, [r7, #27]
 8008180:	4b5e      	ldr	r3, [pc, #376]	; (80082fc <mergeData+0x224>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	773b      	strb	r3, [r7, #28]
 8008186:	4b5e      	ldr	r3, [pc, #376]	; (8008300 <mergeData+0x228>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	777b      	strb	r3, [r7, #29]
 800818c:	4b5d      	ldr	r3, [pc, #372]	; (8008304 <mergeData+0x22c>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	77bb      	strb	r3, [r7, #30]
 8008192:	4b5d      	ldr	r3, [pc, #372]	; (8008308 <mergeData+0x230>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	77fb      	strb	r3, [r7, #31]
 8008198:	4b5c      	ldr	r3, [pc, #368]	; (800830c <mergeData+0x234>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f887 3020 	strb.w	r3, [r7, #32]
 80081a0:	4b5b      	ldr	r3, [pc, #364]	; (8008310 <mergeData+0x238>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80081a8:	4b5a      	ldr	r3, [pc, #360]	; (8008314 <mergeData+0x23c>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80081b0:	4b59      	ldr	r3, [pc, #356]	; (8008318 <mergeData+0x240>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081b8:	4b58      	ldr	r3, [pc, #352]	; (800831c <mergeData+0x244>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80081c0:	4b57      	ldr	r3, [pc, #348]	; (8008320 <mergeData+0x248>)
 80081c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80081c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80081ca:	4b55      	ldr	r3, [pc, #340]	; (8008320 <mergeData+0x248>)
 80081cc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80081d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80081d4:	4b52      	ldr	r3, [pc, #328]	; (8008320 <mergeData+0x248>)
 80081d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80081da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80081de:	4b50      	ldr	r3, [pc, #320]	; (8008320 <mergeData+0x248>)
 80081e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80081e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80081e8:	4b4d      	ldr	r3, [pc, #308]	; (8008320 <mergeData+0x248>)
 80081ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80081ee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80081f2:	4b4b      	ldr	r3, [pc, #300]	; (8008320 <mergeData+0x248>)
 80081f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80081f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 80081fc:	4b48      	ldr	r3, [pc, #288]	; (8008320 <mergeData+0x248>)
 80081fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8008206:	4b46      	ldr	r3, [pc, #280]	; (8008320 <mergeData+0x248>)
 8008208:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800820c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8008210:	4b43      	ldr	r3, [pc, #268]	; (8008320 <mergeData+0x248>)
 8008212:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8008216:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800821a:	4b41      	ldr	r3, [pc, #260]	; (8008320 <mergeData+0x248>)
 800821c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008220:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008224:	4b3e      	ldr	r3, [pc, #248]	; (8008320 <mergeData+0x248>)
 8008226:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800822a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800822e:	4b3d      	ldr	r3, [pc, #244]	; (8008324 <mergeData+0x24c>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008236:	2300      	movs	r3, #0
 8008238:	677b      	str	r3, [r7, #116]	; 0x74
 800823a:	e015      	b.n	8008268 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 800823c:	1d3a      	adds	r2, r7, #4
 800823e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008240:	4413      	add	r3, r2
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800824a:	4937      	ldr	r1, [pc, #220]	; (8008328 <mergeData+0x250>)
 800824c:	4618      	mov	r0, r3
 800824e:	f004 fe23 	bl	800ce98 <siprintf>
	    strcat(combinedString, temp);
 8008252:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008256:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f004 fe43 	bl	800cee8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008264:	3301      	adds	r3, #1
 8008266:	677b      	str	r3, [r7, #116]	; 0x74
 8008268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800826a:	2b2c      	cmp	r3, #44	; 0x2c
 800826c:	d9e6      	bls.n	800823c <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800826e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008272:	4618      	mov	r0, r3
 8008274:	f7f7 ffd6 	bl	8000224 <strlen>
 8008278:	4603      	mov	r3, r0
 800827a:	3301      	adds	r3, #1
 800827c:	4618      	mov	r0, r3
 800827e:	f004 fd15 	bl	800ccac <malloc>
 8008282:	4603      	mov	r3, r0
 8008284:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8008286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800828a:	4619      	mov	r1, r3
 800828c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800828e:	f004 fe77 	bl	800cf80 <strcpy>
	return result;
 8008292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008294:	4618      	mov	r0, r3
 8008296:	3778      	adds	r7, #120	; 0x78
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20000c48 	.word	0x20000c48
 80082a0:	20000c3a 	.word	0x20000c3a
 80082a4:	20000c3d 	.word	0x20000c3d
 80082a8:	20000c3e 	.word	0x20000c3e
 80082ac:	20000c3f 	.word	0x20000c3f
 80082b0:	20000c46 	.word	0x20000c46
 80082b4:	20000c40 	.word	0x20000c40
 80082b8:	20000c41 	.word	0x20000c41
 80082bc:	20000c45 	.word	0x20000c45
 80082c0:	20000c42 	.word	0x20000c42
 80082c4:	20000c52 	.word	0x20000c52
 80082c8:	20000c43 	.word	0x20000c43
 80082cc:	20000c53 	.word	0x20000c53
 80082d0:	20000c44 	.word	0x20000c44
 80082d4:	20000c54 	.word	0x20000c54
 80082d8:	20000c47 	.word	0x20000c47
 80082dc:	20000c49 	.word	0x20000c49
 80082e0:	20000c4a 	.word	0x20000c4a
 80082e4:	20000c4b 	.word	0x20000c4b
 80082e8:	20000c4c 	.word	0x20000c4c
 80082ec:	20000c4d 	.word	0x20000c4d
 80082f0:	20000c4e 	.word	0x20000c4e
 80082f4:	20000c4f 	.word	0x20000c4f
 80082f8:	20000c50 	.word	0x20000c50
 80082fc:	20000c51 	.word	0x20000c51
 8008300:	20000c55 	.word	0x20000c55
 8008304:	20000c57 	.word	0x20000c57
 8008308:	20000c36 	.word	0x20000c36
 800830c:	20000c37 	.word	0x20000c37
 8008310:	200009b1 	.word	0x200009b1
 8008314:	200009b2 	.word	0x200009b2
 8008318:	20000c38 	.word	0x20000c38
 800831c:	20000c5a 	.word	0x20000c5a
 8008320:	20000b28 	.word	0x20000b28
 8008324:	20000940 	.word	0x20000940
 8008328:	0800e464 	.word	0x0800e464

0800832c <mainLoop>:

void mainLoop() {
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8008332:	f7fd fffb 	bl	800632c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8008336:	2101      	movs	r1, #1
 8008338:	48ac      	ldr	r0, [pc, #688]	; (80085ec <mainLoop+0x2c0>)
 800833a:	f001 fc89 	bl	8009c50 <HAL_GPIO_ReadPin>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d136      	bne.n	80083b2 <mainLoop+0x86>
 8008344:	2108      	movs	r1, #8
 8008346:	48aa      	ldr	r0, [pc, #680]	; (80085f0 <mainLoop+0x2c4>)
 8008348:	f001 fc82 	bl	8009c50 <HAL_GPIO_ReadPin>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d12f      	bne.n	80083b2 <mainLoop+0x86>
 8008352:	2102      	movs	r1, #2
 8008354:	48a5      	ldr	r0, [pc, #660]	; (80085ec <mainLoop+0x2c0>)
 8008356:	f001 fc7b 	bl	8009c50 <HAL_GPIO_ReadPin>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d128      	bne.n	80083b2 <mainLoop+0x86>
 8008360:	2104      	movs	r1, #4
 8008362:	48a2      	ldr	r0, [pc, #648]	; (80085ec <mainLoop+0x2c0>)
 8008364:	f001 fc74 	bl	8009c50 <HAL_GPIO_ReadPin>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d121      	bne.n	80083b2 <mainLoop+0x86>
 800836e:	2108      	movs	r1, #8
 8008370:	489e      	ldr	r0, [pc, #632]	; (80085ec <mainLoop+0x2c0>)
 8008372:	f001 fc6d 	bl	8009c50 <HAL_GPIO_ReadPin>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d11a      	bne.n	80083b2 <mainLoop+0x86>
 800837c:	2180      	movs	r1, #128	; 0x80
 800837e:	489c      	ldr	r0, [pc, #624]	; (80085f0 <mainLoop+0x2c4>)
 8008380:	f001 fc66 	bl	8009c50 <HAL_GPIO_ReadPin>
 8008384:	4603      	mov	r3, r0
 8008386:	2b01      	cmp	r3, #1
 8008388:	d113      	bne.n	80083b2 <mainLoop+0x86>
 800838a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800838e:	4898      	ldr	r0, [pc, #608]	; (80085f0 <mainLoop+0x2c4>)
 8008390:	f001 fc5e 	bl	8009c50 <HAL_GPIO_ReadPin>
 8008394:	4603      	mov	r3, r0
 8008396:	2b01      	cmp	r3, #1
 8008398:	d10b      	bne.n	80083b2 <mainLoop+0x86>
 800839a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800839e:	4894      	ldr	r0, [pc, #592]	; (80085f0 <mainLoop+0x2c4>)
 80083a0:	f001 fc56 	bl	8009c50 <HAL_GPIO_ReadPin>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d103      	bne.n	80083b2 <mainLoop+0x86>
			butonKontrol=0;
 80083aa:	4b92      	ldr	r3, [pc, #584]	; (80085f4 <mainLoop+0x2c8>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	e003      	b.n	80083ba <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80083b2:	4b91      	ldr	r3, [pc, #580]	; (80085f8 <mainLoop+0x2cc>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a91      	ldr	r2, [pc, #580]	; (80085fc <mainLoop+0x2d0>)
 80083b8:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80083ba:	4b91      	ldr	r3, [pc, #580]	; (8008600 <mainLoop+0x2d4>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d039      	beq.n	8008436 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80083c2:	bf00      	nop
 80083c4:	488f      	ldr	r0, [pc, #572]	; (8008604 <mainLoop+0x2d8>)
 80083c6:	f002 fa6c 	bl	800a8a2 <HAL_I2C_GetError>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d0f9      	beq.n	80083c4 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80083d0:	bf00      	nop
 80083d2:	488c      	ldr	r0, [pc, #560]	; (8008604 <mainLoop+0x2d8>)
 80083d4:	f002 fa58 	bl	800a888 <HAL_I2C_GetState>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d1f9      	bne.n	80083d2 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80083de:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	233f      	movs	r3, #63	; 0x3f
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	4b87      	ldr	r3, [pc, #540]	; (8008608 <mainLoop+0x2dc>)
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	233f      	movs	r3, #63	; 0x3f
 80083ee:	2200      	movs	r2, #0
 80083f0:	21a0      	movs	r1, #160	; 0xa0
 80083f2:	4884      	ldr	r0, [pc, #528]	; (8008604 <mainLoop+0x2d8>)
 80083f4:	f001 fee6 	bl	800a1c4 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 80083f8:	2005      	movs	r0, #5
 80083fa:	f000 fe59 	bl	80090b0 <HAL_Delay>

		  hafizaYaz=0;
 80083fe:	4b80      	ldr	r3, [pc, #512]	; (8008600 <mainLoop+0x2d4>)
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8008404:	4b81      	ldr	r3, [pc, #516]	; (800860c <mainLoop+0x2e0>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d105      	bne.n	8008418 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 800840c:	4a80      	ldr	r2, [pc, #512]	; (8008610 <mainLoop+0x2e4>)
 800840e:	2101      	movs	r1, #1
 8008410:	2002      	movs	r0, #2
 8008412:	f7f8 f9d1 	bl	80007b8 <lcd_print>
 8008416:	e008      	b.n	800842a <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8008418:	4b7c      	ldr	r3, [pc, #496]	; (800860c <mainLoop+0x2e0>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d104      	bne.n	800842a <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008420:	4a7c      	ldr	r2, [pc, #496]	; (8008614 <mainLoop+0x2e8>)
 8008422:	2101      	movs	r1, #1
 8008424:	2002      	movs	r0, #2
 8008426:	f7f8 f9c7 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 800842a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800842e:	f000 fe3f 	bl	80090b0 <HAL_Delay>
		  lcd_clear();
 8008432:	f7f8 f9ed 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008436:	4b78      	ldr	r3, [pc, #480]	; (8008618 <mainLoop+0x2ec>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	f083 0301 	eor.w	r3, r3, #1
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	d06e      	beq.n	8008522 <mainLoop+0x1f6>
 8008444:	486f      	ldr	r0, [pc, #444]	; (8008604 <mainLoop+0x2d8>)
 8008446:	f002 fa1f 	bl	800a888 <HAL_I2C_GetState>
 800844a:	4603      	mov	r3, r0
 800844c:	2b20      	cmp	r3, #32
 800844e:	d168      	bne.n	8008522 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008450:	4b72      	ldr	r3, [pc, #456]	; (800861c <mainLoop+0x2f0>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	f083 0301 	eor.w	r3, r3, #1
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d044      	beq.n	80084e8 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 800845e:	4a70      	ldr	r2, [pc, #448]	; (8008620 <mainLoop+0x2f4>)
 8008460:	2101      	movs	r1, #1
 8008462:	2001      	movs	r0, #1
 8008464:	f7f8 f9a8 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 8008468:	4b68      	ldr	r3, [pc, #416]	; (800860c <mainLoop+0x2e0>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d105      	bne.n	800847c <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8008470:	4a6c      	ldr	r2, [pc, #432]	; (8008624 <mainLoop+0x2f8>)
 8008472:	2101      	movs	r1, #1
 8008474:	2002      	movs	r0, #2
 8008476:	f7f8 f99f 	bl	80007b8 <lcd_print>
 800847a:	e008      	b.n	800848e <mainLoop+0x162>
			  } else if(dilSecim==1) {
 800847c:	4b63      	ldr	r3, [pc, #396]	; (800860c <mainLoop+0x2e0>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d104      	bne.n	800848e <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8008484:	4a68      	ldr	r2, [pc, #416]	; (8008628 <mainLoop+0x2fc>)
 8008486:	2101      	movs	r1, #1
 8008488:	2002      	movs	r0, #2
 800848a:	f7f8 f995 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 800848e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008492:	f000 fe0d 	bl	80090b0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008496:	bf00      	nop
 8008498:	485a      	ldr	r0, [pc, #360]	; (8008604 <mainLoop+0x2d8>)
 800849a:	f002 fa02 	bl	800a8a2 <HAL_I2C_GetError>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d0f9      	beq.n	8008498 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80084a4:	e003      	b.n	80084ae <mainLoop+0x182>
				  HAL_Delay(1000);
 80084a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084aa:	f000 fe01 	bl	80090b0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80084ae:	4855      	ldr	r0, [pc, #340]	; (8008604 <mainLoop+0x2d8>)
 80084b0:	f002 f9ea 	bl	800a888 <HAL_I2C_GetState>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d1f5      	bne.n	80084a6 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 80084ba:	4b54      	ldr	r3, [pc, #336]	; (800860c <mainLoop+0x2e0>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d105      	bne.n	80084ce <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 80084c2:	4a5a      	ldr	r2, [pc, #360]	; (800862c <mainLoop+0x300>)
 80084c4:	2101      	movs	r1, #1
 80084c6:	2002      	movs	r0, #2
 80084c8:	f7f8 f976 	bl	80007b8 <lcd_print>
 80084cc:	e008      	b.n	80084e0 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 80084ce:	4b4f      	ldr	r3, [pc, #316]	; (800860c <mainLoop+0x2e0>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d104      	bne.n	80084e0 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 80084d6:	4a56      	ldr	r2, [pc, #344]	; (8008630 <mainLoop+0x304>)
 80084d8:	2101      	movs	r1, #1
 80084da:	2002      	movs	r0, #2
 80084dc:	f7f8 f96c 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 80084e0:	4b4e      	ldr	r3, [pc, #312]	; (800861c <mainLoop+0x2f0>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	e014      	b.n	8008512 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 80084e8:	4b48      	ldr	r3, [pc, #288]	; (800860c <mainLoop+0x2e0>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d105      	bne.n	80084fc <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 80084f0:	4a50      	ldr	r2, [pc, #320]	; (8008634 <mainLoop+0x308>)
 80084f2:	2101      	movs	r1, #1
 80084f4:	2002      	movs	r0, #2
 80084f6:	f7f8 f95f 	bl	80007b8 <lcd_print>
 80084fa:	e008      	b.n	800850e <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 80084fc:	4b43      	ldr	r3, [pc, #268]	; (800860c <mainLoop+0x2e0>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d104      	bne.n	800850e <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8008504:	4a4c      	ldr	r2, [pc, #304]	; (8008638 <mainLoop+0x30c>)
 8008506:	2101      	movs	r1, #1
 8008508:	2002      	movs	r0, #2
 800850a:	f7f8 f955 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 800850e:	f7f8 f97f 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 8008512:	f7f8 f97d 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 8008516:	2001      	movs	r0, #1
 8008518:	f7fd fac6 	bl	8005aa8 <eepromKontrol>
		  hafizaOku=1;
 800851c:	4b3e      	ldr	r3, [pc, #248]	; (8008618 <mainLoop+0x2ec>)
 800851e:	2201      	movs	r2, #1
 8008520:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008522:	4b46      	ldr	r3, [pc, #280]	; (800863c <mainLoop+0x310>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d11c      	bne.n	8008564 <mainLoop+0x238>
 800852a:	4b45      	ldr	r3, [pc, #276]	; (8008640 <mainLoop+0x314>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f083 0301 	eor.w	r3, r3, #1
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d015      	beq.n	8008564 <mainLoop+0x238>
 8008538:	4b42      	ldr	r3, [pc, #264]	; (8008644 <mainLoop+0x318>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d111      	bne.n	8008564 <mainLoop+0x238>
			lcd_clear();
 8008540:	f7f8 f966 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 8008544:	200a      	movs	r0, #10
 8008546:	f000 fdb3 	bl	80090b0 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800854a:	4a3f      	ldr	r2, [pc, #252]	; (8008648 <mainLoop+0x31c>)
 800854c:	2101      	movs	r1, #1
 800854e:	2001      	movs	r0, #1
 8008550:	f7f8 f932 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008554:	4a3d      	ldr	r2, [pc, #244]	; (800864c <mainLoop+0x320>)
 8008556:	2101      	movs	r1, #1
 8008558:	2002      	movs	r0, #2
 800855a:	f7f8 f92d 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 800855e:	4b38      	ldr	r3, [pc, #224]	; (8008640 <mainLoop+0x314>)
 8008560:	2201      	movs	r2, #1
 8008562:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008564:	4b35      	ldr	r3, [pc, #212]	; (800863c <mainLoop+0x310>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d112      	bne.n	8008592 <mainLoop+0x266>
 800856c:	2102      	movs	r1, #2
 800856e:	481f      	ldr	r0, [pc, #124]	; (80085ec <mainLoop+0x2c0>)
 8008570:	f001 fb6e 	bl	8009c50 <HAL_GPIO_ReadPin>
 8008574:	4603      	mov	r3, r0
 8008576:	2b01      	cmp	r3, #1
 8008578:	d10b      	bne.n	8008592 <mainLoop+0x266>
 800857a:	2104      	movs	r1, #4
 800857c:	481b      	ldr	r0, [pc, #108]	; (80085ec <mainLoop+0x2c0>)
 800857e:	f001 fb67 	bl	8009c50 <HAL_GPIO_ReadPin>
 8008582:	4603      	mov	r3, r0
 8008584:	2b01      	cmp	r3, #1
 8008586:	d104      	bne.n	8008592 <mainLoop+0x266>
			menuGiris=1;
 8008588:	4b2c      	ldr	r3, [pc, #176]	; (800863c <mainLoop+0x310>)
 800858a:	2201      	movs	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800858e:	f7f8 f93f 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 8008592:	4b2a      	ldr	r3, [pc, #168]	; (800863c <mainLoop+0x310>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d102      	bne.n	80085a0 <mainLoop+0x274>
			menu(&hi2c1);
 800859a:	481a      	ldr	r0, [pc, #104]	; (8008604 <mainLoop+0x2d8>)
 800859c:	f7f9 f806 	bl	80015ac <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80085a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085a4:	4812      	ldr	r0, [pc, #72]	; (80085f0 <mainLoop+0x2c4>)
 80085a6:	f001 fb82 	bl	8009cae <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80085aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085ae:	4828      	ldr	r0, [pc, #160]	; (8008650 <mainLoop+0x324>)
 80085b0:	f001 fb4e 	bl	8009c50 <HAL_GPIO_ReadPin>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10a      	bne.n	80085d0 <mainLoop+0x2a4>
 80085ba:	4b26      	ldr	r3, [pc, #152]	; (8008654 <mainLoop+0x328>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	f083 0301 	eor.w	r3, r3, #1
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <mainLoop+0x2a4>
			stopVar=1;
 80085c8:	4b23      	ldr	r3, [pc, #140]	; (8008658 <mainLoop+0x32c>)
 80085ca:	2201      	movs	r2, #1
 80085cc:	701a      	strb	r2, [r3, #0]
 80085ce:	e002      	b.n	80085d6 <mainLoop+0x2aa>
		} else {
			stopVar=0;
 80085d0:	4b21      	ldr	r3, [pc, #132]	; (8008658 <mainLoop+0x32c>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80085d6:	f7fd fec9 	bl	800636c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80085da:	f7fd fefb 	bl	80063d4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80085de:	f7fd ff3f 	bl	8006460 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80085e2:	f7fd ff8f 	bl	8006504 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80085e6:	f7ff fadd 	bl	8007ba4 <checkDemoModCalisma>
		checkLCDBacklight();
 80085ea:	e6a2      	b.n	8008332 <mainLoop+0x6>
 80085ec:	40010800 	.word	0x40010800
 80085f0:	40011000 	.word	0x40011000
 80085f4:	20000c68 	.word	0x20000c68
 80085f8:	20000bc4 	.word	0x20000bc4
 80085fc:	20000be0 	.word	0x20000be0
 8008600:	20000c65 	.word	0x20000c65
 8008604:	20000df8 	.word	0x20000df8
 8008608:	20000b28 	.word	0x20000b28
 800860c:	20000c5a 	.word	0x20000c5a
 8008610:	0800e468 	.word	0x0800e468
 8008614:	0800e47c 	.word	0x0800e47c
 8008618:	20000c66 	.word	0x20000c66
 800861c:	20000c67 	.word	0x20000c67
 8008620:	0800e490 	.word	0x0800e490
 8008624:	0800e4a4 	.word	0x0800e4a4
 8008628:	0800e4b8 	.word	0x0800e4b8
 800862c:	0800e4cc 	.word	0x0800e4cc
 8008630:	0800e4e0 	.word	0x0800e4e0
 8008634:	0800e4f4 	.word	0x0800e4f4
 8008638:	0800e508 	.word	0x0800e508
 800863c:	20000c56 	.word	0x20000c56
 8008640:	20000c6d 	.word	0x20000c6d
 8008644:	20000c57 	.word	0x20000c57
 8008648:	0800e3cc 	.word	0x0800e3cc
 800864c:	0800e3e0 	.word	0x0800e3e0
 8008650:	40010c00 	.word	0x40010c00
 8008654:	20000c8e 	.word	0x20000c8e
 8008658:	20000c8b 	.word	0x20000c8b

0800865c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008664:	4b04      	ldr	r3, [pc, #16]	; (8008678 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	4a03      	ldr	r2, [pc, #12]	; (8008678 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800866c:	6013      	str	r3, [r2, #0]
}
 800866e:	bf00      	nop
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	bc80      	pop	{r7}
 8008676:	4770      	bx	lr
 8008678:	20000bc4 	.word	0x20000bc4

0800867c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008680:	f000 fcb4 	bl	8008fec <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008688:	f000 fd12 	bl	80090b0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800868c:	f000 f8e4 	bl	8008858 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008690:	f000 fa06 	bl	8008aa0 <MX_GPIO_Init>
  MX_CAN_Init();
 8008694:	f000 f926 	bl	80088e4 <MX_CAN_Init>
  MX_I2C1_Init();
 8008698:	f000 f958 	bl	800894c <MX_I2C1_Init>
  MX_TIM1_Init();
 800869c:	f000 f984 	bl	80089a8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80086a0:	f000 f9d4 	bl	8008a4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80086a4:	2201      	movs	r2, #1
 80086a6:	2140      	movs	r1, #64	; 0x40
 80086a8:	485b      	ldr	r0, [pc, #364]	; (8008818 <main+0x19c>)
 80086aa:	f001 fae8 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80086ae:	2201      	movs	r2, #1
 80086b0:	2180      	movs	r1, #128	; 0x80
 80086b2:	4859      	ldr	r0, [pc, #356]	; (8008818 <main+0x19c>)
 80086b4:	f001 fae3 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80086b8:	200a      	movs	r0, #10
 80086ba:	f000 fcf9 	bl	80090b0 <HAL_Delay>
  lcd_init();
 80086be:	f7f8 f849 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 80086c2:	200a      	movs	r0, #10
 80086c4:	f000 fcf4 	bl	80090b0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80086c8:	4854      	ldr	r0, [pc, #336]	; (800881c <main+0x1a0>)
 80086ca:	f003 f98b 	bl	800b9e4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80086ce:	bf00      	nop
 80086d0:	4853      	ldr	r0, [pc, #332]	; (8008820 <main+0x1a4>)
 80086d2:	f002 f8e6 	bl	800a8a2 <HAL_I2C_GetError>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d0f9      	beq.n	80086d0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80086dc:	bf00      	nop
 80086de:	4850      	ldr	r0, [pc, #320]	; (8008820 <main+0x1a4>)
 80086e0:	f002 f8d2 	bl	800a888 <HAL_I2C_GetState>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d1f9      	bne.n	80086de <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80086ea:	2200      	movs	r2, #0
 80086ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086f0:	4849      	ldr	r0, [pc, #292]	; (8008818 <main+0x19c>)
 80086f2:	f001 fac4 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80086f6:	2200      	movs	r2, #0
 80086f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086fc:	4846      	ldr	r0, [pc, #280]	; (8008818 <main+0x19c>)
 80086fe:	f001 fabe 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008702:	2200      	movs	r2, #0
 8008704:	2104      	movs	r1, #4
 8008706:	4844      	ldr	r0, [pc, #272]	; (8008818 <main+0x19c>)
 8008708:	f001 fab9 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800870c:	2200      	movs	r2, #0
 800870e:	2102      	movs	r1, #2
 8008710:	4841      	ldr	r0, [pc, #260]	; (8008818 <main+0x19c>)
 8008712:	f001 fab4 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008716:	2200      	movs	r2, #0
 8008718:	2101      	movs	r1, #1
 800871a:	483f      	ldr	r0, [pc, #252]	; (8008818 <main+0x19c>)
 800871c:	f001 faaf 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008720:	2200      	movs	r2, #0
 8008722:	2120      	movs	r1, #32
 8008724:	483f      	ldr	r0, [pc, #252]	; (8008824 <main+0x1a8>)
 8008726:	f001 faaa 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800872a:	2200      	movs	r2, #0
 800872c:	2110      	movs	r1, #16
 800872e:	483d      	ldr	r0, [pc, #244]	; (8008824 <main+0x1a8>)
 8008730:	f001 faa5 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008734:	2200      	movs	r2, #0
 8008736:	2180      	movs	r1, #128	; 0x80
 8008738:	483b      	ldr	r0, [pc, #236]	; (8008828 <main+0x1ac>)
 800873a:	f001 faa0 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800873e:	2200      	movs	r2, #0
 8008740:	2140      	movs	r1, #64	; 0x40
 8008742:	4839      	ldr	r0, [pc, #228]	; (8008828 <main+0x1ac>)
 8008744:	f001 fa9b 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008748:	2200      	movs	r2, #0
 800874a:	2120      	movs	r1, #32
 800874c:	4836      	ldr	r0, [pc, #216]	; (8008828 <main+0x1ac>)
 800874e:	f001 fa96 	bl	8009c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008752:	2200      	movs	r2, #0
 8008754:	2110      	movs	r1, #16
 8008756:	4834      	ldr	r0, [pc, #208]	; (8008828 <main+0x1ac>)
 8008758:	f001 fa91 	bl	8009c7e <HAL_GPIO_WritePin>

  i2cTest();
 800875c:	f7fd fd38 	bl	80061d0 <i2cTest>
  HAL_Delay(100);
 8008760:	2064      	movs	r0, #100	; 0x64
 8008762:	f000 fca5 	bl	80090b0 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008766:	4a31      	ldr	r2, [pc, #196]	; (800882c <main+0x1b0>)
 8008768:	2101      	movs	r1, #1
 800876a:	2001      	movs	r0, #1
 800876c:	f7f8 f824 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008770:	4a2f      	ldr	r2, [pc, #188]	; (8008830 <main+0x1b4>)
 8008772:	2101      	movs	r1, #1
 8008774:	2002      	movs	r0, #2
 8008776:	f7f8 f81f 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 800877a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800877e:	f000 fc97 	bl	80090b0 <HAL_Delay>
  lcd_clear();
 8008782:	f7f8 f845 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 8008786:	2000      	movs	r0, #0
 8008788:	f7fd f98e 	bl	8005aa8 <eepromKontrol>

  if(strlen(machineID) == 0) {
 800878c:	4b29      	ldr	r3, [pc, #164]	; (8008834 <main+0x1b8>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <main+0x120>
	  takeMachineID(1, &hi2c1);
 8008794:	4922      	ldr	r1, [pc, #136]	; (8008820 <main+0x1a4>)
 8008796:	2001      	movs	r0, #1
 8008798:	f7f8 faba 	bl	8000d10 <takeMachineID>
  }

  lcd_clear();
 800879c:	f7f8 f838 	bl	8000810 <lcd_clear>
  HAL_Delay(500);
 80087a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087a4:	f000 fc84 	bl	80090b0 <HAL_Delay>

  if(iotMode == 1) {
 80087a8:	4b23      	ldr	r3, [pc, #140]	; (8008838 <main+0x1bc>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d126      	bne.n	80087fe <main+0x182>
	  if(strlen(wifiSSID) == 0) {
 80087b0:	4b22      	ldr	r3, [pc, #136]	; (800883c <main+0x1c0>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <main+0x142>
		  takeWifiSSID(1);
 80087b8:	2001      	movs	r0, #1
 80087ba:	f7f8 fbbd 	bl	8000f38 <takeWifiSSID>
	  }

	  lcd_clear();
 80087be:	f7f8 f827 	bl	8000810 <lcd_clear>
	  HAL_Delay(500);
 80087c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087c6:	f000 fc73 	bl	80090b0 <HAL_Delay>

	  if(strlen(wifiPass) == 0) {
 80087ca:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <main+0x1c4>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <main+0x15c>
		  takeWifiPass(1);
 80087d2:	2001      	movs	r0, #1
 80087d4:	f7f8 fd2c 	bl	8001230 <takeWifiPass>
	  }

	  lcd_print(1, 1, "Wifi Ayarlaniyor");
 80087d8:	4a1a      	ldr	r2, [pc, #104]	; (8008844 <main+0x1c8>)
 80087da:	2101      	movs	r1, #1
 80087dc:	2001      	movs	r0, #1
 80087de:	f7f7 ffeb 	bl	80007b8 <lcd_print>
	  lcd_print(2, 1, "Lutfen Bekleyin ");
 80087e2:	4a19      	ldr	r2, [pc, #100]	; (8008848 <main+0x1cc>)
 80087e4:	2101      	movs	r1, #1
 80087e6:	2002      	movs	r0, #2
 80087e8:	f7f7 ffe6 	bl	80007b8 <lcd_print>
	  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 80087ec:	4a14      	ldr	r2, [pc, #80]	; (8008840 <main+0x1c4>)
 80087ee:	4913      	ldr	r1, [pc, #76]	; (800883c <main+0x1c0>)
 80087f0:	4816      	ldr	r0, [pc, #88]	; (800884c <main+0x1d0>)
 80087f2:	f7f7 fd1f 	bl	8000234 <ESP8266_Init>
	  HAL_Delay(500);
 80087f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087fa:	f000 fc59 	bl	80090b0 <HAL_Delay>
	  takeMachineID(0);
	  HAL_Delay(300);
	  idKontrol = checkMachineID(&huart1, machineID);
  }*/

  lcd_clear();
 80087fe:	f7f8 f807 	bl	8000810 <lcd_clear>
  HAL_Delay(200);
 8008802:	20c8      	movs	r0, #200	; 0xc8
 8008804:	f000 fc54 	bl	80090b0 <HAL_Delay>

  backLightTimer = millis;
 8008808:	4b11      	ldr	r3, [pc, #68]	; (8008850 <main+0x1d4>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a11      	ldr	r2, [pc, #68]	; (8008854 <main+0x1d8>)
 800880e:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008810:	f7ff fd8c 	bl	800832c <mainLoop>
 8008814:	e7fc      	b.n	8008810 <main+0x194>
 8008816:	bf00      	nop
 8008818:	40010c00 	.word	0x40010c00
 800881c:	20000e4c 	.word	0x20000e4c
 8008820:	20000df8 	.word	0x20000df8
 8008824:	40011000 	.word	0x40011000
 8008828:	40010800 	.word	0x40010800
 800882c:	0800e51c 	.word	0x0800e51c
 8008830:	0800e530 	.word	0x0800e530
 8008834:	20000be4 	.word	0x20000be4
 8008838:	20000c58 	.word	0x20000c58
 800883c:	20000bf0 	.word	0x20000bf0
 8008840:	20000c14 	.word	0x20000c14
 8008844:	0800e544 	.word	0x0800e544
 8008848:	0800e558 	.word	0x0800e558
 800884c:	20000e94 	.word	0x20000e94
 8008850:	20000bc4 	.word	0x20000bc4
 8008854:	20000be0 	.word	0x20000be0

08008858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b090      	sub	sp, #64	; 0x40
 800885c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800885e:	f107 0318 	add.w	r3, r7, #24
 8008862:	2228      	movs	r2, #40	; 0x28
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f004 fb36 	bl	800ced8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800886c:	1d3b      	adds	r3, r7, #4
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	605a      	str	r2, [r3, #4]
 8008874:	609a      	str	r2, [r3, #8]
 8008876:	60da      	str	r2, [r3, #12]
 8008878:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800887a:	2301      	movs	r3, #1
 800887c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800887e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008882:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008884:	2300      	movs	r3, #0
 8008886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008888:	2301      	movs	r3, #1
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800888c:	2302      	movs	r3, #2
 800888e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008896:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800889c:	f107 0318 	add.w	r3, r7, #24
 80088a0:	4618      	mov	r0, r3
 80088a2:	f002 fc3f 	bl	800b124 <HAL_RCC_OscConfig>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80088ac:	f000 f9a2 	bl	8008bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088b0:	230f      	movs	r3, #15
 80088b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088b4:	2302      	movs	r3, #2
 80088b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80088bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80088c6:	1d3b      	adds	r3, r7, #4
 80088c8:	2102      	movs	r1, #2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f002 feac 	bl	800b628 <HAL_RCC_ClockConfig>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80088d6:	f000 f98d 	bl	8008bf4 <Error_Handler>
  }
}
 80088da:	bf00      	nop
 80088dc:	3740      	adds	r7, #64	; 0x40
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80088e8:	4b16      	ldr	r3, [pc, #88]	; (8008944 <MX_CAN_Init+0x60>)
 80088ea:	4a17      	ldr	r2, [pc, #92]	; (8008948 <MX_CAN_Init+0x64>)
 80088ec:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <MX_CAN_Init+0x60>)
 80088f0:	2210      	movs	r2, #16
 80088f2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80088f4:	4b13      	ldr	r3, [pc, #76]	; (8008944 <MX_CAN_Init+0x60>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80088fa:	4b12      	ldr	r3, [pc, #72]	; (8008944 <MX_CAN_Init+0x60>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008900:	4b10      	ldr	r3, [pc, #64]	; (8008944 <MX_CAN_Init+0x60>)
 8008902:	2200      	movs	r2, #0
 8008904:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008906:	4b0f      	ldr	r3, [pc, #60]	; (8008944 <MX_CAN_Init+0x60>)
 8008908:	2200      	movs	r2, #0
 800890a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800890c:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <MX_CAN_Init+0x60>)
 800890e:	2200      	movs	r2, #0
 8008910:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <MX_CAN_Init+0x60>)
 8008914:	2200      	movs	r2, #0
 8008916:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008918:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <MX_CAN_Init+0x60>)
 800891a:	2200      	movs	r2, #0
 800891c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800891e:	4b09      	ldr	r3, [pc, #36]	; (8008944 <MX_CAN_Init+0x60>)
 8008920:	2200      	movs	r2, #0
 8008922:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008924:	4b07      	ldr	r3, [pc, #28]	; (8008944 <MX_CAN_Init+0x60>)
 8008926:	2200      	movs	r2, #0
 8008928:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <MX_CAN_Init+0x60>)
 800892c:	2200      	movs	r2, #0
 800892e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008930:	4804      	ldr	r0, [pc, #16]	; (8008944 <MX_CAN_Init+0x60>)
 8008932:	f000 fbe1 	bl	80090f8 <HAL_CAN_Init>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800893c:	f000 f95a 	bl	8008bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008940:	bf00      	nop
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20000dd0 	.word	0x20000dd0
 8008948:	40006400 	.word	0x40006400

0800894c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008950:	4b12      	ldr	r3, [pc, #72]	; (800899c <MX_I2C1_Init+0x50>)
 8008952:	4a13      	ldr	r2, [pc, #76]	; (80089a0 <MX_I2C1_Init+0x54>)
 8008954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008956:	4b11      	ldr	r3, [pc, #68]	; (800899c <MX_I2C1_Init+0x50>)
 8008958:	4a12      	ldr	r2, [pc, #72]	; (80089a4 <MX_I2C1_Init+0x58>)
 800895a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800895c:	4b0f      	ldr	r3, [pc, #60]	; (800899c <MX_I2C1_Init+0x50>)
 800895e:	2200      	movs	r2, #0
 8008960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <MX_I2C1_Init+0x50>)
 8008964:	2200      	movs	r2, #0
 8008966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008968:	4b0c      	ldr	r3, [pc, #48]	; (800899c <MX_I2C1_Init+0x50>)
 800896a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800896e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008970:	4b0a      	ldr	r3, [pc, #40]	; (800899c <MX_I2C1_Init+0x50>)
 8008972:	2200      	movs	r2, #0
 8008974:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008976:	4b09      	ldr	r3, [pc, #36]	; (800899c <MX_I2C1_Init+0x50>)
 8008978:	2200      	movs	r2, #0
 800897a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800897c:	4b07      	ldr	r3, [pc, #28]	; (800899c <MX_I2C1_Init+0x50>)
 800897e:	2200      	movs	r2, #0
 8008980:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <MX_I2C1_Init+0x50>)
 8008984:	2200      	movs	r2, #0
 8008986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008988:	4804      	ldr	r0, [pc, #16]	; (800899c <MX_I2C1_Init+0x50>)
 800898a:	f001 f9a9 	bl	8009ce0 <HAL_I2C_Init>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008994:	f000 f92e 	bl	8008bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008998:	bf00      	nop
 800899a:	bd80      	pop	{r7, pc}
 800899c:	20000df8 	.word	0x20000df8
 80089a0:	40005400 	.word	0x40005400
 80089a4:	00061a80 	.word	0x00061a80

080089a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089ae:	f107 0308 	add.w	r3, r7, #8
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	605a      	str	r2, [r3, #4]
 80089b8:	609a      	str	r2, [r3, #8]
 80089ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089bc:	463b      	mov	r3, r7
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80089c4:	4b1f      	ldr	r3, [pc, #124]	; (8008a44 <MX_TIM1_Init+0x9c>)
 80089c6:	4a20      	ldr	r2, [pc, #128]	; (8008a48 <MX_TIM1_Init+0xa0>)
 80089c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80089ca:	4b1e      	ldr	r3, [pc, #120]	; (8008a44 <MX_TIM1_Init+0x9c>)
 80089cc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80089d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089d2:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <MX_TIM1_Init+0x9c>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80089d8:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <MX_TIM1_Init+0x9c>)
 80089da:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80089de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089e0:	4b18      	ldr	r3, [pc, #96]	; (8008a44 <MX_TIM1_Init+0x9c>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80089e6:	4b17      	ldr	r3, [pc, #92]	; (8008a44 <MX_TIM1_Init+0x9c>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089ec:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <MX_TIM1_Init+0x9c>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80089f2:	4814      	ldr	r0, [pc, #80]	; (8008a44 <MX_TIM1_Init+0x9c>)
 80089f4:	f002 ffa6 	bl	800b944 <HAL_TIM_Base_Init>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80089fe:	f000 f8f9 	bl	8008bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008a08:	f107 0308 	add.w	r3, r7, #8
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	480d      	ldr	r0, [pc, #52]	; (8008a44 <MX_TIM1_Init+0x9c>)
 8008a10:	f003 f950 	bl	800bcb4 <HAL_TIM_ConfigClockSource>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008a1a:	f000 f8eb 	bl	8008bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a22:	2300      	movs	r3, #0
 8008a24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008a26:	463b      	mov	r3, r7
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4806      	ldr	r0, [pc, #24]	; (8008a44 <MX_TIM1_Init+0x9c>)
 8008a2c:	f003 fb3e 	bl	800c0ac <HAL_TIMEx_MasterConfigSynchronization>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008a36:	f000 f8dd 	bl	8008bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008a3a:	bf00      	nop
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000e4c 	.word	0x20000e4c
 8008a48:	40012c00 	.word	0x40012c00

08008a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a50:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <MX_USART1_UART_Init+0x4c>)
 8008a52:	4a12      	ldr	r2, [pc, #72]	; (8008a9c <MX_USART1_UART_Init+0x50>)
 8008a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a56:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <MX_USART1_UART_Init+0x4c>)
 8008a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a5e:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <MX_USART1_UART_Init+0x4c>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008a64:	4b0c      	ldr	r3, [pc, #48]	; (8008a98 <MX_USART1_UART_Init+0x4c>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008a6a:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <MX_USART1_UART_Init+0x4c>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008a70:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <MX_USART1_UART_Init+0x4c>)
 8008a72:	220c      	movs	r2, #12
 8008a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a76:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <MX_USART1_UART_Init+0x4c>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <MX_USART1_UART_Init+0x4c>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008a82:	4805      	ldr	r0, [pc, #20]	; (8008a98 <MX_USART1_UART_Init+0x4c>)
 8008a84:	f003 fb90 	bl	800c1a8 <HAL_UART_Init>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008a8e:	f000 f8b1 	bl	8008bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008a92:	bf00      	nop
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000e94 	.word	0x20000e94
 8008a9c:	40013800 	.word	0x40013800

08008aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aa6:	f107 0310 	add.w	r3, r7, #16
 8008aaa:	2200      	movs	r2, #0
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	605a      	str	r2, [r3, #4]
 8008ab0:	609a      	str	r2, [r3, #8]
 8008ab2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ab4:	4b4b      	ldr	r3, [pc, #300]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	4a4a      	ldr	r2, [pc, #296]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008aba:	f043 0310 	orr.w	r3, r3, #16
 8008abe:	6193      	str	r3, [r2, #24]
 8008ac0:	4b48      	ldr	r3, [pc, #288]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f003 0310 	and.w	r3, r3, #16
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008acc:	4b45      	ldr	r3, [pc, #276]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	4a44      	ldr	r2, [pc, #272]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008ad2:	f043 0320 	orr.w	r3, r3, #32
 8008ad6:	6193      	str	r3, [r2, #24]
 8008ad8:	4b42      	ldr	r3, [pc, #264]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	f003 0320 	and.w	r3, r3, #32
 8008ae0:	60bb      	str	r3, [r7, #8]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ae4:	4b3f      	ldr	r3, [pc, #252]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	4a3e      	ldr	r2, [pc, #248]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008aea:	f043 0304 	orr.w	r3, r3, #4
 8008aee:	6193      	str	r3, [r2, #24]
 8008af0:	4b3c      	ldr	r3, [pc, #240]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	607b      	str	r3, [r7, #4]
 8008afa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008afc:	4b39      	ldr	r3, [pc, #228]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	4a38      	ldr	r2, [pc, #224]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008b02:	f043 0308 	orr.w	r3, r3, #8
 8008b06:	6193      	str	r3, [r2, #24]
 8008b08:	4b36      	ldr	r3, [pc, #216]	; (8008be4 <MX_GPIO_Init+0x144>)
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	603b      	str	r3, [r7, #0]
 8008b12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008b14:	2200      	movs	r2, #0
 8008b16:	21f0      	movs	r1, #240	; 0xf0
 8008b18:	4833      	ldr	r0, [pc, #204]	; (8008be8 <MX_GPIO_Init+0x148>)
 8008b1a:	f001 f8b0 	bl	8009c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f241 0130 	movw	r1, #4144	; 0x1030
 8008b24:	4831      	ldr	r0, [pc, #196]	; (8008bec <MX_GPIO_Init+0x14c>)
 8008b26:	f001 f8aa 	bl	8009c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008b30:	482f      	ldr	r0, [pc, #188]	; (8008bf0 <MX_GPIO_Init+0x150>)
 8008b32:	f001 f8a4 	bl	8009c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008b36:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008b3a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b44:	f107 0310 	add.w	r3, r7, #16
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4828      	ldr	r0, [pc, #160]	; (8008bec <MX_GPIO_Init+0x14c>)
 8008b4c:	f000 fe20 	bl	8009790 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008b50:	f248 130f 	movw	r3, #33039	; 0x810f
 8008b54:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b56:	2300      	movs	r3, #0
 8008b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b5e:	f107 0310 	add.w	r3, r7, #16
 8008b62:	4619      	mov	r1, r3
 8008b64:	4820      	ldr	r0, [pc, #128]	; (8008be8 <MX_GPIO_Init+0x148>)
 8008b66:	f000 fe13 	bl	8009790 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008b6a:	23f0      	movs	r3, #240	; 0xf0
 8008b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b76:	2302      	movs	r3, #2
 8008b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b7a:	f107 0310 	add.w	r3, r7, #16
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4819      	ldr	r0, [pc, #100]	; (8008be8 <MX_GPIO_Init+0x148>)
 8008b82:	f000 fe05 	bl	8009790 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008b86:	f241 0330 	movw	r3, #4144	; 0x1030
 8008b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b94:	2302      	movs	r3, #2
 8008b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b98:	f107 0310 	add.w	r3, r7, #16
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4813      	ldr	r0, [pc, #76]	; (8008bec <MX_GPIO_Init+0x14c>)
 8008ba0:	f000 fdf6 	bl	8009790 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008ba4:	f640 4307 	movw	r3, #3079	; 0xc07
 8008ba8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008baa:	2301      	movs	r3, #1
 8008bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bb6:	f107 0310 	add.w	r3, r7, #16
 8008bba:	4619      	mov	r1, r3
 8008bbc:	480c      	ldr	r0, [pc, #48]	; (8008bf0 <MX_GPIO_Init+0x150>)
 8008bbe:	f000 fde7 	bl	8009790 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008bc2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bd0:	f107 0310 	add.w	r3, r7, #16
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4806      	ldr	r0, [pc, #24]	; (8008bf0 <MX_GPIO_Init+0x150>)
 8008bd8:	f000 fdda 	bl	8009790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008bdc:	bf00      	nop
 8008bde:	3720      	adds	r7, #32
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	40021000 	.word	0x40021000
 8008be8:	40010800 	.word	0x40010800
 8008bec:	40011000 	.word	0x40011000
 8008bf0:	40010c00 	.word	0x40010c00

08008bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008bf8:	bf00      	nop
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bc80      	pop	{r7}
 8008bfe:	4770      	bx	lr

08008c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c06:	4b15      	ldr	r3, [pc, #84]	; (8008c5c <HAL_MspInit+0x5c>)
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	4a14      	ldr	r2, [pc, #80]	; (8008c5c <HAL_MspInit+0x5c>)
 8008c0c:	f043 0301 	orr.w	r3, r3, #1
 8008c10:	6193      	str	r3, [r2, #24]
 8008c12:	4b12      	ldr	r3, [pc, #72]	; (8008c5c <HAL_MspInit+0x5c>)
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	60bb      	str	r3, [r7, #8]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c1e:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <HAL_MspInit+0x5c>)
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	4a0e      	ldr	r2, [pc, #56]	; (8008c5c <HAL_MspInit+0x5c>)
 8008c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c28:	61d3      	str	r3, [r2, #28]
 8008c2a:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <HAL_MspInit+0x5c>)
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c32:	607b      	str	r3, [r7, #4]
 8008c34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c36:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <HAL_MspInit+0x60>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	4a04      	ldr	r2, [pc, #16]	; (8008c60 <HAL_MspInit+0x60>)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bc80      	pop	{r7}
 8008c5a:	4770      	bx	lr
 8008c5c:	40021000 	.word	0x40021000
 8008c60:	40010000 	.word	0x40010000

08008c64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c6c:	f107 0310 	add.w	r3, r7, #16
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	605a      	str	r2, [r3, #4]
 8008c76:	609a      	str	r2, [r3, #8]
 8008c78:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a1c      	ldr	r2, [pc, #112]	; (8008cf0 <HAL_CAN_MspInit+0x8c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d131      	bne.n	8008ce8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008c84:	4b1b      	ldr	r3, [pc, #108]	; (8008cf4 <HAL_CAN_MspInit+0x90>)
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	4a1a      	ldr	r2, [pc, #104]	; (8008cf4 <HAL_CAN_MspInit+0x90>)
 8008c8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c8e:	61d3      	str	r3, [r2, #28]
 8008c90:	4b18      	ldr	r3, [pc, #96]	; (8008cf4 <HAL_CAN_MspInit+0x90>)
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c9c:	4b15      	ldr	r3, [pc, #84]	; (8008cf4 <HAL_CAN_MspInit+0x90>)
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	4a14      	ldr	r2, [pc, #80]	; (8008cf4 <HAL_CAN_MspInit+0x90>)
 8008ca2:	f043 0304 	orr.w	r3, r3, #4
 8008ca6:	6193      	str	r3, [r2, #24]
 8008ca8:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <HAL_CAN_MspInit+0x90>)
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	60bb      	str	r3, [r7, #8]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cc2:	f107 0310 	add.w	r3, r7, #16
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	480b      	ldr	r0, [pc, #44]	; (8008cf8 <HAL_CAN_MspInit+0x94>)
 8008cca:	f000 fd61 	bl	8009790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cdc:	f107 0310 	add.w	r3, r7, #16
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4805      	ldr	r0, [pc, #20]	; (8008cf8 <HAL_CAN_MspInit+0x94>)
 8008ce4:	f000 fd54 	bl	8009790 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008ce8:	bf00      	nop
 8008cea:	3720      	adds	r7, #32
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40006400 	.word	0x40006400
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	40010800 	.word	0x40010800

08008cfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d04:	f107 0310 	add.w	r3, r7, #16
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	605a      	str	r2, [r3, #4]
 8008d0e:	609a      	str	r2, [r3, #8]
 8008d10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a15      	ldr	r2, [pc, #84]	; (8008d6c <HAL_I2C_MspInit+0x70>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d123      	bne.n	8008d64 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d1c:	4b14      	ldr	r3, [pc, #80]	; (8008d70 <HAL_I2C_MspInit+0x74>)
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	4a13      	ldr	r2, [pc, #76]	; (8008d70 <HAL_I2C_MspInit+0x74>)
 8008d22:	f043 0308 	orr.w	r3, r3, #8
 8008d26:	6193      	str	r3, [r2, #24]
 8008d28:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <HAL_I2C_MspInit+0x74>)
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	f003 0308 	and.w	r3, r3, #8
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d34:	23c0      	movs	r3, #192	; 0xc0
 8008d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d38:	2312      	movs	r3, #18
 8008d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d40:	f107 0310 	add.w	r3, r7, #16
 8008d44:	4619      	mov	r1, r3
 8008d46:	480b      	ldr	r0, [pc, #44]	; (8008d74 <HAL_I2C_MspInit+0x78>)
 8008d48:	f000 fd22 	bl	8009790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d4c:	4b08      	ldr	r3, [pc, #32]	; (8008d70 <HAL_I2C_MspInit+0x74>)
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	4a07      	ldr	r2, [pc, #28]	; (8008d70 <HAL_I2C_MspInit+0x74>)
 8008d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d56:	61d3      	str	r3, [r2, #28]
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <HAL_I2C_MspInit+0x74>)
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d60:	60bb      	str	r3, [r7, #8]
 8008d62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008d64:	bf00      	nop
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	40005400 	.word	0x40005400
 8008d70:	40021000 	.word	0x40021000
 8008d74:	40010c00 	.word	0x40010c00

08008d78 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a0a      	ldr	r2, [pc, #40]	; (8008db0 <HAL_I2C_MspDeInit+0x38>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d10d      	bne.n	8008da6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <HAL_I2C_MspDeInit+0x3c>)
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <HAL_I2C_MspDeInit+0x3c>)
 8008d90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d94:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008d96:	2140      	movs	r1, #64	; 0x40
 8008d98:	4807      	ldr	r0, [pc, #28]	; (8008db8 <HAL_I2C_MspDeInit+0x40>)
 8008d9a:	f000 fe8d 	bl	8009ab8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008d9e:	2180      	movs	r1, #128	; 0x80
 8008da0:	4805      	ldr	r0, [pc, #20]	; (8008db8 <HAL_I2C_MspDeInit+0x40>)
 8008da2:	f000 fe89 	bl	8009ab8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	40005400 	.word	0x40005400
 8008db4:	40021000 	.word	0x40021000
 8008db8:	40010c00 	.word	0x40010c00

08008dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a0d      	ldr	r2, [pc, #52]	; (8008e00 <HAL_TIM_Base_MspInit+0x44>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d113      	bne.n	8008df6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008dce:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <HAL_TIM_Base_MspInit+0x48>)
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	4a0c      	ldr	r2, [pc, #48]	; (8008e04 <HAL_TIM_Base_MspInit+0x48>)
 8008dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008dd8:	6193      	str	r3, [r2, #24]
 8008dda:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <HAL_TIM_Base_MspInit+0x48>)
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008de6:	2200      	movs	r2, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	2019      	movs	r0, #25
 8008dec:	f000 fb57 	bl	800949e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008df0:	2019      	movs	r0, #25
 8008df2:	f000 fb70 	bl	80094d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	40012c00 	.word	0x40012c00
 8008e04:	40021000 	.word	0x40021000

08008e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e10:	f107 0310 	add.w	r3, r7, #16
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	605a      	str	r2, [r3, #4]
 8008e1a:	609a      	str	r2, [r3, #8]
 8008e1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a20      	ldr	r2, [pc, #128]	; (8008ea4 <HAL_UART_MspInit+0x9c>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d139      	bne.n	8008e9c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e28:	4b1f      	ldr	r3, [pc, #124]	; (8008ea8 <HAL_UART_MspInit+0xa0>)
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	4a1e      	ldr	r2, [pc, #120]	; (8008ea8 <HAL_UART_MspInit+0xa0>)
 8008e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e32:	6193      	str	r3, [r2, #24]
 8008e34:	4b1c      	ldr	r3, [pc, #112]	; (8008ea8 <HAL_UART_MspInit+0xa0>)
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e3c:	60fb      	str	r3, [r7, #12]
 8008e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <HAL_UART_MspInit+0xa0>)
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <HAL_UART_MspInit+0xa0>)
 8008e46:	f043 0304 	orr.w	r3, r3, #4
 8008e4a:	6193      	str	r3, [r2, #24]
 8008e4c:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <HAL_UART_MspInit+0xa0>)
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	60bb      	str	r3, [r7, #8]
 8008e56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e62:	2303      	movs	r3, #3
 8008e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e66:	f107 0310 	add.w	r3, r7, #16
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	480f      	ldr	r0, [pc, #60]	; (8008eac <HAL_UART_MspInit+0xa4>)
 8008e6e:	f000 fc8f 	bl	8009790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e80:	f107 0310 	add.w	r3, r7, #16
 8008e84:	4619      	mov	r1, r3
 8008e86:	4809      	ldr	r0, [pc, #36]	; (8008eac <HAL_UART_MspInit+0xa4>)
 8008e88:	f000 fc82 	bl	8009790 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	2025      	movs	r0, #37	; 0x25
 8008e92:	f000 fb04 	bl	800949e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008e96:	2025      	movs	r0, #37	; 0x25
 8008e98:	f000 fb1d 	bl	80094d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008e9c:	bf00      	nop
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40013800 	.word	0x40013800
 8008ea8:	40021000 	.word	0x40021000
 8008eac:	40010800 	.word	0x40010800

08008eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008eb4:	e7fe      	b.n	8008eb4 <NMI_Handler+0x4>

08008eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008eba:	e7fe      	b.n	8008eba <HardFault_Handler+0x4>

08008ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ec0:	e7fe      	b.n	8008ec0 <MemManage_Handler+0x4>

08008ec2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ec6:	e7fe      	b.n	8008ec6 <BusFault_Handler+0x4>

08008ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ecc:	e7fe      	b.n	8008ecc <UsageFault_Handler+0x4>

08008ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ed2:	bf00      	nop
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bc80      	pop	{r7}
 8008ed8:	4770      	bx	lr

08008eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008eda:	b480      	push	{r7}
 8008edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ede:	bf00      	nop
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008eea:	bf00      	nop
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bc80      	pop	{r7}
 8008ef0:	4770      	bx	lr

08008ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ef6:	f000 f8bf 	bl	8009078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008efa:	bf00      	nop
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008f04:	4802      	ldr	r0, [pc, #8]	; (8008f10 <TIM1_UP_IRQHandler+0x10>)
 8008f06:	f002 fdcd 	bl	800baa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008f0a:	bf00      	nop
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000e4c 	.word	0x20000e4c

08008f14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008f18:	4802      	ldr	r0, [pc, #8]	; (8008f24 <USART1_IRQHandler+0x10>)
 8008f1a:	f003 f9cb 	bl	800c2b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008f1e:	bf00      	nop
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000e94 	.word	0x20000e94

08008f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f30:	4a14      	ldr	r2, [pc, #80]	; (8008f84 <_sbrk+0x5c>)
 8008f32:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <_sbrk+0x60>)
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f3c:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <_sbrk+0x64>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d102      	bne.n	8008f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f44:	4b11      	ldr	r3, [pc, #68]	; (8008f8c <_sbrk+0x64>)
 8008f46:	4a12      	ldr	r2, [pc, #72]	; (8008f90 <_sbrk+0x68>)
 8008f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f4a:	4b10      	ldr	r3, [pc, #64]	; (8008f8c <_sbrk+0x64>)
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d207      	bcs.n	8008f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f58:	f003 ffe6 	bl	800cf28 <__errno>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	220c      	movs	r2, #12
 8008f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
 8008f66:	e009      	b.n	8008f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008f68:	4b08      	ldr	r3, [pc, #32]	; (8008f8c <_sbrk+0x64>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008f6e:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <_sbrk+0x64>)
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4413      	add	r3, r2
 8008f76:	4a05      	ldr	r2, [pc, #20]	; (8008f8c <_sbrk+0x64>)
 8008f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	2000c000 	.word	0x2000c000
 8008f88:	00000400 	.word	0x00000400
 8008f8c:	20000edc 	.word	0x20000edc
 8008f90:	20001030 	.word	0x20001030

08008f94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008f98:	bf00      	nop
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bc80      	pop	{r7}
 8008f9e:	4770      	bx	lr

08008fa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fa0:	480c      	ldr	r0, [pc, #48]	; (8008fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008fa2:	490d      	ldr	r1, [pc, #52]	; (8008fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008fa4:	4a0d      	ldr	r2, [pc, #52]	; (8008fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fa8:	e002      	b.n	8008fb0 <LoopCopyDataInit>

08008faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fae:	3304      	adds	r3, #4

08008fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fb4:	d3f9      	bcc.n	8008faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008fb8:	4c0a      	ldr	r4, [pc, #40]	; (8008fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008fbc:	e001      	b.n	8008fc2 <LoopFillZerobss>

08008fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008fc0:	3204      	adds	r2, #4

08008fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008fc4:	d3fb      	bcc.n	8008fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008fc6:	f7ff ffe5 	bl	8008f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008fca:	f003 ffb3 	bl	800cf34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008fce:	f7ff fb55 	bl	800867c <main>
  bx lr
 8008fd2:	4770      	bx	lr
  ldr r0, =_sdata
 8008fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008fd8:	20000a10 	.word	0x20000a10
  ldr r2, =_sidata
 8008fdc:	0800e5f8 	.word	0x0800e5f8
  ldr r2, =_sbss
 8008fe0:	20000a10 	.word	0x20000a10
  ldr r4, =_ebss
 8008fe4:	2000102c 	.word	0x2000102c

08008fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008fe8:	e7fe      	b.n	8008fe8 <ADC1_2_IRQHandler>
	...

08008fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ff0:	4b08      	ldr	r3, [pc, #32]	; (8009014 <HAL_Init+0x28>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a07      	ldr	r2, [pc, #28]	; (8009014 <HAL_Init+0x28>)
 8008ff6:	f043 0310 	orr.w	r3, r3, #16
 8008ffa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ffc:	2003      	movs	r0, #3
 8008ffe:	f000 fa43 	bl	8009488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009002:	200f      	movs	r0, #15
 8009004:	f000 f808 	bl	8009018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009008:	f7ff fdfa 	bl	8008c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	40022000 	.word	0x40022000

08009018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009020:	4b12      	ldr	r3, [pc, #72]	; (800906c <HAL_InitTick+0x54>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	4b12      	ldr	r3, [pc, #72]	; (8009070 <HAL_InitTick+0x58>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	4619      	mov	r1, r3
 800902a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800902e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009032:	fbb2 f3f3 	udiv	r3, r2, r3
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fa5b 	bl	80094f2 <HAL_SYSTICK_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e00e      	b.n	8009064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b0f      	cmp	r3, #15
 800904a:	d80a      	bhi.n	8009062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800904c:	2200      	movs	r2, #0
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	f04f 30ff 	mov.w	r0, #4294967295
 8009054:	f000 fa23 	bl	800949e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009058:	4a06      	ldr	r2, [pc, #24]	; (8009074 <HAL_InitTick+0x5c>)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	e000      	b.n	8009064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	200009b4 	.word	0x200009b4
 8009070:	200009bc 	.word	0x200009bc
 8009074:	200009b8 	.word	0x200009b8

08009078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <HAL_IncTick+0x1c>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	4b05      	ldr	r3, [pc, #20]	; (8009098 <HAL_IncTick+0x20>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4413      	add	r3, r2
 8009088:	4a03      	ldr	r2, [pc, #12]	; (8009098 <HAL_IncTick+0x20>)
 800908a:	6013      	str	r3, [r2, #0]
}
 800908c:	bf00      	nop
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr
 8009094:	200009bc 	.word	0x200009bc
 8009098:	20000ee0 	.word	0x20000ee0

0800909c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
  return uwTick;
 80090a0:	4b02      	ldr	r3, [pc, #8]	; (80090ac <HAL_GetTick+0x10>)
 80090a2:	681b      	ldr	r3, [r3, #0]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bc80      	pop	{r7}
 80090aa:	4770      	bx	lr
 80090ac:	20000ee0 	.word	0x20000ee0

080090b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090b8:	f7ff fff0 	bl	800909c <HAL_GetTick>
 80090bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d005      	beq.n	80090d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80090ca:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <HAL_Delay+0x44>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80090d6:	bf00      	nop
 80090d8:	f7ff ffe0 	bl	800909c <HAL_GetTick>
 80090dc:	4602      	mov	r2, r0
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d8f7      	bhi.n	80090d8 <HAL_Delay+0x28>
  {
  }
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	200009bc 	.word	0x200009bc

080090f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e0ed      	b.n	80092e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff fda4 	bl	8008c64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f042 0201 	orr.w	r2, r2, #1
 800912a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800912c:	f7ff ffb6 	bl	800909c <HAL_GetTick>
 8009130:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009132:	e012      	b.n	800915a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009134:	f7ff ffb2 	bl	800909c <HAL_GetTick>
 8009138:	4602      	mov	r2, r0
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	2b0a      	cmp	r3, #10
 8009140:	d90b      	bls.n	800915a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2205      	movs	r2, #5
 8009152:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e0c5      	b.n	80092e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0e5      	beq.n	8009134 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 0202 	bic.w	r2, r2, #2
 8009176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009178:	f7ff ff90 	bl	800909c <HAL_GetTick>
 800917c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800917e:	e012      	b.n	80091a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009180:	f7ff ff8c 	bl	800909c <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b0a      	cmp	r3, #10
 800918c:	d90b      	bls.n	80091a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2205      	movs	r2, #5
 800919e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e09f      	b.n	80092e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f003 0302 	and.w	r3, r3, #2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e5      	bne.n	8009180 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7e1b      	ldrb	r3, [r3, #24]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d108      	bne.n	80091ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	e007      	b.n	80091de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	7e5b      	ldrb	r3, [r3, #25]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d108      	bne.n	80091f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	e007      	b.n	8009208 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009206:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	7e9b      	ldrb	r3, [r3, #26]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d108      	bne.n	8009222 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f042 0220 	orr.w	r2, r2, #32
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	e007      	b.n	8009232 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0220 	bic.w	r2, r2, #32
 8009230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7edb      	ldrb	r3, [r3, #27]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d108      	bne.n	800924c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0210 	bic.w	r2, r2, #16
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e007      	b.n	800925c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0210 	orr.w	r2, r2, #16
 800925a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7f1b      	ldrb	r3, [r3, #28]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d108      	bne.n	8009276 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0208 	orr.w	r2, r2, #8
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	e007      	b.n	8009286 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0208 	bic.w	r2, r2, #8
 8009284:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	7f5b      	ldrb	r3, [r3, #29]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d108      	bne.n	80092a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 0204 	orr.w	r2, r2, #4
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e007      	b.n	80092b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0204 	bic.w	r2, r2, #4
 80092ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	431a      	orrs	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	ea42 0103 	orr.w	r1, r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	1e5a      	subs	r2, r3, #1
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <__NVIC_SetPriorityGrouping>:
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f003 0307 	and.w	r3, r3, #7
 80092fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009300:	4b0c      	ldr	r3, [pc, #48]	; (8009334 <__NVIC_SetPriorityGrouping+0x44>)
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800930c:	4013      	ands	r3, r2
 800930e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800931c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009322:	4a04      	ldr	r2, [pc, #16]	; (8009334 <__NVIC_SetPriorityGrouping+0x44>)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	60d3      	str	r3, [r2, #12]
}
 8009328:	bf00      	nop
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	e000ed00 	.word	0xe000ed00

08009338 <__NVIC_GetPriorityGrouping>:
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800933c:	4b04      	ldr	r3, [pc, #16]	; (8009350 <__NVIC_GetPriorityGrouping+0x18>)
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	0a1b      	lsrs	r3, r3, #8
 8009342:	f003 0307 	and.w	r3, r3, #7
}
 8009346:	4618      	mov	r0, r3
 8009348:	46bd      	mov	sp, r7
 800934a:	bc80      	pop	{r7}
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	e000ed00 	.word	0xe000ed00

08009354 <__NVIC_EnableIRQ>:
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800935e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009362:	2b00      	cmp	r3, #0
 8009364:	db0b      	blt.n	800937e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	f003 021f 	and.w	r2, r3, #31
 800936c:	4906      	ldr	r1, [pc, #24]	; (8009388 <__NVIC_EnableIRQ+0x34>)
 800936e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009372:	095b      	lsrs	r3, r3, #5
 8009374:	2001      	movs	r0, #1
 8009376:	fa00 f202 	lsl.w	r2, r0, r2
 800937a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	bc80      	pop	{r7}
 8009386:	4770      	bx	lr
 8009388:	e000e100 	.word	0xe000e100

0800938c <__NVIC_SetPriority>:
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	6039      	str	r1, [r7, #0]
 8009396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800939c:	2b00      	cmp	r3, #0
 800939e:	db0a      	blt.n	80093b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	490c      	ldr	r1, [pc, #48]	; (80093d8 <__NVIC_SetPriority+0x4c>)
 80093a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093aa:	0112      	lsls	r2, r2, #4
 80093ac:	b2d2      	uxtb	r2, r2
 80093ae:	440b      	add	r3, r1
 80093b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80093b4:	e00a      	b.n	80093cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	4908      	ldr	r1, [pc, #32]	; (80093dc <__NVIC_SetPriority+0x50>)
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	f003 030f 	and.w	r3, r3, #15
 80093c2:	3b04      	subs	r3, #4
 80093c4:	0112      	lsls	r2, r2, #4
 80093c6:	b2d2      	uxtb	r2, r2
 80093c8:	440b      	add	r3, r1
 80093ca:	761a      	strb	r2, [r3, #24]
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	e000e100 	.word	0xe000e100
 80093dc:	e000ed00 	.word	0xe000ed00

080093e0 <NVIC_EncodePriority>:
{
 80093e0:	b480      	push	{r7}
 80093e2:	b089      	sub	sp, #36	; 0x24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 0307 	and.w	r3, r3, #7
 80093f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	f1c3 0307 	rsb	r3, r3, #7
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	bf28      	it	cs
 80093fe:	2304      	movcs	r3, #4
 8009400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	3304      	adds	r3, #4
 8009406:	2b06      	cmp	r3, #6
 8009408:	d902      	bls.n	8009410 <NVIC_EncodePriority+0x30>
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	3b03      	subs	r3, #3
 800940e:	e000      	b.n	8009412 <NVIC_EncodePriority+0x32>
 8009410:	2300      	movs	r3, #0
 8009412:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009414:	f04f 32ff 	mov.w	r2, #4294967295
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	fa02 f303 	lsl.w	r3, r2, r3
 800941e:	43da      	mvns	r2, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	401a      	ands	r2, r3
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009428:	f04f 31ff 	mov.w	r1, #4294967295
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	fa01 f303 	lsl.w	r3, r1, r3
 8009432:	43d9      	mvns	r1, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009438:	4313      	orrs	r3, r2
}
 800943a:	4618      	mov	r0, r3
 800943c:	3724      	adds	r7, #36	; 0x24
 800943e:	46bd      	mov	sp, r7
 8009440:	bc80      	pop	{r7}
 8009442:	4770      	bx	lr

08009444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3b01      	subs	r3, #1
 8009450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009454:	d301      	bcc.n	800945a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009456:	2301      	movs	r3, #1
 8009458:	e00f      	b.n	800947a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800945a:	4a0a      	ldr	r2, [pc, #40]	; (8009484 <SysTick_Config+0x40>)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3b01      	subs	r3, #1
 8009460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009462:	210f      	movs	r1, #15
 8009464:	f04f 30ff 	mov.w	r0, #4294967295
 8009468:	f7ff ff90 	bl	800938c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <SysTick_Config+0x40>)
 800946e:	2200      	movs	r2, #0
 8009470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009472:	4b04      	ldr	r3, [pc, #16]	; (8009484 <SysTick_Config+0x40>)
 8009474:	2207      	movs	r2, #7
 8009476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	e000e010 	.word	0xe000e010

08009488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff ff2d 	bl	80092f0 <__NVIC_SetPriorityGrouping>
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800949e:	b580      	push	{r7, lr}
 80094a0:	b086      	sub	sp, #24
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	4603      	mov	r3, r0
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	607a      	str	r2, [r7, #4]
 80094aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80094b0:	f7ff ff42 	bl	8009338 <__NVIC_GetPriorityGrouping>
 80094b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	6978      	ldr	r0, [r7, #20]
 80094bc:	f7ff ff90 	bl	80093e0 <NVIC_EncodePriority>
 80094c0:	4602      	mov	r2, r0
 80094c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094c6:	4611      	mov	r1, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff ff5f 	bl	800938c <__NVIC_SetPriority>
}
 80094ce:	bf00      	nop
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	4603      	mov	r3, r0
 80094de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff ff35 	bl	8009354 <__NVIC_EnableIRQ>
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff ffa2 	bl	8009444 <SysTick_Config>
 8009500:	4603      	mov	r3, r0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800950a:	b480      	push	{r7}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b02      	cmp	r3, #2
 8009520:	d008      	beq.n	8009534 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2204      	movs	r2, #4
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e020      	b.n	8009576 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 020e 	bic.w	r2, r2, #14
 8009542:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0201 	bic.w	r2, r2, #1
 8009552:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955c:	2101      	movs	r1, #1
 800955e:	fa01 f202 	lsl.w	r2, r1, r2
 8009562:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009574:	7bfb      	ldrb	r3, [r7, #15]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr

08009580 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b02      	cmp	r3, #2
 8009596:	d005      	beq.n	80095a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2204      	movs	r2, #4
 800959c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	73fb      	strb	r3, [r7, #15]
 80095a2:	e0d6      	b.n	8009752 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 020e 	bic.w	r2, r2, #14
 80095b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0201 	bic.w	r2, r2, #1
 80095c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
 80095ca:	4b64      	ldr	r3, [pc, #400]	; (800975c <HAL_DMA_Abort_IT+0x1dc>)
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d958      	bls.n	8009682 <HAL_DMA_Abort_IT+0x102>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a62      	ldr	r2, [pc, #392]	; (8009760 <HAL_DMA_Abort_IT+0x1e0>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d04f      	beq.n	800967a <HAL_DMA_Abort_IT+0xfa>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a61      	ldr	r2, [pc, #388]	; (8009764 <HAL_DMA_Abort_IT+0x1e4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d048      	beq.n	8009676 <HAL_DMA_Abort_IT+0xf6>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a5f      	ldr	r2, [pc, #380]	; (8009768 <HAL_DMA_Abort_IT+0x1e8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d040      	beq.n	8009670 <HAL_DMA_Abort_IT+0xf0>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a5e      	ldr	r2, [pc, #376]	; (800976c <HAL_DMA_Abort_IT+0x1ec>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d038      	beq.n	800966a <HAL_DMA_Abort_IT+0xea>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a5c      	ldr	r2, [pc, #368]	; (8009770 <HAL_DMA_Abort_IT+0x1f0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d030      	beq.n	8009664 <HAL_DMA_Abort_IT+0xe4>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a5b      	ldr	r2, [pc, #364]	; (8009774 <HAL_DMA_Abort_IT+0x1f4>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d028      	beq.n	800965e <HAL_DMA_Abort_IT+0xde>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a52      	ldr	r2, [pc, #328]	; (800975c <HAL_DMA_Abort_IT+0x1dc>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d020      	beq.n	8009658 <HAL_DMA_Abort_IT+0xd8>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a57      	ldr	r2, [pc, #348]	; (8009778 <HAL_DMA_Abort_IT+0x1f8>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d019      	beq.n	8009654 <HAL_DMA_Abort_IT+0xd4>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a55      	ldr	r2, [pc, #340]	; (800977c <HAL_DMA_Abort_IT+0x1fc>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d012      	beq.n	8009650 <HAL_DMA_Abort_IT+0xd0>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a54      	ldr	r2, [pc, #336]	; (8009780 <HAL_DMA_Abort_IT+0x200>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00a      	beq.n	800964a <HAL_DMA_Abort_IT+0xca>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a52      	ldr	r2, [pc, #328]	; (8009784 <HAL_DMA_Abort_IT+0x204>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d102      	bne.n	8009644 <HAL_DMA_Abort_IT+0xc4>
 800963e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009642:	e01b      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 8009644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009648:	e018      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 800964a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800964e:	e015      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 8009650:	2310      	movs	r3, #16
 8009652:	e013      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 8009654:	2301      	movs	r3, #1
 8009656:	e011      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 8009658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800965c:	e00e      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 800965e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009662:	e00b      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 8009664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009668:	e008      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 800966a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800966e:	e005      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 8009670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009674:	e002      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 8009676:	2310      	movs	r3, #16
 8009678:	e000      	b.n	800967c <HAL_DMA_Abort_IT+0xfc>
 800967a:	2301      	movs	r3, #1
 800967c:	4a42      	ldr	r2, [pc, #264]	; (8009788 <HAL_DMA_Abort_IT+0x208>)
 800967e:	6053      	str	r3, [r2, #4]
 8009680:	e057      	b.n	8009732 <HAL_DMA_Abort_IT+0x1b2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a36      	ldr	r2, [pc, #216]	; (8009760 <HAL_DMA_Abort_IT+0x1e0>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d04f      	beq.n	800972c <HAL_DMA_Abort_IT+0x1ac>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a34      	ldr	r2, [pc, #208]	; (8009764 <HAL_DMA_Abort_IT+0x1e4>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d048      	beq.n	8009728 <HAL_DMA_Abort_IT+0x1a8>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a33      	ldr	r2, [pc, #204]	; (8009768 <HAL_DMA_Abort_IT+0x1e8>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d040      	beq.n	8009722 <HAL_DMA_Abort_IT+0x1a2>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a31      	ldr	r2, [pc, #196]	; (800976c <HAL_DMA_Abort_IT+0x1ec>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d038      	beq.n	800971c <HAL_DMA_Abort_IT+0x19c>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a30      	ldr	r2, [pc, #192]	; (8009770 <HAL_DMA_Abort_IT+0x1f0>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d030      	beq.n	8009716 <HAL_DMA_Abort_IT+0x196>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a2e      	ldr	r2, [pc, #184]	; (8009774 <HAL_DMA_Abort_IT+0x1f4>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d028      	beq.n	8009710 <HAL_DMA_Abort_IT+0x190>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a26      	ldr	r2, [pc, #152]	; (800975c <HAL_DMA_Abort_IT+0x1dc>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d020      	beq.n	800970a <HAL_DMA_Abort_IT+0x18a>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a2a      	ldr	r2, [pc, #168]	; (8009778 <HAL_DMA_Abort_IT+0x1f8>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d019      	beq.n	8009706 <HAL_DMA_Abort_IT+0x186>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a29      	ldr	r2, [pc, #164]	; (800977c <HAL_DMA_Abort_IT+0x1fc>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d012      	beq.n	8009702 <HAL_DMA_Abort_IT+0x182>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a27      	ldr	r2, [pc, #156]	; (8009780 <HAL_DMA_Abort_IT+0x200>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00a      	beq.n	80096fc <HAL_DMA_Abort_IT+0x17c>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a26      	ldr	r2, [pc, #152]	; (8009784 <HAL_DMA_Abort_IT+0x204>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d102      	bne.n	80096f6 <HAL_DMA_Abort_IT+0x176>
 80096f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f4:	e01b      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 80096f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096fa:	e018      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 80096fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009700:	e015      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 8009702:	2310      	movs	r3, #16
 8009704:	e013      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 8009706:	2301      	movs	r3, #1
 8009708:	e011      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 800970a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800970e:	e00e      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 8009710:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009714:	e00b      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 8009716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800971a:	e008      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 800971c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009720:	e005      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 8009722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009726:	e002      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 8009728:	2310      	movs	r3, #16
 800972a:	e000      	b.n	800972e <HAL_DMA_Abort_IT+0x1ae>
 800972c:	2301      	movs	r3, #1
 800972e:	4a17      	ldr	r2, [pc, #92]	; (800978c <HAL_DMA_Abort_IT+0x20c>)
 8009730:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	4798      	blx	r3
    } 
  }
  return status;
 8009752:	7bfb      	ldrb	r3, [r7, #15]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	40020080 	.word	0x40020080
 8009760:	40020008 	.word	0x40020008
 8009764:	4002001c 	.word	0x4002001c
 8009768:	40020030 	.word	0x40020030
 800976c:	40020044 	.word	0x40020044
 8009770:	40020058 	.word	0x40020058
 8009774:	4002006c 	.word	0x4002006c
 8009778:	40020408 	.word	0x40020408
 800977c:	4002041c 	.word	0x4002041c
 8009780:	40020430 	.word	0x40020430
 8009784:	40020444 	.word	0x40020444
 8009788:	40020400 	.word	0x40020400
 800978c:	40020000 	.word	0x40020000

08009790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009790:	b480      	push	{r7}
 8009792:	b08b      	sub	sp, #44	; 0x2c
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800979a:	2300      	movs	r3, #0
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800979e:	2300      	movs	r3, #0
 80097a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097a2:	e179      	b.n	8009a98 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80097a4:	2201      	movs	r2, #1
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	4013      	ands	r3, r2
 80097b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	429a      	cmp	r2, r3
 80097be:	f040 8168 	bne.w	8009a92 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	4a96      	ldr	r2, [pc, #600]	; (8009a20 <HAL_GPIO_Init+0x290>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d05e      	beq.n	800988a <HAL_GPIO_Init+0xfa>
 80097cc:	4a94      	ldr	r2, [pc, #592]	; (8009a20 <HAL_GPIO_Init+0x290>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d875      	bhi.n	80098be <HAL_GPIO_Init+0x12e>
 80097d2:	4a94      	ldr	r2, [pc, #592]	; (8009a24 <HAL_GPIO_Init+0x294>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d058      	beq.n	800988a <HAL_GPIO_Init+0xfa>
 80097d8:	4a92      	ldr	r2, [pc, #584]	; (8009a24 <HAL_GPIO_Init+0x294>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d86f      	bhi.n	80098be <HAL_GPIO_Init+0x12e>
 80097de:	4a92      	ldr	r2, [pc, #584]	; (8009a28 <HAL_GPIO_Init+0x298>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d052      	beq.n	800988a <HAL_GPIO_Init+0xfa>
 80097e4:	4a90      	ldr	r2, [pc, #576]	; (8009a28 <HAL_GPIO_Init+0x298>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d869      	bhi.n	80098be <HAL_GPIO_Init+0x12e>
 80097ea:	4a90      	ldr	r2, [pc, #576]	; (8009a2c <HAL_GPIO_Init+0x29c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d04c      	beq.n	800988a <HAL_GPIO_Init+0xfa>
 80097f0:	4a8e      	ldr	r2, [pc, #568]	; (8009a2c <HAL_GPIO_Init+0x29c>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d863      	bhi.n	80098be <HAL_GPIO_Init+0x12e>
 80097f6:	4a8e      	ldr	r2, [pc, #568]	; (8009a30 <HAL_GPIO_Init+0x2a0>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d046      	beq.n	800988a <HAL_GPIO_Init+0xfa>
 80097fc:	4a8c      	ldr	r2, [pc, #560]	; (8009a30 <HAL_GPIO_Init+0x2a0>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d85d      	bhi.n	80098be <HAL_GPIO_Init+0x12e>
 8009802:	2b12      	cmp	r3, #18
 8009804:	d82a      	bhi.n	800985c <HAL_GPIO_Init+0xcc>
 8009806:	2b12      	cmp	r3, #18
 8009808:	d859      	bhi.n	80098be <HAL_GPIO_Init+0x12e>
 800980a:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <HAL_GPIO_Init+0x80>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	0800988b 	.word	0x0800988b
 8009814:	08009865 	.word	0x08009865
 8009818:	08009877 	.word	0x08009877
 800981c:	080098b9 	.word	0x080098b9
 8009820:	080098bf 	.word	0x080098bf
 8009824:	080098bf 	.word	0x080098bf
 8009828:	080098bf 	.word	0x080098bf
 800982c:	080098bf 	.word	0x080098bf
 8009830:	080098bf 	.word	0x080098bf
 8009834:	080098bf 	.word	0x080098bf
 8009838:	080098bf 	.word	0x080098bf
 800983c:	080098bf 	.word	0x080098bf
 8009840:	080098bf 	.word	0x080098bf
 8009844:	080098bf 	.word	0x080098bf
 8009848:	080098bf 	.word	0x080098bf
 800984c:	080098bf 	.word	0x080098bf
 8009850:	080098bf 	.word	0x080098bf
 8009854:	0800986d 	.word	0x0800986d
 8009858:	08009881 	.word	0x08009881
 800985c:	4a75      	ldr	r2, [pc, #468]	; (8009a34 <HAL_GPIO_Init+0x2a4>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d013      	beq.n	800988a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009862:	e02c      	b.n	80098be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	623b      	str	r3, [r7, #32]
          break;
 800986a:	e029      	b.n	80098c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	3304      	adds	r3, #4
 8009872:	623b      	str	r3, [r7, #32]
          break;
 8009874:	e024      	b.n	80098c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	3308      	adds	r3, #8
 800987c:	623b      	str	r3, [r7, #32]
          break;
 800987e:	e01f      	b.n	80098c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	330c      	adds	r3, #12
 8009886:	623b      	str	r3, [r7, #32]
          break;
 8009888:	e01a      	b.n	80098c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d102      	bne.n	8009898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009892:	2304      	movs	r3, #4
 8009894:	623b      	str	r3, [r7, #32]
          break;
 8009896:	e013      	b.n	80098c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d105      	bne.n	80098ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098a0:	2308      	movs	r3, #8
 80098a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	611a      	str	r2, [r3, #16]
          break;
 80098aa:	e009      	b.n	80098c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098ac:	2308      	movs	r3, #8
 80098ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	615a      	str	r2, [r3, #20]
          break;
 80098b6:	e003      	b.n	80098c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80098b8:	2300      	movs	r3, #0
 80098ba:	623b      	str	r3, [r7, #32]
          break;
 80098bc:	e000      	b.n	80098c0 <HAL_GPIO_Init+0x130>
          break;
 80098be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	2bff      	cmp	r3, #255	; 0xff
 80098c4:	d801      	bhi.n	80098ca <HAL_GPIO_Init+0x13a>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	e001      	b.n	80098ce <HAL_GPIO_Init+0x13e>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3304      	adds	r3, #4
 80098ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	2bff      	cmp	r3, #255	; 0xff
 80098d4:	d802      	bhi.n	80098dc <HAL_GPIO_Init+0x14c>
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	e002      	b.n	80098e2 <HAL_GPIO_Init+0x152>
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	3b08      	subs	r3, #8
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	210f      	movs	r1, #15
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	fa01 f303 	lsl.w	r3, r1, r3
 80098f0:	43db      	mvns	r3, r3
 80098f2:	401a      	ands	r2, r3
 80098f4:	6a39      	ldr	r1, [r7, #32]
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	fa01 f303 	lsl.w	r3, r1, r3
 80098fc:	431a      	orrs	r2, r3
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 80c1 	beq.w	8009a92 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009910:	4b49      	ldr	r3, [pc, #292]	; (8009a38 <HAL_GPIO_Init+0x2a8>)
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	4a48      	ldr	r2, [pc, #288]	; (8009a38 <HAL_GPIO_Init+0x2a8>)
 8009916:	f043 0301 	orr.w	r3, r3, #1
 800991a:	6193      	str	r3, [r2, #24]
 800991c:	4b46      	ldr	r3, [pc, #280]	; (8009a38 <HAL_GPIO_Init+0x2a8>)
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	60bb      	str	r3, [r7, #8]
 8009926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009928:	4a44      	ldr	r2, [pc, #272]	; (8009a3c <HAL_GPIO_Init+0x2ac>)
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	089b      	lsrs	r3, r3, #2
 800992e:	3302      	adds	r3, #2
 8009930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	f003 0303 	and.w	r3, r3, #3
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	220f      	movs	r2, #15
 8009940:	fa02 f303 	lsl.w	r3, r2, r3
 8009944:	43db      	mvns	r3, r3
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4013      	ands	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a3c      	ldr	r2, [pc, #240]	; (8009a40 <HAL_GPIO_Init+0x2b0>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d01f      	beq.n	8009994 <HAL_GPIO_Init+0x204>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a3b      	ldr	r2, [pc, #236]	; (8009a44 <HAL_GPIO_Init+0x2b4>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d019      	beq.n	8009990 <HAL_GPIO_Init+0x200>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a3a      	ldr	r2, [pc, #232]	; (8009a48 <HAL_GPIO_Init+0x2b8>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d013      	beq.n	800998c <HAL_GPIO_Init+0x1fc>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a39      	ldr	r2, [pc, #228]	; (8009a4c <HAL_GPIO_Init+0x2bc>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00d      	beq.n	8009988 <HAL_GPIO_Init+0x1f8>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a38      	ldr	r2, [pc, #224]	; (8009a50 <HAL_GPIO_Init+0x2c0>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d007      	beq.n	8009984 <HAL_GPIO_Init+0x1f4>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a37      	ldr	r2, [pc, #220]	; (8009a54 <HAL_GPIO_Init+0x2c4>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d101      	bne.n	8009980 <HAL_GPIO_Init+0x1f0>
 800997c:	2305      	movs	r3, #5
 800997e:	e00a      	b.n	8009996 <HAL_GPIO_Init+0x206>
 8009980:	2306      	movs	r3, #6
 8009982:	e008      	b.n	8009996 <HAL_GPIO_Init+0x206>
 8009984:	2304      	movs	r3, #4
 8009986:	e006      	b.n	8009996 <HAL_GPIO_Init+0x206>
 8009988:	2303      	movs	r3, #3
 800998a:	e004      	b.n	8009996 <HAL_GPIO_Init+0x206>
 800998c:	2302      	movs	r3, #2
 800998e:	e002      	b.n	8009996 <HAL_GPIO_Init+0x206>
 8009990:	2301      	movs	r3, #1
 8009992:	e000      	b.n	8009996 <HAL_GPIO_Init+0x206>
 8009994:	2300      	movs	r3, #0
 8009996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009998:	f002 0203 	and.w	r2, r2, #3
 800999c:	0092      	lsls	r2, r2, #2
 800999e:	4093      	lsls	r3, r2
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80099a6:	4925      	ldr	r1, [pc, #148]	; (8009a3c <HAL_GPIO_Init+0x2ac>)
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	089b      	lsrs	r3, r3, #2
 80099ac:	3302      	adds	r3, #2
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d006      	beq.n	80099ce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80099c0:	4b25      	ldr	r3, [pc, #148]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	4924      	ldr	r1, [pc, #144]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	608b      	str	r3, [r1, #8]
 80099cc:	e006      	b.n	80099dc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80099ce:	4b22      	ldr	r3, [pc, #136]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 80099d0:	689a      	ldr	r2, [r3, #8]
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	43db      	mvns	r3, r3
 80099d6:	4920      	ldr	r1, [pc, #128]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 80099d8:	4013      	ands	r3, r2
 80099da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d006      	beq.n	80099f6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80099e8:	4b1b      	ldr	r3, [pc, #108]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 80099ea:	68da      	ldr	r2, [r3, #12]
 80099ec:	491a      	ldr	r1, [pc, #104]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60cb      	str	r3, [r1, #12]
 80099f4:	e006      	b.n	8009a04 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80099f6:	4b18      	ldr	r3, [pc, #96]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 80099f8:	68da      	ldr	r2, [r3, #12]
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	43db      	mvns	r3, r3
 80099fe:	4916      	ldr	r1, [pc, #88]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d025      	beq.n	8009a5c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009a10:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 8009a12:	685a      	ldr	r2, [r3, #4]
 8009a14:	4910      	ldr	r1, [pc, #64]	; (8009a58 <HAL_GPIO_Init+0x2c8>)
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	604b      	str	r3, [r1, #4]
 8009a1c:	e025      	b.n	8009a6a <HAL_GPIO_Init+0x2da>
 8009a1e:	bf00      	nop
 8009a20:	10320000 	.word	0x10320000
 8009a24:	10310000 	.word	0x10310000
 8009a28:	10220000 	.word	0x10220000
 8009a2c:	10210000 	.word	0x10210000
 8009a30:	10120000 	.word	0x10120000
 8009a34:	10110000 	.word	0x10110000
 8009a38:	40021000 	.word	0x40021000
 8009a3c:	40010000 	.word	0x40010000
 8009a40:	40010800 	.word	0x40010800
 8009a44:	40010c00 	.word	0x40010c00
 8009a48:	40011000 	.word	0x40011000
 8009a4c:	40011400 	.word	0x40011400
 8009a50:	40011800 	.word	0x40011800
 8009a54:	40011c00 	.word	0x40011c00
 8009a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009a5c:	4b15      	ldr	r3, [pc, #84]	; (8009ab4 <HAL_GPIO_Init+0x324>)
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	43db      	mvns	r3, r3
 8009a64:	4913      	ldr	r1, [pc, #76]	; (8009ab4 <HAL_GPIO_Init+0x324>)
 8009a66:	4013      	ands	r3, r2
 8009a68:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d006      	beq.n	8009a84 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009a76:	4b0f      	ldr	r3, [pc, #60]	; (8009ab4 <HAL_GPIO_Init+0x324>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	490e      	ldr	r1, [pc, #56]	; (8009ab4 <HAL_GPIO_Init+0x324>)
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	600b      	str	r3, [r1, #0]
 8009a82:	e006      	b.n	8009a92 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009a84:	4b0b      	ldr	r3, [pc, #44]	; (8009ab4 <HAL_GPIO_Init+0x324>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	43db      	mvns	r3, r3
 8009a8c:	4909      	ldr	r1, [pc, #36]	; (8009ab4 <HAL_GPIO_Init+0x324>)
 8009a8e:	4013      	ands	r3, r2
 8009a90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	3301      	adds	r3, #1
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f47f ae7e 	bne.w	80097a4 <HAL_GPIO_Init+0x14>
  }
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	372c      	adds	r7, #44	; 0x2c
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bc80      	pop	{r7}
 8009ab2:	4770      	bx	lr
 8009ab4:	40010400 	.word	0x40010400

08009ab8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b089      	sub	sp, #36	; 0x24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009ac6:	e0a6      	b.n	8009c16 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009ac8:	2201      	movs	r2, #1
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 8099 	beq.w	8009c10 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009ade:	4a54      	ldr	r2, [pc, #336]	; (8009c30 <HAL_GPIO_DeInit+0x178>)
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	089b      	lsrs	r3, r3, #2
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aea:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	220f      	movs	r2, #15
 8009af6:	fa02 f303 	lsl.w	r3, r2, r3
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	4013      	ands	r3, r2
 8009afe:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a4c      	ldr	r2, [pc, #304]	; (8009c34 <HAL_GPIO_DeInit+0x17c>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d01f      	beq.n	8009b48 <HAL_GPIO_DeInit+0x90>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a4b      	ldr	r2, [pc, #300]	; (8009c38 <HAL_GPIO_DeInit+0x180>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d019      	beq.n	8009b44 <HAL_GPIO_DeInit+0x8c>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a4a      	ldr	r2, [pc, #296]	; (8009c3c <HAL_GPIO_DeInit+0x184>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d013      	beq.n	8009b40 <HAL_GPIO_DeInit+0x88>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a49      	ldr	r2, [pc, #292]	; (8009c40 <HAL_GPIO_DeInit+0x188>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d00d      	beq.n	8009b3c <HAL_GPIO_DeInit+0x84>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a48      	ldr	r2, [pc, #288]	; (8009c44 <HAL_GPIO_DeInit+0x18c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d007      	beq.n	8009b38 <HAL_GPIO_DeInit+0x80>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a47      	ldr	r2, [pc, #284]	; (8009c48 <HAL_GPIO_DeInit+0x190>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d101      	bne.n	8009b34 <HAL_GPIO_DeInit+0x7c>
 8009b30:	2305      	movs	r3, #5
 8009b32:	e00a      	b.n	8009b4a <HAL_GPIO_DeInit+0x92>
 8009b34:	2306      	movs	r3, #6
 8009b36:	e008      	b.n	8009b4a <HAL_GPIO_DeInit+0x92>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	e006      	b.n	8009b4a <HAL_GPIO_DeInit+0x92>
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e004      	b.n	8009b4a <HAL_GPIO_DeInit+0x92>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e002      	b.n	8009b4a <HAL_GPIO_DeInit+0x92>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e000      	b.n	8009b4a <HAL_GPIO_DeInit+0x92>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	69fa      	ldr	r2, [r7, #28]
 8009b4c:	f002 0203 	and.w	r2, r2, #3
 8009b50:	0092      	lsls	r2, r2, #2
 8009b52:	4093      	lsls	r3, r2
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d132      	bne.n	8009bc0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009b5a:	4b3c      	ldr	r3, [pc, #240]	; (8009c4c <HAL_GPIO_DeInit+0x194>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	43db      	mvns	r3, r3
 8009b62:	493a      	ldr	r1, [pc, #232]	; (8009c4c <HAL_GPIO_DeInit+0x194>)
 8009b64:	4013      	ands	r3, r2
 8009b66:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009b68:	4b38      	ldr	r3, [pc, #224]	; (8009c4c <HAL_GPIO_DeInit+0x194>)
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	43db      	mvns	r3, r3
 8009b70:	4936      	ldr	r1, [pc, #216]	; (8009c4c <HAL_GPIO_DeInit+0x194>)
 8009b72:	4013      	ands	r3, r2
 8009b74:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009b76:	4b35      	ldr	r3, [pc, #212]	; (8009c4c <HAL_GPIO_DeInit+0x194>)
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	4933      	ldr	r1, [pc, #204]	; (8009c4c <HAL_GPIO_DeInit+0x194>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009b84:	4b31      	ldr	r3, [pc, #196]	; (8009c4c <HAL_GPIO_DeInit+0x194>)
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	43db      	mvns	r3, r3
 8009b8c:	492f      	ldr	r1, [pc, #188]	; (8009c4c <HAL_GPIO_DeInit+0x194>)
 8009b8e:	4013      	ands	r3, r2
 8009b90:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	f003 0303 	and.w	r3, r3, #3
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	220f      	movs	r2, #15
 8009b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009ba2:	4a23      	ldr	r2, [pc, #140]	; (8009c30 <HAL_GPIO_DeInit+0x178>)
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	089b      	lsrs	r3, r3, #2
 8009ba8:	3302      	adds	r3, #2
 8009baa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	43da      	mvns	r2, r3
 8009bb2:	481f      	ldr	r0, [pc, #124]	; (8009c30 <HAL_GPIO_DeInit+0x178>)
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	089b      	lsrs	r3, r3, #2
 8009bb8:	400a      	ands	r2, r1
 8009bba:	3302      	adds	r3, #2
 8009bbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2bff      	cmp	r3, #255	; 0xff
 8009bc4:	d801      	bhi.n	8009bca <HAL_GPIO_DeInit+0x112>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	e001      	b.n	8009bce <HAL_GPIO_DeInit+0x116>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	2bff      	cmp	r3, #255	; 0xff
 8009bd4:	d802      	bhi.n	8009bdc <HAL_GPIO_DeInit+0x124>
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	e002      	b.n	8009be2 <HAL_GPIO_DeInit+0x12a>
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	3b08      	subs	r3, #8
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	210f      	movs	r1, #15
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf0:	43db      	mvns	r3, r3
 8009bf2:	401a      	ands	r2, r3
 8009bf4:	2104      	movs	r1, #4
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	43db      	mvns	r3, r3
 8009c0a:	401a      	ands	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	3301      	adds	r3, #1
 8009c14:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f47f af52 	bne.w	8009ac8 <HAL_GPIO_DeInit+0x10>
  }
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop
 8009c28:	3724      	adds	r7, #36	; 0x24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bc80      	pop	{r7}
 8009c2e:	4770      	bx	lr
 8009c30:	40010000 	.word	0x40010000
 8009c34:	40010800 	.word	0x40010800
 8009c38:	40010c00 	.word	0x40010c00
 8009c3c:	40011000 	.word	0x40011000
 8009c40:	40011400 	.word	0x40011400
 8009c44:	40011800 	.word	0x40011800
 8009c48:	40011c00 	.word	0x40011c00
 8009c4c:	40010400 	.word	0x40010400

08009c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	887b      	ldrh	r3, [r7, #2]
 8009c62:	4013      	ands	r3, r2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	73fb      	strb	r3, [r7, #15]
 8009c6c:	e001      	b.n	8009c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bc80      	pop	{r7}
 8009c7c:	4770      	bx	lr

08009c7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b083      	sub	sp, #12
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	460b      	mov	r3, r1
 8009c88:	807b      	strh	r3, [r7, #2]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c8e:	787b      	ldrb	r3, [r7, #1]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d003      	beq.n	8009c9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c94:	887a      	ldrh	r2, [r7, #2]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009c9a:	e003      	b.n	8009ca4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009c9c:	887b      	ldrh	r3, [r7, #2]
 8009c9e:	041a      	lsls	r2, r3, #16
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	611a      	str	r2, [r3, #16]
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bc80      	pop	{r7}
 8009cac:	4770      	bx	lr

08009cae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b085      	sub	sp, #20
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009cc0:	887a      	ldrh	r2, [r7, #2]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	041a      	lsls	r2, r3, #16
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	43d9      	mvns	r1, r3
 8009ccc:	887b      	ldrh	r3, [r7, #2]
 8009cce:	400b      	ands	r3, r1
 8009cd0:	431a      	orrs	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	611a      	str	r2, [r3, #16]
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bc80      	pop	{r7}
 8009cde:	4770      	bx	lr

08009ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e12b      	b.n	8009f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d106      	bne.n	8009d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7fe fff8 	bl	8008cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2224      	movs	r2, #36	; 0x24
 8009d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f022 0201 	bic.w	r2, r2, #1
 8009d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d44:	f001 fdb8 	bl	800b8b8 <HAL_RCC_GetPCLK1Freq>
 8009d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	4a81      	ldr	r2, [pc, #516]	; (8009f54 <HAL_I2C_Init+0x274>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d807      	bhi.n	8009d64 <HAL_I2C_Init+0x84>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4a80      	ldr	r2, [pc, #512]	; (8009f58 <HAL_I2C_Init+0x278>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	bf94      	ite	ls
 8009d5c:	2301      	movls	r3, #1
 8009d5e:	2300      	movhi	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	e006      	b.n	8009d72 <HAL_I2C_Init+0x92>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4a7d      	ldr	r2, [pc, #500]	; (8009f5c <HAL_I2C_Init+0x27c>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	bf94      	ite	ls
 8009d6c:	2301      	movls	r3, #1
 8009d6e:	2300      	movhi	r3, #0
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e0e7      	b.n	8009f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	4a78      	ldr	r2, [pc, #480]	; (8009f60 <HAL_I2C_Init+0x280>)
 8009d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d82:	0c9b      	lsrs	r3, r3, #18
 8009d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	4a6a      	ldr	r2, [pc, #424]	; (8009f54 <HAL_I2C_Init+0x274>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d802      	bhi.n	8009db4 <HAL_I2C_Init+0xd4>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	3301      	adds	r3, #1
 8009db2:	e009      	b.n	8009dc8 <HAL_I2C_Init+0xe8>
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009dba:	fb02 f303 	mul.w	r3, r2, r3
 8009dbe:	4a69      	ldr	r2, [pc, #420]	; (8009f64 <HAL_I2C_Init+0x284>)
 8009dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc4:	099b      	lsrs	r3, r3, #6
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6812      	ldr	r2, [r2, #0]
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	495c      	ldr	r1, [pc, #368]	; (8009f54 <HAL_I2C_Init+0x274>)
 8009de4:	428b      	cmp	r3, r1
 8009de6:	d819      	bhi.n	8009e1c <HAL_I2C_Init+0x13c>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	1e59      	subs	r1, r3, #1
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009df6:	1c59      	adds	r1, r3, #1
 8009df8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009dfc:	400b      	ands	r3, r1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <HAL_I2C_Init+0x138>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	1e59      	subs	r1, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e10:	3301      	adds	r3, #1
 8009e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e16:	e051      	b.n	8009ebc <HAL_I2C_Init+0x1dc>
 8009e18:	2304      	movs	r3, #4
 8009e1a:	e04f      	b.n	8009ebc <HAL_I2C_Init+0x1dc>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d111      	bne.n	8009e48 <HAL_I2C_Init+0x168>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	1e58      	subs	r0, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6859      	ldr	r1, [r3, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	440b      	add	r3, r1
 8009e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e36:	3301      	adds	r3, #1
 8009e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	bf0c      	ite	eq
 8009e40:	2301      	moveq	r3, #1
 8009e42:	2300      	movne	r3, #0
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	e012      	b.n	8009e6e <HAL_I2C_Init+0x18e>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	1e58      	subs	r0, r3, #1
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6859      	ldr	r1, [r3, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	440b      	add	r3, r1
 8009e56:	0099      	lsls	r1, r3, #2
 8009e58:	440b      	add	r3, r1
 8009e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e5e:	3301      	adds	r3, #1
 8009e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	bf0c      	ite	eq
 8009e68:	2301      	moveq	r3, #1
 8009e6a:	2300      	movne	r3, #0
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <HAL_I2C_Init+0x196>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e022      	b.n	8009ebc <HAL_I2C_Init+0x1dc>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10e      	bne.n	8009e9c <HAL_I2C_Init+0x1bc>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	1e58      	subs	r0, r3, #1
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6859      	ldr	r1, [r3, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	440b      	add	r3, r1
 8009e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e90:	3301      	adds	r3, #1
 8009e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e9a:	e00f      	b.n	8009ebc <HAL_I2C_Init+0x1dc>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	1e58      	subs	r0, r3, #1
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6859      	ldr	r1, [r3, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	0099      	lsls	r1, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	6809      	ldr	r1, [r1, #0]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	69da      	ldr	r2, [r3, #28]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6911      	ldr	r1, [r2, #16]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	68d2      	ldr	r2, [r2, #12]
 8009ef6:	4311      	orrs	r1, r2
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	6812      	ldr	r2, [r2, #0]
 8009efc:	430b      	orrs	r3, r1
 8009efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695a      	ldr	r2, [r3, #20]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	000186a0 	.word	0x000186a0
 8009f58:	001e847f 	.word	0x001e847f
 8009f5c:	003d08ff 	.word	0x003d08ff
 8009f60:	431bde83 	.word	0x431bde83
 8009f64:	10624dd3 	.word	0x10624dd3

08009f68 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e021      	b.n	8009fbe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2224      	movs	r2, #36	; 0x24
 8009f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 0201 	bic.w	r2, r2, #1
 8009f90:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7fe fef0 	bl	8008d78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	607a      	str	r2, [r7, #4]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	817b      	strh	r3, [r7, #10]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009fdc:	f7ff f85e 	bl	800909c <HAL_GetTick>
 8009fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b20      	cmp	r3, #32
 8009fec:	f040 80e0 	bne.w	800a1b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	2319      	movs	r3, #25
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	4970      	ldr	r1, [pc, #448]	; (800a1bc <HAL_I2C_Master_Transmit+0x1f4>)
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 fe5c 	bl	800acb8 <I2C_WaitOnFlagUntilTimeout>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a006:	2302      	movs	r3, #2
 800a008:	e0d3      	b.n	800a1b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a010:	2b01      	cmp	r3, #1
 800a012:	d101      	bne.n	800a018 <HAL_I2C_Master_Transmit+0x50>
 800a014:	2302      	movs	r3, #2
 800a016:	e0cc      	b.n	800a1b2 <HAL_I2C_Master_Transmit+0x1ea>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d007      	beq.n	800a03e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0201 	orr.w	r2, r2, #1
 800a03c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a04c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2221      	movs	r2, #33	; 0x21
 800a052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2210      	movs	r2, #16
 800a05a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	893a      	ldrh	r2, [r7, #8]
 800a06e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a074:	b29a      	uxth	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4a50      	ldr	r2, [pc, #320]	; (800a1c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800a07e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a080:	8979      	ldrh	r1, [r7, #10]
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	6a3a      	ldr	r2, [r7, #32]
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 fc16 	bl	800a8b8 <I2C_MasterRequestWrite>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e08d      	b.n	800a1b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a096:	2300      	movs	r3, #0
 800a098:	613b      	str	r3, [r7, #16]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	613b      	str	r3, [r7, #16]
 800a0aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a0ac:	e066      	b.n	800a17c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	6a39      	ldr	r1, [r7, #32]
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 ff1a 	bl	800aeec <I2C_WaitOnTXEFlagUntilTimeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00d      	beq.n	800a0da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d107      	bne.n	800a0d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e06b      	b.n	800a1b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	781a      	ldrb	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a102:	3b01      	subs	r3, #1
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b04      	cmp	r3, #4
 800a116:	d11b      	bne.n	800a150 <HAL_I2C_Master_Transmit+0x188>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d017      	beq.n	800a150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	781a      	ldrb	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	3b01      	subs	r3, #1
 800a13e:	b29a      	uxth	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a148:	3b01      	subs	r3, #1
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	6a39      	ldr	r1, [r7, #32]
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 ff11 	bl	800af7c <I2C_WaitOnBTFFlagUntilTimeout>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00d      	beq.n	800a17c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a164:	2b04      	cmp	r3, #4
 800a166:	d107      	bne.n	800a178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e01a      	b.n	800a1b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a180:	2b00      	cmp	r3, #0
 800a182:	d194      	bne.n	800a0ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2220      	movs	r2, #32
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	e000      	b.n	800a1b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a1b0:	2302      	movs	r3, #2
  }
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	00100002 	.word	0x00100002
 800a1c0:	ffff0000 	.word	0xffff0000

0800a1c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	817b      	strh	r3, [r7, #10]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	813b      	strh	r3, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1de:	f7fe ff5d 	bl	800909c <HAL_GetTick>
 800a1e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b20      	cmp	r3, #32
 800a1ee:	f040 80d9 	bne.w	800a3a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	2319      	movs	r3, #25
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	496d      	ldr	r1, [pc, #436]	; (800a3b0 <HAL_I2C_Mem_Write+0x1ec>)
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 fd5b 	bl	800acb8 <I2C_WaitOnFlagUntilTimeout>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a208:	2302      	movs	r3, #2
 800a20a:	e0cc      	b.n	800a3a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <HAL_I2C_Mem_Write+0x56>
 800a216:	2302      	movs	r3, #2
 800a218:	e0c5      	b.n	800a3a6 <HAL_I2C_Mem_Write+0x1e2>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d007      	beq.n	800a240 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f042 0201 	orr.w	r2, r2, #1
 800a23e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a24e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2221      	movs	r2, #33	; 0x21
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2240      	movs	r2, #64	; 0x40
 800a25c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6a3a      	ldr	r2, [r7, #32]
 800a26a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a270:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a276:	b29a      	uxth	r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4a4d      	ldr	r2, [pc, #308]	; (800a3b4 <HAL_I2C_Mem_Write+0x1f0>)
 800a280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a282:	88f8      	ldrh	r0, [r7, #6]
 800a284:	893a      	ldrh	r2, [r7, #8]
 800a286:	8979      	ldrh	r1, [r7, #10]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	9301      	str	r3, [sp, #4]
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	4603      	mov	r3, r0
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 fb92 	bl	800a9bc <I2C_RequestMemoryWrite>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d052      	beq.n	800a344 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e081      	b.n	800a3a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 fe20 	bl	800aeec <I2C_WaitOnTXEFlagUntilTimeout>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00d      	beq.n	800a2ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d107      	bne.n	800a2ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e06b      	b.n	800a3a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	781a      	ldrb	r2, [r3, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d11b      	bne.n	800a344 <HAL_I2C_Mem_Write+0x180>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a310:	2b00      	cmp	r3, #0
 800a312:	d017      	beq.n	800a344 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29a      	uxth	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	3b01      	subs	r3, #1
 800a33e:	b29a      	uxth	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1aa      	bne.n	800a2a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 fe13 	bl	800af7c <I2C_WaitOnBTFFlagUntilTimeout>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00d      	beq.n	800a378 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a360:	2b04      	cmp	r3, #4
 800a362:	d107      	bne.n	800a374 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a372:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e016      	b.n	800a3a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e000      	b.n	800a3a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a3a4:	2302      	movs	r3, #2
  }
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	00100002 	.word	0x00100002
 800a3b4:	ffff0000 	.word	0xffff0000

0800a3b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08c      	sub	sp, #48	; 0x30
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	817b      	strh	r3, [r7, #10]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	813b      	strh	r3, [r7, #8]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a3d6:	f7fe fe61 	bl	800909c <HAL_GetTick>
 800a3da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b20      	cmp	r3, #32
 800a3e6:	f040 8244 	bne.w	800a872 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	2319      	movs	r3, #25
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	4982      	ldr	r1, [pc, #520]	; (800a5fc <HAL_I2C_Mem_Read+0x244>)
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 fc5f 	bl	800acb8 <I2C_WaitOnFlagUntilTimeout>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a400:	2302      	movs	r3, #2
 800a402:	e237      	b.n	800a874 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d101      	bne.n	800a412 <HAL_I2C_Mem_Read+0x5a>
 800a40e:	2302      	movs	r3, #2
 800a410:	e230      	b.n	800a874 <HAL_I2C_Mem_Read+0x4bc>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b01      	cmp	r3, #1
 800a426:	d007      	beq.n	800a438 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0201 	orr.w	r2, r2, #1
 800a436:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a446:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2222      	movs	r2, #34	; 0x22
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2240      	movs	r2, #64	; 0x40
 800a454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a462:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a468:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a46e:	b29a      	uxth	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4a62      	ldr	r2, [pc, #392]	; (800a600 <HAL_I2C_Mem_Read+0x248>)
 800a478:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a47a:	88f8      	ldrh	r0, [r7, #6]
 800a47c:	893a      	ldrh	r2, [r7, #8]
 800a47e:	8979      	ldrh	r1, [r7, #10]
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	4603      	mov	r3, r0
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 fb2c 	bl	800aae8 <I2C_RequestMemoryRead>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e1ec      	b.n	800a874 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d113      	bne.n	800a4ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61fb      	str	r3, [r7, #28]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	695b      	ldr	r3, [r3, #20]
 800a4ac:	61fb      	str	r3, [r7, #28]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	61fb      	str	r3, [r7, #28]
 800a4b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	e1c0      	b.n	800a84c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d11e      	bne.n	800a510 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4e2:	b672      	cpsid	i
}
 800a4e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61bb      	str	r3, [r7, #24]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	61bb      	str	r3, [r7, #24]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	61bb      	str	r3, [r7, #24]
 800a4fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a50a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a50c:	b662      	cpsie	i
}
 800a50e:	e035      	b.n	800a57c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a514:	2b02      	cmp	r3, #2
 800a516:	d11e      	bne.n	800a556 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a526:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a528:	b672      	cpsid	i
}
 800a52a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a52c:	2300      	movs	r3, #0
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	617b      	str	r3, [r7, #20]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a550:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a552:	b662      	cpsie	i
}
 800a554:	e012      	b.n	800a57c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a564:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a566:	2300      	movs	r3, #0
 800a568:	613b      	str	r3, [r7, #16]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	613b      	str	r3, [r7, #16]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	613b      	str	r3, [r7, #16]
 800a57a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a57c:	e166      	b.n	800a84c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a582:	2b03      	cmp	r3, #3
 800a584:	f200 811f 	bhi.w	800a7c6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d123      	bne.n	800a5d8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a592:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 fd39 	bl	800b00c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e167      	b.n	800a874 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	691a      	ldr	r2, [r3, #16]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5d6:	e139      	b.n	800a84c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d152      	bne.n	800a686 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	4906      	ldr	r1, [pc, #24]	; (800a604 <HAL_I2C_Mem_Read+0x24c>)
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 fb64 	bl	800acb8 <I2C_WaitOnFlagUntilTimeout>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d008      	beq.n	800a608 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e13c      	b.n	800a874 <HAL_I2C_Mem_Read+0x4bc>
 800a5fa:	bf00      	nop
 800a5fc:	00100002 	.word	0x00100002
 800a600:	ffff0000 	.word	0xffff0000
 800a604:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a608:	b672      	cpsid	i
}
 800a60a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a61a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	691a      	ldr	r2, [r3, #16]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a638:	3b01      	subs	r3, #1
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a644:	b29b      	uxth	r3, r3
 800a646:	3b01      	subs	r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a64e:	b662      	cpsie	i
}
 800a650:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	691a      	ldr	r2, [r3, #16]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	b2d2      	uxtb	r2, r2
 800a65e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a664:	1c5a      	adds	r2, r3, #1
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a66e:	3b01      	subs	r3, #1
 800a670:	b29a      	uxth	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	3b01      	subs	r3, #1
 800a67e:	b29a      	uxth	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a684:	e0e2      	b.n	800a84c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	2200      	movs	r2, #0
 800a68e:	497b      	ldr	r1, [pc, #492]	; (800a87c <HAL_I2C_Mem_Read+0x4c4>)
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 fb11 	bl	800acb8 <I2C_WaitOnFlagUntilTimeout>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e0e9      	b.n	800a874 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6b0:	b672      	cpsid	i
}
 800a6b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	691a      	ldr	r2, [r3, #16]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	b2d2      	uxtb	r2, r2
 800a6c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a6e6:	4b66      	ldr	r3, [pc, #408]	; (800a880 <HAL_I2C_Mem_Read+0x4c8>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	08db      	lsrs	r3, r3, #3
 800a6ec:	4a65      	ldr	r2, [pc, #404]	; (800a884 <HAL_I2C_Mem_Read+0x4cc>)
 800a6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f2:	0a1a      	lsrs	r2, r3, #8
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	00da      	lsls	r2, r3, #3
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	3b01      	subs	r3, #1
 800a704:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d118      	bne.n	800a73e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2220      	movs	r2, #32
 800a716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a726:	f043 0220 	orr.w	r2, r3, #32
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a72e:	b662      	cpsie	i
}
 800a730:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e09a      	b.n	800a874 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	2b04      	cmp	r3, #4
 800a74a:	d1d9      	bne.n	800a700 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a75a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	691a      	ldr	r2, [r3, #16]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a778:	3b01      	subs	r3, #1
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a784:	b29b      	uxth	r3, r3
 800a786:	3b01      	subs	r3, #1
 800a788:	b29a      	uxth	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a78e:	b662      	cpsie	i
}
 800a790:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	b2d2      	uxtb	r2, r2
 800a79e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a7c4:	e042      	b.n	800a84c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 fc1e 	bl	800b00c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e04c      	b.n	800a874 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	691a      	ldr	r2, [r3, #16]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	b2d2      	uxtb	r2, r2
 800a7e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a802:	b29b      	uxth	r3, r3
 800a804:	3b01      	subs	r3, #1
 800a806:	b29a      	uxth	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	f003 0304 	and.w	r3, r3, #4
 800a816:	2b04      	cmp	r3, #4
 800a818:	d118      	bne.n	800a84c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	691a      	ldr	r2, [r3, #16]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	b2d2      	uxtb	r2, r2
 800a826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	1c5a      	adds	r2, r3, #1
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a836:	3b01      	subs	r3, #1
 800a838:	b29a      	uxth	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a842:	b29b      	uxth	r3, r3
 800a844:	3b01      	subs	r3, #1
 800a846:	b29a      	uxth	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a850:	2b00      	cmp	r3, #0
 800a852:	f47f ae94 	bne.w	800a57e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2220      	movs	r2, #32
 800a85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	e000      	b.n	800a874 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a872:	2302      	movs	r3, #2
  }
}
 800a874:	4618      	mov	r0, r3
 800a876:	3728      	adds	r7, #40	; 0x28
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	00010004 	.word	0x00010004
 800a880:	200009b4 	.word	0x200009b4
 800a884:	14f8b589 	.word	0x14f8b589

0800a888 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a896:	b2db      	uxtb	r3, r3
}
 800a898:	4618      	mov	r0, r3
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bc80      	pop	{r7}
 800a8a0:	4770      	bx	lr

0800a8a2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bc80      	pop	{r7}
 800a8b6:	4770      	bx	lr

0800a8b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b088      	sub	sp, #32
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	607a      	str	r2, [r7, #4]
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b08      	cmp	r3, #8
 800a8d2:	d006      	beq.n	800a8e2 <I2C_MasterRequestWrite+0x2a>
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d003      	beq.n	800a8e2 <I2C_MasterRequestWrite+0x2a>
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8e0:	d108      	bne.n	800a8f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	e00b      	b.n	800a90c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f8:	2b12      	cmp	r3, #18
 800a8fa:	d107      	bne.n	800a90c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a90a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 f9cd 	bl	800acb8 <I2C_WaitOnFlagUntilTimeout>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00d      	beq.n	800a940 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a932:	d103      	bne.n	800a93c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a93a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e035      	b.n	800a9ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a948:	d108      	bne.n	800a95c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a94a:	897b      	ldrh	r3, [r7, #10]
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	461a      	mov	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a958:	611a      	str	r2, [r3, #16]
 800a95a:	e01b      	b.n	800a994 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a95c:	897b      	ldrh	r3, [r7, #10]
 800a95e:	11db      	asrs	r3, r3, #7
 800a960:	b2db      	uxtb	r3, r3
 800a962:	f003 0306 	and.w	r3, r3, #6
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f063 030f 	orn	r3, r3, #15
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	490e      	ldr	r1, [pc, #56]	; (800a9b4 <I2C_MasterRequestWrite+0xfc>)
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 fa16 	bl	800adac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e010      	b.n	800a9ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a98a:	897b      	ldrh	r3, [r7, #10]
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	4907      	ldr	r1, [pc, #28]	; (800a9b8 <I2C_MasterRequestWrite+0x100>)
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f000 fa06 	bl	800adac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	00010008 	.word	0x00010008
 800a9b8:	00010002 	.word	0x00010002

0800a9bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af02      	add	r7, sp, #8
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	817b      	strh	r3, [r7, #10]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	813b      	strh	r3, [r7, #8]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 f960 	bl	800acb8 <I2C_WaitOnFlagUntilTimeout>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00d      	beq.n	800aa1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa0c:	d103      	bne.n	800aa16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e05f      	b.n	800aada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa1a:	897b      	ldrh	r3, [r7, #10]
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	461a      	mov	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	6a3a      	ldr	r2, [r7, #32]
 800aa2e:	492d      	ldr	r1, [pc, #180]	; (800aae4 <I2C_RequestMemoryWrite+0x128>)
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 f9bb 	bl	800adac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e04c      	b.n	800aada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa40:	2300      	movs	r3, #0
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa58:	6a39      	ldr	r1, [r7, #32]
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f000 fa46 	bl	800aeec <I2C_WaitOnTXEFlagUntilTimeout>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00d      	beq.n	800aa82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	d107      	bne.n	800aa7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e02b      	b.n	800aada <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa82:	88fb      	ldrh	r3, [r7, #6]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d105      	bne.n	800aa94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa88:	893b      	ldrh	r3, [r7, #8]
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	611a      	str	r2, [r3, #16]
 800aa92:	e021      	b.n	800aad8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aa94:	893b      	ldrh	r3, [r7, #8]
 800aa96:	0a1b      	lsrs	r3, r3, #8
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	b2da      	uxtb	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaa4:	6a39      	ldr	r1, [r7, #32]
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f000 fa20 	bl	800aeec <I2C_WaitOnTXEFlagUntilTimeout>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00d      	beq.n	800aace <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	d107      	bne.n	800aaca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aac8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e005      	b.n	800aada <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aace:	893b      	ldrh	r3, [r7, #8]
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	00010002 	.word	0x00010002

0800aae8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b088      	sub	sp, #32
 800aaec:	af02      	add	r7, sp, #8
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	817b      	strh	r3, [r7, #10]
 800aafa:	460b      	mov	r3, r1
 800aafc:	813b      	strh	r3, [r7, #8]
 800aafe:	4613      	mov	r3, r2
 800ab00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ab10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f000 f8c2 	bl	800acb8 <I2C_WaitOnFlagUntilTimeout>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00d      	beq.n	800ab56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab48:	d103      	bne.n	800ab52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e0aa      	b.n	800acac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab56:	897b      	ldrh	r3, [r7, #10]
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	6a3a      	ldr	r2, [r7, #32]
 800ab6a:	4952      	ldr	r1, [pc, #328]	; (800acb4 <I2C_RequestMemoryRead+0x1cc>)
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 f91d 	bl	800adac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d001      	beq.n	800ab7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e097      	b.n	800acac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	617b      	str	r3, [r7, #20]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	617b      	str	r3, [r7, #20]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	617b      	str	r3, [r7, #20]
 800ab90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab94:	6a39      	ldr	r1, [r7, #32]
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f000 f9a8 	bl	800aeec <I2C_WaitOnTXEFlagUntilTimeout>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00d      	beq.n	800abbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba6:	2b04      	cmp	r3, #4
 800aba8:	d107      	bne.n	800abba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e076      	b.n	800acac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800abbe:	88fb      	ldrh	r3, [r7, #6]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d105      	bne.n	800abd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abc4:	893b      	ldrh	r3, [r7, #8]
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	611a      	str	r2, [r3, #16]
 800abce:	e021      	b.n	800ac14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800abd0:	893b      	ldrh	r3, [r7, #8]
 800abd2:	0a1b      	lsrs	r3, r3, #8
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe0:	6a39      	ldr	r1, [r7, #32]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f982 	bl	800aeec <I2C_WaitOnTXEFlagUntilTimeout>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00d      	beq.n	800ac0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf2:	2b04      	cmp	r3, #4
 800abf4:	d107      	bne.n	800ac06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e050      	b.n	800acac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac0a:	893b      	ldrh	r3, [r7, #8]
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac16:	6a39      	ldr	r1, [r7, #32]
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f967 	bl	800aeec <I2C_WaitOnTXEFlagUntilTimeout>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00d      	beq.n	800ac40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	d107      	bne.n	800ac3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e035      	b.n	800acac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 f82b 	bl	800acb8 <I2C_WaitOnFlagUntilTimeout>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00d      	beq.n	800ac84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac76:	d103      	bne.n	800ac80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e013      	b.n	800acac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ac84:	897b      	ldrh	r3, [r7, #10]
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	f043 0301 	orr.w	r3, r3, #1
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	6a3a      	ldr	r2, [r7, #32]
 800ac98:	4906      	ldr	r1, [pc, #24]	; (800acb4 <I2C_RequestMemoryRead+0x1cc>)
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f000 f886 	bl	800adac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	00010002 	.word	0x00010002

0800acb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	603b      	str	r3, [r7, #0]
 800acc4:	4613      	mov	r3, r2
 800acc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acc8:	e048      	b.n	800ad5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd0:	d044      	beq.n	800ad5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acd2:	f7fe f9e3 	bl	800909c <HAL_GetTick>
 800acd6:	4602      	mov	r2, r0
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d302      	bcc.n	800ace8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d139      	bne.n	800ad5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	0c1b      	lsrs	r3, r3, #16
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d10d      	bne.n	800ad0e <I2C_WaitOnFlagUntilTimeout+0x56>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	43da      	mvns	r2, r3
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	4013      	ands	r3, r2
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bf0c      	ite	eq
 800ad04:	2301      	moveq	r3, #1
 800ad06:	2300      	movne	r3, #0
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	e00c      	b.n	800ad28 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	43da      	mvns	r2, r3
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	4013      	ands	r3, r2
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bf0c      	ite	eq
 800ad20:	2301      	moveq	r3, #1
 800ad22:	2300      	movne	r3, #0
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	461a      	mov	r2, r3
 800ad28:	79fb      	ldrb	r3, [r7, #7]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d116      	bne.n	800ad5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2220      	movs	r2, #32
 800ad38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad48:	f043 0220 	orr.w	r2, r3, #32
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e023      	b.n	800ada4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d10d      	bne.n	800ad82 <I2C_WaitOnFlagUntilTimeout+0xca>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	43da      	mvns	r2, r3
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	4013      	ands	r3, r2
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	bf0c      	ite	eq
 800ad78:	2301      	moveq	r3, #1
 800ad7a:	2300      	movne	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	461a      	mov	r2, r3
 800ad80:	e00c      	b.n	800ad9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	43da      	mvns	r2, r3
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bf0c      	ite	eq
 800ad94:	2301      	moveq	r3, #1
 800ad96:	2300      	movne	r3, #0
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	79fb      	ldrb	r3, [r7, #7]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d093      	beq.n	800acca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800adba:	e071      	b.n	800aea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adca:	d123      	bne.n	800ae14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ade4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2220      	movs	r2, #32
 800adf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae00:	f043 0204 	orr.w	r2, r3, #4
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e067      	b.n	800aee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1a:	d041      	beq.n	800aea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae1c:	f7fe f93e 	bl	800909c <HAL_GetTick>
 800ae20:	4602      	mov	r2, r0
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d302      	bcc.n	800ae32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d136      	bne.n	800aea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	0c1b      	lsrs	r3, r3, #16
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d10c      	bne.n	800ae56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	43da      	mvns	r2, r3
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	4013      	ands	r3, r2
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	bf14      	ite	ne
 800ae4e:	2301      	movne	r3, #1
 800ae50:	2300      	moveq	r3, #0
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	e00b      	b.n	800ae6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	699b      	ldr	r3, [r3, #24]
 800ae5c:	43da      	mvns	r2, r3
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	4013      	ands	r3, r2
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bf14      	ite	ne
 800ae68:	2301      	movne	r3, #1
 800ae6a:	2300      	moveq	r3, #0
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d016      	beq.n	800aea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8c:	f043 0220 	orr.w	r2, r3, #32
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e021      	b.n	800aee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	0c1b      	lsrs	r3, r3, #16
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d10c      	bne.n	800aec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	43da      	mvns	r2, r3
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	bf14      	ite	ne
 800aebc:	2301      	movne	r3, #1
 800aebe:	2300      	moveq	r3, #0
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	e00b      	b.n	800aedc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	43da      	mvns	r2, r3
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	4013      	ands	r3, r2
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bf14      	ite	ne
 800aed6:	2301      	movne	r3, #1
 800aed8:	2300      	moveq	r3, #0
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f47f af6d 	bne.w	800adbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aef8:	e034      	b.n	800af64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f000 f8e3 	bl	800b0c6 <I2C_IsAcknowledgeFailed>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	e034      	b.n	800af74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af10:	d028      	beq.n	800af64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af12:	f7fe f8c3 	bl	800909c <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d302      	bcc.n	800af28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d11d      	bne.n	800af64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af32:	2b80      	cmp	r3, #128	; 0x80
 800af34:	d016      	beq.n	800af64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2220      	movs	r2, #32
 800af40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af50:	f043 0220 	orr.w	r2, r3, #32
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e007      	b.n	800af74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af6e:	2b80      	cmp	r3, #128	; 0x80
 800af70:	d1c3      	bne.n	800aefa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af88:	e034      	b.n	800aff4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f000 f89b 	bl	800b0c6 <I2C_IsAcknowledgeFailed>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d001      	beq.n	800af9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e034      	b.n	800b004 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa0:	d028      	beq.n	800aff4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afa2:	f7fe f87b 	bl	800909c <HAL_GetTick>
 800afa6:	4602      	mov	r2, r0
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d302      	bcc.n	800afb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d11d      	bne.n	800aff4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	f003 0304 	and.w	r3, r3, #4
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d016      	beq.n	800aff4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2220      	movs	r2, #32
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe0:	f043 0220 	orr.w	r2, r3, #32
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e007      	b.n	800b004 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	f003 0304 	and.w	r3, r3, #4
 800affe:	2b04      	cmp	r3, #4
 800b000:	d1c3      	bne.n	800af8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b018:	e049      	b.n	800b0ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	f003 0310 	and.w	r3, r3, #16
 800b024:	2b10      	cmp	r3, #16
 800b026:	d119      	bne.n	800b05c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f06f 0210 	mvn.w	r2, #16
 800b030:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2220      	movs	r2, #32
 800b03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e030      	b.n	800b0be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b05c:	f7fe f81e 	bl	800909c <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d302      	bcc.n	800b072 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d11d      	bne.n	800b0ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	695b      	ldr	r3, [r3, #20]
 800b078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07c:	2b40      	cmp	r3, #64	; 0x40
 800b07e:	d016      	beq.n	800b0ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2220      	movs	r2, #32
 800b08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	f043 0220 	orr.w	r2, r3, #32
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e007      	b.n	800b0be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b8:	2b40      	cmp	r3, #64	; 0x40
 800b0ba:	d1ae      	bne.n	800b01a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b083      	sub	sp, #12
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	695b      	ldr	r3, [r3, #20]
 800b0d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0dc:	d11b      	bne.n	800b116 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b0e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b102:	f043 0204 	orr.w	r2, r3, #4
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	e000      	b.n	800b118 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bc80      	pop	{r7}
 800b120:	4770      	bx	lr
	...

0800b124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e272      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 8087 	beq.w	800b252 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b144:	4b92      	ldr	r3, [pc, #584]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f003 030c 	and.w	r3, r3, #12
 800b14c:	2b04      	cmp	r3, #4
 800b14e:	d00c      	beq.n	800b16a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b150:	4b8f      	ldr	r3, [pc, #572]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	f003 030c 	and.w	r3, r3, #12
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d112      	bne.n	800b182 <HAL_RCC_OscConfig+0x5e>
 800b15c:	4b8c      	ldr	r3, [pc, #560]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b168:	d10b      	bne.n	800b182 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b16a:	4b89      	ldr	r3, [pc, #548]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b172:	2b00      	cmp	r3, #0
 800b174:	d06c      	beq.n	800b250 <HAL_RCC_OscConfig+0x12c>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d168      	bne.n	800b250 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e24c      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b18a:	d106      	bne.n	800b19a <HAL_RCC_OscConfig+0x76>
 800b18c:	4b80      	ldr	r3, [pc, #512]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a7f      	ldr	r2, [pc, #508]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	e02e      	b.n	800b1f8 <HAL_RCC_OscConfig+0xd4>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10c      	bne.n	800b1bc <HAL_RCC_OscConfig+0x98>
 800b1a2:	4b7b      	ldr	r3, [pc, #492]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a7a      	ldr	r2, [pc, #488]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1ac:	6013      	str	r3, [r2, #0]
 800b1ae:	4b78      	ldr	r3, [pc, #480]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a77      	ldr	r2, [pc, #476]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1b8:	6013      	str	r3, [r2, #0]
 800b1ba:	e01d      	b.n	800b1f8 <HAL_RCC_OscConfig+0xd4>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1c4:	d10c      	bne.n	800b1e0 <HAL_RCC_OscConfig+0xbc>
 800b1c6:	4b72      	ldr	r3, [pc, #456]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a71      	ldr	r2, [pc, #452]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	4b6f      	ldr	r3, [pc, #444]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a6e      	ldr	r2, [pc, #440]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	e00b      	b.n	800b1f8 <HAL_RCC_OscConfig+0xd4>
 800b1e0:	4b6b      	ldr	r3, [pc, #428]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a6a      	ldr	r2, [pc, #424]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	4b68      	ldr	r3, [pc, #416]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a67      	ldr	r2, [pc, #412]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b1f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d013      	beq.n	800b228 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b200:	f7fd ff4c 	bl	800909c <HAL_GetTick>
 800b204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b206:	e008      	b.n	800b21a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b208:	f7fd ff48 	bl	800909c <HAL_GetTick>
 800b20c:	4602      	mov	r2, r0
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	2b64      	cmp	r3, #100	; 0x64
 800b214:	d901      	bls.n	800b21a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e200      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b21a:	4b5d      	ldr	r3, [pc, #372]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0f0      	beq.n	800b208 <HAL_RCC_OscConfig+0xe4>
 800b226:	e014      	b.n	800b252 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b228:	f7fd ff38 	bl	800909c <HAL_GetTick>
 800b22c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b22e:	e008      	b.n	800b242 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b230:	f7fd ff34 	bl	800909c <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	2b64      	cmp	r3, #100	; 0x64
 800b23c:	d901      	bls.n	800b242 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b23e:	2303      	movs	r3, #3
 800b240:	e1ec      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b242:	4b53      	ldr	r3, [pc, #332]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1f0      	bne.n	800b230 <HAL_RCC_OscConfig+0x10c>
 800b24e:	e000      	b.n	800b252 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d063      	beq.n	800b326 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b25e:	4b4c      	ldr	r3, [pc, #304]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	f003 030c 	and.w	r3, r3, #12
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00b      	beq.n	800b282 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b26a:	4b49      	ldr	r3, [pc, #292]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	f003 030c 	and.w	r3, r3, #12
 800b272:	2b08      	cmp	r3, #8
 800b274:	d11c      	bne.n	800b2b0 <HAL_RCC_OscConfig+0x18c>
 800b276:	4b46      	ldr	r3, [pc, #280]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d116      	bne.n	800b2b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b282:	4b43      	ldr	r3, [pc, #268]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0302 	and.w	r3, r3, #2
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d005      	beq.n	800b29a <HAL_RCC_OscConfig+0x176>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d001      	beq.n	800b29a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e1c0      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b29a:	4b3d      	ldr	r3, [pc, #244]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	4939      	ldr	r1, [pc, #228]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b2ae:	e03a      	b.n	800b326 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d020      	beq.n	800b2fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b2b8:	4b36      	ldr	r3, [pc, #216]	; (800b394 <HAL_RCC_OscConfig+0x270>)
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2be:	f7fd feed 	bl	800909c <HAL_GetTick>
 800b2c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2c4:	e008      	b.n	800b2d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2c6:	f7fd fee9 	bl	800909c <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d901      	bls.n	800b2d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e1a1      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2d8:	4b2d      	ldr	r3, [pc, #180]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d0f0      	beq.n	800b2c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2e4:	4b2a      	ldr	r3, [pc, #168]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	4927      	ldr	r1, [pc, #156]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	600b      	str	r3, [r1, #0]
 800b2f8:	e015      	b.n	800b326 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2fa:	4b26      	ldr	r3, [pc, #152]	; (800b394 <HAL_RCC_OscConfig+0x270>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b300:	f7fd fecc 	bl	800909c <HAL_GetTick>
 800b304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b306:	e008      	b.n	800b31a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b308:	f7fd fec8 	bl	800909c <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	2b02      	cmp	r3, #2
 800b314:	d901      	bls.n	800b31a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b316:	2303      	movs	r3, #3
 800b318:	e180      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b31a:	4b1d      	ldr	r3, [pc, #116]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f003 0302 	and.w	r3, r3, #2
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1f0      	bne.n	800b308 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0308 	and.w	r3, r3, #8
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d03a      	beq.n	800b3a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d019      	beq.n	800b36e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b33a:	4b17      	ldr	r3, [pc, #92]	; (800b398 <HAL_RCC_OscConfig+0x274>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b340:	f7fd feac 	bl	800909c <HAL_GetTick>
 800b344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b346:	e008      	b.n	800b35a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b348:	f7fd fea8 	bl	800909c <HAL_GetTick>
 800b34c:	4602      	mov	r2, r0
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d901      	bls.n	800b35a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e160      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b35a:	4b0d      	ldr	r3, [pc, #52]	; (800b390 <HAL_RCC_OscConfig+0x26c>)
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	f003 0302 	and.w	r3, r3, #2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0f0      	beq.n	800b348 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b366:	2001      	movs	r0, #1
 800b368:	f000 face 	bl	800b908 <RCC_Delay>
 800b36c:	e01c      	b.n	800b3a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b36e:	4b0a      	ldr	r3, [pc, #40]	; (800b398 <HAL_RCC_OscConfig+0x274>)
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b374:	f7fd fe92 	bl	800909c <HAL_GetTick>
 800b378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b37a:	e00f      	b.n	800b39c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b37c:	f7fd fe8e 	bl	800909c <HAL_GetTick>
 800b380:	4602      	mov	r2, r0
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	2b02      	cmp	r3, #2
 800b388:	d908      	bls.n	800b39c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e146      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
 800b38e:	bf00      	nop
 800b390:	40021000 	.word	0x40021000
 800b394:	42420000 	.word	0x42420000
 800b398:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b39c:	4b92      	ldr	r3, [pc, #584]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	f003 0302 	and.w	r3, r3, #2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1e9      	bne.n	800b37c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f000 80a6 	beq.w	800b502 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b3ba:	4b8b      	ldr	r3, [pc, #556]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10d      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3c6:	4b88      	ldr	r3, [pc, #544]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b3c8:	69db      	ldr	r3, [r3, #28]
 800b3ca:	4a87      	ldr	r2, [pc, #540]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b3cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3d0:	61d3      	str	r3, [r2, #28]
 800b3d2:	4b85      	ldr	r3, [pc, #532]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3da:	60bb      	str	r3, [r7, #8]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3e2:	4b82      	ldr	r3, [pc, #520]	; (800b5ec <HAL_RCC_OscConfig+0x4c8>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d118      	bne.n	800b420 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b3ee:	4b7f      	ldr	r3, [pc, #508]	; (800b5ec <HAL_RCC_OscConfig+0x4c8>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a7e      	ldr	r2, [pc, #504]	; (800b5ec <HAL_RCC_OscConfig+0x4c8>)
 800b3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3fa:	f7fd fe4f 	bl	800909c <HAL_GetTick>
 800b3fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b400:	e008      	b.n	800b414 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b402:	f7fd fe4b 	bl	800909c <HAL_GetTick>
 800b406:	4602      	mov	r2, r0
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	2b64      	cmp	r3, #100	; 0x64
 800b40e:	d901      	bls.n	800b414 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e103      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b414:	4b75      	ldr	r3, [pc, #468]	; (800b5ec <HAL_RCC_OscConfig+0x4c8>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0f0      	beq.n	800b402 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d106      	bne.n	800b436 <HAL_RCC_OscConfig+0x312>
 800b428:	4b6f      	ldr	r3, [pc, #444]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b42a:	6a1b      	ldr	r3, [r3, #32]
 800b42c:	4a6e      	ldr	r2, [pc, #440]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b42e:	f043 0301 	orr.w	r3, r3, #1
 800b432:	6213      	str	r3, [r2, #32]
 800b434:	e02d      	b.n	800b492 <HAL_RCC_OscConfig+0x36e>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10c      	bne.n	800b458 <HAL_RCC_OscConfig+0x334>
 800b43e:	4b6a      	ldr	r3, [pc, #424]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	4a69      	ldr	r2, [pc, #420]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b444:	f023 0301 	bic.w	r3, r3, #1
 800b448:	6213      	str	r3, [r2, #32]
 800b44a:	4b67      	ldr	r3, [pc, #412]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	4a66      	ldr	r2, [pc, #408]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b450:	f023 0304 	bic.w	r3, r3, #4
 800b454:	6213      	str	r3, [r2, #32]
 800b456:	e01c      	b.n	800b492 <HAL_RCC_OscConfig+0x36e>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	2b05      	cmp	r3, #5
 800b45e:	d10c      	bne.n	800b47a <HAL_RCC_OscConfig+0x356>
 800b460:	4b61      	ldr	r3, [pc, #388]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	4a60      	ldr	r2, [pc, #384]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b466:	f043 0304 	orr.w	r3, r3, #4
 800b46a:	6213      	str	r3, [r2, #32]
 800b46c:	4b5e      	ldr	r3, [pc, #376]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b46e:	6a1b      	ldr	r3, [r3, #32]
 800b470:	4a5d      	ldr	r2, [pc, #372]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b472:	f043 0301 	orr.w	r3, r3, #1
 800b476:	6213      	str	r3, [r2, #32]
 800b478:	e00b      	b.n	800b492 <HAL_RCC_OscConfig+0x36e>
 800b47a:	4b5b      	ldr	r3, [pc, #364]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	4a5a      	ldr	r2, [pc, #360]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b480:	f023 0301 	bic.w	r3, r3, #1
 800b484:	6213      	str	r3, [r2, #32]
 800b486:	4b58      	ldr	r3, [pc, #352]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	4a57      	ldr	r2, [pc, #348]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b48c:	f023 0304 	bic.w	r3, r3, #4
 800b490:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d015      	beq.n	800b4c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b49a:	f7fd fdff 	bl	800909c <HAL_GetTick>
 800b49e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4a0:	e00a      	b.n	800b4b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4a2:	f7fd fdfb 	bl	800909c <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d901      	bls.n	800b4b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e0b1      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4b8:	4b4b      	ldr	r3, [pc, #300]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
 800b4bc:	f003 0302 	and.w	r3, r3, #2
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0ee      	beq.n	800b4a2 <HAL_RCC_OscConfig+0x37e>
 800b4c4:	e014      	b.n	800b4f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4c6:	f7fd fde9 	bl	800909c <HAL_GetTick>
 800b4ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4cc:	e00a      	b.n	800b4e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4ce:	f7fd fde5 	bl	800909c <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d901      	bls.n	800b4e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e09b      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4e4:	4b40      	ldr	r3, [pc, #256]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	f003 0302 	and.w	r3, r3, #2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1ee      	bne.n	800b4ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b4f0:	7dfb      	ldrb	r3, [r7, #23]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d105      	bne.n	800b502 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4f6:	4b3c      	ldr	r3, [pc, #240]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	4a3b      	ldr	r2, [pc, #236]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b4fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b500:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	69db      	ldr	r3, [r3, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 8087 	beq.w	800b61a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b50c:	4b36      	ldr	r3, [pc, #216]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	f003 030c 	and.w	r3, r3, #12
 800b514:	2b08      	cmp	r3, #8
 800b516:	d061      	beq.n	800b5dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	69db      	ldr	r3, [r3, #28]
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d146      	bne.n	800b5ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b520:	4b33      	ldr	r3, [pc, #204]	; (800b5f0 <HAL_RCC_OscConfig+0x4cc>)
 800b522:	2200      	movs	r2, #0
 800b524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b526:	f7fd fdb9 	bl	800909c <HAL_GetTick>
 800b52a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b52c:	e008      	b.n	800b540 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b52e:	f7fd fdb5 	bl	800909c <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d901      	bls.n	800b540 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e06d      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b540:	4b29      	ldr	r3, [pc, #164]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1f0      	bne.n	800b52e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a1b      	ldr	r3, [r3, #32]
 800b550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b554:	d108      	bne.n	800b568 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b556:	4b24      	ldr	r3, [pc, #144]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	4921      	ldr	r1, [pc, #132]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b564:	4313      	orrs	r3, r2
 800b566:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b568:	4b1f      	ldr	r3, [pc, #124]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a19      	ldr	r1, [r3, #32]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b578:	430b      	orrs	r3, r1
 800b57a:	491b      	ldr	r1, [pc, #108]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b57c:	4313      	orrs	r3, r2
 800b57e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b580:	4b1b      	ldr	r3, [pc, #108]	; (800b5f0 <HAL_RCC_OscConfig+0x4cc>)
 800b582:	2201      	movs	r2, #1
 800b584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b586:	f7fd fd89 	bl	800909c <HAL_GetTick>
 800b58a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b58c:	e008      	b.n	800b5a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b58e:	f7fd fd85 	bl	800909c <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d901      	bls.n	800b5a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e03d      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5a0:	4b11      	ldr	r3, [pc, #68]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d0f0      	beq.n	800b58e <HAL_RCC_OscConfig+0x46a>
 800b5ac:	e035      	b.n	800b61a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5ae:	4b10      	ldr	r3, [pc, #64]	; (800b5f0 <HAL_RCC_OscConfig+0x4cc>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5b4:	f7fd fd72 	bl	800909c <HAL_GetTick>
 800b5b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b5ba:	e008      	b.n	800b5ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5bc:	f7fd fd6e 	bl	800909c <HAL_GetTick>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d901      	bls.n	800b5ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e026      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b5ce:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <HAL_RCC_OscConfig+0x4c4>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1f0      	bne.n	800b5bc <HAL_RCC_OscConfig+0x498>
 800b5da:	e01e      	b.n	800b61a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d107      	bne.n	800b5f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e019      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
 800b5e8:	40021000 	.word	0x40021000
 800b5ec:	40007000 	.word	0x40007000
 800b5f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b5f4:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <HAL_RCC_OscConfig+0x500>)
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	429a      	cmp	r2, r3
 800b606:	d106      	bne.n	800b616 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b612:	429a      	cmp	r2, r3
 800b614:	d001      	beq.n	800b61a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	e000      	b.n	800b61c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	40021000 	.word	0x40021000

0800b628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	e0d0      	b.n	800b7de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b63c:	4b6a      	ldr	r3, [pc, #424]	; (800b7e8 <HAL_RCC_ClockConfig+0x1c0>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 0307 	and.w	r3, r3, #7
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	429a      	cmp	r2, r3
 800b648:	d910      	bls.n	800b66c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b64a:	4b67      	ldr	r3, [pc, #412]	; (800b7e8 <HAL_RCC_ClockConfig+0x1c0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f023 0207 	bic.w	r2, r3, #7
 800b652:	4965      	ldr	r1, [pc, #404]	; (800b7e8 <HAL_RCC_ClockConfig+0x1c0>)
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	4313      	orrs	r3, r2
 800b658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b65a:	4b63      	ldr	r3, [pc, #396]	; (800b7e8 <HAL_RCC_ClockConfig+0x1c0>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 0307 	and.w	r3, r3, #7
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d001      	beq.n	800b66c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	e0b8      	b.n	800b7de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b00      	cmp	r3, #0
 800b676:	d020      	beq.n	800b6ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0304 	and.w	r3, r3, #4
 800b680:	2b00      	cmp	r3, #0
 800b682:	d005      	beq.n	800b690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b684:	4b59      	ldr	r3, [pc, #356]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	4a58      	ldr	r2, [pc, #352]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b68a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b68e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0308 	and.w	r3, r3, #8
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d005      	beq.n	800b6a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b69c:	4b53      	ldr	r3, [pc, #332]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	4a52      	ldr	r2, [pc, #328]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b6a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b6a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6a8:	4b50      	ldr	r3, [pc, #320]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	494d      	ldr	r1, [pc, #308]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d040      	beq.n	800b748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d107      	bne.n	800b6de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6ce:	4b47      	ldr	r3, [pc, #284]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d115      	bne.n	800b706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e07f      	b.n	800b7de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d107      	bne.n	800b6f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6e6:	4b41      	ldr	r3, [pc, #260]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d109      	bne.n	800b706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e073      	b.n	800b7de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6f6:	4b3d      	ldr	r3, [pc, #244]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e06b      	b.n	800b7de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b706:	4b39      	ldr	r3, [pc, #228]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	f023 0203 	bic.w	r2, r3, #3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	4936      	ldr	r1, [pc, #216]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b714:	4313      	orrs	r3, r2
 800b716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b718:	f7fd fcc0 	bl	800909c <HAL_GetTick>
 800b71c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b71e:	e00a      	b.n	800b736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b720:	f7fd fcbc 	bl	800909c <HAL_GetTick>
 800b724:	4602      	mov	r2, r0
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b72e:	4293      	cmp	r3, r2
 800b730:	d901      	bls.n	800b736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e053      	b.n	800b7de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b736:	4b2d      	ldr	r3, [pc, #180]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	f003 020c 	and.w	r2, r3, #12
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	429a      	cmp	r2, r3
 800b746:	d1eb      	bne.n	800b720 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b748:	4b27      	ldr	r3, [pc, #156]	; (800b7e8 <HAL_RCC_ClockConfig+0x1c0>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 0307 	and.w	r3, r3, #7
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	429a      	cmp	r2, r3
 800b754:	d210      	bcs.n	800b778 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b756:	4b24      	ldr	r3, [pc, #144]	; (800b7e8 <HAL_RCC_ClockConfig+0x1c0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f023 0207 	bic.w	r2, r3, #7
 800b75e:	4922      	ldr	r1, [pc, #136]	; (800b7e8 <HAL_RCC_ClockConfig+0x1c0>)
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	4313      	orrs	r3, r2
 800b764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b766:	4b20      	ldr	r3, [pc, #128]	; (800b7e8 <HAL_RCC_ClockConfig+0x1c0>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0307 	and.w	r3, r3, #7
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	429a      	cmp	r2, r3
 800b772:	d001      	beq.n	800b778 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e032      	b.n	800b7de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 0304 	and.w	r3, r3, #4
 800b780:	2b00      	cmp	r3, #0
 800b782:	d008      	beq.n	800b796 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b784:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	4916      	ldr	r1, [pc, #88]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b792:	4313      	orrs	r3, r2
 800b794:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f003 0308 	and.w	r3, r3, #8
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d009      	beq.n	800b7b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b7a2:	4b12      	ldr	r3, [pc, #72]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	490e      	ldr	r1, [pc, #56]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b7b6:	f000 f821 	bl	800b7fc <HAL_RCC_GetSysClockFreq>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <HAL_RCC_ClockConfig+0x1c4>)
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	091b      	lsrs	r3, r3, #4
 800b7c2:	f003 030f 	and.w	r3, r3, #15
 800b7c6:	490a      	ldr	r1, [pc, #40]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b7c8:	5ccb      	ldrb	r3, [r1, r3]
 800b7ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ce:	4a09      	ldr	r2, [pc, #36]	; (800b7f4 <HAL_RCC_ClockConfig+0x1cc>)
 800b7d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b7d2:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <HAL_RCC_ClockConfig+0x1d0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fd fc1e 	bl	8009018 <HAL_InitTick>

  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	40022000 	.word	0x40022000
 800b7ec:	40021000 	.word	0x40021000
 800b7f0:	0800e56c 	.word	0x0800e56c
 800b7f4:	200009b4 	.word	0x200009b4
 800b7f8:	200009b8 	.word	0x200009b8

0800b7fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b087      	sub	sp, #28
 800b800:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b802:	2300      	movs	r3, #0
 800b804:	60fb      	str	r3, [r7, #12]
 800b806:	2300      	movs	r3, #0
 800b808:	60bb      	str	r3, [r7, #8]
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	2300      	movs	r3, #0
 800b810:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b816:	4b1e      	ldr	r3, [pc, #120]	; (800b890 <HAL_RCC_GetSysClockFreq+0x94>)
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f003 030c 	and.w	r3, r3, #12
 800b822:	2b04      	cmp	r3, #4
 800b824:	d002      	beq.n	800b82c <HAL_RCC_GetSysClockFreq+0x30>
 800b826:	2b08      	cmp	r3, #8
 800b828:	d003      	beq.n	800b832 <HAL_RCC_GetSysClockFreq+0x36>
 800b82a:	e027      	b.n	800b87c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b82c:	4b19      	ldr	r3, [pc, #100]	; (800b894 <HAL_RCC_GetSysClockFreq+0x98>)
 800b82e:	613b      	str	r3, [r7, #16]
      break;
 800b830:	e027      	b.n	800b882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	0c9b      	lsrs	r3, r3, #18
 800b836:	f003 030f 	and.w	r3, r3, #15
 800b83a:	4a17      	ldr	r2, [pc, #92]	; (800b898 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b83c:	5cd3      	ldrb	r3, [r2, r3]
 800b83e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d010      	beq.n	800b86c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b84a:	4b11      	ldr	r3, [pc, #68]	; (800b890 <HAL_RCC_GetSysClockFreq+0x94>)
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	0c5b      	lsrs	r3, r3, #17
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	4a11      	ldr	r2, [pc, #68]	; (800b89c <HAL_RCC_GetSysClockFreq+0xa0>)
 800b856:	5cd3      	ldrb	r3, [r2, r3]
 800b858:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a0d      	ldr	r2, [pc, #52]	; (800b894 <HAL_RCC_GetSysClockFreq+0x98>)
 800b85e:	fb03 f202 	mul.w	r2, r3, r2
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	fbb2 f3f3 	udiv	r3, r2, r3
 800b868:	617b      	str	r3, [r7, #20]
 800b86a:	e004      	b.n	800b876 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a0c      	ldr	r2, [pc, #48]	; (800b8a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b870:	fb02 f303 	mul.w	r3, r2, r3
 800b874:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	613b      	str	r3, [r7, #16]
      break;
 800b87a:	e002      	b.n	800b882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b87c:	4b05      	ldr	r3, [pc, #20]	; (800b894 <HAL_RCC_GetSysClockFreq+0x98>)
 800b87e:	613b      	str	r3, [r7, #16]
      break;
 800b880:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b882:	693b      	ldr	r3, [r7, #16]
}
 800b884:	4618      	mov	r0, r3
 800b886:	371c      	adds	r7, #28
 800b888:	46bd      	mov	sp, r7
 800b88a:	bc80      	pop	{r7}
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	40021000 	.word	0x40021000
 800b894:	007a1200 	.word	0x007a1200
 800b898:	0800e584 	.word	0x0800e584
 800b89c:	0800e594 	.word	0x0800e594
 800b8a0:	003d0900 	.word	0x003d0900

0800b8a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8a8:	4b02      	ldr	r3, [pc, #8]	; (800b8b4 <HAL_RCC_GetHCLKFreq+0x10>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bc80      	pop	{r7}
 800b8b2:	4770      	bx	lr
 800b8b4:	200009b4 	.word	0x200009b4

0800b8b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b8bc:	f7ff fff2 	bl	800b8a4 <HAL_RCC_GetHCLKFreq>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	0a1b      	lsrs	r3, r3, #8
 800b8c8:	f003 0307 	and.w	r3, r3, #7
 800b8cc:	4903      	ldr	r1, [pc, #12]	; (800b8dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8ce:	5ccb      	ldrb	r3, [r1, r3]
 800b8d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	40021000 	.word	0x40021000
 800b8dc:	0800e57c 	.word	0x0800e57c

0800b8e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b8e4:	f7ff ffde 	bl	800b8a4 <HAL_RCC_GetHCLKFreq>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	4b05      	ldr	r3, [pc, #20]	; (800b900 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	0adb      	lsrs	r3, r3, #11
 800b8f0:	f003 0307 	and.w	r3, r3, #7
 800b8f4:	4903      	ldr	r1, [pc, #12]	; (800b904 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8f6:	5ccb      	ldrb	r3, [r1, r3]
 800b8f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	40021000 	.word	0x40021000
 800b904:	0800e57c 	.word	0x0800e57c

0800b908 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b910:	4b0a      	ldr	r3, [pc, #40]	; (800b93c <RCC_Delay+0x34>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a0a      	ldr	r2, [pc, #40]	; (800b940 <RCC_Delay+0x38>)
 800b916:	fba2 2303 	umull	r2, r3, r2, r3
 800b91a:	0a5b      	lsrs	r3, r3, #9
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	fb02 f303 	mul.w	r3, r2, r3
 800b922:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b924:	bf00      	nop
  }
  while (Delay --);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	1e5a      	subs	r2, r3, #1
 800b92a:	60fa      	str	r2, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1f9      	bne.n	800b924 <RCC_Delay+0x1c>
}
 800b930:	bf00      	nop
 800b932:	bf00      	nop
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	bc80      	pop	{r7}
 800b93a:	4770      	bx	lr
 800b93c:	200009b4 	.word	0x200009b4
 800b940:	10624dd3 	.word	0x10624dd3

0800b944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e041      	b.n	800b9da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7fd fa26 	bl	8008dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3304      	adds	r3, #4
 800b980:	4619      	mov	r1, r3
 800b982:	4610      	mov	r0, r2
 800b984:	f000 fa82 	bl	800be8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
	...

0800b9e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d001      	beq.n	800b9fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e044      	b.n	800ba86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2202      	movs	r2, #2
 800ba00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68da      	ldr	r2, [r3, #12]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f042 0201 	orr.w	r2, r2, #1
 800ba12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a1d      	ldr	r2, [pc, #116]	; (800ba90 <HAL_TIM_Base_Start_IT+0xac>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d018      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x6c>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a1c      	ldr	r2, [pc, #112]	; (800ba94 <HAL_TIM_Base_Start_IT+0xb0>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d013      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x6c>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba30:	d00e      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x6c>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a18      	ldr	r2, [pc, #96]	; (800ba98 <HAL_TIM_Base_Start_IT+0xb4>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d009      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x6c>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a16      	ldr	r2, [pc, #88]	; (800ba9c <HAL_TIM_Base_Start_IT+0xb8>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d004      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0x6c>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a15      	ldr	r2, [pc, #84]	; (800baa0 <HAL_TIM_Base_Start_IT+0xbc>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d111      	bne.n	800ba74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	f003 0307 	and.w	r3, r3, #7
 800ba5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b06      	cmp	r3, #6
 800ba60:	d010      	beq.n	800ba84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f042 0201 	orr.w	r2, r2, #1
 800ba70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba72:	e007      	b.n	800ba84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0201 	orr.w	r2, r2, #1
 800ba82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bc80      	pop	{r7}
 800ba8e:	4770      	bx	lr
 800ba90:	40012c00 	.word	0x40012c00
 800ba94:	40013400 	.word	0x40013400
 800ba98:	40000400 	.word	0x40000400
 800ba9c:	40000800 	.word	0x40000800
 800baa0:	40000c00 	.word	0x40000c00

0800baa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d122      	bne.n	800bb00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	f003 0302 	and.w	r3, r3, #2
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d11b      	bne.n	800bb00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f06f 0202 	mvn.w	r2, #2
 800bad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2201      	movs	r2, #1
 800bad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	f003 0303 	and.w	r3, r3, #3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f9b4 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800baec:	e005      	b.n	800bafa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f9a7 	bl	800be42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f9b6 	bl	800be66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	f003 0304 	and.w	r3, r3, #4
 800bb0a:	2b04      	cmp	r3, #4
 800bb0c:	d122      	bne.n	800bb54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	f003 0304 	and.w	r3, r3, #4
 800bb18:	2b04      	cmp	r3, #4
 800bb1a:	d11b      	bne.n	800bb54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f06f 0204 	mvn.w	r2, #4
 800bb24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f98a 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800bb40:	e005      	b.n	800bb4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f97d 	bl	800be42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f98c 	bl	800be66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	f003 0308 	and.w	r3, r3, #8
 800bb5e:	2b08      	cmp	r3, #8
 800bb60:	d122      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	f003 0308 	and.w	r3, r3, #8
 800bb6c:	2b08      	cmp	r3, #8
 800bb6e:	d11b      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f06f 0208 	mvn.w	r2, #8
 800bb78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2204      	movs	r2, #4
 800bb7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	f003 0303 	and.w	r3, r3, #3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f960 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800bb94:	e005      	b.n	800bba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f953 	bl	800be42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 f962 	bl	800be66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	f003 0310 	and.w	r3, r3, #16
 800bbb2:	2b10      	cmp	r3, #16
 800bbb4:	d122      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	f003 0310 	and.w	r3, r3, #16
 800bbc0:	2b10      	cmp	r3, #16
 800bbc2:	d11b      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f06f 0210 	mvn.w	r2, #16
 800bbcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f936 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800bbe8:	e005      	b.n	800bbf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f929 	bl	800be42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f938 	bl	800be66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d10e      	bne.n	800bc28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d107      	bne.n	800bc28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f06f 0201 	mvn.w	r2, #1
 800bc20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7fc fd1a 	bl	800865c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc32:	2b80      	cmp	r3, #128	; 0x80
 800bc34:	d10e      	bne.n	800bc54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc40:	2b80      	cmp	r3, #128	; 0x80
 800bc42:	d107      	bne.n	800bc54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 faa1 	bl	800c196 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc5e:	2b40      	cmp	r3, #64	; 0x40
 800bc60:	d10e      	bne.n	800bc80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc6c:	2b40      	cmp	r3, #64	; 0x40
 800bc6e:	d107      	bne.n	800bc80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f8fc 	bl	800be78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	f003 0320 	and.w	r3, r3, #32
 800bc8a:	2b20      	cmp	r3, #32
 800bc8c:	d10e      	bne.n	800bcac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	f003 0320 	and.w	r3, r3, #32
 800bc98:	2b20      	cmp	r3, #32
 800bc9a:	d107      	bne.n	800bcac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f06f 0220 	mvn.w	r2, #32
 800bca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fa6c 	bl	800c184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d101      	bne.n	800bcd0 <HAL_TIM_ConfigClockSource+0x1c>
 800bccc:	2302      	movs	r3, #2
 800bcce:	e0b4      	b.n	800be3a <HAL_TIM_ConfigClockSource+0x186>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2202      	movs	r2, #2
 800bcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bcee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd08:	d03e      	beq.n	800bd88 <HAL_TIM_ConfigClockSource+0xd4>
 800bd0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd0e:	f200 8087 	bhi.w	800be20 <HAL_TIM_ConfigClockSource+0x16c>
 800bd12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd16:	f000 8086 	beq.w	800be26 <HAL_TIM_ConfigClockSource+0x172>
 800bd1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1e:	d87f      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x16c>
 800bd20:	2b70      	cmp	r3, #112	; 0x70
 800bd22:	d01a      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0xa6>
 800bd24:	2b70      	cmp	r3, #112	; 0x70
 800bd26:	d87b      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x16c>
 800bd28:	2b60      	cmp	r3, #96	; 0x60
 800bd2a:	d050      	beq.n	800bdce <HAL_TIM_ConfigClockSource+0x11a>
 800bd2c:	2b60      	cmp	r3, #96	; 0x60
 800bd2e:	d877      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x16c>
 800bd30:	2b50      	cmp	r3, #80	; 0x50
 800bd32:	d03c      	beq.n	800bdae <HAL_TIM_ConfigClockSource+0xfa>
 800bd34:	2b50      	cmp	r3, #80	; 0x50
 800bd36:	d873      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x16c>
 800bd38:	2b40      	cmp	r3, #64	; 0x40
 800bd3a:	d058      	beq.n	800bdee <HAL_TIM_ConfigClockSource+0x13a>
 800bd3c:	2b40      	cmp	r3, #64	; 0x40
 800bd3e:	d86f      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x16c>
 800bd40:	2b30      	cmp	r3, #48	; 0x30
 800bd42:	d064      	beq.n	800be0e <HAL_TIM_ConfigClockSource+0x15a>
 800bd44:	2b30      	cmp	r3, #48	; 0x30
 800bd46:	d86b      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x16c>
 800bd48:	2b20      	cmp	r3, #32
 800bd4a:	d060      	beq.n	800be0e <HAL_TIM_ConfigClockSource+0x15a>
 800bd4c:	2b20      	cmp	r3, #32
 800bd4e:	d867      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x16c>
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d05c      	beq.n	800be0e <HAL_TIM_ConfigClockSource+0x15a>
 800bd54:	2b10      	cmp	r3, #16
 800bd56:	d05a      	beq.n	800be0e <HAL_TIM_ConfigClockSource+0x15a>
 800bd58:	e062      	b.n	800be20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd6a:	f000 f980 	bl	800c06e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	609a      	str	r2, [r3, #8]
      break;
 800bd86:	e04f      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd98:	f000 f969 	bl	800c06e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	689a      	ldr	r2, [r3, #8]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdaa:	609a      	str	r2, [r3, #8]
      break;
 800bdac:	e03c      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f000 f8e0 	bl	800bf80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2150      	movs	r1, #80	; 0x50
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 f937 	bl	800c03a <TIM_ITRx_SetConfig>
      break;
 800bdcc:	e02c      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdda:	461a      	mov	r2, r3
 800bddc:	f000 f8fe 	bl	800bfdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2160      	movs	r1, #96	; 0x60
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 f927 	bl	800c03a <TIM_ITRx_SetConfig>
      break;
 800bdec:	e01c      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f000 f8c0 	bl	800bf80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2140      	movs	r1, #64	; 0x40
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f917 	bl	800c03a <TIM_ITRx_SetConfig>
      break;
 800be0c:	e00c      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4619      	mov	r1, r3
 800be18:	4610      	mov	r0, r2
 800be1a:	f000 f90e 	bl	800c03a <TIM_ITRx_SetConfig>
      break;
 800be1e:	e003      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	73fb      	strb	r3, [r7, #15]
      break;
 800be24:	e000      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800be26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be38:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be42:	b480      	push	{r7}
 800be44:	b083      	sub	sp, #12
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be4a:	bf00      	nop
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	bc80      	pop	{r7}
 800be52:	4770      	bx	lr

0800be54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	bc80      	pop	{r7}
 800be64:	4770      	bx	lr

0800be66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be66:	b480      	push	{r7}
 800be68:	b083      	sub	sp, #12
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be6e:	bf00      	nop
 800be70:	370c      	adds	r7, #12
 800be72:	46bd      	mov	sp, r7
 800be74:	bc80      	pop	{r7}
 800be76:	4770      	bx	lr

0800be78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	bc80      	pop	{r7}
 800be88:	4770      	bx	lr
	...

0800be8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a33      	ldr	r2, [pc, #204]	; (800bf6c <TIM_Base_SetConfig+0xe0>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d013      	beq.n	800becc <TIM_Base_SetConfig+0x40>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a32      	ldr	r2, [pc, #200]	; (800bf70 <TIM_Base_SetConfig+0xe4>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d00f      	beq.n	800becc <TIM_Base_SetConfig+0x40>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beb2:	d00b      	beq.n	800becc <TIM_Base_SetConfig+0x40>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a2f      	ldr	r2, [pc, #188]	; (800bf74 <TIM_Base_SetConfig+0xe8>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d007      	beq.n	800becc <TIM_Base_SetConfig+0x40>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a2e      	ldr	r2, [pc, #184]	; (800bf78 <TIM_Base_SetConfig+0xec>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d003      	beq.n	800becc <TIM_Base_SetConfig+0x40>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a2d      	ldr	r2, [pc, #180]	; (800bf7c <TIM_Base_SetConfig+0xf0>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d108      	bne.n	800bede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4313      	orrs	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a22      	ldr	r2, [pc, #136]	; (800bf6c <TIM_Base_SetConfig+0xe0>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d013      	beq.n	800bf0e <TIM_Base_SetConfig+0x82>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a21      	ldr	r2, [pc, #132]	; (800bf70 <TIM_Base_SetConfig+0xe4>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d00f      	beq.n	800bf0e <TIM_Base_SetConfig+0x82>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bef4:	d00b      	beq.n	800bf0e <TIM_Base_SetConfig+0x82>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a1e      	ldr	r2, [pc, #120]	; (800bf74 <TIM_Base_SetConfig+0xe8>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d007      	beq.n	800bf0e <TIM_Base_SetConfig+0x82>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a1d      	ldr	r2, [pc, #116]	; (800bf78 <TIM_Base_SetConfig+0xec>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d003      	beq.n	800bf0e <TIM_Base_SetConfig+0x82>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4a1c      	ldr	r2, [pc, #112]	; (800bf7c <TIM_Base_SetConfig+0xf0>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d108      	bne.n	800bf20 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	695b      	ldr	r3, [r3, #20]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	689a      	ldr	r2, [r3, #8]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a09      	ldr	r2, [pc, #36]	; (800bf6c <TIM_Base_SetConfig+0xe0>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d003      	beq.n	800bf54 <TIM_Base_SetConfig+0xc8>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a08      	ldr	r2, [pc, #32]	; (800bf70 <TIM_Base_SetConfig+0xe4>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d103      	bne.n	800bf5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	691a      	ldr	r2, [r3, #16]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	615a      	str	r2, [r3, #20]
}
 800bf62:	bf00      	nop
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bc80      	pop	{r7}
 800bf6a:	4770      	bx	lr
 800bf6c:	40012c00 	.word	0x40012c00
 800bf70:	40013400 	.word	0x40013400
 800bf74:	40000400 	.word	0x40000400
 800bf78:	40000800 	.word	0x40000800
 800bf7c:	40000c00 	.word	0x40000c00

0800bf80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b087      	sub	sp, #28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6a1b      	ldr	r3, [r3, #32]
 800bf90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	f023 0201 	bic.w	r2, r3, #1
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	011b      	lsls	r3, r3, #4
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	f023 030a 	bic.w	r3, r3, #10
 800bfbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	621a      	str	r2, [r3, #32]
}
 800bfd2:	bf00      	nop
 800bfd4:	371c      	adds	r7, #28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bc80      	pop	{r7}
 800bfda:	4770      	bx	lr

0800bfdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b087      	sub	sp, #28
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6a1b      	ldr	r3, [r3, #32]
 800bfec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	f023 0210 	bic.w	r2, r3, #16
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	031b      	lsls	r3, r3, #12
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	4313      	orrs	r3, r2
 800c010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c018:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	011b      	lsls	r3, r3, #4
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	4313      	orrs	r3, r2
 800c022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	693a      	ldr	r2, [r7, #16]
 800c028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	621a      	str	r2, [r3, #32]
}
 800c030:	bf00      	nop
 800c032:	371c      	adds	r7, #28
 800c034:	46bd      	mov	sp, r7
 800c036:	bc80      	pop	{r7}
 800c038:	4770      	bx	lr

0800c03a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4313      	orrs	r3, r2
 800c058:	f043 0307 	orr.w	r3, r3, #7
 800c05c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	609a      	str	r2, [r3, #8]
}
 800c064:	bf00      	nop
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	bc80      	pop	{r7}
 800c06c:	4770      	bx	lr

0800c06e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c06e:	b480      	push	{r7}
 800c070:	b087      	sub	sp, #28
 800c072:	af00      	add	r7, sp, #0
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	607a      	str	r2, [r7, #4]
 800c07a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c088:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	021a      	lsls	r2, r3, #8
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	431a      	orrs	r2, r3
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	4313      	orrs	r3, r2
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	4313      	orrs	r3, r2
 800c09a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	697a      	ldr	r2, [r7, #20]
 800c0a0:	609a      	str	r2, [r3, #8]
}
 800c0a2:	bf00      	nop
 800c0a4:	371c      	adds	r7, #28
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bc80      	pop	{r7}
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d101      	bne.n	800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	e050      	b.n	800c166 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a1b      	ldr	r2, [pc, #108]	; (800c170 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d018      	beq.n	800c13a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a19      	ldr	r2, [pc, #100]	; (800c174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d013      	beq.n	800c13a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c11a:	d00e      	beq.n	800c13a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a15      	ldr	r2, [pc, #84]	; (800c178 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d009      	beq.n	800c13a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a14      	ldr	r2, [pc, #80]	; (800c17c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d004      	beq.n	800c13a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a12      	ldr	r2, [pc, #72]	; (800c180 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d10c      	bne.n	800c154 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	4313      	orrs	r3, r2
 800c14a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c164:	2300      	movs	r3, #0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bc80      	pop	{r7}
 800c16e:	4770      	bx	lr
 800c170:	40012c00 	.word	0x40012c00
 800c174:	40013400 	.word	0x40013400
 800c178:	40000400 	.word	0x40000400
 800c17c:	40000800 	.word	0x40000800
 800c180:	40000c00 	.word	0x40000c00

0800c184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	bc80      	pop	{r7}
 800c194:	4770      	bx	lr

0800c196 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c196:	b480      	push	{r7}
 800c198:	b083      	sub	sp, #12
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c19e:	bf00      	nop
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bc80      	pop	{r7}
 800c1a6:	4770      	bx	lr

0800c1a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e042      	b.n	800c240 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d106      	bne.n	800c1d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7fc fe1a 	bl	8008e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2224      	movs	r2, #36	; 0x24
 800c1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68da      	ldr	r2, [r3, #12]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fcb5 	bl	800cb5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	691a      	ldr	r2, [r3, #16]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	695a      	ldr	r2, [r3, #20]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68da      	ldr	r2, [r3, #12]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2220      	movs	r2, #32
 800c22c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2220      	movs	r2, #32
 800c234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	4613      	mov	r3, r2
 800c254:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b20      	cmp	r3, #32
 800c260:	d121      	bne.n	800c2a6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <HAL_UART_Transmit_IT+0x26>
 800c268:	88fb      	ldrh	r3, [r7, #6]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e01a      	b.n	800c2a8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	88fa      	ldrh	r2, [r7, #6]
 800c27c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	88fa      	ldrh	r2, [r7, #6]
 800c282:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2221      	movs	r2, #33	; 0x21
 800c28e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c2a0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	e000      	b.n	800c2a8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c2a6:	2302      	movs	r3, #2
  }
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bc80      	pop	{r7}
 800c2b0:	4770      	bx	lr
	...

0800c2b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b0ba      	sub	sp, #232	; 0xe8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ea:	f003 030f 	and.w	r3, r3, #15
 800c2ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c2f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10f      	bne.n	800c31a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2fe:	f003 0320 	and.w	r3, r3, #32
 800c302:	2b00      	cmp	r3, #0
 800c304:	d009      	beq.n	800c31a <HAL_UART_IRQHandler+0x66>
 800c306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c30a:	f003 0320 	and.w	r3, r3, #32
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fb63 	bl	800c9de <UART_Receive_IT>
      return;
 800c318:	e25b      	b.n	800c7d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c31a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 80de 	beq.w	800c4e0 <HAL_UART_IRQHandler+0x22c>
 800c324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c328:	f003 0301 	and.w	r3, r3, #1
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d106      	bne.n	800c33e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c334:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f000 80d1 	beq.w	800c4e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c342:	f003 0301 	and.w	r3, r3, #1
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00b      	beq.n	800c362 <HAL_UART_IRQHandler+0xae>
 800c34a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c352:	2b00      	cmp	r3, #0
 800c354:	d005      	beq.n	800c362 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c35a:	f043 0201 	orr.w	r2, r3, #1
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c366:	f003 0304 	and.w	r3, r3, #4
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00b      	beq.n	800c386 <HAL_UART_IRQHandler+0xd2>
 800c36e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	2b00      	cmp	r3, #0
 800c378:	d005      	beq.n	800c386 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c37e:	f043 0202 	orr.w	r2, r3, #2
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c38a:	f003 0302 	and.w	r3, r3, #2
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00b      	beq.n	800c3aa <HAL_UART_IRQHandler+0xf6>
 800c392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a2:	f043 0204 	orr.w	r2, r3, #4
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c3aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ae:	f003 0308 	and.w	r3, r3, #8
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d011      	beq.n	800c3da <HAL_UART_IRQHandler+0x126>
 800c3b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ba:	f003 0320 	and.w	r3, r3, #32
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d105      	bne.n	800c3ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d005      	beq.n	800c3da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d2:	f043 0208 	orr.w	r2, r3, #8
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 81f2 	beq.w	800c7c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3e8:	f003 0320 	and.w	r3, r3, #32
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d008      	beq.n	800c402 <HAL_UART_IRQHandler+0x14e>
 800c3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3f4:	f003 0320 	and.w	r3, r3, #32
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d002      	beq.n	800c402 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 faee 	bl	800c9de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	bf14      	ite	ne
 800c410:	2301      	movne	r3, #1
 800c412:	2300      	moveq	r3, #0
 800c414:	b2db      	uxtb	r3, r3
 800c416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c41e:	f003 0308 	and.w	r3, r3, #8
 800c422:	2b00      	cmp	r3, #0
 800c424:	d103      	bne.n	800c42e <HAL_UART_IRQHandler+0x17a>
 800c426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d04f      	beq.n	800c4ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f9f8 	bl	800c824 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d041      	beq.n	800c4c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3314      	adds	r3, #20
 800c448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c450:	e853 3f00 	ldrex	r3, [r3]
 800c454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c45c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3314      	adds	r3, #20
 800c46a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c46e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c47a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c47e:	e841 2300 	strex	r3, r2, [r1]
 800c482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1d9      	bne.n	800c442 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c492:	2b00      	cmp	r3, #0
 800c494:	d013      	beq.n	800c4be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49a:	4a7e      	ldr	r2, [pc, #504]	; (800c694 <HAL_UART_IRQHandler+0x3e0>)
 800c49c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fd f86c 	bl	8009580 <HAL_DMA_Abort_IT>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d016      	beq.n	800c4dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4bc:	e00e      	b.n	800c4dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 f99c 	bl	800c7fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c4:	e00a      	b.n	800c4dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f998 	bl	800c7fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4cc:	e006      	b.n	800c4dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f994 	bl	800c7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c4da:	e175      	b.n	800c7c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4dc:	bf00      	nop
    return;
 800c4de:	e173      	b.n	800c7c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	f040 814f 	bne.w	800c788 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c4ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4ee:	f003 0310 	and.w	r3, r3, #16
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f000 8148 	beq.w	800c788 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4fc:	f003 0310 	and.w	r3, r3, #16
 800c500:	2b00      	cmp	r3, #0
 800c502:	f000 8141 	beq.w	800c788 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c506:	2300      	movs	r3, #0
 800c508:	60bb      	str	r3, [r7, #8]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	60bb      	str	r3, [r7, #8]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	60bb      	str	r3, [r7, #8]
 800c51a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 80b6 	beq.w	800c698 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c538:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 8145 	beq.w	800c7cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c54a:	429a      	cmp	r2, r3
 800c54c:	f080 813e 	bcs.w	800c7cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c556:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	2b20      	cmp	r3, #32
 800c560:	f000 8088 	beq.w	800c674 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	330c      	adds	r3, #12
 800c56a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c56e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c572:	e853 3f00 	ldrex	r3, [r3]
 800c576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c57a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c57e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c582:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	330c      	adds	r3, #12
 800c58c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c590:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c598:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c59c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5a0:	e841 2300 	strex	r3, r2, [r1]
 800c5a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c5a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1d9      	bne.n	800c564 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	3314      	adds	r3, #20
 800c5b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5ba:	e853 3f00 	ldrex	r3, [r3]
 800c5be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5c2:	f023 0301 	bic.w	r3, r3, #1
 800c5c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	3314      	adds	r3, #20
 800c5d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c5d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5e0:	e841 2300 	strex	r3, r2, [r1]
 800c5e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1e1      	bne.n	800c5b0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3314      	adds	r3, #20
 800c5f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5f6:	e853 3f00 	ldrex	r3, [r3]
 800c5fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c5fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	3314      	adds	r3, #20
 800c60c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c610:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c612:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c614:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c616:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c618:	e841 2300 	strex	r3, r2, [r1]
 800c61c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c61e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1e3      	bne.n	800c5ec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2220      	movs	r2, #32
 800c628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	330c      	adds	r3, #12
 800c638:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c63c:	e853 3f00 	ldrex	r3, [r3]
 800c640:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c644:	f023 0310 	bic.w	r3, r3, #16
 800c648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	330c      	adds	r3, #12
 800c652:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c656:	65ba      	str	r2, [r7, #88]	; 0x58
 800c658:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c65c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c65e:	e841 2300 	strex	r3, r2, [r1]
 800c662:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1e3      	bne.n	800c632 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fc ff4b 	bl	800950a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2202      	movs	r2, #2
 800c678:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c682:	b29b      	uxth	r3, r3
 800c684:	1ad3      	subs	r3, r2, r3
 800c686:	b29b      	uxth	r3, r3
 800c688:	4619      	mov	r1, r3
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f8bf 	bl	800c80e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c690:	e09c      	b.n	800c7cc <HAL_UART_IRQHandler+0x518>
 800c692:	bf00      	nop
 800c694:	0800c8e9 	.word	0x0800c8e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 808e 	beq.w	800c7d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c6b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f000 8089 	beq.w	800c7d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	330c      	adds	r3, #12
 800c6c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	e853 3f00 	ldrex	r3, [r3]
 800c6cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	330c      	adds	r3, #12
 800c6de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c6e2:	647a      	str	r2, [r7, #68]	; 0x44
 800c6e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ea:	e841 2300 	strex	r3, r2, [r1]
 800c6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d1e3      	bne.n	800c6be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3314      	adds	r3, #20
 800c6fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	e853 3f00 	ldrex	r3, [r3]
 800c704:	623b      	str	r3, [r7, #32]
   return(result);
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	f023 0301 	bic.w	r3, r3, #1
 800c70c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	3314      	adds	r3, #20
 800c716:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c71a:	633a      	str	r2, [r7, #48]	; 0x30
 800c71c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c722:	e841 2300 	strex	r3, r2, [r1]
 800c726:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1e3      	bne.n	800c6f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2220      	movs	r2, #32
 800c732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	330c      	adds	r3, #12
 800c742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	e853 3f00 	ldrex	r3, [r3]
 800c74a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f023 0310 	bic.w	r3, r3, #16
 800c752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	330c      	adds	r3, #12
 800c75c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c760:	61fa      	str	r2, [r7, #28]
 800c762:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c764:	69b9      	ldr	r1, [r7, #24]
 800c766:	69fa      	ldr	r2, [r7, #28]
 800c768:	e841 2300 	strex	r3, r2, [r1]
 800c76c:	617b      	str	r3, [r7, #20]
   return(result);
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1e3      	bne.n	800c73c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2202      	movs	r2, #2
 800c778:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c77a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f844 	bl	800c80e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c786:	e023      	b.n	800c7d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c78c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c790:	2b00      	cmp	r3, #0
 800c792:	d009      	beq.n	800c7a8 <HAL_UART_IRQHandler+0x4f4>
 800c794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d003      	beq.n	800c7a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f8b5 	bl	800c910 <UART_Transmit_IT>
    return;
 800c7a6:	e014      	b.n	800c7d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00e      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x51e>
 800c7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d008      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 f8f4 	bl	800c9ae <UART_EndTransmit_IT>
    return;
 800c7c6:	e004      	b.n	800c7d2 <HAL_UART_IRQHandler+0x51e>
    return;
 800c7c8:	bf00      	nop
 800c7ca:	e002      	b.n	800c7d2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c7cc:	bf00      	nop
 800c7ce:	e000      	b.n	800c7d2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c7d0:	bf00      	nop
  }
}
 800c7d2:	37e8      	adds	r7, #232	; 0xe8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c7e0:	bf00      	nop
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bc80      	pop	{r7}
 800c7e8:	4770      	bx	lr

0800c7ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b083      	sub	sp, #12
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c7f2:	bf00      	nop
 800c7f4:	370c      	adds	r7, #12
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bc80      	pop	{r7}
 800c7fa:	4770      	bx	lr

0800c7fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	bc80      	pop	{r7}
 800c80c:	4770      	bx	lr

0800c80e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c80e:	b480      	push	{r7}
 800c810:	b083      	sub	sp, #12
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	460b      	mov	r3, r1
 800c818:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c81a:	bf00      	nop
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	bc80      	pop	{r7}
 800c822:	4770      	bx	lr

0800c824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c824:	b480      	push	{r7}
 800c826:	b095      	sub	sp, #84	; 0x54
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	330c      	adds	r3, #12
 800c832:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c836:	e853 3f00 	ldrex	r3, [r3]
 800c83a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c842:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	330c      	adds	r3, #12
 800c84a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c84c:	643a      	str	r2, [r7, #64]	; 0x40
 800c84e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c854:	e841 2300 	strex	r3, r2, [r1]
 800c858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e5      	bne.n	800c82c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3314      	adds	r3, #20
 800c866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	e853 3f00 	ldrex	r3, [r3]
 800c86e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	f023 0301 	bic.w	r3, r3, #1
 800c876:	64bb      	str	r3, [r7, #72]	; 0x48
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3314      	adds	r3, #20
 800c87e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c880:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c888:	e841 2300 	strex	r3, r2, [r1]
 800c88c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1e5      	bne.n	800c860 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d119      	bne.n	800c8d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	330c      	adds	r3, #12
 800c8a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	e853 3f00 	ldrex	r3, [r3]
 800c8aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f023 0310 	bic.w	r3, r3, #16
 800c8b2:	647b      	str	r3, [r7, #68]	; 0x44
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	330c      	adds	r3, #12
 800c8ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8bc:	61ba      	str	r2, [r7, #24]
 800c8be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c0:	6979      	ldr	r1, [r7, #20]
 800c8c2:	69ba      	ldr	r2, [r7, #24]
 800c8c4:	e841 2300 	strex	r3, r2, [r1]
 800c8c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e5      	bne.n	800c89c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2220      	movs	r2, #32
 800c8d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c8de:	bf00      	nop
 800c8e0:	3754      	adds	r7, #84	; 0x54
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bc80      	pop	{r7}
 800c8e6:	4770      	bx	lr

0800c8e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f7ff ff7a 	bl	800c7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c908:	bf00      	nop
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c910:	b480      	push	{r7}
 800c912:	b085      	sub	sp, #20
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b21      	cmp	r3, #33	; 0x21
 800c922:	d13e      	bne.n	800c9a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c92c:	d114      	bne.n	800c958 <UART_Transmit_IT+0x48>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	691b      	ldr	r3, [r3, #16]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d110      	bne.n	800c958 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	461a      	mov	r2, r3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c94a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a1b      	ldr	r3, [r3, #32]
 800c950:	1c9a      	adds	r2, r3, #2
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	621a      	str	r2, [r3, #32]
 800c956:	e008      	b.n	800c96a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a1b      	ldr	r3, [r3, #32]
 800c95c:	1c59      	adds	r1, r3, #1
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	6211      	str	r1, [r2, #32]
 800c962:	781a      	ldrb	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c96e:	b29b      	uxth	r3, r3
 800c970:	3b01      	subs	r3, #1
 800c972:	b29b      	uxth	r3, r3
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	4619      	mov	r1, r3
 800c978:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10f      	bne.n	800c99e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c98c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68da      	ldr	r2, [r3, #12]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c99c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e000      	b.n	800c9a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9a2:	2302      	movs	r3, #2
  }
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bc80      	pop	{r7}
 800c9ac:	4770      	bx	lr

0800c9ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68da      	ldr	r2, [r3, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2220      	movs	r2, #32
 800c9ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7ff ff02 	bl	800c7d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3708      	adds	r7, #8
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b08c      	sub	sp, #48	; 0x30
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b22      	cmp	r3, #34	; 0x22
 800c9f0:	f040 80ae 	bne.w	800cb50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9fc:	d117      	bne.n	800ca2e <UART_Receive_IT+0x50>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d113      	bne.n	800ca2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca26:	1c9a      	adds	r2, r3, #2
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	629a      	str	r2, [r3, #40]	; 0x28
 800ca2c:	e026      	b.n	800ca7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca34:	2300      	movs	r3, #0
 800ca36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca40:	d007      	beq.n	800ca52 <UART_Receive_IT+0x74>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10a      	bne.n	800ca60 <UART_Receive_IT+0x82>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d106      	bne.n	800ca60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5c:	701a      	strb	r2, [r3, #0]
 800ca5e:	e008      	b.n	800ca72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca76:	1c5a      	adds	r2, r3, #1
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	3b01      	subs	r3, #1
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	4619      	mov	r1, r3
 800ca8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d15d      	bne.n	800cb4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68da      	ldr	r2, [r3, #12]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f022 0220 	bic.w	r2, r2, #32
 800ca9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68da      	ldr	r2, [r3, #12]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800caae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	695a      	ldr	r2, [r3, #20]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f022 0201 	bic.w	r2, r2, #1
 800cabe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2220      	movs	r2, #32
 800cac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d135      	bne.n	800cb42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	330c      	adds	r3, #12
 800cae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	e853 3f00 	ldrex	r3, [r3]
 800caea:	613b      	str	r3, [r7, #16]
   return(result);
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	f023 0310 	bic.w	r3, r3, #16
 800caf2:	627b      	str	r3, [r7, #36]	; 0x24
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	330c      	adds	r3, #12
 800cafa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cafc:	623a      	str	r2, [r7, #32]
 800cafe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb00:	69f9      	ldr	r1, [r7, #28]
 800cb02:	6a3a      	ldr	r2, [r7, #32]
 800cb04:	e841 2300 	strex	r3, r2, [r1]
 800cb08:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d1e5      	bne.n	800cadc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 0310 	and.w	r3, r3, #16
 800cb1a:	2b10      	cmp	r3, #16
 800cb1c:	d10a      	bne.n	800cb34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60fb      	str	r3, [r7, #12]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	60fb      	str	r3, [r7, #12]
 800cb32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7ff fe67 	bl	800c80e <HAL_UARTEx_RxEventCallback>
 800cb40:	e002      	b.n	800cb48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff fe51 	bl	800c7ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	e002      	b.n	800cb52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	e000      	b.n	800cb52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb50:	2302      	movs	r3, #2
  }
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3730      	adds	r7, #48	; 0x30
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	68da      	ldr	r2, [r3, #12]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	430a      	orrs	r2, r1
 800cb78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	689a      	ldr	r2, [r3, #8]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	431a      	orrs	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	695b      	ldr	r3, [r3, #20]
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cb96:	f023 030c 	bic.w	r3, r3, #12
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	6812      	ldr	r2, [r2, #0]
 800cb9e:	68b9      	ldr	r1, [r7, #8]
 800cba0:	430b      	orrs	r3, r1
 800cba2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	695b      	ldr	r3, [r3, #20]
 800cbaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	699a      	ldr	r2, [r3, #24]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	430a      	orrs	r2, r1
 800cbb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a2c      	ldr	r2, [pc, #176]	; (800cc70 <UART_SetConfig+0x114>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d103      	bne.n	800cbcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cbc4:	f7fe fe8c 	bl	800b8e0 <HAL_RCC_GetPCLK2Freq>
 800cbc8:	60f8      	str	r0, [r7, #12]
 800cbca:	e002      	b.n	800cbd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cbcc:	f7fe fe74 	bl	800b8b8 <HAL_RCC_GetPCLK1Freq>
 800cbd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	4413      	add	r3, r2
 800cbda:	009a      	lsls	r2, r3, #2
 800cbdc:	441a      	add	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe8:	4a22      	ldr	r2, [pc, #136]	; (800cc74 <UART_SetConfig+0x118>)
 800cbea:	fba2 2303 	umull	r2, r3, r2, r3
 800cbee:	095b      	lsrs	r3, r3, #5
 800cbf0:	0119      	lsls	r1, r3, #4
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009a      	lsls	r2, r3, #2
 800cbfc:	441a      	add	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc08:	4b1a      	ldr	r3, [pc, #104]	; (800cc74 <UART_SetConfig+0x118>)
 800cc0a:	fba3 0302 	umull	r0, r3, r3, r2
 800cc0e:	095b      	lsrs	r3, r3, #5
 800cc10:	2064      	movs	r0, #100	; 0x64
 800cc12:	fb00 f303 	mul.w	r3, r0, r3
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	011b      	lsls	r3, r3, #4
 800cc1a:	3332      	adds	r3, #50	; 0x32
 800cc1c:	4a15      	ldr	r2, [pc, #84]	; (800cc74 <UART_SetConfig+0x118>)
 800cc1e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc22:	095b      	lsrs	r3, r3, #5
 800cc24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc28:	4419      	add	r1, r3
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009a      	lsls	r2, r3, #2
 800cc34:	441a      	add	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc40:	4b0c      	ldr	r3, [pc, #48]	; (800cc74 <UART_SetConfig+0x118>)
 800cc42:	fba3 0302 	umull	r0, r3, r3, r2
 800cc46:	095b      	lsrs	r3, r3, #5
 800cc48:	2064      	movs	r0, #100	; 0x64
 800cc4a:	fb00 f303 	mul.w	r3, r0, r3
 800cc4e:	1ad3      	subs	r3, r2, r3
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	3332      	adds	r3, #50	; 0x32
 800cc54:	4a07      	ldr	r2, [pc, #28]	; (800cc74 <UART_SetConfig+0x118>)
 800cc56:	fba2 2303 	umull	r2, r3, r2, r3
 800cc5a:	095b      	lsrs	r3, r3, #5
 800cc5c:	f003 020f 	and.w	r2, r3, #15
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	440a      	add	r2, r1
 800cc66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cc68:	bf00      	nop
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	40013800 	.word	0x40013800
 800cc74:	51eb851f 	.word	0x51eb851f

0800cc78 <__itoa>:
 800cc78:	1e93      	subs	r3, r2, #2
 800cc7a:	2b22      	cmp	r3, #34	; 0x22
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	460c      	mov	r4, r1
 800cc80:	d904      	bls.n	800cc8c <__itoa+0x14>
 800cc82:	2300      	movs	r3, #0
 800cc84:	461c      	mov	r4, r3
 800cc86:	700b      	strb	r3, [r1, #0]
 800cc88:	4620      	mov	r0, r4
 800cc8a:	bd10      	pop	{r4, pc}
 800cc8c:	2a0a      	cmp	r2, #10
 800cc8e:	d109      	bne.n	800cca4 <__itoa+0x2c>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	da07      	bge.n	800cca4 <__itoa+0x2c>
 800cc94:	232d      	movs	r3, #45	; 0x2d
 800cc96:	700b      	strb	r3, [r1, #0]
 800cc98:	2101      	movs	r1, #1
 800cc9a:	4240      	negs	r0, r0
 800cc9c:	4421      	add	r1, r4
 800cc9e:	f000 f8b9 	bl	800ce14 <__utoa>
 800cca2:	e7f1      	b.n	800cc88 <__itoa+0x10>
 800cca4:	2100      	movs	r1, #0
 800cca6:	e7f9      	b.n	800cc9c <__itoa+0x24>

0800cca8 <itoa>:
 800cca8:	f7ff bfe6 	b.w	800cc78 <__itoa>

0800ccac <malloc>:
 800ccac:	4b02      	ldr	r3, [pc, #8]	; (800ccb8 <malloc+0xc>)
 800ccae:	4601      	mov	r1, r0
 800ccb0:	6818      	ldr	r0, [r3, #0]
 800ccb2:	f000 b823 	b.w	800ccfc <_malloc_r>
 800ccb6:	bf00      	nop
 800ccb8:	20000a0c 	.word	0x20000a0c

0800ccbc <sbrk_aligned>:
 800ccbc:	b570      	push	{r4, r5, r6, lr}
 800ccbe:	4e0e      	ldr	r6, [pc, #56]	; (800ccf8 <sbrk_aligned+0x3c>)
 800ccc0:	460c      	mov	r4, r1
 800ccc2:	6831      	ldr	r1, [r6, #0]
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	b911      	cbnz	r1, 800ccce <sbrk_aligned+0x12>
 800ccc8:	f000 f91e 	bl	800cf08 <_sbrk_r>
 800cccc:	6030      	str	r0, [r6, #0]
 800ccce:	4621      	mov	r1, r4
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	f000 f919 	bl	800cf08 <_sbrk_r>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	d00a      	beq.n	800ccf0 <sbrk_aligned+0x34>
 800ccda:	1cc4      	adds	r4, r0, #3
 800ccdc:	f024 0403 	bic.w	r4, r4, #3
 800cce0:	42a0      	cmp	r0, r4
 800cce2:	d007      	beq.n	800ccf4 <sbrk_aligned+0x38>
 800cce4:	1a21      	subs	r1, r4, r0
 800cce6:	4628      	mov	r0, r5
 800cce8:	f000 f90e 	bl	800cf08 <_sbrk_r>
 800ccec:	3001      	adds	r0, #1
 800ccee:	d101      	bne.n	800ccf4 <sbrk_aligned+0x38>
 800ccf0:	f04f 34ff 	mov.w	r4, #4294967295
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	bd70      	pop	{r4, r5, r6, pc}
 800ccf8:	20000ee8 	.word	0x20000ee8

0800ccfc <_malloc_r>:
 800ccfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd00:	1ccd      	adds	r5, r1, #3
 800cd02:	f025 0503 	bic.w	r5, r5, #3
 800cd06:	3508      	adds	r5, #8
 800cd08:	2d0c      	cmp	r5, #12
 800cd0a:	bf38      	it	cc
 800cd0c:	250c      	movcc	r5, #12
 800cd0e:	2d00      	cmp	r5, #0
 800cd10:	4607      	mov	r7, r0
 800cd12:	db01      	blt.n	800cd18 <_malloc_r+0x1c>
 800cd14:	42a9      	cmp	r1, r5
 800cd16:	d905      	bls.n	800cd24 <_malloc_r+0x28>
 800cd18:	230c      	movs	r3, #12
 800cd1a:	2600      	movs	r6, #0
 800cd1c:	603b      	str	r3, [r7, #0]
 800cd1e:	4630      	mov	r0, r6
 800cd20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cdf8 <_malloc_r+0xfc>
 800cd28:	f000 f868 	bl	800cdfc <__malloc_lock>
 800cd2c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd30:	461c      	mov	r4, r3
 800cd32:	bb5c      	cbnz	r4, 800cd8c <_malloc_r+0x90>
 800cd34:	4629      	mov	r1, r5
 800cd36:	4638      	mov	r0, r7
 800cd38:	f7ff ffc0 	bl	800ccbc <sbrk_aligned>
 800cd3c:	1c43      	adds	r3, r0, #1
 800cd3e:	4604      	mov	r4, r0
 800cd40:	d155      	bne.n	800cdee <_malloc_r+0xf2>
 800cd42:	f8d8 4000 	ldr.w	r4, [r8]
 800cd46:	4626      	mov	r6, r4
 800cd48:	2e00      	cmp	r6, #0
 800cd4a:	d145      	bne.n	800cdd8 <_malloc_r+0xdc>
 800cd4c:	2c00      	cmp	r4, #0
 800cd4e:	d048      	beq.n	800cde2 <_malloc_r+0xe6>
 800cd50:	6823      	ldr	r3, [r4, #0]
 800cd52:	4631      	mov	r1, r6
 800cd54:	4638      	mov	r0, r7
 800cd56:	eb04 0903 	add.w	r9, r4, r3
 800cd5a:	f000 f8d5 	bl	800cf08 <_sbrk_r>
 800cd5e:	4581      	cmp	r9, r0
 800cd60:	d13f      	bne.n	800cde2 <_malloc_r+0xe6>
 800cd62:	6821      	ldr	r1, [r4, #0]
 800cd64:	4638      	mov	r0, r7
 800cd66:	1a6d      	subs	r5, r5, r1
 800cd68:	4629      	mov	r1, r5
 800cd6a:	f7ff ffa7 	bl	800ccbc <sbrk_aligned>
 800cd6e:	3001      	adds	r0, #1
 800cd70:	d037      	beq.n	800cde2 <_malloc_r+0xe6>
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	442b      	add	r3, r5
 800cd76:	6023      	str	r3, [r4, #0]
 800cd78:	f8d8 3000 	ldr.w	r3, [r8]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d038      	beq.n	800cdf2 <_malloc_r+0xf6>
 800cd80:	685a      	ldr	r2, [r3, #4]
 800cd82:	42a2      	cmp	r2, r4
 800cd84:	d12b      	bne.n	800cdde <_malloc_r+0xe2>
 800cd86:	2200      	movs	r2, #0
 800cd88:	605a      	str	r2, [r3, #4]
 800cd8a:	e00f      	b.n	800cdac <_malloc_r+0xb0>
 800cd8c:	6822      	ldr	r2, [r4, #0]
 800cd8e:	1b52      	subs	r2, r2, r5
 800cd90:	d41f      	bmi.n	800cdd2 <_malloc_r+0xd6>
 800cd92:	2a0b      	cmp	r2, #11
 800cd94:	d917      	bls.n	800cdc6 <_malloc_r+0xca>
 800cd96:	1961      	adds	r1, r4, r5
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	6025      	str	r5, [r4, #0]
 800cd9c:	bf18      	it	ne
 800cd9e:	6059      	strne	r1, [r3, #4]
 800cda0:	6863      	ldr	r3, [r4, #4]
 800cda2:	bf08      	it	eq
 800cda4:	f8c8 1000 	streq.w	r1, [r8]
 800cda8:	5162      	str	r2, [r4, r5]
 800cdaa:	604b      	str	r3, [r1, #4]
 800cdac:	4638      	mov	r0, r7
 800cdae:	f104 060b 	add.w	r6, r4, #11
 800cdb2:	f000 f829 	bl	800ce08 <__malloc_unlock>
 800cdb6:	f026 0607 	bic.w	r6, r6, #7
 800cdba:	1d23      	adds	r3, r4, #4
 800cdbc:	1af2      	subs	r2, r6, r3
 800cdbe:	d0ae      	beq.n	800cd1e <_malloc_r+0x22>
 800cdc0:	1b9b      	subs	r3, r3, r6
 800cdc2:	50a3      	str	r3, [r4, r2]
 800cdc4:	e7ab      	b.n	800cd1e <_malloc_r+0x22>
 800cdc6:	42a3      	cmp	r3, r4
 800cdc8:	6862      	ldr	r2, [r4, #4]
 800cdca:	d1dd      	bne.n	800cd88 <_malloc_r+0x8c>
 800cdcc:	f8c8 2000 	str.w	r2, [r8]
 800cdd0:	e7ec      	b.n	800cdac <_malloc_r+0xb0>
 800cdd2:	4623      	mov	r3, r4
 800cdd4:	6864      	ldr	r4, [r4, #4]
 800cdd6:	e7ac      	b.n	800cd32 <_malloc_r+0x36>
 800cdd8:	4634      	mov	r4, r6
 800cdda:	6876      	ldr	r6, [r6, #4]
 800cddc:	e7b4      	b.n	800cd48 <_malloc_r+0x4c>
 800cdde:	4613      	mov	r3, r2
 800cde0:	e7cc      	b.n	800cd7c <_malloc_r+0x80>
 800cde2:	230c      	movs	r3, #12
 800cde4:	4638      	mov	r0, r7
 800cde6:	603b      	str	r3, [r7, #0]
 800cde8:	f000 f80e 	bl	800ce08 <__malloc_unlock>
 800cdec:	e797      	b.n	800cd1e <_malloc_r+0x22>
 800cdee:	6025      	str	r5, [r4, #0]
 800cdf0:	e7dc      	b.n	800cdac <_malloc_r+0xb0>
 800cdf2:	605b      	str	r3, [r3, #4]
 800cdf4:	deff      	udf	#255	; 0xff
 800cdf6:	bf00      	nop
 800cdf8:	20000ee4 	.word	0x20000ee4

0800cdfc <__malloc_lock>:
 800cdfc:	4801      	ldr	r0, [pc, #4]	; (800ce04 <__malloc_lock+0x8>)
 800cdfe:	f000 b8bd 	b.w	800cf7c <__retarget_lock_acquire_recursive>
 800ce02:	bf00      	nop
 800ce04:	20001028 	.word	0x20001028

0800ce08 <__malloc_unlock>:
 800ce08:	4801      	ldr	r0, [pc, #4]	; (800ce10 <__malloc_unlock+0x8>)
 800ce0a:	f000 b8b8 	b.w	800cf7e <__retarget_lock_release_recursive>
 800ce0e:	bf00      	nop
 800ce10:	20001028 	.word	0x20001028

0800ce14 <__utoa>:
 800ce14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce16:	b08b      	sub	sp, #44	; 0x2c
 800ce18:	4605      	mov	r5, r0
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	466e      	mov	r6, sp
 800ce1e:	4c1d      	ldr	r4, [pc, #116]	; (800ce94 <__utoa+0x80>)
 800ce20:	f104 0c20 	add.w	ip, r4, #32
 800ce24:	4637      	mov	r7, r6
 800ce26:	6820      	ldr	r0, [r4, #0]
 800ce28:	6861      	ldr	r1, [r4, #4]
 800ce2a:	3408      	adds	r4, #8
 800ce2c:	c703      	stmia	r7!, {r0, r1}
 800ce2e:	4564      	cmp	r4, ip
 800ce30:	463e      	mov	r6, r7
 800ce32:	d1f7      	bne.n	800ce24 <__utoa+0x10>
 800ce34:	7921      	ldrb	r1, [r4, #4]
 800ce36:	6820      	ldr	r0, [r4, #0]
 800ce38:	7139      	strb	r1, [r7, #4]
 800ce3a:	1e91      	subs	r1, r2, #2
 800ce3c:	2922      	cmp	r1, #34	; 0x22
 800ce3e:	6038      	str	r0, [r7, #0]
 800ce40:	f04f 0100 	mov.w	r1, #0
 800ce44:	d904      	bls.n	800ce50 <__utoa+0x3c>
 800ce46:	7019      	strb	r1, [r3, #0]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	b00b      	add	sp, #44	; 0x2c
 800ce4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce50:	1e58      	subs	r0, r3, #1
 800ce52:	4684      	mov	ip, r0
 800ce54:	fbb5 f7f2 	udiv	r7, r5, r2
 800ce58:	fb02 5617 	mls	r6, r2, r7, r5
 800ce5c:	3628      	adds	r6, #40	; 0x28
 800ce5e:	446e      	add	r6, sp
 800ce60:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ce64:	460c      	mov	r4, r1
 800ce66:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ce6a:	462e      	mov	r6, r5
 800ce6c:	42b2      	cmp	r2, r6
 800ce6e:	463d      	mov	r5, r7
 800ce70:	f101 0101 	add.w	r1, r1, #1
 800ce74:	d9ee      	bls.n	800ce54 <__utoa+0x40>
 800ce76:	2200      	movs	r2, #0
 800ce78:	545a      	strb	r2, [r3, r1]
 800ce7a:	1919      	adds	r1, r3, r4
 800ce7c:	1aa5      	subs	r5, r4, r2
 800ce7e:	42aa      	cmp	r2, r5
 800ce80:	dae3      	bge.n	800ce4a <__utoa+0x36>
 800ce82:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ce86:	780e      	ldrb	r6, [r1, #0]
 800ce88:	3201      	adds	r2, #1
 800ce8a:	7006      	strb	r6, [r0, #0]
 800ce8c:	f801 5901 	strb.w	r5, [r1], #-1
 800ce90:	e7f4      	b.n	800ce7c <__utoa+0x68>
 800ce92:	bf00      	nop
 800ce94:	0800e596 	.word	0x0800e596

0800ce98 <siprintf>:
 800ce98:	b40e      	push	{r1, r2, r3}
 800ce9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce9e:	b500      	push	{lr}
 800cea0:	b09c      	sub	sp, #112	; 0x70
 800cea2:	ab1d      	add	r3, sp, #116	; 0x74
 800cea4:	9002      	str	r0, [sp, #8]
 800cea6:	9006      	str	r0, [sp, #24]
 800cea8:	9107      	str	r1, [sp, #28]
 800ceaa:	9104      	str	r1, [sp, #16]
 800ceac:	4808      	ldr	r0, [pc, #32]	; (800ced0 <siprintf+0x38>)
 800ceae:	4909      	ldr	r1, [pc, #36]	; (800ced4 <siprintf+0x3c>)
 800ceb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb4:	9105      	str	r1, [sp, #20]
 800ceb6:	6800      	ldr	r0, [r0, #0]
 800ceb8:	a902      	add	r1, sp, #8
 800ceba:	9301      	str	r3, [sp, #4]
 800cebc:	f000 f90a 	bl	800d0d4 <_svfiprintf_r>
 800cec0:	2200      	movs	r2, #0
 800cec2:	9b02      	ldr	r3, [sp, #8]
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	b01c      	add	sp, #112	; 0x70
 800cec8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cecc:	b003      	add	sp, #12
 800cece:	4770      	bx	lr
 800ced0:	20000a0c 	.word	0x20000a0c
 800ced4:	ffff0208 	.word	0xffff0208

0800ced8 <memset>:
 800ced8:	4603      	mov	r3, r0
 800ceda:	4402      	add	r2, r0
 800cedc:	4293      	cmp	r3, r2
 800cede:	d100      	bne.n	800cee2 <memset+0xa>
 800cee0:	4770      	bx	lr
 800cee2:	f803 1b01 	strb.w	r1, [r3], #1
 800cee6:	e7f9      	b.n	800cedc <memset+0x4>

0800cee8 <strcat>:
 800cee8:	4602      	mov	r2, r0
 800ceea:	b510      	push	{r4, lr}
 800ceec:	7814      	ldrb	r4, [r2, #0]
 800ceee:	4613      	mov	r3, r2
 800cef0:	3201      	adds	r2, #1
 800cef2:	2c00      	cmp	r4, #0
 800cef4:	d1fa      	bne.n	800ceec <strcat+0x4>
 800cef6:	3b01      	subs	r3, #1
 800cef8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cefc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf00:	2a00      	cmp	r2, #0
 800cf02:	d1f9      	bne.n	800cef8 <strcat+0x10>
 800cf04:	bd10      	pop	{r4, pc}
	...

0800cf08 <_sbrk_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	4d05      	ldr	r5, [pc, #20]	; (800cf24 <_sbrk_r+0x1c>)
 800cf0e:	4604      	mov	r4, r0
 800cf10:	4608      	mov	r0, r1
 800cf12:	602b      	str	r3, [r5, #0]
 800cf14:	f7fc f808 	bl	8008f28 <_sbrk>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d102      	bne.n	800cf22 <_sbrk_r+0x1a>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	b103      	cbz	r3, 800cf22 <_sbrk_r+0x1a>
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
 800cf24:	20001024 	.word	0x20001024

0800cf28 <__errno>:
 800cf28:	4b01      	ldr	r3, [pc, #4]	; (800cf30 <__errno+0x8>)
 800cf2a:	6818      	ldr	r0, [r3, #0]
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	20000a0c 	.word	0x20000a0c

0800cf34 <__libc_init_array>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	2600      	movs	r6, #0
 800cf38:	4d0c      	ldr	r5, [pc, #48]	; (800cf6c <__libc_init_array+0x38>)
 800cf3a:	4c0d      	ldr	r4, [pc, #52]	; (800cf70 <__libc_init_array+0x3c>)
 800cf3c:	1b64      	subs	r4, r4, r5
 800cf3e:	10a4      	asrs	r4, r4, #2
 800cf40:	42a6      	cmp	r6, r4
 800cf42:	d109      	bne.n	800cf58 <__libc_init_array+0x24>
 800cf44:	f000 fbc6 	bl	800d6d4 <_init>
 800cf48:	2600      	movs	r6, #0
 800cf4a:	4d0a      	ldr	r5, [pc, #40]	; (800cf74 <__libc_init_array+0x40>)
 800cf4c:	4c0a      	ldr	r4, [pc, #40]	; (800cf78 <__libc_init_array+0x44>)
 800cf4e:	1b64      	subs	r4, r4, r5
 800cf50:	10a4      	asrs	r4, r4, #2
 800cf52:	42a6      	cmp	r6, r4
 800cf54:	d105      	bne.n	800cf62 <__libc_init_array+0x2e>
 800cf56:	bd70      	pop	{r4, r5, r6, pc}
 800cf58:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf5c:	4798      	blx	r3
 800cf5e:	3601      	adds	r6, #1
 800cf60:	e7ee      	b.n	800cf40 <__libc_init_array+0xc>
 800cf62:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf66:	4798      	blx	r3
 800cf68:	3601      	adds	r6, #1
 800cf6a:	e7f2      	b.n	800cf52 <__libc_init_array+0x1e>
 800cf6c:	0800e5f0 	.word	0x0800e5f0
 800cf70:	0800e5f0 	.word	0x0800e5f0
 800cf74:	0800e5f0 	.word	0x0800e5f0
 800cf78:	0800e5f4 	.word	0x0800e5f4

0800cf7c <__retarget_lock_acquire_recursive>:
 800cf7c:	4770      	bx	lr

0800cf7e <__retarget_lock_release_recursive>:
 800cf7e:	4770      	bx	lr

0800cf80 <strcpy>:
 800cf80:	4603      	mov	r3, r0
 800cf82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf86:	f803 2b01 	strb.w	r2, [r3], #1
 800cf8a:	2a00      	cmp	r2, #0
 800cf8c:	d1f9      	bne.n	800cf82 <strcpy+0x2>
 800cf8e:	4770      	bx	lr

0800cf90 <_free_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4605      	mov	r5, r0
 800cf94:	2900      	cmp	r1, #0
 800cf96:	d040      	beq.n	800d01a <_free_r+0x8a>
 800cf98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf9c:	1f0c      	subs	r4, r1, #4
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	bfb8      	it	lt
 800cfa2:	18e4      	addlt	r4, r4, r3
 800cfa4:	f7ff ff2a 	bl	800cdfc <__malloc_lock>
 800cfa8:	4a1c      	ldr	r2, [pc, #112]	; (800d01c <_free_r+0x8c>)
 800cfaa:	6813      	ldr	r3, [r2, #0]
 800cfac:	b933      	cbnz	r3, 800cfbc <_free_r+0x2c>
 800cfae:	6063      	str	r3, [r4, #4]
 800cfb0:	6014      	str	r4, [r2, #0]
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfb8:	f7ff bf26 	b.w	800ce08 <__malloc_unlock>
 800cfbc:	42a3      	cmp	r3, r4
 800cfbe:	d908      	bls.n	800cfd2 <_free_r+0x42>
 800cfc0:	6820      	ldr	r0, [r4, #0]
 800cfc2:	1821      	adds	r1, r4, r0
 800cfc4:	428b      	cmp	r3, r1
 800cfc6:	bf01      	itttt	eq
 800cfc8:	6819      	ldreq	r1, [r3, #0]
 800cfca:	685b      	ldreq	r3, [r3, #4]
 800cfcc:	1809      	addeq	r1, r1, r0
 800cfce:	6021      	streq	r1, [r4, #0]
 800cfd0:	e7ed      	b.n	800cfae <_free_r+0x1e>
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	b10b      	cbz	r3, 800cfdc <_free_r+0x4c>
 800cfd8:	42a3      	cmp	r3, r4
 800cfda:	d9fa      	bls.n	800cfd2 <_free_r+0x42>
 800cfdc:	6811      	ldr	r1, [r2, #0]
 800cfde:	1850      	adds	r0, r2, r1
 800cfe0:	42a0      	cmp	r0, r4
 800cfe2:	d10b      	bne.n	800cffc <_free_r+0x6c>
 800cfe4:	6820      	ldr	r0, [r4, #0]
 800cfe6:	4401      	add	r1, r0
 800cfe8:	1850      	adds	r0, r2, r1
 800cfea:	4283      	cmp	r3, r0
 800cfec:	6011      	str	r1, [r2, #0]
 800cfee:	d1e0      	bne.n	800cfb2 <_free_r+0x22>
 800cff0:	6818      	ldr	r0, [r3, #0]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	4408      	add	r0, r1
 800cff6:	6010      	str	r0, [r2, #0]
 800cff8:	6053      	str	r3, [r2, #4]
 800cffa:	e7da      	b.n	800cfb2 <_free_r+0x22>
 800cffc:	d902      	bls.n	800d004 <_free_r+0x74>
 800cffe:	230c      	movs	r3, #12
 800d000:	602b      	str	r3, [r5, #0]
 800d002:	e7d6      	b.n	800cfb2 <_free_r+0x22>
 800d004:	6820      	ldr	r0, [r4, #0]
 800d006:	1821      	adds	r1, r4, r0
 800d008:	428b      	cmp	r3, r1
 800d00a:	bf01      	itttt	eq
 800d00c:	6819      	ldreq	r1, [r3, #0]
 800d00e:	685b      	ldreq	r3, [r3, #4]
 800d010:	1809      	addeq	r1, r1, r0
 800d012:	6021      	streq	r1, [r4, #0]
 800d014:	6063      	str	r3, [r4, #4]
 800d016:	6054      	str	r4, [r2, #4]
 800d018:	e7cb      	b.n	800cfb2 <_free_r+0x22>
 800d01a:	bd38      	pop	{r3, r4, r5, pc}
 800d01c:	20000ee4 	.word	0x20000ee4

0800d020 <__ssputs_r>:
 800d020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d024:	461f      	mov	r7, r3
 800d026:	688e      	ldr	r6, [r1, #8]
 800d028:	4682      	mov	sl, r0
 800d02a:	42be      	cmp	r6, r7
 800d02c:	460c      	mov	r4, r1
 800d02e:	4690      	mov	r8, r2
 800d030:	680b      	ldr	r3, [r1, #0]
 800d032:	d82c      	bhi.n	800d08e <__ssputs_r+0x6e>
 800d034:	898a      	ldrh	r2, [r1, #12]
 800d036:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d03a:	d026      	beq.n	800d08a <__ssputs_r+0x6a>
 800d03c:	6965      	ldr	r5, [r4, #20]
 800d03e:	6909      	ldr	r1, [r1, #16]
 800d040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d044:	eba3 0901 	sub.w	r9, r3, r1
 800d048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d04c:	1c7b      	adds	r3, r7, #1
 800d04e:	444b      	add	r3, r9
 800d050:	106d      	asrs	r5, r5, #1
 800d052:	429d      	cmp	r5, r3
 800d054:	bf38      	it	cc
 800d056:	461d      	movcc	r5, r3
 800d058:	0553      	lsls	r3, r2, #21
 800d05a:	d527      	bpl.n	800d0ac <__ssputs_r+0x8c>
 800d05c:	4629      	mov	r1, r5
 800d05e:	f7ff fe4d 	bl	800ccfc <_malloc_r>
 800d062:	4606      	mov	r6, r0
 800d064:	b360      	cbz	r0, 800d0c0 <__ssputs_r+0xa0>
 800d066:	464a      	mov	r2, r9
 800d068:	6921      	ldr	r1, [r4, #16]
 800d06a:	f000 faed 	bl	800d648 <memcpy>
 800d06e:	89a3      	ldrh	r3, [r4, #12]
 800d070:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d078:	81a3      	strh	r3, [r4, #12]
 800d07a:	6126      	str	r6, [r4, #16]
 800d07c:	444e      	add	r6, r9
 800d07e:	6026      	str	r6, [r4, #0]
 800d080:	463e      	mov	r6, r7
 800d082:	6165      	str	r5, [r4, #20]
 800d084:	eba5 0509 	sub.w	r5, r5, r9
 800d088:	60a5      	str	r5, [r4, #8]
 800d08a:	42be      	cmp	r6, r7
 800d08c:	d900      	bls.n	800d090 <__ssputs_r+0x70>
 800d08e:	463e      	mov	r6, r7
 800d090:	4632      	mov	r2, r6
 800d092:	4641      	mov	r1, r8
 800d094:	6820      	ldr	r0, [r4, #0]
 800d096:	f000 faaf 	bl	800d5f8 <memmove>
 800d09a:	2000      	movs	r0, #0
 800d09c:	68a3      	ldr	r3, [r4, #8]
 800d09e:	1b9b      	subs	r3, r3, r6
 800d0a0:	60a3      	str	r3, [r4, #8]
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	4433      	add	r3, r6
 800d0a6:	6023      	str	r3, [r4, #0]
 800d0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ac:	462a      	mov	r2, r5
 800d0ae:	f000 fad9 	bl	800d664 <_realloc_r>
 800d0b2:	4606      	mov	r6, r0
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d1e0      	bne.n	800d07a <__ssputs_r+0x5a>
 800d0b8:	4650      	mov	r0, sl
 800d0ba:	6921      	ldr	r1, [r4, #16]
 800d0bc:	f7ff ff68 	bl	800cf90 <_free_r>
 800d0c0:	230c      	movs	r3, #12
 800d0c2:	f8ca 3000 	str.w	r3, [sl]
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0d0:	81a3      	strh	r3, [r4, #12]
 800d0d2:	e7e9      	b.n	800d0a8 <__ssputs_r+0x88>

0800d0d4 <_svfiprintf_r>:
 800d0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d8:	4698      	mov	r8, r3
 800d0da:	898b      	ldrh	r3, [r1, #12]
 800d0dc:	4607      	mov	r7, r0
 800d0de:	061b      	lsls	r3, r3, #24
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	4614      	mov	r4, r2
 800d0e4:	b09d      	sub	sp, #116	; 0x74
 800d0e6:	d50e      	bpl.n	800d106 <_svfiprintf_r+0x32>
 800d0e8:	690b      	ldr	r3, [r1, #16]
 800d0ea:	b963      	cbnz	r3, 800d106 <_svfiprintf_r+0x32>
 800d0ec:	2140      	movs	r1, #64	; 0x40
 800d0ee:	f7ff fe05 	bl	800ccfc <_malloc_r>
 800d0f2:	6028      	str	r0, [r5, #0]
 800d0f4:	6128      	str	r0, [r5, #16]
 800d0f6:	b920      	cbnz	r0, 800d102 <_svfiprintf_r+0x2e>
 800d0f8:	230c      	movs	r3, #12
 800d0fa:	603b      	str	r3, [r7, #0]
 800d0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d100:	e0d0      	b.n	800d2a4 <_svfiprintf_r+0x1d0>
 800d102:	2340      	movs	r3, #64	; 0x40
 800d104:	616b      	str	r3, [r5, #20]
 800d106:	2300      	movs	r3, #0
 800d108:	9309      	str	r3, [sp, #36]	; 0x24
 800d10a:	2320      	movs	r3, #32
 800d10c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d110:	2330      	movs	r3, #48	; 0x30
 800d112:	f04f 0901 	mov.w	r9, #1
 800d116:	f8cd 800c 	str.w	r8, [sp, #12]
 800d11a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d2bc <_svfiprintf_r+0x1e8>
 800d11e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d122:	4623      	mov	r3, r4
 800d124:	469a      	mov	sl, r3
 800d126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d12a:	b10a      	cbz	r2, 800d130 <_svfiprintf_r+0x5c>
 800d12c:	2a25      	cmp	r2, #37	; 0x25
 800d12e:	d1f9      	bne.n	800d124 <_svfiprintf_r+0x50>
 800d130:	ebba 0b04 	subs.w	fp, sl, r4
 800d134:	d00b      	beq.n	800d14e <_svfiprintf_r+0x7a>
 800d136:	465b      	mov	r3, fp
 800d138:	4622      	mov	r2, r4
 800d13a:	4629      	mov	r1, r5
 800d13c:	4638      	mov	r0, r7
 800d13e:	f7ff ff6f 	bl	800d020 <__ssputs_r>
 800d142:	3001      	adds	r0, #1
 800d144:	f000 80a9 	beq.w	800d29a <_svfiprintf_r+0x1c6>
 800d148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d14a:	445a      	add	r2, fp
 800d14c:	9209      	str	r2, [sp, #36]	; 0x24
 800d14e:	f89a 3000 	ldrb.w	r3, [sl]
 800d152:	2b00      	cmp	r3, #0
 800d154:	f000 80a1 	beq.w	800d29a <_svfiprintf_r+0x1c6>
 800d158:	2300      	movs	r3, #0
 800d15a:	f04f 32ff 	mov.w	r2, #4294967295
 800d15e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d162:	f10a 0a01 	add.w	sl, sl, #1
 800d166:	9304      	str	r3, [sp, #16]
 800d168:	9307      	str	r3, [sp, #28]
 800d16a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d16e:	931a      	str	r3, [sp, #104]	; 0x68
 800d170:	4654      	mov	r4, sl
 800d172:	2205      	movs	r2, #5
 800d174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d178:	4850      	ldr	r0, [pc, #320]	; (800d2bc <_svfiprintf_r+0x1e8>)
 800d17a:	f000 fa57 	bl	800d62c <memchr>
 800d17e:	9a04      	ldr	r2, [sp, #16]
 800d180:	b9d8      	cbnz	r0, 800d1ba <_svfiprintf_r+0xe6>
 800d182:	06d0      	lsls	r0, r2, #27
 800d184:	bf44      	itt	mi
 800d186:	2320      	movmi	r3, #32
 800d188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d18c:	0711      	lsls	r1, r2, #28
 800d18e:	bf44      	itt	mi
 800d190:	232b      	movmi	r3, #43	; 0x2b
 800d192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d196:	f89a 3000 	ldrb.w	r3, [sl]
 800d19a:	2b2a      	cmp	r3, #42	; 0x2a
 800d19c:	d015      	beq.n	800d1ca <_svfiprintf_r+0xf6>
 800d19e:	4654      	mov	r4, sl
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	f04f 0c0a 	mov.w	ip, #10
 800d1a6:	9a07      	ldr	r2, [sp, #28]
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ae:	3b30      	subs	r3, #48	; 0x30
 800d1b0:	2b09      	cmp	r3, #9
 800d1b2:	d94d      	bls.n	800d250 <_svfiprintf_r+0x17c>
 800d1b4:	b1b0      	cbz	r0, 800d1e4 <_svfiprintf_r+0x110>
 800d1b6:	9207      	str	r2, [sp, #28]
 800d1b8:	e014      	b.n	800d1e4 <_svfiprintf_r+0x110>
 800d1ba:	eba0 0308 	sub.w	r3, r0, r8
 800d1be:	fa09 f303 	lsl.w	r3, r9, r3
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	46a2      	mov	sl, r4
 800d1c6:	9304      	str	r3, [sp, #16]
 800d1c8:	e7d2      	b.n	800d170 <_svfiprintf_r+0x9c>
 800d1ca:	9b03      	ldr	r3, [sp, #12]
 800d1cc:	1d19      	adds	r1, r3, #4
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	9103      	str	r1, [sp, #12]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	bfbb      	ittet	lt
 800d1d6:	425b      	neglt	r3, r3
 800d1d8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1dc:	9307      	strge	r3, [sp, #28]
 800d1de:	9307      	strlt	r3, [sp, #28]
 800d1e0:	bfb8      	it	lt
 800d1e2:	9204      	strlt	r2, [sp, #16]
 800d1e4:	7823      	ldrb	r3, [r4, #0]
 800d1e6:	2b2e      	cmp	r3, #46	; 0x2e
 800d1e8:	d10c      	bne.n	800d204 <_svfiprintf_r+0x130>
 800d1ea:	7863      	ldrb	r3, [r4, #1]
 800d1ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ee:	d134      	bne.n	800d25a <_svfiprintf_r+0x186>
 800d1f0:	9b03      	ldr	r3, [sp, #12]
 800d1f2:	3402      	adds	r4, #2
 800d1f4:	1d1a      	adds	r2, r3, #4
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	9203      	str	r2, [sp, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	bfb8      	it	lt
 800d1fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800d202:	9305      	str	r3, [sp, #20]
 800d204:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d2c0 <_svfiprintf_r+0x1ec>
 800d208:	2203      	movs	r2, #3
 800d20a:	4650      	mov	r0, sl
 800d20c:	7821      	ldrb	r1, [r4, #0]
 800d20e:	f000 fa0d 	bl	800d62c <memchr>
 800d212:	b138      	cbz	r0, 800d224 <_svfiprintf_r+0x150>
 800d214:	2240      	movs	r2, #64	; 0x40
 800d216:	9b04      	ldr	r3, [sp, #16]
 800d218:	eba0 000a 	sub.w	r0, r0, sl
 800d21c:	4082      	lsls	r2, r0
 800d21e:	4313      	orrs	r3, r2
 800d220:	3401      	adds	r4, #1
 800d222:	9304      	str	r3, [sp, #16]
 800d224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d228:	2206      	movs	r2, #6
 800d22a:	4826      	ldr	r0, [pc, #152]	; (800d2c4 <_svfiprintf_r+0x1f0>)
 800d22c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d230:	f000 f9fc 	bl	800d62c <memchr>
 800d234:	2800      	cmp	r0, #0
 800d236:	d038      	beq.n	800d2aa <_svfiprintf_r+0x1d6>
 800d238:	4b23      	ldr	r3, [pc, #140]	; (800d2c8 <_svfiprintf_r+0x1f4>)
 800d23a:	bb1b      	cbnz	r3, 800d284 <_svfiprintf_r+0x1b0>
 800d23c:	9b03      	ldr	r3, [sp, #12]
 800d23e:	3307      	adds	r3, #7
 800d240:	f023 0307 	bic.w	r3, r3, #7
 800d244:	3308      	adds	r3, #8
 800d246:	9303      	str	r3, [sp, #12]
 800d248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d24a:	4433      	add	r3, r6
 800d24c:	9309      	str	r3, [sp, #36]	; 0x24
 800d24e:	e768      	b.n	800d122 <_svfiprintf_r+0x4e>
 800d250:	460c      	mov	r4, r1
 800d252:	2001      	movs	r0, #1
 800d254:	fb0c 3202 	mla	r2, ip, r2, r3
 800d258:	e7a6      	b.n	800d1a8 <_svfiprintf_r+0xd4>
 800d25a:	2300      	movs	r3, #0
 800d25c:	f04f 0c0a 	mov.w	ip, #10
 800d260:	4619      	mov	r1, r3
 800d262:	3401      	adds	r4, #1
 800d264:	9305      	str	r3, [sp, #20]
 800d266:	4620      	mov	r0, r4
 800d268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d26c:	3a30      	subs	r2, #48	; 0x30
 800d26e:	2a09      	cmp	r2, #9
 800d270:	d903      	bls.n	800d27a <_svfiprintf_r+0x1a6>
 800d272:	2b00      	cmp	r3, #0
 800d274:	d0c6      	beq.n	800d204 <_svfiprintf_r+0x130>
 800d276:	9105      	str	r1, [sp, #20]
 800d278:	e7c4      	b.n	800d204 <_svfiprintf_r+0x130>
 800d27a:	4604      	mov	r4, r0
 800d27c:	2301      	movs	r3, #1
 800d27e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d282:	e7f0      	b.n	800d266 <_svfiprintf_r+0x192>
 800d284:	ab03      	add	r3, sp, #12
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	462a      	mov	r2, r5
 800d28a:	4638      	mov	r0, r7
 800d28c:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <_svfiprintf_r+0x1f8>)
 800d28e:	a904      	add	r1, sp, #16
 800d290:	f3af 8000 	nop.w
 800d294:	1c42      	adds	r2, r0, #1
 800d296:	4606      	mov	r6, r0
 800d298:	d1d6      	bne.n	800d248 <_svfiprintf_r+0x174>
 800d29a:	89ab      	ldrh	r3, [r5, #12]
 800d29c:	065b      	lsls	r3, r3, #25
 800d29e:	f53f af2d 	bmi.w	800d0fc <_svfiprintf_r+0x28>
 800d2a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2a4:	b01d      	add	sp, #116	; 0x74
 800d2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2aa:	ab03      	add	r3, sp, #12
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	462a      	mov	r2, r5
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	4b06      	ldr	r3, [pc, #24]	; (800d2cc <_svfiprintf_r+0x1f8>)
 800d2b4:	a904      	add	r1, sp, #16
 800d2b6:	f000 f87d 	bl	800d3b4 <_printf_i>
 800d2ba:	e7eb      	b.n	800d294 <_svfiprintf_r+0x1c0>
 800d2bc:	0800e5bb 	.word	0x0800e5bb
 800d2c0:	0800e5c1 	.word	0x0800e5c1
 800d2c4:	0800e5c5 	.word	0x0800e5c5
 800d2c8:	00000000 	.word	0x00000000
 800d2cc:	0800d021 	.word	0x0800d021

0800d2d0 <_printf_common>:
 800d2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d4:	4616      	mov	r6, r2
 800d2d6:	4699      	mov	r9, r3
 800d2d8:	688a      	ldr	r2, [r1, #8]
 800d2da:	690b      	ldr	r3, [r1, #16]
 800d2dc:	4607      	mov	r7, r0
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	bfb8      	it	lt
 800d2e2:	4613      	movlt	r3, r2
 800d2e4:	6033      	str	r3, [r6, #0]
 800d2e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2f0:	b10a      	cbz	r2, 800d2f6 <_printf_common+0x26>
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	6033      	str	r3, [r6, #0]
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	0699      	lsls	r1, r3, #26
 800d2fa:	bf42      	ittt	mi
 800d2fc:	6833      	ldrmi	r3, [r6, #0]
 800d2fe:	3302      	addmi	r3, #2
 800d300:	6033      	strmi	r3, [r6, #0]
 800d302:	6825      	ldr	r5, [r4, #0]
 800d304:	f015 0506 	ands.w	r5, r5, #6
 800d308:	d106      	bne.n	800d318 <_printf_common+0x48>
 800d30a:	f104 0a19 	add.w	sl, r4, #25
 800d30e:	68e3      	ldr	r3, [r4, #12]
 800d310:	6832      	ldr	r2, [r6, #0]
 800d312:	1a9b      	subs	r3, r3, r2
 800d314:	42ab      	cmp	r3, r5
 800d316:	dc2b      	bgt.n	800d370 <_printf_common+0xa0>
 800d318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d31c:	1e13      	subs	r3, r2, #0
 800d31e:	6822      	ldr	r2, [r4, #0]
 800d320:	bf18      	it	ne
 800d322:	2301      	movne	r3, #1
 800d324:	0692      	lsls	r2, r2, #26
 800d326:	d430      	bmi.n	800d38a <_printf_common+0xba>
 800d328:	4649      	mov	r1, r9
 800d32a:	4638      	mov	r0, r7
 800d32c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d330:	47c0      	blx	r8
 800d332:	3001      	adds	r0, #1
 800d334:	d023      	beq.n	800d37e <_printf_common+0xae>
 800d336:	6823      	ldr	r3, [r4, #0]
 800d338:	6922      	ldr	r2, [r4, #16]
 800d33a:	f003 0306 	and.w	r3, r3, #6
 800d33e:	2b04      	cmp	r3, #4
 800d340:	bf14      	ite	ne
 800d342:	2500      	movne	r5, #0
 800d344:	6833      	ldreq	r3, [r6, #0]
 800d346:	f04f 0600 	mov.w	r6, #0
 800d34a:	bf08      	it	eq
 800d34c:	68e5      	ldreq	r5, [r4, #12]
 800d34e:	f104 041a 	add.w	r4, r4, #26
 800d352:	bf08      	it	eq
 800d354:	1aed      	subeq	r5, r5, r3
 800d356:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d35a:	bf08      	it	eq
 800d35c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d360:	4293      	cmp	r3, r2
 800d362:	bfc4      	itt	gt
 800d364:	1a9b      	subgt	r3, r3, r2
 800d366:	18ed      	addgt	r5, r5, r3
 800d368:	42b5      	cmp	r5, r6
 800d36a:	d11a      	bne.n	800d3a2 <_printf_common+0xd2>
 800d36c:	2000      	movs	r0, #0
 800d36e:	e008      	b.n	800d382 <_printf_common+0xb2>
 800d370:	2301      	movs	r3, #1
 800d372:	4652      	mov	r2, sl
 800d374:	4649      	mov	r1, r9
 800d376:	4638      	mov	r0, r7
 800d378:	47c0      	blx	r8
 800d37a:	3001      	adds	r0, #1
 800d37c:	d103      	bne.n	800d386 <_printf_common+0xb6>
 800d37e:	f04f 30ff 	mov.w	r0, #4294967295
 800d382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d386:	3501      	adds	r5, #1
 800d388:	e7c1      	b.n	800d30e <_printf_common+0x3e>
 800d38a:	2030      	movs	r0, #48	; 0x30
 800d38c:	18e1      	adds	r1, r4, r3
 800d38e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d398:	4422      	add	r2, r4
 800d39a:	3302      	adds	r3, #2
 800d39c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3a0:	e7c2      	b.n	800d328 <_printf_common+0x58>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4622      	mov	r2, r4
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	47c0      	blx	r8
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	d0e6      	beq.n	800d37e <_printf_common+0xae>
 800d3b0:	3601      	adds	r6, #1
 800d3b2:	e7d9      	b.n	800d368 <_printf_common+0x98>

0800d3b4 <_printf_i>:
 800d3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b8:	7e0f      	ldrb	r7, [r1, #24]
 800d3ba:	4691      	mov	r9, r2
 800d3bc:	2f78      	cmp	r7, #120	; 0x78
 800d3be:	4680      	mov	r8, r0
 800d3c0:	460c      	mov	r4, r1
 800d3c2:	469a      	mov	sl, r3
 800d3c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d3ca:	d807      	bhi.n	800d3dc <_printf_i+0x28>
 800d3cc:	2f62      	cmp	r7, #98	; 0x62
 800d3ce:	d80a      	bhi.n	800d3e6 <_printf_i+0x32>
 800d3d0:	2f00      	cmp	r7, #0
 800d3d2:	f000 80d5 	beq.w	800d580 <_printf_i+0x1cc>
 800d3d6:	2f58      	cmp	r7, #88	; 0x58
 800d3d8:	f000 80c1 	beq.w	800d55e <_printf_i+0x1aa>
 800d3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3e4:	e03a      	b.n	800d45c <_printf_i+0xa8>
 800d3e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3ea:	2b15      	cmp	r3, #21
 800d3ec:	d8f6      	bhi.n	800d3dc <_printf_i+0x28>
 800d3ee:	a101      	add	r1, pc, #4	; (adr r1, 800d3f4 <_printf_i+0x40>)
 800d3f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3f4:	0800d44d 	.word	0x0800d44d
 800d3f8:	0800d461 	.word	0x0800d461
 800d3fc:	0800d3dd 	.word	0x0800d3dd
 800d400:	0800d3dd 	.word	0x0800d3dd
 800d404:	0800d3dd 	.word	0x0800d3dd
 800d408:	0800d3dd 	.word	0x0800d3dd
 800d40c:	0800d461 	.word	0x0800d461
 800d410:	0800d3dd 	.word	0x0800d3dd
 800d414:	0800d3dd 	.word	0x0800d3dd
 800d418:	0800d3dd 	.word	0x0800d3dd
 800d41c:	0800d3dd 	.word	0x0800d3dd
 800d420:	0800d567 	.word	0x0800d567
 800d424:	0800d48d 	.word	0x0800d48d
 800d428:	0800d521 	.word	0x0800d521
 800d42c:	0800d3dd 	.word	0x0800d3dd
 800d430:	0800d3dd 	.word	0x0800d3dd
 800d434:	0800d589 	.word	0x0800d589
 800d438:	0800d3dd 	.word	0x0800d3dd
 800d43c:	0800d48d 	.word	0x0800d48d
 800d440:	0800d3dd 	.word	0x0800d3dd
 800d444:	0800d3dd 	.word	0x0800d3dd
 800d448:	0800d529 	.word	0x0800d529
 800d44c:	682b      	ldr	r3, [r5, #0]
 800d44e:	1d1a      	adds	r2, r3, #4
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	602a      	str	r2, [r5, #0]
 800d454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d45c:	2301      	movs	r3, #1
 800d45e:	e0a0      	b.n	800d5a2 <_printf_i+0x1ee>
 800d460:	6820      	ldr	r0, [r4, #0]
 800d462:	682b      	ldr	r3, [r5, #0]
 800d464:	0607      	lsls	r7, r0, #24
 800d466:	f103 0104 	add.w	r1, r3, #4
 800d46a:	6029      	str	r1, [r5, #0]
 800d46c:	d501      	bpl.n	800d472 <_printf_i+0xbe>
 800d46e:	681e      	ldr	r6, [r3, #0]
 800d470:	e003      	b.n	800d47a <_printf_i+0xc6>
 800d472:	0646      	lsls	r6, r0, #25
 800d474:	d5fb      	bpl.n	800d46e <_printf_i+0xba>
 800d476:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d47a:	2e00      	cmp	r6, #0
 800d47c:	da03      	bge.n	800d486 <_printf_i+0xd2>
 800d47e:	232d      	movs	r3, #45	; 0x2d
 800d480:	4276      	negs	r6, r6
 800d482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d486:	230a      	movs	r3, #10
 800d488:	4859      	ldr	r0, [pc, #356]	; (800d5f0 <_printf_i+0x23c>)
 800d48a:	e012      	b.n	800d4b2 <_printf_i+0xfe>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	6820      	ldr	r0, [r4, #0]
 800d490:	1d19      	adds	r1, r3, #4
 800d492:	6029      	str	r1, [r5, #0]
 800d494:	0605      	lsls	r5, r0, #24
 800d496:	d501      	bpl.n	800d49c <_printf_i+0xe8>
 800d498:	681e      	ldr	r6, [r3, #0]
 800d49a:	e002      	b.n	800d4a2 <_printf_i+0xee>
 800d49c:	0641      	lsls	r1, r0, #25
 800d49e:	d5fb      	bpl.n	800d498 <_printf_i+0xe4>
 800d4a0:	881e      	ldrh	r6, [r3, #0]
 800d4a2:	2f6f      	cmp	r7, #111	; 0x6f
 800d4a4:	bf0c      	ite	eq
 800d4a6:	2308      	moveq	r3, #8
 800d4a8:	230a      	movne	r3, #10
 800d4aa:	4851      	ldr	r0, [pc, #324]	; (800d5f0 <_printf_i+0x23c>)
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4b2:	6865      	ldr	r5, [r4, #4]
 800d4b4:	2d00      	cmp	r5, #0
 800d4b6:	bfa8      	it	ge
 800d4b8:	6821      	ldrge	r1, [r4, #0]
 800d4ba:	60a5      	str	r5, [r4, #8]
 800d4bc:	bfa4      	itt	ge
 800d4be:	f021 0104 	bicge.w	r1, r1, #4
 800d4c2:	6021      	strge	r1, [r4, #0]
 800d4c4:	b90e      	cbnz	r6, 800d4ca <_printf_i+0x116>
 800d4c6:	2d00      	cmp	r5, #0
 800d4c8:	d04b      	beq.n	800d562 <_printf_i+0x1ae>
 800d4ca:	4615      	mov	r5, r2
 800d4cc:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4d0:	fb03 6711 	mls	r7, r3, r1, r6
 800d4d4:	5dc7      	ldrb	r7, [r0, r7]
 800d4d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4da:	4637      	mov	r7, r6
 800d4dc:	42bb      	cmp	r3, r7
 800d4de:	460e      	mov	r6, r1
 800d4e0:	d9f4      	bls.n	800d4cc <_printf_i+0x118>
 800d4e2:	2b08      	cmp	r3, #8
 800d4e4:	d10b      	bne.n	800d4fe <_printf_i+0x14a>
 800d4e6:	6823      	ldr	r3, [r4, #0]
 800d4e8:	07de      	lsls	r6, r3, #31
 800d4ea:	d508      	bpl.n	800d4fe <_printf_i+0x14a>
 800d4ec:	6923      	ldr	r3, [r4, #16]
 800d4ee:	6861      	ldr	r1, [r4, #4]
 800d4f0:	4299      	cmp	r1, r3
 800d4f2:	bfde      	ittt	le
 800d4f4:	2330      	movle	r3, #48	; 0x30
 800d4f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d4fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d4fe:	1b52      	subs	r2, r2, r5
 800d500:	6122      	str	r2, [r4, #16]
 800d502:	464b      	mov	r3, r9
 800d504:	4621      	mov	r1, r4
 800d506:	4640      	mov	r0, r8
 800d508:	f8cd a000 	str.w	sl, [sp]
 800d50c:	aa03      	add	r2, sp, #12
 800d50e:	f7ff fedf 	bl	800d2d0 <_printf_common>
 800d512:	3001      	adds	r0, #1
 800d514:	d14a      	bne.n	800d5ac <_printf_i+0x1f8>
 800d516:	f04f 30ff 	mov.w	r0, #4294967295
 800d51a:	b004      	add	sp, #16
 800d51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d520:	6823      	ldr	r3, [r4, #0]
 800d522:	f043 0320 	orr.w	r3, r3, #32
 800d526:	6023      	str	r3, [r4, #0]
 800d528:	2778      	movs	r7, #120	; 0x78
 800d52a:	4832      	ldr	r0, [pc, #200]	; (800d5f4 <_printf_i+0x240>)
 800d52c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	6829      	ldr	r1, [r5, #0]
 800d534:	061f      	lsls	r7, r3, #24
 800d536:	f851 6b04 	ldr.w	r6, [r1], #4
 800d53a:	d402      	bmi.n	800d542 <_printf_i+0x18e>
 800d53c:	065f      	lsls	r7, r3, #25
 800d53e:	bf48      	it	mi
 800d540:	b2b6      	uxthmi	r6, r6
 800d542:	07df      	lsls	r7, r3, #31
 800d544:	bf48      	it	mi
 800d546:	f043 0320 	orrmi.w	r3, r3, #32
 800d54a:	6029      	str	r1, [r5, #0]
 800d54c:	bf48      	it	mi
 800d54e:	6023      	strmi	r3, [r4, #0]
 800d550:	b91e      	cbnz	r6, 800d55a <_printf_i+0x1a6>
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	f023 0320 	bic.w	r3, r3, #32
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	2310      	movs	r3, #16
 800d55c:	e7a6      	b.n	800d4ac <_printf_i+0xf8>
 800d55e:	4824      	ldr	r0, [pc, #144]	; (800d5f0 <_printf_i+0x23c>)
 800d560:	e7e4      	b.n	800d52c <_printf_i+0x178>
 800d562:	4615      	mov	r5, r2
 800d564:	e7bd      	b.n	800d4e2 <_printf_i+0x12e>
 800d566:	682b      	ldr	r3, [r5, #0]
 800d568:	6826      	ldr	r6, [r4, #0]
 800d56a:	1d18      	adds	r0, r3, #4
 800d56c:	6961      	ldr	r1, [r4, #20]
 800d56e:	6028      	str	r0, [r5, #0]
 800d570:	0635      	lsls	r5, r6, #24
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	d501      	bpl.n	800d57a <_printf_i+0x1c6>
 800d576:	6019      	str	r1, [r3, #0]
 800d578:	e002      	b.n	800d580 <_printf_i+0x1cc>
 800d57a:	0670      	lsls	r0, r6, #25
 800d57c:	d5fb      	bpl.n	800d576 <_printf_i+0x1c2>
 800d57e:	8019      	strh	r1, [r3, #0]
 800d580:	2300      	movs	r3, #0
 800d582:	4615      	mov	r5, r2
 800d584:	6123      	str	r3, [r4, #16]
 800d586:	e7bc      	b.n	800d502 <_printf_i+0x14e>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	2100      	movs	r1, #0
 800d58c:	1d1a      	adds	r2, r3, #4
 800d58e:	602a      	str	r2, [r5, #0]
 800d590:	681d      	ldr	r5, [r3, #0]
 800d592:	6862      	ldr	r2, [r4, #4]
 800d594:	4628      	mov	r0, r5
 800d596:	f000 f849 	bl	800d62c <memchr>
 800d59a:	b108      	cbz	r0, 800d5a0 <_printf_i+0x1ec>
 800d59c:	1b40      	subs	r0, r0, r5
 800d59e:	6060      	str	r0, [r4, #4]
 800d5a0:	6863      	ldr	r3, [r4, #4]
 800d5a2:	6123      	str	r3, [r4, #16]
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5aa:	e7aa      	b.n	800d502 <_printf_i+0x14e>
 800d5ac:	462a      	mov	r2, r5
 800d5ae:	4649      	mov	r1, r9
 800d5b0:	4640      	mov	r0, r8
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	47d0      	blx	sl
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	d0ad      	beq.n	800d516 <_printf_i+0x162>
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	079b      	lsls	r3, r3, #30
 800d5be:	d413      	bmi.n	800d5e8 <_printf_i+0x234>
 800d5c0:	68e0      	ldr	r0, [r4, #12]
 800d5c2:	9b03      	ldr	r3, [sp, #12]
 800d5c4:	4298      	cmp	r0, r3
 800d5c6:	bfb8      	it	lt
 800d5c8:	4618      	movlt	r0, r3
 800d5ca:	e7a6      	b.n	800d51a <_printf_i+0x166>
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	4632      	mov	r2, r6
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	47d0      	blx	sl
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	d09d      	beq.n	800d516 <_printf_i+0x162>
 800d5da:	3501      	adds	r5, #1
 800d5dc:	68e3      	ldr	r3, [r4, #12]
 800d5de:	9903      	ldr	r1, [sp, #12]
 800d5e0:	1a5b      	subs	r3, r3, r1
 800d5e2:	42ab      	cmp	r3, r5
 800d5e4:	dcf2      	bgt.n	800d5cc <_printf_i+0x218>
 800d5e6:	e7eb      	b.n	800d5c0 <_printf_i+0x20c>
 800d5e8:	2500      	movs	r5, #0
 800d5ea:	f104 0619 	add.w	r6, r4, #25
 800d5ee:	e7f5      	b.n	800d5dc <_printf_i+0x228>
 800d5f0:	0800e5cc 	.word	0x0800e5cc
 800d5f4:	0800e5dd 	.word	0x0800e5dd

0800d5f8 <memmove>:
 800d5f8:	4288      	cmp	r0, r1
 800d5fa:	b510      	push	{r4, lr}
 800d5fc:	eb01 0402 	add.w	r4, r1, r2
 800d600:	d902      	bls.n	800d608 <memmove+0x10>
 800d602:	4284      	cmp	r4, r0
 800d604:	4623      	mov	r3, r4
 800d606:	d807      	bhi.n	800d618 <memmove+0x20>
 800d608:	1e43      	subs	r3, r0, #1
 800d60a:	42a1      	cmp	r1, r4
 800d60c:	d008      	beq.n	800d620 <memmove+0x28>
 800d60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d612:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d616:	e7f8      	b.n	800d60a <memmove+0x12>
 800d618:	4601      	mov	r1, r0
 800d61a:	4402      	add	r2, r0
 800d61c:	428a      	cmp	r2, r1
 800d61e:	d100      	bne.n	800d622 <memmove+0x2a>
 800d620:	bd10      	pop	{r4, pc}
 800d622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d62a:	e7f7      	b.n	800d61c <memmove+0x24>

0800d62c <memchr>:
 800d62c:	4603      	mov	r3, r0
 800d62e:	b510      	push	{r4, lr}
 800d630:	b2c9      	uxtb	r1, r1
 800d632:	4402      	add	r2, r0
 800d634:	4293      	cmp	r3, r2
 800d636:	4618      	mov	r0, r3
 800d638:	d101      	bne.n	800d63e <memchr+0x12>
 800d63a:	2000      	movs	r0, #0
 800d63c:	e003      	b.n	800d646 <memchr+0x1a>
 800d63e:	7804      	ldrb	r4, [r0, #0]
 800d640:	3301      	adds	r3, #1
 800d642:	428c      	cmp	r4, r1
 800d644:	d1f6      	bne.n	800d634 <memchr+0x8>
 800d646:	bd10      	pop	{r4, pc}

0800d648 <memcpy>:
 800d648:	440a      	add	r2, r1
 800d64a:	4291      	cmp	r1, r2
 800d64c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d650:	d100      	bne.n	800d654 <memcpy+0xc>
 800d652:	4770      	bx	lr
 800d654:	b510      	push	{r4, lr}
 800d656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d65a:	4291      	cmp	r1, r2
 800d65c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d660:	d1f9      	bne.n	800d656 <memcpy+0xe>
 800d662:	bd10      	pop	{r4, pc}

0800d664 <_realloc_r>:
 800d664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d668:	4680      	mov	r8, r0
 800d66a:	4614      	mov	r4, r2
 800d66c:	460e      	mov	r6, r1
 800d66e:	b921      	cbnz	r1, 800d67a <_realloc_r+0x16>
 800d670:	4611      	mov	r1, r2
 800d672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d676:	f7ff bb41 	b.w	800ccfc <_malloc_r>
 800d67a:	b92a      	cbnz	r2, 800d688 <_realloc_r+0x24>
 800d67c:	f7ff fc88 	bl	800cf90 <_free_r>
 800d680:	4625      	mov	r5, r4
 800d682:	4628      	mov	r0, r5
 800d684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d688:	f000 f81b 	bl	800d6c2 <_malloc_usable_size_r>
 800d68c:	4284      	cmp	r4, r0
 800d68e:	4607      	mov	r7, r0
 800d690:	d802      	bhi.n	800d698 <_realloc_r+0x34>
 800d692:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d696:	d812      	bhi.n	800d6be <_realloc_r+0x5a>
 800d698:	4621      	mov	r1, r4
 800d69a:	4640      	mov	r0, r8
 800d69c:	f7ff fb2e 	bl	800ccfc <_malloc_r>
 800d6a0:	4605      	mov	r5, r0
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d0ed      	beq.n	800d682 <_realloc_r+0x1e>
 800d6a6:	42bc      	cmp	r4, r7
 800d6a8:	4622      	mov	r2, r4
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	bf28      	it	cs
 800d6ae:	463a      	movcs	r2, r7
 800d6b0:	f7ff ffca 	bl	800d648 <memcpy>
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	4640      	mov	r0, r8
 800d6b8:	f7ff fc6a 	bl	800cf90 <_free_r>
 800d6bc:	e7e1      	b.n	800d682 <_realloc_r+0x1e>
 800d6be:	4635      	mov	r5, r6
 800d6c0:	e7df      	b.n	800d682 <_realloc_r+0x1e>

0800d6c2 <_malloc_usable_size_r>:
 800d6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c6:	1f18      	subs	r0, r3, #4
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	bfbc      	itt	lt
 800d6cc:	580b      	ldrlt	r3, [r1, r0]
 800d6ce:	18c0      	addlt	r0, r0, r3
 800d6d0:	4770      	bx	lr
	...

0800d6d4 <_init>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	bf00      	nop
 800d6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6da:	bc08      	pop	{r3}
 800d6dc:	469e      	mov	lr, r3
 800d6de:	4770      	bx	lr

0800d6e0 <_fini>:
 800d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e2:	bf00      	nop
 800d6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6e6:	bc08      	pop	{r3}
 800d6e8:	469e      	mov	lr, r3
 800d6ea:	4770      	bx	lr
