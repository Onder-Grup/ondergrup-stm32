
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc90  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000103c  0800ce74  0800ce74  0001ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800deb0  0800deb0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800deb0  0800deb0  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800deb0  0800deb0  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deb0  0800deb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800deb4  0800deb4  0001deb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800deb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000010c  0800dfc4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800dfc4  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178c9  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035a4  00000000  00000000  00037a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  0003afe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  0003c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c620  00000000  00000000  0003d0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c072  00000000  00000000  000596ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee51  00000000  00000000  0007575e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000520c  00000000  00000000  001145b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001197bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce5c 	.word	0x0800ce5c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800ce5c 	.word	0x0800ce5c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc76 	bl	8009b40 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 faee 	bl	8008838 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000128 	.word	0x20000128
 80004bc:	200003ac 	.word	0x200003ac
 80004c0:	200001fd 	.word	0x200001fd
 80004c4:	20000225 	.word	0x20000225
 80004c8:	20000228 	.word	0x20000228
 80004cc:	20000229 	.word	0x20000229
 80004d0:	2000022a 	.word	0x2000022a
 80004d4:	2000022b 	.word	0x2000022b
 80004d8:	2000022c 	.word	0x2000022c
 80004dc:	2000022d 	.word	0x2000022d
 80004e0:	2000023d 	.word	0x2000023d
 80004e4:	2000022e 	.word	0x2000022e
 80004e8:	2000023e 	.word	0x2000023e
 80004ec:	2000022f 	.word	0x2000022f
 80004f0:	2000023f 	.word	0x2000023f
 80004f4:	20000232 	.word	0x20000232
 80004f8:	20000233 	.word	0x20000233
 80004fc:	20000234 	.word	0x20000234
 8000500:	20000235 	.word	0x20000235
 8000504:	20000236 	.word	0x20000236
 8000508:	20000237 	.word	0x20000237
 800050c:	20000238 	.word	0x20000238
 8000510:	20000239 	.word	0x20000239
 8000514:	2000023a 	.word	0x2000023a
 8000518:	2000023b 	.word	0x2000023b
 800051c:	2000023c 	.word	0x2000023c
 8000520:	20000240 	.word	0x20000240
 8000524:	20000242 	.word	0x20000242
 8000528:	20000220 	.word	0x20000220
 800052c:	20000221 	.word	0x20000221
 8000530:	20000222 	.word	0x20000222
 8000534:	20000008 	.word	0x20000008
 8000538:	20000009 	.word	0x20000009
 800053c:	20000223 	.word	0x20000223
 8000540:	20000245 	.word	0x20000245
 8000544:	20000243 	.word	0x20000243
 8000548:	20000231 	.word	0x20000231
 800054c:	20000244 	.word	0x20000244
 8000550:	20000230 	.word	0x20000230
 8000554:	20000246 	.word	0x20000246
 8000558:	20000247 	.word	0x20000247
 800055c:	20000248 	.word	0x20000248
 8000560:	20000249 	.word	0x20000249
 8000564:	2000024a 	.word	0x2000024a
 8000568:	2000024b 	.word	0x2000024b
 800056c:	2000024c 	.word	0x2000024c
 8000570:	2000024d 	.word	0x2000024d
 8000574:	2000024e 	.word	0x2000024e
 8000578:	2000024f 	.word	0x2000024f
 800057c:	200001fc 	.word	0x200001fc
	}

	if(kapi1AcSure>5) {
 8000580:	4b5c      	ldr	r3, [pc, #368]	; (80006f4 <eepromKontrol+0x4c0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b5a      	ldr	r3, [pc, #360]	; (80006f4 <eepromKontrol+0x4c0>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b5a      	ldr	r3, [pc, #360]	; (80006f8 <eepromKontrol+0x4c4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b58      	ldr	r3, [pc, #352]	; (80006f8 <eepromKontrol+0x4c4>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b57      	ldr	r3, [pc, #348]	; (80006fc <eepromKontrol+0x4c8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b55      	ldr	r3, [pc, #340]	; (80006fc <eepromKontrol+0x4c8>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b55      	ldr	r3, [pc, #340]	; (8000700 <eepromKontrol+0x4cc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b53      	ldr	r3, [pc, #332]	; (8000700 <eepromKontrol+0x4cc>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b52      	ldr	r3, [pc, #328]	; (8000704 <eepromKontrol+0x4d0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b50      	ldr	r3, [pc, #320]	; (8000704 <eepromKontrol+0x4d0>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b50      	ldr	r3, [pc, #320]	; (8000708 <eepromKontrol+0x4d4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4e      	ldr	r3, [pc, #312]	; (8000708 <eepromKontrol+0x4d4>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4d      	ldr	r3, [pc, #308]	; (800070c <eepromKontrol+0x4d8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b4b      	ldr	r3, [pc, #300]	; (800070c <eepromKontrol+0x4d8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b4b      	ldr	r3, [pc, #300]	; (8000710 <eepromKontrol+0x4dc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b49      	ldr	r3, [pc, #292]	; (8000710 <eepromKontrol+0x4dc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b48      	ldr	r3, [pc, #288]	; (8000714 <eepromKontrol+0x4e0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b46      	ldr	r3, [pc, #280]	; (8000714 <eepromKontrol+0x4e0>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b46      	ldr	r3, [pc, #280]	; (8000718 <eepromKontrol+0x4e4>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b44      	ldr	r3, [pc, #272]	; (8000718 <eepromKontrol+0x4e4>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b43      	ldr	r3, [pc, #268]	; (800071c <eepromKontrol+0x4e8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b41      	ldr	r3, [pc, #260]	; (800071c <eepromKontrol+0x4e8>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b41      	ldr	r3, [pc, #260]	; (8000720 <eepromKontrol+0x4ec>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3f      	ldr	r3, [pc, #252]	; (8000720 <eepromKontrol+0x4ec>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3e      	ldr	r3, [pc, #248]	; (8000724 <eepromKontrol+0x4f0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b3c      	ldr	r3, [pc, #240]	; (8000724 <eepromKontrol+0x4f0>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b3c      	ldr	r3, [pc, #240]	; (8000728 <eepromKontrol+0x4f4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <eepromKontrol+0x4f4>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b39      	ldr	r3, [pc, #228]	; (800072c <eepromKontrol+0x4f8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b37      	ldr	r3, [pc, #220]	; (800072c <eepromKontrol+0x4f8>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <eepromKontrol+0x4fc>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b35      	ldr	r3, [pc, #212]	; (8000730 <eepromKontrol+0x4fc>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b34      	ldr	r3, [pc, #208]	; (8000734 <eepromKontrol+0x500>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <eepromKontrol+0x500>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <eepromKontrol+0x504>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b30      	ldr	r3, [pc, #192]	; (8000738 <eepromKontrol+0x504>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <eepromKontrol+0x508>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2d      	ldr	r3, [pc, #180]	; (800073c <eepromKontrol+0x508>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <eepromKontrol+0x50c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <eepromKontrol+0x50c>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <eepromKontrol+0x510>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <eepromKontrol+0x510>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <eepromKontrol+0x514>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b26      	ldr	r3, [pc, #152]	; (8000748 <eepromKontrol+0x514>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <eepromKontrol+0x518>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a25      	ldr	r2, [pc, #148]	; (8000750 <eepromKontrol+0x51c>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <eepromKontrol+0x520>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f008 f8b3 	bl	8008838 <HAL_Delay>
	readFromEEPROM(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 f850 	bl	8000778 <readFromEEPROM>
	HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f008 f8ac 	bl	8008838 <HAL_Delay>
	readFromEEPROM(2);
 80006e0:	2002      	movs	r0, #2
 80006e2:	f000 f849 	bl	8000778 <readFromEEPROM>
	HAL_Delay(1000);
 80006e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ea:	f008 f8a5 	bl	8008838 <HAL_Delay>
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000023d 	.word	0x2000023d
 80006f8:	2000022e 	.word	0x2000022e
 80006fc:	2000023e 	.word	0x2000023e
 8000700:	2000022f 	.word	0x2000022f
 8000704:	20000231 	.word	0x20000231
 8000708:	2000023f 	.word	0x2000023f
 800070c:	20000232 	.word	0x20000232
 8000710:	20000233 	.word	0x20000233
 8000714:	20000234 	.word	0x20000234
 8000718:	20000235 	.word	0x20000235
 800071c:	20000236 	.word	0x20000236
 8000720:	20000237 	.word	0x20000237
 8000724:	20000238 	.word	0x20000238
 8000728:	20000239 	.word	0x20000239
 800072c:	2000023a 	.word	0x2000023a
 8000730:	2000023b 	.word	0x2000023b
 8000734:	2000023c 	.word	0x2000023c
 8000738:	20000240 	.word	0x20000240
 800073c:	20000242 	.word	0x20000242
 8000740:	20000244 	.word	0x20000244
 8000744:	20000245 	.word	0x20000245
 8000748:	20000243 	.word	0x20000243
 800074c:	2000000c 	.word	0x2000000c
 8000750:	20000128 	.word	0x20000128
 8000754:	200001a0 	.word	0x200001a0

08000758 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <getCharFromCursorPosition+0x1c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	2000002c 	.word	0x2000002c

08000778 <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11c      	bne.n	80007c0 <readFromEEPROM+0x48>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <readFromEEPROM+0x88>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	e012      	b.n	80007b8 <readFromEEPROM+0x40>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 8000792:	7dfb      	ldrb	r3, [r7, #23]
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <readFromEEPROM+0x8c>)
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffdd 	bl	8000758 <getCharFromCursorPosition>
 800079e:	4603      	mov	r3, r0
 80007a0:	4619      	mov	r1, r3
 80007a2:	4a19      	ldr	r2, [pc, #100]	; (8000808 <readFromEEPROM+0x90>)
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	4413      	add	r3, r2
 80007a8:	460a      	mov	r2, r1
 80007aa:	701a      	strb	r2, [r3, #0]

			tempSSIDStartPos++;
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	3301      	adds	r3, #1
 80007b0:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	3301      	adds	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	2b13      	cmp	r3, #19
 80007bc:	dde9      	ble.n	8000792 <readFromEEPROM+0x1a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);

			tempPassStartPos++;
		}
	}
}
 80007be:	e01b      	b.n	80007f8 <readFromEEPROM+0x80>
		uint8_t tempPassStartPos = passStartPos;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <readFromEEPROM+0x94>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	e012      	b.n	80007f2 <readFromEEPROM+0x7a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <readFromEEPROM+0x8c>)
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ffc0 	bl	8000758 <getCharFromCursorPosition>
 80007d8:	4603      	mov	r3, r0
 80007da:	4619      	mov	r1, r3
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <readFromEEPROM+0x98>)
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	4413      	add	r3, r2
 80007e2:	460a      	mov	r2, r1
 80007e4:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	3301      	adds	r3, #1
 80007ea:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2b13      	cmp	r3, #19
 80007f6:	dde9      	ble.n	80007cc <readFromEEPROM+0x54>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000010 	.word	0x20000010
 8000804:	20000128 	.word	0x20000128
 8000808:	200001ac 	.word	0x200001ac
 800080c:	20000014 	.word	0x20000014
 8000810:	200001c0 	.word	0x200001c0

08000814 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b09f      	sub	sp, #124	; 0x7c
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000820:	4948      	ldr	r1, [pc, #288]	; (8000944 <ESP8266_Init+0x130>)
 8000822:	4849      	ldr	r0, [pc, #292]	; (8000948 <ESP8266_Init+0x134>)
 8000824:	f00b feba 	bl	800c59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000828:	4847      	ldr	r0, [pc, #284]	; (8000948 <ESP8266_Init+0x134>)
 800082a:	f7ff fcfb 	bl	8000224 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b29b      	uxth	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	4944      	ldr	r1, [pc, #272]	; (8000948 <ESP8266_Init+0x134>)
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f00b f8ca 	bl	800b9d0 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800083c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000840:	f007 fffa 	bl	8008838 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000844:	4941      	ldr	r1, [pc, #260]	; (800094c <ESP8266_Init+0x138>)
 8000846:	4840      	ldr	r0, [pc, #256]	; (8000948 <ESP8266_Init+0x134>)
 8000848:	f00b fea8 	bl	800c59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800084c:	483e      	ldr	r0, [pc, #248]	; (8000948 <ESP8266_Init+0x134>)
 800084e:	f7ff fce9 	bl	8000224 <strlen>
 8000852:	4603      	mov	r3, r0
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	493b      	ldr	r1, [pc, #236]	; (8000948 <ESP8266_Init+0x134>)
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f00b f8b8 	bl	800b9d0 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000864:	f007 ffe8 	bl	8008838 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000868:	4939      	ldr	r1, [pc, #228]	; (8000950 <ESP8266_Init+0x13c>)
 800086a:	4837      	ldr	r0, [pc, #220]	; (8000948 <ESP8266_Init+0x134>)
 800086c:	f00b fe96 	bl	800c59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000870:	4835      	ldr	r0, [pc, #212]	; (8000948 <ESP8266_Init+0x134>)
 8000872:	f7ff fcd7 	bl	8000224 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29b      	uxth	r3, r3
 800087a:	461a      	mov	r2, r3
 800087c:	4932      	ldr	r1, [pc, #200]	; (8000948 <ESP8266_Init+0x134>)
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f00b f8a6 	bl	800b9d0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000884:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000888:	f007 ffd6 	bl	8008838 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 800088c:	4931      	ldr	r1, [pc, #196]	; (8000954 <ESP8266_Init+0x140>)
 800088e:	482e      	ldr	r0, [pc, #184]	; (8000948 <ESP8266_Init+0x134>)
 8000890:	f00b fe84 	bl	800c59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000894:	482c      	ldr	r0, [pc, #176]	; (8000948 <ESP8266_Init+0x134>)
 8000896:	f7ff fcc5 	bl	8000224 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29b      	uxth	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	4929      	ldr	r1, [pc, #164]	; (8000948 <ESP8266_Init+0x134>)
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f00b f894 	bl	800b9d0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ac:	f007 ffc4 	bl	8008838 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4a28      	ldr	r2, [pc, #160]	; (8000958 <ESP8266_Init+0x144>)
 80008b6:	461c      	mov	r4, r3
 80008b8:	4613      	mov	r3, r2
 80008ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008bc:	c407      	stmia	r4!, {r0, r1, r2}
 80008be:	8023      	strh	r3, [r4, #0]
 80008c0:	3402      	adds	r4, #2
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	68b9      	ldr	r1, [r7, #8]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f00b fec7 	bl	800c660 <strcat>
	strcat(str, "\",\"");
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fca4 	bl	8000224 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4413      	add	r3, r2
 80008e6:	4a1d      	ldr	r2, [pc, #116]	; (800095c <ESP8266_Init+0x148>)
 80008e8:	6810      	ldr	r0, [r2, #0]
 80008ea:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f00b feb4 	bl	800c660 <strcat>
	strcat(str, "\"\r\n");
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc91 	bl	8000224 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4413      	add	r3, r2
 800090c:	4a14      	ldr	r2, [pc, #80]	; (8000960 <ESP8266_Init+0x14c>)
 800090e:	6810      	ldr	r0, [r2, #0]
 8000910:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	461a      	mov	r2, r3
 8000918:	4912      	ldr	r1, [pc, #72]	; (8000964 <ESP8266_Init+0x150>)
 800091a:	480b      	ldr	r0, [pc, #44]	; (8000948 <ESP8266_Init+0x134>)
 800091c:	f00b fe3e 	bl	800c59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <ESP8266_Init+0x134>)
 8000922:	f7ff fc7f 	bl	8000224 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29b      	uxth	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	4906      	ldr	r1, [pc, #24]	; (8000948 <ESP8266_Init+0x134>)
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f00b f84e 	bl	800b9d0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000934:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000938:	f007 ff7e 	bl	8008838 <HAL_Delay>
}
 800093c:	bf00      	nop
 800093e:	377c      	adds	r7, #124	; 0x7c
 8000940:	46bd      	mov	sp, r7
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	0800ce74 	.word	0x0800ce74
 8000948:	20000288 	.word	0x20000288
 800094c:	0800ce84 	.word	0x0800ce84
 8000950:	0800ce90 	.word	0x0800ce90
 8000954:	0800ce98 	.word	0x0800ce98
 8000958:	0800cea8 	.word	0x0800cea8
 800095c:	0800ceb8 	.word	0x0800ceb8
 8000960:	0800cebc 	.word	0x0800cebc
 8000964:	0800cec0 	.word	0x0800cec0

08000968 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b0c6      	sub	sp, #280	; 0x118
 800096c:	af02      	add	r7, sp, #8
 800096e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000976:	6018      	str	r0, [r3, #0]
 8000978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800097c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000980:	6019      	str	r1, [r3, #0]
 8000982:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800098a:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 800098c:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <sendMachineData+0xec>)
 800098e:	4932      	ldr	r1, [pc, #200]	; (8000a58 <sendMachineData+0xf0>)
 8000990:	4832      	ldr	r0, [pc, #200]	; (8000a5c <sendMachineData+0xf4>)
 8000992:	f00b fe03 	bl	800c59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000996:	4831      	ldr	r0, [pc, #196]	; (8000a5c <sendMachineData+0xf4>)
 8000998:	f7ff fc44 	bl	8000224 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009a8:	492c      	ldr	r1, [pc, #176]	; (8000a5c <sendMachineData+0xf4>)
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	f00b f810 	bl	800b9d0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80009b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b4:	f007 ff40 	bl	8008838 <HAL_Delay>

	sprintf(local_txA,
 80009b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009c0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009c4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80009c8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80009cc:	4924      	ldr	r1, [pc, #144]	; (8000a60 <sendMachineData+0xf8>)
 80009ce:	9100      	str	r1, [sp, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6812      	ldr	r2, [r2, #0]
 80009d4:	4923      	ldr	r1, [pc, #140]	; (8000a64 <sendMachineData+0xfc>)
 80009d6:	f00b fde1 	bl	800c59c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80009da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fc20 	bl	8000224 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009f2:	491d      	ldr	r1, [pc, #116]	; (8000a68 <sendMachineData+0x100>)
 80009f4:	4618      	mov	r0, r3
 80009f6:	f00b fdd1 	bl	800c59c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fc10 	bl	8000224 <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	f107 0110 	add.w	r1, r7, #16
 8000a0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	f00a ffdb 	bl	800b9d0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a1e:	f007 ff0b 	bl	8008838 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fbfc 	bl	8000224 <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	f00a ffc7 	bl	800b9d0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a46:	f007 fef7 	bl	8008838 <HAL_Delay>
}
 8000a4a:	bf00      	nop
 8000a4c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	0800cec4 	.word	0x0800cec4
 8000a58:	0800ced4 	.word	0x0800ced4
 8000a5c:	20000288 	.word	0x20000288
 8000a60:	0800cf50 	.word	0x0800cf50
 8000a64:	0800cef4 	.word	0x0800cef4
 8000a68:	0800cf64 	.word	0x0800cf64

08000a6c <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <hata2EEPROM+0xa4>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	1e5a      	subs	r2, r3, #1
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <hata2EEPROM+0xa8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <hata2EEPROM+0xac>)
 8000a84:	5cd3      	ldrb	r3, [r2, r3]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a8a:	f000 f92b 	bl	8000ce4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a8e:	e000      	b.n	8000a92 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a90:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e012      	b.n	8000abe <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <hata2EEPROM+0xa8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <hata2EEPROM+0xac>)
 8000aa2:	5cd3      	ldrb	r3, [r2, r3]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d107      	bne.n	8000ab8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <hata2EEPROM+0xa8>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4919      	ldr	r1, [pc, #100]	; (8000b18 <hata2EEPROM+0xac>)
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	54ca      	strb	r2, [r1, r3]
					break;
 8000ab6:	e007      	b.n	8000ac8 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <hata2EEPROM+0xa4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbe7      	blt.n	8000a98 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <hata2EEPROM+0xa8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	b299      	uxth	r1, r3
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <hata2EEPROM+0xa4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	b298      	uxth	r0, r3
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <hata2EEPROM+0xa8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <hata2EEPROM+0xac>)
 8000ada:	4413      	add	r3, r2
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <hata2EEPROM+0xa4>)
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	b292      	uxth	r2, r2
 8000ae2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000ae6:	9402      	str	r4, [sp, #8]
 8000ae8:	9201      	str	r2, [sp, #4]
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4603      	mov	r3, r0
 8000aee:	460a      	mov	r2, r1
 8000af0:	21a0      	movs	r1, #160	; 0xa0
 8000af2:	480a      	ldr	r0, [pc, #40]	; (8000b1c <hata2EEPROM+0xb0>)
 8000af4:	f008 ff2a 	bl	800994c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000afc:	f007 fe9c 	bl	8008838 <HAL_Delay>
	eepromKontrol(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff fb97 	bl	8000234 <eepromKontrol>
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd90      	pop	{r4, r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000a8 	.word	0x200000a8
 8000b14:	200000ac 	.word	0x200000ac
 8000b18:	20000128 	.word	0x20000128
 8000b1c:	200003ac 	.word	0x200003ac

08000b20 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d11d      	bne.n	8000b6c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b30:	4b62      	ldr	r3, [pc, #392]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d105      	bne.n	8000b44 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b38:	4a61      	ldr	r2, [pc, #388]	; (8000cc0 <hataKoduLcdGoster+0x1a0>)
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f007 f925 	bl	8007d8c <lcd_print>
 8000b42:	e008      	b.n	8000b56 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000b44:	4b5d      	ldr	r3, [pc, #372]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d104      	bne.n	8000b56 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b4c:	4a5d      	ldr	r2, [pc, #372]	; (8000cc4 <hataKoduLcdGoster+0x1a4>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2001      	movs	r0, #1
 8000b52:	f007 f91b 	bl	8007d8c <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b56:	4a5c      	ldr	r2, [pc, #368]	; (8000cc8 <hataKoduLcdGoster+0x1a8>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f007 f916 	bl	8007d8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b60:	4a5a      	ldr	r2, [pc, #360]	; (8000ccc <hataKoduLcdGoster+0x1ac>)
 8000b62:	2107      	movs	r1, #7
 8000b64:	2002      	movs	r0, #2
 8000b66:	f007 f911 	bl	8007d8c <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b6a:	e0a3      	b.n	8000cb4 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d11d      	bne.n	8000bae <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000b72:	4b52      	ldr	r3, [pc, #328]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d105      	bne.n	8000b86 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000b7a:	4a51      	ldr	r2, [pc, #324]	; (8000cc0 <hataKoduLcdGoster+0x1a0>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f007 f904 	bl	8007d8c <lcd_print>
 8000b84:	e008      	b.n	8000b98 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000b86:	4b4d      	ldr	r3, [pc, #308]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d104      	bne.n	8000b98 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000b8e:	4a4d      	ldr	r2, [pc, #308]	; (8000cc4 <hataKoduLcdGoster+0x1a4>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	2001      	movs	r0, #1
 8000b94:	f007 f8fa 	bl	8007d8c <lcd_print>
		lcd_print(2, 2, "2");
 8000b98:	4a4d      	ldr	r2, [pc, #308]	; (8000cd0 <hataKoduLcdGoster+0x1b0>)
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f007 f8f5 	bl	8007d8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000ba2:	4a4a      	ldr	r2, [pc, #296]	; (8000ccc <hataKoduLcdGoster+0x1ac>)
 8000ba4:	2107      	movs	r1, #7
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f007 f8f0 	bl	8007d8c <lcd_print>
}
 8000bac:	e082      	b.n	8000cb4 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d11d      	bne.n	8000bf0 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000bb4:	4b41      	ldr	r3, [pc, #260]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d105      	bne.n	8000bc8 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000bbc:	4a40      	ldr	r2, [pc, #256]	; (8000cc0 <hataKoduLcdGoster+0x1a0>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f007 f8e3 	bl	8007d8c <lcd_print>
 8000bc6:	e008      	b.n	8000bda <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d104      	bne.n	8000bda <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000bd0:	4a3c      	ldr	r2, [pc, #240]	; (8000cc4 <hataKoduLcdGoster+0x1a4>)
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f007 f8d9 	bl	8007d8c <lcd_print>
		lcd_print(2, 3, "3");
 8000bda:	4a3e      	ldr	r2, [pc, #248]	; (8000cd4 <hataKoduLcdGoster+0x1b4>)
 8000bdc:	2103      	movs	r1, #3
 8000bde:	2002      	movs	r0, #2
 8000be0:	f007 f8d4 	bl	8007d8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000be4:	4a39      	ldr	r2, [pc, #228]	; (8000ccc <hataKoduLcdGoster+0x1ac>)
 8000be6:	2107      	movs	r1, #7
 8000be8:	2002      	movs	r0, #2
 8000bea:	f007 f8cf 	bl	8007d8c <lcd_print>
}
 8000bee:	e061      	b.n	8000cb4 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d11d      	bne.n	8000c32 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d105      	bne.n	8000c0a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000bfe:	4a30      	ldr	r2, [pc, #192]	; (8000cc0 <hataKoduLcdGoster+0x1a0>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	2001      	movs	r0, #1
 8000c04:	f007 f8c2 	bl	8007d8c <lcd_print>
 8000c08:	e008      	b.n	8000c1c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d104      	bne.n	8000c1c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c12:	4a2c      	ldr	r2, [pc, #176]	; (8000cc4 <hataKoduLcdGoster+0x1a4>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	2001      	movs	r0, #1
 8000c18:	f007 f8b8 	bl	8007d8c <lcd_print>
		lcd_print(2, 4, "4");
 8000c1c:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <hataKoduLcdGoster+0x1b8>)
 8000c1e:	2104      	movs	r1, #4
 8000c20:	2002      	movs	r0, #2
 8000c22:	f007 f8b3 	bl	8007d8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c26:	4a29      	ldr	r2, [pc, #164]	; (8000ccc <hataKoduLcdGoster+0x1ac>)
 8000c28:	2107      	movs	r1, #7
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f007 f8ae 	bl	8007d8c <lcd_print>
}
 8000c30:	e040      	b.n	8000cb4 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d11d      	bne.n	8000c74 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c38:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d105      	bne.n	8000c4c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000c40:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <hataKoduLcdGoster+0x1a0>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	2001      	movs	r0, #1
 8000c46:	f007 f8a1 	bl	8007d8c <lcd_print>
 8000c4a:	e008      	b.n	8000c5e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d104      	bne.n	8000c5e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <hataKoduLcdGoster+0x1a4>)
 8000c56:	2101      	movs	r1, #1
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f007 f897 	bl	8007d8c <lcd_print>
		lcd_print(2, 5, "5");
 8000c5e:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <hataKoduLcdGoster+0x1bc>)
 8000c60:	2105      	movs	r1, #5
 8000c62:	2002      	movs	r0, #2
 8000c64:	f007 f892 	bl	8007d8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <hataKoduLcdGoster+0x1ac>)
 8000c6a:	2107      	movs	r1, #7
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f007 f88d 	bl	8007d8c <lcd_print>
}
 8000c72:	e01f      	b.n	8000cb4 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d11c      	bne.n	8000cb4 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d105      	bne.n	8000c8e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <hataKoduLcdGoster+0x1a0>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	2001      	movs	r0, #1
 8000c88:	f007 f880 	bl	8007d8c <lcd_print>
 8000c8c:	e008      	b.n	8000ca0 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <hataKoduLcdGoster+0x19c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d104      	bne.n	8000ca0 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <hataKoduLcdGoster+0x1a4>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f007 f876 	bl	8007d8c <lcd_print>
		lcd_print(2, 6, "6");
 8000ca0:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <hataKoduLcdGoster+0x1c0>)
 8000ca2:	2106      	movs	r1, #6
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f007 f871 	bl	8007d8c <lcd_print>
		lcd_print(2, 7, "          ");
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <hataKoduLcdGoster+0x1ac>)
 8000cac:	2107      	movs	r1, #7
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f007 f86c 	bl	8007d8c <lcd_print>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000245 	.word	0x20000245
 8000cc0:	0800cff0 	.word	0x0800cff0
 8000cc4:	0800d000 	.word	0x0800d000
 8000cc8:	0800d010 	.word	0x0800d010
 8000ccc:	0800d014 	.word	0x0800d014
 8000cd0:	0800d020 	.word	0x0800d020
 8000cd4:	0800d024 	.word	0x0800d024
 8000cd8:	0800d028 	.word	0x0800d028
 8000cdc:	0800d02c 	.word	0x0800d02c
 8000ce0:	0800d030 	.word	0x0800d030

08000ce4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	e009      	b.n	8000d04 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <eepromDataFillWithEmpty+0x38>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <eepromDataFillWithEmpty+0x3c>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3301      	adds	r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <eepromDataFillWithEmpty+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	dbf0      	blt.n	8000cf0 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000080 	.word	0x20000080
 8000d20:	20000128 	.word	0x20000128
 8000d24:	200000a8 	.word	0x200000a8

08000d28 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d3a:	4b50      	ldr	r3, [pc, #320]	; (8000e7c <i2cTest+0x154>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <i2cTest+0x154>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0201 	bic.w	r2, r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d4a:	484c      	ldr	r0, [pc, #304]	; (8000e7c <i2cTest+0x154>)
 8000d4c:	f008 fcd0 	bl	80096f0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d50:	23c0      	movs	r3, #192	; 0xc0
 8000d52:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d54:	2311      	movs	r3, #17
 8000d56:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	4846      	ldr	r0, [pc, #280]	; (8000e80 <i2cTest+0x158>)
 8000d66:	f008 f8d7 	bl	8008f18 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2140      	movs	r1, #64	; 0x40
 8000d6e:	4844      	ldr	r0, [pc, #272]	; (8000e80 <i2cTest+0x158>)
 8000d70:	f008 fb49 	bl	8009406 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	4841      	ldr	r0, [pc, #260]	; (8000e80 <i2cTest+0x158>)
 8000d7a:	f008 fb44 	bl	8009406 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f007 fd5a 	bl	8008838 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d84:	bf00      	nop
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	483d      	ldr	r0, [pc, #244]	; (8000e80 <i2cTest+0x158>)
 8000d8a:	f008 fb25 	bl	80093d8 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d006      	beq.n	8000da2 <i2cTest+0x7a>
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	483a      	ldr	r0, [pc, #232]	; (8000e80 <i2cTest+0x158>)
 8000d98:	f008 fb1e 	bl	80093d8 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d1f1      	bne.n	8000d86 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	4836      	ldr	r0, [pc, #216]	; (8000e80 <i2cTest+0x158>)
 8000da8:	f008 fb2d 	bl	8009406 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000dac:	200a      	movs	r0, #10
 8000dae:	f007 fd43 	bl	8008838 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000db2:	bf00      	nop
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	4832      	ldr	r0, [pc, #200]	; (8000e80 <i2cTest+0x158>)
 8000db8:	f008 fb0e 	bl	80093d8 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d0f8      	beq.n	8000db4 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2140      	movs	r1, #64	; 0x40
 8000dc6:	482e      	ldr	r0, [pc, #184]	; (8000e80 <i2cTest+0x158>)
 8000dc8:	f008 fb1d 	bl	8009406 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f007 fd33 	bl	8008838 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dd2:	bf00      	nop
 8000dd4:	2140      	movs	r1, #64	; 0x40
 8000dd6:	482a      	ldr	r0, [pc, #168]	; (8000e80 <i2cTest+0x158>)
 8000dd8:	f008 fafe 	bl	80093d8 <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d0f8      	beq.n	8000dd4 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2140      	movs	r1, #64	; 0x40
 8000de6:	4826      	ldr	r0, [pc, #152]	; (8000e80 <i2cTest+0x158>)
 8000de8:	f008 fb0d 	bl	8009406 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f007 fd23 	bl	8008838 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000df2:	bf00      	nop
 8000df4:	2140      	movs	r1, #64	; 0x40
 8000df6:	4822      	ldr	r0, [pc, #136]	; (8000e80 <i2cTest+0x158>)
 8000df8:	f008 faee 	bl	80093d8 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1f8      	bne.n	8000df4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	481e      	ldr	r0, [pc, #120]	; (8000e80 <i2cTest+0x158>)
 8000e08:	f008 fafd 	bl	8009406 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f007 fd13 	bl	8008838 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e12:	bf00      	nop
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	481a      	ldr	r0, [pc, #104]	; (8000e80 <i2cTest+0x158>)
 8000e18:	f008 fade 	bl	80093d8 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d1f8      	bne.n	8000e14 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e22:	23c0      	movs	r3, #192	; 0xc0
 8000e24:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e26:	2312      	movs	r3, #18
 8000e28:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e32:	463b      	mov	r3, r7
 8000e34:	4619      	mov	r1, r3
 8000e36:	4812      	ldr	r0, [pc, #72]	; (8000e80 <i2cTest+0x158>)
 8000e38:	f008 f86e 	bl	8008f18 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <i2cTest+0x154>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <i2cTest+0x154>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e4a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <i2cTest+0x154>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <i2cTest+0x154>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e5a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <i2cTest+0x154>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <i2cTest+0x154>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0201 	orr.w	r2, r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <i2cTest+0x154>)
 8000e6e:	f008 fafb 	bl	8009468 <HAL_I2C_Init>
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200003ac 	.word	0x200003ac
 8000e80:	40010c00 	.word	0x40010c00

08000e84 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000e8e:	20c8      	movs	r0, #200	; 0xc8
 8000e90:	f007 fcd2 	bl	8008838 <HAL_Delay>
	lcd_clear();
 8000e94:	f006 ffa6 	bl	8007de4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d143      	bne.n	8000f26 <printTemplate+0xa2>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d140      	bne.n	8000f26 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000ea4:	4a9d      	ldr	r2, [pc, #628]	; (800111c <printTemplate+0x298>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f006 ff6f 	bl	8007d8c <lcd_print>
		lcd_print(2, 3, "0");
 8000eae:	4a9c      	ldr	r2, [pc, #624]	; (8001120 <printTemplate+0x29c>)
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f006 ff6a 	bl	8007d8c <lcd_print>
		lcd_print(2, 4, "1");
 8000eb8:	4a9a      	ldr	r2, [pc, #616]	; (8001124 <printTemplate+0x2a0>)
 8000eba:	2104      	movs	r1, #4
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f006 ff65 	bl	8007d8c <lcd_print>
		lcd_print(2, 5, "2");
 8000ec2:	4a99      	ldr	r2, [pc, #612]	; (8001128 <printTemplate+0x2a4>)
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f006 ff60 	bl	8007d8c <lcd_print>
		lcd_print(2, 6, "3");
 8000ecc:	4a97      	ldr	r2, [pc, #604]	; (800112c <printTemplate+0x2a8>)
 8000ece:	2106      	movs	r1, #6
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f006 ff5b 	bl	8007d8c <lcd_print>
		lcd_print(2, 7, "4");
 8000ed6:	4a96      	ldr	r2, [pc, #600]	; (8001130 <printTemplate+0x2ac>)
 8000ed8:	2107      	movs	r1, #7
 8000eda:	2002      	movs	r0, #2
 8000edc:	f006 ff56 	bl	8007d8c <lcd_print>
		lcd_print(2, 10, "5");
 8000ee0:	4a94      	ldr	r2, [pc, #592]	; (8001134 <printTemplate+0x2b0>)
 8000ee2:	210a      	movs	r1, #10
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f006 ff51 	bl	8007d8c <lcd_print>
		lcd_print(2, 11, "6");
 8000eea:	4a93      	ldr	r2, [pc, #588]	; (8001138 <printTemplate+0x2b4>)
 8000eec:	210b      	movs	r1, #11
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f006 ff4c 	bl	8007d8c <lcd_print>
		lcd_print(2, 12, "7");
 8000ef4:	4a91      	ldr	r2, [pc, #580]	; (800113c <printTemplate+0x2b8>)
 8000ef6:	210c      	movs	r1, #12
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f006 ff47 	bl	8007d8c <lcd_print>
		lcd_print(2, 13, "8");
 8000efe:	4a90      	ldr	r2, [pc, #576]	; (8001140 <printTemplate+0x2bc>)
 8000f00:	210d      	movs	r1, #13
 8000f02:	2002      	movs	r0, #2
 8000f04:	f006 ff42 	bl	8007d8c <lcd_print>
		lcd_print(2, 14, "9");
 8000f08:	4a8e      	ldr	r2, [pc, #568]	; (8001144 <printTemplate+0x2c0>)
 8000f0a:	210e      	movs	r1, #14
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f006 ff3d 	bl	8007d8c <lcd_print>
		lcd_print(1, 5, machineID);
 8000f12:	4a8d      	ldr	r2, [pc, #564]	; (8001148 <printTemplate+0x2c4>)
 8000f14:	2105      	movs	r1, #5
 8000f16:	2001      	movs	r0, #1
 8000f18:	f006 ff38 	bl	8007d8c <lcd_print>
		lcd_gotoxy(2, 3);
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f006 ff15 	bl	8007d4e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f24:	e0f5      	b.n	8001112 <printTemplate+0x28e>
	} else if(type == 2) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d178      	bne.n	800101e <printTemplate+0x19a>
		if(page == 1) {
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d114      	bne.n	8000f5c <printTemplate+0xd8>
			lcd_clear();
 8000f32:	f006 ff57 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 8000f36:	2064      	movs	r0, #100	; 0x64
 8000f38:	f007 fc7e 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f3c:	4a83      	ldr	r2, [pc, #524]	; (800114c <printTemplate+0x2c8>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2001      	movs	r0, #1
 8000f42:	f006 ff23 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f46:	4a82      	ldr	r2, [pc, #520]	; (8001150 <printTemplate+0x2cc>)
 8000f48:	2107      	movs	r1, #7
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f006 ff1e 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f50:	4a80      	ldr	r2, [pc, #512]	; (8001154 <printTemplate+0x2d0>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	2002      	movs	r0, #2
 8000f56:	f006 ff19 	bl	8007d8c <lcd_print>
}
 8000f5a:	e0da      	b.n	8001112 <printTemplate+0x28e>
		} else if(page == 2) {
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d114      	bne.n	8000f8c <printTemplate+0x108>
			lcd_clear();
 8000f62:	f006 ff3f 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f007 fc66 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f6c:	4a77      	ldr	r2, [pc, #476]	; (800114c <printTemplate+0x2c8>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f006 ff0b 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f76:	4a76      	ldr	r2, [pc, #472]	; (8001150 <printTemplate+0x2cc>)
 8000f78:	2107      	movs	r1, #7
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 ff06 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f80:	4a75      	ldr	r2, [pc, #468]	; (8001158 <printTemplate+0x2d4>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2002      	movs	r0, #2
 8000f86:	f006 ff01 	bl	8007d8c <lcd_print>
}
 8000f8a:	e0c2      	b.n	8001112 <printTemplate+0x28e>
		} else if(page == 3) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d114      	bne.n	8000fbc <printTemplate+0x138>
			lcd_clear();
 8000f92:	f006 ff27 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f007 fc4e 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f9c:	4a6b      	ldr	r2, [pc, #428]	; (800114c <printTemplate+0x2c8>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 fef3 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fa6:	4a6a      	ldr	r2, [pc, #424]	; (8001150 <printTemplate+0x2cc>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2001      	movs	r0, #1
 8000fac:	f006 feee 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fb0:	4a6a      	ldr	r2, [pc, #424]	; (800115c <printTemplate+0x2d8>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f006 fee9 	bl	8007d8c <lcd_print>
}
 8000fba:	e0aa      	b.n	8001112 <printTemplate+0x28e>
		} else if(page == 4) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d114      	bne.n	8000fec <printTemplate+0x168>
			lcd_clear();
 8000fc2:	f006 ff0f 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f007 fc36 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fcc:	4a5f      	ldr	r2, [pc, #380]	; (800114c <printTemplate+0x2c8>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f006 fedb 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fd6:	4a5e      	ldr	r2, [pc, #376]	; (8001150 <printTemplate+0x2cc>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f006 fed6 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fe0:	4a5f      	ldr	r2, [pc, #380]	; (8001160 <printTemplate+0x2dc>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f006 fed1 	bl	8007d8c <lcd_print>
}
 8000fea:	e092      	b.n	8001112 <printTemplate+0x28e>
		} else if(page == 5) {
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	f040 808f 	bne.w	8001112 <printTemplate+0x28e>
			lcd_clear();
 8000ff4:	f006 fef6 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	f007 fc1d 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ffe:	4a53      	ldr	r2, [pc, #332]	; (800114c <printTemplate+0x2c8>)
 8001000:	2101      	movs	r1, #1
 8001002:	2001      	movs	r0, #1
 8001004:	f006 fec2 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001008:	4a51      	ldr	r2, [pc, #324]	; (8001150 <printTemplate+0x2cc>)
 800100a:	2107      	movs	r1, #7
 800100c:	2001      	movs	r0, #1
 800100e:	f006 febd 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001012:	4a54      	ldr	r2, [pc, #336]	; (8001164 <printTemplate+0x2e0>)
 8001014:	2101      	movs	r1, #1
 8001016:	2002      	movs	r0, #2
 8001018:	f006 feb8 	bl	8007d8c <lcd_print>
}
 800101c:	e079      	b.n	8001112 <printTemplate+0x28e>
	} else if(type == 3) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d176      	bne.n	8001112 <printTemplate+0x28e>
		if(page == 1) {
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d114      	bne.n	8001054 <printTemplate+0x1d0>
			lcd_clear();
 800102a:	f006 fedb 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f007 fc02 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001034:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <printTemplate+0x2e4>)
 8001036:	2101      	movs	r1, #1
 8001038:	2001      	movs	r0, #1
 800103a:	f006 fea7 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800103e:	4a4b      	ldr	r2, [pc, #300]	; (800116c <printTemplate+0x2e8>)
 8001040:	2107      	movs	r1, #7
 8001042:	2001      	movs	r0, #1
 8001044:	f006 fea2 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001048:	4a42      	ldr	r2, [pc, #264]	; (8001154 <printTemplate+0x2d0>)
 800104a:	2101      	movs	r1, #1
 800104c:	2002      	movs	r0, #2
 800104e:	f006 fe9d 	bl	8007d8c <lcd_print>
}
 8001052:	e05e      	b.n	8001112 <printTemplate+0x28e>
		} else if(page == 2) {
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d114      	bne.n	8001084 <printTemplate+0x200>
			lcd_clear();
 800105a:	f006 fec3 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f007 fbea 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001064:	4a40      	ldr	r2, [pc, #256]	; (8001168 <printTemplate+0x2e4>)
 8001066:	2101      	movs	r1, #1
 8001068:	2001      	movs	r0, #1
 800106a:	f006 fe8f 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800106e:	4a3f      	ldr	r2, [pc, #252]	; (800116c <printTemplate+0x2e8>)
 8001070:	2107      	movs	r1, #7
 8001072:	2001      	movs	r0, #1
 8001074:	f006 fe8a 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001078:	4a37      	ldr	r2, [pc, #220]	; (8001158 <printTemplate+0x2d4>)
 800107a:	2101      	movs	r1, #1
 800107c:	2002      	movs	r0, #2
 800107e:	f006 fe85 	bl	8007d8c <lcd_print>
}
 8001082:	e046      	b.n	8001112 <printTemplate+0x28e>
		} else if(page == 3) {
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d114      	bne.n	80010b4 <printTemplate+0x230>
			lcd_clear();
 800108a:	f006 feab 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f007 fbd2 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001094:	4a34      	ldr	r2, [pc, #208]	; (8001168 <printTemplate+0x2e4>)
 8001096:	2101      	movs	r1, #1
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fe77 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800109e:	4a33      	ldr	r2, [pc, #204]	; (800116c <printTemplate+0x2e8>)
 80010a0:	2107      	movs	r1, #7
 80010a2:	2001      	movs	r0, #1
 80010a4:	f006 fe72 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80010a8:	4a2c      	ldr	r2, [pc, #176]	; (800115c <printTemplate+0x2d8>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	2002      	movs	r0, #2
 80010ae:	f006 fe6d 	bl	8007d8c <lcd_print>
}
 80010b2:	e02e      	b.n	8001112 <printTemplate+0x28e>
		} else if(page == 4) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d114      	bne.n	80010e4 <printTemplate+0x260>
			lcd_clear();
 80010ba:	f006 fe93 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f007 fbba 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c4:	4a28      	ldr	r2, [pc, #160]	; (8001168 <printTemplate+0x2e4>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	2001      	movs	r0, #1
 80010ca:	f006 fe5f 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010ce:	4a27      	ldr	r2, [pc, #156]	; (800116c <printTemplate+0x2e8>)
 80010d0:	2107      	movs	r1, #7
 80010d2:	2001      	movs	r0, #1
 80010d4:	f006 fe5a 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <printTemplate+0x2dc>)
 80010da:	2101      	movs	r1, #1
 80010dc:	2002      	movs	r0, #2
 80010de:	f006 fe55 	bl	8007d8c <lcd_print>
}
 80010e2:	e016      	b.n	8001112 <printTemplate+0x28e>
		} else if(page == 5) {
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d113      	bne.n	8001112 <printTemplate+0x28e>
			lcd_clear();
 80010ea:	f006 fe7b 	bl	8007de4 <lcd_clear>
			HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f007 fba2 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <printTemplate+0x2e4>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	2001      	movs	r0, #1
 80010fa:	f006 fe47 	bl	8007d8c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <printTemplate+0x2e8>)
 8001100:	2107      	movs	r1, #7
 8001102:	2001      	movs	r0, #1
 8001104:	f006 fe42 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <printTemplate+0x2e0>)
 800110a:	2101      	movs	r1, #1
 800110c:	2002      	movs	r0, #2
 800110e:	f006 fe3d 	bl	8007d8c <lcd_print>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	0800d034 	.word	0x0800d034
 8001120:	0800d03c 	.word	0x0800d03c
 8001124:	0800d040 	.word	0x0800d040
 8001128:	0800d044 	.word	0x0800d044
 800112c:	0800d048 	.word	0x0800d048
 8001130:	0800d04c 	.word	0x0800d04c
 8001134:	0800d050 	.word	0x0800d050
 8001138:	0800d054 	.word	0x0800d054
 800113c:	0800d058 	.word	0x0800d058
 8001140:	0800d05c 	.word	0x0800d05c
 8001144:	0800d060 	.word	0x0800d060
 8001148:	200001a0 	.word	0x200001a0
 800114c:	0800d064 	.word	0x0800d064
 8001150:	200001ac 	.word	0x200001ac
 8001154:	0800d06c 	.word	0x0800d06c
 8001158:	0800d080 	.word	0x0800d080
 800115c:	0800d094 	.word	0x0800d094
 8001160:	0800d0a8 	.word	0x0800d0a8
 8001164:	0800d0bc 	.word	0x0800d0bc
 8001168:	0800d0d0 	.word	0x0800d0d0
 800116c:	200001c0 	.word	0x200001c0

08001170 <checkSlideVal>:

int checkSlideVal(int state) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d111      	bne.n	80011a2 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800117e:	2101      	movs	r1, #1
 8001180:	4813      	ldr	r0, [pc, #76]	; (80011d0 <checkSlideVal+0x60>)
 8001182:	f008 f929 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <checkSlideVal+0x20>
			return 34;
 800118c:	2322      	movs	r3, #34	; 0x22
 800118e:	e01b      	b.n	80011c8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001190:	2108      	movs	r1, #8
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <checkSlideVal+0x64>)
 8001194:	f008 f920 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d113      	bne.n	80011c6 <checkSlideVal+0x56>
			return 32;
 800119e:	2320      	movs	r3, #32
 80011a0:	e012      	b.n	80011c8 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011a2:	2101      	movs	r1, #1
 80011a4:	480a      	ldr	r0, [pc, #40]	; (80011d0 <checkSlideVal+0x60>)
 80011a6:	f008 f917 	bl	80093d8 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <checkSlideVal+0x44>
			return 35;
 80011b0:	2323      	movs	r3, #35	; 0x23
 80011b2:	e009      	b.n	80011c8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011b4:	2108      	movs	r1, #8
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <checkSlideVal+0x64>)
 80011b8:	f008 f90e 	bl	80093d8 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <checkSlideVal+0x56>
			return 33;
 80011c2:	2321      	movs	r3, #33	; 0x21
 80011c4:	e000      	b.n	80011c8 <checkSlideVal+0x58>
		}
	}
	return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40010800 	.word	0x40010800
 80011d4:	40011000 	.word	0x40011000

080011d8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f7ff f81c 	bl	8000224 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80011f4:	e08a      	b.n	800130c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	f7ff ffba 	bl	8001170 <checkSlideVal>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd07      	ble.n	8001212 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f7ff ffb4 	bl	8001170 <checkSlideVal>
 8001208:	4603      	mov	r3, r0
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b44      	ldr	r3, [pc, #272]	; (8001320 <slideText+0x148>)
 800120e:	701a      	strb	r2, [r3, #0]
			break;
 8001210:	e081      	b.n	8001316 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
 8001216:	e075      	b.n	8001304 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f7ff ffa9 	bl	8001170 <checkSlideVal>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	dd09      	ble.n	8001238 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff ffa3 	bl	8001170 <checkSlideVal>
 800122a:	4603      	mov	r3, r0
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b3c      	ldr	r3, [pc, #240]	; (8001320 <slideText+0x148>)
 8001230:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001236:	e069      	b.n	800130c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	4413      	add	r3, r2
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	e029      	b.n	8001296 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001242:	6838      	ldr	r0, [r7, #0]
 8001244:	f7ff ff94 	bl	8001170 <checkSlideVal>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	dd0b      	ble.n	8001266 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f7ff ff8e 	bl	8001170 <checkSlideVal>
 8001254:	4603      	mov	r3, r0
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <slideText+0x148>)
 800125a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001264:	e01d      	b.n	80012a2 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b2d8      	uxtb	r0, r3
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b2d9      	uxtb	r1, r3
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	f006 fd96 	bl	8007db6 <lcd_print_char>
				HAL_Delay(30);
 800128a:	201e      	movs	r0, #30
 800128c:	f007 fad4 	bl	8008838 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3301      	adds	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	7dfa      	ldrb	r2, [r7, #23]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4413      	add	r3, r2
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	429a      	cmp	r2, r3
 80012a0:	dbcf      	blt.n	8001242 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e023      	b.n	80012f2 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80012aa:	6838      	ldr	r0, [r7, #0]
 80012ac:	f7ff ff60 	bl	8001170 <checkSlideVal>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	dd0b      	ble.n	80012ce <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80012b6:	6838      	ldr	r0, [r7, #0]
 80012b8:	f7ff ff5a 	bl	8001170 <checkSlideVal>
 80012bc:	4603      	mov	r3, r0
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <slideText+0x148>)
 80012c2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80012cc:	e017      	b.n	80012fe <slideText+0x126>
				}
			     if(j >= startPos) {
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	db0a      	blt.n	80012ec <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	b2d1      	uxtb	r1, r2
 80012de:	2220      	movs	r2, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f006 fd68 	bl	8007db6 <lcd_print_char>
			    	 HAL_Delay(30);
 80012e6:	201e      	movs	r0, #30
 80012e8:	f007 faa6 	bl	8008838 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	7dfa      	ldrb	r2, [r7, #23]
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dad5      	bge.n	80012aa <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	3301      	adds	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	6a3a      	ldr	r2, [r7, #32]
 8001308:	429a      	cmp	r2, r3
 800130a:	db85      	blt.n	8001218 <slideText+0x40>
	while(mainLoopVal == 1) {
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	2b01      	cmp	r3, #1
 8001310:	f43f af71 	beq.w	80011f6 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000224 	.word	0x20000224

08001324 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001328:	f3bf 8f4f 	dsb	sy
}
 800132c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <__NVIC_SystemReset+0x24>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001336:	4904      	ldr	r1, [pc, #16]	; (8001348 <__NVIC_SystemReset+0x24>)
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_SystemReset+0x28>)
 800133a:	4313      	orrs	r3, r2
 800133c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800133e:	f3bf 8f4f 	dsb	sy
}
 8001342:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <__NVIC_SystemReset+0x20>
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	05fa0004 	.word	0x05fa0004

08001350 <menu>:

#include "Menu.h"
#include "main.h"
#include "GlobalVariables.h"

void menu() {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001354:	2101      	movs	r1, #1
 8001356:	488f      	ldr	r0, [pc, #572]	; (8001594 <menu+0x244>)
 8001358:	f008 f83e 	bl	80093d8 <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	2b01      	cmp	r3, #1
 8001360:	f040 808e 	bne.w	8001480 <menu+0x130>
 8001364:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <menu+0x248>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f083 0301 	eor.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8086 	beq.w	8001480 <menu+0x130>
		menuSayac = menuSayac+1;
 8001374:	4b89      	ldr	r3, [pc, #548]	; (800159c <menu+0x24c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b87      	ldr	r3, [pc, #540]	; (800159c <menu+0x24c>)
 800137e:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001380:	4b86      	ldr	r3, [pc, #536]	; (800159c <menu+0x24c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b24      	cmp	r3, #36	; 0x24
 8001386:	d102      	bne.n	800138e <menu+0x3e>
			menuSayac = 1;
 8001388:	4b84      	ldr	r3, [pc, #528]	; (800159c <menu+0x24c>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800138e:	4b83      	ldr	r3, [pc, #524]	; (800159c <menu+0x24c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b12      	cmp	r3, #18
 8001394:	d106      	bne.n	80013a4 <menu+0x54>
 8001396:	4b82      	ldr	r3, [pc, #520]	; (80015a0 <menu+0x250>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <menu+0x54>
			menuSayac = 21;
 800139e:	4b7f      	ldr	r3, [pc, #508]	; (800159c <menu+0x24c>)
 80013a0:	2215      	movs	r2, #21
 80013a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80013a4:	4b7d      	ldr	r3, [pc, #500]	; (800159c <menu+0x24c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d106      	bne.n	80013ba <menu+0x6a>
 80013ac:	4b7d      	ldr	r3, [pc, #500]	; (80015a4 <menu+0x254>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <menu+0x6a>
			menuSayac = 16;
 80013b4:	4b79      	ldr	r3, [pc, #484]	; (800159c <menu+0x24c>)
 80013b6:	2210      	movs	r2, #16
 80013b8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80013ba:	4b78      	ldr	r3, [pc, #480]	; (800159c <menu+0x24c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b0d      	cmp	r3, #13
 80013c0:	d106      	bne.n	80013d0 <menu+0x80>
 80013c2:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <menu+0x254>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d102      	bne.n	80013d0 <menu+0x80>
			menuSayac = 16;
 80013ca:	4b74      	ldr	r3, [pc, #464]	; (800159c <menu+0x24c>)
 80013cc:	2210      	movs	r2, #16
 80013ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80013d0:	4b72      	ldr	r3, [pc, #456]	; (800159c <menu+0x24c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d106      	bne.n	80013e6 <menu+0x96>
 80013d8:	4b72      	ldr	r3, [pc, #456]	; (80015a4 <menu+0x254>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d102      	bne.n	80013e6 <menu+0x96>
			menuSayac = 13;
 80013e0:	4b6e      	ldr	r3, [pc, #440]	; (800159c <menu+0x24c>)
 80013e2:	220d      	movs	r2, #13
 80013e4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013e6:	4b6d      	ldr	r3, [pc, #436]	; (800159c <menu+0x24c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b0a      	cmp	r3, #10
 80013ec:	d10a      	bne.n	8001404 <menu+0xb4>
 80013ee:	4b6e      	ldr	r3, [pc, #440]	; (80015a8 <menu+0x258>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d003      	beq.n	80013fe <menu+0xae>
 80013f6:	4b6c      	ldr	r3, [pc, #432]	; (80015a8 <menu+0x258>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d102      	bne.n	8001404 <menu+0xb4>
			menuSayac = 11;
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <menu+0x24c>)
 8001400:	220b      	movs	r2, #11
 8001402:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001404:	4b65      	ldr	r3, [pc, #404]	; (800159c <menu+0x24c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d10e      	bne.n	800142a <menu+0xda>
 800140c:	4b67      	ldr	r3, [pc, #412]	; (80015ac <menu+0x25c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d003      	beq.n	800141c <menu+0xcc>
 8001414:	4b65      	ldr	r3, [pc, #404]	; (80015ac <menu+0x25c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d106      	bne.n	800142a <menu+0xda>
 800141c:	4b61      	ldr	r3, [pc, #388]	; (80015a4 <menu+0x254>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d102      	bne.n	800142a <menu+0xda>
			menuSayac = 16;
 8001424:	4b5d      	ldr	r3, [pc, #372]	; (800159c <menu+0x24c>)
 8001426:	2210      	movs	r2, #16
 8001428:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800142a:	4b5c      	ldr	r3, [pc, #368]	; (800159c <menu+0x24c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b0c      	cmp	r3, #12
 8001430:	d10e      	bne.n	8001450 <menu+0x100>
 8001432:	4b5e      	ldr	r3, [pc, #376]	; (80015ac <menu+0x25c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d003      	beq.n	8001442 <menu+0xf2>
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <menu+0x25c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d106      	bne.n	8001450 <menu+0x100>
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <menu+0x254>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d102      	bne.n	8001450 <menu+0x100>
			menuSayac = 13;
 800144a:	4b54      	ldr	r3, [pc, #336]	; (800159c <menu+0x24c>)
 800144c:	220d      	movs	r2, #13
 800144e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001450:	4b52      	ldr	r3, [pc, #328]	; (800159c <menu+0x24c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d106      	bne.n	8001466 <menu+0x116>
 8001458:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <menu+0x260>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d102      	bne.n	8001466 <menu+0x116>
			menuSayac = 16;
 8001460:	4b4e      	ldr	r3, [pc, #312]	; (800159c <menu+0x24c>)
 8001462:	2210      	movs	r2, #16
 8001464:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001466:	4b4d      	ldr	r3, [pc, #308]	; (800159c <menu+0x24c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b18      	cmp	r3, #24
 800146c:	d106      	bne.n	800147c <menu+0x12c>
 800146e:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <menu+0x250>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <menu+0x12c>
			menuSayac = 26;
 8001476:	4b49      	ldr	r3, [pc, #292]	; (800159c <menu+0x24c>)
 8001478:	221a      	movs	r2, #26
 800147a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800147c:	f003 fb12 	bl	8004aa4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001480:	2108      	movs	r1, #8
 8001482:	484c      	ldr	r0, [pc, #304]	; (80015b4 <menu+0x264>)
 8001484:	f007 ffa8 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d175      	bne.n	800157a <menu+0x22a>
 800148e:	4b42      	ldr	r3, [pc, #264]	; (8001598 <menu+0x248>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	f083 0301 	eor.w	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d06e      	beq.n	800157a <menu+0x22a>
		if (menuSayac <= 1) {
 800149c:	4b3f      	ldr	r3, [pc, #252]	; (800159c <menu+0x24c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d802      	bhi.n	80014aa <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80014a4:	4b3d      	ldr	r3, [pc, #244]	; (800159c <menu+0x24c>)
 80014a6:	2224      	movs	r2, #36	; 0x24
 80014a8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <menu+0x24c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <menu+0x24c>)
 80014b4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80014b6:	4b39      	ldr	r3, [pc, #228]	; (800159c <menu+0x24c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b14      	cmp	r3, #20
 80014bc:	d106      	bne.n	80014cc <menu+0x17c>
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <menu+0x250>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <menu+0x17c>
			menuSayac = 17;
 80014c6:	4b35      	ldr	r3, [pc, #212]	; (800159c <menu+0x24c>)
 80014c8:	2211      	movs	r2, #17
 80014ca:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <menu+0x24c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d106      	bne.n	80014e2 <menu+0x192>
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <menu+0x254>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <menu+0x192>
			menuSayac = 7;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	; (800159c <menu+0x24c>)
 80014de:	2207      	movs	r2, #7
 80014e0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <menu+0x24c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	d106      	bne.n	80014f8 <menu+0x1a8>
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <menu+0x254>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d102      	bne.n	80014f8 <menu+0x1a8>
			menuSayac = 12;
 80014f2:	4b2a      	ldr	r3, [pc, #168]	; (800159c <menu+0x24c>)
 80014f4:	220c      	movs	r2, #12
 80014f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <menu+0x24c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d106      	bne.n	800150e <menu+0x1be>
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <menu+0x254>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d102      	bne.n	800150e <menu+0x1be>
			menuSayac = 8;
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <menu+0x24c>)
 800150a:	2208      	movs	r2, #8
 800150c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <menu+0x24c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d10a      	bne.n	800152c <menu+0x1dc>
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <menu+0x258>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d003      	beq.n	8001526 <menu+0x1d6>
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <menu+0x258>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d102      	bne.n	800152c <menu+0x1dc>
			menuSayac = 9;
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <menu+0x24c>)
 8001528:	2209      	movs	r2, #9
 800152a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <menu+0x24c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d10a      	bne.n	800154a <menu+0x1fa>
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <menu+0x25c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d003      	beq.n	8001544 <menu+0x1f4>
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <menu+0x25c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d102      	bne.n	800154a <menu+0x1fa>
			menuSayac = 11;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <menu+0x24c>)
 8001546:	220b      	movs	r2, #11
 8001548:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <menu+0x24c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	d106      	bne.n	8001560 <menu+0x210>
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <menu+0x260>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d102      	bne.n	8001560 <menu+0x210>
			menuSayac = 14;
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <menu+0x24c>)
 800155c:	220e      	movs	r2, #14
 800155e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <menu+0x24c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b19      	cmp	r3, #25
 8001566:	d106      	bne.n	8001576 <menu+0x226>
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <menu+0x250>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <menu+0x226>
			menuSayac = 23;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <menu+0x24c>)
 8001572:	2217      	movs	r2, #23
 8001574:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001576:	f003 fa95 	bl	8004aa4 <bekle>
	}

	if (menuSayac == 0) {
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <menu+0x24c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d134      	bne.n	80015ec <menu+0x29c>
		if(dilSecim == 0) {
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <menu+0x268>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d122      	bne.n	80015d0 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <menu+0x26c>)
 800158c:	2101      	movs	r1, #1
 800158e:	2001      	movs	r0, #1
 8001590:	e016      	b.n	80015c0 <menu+0x270>
 8001592:	bf00      	nop
 8001594:	40010800 	.word	0x40010800
 8001598:	20000253 	.word	0x20000253
 800159c:	20000224 	.word	0x20000224
 80015a0:	20000233 	.word	0x20000233
 80015a4:	2000022c 	.word	0x2000022c
 80015a8:	2000022d 	.word	0x2000022d
 80015ac:	2000022e 	.word	0x2000022e
 80015b0:	2000022f 	.word	0x2000022f
 80015b4:	40011000 	.word	0x40011000
 80015b8:	20000245 	.word	0x20000245
 80015bc:	0800d0d8 	.word	0x0800d0d8
 80015c0:	f006 fbe4 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80015c4:	4a94      	ldr	r2, [pc, #592]	; (8001818 <menu+0x4c8>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	2002      	movs	r0, #2
 80015ca:	f006 fbdf 	bl	8007d8c <lcd_print>
 80015ce:	e00d      	b.n	80015ec <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80015d0:	4b92      	ldr	r3, [pc, #584]	; (800181c <menu+0x4cc>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d109      	bne.n	80015ec <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80015d8:	4a91      	ldr	r2, [pc, #580]	; (8001820 <menu+0x4d0>)
 80015da:	2101      	movs	r1, #1
 80015dc:	2001      	movs	r0, #1
 80015de:	f006 fbd5 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80015e2:	4a90      	ldr	r2, [pc, #576]	; (8001824 <menu+0x4d4>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	2002      	movs	r0, #2
 80015e8:	f006 fbd0 	bl	8007d8c <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80015ec:	4b8e      	ldr	r3, [pc, #568]	; (8001828 <menu+0x4d8>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	f040 82b5 	bne.w	8001b60 <menu+0x810>
		if(dilSecim == 0) {
 80015f6:	4b89      	ldr	r3, [pc, #548]	; (800181c <menu+0x4cc>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80015fe:	4a8b      	ldr	r2, [pc, #556]	; (800182c <menu+0x4dc>)
 8001600:	2101      	movs	r1, #1
 8001602:	2001      	movs	r0, #1
 8001604:	f006 fbc2 	bl	8007d8c <lcd_print>
 8001608:	e008      	b.n	800161c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800160a:	4b84      	ldr	r3, [pc, #528]	; (800181c <menu+0x4cc>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d104      	bne.n	800161c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001612:	4a87      	ldr	r2, [pc, #540]	; (8001830 <menu+0x4e0>)
 8001614:	2101      	movs	r1, #1
 8001616:	2001      	movs	r0, #1
 8001618:	f006 fbb8 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800161c:	4b85      	ldr	r3, [pc, #532]	; (8001834 <menu+0x4e4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d123      	bne.n	800166c <menu+0x31c>
			if(dilSecim == 0) {
 8001624:	4b7d      	ldr	r3, [pc, #500]	; (800181c <menu+0x4cc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d105      	bne.n	8001638 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800162c:	4a82      	ldr	r2, [pc, #520]	; (8001838 <menu+0x4e8>)
 800162e:	2101      	movs	r1, #1
 8001630:	2002      	movs	r0, #2
 8001632:	f006 fbab 	bl	8007d8c <lcd_print>
 8001636:	e008      	b.n	800164a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001638:	4b78      	ldr	r3, [pc, #480]	; (800181c <menu+0x4cc>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d104      	bne.n	800164a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001640:	4a7e      	ldr	r2, [pc, #504]	; (800183c <menu+0x4ec>)
 8001642:	2101      	movs	r1, #1
 8001644:	2002      	movs	r0, #2
 8001646:	f006 fba1 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800164a:	4a7d      	ldr	r2, [pc, #500]	; (8001840 <menu+0x4f0>)
 800164c:	210f      	movs	r1, #15
 800164e:	2002      	movs	r0, #2
 8001650:	f006 fb9c 	bl	8007d8c <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001654:	4b7b      	ldr	r3, [pc, #492]	; (8001844 <menu+0x4f4>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	220a      	movs	r2, #10
 800165a:	497b      	ldr	r1, [pc, #492]	; (8001848 <menu+0x4f8>)
 800165c:	4618      	mov	r0, r3
 800165e:	f00a fee7 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 8001662:	4a79      	ldr	r2, [pc, #484]	; (8001848 <menu+0x4f8>)
 8001664:	210e      	movs	r1, #14
 8001666:	2002      	movs	r0, #2
 8001668:	f006 fb90 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800166c:	4b71      	ldr	r3, [pc, #452]	; (8001834 <menu+0x4e4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d123      	bne.n	80016bc <menu+0x36c>
			if(dilSecim == 0) {
 8001674:	4b69      	ldr	r3, [pc, #420]	; (800181c <menu+0x4cc>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d105      	bne.n	8001688 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800167c:	4a73      	ldr	r2, [pc, #460]	; (800184c <menu+0x4fc>)
 800167e:	2101      	movs	r1, #1
 8001680:	2002      	movs	r0, #2
 8001682:	f006 fb83 	bl	8007d8c <lcd_print>
 8001686:	e008      	b.n	800169a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001688:	4b64      	ldr	r3, [pc, #400]	; (800181c <menu+0x4cc>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d104      	bne.n	800169a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001690:	4a6f      	ldr	r2, [pc, #444]	; (8001850 <menu+0x500>)
 8001692:	2101      	movs	r1, #1
 8001694:	2002      	movs	r0, #2
 8001696:	f006 fb79 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800169a:	4a6e      	ldr	r2, [pc, #440]	; (8001854 <menu+0x504>)
 800169c:	210f      	movs	r1, #15
 800169e:	2002      	movs	r0, #2
 80016a0:	f006 fb74 	bl	8007d8c <lcd_print>
			itoa(hataKayit2, snum, 10);
 80016a4:	4b6c      	ldr	r3, [pc, #432]	; (8001858 <menu+0x508>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	220a      	movs	r2, #10
 80016aa:	4967      	ldr	r1, [pc, #412]	; (8001848 <menu+0x4f8>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00a febf 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 80016b2:	4a65      	ldr	r2, [pc, #404]	; (8001848 <menu+0x4f8>)
 80016b4:	210e      	movs	r1, #14
 80016b6:	2002      	movs	r0, #2
 80016b8:	f006 fb68 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80016bc:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <menu+0x4e4>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d123      	bne.n	800170c <menu+0x3bc>
			if(dilSecim == 0) {
 80016c4:	4b55      	ldr	r3, [pc, #340]	; (800181c <menu+0x4cc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80016cc:	4a63      	ldr	r2, [pc, #396]	; (800185c <menu+0x50c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2002      	movs	r0, #2
 80016d2:	f006 fb5b 	bl	8007d8c <lcd_print>
 80016d6:	e008      	b.n	80016ea <menu+0x39a>
			} else if(dilSecim == 1) {
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <menu+0x4cc>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d104      	bne.n	80016ea <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80016e0:	4a5f      	ldr	r2, [pc, #380]	; (8001860 <menu+0x510>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	2002      	movs	r0, #2
 80016e6:	f006 fb51 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016ea:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <menu+0x504>)
 80016ec:	210f      	movs	r1, #15
 80016ee:	2002      	movs	r0, #2
 80016f0:	f006 fb4c 	bl	8007d8c <lcd_print>
			itoa(hataKayit3, snum, 10);
 80016f4:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <menu+0x514>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	220a      	movs	r2, #10
 80016fa:	4953      	ldr	r1, [pc, #332]	; (8001848 <menu+0x4f8>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00a fe97 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 8001702:	4a51      	ldr	r2, [pc, #324]	; (8001848 <menu+0x4f8>)
 8001704:	210e      	movs	r1, #14
 8001706:	2002      	movs	r0, #2
 8001708:	f006 fb40 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800170c:	4b49      	ldr	r3, [pc, #292]	; (8001834 <menu+0x4e4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d123      	bne.n	800175c <menu+0x40c>
			if(dilSecim == 0) {
 8001714:	4b41      	ldr	r3, [pc, #260]	; (800181c <menu+0x4cc>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <menu+0x518>)
 800171e:	2101      	movs	r1, #1
 8001720:	2002      	movs	r0, #2
 8001722:	f006 fb33 	bl	8007d8c <lcd_print>
 8001726:	e008      	b.n	800173a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001728:	4b3c      	ldr	r3, [pc, #240]	; (800181c <menu+0x4cc>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d104      	bne.n	800173a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001730:	4a4e      	ldr	r2, [pc, #312]	; (800186c <menu+0x51c>)
 8001732:	2101      	movs	r1, #1
 8001734:	2002      	movs	r0, #2
 8001736:	f006 fb29 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800173a:	4a46      	ldr	r2, [pc, #280]	; (8001854 <menu+0x504>)
 800173c:	210f      	movs	r1, #15
 800173e:	2002      	movs	r0, #2
 8001740:	f006 fb24 	bl	8007d8c <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001744:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <menu+0x520>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	220a      	movs	r2, #10
 800174a:	493f      	ldr	r1, [pc, #252]	; (8001848 <menu+0x4f8>)
 800174c:	4618      	mov	r0, r3
 800174e:	f00a fe6f 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 8001752:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <menu+0x4f8>)
 8001754:	210e      	movs	r1, #14
 8001756:	2002      	movs	r0, #2
 8001758:	f006 fb18 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <menu+0x4e4>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d123      	bne.n	80017ac <menu+0x45c>
			if(dilSecim == 0) {
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <menu+0x4cc>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800176c:	4a41      	ldr	r2, [pc, #260]	; (8001874 <menu+0x524>)
 800176e:	2101      	movs	r1, #1
 8001770:	2002      	movs	r0, #2
 8001772:	f006 fb0b 	bl	8007d8c <lcd_print>
 8001776:	e008      	b.n	800178a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <menu+0x4cc>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d104      	bne.n	800178a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001780:	4a3d      	ldr	r2, [pc, #244]	; (8001878 <menu+0x528>)
 8001782:	2101      	movs	r1, #1
 8001784:	2002      	movs	r0, #2
 8001786:	f006 fb01 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800178a:	4a32      	ldr	r2, [pc, #200]	; (8001854 <menu+0x504>)
 800178c:	210f      	movs	r1, #15
 800178e:	2002      	movs	r0, #2
 8001790:	f006 fafc 	bl	8007d8c <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001794:	4b39      	ldr	r3, [pc, #228]	; (800187c <menu+0x52c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	220a      	movs	r2, #10
 800179a:	492b      	ldr	r1, [pc, #172]	; (8001848 <menu+0x4f8>)
 800179c:	4618      	mov	r0, r3
 800179e:	f00a fe47 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <menu+0x4f8>)
 80017a4:	210e      	movs	r1, #14
 80017a6:	2002      	movs	r0, #2
 80017a8:	f006 faf0 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <menu+0x4e4>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d123      	bne.n	80017fc <menu+0x4ac>
			if(dilSecim == 0) {
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <menu+0x4cc>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d105      	bne.n	80017c8 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80017bc:	4a30      	ldr	r2, [pc, #192]	; (8001880 <menu+0x530>)
 80017be:	2101      	movs	r1, #1
 80017c0:	2002      	movs	r0, #2
 80017c2:	f006 fae3 	bl	8007d8c <lcd_print>
 80017c6:	e008      	b.n	80017da <menu+0x48a>
			} else if(dilSecim == 1) {
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <menu+0x4cc>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d104      	bne.n	80017da <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80017d0:	4a2c      	ldr	r2, [pc, #176]	; (8001884 <menu+0x534>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	2002      	movs	r0, #2
 80017d6:	f006 fad9 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017da:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <menu+0x504>)
 80017dc:	210f      	movs	r1, #15
 80017de:	2002      	movs	r0, #2
 80017e0:	f006 fad4 	bl	8007d8c <lcd_print>
			itoa(hataKayit6, snum, 10);
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <menu+0x538>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	220a      	movs	r2, #10
 80017ea:	4917      	ldr	r1, [pc, #92]	; (8001848 <menu+0x4f8>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00a fe1f 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <menu+0x4f8>)
 80017f4:	210e      	movs	r1, #14
 80017f6:	2002      	movs	r0, #2
 80017f8:	f006 fac8 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <menu+0x4e4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b06      	cmp	r3, #6
 8001802:	d15f      	bne.n	80018c4 <menu+0x574>
			if(dilSecim == 0) {
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <menu+0x4cc>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d141      	bne.n	8001890 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800180c:	4a1f      	ldr	r2, [pc, #124]	; (800188c <menu+0x53c>)
 800180e:	2101      	movs	r1, #1
 8001810:	2002      	movs	r0, #2
 8001812:	f006 fabb 	bl	8007d8c <lcd_print>
 8001816:	e044      	b.n	80018a2 <menu+0x552>
 8001818:	0800d0ec 	.word	0x0800d0ec
 800181c:	20000245 	.word	0x20000245
 8001820:	0800d100 	.word	0x0800d100
 8001824:	0800d114 	.word	0x0800d114
 8001828:	20000224 	.word	0x20000224
 800182c:	0800d128 	.word	0x0800d128
 8001830:	0800d13c 	.word	0x0800d13c
 8001834:	20000226 	.word	0x20000226
 8001838:	0800d150 	.word	0x0800d150
 800183c:	0800d160 	.word	0x0800d160
 8001840:	0800d170 	.word	0x0800d170
 8001844:	20000246 	.word	0x20000246
 8001848:	20000198 	.word	0x20000198
 800184c:	0800d174 	.word	0x0800d174
 8001850:	0800d184 	.word	0x0800d184
 8001854:	0800d194 	.word	0x0800d194
 8001858:	20000247 	.word	0x20000247
 800185c:	0800d198 	.word	0x0800d198
 8001860:	0800d1a8 	.word	0x0800d1a8
 8001864:	20000248 	.word	0x20000248
 8001868:	0800d1b8 	.word	0x0800d1b8
 800186c:	0800d1c8 	.word	0x0800d1c8
 8001870:	20000249 	.word	0x20000249
 8001874:	0800d1d8 	.word	0x0800d1d8
 8001878:	0800d1e8 	.word	0x0800d1e8
 800187c:	2000024a 	.word	0x2000024a
 8001880:	0800d1f8 	.word	0x0800d1f8
 8001884:	0800d208 	.word	0x0800d208
 8001888:	2000024b 	.word	0x2000024b
 800188c:	0800d218 	.word	0x0800d218
			} else if(dilSecim == 1) {
 8001890:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <menu+0x680>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d104      	bne.n	80018a2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001898:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <menu+0x684>)
 800189a:	2101      	movs	r1, #1
 800189c:	2002      	movs	r0, #2
 800189e:	f006 fa75 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018a2:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <menu+0x688>)
 80018a4:	210f      	movs	r1, #15
 80018a6:	2002      	movs	r0, #2
 80018a8:	f006 fa70 	bl	8007d8c <lcd_print>
			itoa(hataKayit7, snum, 10);
 80018ac:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <menu+0x68c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	220a      	movs	r2, #10
 80018b2:	494b      	ldr	r1, [pc, #300]	; (80019e0 <menu+0x690>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00a fdbb 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 80018ba:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <menu+0x690>)
 80018bc:	210e      	movs	r1, #14
 80018be:	2002      	movs	r0, #2
 80018c0:	f006 fa64 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80018c4:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <menu+0x694>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b07      	cmp	r3, #7
 80018ca:	d123      	bne.n	8001914 <menu+0x5c4>
			if(dilSecim == 0) {
 80018cc:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <menu+0x680>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80018d4:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <menu+0x698>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	2002      	movs	r0, #2
 80018da:	f006 fa57 	bl	8007d8c <lcd_print>
 80018de:	e008      	b.n	80018f2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <menu+0x680>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d104      	bne.n	80018f2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80018e8:	4a40      	ldr	r2, [pc, #256]	; (80019ec <menu+0x69c>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	2002      	movs	r0, #2
 80018ee:	f006 fa4d 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018f2:	4a39      	ldr	r2, [pc, #228]	; (80019d8 <menu+0x688>)
 80018f4:	210f      	movs	r1, #15
 80018f6:	2002      	movs	r0, #2
 80018f8:	f006 fa48 	bl	8007d8c <lcd_print>
			itoa(hataKayit8, snum, 10);
 80018fc:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <menu+0x6a0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	220a      	movs	r2, #10
 8001902:	4937      	ldr	r1, [pc, #220]	; (80019e0 <menu+0x690>)
 8001904:	4618      	mov	r0, r3
 8001906:	f00a fd93 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 800190a:	4a35      	ldr	r2, [pc, #212]	; (80019e0 <menu+0x690>)
 800190c:	210e      	movs	r1, #14
 800190e:	2002      	movs	r0, #2
 8001910:	f006 fa3c 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <menu+0x694>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b08      	cmp	r3, #8
 800191a:	d123      	bne.n	8001964 <menu+0x614>
			if(dilSecim == 0) {
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <menu+0x680>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001924:	4a33      	ldr	r2, [pc, #204]	; (80019f4 <menu+0x6a4>)
 8001926:	2101      	movs	r1, #1
 8001928:	2002      	movs	r0, #2
 800192a:	f006 fa2f 	bl	8007d8c <lcd_print>
 800192e:	e008      	b.n	8001942 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <menu+0x680>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d104      	bne.n	8001942 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001938:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <menu+0x6a8>)
 800193a:	2101      	movs	r1, #1
 800193c:	2002      	movs	r0, #2
 800193e:	f006 fa25 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001942:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <menu+0x688>)
 8001944:	210f      	movs	r1, #15
 8001946:	2002      	movs	r0, #2
 8001948:	f006 fa20 	bl	8007d8c <lcd_print>
			itoa(hataKayit9, snum, 10);
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <menu+0x6ac>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	220a      	movs	r2, #10
 8001952:	4923      	ldr	r1, [pc, #140]	; (80019e0 <menu+0x690>)
 8001954:	4618      	mov	r0, r3
 8001956:	f00a fd6b 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 800195a:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <menu+0x690>)
 800195c:	210e      	movs	r1, #14
 800195e:	2002      	movs	r0, #2
 8001960:	f006 fa14 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <menu+0x694>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b09      	cmp	r3, #9
 800196a:	d123      	bne.n	80019b4 <menu+0x664>
			if(dilSecim == 0) {
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <menu+0x680>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d105      	bne.n	8001980 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <menu+0x6b0>)
 8001976:	2101      	movs	r1, #1
 8001978:	2002      	movs	r0, #2
 800197a:	f006 fa07 	bl	8007d8c <lcd_print>
 800197e:	e008      	b.n	8001992 <menu+0x642>
			} else if(dilSecim == 1) {
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <menu+0x680>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d104      	bne.n	8001992 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001988:	4a1e      	ldr	r2, [pc, #120]	; (8001a04 <menu+0x6b4>)
 800198a:	2101      	movs	r1, #1
 800198c:	2002      	movs	r0, #2
 800198e:	f006 f9fd 	bl	8007d8c <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <menu+0x6b8>)
 8001994:	2110      	movs	r1, #16
 8001996:	2002      	movs	r0, #2
 8001998:	f006 f9f8 	bl	8007d8c <lcd_print>
			itoa(hataKayit10, snum, 10);
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <menu+0x6bc>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	220a      	movs	r2, #10
 80019a2:	490f      	ldr	r1, [pc, #60]	; (80019e0 <menu+0x690>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00a fd43 	bl	800c430 <itoa>
			lcd_print(2, 15, snum);
 80019aa:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <menu+0x690>)
 80019ac:	210f      	movs	r1, #15
 80019ae:	2002      	movs	r0, #2
 80019b0:	f006 f9ec 	bl	8007d8c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <menu+0x694>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b0a      	cmp	r3, #10
 80019ba:	d134      	bne.n	8001a26 <menu+0x6d6>
			if(dilSecim == 0) {
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <menu+0x680>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d127      	bne.n	8001a14 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <menu+0x6c0>)
 80019c6:	2101      	movs	r1, #1
 80019c8:	2002      	movs	r0, #2
 80019ca:	f006 f9df 	bl	8007d8c <lcd_print>
 80019ce:	e02a      	b.n	8001a26 <menu+0x6d6>
 80019d0:	20000245 	.word	0x20000245
 80019d4:	0800d228 	.word	0x0800d228
 80019d8:	0800d194 	.word	0x0800d194
 80019dc:	2000024c 	.word	0x2000024c
 80019e0:	20000198 	.word	0x20000198
 80019e4:	20000226 	.word	0x20000226
 80019e8:	0800d238 	.word	0x0800d238
 80019ec:	0800d248 	.word	0x0800d248
 80019f0:	2000024d 	.word	0x2000024d
 80019f4:	0800d258 	.word	0x0800d258
 80019f8:	0800d268 	.word	0x0800d268
 80019fc:	2000024e 	.word	0x2000024e
 8001a00:	0800d278 	.word	0x0800d278
 8001a04:	0800d288 	.word	0x0800d288
 8001a08:	0800d298 	.word	0x0800d298
 8001a0c:	2000024f 	.word	0x2000024f
 8001a10:	0800d29c 	.word	0x0800d29c
			} else if(dilSecim == 1) {
 8001a14:	4b82      	ldr	r3, [pc, #520]	; (8001c20 <menu+0x8d0>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d104      	bne.n	8001a26 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001a1c:	4a81      	ldr	r2, [pc, #516]	; (8001c24 <menu+0x8d4>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2002      	movs	r0, #2
 8001a22:	f006 f9b3 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a26:	2102      	movs	r1, #2
 8001a28:	487f      	ldr	r0, [pc, #508]	; (8001c28 <menu+0x8d8>)
 8001a2a:	f007 fcd5 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d119      	bne.n	8001a68 <menu+0x718>
 8001a34:	4b7d      	ldr	r3, [pc, #500]	; (8001c2c <menu+0x8dc>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	f083 0301 	eor.w	r3, r3, #1
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d012      	beq.n	8001a68 <menu+0x718>
 8001a42:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <menu+0x8e0>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10e      	bne.n	8001a68 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a4a:	4b7a      	ldr	r3, [pc, #488]	; (8001c34 <menu+0x8e4>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <menu+0x8e4>)
 8001a54:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a56:	4b77      	ldr	r3, [pc, #476]	; (8001c34 <menu+0x8e4>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d902      	bls.n	8001a64 <menu+0x714>
				hataGostermeSirasi = 0;
 8001a5e:	4b75      	ldr	r3, [pc, #468]	; (8001c34 <menu+0x8e4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a64:	f003 f81e 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a68:	2104      	movs	r1, #4
 8001a6a:	486f      	ldr	r0, [pc, #444]	; (8001c28 <menu+0x8d8>)
 8001a6c:	f007 fcb4 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d119      	bne.n	8001aaa <menu+0x75a>
 8001a76:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <menu+0x8dc>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	f083 0301 	eor.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d012      	beq.n	8001aaa <menu+0x75a>
 8001a84:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <menu+0x8e0>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10e      	bne.n	8001aaa <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a8c:	4b69      	ldr	r3, [pc, #420]	; (8001c34 <menu+0x8e4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <menu+0x8e4>)
 8001a96:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a98:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <menu+0x8e4>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b0b      	cmp	r3, #11
 8001a9e:	d902      	bls.n	8001aa6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001aa0:	4b64      	ldr	r3, [pc, #400]	; (8001c34 <menu+0x8e4>)
 8001aa2:	220a      	movs	r2, #10
 8001aa4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001aa6:	f002 fffd 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001aaa:	2108      	movs	r1, #8
 8001aac:	485e      	ldr	r0, [pc, #376]	; (8001c28 <menu+0x8d8>)
 8001aae:	f007 fc93 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d153      	bne.n	8001b60 <menu+0x810>
 8001ab8:	4b5c      	ldr	r3, [pc, #368]	; (8001c2c <menu+0x8dc>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	f083 0301 	eor.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d04c      	beq.n	8001b60 <menu+0x810>
 8001ac6:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <menu+0x8e4>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	d148      	bne.n	8001b60 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001ace:	4b5a      	ldr	r3, [pc, #360]	; (8001c38 <menu+0x8e8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <menu+0x8ec>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001adc:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <menu+0x8f0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	4b56      	ldr	r3, [pc, #344]	; (8001c3c <menu+0x8ec>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001aea:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <menu+0x8f4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <menu+0x8ec>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <menu+0x8f8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <menu+0x8ec>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001b06:	4b51      	ldr	r3, [pc, #324]	; (8001c4c <menu+0x8fc>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <menu+0x8ec>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001b14:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <menu+0x900>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <menu+0x8ec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001b22:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <menu+0x904>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <menu+0x8ec>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b30:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <menu+0x908>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <menu+0x8ec>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <menu+0x90c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <menu+0x8ec>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001b4c:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <menu+0x910>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <menu+0x8ec>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001b5a:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <menu+0x914>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001b60:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <menu+0x918>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	f040 80fc 	bne.w	8001d62 <menu+0xa12>
		if(dilSecim == 0) {
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <menu+0x8d0>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001b72:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <menu+0x91c>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	2001      	movs	r0, #1
 8001b78:	f006 f908 	bl	8007d8c <lcd_print>
 8001b7c:	e008      	b.n	8001b90 <menu+0x840>
		} else if(dilSecim == 1) {
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <menu+0x8d0>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d104      	bne.n	8001b90 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001b86:	4a3a      	ldr	r2, [pc, #232]	; (8001c70 <menu+0x920>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f006 f8fe 	bl	8007d8c <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <menu+0x8e0>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d003      	beq.n	8001ba0 <menu+0x850>
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <menu+0x8e0>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d112      	bne.n	8001bc6 <menu+0x876>
			if(dilSecim == 0) {
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <menu+0x8d0>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d105      	bne.n	8001bb4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001ba8:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <menu+0x924>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	2002      	movs	r0, #2
 8001bae:	f006 f8ed 	bl	8007d8c <lcd_print>
 8001bb2:	e008      	b.n	8001bc6 <menu+0x876>
			} else if(dilSecim == 1) {
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <menu+0x8d0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d104      	bne.n	8001bc6 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001bbc:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <menu+0x928>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f006 f8e3 	bl	8007d8c <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <menu+0x92c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d116      	bne.n	8001bfc <menu+0x8ac>
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <menu+0x8e0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d112      	bne.n	8001bfc <menu+0x8ac>
			if(dilSecim == 0) {
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <menu+0x8d0>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001bde:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <menu+0x930>)
 8001be0:	2101      	movs	r1, #1
 8001be2:	2002      	movs	r0, #2
 8001be4:	f006 f8d2 	bl	8007d8c <lcd_print>
 8001be8:	e008      	b.n	8001bfc <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <menu+0x8d0>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d104      	bne.n	8001bfc <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001bf2:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <menu+0x934>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f006 f8c8 	bl	8007d8c <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <menu+0x92c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d14c      	bne.n	8001c9e <menu+0x94e>
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <menu+0x8e0>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d148      	bne.n	8001c9e <menu+0x94e>
			if(dilSecim == 0) {
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <menu+0x8d0>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d13b      	bne.n	8001c8c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001c14:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <menu+0x938>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f006 f8b7 	bl	8007d8c <lcd_print>
 8001c1e:	e03e      	b.n	8001c9e <menu+0x94e>
 8001c20:	20000245 	.word	0x20000245
 8001c24:	0800d2b0 	.word	0x0800d2b0
 8001c28:	40010800 	.word	0x40010800
 8001c2c:	20000253 	.word	0x20000253
 8001c30:	20000233 	.word	0x20000233
 8001c34:	20000226 	.word	0x20000226
 8001c38:	20000246 	.word	0x20000246
 8001c3c:	20000128 	.word	0x20000128
 8001c40:	20000247 	.word	0x20000247
 8001c44:	20000248 	.word	0x20000248
 8001c48:	20000249 	.word	0x20000249
 8001c4c:	2000024a 	.word	0x2000024a
 8001c50:	2000024b 	.word	0x2000024b
 8001c54:	2000024c 	.word	0x2000024c
 8001c58:	2000024d 	.word	0x2000024d
 8001c5c:	2000024e 	.word	0x2000024e
 8001c60:	2000024f 	.word	0x2000024f
 8001c64:	20000250 	.word	0x20000250
 8001c68:	20000224 	.word	0x20000224
 8001c6c:	0800d2c4 	.word	0x0800d2c4
 8001c70:	0800d2d8 	.word	0x0800d2d8
 8001c74:	0800d2ec 	.word	0x0800d2ec
 8001c78:	0800d300 	.word	0x0800d300
 8001c7c:	20000225 	.word	0x20000225
 8001c80:	0800d314 	.word	0x0800d314
 8001c84:	0800d324 	.word	0x0800d324
 8001c88:	0800d334 	.word	0x0800d334
			} else if(dilSecim == 1) {
 8001c8c:	4b98      	ldr	r3, [pc, #608]	; (8001ef0 <menu+0xba0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d104      	bne.n	8001c9e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001c94:	4a97      	ldr	r2, [pc, #604]	; (8001ef4 <menu+0xba4>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f006 f877 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	4895      	ldr	r0, [pc, #596]	; (8001ef8 <menu+0xba8>)
 8001ca2:	f007 fb99 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d119      	bne.n	8001ce0 <menu+0x990>
 8001cac:	4b93      	ldr	r3, [pc, #588]	; (8001efc <menu+0xbac>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d012      	beq.n	8001ce0 <menu+0x990>
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <menu+0xbb0>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10e      	bne.n	8001ce0 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001cc2:	4b90      	ldr	r3, [pc, #576]	; (8001f04 <menu+0xbb4>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <menu+0xbb4>)
 8001ccc:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001cce:	4b8d      	ldr	r3, [pc, #564]	; (8001f04 <menu+0xbb4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d902      	bls.n	8001cdc <menu+0x98c>
				calismaSekli = 0;
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <menu+0xbb4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cdc:	f002 fee2 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	4885      	ldr	r0, [pc, #532]	; (8001ef8 <menu+0xba8>)
 8001ce4:	f007 fb78 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d119      	bne.n	8001d22 <menu+0x9d2>
 8001cee:	4b83      	ldr	r3, [pc, #524]	; (8001efc <menu+0xbac>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d012      	beq.n	8001d22 <menu+0x9d2>
 8001cfc:	4b80      	ldr	r3, [pc, #512]	; (8001f00 <menu+0xbb0>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10e      	bne.n	8001d22 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001d04:	4b7f      	ldr	r3, [pc, #508]	; (8001f04 <menu+0xbb4>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b7d      	ldr	r3, [pc, #500]	; (8001f04 <menu+0xbb4>)
 8001d0e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d10:	4b7c      	ldr	r3, [pc, #496]	; (8001f04 <menu+0xbb4>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <menu+0x9ce>
	    		calismaSekli = 1;
 8001d18:	4b7a      	ldr	r3, [pc, #488]	; (8001f04 <menu+0xbb4>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d1e:	f002 fec1 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d22:	2108      	movs	r1, #8
 8001d24:	4874      	ldr	r0, [pc, #464]	; (8001ef8 <menu+0xba8>)
 8001d26:	f007 fb57 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d118      	bne.n	8001d62 <menu+0xa12>
 8001d30:	4b72      	ldr	r3, [pc, #456]	; (8001efc <menu+0xbac>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d011      	beq.n	8001d62 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d3e:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <menu+0xbb4>)
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <menu+0xbb8>)
 8001d44:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d46:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <menu+0xbb4>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d106      	bne.n	8001d5c <menu+0xa0c>
				altLimit = 1;
 8001d4e:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <menu+0xbbc>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d54:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <menu+0xbbc>)
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b6b      	ldr	r3, [pc, #428]	; (8001f08 <menu+0xbb8>)
 8001d5a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d5c:	4b6c      	ldr	r3, [pc, #432]	; (8001f10 <menu+0xbc0>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d62:	4b6c      	ldr	r3, [pc, #432]	; (8001f14 <menu+0xbc4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	f040 8083 	bne.w	8001e72 <menu+0xb22>
		if(dilSecim == 0) {
 8001d6c:	4b60      	ldr	r3, [pc, #384]	; (8001ef0 <menu+0xba0>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001d74:	4a68      	ldr	r2, [pc, #416]	; (8001f18 <menu+0xbc8>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f006 f807 	bl	8007d8c <lcd_print>
 8001d7e:	e008      	b.n	8001d92 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001d80:	4b5b      	ldr	r3, [pc, #364]	; (8001ef0 <menu+0xba0>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d104      	bne.n	8001d92 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001d88:	4a64      	ldr	r2, [pc, #400]	; (8001f1c <menu+0xbcc>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f005 fffd 	bl	8007d8c <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001d92:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <menu+0xbd0>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d113      	bne.n	8001dc2 <menu+0xa72>
			if(dilSecim == 0) {
 8001d9a:	4b55      	ldr	r3, [pc, #340]	; (8001ef0 <menu+0xba0>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001da2:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <menu+0xbd4>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	2002      	movs	r0, #2
 8001da8:	f005 fff0 	bl	8007d8c <lcd_print>
 8001dac:	e012      	b.n	8001dd4 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001dae:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <menu+0xba0>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d10e      	bne.n	8001dd4 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001db6:	4a5c      	ldr	r2, [pc, #368]	; (8001f28 <menu+0xbd8>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f005 ffe6 	bl	8007d8c <lcd_print>
 8001dc0:	e008      	b.n	8001dd4 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001dc2:	4b57      	ldr	r3, [pc, #348]	; (8001f20 <menu+0xbd0>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d104      	bne.n	8001dd4 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001dca:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <menu+0xbdc>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f005 ffdc 	bl	8007d8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4848      	ldr	r0, [pc, #288]	; (8001ef8 <menu+0xba8>)
 8001dd8:	f007 fafe 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d115      	bne.n	8001e0e <menu+0xabe>
 8001de2:	4b46      	ldr	r3, [pc, #280]	; (8001efc <menu+0xbac>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	f083 0301 	eor.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00e      	beq.n	8001e0e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <menu+0xbd0>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <menu+0xbd0>)
 8001dfa:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001dfc:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <menu+0xbd0>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d902      	bls.n	8001e0a <menu+0xaba>
				emniyetCercevesi = 0;
 8001e04:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <menu+0xbd0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e0a:	f002 fe4b 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0e:	2104      	movs	r1, #4
 8001e10:	4839      	ldr	r0, [pc, #228]	; (8001ef8 <menu+0xba8>)
 8001e12:	f007 fae1 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d115      	bne.n	8001e48 <menu+0xaf8>
 8001e1c:	4b37      	ldr	r3, [pc, #220]	; (8001efc <menu+0xbac>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f083 0301 	eor.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00e      	beq.n	8001e48 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <menu+0xbd0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <menu+0xbd0>)
 8001e34:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e36:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <menu+0xbd0>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <menu+0xbd0>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e44:	f002 fe2e 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e48:	2108      	movs	r1, #8
 8001e4a:	482b      	ldr	r0, [pc, #172]	; (8001ef8 <menu+0xba8>)
 8001e4c:	f007 fac4 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10d      	bne.n	8001e72 <menu+0xb22>
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <menu+0xbac>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	f083 0301 	eor.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <menu+0xbd0>)
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <menu+0xbb8>)
 8001e6a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <menu+0xbc0>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <menu+0xbc4>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	f040 80ba 	bne.w	8001ff0 <menu+0xca0>
		if(dilSecim == 0) {
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <menu+0xba0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001e84:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <menu+0xbe0>)
 8001e86:	2101      	movs	r1, #1
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f005 ff7f 	bl	8007d8c <lcd_print>
 8001e8e:	e008      	b.n	8001ea2 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <menu+0xba0>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d104      	bne.n	8001ea2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <menu+0xbe4>)
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f005 ff75 	bl	8007d8c <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <menu+0xbe8>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d113      	bne.n	8001ed2 <menu+0xb82>
			if(dilSecim == 0) {
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <menu+0xba0>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <menu+0xbd4>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	f005 ff68 	bl	8007d8c <lcd_print>
 8001ebc:	e049      	b.n	8001f52 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <menu+0xba0>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d145      	bne.n	8001f52 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <menu+0xbd8>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	2002      	movs	r0, #2
 8001ecc:	f005 ff5e 	bl	8007d8c <lcd_print>
 8001ed0:	e03f      	b.n	8001f52 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <menu+0xbe8>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d13b      	bne.n	8001f52 <menu+0xc02>
			if(dilSecim == 0) {
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <menu+0xba0>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d12e      	bne.n	8001f40 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001ee2:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <menu+0xbec>)
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f005 ff50 	bl	8007d8c <lcd_print>
 8001eec:	e031      	b.n	8001f52 <menu+0xc02>
 8001eee:	bf00      	nop
 8001ef0:	20000245 	.word	0x20000245
 8001ef4:	0800d344 	.word	0x0800d344
 8001ef8:	40010800 	.word	0x40010800
 8001efc:	20000253 	.word	0x20000253
 8001f00:	20000233 	.word	0x20000233
 8001f04:	20000225 	.word	0x20000225
 8001f08:	20000128 	.word	0x20000128
 8001f0c:	2000022a 	.word	0x2000022a
 8001f10:	20000250 	.word	0x20000250
 8001f14:	20000224 	.word	0x20000224
 8001f18:	0800d354 	.word	0x0800d354
 8001f1c:	0800d368 	.word	0x0800d368
 8001f20:	20000228 	.word	0x20000228
 8001f24:	0800d37c 	.word	0x0800d37c
 8001f28:	0800d390 	.word	0x0800d390
 8001f2c:	0800d3a4 	.word	0x0800d3a4
 8001f30:	0800d3b4 	.word	0x0800d3b4
 8001f34:	0800d3c8 	.word	0x0800d3c8
 8001f38:	20000229 	.word	0x20000229
 8001f3c:	0800d3dc 	.word	0x0800d3dc
			} else if(dilSecim == 1) {
 8001f40:	4b92      	ldr	r3, [pc, #584]	; (800218c <menu+0xe3c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d104      	bne.n	8001f52 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001f48:	4a91      	ldr	r2, [pc, #580]	; (8002190 <menu+0xe40>)
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f005 ff1d 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f52:	2102      	movs	r1, #2
 8001f54:	488f      	ldr	r0, [pc, #572]	; (8002194 <menu+0xe44>)
 8001f56:	f007 fa3f 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d115      	bne.n	8001f8c <menu+0xc3c>
 8001f60:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <menu+0xe48>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	f083 0301 	eor.w	r3, r3, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00e      	beq.n	8001f8c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001f6e:	4b8b      	ldr	r3, [pc, #556]	; (800219c <menu+0xe4c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b89      	ldr	r3, [pc, #548]	; (800219c <menu+0xe4c>)
 8001f78:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001f7a:	4b88      	ldr	r3, [pc, #544]	; (800219c <menu+0xe4c>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d902      	bls.n	8001f88 <menu+0xc38>
				yavaslamaLimit = 0;
 8001f82:	4b86      	ldr	r3, [pc, #536]	; (800219c <menu+0xe4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f88:	f002 fd8c 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4881      	ldr	r0, [pc, #516]	; (8002194 <menu+0xe44>)
 8001f90:	f007 fa22 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d115      	bne.n	8001fc6 <menu+0xc76>
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <menu+0xe48>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f083 0301 	eor.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001fa8:	4b7c      	ldr	r3, [pc, #496]	; (800219c <menu+0xe4c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b7a      	ldr	r3, [pc, #488]	; (800219c <menu+0xe4c>)
 8001fb2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001fb4:	4b79      	ldr	r3, [pc, #484]	; (800219c <menu+0xe4c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001fbc:	4b77      	ldr	r3, [pc, #476]	; (800219c <menu+0xe4c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fc2:	f002 fd6f 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fc6:	2108      	movs	r1, #8
 8001fc8:	4872      	ldr	r0, [pc, #456]	; (8002194 <menu+0xe44>)
 8001fca:	f007 fa05 	bl	80093d8 <HAL_GPIO_ReadPin>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d10d      	bne.n	8001ff0 <menu+0xca0>
 8001fd4:	4b70      	ldr	r3, [pc, #448]	; (8002198 <menu+0xe48>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001fe2:	4b6e      	ldr	r3, [pc, #440]	; (800219c <menu+0xe4c>)
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	4b6e      	ldr	r3, [pc, #440]	; (80021a0 <menu+0xe50>)
 8001fe8:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001fea:	4b6e      	ldr	r3, [pc, #440]	; (80021a4 <menu+0xe54>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001ff0:	4b6d      	ldr	r3, [pc, #436]	; (80021a8 <menu+0xe58>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	f040 80b9 	bne.w	800216c <menu+0xe1c>
		if(dilSecim == 0) {
 8001ffa:	4b64      	ldr	r3, [pc, #400]	; (800218c <menu+0xe3c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002002:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <menu+0xe5c>)
 8002004:	2101      	movs	r1, #1
 8002006:	2001      	movs	r0, #1
 8002008:	f005 fec0 	bl	8007d8c <lcd_print>
 800200c:	e008      	b.n	8002020 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800200e:	4b5f      	ldr	r3, [pc, #380]	; (800218c <menu+0xe3c>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d104      	bne.n	8002020 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002016:	4a66      	ldr	r2, [pc, #408]	; (80021b0 <menu+0xe60>)
 8002018:	2101      	movs	r1, #1
 800201a:	2001      	movs	r0, #1
 800201c:	f005 feb6 	bl	8007d8c <lcd_print>
		}

		if(altLimit == 0) {
 8002020:	4b64      	ldr	r3, [pc, #400]	; (80021b4 <menu+0xe64>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d113      	bne.n	8002050 <menu+0xd00>
			if(dilSecim == 0) {
 8002028:	4b58      	ldr	r3, [pc, #352]	; (800218c <menu+0xe3c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002030:	4a61      	ldr	r2, [pc, #388]	; (80021b8 <menu+0xe68>)
 8002032:	2101      	movs	r1, #1
 8002034:	2002      	movs	r0, #2
 8002036:	f005 fea9 	bl	8007d8c <lcd_print>
 800203a:	e020      	b.n	800207e <menu+0xd2e>
			} else if(dilSecim == 1) {
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <menu+0xe3c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d11c      	bne.n	800207e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002044:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <menu+0xe6c>)
 8002046:	2101      	movs	r1, #1
 8002048:	2002      	movs	r0, #2
 800204a:	f005 fe9f 	bl	8007d8c <lcd_print>
 800204e:	e016      	b.n	800207e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002050:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <menu+0xe64>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d112      	bne.n	800207e <menu+0xd2e>
			if(dilSecim == 0){
 8002058:	4b4c      	ldr	r3, [pc, #304]	; (800218c <menu+0xe3c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002060:	4a57      	ldr	r2, [pc, #348]	; (80021c0 <menu+0xe70>)
 8002062:	2101      	movs	r1, #1
 8002064:	2002      	movs	r0, #2
 8002066:	f005 fe91 	bl	8007d8c <lcd_print>
 800206a:	e008      	b.n	800207e <menu+0xd2e>
			} else if(dilSecim == 1){
 800206c:	4b47      	ldr	r3, [pc, #284]	; (800218c <menu+0xe3c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d104      	bne.n	800207e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002074:	4a46      	ldr	r2, [pc, #280]	; (8002190 <menu+0xe40>)
 8002076:	2101      	movs	r1, #1
 8002078:	2002      	movs	r0, #2
 800207a:	f005 fe87 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800207e:	2102      	movs	r1, #2
 8002080:	4844      	ldr	r0, [pc, #272]	; (8002194 <menu+0xe44>)
 8002082:	f007 f9a9 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002086:	4603      	mov	r3, r0
 8002088:	2b01      	cmp	r3, #1
 800208a:	d119      	bne.n	80020c0 <menu+0xd70>
 800208c:	4b42      	ldr	r3, [pc, #264]	; (8002198 <menu+0xe48>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	f083 0301 	eor.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <menu+0xd70>
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <menu+0xe74>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10e      	bne.n	80020c0 <menu+0xd70>
			altLimit = altLimit + 1;
 80020a2:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <menu+0xe64>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <menu+0xe64>)
 80020ac:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <menu+0xe64>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d902      	bls.n	80020bc <menu+0xd6c>
				altLimit = 0;
 80020b6:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <menu+0xe64>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020bc:	f002 fcf2 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80020c0:	2104      	movs	r1, #4
 80020c2:	4834      	ldr	r0, [pc, #208]	; (8002194 <menu+0xe44>)
 80020c4:	f007 f988 	bl	80093d8 <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d119      	bne.n	8002102 <menu+0xdb2>
 80020ce:	4b32      	ldr	r3, [pc, #200]	; (8002198 <menu+0xe48>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d012      	beq.n	8002102 <menu+0xdb2>
 80020dc:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <menu+0xe74>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10e      	bne.n	8002102 <menu+0xdb2>
			altLimit = altLimit - 1;
 80020e4:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <menu+0xe64>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <menu+0xe64>)
 80020ee:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <menu+0xe64>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <menu+0xdae>
		   		altLimit = 1;
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <menu+0xe64>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020fe:	f002 fcd1 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002102:	2108      	movs	r1, #8
 8002104:	4823      	ldr	r0, [pc, #140]	; (8002194 <menu+0xe44>)
 8002106:	f007 f967 	bl	80093d8 <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d12d      	bne.n	800216c <menu+0xe1c>
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <menu+0xe48>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d026      	beq.n	800216c <menu+0xe1c>
			eepromData[5] = altLimit;
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <menu+0xe64>)
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <menu+0xe50>)
 8002124:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <menu+0xe64>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d110      	bne.n	8002150 <menu+0xe00>
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <menu+0xe78>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <menu+0xdee>
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <menu+0xe78>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d108      	bne.n	8002150 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <menu+0xe78>)
 8002140:	2203      	movs	r2, #3
 8002142:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <menu+0xe78>)
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <menu+0xe50>)
 800214a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800214e:	e00a      	b.n	8002166 <menu+0xe16>
			} else if(altLimit == 0) {
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <menu+0xe64>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <menu+0xe16>
				platformSilindirTipi = 0;
 8002158:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <menu+0xe7c>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <menu+0xe7c>)
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <menu+0xe50>)
 8002164:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <menu+0xe54>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <menu+0xe58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b06      	cmp	r3, #6
 8002172:	f040 80b6 	bne.w	80022e2 <menu+0xf92>
		if(dilSecim == 0) {
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <menu+0xe3c>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d12a      	bne.n	80021d4 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <menu+0xe80>)
 8002180:	2101      	movs	r1, #1
 8002182:	2001      	movs	r0, #1
 8002184:	f005 fe02 	bl	8007d8c <lcd_print>
 8002188:	e02d      	b.n	80021e6 <menu+0xe96>
 800218a:	bf00      	nop
 800218c:	20000245 	.word	0x20000245
 8002190:	0800d3f0 	.word	0x0800d3f0
 8002194:	40010800 	.word	0x40010800
 8002198:	20000253 	.word	0x20000253
 800219c:	20000229 	.word	0x20000229
 80021a0:	20000128 	.word	0x20000128
 80021a4:	20000250 	.word	0x20000250
 80021a8:	20000224 	.word	0x20000224
 80021ac:	0800d404 	.word	0x0800d404
 80021b0:	0800d418 	.word	0x0800d418
 80021b4:	2000022a 	.word	0x2000022a
 80021b8:	0800d37c 	.word	0x0800d37c
 80021bc:	0800d390 	.word	0x0800d390
 80021c0:	0800d3dc 	.word	0x0800d3dc
 80021c4:	20000225 	.word	0x20000225
 80021c8:	20000231 	.word	0x20000231
 80021cc:	20000237 	.word	0x20000237
 80021d0:	0800d42c 	.word	0x0800d42c
		} else if(dilSecim == 1){
 80021d4:	4b7a      	ldr	r3, [pc, #488]	; (80023c0 <menu+0x1070>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d104      	bne.n	80021e6 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80021dc:	4a79      	ldr	r2, [pc, #484]	; (80023c4 <menu+0x1074>)
 80021de:	2101      	movs	r1, #1
 80021e0:	2001      	movs	r0, #1
 80021e2:	f005 fdd3 	bl	8007d8c <lcd_print>
		}
		if(basincSalteri == 0){
 80021e6:	4b78      	ldr	r3, [pc, #480]	; (80023c8 <menu+0x1078>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d113      	bne.n	8002216 <menu+0xec6>
			if(dilSecim == 0) {
 80021ee:	4b74      	ldr	r3, [pc, #464]	; (80023c0 <menu+0x1070>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80021f6:	4a75      	ldr	r2, [pc, #468]	; (80023cc <menu+0x107c>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	2002      	movs	r0, #2
 80021fc:	f005 fdc6 	bl	8007d8c <lcd_print>
 8002200:	e020      	b.n	8002244 <menu+0xef4>
			} else if(dilSecim == 1){
 8002202:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <menu+0x1070>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d11c      	bne.n	8002244 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800220a:	4a71      	ldr	r2, [pc, #452]	; (80023d0 <menu+0x1080>)
 800220c:	2101      	movs	r1, #1
 800220e:	2002      	movs	r0, #2
 8002210:	f005 fdbc 	bl	8007d8c <lcd_print>
 8002214:	e016      	b.n	8002244 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002216:	4b6c      	ldr	r3, [pc, #432]	; (80023c8 <menu+0x1078>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d112      	bne.n	8002244 <menu+0xef4>
			if(dilSecim == 0) {
 800221e:	4b68      	ldr	r3, [pc, #416]	; (80023c0 <menu+0x1070>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002226:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <menu+0x1084>)
 8002228:	2101      	movs	r1, #1
 800222a:	2002      	movs	r0, #2
 800222c:	f005 fdae 	bl	8007d8c <lcd_print>
 8002230:	e008      	b.n	8002244 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <menu+0x1070>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d104      	bne.n	8002244 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800223a:	4a67      	ldr	r2, [pc, #412]	; (80023d8 <menu+0x1088>)
 800223c:	2101      	movs	r1, #1
 800223e:	2002      	movs	r0, #2
 8002240:	f005 fda4 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002244:	2102      	movs	r1, #2
 8002246:	4865      	ldr	r0, [pc, #404]	; (80023dc <menu+0x108c>)
 8002248:	f007 f8c6 	bl	80093d8 <HAL_GPIO_ReadPin>
 800224c:	4603      	mov	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d115      	bne.n	800227e <menu+0xf2e>
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <menu+0x1090>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00e      	beq.n	800227e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <menu+0x1078>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <menu+0x1078>)
 800226a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800226c:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <menu+0x1078>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d902      	bls.n	800227a <menu+0xf2a>
				basincSalteri = 0;
 8002274:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <menu+0x1078>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800227a:	f002 fc13 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800227e:	2104      	movs	r1, #4
 8002280:	4856      	ldr	r0, [pc, #344]	; (80023dc <menu+0x108c>)
 8002282:	f007 f8a9 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	2b01      	cmp	r3, #1
 800228a:	d115      	bne.n	80022b8 <menu+0xf68>
 800228c:	4b54      	ldr	r3, [pc, #336]	; (80023e0 <menu+0x1090>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	f083 0301 	eor.w	r3, r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00e      	beq.n	80022b8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800229a:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <menu+0x1078>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3b01      	subs	r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <menu+0x1078>)
 80022a4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80022a6:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <menu+0x1078>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <menu+0xf64>
		   		basincSalteri = 1;
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <menu+0x1078>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022b4:	f002 fbf6 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022b8:	2108      	movs	r1, #8
 80022ba:	4848      	ldr	r0, [pc, #288]	; (80023dc <menu+0x108c>)
 80022bc:	f007 f88c 	bl	80093d8 <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10d      	bne.n	80022e2 <menu+0xf92>
 80022c6:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <menu+0x1090>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80022d4:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <menu+0x1078>)
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <menu+0x1094>)
 80022da:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <menu+0x1098>)
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80022e2:	4b42      	ldr	r3, [pc, #264]	; (80023ec <menu+0x109c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b07      	cmp	r3, #7
 80022e8:	f040 80f5 	bne.w	80024d6 <menu+0x1186>
		if(dilSecim == 0) {
 80022ec:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <menu+0x1070>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80022f4:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <menu+0x10a0>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	2001      	movs	r0, #1
 80022fa:	f005 fd47 	bl	8007d8c <lcd_print>
 80022fe:	e008      	b.n	8002312 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <menu+0x1070>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d104      	bne.n	8002312 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <menu+0x10a4>)
 800230a:	2101      	movs	r1, #1
 800230c:	2001      	movs	r0, #1
 800230e:	f005 fd3d 	bl	8007d8c <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002312:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <menu+0x10a8>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d113      	bne.n	8002342 <menu+0xff2>
			if(dilSecim == 0) {
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <menu+0x1070>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002322:	4a2a      	ldr	r2, [pc, #168]	; (80023cc <menu+0x107c>)
 8002324:	2101      	movs	r1, #1
 8002326:	2002      	movs	r0, #2
 8002328:	f005 fd30 	bl	8007d8c <lcd_print>
 800232c:	e079      	b.n	8002422 <menu+0x10d2>
			} else if(dilSecim == 1){
 800232e:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <menu+0x1070>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d175      	bne.n	8002422 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002336:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <menu+0x1080>)
 8002338:	2101      	movs	r1, #1
 800233a:	2002      	movs	r0, #2
 800233c:	f005 fd26 	bl	8007d8c <lcd_print>
 8002340:	e06f      	b.n	8002422 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <menu+0x10a8>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d113      	bne.n	8002372 <menu+0x1022>
			if(dilSecim == 0) {
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <menu+0x1070>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002352:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <menu+0x10ac>)
 8002354:	2101      	movs	r1, #1
 8002356:	2002      	movs	r0, #2
 8002358:	f005 fd18 	bl	8007d8c <lcd_print>
 800235c:	e061      	b.n	8002422 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <menu+0x1070>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d15d      	bne.n	8002422 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002366:	4a26      	ldr	r2, [pc, #152]	; (8002400 <menu+0x10b0>)
 8002368:	2101      	movs	r1, #1
 800236a:	2002      	movs	r0, #2
 800236c:	f005 fd0e 	bl	8007d8c <lcd_print>
 8002370:	e057      	b.n	8002422 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002372:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <menu+0x10a8>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d113      	bne.n	80023a2 <menu+0x1052>
			if(dilSecim == 0) {
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <menu+0x1070>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002382:	4a20      	ldr	r2, [pc, #128]	; (8002404 <menu+0x10b4>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f005 fd00 	bl	8007d8c <lcd_print>
 800238c:	e049      	b.n	8002422 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <menu+0x1070>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d145      	bne.n	8002422 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <menu+0x10b8>)
 8002398:	2101      	movs	r1, #1
 800239a:	2002      	movs	r0, #2
 800239c:	f005 fcf6 	bl	8007d8c <lcd_print>
 80023a0:	e03f      	b.n	8002422 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <menu+0x10a8>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d13b      	bne.n	8002422 <menu+0x10d2>
			if(dilSecim == 0) {
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <menu+0x1070>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d12e      	bne.n	8002410 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <menu+0x10bc>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	2002      	movs	r0, #2
 80023b8:	f005 fce8 	bl	8007d8c <lcd_print>
 80023bc:	e031      	b.n	8002422 <menu+0x10d2>
 80023be:	bf00      	nop
 80023c0:	20000245 	.word	0x20000245
 80023c4:	0800d43c 	.word	0x0800d43c
 80023c8:	2000022b 	.word	0x2000022b
 80023cc:	0800d37c 	.word	0x0800d37c
 80023d0:	0800d390 	.word	0x0800d390
 80023d4:	0800d3dc 	.word	0x0800d3dc
 80023d8:	0800d3f0 	.word	0x0800d3f0
 80023dc:	40010800 	.word	0x40010800
 80023e0:	20000253 	.word	0x20000253
 80023e4:	20000128 	.word	0x20000128
 80023e8:	20000250 	.word	0x20000250
 80023ec:	20000224 	.word	0x20000224
 80023f0:	0800d44c 	.word	0x0800d44c
 80023f4:	0800d460 	.word	0x0800d460
 80023f8:	2000022c 	.word	0x2000022c
 80023fc:	0800d474 	.word	0x0800d474
 8002400:	0800d488 	.word	0x0800d488
 8002404:	0800d49c 	.word	0x0800d49c
 8002408:	0800d4b0 	.word	0x0800d4b0
 800240c:	0800d4c4 	.word	0x0800d4c4
			} else if(dilSecim == 1){
 8002410:	4b99      	ldr	r3, [pc, #612]	; (8002678 <menu+0x1328>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d104      	bne.n	8002422 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002418:	4a98      	ldr	r2, [pc, #608]	; (800267c <menu+0x132c>)
 800241a:	2101      	movs	r1, #1
 800241c:	2002      	movs	r0, #2
 800241e:	f005 fcb5 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002422:	2102      	movs	r1, #2
 8002424:	4896      	ldr	r0, [pc, #600]	; (8002680 <menu+0x1330>)
 8002426:	f006 ffd7 	bl	80093d8 <HAL_GPIO_ReadPin>
 800242a:	4603      	mov	r3, r0
 800242c:	2b01      	cmp	r3, #1
 800242e:	d115      	bne.n	800245c <menu+0x110c>
 8002430:	4b94      	ldr	r3, [pc, #592]	; (8002684 <menu+0x1334>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	f083 0301 	eor.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00e      	beq.n	800245c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800243e:	4b92      	ldr	r3, [pc, #584]	; (8002688 <menu+0x1338>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b90      	ldr	r3, [pc, #576]	; (8002688 <menu+0x1338>)
 8002448:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800244a:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <menu+0x1338>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d902      	bls.n	8002458 <menu+0x1108>
				kapiSecimleri = 0;
 8002452:	4b8d      	ldr	r3, [pc, #564]	; (8002688 <menu+0x1338>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002458:	f002 fb24 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800245c:	2104      	movs	r1, #4
 800245e:	4888      	ldr	r0, [pc, #544]	; (8002680 <menu+0x1330>)
 8002460:	f006 ffba 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002464:	4603      	mov	r3, r0
 8002466:	2b01      	cmp	r3, #1
 8002468:	d115      	bne.n	8002496 <menu+0x1146>
 800246a:	4b86      	ldr	r3, [pc, #536]	; (8002684 <menu+0x1334>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	f083 0301 	eor.w	r3, r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00e      	beq.n	8002496 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002478:	4b83      	ldr	r3, [pc, #524]	; (8002688 <menu+0x1338>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	3b01      	subs	r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <menu+0x1338>)
 8002482:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002484:	4b80      	ldr	r3, [pc, #512]	; (8002688 <menu+0x1338>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d902      	bls.n	8002492 <menu+0x1142>
		   		kapiSecimleri = 3;
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <menu+0x1338>)
 800248e:	2203      	movs	r2, #3
 8002490:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002492:	f002 fb07 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002496:	2108      	movs	r1, #8
 8002498:	4879      	ldr	r0, [pc, #484]	; (8002680 <menu+0x1330>)
 800249a:	f006 ff9d 	bl	80093d8 <HAL_GPIO_ReadPin>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d118      	bne.n	80024d6 <menu+0x1186>
 80024a4:	4b77      	ldr	r3, [pc, #476]	; (8002684 <menu+0x1334>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	f083 0301 	eor.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d011      	beq.n	80024d6 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80024b2:	4b75      	ldr	r3, [pc, #468]	; (8002688 <menu+0x1338>)
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	4b75      	ldr	r3, [pc, #468]	; (800268c <menu+0x133c>)
 80024b8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80024ba:	4b73      	ldr	r3, [pc, #460]	; (8002688 <menu+0x1338>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d006      	beq.n	80024d0 <menu+0x1180>
				altLimit = 1;
 80024c2:	4b73      	ldr	r3, [pc, #460]	; (8002690 <menu+0x1340>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80024c8:	4b71      	ldr	r3, [pc, #452]	; (8002690 <menu+0x1340>)
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	4b6f      	ldr	r3, [pc, #444]	; (800268c <menu+0x133c>)
 80024ce:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80024d0:	4b70      	ldr	r3, [pc, #448]	; (8002694 <menu+0x1344>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <menu+0x1348>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	f040 8092 	bne.w	8002604 <menu+0x12b4>
		if(dilSecim == 0) {
 80024e0:	4b65      	ldr	r3, [pc, #404]	; (8002678 <menu+0x1328>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80024e8:	4a6c      	ldr	r2, [pc, #432]	; (800269c <menu+0x134c>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	2001      	movs	r0, #1
 80024ee:	f005 fc4d 	bl	8007d8c <lcd_print>
 80024f2:	e008      	b.n	8002506 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80024f4:	4b60      	ldr	r3, [pc, #384]	; (8002678 <menu+0x1328>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d104      	bne.n	8002506 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80024fc:	4a68      	ldr	r2, [pc, #416]	; (80026a0 <menu+0x1350>)
 80024fe:	2101      	movs	r1, #1
 8002500:	2001      	movs	r0, #1
 8002502:	f005 fc43 	bl	8007d8c <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002506:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <menu+0x1354>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d113      	bne.n	8002536 <menu+0x11e6>
			if(dilSecim == 0) {
 800250e:	4b5a      	ldr	r3, [pc, #360]	; (8002678 <menu+0x1328>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002516:	4a64      	ldr	r2, [pc, #400]	; (80026a8 <menu+0x1358>)
 8002518:	2101      	movs	r1, #1
 800251a:	2002      	movs	r0, #2
 800251c:	f005 fc36 	bl	8007d8c <lcd_print>
 8002520:	e020      	b.n	8002564 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002522:	4b55      	ldr	r3, [pc, #340]	; (8002678 <menu+0x1328>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d11c      	bne.n	8002564 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800252a:	4a60      	ldr	r2, [pc, #384]	; (80026ac <menu+0x135c>)
 800252c:	2101      	movs	r1, #1
 800252e:	2002      	movs	r0, #2
 8002530:	f005 fc2c 	bl	8007d8c <lcd_print>
 8002534:	e016      	b.n	8002564 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002536:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <menu+0x1354>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d112      	bne.n	8002564 <menu+0x1214>
			if(dilSecim == 0){
 800253e:	4b4e      	ldr	r3, [pc, #312]	; (8002678 <menu+0x1328>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002546:	4a5a      	ldr	r2, [pc, #360]	; (80026b0 <menu+0x1360>)
 8002548:	2101      	movs	r1, #1
 800254a:	2002      	movs	r0, #2
 800254c:	f005 fc1e 	bl	8007d8c <lcd_print>
 8002550:	e008      	b.n	8002564 <menu+0x1214>
			} else if(dilSecim == 1){
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <menu+0x1328>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d104      	bne.n	8002564 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800255a:	4a56      	ldr	r2, [pc, #344]	; (80026b4 <menu+0x1364>)
 800255c:	2101      	movs	r1, #1
 800255e:	2002      	movs	r0, #2
 8002560:	f005 fc14 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002564:	2102      	movs	r1, #2
 8002566:	4846      	ldr	r0, [pc, #280]	; (8002680 <menu+0x1330>)
 8002568:	f006 ff36 	bl	80093d8 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <menu+0x124e>
 8002572:	4b44      	ldr	r3, [pc, #272]	; (8002684 <menu+0x1334>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002580:	4b48      	ldr	r3, [pc, #288]	; (80026a4 <menu+0x1354>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <menu+0x1354>)
 800258a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800258c:	4b45      	ldr	r3, [pc, #276]	; (80026a4 <menu+0x1354>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d902      	bls.n	800259a <menu+0x124a>
				kapiAcTipi = 0;
 8002594:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <menu+0x1354>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800259a:	f002 fa83 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800259e:	2104      	movs	r1, #4
 80025a0:	4837      	ldr	r0, [pc, #220]	; (8002680 <menu+0x1330>)
 80025a2:	f006 ff19 	bl	80093d8 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d115      	bne.n	80025d8 <menu+0x1288>
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <menu+0x1334>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80025ba:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <menu+0x1354>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <menu+0x1354>)
 80025c4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80025c6:	4b37      	ldr	r3, [pc, #220]	; (80026a4 <menu+0x1354>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <menu+0x1284>
		   		kapiAcTipi = 1;
 80025ce:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <menu+0x1354>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025d4:	f002 fa66 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025d8:	2108      	movs	r1, #8
 80025da:	4829      	ldr	r0, [pc, #164]	; (8002680 <menu+0x1330>)
 80025dc:	f006 fefc 	bl	80093d8 <HAL_GPIO_ReadPin>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10e      	bne.n	8002604 <menu+0x12b4>
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <menu+0x1334>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <menu+0x1354>)
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <menu+0x133c>)
 80025fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80025fe:	4b25      	ldr	r3, [pc, #148]	; (8002694 <menu+0x1344>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <menu+0x1348>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b09      	cmp	r3, #9
 800260a:	f040 80b9 	bne.w	8002780 <menu+0x1430>
		if(dilSecim == 0){
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <menu+0x1328>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002616:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <menu+0x1368>)
 8002618:	2101      	movs	r1, #1
 800261a:	2001      	movs	r0, #1
 800261c:	f005 fbb6 	bl	8007d8c <lcd_print>
 8002620:	e008      	b.n	8002634 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <menu+0x1328>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d104      	bne.n	8002634 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <menu+0x136c>)
 800262c:	2101      	movs	r1, #1
 800262e:	2001      	movs	r0, #1
 8002630:	f005 fbac 	bl	8007d8c <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <menu+0x1370>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d105      	bne.n	8002648 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800263c:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <menu+0x1374>)
 800263e:	2101      	movs	r1, #1
 8002640:	2002      	movs	r0, #2
 8002642:	f005 fba3 	bl	8007d8c <lcd_print>
 8002646:	e04c      	b.n	80026e2 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <menu+0x1370>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d13f      	bne.n	80026d0 <menu+0x1380>
			if(dilSecim == 0){
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <menu+0x1328>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <menu+0x1378>)
 800265a:	2101      	movs	r1, #1
 800265c:	2002      	movs	r0, #2
 800265e:	f005 fb95 	bl	8007d8c <lcd_print>
 8002662:	e03e      	b.n	80026e2 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <menu+0x1328>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d13a      	bne.n	80026e2 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <menu+0x137c>)
 800266e:	2101      	movs	r1, #1
 8002670:	2002      	movs	r0, #2
 8002672:	f005 fb8b 	bl	8007d8c <lcd_print>
 8002676:	e034      	b.n	80026e2 <menu+0x1392>
 8002678:	20000245 	.word	0x20000245
 800267c:	0800d4d8 	.word	0x0800d4d8
 8002680:	40010800 	.word	0x40010800
 8002684:	20000253 	.word	0x20000253
 8002688:	2000022c 	.word	0x2000022c
 800268c:	20000128 	.word	0x20000128
 8002690:	2000022a 	.word	0x2000022a
 8002694:	20000250 	.word	0x20000250
 8002698:	20000224 	.word	0x20000224
 800269c:	0800d4ec 	.word	0x0800d4ec
 80026a0:	0800d500 	.word	0x0800d500
 80026a4:	20000230 	.word	0x20000230
 80026a8:	0800d514 	.word	0x0800d514
 80026ac:	0800d524 	.word	0x0800d524
 80026b0:	0800d534 	.word	0x0800d534
 80026b4:	0800d548 	.word	0x0800d548
 80026b8:	0800d55c 	.word	0x0800d55c
 80026bc:	0800d570 	.word	0x0800d570
 80026c0:	2000022d 	.word	0x2000022d
 80026c4:	0800d584 	.word	0x0800d584
 80026c8:	0800d598 	.word	0x0800d598
 80026cc:	0800d5a8 	.word	0x0800d5a8
			}
		} else if(kapi1Tip == 2) {
 80026d0:	4b8a      	ldr	r3, [pc, #552]	; (80028fc <menu+0x15ac>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d104      	bne.n	80026e2 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80026d8:	4a89      	ldr	r2, [pc, #548]	; (8002900 <menu+0x15b0>)
 80026da:	2101      	movs	r1, #1
 80026dc:	2002      	movs	r0, #2
 80026de:	f005 fb55 	bl	8007d8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026e2:	2102      	movs	r1, #2
 80026e4:	4887      	ldr	r0, [pc, #540]	; (8002904 <menu+0x15b4>)
 80026e6:	f006 fe77 	bl	80093d8 <HAL_GPIO_ReadPin>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d115      	bne.n	800271c <menu+0x13cc>
 80026f0:	4b85      	ldr	r3, [pc, #532]	; (8002908 <menu+0x15b8>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	f083 0301 	eor.w	r3, r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00e      	beq.n	800271c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80026fe:	4b7f      	ldr	r3, [pc, #508]	; (80028fc <menu+0x15ac>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4b7d      	ldr	r3, [pc, #500]	; (80028fc <menu+0x15ac>)
 8002708:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800270a:	4b7c      	ldr	r3, [pc, #496]	; (80028fc <menu+0x15ac>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d902      	bls.n	8002718 <menu+0x13c8>
				kapi1Tip = 0;
 8002712:	4b7a      	ldr	r3, [pc, #488]	; (80028fc <menu+0x15ac>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002718:	f002 f9c4 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800271c:	2104      	movs	r1, #4
 800271e:	4879      	ldr	r0, [pc, #484]	; (8002904 <menu+0x15b4>)
 8002720:	f006 fe5a 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002724:	4603      	mov	r3, r0
 8002726:	2b01      	cmp	r3, #1
 8002728:	d115      	bne.n	8002756 <menu+0x1406>
 800272a:	4b77      	ldr	r3, [pc, #476]	; (8002908 <menu+0x15b8>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	f083 0301 	eor.w	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00e      	beq.n	8002756 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002738:	4b70      	ldr	r3, [pc, #448]	; (80028fc <menu+0x15ac>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	3b01      	subs	r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b6e      	ldr	r3, [pc, #440]	; (80028fc <menu+0x15ac>)
 8002742:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002744:	4b6d      	ldr	r3, [pc, #436]	; (80028fc <menu+0x15ac>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d902      	bls.n	8002752 <menu+0x1402>
		   		kapi1Tip = 2;
 800274c:	4b6b      	ldr	r3, [pc, #428]	; (80028fc <menu+0x15ac>)
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002752:	f002 f9a7 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002756:	2108      	movs	r1, #8
 8002758:	486a      	ldr	r0, [pc, #424]	; (8002904 <menu+0x15b4>)
 800275a:	f006 fe3d 	bl	80093d8 <HAL_GPIO_ReadPin>
 800275e:	4603      	mov	r3, r0
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10d      	bne.n	8002780 <menu+0x1430>
 8002764:	4b68      	ldr	r3, [pc, #416]	; (8002908 <menu+0x15b8>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	f083 0301 	eor.w	r3, r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002772:	4b62      	ldr	r3, [pc, #392]	; (80028fc <menu+0x15ac>)
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	4b65      	ldr	r3, [pc, #404]	; (800290c <menu+0x15bc>)
 8002778:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800277a:	4b65      	ldr	r3, [pc, #404]	; (8002910 <menu+0x15c0>)
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <menu+0x15c4>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b0a      	cmp	r3, #10
 8002786:	d17f      	bne.n	8002888 <menu+0x1538>
		if(dilSecim == 0) {
 8002788:	4b63      	ldr	r3, [pc, #396]	; (8002918 <menu+0x15c8>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002790:	4a62      	ldr	r2, [pc, #392]	; (800291c <menu+0x15cc>)
 8002792:	2101      	movs	r1, #1
 8002794:	2001      	movs	r0, #1
 8002796:	f005 faf9 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800279a:	4a61      	ldr	r2, [pc, #388]	; (8002920 <menu+0x15d0>)
 800279c:	2101      	movs	r1, #1
 800279e:	2002      	movs	r0, #2
 80027a0:	f005 faf4 	bl	8007d8c <lcd_print>
 80027a4:	e00d      	b.n	80027c2 <menu+0x1472>
		} else if(dilSecim == 1) {
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <menu+0x15c8>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d109      	bne.n	80027c2 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80027ae:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <menu+0x15d4>)
 80027b0:	2101      	movs	r1, #1
 80027b2:	2001      	movs	r0, #1
 80027b4:	f005 faea 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80027b8:	4a5b      	ldr	r2, [pc, #364]	; (8002928 <menu+0x15d8>)
 80027ba:	2101      	movs	r1, #1
 80027bc:	2002      	movs	r0, #2
 80027be:	f005 fae5 	bl	8007d8c <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80027c2:	4b5a      	ldr	r3, [pc, #360]	; (800292c <menu+0x15dc>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	220a      	movs	r2, #10
 80027c8:	4959      	ldr	r1, [pc, #356]	; (8002930 <menu+0x15e0>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f009 fe30 	bl	800c430 <itoa>
		lcd_print(2,16,snum);
 80027d0:	4a57      	ldr	r2, [pc, #348]	; (8002930 <menu+0x15e0>)
 80027d2:	2110      	movs	r1, #16
 80027d4:	2002      	movs	r0, #2
 80027d6:	f005 fad9 	bl	8007d8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027da:	2102      	movs	r1, #2
 80027dc:	4849      	ldr	r0, [pc, #292]	; (8002904 <menu+0x15b4>)
 80027de:	f006 fdfb 	bl	80093d8 <HAL_GPIO_ReadPin>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d119      	bne.n	800281c <menu+0x14cc>
 80027e8:	4b47      	ldr	r3, [pc, #284]	; (8002908 <menu+0x15b8>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	f083 0301 	eor.w	r3, r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d012      	beq.n	800281c <menu+0x14cc>
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <menu+0x15ac>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10e      	bne.n	800281c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80027fe:	4b4b      	ldr	r3, [pc, #300]	; (800292c <menu+0x15dc>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4b49      	ldr	r3, [pc, #292]	; (800292c <menu+0x15dc>)
 8002808:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800280a:	4b48      	ldr	r3, [pc, #288]	; (800292c <menu+0x15dc>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d902      	bls.n	8002818 <menu+0x14c8>
				kapi1AcSure = 0;
 8002812:	4b46      	ldr	r3, [pc, #280]	; (800292c <menu+0x15dc>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002818:	f002 f944 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800281c:	2104      	movs	r1, #4
 800281e:	4839      	ldr	r0, [pc, #228]	; (8002904 <menu+0x15b4>)
 8002820:	f006 fdda 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d119      	bne.n	800285e <menu+0x150e>
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <menu+0x15b8>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f083 0301 	eor.w	r3, r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d012      	beq.n	800285e <menu+0x150e>
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <menu+0x15ac>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10e      	bne.n	800285e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002840:	4b3a      	ldr	r3, [pc, #232]	; (800292c <menu+0x15dc>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	3b01      	subs	r3, #1
 8002846:	b2da      	uxtb	r2, r3
 8002848:	4b38      	ldr	r3, [pc, #224]	; (800292c <menu+0x15dc>)
 800284a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800284c:	4b37      	ldr	r3, [pc, #220]	; (800292c <menu+0x15dc>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b06      	cmp	r3, #6
 8002852:	d902      	bls.n	800285a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <menu+0x15dc>)
 8002856:	2205      	movs	r2, #5
 8002858:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800285a:	f002 f923 	bl	8004aa4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800285e:	2108      	movs	r1, #8
 8002860:	4828      	ldr	r0, [pc, #160]	; (8002904 <menu+0x15b4>)
 8002862:	f006 fdb9 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002866:	4603      	mov	r3, r0
 8002868:	2b01      	cmp	r3, #1
 800286a:	d10d      	bne.n	8002888 <menu+0x1538>
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <menu+0x15b8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	f083 0301 	eor.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800287a:	4b2c      	ldr	r3, [pc, #176]	; (800292c <menu+0x15dc>)
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <menu+0x15bc>)
 8002880:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <menu+0x15c0>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <menu+0x15c4>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b0b      	cmp	r3, #11
 800288e:	f040 80b5 	bne.w	80029fc <menu+0x16ac>
		if(dilSecim == 0) {
 8002892:	4b21      	ldr	r3, [pc, #132]	; (8002918 <menu+0x15c8>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800289a:	4a26      	ldr	r2, [pc, #152]	; (8002934 <menu+0x15e4>)
 800289c:	2101      	movs	r1, #1
 800289e:	2001      	movs	r0, #1
 80028a0:	f005 fa74 	bl	8007d8c <lcd_print>
 80028a4:	e008      	b.n	80028b8 <menu+0x1568>
		} else if(dilSecim == 1) {
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <menu+0x15c8>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d104      	bne.n	80028b8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <menu+0x15e8>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	2001      	movs	r0, #1
 80028b4:	f005 fa6a 	bl	8007d8c <lcd_print>
		}

		if(kapi2Tip == 0) {
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <menu+0x15ec>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80028c0:	4a1f      	ldr	r2, [pc, #124]	; (8002940 <menu+0x15f0>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	2002      	movs	r0, #2
 80028c6:	f005 fa61 	bl	8007d8c <lcd_print>
 80028ca:	e048      	b.n	800295e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <menu+0x15ec>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d13b      	bne.n	800294c <menu+0x15fc>
			if(dilSecim == 0) {
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <menu+0x15c8>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80028dc:	4a19      	ldr	r2, [pc, #100]	; (8002944 <menu+0x15f4>)
 80028de:	2101      	movs	r1, #1
 80028e0:	2002      	movs	r0, #2
 80028e2:	f005 fa53 	bl	8007d8c <lcd_print>
 80028e6:	e03a      	b.n	800295e <menu+0x160e>
			} else if(dilSecim == 1) {
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <menu+0x15c8>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d136      	bne.n	800295e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80028f0:	4a15      	ldr	r2, [pc, #84]	; (8002948 <menu+0x15f8>)
 80028f2:	2101      	movs	r1, #1
 80028f4:	2002      	movs	r0, #2
 80028f6:	f005 fa49 	bl	8007d8c <lcd_print>
 80028fa:	e030      	b.n	800295e <menu+0x160e>
 80028fc:	2000022d 	.word	0x2000022d
 8002900:	0800d5bc 	.word	0x0800d5bc
 8002904:	40010800 	.word	0x40010800
 8002908:	20000253 	.word	0x20000253
 800290c:	20000128 	.word	0x20000128
 8002910:	20000250 	.word	0x20000250
 8002914:	20000224 	.word	0x20000224
 8002918:	20000245 	.word	0x20000245
 800291c:	0800d5cc 	.word	0x0800d5cc
 8002920:	0800d5e0 	.word	0x0800d5e0
 8002924:	0800d5f0 	.word	0x0800d5f0
 8002928:	0800d604 	.word	0x0800d604
 800292c:	2000023d 	.word	0x2000023d
 8002930:	20000198 	.word	0x20000198
 8002934:	0800d614 	.word	0x0800d614
 8002938:	0800d628 	.word	0x0800d628
 800293c:	2000022e 	.word	0x2000022e
 8002940:	0800d584 	.word	0x0800d584
 8002944:	0800d598 	.word	0x0800d598
 8002948:	0800d5a8 	.word	0x0800d5a8
			}
		} else if(kapi2Tip == 2) {
 800294c:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <menu+0x1828>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d104      	bne.n	800295e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002954:	4a89      	ldr	r2, [pc, #548]	; (8002b7c <menu+0x182c>)
 8002956:	2101      	movs	r1, #1
 8002958:	2002      	movs	r0, #2
 800295a:	f005 fa17 	bl	8007d8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800295e:	2102      	movs	r1, #2
 8002960:	4887      	ldr	r0, [pc, #540]	; (8002b80 <menu+0x1830>)
 8002962:	f006 fd39 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002966:	4603      	mov	r3, r0
 8002968:	2b01      	cmp	r3, #1
 800296a:	d115      	bne.n	8002998 <menu+0x1648>
 800296c:	4b85      	ldr	r3, [pc, #532]	; (8002b84 <menu+0x1834>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	f083 0301 	eor.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00e      	beq.n	8002998 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800297a:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <menu+0x1828>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4b7d      	ldr	r3, [pc, #500]	; (8002b78 <menu+0x1828>)
 8002984:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002986:	4b7c      	ldr	r3, [pc, #496]	; (8002b78 <menu+0x1828>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d902      	bls.n	8002994 <menu+0x1644>
				kapi2Tip = 0;
 800298e:	4b7a      	ldr	r3, [pc, #488]	; (8002b78 <menu+0x1828>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002994:	f002 f886 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002998:	2104      	movs	r1, #4
 800299a:	4879      	ldr	r0, [pc, #484]	; (8002b80 <menu+0x1830>)
 800299c:	f006 fd1c 	bl	80093d8 <HAL_GPIO_ReadPin>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d115      	bne.n	80029d2 <menu+0x1682>
 80029a6:	4b77      	ldr	r3, [pc, #476]	; (8002b84 <menu+0x1834>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	f083 0301 	eor.w	r3, r3, #1
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00e      	beq.n	80029d2 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80029b4:	4b70      	ldr	r3, [pc, #448]	; (8002b78 <menu+0x1828>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	4b6e      	ldr	r3, [pc, #440]	; (8002b78 <menu+0x1828>)
 80029be:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80029c0:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <menu+0x1828>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d902      	bls.n	80029ce <menu+0x167e>
		   		kapi2Tip = 2;
 80029c8:	4b6b      	ldr	r3, [pc, #428]	; (8002b78 <menu+0x1828>)
 80029ca:	2202      	movs	r2, #2
 80029cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029ce:	f002 f869 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029d2:	2108      	movs	r1, #8
 80029d4:	486a      	ldr	r0, [pc, #424]	; (8002b80 <menu+0x1830>)
 80029d6:	f006 fcff 	bl	80093d8 <HAL_GPIO_ReadPin>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10d      	bne.n	80029fc <menu+0x16ac>
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <menu+0x1834>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	f083 0301 	eor.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80029ee:	4b62      	ldr	r3, [pc, #392]	; (8002b78 <menu+0x1828>)
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <menu+0x1838>)
 80029f4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80029f6:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <menu+0x183c>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80029fc:	4b64      	ldr	r3, [pc, #400]	; (8002b90 <menu+0x1840>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d17f      	bne.n	8002b04 <menu+0x17b4>
		if(dilSecim == 0) {
 8002a04:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <menu+0x1844>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002a0c:	4a62      	ldr	r2, [pc, #392]	; (8002b98 <menu+0x1848>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2001      	movs	r0, #1
 8002a12:	f005 f9bb 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a16:	4a61      	ldr	r2, [pc, #388]	; (8002b9c <menu+0x184c>)
 8002a18:	2101      	movs	r1, #1
 8002a1a:	2002      	movs	r0, #2
 8002a1c:	f005 f9b6 	bl	8007d8c <lcd_print>
 8002a20:	e00d      	b.n	8002a3e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002a22:	4b5c      	ldr	r3, [pc, #368]	; (8002b94 <menu+0x1844>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d109      	bne.n	8002a3e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002a2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ba0 <menu+0x1850>)
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f005 f9ac 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a34:	4a5b      	ldr	r2, [pc, #364]	; (8002ba4 <menu+0x1854>)
 8002a36:	2101      	movs	r1, #1
 8002a38:	2002      	movs	r0, #2
 8002a3a:	f005 f9a7 	bl	8007d8c <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ba8 <menu+0x1858>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	220a      	movs	r2, #10
 8002a44:	4959      	ldr	r1, [pc, #356]	; (8002bac <menu+0x185c>)
 8002a46:	4618      	mov	r0, r3
 8002a48:	f009 fcf2 	bl	800c430 <itoa>
		lcd_print(2,16,snum);
 8002a4c:	4a57      	ldr	r2, [pc, #348]	; (8002bac <menu+0x185c>)
 8002a4e:	2110      	movs	r1, #16
 8002a50:	2002      	movs	r0, #2
 8002a52:	f005 f99b 	bl	8007d8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a56:	2102      	movs	r1, #2
 8002a58:	4849      	ldr	r0, [pc, #292]	; (8002b80 <menu+0x1830>)
 8002a5a:	f006 fcbd 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d119      	bne.n	8002a98 <menu+0x1748>
 8002a64:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <menu+0x1834>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	f083 0301 	eor.w	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d012      	beq.n	8002a98 <menu+0x1748>
 8002a72:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <menu+0x1828>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10e      	bne.n	8002a98 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002a7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ba8 <menu+0x1858>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <menu+0x1858>)
 8002a84:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002a86:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <menu+0x1858>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d902      	bls.n	8002a94 <menu+0x1744>
				kapi2AcSure = 0;
 8002a8e:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <menu+0x1858>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a94:	f002 f806 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a98:	2104      	movs	r1, #4
 8002a9a:	4839      	ldr	r0, [pc, #228]	; (8002b80 <menu+0x1830>)
 8002a9c:	f006 fc9c 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d119      	bne.n	8002ada <menu+0x178a>
 8002aa6:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <menu+0x1834>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f083 0301 	eor.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d012      	beq.n	8002ada <menu+0x178a>
 8002ab4:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <menu+0x1828>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10e      	bne.n	8002ada <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002abc:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <menu+0x1858>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <menu+0x1858>)
 8002ac6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002ac8:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <menu+0x1858>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b06      	cmp	r3, #6
 8002ace:	d902      	bls.n	8002ad6 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002ad0:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <menu+0x1858>)
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ad6:	f001 ffe5 	bl	8004aa4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ada:	2108      	movs	r1, #8
 8002adc:	4828      	ldr	r0, [pc, #160]	; (8002b80 <menu+0x1830>)
 8002ade:	f006 fc7b 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d10d      	bne.n	8002b04 <menu+0x17b4>
 8002ae8:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <menu+0x1834>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	f083 0301 	eor.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002af6:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <menu+0x1858>)
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <menu+0x1838>)
 8002afc:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002afe:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <menu+0x183c>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <menu+0x1840>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b0d      	cmp	r3, #13
 8002b0a:	f040 80b5 	bne.w	8002c78 <menu+0x1928>
		if(dilSecim == 0) {
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <menu+0x1844>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002b16:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <menu+0x1860>)
 8002b18:	2101      	movs	r1, #1
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f005 f936 	bl	8007d8c <lcd_print>
 8002b20:	e008      	b.n	8002b34 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002b22:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <menu+0x1844>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d104      	bne.n	8002b34 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002b2a:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <menu+0x1864>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f005 f92c 	bl	8007d8c <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <menu+0x1868>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <menu+0x186c>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2002      	movs	r0, #2
 8002b42:	f005 f923 	bl	8007d8c <lcd_print>
 8002b46:	e048      	b.n	8002bda <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <menu+0x1868>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d13b      	bne.n	8002bc8 <menu+0x1878>
			if(dilSecim == 0) {
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <menu+0x1844>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002b58:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <menu+0x1870>)
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f005 f915 	bl	8007d8c <lcd_print>
 8002b62:	e03a      	b.n	8002bda <menu+0x188a>
			} else if(dilSecim == 1) {
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <menu+0x1844>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d136      	bne.n	8002bda <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002b6c:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <menu+0x1874>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	2002      	movs	r0, #2
 8002b72:	f005 f90b 	bl	8007d8c <lcd_print>
 8002b76:	e030      	b.n	8002bda <menu+0x188a>
 8002b78:	2000022e 	.word	0x2000022e
 8002b7c:	0800d5bc 	.word	0x0800d5bc
 8002b80:	40010800 	.word	0x40010800
 8002b84:	20000253 	.word	0x20000253
 8002b88:	20000128 	.word	0x20000128
 8002b8c:	20000250 	.word	0x20000250
 8002b90:	20000224 	.word	0x20000224
 8002b94:	20000245 	.word	0x20000245
 8002b98:	0800d63c 	.word	0x0800d63c
 8002b9c:	0800d5e0 	.word	0x0800d5e0
 8002ba0:	0800d650 	.word	0x0800d650
 8002ba4:	0800d604 	.word	0x0800d604
 8002ba8:	2000023e 	.word	0x2000023e
 8002bac:	20000198 	.word	0x20000198
 8002bb0:	0800d664 	.word	0x0800d664
 8002bb4:	0800d678 	.word	0x0800d678
 8002bb8:	2000022f 	.word	0x2000022f
 8002bbc:	0800d584 	.word	0x0800d584
 8002bc0:	0800d598 	.word	0x0800d598
 8002bc4:	0800d5a8 	.word	0x0800d5a8
			}
		} else if(kapitablaTip == 2) {
 8002bc8:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <menu+0x19e8>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d104      	bne.n	8002bda <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002bd0:	4a5a      	ldr	r2, [pc, #360]	; (8002d3c <menu+0x19ec>)
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	f005 f8d9 	bl	8007d8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bda:	2102      	movs	r1, #2
 8002bdc:	4858      	ldr	r0, [pc, #352]	; (8002d40 <menu+0x19f0>)
 8002bde:	f006 fbfb 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d115      	bne.n	8002c14 <menu+0x18c4>
 8002be8:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <menu+0x19f4>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	f083 0301 	eor.w	r3, r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00e      	beq.n	8002c14 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002bf6:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <menu+0x19e8>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b4e      	ldr	r3, [pc, #312]	; (8002d38 <menu+0x19e8>)
 8002c00:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002c02:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <menu+0x19e8>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d902      	bls.n	8002c10 <menu+0x18c0>
				kapitablaTip = 0;
 8002c0a:	4b4b      	ldr	r3, [pc, #300]	; (8002d38 <menu+0x19e8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c10:	f001 ff48 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c14:	2104      	movs	r1, #4
 8002c16:	484a      	ldr	r0, [pc, #296]	; (8002d40 <menu+0x19f0>)
 8002c18:	f006 fbde 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d115      	bne.n	8002c4e <menu+0x18fe>
 8002c22:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <menu+0x19f4>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f083 0301 	eor.w	r3, r3, #1
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <menu+0x19e8>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <menu+0x19e8>)
 8002c3a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c3c:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <menu+0x19e8>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d902      	bls.n	8002c4a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002c44:	4b3c      	ldr	r3, [pc, #240]	; (8002d38 <menu+0x19e8>)
 8002c46:	2202      	movs	r2, #2
 8002c48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c4a:	f001 ff2b 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c4e:	2108      	movs	r1, #8
 8002c50:	483b      	ldr	r0, [pc, #236]	; (8002d40 <menu+0x19f0>)
 8002c52:	f006 fbc1 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d10d      	bne.n	8002c78 <menu+0x1928>
 8002c5c:	4b39      	ldr	r3, [pc, #228]	; (8002d44 <menu+0x19f4>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	f083 0301 	eor.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002c6a:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <menu+0x19e8>)
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <menu+0x19f8>)
 8002c70:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <menu+0x19fc>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002c78:	4b35      	ldr	r3, [pc, #212]	; (8002d50 <menu+0x1a00>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b0e      	cmp	r3, #14
 8002c7e:	f040 80f2 	bne.w	8002e66 <menu+0x1b16>
		if(dilSecim == 0) {
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <menu+0x1a04>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002c8a:	4a33      	ldr	r2, [pc, #204]	; (8002d58 <menu+0x1a08>)
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f005 f87c 	bl	8007d8c <lcd_print>
 8002c94:	e008      	b.n	8002ca8 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <menu+0x1a04>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d104      	bne.n	8002ca8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002c9e:	4a2f      	ldr	r2, [pc, #188]	; (8002d5c <menu+0x1a0c>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f005 f872 	bl	8007d8c <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <menu+0x1a10>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d113      	bne.n	8002cd8 <menu+0x1988>
			if(dilSecim == 0){
 8002cb0:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <menu+0x1a04>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002cb8:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <menu+0x1a14>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2002      	movs	r0, #2
 8002cbe:	f005 f865 	bl	8007d8c <lcd_print>
 8002cc2:	e071      	b.n	8002da8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <menu+0x1a04>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d16d      	bne.n	8002da8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <menu+0x1a18>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	f005 f85b 	bl	8007d8c <lcd_print>
 8002cd6:	e067      	b.n	8002da8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002cd8:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <menu+0x1a10>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d112      	bne.n	8002d06 <menu+0x19b6>
			if(dilSecim == 0){
 8002ce0:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <menu+0x1a04>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002ce8:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <menu+0x1a1c>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	2002      	movs	r0, #2
 8002cee:	f005 f84d 	bl	8007d8c <lcd_print>
			}
			if(dilSecim == 1){
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <menu+0x1a04>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d156      	bne.n	8002da8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002cfa:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <menu+0x1a20>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f005 f844 	bl	8007d8c <lcd_print>
 8002d04:	e050      	b.n	8002da8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <menu+0x1a10>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d136      	bne.n	8002d7c <menu+0x1a2c>
			if(dilSecim == 0){
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <menu+0x1a04>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002d16:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <menu+0x1a24>)
 8002d18:	2101      	movs	r1, #1
 8002d1a:	2002      	movs	r0, #2
 8002d1c:	f005 f836 	bl	8007d8c <lcd_print>
 8002d20:	e042      	b.n	8002da8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <menu+0x1a04>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d13e      	bne.n	8002da8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <menu+0x1a28>)
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	2002      	movs	r0, #2
 8002d30:	f005 f82c 	bl	8007d8c <lcd_print>
 8002d34:	e038      	b.n	8002da8 <menu+0x1a58>
 8002d36:	bf00      	nop
 8002d38:	2000022f 	.word	0x2000022f
 8002d3c:	0800d5bc 	.word	0x0800d5bc
 8002d40:	40010800 	.word	0x40010800
 8002d44:	20000253 	.word	0x20000253
 8002d48:	20000128 	.word	0x20000128
 8002d4c:	20000250 	.word	0x20000250
 8002d50:	20000224 	.word	0x20000224
 8002d54:	20000245 	.word	0x20000245
 8002d58:	0800d68c 	.word	0x0800d68c
 8002d5c:	0800d6a0 	.word	0x0800d6a0
 8002d60:	20000231 	.word	0x20000231
 8002d64:	0800d6b4 	.word	0x0800d6b4
 8002d68:	0800d6c4 	.word	0x0800d6c4
 8002d6c:	0800d6d4 	.word	0x0800d6d4
 8002d70:	0800d6e4 	.word	0x0800d6e4
 8002d74:	0800d6f4 	.word	0x0800d6f4
 8002d78:	0800d708 	.word	0x0800d708
			}
		} else if(kapiTablaAcKonum == 3) {
 8002d7c:	4b9b      	ldr	r3, [pc, #620]	; (8002fec <menu+0x1c9c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d111      	bne.n	8002da8 <menu+0x1a58>
			if(dilSecim == 0) {
 8002d84:	4b9a      	ldr	r3, [pc, #616]	; (8002ff0 <menu+0x1ca0>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002d8c:	4a99      	ldr	r2, [pc, #612]	; (8002ff4 <menu+0x1ca4>)
 8002d8e:	2101      	movs	r1, #1
 8002d90:	2002      	movs	r0, #2
 8002d92:	f004 fffb 	bl	8007d8c <lcd_print>
			}
			if(dilSecim == 1) {
 8002d96:	4b96      	ldr	r3, [pc, #600]	; (8002ff0 <menu+0x1ca0>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d104      	bne.n	8002da8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002d9e:	4a96      	ldr	r2, [pc, #600]	; (8002ff8 <menu+0x1ca8>)
 8002da0:	2101      	movs	r1, #1
 8002da2:	2002      	movs	r0, #2
 8002da4:	f004 fff2 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002da8:	2102      	movs	r1, #2
 8002daa:	4894      	ldr	r0, [pc, #592]	; (8002ffc <menu+0x1cac>)
 8002dac:	f006 fb14 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d115      	bne.n	8002de2 <menu+0x1a92>
 8002db6:	4b92      	ldr	r3, [pc, #584]	; (8003000 <menu+0x1cb0>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	f083 0301 	eor.w	r3, r3, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00e      	beq.n	8002de2 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002dc4:	4b89      	ldr	r3, [pc, #548]	; (8002fec <menu+0x1c9c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b87      	ldr	r3, [pc, #540]	; (8002fec <menu+0x1c9c>)
 8002dce:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002dd0:	4b86      	ldr	r3, [pc, #536]	; (8002fec <menu+0x1c9c>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d902      	bls.n	8002dde <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002dd8:	4b84      	ldr	r3, [pc, #528]	; (8002fec <menu+0x1c9c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dde:	f001 fe61 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002de2:	2104      	movs	r1, #4
 8002de4:	4885      	ldr	r0, [pc, #532]	; (8002ffc <menu+0x1cac>)
 8002de6:	f006 faf7 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d115      	bne.n	8002e1c <menu+0x1acc>
 8002df0:	4b83      	ldr	r3, [pc, #524]	; (8003000 <menu+0x1cb0>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	f083 0301 	eor.w	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00e      	beq.n	8002e1c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002dfe:	4b7b      	ldr	r3, [pc, #492]	; (8002fec <menu+0x1c9c>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4b79      	ldr	r3, [pc, #484]	; (8002fec <menu+0x1c9c>)
 8002e08:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002e0a:	4b78      	ldr	r3, [pc, #480]	; (8002fec <menu+0x1c9c>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d902      	bls.n	8002e18 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002e12:	4b76      	ldr	r3, [pc, #472]	; (8002fec <menu+0x1c9c>)
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e18:	f001 fe44 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e1c:	2108      	movs	r1, #8
 8002e1e:	4877      	ldr	r0, [pc, #476]	; (8002ffc <menu+0x1cac>)
 8002e20:	f006 fada 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d11d      	bne.n	8002e66 <menu+0x1b16>
 8002e2a:	4b75      	ldr	r3, [pc, #468]	; (8003000 <menu+0x1cb0>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	f083 0301 	eor.w	r3, r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d016      	beq.n	8002e66 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e38:	4b6c      	ldr	r3, [pc, #432]	; (8002fec <menu+0x1c9c>)
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	4b71      	ldr	r3, [pc, #452]	; (8003004 <menu+0x1cb4>)
 8002e3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002e42:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <menu+0x1c9c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <menu+0x1b02>
 8002e4a:	4b68      	ldr	r3, [pc, #416]	; (8002fec <menu+0x1c9c>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d106      	bne.n	8002e60 <menu+0x1b10>
				altLimit = 1;
 8002e52:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <menu+0x1cb8>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e58:	4b6b      	ldr	r3, [pc, #428]	; (8003008 <menu+0x1cb8>)
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	4b69      	ldr	r3, [pc, #420]	; (8003004 <menu+0x1cb4>)
 8002e5e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <menu+0x1cbc>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002e66:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <menu+0x1cc0>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d17f      	bne.n	8002f6e <menu+0x1c1e>
		if(dilSecim == 0) {
 8002e6e:	4b60      	ldr	r3, [pc, #384]	; (8002ff0 <menu+0x1ca0>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002e76:	4a67      	ldr	r2, [pc, #412]	; (8003014 <menu+0x1cc4>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f004 ff86 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002e80:	4a65      	ldr	r2, [pc, #404]	; (8003018 <menu+0x1cc8>)
 8002e82:	2101      	movs	r1, #1
 8002e84:	2002      	movs	r0, #2
 8002e86:	f004 ff81 	bl	8007d8c <lcd_print>
 8002e8a:	e00d      	b.n	8002ea8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002e8c:	4b58      	ldr	r3, [pc, #352]	; (8002ff0 <menu+0x1ca0>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d109      	bne.n	8002ea8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002e94:	4a61      	ldr	r2, [pc, #388]	; (800301c <menu+0x1ccc>)
 8002e96:	2101      	movs	r1, #1
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f004 ff77 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002e9e:	4a60      	ldr	r2, [pc, #384]	; (8003020 <menu+0x1cd0>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	f004 ff72 	bl	8007d8c <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002ea8:	4b5e      	ldr	r3, [pc, #376]	; (8003024 <menu+0x1cd4>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	220a      	movs	r2, #10
 8002eae:	495e      	ldr	r1, [pc, #376]	; (8003028 <menu+0x1cd8>)
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f009 fabd 	bl	800c430 <itoa>
		lcd_print(2,16,snum);
 8002eb6:	4a5c      	ldr	r2, [pc, #368]	; (8003028 <menu+0x1cd8>)
 8002eb8:	2110      	movs	r1, #16
 8002eba:	2002      	movs	r0, #2
 8002ebc:	f004 ff66 	bl	8007d8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	484e      	ldr	r0, [pc, #312]	; (8002ffc <menu+0x1cac>)
 8002ec4:	f006 fa88 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d119      	bne.n	8002f02 <menu+0x1bb2>
 8002ece:	4b4c      	ldr	r3, [pc, #304]	; (8003000 <menu+0x1cb0>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	f083 0301 	eor.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d012      	beq.n	8002f02 <menu+0x1bb2>
 8002edc:	4b53      	ldr	r3, [pc, #332]	; (800302c <menu+0x1cdc>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10e      	bne.n	8002f02 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	; (8003024 <menu+0x1cd4>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	4b4d      	ldr	r3, [pc, #308]	; (8003024 <menu+0x1cd4>)
 8002eee:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <menu+0x1cd4>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d902      	bls.n	8002efe <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <menu+0x1cd4>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002efe:	f001 fdd1 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f02:	2104      	movs	r1, #4
 8002f04:	483d      	ldr	r0, [pc, #244]	; (8002ffc <menu+0x1cac>)
 8002f06:	f006 fa67 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d119      	bne.n	8002f44 <menu+0x1bf4>
 8002f10:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <menu+0x1cb0>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d012      	beq.n	8002f44 <menu+0x1bf4>
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <menu+0x1cdc>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10e      	bne.n	8002f44 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <menu+0x1cd4>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <menu+0x1cd4>)
 8002f30:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f32:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <menu+0x1cd4>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f3a:	4b3a      	ldr	r3, [pc, #232]	; (8003024 <menu+0x1cd4>)
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002f40:	f001 fdb0 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f44:	2108      	movs	r1, #8
 8002f46:	482d      	ldr	r0, [pc, #180]	; (8002ffc <menu+0x1cac>)
 8002f48:	f006 fa46 	bl	80093d8 <HAL_GPIO_ReadPin>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10d      	bne.n	8002f6e <menu+0x1c1e>
 8002f52:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <menu+0x1cb0>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002f60:	4b30      	ldr	r3, [pc, #192]	; (8003024 <menu+0x1cd4>)
 8002f62:	781a      	ldrb	r2, [r3, #0]
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <menu+0x1cb4>)
 8002f66:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002f68:	4b28      	ldr	r3, [pc, #160]	; (800300c <menu+0x1cbc>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <menu+0x1cc0>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	f040 80bc 	bne.w	80030f0 <menu+0x1da0>
		if(dilSecim == 0) {
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <menu+0x1ca0>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002f80:	4a2b      	ldr	r2, [pc, #172]	; (8003030 <menu+0x1ce0>)
 8002f82:	2101      	movs	r1, #1
 8002f84:	2001      	movs	r0, #1
 8002f86:	f004 ff01 	bl	8007d8c <lcd_print>
 8002f8a:	e008      	b.n	8002f9e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <menu+0x1ca0>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d104      	bne.n	8002f9e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002f94:	4a27      	ldr	r2, [pc, #156]	; (8003034 <menu+0x1ce4>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f004 fef7 	bl	8007d8c <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002f9e:	4b26      	ldr	r3, [pc, #152]	; (8003038 <menu+0x1ce8>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d113      	bne.n	8002fce <menu+0x1c7e>
			if(dilSecim == 0) {
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <menu+0x1ca0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002fae:	4a11      	ldr	r2, [pc, #68]	; (8002ff4 <menu+0x1ca4>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f004 feea 	bl	8007d8c <lcd_print>
 8002fb8:	e04b      	b.n	8003052 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <menu+0x1ca0>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d147      	bne.n	8003052 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002fc2:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <menu+0x1ca8>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f004 fee0 	bl	8007d8c <lcd_print>
 8002fcc:	e041      	b.n	8003052 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <menu+0x1ce8>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d13d      	bne.n	8003052 <menu+0x1d02>
			if(dilSecim == 0) {
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <menu+0x1ca0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d130      	bne.n	8003040 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <menu+0x1cec>)
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	2002      	movs	r0, #2
 8002fe4:	f004 fed2 	bl	8007d8c <lcd_print>
 8002fe8:	e033      	b.n	8003052 <menu+0x1d02>
 8002fea:	bf00      	nop
 8002fec:	20000231 	.word	0x20000231
 8002ff0:	20000245 	.word	0x20000245
 8002ff4:	0800d37c 	.word	0x0800d37c
 8002ff8:	0800d390 	.word	0x0800d390
 8002ffc:	40010800 	.word	0x40010800
 8003000:	20000253 	.word	0x20000253
 8003004:	20000128 	.word	0x20000128
 8003008:	2000022a 	.word	0x2000022a
 800300c:	20000250 	.word	0x20000250
 8003010:	20000224 	.word	0x20000224
 8003014:	0800d71c 	.word	0x0800d71c
 8003018:	0800d5e0 	.word	0x0800d5e0
 800301c:	0800d730 	.word	0x0800d730
 8003020:	0800d604 	.word	0x0800d604
 8003024:	2000023f 	.word	0x2000023f
 8003028:	20000198 	.word	0x20000198
 800302c:	2000022f 	.word	0x2000022f
 8003030:	0800d744 	.word	0x0800d744
 8003034:	0800d758 	.word	0x0800d758
 8003038:	20000232 	.word	0x20000232
 800303c:	0800d3dc 	.word	0x0800d3dc
			} else if(dilSecim == 1) {
 8003040:	4b99      	ldr	r3, [pc, #612]	; (80032a8 <menu+0x1f58>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d104      	bne.n	8003052 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003048:	4a98      	ldr	r2, [pc, #608]	; (80032ac <menu+0x1f5c>)
 800304a:	2101      	movs	r1, #1
 800304c:	2002      	movs	r0, #2
 800304e:	f004 fe9d 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003052:	2102      	movs	r1, #2
 8003054:	4896      	ldr	r0, [pc, #600]	; (80032b0 <menu+0x1f60>)
 8003056:	f006 f9bf 	bl	80093d8 <HAL_GPIO_ReadPin>
 800305a:	4603      	mov	r3, r0
 800305c:	2b01      	cmp	r3, #1
 800305e:	d115      	bne.n	800308c <menu+0x1d3c>
 8003060:	4b94      	ldr	r3, [pc, #592]	; (80032b4 <menu+0x1f64>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	f083 0301 	eor.w	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00e      	beq.n	800308c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800306e:	4b92      	ldr	r3, [pc, #584]	; (80032b8 <menu+0x1f68>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4b90      	ldr	r3, [pc, #576]	; (80032b8 <menu+0x1f68>)
 8003078:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800307a:	4b8f      	ldr	r3, [pc, #572]	; (80032b8 <menu+0x1f68>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d902      	bls.n	8003088 <menu+0x1d38>
				yukariYavasLimit = 0;
 8003082:	4b8d      	ldr	r3, [pc, #564]	; (80032b8 <menu+0x1f68>)
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003088:	f001 fd0c 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800308c:	2104      	movs	r1, #4
 800308e:	4888      	ldr	r0, [pc, #544]	; (80032b0 <menu+0x1f60>)
 8003090:	f006 f9a2 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003094:	4603      	mov	r3, r0
 8003096:	2b01      	cmp	r3, #1
 8003098:	d115      	bne.n	80030c6 <menu+0x1d76>
 800309a:	4b86      	ldr	r3, [pc, #536]	; (80032b4 <menu+0x1f64>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	f083 0301 	eor.w	r3, r3, #1
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00e      	beq.n	80030c6 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80030a8:	4b83      	ldr	r3, [pc, #524]	; (80032b8 <menu+0x1f68>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <menu+0x1f68>)
 80030b2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80030b4:	4b80      	ldr	r3, [pc, #512]	; (80032b8 <menu+0x1f68>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80030bc:	4b7e      	ldr	r3, [pc, #504]	; (80032b8 <menu+0x1f68>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030c2:	f001 fcef 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030c6:	2108      	movs	r1, #8
 80030c8:	4879      	ldr	r0, [pc, #484]	; (80032b0 <menu+0x1f60>)
 80030ca:	f006 f985 	bl	80093d8 <HAL_GPIO_ReadPin>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10d      	bne.n	80030f0 <menu+0x1da0>
 80030d4:	4b77      	ldr	r3, [pc, #476]	; (80032b4 <menu+0x1f64>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	f083 0301 	eor.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80030e2:	4b75      	ldr	r3, [pc, #468]	; (80032b8 <menu+0x1f68>)
 80030e4:	781a      	ldrb	r2, [r3, #0]
 80030e6:	4b75      	ldr	r3, [pc, #468]	; (80032bc <menu+0x1f6c>)
 80030e8:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80030ea:	4b75      	ldr	r3, [pc, #468]	; (80032c0 <menu+0x1f70>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80030f0:	4b74      	ldr	r3, [pc, #464]	; (80032c4 <menu+0x1f74>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b11      	cmp	r3, #17
 80030f6:	f040 80c3 	bne.w	8003280 <menu+0x1f30>
		if(dilSecim == 0) {
 80030fa:	4b6b      	ldr	r3, [pc, #428]	; (80032a8 <menu+0x1f58>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d105      	bne.n	800310e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003102:	4a71      	ldr	r2, [pc, #452]	; (80032c8 <menu+0x1f78>)
 8003104:	2101      	movs	r1, #1
 8003106:	2001      	movs	r0, #1
 8003108:	f004 fe40 	bl	8007d8c <lcd_print>
 800310c:	e008      	b.n	8003120 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800310e:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <menu+0x1f58>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d104      	bne.n	8003120 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003116:	4a6d      	ldr	r2, [pc, #436]	; (80032cc <menu+0x1f7c>)
 8003118:	2101      	movs	r1, #1
 800311a:	2001      	movs	r0, #1
 800311c:	f004 fe36 	bl	8007d8c <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003120:	4b6b      	ldr	r3, [pc, #428]	; (80032d0 <menu+0x1f80>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d113      	bne.n	8003150 <menu+0x1e00>
			if(dilSecim == 0){
 8003128:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <menu+0x1f58>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003130:	4a68      	ldr	r2, [pc, #416]	; (80032d4 <menu+0x1f84>)
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f004 fe29 	bl	8007d8c <lcd_print>
 800313a:	e038      	b.n	80031ae <menu+0x1e5e>
			} else if(dilSecim == 1){
 800313c:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <menu+0x1f58>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d134      	bne.n	80031ae <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003144:	4a64      	ldr	r2, [pc, #400]	; (80032d8 <menu+0x1f88>)
 8003146:	2101      	movs	r1, #1
 8003148:	2002      	movs	r0, #2
 800314a:	f004 fe1f 	bl	8007d8c <lcd_print>
 800314e:	e02e      	b.n	80031ae <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003150:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <menu+0x1f80>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d113      	bne.n	8003180 <menu+0x1e30>
			if(dilSecim == 0){
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <menu+0x1f58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003160:	4a5e      	ldr	r2, [pc, #376]	; (80032dc <menu+0x1f8c>)
 8003162:	2101      	movs	r1, #1
 8003164:	2002      	movs	r0, #2
 8003166:	f004 fe11 	bl	8007d8c <lcd_print>
 800316a:	e020      	b.n	80031ae <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800316c:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <menu+0x1f58>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d11c      	bne.n	80031ae <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003174:	4a5a      	ldr	r2, [pc, #360]	; (80032e0 <menu+0x1f90>)
 8003176:	2101      	movs	r1, #1
 8003178:	2002      	movs	r0, #2
 800317a:	f004 fe07 	bl	8007d8c <lcd_print>
 800317e:	e016      	b.n	80031ae <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <menu+0x1f80>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d112      	bne.n	80031ae <menu+0x1e5e>
			if(dilSecim == 0) {
 8003188:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <menu+0x1f58>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003190:	4a54      	ldr	r2, [pc, #336]	; (80032e4 <menu+0x1f94>)
 8003192:	2101      	movs	r1, #1
 8003194:	2002      	movs	r0, #2
 8003196:	f004 fdf9 	bl	8007d8c <lcd_print>
 800319a:	e008      	b.n	80031ae <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800319c:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <menu+0x1f58>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d104      	bne.n	80031ae <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80031a4:	4a50      	ldr	r2, [pc, #320]	; (80032e8 <menu+0x1f98>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2002      	movs	r0, #2
 80031aa:	f004 fdef 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ae:	2102      	movs	r1, #2
 80031b0:	483f      	ldr	r0, [pc, #252]	; (80032b0 <menu+0x1f60>)
 80031b2:	f006 f911 	bl	80093d8 <HAL_GPIO_ReadPin>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d115      	bne.n	80031e8 <menu+0x1e98>
 80031bc:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <menu+0x1f64>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	f083 0301 	eor.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00e      	beq.n	80031e8 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <menu+0x1f80>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <menu+0x1f80>)
 80031d4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80031d6:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <menu+0x1f80>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d902      	bls.n	80031e4 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80031de:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <menu+0x1f80>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031e4:	f001 fc5e 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031e8:	2104      	movs	r1, #4
 80031ea:	4831      	ldr	r0, [pc, #196]	; (80032b0 <menu+0x1f60>)
 80031ec:	f006 f8f4 	bl	80093d8 <HAL_GPIO_ReadPin>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d115      	bne.n	8003222 <menu+0x1ed2>
 80031f6:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <menu+0x1f64>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	f083 0301 	eor.w	r3, r3, #1
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <menu+0x1f80>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	3b01      	subs	r3, #1
 800320a:	b2da      	uxtb	r2, r3
 800320c:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <menu+0x1f80>)
 800320e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003210:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <menu+0x1f80>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d902      	bls.n	800321e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003218:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <menu+0x1f80>)
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800321e:	f001 fc41 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003222:	2108      	movs	r1, #8
 8003224:	4822      	ldr	r0, [pc, #136]	; (80032b0 <menu+0x1f60>)
 8003226:	f006 f8d7 	bl	80093d8 <HAL_GPIO_ReadPin>
 800322a:	4603      	mov	r3, r0
 800322c:	2b01      	cmp	r3, #1
 800322e:	d127      	bne.n	8003280 <menu+0x1f30>
 8003230:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <menu+0x1f64>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	f083 0301 	eor.w	r3, r3, #1
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <menu+0x1f80>)
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <menu+0x1f6c>)
 8003244:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <menu+0x1f80>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d003      	beq.n	8003256 <menu+0x1f06>
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <menu+0x1f80>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d106      	bne.n	8003264 <menu+0x1f14>
				calismaSekli = 0;
 8003256:	4b25      	ldr	r3, [pc, #148]	; (80032ec <menu+0x1f9c>)
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800325c:	4b23      	ldr	r3, [pc, #140]	; (80032ec <menu+0x1f9c>)
 800325e:	781a      	ldrb	r2, [r3, #0]
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <menu+0x1f6c>)
 8003262:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <menu+0x1f80>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800326c:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <menu+0x1fa0>)
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <menu+0x1fa0>)
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <menu+0x1f6c>)
 8003278:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <menu+0x1f70>)
 800327c:	2201      	movs	r2, #1
 800327e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <menu+0x1f74>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b12      	cmp	r3, #18
 8003286:	f040 80d5 	bne.w	8003434 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <menu+0x1f80>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d13c      	bne.n	800330c <menu+0x1fbc>
			if(dilSecim == 0) {
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <menu+0x1f58>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d12e      	bne.n	80032f8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800329a:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <menu+0x1fa4>)
 800329c:	2101      	movs	r1, #1
 800329e:	2001      	movs	r0, #1
 80032a0:	f004 fd74 	bl	8007d8c <lcd_print>
 80032a4:	e048      	b.n	8003338 <menu+0x1fe8>
 80032a6:	bf00      	nop
 80032a8:	20000245 	.word	0x20000245
 80032ac:	0800d3f0 	.word	0x0800d3f0
 80032b0:	40010800 	.word	0x40010800
 80032b4:	20000253 	.word	0x20000253
 80032b8:	20000232 	.word	0x20000232
 80032bc:	20000128 	.word	0x20000128
 80032c0:	20000250 	.word	0x20000250
 80032c4:	20000224 	.word	0x20000224
 80032c8:	0800d76c 	.word	0x0800d76c
 80032cc:	0800d780 	.word	0x0800d780
 80032d0:	20000233 	.word	0x20000233
 80032d4:	0800d794 	.word	0x0800d794
 80032d8:	0800d7a4 	.word	0x0800d7a4
 80032dc:	0800d7b4 	.word	0x0800d7b4
 80032e0:	0800d7c4 	.word	0x0800d7c4
 80032e4:	0800d37c 	.word	0x0800d37c
 80032e8:	0800d390 	.word	0x0800d390
 80032ec:	20000225 	.word	0x20000225
 80032f0:	20000236 	.word	0x20000236
 80032f4:	0800d7d4 	.word	0x0800d7d4
			} else if(dilSecim == 1) {
 80032f8:	4b7b      	ldr	r3, [pc, #492]	; (80034e8 <menu+0x2198>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d11b      	bne.n	8003338 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003300:	4a7a      	ldr	r2, [pc, #488]	; (80034ec <menu+0x219c>)
 8003302:	2101      	movs	r1, #1
 8003304:	2001      	movs	r0, #1
 8003306:	f004 fd41 	bl	8007d8c <lcd_print>
 800330a:	e015      	b.n	8003338 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800330c:	4b78      	ldr	r3, [pc, #480]	; (80034f0 <menu+0x21a0>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d111      	bne.n	8003338 <menu+0x1fe8>
			if(dilSecim == 0){
 8003314:	4b74      	ldr	r3, [pc, #464]	; (80034e8 <menu+0x2198>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800331c:	4a75      	ldr	r2, [pc, #468]	; (80034f4 <menu+0x21a4>)
 800331e:	2101      	movs	r1, #1
 8003320:	2001      	movs	r0, #1
 8003322:	f004 fd33 	bl	8007d8c <lcd_print>
			}
			if(dilSecim == 1){
 8003326:	4b70      	ldr	r3, [pc, #448]	; (80034e8 <menu+0x2198>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d104      	bne.n	8003338 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800332e:	4a72      	ldr	r2, [pc, #456]	; (80034f8 <menu+0x21a8>)
 8003330:	2101      	movs	r1, #1
 8003332:	2001      	movs	r0, #1
 8003334:	f004 fd2a 	bl	8007d8c <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003338:	4b70      	ldr	r3, [pc, #448]	; (80034fc <menu+0x21ac>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d113      	bne.n	8003368 <menu+0x2018>
			if(dilSecim == 0) {
 8003340:	4b69      	ldr	r3, [pc, #420]	; (80034e8 <menu+0x2198>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003348:	4a6d      	ldr	r2, [pc, #436]	; (8003500 <menu+0x21b0>)
 800334a:	2101      	movs	r1, #1
 800334c:	2002      	movs	r0, #2
 800334e:	f004 fd1d 	bl	8007d8c <lcd_print>
 8003352:	e020      	b.n	8003396 <menu+0x2046>
			} else if(dilSecim == 1){
 8003354:	4b64      	ldr	r3, [pc, #400]	; (80034e8 <menu+0x2198>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d11c      	bne.n	8003396 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800335c:	4a69      	ldr	r2, [pc, #420]	; (8003504 <menu+0x21b4>)
 800335e:	2101      	movs	r1, #1
 8003360:	2002      	movs	r0, #2
 8003362:	f004 fd13 	bl	8007d8c <lcd_print>
 8003366:	e016      	b.n	8003396 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003368:	4b64      	ldr	r3, [pc, #400]	; (80034fc <menu+0x21ac>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d112      	bne.n	8003396 <menu+0x2046>
			if(dilSecim == 0){
 8003370:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <menu+0x2198>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003378:	4a63      	ldr	r2, [pc, #396]	; (8003508 <menu+0x21b8>)
 800337a:	2101      	movs	r1, #1
 800337c:	2002      	movs	r0, #2
 800337e:	f004 fd05 	bl	8007d8c <lcd_print>
 8003382:	e008      	b.n	8003396 <menu+0x2046>
			} else if(dilSecim == 1){
 8003384:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <menu+0x2198>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d104      	bne.n	8003396 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800338c:	4a5f      	ldr	r2, [pc, #380]	; (800350c <menu+0x21bc>)
 800338e:	2101      	movs	r1, #1
 8003390:	2002      	movs	r0, #2
 8003392:	f004 fcfb 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003396:	2102      	movs	r1, #2
 8003398:	485d      	ldr	r0, [pc, #372]	; (8003510 <menu+0x21c0>)
 800339a:	f006 f81d 	bl	80093d8 <HAL_GPIO_ReadPin>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d115      	bne.n	80033d0 <menu+0x2080>
 80033a4:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <menu+0x21c4>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	f083 0301 	eor.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00e      	beq.n	80033d0 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80033b2:	4b52      	ldr	r3, [pc, #328]	; (80034fc <menu+0x21ac>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	3301      	adds	r3, #1
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4b50      	ldr	r3, [pc, #320]	; (80034fc <menu+0x21ac>)
 80033bc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80033be:	4b4f      	ldr	r3, [pc, #316]	; (80034fc <menu+0x21ac>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d902      	bls.n	80033cc <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80033c6:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <menu+0x21ac>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033cc:	f001 fb6a 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033d0:	2104      	movs	r1, #4
 80033d2:	484f      	ldr	r0, [pc, #316]	; (8003510 <menu+0x21c0>)
 80033d4:	f006 f800 	bl	80093d8 <HAL_GPIO_ReadPin>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d115      	bne.n	800340a <menu+0x20ba>
 80033de:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <menu+0x21c4>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	f083 0301 	eor.w	r3, r3, #1
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80033ec:	4b43      	ldr	r3, [pc, #268]	; (80034fc <menu+0x21ac>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b41      	ldr	r3, [pc, #260]	; (80034fc <menu+0x21ac>)
 80033f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80033f8:	4b40      	ldr	r3, [pc, #256]	; (80034fc <menu+0x21ac>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003400:	4b3e      	ldr	r3, [pc, #248]	; (80034fc <menu+0x21ac>)
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003406:	f001 fb4d 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800340a:	2108      	movs	r1, #8
 800340c:	4840      	ldr	r0, [pc, #256]	; (8003510 <menu+0x21c0>)
 800340e:	f005 ffe3 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10d      	bne.n	8003434 <menu+0x20e4>
 8003418:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <menu+0x21c4>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f083 0301 	eor.w	r3, r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003426:	4b35      	ldr	r3, [pc, #212]	; (80034fc <menu+0x21ac>)
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <menu+0x21c8>)
 800342c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <menu+0x21cc>)
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <menu+0x21d0>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b13      	cmp	r3, #19
 800343a:	f040 80d5 	bne.w	80035e8 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <menu+0x21a0>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d113      	bne.n	800346e <menu+0x211e>
			if(dilSecim == 0) {
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <menu+0x2198>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800344e:	4a35      	ldr	r2, [pc, #212]	; (8003524 <menu+0x21d4>)
 8003450:	2101      	movs	r1, #1
 8003452:	2001      	movs	r0, #1
 8003454:	f004 fc9a 	bl	8007d8c <lcd_print>
 8003458:	e01f      	b.n	800349a <menu+0x214a>
			} else if(dilSecim == 1) {
 800345a:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <menu+0x2198>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d11b      	bne.n	800349a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003462:	4a31      	ldr	r2, [pc, #196]	; (8003528 <menu+0x21d8>)
 8003464:	2101      	movs	r1, #1
 8003466:	2001      	movs	r0, #1
 8003468:	f004 fc90 	bl	8007d8c <lcd_print>
 800346c:	e015      	b.n	800349a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <menu+0x21a0>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d111      	bne.n	800349a <menu+0x214a>
			if(dilSecim == 0) {
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <menu+0x2198>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d104      	bne.n	8003488 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800347e:	4a2b      	ldr	r2, [pc, #172]	; (800352c <menu+0x21dc>)
 8003480:	2101      	movs	r1, #1
 8003482:	2001      	movs	r0, #1
 8003484:	f004 fc82 	bl	8007d8c <lcd_print>
			}
			if(dilSecim == 1) {
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <menu+0x2198>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d104      	bne.n	800349a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003490:	4a27      	ldr	r2, [pc, #156]	; (8003530 <menu+0x21e0>)
 8003492:	2101      	movs	r1, #1
 8003494:	2001      	movs	r0, #1
 8003496:	f004 fc79 	bl	8007d8c <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800349a:	4b26      	ldr	r3, [pc, #152]	; (8003534 <menu+0x21e4>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d113      	bne.n	80034ca <menu+0x217a>
			if(dilSecim == 0) {
 80034a2:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <menu+0x2198>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d105      	bne.n	80034b6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <menu+0x21b0>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	2002      	movs	r0, #2
 80034b0:	f004 fc6c 	bl	8007d8c <lcd_print>
 80034b4:	e049      	b.n	800354a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <menu+0x2198>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d145      	bne.n	800354a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80034be:	4a11      	ldr	r2, [pc, #68]	; (8003504 <menu+0x21b4>)
 80034c0:	2101      	movs	r1, #1
 80034c2:	2002      	movs	r0, #2
 80034c4:	f004 fc62 	bl	8007d8c <lcd_print>
 80034c8:	e03f      	b.n	800354a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80034ca:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <menu+0x21e4>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d13b      	bne.n	800354a <menu+0x21fa>
			if(dilSecim == 0) {
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <menu+0x2198>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d12e      	bne.n	8003538 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80034da:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <menu+0x21b8>)
 80034dc:	2101      	movs	r1, #1
 80034de:	2002      	movs	r0, #2
 80034e0:	f004 fc54 	bl	8007d8c <lcd_print>
 80034e4:	e031      	b.n	800354a <menu+0x21fa>
 80034e6:	bf00      	nop
 80034e8:	20000245 	.word	0x20000245
 80034ec:	0800d7e8 	.word	0x0800d7e8
 80034f0:	20000233 	.word	0x20000233
 80034f4:	0800d7f8 	.word	0x0800d7f8
 80034f8:	0800d80c 	.word	0x0800d80c
 80034fc:	20000234 	.word	0x20000234
 8003500:	0800d37c 	.word	0x0800d37c
 8003504:	0800d390 	.word	0x0800d390
 8003508:	0800d3dc 	.word	0x0800d3dc
 800350c:	0800d3f0 	.word	0x0800d3f0
 8003510:	40010800 	.word	0x40010800
 8003514:	20000253 	.word	0x20000253
 8003518:	20000128 	.word	0x20000128
 800351c:	20000250 	.word	0x20000250
 8003520:	20000224 	.word	0x20000224
 8003524:	0800d820 	.word	0x0800d820
 8003528:	0800d834 	.word	0x0800d834
 800352c:	0800d848 	.word	0x0800d848
 8003530:	0800d85c 	.word	0x0800d85c
 8003534:	20000235 	.word	0x20000235
			} else if(dilSecim == 1) {
 8003538:	4b90      	ldr	r3, [pc, #576]	; (800377c <menu+0x242c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d104      	bne.n	800354a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003540:	4a8f      	ldr	r2, [pc, #572]	; (8003780 <menu+0x2430>)
 8003542:	2101      	movs	r1, #1
 8003544:	2002      	movs	r0, #2
 8003546:	f004 fc21 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800354a:	2102      	movs	r1, #2
 800354c:	488d      	ldr	r0, [pc, #564]	; (8003784 <menu+0x2434>)
 800354e:	f005 ff43 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003552:	4603      	mov	r3, r0
 8003554:	2b01      	cmp	r3, #1
 8003556:	d115      	bne.n	8003584 <menu+0x2234>
 8003558:	4b8b      	ldr	r3, [pc, #556]	; (8003788 <menu+0x2438>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	f083 0301 	eor.w	r3, r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00e      	beq.n	8003584 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003566:	4b89      	ldr	r3, [pc, #548]	; (800378c <menu+0x243c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b87      	ldr	r3, [pc, #540]	; (800378c <menu+0x243c>)
 8003570:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003572:	4b86      	ldr	r3, [pc, #536]	; (800378c <menu+0x243c>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d902      	bls.n	8003580 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800357a:	4b84      	ldr	r3, [pc, #528]	; (800378c <menu+0x243c>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003580:	f001 fa90 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003584:	2104      	movs	r1, #4
 8003586:	487f      	ldr	r0, [pc, #508]	; (8003784 <menu+0x2434>)
 8003588:	f005 ff26 	bl	80093d8 <HAL_GPIO_ReadPin>
 800358c:	4603      	mov	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d115      	bne.n	80035be <menu+0x226e>
 8003592:	4b7d      	ldr	r3, [pc, #500]	; (8003788 <menu+0x2438>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	f083 0301 	eor.w	r3, r3, #1
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00e      	beq.n	80035be <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80035a0:	4b7a      	ldr	r3, [pc, #488]	; (800378c <menu+0x243c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	4b78      	ldr	r3, [pc, #480]	; (800378c <menu+0x243c>)
 80035aa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80035ac:	4b77      	ldr	r3, [pc, #476]	; (800378c <menu+0x243c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80035b4:	4b75      	ldr	r3, [pc, #468]	; (800378c <menu+0x243c>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035ba:	f001 fa73 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035be:	2108      	movs	r1, #8
 80035c0:	4870      	ldr	r0, [pc, #448]	; (8003784 <menu+0x2434>)
 80035c2:	f005 ff09 	bl	80093d8 <HAL_GPIO_ReadPin>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10d      	bne.n	80035e8 <menu+0x2298>
 80035cc:	4b6e      	ldr	r3, [pc, #440]	; (8003788 <menu+0x2438>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80035da:	4b6c      	ldr	r3, [pc, #432]	; (800378c <menu+0x243c>)
 80035dc:	781a      	ldrb	r2, [r3, #0]
 80035de:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <menu+0x2440>)
 80035e0:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80035e2:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <menu+0x2444>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80035e8:	4b6b      	ldr	r3, [pc, #428]	; (8003798 <menu+0x2448>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b14      	cmp	r3, #20
 80035ee:	f040 80b5 	bne.w	800375c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <menu+0x244c>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d113      	bne.n	8003622 <menu+0x22d2>
			if(dilSecim == 0) {
 80035fa:	4b60      	ldr	r3, [pc, #384]	; (800377c <menu+0x242c>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003602:	4a67      	ldr	r2, [pc, #412]	; (80037a0 <menu+0x2450>)
 8003604:	2101      	movs	r1, #1
 8003606:	2001      	movs	r0, #1
 8003608:	f004 fbc0 	bl	8007d8c <lcd_print>
 800360c:	e020      	b.n	8003650 <menu+0x2300>
			} else if(dilSecim == 1) {
 800360e:	4b5b      	ldr	r3, [pc, #364]	; (800377c <menu+0x242c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d11c      	bne.n	8003650 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003616:	4a63      	ldr	r2, [pc, #396]	; (80037a4 <menu+0x2454>)
 8003618:	2101      	movs	r1, #1
 800361a:	2001      	movs	r0, #1
 800361c:	f004 fbb6 	bl	8007d8c <lcd_print>
 8003620:	e016      	b.n	8003650 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003622:	4b5e      	ldr	r3, [pc, #376]	; (800379c <menu+0x244c>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d112      	bne.n	8003650 <menu+0x2300>
			if(dilSecim == 0) {
 800362a:	4b54      	ldr	r3, [pc, #336]	; (800377c <menu+0x242c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003632:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <menu+0x2458>)
 8003634:	2101      	movs	r1, #1
 8003636:	2001      	movs	r0, #1
 8003638:	f004 fba8 	bl	8007d8c <lcd_print>
 800363c:	e008      	b.n	8003650 <menu+0x2300>
			} else if(dilSecim == 1) {
 800363e:	4b4f      	ldr	r3, [pc, #316]	; (800377c <menu+0x242c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d104      	bne.n	8003650 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003646:	4a59      	ldr	r2, [pc, #356]	; (80037ac <menu+0x245c>)
 8003648:	2101      	movs	r1, #1
 800364a:	2001      	movs	r0, #1
 800364c:	f004 fb9e 	bl	8007d8c <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003650:	4b57      	ldr	r3, [pc, #348]	; (80037b0 <menu+0x2460>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <menu+0x2330>
			if(dilSecim == 0) {
 8003658:	4b48      	ldr	r3, [pc, #288]	; (800377c <menu+0x242c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003660:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <menu+0x2464>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f004 fb91 	bl	8007d8c <lcd_print>
 800366a:	e020      	b.n	80036ae <menu+0x235e>
			} else if(dilSecim == 1) {
 800366c:	4b43      	ldr	r3, [pc, #268]	; (800377c <menu+0x242c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d11c      	bne.n	80036ae <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003674:	4a50      	ldr	r2, [pc, #320]	; (80037b8 <menu+0x2468>)
 8003676:	2101      	movs	r1, #1
 8003678:	2002      	movs	r0, #2
 800367a:	f004 fb87 	bl	8007d8c <lcd_print>
 800367e:	e016      	b.n	80036ae <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003680:	4b4b      	ldr	r3, [pc, #300]	; (80037b0 <menu+0x2460>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d112      	bne.n	80036ae <menu+0x235e>
			if(dilSecim == 0) {
 8003688:	4b3c      	ldr	r3, [pc, #240]	; (800377c <menu+0x242c>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003690:	4a4a      	ldr	r2, [pc, #296]	; (80037bc <menu+0x246c>)
 8003692:	2101      	movs	r1, #1
 8003694:	2002      	movs	r0, #2
 8003696:	f004 fb79 	bl	8007d8c <lcd_print>
 800369a:	e008      	b.n	80036ae <menu+0x235e>
			} else if(dilSecim == 1) {
 800369c:	4b37      	ldr	r3, [pc, #220]	; (800377c <menu+0x242c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d104      	bne.n	80036ae <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80036a4:	4a46      	ldr	r2, [pc, #280]	; (80037c0 <menu+0x2470>)
 80036a6:	2101      	movs	r1, #1
 80036a8:	2002      	movs	r0, #2
 80036aa:	f004 fb6f 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80036ae:	2102      	movs	r1, #2
 80036b0:	4834      	ldr	r0, [pc, #208]	; (8003784 <menu+0x2434>)
 80036b2:	f005 fe91 	bl	80093d8 <HAL_GPIO_ReadPin>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d119      	bne.n	80036f0 <menu+0x23a0>
 80036bc:	4b32      	ldr	r3, [pc, #200]	; (8003788 <menu+0x2438>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <menu+0x23a0>
 80036ca:	4b34      	ldr	r3, [pc, #208]	; (800379c <menu+0x244c>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d10e      	bne.n	80036f0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80036d2:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <menu+0x2460>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <menu+0x2460>)
 80036dc:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80036de:	4b34      	ldr	r3, [pc, #208]	; (80037b0 <menu+0x2460>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d902      	bls.n	80036ec <menu+0x239c>
				devirmeSilindirTipi = 0;
 80036e6:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <menu+0x2460>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036ec:	f001 f9da 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80036f0:	2104      	movs	r1, #4
 80036f2:	4824      	ldr	r0, [pc, #144]	; (8003784 <menu+0x2434>)
 80036f4:	f005 fe70 	bl	80093d8 <HAL_GPIO_ReadPin>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d119      	bne.n	8003732 <menu+0x23e2>
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <menu+0x2438>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	f083 0301 	eor.w	r3, r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d012      	beq.n	8003732 <menu+0x23e2>
 800370c:	4b23      	ldr	r3, [pc, #140]	; (800379c <menu+0x244c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d10e      	bne.n	8003732 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003714:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <menu+0x2460>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	3b01      	subs	r3, #1
 800371a:	b2da      	uxtb	r2, r3
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <menu+0x2460>)
 800371e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003720:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <menu+0x2460>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <menu+0x2460>)
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800372e:	f001 f9b9 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003732:	2108      	movs	r1, #8
 8003734:	4813      	ldr	r0, [pc, #76]	; (8003784 <menu+0x2434>)
 8003736:	f005 fe4f 	bl	80093d8 <HAL_GPIO_ReadPin>
 800373a:	4603      	mov	r3, r0
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10d      	bne.n	800375c <menu+0x240c>
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <menu+0x2438>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d006      	beq.n	800375c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <menu+0x2460>)
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <menu+0x2440>)
 8003754:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <menu+0x2444>)
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <menu+0x2448>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b15      	cmp	r3, #21
 8003762:	f040 80c2 	bne.w	80038ea <menu+0x259a>
		if(dilSecim == 0) {
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <menu+0x242c>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d12c      	bne.n	80037c8 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800376e:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <menu+0x2474>)
 8003770:	2101      	movs	r1, #1
 8003772:	2001      	movs	r0, #1
 8003774:	f004 fb0a 	bl	8007d8c <lcd_print>
 8003778:	e02f      	b.n	80037da <menu+0x248a>
 800377a:	bf00      	nop
 800377c:	20000245 	.word	0x20000245
 8003780:	0800d3f0 	.word	0x0800d3f0
 8003784:	40010800 	.word	0x40010800
 8003788:	20000253 	.word	0x20000253
 800378c:	20000235 	.word	0x20000235
 8003790:	20000128 	.word	0x20000128
 8003794:	20000250 	.word	0x20000250
 8003798:	20000224 	.word	0x20000224
 800379c:	20000233 	.word	0x20000233
 80037a0:	0800d870 	.word	0x0800d870
 80037a4:	0800d884 	.word	0x0800d884
 80037a8:	0800d898 	.word	0x0800d898
 80037ac:	0800d8ac 	.word	0x0800d8ac
 80037b0:	20000236 	.word	0x20000236
 80037b4:	0800d8c0 	.word	0x0800d8c0
 80037b8:	0800d8d4 	.word	0x0800d8d4
 80037bc:	0800d8e4 	.word	0x0800d8e4
 80037c0:	0800d8f8 	.word	0x0800d8f8
 80037c4:	0800d908 	.word	0x0800d908
		} else if(dilSecim == 1) {
 80037c8:	4b9c      	ldr	r3, [pc, #624]	; (8003a3c <menu+0x26ec>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d104      	bne.n	80037da <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80037d0:	4a9b      	ldr	r2, [pc, #620]	; (8003a40 <menu+0x26f0>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	2001      	movs	r0, #1
 80037d6:	f004 fad9 	bl	8007d8c <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80037da:	4b9a      	ldr	r3, [pc, #616]	; (8003a44 <menu+0x26f4>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d112      	bne.n	8003808 <menu+0x24b8>
			if(dilSecim == 0) {
 80037e2:	4b96      	ldr	r3, [pc, #600]	; (8003a3c <menu+0x26ec>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d104      	bne.n	80037f4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80037ea:	4a97      	ldr	r2, [pc, #604]	; (8003a48 <menu+0x26f8>)
 80037ec:	2101      	movs	r1, #1
 80037ee:	2002      	movs	r0, #2
 80037f0:	f004 facc 	bl	8007d8c <lcd_print>
			}
			if(dilSecim == 1) {
 80037f4:	4b91      	ldr	r3, [pc, #580]	; (8003a3c <menu+0x26ec>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d11c      	bne.n	8003836 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80037fc:	4a93      	ldr	r2, [pc, #588]	; (8003a4c <menu+0x26fc>)
 80037fe:	2101      	movs	r1, #1
 8003800:	2002      	movs	r0, #2
 8003802:	f004 fac3 	bl	8007d8c <lcd_print>
 8003806:	e016      	b.n	8003836 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003808:	4b8e      	ldr	r3, [pc, #568]	; (8003a44 <menu+0x26f4>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d112      	bne.n	8003836 <menu+0x24e6>
			if(dilSecim == 0) {
 8003810:	4b8a      	ldr	r3, [pc, #552]	; (8003a3c <menu+0x26ec>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003818:	4a8d      	ldr	r2, [pc, #564]	; (8003a50 <menu+0x2700>)
 800381a:	2101      	movs	r1, #1
 800381c:	2002      	movs	r0, #2
 800381e:	f004 fab5 	bl	8007d8c <lcd_print>
 8003822:	e008      	b.n	8003836 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003824:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <menu+0x26ec>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d104      	bne.n	8003836 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800382c:	4a89      	ldr	r2, [pc, #548]	; (8003a54 <menu+0x2704>)
 800382e:	2101      	movs	r1, #1
 8003830:	2002      	movs	r0, #2
 8003832:	f004 faab 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003836:	2102      	movs	r1, #2
 8003838:	4887      	ldr	r0, [pc, #540]	; (8003a58 <menu+0x2708>)
 800383a:	f005 fdcd 	bl	80093d8 <HAL_GPIO_ReadPin>
 800383e:	4603      	mov	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d115      	bne.n	8003870 <menu+0x2520>
 8003844:	4b85      	ldr	r3, [pc, #532]	; (8003a5c <menu+0x270c>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	f083 0301 	eor.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00e      	beq.n	8003870 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <menu+0x26f4>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4b7a      	ldr	r3, [pc, #488]	; (8003a44 <menu+0x26f4>)
 800385c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800385e:	4b79      	ldr	r3, [pc, #484]	; (8003a44 <menu+0x26f4>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d902      	bls.n	800386c <menu+0x251c>
				platformSilindirTipi = 0;
 8003866:	4b77      	ldr	r3, [pc, #476]	; (8003a44 <menu+0x26f4>)
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800386c:	f001 f91a 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003870:	2104      	movs	r1, #4
 8003872:	4879      	ldr	r0, [pc, #484]	; (8003a58 <menu+0x2708>)
 8003874:	f005 fdb0 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003878:	4603      	mov	r3, r0
 800387a:	2b01      	cmp	r3, #1
 800387c:	d115      	bne.n	80038aa <menu+0x255a>
 800387e:	4b77      	ldr	r3, [pc, #476]	; (8003a5c <menu+0x270c>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	f083 0301 	eor.w	r3, r3, #1
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00e      	beq.n	80038aa <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 800388c:	4b6d      	ldr	r3, [pc, #436]	; (8003a44 <menu+0x26f4>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	3b01      	subs	r3, #1
 8003892:	b2da      	uxtb	r2, r3
 8003894:	4b6b      	ldr	r3, [pc, #428]	; (8003a44 <menu+0x26f4>)
 8003896:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003898:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <menu+0x26f4>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 80038a0:	4b68      	ldr	r3, [pc, #416]	; (8003a44 <menu+0x26f4>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038a6:	f001 f8fd 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038aa:	2108      	movs	r1, #8
 80038ac:	486a      	ldr	r0, [pc, #424]	; (8003a58 <menu+0x2708>)
 80038ae:	f005 fd93 	bl	80093d8 <HAL_GPIO_ReadPin>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d118      	bne.n	80038ea <menu+0x259a>
 80038b8:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <menu+0x270c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	f083 0301 	eor.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d011      	beq.n	80038ea <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80038c6:	4b5f      	ldr	r3, [pc, #380]	; (8003a44 <menu+0x26f4>)
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <menu+0x2710>)
 80038cc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80038ce:	4b5d      	ldr	r3, [pc, #372]	; (8003a44 <menu+0x26f4>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d106      	bne.n	80038e4 <menu+0x2594>
				altLimit = 1;
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <menu+0x2714>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80038dc:	4b61      	ldr	r3, [pc, #388]	; (8003a64 <menu+0x2714>)
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <menu+0x2710>)
 80038e2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80038e4:	4b60      	ldr	r3, [pc, #384]	; (8003a68 <menu+0x2718>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80038ea:	4b60      	ldr	r3, [pc, #384]	; (8003a6c <menu+0x271c>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b16      	cmp	r3, #22
 80038f0:	f040 8081 	bne.w	80039f6 <menu+0x26a6>
		if(dilSecim == 0) {
 80038f4:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <menu+0x26ec>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80038fc:	4a5c      	ldr	r2, [pc, #368]	; (8003a70 <menu+0x2720>)
 80038fe:	2101      	movs	r1, #1
 8003900:	2001      	movs	r0, #1
 8003902:	f004 fa43 	bl	8007d8c <lcd_print>
 8003906:	e008      	b.n	800391a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003908:	4b4c      	ldr	r3, [pc, #304]	; (8003a3c <menu+0x26ec>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d104      	bne.n	800391a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003910:	4a58      	ldr	r2, [pc, #352]	; (8003a74 <menu+0x2724>)
 8003912:	2101      	movs	r1, #1
 8003914:	2001      	movs	r0, #1
 8003916:	f004 fa39 	bl	8007d8c <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800391a:	4b48      	ldr	r3, [pc, #288]	; (8003a3c <menu+0x26ec>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003922:	4a55      	ldr	r2, [pc, #340]	; (8003a78 <menu+0x2728>)
 8003924:	2101      	movs	r1, #1
 8003926:	2002      	movs	r0, #2
 8003928:	f004 fa30 	bl	8007d8c <lcd_print>
 800392c:	e008      	b.n	8003940 <menu+0x25f0>
			} else if(dilSecim == 1){
 800392e:	4b43      	ldr	r3, [pc, #268]	; (8003a3c <menu+0x26ec>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d104      	bne.n	8003940 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003936:	4a51      	ldr	r2, [pc, #324]	; (8003a7c <menu+0x272c>)
 8003938:	2101      	movs	r1, #1
 800393a:	2002      	movs	r0, #2
 800393c:	f004 fa26 	bl	8007d8c <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003940:	4b4f      	ldr	r3, [pc, #316]	; (8003a80 <menu+0x2730>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	220a      	movs	r2, #10
 8003946:	494f      	ldr	r1, [pc, #316]	; (8003a84 <menu+0x2734>)
 8003948:	4618      	mov	r0, r3
 800394a:	f008 fd71 	bl	800c430 <itoa>
		lcd_print(2,16,snum);
 800394e:	4a4d      	ldr	r2, [pc, #308]	; (8003a84 <menu+0x2734>)
 8003950:	2110      	movs	r1, #16
 8003952:	2002      	movs	r0, #2
 8003954:	f004 fa1a 	bl	8007d8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003958:	2102      	movs	r1, #2
 800395a:	483f      	ldr	r0, [pc, #252]	; (8003a58 <menu+0x2708>)
 800395c:	f005 fd3c 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003960:	4603      	mov	r3, r0
 8003962:	2b01      	cmp	r3, #1
 8003964:	d115      	bne.n	8003992 <menu+0x2642>
 8003966:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <menu+0x270c>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	f083 0301 	eor.w	r3, r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003974:	4b42      	ldr	r3, [pc, #264]	; (8003a80 <menu+0x2730>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <menu+0x2730>)
 800397e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003980:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <menu+0x2730>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d902      	bls.n	800398e <menu+0x263e>
				yukariValfTmr = 0;
 8003988:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <menu+0x2730>)
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800398e:	f001 f889 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003992:	2104      	movs	r1, #4
 8003994:	4830      	ldr	r0, [pc, #192]	; (8003a58 <menu+0x2708>)
 8003996:	f005 fd1f 	bl	80093d8 <HAL_GPIO_ReadPin>
 800399a:	4603      	mov	r3, r0
 800399c:	2b01      	cmp	r3, #1
 800399e:	d115      	bne.n	80039cc <menu+0x267c>
 80039a0:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <menu+0x270c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	f083 0301 	eor.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00e      	beq.n	80039cc <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80039ae:	4b34      	ldr	r3, [pc, #208]	; (8003a80 <menu+0x2730>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	4b32      	ldr	r3, [pc, #200]	; (8003a80 <menu+0x2730>)
 80039b8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80039ba:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <menu+0x2730>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d902      	bls.n	80039c8 <menu+0x2678>
		   		yukariValfTmr = 5;
 80039c2:	4b2f      	ldr	r3, [pc, #188]	; (8003a80 <menu+0x2730>)
 80039c4:	2205      	movs	r2, #5
 80039c6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039c8:	f001 f86c 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039cc:	2108      	movs	r1, #8
 80039ce:	4822      	ldr	r0, [pc, #136]	; (8003a58 <menu+0x2708>)
 80039d0:	f005 fd02 	bl	80093d8 <HAL_GPIO_ReadPin>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10d      	bne.n	80039f6 <menu+0x26a6>
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <menu+0x270c>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	f083 0301 	eor.w	r3, r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d006      	beq.n	80039f6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <menu+0x2730>)
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <menu+0x2710>)
 80039ee:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <menu+0x2718>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80039f6:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <menu+0x271c>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b17      	cmp	r3, #23
 80039fc:	f040 80ac 	bne.w	8003b58 <menu+0x2808>
		if(dilSecim == 0) {
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <menu+0x26ec>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003a08:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <menu+0x2738>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	f004 f9bd 	bl	8007d8c <lcd_print>
 8003a12:	e008      	b.n	8003a26 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <menu+0x26ec>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d104      	bne.n	8003a26 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <menu+0x273c>)
 8003a1e:	2101      	movs	r1, #1
 8003a20:	2001      	movs	r0, #1
 8003a22:	f004 f9b3 	bl	8007d8c <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <menu+0x26ec>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d130      	bne.n	8003a90 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <menu+0x2728>)
 8003a30:	2101      	movs	r1, #1
 8003a32:	2002      	movs	r0, #2
 8003a34:	f004 f9aa 	bl	8007d8c <lcd_print>
 8003a38:	e033      	b.n	8003aa2 <menu+0x2752>
 8003a3a:	bf00      	nop
 8003a3c:	20000245 	.word	0x20000245
 8003a40:	0800d91c 	.word	0x0800d91c
 8003a44:	20000237 	.word	0x20000237
 8003a48:	0800d8c0 	.word	0x0800d8c0
 8003a4c:	0800d8d4 	.word	0x0800d8d4
 8003a50:	0800d8e4 	.word	0x0800d8e4
 8003a54:	0800d8f8 	.word	0x0800d8f8
 8003a58:	40010800 	.word	0x40010800
 8003a5c:	20000253 	.word	0x20000253
 8003a60:	20000128 	.word	0x20000128
 8003a64:	2000022a 	.word	0x2000022a
 8003a68:	20000250 	.word	0x20000250
 8003a6c:	20000224 	.word	0x20000224
 8003a70:	0800d92c 	.word	0x0800d92c
 8003a74:	0800d940 	.word	0x0800d940
 8003a78:	0800d5e0 	.word	0x0800d5e0
 8003a7c:	0800d954 	.word	0x0800d954
 8003a80:	20000238 	.word	0x20000238
 8003a84:	20000198 	.word	0x20000198
 8003a88:	0800d964 	.word	0x0800d964
 8003a8c:	0800d978 	.word	0x0800d978
			} else if(dilSecim == 1) {
 8003a90:	4b98      	ldr	r3, [pc, #608]	; (8003cf4 <menu+0x29a4>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d104      	bne.n	8003aa2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003a98:	4a97      	ldr	r2, [pc, #604]	; (8003cf8 <menu+0x29a8>)
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	2002      	movs	r0, #2
 8003a9e:	f004 f975 	bl	8007d8c <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003aa2:	4b96      	ldr	r3, [pc, #600]	; (8003cfc <menu+0x29ac>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	220a      	movs	r2, #10
 8003aa8:	4995      	ldr	r1, [pc, #596]	; (8003d00 <menu+0x29b0>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f008 fcc0 	bl	800c430 <itoa>
		lcd_print(2,16,snum);
 8003ab0:	4a93      	ldr	r2, [pc, #588]	; (8003d00 <menu+0x29b0>)
 8003ab2:	2110      	movs	r1, #16
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f004 f969 	bl	8007d8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aba:	2102      	movs	r1, #2
 8003abc:	4891      	ldr	r0, [pc, #580]	; (8003d04 <menu+0x29b4>)
 8003abe:	f005 fc8b 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d115      	bne.n	8003af4 <menu+0x27a4>
 8003ac8:	4b8f      	ldr	r3, [pc, #572]	; (8003d08 <menu+0x29b8>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00e      	beq.n	8003af4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003ad6:	4b89      	ldr	r3, [pc, #548]	; (8003cfc <menu+0x29ac>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4b87      	ldr	r3, [pc, #540]	; (8003cfc <menu+0x29ac>)
 8003ae0:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003ae2:	4b86      	ldr	r3, [pc, #536]	; (8003cfc <menu+0x29ac>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d902      	bls.n	8003af0 <menu+0x27a0>
				asagiValfTmr = 0;
 8003aea:	4b84      	ldr	r3, [pc, #528]	; (8003cfc <menu+0x29ac>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003af0:	f000 ffd8 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003af4:	2104      	movs	r1, #4
 8003af6:	4883      	ldr	r0, [pc, #524]	; (8003d04 <menu+0x29b4>)
 8003af8:	f005 fc6e 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d115      	bne.n	8003b2e <menu+0x27de>
 8003b02:	4b81      	ldr	r3, [pc, #516]	; (8003d08 <menu+0x29b8>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00e      	beq.n	8003b2e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003b10:	4b7a      	ldr	r3, [pc, #488]	; (8003cfc <menu+0x29ac>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	4b78      	ldr	r3, [pc, #480]	; (8003cfc <menu+0x29ac>)
 8003b1a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003b1c:	4b77      	ldr	r3, [pc, #476]	; (8003cfc <menu+0x29ac>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b06      	cmp	r3, #6
 8003b22:	d902      	bls.n	8003b2a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003b24:	4b75      	ldr	r3, [pc, #468]	; (8003cfc <menu+0x29ac>)
 8003b26:	2205      	movs	r2, #5
 8003b28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b2a:	f000 ffbb 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b2e:	2108      	movs	r1, #8
 8003b30:	4874      	ldr	r0, [pc, #464]	; (8003d04 <menu+0x29b4>)
 8003b32:	f005 fc51 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10d      	bne.n	8003b58 <menu+0x2808>
 8003b3c:	4b72      	ldr	r3, [pc, #456]	; (8003d08 <menu+0x29b8>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	f083 0301 	eor.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003b4a:	4b6c      	ldr	r3, [pc, #432]	; (8003cfc <menu+0x29ac>)
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	4b6f      	ldr	r3, [pc, #444]	; (8003d0c <menu+0x29bc>)
 8003b50:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003b52:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <menu+0x29c0>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003b58:	4b6e      	ldr	r3, [pc, #440]	; (8003d14 <menu+0x29c4>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b18      	cmp	r3, #24
 8003b5e:	f040 809d 	bne.w	8003c9c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003b62:	4b6d      	ldr	r3, [pc, #436]	; (8003d18 <menu+0x29c8>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d113      	bne.n	8003b92 <menu+0x2842>
			if(dilSecim == 0) {
 8003b6a:	4b62      	ldr	r3, [pc, #392]	; (8003cf4 <menu+0x29a4>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003b72:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <menu+0x29cc>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	2001      	movs	r0, #1
 8003b78:	f004 f908 	bl	8007d8c <lcd_print>
 8003b7c:	e020      	b.n	8003bc0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b7e:	4b5d      	ldr	r3, [pc, #372]	; (8003cf4 <menu+0x29a4>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d11c      	bne.n	8003bc0 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003b86:	4a66      	ldr	r2, [pc, #408]	; (8003d20 <menu+0x29d0>)
 8003b88:	2101      	movs	r1, #1
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	f004 f8fe 	bl	8007d8c <lcd_print>
 8003b90:	e016      	b.n	8003bc0 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b92:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <menu+0x29c8>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d112      	bne.n	8003bc0 <menu+0x2870>
			if(dilSecim == 0) {
 8003b9a:	4b56      	ldr	r3, [pc, #344]	; (8003cf4 <menu+0x29a4>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003ba2:	4a60      	ldr	r2, [pc, #384]	; (8003d24 <menu+0x29d4>)
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	f004 f8f0 	bl	8007d8c <lcd_print>
 8003bac:	e008      	b.n	8003bc0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <menu+0x29a4>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d104      	bne.n	8003bc0 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003bb6:	4a5c      	ldr	r2, [pc, #368]	; (8003d28 <menu+0x29d8>)
 8003bb8:	2101      	movs	r1, #1
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f004 f8e6 	bl	8007d8c <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003bc0:	4b4c      	ldr	r3, [pc, #304]	; (8003cf4 <menu+0x29a4>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d105      	bne.n	8003bd4 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bc8:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <menu+0x29dc>)
 8003bca:	2101      	movs	r1, #1
 8003bcc:	2002      	movs	r0, #2
 8003bce:	f004 f8dd 	bl	8007d8c <lcd_print>
 8003bd2:	e008      	b.n	8003be6 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003bd4:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <menu+0x29a4>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d104      	bne.n	8003be6 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003bdc:	4a46      	ldr	r2, [pc, #280]	; (8003cf8 <menu+0x29a8>)
 8003bde:	2101      	movs	r1, #1
 8003be0:	2002      	movs	r0, #2
 8003be2:	f004 f8d3 	bl	8007d8c <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003be6:	4b52      	ldr	r3, [pc, #328]	; (8003d30 <menu+0x29e0>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	220a      	movs	r2, #10
 8003bec:	4944      	ldr	r1, [pc, #272]	; (8003d00 <menu+0x29b0>)
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f008 fc1e 	bl	800c430 <itoa>
		lcd_print(2, 16, snum);
 8003bf4:	4a42      	ldr	r2, [pc, #264]	; (8003d00 <menu+0x29b0>)
 8003bf6:	2110      	movs	r1, #16
 8003bf8:	2002      	movs	r0, #2
 8003bfa:	f004 f8c7 	bl	8007d8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bfe:	2102      	movs	r1, #2
 8003c00:	4840      	ldr	r0, [pc, #256]	; (8003d04 <menu+0x29b4>)
 8003c02:	f005 fbe9 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d115      	bne.n	8003c38 <menu+0x28e8>
 8003c0c:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <menu+0x29b8>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	f083 0301 	eor.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00e      	beq.n	8003c38 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003c1a:	4b45      	ldr	r3, [pc, #276]	; (8003d30 <menu+0x29e0>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <menu+0x29e0>)
 8003c24:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003c26:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <menu+0x29e0>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d902      	bls.n	8003c34 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003c2e:	4b40      	ldr	r3, [pc, #256]	; (8003d30 <menu+0x29e0>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c34:	f000 ff36 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c38:	2104      	movs	r1, #4
 8003c3a:	4832      	ldr	r0, [pc, #200]	; (8003d04 <menu+0x29b4>)
 8003c3c:	f005 fbcc 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d115      	bne.n	8003c72 <menu+0x2922>
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <menu+0x29b8>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	f083 0301 	eor.w	r3, r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003c54:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <menu+0x29e0>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <menu+0x29e0>)
 8003c5e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003c60:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <menu+0x29e0>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b06      	cmp	r3, #6
 8003c66:	d902      	bls.n	8003c6e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003c68:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <menu+0x29e0>)
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c6e:	f000 ff19 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c72:	2108      	movs	r1, #8
 8003c74:	4823      	ldr	r0, [pc, #140]	; (8003d04 <menu+0x29b4>)
 8003c76:	f005 fbaf 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d10d      	bne.n	8003c9c <menu+0x294c>
 8003c80:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <menu+0x29b8>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f083 0301 	eor.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003c8e:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <menu+0x29e0>)
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <menu+0x29bc>)
 8003c94:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003c96:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <menu+0x29c0>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <menu+0x29c4>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b19      	cmp	r3, #25
 8003ca2:	f040 80c4 	bne.w	8003e2e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <menu+0x29c8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d113      	bne.n	8003cd6 <menu+0x2986>
			if(dilSecim == 0) {
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <menu+0x29a4>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d105      	bne.n	8003cc2 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003cb6:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <menu+0x29e4>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f004 f866 	bl	8007d8c <lcd_print>
 8003cc0:	e047      	b.n	8003d52 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <menu+0x29a4>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d143      	bne.n	8003d52 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003cca:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <menu+0x29e8>)
 8003ccc:	2101      	movs	r1, #1
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f004 f85c 	bl	8007d8c <lcd_print>
 8003cd4:	e03d      	b.n	8003d52 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <menu+0x29c8>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d139      	bne.n	8003d52 <menu+0x2a02>
			if(dilSecim == 0) {
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <menu+0x29a4>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d12c      	bne.n	8003d40 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <menu+0x29ec>)
 8003ce8:	2101      	movs	r1, #1
 8003cea:	2001      	movs	r0, #1
 8003cec:	f004 f84e 	bl	8007d8c <lcd_print>
 8003cf0:	e02f      	b.n	8003d52 <menu+0x2a02>
 8003cf2:	bf00      	nop
 8003cf4:	20000245 	.word	0x20000245
 8003cf8:	0800d954 	.word	0x0800d954
 8003cfc:	20000239 	.word	0x20000239
 8003d00:	20000198 	.word	0x20000198
 8003d04:	40010800 	.word	0x40010800
 8003d08:	20000253 	.word	0x20000253
 8003d0c:	20000128 	.word	0x20000128
 8003d10:	20000250 	.word	0x20000250
 8003d14:	20000224 	.word	0x20000224
 8003d18:	20000233 	.word	0x20000233
 8003d1c:	0800d98c 	.word	0x0800d98c
 8003d20:	0800d9a0 	.word	0x0800d9a0
 8003d24:	0800d9b4 	.word	0x0800d9b4
 8003d28:	0800d9c8 	.word	0x0800d9c8
 8003d2c:	0800d5e0 	.word	0x0800d5e0
 8003d30:	2000023a 	.word	0x2000023a
 8003d34:	0800d9dc 	.word	0x0800d9dc
 8003d38:	0800d9f0 	.word	0x0800d9f0
 8003d3c:	0800da04 	.word	0x0800da04
			} else if(dilSecim == 1) {
 8003d40:	4b73      	ldr	r3, [pc, #460]	; (8003f10 <menu+0x2bc0>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d104      	bne.n	8003d52 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003d48:	4a72      	ldr	r2, [pc, #456]	; (8003f14 <menu+0x2bc4>)
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f004 f81d 	bl	8007d8c <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003d52:	4b6f      	ldr	r3, [pc, #444]	; (8003f10 <menu+0x2bc0>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d105      	bne.n	8003d66 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d5a:	4a6f      	ldr	r2, [pc, #444]	; (8003f18 <menu+0x2bc8>)
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f004 f814 	bl	8007d8c <lcd_print>
 8003d64:	e008      	b.n	8003d78 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003d66:	4b6a      	ldr	r3, [pc, #424]	; (8003f10 <menu+0x2bc0>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d104      	bne.n	8003d78 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003d6e:	4a6b      	ldr	r2, [pc, #428]	; (8003f1c <menu+0x2bcc>)
 8003d70:	2101      	movs	r1, #1
 8003d72:	2002      	movs	r0, #2
 8003d74:	f004 f80a 	bl	8007d8c <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003d78:	4b69      	ldr	r3, [pc, #420]	; (8003f20 <menu+0x2bd0>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	220a      	movs	r2, #10
 8003d7e:	4969      	ldr	r1, [pc, #420]	; (8003f24 <menu+0x2bd4>)
 8003d80:	4618      	mov	r0, r3
 8003d82:	f008 fb55 	bl	800c430 <itoa>
		lcd_print(2,16,snum);
 8003d86:	4a67      	ldr	r2, [pc, #412]	; (8003f24 <menu+0x2bd4>)
 8003d88:	2110      	movs	r1, #16
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	f003 fffe 	bl	8007d8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d90:	2102      	movs	r1, #2
 8003d92:	4865      	ldr	r0, [pc, #404]	; (8003f28 <menu+0x2bd8>)
 8003d94:	f005 fb20 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d115      	bne.n	8003dca <menu+0x2a7a>
 8003d9e:	4b63      	ldr	r3, [pc, #396]	; (8003f2c <menu+0x2bdc>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	f083 0301 	eor.w	r3, r3, #1
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00e      	beq.n	8003dca <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003dac:	4b5c      	ldr	r3, [pc, #368]	; (8003f20 <menu+0x2bd0>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	4b5a      	ldr	r3, [pc, #360]	; (8003f20 <menu+0x2bd0>)
 8003db6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003db8:	4b59      	ldr	r3, [pc, #356]	; (8003f20 <menu+0x2bd0>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	d902      	bls.n	8003dc6 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003dc0:	4b57      	ldr	r3, [pc, #348]	; (8003f20 <menu+0x2bd0>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003dc6:	f000 fe6d 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dca:	2104      	movs	r1, #4
 8003dcc:	4856      	ldr	r0, [pc, #344]	; (8003f28 <menu+0x2bd8>)
 8003dce:	f005 fb03 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d115      	bne.n	8003e04 <menu+0x2ab4>
 8003dd8:	4b54      	ldr	r3, [pc, #336]	; (8003f2c <menu+0x2bdc>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	f083 0301 	eor.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00e      	beq.n	8003e04 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003de6:	4b4e      	ldr	r3, [pc, #312]	; (8003f20 <menu+0x2bd0>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <menu+0x2bd0>)
 8003df0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003df2:	4b4b      	ldr	r3, [pc, #300]	; (8003f20 <menu+0x2bd0>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d902      	bls.n	8003e00 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003dfa:	4b49      	ldr	r3, [pc, #292]	; (8003f20 <menu+0x2bd0>)
 8003dfc:	2205      	movs	r2, #5
 8003dfe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e00:	f000 fe50 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e04:	2108      	movs	r1, #8
 8003e06:	4848      	ldr	r0, [pc, #288]	; (8003f28 <menu+0x2bd8>)
 8003e08:	f005 fae6 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10d      	bne.n	8003e2e <menu+0x2ade>
 8003e12:	4b46      	ldr	r3, [pc, #280]	; (8003f2c <menu+0x2bdc>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	f083 0301 	eor.w	r3, r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003e20:	4b3f      	ldr	r3, [pc, #252]	; (8003f20 <menu+0x2bd0>)
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <menu+0x2be0>)
 8003e26:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003e28:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <menu+0x2be4>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003e2e:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <menu+0x2be8>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b1a      	cmp	r3, #26
 8003e34:	f040 80ec 	bne.w	8004010 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e38:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <menu+0x2bc0>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003e40:	4a3e      	ldr	r2, [pc, #248]	; (8003f3c <menu+0x2bec>)
 8003e42:	2101      	movs	r1, #1
 8003e44:	2001      	movs	r0, #1
 8003e46:	f003 ffa1 	bl	8007d8c <lcd_print>
 8003e4a:	e008      	b.n	8003e5e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003e4c:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <menu+0x2bc0>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d104      	bne.n	8003e5e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003e54:	4a3a      	ldr	r2, [pc, #232]	; (8003f40 <menu+0x2bf0>)
 8003e56:	2101      	movs	r1, #1
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f003 ff97 	bl	8007d8c <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003e5e:	4b39      	ldr	r3, [pc, #228]	; (8003f44 <menu+0x2bf4>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b63      	cmp	r3, #99	; 0x63
 8003e64:	d91e      	bls.n	8003ea4 <menu+0x2b54>
			if(dilSecim == 0) {
 8003e66:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <menu+0x2bc0>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e6e:	4a2a      	ldr	r2, [pc, #168]	; (8003f18 <menu+0x2bc8>)
 8003e70:	2101      	movs	r1, #1
 8003e72:	2002      	movs	r0, #2
 8003e74:	f003 ff8a 	bl	8007d8c <lcd_print>
			}
			if(dilSecim == 1) {
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <menu+0x2bc0>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d104      	bne.n	8003e8a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003e80:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <menu+0x2bcc>)
 8003e82:	2101      	movs	r1, #1
 8003e84:	2002      	movs	r0, #2
 8003e86:	f003 ff81 	bl	8007d8c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e8a:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <menu+0x2bf4>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	220a      	movs	r2, #10
 8003e90:	4924      	ldr	r1, [pc, #144]	; (8003f24 <menu+0x2bd4>)
 8003e92:	4618      	mov	r0, r3
 8003e94:	f008 facc 	bl	800c430 <itoa>
			lcd_print(2,14,snum);
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <menu+0x2bd4>)
 8003e9a:	210e      	movs	r1, #14
 8003e9c:	2002      	movs	r0, #2
 8003e9e:	f003 ff75 	bl	8007d8c <lcd_print>
 8003ea2:	e066      	b.n	8003f72 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003ea4:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <menu+0x2bf4>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b09      	cmp	r3, #9
 8003eaa:	d923      	bls.n	8003ef4 <menu+0x2ba4>
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <menu+0x2bf4>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b63      	cmp	r3, #99	; 0x63
 8003eb2:	d81f      	bhi.n	8003ef4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003eb4:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <menu+0x2bc0>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d105      	bne.n	8003ec8 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ebc:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <menu+0x2bc8>)
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	2002      	movs	r0, #2
 8003ec2:	f003 ff63 	bl	8007d8c <lcd_print>
 8003ec6:	e008      	b.n	8003eda <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <menu+0x2bc0>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d104      	bne.n	8003eda <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003ed0:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <menu+0x2bcc>)
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	f003 ff59 	bl	8007d8c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003eda:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <menu+0x2bf4>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	220a      	movs	r2, #10
 8003ee0:	4910      	ldr	r1, [pc, #64]	; (8003f24 <menu+0x2bd4>)
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f008 faa4 	bl	800c430 <itoa>
			lcd_print(2, 15, snum);
 8003ee8:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <menu+0x2bd4>)
 8003eea:	210f      	movs	r1, #15
 8003eec:	2002      	movs	r0, #2
 8003eee:	f003 ff4d 	bl	8007d8c <lcd_print>
		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003ef2:	e03e      	b.n	8003f72 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <menu+0x2bf4>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b09      	cmp	r3, #9
 8003efa:	d83a      	bhi.n	8003f72 <menu+0x2c22>
			if(dilSecim == 0) {
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <menu+0x2bc0>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d121      	bne.n	8003f48 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <menu+0x2bc8>)
 8003f06:	2101      	movs	r1, #1
 8003f08:	2002      	movs	r0, #2
 8003f0a:	f003 ff3f 	bl	8007d8c <lcd_print>
 8003f0e:	e024      	b.n	8003f5a <menu+0x2c0a>
 8003f10:	20000245 	.word	0x20000245
 8003f14:	0800da18 	.word	0x0800da18
 8003f18:	0800d5e0 	.word	0x0800d5e0
 8003f1c:	0800d954 	.word	0x0800d954
 8003f20:	2000023b 	.word	0x2000023b
 8003f24:	20000198 	.word	0x20000198
 8003f28:	40010800 	.word	0x40010800
 8003f2c:	20000253 	.word	0x20000253
 8003f30:	20000128 	.word	0x20000128
 8003f34:	20000250 	.word	0x20000250
 8003f38:	20000224 	.word	0x20000224
 8003f3c:	0800da2c 	.word	0x0800da2c
 8003f40:	0800da40 	.word	0x0800da40
 8003f44:	2000023c 	.word	0x2000023c
			} else if(dilSecim == 1) {
 8003f48:	4b8f      	ldr	r3, [pc, #572]	; (8004188 <menu+0x2e38>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d104      	bne.n	8003f5a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003f50:	4a8e      	ldr	r2, [pc, #568]	; (800418c <menu+0x2e3c>)
 8003f52:	2101      	movs	r1, #1
 8003f54:	2002      	movs	r0, #2
 8003f56:	f003 ff19 	bl	8007d8c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f5a:	4b8d      	ldr	r3, [pc, #564]	; (8004190 <menu+0x2e40>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	220a      	movs	r2, #10
 8003f60:	498c      	ldr	r1, [pc, #560]	; (8004194 <menu+0x2e44>)
 8003f62:	4618      	mov	r0, r3
 8003f64:	f008 fa64 	bl	800c430 <itoa>
			lcd_print(2, 16, snum);
 8003f68:	4a8a      	ldr	r2, [pc, #552]	; (8004194 <menu+0x2e44>)
 8003f6a:	2110      	movs	r1, #16
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	f003 ff0d 	bl	8007d8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f72:	2102      	movs	r1, #2
 8003f74:	4888      	ldr	r0, [pc, #544]	; (8004198 <menu+0x2e48>)
 8003f76:	f005 fa2f 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d115      	bne.n	8003fac <menu+0x2c5c>
 8003f80:	4b86      	ldr	r3, [pc, #536]	; (800419c <menu+0x2e4c>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	f083 0301 	eor.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00e      	beq.n	8003fac <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003f8e:	4b80      	ldr	r3, [pc, #512]	; (8004190 <menu+0x2e40>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4b7e      	ldr	r3, [pc, #504]	; (8004190 <menu+0x2e40>)
 8003f98:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003f9a:	4b7d      	ldr	r3, [pc, #500]	; (8004190 <menu+0x2e40>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2bb4      	cmp	r3, #180	; 0xb4
 8003fa0:	d902      	bls.n	8003fa8 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003fa2:	4b7b      	ldr	r3, [pc, #492]	; (8004190 <menu+0x2e40>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fa8:	f000 fd7c 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fac:	2104      	movs	r1, #4
 8003fae:	487a      	ldr	r0, [pc, #488]	; (8004198 <menu+0x2e48>)
 8003fb0:	f005 fa12 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d115      	bne.n	8003fe6 <menu+0x2c96>
 8003fba:	4b78      	ldr	r3, [pc, #480]	; (800419c <menu+0x2e4c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	f083 0301 	eor.w	r3, r3, #1
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003fc8:	4b71      	ldr	r3, [pc, #452]	; (8004190 <menu+0x2e40>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	4b6f      	ldr	r3, [pc, #444]	; (8004190 <menu+0x2e40>)
 8003fd2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003fd4:	4b6e      	ldr	r3, [pc, #440]	; (8004190 <menu+0x2e40>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2bb5      	cmp	r3, #181	; 0xb5
 8003fda:	d902      	bls.n	8003fe2 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003fdc:	4b6c      	ldr	r3, [pc, #432]	; (8004190 <menu+0x2e40>)
 8003fde:	22b4      	movs	r2, #180	; 0xb4
 8003fe0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fe2:	f000 fd5f 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fe6:	2108      	movs	r1, #8
 8003fe8:	486b      	ldr	r0, [pc, #428]	; (8004198 <menu+0x2e48>)
 8003fea:	f005 f9f5 	bl	80093d8 <HAL_GPIO_ReadPin>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d10d      	bne.n	8004010 <menu+0x2cc0>
 8003ff4:	4b69      	ldr	r3, [pc, #420]	; (800419c <menu+0x2e4c>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f083 0301 	eor.w	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004002:	4b63      	ldr	r3, [pc, #396]	; (8004190 <menu+0x2e40>)
 8004004:	781a      	ldrb	r2, [r3, #0]
 8004006:	4b66      	ldr	r3, [pc, #408]	; (80041a0 <menu+0x2e50>)
 8004008:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800400a:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <menu+0x2e54>)
 800400c:	2201      	movs	r2, #1
 800400e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004010:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <menu+0x2e58>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b1b      	cmp	r3, #27
 8004016:	f040 8083 	bne.w	8004120 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800401a:	4a64      	ldr	r2, [pc, #400]	; (80041ac <menu+0x2e5c>)
 800401c:	2101      	movs	r1, #1
 800401e:	2001      	movs	r0, #1
 8004020:	f003 feb4 	bl	8007d8c <lcd_print>

		if(buzzer == 0) {
 8004024:	4b62      	ldr	r3, [pc, #392]	; (80041b0 <menu+0x2e60>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d113      	bne.n	8004054 <menu+0x2d04>
			if(dilSecim == 0) {
 800402c:	4b56      	ldr	r3, [pc, #344]	; (8004188 <menu+0x2e38>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004034:	4a5f      	ldr	r2, [pc, #380]	; (80041b4 <menu+0x2e64>)
 8004036:	2101      	movs	r1, #1
 8004038:	2002      	movs	r0, #2
 800403a:	f003 fea7 	bl	8007d8c <lcd_print>
 800403e:	e020      	b.n	8004082 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004040:	4b51      	ldr	r3, [pc, #324]	; (8004188 <menu+0x2e38>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d11c      	bne.n	8004082 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004048:	4a5b      	ldr	r2, [pc, #364]	; (80041b8 <menu+0x2e68>)
 800404a:	2101      	movs	r1, #1
 800404c:	2002      	movs	r0, #2
 800404e:	f003 fe9d 	bl	8007d8c <lcd_print>
 8004052:	e016      	b.n	8004082 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004054:	4b56      	ldr	r3, [pc, #344]	; (80041b0 <menu+0x2e60>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d112      	bne.n	8004082 <menu+0x2d32>
			if(dilSecim == 0) {
 800405c:	4b4a      	ldr	r3, [pc, #296]	; (8004188 <menu+0x2e38>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004064:	4a55      	ldr	r2, [pc, #340]	; (80041bc <menu+0x2e6c>)
 8004066:	2101      	movs	r1, #1
 8004068:	2002      	movs	r0, #2
 800406a:	f003 fe8f 	bl	8007d8c <lcd_print>
 800406e:	e008      	b.n	8004082 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004070:	4b45      	ldr	r3, [pc, #276]	; (8004188 <menu+0x2e38>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d104      	bne.n	8004082 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004078:	4a51      	ldr	r2, [pc, #324]	; (80041c0 <menu+0x2e70>)
 800407a:	2101      	movs	r1, #1
 800407c:	2002      	movs	r0, #2
 800407e:	f003 fe85 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004082:	2102      	movs	r1, #2
 8004084:	4844      	ldr	r0, [pc, #272]	; (8004198 <menu+0x2e48>)
 8004086:	f005 f9a7 	bl	80093d8 <HAL_GPIO_ReadPin>
 800408a:	4603      	mov	r3, r0
 800408c:	2b01      	cmp	r3, #1
 800408e:	d115      	bne.n	80040bc <menu+0x2d6c>
 8004090:	4b42      	ldr	r3, [pc, #264]	; (800419c <menu+0x2e4c>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	f083 0301 	eor.w	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <menu+0x2d6c>
			buzzer = buzzer + 1;
 800409e:	4b44      	ldr	r3, [pc, #272]	; (80041b0 <menu+0x2e60>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	3301      	adds	r3, #1
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <menu+0x2e60>)
 80040a8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80040aa:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <menu+0x2e60>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d902      	bls.n	80040b8 <menu+0x2d68>
				buzzer = 0;
 80040b2:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <menu+0x2e60>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040b8:	f000 fcf4 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040bc:	2104      	movs	r1, #4
 80040be:	4836      	ldr	r0, [pc, #216]	; (8004198 <menu+0x2e48>)
 80040c0:	f005 f98a 	bl	80093d8 <HAL_GPIO_ReadPin>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d115      	bne.n	80040f6 <menu+0x2da6>
 80040ca:	4b34      	ldr	r3, [pc, #208]	; (800419c <menu+0x2e4c>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	f083 0301 	eor.w	r3, r3, #1
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <menu+0x2da6>
			buzzer = buzzer - 1;
 80040d8:	4b35      	ldr	r3, [pc, #212]	; (80041b0 <menu+0x2e60>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <menu+0x2e60>)
 80040e2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80040e4:	4b32      	ldr	r3, [pc, #200]	; (80041b0 <menu+0x2e60>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <menu+0x2da2>
		   		buzzer = 1;
 80040ec:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <menu+0x2e60>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040f2:	f000 fcd7 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040f6:	2108      	movs	r1, #8
 80040f8:	4827      	ldr	r0, [pc, #156]	; (8004198 <menu+0x2e48>)
 80040fa:	f005 f96d 	bl	80093d8 <HAL_GPIO_ReadPin>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b01      	cmp	r3, #1
 8004102:	d10d      	bne.n	8004120 <menu+0x2dd0>
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <menu+0x2e4c>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	f083 0301 	eor.w	r3, r3, #1
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d006      	beq.n	8004120 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004112:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <menu+0x2e60>)
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <menu+0x2e50>)
 8004118:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <menu+0x2e54>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004120:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <menu+0x2e58>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b1c      	cmp	r3, #28
 8004126:	f040 80ab 	bne.w	8004280 <menu+0x2f30>
		calismaSayModu = 0;
 800412a:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <menu+0x2e74>)
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004130:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <menu+0x2e78>)
 8004132:	2101      	movs	r1, #1
 8004134:	2001      	movs	r0, #1
 8004136:	f003 fe29 	bl	8007d8c <lcd_print>

		if(demoMode == 0) {
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <menu+0x2e7c>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <menu+0x2e1a>
			if(dilSecim == 0) {
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <menu+0x2e38>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800414a:	4a1a      	ldr	r2, [pc, #104]	; (80041b4 <menu+0x2e64>)
 800414c:	2101      	movs	r1, #1
 800414e:	2002      	movs	r0, #2
 8004150:	f003 fe1c 	bl	8007d8c <lcd_print>
 8004154:	e045      	b.n	80041e2 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <menu+0x2e38>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d141      	bne.n	80041e2 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800415e:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <menu+0x2e68>)
 8004160:	2101      	movs	r1, #1
 8004162:	2002      	movs	r0, #2
 8004164:	f003 fe12 	bl	8007d8c <lcd_print>
 8004168:	e03b      	b.n	80041e2 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <menu+0x2e7c>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d137      	bne.n	80041e2 <menu+0x2e92>
			if(dilSecim == 0){
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <menu+0x2e38>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d12a      	bne.n	80041d0 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <menu+0x2e6c>)
 800417c:	2101      	movs	r1, #1
 800417e:	2002      	movs	r0, #2
 8004180:	f003 fe04 	bl	8007d8c <lcd_print>
 8004184:	e02d      	b.n	80041e2 <menu+0x2e92>
 8004186:	bf00      	nop
 8004188:	20000245 	.word	0x20000245
 800418c:	0800d954 	.word	0x0800d954
 8004190:	2000023c 	.word	0x2000023c
 8004194:	20000198 	.word	0x20000198
 8004198:	40010800 	.word	0x40010800
 800419c:	20000253 	.word	0x20000253
 80041a0:	20000128 	.word	0x20000128
 80041a4:	20000250 	.word	0x20000250
 80041a8:	20000224 	.word	0x20000224
 80041ac:	0800da54 	.word	0x0800da54
 80041b0:	20000240 	.word	0x20000240
 80041b4:	0800d37c 	.word	0x0800d37c
 80041b8:	0800d390 	.word	0x0800d390
 80041bc:	0800d3dc 	.word	0x0800d3dc
 80041c0:	0800d3f0 	.word	0x0800d3f0
 80041c4:	20000244 	.word	0x20000244
 80041c8:	0800da68 	.word	0x0800da68
 80041cc:	20000242 	.word	0x20000242
			} else if(dilSecim == 1) {
 80041d0:	4b71      	ldr	r3, [pc, #452]	; (8004398 <menu+0x3048>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d104      	bne.n	80041e2 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80041d8:	4a70      	ldr	r2, [pc, #448]	; (800439c <menu+0x304c>)
 80041da:	2101      	movs	r1, #1
 80041dc:	2002      	movs	r0, #2
 80041de:	f003 fdd5 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041e2:	2102      	movs	r1, #2
 80041e4:	486e      	ldr	r0, [pc, #440]	; (80043a0 <menu+0x3050>)
 80041e6:	f005 f8f7 	bl	80093d8 <HAL_GPIO_ReadPin>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d115      	bne.n	800421c <menu+0x2ecc>
 80041f0:	4b6c      	ldr	r3, [pc, #432]	; (80043a4 <menu+0x3054>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	f083 0301 	eor.w	r3, r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00e      	beq.n	800421c <menu+0x2ecc>
			demoMode = demoMode + 1;
 80041fe:	4b6a      	ldr	r3, [pc, #424]	; (80043a8 <menu+0x3058>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4b68      	ldr	r3, [pc, #416]	; (80043a8 <menu+0x3058>)
 8004208:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800420a:	4b67      	ldr	r3, [pc, #412]	; (80043a8 <menu+0x3058>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d902      	bls.n	8004218 <menu+0x2ec8>
				demoMode = 0;
 8004212:	4b65      	ldr	r3, [pc, #404]	; (80043a8 <menu+0x3058>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004218:	f000 fc44 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800421c:	2104      	movs	r1, #4
 800421e:	4860      	ldr	r0, [pc, #384]	; (80043a0 <menu+0x3050>)
 8004220:	f005 f8da 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004224:	4603      	mov	r3, r0
 8004226:	2b01      	cmp	r3, #1
 8004228:	d115      	bne.n	8004256 <menu+0x2f06>
 800422a:	4b5e      	ldr	r3, [pc, #376]	; (80043a4 <menu+0x3054>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	f083 0301 	eor.w	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004238:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <menu+0x3058>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	3b01      	subs	r3, #1
 800423e:	b2da      	uxtb	r2, r3
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <menu+0x3058>)
 8004242:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004244:	4b58      	ldr	r3, [pc, #352]	; (80043a8 <menu+0x3058>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <menu+0x2f02>
		   		demoMode = 1;
 800424c:	4b56      	ldr	r3, [pc, #344]	; (80043a8 <menu+0x3058>)
 800424e:	2201      	movs	r2, #1
 8004250:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004252:	f000 fc27 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004256:	2108      	movs	r1, #8
 8004258:	4851      	ldr	r0, [pc, #324]	; (80043a0 <menu+0x3050>)
 800425a:	f005 f8bd 	bl	80093d8 <HAL_GPIO_ReadPin>
 800425e:	4603      	mov	r3, r0
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10d      	bne.n	8004280 <menu+0x2f30>
 8004264:	4b4f      	ldr	r3, [pc, #316]	; (80043a4 <menu+0x3054>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	f083 0301 	eor.w	r3, r3, #1
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004272:	4b4d      	ldr	r3, [pc, #308]	; (80043a8 <menu+0x3058>)
 8004274:	781a      	ldrb	r2, [r3, #0]
 8004276:	4b4d      	ldr	r3, [pc, #308]	; (80043ac <menu+0x305c>)
 8004278:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800427a:	4b4d      	ldr	r3, [pc, #308]	; (80043b0 <menu+0x3060>)
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004280:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <menu+0x3064>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b1d      	cmp	r3, #29
 8004286:	f040 8132 	bne.w	80044ee <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800428a:	4b4b      	ldr	r3, [pc, #300]	; (80043b8 <menu+0x3068>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d113      	bne.n	80042ba <menu+0x2f6a>
 8004292:	4b4a      	ldr	r3, [pc, #296]	; (80043bc <menu+0x306c>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <menu+0x2f6a>
 800429a:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <menu+0x3070>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <menu+0x2f6a>
 80042a2:	4b48      	ldr	r3, [pc, #288]	; (80043c4 <menu+0x3074>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <menu+0x2f6a>
 80042aa:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <menu+0x3078>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <menu+0x2f6a>
			calismaSayisiYar = 0;
 80042b2:	4b46      	ldr	r3, [pc, #280]	; (80043cc <menu+0x307c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e002      	b.n	80042c0 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80042ba:	4b44      	ldr	r3, [pc, #272]	; (80043cc <menu+0x307c>)
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80042c0:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <menu+0x3080>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d154      	bne.n	8004372 <menu+0x3022>
			if(dilSecim == 0) {
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <menu+0x3048>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80042d0:	4a40      	ldr	r2, [pc, #256]	; (80043d4 <menu+0x3084>)
 80042d2:	2101      	movs	r1, #1
 80042d4:	2001      	movs	r0, #1
 80042d6:	f003 fd59 	bl	8007d8c <lcd_print>
 80042da:	e008      	b.n	80042ee <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80042dc:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <menu+0x3048>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d104      	bne.n	80042ee <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80042e4:	4a3c      	ldr	r2, [pc, #240]	; (80043d8 <menu+0x3088>)
 80042e6:	2101      	movs	r1, #1
 80042e8:	2001      	movs	r0, #1
 80042ea:	f003 fd4f 	bl	8007d8c <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80042ee:	4b36      	ldr	r3, [pc, #216]	; (80043c8 <menu+0x3078>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	220a      	movs	r2, #10
 80042f4:	4939      	ldr	r1, [pc, #228]	; (80043dc <menu+0x308c>)
 80042f6:	4618      	mov	r0, r3
 80042f8:	f008 f89a 	bl	800c430 <itoa>
			lcd_print(2, 12, snum);
 80042fc:	4a37      	ldr	r2, [pc, #220]	; (80043dc <menu+0x308c>)
 80042fe:	210c      	movs	r1, #12
 8004300:	2002      	movs	r0, #2
 8004302:	f003 fd43 	bl	8007d8c <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004306:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <menu+0x3074>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	220a      	movs	r2, #10
 800430c:	4933      	ldr	r1, [pc, #204]	; (80043dc <menu+0x308c>)
 800430e:	4618      	mov	r0, r3
 8004310:	f008 f88e 	bl	800c430 <itoa>
			lcd_print(2, 13, snum);
 8004314:	4a31      	ldr	r2, [pc, #196]	; (80043dc <menu+0x308c>)
 8004316:	210d      	movs	r1, #13
 8004318:	2002      	movs	r0, #2
 800431a:	f003 fd37 	bl	8007d8c <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800431e:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <menu+0x3070>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	220a      	movs	r2, #10
 8004324:	492d      	ldr	r1, [pc, #180]	; (80043dc <menu+0x308c>)
 8004326:	4618      	mov	r0, r3
 8004328:	f008 f882 	bl	800c430 <itoa>
			lcd_print(2, 14, snum);
 800432c:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <menu+0x308c>)
 800432e:	210e      	movs	r1, #14
 8004330:	2002      	movs	r0, #2
 8004332:	f003 fd2b 	bl	8007d8c <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <menu+0x306c>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	220a      	movs	r2, #10
 800433c:	4927      	ldr	r1, [pc, #156]	; (80043dc <menu+0x308c>)
 800433e:	4618      	mov	r0, r3
 8004340:	f008 f876 	bl	800c430 <itoa>
			lcd_print(2, 15, snum);
 8004344:	4a25      	ldr	r2, [pc, #148]	; (80043dc <menu+0x308c>)
 8004346:	210f      	movs	r1, #15
 8004348:	2002      	movs	r0, #2
 800434a:	f003 fd1f 	bl	8007d8c <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800434e:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <menu+0x3068>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	220a      	movs	r2, #10
 8004354:	4921      	ldr	r1, [pc, #132]	; (80043dc <menu+0x308c>)
 8004356:	4618      	mov	r0, r3
 8004358:	f008 f86a 	bl	800c430 <itoa>
			lcd_print(2, 16, snum);
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <menu+0x308c>)
 800435e:	2110      	movs	r1, #16
 8004360:	2002      	movs	r0, #2
 8004362:	f003 fd13 	bl	8007d8c <lcd_print>

			lcd_print(2, 1, "           ");
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <menu+0x3090>)
 8004368:	2101      	movs	r1, #1
 800436a:	2002      	movs	r0, #2
 800436c:	f003 fd0e 	bl	8007d8c <lcd_print>
 8004370:	e048      	b.n	8004404 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004372:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <menu+0x3080>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d144      	bne.n	8004404 <menu+0x30b4>
			if(dilSecim == 0) {
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <menu+0x3048>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d132      	bne.n	80043e8 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004382:	4a14      	ldr	r2, [pc, #80]	; (80043d4 <menu+0x3084>)
 8004384:	2101      	movs	r1, #1
 8004386:	2001      	movs	r0, #1
 8004388:	f003 fd00 	bl	8007d8c <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <menu+0x3094>)
 800438e:	2101      	movs	r1, #1
 8004390:	2002      	movs	r0, #2
 8004392:	f003 fcfb 	bl	8007d8c <lcd_print>
 8004396:	e035      	b.n	8004404 <menu+0x30b4>
 8004398:	20000245 	.word	0x20000245
 800439c:	0800d3f0 	.word	0x0800d3f0
 80043a0:	40010800 	.word	0x40010800
 80043a4:	20000253 	.word	0x20000253
 80043a8:	20000242 	.word	0x20000242
 80043ac:	20000128 	.word	0x20000128
 80043b0:	20000250 	.word	0x20000250
 80043b4:	20000224 	.word	0x20000224
 80043b8:	20000221 	.word	0x20000221
 80043bc:	20000222 	.word	0x20000222
 80043c0:	20000008 	.word	0x20000008
 80043c4:	20000009 	.word	0x20000009
 80043c8:	20000223 	.word	0x20000223
 80043cc:	20000265 	.word	0x20000265
 80043d0:	20000244 	.word	0x20000244
 80043d4:	0800da78 	.word	0x0800da78
 80043d8:	0800da8c 	.word	0x0800da8c
 80043dc:	20000198 	.word	0x20000198
 80043e0:	0800daa0 	.word	0x0800daa0
 80043e4:	0800daac 	.word	0x0800daac
			} else if(dilSecim == 1) {
 80043e8:	4b94      	ldr	r3, [pc, #592]	; (800463c <menu+0x32ec>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d109      	bne.n	8004404 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80043f0:	4a93      	ldr	r2, [pc, #588]	; (8004640 <menu+0x32f0>)
 80043f2:	2101      	movs	r1, #1
 80043f4:	2001      	movs	r0, #1
 80043f6:	f003 fcc9 	bl	8007d8c <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80043fa:	4a92      	ldr	r2, [pc, #584]	; (8004644 <menu+0x32f4>)
 80043fc:	2101      	movs	r1, #1
 80043fe:	2002      	movs	r0, #2
 8004400:	f003 fcc4 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004404:	2102      	movs	r1, #2
 8004406:	4890      	ldr	r0, [pc, #576]	; (8004648 <menu+0x32f8>)
 8004408:	f004 ffe6 	bl	80093d8 <HAL_GPIO_ReadPin>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d119      	bne.n	8004446 <menu+0x30f6>
 8004412:	4b8e      	ldr	r3, [pc, #568]	; (800464c <menu+0x32fc>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	f083 0301 	eor.w	r3, r3, #1
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d012      	beq.n	8004446 <menu+0x30f6>
 8004420:	4b8b      	ldr	r3, [pc, #556]	; (8004650 <menu+0x3300>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00e      	beq.n	8004446 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004428:	4b8a      	ldr	r3, [pc, #552]	; (8004654 <menu+0x3304>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	b2da      	uxtb	r2, r3
 8004430:	4b88      	ldr	r3, [pc, #544]	; (8004654 <menu+0x3304>)
 8004432:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004434:	4b87      	ldr	r3, [pc, #540]	; (8004654 <menu+0x3304>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d902      	bls.n	8004442 <menu+0x30f2>
				calismaSayModu = 0;
 800443c:	4b85      	ldr	r3, [pc, #532]	; (8004654 <menu+0x3304>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004442:	f000 fb2f 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004446:	2104      	movs	r1, #4
 8004448:	487f      	ldr	r0, [pc, #508]	; (8004648 <menu+0x32f8>)
 800444a:	f004 ffc5 	bl	80093d8 <HAL_GPIO_ReadPin>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	d119      	bne.n	8004488 <menu+0x3138>
 8004454:	4b7d      	ldr	r3, [pc, #500]	; (800464c <menu+0x32fc>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f083 0301 	eor.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d012      	beq.n	8004488 <menu+0x3138>
 8004462:	4b7b      	ldr	r3, [pc, #492]	; (8004650 <menu+0x3300>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00e      	beq.n	8004488 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800446a:	4b7a      	ldr	r3, [pc, #488]	; (8004654 <menu+0x3304>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	3b01      	subs	r3, #1
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4b78      	ldr	r3, [pc, #480]	; (8004654 <menu+0x3304>)
 8004474:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004476:	4b77      	ldr	r3, [pc, #476]	; (8004654 <menu+0x3304>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <menu+0x3134>
		   		calismaSayModu = 1;
 800447e:	4b75      	ldr	r3, [pc, #468]	; (8004654 <menu+0x3304>)
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004484:	f000 fb0e 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004488:	2108      	movs	r1, #8
 800448a:	486f      	ldr	r0, [pc, #444]	; (8004648 <menu+0x32f8>)
 800448c:	f004 ffa4 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d12b      	bne.n	80044ee <menu+0x319e>
 8004496:	4b6d      	ldr	r3, [pc, #436]	; (800464c <menu+0x32fc>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	f083 0301 	eor.w	r3, r3, #1
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d024      	beq.n	80044ee <menu+0x319e>
			eepromData[32] = 0;
 80044a4:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <menu+0x3308>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80044ac:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <menu+0x3308>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80044b2:	4b69      	ldr	r3, [pc, #420]	; (8004658 <menu+0x3308>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80044b8:	4b67      	ldr	r3, [pc, #412]	; (8004658 <menu+0x3308>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80044be:	4b66      	ldr	r3, [pc, #408]	; (8004658 <menu+0x3308>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80044c4:	4b65      	ldr	r3, [pc, #404]	; (800465c <menu+0x330c>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80044ca:	4b65      	ldr	r3, [pc, #404]	; (8004660 <menu+0x3310>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80044d0:	4b64      	ldr	r3, [pc, #400]	; (8004664 <menu+0x3314>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80044d6:	4b64      	ldr	r3, [pc, #400]	; (8004668 <menu+0x3318>)
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80044dc:	4b63      	ldr	r3, [pc, #396]	; (800466c <menu+0x331c>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80044e2:	4b5c      	ldr	r3, [pc, #368]	; (8004654 <menu+0x3304>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80044e8:	4b61      	ldr	r3, [pc, #388]	; (8004670 <menu+0x3320>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80044ee:	4b61      	ldr	r3, [pc, #388]	; (8004674 <menu+0x3324>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b1e      	cmp	r3, #30
 80044f4:	d16f      	bne.n	80045d6 <menu+0x3286>
		calismaSayModu = 0;
 80044f6:	4b57      	ldr	r3, [pc, #348]	; (8004654 <menu+0x3304>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044fc:	4b4f      	ldr	r3, [pc, #316]	; (800463c <menu+0x32ec>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004504:	4a5c      	ldr	r2, [pc, #368]	; (8004678 <menu+0x3328>)
 8004506:	2101      	movs	r1, #1
 8004508:	2001      	movs	r0, #1
 800450a:	f003 fc3f 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800450e:	4a5b      	ldr	r2, [pc, #364]	; (800467c <menu+0x332c>)
 8004510:	2101      	movs	r1, #1
 8004512:	2002      	movs	r0, #2
 8004514:	f003 fc3a 	bl	8007d8c <lcd_print>
 8004518:	e00d      	b.n	8004536 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800451a:	4b48      	ldr	r3, [pc, #288]	; (800463c <menu+0x32ec>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d109      	bne.n	8004536 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004522:	4a57      	ldr	r2, [pc, #348]	; (8004680 <menu+0x3330>)
 8004524:	2101      	movs	r1, #1
 8004526:	2001      	movs	r0, #1
 8004528:	f003 fc30 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800452c:	4a55      	ldr	r2, [pc, #340]	; (8004684 <menu+0x3334>)
 800452e:	2101      	movs	r1, #1
 8004530:	2002      	movs	r0, #2
 8004532:	f003 fc2b 	bl	8007d8c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004536:	2102      	movs	r1, #2
 8004538:	4843      	ldr	r0, [pc, #268]	; (8004648 <menu+0x32f8>)
 800453a:	f004 ff4d 	bl	80093d8 <HAL_GPIO_ReadPin>
 800453e:	4603      	mov	r3, r0
 8004540:	2b01      	cmp	r3, #1
 8004542:	d115      	bne.n	8004570 <menu+0x3220>
 8004544:	4b41      	ldr	r3, [pc, #260]	; (800464c <menu+0x32fc>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	f083 0301 	eor.w	r3, r3, #1
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00e      	beq.n	8004570 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004552:	4b3a      	ldr	r3, [pc, #232]	; (800463c <menu+0x32ec>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	3301      	adds	r3, #1
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b38      	ldr	r3, [pc, #224]	; (800463c <menu+0x32ec>)
 800455c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800455e:	4b37      	ldr	r3, [pc, #220]	; (800463c <menu+0x32ec>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d902      	bls.n	800456c <menu+0x321c>
				dilSecim = 0;
 8004566:	4b35      	ldr	r3, [pc, #212]	; (800463c <menu+0x32ec>)
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800456c:	f000 fa9a 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004570:	2104      	movs	r1, #4
 8004572:	4835      	ldr	r0, [pc, #212]	; (8004648 <menu+0x32f8>)
 8004574:	f004 ff30 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d115      	bne.n	80045aa <menu+0x325a>
 800457e:	4b33      	ldr	r3, [pc, #204]	; (800464c <menu+0x32fc>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	f083 0301 	eor.w	r3, r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00e      	beq.n	80045aa <menu+0x325a>
			dilSecim = dilSecim - 1;
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <menu+0x32ec>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	3b01      	subs	r3, #1
 8004592:	b2da      	uxtb	r2, r3
 8004594:	4b29      	ldr	r3, [pc, #164]	; (800463c <menu+0x32ec>)
 8004596:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004598:	4b28      	ldr	r3, [pc, #160]	; (800463c <menu+0x32ec>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <menu+0x3256>
		   		dilSecim = 1;
 80045a0:	4b26      	ldr	r3, [pc, #152]	; (800463c <menu+0x32ec>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80045a6:	f000 fa7d 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045aa:	2108      	movs	r1, #8
 80045ac:	4826      	ldr	r0, [pc, #152]	; (8004648 <menu+0x32f8>)
 80045ae:	f004 ff13 	bl	80093d8 <HAL_GPIO_ReadPin>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d10e      	bne.n	80045d6 <menu+0x3286>
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <menu+0x32fc>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	f083 0301 	eor.w	r3, r3, #1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <menu+0x3286>
			eepromData[33] = dilSecim;
 80045c6:	4b1d      	ldr	r3, [pc, #116]	; (800463c <menu+0x32ec>)
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	4b23      	ldr	r3, [pc, #140]	; (8004658 <menu+0x3308>)
 80045cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <menu+0x3320>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80045d6:	4b27      	ldr	r3, [pc, #156]	; (8004674 <menu+0x3324>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b1f      	cmp	r3, #31
 80045dc:	f040 80b7 	bne.w	800474e <menu+0x33fe>
		calismaSayModu = 0;
 80045e0:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <menu+0x3304>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80045e6:	4a28      	ldr	r2, [pc, #160]	; (8004688 <menu+0x3338>)
 80045e8:	2101      	movs	r1, #1
 80045ea:	2001      	movs	r0, #1
 80045ec:	f003 fbce 	bl	8007d8c <lcd_print>

		if(iotMode == 0) {
 80045f0:	4b26      	ldr	r3, [pc, #152]	; (800468c <menu+0x333c>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d113      	bne.n	8004620 <menu+0x32d0>
			if(dilSecim == 0) {
 80045f8:	4b10      	ldr	r3, [pc, #64]	; (800463c <menu+0x32ec>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004600:	4a23      	ldr	r2, [pc, #140]	; (8004690 <menu+0x3340>)
 8004602:	2101      	movs	r1, #1
 8004604:	2002      	movs	r0, #2
 8004606:	f003 fbc1 	bl	8007d8c <lcd_print>
 800460a:	e050      	b.n	80046ae <menu+0x335e>
			} else if(dilSecim == 1) {
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <menu+0x32ec>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d14c      	bne.n	80046ae <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004614:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <menu+0x3344>)
 8004616:	2101      	movs	r1, #1
 8004618:	2002      	movs	r0, #2
 800461a:	f003 fbb7 	bl	8007d8c <lcd_print>
 800461e:	e046      	b.n	80046ae <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004620:	4b1a      	ldr	r3, [pc, #104]	; (800468c <menu+0x333c>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d142      	bne.n	80046ae <menu+0x335e>
			if(dilSecim == 0) {
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <menu+0x32ec>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d135      	bne.n	800469c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004630:	4a19      	ldr	r2, [pc, #100]	; (8004698 <menu+0x3348>)
 8004632:	2101      	movs	r1, #1
 8004634:	2002      	movs	r0, #2
 8004636:	f003 fba9 	bl	8007d8c <lcd_print>
 800463a:	e038      	b.n	80046ae <menu+0x335e>
 800463c:	20000245 	.word	0x20000245
 8004640:	0800da8c 	.word	0x0800da8c
 8004644:	0800dac0 	.word	0x0800dac0
 8004648:	40010800 	.word	0x40010800
 800464c:	20000253 	.word	0x20000253
 8004650:	20000265 	.word	0x20000265
 8004654:	20000244 	.word	0x20000244
 8004658:	20000128 	.word	0x20000128
 800465c:	20000223 	.word	0x20000223
 8004660:	20000009 	.word	0x20000009
 8004664:	20000008 	.word	0x20000008
 8004668:	20000222 	.word	0x20000222
 800466c:	20000221 	.word	0x20000221
 8004670:	20000250 	.word	0x20000250
 8004674:	20000224 	.word	0x20000224
 8004678:	0800dad4 	.word	0x0800dad4
 800467c:	0800dae8 	.word	0x0800dae8
 8004680:	0800dafc 	.word	0x0800dafc
 8004684:	0800db10 	.word	0x0800db10
 8004688:	0800db24 	.word	0x0800db24
 800468c:	20000243 	.word	0x20000243
 8004690:	0800d37c 	.word	0x0800d37c
 8004694:	0800d390 	.word	0x0800d390
 8004698:	0800d3dc 	.word	0x0800d3dc
			} else if(dilSecim == 1) {
 800469c:	4bad      	ldr	r3, [pc, #692]	; (8004954 <menu+0x3604>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d104      	bne.n	80046ae <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80046a4:	4aac      	ldr	r2, [pc, #688]	; (8004958 <menu+0x3608>)
 80046a6:	2101      	movs	r1, #1
 80046a8:	2002      	movs	r0, #2
 80046aa:	f003 fb6f 	bl	8007d8c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ae:	2102      	movs	r1, #2
 80046b0:	48aa      	ldr	r0, [pc, #680]	; (800495c <menu+0x360c>)
 80046b2:	f004 fe91 	bl	80093d8 <HAL_GPIO_ReadPin>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d115      	bne.n	80046e8 <menu+0x3398>
 80046bc:	4ba8      	ldr	r3, [pc, #672]	; (8004960 <menu+0x3610>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f083 0301 	eor.w	r3, r3, #1
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <menu+0x3398>
			iotMode = iotMode + 1;
 80046ca:	4ba6      	ldr	r3, [pc, #664]	; (8004964 <menu+0x3614>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4ba4      	ldr	r3, [pc, #656]	; (8004964 <menu+0x3614>)
 80046d4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80046d6:	4ba3      	ldr	r3, [pc, #652]	; (8004964 <menu+0x3614>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d902      	bls.n	80046e4 <menu+0x3394>
				iotMode = 0;
 80046de:	4ba1      	ldr	r3, [pc, #644]	; (8004964 <menu+0x3614>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046e4:	f000 f9de 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046e8:	2104      	movs	r1, #4
 80046ea:	489c      	ldr	r0, [pc, #624]	; (800495c <menu+0x360c>)
 80046ec:	f004 fe74 	bl	80093d8 <HAL_GPIO_ReadPin>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d115      	bne.n	8004722 <menu+0x33d2>
 80046f6:	4b9a      	ldr	r3, [pc, #616]	; (8004960 <menu+0x3610>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f083 0301 	eor.w	r3, r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00e      	beq.n	8004722 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004704:	4b97      	ldr	r3, [pc, #604]	; (8004964 <menu+0x3614>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	3b01      	subs	r3, #1
 800470a:	b2da      	uxtb	r2, r3
 800470c:	4b95      	ldr	r3, [pc, #596]	; (8004964 <menu+0x3614>)
 800470e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004710:	4b94      	ldr	r3, [pc, #592]	; (8004964 <menu+0x3614>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <menu+0x33ce>
		   		iotMode = 1;
 8004718:	4b92      	ldr	r3, [pc, #584]	; (8004964 <menu+0x3614>)
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800471e:	f000 f9c1 	bl	8004aa4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004722:	2108      	movs	r1, #8
 8004724:	488d      	ldr	r0, [pc, #564]	; (800495c <menu+0x360c>)
 8004726:	f004 fe57 	bl	80093d8 <HAL_GPIO_ReadPin>
 800472a:	4603      	mov	r3, r0
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10e      	bne.n	800474e <menu+0x33fe>
 8004730:	4b8b      	ldr	r3, [pc, #556]	; (8004960 <menu+0x3610>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	f083 0301 	eor.w	r3, r3, #1
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <menu+0x33fe>
			eepromData[48] = iotMode;
 800473e:	4b89      	ldr	r3, [pc, #548]	; (8004964 <menu+0x3614>)
 8004740:	781a      	ldrb	r2, [r3, #0]
 8004742:	4b89      	ldr	r3, [pc, #548]	; (8004968 <menu+0x3618>)
 8004744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004748:	4b88      	ldr	r3, [pc, #544]	; (800496c <menu+0x361c>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800474e:	4b88      	ldr	r3, [pc, #544]	; (8004970 <menu+0x3620>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b20      	cmp	r3, #32
 8004754:	d142      	bne.n	80047dc <menu+0x348c>
		calismaSayModu = 0;
 8004756:	4b87      	ldr	r3, [pc, #540]	; (8004974 <menu+0x3624>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800475c:	4b7d      	ldr	r3, [pc, #500]	; (8004954 <menu+0x3604>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 8004764:	4a84      	ldr	r2, [pc, #528]	; (8004978 <menu+0x3628>)
 8004766:	2101      	movs	r1, #1
 8004768:	2001      	movs	r0, #1
 800476a:	f003 fb0f 	bl	8007d8c <lcd_print>
 800476e:	e004      	b.n	800477a <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004770:	4a82      	ldr	r2, [pc, #520]	; (800497c <menu+0x362c>)
 8004772:	2101      	movs	r1, #1
 8004774:	2001      	movs	r0, #1
 8004776:	f003 fb09 	bl	8007d8c <lcd_print>
		}

		lcd_print(2, 1, machineID);
 800477a:	4a81      	ldr	r2, [pc, #516]	; (8004980 <menu+0x3630>)
 800477c:	2101      	movs	r1, #1
 800477e:	2002      	movs	r0, #2
 8004780:	f003 fb04 	bl	8007d8c <lcd_print>
		lcd_print(2, 13, "    ");
 8004784:	4a7f      	ldr	r2, [pc, #508]	; (8004984 <menu+0x3634>)
 8004786:	210d      	movs	r1, #13
 8004788:	2002      	movs	r0, #2
 800478a:	f003 faff 	bl	8007d8c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800478e:	2102      	movs	r1, #2
 8004790:	4872      	ldr	r0, [pc, #456]	; (800495c <menu+0x360c>)
 8004792:	f004 fe21 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004796:	4603      	mov	r3, r0
 8004798:	2b01      	cmp	r3, #1
 800479a:	d11f      	bne.n	80047dc <menu+0x348c>
 800479c:	2104      	movs	r1, #4
 800479e:	486f      	ldr	r0, [pc, #444]	; (800495c <menu+0x360c>)
 80047a0:	f004 fe1a 	bl	80093d8 <HAL_GPIO_ReadPin>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d118      	bne.n	80047dc <menu+0x348c>
 80047aa:	4b6d      	ldr	r3, [pc, #436]	; (8004960 <menu+0x3610>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	f083 0301 	eor.w	r3, r3, #1
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d011      	beq.n	80047dc <menu+0x348c>
			takeMachineID(0);
 80047b8:	2000      	movs	r0, #0
 80047ba:	f002 fa7f 	bl	8006cbc <takeMachineID>

			HAL_Delay(50);
 80047be:	2032      	movs	r0, #50	; 0x32
 80047c0:	f004 f83a 	bl	8008838 <HAL_Delay>

			lcd_print(2, 1, machineID);
 80047c4:	4a6e      	ldr	r2, [pc, #440]	; (8004980 <menu+0x3630>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	2002      	movs	r0, #2
 80047ca:	f003 fadf 	bl	8007d8c <lcd_print>
			lcd_print(2, 13, "    ");
 80047ce:	4a6d      	ldr	r2, [pc, #436]	; (8004984 <menu+0x3634>)
 80047d0:	210d      	movs	r1, #13
 80047d2:	2002      	movs	r0, #2
 80047d4:	f003 fada 	bl	8007d8c <lcd_print>

			bekle();
 80047d8:	f000 f964 	bl	8004aa4 <bekle>
		}
	}

	if (menuSayac == 33) {
 80047dc:	4b64      	ldr	r3, [pc, #400]	; (8004970 <menu+0x3620>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b21      	cmp	r3, #33	; 0x21
 80047e2:	d14f      	bne.n	8004884 <menu+0x3534>
		calismaSayModu = 0;
 80047e4:	4b63      	ldr	r3, [pc, #396]	; (8004974 <menu+0x3624>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 80047ea:	4a67      	ldr	r2, [pc, #412]	; (8004988 <menu+0x3638>)
 80047ec:	2101      	movs	r1, #1
 80047ee:	2001      	movs	r0, #1
 80047f0:	f003 facc 	bl	8007d8c <lcd_print>
		if(strlen(wifiSSID) <=16) {
 80047f4:	4865      	ldr	r0, [pc, #404]	; (800498c <menu+0x363c>)
 80047f6:	f7fb fd15 	bl	8000224 <strlen>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d80f      	bhi.n	8004820 <menu+0x34d0>
			lcd_print(2, 1, wifiSSID);
 8004800:	4a62      	ldr	r2, [pc, #392]	; (800498c <menu+0x363c>)
 8004802:	2101      	movs	r1, #1
 8004804:	2002      	movs	r0, #2
 8004806:	f003 fac1 	bl	8007d8c <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 800480a:	4860      	ldr	r0, [pc, #384]	; (800498c <menu+0x363c>)
 800480c:	f7fb fd0a 	bl	8000224 <strlen>
 8004810:	4603      	mov	r3, r0
 8004812:	3301      	adds	r3, #1
 8004814:	4a5e      	ldr	r2, [pc, #376]	; (8004990 <menu+0x3640>)
 8004816:	4619      	mov	r1, r3
 8004818:	2002      	movs	r0, #2
 800481a:	f003 fab7 	bl	8007d8c <lcd_print>
 800481e:	e005      	b.n	800482c <menu+0x34dc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004820:	2300      	movs	r3, #0
 8004822:	2202      	movs	r2, #2
 8004824:	2101      	movs	r1, #1
 8004826:	4859      	ldr	r0, [pc, #356]	; (800498c <menu+0x363c>)
 8004828:	f7fc fcd6 	bl	80011d8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800482c:	2102      	movs	r1, #2
 800482e:	484b      	ldr	r0, [pc, #300]	; (800495c <menu+0x360c>)
 8004830:	f004 fdd2 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004834:	4603      	mov	r3, r0
 8004836:	2b01      	cmp	r3, #1
 8004838:	d124      	bne.n	8004884 <menu+0x3534>
 800483a:	2104      	movs	r1, #4
 800483c:	4847      	ldr	r0, [pc, #284]	; (800495c <menu+0x360c>)
 800483e:	f004 fdcb 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d11d      	bne.n	8004884 <menu+0x3534>
 8004848:	4b45      	ldr	r3, [pc, #276]	; (8004960 <menu+0x3610>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f083 0301 	eor.w	r3, r3, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <menu+0x3534>
			takeWifiSSID(0);
 8004856:	2000      	movs	r0, #0
 8004858:	f002 fb9a 	bl	8006f90 <takeWifiSSID>

			HAL_Delay(100);
 800485c:	2064      	movs	r0, #100	; 0x64
 800485e:	f003 ffeb 	bl	8008838 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004862:	4a4a      	ldr	r2, [pc, #296]	; (800498c <menu+0x363c>)
 8004864:	2101      	movs	r1, #1
 8004866:	2002      	movs	r0, #2
 8004868:	f003 fa90 	bl	8007d8c <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 800486c:	4847      	ldr	r0, [pc, #284]	; (800498c <menu+0x363c>)
 800486e:	f7fb fcd9 	bl	8000224 <strlen>
 8004872:	4603      	mov	r3, r0
 8004874:	3301      	adds	r3, #1
 8004876:	4a46      	ldr	r2, [pc, #280]	; (8004990 <menu+0x3640>)
 8004878:	4619      	mov	r1, r3
 800487a:	2002      	movs	r0, #2
 800487c:	f003 fa86 	bl	8007d8c <lcd_print>

			bekle();
 8004880:	f000 f910 	bl	8004aa4 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004884:	4b3a      	ldr	r3, [pc, #232]	; (8004970 <menu+0x3620>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b22      	cmp	r3, #34	; 0x22
 800488a:	d14f      	bne.n	800492c <menu+0x35dc>
		calismaSayModu = 0;
 800488c:	4b39      	ldr	r3, [pc, #228]	; (8004974 <menu+0x3624>)
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004892:	4a40      	ldr	r2, [pc, #256]	; (8004994 <menu+0x3644>)
 8004894:	2101      	movs	r1, #1
 8004896:	2001      	movs	r0, #1
 8004898:	f003 fa78 	bl	8007d8c <lcd_print>
		if(strlen(wifiPass) <= 16) {
 800489c:	483e      	ldr	r0, [pc, #248]	; (8004998 <menu+0x3648>)
 800489e:	f7fb fcc1 	bl	8000224 <strlen>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d80f      	bhi.n	80048c8 <menu+0x3578>
			lcd_print(2, 1, wifiPass);
 80048a8:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <menu+0x3648>)
 80048aa:	2101      	movs	r1, #1
 80048ac:	2002      	movs	r0, #2
 80048ae:	f003 fa6d 	bl	8007d8c <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80048b2:	4839      	ldr	r0, [pc, #228]	; (8004998 <menu+0x3648>)
 80048b4:	f7fb fcb6 	bl	8000224 <strlen>
 80048b8:	4603      	mov	r3, r0
 80048ba:	3301      	adds	r3, #1
 80048bc:	4a34      	ldr	r2, [pc, #208]	; (8004990 <menu+0x3640>)
 80048be:	4619      	mov	r1, r3
 80048c0:	2002      	movs	r0, #2
 80048c2:	f003 fa63 	bl	8007d8c <lcd_print>
 80048c6:	e005      	b.n	80048d4 <menu+0x3584>
		} else {
			slideText(wifiPass, 1, 2, 1);
 80048c8:	2301      	movs	r3, #1
 80048ca:	2202      	movs	r2, #2
 80048cc:	2101      	movs	r1, #1
 80048ce:	4832      	ldr	r0, [pc, #200]	; (8004998 <menu+0x3648>)
 80048d0:	f7fc fc82 	bl	80011d8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048d4:	2102      	movs	r1, #2
 80048d6:	4821      	ldr	r0, [pc, #132]	; (800495c <menu+0x360c>)
 80048d8:	f004 fd7e 	bl	80093d8 <HAL_GPIO_ReadPin>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d124      	bne.n	800492c <menu+0x35dc>
 80048e2:	2104      	movs	r1, #4
 80048e4:	481d      	ldr	r0, [pc, #116]	; (800495c <menu+0x360c>)
 80048e6:	f004 fd77 	bl	80093d8 <HAL_GPIO_ReadPin>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d11d      	bne.n	800492c <menu+0x35dc>
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <menu+0x3610>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	f083 0301 	eor.w	r3, r3, #1
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d016      	beq.n	800492c <menu+0x35dc>
			takeWifiPass(0);
 80048fe:	2000      	movs	r0, #0
 8004900:	f002 fd28 	bl	8007354 <takeWifiPass>

			HAL_Delay(50);
 8004904:	2032      	movs	r0, #50	; 0x32
 8004906:	f003 ff97 	bl	8008838 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 800490a:	4a23      	ldr	r2, [pc, #140]	; (8004998 <menu+0x3648>)
 800490c:	2101      	movs	r1, #1
 800490e:	2002      	movs	r0, #2
 8004910:	f003 fa3c 	bl	8007d8c <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004914:	4820      	ldr	r0, [pc, #128]	; (8004998 <menu+0x3648>)
 8004916:	f7fb fc85 	bl	8000224 <strlen>
 800491a:	4603      	mov	r3, r0
 800491c:	3301      	adds	r3, #1
 800491e:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <menu+0x3640>)
 8004920:	4619      	mov	r1, r3
 8004922:	2002      	movs	r0, #2
 8004924:	f003 fa32 	bl	8007d8c <lcd_print>

			bekle();
 8004928:	f000 f8bc 	bl	8004aa4 <bekle>
		}
	}

	if (menuSayac == 35) {
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <menu+0x3620>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b23      	cmp	r3, #35	; 0x23
 8004932:	d157      	bne.n	80049e4 <menu+0x3694>
		if(dilSecim == 0) {
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <menu+0x3604>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d133      	bne.n	80049a4 <menu+0x3654>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <menu+0x364c>)
 800493e:	2101      	movs	r1, #1
 8004940:	2001      	movs	r0, #1
 8004942:	f003 fa23 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004946:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <menu+0x3650>)
 8004948:	2101      	movs	r1, #1
 800494a:	2002      	movs	r0, #2
 800494c:	f003 fa1e 	bl	8007d8c <lcd_print>
 8004950:	e036      	b.n	80049c0 <menu+0x3670>
 8004952:	bf00      	nop
 8004954:	20000245 	.word	0x20000245
 8004958:	0800d3f0 	.word	0x0800d3f0
 800495c:	40010800 	.word	0x40010800
 8004960:	20000253 	.word	0x20000253
 8004964:	20000243 	.word	0x20000243
 8004968:	20000128 	.word	0x20000128
 800496c:	20000250 	.word	0x20000250
 8004970:	20000224 	.word	0x20000224
 8004974:	20000244 	.word	0x20000244
 8004978:	0800db38 	.word	0x0800db38
 800497c:	0800db4c 	.word	0x0800db4c
 8004980:	200001a0 	.word	0x200001a0
 8004984:	0800db60 	.word	0x0800db60
 8004988:	0800db68 	.word	0x0800db68
 800498c:	200001ac 	.word	0x200001ac
 8004990:	20000018 	.word	0x20000018
 8004994:	0800db7c 	.word	0x0800db7c
 8004998:	200001c0 	.word	0x200001c0
 800499c:	0800db90 	.word	0x0800db90
 80049a0:	0800dba4 	.word	0x0800dba4
		} else if(dilSecim == 1) {
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <menu+0x3698>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d109      	bne.n	80049c0 <menu+0x3670>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <menu+0x369c>)
 80049ae:	2101      	movs	r1, #1
 80049b0:	2001      	movs	r0, #1
 80049b2:	f003 f9eb 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80049b6:	4a0e      	ldr	r2, [pc, #56]	; (80049f0 <menu+0x36a0>)
 80049b8:	2101      	movs	r1, #1
 80049ba:	2002      	movs	r0, #2
 80049bc:	f003 f9e6 	bl	8007d8c <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80049c0:	2108      	movs	r1, #8
 80049c2:	480c      	ldr	r0, [pc, #48]	; (80049f4 <menu+0x36a4>)
 80049c4:	f004 fd08 	bl	80093d8 <HAL_GPIO_ReadPin>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d10a      	bne.n	80049e4 <menu+0x3694>
			menuGiris = 0;
 80049ce:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <menu+0x36a8>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 80049d4:	f003 fa06 	bl	8007de4 <lcd_clear>
			HAL_Delay(500);
 80049d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049dc:	f003 ff2c 	bl	8008838 <HAL_Delay>
			NVIC_SystemReset();
 80049e0:	f7fc fca0 	bl	8001324 <__NVIC_SystemReset>
		}
	}
}
 80049e4:	bf00      	nop
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000245 	.word	0x20000245
 80049ec:	0800dbb8 	.word	0x0800dbb8
 80049f0:	0800dbcc 	.word	0x0800dbcc
 80049f4:	40010800 	.word	0x40010800
 80049f8:	20000241 	.word	0x20000241

080049fc <lcdUpdate>:
#include "main.h"
#include "Process.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void lcdUpdate(uint8_t y) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d105      	bne.n	8004a18 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a0c:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <lcdUpdate+0x9c>)
 8004a0e:	2101      	movs	r1, #1
 8004a10:	2002      	movs	r0, #2
 8004a12:	f003 f9bb 	bl	8007d8c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a16:	e03b      	b.n	8004a90 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d105      	bne.n	8004a2a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a1e:	4a1e      	ldr	r2, [pc, #120]	; (8004a98 <lcdUpdate+0x9c>)
 8004a20:	2102      	movs	r1, #2
 8004a22:	2002      	movs	r0, #2
 8004a24:	f003 f9b2 	bl	8007d8c <lcd_print>
}
 8004a28:	e032      	b.n	8004a90 <lcdUpdate+0x94>
	} else if(y==3) {
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d105      	bne.n	8004a3c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <lcdUpdate+0x9c>)
 8004a32:	2103      	movs	r1, #3
 8004a34:	2002      	movs	r0, #2
 8004a36:	f003 f9a9 	bl	8007d8c <lcd_print>
}
 8004a3a:	e029      	b.n	8004a90 <lcdUpdate+0x94>
	} else if(y==4) {
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d105      	bne.n	8004a4e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004a42:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <lcdUpdate+0x9c>)
 8004a44:	2104      	movs	r1, #4
 8004a46:	2002      	movs	r0, #2
 8004a48:	f003 f9a0 	bl	8007d8c <lcd_print>
}
 8004a4c:	e020      	b.n	8004a90 <lcdUpdate+0x94>
	} else if(y==5) {
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d105      	bne.n	8004a60 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004a54:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <lcdUpdate+0x9c>)
 8004a56:	2105      	movs	r1, #5
 8004a58:	2002      	movs	r0, #2
 8004a5a:	f003 f997 	bl	8007d8c <lcd_print>
}
 8004a5e:	e017      	b.n	8004a90 <lcdUpdate+0x94>
	} else if(y==6) {
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d105      	bne.n	8004a72 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004a66:	4a0c      	ldr	r2, [pc, #48]	; (8004a98 <lcdUpdate+0x9c>)
 8004a68:	2106      	movs	r1, #6
 8004a6a:	2002      	movs	r0, #2
 8004a6c:	f003 f98e 	bl	8007d8c <lcd_print>
}
 8004a70:	e00e      	b.n	8004a90 <lcdUpdate+0x94>
	} else if (y==7) {
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	2b07      	cmp	r3, #7
 8004a76:	d10b      	bne.n	8004a90 <lcdUpdate+0x94>
		lcd_clear();
 8004a78:	f003 f9b4 	bl	8007de4 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004a7c:	4a07      	ldr	r2, [pc, #28]	; (8004a9c <lcdUpdate+0xa0>)
 8004a7e:	2104      	movs	r1, #4
 8004a80:	2001      	movs	r0, #1
 8004a82:	f003 f983 	bl	8007d8c <lcd_print>
		lcd_print(2, 6, "RUN");
 8004a86:	4a06      	ldr	r2, [pc, #24]	; (8004aa0 <lcdUpdate+0xa4>)
 8004a88:	2106      	movs	r1, #6
 8004a8a:	2002      	movs	r0, #2
 8004a8c:	f003 f97e 	bl	8007d8c <lcd_print>
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	0800dbe0 	.word	0x0800dbe0
 8004a9c:	0800dbe4 	.word	0x0800dbe4
 8004aa0:	0800dbec 	.word	0x0800dbec

08004aa4 <bekle>:

void bekle() {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
	timer1=millis;
 8004aa8:	4b47      	ldr	r3, [pc, #284]	; (8004bc8 <bekle+0x124>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a47      	ldr	r2, [pc, #284]	; (8004bcc <bekle+0x128>)
 8004aae:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ab0:	e002      	b.n	8004ab8 <bekle+0x14>
    	butonKontrol = 1;
 8004ab2:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <bekle+0x12c>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4846      	ldr	r0, [pc, #280]	; (8004bd4 <bekle+0x130>)
 8004abc:	f004 fc8c 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d109      	bne.n	8004ada <bekle+0x36>
 8004ac6:	4b40      	ldr	r3, [pc, #256]	; (8004bc8 <bekle+0x124>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b40      	ldr	r3, [pc, #256]	; (8004bcc <bekle+0x128>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d0ef      	beq.n	8004ab2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ad2:	e002      	b.n	8004ada <bekle+0x36>
    	butonKontrol = 1;
 8004ad4:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <bekle+0x12c>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ada:	2108      	movs	r1, #8
 8004adc:	483e      	ldr	r0, [pc, #248]	; (8004bd8 <bekle+0x134>)
 8004ade:	f004 fc7b 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d109      	bne.n	8004afc <bekle+0x58>
 8004ae8:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <bekle+0x124>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4b37      	ldr	r3, [pc, #220]	; (8004bcc <bekle+0x128>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d0ef      	beq.n	8004ad4 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004af4:	e002      	b.n	8004afc <bekle+0x58>
    	butonKontrol = 1;
 8004af6:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <bekle+0x12c>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004afc:	2102      	movs	r1, #2
 8004afe:	4835      	ldr	r0, [pc, #212]	; (8004bd4 <bekle+0x130>)
 8004b00:	f004 fc6a 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d109      	bne.n	8004b1e <bekle+0x7a>
 8004b0a:	4b2f      	ldr	r3, [pc, #188]	; (8004bc8 <bekle+0x124>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b2f      	ldr	r3, [pc, #188]	; (8004bcc <bekle+0x128>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d0ef      	beq.n	8004af6 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b16:	e002      	b.n	8004b1e <bekle+0x7a>
    	butonKontrol = 1;
 8004b18:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <bekle+0x12c>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b1e:	2104      	movs	r1, #4
 8004b20:	482c      	ldr	r0, [pc, #176]	; (8004bd4 <bekle+0x130>)
 8004b22:	f004 fc59 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d109      	bne.n	8004b40 <bekle+0x9c>
 8004b2c:	4b26      	ldr	r3, [pc, #152]	; (8004bc8 <bekle+0x124>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <bekle+0x128>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d0ef      	beq.n	8004b18 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b38:	e002      	b.n	8004b40 <bekle+0x9c>
    	butonKontrol = 1;
 8004b3a:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <bekle+0x12c>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b40:	2108      	movs	r1, #8
 8004b42:	4824      	ldr	r0, [pc, #144]	; (8004bd4 <bekle+0x130>)
 8004b44:	f004 fc48 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d109      	bne.n	8004b62 <bekle+0xbe>
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <bekle+0x124>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <bekle+0x128>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d0ef      	beq.n	8004b3a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b5a:	e002      	b.n	8004b62 <bekle+0xbe>
    	butonKontrol = 1;
 8004b5c:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <bekle+0x12c>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	481c      	ldr	r0, [pc, #112]	; (8004bd8 <bekle+0x134>)
 8004b66:	f004 fc37 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <bekle+0xe0>
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <bekle+0x124>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <bekle+0x128>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d0ef      	beq.n	8004b5c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b7c:	e002      	b.n	8004b84 <bekle+0xe0>
    	butonKontrol = 1;
 8004b7e:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <bekle+0x12c>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b88:	4813      	ldr	r0, [pc, #76]	; (8004bd8 <bekle+0x134>)
 8004b8a:	f004 fc25 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <bekle+0x104>
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <bekle+0x124>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <bekle+0x128>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d0ee      	beq.n	8004b7e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ba0:	e002      	b.n	8004ba8 <bekle+0x104>
    	butonKontrol = 1;
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <bekle+0x12c>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bac:	480a      	ldr	r0, [pc, #40]	; (8004bd8 <bekle+0x134>)
 8004bae:	f004 fc13 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d105      	bne.n	8004bc4 <bekle+0x120>
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <bekle+0x124>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <bekle+0x128>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d0ee      	beq.n	8004ba2 <bekle+0xfe>
    }

}
 8004bc4:	bf00      	nop
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000200 	.word	0x20000200
 8004bcc:	20000208 	.word	0x20000208
 8004bd0:	20000253 	.word	0x20000253
 8004bd4:	40010800 	.word	0x40010800
 8004bd8:	40011000 	.word	0x40011000

08004bdc <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <checkLCDBacklight+0x24>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <checkLCDBacklight+0x28>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b3b      	cmp	r3, #59	; 0x3b
 8004bec:	d903      	bls.n	8004bf6 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f003 f918 	bl	8007e24 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004bf4:	e002      	b.n	8004bfc <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	f003 f914 	bl	8007e24 <lcd_backlight>
}
 8004bfc:	bf00      	nop
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000200 	.word	0x20000200
 8004c04:	2000021c 	.word	0x2000021c

08004c08 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c0c:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <checkBasincSalteri+0x54>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <checkBasincSalteri+0x12>
		basincVar=1;
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <checkBasincSalteri+0x58>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <checkBasincSalteri+0x54>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d119      	bne.n	8004c56 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c26:	480f      	ldr	r0, [pc, #60]	; (8004c64 <checkBasincSalteri+0x5c>)
 8004c28:	f004 fbd6 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <checkBasincSalteri+0x60>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <checkBasincSalteri+0x64>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d90a      	bls.n	8004c56 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <checkBasincSalteri+0x58>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004c46:	e006      	b.n	8004c56 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004c48:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <checkBasincSalteri+0x60>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a07      	ldr	r2, [pc, #28]	; (8004c6c <checkBasincSalteri+0x64>)
 8004c4e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <checkBasincSalteri+0x58>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	2000022b 	.word	0x2000022b
 8004c60:	20000227 	.word	0x20000227
 8004c64:	40011000 	.word	0x40011000
 8004c68:	20000200 	.word	0x20000200
 8004c6c:	20000218 	.word	0x20000218

08004c70 <checkBasGonder>:

void checkBasGonder() {
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <checkBasGonder+0x74>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d10b      	bne.n	8004c94 <checkBasGonder+0x24>
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <checkBasGonder+0x78>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <checkBasGonder+0x24>
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <checkBasGonder+0x7c>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d103      	bne.n	8004c94 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004c8c:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <checkBasGonder+0x80>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e009      	b.n	8004ca8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <checkBasGonder+0x78>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	f083 0301 	eor.w	r3, r3, #1
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004ca2:	4b13      	ldr	r3, [pc, #76]	; (8004cf0 <checkBasGonder+0x80>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <checkBasGonder+0x74>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10b      	bne.n	8004cc8 <checkBasGonder+0x58>
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <checkBasGonder+0x84>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <checkBasGonder+0x58>
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <checkBasGonder+0x7c>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <checkBasGonder+0x88>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004cc6:	e009      	b.n	8004cdc <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <checkBasGonder+0x84>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	f083 0301 	eor.w	r3, r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <checkBasGonder+0x88>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr
 8004ce4:	20000225 	.word	0x20000225
 8004ce8:	20000259 	.word	0x20000259
 8004cec:	20000233 	.word	0x20000233
 8004cf0:	20000260 	.word	0x20000260
 8004cf4:	2000025c 	.word	0x2000025c
 8004cf8:	20000261 	.word	0x20000261

08004cfc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d00:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <checkKapiSecimleri+0x98>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d08:	4b23      	ldr	r3, [pc, #140]	; (8004d98 <checkKapiSecimleri+0x9c>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d0e:	4b21      	ldr	r3, [pc, #132]	; (8004d94 <checkKapiSecimleri+0x98>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d10e      	bne.n	8004d34 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d1a:	4820      	ldr	r0, [pc, #128]	; (8004d9c <checkKapiSecimleri+0xa0>)
 8004d1c:	f004 fb5c 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004d26:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <checkKapiSecimleri+0x9c>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	e002      	b.n	8004d34 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004d2e:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <checkKapiSecimleri+0x9c>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004d34:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <checkKapiSecimleri+0x98>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d10e      	bne.n	8004d5a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d40:	4816      	ldr	r0, [pc, #88]	; (8004d9c <checkKapiSecimleri+0xa0>)
 8004d42:	f004 fb49 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <checkKapiSecimleri+0x9c>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e002      	b.n	8004d5a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004d54:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <checkKapiSecimleri+0x9c>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <checkKapiSecimleri+0x98>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d116      	bne.n	8004d90 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d66:	480d      	ldr	r0, [pc, #52]	; (8004d9c <checkKapiSecimleri+0xa0>)
 8004d68:	f004 fb36 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10b      	bne.n	8004d8a <checkKapiSecimleri+0x8e>
 8004d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d76:	4809      	ldr	r0, [pc, #36]	; (8004d9c <checkKapiSecimleri+0xa0>)
 8004d78:	f004 fb2e 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <checkKapiSecimleri+0x9c>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004d88:	e002      	b.n	8004d90 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004d8a:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <checkKapiSecimleri+0x9c>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	2000022c 	.word	0x2000022c
 8004d98:	20000277 	.word	0x20000277
 8004d9c:	40010800 	.word	0x40010800

08004da0 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004da4:	4b62      	ldr	r3, [pc, #392]	; (8004f30 <checkAktifCalisma+0x190>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f041 833e 	bne.w	800642a <checkAktifCalisma+0x168a>
 8004dae:	4b61      	ldr	r3, [pc, #388]	; (8004f34 <checkAktifCalisma+0x194>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f041 8339 	bne.w	800642a <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004db8:	4b5f      	ldr	r3, [pc, #380]	; (8004f38 <checkAktifCalisma+0x198>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11a      	bne.n	8004df6 <checkAktifCalisma+0x56>
 8004dc0:	4b5e      	ldr	r3, [pc, #376]	; (8004f3c <checkAktifCalisma+0x19c>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d116      	bne.n	8004df6 <checkAktifCalisma+0x56>
 8004dc8:	4b5d      	ldr	r3, [pc, #372]	; (8004f40 <checkAktifCalisma+0x1a0>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <checkAktifCalisma+0x46>
 8004dd0:	4b5c      	ldr	r3, [pc, #368]	; (8004f44 <checkAktifCalisma+0x1a4>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f083 0301 	eor.w	r3, r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <checkAktifCalisma+0x46>
 8004dde:	4b5a      	ldr	r3, [pc, #360]	; (8004f48 <checkAktifCalisma+0x1a8>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d007      	beq.n	8004df6 <checkAktifCalisma+0x56>
 8004de6:	4b59      	ldr	r3, [pc, #356]	; (8004f4c <checkAktifCalisma+0x1ac>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d018      	beq.n	8004e20 <checkAktifCalisma+0x80>
 8004dee:	4b58      	ldr	r3, [pc, #352]	; (8004f50 <checkAktifCalisma+0x1b0>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d114      	bne.n	8004e20 <checkAktifCalisma+0x80>
 8004df6:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <checkAktifCalisma+0x1b4>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d010      	beq.n	8004e20 <checkAktifCalisma+0x80>
 8004dfe:	4b56      	ldr	r3, [pc, #344]	; (8004f58 <checkAktifCalisma+0x1b8>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00c      	beq.n	8004e20 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e06:	2201      	movs	r2, #1
 8004e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e0c:	4853      	ldr	r0, [pc, #332]	; (8004f5c <checkAktifCalisma+0x1bc>)
 8004e0e:	f004 fafa 	bl	8009406 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004e12:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <checkAktifCalisma+0x1c0>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004e18:	4b52      	ldr	r3, [pc, #328]	; (8004f64 <checkAktifCalisma+0x1c4>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e008      	b.n	8004e32 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e26:	484d      	ldr	r0, [pc, #308]	; (8004f5c <checkAktifCalisma+0x1bc>)
 8004e28:	f004 faed 	bl	8009406 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004e2c:	4b4c      	ldr	r3, [pc, #304]	; (8004f60 <checkAktifCalisma+0x1c0>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004e32:	4b40      	ldr	r3, [pc, #256]	; (8004f34 <checkAktifCalisma+0x194>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d160      	bne.n	8004efc <checkAktifCalisma+0x15c>
 8004e3a:	4b46      	ldr	r3, [pc, #280]	; (8004f54 <checkAktifCalisma+0x1b4>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d05c      	beq.n	8004efc <checkAktifCalisma+0x15c>
 8004e42:	4b45      	ldr	r3, [pc, #276]	; (8004f58 <checkAktifCalisma+0x1b8>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d058      	beq.n	8004efc <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e4e:	4843      	ldr	r0, [pc, #268]	; (8004f5c <checkAktifCalisma+0x1bc>)
 8004e50:	f004 fac2 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <checkAktifCalisma+0xc2>
 8004e5a:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <checkAktifCalisma+0x1c8>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d04c      	beq.n	8004efc <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e62:	2102      	movs	r1, #2
 8004e64:	4841      	ldr	r0, [pc, #260]	; (8004f6c <checkAktifCalisma+0x1cc>)
 8004e66:	f004 fab7 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d145      	bne.n	8004efc <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004e70:	4b3f      	ldr	r3, [pc, #252]	; (8004f70 <checkAktifCalisma+0x1d0>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d041      	beq.n	8004efc <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e7c:	4837      	ldr	r0, [pc, #220]	; (8004f5c <checkAktifCalisma+0x1bc>)
 8004e7e:	f004 faab 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10e      	bne.n	8004ea6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e8c:	4833      	ldr	r0, [pc, #204]	; (8004f5c <checkAktifCalisma+0x1bc>)
 8004e8e:	f004 faa3 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004e98:	2140      	movs	r1, #64	; 0x40
 8004e9a:	4834      	ldr	r0, [pc, #208]	; (8004f6c <checkAktifCalisma+0x1cc>)
 8004e9c:	f004 fa9c 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d003      	beq.n	8004eae <checkAktifCalisma+0x10e>
 8004ea6:	4b24      	ldr	r3, [pc, #144]	; (8004f38 <checkAktifCalisma+0x198>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d026      	beq.n	8004efc <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004eae:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <checkAktifCalisma+0x1a0>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	f083 0301 	eor.w	r3, r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01f      	beq.n	8004efc <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004ebc:	4b1f      	ldr	r3, [pc, #124]	; (8004f3c <checkAktifCalisma+0x19c>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f083 0301 	eor.w	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004eca:	4b20      	ldr	r3, [pc, #128]	; (8004f4c <checkAktifCalisma+0x1ac>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	f083 0301 	eor.w	r3, r3, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d011      	beq.n	8004efc <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004ed8:	4b26      	ldr	r3, [pc, #152]	; (8004f74 <checkAktifCalisma+0x1d4>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f083 0301 	eor.w	r3, r3, #1
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <checkAktifCalisma+0x1d8>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f083 0301 	eor.w	r3, r3, #1
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004ef4:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <checkAktifCalisma+0x198>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e002      	b.n	8004f02 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <checkAktifCalisma+0x198>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f02:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <checkAktifCalisma+0x198>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d03a      	beq.n	8004f80 <checkAktifCalisma+0x1e0>
 8004f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f0e:	4817      	ldr	r0, [pc, #92]	; (8004f6c <checkAktifCalisma+0x1cc>)
 8004f10:	f004 fa62 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d132      	bne.n	8004f80 <checkAktifCalisma+0x1e0>
 8004f1a:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <checkAktifCalisma+0x1dc>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d02e      	beq.n	8004f80 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f22:	2201      	movs	r2, #1
 8004f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f28:	480c      	ldr	r0, [pc, #48]	; (8004f5c <checkAktifCalisma+0x1bc>)
 8004f2a:	f004 fa6c 	bl	8009406 <HAL_GPIO_WritePin>
 8004f2e:	e02d      	b.n	8004f8c <checkAktifCalisma+0x1ec>
 8004f30:	20000242 	.word	0x20000242
 8004f34:	20000241 	.word	0x20000241
 8004f38:	20000259 	.word	0x20000259
 8004f3c:	2000025a 	.word	0x2000025a
 8004f40:	2000025c 	.word	0x2000025c
 8004f44:	20000254 	.word	0x20000254
 8004f48:	20000237 	.word	0x20000237
 8004f4c:	2000025b 	.word	0x2000025b
 8004f50:	20000236 	.word	0x20000236
 8004f54:	20000276 	.word	0x20000276
 8004f58:	20000277 	.word	0x20000277
 8004f5c:	40010c00 	.word	0x40010c00
 8004f60:	20000278 	.word	0x20000278
 8004f64:	20000263 	.word	0x20000263
 8004f68:	20000260 	.word	0x20000260
 8004f6c:	40011000 	.word	0x40011000
 8004f70:	20000227 	.word	0x20000227
 8004f74:	2000025e 	.word	0x2000025e
 8004f78:	2000025f 	.word	0x2000025f
 8004f7c:	20000232 	.word	0x20000232
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004f80:	2200      	movs	r2, #0
 8004f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f86:	4860      	ldr	r0, [pc, #384]	; (8005108 <checkAktifCalisma+0x368>)
 8004f88:	f004 fa3d 	bl	8009406 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004f8c:	4b5f      	ldr	r3, [pc, #380]	; (800510c <checkAktifCalisma+0x36c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <checkAktifCalisma+0x21c>
 8004f94:	4b5e      	ldr	r3, [pc, #376]	; (8005110 <checkAktifCalisma+0x370>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d007      	beq.n	8004fac <checkAktifCalisma+0x20c>
 8004f9c:	4b5c      	ldr	r3, [pc, #368]	; (8005110 <checkAktifCalisma+0x370>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d003      	beq.n	8004fac <checkAktifCalisma+0x20c>
 8004fa4:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <checkAktifCalisma+0x374>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d107      	bne.n	8004fbc <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004fac:	2201      	movs	r2, #1
 8004fae:	2104      	movs	r1, #4
 8004fb0:	4855      	ldr	r0, [pc, #340]	; (8005108 <checkAktifCalisma+0x368>)
 8004fb2:	f004 fa28 	bl	8009406 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004fb6:	4b58      	ldr	r3, [pc, #352]	; (8005118 <checkAktifCalisma+0x378>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004fbc:	4b56      	ldr	r3, [pc, #344]	; (8005118 <checkAktifCalisma+0x378>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d02f      	beq.n	8005024 <checkAktifCalisma+0x284>
 8004fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fc8:	484f      	ldr	r0, [pc, #316]	; (8005108 <checkAktifCalisma+0x368>)
 8004fca:	f004 fa05 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d106      	bne.n	8004fe2 <checkAktifCalisma+0x242>
 8004fd4:	4b51      	ldr	r3, [pc, #324]	; (800511c <checkAktifCalisma+0x37c>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	f083 0301 	eor.w	r3, r3, #1
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <checkAktifCalisma+0x250>
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	484e      	ldr	r0, [pc, #312]	; (8005120 <checkAktifCalisma+0x380>)
 8004fe6:	f004 f9f7 	bl	80093d8 <HAL_GPIO_ReadPin>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d119      	bne.n	8005024 <checkAktifCalisma+0x284>
 8004ff0:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <checkAktifCalisma+0x384>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d015      	beq.n	8005024 <checkAktifCalisma+0x284>
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <checkAktifCalisma+0x388>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d011      	beq.n	8005024 <checkAktifCalisma+0x284>
 8005000:	4b4a      	ldr	r3, [pc, #296]	; (800512c <checkAktifCalisma+0x38c>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <checkAktifCalisma+0x284>
 8005008:	4b49      	ldr	r3, [pc, #292]	; (8005130 <checkAktifCalisma+0x390>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f083 0301 	eor.w	r3, r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <checkAktifCalisma+0x284>
			timer2=millis;
 8005016:	4b47      	ldr	r3, [pc, #284]	; (8005134 <checkAktifCalisma+0x394>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a47      	ldr	r2, [pc, #284]	; (8005138 <checkAktifCalisma+0x398>)
 800501c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800501e:	4b44      	ldr	r3, [pc, #272]	; (8005130 <checkAktifCalisma+0x390>)
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005024:	4b43      	ldr	r3, [pc, #268]	; (8005134 <checkAktifCalisma+0x394>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b43      	ldr	r3, [pc, #268]	; (8005138 <checkAktifCalisma+0x398>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	4a43      	ldr	r2, [pc, #268]	; (800513c <checkAktifCalisma+0x39c>)
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	4293      	cmp	r3, r2
 8005034:	d303      	bcc.n	800503e <checkAktifCalisma+0x29e>
 8005036:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <checkAktifCalisma+0x390>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d111      	bne.n	8005062 <checkAktifCalisma+0x2c2>
 800503e:	4b39      	ldr	r3, [pc, #228]	; (8005124 <checkAktifCalisma+0x384>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	f083 0301 	eor.w	r3, r3, #1
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <checkAktifCalisma+0x2c2>
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <checkAktifCalisma+0x388>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <checkAktifCalisma+0x2c2>
 800505a:	4b34      	ldr	r3, [pc, #208]	; (800512c <checkAktifCalisma+0x38c>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005062:	2200      	movs	r2, #0
 8005064:	2104      	movs	r1, #4
 8005066:	4828      	ldr	r0, [pc, #160]	; (8005108 <checkAktifCalisma+0x368>)
 8005068:	f004 f9cd 	bl	8009406 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800506c:	4b2a      	ldr	r3, [pc, #168]	; (8005118 <checkAktifCalisma+0x378>)
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005072:	4b2f      	ldr	r3, [pc, #188]	; (8005130 <checkAktifCalisma+0x390>)
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005078:	4b31      	ldr	r3, [pc, #196]	; (8005140 <checkAktifCalisma+0x3a0>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005080:	4b30      	ldr	r3, [pc, #192]	; (8005144 <checkAktifCalisma+0x3a4>)
 8005082:	2201      	movs	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005086:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <checkAktifCalisma+0x3a0>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d116      	bne.n	80050bc <checkAktifCalisma+0x31c>
 800508e:	4b2e      	ldr	r3, [pc, #184]	; (8005148 <checkAktifCalisma+0x3a8>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d112      	bne.n	80050bc <checkAktifCalisma+0x31c>
 8005096:	2101      	movs	r1, #1
 8005098:	4821      	ldr	r0, [pc, #132]	; (8005120 <checkAktifCalisma+0x380>)
 800509a:	f004 f99d 	bl	80093d8 <HAL_GPIO_ReadPin>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <checkAktifCalisma+0x31c>
 80050a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050a8:	4817      	ldr	r0, [pc, #92]	; (8005108 <checkAktifCalisma+0x368>)
 80050aa:	f004 f995 	bl	80093d8 <HAL_GPIO_ReadPin>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d103      	bne.n	80050bc <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80050b4:	4b23      	ldr	r3, [pc, #140]	; (8005144 <checkAktifCalisma+0x3a4>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e011      	b.n	80050e0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <checkAktifCalisma+0x3a0>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d10d      	bne.n	80050e0 <checkAktifCalisma+0x340>
 80050c4:	2101      	movs	r1, #1
 80050c6:	4816      	ldr	r0, [pc, #88]	; (8005120 <checkAktifCalisma+0x380>)
 80050c8:	f004 f986 	bl	80093d8 <HAL_GPIO_ReadPin>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d106      	bne.n	80050e0 <checkAktifCalisma+0x340>
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <checkAktifCalisma+0x3a8>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d102      	bne.n	80050e0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80050da:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <checkAktifCalisma+0x3a4>)
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80050e0:	4b17      	ldr	r3, [pc, #92]	; (8005140 <checkAktifCalisma+0x3a0>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d134      	bne.n	8005152 <checkAktifCalisma+0x3b2>
 80050e8:	4b17      	ldr	r3, [pc, #92]	; (8005148 <checkAktifCalisma+0x3a8>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d130      	bne.n	8005152 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80050f0:	2101      	movs	r1, #1
 80050f2:	480b      	ldr	r0, [pc, #44]	; (8005120 <checkAktifCalisma+0x380>)
 80050f4:	f004 f970 	bl	80093d8 <HAL_GPIO_ReadPin>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d126      	bne.n	800514c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <checkAktifCalisma+0x3a4>)
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e025      	b.n	8005152 <checkAktifCalisma+0x3b2>
 8005106:	bf00      	nop
 8005108:	40010c00 	.word	0x40010c00
 800510c:	20000259 	.word	0x20000259
 8005110:	20000233 	.word	0x20000233
 8005114:	20000237 	.word	0x20000237
 8005118:	2000025d 	.word	0x2000025d
 800511c:	20000260 	.word	0x20000260
 8005120:	40011000 	.word	0x40011000
 8005124:	20000276 	.word	0x20000276
 8005128:	20000277 	.word	0x20000277
 800512c:	20000227 	.word	0x20000227
 8005130:	20000255 	.word	0x20000255
 8005134:	20000200 	.word	0x20000200
 8005138:	2000020c 	.word	0x2000020c
 800513c:	20000238 	.word	0x20000238
 8005140:	20000228 	.word	0x20000228
 8005144:	2000027b 	.word	0x2000027b
 8005148:	20000225 	.word	0x20000225
			} else {
				cerceveVar=0;
 800514c:	4b7f      	ldr	r3, [pc, #508]	; (800534c <checkAktifCalisma+0x5ac>)
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005152:	4b7f      	ldr	r3, [pc, #508]	; (8005350 <checkAktifCalisma+0x5b0>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d17c      	bne.n	8005254 <checkAktifCalisma+0x4b4>
 800515a:	4b7e      	ldr	r3, [pc, #504]	; (8005354 <checkAktifCalisma+0x5b4>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d078      	beq.n	8005254 <checkAktifCalisma+0x4b4>
 8005162:	4b7d      	ldr	r3, [pc, #500]	; (8005358 <checkAktifCalisma+0x5b8>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d074      	beq.n	8005254 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800516a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800516e:	487b      	ldr	r0, [pc, #492]	; (800535c <checkAktifCalisma+0x5bc>)
 8005170:	f004 f932 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <checkAktifCalisma+0x3e2>
 800517a:	4b79      	ldr	r3, [pc, #484]	; (8005360 <checkAktifCalisma+0x5c0>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d068      	beq.n	8005254 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005182:	4b72      	ldr	r3, [pc, #456]	; (800534c <checkAktifCalisma+0x5ac>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d064      	beq.n	8005254 <checkAktifCalisma+0x4b4>
 800518a:	4b76      	ldr	r3, [pc, #472]	; (8005364 <checkAktifCalisma+0x5c4>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	f083 0301 	eor.w	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d05d      	beq.n	8005254 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005198:	2104      	movs	r1, #4
 800519a:	4873      	ldr	r0, [pc, #460]	; (8005368 <checkAktifCalisma+0x5c8>)
 800519c:	f004 f91c 	bl	80093d8 <HAL_GPIO_ReadPin>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <checkAktifCalisma+0x40e>
 80051a6:	4b71      	ldr	r3, [pc, #452]	; (800536c <checkAktifCalisma+0x5cc>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d152      	bne.n	8005254 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051b2:	486a      	ldr	r0, [pc, #424]	; (800535c <checkAktifCalisma+0x5bc>)
 80051b4:	f004 f910 	bl	80093d8 <HAL_GPIO_ReadPin>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10e      	bne.n	80051dc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80051be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051c2:	4866      	ldr	r0, [pc, #408]	; (800535c <checkAktifCalisma+0x5bc>)
 80051c4:	f004 f908 	bl	80093d8 <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d106      	bne.n	80051dc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80051ce:	2140      	movs	r1, #64	; 0x40
 80051d0:	4865      	ldr	r0, [pc, #404]	; (8005368 <checkAktifCalisma+0x5c8>)
 80051d2:	f004 f901 	bl	80093d8 <HAL_GPIO_ReadPin>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d003      	beq.n	80051e4 <checkAktifCalisma+0x444>
 80051dc:	4b64      	ldr	r3, [pc, #400]	; (8005370 <checkAktifCalisma+0x5d0>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d037      	beq.n	8005254 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80051e4:	4b63      	ldr	r3, [pc, #396]	; (8005374 <checkAktifCalisma+0x5d4>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f083 0301 	eor.w	r3, r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d030      	beq.n	8005254 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80051f2:	4b61      	ldr	r3, [pc, #388]	; (8005378 <checkAktifCalisma+0x5d8>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	f083 0301 	eor.w	r3, r3, #1
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d029      	beq.n	8005254 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005200:	4b5e      	ldr	r3, [pc, #376]	; (800537c <checkAktifCalisma+0x5dc>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	f083 0301 	eor.w	r3, r3, #1
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d022      	beq.n	8005254 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800520e:	4b5c      	ldr	r3, [pc, #368]	; (8005380 <checkAktifCalisma+0x5e0>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	f083 0301 	eor.w	r3, r3, #1
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01b      	beq.n	8005254 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800521c:	4b59      	ldr	r3, [pc, #356]	; (8005384 <checkAktifCalisma+0x5e4>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f083 0301 	eor.w	r3, r3, #1
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d014      	beq.n	8005254 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800522a:	4b57      	ldr	r3, [pc, #348]	; (8005388 <checkAktifCalisma+0x5e8>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	f083 0301 	eor.w	r3, r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00d      	beq.n	8005254 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005238:	2201      	movs	r2, #1
 800523a:	2102      	movs	r1, #2
 800523c:	4847      	ldr	r0, [pc, #284]	; (800535c <checkAktifCalisma+0x5bc>)
 800523e:	f004 f8e2 	bl	8009406 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005242:	4b4b      	ldr	r3, [pc, #300]	; (8005370 <checkAktifCalisma+0x5d0>)
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005248:	4b50      	ldr	r3, [pc, #320]	; (800538c <checkAktifCalisma+0x5ec>)
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800524e:	4b50      	ldr	r3, [pc, #320]	; (8005390 <checkAktifCalisma+0x5f0>)
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005254:	4b46      	ldr	r3, [pc, #280]	; (8005370 <checkAktifCalisma+0x5d0>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d033      	beq.n	80052c4 <checkAktifCalisma+0x524>
 800525c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005260:	483e      	ldr	r0, [pc, #248]	; (800535c <checkAktifCalisma+0x5bc>)
 8005262:	f004 f8b9 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005266:	4603      	mov	r3, r0
 8005268:	2b01      	cmp	r3, #1
 800526a:	d106      	bne.n	800527a <checkAktifCalisma+0x4da>
 800526c:	4b3c      	ldr	r3, [pc, #240]	; (8005360 <checkAktifCalisma+0x5c0>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f083 0301 	eor.w	r3, r3, #1
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <checkAktifCalisma+0x4f0>
 800527a:	2104      	movs	r1, #4
 800527c:	483a      	ldr	r0, [pc, #232]	; (8005368 <checkAktifCalisma+0x5c8>)
 800527e:	f004 f8ab 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005282:	4603      	mov	r3, r0
 8005284:	2b01      	cmp	r3, #1
 8005286:	d11d      	bne.n	80052c4 <checkAktifCalisma+0x524>
 8005288:	4b38      	ldr	r3, [pc, #224]	; (800536c <checkAktifCalisma+0x5cc>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d019      	beq.n	80052c4 <checkAktifCalisma+0x524>
 8005290:	4b30      	ldr	r3, [pc, #192]	; (8005354 <checkAktifCalisma+0x5b4>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d015      	beq.n	80052c4 <checkAktifCalisma+0x524>
 8005298:	4b2f      	ldr	r3, [pc, #188]	; (8005358 <checkAktifCalisma+0x5b8>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d011      	beq.n	80052c4 <checkAktifCalisma+0x524>
 80052a0:	4b2a      	ldr	r3, [pc, #168]	; (800534c <checkAktifCalisma+0x5ac>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00d      	beq.n	80052c4 <checkAktifCalisma+0x524>
 80052a8:	4b3a      	ldr	r3, [pc, #232]	; (8005394 <checkAktifCalisma+0x5f4>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	f083 0301 	eor.w	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d006      	beq.n	80052c4 <checkAktifCalisma+0x524>
			timer2=millis;
 80052b6:	4b38      	ldr	r3, [pc, #224]	; (8005398 <checkAktifCalisma+0x5f8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a38      	ldr	r2, [pc, #224]	; (800539c <checkAktifCalisma+0x5fc>)
 80052bc:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80052be:	4b35      	ldr	r3, [pc, #212]	; (8005394 <checkAktifCalisma+0x5f4>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80052c4:	4b34      	ldr	r3, [pc, #208]	; (8005398 <checkAktifCalisma+0x5f8>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b34      	ldr	r3, [pc, #208]	; (800539c <checkAktifCalisma+0x5fc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	4a34      	ldr	r2, [pc, #208]	; (80053a0 <checkAktifCalisma+0x600>)
 80052d0:	7812      	ldrb	r2, [r2, #0]
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d303      	bcc.n	80052de <checkAktifCalisma+0x53e>
 80052d6:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <checkAktifCalisma+0x5f4>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d114      	bne.n	8005308 <checkAktifCalisma+0x568>
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <checkAktifCalisma+0x5b4>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	f083 0301 	eor.w	r3, r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10d      	bne.n	8005308 <checkAktifCalisma+0x568>
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <checkAktifCalisma+0x5b8>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	f083 0301 	eor.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <checkAktifCalisma+0x568>
 80052fa:	4b14      	ldr	r3, [pc, #80]	; (800534c <checkAktifCalisma+0x5ac>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	f083 0301 	eor.w	r3, r3, #1
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005308:	2200      	movs	r2, #0
 800530a:	2102      	movs	r1, #2
 800530c:	4813      	ldr	r0, [pc, #76]	; (800535c <checkAktifCalisma+0x5bc>)
 800530e:	f004 f87a 	bl	8009406 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005312:	4b17      	ldr	r3, [pc, #92]	; (8005370 <checkAktifCalisma+0x5d0>)
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005318:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <checkAktifCalisma+0x5f4>)
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <checkAktifCalisma+0x5d0>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d040      	beq.n	80053a8 <checkAktifCalisma+0x608>
 8005326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800532a:	480f      	ldr	r0, [pc, #60]	; (8005368 <checkAktifCalisma+0x5c8>)
 800532c:	f004 f854 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d138      	bne.n	80053a8 <checkAktifCalisma+0x608>
 8005336:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <checkAktifCalisma+0x604>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d034      	beq.n	80053a8 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800533e:	2201      	movs	r2, #1
 8005340:	2101      	movs	r1, #1
 8005342:	4806      	ldr	r0, [pc, #24]	; (800535c <checkAktifCalisma+0x5bc>)
 8005344:	f004 f85f 	bl	8009406 <HAL_GPIO_WritePin>
 8005348:	e033      	b.n	80053b2 <checkAktifCalisma+0x612>
 800534a:	bf00      	nop
 800534c:	2000027b 	.word	0x2000027b
 8005350:	20000241 	.word	0x20000241
 8005354:	20000276 	.word	0x20000276
 8005358:	20000277 	.word	0x20000277
 800535c:	40010c00 	.word	0x40010c00
 8005360:	20000261 	.word	0x20000261
 8005364:	20000275 	.word	0x20000275
 8005368:	40011000 	.word	0x40011000
 800536c:	2000022a 	.word	0x2000022a
 8005370:	2000025c 	.word	0x2000025c
 8005374:	20000259 	.word	0x20000259
 8005378:	2000025d 	.word	0x2000025d
 800537c:	2000025a 	.word	0x2000025a
 8005380:	2000025b 	.word	0x2000025b
 8005384:	2000025e 	.word	0x2000025e
 8005388:	2000025f 	.word	0x2000025f
 800538c:	20000264 	.word	0x20000264
 8005390:	20000285 	.word	0x20000285
 8005394:	20000254 	.word	0x20000254
 8005398:	20000200 	.word	0x20000200
 800539c:	2000020c 	.word	0x2000020c
 80053a0:	20000239 	.word	0x20000239
 80053a4:	20000229 	.word	0x20000229
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80053a8:	2200      	movs	r2, #0
 80053aa:	2101      	movs	r1, #1
 80053ac:	4836      	ldr	r0, [pc, #216]	; (8005488 <checkAktifCalisma+0x6e8>)
 80053ae:	f004 f82a 	bl	8009406 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80053b2:	4b36      	ldr	r3, [pc, #216]	; (800548c <checkAktifCalisma+0x6ec>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f040 8080 	bne.w	80054bc <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053bc:	4b34      	ldr	r3, [pc, #208]	; (8005490 <checkAktifCalisma+0x6f0>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d003      	beq.n	80053cc <checkAktifCalisma+0x62c>
 80053c4:	4b32      	ldr	r3, [pc, #200]	; (8005490 <checkAktifCalisma+0x6f0>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d177      	bne.n	80054bc <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80053cc:	4b31      	ldr	r3, [pc, #196]	; (8005494 <checkAktifCalisma+0x6f4>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d073      	beq.n	80054bc <checkAktifCalisma+0x71c>
 80053d4:	4b30      	ldr	r3, [pc, #192]	; (8005498 <checkAktifCalisma+0x6f8>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d06f      	beq.n	80054bc <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80053dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053e0:	4829      	ldr	r0, [pc, #164]	; (8005488 <checkAktifCalisma+0x6e8>)
 80053e2:	f003 fff9 	bl	80093d8 <HAL_GPIO_ReadPin>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d167      	bne.n	80054bc <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80053ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053f0:	482a      	ldr	r0, [pc, #168]	; (800549c <checkAktifCalisma+0x6fc>)
 80053f2:	f003 fff1 	bl	80093d8 <HAL_GPIO_ReadPin>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <checkAktifCalisma+0x664>
 80053fc:	4b28      	ldr	r3, [pc, #160]	; (80054a0 <checkAktifCalisma+0x700>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d15b      	bne.n	80054bc <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005404:	2140      	movs	r1, #64	; 0x40
 8005406:	4825      	ldr	r0, [pc, #148]	; (800549c <checkAktifCalisma+0x6fc>)
 8005408:	f003 ffe6 	bl	80093d8 <HAL_GPIO_ReadPin>
 800540c:	4603      	mov	r3, r0
 800540e:	2b01      	cmp	r3, #1
 8005410:	d10f      	bne.n	8005432 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005416:	481c      	ldr	r0, [pc, #112]	; (8005488 <checkAktifCalisma+0x6e8>)
 8005418:	f003 ffde 	bl	80093d8 <HAL_GPIO_ReadPin>
 800541c:	4603      	mov	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d107      	bne.n	8005432 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005422:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005426:	4818      	ldr	r0, [pc, #96]	; (8005488 <checkAktifCalisma+0x6e8>)
 8005428:	f003 ffd6 	bl	80093d8 <HAL_GPIO_ReadPin>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d003      	beq.n	800543a <checkAktifCalisma+0x69a>
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <checkAktifCalisma+0x704>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d040      	beq.n	80054bc <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <checkAktifCalisma+0x708>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f083 0301 	eor.w	r3, r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d039      	beq.n	80054bc <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005448:	4b18      	ldr	r3, [pc, #96]	; (80054ac <checkAktifCalisma+0x70c>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f083 0301 	eor.w	r3, r3, #1
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d032      	beq.n	80054bc <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005456:	4b16      	ldr	r3, [pc, #88]	; (80054b0 <checkAktifCalisma+0x710>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	f083 0301 	eor.w	r3, r3, #1
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02b      	beq.n	80054bc <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <checkAktifCalisma+0x714>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f083 0301 	eor.w	r3, r3, #1
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d024      	beq.n	80054bc <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005472:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <checkAktifCalisma+0x718>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f083 0301 	eor.w	r3, r3, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01d      	beq.n	80054bc <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005480:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <checkAktifCalisma+0x704>)
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e01c      	b.n	80054c2 <checkAktifCalisma+0x722>
 8005488:	40010c00 	.word	0x40010c00
 800548c:	20000241 	.word	0x20000241
 8005490:	20000233 	.word	0x20000233
 8005494:	20000276 	.word	0x20000276
 8005498:	20000277 	.word	0x20000277
 800549c:	40011000 	.word	0x40011000
 80054a0:	20000234 	.word	0x20000234
 80054a4:	2000025a 	.word	0x2000025a
 80054a8:	20000259 	.word	0x20000259
 80054ac:	2000025d 	.word	0x2000025d
 80054b0:	2000025c 	.word	0x2000025c
 80054b4:	2000025b 	.word	0x2000025b
 80054b8:	2000025f 	.word	0x2000025f
		} else {
			devmotoryukaricalisiyor=0;
 80054bc:	4b64      	ldr	r3, [pc, #400]	; (8005650 <checkAktifCalisma+0x8b0>)
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80054c2:	4b63      	ldr	r3, [pc, #396]	; (8005650 <checkAktifCalisma+0x8b0>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80054ca:	2201      	movs	r2, #1
 80054cc:	2120      	movs	r1, #32
 80054ce:	4861      	ldr	r0, [pc, #388]	; (8005654 <checkAktifCalisma+0x8b4>)
 80054d0:	f003 ff99 	bl	8009406 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80054d4:	4b60      	ldr	r3, [pc, #384]	; (8005658 <checkAktifCalisma+0x8b8>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80054da:	4b5f      	ldr	r3, [pc, #380]	; (8005658 <checkAktifCalisma+0x8b8>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d025      	beq.n	800552e <checkAktifCalisma+0x78e>
 80054e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054e6:	485d      	ldr	r0, [pc, #372]	; (800565c <checkAktifCalisma+0x8bc>)
 80054e8:	f003 ff76 	bl	80093d8 <HAL_GPIO_ReadPin>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d007      	beq.n	8005502 <checkAktifCalisma+0x762>
 80054f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054f6:	4857      	ldr	r0, [pc, #348]	; (8005654 <checkAktifCalisma+0x8b4>)
 80054f8:	f003 ff6e 	bl	80093d8 <HAL_GPIO_ReadPin>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d115      	bne.n	800552e <checkAktifCalisma+0x78e>
 8005502:	4b57      	ldr	r3, [pc, #348]	; (8005660 <checkAktifCalisma+0x8c0>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d011      	beq.n	800552e <checkAktifCalisma+0x78e>
 800550a:	4b56      	ldr	r3, [pc, #344]	; (8005664 <checkAktifCalisma+0x8c4>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <checkAktifCalisma+0x78e>
 8005512:	4b55      	ldr	r3, [pc, #340]	; (8005668 <checkAktifCalisma+0x8c8>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	f083 0301 	eor.w	r3, r3, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d006      	beq.n	800552e <checkAktifCalisma+0x78e>
			timer2=millis;
 8005520:	4b52      	ldr	r3, [pc, #328]	; (800566c <checkAktifCalisma+0x8cc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a52      	ldr	r2, [pc, #328]	; (8005670 <checkAktifCalisma+0x8d0>)
 8005526:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005528:	4b4f      	ldr	r3, [pc, #316]	; (8005668 <checkAktifCalisma+0x8c8>)
 800552a:	2201      	movs	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800552e:	4b4f      	ldr	r3, [pc, #316]	; (800566c <checkAktifCalisma+0x8cc>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b4f      	ldr	r3, [pc, #316]	; (8005670 <checkAktifCalisma+0x8d0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	4a4e      	ldr	r2, [pc, #312]	; (8005674 <checkAktifCalisma+0x8d4>)
 800553a:	7812      	ldrb	r2, [r2, #0]
 800553c:	4293      	cmp	r3, r2
 800553e:	d303      	bcc.n	8005548 <checkAktifCalisma+0x7a8>
 8005540:	4b49      	ldr	r3, [pc, #292]	; (8005668 <checkAktifCalisma+0x8c8>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10d      	bne.n	8005564 <checkAktifCalisma+0x7c4>
 8005548:	4b45      	ldr	r3, [pc, #276]	; (8005660 <checkAktifCalisma+0x8c0>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	f083 0301 	eor.w	r3, r3, #1
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <checkAktifCalisma+0x7c4>
 8005556:	4b43      	ldr	r3, [pc, #268]	; (8005664 <checkAktifCalisma+0x8c4>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	f083 0301 	eor.w	r3, r3, #1
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005564:	2200      	movs	r2, #0
 8005566:	2120      	movs	r1, #32
 8005568:	483a      	ldr	r0, [pc, #232]	; (8005654 <checkAktifCalisma+0x8b4>)
 800556a:	f003 ff4c 	bl	8009406 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800556e:	4b3a      	ldr	r3, [pc, #232]	; (8005658 <checkAktifCalisma+0x8b8>)
 8005570:	2200      	movs	r2, #0
 8005572:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005574:	4b3c      	ldr	r3, [pc, #240]	; (8005668 <checkAktifCalisma+0x8c8>)
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800557a:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <checkAktifCalisma+0x8d8>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f040 8088 	bne.w	8005694 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005584:	4b3d      	ldr	r3, [pc, #244]	; (800567c <checkAktifCalisma+0x8dc>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d003      	beq.n	8005594 <checkAktifCalisma+0x7f4>
 800558c:	4b3b      	ldr	r3, [pc, #236]	; (800567c <checkAktifCalisma+0x8dc>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d17f      	bne.n	8005694 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005594:	4b32      	ldr	r3, [pc, #200]	; (8005660 <checkAktifCalisma+0x8c0>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d07b      	beq.n	8005694 <checkAktifCalisma+0x8f4>
 800559c:	4b31      	ldr	r3, [pc, #196]	; (8005664 <checkAktifCalisma+0x8c4>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d077      	beq.n	8005694 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80055a4:	2140      	movs	r1, #64	; 0x40
 80055a6:	482b      	ldr	r0, [pc, #172]	; (8005654 <checkAktifCalisma+0x8b4>)
 80055a8:	f003 ff16 	bl	80093d8 <HAL_GPIO_ReadPin>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d170      	bne.n	8005694 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80055b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055b6:	4827      	ldr	r0, [pc, #156]	; (8005654 <checkAktifCalisma+0x8b4>)
 80055b8:	f003 ff0e 	bl	80093d8 <HAL_GPIO_ReadPin>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <checkAktifCalisma+0x82a>
 80055c2:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <checkAktifCalisma+0x8e0>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d164      	bne.n	8005694 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80055ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055ce:	4823      	ldr	r0, [pc, #140]	; (800565c <checkAktifCalisma+0x8bc>)
 80055d0:	f003 ff02 	bl	80093d8 <HAL_GPIO_ReadPin>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d10f      	bne.n	80055fa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80055da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055de:	481f      	ldr	r0, [pc, #124]	; (800565c <checkAktifCalisma+0x8bc>)
 80055e0:	f003 fefa 	bl	80093d8 <HAL_GPIO_ReadPin>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d107      	bne.n	80055fa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80055ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055ee:	481b      	ldr	r0, [pc, #108]	; (800565c <checkAktifCalisma+0x8bc>)
 80055f0:	f003 fef2 	bl	80093d8 <HAL_GPIO_ReadPin>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d003      	beq.n	8005602 <checkAktifCalisma+0x862>
 80055fa:	4b22      	ldr	r3, [pc, #136]	; (8005684 <checkAktifCalisma+0x8e4>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d048      	beq.n	8005694 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005602:	4b21      	ldr	r3, [pc, #132]	; (8005688 <checkAktifCalisma+0x8e8>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	f083 0301 	eor.w	r3, r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d041      	beq.n	8005694 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005610:	4b1e      	ldr	r3, [pc, #120]	; (800568c <checkAktifCalisma+0x8ec>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	f083 0301 	eor.w	r3, r3, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d03a      	beq.n	8005694 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <checkAktifCalisma+0x8f0>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	f083 0301 	eor.w	r3, r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d033      	beq.n	8005694 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <checkAktifCalisma+0x8b8>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f083 0301 	eor.w	r3, r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d02c      	beq.n	8005694 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <checkAktifCalisma+0x8b0>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	f083 0301 	eor.w	r3, r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d025      	beq.n	8005694 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005648:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <checkAktifCalisma+0x8e4>)
 800564a:	2201      	movs	r2, #1
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e024      	b.n	800569a <checkAktifCalisma+0x8fa>
 8005650:	2000025a 	.word	0x2000025a
 8005654:	40011000 	.word	0x40011000
 8005658:	2000025e 	.word	0x2000025e
 800565c:	40010c00 	.word	0x40010c00
 8005660:	20000276 	.word	0x20000276
 8005664:	20000277 	.word	0x20000277
 8005668:	20000256 	.word	0x20000256
 800566c:	20000200 	.word	0x20000200
 8005670:	2000020c 	.word	0x2000020c
 8005674:	2000023a 	.word	0x2000023a
 8005678:	20000241 	.word	0x20000241
 800567c:	20000233 	.word	0x20000233
 8005680:	20000235 	.word	0x20000235
 8005684:	2000025b 	.word	0x2000025b
 8005688:	20000259 	.word	0x20000259
 800568c:	2000025d 	.word	0x2000025d
 8005690:	2000025c 	.word	0x2000025c
		} else {
			devmotorasagicalisiyor=0;
 8005694:	4b96      	ldr	r3, [pc, #600]	; (80058f0 <checkAktifCalisma+0xb50>)
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800569a:	4b95      	ldr	r3, [pc, #596]	; (80058f0 <checkAktifCalisma+0xb50>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80056a2:	2201      	movs	r2, #1
 80056a4:	2110      	movs	r1, #16
 80056a6:	4893      	ldr	r0, [pc, #588]	; (80058f4 <checkAktifCalisma+0xb54>)
 80056a8:	f003 fead 	bl	8009406 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80056ac:	4b92      	ldr	r3, [pc, #584]	; (80058f8 <checkAktifCalisma+0xb58>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80056b2:	4b91      	ldr	r3, [pc, #580]	; (80058f8 <checkAktifCalisma+0xb58>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d024      	beq.n	8005704 <checkAktifCalisma+0x964>
 80056ba:	2140      	movs	r1, #64	; 0x40
 80056bc:	488d      	ldr	r0, [pc, #564]	; (80058f4 <checkAktifCalisma+0xb54>)
 80056be:	f003 fe8b 	bl	80093d8 <HAL_GPIO_ReadPin>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d007      	beq.n	80056d8 <checkAktifCalisma+0x938>
 80056c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056cc:	4889      	ldr	r0, [pc, #548]	; (80058f4 <checkAktifCalisma+0xb54>)
 80056ce:	f003 fe83 	bl	80093d8 <HAL_GPIO_ReadPin>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d115      	bne.n	8005704 <checkAktifCalisma+0x964>
 80056d8:	4b88      	ldr	r3, [pc, #544]	; (80058fc <checkAktifCalisma+0xb5c>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d011      	beq.n	8005704 <checkAktifCalisma+0x964>
 80056e0:	4b87      	ldr	r3, [pc, #540]	; (8005900 <checkAktifCalisma+0xb60>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00d      	beq.n	8005704 <checkAktifCalisma+0x964>
 80056e8:	4b86      	ldr	r3, [pc, #536]	; (8005904 <checkAktifCalisma+0xb64>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f083 0301 	eor.w	r3, r3, #1
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d006      	beq.n	8005704 <checkAktifCalisma+0x964>
			timer2=millis;
 80056f6:	4b84      	ldr	r3, [pc, #528]	; (8005908 <checkAktifCalisma+0xb68>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a84      	ldr	r2, [pc, #528]	; (800590c <checkAktifCalisma+0xb6c>)
 80056fc:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80056fe:	4b81      	ldr	r3, [pc, #516]	; (8005904 <checkAktifCalisma+0xb64>)
 8005700:	2201      	movs	r2, #1
 8005702:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005704:	4b80      	ldr	r3, [pc, #512]	; (8005908 <checkAktifCalisma+0xb68>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4b80      	ldr	r3, [pc, #512]	; (800590c <checkAktifCalisma+0xb6c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	4a80      	ldr	r2, [pc, #512]	; (8005910 <checkAktifCalisma+0xb70>)
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	4293      	cmp	r3, r2
 8005714:	d303      	bcc.n	800571e <checkAktifCalisma+0x97e>
 8005716:	4b7b      	ldr	r3, [pc, #492]	; (8005904 <checkAktifCalisma+0xb64>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10d      	bne.n	800573a <checkAktifCalisma+0x99a>
 800571e:	4b77      	ldr	r3, [pc, #476]	; (80058fc <checkAktifCalisma+0xb5c>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	f083 0301 	eor.w	r3, r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <checkAktifCalisma+0x99a>
 800572c:	4b74      	ldr	r3, [pc, #464]	; (8005900 <checkAktifCalisma+0xb60>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f083 0301 	eor.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800573a:	2200      	movs	r2, #0
 800573c:	2110      	movs	r1, #16
 800573e:	486d      	ldr	r0, [pc, #436]	; (80058f4 <checkAktifCalisma+0xb54>)
 8005740:	f003 fe61 	bl	8009406 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005744:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <checkAktifCalisma+0xb58>)
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800574a:	4b6e      	ldr	r3, [pc, #440]	; (8005904 <checkAktifCalisma+0xb64>)
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005754:	486f      	ldr	r0, [pc, #444]	; (8005914 <checkAktifCalisma+0xb74>)
 8005756:	f003 fe3f 	bl	80093d8 <HAL_GPIO_ReadPin>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d120      	bne.n	80057a2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005764:	486b      	ldr	r0, [pc, #428]	; (8005914 <checkAktifCalisma+0xb74>)
 8005766:	f003 fe37 	bl	80093d8 <HAL_GPIO_ReadPin>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d118      	bne.n	80057a2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005770:	2104      	movs	r1, #4
 8005772:	4868      	ldr	r0, [pc, #416]	; (8005914 <checkAktifCalisma+0xb74>)
 8005774:	f003 fe30 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d111      	bne.n	80057a2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800577e:	2102      	movs	r1, #2
 8005780:	4864      	ldr	r0, [pc, #400]	; (8005914 <checkAktifCalisma+0xb74>)
 8005782:	f003 fe29 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800578c:	2101      	movs	r1, #1
 800578e:	4861      	ldr	r0, [pc, #388]	; (8005914 <checkAktifCalisma+0xb74>)
 8005790:	f003 fe22 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <checkAktifCalisma+0xa02>
			makineStop=1;
 800579a:	4b5f      	ldr	r3, [pc, #380]	; (8005918 <checkAktifCalisma+0xb78>)
 800579c:	2201      	movs	r2, #1
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e002      	b.n	80057a8 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80057a2:	4b5d      	ldr	r3, [pc, #372]	; (8005918 <checkAktifCalisma+0xb78>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057a8:	4b5c      	ldr	r3, [pc, #368]	; (800591c <checkAktifCalisma+0xb7c>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d144      	bne.n	800583a <checkAktifCalisma+0xa9a>
 80057b0:	4b5b      	ldr	r3, [pc, #364]	; (8005920 <checkAktifCalisma+0xb80>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d003      	beq.n	80057c0 <checkAktifCalisma+0xa20>
 80057b8:	4b59      	ldr	r3, [pc, #356]	; (8005920 <checkAktifCalisma+0xb80>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d13c      	bne.n	800583a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	484c      	ldr	r0, [pc, #304]	; (80058f4 <checkAktifCalisma+0xb54>)
 80057c4:	f003 fe08 	bl	80093d8 <HAL_GPIO_ReadPin>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <checkAktifCalisma+0xa36>
 80057ce:	4b55      	ldr	r3, [pc, #340]	; (8005924 <checkAktifCalisma+0xb84>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <checkAktifCalisma+0xa4e>
 80057d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057da:	484e      	ldr	r0, [pc, #312]	; (8005914 <checkAktifCalisma+0xb74>)
 80057dc:	f003 fdfc 	bl	80093d8 <HAL_GPIO_ReadPin>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d129      	bne.n	800583a <checkAktifCalisma+0xa9a>
 80057e6:	4b4f      	ldr	r3, [pc, #316]	; (8005924 <checkAktifCalisma+0xb84>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d125      	bne.n	800583a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80057ee:	2104      	movs	r1, #4
 80057f0:	4840      	ldr	r0, [pc, #256]	; (80058f4 <checkAktifCalisma+0xb54>)
 80057f2:	f003 fdf1 	bl	80093d8 <HAL_GPIO_ReadPin>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d003      	beq.n	8005804 <checkAktifCalisma+0xa64>
 80057fc:	4b4a      	ldr	r3, [pc, #296]	; (8005928 <checkAktifCalisma+0xb88>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11a      	bne.n	800583a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005804:	2102      	movs	r1, #2
 8005806:	483b      	ldr	r0, [pc, #236]	; (80058f4 <checkAktifCalisma+0xb54>)
 8005808:	f003 fde6 	bl	80093d8 <HAL_GPIO_ReadPin>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d113      	bne.n	800583a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005812:	4b46      	ldr	r3, [pc, #280]	; (800592c <checkAktifCalisma+0xb8c>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f083 0301 	eor.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00c      	beq.n	800583a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005820:	4b3d      	ldr	r3, [pc, #244]	; (8005918 <checkAktifCalisma+0xb78>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005828:	4b41      	ldr	r3, [pc, #260]	; (8005930 <checkAktifCalisma+0xb90>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800582e:	4b36      	ldr	r3, [pc, #216]	; (8005908 <checkAktifCalisma+0xb68>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a40      	ldr	r2, [pc, #256]	; (8005934 <checkAktifCalisma+0xb94>)
 8005834:	6013      	str	r3, [r2, #0]
			bekle();
 8005836:	f7ff f935 	bl	8004aa4 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800583a:	4b33      	ldr	r3, [pc, #204]	; (8005908 <checkAktifCalisma+0xb68>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b3d      	ldr	r3, [pc, #244]	; (8005934 <checkAktifCalisma+0xb94>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	4a3c      	ldr	r2, [pc, #240]	; (8005938 <checkAktifCalisma+0xb98>)
 8005846:	7812      	ldrb	r2, [r2, #0]
 8005848:	4293      	cmp	r3, r2
 800584a:	d211      	bcs.n	8005870 <checkAktifCalisma+0xad0>
 800584c:	2104      	movs	r1, #4
 800584e:	4829      	ldr	r0, [pc, #164]	; (80058f4 <checkAktifCalisma+0xb54>)
 8005850:	f003 fdc2 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <checkAktifCalisma+0xad0>
 800585a:	4b33      	ldr	r3, [pc, #204]	; (8005928 <checkAktifCalisma+0xb88>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d006      	beq.n	8005870 <checkAktifCalisma+0xad0>
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <checkAktifCalisma+0xb78>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f083 0301 	eor.w	r3, r3, #1
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005870:	4b2f      	ldr	r3, [pc, #188]	; (8005930 <checkAktifCalisma+0xb90>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005876:	4b29      	ldr	r3, [pc, #164]	; (800591c <checkAktifCalisma+0xb7c>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d160      	bne.n	8005940 <checkAktifCalisma+0xba0>
 800587e:	4b28      	ldr	r3, [pc, #160]	; (8005920 <checkAktifCalisma+0xb80>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d003      	beq.n	800588e <checkAktifCalisma+0xaee>
 8005886:	4b26      	ldr	r3, [pc, #152]	; (8005920 <checkAktifCalisma+0xb80>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d158      	bne.n	8005940 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800588e:	2104      	movs	r1, #4
 8005890:	4818      	ldr	r0, [pc, #96]	; (80058f4 <checkAktifCalisma+0xb54>)
 8005892:	f003 fda1 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005896:	4603      	mov	r3, r0
 8005898:	2b01      	cmp	r3, #1
 800589a:	d003      	beq.n	80058a4 <checkAktifCalisma+0xb04>
 800589c:	4b22      	ldr	r3, [pc, #136]	; (8005928 <checkAktifCalisma+0xb88>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d14d      	bne.n	8005940 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058a4:	2102      	movs	r1, #2
 80058a6:	4813      	ldr	r0, [pc, #76]	; (80058f4 <checkAktifCalisma+0xb54>)
 80058a8:	f003 fd96 	bl	80093d8 <HAL_GPIO_ReadPin>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d146      	bne.n	8005940 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	480f      	ldr	r0, [pc, #60]	; (80058f4 <checkAktifCalisma+0xb54>)
 80058b6:	f003 fd8f 	bl	80093d8 <HAL_GPIO_ReadPin>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d103      	bne.n	80058c8 <checkAktifCalisma+0xb28>
 80058c0:	4b18      	ldr	r3, [pc, #96]	; (8005924 <checkAktifCalisma+0xb84>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <checkAktifCalisma+0xb40>
 80058c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058cc:	4811      	ldr	r0, [pc, #68]	; (8005914 <checkAktifCalisma+0xb74>)
 80058ce:	f003 fd83 	bl	80093d8 <HAL_GPIO_ReadPin>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d133      	bne.n	8005940 <checkAktifCalisma+0xba0>
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <checkAktifCalisma+0xb84>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d12f      	bne.n	8005940 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <checkAktifCalisma+0xb78>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d02b      	beq.n	8005940 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <checkAktifCalisma+0xb9c>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e02a      	b.n	8005946 <checkAktifCalisma+0xba6>
 80058f0:	2000025b 	.word	0x2000025b
 80058f4:	40011000 	.word	0x40011000
 80058f8:	2000025f 	.word	0x2000025f
 80058fc:	20000276 	.word	0x20000276
 8005900:	20000277 	.word	0x20000277
 8005904:	20000257 	.word	0x20000257
 8005908:	20000200 	.word	0x20000200
 800590c:	2000020c 	.word	0x2000020c
 8005910:	2000023a 	.word	0x2000023a
 8005914:	40010c00 	.word	0x40010c00
 8005918:	20000266 	.word	0x20000266
 800591c:	2000022d 	.word	0x2000022d
 8005920:	2000022c 	.word	0x2000022c
 8005924:	20000230 	.word	0x20000230
 8005928:	2000022a 	.word	0x2000022a
 800592c:	20000253 	.word	0x20000253
 8005930:	20000267 	.word	0x20000267
 8005934:	20000204 	.word	0x20000204
 8005938:	2000023d 	.word	0x2000023d
 800593c:	20000268 	.word	0x20000268
		} else {
			kapi1butonkontrol=0;
 8005940:	4b8b      	ldr	r3, [pc, #556]	; (8005b70 <checkAktifCalisma+0xdd0>)
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005946:	4b8b      	ldr	r3, [pc, #556]	; (8005b74 <checkAktifCalisma+0xdd4>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d121      	bne.n	8005992 <checkAktifCalisma+0xbf2>
 800594e:	4b8a      	ldr	r3, [pc, #552]	; (8005b78 <checkAktifCalisma+0xdd8>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d003      	beq.n	800595e <checkAktifCalisma+0xbbe>
 8005956:	4b88      	ldr	r3, [pc, #544]	; (8005b78 <checkAktifCalisma+0xdd8>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d119      	bne.n	8005992 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800595e:	2104      	movs	r1, #4
 8005960:	4886      	ldr	r0, [pc, #536]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005962:	f003 fd39 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005966:	4603      	mov	r3, r0
 8005968:	2b01      	cmp	r3, #1
 800596a:	d003      	beq.n	8005974 <checkAktifCalisma+0xbd4>
 800596c:	4b84      	ldr	r3, [pc, #528]	; (8005b80 <checkAktifCalisma+0xde0>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10e      	bne.n	8005992 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005974:	2102      	movs	r1, #2
 8005976:	4881      	ldr	r0, [pc, #516]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005978:	f003 fd2e 	bl	80093d8 <HAL_GPIO_ReadPin>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d107      	bne.n	8005992 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005982:	4b80      	ldr	r3, [pc, #512]	; (8005b84 <checkAktifCalisma+0xde4>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800598a:	4b7f      	ldr	r3, [pc, #508]	; (8005b88 <checkAktifCalisma+0xde8>)
 800598c:	2201      	movs	r2, #1
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	e002      	b.n	8005998 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005992:	4b7d      	ldr	r3, [pc, #500]	; (8005b88 <checkAktifCalisma+0xde8>)
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005998:	4b75      	ldr	r3, [pc, #468]	; (8005b70 <checkAktifCalisma+0xdd0>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d107      	bne.n	80059b0 <checkAktifCalisma+0xc10>
 80059a0:	4b79      	ldr	r3, [pc, #484]	; (8005b88 <checkAktifCalisma+0xde8>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <checkAktifCalisma+0xc10>
 80059a8:	4b78      	ldr	r3, [pc, #480]	; (8005b8c <checkAktifCalisma+0xdec>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059b0:	2201      	movs	r2, #1
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	4876      	ldr	r0, [pc, #472]	; (8005b90 <checkAktifCalisma+0xdf0>)
 80059b6:	f003 fd26 	bl	8009406 <HAL_GPIO_WritePin>
 80059ba:	e004      	b.n	80059c6 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059bc:	2200      	movs	r2, #0
 80059be:	2180      	movs	r1, #128	; 0x80
 80059c0:	4873      	ldr	r0, [pc, #460]	; (8005b90 <checkAktifCalisma+0xdf0>)
 80059c2:	f003 fd20 	bl	8009406 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059c6:	4b73      	ldr	r3, [pc, #460]	; (8005b94 <checkAktifCalisma+0xdf4>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d141      	bne.n	8005a52 <checkAktifCalisma+0xcb2>
 80059ce:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <checkAktifCalisma+0xdd8>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d003      	beq.n	80059de <checkAktifCalisma+0xc3e>
 80059d6:	4b68      	ldr	r3, [pc, #416]	; (8005b78 <checkAktifCalisma+0xdd8>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d139      	bne.n	8005a52 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059e2:	4866      	ldr	r0, [pc, #408]	; (8005b7c <checkAktifCalisma+0xddc>)
 80059e4:	f003 fcf8 	bl	80093d8 <HAL_GPIO_ReadPin>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <checkAktifCalisma+0xc56>
 80059ee:	4b6a      	ldr	r3, [pc, #424]	; (8005b98 <checkAktifCalisma+0xdf8>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <checkAktifCalisma+0xc6e>
 80059f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059fa:	4868      	ldr	r0, [pc, #416]	; (8005b9c <checkAktifCalisma+0xdfc>)
 80059fc:	f003 fcec 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d125      	bne.n	8005a52 <checkAktifCalisma+0xcb2>
 8005a06:	4b64      	ldr	r3, [pc, #400]	; (8005b98 <checkAktifCalisma+0xdf8>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d121      	bne.n	8005a52 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a0e:	2102      	movs	r1, #2
 8005a10:	485a      	ldr	r0, [pc, #360]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005a12:	f003 fce1 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d11a      	bne.n	8005a52 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a1c:	2104      	movs	r1, #4
 8005a1e:	4857      	ldr	r0, [pc, #348]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005a20:	f003 fcda 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d113      	bne.n	8005a52 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005a2a:	4b56      	ldr	r3, [pc, #344]	; (8005b84 <checkAktifCalisma+0xde4>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00f      	beq.n	8005a52 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005a32:	4b5b      	ldr	r3, [pc, #364]	; (8005ba0 <checkAktifCalisma+0xe00>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f083 0301 	eor.w	r3, r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005a40:	4b58      	ldr	r3, [pc, #352]	; (8005ba4 <checkAktifCalisma+0xe04>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a46:	4b58      	ldr	r3, [pc, #352]	; (8005ba8 <checkAktifCalisma+0xe08>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a58      	ldr	r2, [pc, #352]	; (8005bac <checkAktifCalisma+0xe0c>)
 8005a4c:	6013      	str	r3, [r2, #0]
			bekle();
 8005a4e:	f7ff f829 	bl	8004aa4 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005a52:	4b55      	ldr	r3, [pc, #340]	; (8005ba8 <checkAktifCalisma+0xe08>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4b55      	ldr	r3, [pc, #340]	; (8005bac <checkAktifCalisma+0xe0c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	4a54      	ldr	r2, [pc, #336]	; (8005bb0 <checkAktifCalisma+0xe10>)
 8005a5e:	7812      	ldrb	r2, [r2, #0]
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d20d      	bcs.n	8005a80 <checkAktifCalisma+0xce0>
 8005a64:	2102      	movs	r1, #2
 8005a66:	4845      	ldr	r0, [pc, #276]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005a68:	f003 fcb6 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d006      	beq.n	8005a80 <checkAktifCalisma+0xce0>
 8005a72:	4b44      	ldr	r3, [pc, #272]	; (8005b84 <checkAktifCalisma+0xde4>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	f083 0301 	eor.w	r3, r3, #1
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005a80:	4b48      	ldr	r3, [pc, #288]	; (8005ba4 <checkAktifCalisma+0xe04>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a86:	4b43      	ldr	r3, [pc, #268]	; (8005b94 <checkAktifCalisma+0xdf4>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d135      	bne.n	8005afa <checkAktifCalisma+0xd5a>
 8005a8e:	4b3a      	ldr	r3, [pc, #232]	; (8005b78 <checkAktifCalisma+0xdd8>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d003      	beq.n	8005a9e <checkAktifCalisma+0xcfe>
 8005a96:	4b38      	ldr	r3, [pc, #224]	; (8005b78 <checkAktifCalisma+0xdd8>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d12d      	bne.n	8005afa <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005aa2:	4836      	ldr	r0, [pc, #216]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005aa4:	f003 fc98 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <checkAktifCalisma+0xd16>
 8005aae:	4b3a      	ldr	r3, [pc, #232]	; (8005b98 <checkAktifCalisma+0xdf8>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <checkAktifCalisma+0xd2e>
 8005ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005aba:	4838      	ldr	r0, [pc, #224]	; (8005b9c <checkAktifCalisma+0xdfc>)
 8005abc:	f003 fc8c 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d119      	bne.n	8005afa <checkAktifCalisma+0xd5a>
 8005ac6:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <checkAktifCalisma+0xdf8>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d115      	bne.n	8005afa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ace:	2102      	movs	r1, #2
 8005ad0:	482a      	ldr	r0, [pc, #168]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005ad2:	f003 fc81 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d10e      	bne.n	8005afa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005adc:	2104      	movs	r1, #4
 8005ade:	4827      	ldr	r0, [pc, #156]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005ae0:	f003 fc7a 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d107      	bne.n	8005afa <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005aea:	4b26      	ldr	r3, [pc, #152]	; (8005b84 <checkAktifCalisma+0xde4>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005af2:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <checkAktifCalisma+0xe14>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	e002      	b.n	8005b00 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005afa:	4b2e      	ldr	r3, [pc, #184]	; (8005bb4 <checkAktifCalisma+0xe14>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b00:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <checkAktifCalisma+0xdf4>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d11d      	bne.n	8005b44 <checkAktifCalisma+0xda4>
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <checkAktifCalisma+0xdd8>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d003      	beq.n	8005b18 <checkAktifCalisma+0xd78>
 8005b10:	4b19      	ldr	r3, [pc, #100]	; (8005b78 <checkAktifCalisma+0xdd8>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d115      	bne.n	8005b44 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b18:	2102      	movs	r1, #2
 8005b1a:	4818      	ldr	r0, [pc, #96]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005b1c:	f003 fc5c 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d10e      	bne.n	8005b44 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b26:	2104      	movs	r1, #4
 8005b28:	4814      	ldr	r0, [pc, #80]	; (8005b7c <checkAktifCalisma+0xddc>)
 8005b2a:	f003 fc55 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d107      	bne.n	8005b44 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005b34:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <checkAktifCalisma+0xde4>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005b3c:	4b1e      	ldr	r3, [pc, #120]	; (8005bb8 <checkAktifCalisma+0xe18>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	e002      	b.n	8005b4a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005b44:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <checkAktifCalisma+0xe18>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005b4a:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <checkAktifCalisma+0xe14>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d107      	bne.n	8005b62 <checkAktifCalisma+0xdc2>
 8005b52:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <checkAktifCalisma+0xe18>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <checkAktifCalisma+0xdc2>
 8005b5a:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <checkAktifCalisma+0xe04>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02c      	beq.n	8005bbc <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005b62:	2201      	movs	r2, #1
 8005b64:	2140      	movs	r1, #64	; 0x40
 8005b66:	480a      	ldr	r0, [pc, #40]	; (8005b90 <checkAktifCalisma+0xdf0>)
 8005b68:	f003 fc4d 	bl	8009406 <HAL_GPIO_WritePin>
 8005b6c:	e02b      	b.n	8005bc6 <checkAktifCalisma+0xe26>
 8005b6e:	bf00      	nop
 8005b70:	20000268 	.word	0x20000268
 8005b74:	2000022d 	.word	0x2000022d
 8005b78:	2000022c 	.word	0x2000022c
 8005b7c:	40011000 	.word	0x40011000
 8005b80:	2000022a 	.word	0x2000022a
 8005b84:	20000266 	.word	0x20000266
 8005b88:	20000269 	.word	0x20000269
 8005b8c:	20000267 	.word	0x20000267
 8005b90:	40010800 	.word	0x40010800
 8005b94:	2000022e 	.word	0x2000022e
 8005b98:	20000230 	.word	0x20000230
 8005b9c:	40010c00 	.word	0x40010c00
 8005ba0:	20000253 	.word	0x20000253
 8005ba4:	2000026a 	.word	0x2000026a
 8005ba8:	20000200 	.word	0x20000200
 8005bac:	20000204 	.word	0x20000204
 8005bb0:	2000023e 	.word	0x2000023e
 8005bb4:	2000026b 	.word	0x2000026b
 8005bb8:	2000026c 	.word	0x2000026c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2140      	movs	r1, #64	; 0x40
 8005bc0:	488d      	ldr	r0, [pc, #564]	; (8005df8 <checkAktifCalisma+0x1058>)
 8005bc2:	f003 fc20 	bl	8009406 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005bc6:	4b8d      	ldr	r3, [pc, #564]	; (8005dfc <checkAktifCalisma+0x105c>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <checkAktifCalisma+0xe36>
 8005bce:	4b8b      	ldr	r3, [pc, #556]	; (8005dfc <checkAktifCalisma+0x105c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d115      	bne.n	8005c02 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005bd6:	2104      	movs	r1, #4
 8005bd8:	4889      	ldr	r0, [pc, #548]	; (8005e00 <checkAktifCalisma+0x1060>)
 8005bda:	f003 fbfd 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d003      	beq.n	8005bec <checkAktifCalisma+0xe4c>
 8005be4:	4b87      	ldr	r3, [pc, #540]	; (8005e04 <checkAktifCalisma+0x1064>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005bec:	2102      	movs	r1, #2
 8005bee:	4884      	ldr	r0, [pc, #528]	; (8005e00 <checkAktifCalisma+0x1060>)
 8005bf0:	f003 fbf2 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005bfa:	4b83      	ldr	r3, [pc, #524]	; (8005e08 <checkAktifCalisma+0x1068>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	e002      	b.n	8005c08 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c02:	4b81      	ldr	r3, [pc, #516]	; (8005e08 <checkAktifCalisma+0x1068>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c08:	4b7c      	ldr	r3, [pc, #496]	; (8005dfc <checkAktifCalisma+0x105c>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d003      	beq.n	8005c18 <checkAktifCalisma+0xe78>
 8005c10:	4b7a      	ldr	r3, [pc, #488]	; (8005dfc <checkAktifCalisma+0x105c>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d111      	bne.n	8005c3c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c18:	2102      	movs	r1, #2
 8005c1a:	4879      	ldr	r0, [pc, #484]	; (8005e00 <checkAktifCalisma+0x1060>)
 8005c1c:	f003 fbdc 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d10a      	bne.n	8005c3c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c26:	2104      	movs	r1, #4
 8005c28:	4875      	ldr	r0, [pc, #468]	; (8005e00 <checkAktifCalisma+0x1060>)
 8005c2a:	f003 fbd5 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005c34:	4b75      	ldr	r3, [pc, #468]	; (8005e0c <checkAktifCalisma+0x106c>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	e002      	b.n	8005c42 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005c3c:	4b73      	ldr	r3, [pc, #460]	; (8005e0c <checkAktifCalisma+0x106c>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005c42:	4b71      	ldr	r3, [pc, #452]	; (8005e08 <checkAktifCalisma+0x1068>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00f      	beq.n	8005c6a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005c4a:	4b71      	ldr	r3, [pc, #452]	; (8005e10 <checkAktifCalisma+0x1070>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d10b      	bne.n	8005c6a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c56:	486f      	ldr	r0, [pc, #444]	; (8005e14 <checkAktifCalisma+0x1074>)
 8005c58:	f003 fbbe 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005c62:	4b6d      	ldr	r3, [pc, #436]	; (8005e18 <checkAktifCalisma+0x1078>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	e002      	b.n	8005c70 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005c6a:	4b6b      	ldr	r3, [pc, #428]	; (8005e18 <checkAktifCalisma+0x1078>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005c70:	4b66      	ldr	r3, [pc, #408]	; (8005e0c <checkAktifCalisma+0x106c>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00f      	beq.n	8005c98 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005c78:	4b65      	ldr	r3, [pc, #404]	; (8005e10 <checkAktifCalisma+0x1070>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d10b      	bne.n	8005c98 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c84:	4863      	ldr	r0, [pc, #396]	; (8005e14 <checkAktifCalisma+0x1074>)
 8005c86:	f003 fba7 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005c90:	4b62      	ldr	r3, [pc, #392]	; (8005e1c <checkAktifCalisma+0x107c>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	e002      	b.n	8005c9e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005c98:	4b60      	ldr	r3, [pc, #384]	; (8005e1c <checkAktifCalisma+0x107c>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c9e:	4b60      	ldr	r3, [pc, #384]	; (8005e20 <checkAktifCalisma+0x1080>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d137      	bne.n	8005d16 <checkAktifCalisma+0xf76>
 8005ca6:	4b5f      	ldr	r3, [pc, #380]	; (8005e24 <checkAktifCalisma+0x1084>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d003      	beq.n	8005cb6 <checkAktifCalisma+0xf16>
 8005cae:	4b5d      	ldr	r3, [pc, #372]	; (8005e24 <checkAktifCalisma+0x1084>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d12f      	bne.n	8005d16 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cb6:	4b54      	ldr	r3, [pc, #336]	; (8005e08 <checkAktifCalisma+0x1068>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <checkAktifCalisma+0xf26>
 8005cbe:	4b53      	ldr	r3, [pc, #332]	; (8005e0c <checkAktifCalisma+0x106c>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d027      	beq.n	8005d16 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005cc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cca:	484d      	ldr	r0, [pc, #308]	; (8005e00 <checkAktifCalisma+0x1060>)
 8005ccc:	f003 fb84 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <checkAktifCalisma+0xf3e>
 8005cd6:	4b4e      	ldr	r3, [pc, #312]	; (8005e10 <checkAktifCalisma+0x1070>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005cde:	4b4e      	ldr	r3, [pc, #312]	; (8005e18 <checkAktifCalisma+0x1078>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <checkAktifCalisma+0xf4e>
 8005ce6:	4b4d      	ldr	r3, [pc, #308]	; (8005e1c <checkAktifCalisma+0x107c>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d013      	beq.n	8005d16 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005cee:	4b4e      	ldr	r3, [pc, #312]	; (8005e28 <checkAktifCalisma+0x1088>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00f      	beq.n	8005d16 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005cf6:	4b4d      	ldr	r3, [pc, #308]	; (8005e2c <checkAktifCalisma+0x108c>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f083 0301 	eor.w	r3, r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d04:	4b4a      	ldr	r3, [pc, #296]	; (8005e30 <checkAktifCalisma+0x1090>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d0a:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <checkAktifCalisma+0x1094>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a4a      	ldr	r2, [pc, #296]	; (8005e38 <checkAktifCalisma+0x1098>)
 8005d10:	6013      	str	r3, [r2, #0]
			bekle();
 8005d12:	f7fe fec7 	bl	8004aa4 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005d16:	4b47      	ldr	r3, [pc, #284]	; (8005e34 <checkAktifCalisma+0x1094>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4b47      	ldr	r3, [pc, #284]	; (8005e38 <checkAktifCalisma+0x1098>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	4a46      	ldr	r2, [pc, #280]	; (8005e3c <checkAktifCalisma+0x109c>)
 8005d22:	7812      	ldrb	r2, [r2, #0]
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d214      	bcs.n	8005d52 <checkAktifCalisma+0xfb2>
 8005d28:	4b37      	ldr	r3, [pc, #220]	; (8005e08 <checkAktifCalisma+0x1068>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	f083 0301 	eor.w	r3, r3, #1
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d006      	beq.n	8005d44 <checkAktifCalisma+0xfa4>
 8005d36:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <checkAktifCalisma+0x106c>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	f083 0301 	eor.w	r3, r3, #1
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <checkAktifCalisma+0xfb2>
 8005d44:	4b38      	ldr	r3, [pc, #224]	; (8005e28 <checkAktifCalisma+0x1088>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	f083 0301 	eor.w	r3, r3, #1
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005d52:	4b37      	ldr	r3, [pc, #220]	; (8005e30 <checkAktifCalisma+0x1090>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d58:	4b31      	ldr	r3, [pc, #196]	; (8005e20 <checkAktifCalisma+0x1080>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d12b      	bne.n	8005db8 <checkAktifCalisma+0x1018>
 8005d60:	4b30      	ldr	r3, [pc, #192]	; (8005e24 <checkAktifCalisma+0x1084>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d003      	beq.n	8005d70 <checkAktifCalisma+0xfd0>
 8005d68:	4b2e      	ldr	r3, [pc, #184]	; (8005e24 <checkAktifCalisma+0x1084>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d123      	bne.n	8005db8 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d70:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <checkAktifCalisma+0x1068>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d103      	bne.n	8005d80 <checkAktifCalisma+0xfe0>
 8005d78:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <checkAktifCalisma+0x106c>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01b      	beq.n	8005db8 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d84:	481e      	ldr	r0, [pc, #120]	; (8005e00 <checkAktifCalisma+0x1060>)
 8005d86:	f003 fb27 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <checkAktifCalisma+0xff8>
 8005d90:	4b1f      	ldr	r3, [pc, #124]	; (8005e10 <checkAktifCalisma+0x1070>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d98:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <checkAktifCalisma+0x1078>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <checkAktifCalisma+0x1008>
 8005da0:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <checkAktifCalisma+0x107c>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005da8:	4b1f      	ldr	r3, [pc, #124]	; (8005e28 <checkAktifCalisma+0x1088>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005db0:	4b23      	ldr	r3, [pc, #140]	; (8005e40 <checkAktifCalisma+0x10a0>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e002      	b.n	8005dbe <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005db8:	4b21      	ldr	r3, [pc, #132]	; (8005e40 <checkAktifCalisma+0x10a0>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005dbe:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <checkAktifCalisma+0x1080>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d140      	bne.n	8005e48 <checkAktifCalisma+0x10a8>
 8005dc6:	4b17      	ldr	r3, [pc, #92]	; (8005e24 <checkAktifCalisma+0x1084>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d003      	beq.n	8005dd6 <checkAktifCalisma+0x1036>
 8005dce:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <checkAktifCalisma+0x1084>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d138      	bne.n	8005e48 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <checkAktifCalisma+0x1068>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d103      	bne.n	8005de6 <checkAktifCalisma+0x1046>
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <checkAktifCalisma+0x106c>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d030      	beq.n	8005e48 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <checkAktifCalisma+0x1088>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d02c      	beq.n	8005e48 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005dee:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <checkAktifCalisma+0x10a4>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	e02b      	b.n	8005e4e <checkAktifCalisma+0x10ae>
 8005df6:	bf00      	nop
 8005df8:	40010800 	.word	0x40010800
 8005dfc:	20000231 	.word	0x20000231
 8005e00:	40011000 	.word	0x40011000
 8005e04:	2000022a 	.word	0x2000022a
 8005e08:	20000270 	.word	0x20000270
 8005e0c:	20000271 	.word	0x20000271
 8005e10:	20000230 	.word	0x20000230
 8005e14:	40010c00 	.word	0x40010c00
 8005e18:	20000280 	.word	0x20000280
 8005e1c:	20000281 	.word	0x20000281
 8005e20:	2000022f 	.word	0x2000022f
 8005e24:	2000022c 	.word	0x2000022c
 8005e28:	20000266 	.word	0x20000266
 8005e2c:	20000253 	.word	0x20000253
 8005e30:	2000026d 	.word	0x2000026d
 8005e34:	20000200 	.word	0x20000200
 8005e38:	20000204 	.word	0x20000204
 8005e3c:	2000023f 	.word	0x2000023f
 8005e40:	2000026e 	.word	0x2000026e
 8005e44:	2000026f 	.word	0x2000026f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005e48:	4b8b      	ldr	r3, [pc, #556]	; (8006078 <checkAktifCalisma+0x12d8>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005e4e:	4b8b      	ldr	r3, [pc, #556]	; (800607c <checkAktifCalisma+0x12dc>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d107      	bne.n	8005e66 <checkAktifCalisma+0x10c6>
 8005e56:	4b8a      	ldr	r3, [pc, #552]	; (8006080 <checkAktifCalisma+0x12e0>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <checkAktifCalisma+0x10c6>
 8005e5e:	4b86      	ldr	r3, [pc, #536]	; (8006078 <checkAktifCalisma+0x12d8>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005e66:	2201      	movs	r2, #1
 8005e68:	2120      	movs	r1, #32
 8005e6a:	4886      	ldr	r0, [pc, #536]	; (8006084 <checkAktifCalisma+0x12e4>)
 8005e6c:	f003 facb 	bl	8009406 <HAL_GPIO_WritePin>
 8005e70:	e004      	b.n	8005e7c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e72:	2200      	movs	r2, #0
 8005e74:	2120      	movs	r1, #32
 8005e76:	4883      	ldr	r0, [pc, #524]	; (8006084 <checkAktifCalisma+0x12e4>)
 8005e78:	f003 fac5 	bl	8009406 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005e7c:	4b82      	ldr	r3, [pc, #520]	; (8006088 <checkAktifCalisma+0x12e8>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00e      	beq.n	8005ea2 <checkAktifCalisma+0x1102>
 8005e84:	2102      	movs	r1, #2
 8005e86:	4881      	ldr	r0, [pc, #516]	; (800608c <checkAktifCalisma+0x12ec>)
 8005e88:	f003 faa6 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d107      	bne.n	8005ea2 <checkAktifCalisma+0x1102>
 8005e92:	4b7f      	ldr	r3, [pc, #508]	; (8006090 <checkAktifCalisma+0x12f0>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <checkAktifCalisma+0x1102>
 8005e9a:	4b7e      	ldr	r3, [pc, #504]	; (8006094 <checkAktifCalisma+0x12f4>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d112      	bne.n	8005ec8 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005ea2:	4b7d      	ldr	r3, [pc, #500]	; (8006098 <checkAktifCalisma+0x12f8>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d066      	beq.n	8005f78 <checkAktifCalisma+0x11d8>
 8005eaa:	2104      	movs	r1, #4
 8005eac:	4877      	ldr	r0, [pc, #476]	; (800608c <checkAktifCalisma+0x12ec>)
 8005eae:	f003 fa93 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d15f      	bne.n	8005f78 <checkAktifCalisma+0x11d8>
 8005eb8:	4b75      	ldr	r3, [pc, #468]	; (8006090 <checkAktifCalisma+0x12f0>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d05b      	beq.n	8005f78 <checkAktifCalisma+0x11d8>
 8005ec0:	4b74      	ldr	r3, [pc, #464]	; (8006094 <checkAktifCalisma+0x12f4>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d057      	beq.n	8005f78 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005ec8:	4b74      	ldr	r3, [pc, #464]	; (800609c <checkAktifCalisma+0x12fc>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	4b72      	ldr	r3, [pc, #456]	; (800609c <checkAktifCalisma+0x12fc>)
 8005ed2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005ed4:	4b71      	ldr	r3, [pc, #452]	; (800609c <checkAktifCalisma+0x12fc>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b09      	cmp	r3, #9
 8005eda:	d908      	bls.n	8005eee <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005edc:	4b6f      	ldr	r3, [pc, #444]	; (800609c <checkAktifCalisma+0x12fc>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005ee2:	4b6f      	ldr	r3, [pc, #444]	; (80060a0 <checkAktifCalisma+0x1300>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	4b6d      	ldr	r3, [pc, #436]	; (80060a0 <checkAktifCalisma+0x1300>)
 8005eec:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005eee:	4b6c      	ldr	r3, [pc, #432]	; (80060a0 <checkAktifCalisma+0x1300>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b09      	cmp	r3, #9
 8005ef4:	d908      	bls.n	8005f08 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005ef6:	4b6a      	ldr	r3, [pc, #424]	; (80060a0 <checkAktifCalisma+0x1300>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005efc:	4b69      	ldr	r3, [pc, #420]	; (80060a4 <checkAktifCalisma+0x1304>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	3301      	adds	r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	4b67      	ldr	r3, [pc, #412]	; (80060a4 <checkAktifCalisma+0x1304>)
 8005f06:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f08:	4b66      	ldr	r3, [pc, #408]	; (80060a4 <checkAktifCalisma+0x1304>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b09      	cmp	r3, #9
 8005f0e:	d908      	bls.n	8005f22 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005f10:	4b64      	ldr	r3, [pc, #400]	; (80060a4 <checkAktifCalisma+0x1304>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005f16:	4b64      	ldr	r3, [pc, #400]	; (80060a8 <checkAktifCalisma+0x1308>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	4b62      	ldr	r3, [pc, #392]	; (80060a8 <checkAktifCalisma+0x1308>)
 8005f20:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005f22:	4b61      	ldr	r3, [pc, #388]	; (80060a8 <checkAktifCalisma+0x1308>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b09      	cmp	r3, #9
 8005f28:	d908      	bls.n	8005f3c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005f2a:	4b5f      	ldr	r3, [pc, #380]	; (80060a8 <checkAktifCalisma+0x1308>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005f30:	4b5e      	ldr	r3, [pc, #376]	; (80060ac <checkAktifCalisma+0x130c>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	4b5c      	ldr	r3, [pc, #368]	; (80060ac <checkAktifCalisma+0x130c>)
 8005f3a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005f3c:	4b5b      	ldr	r3, [pc, #364]	; (80060ac <checkAktifCalisma+0x130c>)
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	4b5b      	ldr	r3, [pc, #364]	; (80060b0 <checkAktifCalisma+0x1310>)
 8005f42:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005f46:	4b58      	ldr	r3, [pc, #352]	; (80060a8 <checkAktifCalisma+0x1308>)
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	4b59      	ldr	r3, [pc, #356]	; (80060b0 <checkAktifCalisma+0x1310>)
 8005f4c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005f4e:	4b55      	ldr	r3, [pc, #340]	; (80060a4 <checkAktifCalisma+0x1304>)
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	4b57      	ldr	r3, [pc, #348]	; (80060b0 <checkAktifCalisma+0x1310>)
 8005f54:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005f56:	4b52      	ldr	r3, [pc, #328]	; (80060a0 <checkAktifCalisma+0x1300>)
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	4b55      	ldr	r3, [pc, #340]	; (80060b0 <checkAktifCalisma+0x1310>)
 8005f5c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005f5e:	4b4f      	ldr	r3, [pc, #316]	; (800609c <checkAktifCalisma+0x12fc>)
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	4b53      	ldr	r3, [pc, #332]	; (80060b0 <checkAktifCalisma+0x1310>)
 8005f64:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005f66:	4b53      	ldr	r3, [pc, #332]	; (80060b4 <checkAktifCalisma+0x1314>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005f6c:	4b46      	ldr	r3, [pc, #280]	; (8006088 <checkAktifCalisma+0x12e8>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005f72:	4b49      	ldr	r3, [pc, #292]	; (8006098 <checkAktifCalisma+0x12f8>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f7c:	484e      	ldr	r0, [pc, #312]	; (80060b8 <checkAktifCalisma+0x1318>)
 8005f7e:	f003 fa2b 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d016      	beq.n	8005fb6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005f88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f8c:	484a      	ldr	r0, [pc, #296]	; (80060b8 <checkAktifCalisma+0x1318>)
 8005f8e:	f003 fa23 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00e      	beq.n	8005fb6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f9c:	4846      	ldr	r0, [pc, #280]	; (80060b8 <checkAktifCalisma+0x1318>)
 8005f9e:	f003 fa1b 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d006      	beq.n	8005fb6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005fa8:	2140      	movs	r1, #64	; 0x40
 8005faa:	4838      	ldr	r0, [pc, #224]	; (800608c <checkAktifCalisma+0x12ec>)
 8005fac:	f003 fa14 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <checkAktifCalisma+0x121e>
			startBasili=1;
 8005fb6:	4b41      	ldr	r3, [pc, #260]	; (80060bc <checkAktifCalisma+0x131c>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	e002      	b.n	8005fc4 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <checkAktifCalisma+0x131c>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005fc4:	4b3d      	ldr	r3, [pc, #244]	; (80060bc <checkAktifCalisma+0x131c>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d016      	beq.n	8005ffa <checkAktifCalisma+0x125a>
 8005fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fd0:	4839      	ldr	r0, [pc, #228]	; (80060b8 <checkAktifCalisma+0x1318>)
 8005fd2:	f003 fa01 	bl	80093d8 <HAL_GPIO_ReadPin>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10e      	bne.n	8005ffa <checkAktifCalisma+0x125a>
			hataVar=1;
 8005fdc:	4b38      	ldr	r3, [pc, #224]	; (80060c0 <checkAktifCalisma+0x1320>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	f7fa fd9c 	bl	8000b20 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f7fa fd3f 	bl	8000a6c <hata2EEPROM>
			convertAndSendData();
 8005fee:	f001 fcb5 	bl	800795c <convertAndSendData>
			acilstophatasi=1;
 8005ff2:	4b34      	ldr	r3, [pc, #208]	; (80060c4 <checkAktifCalisma+0x1324>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005ff8:	e018      	b.n	800602c <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005ffa:	4b32      	ldr	r3, [pc, #200]	; (80060c4 <checkAktifCalisma+0x1324>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d014      	beq.n	800602c <checkAktifCalisma+0x128c>
 8006002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006006:	482c      	ldr	r0, [pc, #176]	; (80060b8 <checkAktifCalisma+0x1318>)
 8006008:	f003 f9e6 	bl	80093d8 <HAL_GPIO_ReadPin>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10c      	bne.n	800602c <checkAktifCalisma+0x128c>
 8006012:	4b2a      	ldr	r3, [pc, #168]	; (80060bc <checkAktifCalisma+0x131c>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	f083 0301 	eor.w	r3, r3, #1
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006020:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <checkAktifCalisma+0x1324>)
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006026:	2001      	movs	r0, #1
 8006028:	f7fe fce8 	bl	80049fc <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <checkAktifCalisma+0x1328>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f083 0301 	eor.w	r3, r3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d04e      	beq.n	80060d8 <checkAktifCalisma+0x1338>
 800603a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800603e:	481e      	ldr	r0, [pc, #120]	; (80060b8 <checkAktifCalisma+0x1318>)
 8006040:	f003 f9ca 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <checkAktifCalisma+0x12b2>
 800604a:	4b20      	ldr	r3, [pc, #128]	; (80060cc <checkAktifCalisma+0x132c>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d042      	beq.n	80060d8 <checkAktifCalisma+0x1338>
 8006052:	4b1f      	ldr	r3, [pc, #124]	; (80060d0 <checkAktifCalisma+0x1330>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d13e      	bne.n	80060d8 <checkAktifCalisma+0x1338>
			hataVar=1;
 800605a:	4b19      	ldr	r3, [pc, #100]	; (80060c0 <checkAktifCalisma+0x1320>)
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006060:	2002      	movs	r0, #2
 8006062:	f7fa fd5d 	bl	8000b20 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006066:	2002      	movs	r0, #2
 8006068:	f7fa fd00 	bl	8000a6c <hata2EEPROM>
			convertAndSendData();
 800606c:	f001 fc76 	bl	800795c <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006070:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <checkAktifCalisma+0x1334>)
 8006072:	2201      	movs	r2, #1
 8006074:	701a      	strb	r2, [r3, #0]
		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006076:	e047      	b.n	8006108 <checkAktifCalisma+0x1368>
 8006078:	2000026f 	.word	0x2000026f
 800607c:	2000026e 	.word	0x2000026e
 8006080:	2000026d 	.word	0x2000026d
 8006084:	40010800 	.word	0x40010800
 8006088:	20000263 	.word	0x20000263
 800608c:	40011000 	.word	0x40011000
 8006090:	2000022a 	.word	0x2000022a
 8006094:	20000266 	.word	0x20000266
 8006098:	20000264 	.word	0x20000264
 800609c:	20000221 	.word	0x20000221
 80060a0:	20000222 	.word	0x20000222
 80060a4:	20000008 	.word	0x20000008
 80060a8:	20000009 	.word	0x20000009
 80060ac:	20000223 	.word	0x20000223
 80060b0:	20000128 	.word	0x20000128
 80060b4:	20000250 	.word	0x20000250
 80060b8:	40010c00 	.word	0x40010c00
 80060bc:	20000272 	.word	0x20000272
 80060c0:	20000279 	.word	0x20000279
 80060c4:	20000274 	.word	0x20000274
 80060c8:	2000027b 	.word	0x2000027b
 80060cc:	20000285 	.word	0x20000285
 80060d0:	20000228 	.word	0x20000228
 80060d4:	20000275 	.word	0x20000275
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80060d8:	4b9b      	ldr	r3, [pc, #620]	; (8006348 <checkAktifCalisma+0x15a8>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d013      	beq.n	8006108 <checkAktifCalisma+0x1368>
 80060e0:	4b9a      	ldr	r3, [pc, #616]	; (800634c <checkAktifCalisma+0x15ac>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00f      	beq.n	8006108 <checkAktifCalisma+0x1368>
 80060e8:	4b99      	ldr	r3, [pc, #612]	; (8006350 <checkAktifCalisma+0x15b0>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f083 0301 	eor.w	r3, r3, #1
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80060f6:	4b94      	ldr	r3, [pc, #592]	; (8006348 <checkAktifCalisma+0x15a8>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80060fc:	4b95      	ldr	r3, [pc, #596]	; (8006354 <checkAktifCalisma+0x15b4>)
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006102:	2002      	movs	r0, #2
 8006104:	f7fe fc7a 	bl	80049fc <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006108:	4b93      	ldr	r3, [pc, #588]	; (8006358 <checkAktifCalisma+0x15b8>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d11e      	bne.n	800614e <checkAktifCalisma+0x13ae>
 8006110:	4b92      	ldr	r3, [pc, #584]	; (800635c <checkAktifCalisma+0x15bc>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d11a      	bne.n	800614e <checkAktifCalisma+0x13ae>
 8006118:	4b91      	ldr	r3, [pc, #580]	; (8006360 <checkAktifCalisma+0x15c0>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d016      	beq.n	800614e <checkAktifCalisma+0x13ae>
 8006120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006124:	488f      	ldr	r0, [pc, #572]	; (8006364 <checkAktifCalisma+0x15c4>)
 8006126:	f003 f957 	bl	80093d8 <HAL_GPIO_ReadPin>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d10e      	bne.n	800614e <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006130:	4b8d      	ldr	r3, [pc, #564]	; (8006368 <checkAktifCalisma+0x15c8>)
 8006132:	2201      	movs	r2, #1
 8006134:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006136:	2003      	movs	r0, #3
 8006138:	f7fa fcf2 	bl	8000b20 <hataKoduLcdGoster>
			hata2EEPROM(3);
 800613c:	2003      	movs	r0, #3
 800613e:	f7fa fc95 	bl	8000a6c <hata2EEPROM>
			convertAndSendData();
 8006142:	f001 fc0b 	bl	800795c <convertAndSendData>
			basinchatasi=1;
 8006146:	4b89      	ldr	r3, [pc, #548]	; (800636c <checkAktifCalisma+0x15cc>)
 8006148:	2201      	movs	r2, #1
 800614a:	701a      	strb	r2, [r3, #0]
		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800614c:	e015      	b.n	800617a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800614e:	4b87      	ldr	r3, [pc, #540]	; (800636c <checkAktifCalisma+0x15cc>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d011      	beq.n	800617a <checkAktifCalisma+0x13da>
 8006156:	4b80      	ldr	r3, [pc, #512]	; (8006358 <checkAktifCalisma+0x15b8>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10d      	bne.n	800617a <checkAktifCalisma+0x13da>
 800615e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006162:	4883      	ldr	r0, [pc, #524]	; (8006370 <checkAktifCalisma+0x15d0>)
 8006164:	f003 f938 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006168:	4603      	mov	r3, r0
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800616e:	4b7f      	ldr	r3, [pc, #508]	; (800636c <checkAktifCalisma+0x15cc>)
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006174:	2003      	movs	r0, #3
 8006176:	f7fe fc41 	bl	80049fc <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800617a:	4b7e      	ldr	r3, [pc, #504]	; (8006374 <checkAktifCalisma+0x15d4>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <checkAktifCalisma+0x13ea>
 8006182:	4b7d      	ldr	r3, [pc, #500]	; (8006378 <checkAktifCalisma+0x15d8>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01e      	beq.n	80061c8 <checkAktifCalisma+0x1428>
 800618a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800618e:	487b      	ldr	r0, [pc, #492]	; (800637c <checkAktifCalisma+0x15dc>)
 8006190:	f003 f922 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006194:	4603      	mov	r3, r0
 8006196:	2b01      	cmp	r3, #1
 8006198:	d116      	bne.n	80061c8 <checkAktifCalisma+0x1428>
 800619a:	4b79      	ldr	r3, [pc, #484]	; (8006380 <checkAktifCalisma+0x15e0>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d003      	beq.n	80061aa <checkAktifCalisma+0x140a>
 80061a2:	4b77      	ldr	r3, [pc, #476]	; (8006380 <checkAktifCalisma+0x15e0>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d10e      	bne.n	80061c8 <checkAktifCalisma+0x1428>
			hataVar=1;
 80061aa:	4b6f      	ldr	r3, [pc, #444]	; (8006368 <checkAktifCalisma+0x15c8>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80061b0:	2004      	movs	r0, #4
 80061b2:	f7fa fcb5 	bl	8000b20 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80061b6:	2004      	movs	r0, #4
 80061b8:	f7fa fc58 	bl	8000a6c <hata2EEPROM>
			convertAndSendData();
 80061bc:	f001 fbce 	bl	800795c <convertAndSendData>
			katkapisivicihatasi=1;
 80061c0:	4b70      	ldr	r3, [pc, #448]	; (8006384 <checkAktifCalisma+0x15e4>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80061c6:	e01f      	b.n	8006208 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80061c8:	4b6e      	ldr	r3, [pc, #440]	; (8006384 <checkAktifCalisma+0x15e4>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01b      	beq.n	8006208 <checkAktifCalisma+0x1468>
 80061d0:	4b6d      	ldr	r3, [pc, #436]	; (8006388 <checkAktifCalisma+0x15e8>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d017      	beq.n	8006208 <checkAktifCalisma+0x1468>
 80061d8:	4b66      	ldr	r3, [pc, #408]	; (8006374 <checkAktifCalisma+0x15d4>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f083 0301 	eor.w	r3, r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d010      	beq.n	8006208 <checkAktifCalisma+0x1468>
 80061e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061ea:	4864      	ldr	r0, [pc, #400]	; (800637c <checkAktifCalisma+0x15dc>)
 80061ec:	f003 f8f4 	bl	80093d8 <HAL_GPIO_ReadPin>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d108      	bne.n	8006208 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80061f6:	4b63      	ldr	r3, [pc, #396]	; (8006384 <checkAktifCalisma+0x15e4>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80061fc:	4b5e      	ldr	r3, [pc, #376]	; (8006378 <checkAktifCalisma+0x15d8>)
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006202:	2004      	movs	r0, #4
 8006204:	f7fe fbfa 	bl	80049fc <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006208:	4b5a      	ldr	r3, [pc, #360]	; (8006374 <checkAktifCalisma+0x15d4>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d103      	bne.n	8006218 <checkAktifCalisma+0x1478>
 8006210:	4b5e      	ldr	r3, [pc, #376]	; (800638c <checkAktifCalisma+0x15ec>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01e      	beq.n	8006256 <checkAktifCalisma+0x14b6>
 8006218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800621c:	4857      	ldr	r0, [pc, #348]	; (800637c <checkAktifCalisma+0x15dc>)
 800621e:	f003 f8db 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006222:	4603      	mov	r3, r0
 8006224:	2b01      	cmp	r3, #1
 8006226:	d116      	bne.n	8006256 <checkAktifCalisma+0x14b6>
 8006228:	4b55      	ldr	r3, [pc, #340]	; (8006380 <checkAktifCalisma+0x15e0>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d003      	beq.n	8006238 <checkAktifCalisma+0x1498>
 8006230:	4b53      	ldr	r3, [pc, #332]	; (8006380 <checkAktifCalisma+0x15e0>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d10e      	bne.n	8006256 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006238:	4b4b      	ldr	r3, [pc, #300]	; (8006368 <checkAktifCalisma+0x15c8>)
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800623e:	2005      	movs	r0, #5
 8006240:	f7fa fc6e 	bl	8000b20 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006244:	2005      	movs	r0, #5
 8006246:	f7fa fc11 	bl	8000a6c <hata2EEPROM>
			convertAndSendData();
 800624a:	f001 fb87 	bl	800795c <convertAndSendData>
			tablakapisivicihatasi=1;
 800624e:	4b50      	ldr	r3, [pc, #320]	; (8006390 <checkAktifCalisma+0x15f0>)
 8006250:	2201      	movs	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006254:	e023      	b.n	800629e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006256:	4b4e      	ldr	r3, [pc, #312]	; (8006390 <checkAktifCalisma+0x15f0>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01f      	beq.n	800629e <checkAktifCalisma+0x14fe>
 800625e:	4b4a      	ldr	r3, [pc, #296]	; (8006388 <checkAktifCalisma+0x15e8>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d01b      	beq.n	800629e <checkAktifCalisma+0x14fe>
 8006266:	4b43      	ldr	r3, [pc, #268]	; (8006374 <checkAktifCalisma+0x15d4>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f083 0301 	eor.w	r3, r3, #1
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d014      	beq.n	800629e <checkAktifCalisma+0x14fe>
 8006274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006278:	4840      	ldr	r0, [pc, #256]	; (800637c <checkAktifCalisma+0x15dc>)
 800627a:	f003 f8ad 	bl	80093d8 <HAL_GPIO_ReadPin>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10c      	bne.n	800629e <checkAktifCalisma+0x14fe>
 8006284:	4b40      	ldr	r3, [pc, #256]	; (8006388 <checkAktifCalisma+0x15e8>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800628c:	4b40      	ldr	r3, [pc, #256]	; (8006390 <checkAktifCalisma+0x15f0>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006292:	4b3e      	ldr	r3, [pc, #248]	; (800638c <checkAktifCalisma+0x15ec>)
 8006294:	2200      	movs	r2, #0
 8006296:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006298:	2005      	movs	r0, #5
 800629a:	f7fe fbaf 	bl	80049fc <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800629e:	4b30      	ldr	r3, [pc, #192]	; (8006360 <checkAktifCalisma+0x15c0>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d107      	bne.n	80062b6 <checkAktifCalisma+0x1516>
 80062a6:	4b2a      	ldr	r3, [pc, #168]	; (8006350 <checkAktifCalisma+0x15b0>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d103      	bne.n	80062b6 <checkAktifCalisma+0x1516>
 80062ae:	4b39      	ldr	r3, [pc, #228]	; (8006394 <checkAktifCalisma+0x15f4>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80062b6:	4b38      	ldr	r3, [pc, #224]	; (8006398 <checkAktifCalisma+0x15f8>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b38      	ldr	r3, [pc, #224]	; (800639c <checkAktifCalisma+0x15fc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	4a37      	ldr	r2, [pc, #220]	; (80063a0 <checkAktifCalisma+0x1600>)
 80062c2:	7812      	ldrb	r2, [r2, #0]
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d30d      	bcc.n	80062e4 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80062c8:	4b27      	ldr	r3, [pc, #156]	; (8006368 <checkAktifCalisma+0x15c8>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80062ce:	2006      	movs	r0, #6
 80062d0:	f7fa fc26 	bl	8000b20 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80062d4:	2006      	movs	r0, #6
 80062d6:	f7fa fbc9 	bl	8000a6c <hata2EEPROM>
			  	convertAndSendData();
 80062da:	f001 fb3f 	bl	800795c <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80062de:	4b31      	ldr	r3, [pc, #196]	; (80063a4 <checkAktifCalisma+0x1604>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80062e4:	4b2f      	ldr	r3, [pc, #188]	; (80063a4 <checkAktifCalisma+0x1604>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d013      	beq.n	8006314 <checkAktifCalisma+0x1574>
 80062ec:	2108      	movs	r1, #8
 80062ee:	4823      	ldr	r0, [pc, #140]	; (800637c <checkAktifCalisma+0x15dc>)
 80062f0:	f003 f872 	bl	80093d8 <HAL_GPIO_ReadPin>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <checkAktifCalisma+0x1574>
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <checkAktifCalisma+0x15d4>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	f083 0301 	eor.w	r3, r3, #1
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006308:	4b26      	ldr	r3, [pc, #152]	; (80063a4 <checkAktifCalisma+0x1604>)
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800630e:	2006      	movs	r0, #6
 8006310:	f7fe fb74 	bl	80049fc <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006314:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <checkAktifCalisma+0x1608>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <checkAktifCalisma+0x1594>
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <checkAktifCalisma+0x15b0>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d107      	bne.n	8006334 <checkAktifCalisma+0x1594>
 8006324:	4b21      	ldr	r3, [pc, #132]	; (80063ac <checkAktifCalisma+0x160c>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <checkAktifCalisma+0x1594>
 800632c:	4b19      	ldr	r3, [pc, #100]	; (8006394 <checkAktifCalisma+0x15f4>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d03f      	beq.n	80063b4 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006334:	4b1e      	ldr	r3, [pc, #120]	; (80063b0 <checkAktifCalisma+0x1610>)
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800633a:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <checkAktifCalisma+0x15d8>)
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006340:	4b12      	ldr	r3, [pc, #72]	; (800638c <checkAktifCalisma+0x15ec>)
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e03c      	b.n	80063c2 <checkAktifCalisma+0x1622>
 8006348:	20000275 	.word	0x20000275
 800634c:	2000027b 	.word	0x2000027b
 8006350:	2000025c 	.word	0x2000025c
 8006354:	20000285 	.word	0x20000285
 8006358:	20000227 	.word	0x20000227
 800635c:	2000022b 	.word	0x2000022b
 8006360:	20000278 	.word	0x20000278
 8006364:	40011000 	.word	0x40011000
 8006368:	20000279 	.word	0x20000279
 800636c:	20000282 	.word	0x20000282
 8006370:	40010c00 	.word	0x40010c00
 8006374:	20000272 	.word	0x20000272
 8006378:	20000286 	.word	0x20000286
 800637c:	40010800 	.word	0x40010800
 8006380:	2000022c 	.word	0x2000022c
 8006384:	20000283 	.word	0x20000283
 8006388:	20000266 	.word	0x20000266
 800638c:	20000287 	.word	0x20000287
 8006390:	20000284 	.word	0x20000284
 8006394:	2000025b 	.word	0x2000025b
 8006398:	20000200 	.word	0x20000200
 800639c:	20000214 	.word	0x20000214
 80063a0:	2000023c 	.word	0x2000023c
 80063a4:	20000273 	.word	0x20000273
 80063a8:	20000259 	.word	0x20000259
 80063ac:	2000025a 	.word	0x2000025a
 80063b0:	2000027a 	.word	0x2000027a
		} else {
			makineCalisiyor=1;
 80063b4:	4b1e      	ldr	r3, [pc, #120]	; (8006430 <checkAktifCalisma+0x1690>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80063ba:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <checkAktifCalisma+0x1694>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1e      	ldr	r2, [pc, #120]	; (8006438 <checkAktifCalisma+0x1698>)
 80063c0:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80063c2:	4b1e      	ldr	r3, [pc, #120]	; (800643c <checkAktifCalisma+0x169c>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d02f      	beq.n	800642a <checkAktifCalisma+0x168a>
 80063ca:	4b1d      	ldr	r3, [pc, #116]	; (8006440 <checkAktifCalisma+0x16a0>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f083 0301 	eor.w	r3, r3, #1
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d028      	beq.n	800642a <checkAktifCalisma+0x168a>
 80063d8:	4b1a      	ldr	r3, [pc, #104]	; (8006444 <checkAktifCalisma+0x16a4>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	f083 0301 	eor.w	r3, r3, #1
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d021      	beq.n	800642a <checkAktifCalisma+0x168a>
 80063e6:	4b18      	ldr	r3, [pc, #96]	; (8006448 <checkAktifCalisma+0x16a8>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	f083 0301 	eor.w	r3, r3, #1
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01a      	beq.n	800642a <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80063f4:	4b15      	ldr	r3, [pc, #84]	; (800644c <checkAktifCalisma+0x16ac>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	f083 0301 	eor.w	r3, r3, #1
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d013      	beq.n	800642a <checkAktifCalisma+0x168a>
 8006402:	4b13      	ldr	r3, [pc, #76]	; (8006450 <checkAktifCalisma+0x16b0>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f083 0301 	eor.w	r3, r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00c      	beq.n	800642a <checkAktifCalisma+0x168a>
 8006410:	4b10      	ldr	r3, [pc, #64]	; (8006454 <checkAktifCalisma+0x16b4>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f083 0301 	eor.w	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <checkAktifCalisma+0x168a>
			hataVar=0;
 800641e:	4b07      	ldr	r3, [pc, #28]	; (800643c <checkAktifCalisma+0x169c>)
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006424:	2007      	movs	r0, #7
 8006426:	f7fe fae9 	bl	80049fc <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	2000027a 	.word	0x2000027a
 8006434:	20000200 	.word	0x20000200
 8006438:	20000214 	.word	0x20000214
 800643c:	20000279 	.word	0x20000279
 8006440:	20000274 	.word	0x20000274
 8006444:	20000275 	.word	0x20000275
 8006448:	20000282 	.word	0x20000282
 800644c:	20000283 	.word	0x20000283
 8006450:	20000284 	.word	0x20000284
 8006454:	20000273 	.word	0x20000273

08006458 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800645c:	4b8b      	ldr	r3, [pc, #556]	; (800668c <checkDemoModCalisma+0x234>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	f040 8229 	bne.w	80068b8 <checkDemoModCalisma+0x460>
 8006466:	4b8a      	ldr	r3, [pc, #552]	; (8006690 <checkDemoModCalisma+0x238>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8224 	beq.w	80068b8 <checkDemoModCalisma+0x460>
 8006470:	4b88      	ldr	r3, [pc, #544]	; (8006694 <checkDemoModCalisma+0x23c>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 821f 	bne.w	80068b8 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800647a:	2102      	movs	r1, #2
 800647c:	4886      	ldr	r0, [pc, #536]	; (8006698 <checkDemoModCalisma+0x240>)
 800647e:	f002 ffab 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d11d      	bne.n	80064c4 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006488:	4b84      	ldr	r3, [pc, #528]	; (800669c <checkDemoModCalisma+0x244>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f083 0301 	eor.w	r3, r3, #1
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d016      	beq.n	80064c4 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006496:	4b82      	ldr	r3, [pc, #520]	; (80066a0 <checkDemoModCalisma+0x248>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	f083 0301 	eor.w	r3, r3, #1
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00f      	beq.n	80064c4 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80064a4:	4b7f      	ldr	r3, [pc, #508]	; (80066a4 <checkDemoModCalisma+0x24c>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f083 0301 	eor.w	r3, r3, #1
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d008      	beq.n	80064c4 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80064b2:	2201      	movs	r2, #1
 80064b4:	2104      	movs	r1, #4
 80064b6:	487c      	ldr	r0, [pc, #496]	; (80066a8 <checkDemoModCalisma+0x250>)
 80064b8:	f002 ffa5 	bl	8009406 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80064bc:	4b7b      	ldr	r3, [pc, #492]	; (80066ac <checkDemoModCalisma+0x254>)
 80064be:	2201      	movs	r2, #1
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	e00e      	b.n	80064e2 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80064c4:	2102      	movs	r1, #2
 80064c6:	4874      	ldr	r0, [pc, #464]	; (8006698 <checkDemoModCalisma+0x240>)
 80064c8:	f002 ff86 	bl	80093d8 <HAL_GPIO_ReadPin>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d107      	bne.n	80064e2 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80064d2:	2200      	movs	r2, #0
 80064d4:	2104      	movs	r1, #4
 80064d6:	4874      	ldr	r0, [pc, #464]	; (80066a8 <checkDemoModCalisma+0x250>)
 80064d8:	f002 ff95 	bl	8009406 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80064dc:	4b73      	ldr	r3, [pc, #460]	; (80066ac <checkDemoModCalisma+0x254>)
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80064e2:	4b72      	ldr	r3, [pc, #456]	; (80066ac <checkDemoModCalisma+0x254>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <checkDemoModCalisma+0xaa>
 80064ea:	4b6d      	ldr	r3, [pc, #436]	; (80066a0 <checkDemoModCalisma+0x248>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <checkDemoModCalisma+0xaa>
 80064f2:	4b6c      	ldr	r3, [pc, #432]	; (80066a4 <checkDemoModCalisma+0x24c>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d103      	bne.n	8006502 <checkDemoModCalisma+0xaa>
 80064fa:	4b68      	ldr	r3, [pc, #416]	; (800669c <checkDemoModCalisma+0x244>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00c      	beq.n	800651c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006502:	2201      	movs	r2, #1
 8006504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006508:	4867      	ldr	r0, [pc, #412]	; (80066a8 <checkDemoModCalisma+0x250>)
 800650a:	f002 ff7c 	bl	8009406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800650e:	2201      	movs	r2, #1
 8006510:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006514:	4864      	ldr	r0, [pc, #400]	; (80066a8 <checkDemoModCalisma+0x250>)
 8006516:	f002 ff76 	bl	8009406 <HAL_GPIO_WritePin>
 800651a:	e00b      	b.n	8006534 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800651c:	2200      	movs	r2, #0
 800651e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006522:	4861      	ldr	r0, [pc, #388]	; (80066a8 <checkDemoModCalisma+0x250>)
 8006524:	f002 ff6f 	bl	8009406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006528:	2200      	movs	r2, #0
 800652a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800652e:	485e      	ldr	r0, [pc, #376]	; (80066a8 <checkDemoModCalisma+0x250>)
 8006530:	f002 ff69 	bl	8009406 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006534:	2102      	movs	r1, #2
 8006536:	4858      	ldr	r0, [pc, #352]	; (8006698 <checkDemoModCalisma+0x240>)
 8006538:	f002 ff4e 	bl	80093d8 <HAL_GPIO_ReadPin>
 800653c:	4603      	mov	r3, r0
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10d      	bne.n	800655e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006546:	4854      	ldr	r0, [pc, #336]	; (8006698 <checkDemoModCalisma+0x240>)
 8006548:	f002 ff46 	bl	80093d8 <HAL_GPIO_ReadPin>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d105      	bne.n	800655e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006552:	4b56      	ldr	r3, [pc, #344]	; (80066ac <checkDemoModCalisma+0x254>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	f083 0301 	eor.w	r3, r3, #1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800655e:	2102      	movs	r1, #2
 8006560:	484d      	ldr	r0, [pc, #308]	; (8006698 <checkDemoModCalisma+0x240>)
 8006562:	f002 ff39 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006566:	4603      	mov	r3, r0
 8006568:	2b01      	cmp	r3, #1
 800656a:	d125      	bne.n	80065b8 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800656c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006570:	4849      	ldr	r0, [pc, #292]	; (8006698 <checkDemoModCalisma+0x240>)
 8006572:	f002 ff31 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11d      	bne.n	80065b8 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800657c:	4b4b      	ldr	r3, [pc, #300]	; (80066ac <checkDemoModCalisma+0x254>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f083 0301 	eor.w	r3, r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d016      	beq.n	80065b8 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800658a:	4b44      	ldr	r3, [pc, #272]	; (800669c <checkDemoModCalisma+0x244>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f083 0301 	eor.w	r3, r3, #1
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00f      	beq.n	80065b8 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006598:	4b42      	ldr	r3, [pc, #264]	; (80066a4 <checkDemoModCalisma+0x24c>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f083 0301 	eor.w	r3, r3, #1
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80065a6:	2201      	movs	r2, #1
 80065a8:	2120      	movs	r1, #32
 80065aa:	483b      	ldr	r0, [pc, #236]	; (8006698 <checkDemoModCalisma+0x240>)
 80065ac:	f002 ff2b 	bl	8009406 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80065b0:	4b3b      	ldr	r3, [pc, #236]	; (80066a0 <checkDemoModCalisma+0x248>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	e007      	b.n	80065c8 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80065b8:	2200      	movs	r2, #0
 80065ba:	2120      	movs	r1, #32
 80065bc:	4836      	ldr	r0, [pc, #216]	; (8006698 <checkDemoModCalisma+0x240>)
 80065be:	f002 ff22 	bl	8009406 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80065c2:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <checkDemoModCalisma+0x248>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065c8:	2102      	movs	r1, #2
 80065ca:	4833      	ldr	r0, [pc, #204]	; (8006698 <checkDemoModCalisma+0x240>)
 80065cc:	f002 ff04 	bl	80093d8 <HAL_GPIO_ReadPin>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d125      	bne.n	8006622 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80065d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065da:	482f      	ldr	r0, [pc, #188]	; (8006698 <checkDemoModCalisma+0x240>)
 80065dc:	f002 fefc 	bl	80093d8 <HAL_GPIO_ReadPin>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d11d      	bne.n	8006622 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80065e6:	4b31      	ldr	r3, [pc, #196]	; (80066ac <checkDemoModCalisma+0x254>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f083 0301 	eor.w	r3, r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d016      	beq.n	8006622 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80065f4:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <checkDemoModCalisma+0x248>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f083 0301 	eor.w	r3, r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00f      	beq.n	8006622 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006602:	4b26      	ldr	r3, [pc, #152]	; (800669c <checkDemoModCalisma+0x244>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	f083 0301 	eor.w	r3, r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006610:	2201      	movs	r2, #1
 8006612:	2110      	movs	r1, #16
 8006614:	4820      	ldr	r0, [pc, #128]	; (8006698 <checkDemoModCalisma+0x240>)
 8006616:	f002 fef6 	bl	8009406 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800661a:	4b22      	ldr	r3, [pc, #136]	; (80066a4 <checkDemoModCalisma+0x24c>)
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	e007      	b.n	8006632 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006622:	2200      	movs	r2, #0
 8006624:	2110      	movs	r1, #16
 8006626:	481c      	ldr	r0, [pc, #112]	; (8006698 <checkDemoModCalisma+0x240>)
 8006628:	f002 feed 	bl	8009406 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 800662c:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <checkDemoModCalisma+0x24c>)
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006632:	2104      	movs	r1, #4
 8006634:	4818      	ldr	r0, [pc, #96]	; (8006698 <checkDemoModCalisma+0x240>)
 8006636:	f002 fecf 	bl	80093d8 <HAL_GPIO_ReadPin>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d139      	bne.n	80066b4 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006640:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <checkDemoModCalisma+0x254>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f083 0301 	eor.w	r3, r3, #1
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d032      	beq.n	80066b4 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800664e:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <checkDemoModCalisma+0x24c>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	f083 0301 	eor.w	r3, r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d02b      	beq.n	80066b4 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 800665c:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <checkDemoModCalisma+0x248>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f083 0301 	eor.w	r3, r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d024      	beq.n	80066b4 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800666a:	2201      	movs	r2, #1
 800666c:	2102      	movs	r1, #2
 800666e:	480e      	ldr	r0, [pc, #56]	; (80066a8 <checkDemoModCalisma+0x250>)
 8006670:	f002 fec9 	bl	8009406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006674:	2201      	movs	r2, #1
 8006676:	2101      	movs	r1, #1
 8006678:	480b      	ldr	r0, [pc, #44]	; (80066a8 <checkDemoModCalisma+0x250>)
 800667a:	f002 fec4 	bl	8009406 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <checkDemoModCalisma+0x244>)
 8006680:	2201      	movs	r2, #1
 8006682:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <checkDemoModCalisma+0x258>)
 8006686:	2201      	movs	r2, #1
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	e027      	b.n	80066dc <checkDemoModCalisma+0x284>
 800668c:	20000242 	.word	0x20000242
 8006690:	20000276 	.word	0x20000276
 8006694:	20000241 	.word	0x20000241
 8006698:	40011000 	.word	0x40011000
 800669c:	2000027d 	.word	0x2000027d
 80066a0:	2000027e 	.word	0x2000027e
 80066a4:	2000027f 	.word	0x2000027f
 80066a8:	40010c00 	.word	0x40010c00
 80066ac:	2000027c 	.word	0x2000027c
 80066b0:	20000262 	.word	0x20000262
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80066b4:	2104      	movs	r1, #4
 80066b6:	48a0      	ldr	r0, [pc, #640]	; (8006938 <checkDemoModCalisma+0x4e0>)
 80066b8:	f002 fe8e 	bl	80093d8 <HAL_GPIO_ReadPin>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10c      	bne.n	80066dc <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80066c2:	2200      	movs	r2, #0
 80066c4:	2102      	movs	r1, #2
 80066c6:	489d      	ldr	r0, [pc, #628]	; (800693c <checkDemoModCalisma+0x4e4>)
 80066c8:	f002 fe9d 	bl	8009406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066cc:	2200      	movs	r2, #0
 80066ce:	2101      	movs	r1, #1
 80066d0:	489a      	ldr	r0, [pc, #616]	; (800693c <checkDemoModCalisma+0x4e4>)
 80066d2:	f002 fe98 	bl	8009406 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80066d6:	4b9a      	ldr	r3, [pc, #616]	; (8006940 <checkDemoModCalisma+0x4e8>)
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80066dc:	2104      	movs	r1, #4
 80066de:	4896      	ldr	r0, [pc, #600]	; (8006938 <checkDemoModCalisma+0x4e0>)
 80066e0:	f002 fe7a 	bl	80093d8 <HAL_GPIO_ReadPin>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10d      	bne.n	8006706 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80066ea:	2201      	movs	r2, #1
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	4895      	ldr	r0, [pc, #596]	; (8006944 <checkDemoModCalisma+0x4ec>)
 80066f0:	f002 fe89 	bl	8009406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80066f4:	2201      	movs	r2, #1
 80066f6:	2120      	movs	r1, #32
 80066f8:	4892      	ldr	r0, [pc, #584]	; (8006944 <checkDemoModCalisma+0x4ec>)
 80066fa:	f002 fe84 	bl	8009406 <HAL_GPIO_WritePin>
			timer3 = millis;
 80066fe:	4b92      	ldr	r3, [pc, #584]	; (8006948 <checkDemoModCalisma+0x4f0>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a92      	ldr	r2, [pc, #584]	; (800694c <checkDemoModCalisma+0x4f4>)
 8006704:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006706:	4b90      	ldr	r3, [pc, #576]	; (8006948 <checkDemoModCalisma+0x4f0>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4b90      	ldr	r3, [pc, #576]	; (800694c <checkDemoModCalisma+0x4f4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b04      	cmp	r3, #4
 8006712:	d909      	bls.n	8006728 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006714:	2200      	movs	r2, #0
 8006716:	2180      	movs	r1, #128	; 0x80
 8006718:	488a      	ldr	r0, [pc, #552]	; (8006944 <checkDemoModCalisma+0x4ec>)
 800671a:	f002 fe74 	bl	8009406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800671e:	2200      	movs	r2, #0
 8006720:	2120      	movs	r1, #32
 8006722:	4888      	ldr	r0, [pc, #544]	; (8006944 <checkDemoModCalisma+0x4ec>)
 8006724:	f002 fe6f 	bl	8009406 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006728:	2102      	movs	r1, #2
 800672a:	4883      	ldr	r0, [pc, #524]	; (8006938 <checkDemoModCalisma+0x4e0>)
 800672c:	f002 fe54 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006730:	4603      	mov	r3, r0
 8006732:	2b01      	cmp	r3, #1
 8006734:	d108      	bne.n	8006748 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006736:	2201      	movs	r2, #1
 8006738:	2140      	movs	r1, #64	; 0x40
 800673a:	4882      	ldr	r0, [pc, #520]	; (8006944 <checkDemoModCalisma+0x4ec>)
 800673c:	f002 fe63 	bl	8009406 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006740:	4b81      	ldr	r3, [pc, #516]	; (8006948 <checkDemoModCalisma+0x4f0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a81      	ldr	r2, [pc, #516]	; (800694c <checkDemoModCalisma+0x4f4>)
 8006746:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006748:	4b7f      	ldr	r3, [pc, #508]	; (8006948 <checkDemoModCalisma+0x4f0>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4b7f      	ldr	r3, [pc, #508]	; (800694c <checkDemoModCalisma+0x4f4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b04      	cmp	r3, #4
 8006754:	d904      	bls.n	8006760 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006756:	2200      	movs	r2, #0
 8006758:	2140      	movs	r1, #64	; 0x40
 800675a:	487a      	ldr	r0, [pc, #488]	; (8006944 <checkDemoModCalisma+0x4ec>)
 800675c:	f002 fe53 	bl	8009406 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006760:	4b7b      	ldr	r3, [pc, #492]	; (8006950 <checkDemoModCalisma+0x4f8>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d058      	beq.n	800681a <checkDemoModCalisma+0x3c2>
 8006768:	4b7a      	ldr	r3, [pc, #488]	; (8006954 <checkDemoModCalisma+0x4fc>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d054      	beq.n	800681a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006770:	4b79      	ldr	r3, [pc, #484]	; (8006958 <checkDemoModCalisma+0x500>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	4b77      	ldr	r3, [pc, #476]	; (8006958 <checkDemoModCalisma+0x500>)
 800677a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800677c:	4b76      	ldr	r3, [pc, #472]	; (8006958 <checkDemoModCalisma+0x500>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b09      	cmp	r3, #9
 8006782:	d908      	bls.n	8006796 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006784:	4b74      	ldr	r3, [pc, #464]	; (8006958 <checkDemoModCalisma+0x500>)
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800678a:	4b74      	ldr	r3, [pc, #464]	; (800695c <checkDemoModCalisma+0x504>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	3301      	adds	r3, #1
 8006790:	b2da      	uxtb	r2, r3
 8006792:	4b72      	ldr	r3, [pc, #456]	; (800695c <checkDemoModCalisma+0x504>)
 8006794:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006796:	4b71      	ldr	r3, [pc, #452]	; (800695c <checkDemoModCalisma+0x504>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b09      	cmp	r3, #9
 800679c:	d908      	bls.n	80067b0 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800679e:	4b6f      	ldr	r3, [pc, #444]	; (800695c <checkDemoModCalisma+0x504>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80067a4:	4b6e      	ldr	r3, [pc, #440]	; (8006960 <checkDemoModCalisma+0x508>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	4b6c      	ldr	r3, [pc, #432]	; (8006960 <checkDemoModCalisma+0x508>)
 80067ae:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80067b0:	4b6b      	ldr	r3, [pc, #428]	; (8006960 <checkDemoModCalisma+0x508>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b09      	cmp	r3, #9
 80067b6:	d908      	bls.n	80067ca <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80067b8:	4b69      	ldr	r3, [pc, #420]	; (8006960 <checkDemoModCalisma+0x508>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80067be:	4b69      	ldr	r3, [pc, #420]	; (8006964 <checkDemoModCalisma+0x50c>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	4b67      	ldr	r3, [pc, #412]	; (8006964 <checkDemoModCalisma+0x50c>)
 80067c8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80067ca:	4b66      	ldr	r3, [pc, #408]	; (8006964 <checkDemoModCalisma+0x50c>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b09      	cmp	r3, #9
 80067d0:	d908      	bls.n	80067e4 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80067d2:	4b64      	ldr	r3, [pc, #400]	; (8006964 <checkDemoModCalisma+0x50c>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80067d8:	4b63      	ldr	r3, [pc, #396]	; (8006968 <checkDemoModCalisma+0x510>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	4b61      	ldr	r3, [pc, #388]	; (8006968 <checkDemoModCalisma+0x510>)
 80067e2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80067e4:	4b60      	ldr	r3, [pc, #384]	; (8006968 <checkDemoModCalisma+0x510>)
 80067e6:	781a      	ldrb	r2, [r3, #0]
 80067e8:	4b60      	ldr	r3, [pc, #384]	; (800696c <checkDemoModCalisma+0x514>)
 80067ea:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80067ee:	4b5d      	ldr	r3, [pc, #372]	; (8006964 <checkDemoModCalisma+0x50c>)
 80067f0:	781a      	ldrb	r2, [r3, #0]
 80067f2:	4b5e      	ldr	r3, [pc, #376]	; (800696c <checkDemoModCalisma+0x514>)
 80067f4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80067f6:	4b5a      	ldr	r3, [pc, #360]	; (8006960 <checkDemoModCalisma+0x508>)
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	4b5c      	ldr	r3, [pc, #368]	; (800696c <checkDemoModCalisma+0x514>)
 80067fc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80067fe:	4b57      	ldr	r3, [pc, #348]	; (800695c <checkDemoModCalisma+0x504>)
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	4b5a      	ldr	r3, [pc, #360]	; (800696c <checkDemoModCalisma+0x514>)
 8006804:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006806:	4b54      	ldr	r3, [pc, #336]	; (8006958 <checkDemoModCalisma+0x500>)
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	4b58      	ldr	r3, [pc, #352]	; (800696c <checkDemoModCalisma+0x514>)
 800680c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800680e:	4b58      	ldr	r3, [pc, #352]	; (8006970 <checkDemoModCalisma+0x518>)
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006814:	4b4f      	ldr	r3, [pc, #316]	; (8006954 <checkDemoModCalisma+0x4fc>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800681a:	4b56      	ldr	r3, [pc, #344]	; (8006974 <checkDemoModCalisma+0x51c>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 8087 	bne.w	8006932 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006824:	4a54      	ldr	r2, [pc, #336]	; (8006978 <checkDemoModCalisma+0x520>)
 8006826:	2101      	movs	r1, #1
 8006828:	2002      	movs	r0, #2
 800682a:	f001 faaf 	bl	8007d8c <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800682e:	4a53      	ldr	r2, [pc, #332]	; (800697c <checkDemoModCalisma+0x524>)
 8006830:	2101      	movs	r1, #1
 8006832:	2001      	movs	r0, #1
 8006834:	f001 faaa 	bl	8007d8c <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006838:	4b4b      	ldr	r3, [pc, #300]	; (8006968 <checkDemoModCalisma+0x510>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	220a      	movs	r2, #10
 800683e:	4950      	ldr	r1, [pc, #320]	; (8006980 <checkDemoModCalisma+0x528>)
 8006840:	4618      	mov	r0, r3
 8006842:	f005 fdf5 	bl	800c430 <itoa>
			lcd_print(2,12,snum);
 8006846:	4a4e      	ldr	r2, [pc, #312]	; (8006980 <checkDemoModCalisma+0x528>)
 8006848:	210c      	movs	r1, #12
 800684a:	2002      	movs	r0, #2
 800684c:	f001 fa9e 	bl	8007d8c <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006850:	4b44      	ldr	r3, [pc, #272]	; (8006964 <checkDemoModCalisma+0x50c>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	220a      	movs	r2, #10
 8006856:	494a      	ldr	r1, [pc, #296]	; (8006980 <checkDemoModCalisma+0x528>)
 8006858:	4618      	mov	r0, r3
 800685a:	f005 fde9 	bl	800c430 <itoa>
			lcd_print(2,13,snum);
 800685e:	4a48      	ldr	r2, [pc, #288]	; (8006980 <checkDemoModCalisma+0x528>)
 8006860:	210d      	movs	r1, #13
 8006862:	2002      	movs	r0, #2
 8006864:	f001 fa92 	bl	8007d8c <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006868:	4b3d      	ldr	r3, [pc, #244]	; (8006960 <checkDemoModCalisma+0x508>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	220a      	movs	r2, #10
 800686e:	4944      	ldr	r1, [pc, #272]	; (8006980 <checkDemoModCalisma+0x528>)
 8006870:	4618      	mov	r0, r3
 8006872:	f005 fddd 	bl	800c430 <itoa>
			lcd_print(2,14,snum);
 8006876:	4a42      	ldr	r2, [pc, #264]	; (8006980 <checkDemoModCalisma+0x528>)
 8006878:	210e      	movs	r1, #14
 800687a:	2002      	movs	r0, #2
 800687c:	f001 fa86 	bl	8007d8c <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006880:	4b36      	ldr	r3, [pc, #216]	; (800695c <checkDemoModCalisma+0x504>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	220a      	movs	r2, #10
 8006886:	493e      	ldr	r1, [pc, #248]	; (8006980 <checkDemoModCalisma+0x528>)
 8006888:	4618      	mov	r0, r3
 800688a:	f005 fdd1 	bl	800c430 <itoa>
			lcd_print(2,15,snum);
 800688e:	4a3c      	ldr	r2, [pc, #240]	; (8006980 <checkDemoModCalisma+0x528>)
 8006890:	210f      	movs	r1, #15
 8006892:	2002      	movs	r0, #2
 8006894:	f001 fa7a 	bl	8007d8c <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006898:	4b2f      	ldr	r3, [pc, #188]	; (8006958 <checkDemoModCalisma+0x500>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	220a      	movs	r2, #10
 800689e:	4938      	ldr	r1, [pc, #224]	; (8006980 <checkDemoModCalisma+0x528>)
 80068a0:	4618      	mov	r0, r3
 80068a2:	f005 fdc5 	bl	800c430 <itoa>
			lcd_print(2,16,snum);
 80068a6:	4a36      	ldr	r2, [pc, #216]	; (8006980 <checkDemoModCalisma+0x528>)
 80068a8:	2110      	movs	r1, #16
 80068aa:	2002      	movs	r0, #2
 80068ac:	f001 fa6e 	bl	8007d8c <lcd_print>
			mesajYazildi=1;
 80068b0:	4b34      	ldr	r3, [pc, #208]	; (8006984 <checkDemoModCalisma+0x52c>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80068b6:	e03c      	b.n	8006932 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80068b8:	4b33      	ldr	r3, [pc, #204]	; (8006988 <checkDemoModCalisma+0x530>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d003      	beq.n	80068c8 <checkDemoModCalisma+0x470>
 80068c0:	4b2c      	ldr	r3, [pc, #176]	; (8006974 <checkDemoModCalisma+0x51c>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d134      	bne.n	8006932 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80068c8:	2200      	movs	r2, #0
 80068ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068ce:	481b      	ldr	r0, [pc, #108]	; (800693c <checkDemoModCalisma+0x4e4>)
 80068d0:	f002 fd99 	bl	8009406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80068d4:	2200      	movs	r2, #0
 80068d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068da:	4818      	ldr	r0, [pc, #96]	; (800693c <checkDemoModCalisma+0x4e4>)
 80068dc:	f002 fd93 	bl	8009406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80068e0:	2200      	movs	r2, #0
 80068e2:	2104      	movs	r1, #4
 80068e4:	4815      	ldr	r0, [pc, #84]	; (800693c <checkDemoModCalisma+0x4e4>)
 80068e6:	f002 fd8e 	bl	8009406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80068ea:	2200      	movs	r2, #0
 80068ec:	2102      	movs	r1, #2
 80068ee:	4813      	ldr	r0, [pc, #76]	; (800693c <checkDemoModCalisma+0x4e4>)
 80068f0:	f002 fd89 	bl	8009406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80068f4:	2200      	movs	r2, #0
 80068f6:	2101      	movs	r1, #1
 80068f8:	4810      	ldr	r0, [pc, #64]	; (800693c <checkDemoModCalisma+0x4e4>)
 80068fa:	f002 fd84 	bl	8009406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80068fe:	2200      	movs	r2, #0
 8006900:	2120      	movs	r1, #32
 8006902:	480d      	ldr	r0, [pc, #52]	; (8006938 <checkDemoModCalisma+0x4e0>)
 8006904:	f002 fd7f 	bl	8009406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006908:	2200      	movs	r2, #0
 800690a:	2110      	movs	r1, #16
 800690c:	480a      	ldr	r0, [pc, #40]	; (8006938 <checkDemoModCalisma+0x4e0>)
 800690e:	f002 fd7a 	bl	8009406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006912:	2200      	movs	r2, #0
 8006914:	2180      	movs	r1, #128	; 0x80
 8006916:	480b      	ldr	r0, [pc, #44]	; (8006944 <checkDemoModCalisma+0x4ec>)
 8006918:	f002 fd75 	bl	8009406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800691c:	2200      	movs	r2, #0
 800691e:	2140      	movs	r1, #64	; 0x40
 8006920:	4808      	ldr	r0, [pc, #32]	; (8006944 <checkDemoModCalisma+0x4ec>)
 8006922:	f002 fd70 	bl	8009406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006926:	2200      	movs	r2, #0
 8006928:	2120      	movs	r1, #32
 800692a:	4806      	ldr	r0, [pc, #24]	; (8006944 <checkDemoModCalisma+0x4ec>)
 800692c:	f002 fd6b 	bl	8009406 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006930:	e7ff      	b.n	8006932 <checkDemoModCalisma+0x4da>
 8006932:	bf00      	nop
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40011000 	.word	0x40011000
 800693c:	40010c00 	.word	0x40010c00
 8006940:	2000027d 	.word	0x2000027d
 8006944:	40010800 	.word	0x40010800
 8006948:	20000200 	.word	0x20000200
 800694c:	20000210 	.word	0x20000210
 8006950:	2000027c 	.word	0x2000027c
 8006954:	20000262 	.word	0x20000262
 8006958:	20000221 	.word	0x20000221
 800695c:	20000222 	.word	0x20000222
 8006960:	20000008 	.word	0x20000008
 8006964:	20000009 	.word	0x20000009
 8006968:	20000223 	.word	0x20000223
 800696c:	20000128 	.word	0x20000128
 8006970:	20000250 	.word	0x20000250
 8006974:	20000241 	.word	0x20000241
 8006978:	0800dbf0 	.word	0x0800dbf0
 800697c:	0800dbfc 	.word	0x0800dbfc
 8006980:	20000198 	.word	0x20000198
 8006984:	20000258 	.word	0x20000258
 8006988:	20000242 	.word	0x20000242

0800698c <mainLoop>:

void mainLoop() {
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006992:	f7fe f923 	bl	8004bdc <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006996:	2101      	movs	r1, #1
 8006998:	48ac      	ldr	r0, [pc, #688]	; (8006c4c <mainLoop+0x2c0>)
 800699a:	f002 fd1d 	bl	80093d8 <HAL_GPIO_ReadPin>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d136      	bne.n	8006a12 <mainLoop+0x86>
 80069a4:	2108      	movs	r1, #8
 80069a6:	48aa      	ldr	r0, [pc, #680]	; (8006c50 <mainLoop+0x2c4>)
 80069a8:	f002 fd16 	bl	80093d8 <HAL_GPIO_ReadPin>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d12f      	bne.n	8006a12 <mainLoop+0x86>
 80069b2:	2102      	movs	r1, #2
 80069b4:	48a5      	ldr	r0, [pc, #660]	; (8006c4c <mainLoop+0x2c0>)
 80069b6:	f002 fd0f 	bl	80093d8 <HAL_GPIO_ReadPin>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d128      	bne.n	8006a12 <mainLoop+0x86>
 80069c0:	2104      	movs	r1, #4
 80069c2:	48a2      	ldr	r0, [pc, #648]	; (8006c4c <mainLoop+0x2c0>)
 80069c4:	f002 fd08 	bl	80093d8 <HAL_GPIO_ReadPin>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d121      	bne.n	8006a12 <mainLoop+0x86>
 80069ce:	2108      	movs	r1, #8
 80069d0:	489e      	ldr	r0, [pc, #632]	; (8006c4c <mainLoop+0x2c0>)
 80069d2:	f002 fd01 	bl	80093d8 <HAL_GPIO_ReadPin>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d11a      	bne.n	8006a12 <mainLoop+0x86>
 80069dc:	2180      	movs	r1, #128	; 0x80
 80069de:	489c      	ldr	r0, [pc, #624]	; (8006c50 <mainLoop+0x2c4>)
 80069e0:	f002 fcfa 	bl	80093d8 <HAL_GPIO_ReadPin>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d113      	bne.n	8006a12 <mainLoop+0x86>
 80069ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069ee:	4898      	ldr	r0, [pc, #608]	; (8006c50 <mainLoop+0x2c4>)
 80069f0:	f002 fcf2 	bl	80093d8 <HAL_GPIO_ReadPin>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d10b      	bne.n	8006a12 <mainLoop+0x86>
 80069fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069fe:	4894      	ldr	r0, [pc, #592]	; (8006c50 <mainLoop+0x2c4>)
 8006a00:	f002 fcea 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d103      	bne.n	8006a12 <mainLoop+0x86>
			butonKontrol=0;
 8006a0a:	4b92      	ldr	r3, [pc, #584]	; (8006c54 <mainLoop+0x2c8>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	e003      	b.n	8006a1a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006a12:	4b91      	ldr	r3, [pc, #580]	; (8006c58 <mainLoop+0x2cc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a91      	ldr	r2, [pc, #580]	; (8006c5c <mainLoop+0x2d0>)
 8006a18:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a1a:	4b91      	ldr	r3, [pc, #580]	; (8006c60 <mainLoop+0x2d4>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d03a      	beq.n	8006a98 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a22:	bf00      	nop
 8006a24:	488f      	ldr	r0, [pc, #572]	; (8006c64 <mainLoop+0x2d8>)
 8006a26:	f003 fb00 	bl	800a02a <HAL_I2C_GetError>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d0f9      	beq.n	8006a24 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006a30:	bf00      	nop
 8006a32:	488c      	ldr	r0, [pc, #560]	; (8006c64 <mainLoop+0x2d8>)
 8006a34:	f003 faec 	bl	800a010 <HAL_I2C_GetState>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d1f9      	bne.n	8006a32 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006a3e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a42:	9302      	str	r3, [sp, #8]
 8006a44:	236e      	movs	r3, #110	; 0x6e
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	4b87      	ldr	r3, [pc, #540]	; (8006c68 <mainLoop+0x2dc>)
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	236e      	movs	r3, #110	; 0x6e
 8006a4e:	2200      	movs	r2, #0
 8006a50:	21a0      	movs	r1, #160	; 0xa0
 8006a52:	4884      	ldr	r0, [pc, #528]	; (8006c64 <mainLoop+0x2d8>)
 8006a54:	f002 ff7a 	bl	800994c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006a58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a5c:	f001 feec 	bl	8008838 <HAL_Delay>

		  hafizaYaz=0;
 8006a60:	4b7f      	ldr	r3, [pc, #508]	; (8006c60 <mainLoop+0x2d4>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006a66:	4b81      	ldr	r3, [pc, #516]	; (8006c6c <mainLoop+0x2e0>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006a6e:	4a80      	ldr	r2, [pc, #512]	; (8006c70 <mainLoop+0x2e4>)
 8006a70:	2101      	movs	r1, #1
 8006a72:	2002      	movs	r0, #2
 8006a74:	f001 f98a 	bl	8007d8c <lcd_print>
 8006a78:	e008      	b.n	8006a8c <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006a7a:	4b7c      	ldr	r3, [pc, #496]	; (8006c6c <mainLoop+0x2e0>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d104      	bne.n	8006a8c <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006a82:	4a7c      	ldr	r2, [pc, #496]	; (8006c74 <mainLoop+0x2e8>)
 8006a84:	2101      	movs	r1, #1
 8006a86:	2002      	movs	r0, #2
 8006a88:	f001 f980 	bl	8007d8c <lcd_print>
		  }

		  HAL_Delay(1000);
 8006a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a90:	f001 fed2 	bl	8008838 <HAL_Delay>
		  lcd_clear();
 8006a94:	f001 f9a6 	bl	8007de4 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006a98:	4b77      	ldr	r3, [pc, #476]	; (8006c78 <mainLoop+0x2ec>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f083 0301 	eor.w	r3, r3, #1
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d06e      	beq.n	8006b84 <mainLoop+0x1f8>
 8006aa6:	486f      	ldr	r0, [pc, #444]	; (8006c64 <mainLoop+0x2d8>)
 8006aa8:	f003 fab2 	bl	800a010 <HAL_I2C_GetState>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d168      	bne.n	8006b84 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8006ab2:	4b72      	ldr	r3, [pc, #456]	; (8006c7c <mainLoop+0x2f0>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	f083 0301 	eor.w	r3, r3, #1
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d044      	beq.n	8006b4a <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006ac0:	4a6f      	ldr	r2, [pc, #444]	; (8006c80 <mainLoop+0x2f4>)
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	f001 f961 	bl	8007d8c <lcd_print>
			  if(dilSecim==0) {
 8006aca:	4b68      	ldr	r3, [pc, #416]	; (8006c6c <mainLoop+0x2e0>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d105      	bne.n	8006ade <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006ad2:	4a6c      	ldr	r2, [pc, #432]	; (8006c84 <mainLoop+0x2f8>)
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	2002      	movs	r0, #2
 8006ad8:	f001 f958 	bl	8007d8c <lcd_print>
 8006adc:	e008      	b.n	8006af0 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006ade:	4b63      	ldr	r3, [pc, #396]	; (8006c6c <mainLoop+0x2e0>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d104      	bne.n	8006af0 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006ae6:	4a68      	ldr	r2, [pc, #416]	; (8006c88 <mainLoop+0x2fc>)
 8006ae8:	2101      	movs	r1, #1
 8006aea:	2002      	movs	r0, #2
 8006aec:	f001 f94e 	bl	8007d8c <lcd_print>
			  }
			  HAL_Delay(1000);
 8006af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006af4:	f001 fea0 	bl	8008838 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006af8:	bf00      	nop
 8006afa:	485a      	ldr	r0, [pc, #360]	; (8006c64 <mainLoop+0x2d8>)
 8006afc:	f003 fa95 	bl	800a02a <HAL_I2C_GetError>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d0f9      	beq.n	8006afa <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b06:	e003      	b.n	8006b10 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b0c:	f001 fe94 	bl	8008838 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b10:	4854      	ldr	r0, [pc, #336]	; (8006c64 <mainLoop+0x2d8>)
 8006b12:	f003 fa7d 	bl	800a010 <HAL_I2C_GetState>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d1f5      	bne.n	8006b08 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006b1c:	4b53      	ldr	r3, [pc, #332]	; (8006c6c <mainLoop+0x2e0>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006b24:	4a59      	ldr	r2, [pc, #356]	; (8006c8c <mainLoop+0x300>)
 8006b26:	2101      	movs	r1, #1
 8006b28:	2002      	movs	r0, #2
 8006b2a:	f001 f92f 	bl	8007d8c <lcd_print>
 8006b2e:	e008      	b.n	8006b42 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006b30:	4b4e      	ldr	r3, [pc, #312]	; (8006c6c <mainLoop+0x2e0>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d104      	bne.n	8006b42 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006b38:	4a55      	ldr	r2, [pc, #340]	; (8006c90 <mainLoop+0x304>)
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	2002      	movs	r0, #2
 8006b3e:	f001 f925 	bl	8007d8c <lcd_print>
			  }

			  ilkOkuma=1;
 8006b42:	4b4e      	ldr	r3, [pc, #312]	; (8006c7c <mainLoop+0x2f0>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	e014      	b.n	8006b74 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006b4a:	4b48      	ldr	r3, [pc, #288]	; (8006c6c <mainLoop+0x2e0>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d105      	bne.n	8006b5e <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006b52:	4a50      	ldr	r2, [pc, #320]	; (8006c94 <mainLoop+0x308>)
 8006b54:	2101      	movs	r1, #1
 8006b56:	2002      	movs	r0, #2
 8006b58:	f001 f918 	bl	8007d8c <lcd_print>
 8006b5c:	e008      	b.n	8006b70 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006b5e:	4b43      	ldr	r3, [pc, #268]	; (8006c6c <mainLoop+0x2e0>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d104      	bne.n	8006b70 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006b66:	4a4c      	ldr	r2, [pc, #304]	; (8006c98 <mainLoop+0x30c>)
 8006b68:	2101      	movs	r1, #1
 8006b6a:	2002      	movs	r0, #2
 8006b6c:	f001 f90e 	bl	8007d8c <lcd_print>
			  }
			  lcd_clear();
 8006b70:	f001 f938 	bl	8007de4 <lcd_clear>
		  }

		  lcd_clear();
 8006b74:	f001 f936 	bl	8007de4 <lcd_clear>

		  eepromKontrol(1);
 8006b78:	2001      	movs	r0, #1
 8006b7a:	f7f9 fb5b 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006b7e:	4b3e      	ldr	r3, [pc, #248]	; (8006c78 <mainLoop+0x2ec>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006b84:	4b45      	ldr	r3, [pc, #276]	; (8006c9c <mainLoop+0x310>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d11c      	bne.n	8006bc6 <mainLoop+0x23a>
 8006b8c:	4b44      	ldr	r3, [pc, #272]	; (8006ca0 <mainLoop+0x314>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f083 0301 	eor.w	r3, r3, #1
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d015      	beq.n	8006bc6 <mainLoop+0x23a>
 8006b9a:	4b42      	ldr	r3, [pc, #264]	; (8006ca4 <mainLoop+0x318>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d111      	bne.n	8006bc6 <mainLoop+0x23a>
			lcd_clear();
 8006ba2:	f001 f91f 	bl	8007de4 <lcd_clear>
			HAL_Delay(10);
 8006ba6:	200a      	movs	r0, #10
 8006ba8:	f001 fe46 	bl	8008838 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006bac:	4a3e      	ldr	r2, [pc, #248]	; (8006ca8 <mainLoop+0x31c>)
 8006bae:	2101      	movs	r1, #1
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	f001 f8eb 	bl	8007d8c <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006bb6:	4a3d      	ldr	r2, [pc, #244]	; (8006cac <mainLoop+0x320>)
 8006bb8:	2101      	movs	r1, #1
 8006bba:	2002      	movs	r0, #2
 8006bbc:	f001 f8e6 	bl	8007d8c <lcd_print>
			mesajYazildi=1;
 8006bc0:	4b37      	ldr	r3, [pc, #220]	; (8006ca0 <mainLoop+0x314>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006bc6:	4b35      	ldr	r3, [pc, #212]	; (8006c9c <mainLoop+0x310>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d112      	bne.n	8006bf4 <mainLoop+0x268>
 8006bce:	2102      	movs	r1, #2
 8006bd0:	481e      	ldr	r0, [pc, #120]	; (8006c4c <mainLoop+0x2c0>)
 8006bd2:	f002 fc01 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d10b      	bne.n	8006bf4 <mainLoop+0x268>
 8006bdc:	2104      	movs	r1, #4
 8006bde:	481b      	ldr	r0, [pc, #108]	; (8006c4c <mainLoop+0x2c0>)
 8006be0:	f002 fbfa 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d104      	bne.n	8006bf4 <mainLoop+0x268>
			menuGiris=1;
 8006bea:	4b2c      	ldr	r3, [pc, #176]	; (8006c9c <mainLoop+0x310>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006bf0:	f001 f8f8 	bl	8007de4 <lcd_clear>
		}

		if(menuGiris==1) {
 8006bf4:	4b29      	ldr	r3, [pc, #164]	; (8006c9c <mainLoop+0x310>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <mainLoop+0x274>
			menu();
 8006bfc:	f7fa fba8 	bl	8001350 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c04:	4812      	ldr	r0, [pc, #72]	; (8006c50 <mainLoop+0x2c4>)
 8006c06:	f002 fc16 	bl	8009436 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c0e:	4828      	ldr	r0, [pc, #160]	; (8006cb0 <mainLoop+0x324>)
 8006c10:	f002 fbe2 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <mainLoop+0x2a4>
 8006c1a:	4b26      	ldr	r3, [pc, #152]	; (8006cb4 <mainLoop+0x328>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	f083 0301 	eor.w	r3, r3, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <mainLoop+0x2a4>
			stopVar=1;
 8006c28:	4b23      	ldr	r3, [pc, #140]	; (8006cb8 <mainLoop+0x32c>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	e002      	b.n	8006c36 <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8006c30:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <mainLoop+0x32c>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c36:	f7fd ffe7 	bl	8004c08 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c3a:	f7fe f819 	bl	8004c70 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c3e:	f7fe f85d 	bl	8004cfc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c42:	f7fe f8ad 	bl	8004da0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c46:	f7ff fc07 	bl	8006458 <checkDemoModCalisma>
		checkLCDBacklight();
 8006c4a:	e6a2      	b.n	8006992 <mainLoop+0x6>
 8006c4c:	40010800 	.word	0x40010800
 8006c50:	40011000 	.word	0x40011000
 8006c54:	20000253 	.word	0x20000253
 8006c58:	20000200 	.word	0x20000200
 8006c5c:	2000021c 	.word	0x2000021c
 8006c60:	20000250 	.word	0x20000250
 8006c64:	200003ac 	.word	0x200003ac
 8006c68:	20000128 	.word	0x20000128
 8006c6c:	20000245 	.word	0x20000245
 8006c70:	0800dc10 	.word	0x0800dc10
 8006c74:	0800dc24 	.word	0x0800dc24
 8006c78:	20000251 	.word	0x20000251
 8006c7c:	20000252 	.word	0x20000252
 8006c80:	0800dc38 	.word	0x0800dc38
 8006c84:	0800dc4c 	.word	0x0800dc4c
 8006c88:	0800dc60 	.word	0x0800dc60
 8006c8c:	0800dc74 	.word	0x0800dc74
 8006c90:	0800dc88 	.word	0x0800dc88
 8006c94:	0800dc9c 	.word	0x0800dc9c
 8006c98:	0800dcb0 	.word	0x0800dcb0
 8006c9c:	20000241 	.word	0x20000241
 8006ca0:	20000258 	.word	0x20000258
 8006ca4:	20000242 	.word	0x20000242
 8006ca8:	0800dcc4 	.word	0x0800dcc4
 8006cac:	0800dcd8 	.word	0x0800dcd8
 8006cb0:	40010c00 	.word	0x40010c00
 8006cb4:	20000279 	.word	0x20000279
 8006cb8:	20000276 	.word	0x20000276

08006cbc <takeMachineID>:
#include "main.h"
#include "GlobalVariables.h"
#include "ESP8266.h"
#include "i2c-lcd.h"

void takeMachineID(int state) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	; 0x28
 8006cc0:	af04      	add	r7, sp, #16
 8006cc2:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	f001 f8bf 	bl	8007e48 <lcd_cursor>

    int cursorPosition = 3;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8006cd2:	2305      	movs	r3, #5
 8006cd4:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8006cdc:	220c      	movs	r2, #12
 8006cde:	2100      	movs	r1, #0
 8006ce0:	48a0      	ldr	r0, [pc, #640]	; (8006f64 <takeMachineID+0x2a8>)
 8006ce2:	f005 fccc 	bl	800c67e <memset>
    }
    HAL_Delay(100);
 8006ce6:	2064      	movs	r0, #100	; 0x64
 8006ce8:	f001 fda6 	bl	8008838 <HAL_Delay>

    printTemplate(1, 0);
 8006cec:	2100      	movs	r1, #0
 8006cee:	2001      	movs	r0, #1
 8006cf0:	f7fa f8c8 	bl	8000e84 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006cf4:	2108      	movs	r1, #8
 8006cf6:	489c      	ldr	r0, [pc, #624]	; (8006f68 <takeMachineID+0x2ac>)
 8006cf8:	f002 fb6e 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d146      	bne.n	8006d90 <takeMachineID+0xd4>
        	lcd_cursor(0);
 8006d02:	2000      	movs	r0, #0
 8006d04:	f001 f8a0 	bl	8007e48 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006d08:	4b96      	ldr	r3, [pc, #600]	; (8006f64 <takeMachineID+0x2a8>)
 8006d0a:	7adb      	ldrb	r3, [r3, #11]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d11f      	bne.n	8006d50 <takeMachineID+0x94>
        		lcd_clear();
 8006d10:	f001 f868 	bl	8007de4 <lcd_clear>
        		if(dilSecim == 0) {
 8006d14:	4b95      	ldr	r3, [pc, #596]	; (8006f6c <takeMachineID+0x2b0>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <takeMachineID+0x76>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8006d1c:	4a94      	ldr	r2, [pc, #592]	; (8006f70 <takeMachineID+0x2b4>)
 8006d1e:	2101      	movs	r1, #1
 8006d20:	2001      	movs	r0, #1
 8006d22:	f001 f833 	bl	8007d8c <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006d26:	4a93      	ldr	r2, [pc, #588]	; (8006f74 <takeMachineID+0x2b8>)
 8006d28:	2101      	movs	r1, #1
 8006d2a:	2002      	movs	r0, #2
 8006d2c:	f001 f82e 	bl	8007d8c <lcd_print>
 8006d30:	e009      	b.n	8006d46 <takeMachineID+0x8a>
        		} else {
        			lcd_print(1, 1, "MACHINE ID MUST");
 8006d32:	4a91      	ldr	r2, [pc, #580]	; (8006f78 <takeMachineID+0x2bc>)
 8006d34:	2101      	movs	r1, #1
 8006d36:	2001      	movs	r0, #1
 8006d38:	f001 f828 	bl	8007d8c <lcd_print>
        			lcd_print(2, 1, "BE 12 CHARACTERS");
 8006d3c:	4a8f      	ldr	r2, [pc, #572]	; (8006f7c <takeMachineID+0x2c0>)
 8006d3e:	2101      	movs	r1, #1
 8006d40:	2002      	movs	r0, #2
 8006d42:	f001 f823 	bl	8007d8c <lcd_print>
        		}
        		HAL_Delay(1200);
 8006d46:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d4a:	f001 fd75 	bl	8008838 <HAL_Delay>
        		goto mainSection;
 8006d4e:	e7b9      	b.n	8006cc4 <takeMachineID+0x8>
        		} else {
        			setupCompleted = 1;
        		}
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, machineIDCharacterLimit);
 8006d50:	4b8b      	ldr	r3, [pc, #556]	; (8006f80 <takeMachineID+0x2c4>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a8b      	ldr	r2, [pc, #556]	; (8006f84 <takeMachineID+0x2c8>)
 8006d56:	4413      	add	r3, r2
 8006d58:	4a82      	ldr	r2, [pc, #520]	; (8006f64 <takeMachineID+0x2a8>)
 8006d5a:	6810      	ldr	r0, [r2, #0]
 8006d5c:	6851      	ldr	r1, [r2, #4]
 8006d5e:	6892      	ldr	r2, [r2, #8]
 8006d60:	6018      	str	r0, [r3, #0]
 8006d62:	6059      	str	r1, [r3, #4]
 8006d64:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006d66:	20c8      	movs	r0, #200	; 0xc8
 8006d68:	f001 fd66 	bl	8008838 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d6c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d70:	9302      	str	r3, [sp, #8]
 8006d72:	236e      	movs	r3, #110	; 0x6e
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	4b83      	ldr	r3, [pc, #524]	; (8006f84 <takeMachineID+0x2c8>)
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	236e      	movs	r3, #110	; 0x6e
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	21a0      	movs	r1, #160	; 0xa0
 8006d80:	4881      	ldr	r0, [pc, #516]	; (8006f88 <takeMachineID+0x2cc>)
 8006d82:	f002 fde3 	bl	800994c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006d86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d8a:	f001 fd55 	bl	8008838 <HAL_Delay>

            break;
 8006d8e:	e0e5      	b.n	8006f5c <takeMachineID+0x2a0>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006d90:	2101      	movs	r1, #1
 8006d92:	4875      	ldr	r0, [pc, #468]	; (8006f68 <takeMachineID+0x2ac>)
 8006d94:	f002 fb20 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d112      	bne.n	8006dc4 <takeMachineID+0x108>
        	if(cursorPosition == 7) {
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b07      	cmp	r3, #7
 8006da2:	d102      	bne.n	8006daa <takeMachineID+0xee>
        		cursorPosition = 10;
 8006da4:	230a      	movs	r3, #10
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e008      	b.n	8006dbc <takeMachineID+0x100>
        	} else if (cursorPosition == 14) {
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b0e      	cmp	r3, #14
 8006dae:	d102      	bne.n	8006db6 <takeMachineID+0xfa>
                cursorPosition = 3;
 8006db0:	2303      	movs	r3, #3
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e002      	b.n	8006dbc <takeMachineID+0x100>
            } else {
            	cursorPosition++;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	3301      	adds	r3, #1
 8006dba:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8006dbc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006dc0:	f001 fd3a 	bl	8008838 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006dc4:	2108      	movs	r1, #8
 8006dc6:	4871      	ldr	r0, [pc, #452]	; (8006f8c <takeMachineID+0x2d0>)
 8006dc8:	f002 fb06 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d112      	bne.n	8006df8 <takeMachineID+0x13c>
            if (cursorPosition == 3) {
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d102      	bne.n	8006dde <takeMachineID+0x122>
                cursorPosition = 14;
 8006dd8:	230e      	movs	r3, #14
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e008      	b.n	8006df0 <takeMachineID+0x134>
            } else if(cursorPosition == 10) {
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b0a      	cmp	r3, #10
 8006de2:	d102      	bne.n	8006dea <takeMachineID+0x12e>
            	cursorPosition = 7;
 8006de4:	2307      	movs	r3, #7
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e002      	b.n	8006df0 <takeMachineID+0x134>
            } else {
            	cursorPosition--;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8006df0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006df4:	f001 fd20 	bl	8008838 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006df8:	2102      	movs	r1, #2
 8006dfa:	485b      	ldr	r0, [pc, #364]	; (8006f68 <takeMachineID+0x2ac>)
 8006dfc:	f002 faec 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d16c      	bne.n	8006ee0 <takeMachineID+0x224>
        	if(cursorPosition == 3) {
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d105      	bne.n	8006e18 <takeMachineID+0x15c>
        		machineID[machineIDLoc] = '0';
 8006e0c:	4a55      	ldr	r2, [pc, #340]	; (8006f64 <takeMachineID+0x2a8>)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	4413      	add	r3, r2
 8006e12:	2230      	movs	r2, #48	; 0x30
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	e04f      	b.n	8006eb8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 4) {
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d105      	bne.n	8006e2a <takeMachineID+0x16e>
        		machineID[machineIDLoc] = '1';
 8006e1e:	4a51      	ldr	r2, [pc, #324]	; (8006f64 <takeMachineID+0x2a8>)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	4413      	add	r3, r2
 8006e24:	2231      	movs	r2, #49	; 0x31
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e046      	b.n	8006eb8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 5) {
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b05      	cmp	r3, #5
 8006e2e:	d105      	bne.n	8006e3c <takeMachineID+0x180>
        		machineID[machineIDLoc] = '2';
 8006e30:	4a4c      	ldr	r2, [pc, #304]	; (8006f64 <takeMachineID+0x2a8>)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4413      	add	r3, r2
 8006e36:	2232      	movs	r2, #50	; 0x32
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	e03d      	b.n	8006eb8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 6) {
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b06      	cmp	r3, #6
 8006e40:	d105      	bne.n	8006e4e <takeMachineID+0x192>
        		machineID[machineIDLoc] = '3';
 8006e42:	4a48      	ldr	r2, [pc, #288]	; (8006f64 <takeMachineID+0x2a8>)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	4413      	add	r3, r2
 8006e48:	2233      	movs	r2, #51	; 0x33
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	e034      	b.n	8006eb8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 7) {
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b07      	cmp	r3, #7
 8006e52:	d105      	bne.n	8006e60 <takeMachineID+0x1a4>
        		machineID[machineIDLoc] = '4';
 8006e54:	4a43      	ldr	r2, [pc, #268]	; (8006f64 <takeMachineID+0x2a8>)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	4413      	add	r3, r2
 8006e5a:	2234      	movs	r2, #52	; 0x34
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	e02b      	b.n	8006eb8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 10) {
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b0a      	cmp	r3, #10
 8006e64:	d105      	bne.n	8006e72 <takeMachineID+0x1b6>
        		machineID[machineIDLoc] = '5';
 8006e66:	4a3f      	ldr	r2, [pc, #252]	; (8006f64 <takeMachineID+0x2a8>)
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	2235      	movs	r2, #53	; 0x35
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e022      	b.n	8006eb8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 11) {
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b0b      	cmp	r3, #11
 8006e76:	d105      	bne.n	8006e84 <takeMachineID+0x1c8>
        		machineID[machineIDLoc] = '6';
 8006e78:	4a3a      	ldr	r2, [pc, #232]	; (8006f64 <takeMachineID+0x2a8>)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	2236      	movs	r2, #54	; 0x36
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	e019      	b.n	8006eb8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 12) {
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b0c      	cmp	r3, #12
 8006e88:	d105      	bne.n	8006e96 <takeMachineID+0x1da>
        		machineID[machineIDLoc] = '7';
 8006e8a:	4a36      	ldr	r2, [pc, #216]	; (8006f64 <takeMachineID+0x2a8>)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4413      	add	r3, r2
 8006e90:	2237      	movs	r2, #55	; 0x37
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	e010      	b.n	8006eb8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 13) {
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b0d      	cmp	r3, #13
 8006e9a:	d105      	bne.n	8006ea8 <takeMachineID+0x1ec>
        		machineID[machineIDLoc] = '8';
 8006e9c:	4a31      	ldr	r2, [pc, #196]	; (8006f64 <takeMachineID+0x2a8>)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	2238      	movs	r2, #56	; 0x38
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e007      	b.n	8006eb8 <takeMachineID+0x1fc>
        	} else if(cursorPosition == 14) {
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2b0e      	cmp	r3, #14
 8006eac:	d104      	bne.n	8006eb8 <takeMachineID+0x1fc>
        		machineID[machineIDLoc] = '9';
 8006eae:	4a2d      	ldr	r2, [pc, #180]	; (8006f64 <takeMachineID+0x2a8>)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	2239      	movs	r2, #57	; 0x39
 8006eb6:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	b2d9      	uxtb	r1, r3
 8006ebc:	4a29      	ldr	r2, [pc, #164]	; (8006f64 <takeMachineID+0x2a8>)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	f000 ff75 	bl	8007db6 <lcd_print_char>

        	writeLoc++;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8006ed8:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8006edc:	f001 fcac 	bl	8008838 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006ee0:	2104      	movs	r1, #4
 8006ee2:	4821      	ldr	r0, [pc, #132]	; (8006f68 <takeMachineID+0x2ac>)
 8006ee4:	f002 fa78 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d12f      	bne.n	8006f4e <takeMachineID+0x292>
            if(strlen(machineID) >= 1) {
 8006eee:	4b1d      	ldr	r3, [pc, #116]	; (8006f64 <takeMachineID+0x2a8>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d027      	beq.n	8006f46 <takeMachineID+0x28a>

                machineID[machineIDLoc] = '\0';
 8006ef6:	4a1b      	ldr	r2, [pc, #108]	; (8006f64 <takeMachineID+0x2a8>)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4413      	add	r3, r2
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	3304      	adds	r3, #4
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	4619      	mov	r1, r3
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	f000 ff74 	bl	8007df8 <lcd_delete_char>
                HAL_Delay(50);
 8006f10:	2032      	movs	r0, #50	; 0x32
 8006f12:	f001 fc91 	bl	8008838 <HAL_Delay>

                if(writeLoc > 5) {
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b05      	cmp	r3, #5
 8006f1a:	dd03      	ble.n	8006f24 <takeMachineID+0x268>
                	writeLoc--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	e004      	b.n	8006f2e <takeMachineID+0x272>
                } else if(writeLoc < 5) {
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	dc01      	bgt.n	8006f2e <takeMachineID+0x272>
                	writeLoc = 5;
 8006f2a:	2305      	movs	r3, #5
 8006f2c:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dd03      	ble.n	8006f3c <takeMachineID+0x280>
                	machineIDLoc--;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	e004      	b.n	8006f46 <takeMachineID+0x28a>
                } else if(machineIDLoc < 0) {
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	da01      	bge.n	8006f46 <takeMachineID+0x28a>
                	machineIDLoc = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8006f46:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006f4a:	f001 fc75 	bl	8008838 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	4619      	mov	r1, r3
 8006f54:	2002      	movs	r0, #2
 8006f56:	f000 fefa 	bl	8007d4e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f5a:	e6cb      	b.n	8006cf4 <takeMachineID+0x38>
    }
}
 8006f5c:	bf00      	nop
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	200001a0 	.word	0x200001a0
 8006f68:	40010800 	.word	0x40010800
 8006f6c:	20000245 	.word	0x20000245
 8006f70:	0800dcec 	.word	0x0800dcec
 8006f74:	0800dd00 	.word	0x0800dd00
 8006f78:	0800dd14 	.word	0x0800dd14
 8006f7c:	0800dd24 	.word	0x0800dd24
 8006f80:	2000000c 	.word	0x2000000c
 8006f84:	20000128 	.word	0x20000128
 8006f88:	200003ac 	.word	0x200003ac
 8006f8c:	40011000 	.word	0x40011000

08006f90 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8006f90:	b5b0      	push	{r4, r5, r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af04      	add	r7, sp, #16
 8006f96:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8006f98:	2001      	movs	r0, #1
 8006f9a:	f000 ff55 	bl	8007e48 <lcd_cursor>

    if(state == 0) {
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8006fa4:	2214      	movs	r2, #20
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4899      	ldr	r0, [pc, #612]	; (8007210 <takeWifiSSID+0x280>)
 8006faa:	f005 fb68 	bl	800c67e <memset>
    }

    int realCharPos = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8006fb2:	4b98      	ldr	r3, [pc, #608]	; (8007214 <takeWifiSSID+0x284>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
    page = 1;
 8006fb8:	4b97      	ldr	r3, [pc, #604]	; (8007218 <takeWifiSSID+0x288>)
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8006fc2:	2307      	movs	r3, #7
 8006fc4:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	2002      	movs	r0, #2
 8006fca:	f7f9 ff5b 	bl	8000e84 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006fce:	2108      	movs	r1, #8
 8006fd0:	4892      	ldr	r0, [pc, #584]	; (800721c <takeWifiSSID+0x28c>)
 8006fd2:	f002 fa01 	bl	80093d8 <HAL_GPIO_ReadPin>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d14d      	bne.n	8007078 <takeWifiSSID+0xe8>
            lcd_cursor(0);
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f000 ff33 	bl	8007e48 <lcd_cursor>

            if(strlen(wifiSSID) > wifiCharacterLimit) {
 8006fe2:	488b      	ldr	r0, [pc, #556]	; (8007210 <takeWifiSSID+0x280>)
 8006fe4:	f7f9 f91e 	bl	8000224 <strlen>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b14      	cmp	r3, #20
 8006fec:	d91f      	bls.n	800702e <takeWifiSSID+0x9e>
                lcd_clear();
 8006fee:	f000 fef9 	bl	8007de4 <lcd_clear>
                if(dilSecim == 0) {
 8006ff2:	4b8b      	ldr	r3, [pc, #556]	; (8007220 <takeWifiSSID+0x290>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <takeWifiSSID+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006ffa:	4a8a      	ldr	r2, [pc, #552]	; (8007224 <takeWifiSSID+0x294>)
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	2001      	movs	r0, #1
 8007000:	f000 fec4 	bl	8007d8c <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007004:	4a88      	ldr	r2, [pc, #544]	; (8007228 <takeWifiSSID+0x298>)
 8007006:	2101      	movs	r1, #1
 8007008:	2002      	movs	r0, #2
 800700a:	f000 febf 	bl	8007d8c <lcd_print>
 800700e:	e009      	b.n	8007024 <takeWifiSSID+0x94>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 8007010:	4a86      	ldr	r2, [pc, #536]	; (800722c <takeWifiSSID+0x29c>)
 8007012:	2101      	movs	r1, #1
 8007014:	2001      	movs	r0, #1
 8007016:	f000 feb9 	bl	8007d8c <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 800701a:	4a85      	ldr	r2, [pc, #532]	; (8007230 <takeWifiSSID+0x2a0>)
 800701c:	2101      	movs	r1, #1
 800701e:	2002      	movs	r0, #2
 8007020:	f000 feb4 	bl	8007d8c <lcd_print>
                }
                HAL_Delay(1200);
 8007024:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007028:	f001 fc06 	bl	8008838 <HAL_Delay>
                goto mainSSIDSection;
 800702c:	e7b4      	b.n	8006f98 <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, wifiCharacterLimit);
 800702e:	4b81      	ldr	r3, [pc, #516]	; (8007234 <takeWifiSSID+0x2a4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a81      	ldr	r2, [pc, #516]	; (8007238 <takeWifiSSID+0x2a8>)
 8007034:	4413      	add	r3, r2
 8007036:	4a81      	ldr	r2, [pc, #516]	; (800723c <takeWifiSSID+0x2ac>)
 8007038:	6811      	ldr	r1, [r2, #0]
 800703a:	6855      	ldr	r5, [r2, #4]
 800703c:	6894      	ldr	r4, [r2, #8]
 800703e:	68d0      	ldr	r0, [r2, #12]
 8007040:	6019      	str	r1, [r3, #0]
 8007042:	605d      	str	r5, [r3, #4]
 8007044:	609c      	str	r4, [r3, #8]
 8007046:	60d8      	str	r0, [r3, #12]
 8007048:	6911      	ldr	r1, [r2, #16]
 800704a:	6119      	str	r1, [r3, #16]
            HAL_Delay(750);
 800704c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8007050:	f001 fbf2 	bl	8008838 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007054:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007058:	9302      	str	r3, [sp, #8]
 800705a:	236e      	movs	r3, #110	; 0x6e
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	4b76      	ldr	r3, [pc, #472]	; (8007238 <takeWifiSSID+0x2a8>)
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	236e      	movs	r3, #110	; 0x6e
 8007064:	2200      	movs	r2, #0
 8007066:	21a0      	movs	r1, #160	; 0xa0
 8007068:	4875      	ldr	r0, [pc, #468]	; (8007240 <takeWifiSSID+0x2b0>)
 800706a:	f002 fc6f 	bl	800994c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 800706e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007072:	f001 fbe1 	bl	8008838 <HAL_Delay>

            break;
 8007076:	e161      	b.n	800733c <takeWifiSSID+0x3ac>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007078:	2101      	movs	r1, #1
 800707a:	4868      	ldr	r0, [pc, #416]	; (800721c <takeWifiSSID+0x28c>)
 800707c:	f002 f9ac 	bl	80093d8 <HAL_GPIO_ReadPin>
 8007080:	4603      	mov	r3, r0
 8007082:	2b01      	cmp	r3, #1
 8007084:	d166      	bne.n	8007154 <takeWifiSSID+0x1c4>
        	realCharPos++;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	3301      	adds	r3, #1
 800708a:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b50      	cmp	r3, #80	; 0x50
 8007090:	dd01      	ble.n	8007096 <takeWifiSSID+0x106>
        		realCharPos = 1;
 8007092:	2301      	movs	r3, #1
 8007094:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8007096:	4b5f      	ldr	r3, [pc, #380]	; (8007214 <takeWifiSSID+0x284>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b10      	cmp	r3, #16
 800709c:	d152      	bne.n	8007144 <takeWifiSSID+0x1b4>
            	if(page == 1) {
 800709e:	4b5e      	ldr	r3, [pc, #376]	; (8007218 <takeWifiSSID+0x288>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d10c      	bne.n	80070c0 <takeWifiSSID+0x130>
            		cursorPosition = 1;
 80070a6:	4b5b      	ldr	r3, [pc, #364]	; (8007214 <takeWifiSSID+0x284>)
 80070a8:	2201      	movs	r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
            		page++;
 80070ac:	4b5a      	ldr	r3, [pc, #360]	; (8007218 <takeWifiSSID+0x288>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	4a59      	ldr	r2, [pc, #356]	; (8007218 <takeWifiSSID+0x288>)
 80070b4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 80070b6:	2102      	movs	r1, #2
 80070b8:	2002      	movs	r0, #2
 80070ba:	f7f9 fee3 	bl	8000e84 <printTemplate>
 80070be:	e046      	b.n	800714e <takeWifiSSID+0x1be>
            	} else if(page == 2) {
 80070c0:	4b55      	ldr	r3, [pc, #340]	; (8007218 <takeWifiSSID+0x288>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d10c      	bne.n	80070e2 <takeWifiSSID+0x152>
            		cursorPosition = 1;
 80070c8:	4b52      	ldr	r3, [pc, #328]	; (8007214 <takeWifiSSID+0x284>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
            		page++;
 80070ce:	4b52      	ldr	r3, [pc, #328]	; (8007218 <takeWifiSSID+0x288>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	4a50      	ldr	r2, [pc, #320]	; (8007218 <takeWifiSSID+0x288>)
 80070d6:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 80070d8:	2103      	movs	r1, #3
 80070da:	2002      	movs	r0, #2
 80070dc:	f7f9 fed2 	bl	8000e84 <printTemplate>
 80070e0:	e035      	b.n	800714e <takeWifiSSID+0x1be>
            	} else if(page == 3) {
 80070e2:	4b4d      	ldr	r3, [pc, #308]	; (8007218 <takeWifiSSID+0x288>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d10c      	bne.n	8007104 <takeWifiSSID+0x174>
            		cursorPosition = 1;
 80070ea:	4b4a      	ldr	r3, [pc, #296]	; (8007214 <takeWifiSSID+0x284>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
            		page++;
 80070f0:	4b49      	ldr	r3, [pc, #292]	; (8007218 <takeWifiSSID+0x288>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a48      	ldr	r2, [pc, #288]	; (8007218 <takeWifiSSID+0x288>)
 80070f8:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80070fa:	2104      	movs	r1, #4
 80070fc:	2002      	movs	r0, #2
 80070fe:	f7f9 fec1 	bl	8000e84 <printTemplate>
 8007102:	e024      	b.n	800714e <takeWifiSSID+0x1be>
            	} else if(page == 4) {
 8007104:	4b44      	ldr	r3, [pc, #272]	; (8007218 <takeWifiSSID+0x288>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b04      	cmp	r3, #4
 800710a:	d10c      	bne.n	8007126 <takeWifiSSID+0x196>
            		cursorPosition = 1;
 800710c:	4b41      	ldr	r3, [pc, #260]	; (8007214 <takeWifiSSID+0x284>)
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]
            		page++;
 8007112:	4b41      	ldr	r3, [pc, #260]	; (8007218 <takeWifiSSID+0x288>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	4a3f      	ldr	r2, [pc, #252]	; (8007218 <takeWifiSSID+0x288>)
 800711a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 800711c:	2105      	movs	r1, #5
 800711e:	2002      	movs	r0, #2
 8007120:	f7f9 feb0 	bl	8000e84 <printTemplate>
 8007124:	e013      	b.n	800714e <takeWifiSSID+0x1be>
            	} else if(page == 5) {
 8007126:	4b3c      	ldr	r3, [pc, #240]	; (8007218 <takeWifiSSID+0x288>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b05      	cmp	r3, #5
 800712c:	d10f      	bne.n	800714e <takeWifiSSID+0x1be>
            		cursorPosition = 1;
 800712e:	4b39      	ldr	r3, [pc, #228]	; (8007214 <takeWifiSSID+0x284>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007134:	4b38      	ldr	r3, [pc, #224]	; (8007218 <takeWifiSSID+0x288>)
 8007136:	2201      	movs	r2, #1
 8007138:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 800713a:	2101      	movs	r1, #1
 800713c:	2002      	movs	r0, #2
 800713e:	f7f9 fea1 	bl	8000e84 <printTemplate>
 8007142:	e004      	b.n	800714e <takeWifiSSID+0x1be>
            	}
            } else {
            	cursorPosition++;
 8007144:	4b33      	ldr	r3, [pc, #204]	; (8007214 <takeWifiSSID+0x284>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3301      	adds	r3, #1
 800714a:	4a32      	ldr	r2, [pc, #200]	; (8007214 <takeWifiSSID+0x284>)
 800714c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800714e:	20fa      	movs	r0, #250	; 0xfa
 8007150:	f001 fb72 	bl	8008838 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007154:	2108      	movs	r1, #8
 8007156:	483b      	ldr	r0, [pc, #236]	; (8007244 <takeWifiSSID+0x2b4>)
 8007158:	f002 f93e 	bl	80093d8 <HAL_GPIO_ReadPin>
 800715c:	4603      	mov	r3, r0
 800715e:	2b01      	cmp	r3, #1
 8007160:	d17a      	bne.n	8007258 <takeWifiSSID+0x2c8>
        	realCharPos--;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	3b01      	subs	r3, #1
 8007166:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	dc01      	bgt.n	8007172 <takeWifiSSID+0x1e2>
        		realCharPos = 80;
 800716e:	2350      	movs	r3, #80	; 0x50
 8007170:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8007172:	4b28      	ldr	r3, [pc, #160]	; (8007214 <takeWifiSSID+0x284>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d166      	bne.n	8007248 <takeWifiSSID+0x2b8>
            	if(page == 1) {
 800717a:	4b27      	ldr	r3, [pc, #156]	; (8007218 <takeWifiSSID+0x288>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d10a      	bne.n	8007198 <takeWifiSSID+0x208>
            		cursorPosition = 16;
 8007182:	4b24      	ldr	r3, [pc, #144]	; (8007214 <takeWifiSSID+0x284>)
 8007184:	2210      	movs	r2, #16
 8007186:	601a      	str	r2, [r3, #0]
            		page = 5;
 8007188:	4b23      	ldr	r3, [pc, #140]	; (8007218 <takeWifiSSID+0x288>)
 800718a:	2205      	movs	r2, #5
 800718c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 800718e:	2105      	movs	r1, #5
 8007190:	2002      	movs	r0, #2
 8007192:	f7f9 fe77 	bl	8000e84 <printTemplate>
 8007196:	e05c      	b.n	8007252 <takeWifiSSID+0x2c2>
            	} else if(page == 2) {
 8007198:	4b1f      	ldr	r3, [pc, #124]	; (8007218 <takeWifiSSID+0x288>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d10a      	bne.n	80071b6 <takeWifiSSID+0x226>
            		cursorPosition = 16;
 80071a0:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <takeWifiSSID+0x284>)
 80071a2:	2210      	movs	r2, #16
 80071a4:	601a      	str	r2, [r3, #0]
            		page = 1;
 80071a6:	4b1c      	ldr	r3, [pc, #112]	; (8007218 <takeWifiSSID+0x288>)
 80071a8:	2201      	movs	r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80071ac:	2101      	movs	r1, #1
 80071ae:	2002      	movs	r0, #2
 80071b0:	f7f9 fe68 	bl	8000e84 <printTemplate>
 80071b4:	e04d      	b.n	8007252 <takeWifiSSID+0x2c2>
            	} else if(page == 3) {
 80071b6:	4b18      	ldr	r3, [pc, #96]	; (8007218 <takeWifiSSID+0x288>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d10a      	bne.n	80071d4 <takeWifiSSID+0x244>
            		cursorPosition = 16;
 80071be:	4b15      	ldr	r3, [pc, #84]	; (8007214 <takeWifiSSID+0x284>)
 80071c0:	2210      	movs	r2, #16
 80071c2:	601a      	str	r2, [r3, #0]
            		page = 2;
 80071c4:	4b14      	ldr	r3, [pc, #80]	; (8007218 <takeWifiSSID+0x288>)
 80071c6:	2202      	movs	r2, #2
 80071c8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 80071ca:	2102      	movs	r1, #2
 80071cc:	2002      	movs	r0, #2
 80071ce:	f7f9 fe59 	bl	8000e84 <printTemplate>
 80071d2:	e03e      	b.n	8007252 <takeWifiSSID+0x2c2>
            	} else if(page == 4) {
 80071d4:	4b10      	ldr	r3, [pc, #64]	; (8007218 <takeWifiSSID+0x288>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d10a      	bne.n	80071f2 <takeWifiSSID+0x262>
            		cursorPosition = 16;
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <takeWifiSSID+0x284>)
 80071de:	2210      	movs	r2, #16
 80071e0:	601a      	str	r2, [r3, #0]
            		page = 3;
 80071e2:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <takeWifiSSID+0x288>)
 80071e4:	2203      	movs	r2, #3
 80071e6:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80071e8:	2103      	movs	r1, #3
 80071ea:	2002      	movs	r0, #2
 80071ec:	f7f9 fe4a 	bl	8000e84 <printTemplate>
 80071f0:	e02f      	b.n	8007252 <takeWifiSSID+0x2c2>
            	} else if(page == 5) {
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <takeWifiSSID+0x288>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d12b      	bne.n	8007252 <takeWifiSSID+0x2c2>
            		cursorPosition = 16;
 80071fa:	4b06      	ldr	r3, [pc, #24]	; (8007214 <takeWifiSSID+0x284>)
 80071fc:	2210      	movs	r2, #16
 80071fe:	601a      	str	r2, [r3, #0]
            		page = 4;
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <takeWifiSSID+0x288>)
 8007202:	2204      	movs	r2, #4
 8007204:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8007206:	2104      	movs	r1, #4
 8007208:	2002      	movs	r0, #2
 800720a:	f7f9 fe3b 	bl	8000e84 <printTemplate>
 800720e:	e020      	b.n	8007252 <takeWifiSSID+0x2c2>
 8007210:	200001ac 	.word	0x200001ac
 8007214:	20000000 	.word	0x20000000
 8007218:	20000004 	.word	0x20000004
 800721c:	40010800 	.word	0x40010800
 8007220:	20000245 	.word	0x20000245
 8007224:	0800dd38 	.word	0x0800dd38
 8007228:	0800dd4c 	.word	0x0800dd4c
 800722c:	0800dd60 	.word	0x0800dd60
 8007230:	0800dd74 	.word	0x0800dd74
 8007234:	20000010 	.word	0x20000010
 8007238:	20000128 	.word	0x20000128
 800723c:	200001d4 	.word	0x200001d4
 8007240:	200003ac 	.word	0x200003ac
 8007244:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007248:	4b3e      	ldr	r3, [pc, #248]	; (8007344 <takeWifiSSID+0x3b4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3b01      	subs	r3, #1
 800724e:	4a3d      	ldr	r2, [pc, #244]	; (8007344 <takeWifiSSID+0x3b4>)
 8007250:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007252:	20fa      	movs	r0, #250	; 0xfa
 8007254:	f001 faf0 	bl	8008838 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007258:	2102      	movs	r1, #2
 800725a:	483b      	ldr	r0, [pc, #236]	; (8007348 <takeWifiSSID+0x3b8>)
 800725c:	f002 f8bc 	bl	80093d8 <HAL_GPIO_ReadPin>
 8007260:	4603      	mov	r3, r0
 8007262:	2b01      	cmp	r3, #1
 8007264:	d127      	bne.n	80072b6 <takeWifiSSID+0x326>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	3b01      	subs	r3, #1
 800726a:	4618      	mov	r0, r3
 800726c:	f7f9 fa74 	bl	8000758 <getCharFromCursorPosition>
 8007270:	4603      	mov	r3, r0
 8007272:	b2d9      	uxtb	r1, r3
 8007274:	4a35      	ldr	r2, [pc, #212]	; (800734c <takeWifiSSID+0x3bc>)
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4413      	add	r3, r2
 800727a:	460a      	mov	r2, r1
 800727c:	701a      	strb	r2, [r3, #0]
            wifiSSIDLoc[wifiNameLoc] = realCharPos - 1;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b2d9      	uxtb	r1, r3
 8007286:	4a32      	ldr	r2, [pc, #200]	; (8007350 <takeWifiSSID+0x3c0>)
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	4413      	add	r3, r2
 800728c:	460a      	mov	r2, r1
 800728e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	b2d9      	uxtb	r1, r3
 8007294:	4a2d      	ldr	r2, [pc, #180]	; (800734c <takeWifiSSID+0x3bc>)
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	4413      	add	r3, r2
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	2001      	movs	r0, #1
 80072a0:	f000 fd89 	bl	8007db6 <lcd_print_char>

            writeLoc++;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3301      	adds	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	3301      	adds	r3, #1
 80072ae:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 80072b0:	20fa      	movs	r0, #250	; 0xfa
 80072b2:	f001 fac1 	bl	8008838 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072b6:	2104      	movs	r1, #4
 80072b8:	4823      	ldr	r0, [pc, #140]	; (8007348 <takeWifiSSID+0x3b8>)
 80072ba:	f002 f88d 	bl	80093d8 <HAL_GPIO_ReadPin>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d133      	bne.n	800732c <takeWifiSSID+0x39c>
        	if(strlen(wifiSSID) >= 1) {
 80072c4:	4b21      	ldr	r3, [pc, #132]	; (800734c <takeWifiSSID+0x3bc>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d02c      	beq.n	8007326 <takeWifiSSID+0x396>
        		wifiSSID[wifiNameLoc] = '\0';
 80072cc:	4a1f      	ldr	r2, [pc, #124]	; (800734c <takeWifiSSID+0x3bc>)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4413      	add	r3, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
        		wifiSSIDLoc[wifiNameLoc] = '\0';
 80072d6:	4a1e      	ldr	r2, [pc, #120]	; (8007350 <takeWifiSSID+0x3c0>)
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4413      	add	r3, r2
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	3306      	adds	r3, #6
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4619      	mov	r1, r3
 80072ea:	2001      	movs	r0, #1
 80072ec:	f000 fd84 	bl	8007df8 <lcd_delete_char>
        		HAL_Delay(50);
 80072f0:	2032      	movs	r0, #50	; 0x32
 80072f2:	f001 faa1 	bl	8008838 <HAL_Delay>
        		if(writeLoc > 7) {
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b07      	cmp	r3, #7
 80072fa:	dd03      	ble.n	8007304 <takeWifiSSID+0x374>
        			writeLoc--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3b01      	subs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e004      	b.n	800730e <takeWifiSSID+0x37e>
        		} else if(writeLoc < 7) {
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b06      	cmp	r3, #6
 8007308:	dc01      	bgt.n	800730e <takeWifiSSID+0x37e>
        			writeLoc = 7;
 800730a:	2307      	movs	r3, #7
 800730c:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	dd03      	ble.n	800731c <takeWifiSSID+0x38c>
        			wifiNameLoc--;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3b01      	subs	r3, #1
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	e004      	b.n	8007326 <takeWifiSSID+0x396>
        		} else if(wifiNameLoc < 0) {
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	da01      	bge.n	8007326 <takeWifiSSID+0x396>
        			wifiNameLoc = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 8007326:	20fa      	movs	r0, #250	; 0xfa
 8007328:	f001 fa86 	bl	8008838 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <takeWifiSSID+0x3b4>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	4619      	mov	r1, r3
 8007334:	2002      	movs	r0, #2
 8007336:	f000 fd0a 	bl	8007d4e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800733a:	e648      	b.n	8006fce <takeWifiSSID+0x3e>
    }
}
 800733c:	bf00      	nop
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bdb0      	pop	{r4, r5, r7, pc}
 8007344:	20000000 	.word	0x20000000
 8007348:	40010800 	.word	0x40010800
 800734c:	200001ac 	.word	0x200001ac
 8007350:	200001d4 	.word	0x200001d4

08007354 <takeWifiPass>:

void takeWifiPass(int state) {
 8007354:	b5b0      	push	{r4, r5, r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af04      	add	r7, sp, #16
 800735a:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 800735c:	2001      	movs	r0, #1
 800735e:	f000 fd73 	bl	8007e48 <lcd_cursor>

    if(state == 0) {
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d104      	bne.n	8007372 <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8007368:	2214      	movs	r2, #20
 800736a:	2100      	movs	r1, #0
 800736c:	4899      	ldr	r0, [pc, #612]	; (80075d4 <takeWifiPass+0x280>)
 800736e:	f005 f986 	bl	800c67e <memset>
    }

    int realCharPos = 1;
 8007372:	2301      	movs	r3, #1
 8007374:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8007376:	4b98      	ldr	r3, [pc, #608]	; (80075d8 <takeWifiPass+0x284>)
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]
    page = 1;
 800737c:	4b97      	ldr	r3, [pc, #604]	; (80075dc <takeWifiPass+0x288>)
 800737e:	2201      	movs	r2, #1
 8007380:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8007386:	2307      	movs	r3, #7
 8007388:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 800738a:	2101      	movs	r1, #1
 800738c:	2003      	movs	r0, #3
 800738e:	f7f9 fd79 	bl	8000e84 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007392:	2108      	movs	r1, #8
 8007394:	4892      	ldr	r0, [pc, #584]	; (80075e0 <takeWifiPass+0x28c>)
 8007396:	f002 f81f 	bl	80093d8 <HAL_GPIO_ReadPin>
 800739a:	4603      	mov	r3, r0
 800739c:	2b01      	cmp	r3, #1
 800739e:	d14d      	bne.n	800743c <takeWifiPass+0xe8>
            lcd_cursor(0);
 80073a0:	2000      	movs	r0, #0
 80073a2:	f000 fd51 	bl	8007e48 <lcd_cursor>

            if(strlen(wifiPass) > wifiCharacterLimit) {
 80073a6:	488b      	ldr	r0, [pc, #556]	; (80075d4 <takeWifiPass+0x280>)
 80073a8:	f7f8 ff3c 	bl	8000224 <strlen>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b14      	cmp	r3, #20
 80073b0:	d91f      	bls.n	80073f2 <takeWifiPass+0x9e>
                lcd_clear();
 80073b2:	f000 fd17 	bl	8007de4 <lcd_clear>
                if(dilSecim == 0) {
 80073b6:	4b8b      	ldr	r3, [pc, #556]	; (80075e4 <takeWifiPass+0x290>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <takeWifiPass+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80073be:	4a8a      	ldr	r2, [pc, #552]	; (80075e8 <takeWifiPass+0x294>)
 80073c0:	2101      	movs	r1, #1
 80073c2:	2001      	movs	r0, #1
 80073c4:	f000 fce2 	bl	8007d8c <lcd_print>
                	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80073c8:	4a88      	ldr	r2, [pc, #544]	; (80075ec <takeWifiPass+0x298>)
 80073ca:	2101      	movs	r1, #1
 80073cc:	2002      	movs	r0, #2
 80073ce:	f000 fcdd 	bl	8007d8c <lcd_print>
 80073d2:	e009      	b.n	80073e8 <takeWifiPass+0x94>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 80073d4:	4a86      	ldr	r2, [pc, #536]	; (80075f0 <takeWifiPass+0x29c>)
 80073d6:	2101      	movs	r1, #1
 80073d8:	2001      	movs	r0, #1
 80073da:	f000 fcd7 	bl	8007d8c <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80073de:	4a85      	ldr	r2, [pc, #532]	; (80075f4 <takeWifiPass+0x2a0>)
 80073e0:	2101      	movs	r1, #1
 80073e2:	2002      	movs	r0, #2
 80073e4:	f000 fcd2 	bl	8007d8c <lcd_print>
                }
                HAL_Delay(1200);
 80073e8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80073ec:	f001 fa24 	bl	8008838 <HAL_Delay>
                goto mainPASSSection;
 80073f0:	e7b4      	b.n	800735c <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, wifiCharacterLimit);
 80073f2:	4b81      	ldr	r3, [pc, #516]	; (80075f8 <takeWifiPass+0x2a4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a81      	ldr	r2, [pc, #516]	; (80075fc <takeWifiPass+0x2a8>)
 80073f8:	4413      	add	r3, r2
 80073fa:	4a81      	ldr	r2, [pc, #516]	; (8007600 <takeWifiPass+0x2ac>)
 80073fc:	6811      	ldr	r1, [r2, #0]
 80073fe:	6855      	ldr	r5, [r2, #4]
 8007400:	6894      	ldr	r4, [r2, #8]
 8007402:	68d0      	ldr	r0, [r2, #12]
 8007404:	6019      	str	r1, [r3, #0]
 8007406:	605d      	str	r5, [r3, #4]
 8007408:	609c      	str	r4, [r3, #8]
 800740a:	60d8      	str	r0, [r3, #12]
 800740c:	6911      	ldr	r1, [r2, #16]
 800740e:	6119      	str	r1, [r3, #16]
            HAL_Delay(750);
 8007410:	f240 20ee 	movw	r0, #750	; 0x2ee
 8007414:	f001 fa10 	bl	8008838 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007418:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800741c:	9302      	str	r3, [sp, #8]
 800741e:	236e      	movs	r3, #110	; 0x6e
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	4b76      	ldr	r3, [pc, #472]	; (80075fc <takeWifiPass+0x2a8>)
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	236e      	movs	r3, #110	; 0x6e
 8007428:	2200      	movs	r2, #0
 800742a:	21a0      	movs	r1, #160	; 0xa0
 800742c:	4875      	ldr	r0, [pc, #468]	; (8007604 <takeWifiPass+0x2b0>)
 800742e:	f002 fa8d 	bl	800994c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8007432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007436:	f001 f9ff 	bl	8008838 <HAL_Delay>

            break;
 800743a:	e161      	b.n	8007700 <takeWifiPass+0x3ac>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800743c:	2101      	movs	r1, #1
 800743e:	4868      	ldr	r0, [pc, #416]	; (80075e0 <takeWifiPass+0x28c>)
 8007440:	f001 ffca 	bl	80093d8 <HAL_GPIO_ReadPin>
 8007444:	4603      	mov	r3, r0
 8007446:	2b01      	cmp	r3, #1
 8007448:	d166      	bne.n	8007518 <takeWifiPass+0x1c4>
        	realCharPos++;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	3301      	adds	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2b50      	cmp	r3, #80	; 0x50
 8007454:	dd01      	ble.n	800745a <takeWifiPass+0x106>
        	    realCharPos = 1;
 8007456:	2301      	movs	r3, #1
 8007458:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800745a:	4b5f      	ldr	r3, [pc, #380]	; (80075d8 <takeWifiPass+0x284>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b10      	cmp	r3, #16
 8007460:	d152      	bne.n	8007508 <takeWifiPass+0x1b4>
            	if(page == 1) {
 8007462:	4b5e      	ldr	r3, [pc, #376]	; (80075dc <takeWifiPass+0x288>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d10c      	bne.n	8007484 <takeWifiPass+0x130>
            		cursorPosition = 1;
 800746a:	4b5b      	ldr	r3, [pc, #364]	; (80075d8 <takeWifiPass+0x284>)
 800746c:	2201      	movs	r2, #1
 800746e:	601a      	str	r2, [r3, #0]
            		page++;
 8007470:	4b5a      	ldr	r3, [pc, #360]	; (80075dc <takeWifiPass+0x288>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3301      	adds	r3, #1
 8007476:	4a59      	ldr	r2, [pc, #356]	; (80075dc <takeWifiPass+0x288>)
 8007478:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 800747a:	2102      	movs	r1, #2
 800747c:	2003      	movs	r0, #3
 800747e:	f7f9 fd01 	bl	8000e84 <printTemplate>
 8007482:	e046      	b.n	8007512 <takeWifiPass+0x1be>
            	} else if(page == 2) {
 8007484:	4b55      	ldr	r3, [pc, #340]	; (80075dc <takeWifiPass+0x288>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d10c      	bne.n	80074a6 <takeWifiPass+0x152>
            		cursorPosition = 1;
 800748c:	4b52      	ldr	r3, [pc, #328]	; (80075d8 <takeWifiPass+0x284>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
            		page++;
 8007492:	4b52      	ldr	r3, [pc, #328]	; (80075dc <takeWifiPass+0x288>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3301      	adds	r3, #1
 8007498:	4a50      	ldr	r2, [pc, #320]	; (80075dc <takeWifiPass+0x288>)
 800749a:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 800749c:	2103      	movs	r1, #3
 800749e:	2003      	movs	r0, #3
 80074a0:	f7f9 fcf0 	bl	8000e84 <printTemplate>
 80074a4:	e035      	b.n	8007512 <takeWifiPass+0x1be>
            	} else if(page == 3) {
 80074a6:	4b4d      	ldr	r3, [pc, #308]	; (80075dc <takeWifiPass+0x288>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d10c      	bne.n	80074c8 <takeWifiPass+0x174>
            		cursorPosition = 1;
 80074ae:	4b4a      	ldr	r3, [pc, #296]	; (80075d8 <takeWifiPass+0x284>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
            		page++;
 80074b4:	4b49      	ldr	r3, [pc, #292]	; (80075dc <takeWifiPass+0x288>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	4a48      	ldr	r2, [pc, #288]	; (80075dc <takeWifiPass+0x288>)
 80074bc:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80074be:	2104      	movs	r1, #4
 80074c0:	2003      	movs	r0, #3
 80074c2:	f7f9 fcdf 	bl	8000e84 <printTemplate>
 80074c6:	e024      	b.n	8007512 <takeWifiPass+0x1be>
            	} else if(page == 4) {
 80074c8:	4b44      	ldr	r3, [pc, #272]	; (80075dc <takeWifiPass+0x288>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d10c      	bne.n	80074ea <takeWifiPass+0x196>
            		cursorPosition = 1;
 80074d0:	4b41      	ldr	r3, [pc, #260]	; (80075d8 <takeWifiPass+0x284>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	601a      	str	r2, [r3, #0]
            		page++;
 80074d6:	4b41      	ldr	r3, [pc, #260]	; (80075dc <takeWifiPass+0x288>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	4a3f      	ldr	r2, [pc, #252]	; (80075dc <takeWifiPass+0x288>)
 80074de:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80074e0:	2105      	movs	r1, #5
 80074e2:	2003      	movs	r0, #3
 80074e4:	f7f9 fcce 	bl	8000e84 <printTemplate>
 80074e8:	e013      	b.n	8007512 <takeWifiPass+0x1be>
            	} else if(page == 5) {
 80074ea:	4b3c      	ldr	r3, [pc, #240]	; (80075dc <takeWifiPass+0x288>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d10f      	bne.n	8007512 <takeWifiPass+0x1be>
            		cursorPosition = 1;
 80074f2:	4b39      	ldr	r3, [pc, #228]	; (80075d8 <takeWifiPass+0x284>)
 80074f4:	2201      	movs	r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
            		page = 1;
 80074f8:	4b38      	ldr	r3, [pc, #224]	; (80075dc <takeWifiPass+0x288>)
 80074fa:	2201      	movs	r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80074fe:	2101      	movs	r1, #1
 8007500:	2003      	movs	r0, #3
 8007502:	f7f9 fcbf 	bl	8000e84 <printTemplate>
 8007506:	e004      	b.n	8007512 <takeWifiPass+0x1be>
            	}
            } else {
            	cursorPosition++;
 8007508:	4b33      	ldr	r3, [pc, #204]	; (80075d8 <takeWifiPass+0x284>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3301      	adds	r3, #1
 800750e:	4a32      	ldr	r2, [pc, #200]	; (80075d8 <takeWifiPass+0x284>)
 8007510:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007512:	20fa      	movs	r0, #250	; 0xfa
 8007514:	f001 f990 	bl	8008838 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007518:	2108      	movs	r1, #8
 800751a:	483b      	ldr	r0, [pc, #236]	; (8007608 <takeWifiPass+0x2b4>)
 800751c:	f001 ff5c 	bl	80093d8 <HAL_GPIO_ReadPin>
 8007520:	4603      	mov	r3, r0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d17a      	bne.n	800761c <takeWifiPass+0x2c8>
        	realCharPos--;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	3b01      	subs	r3, #1
 800752a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	dc01      	bgt.n	8007536 <takeWifiPass+0x1e2>
        	    realCharPos = 80;
 8007532:	2350      	movs	r3, #80	; 0x50
 8007534:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8007536:	4b28      	ldr	r3, [pc, #160]	; (80075d8 <takeWifiPass+0x284>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d166      	bne.n	800760c <takeWifiPass+0x2b8>
            	if(page == 1) {
 800753e:	4b27      	ldr	r3, [pc, #156]	; (80075dc <takeWifiPass+0x288>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d10a      	bne.n	800755c <takeWifiPass+0x208>
            		cursorPosition = 16;
 8007546:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <takeWifiPass+0x284>)
 8007548:	2210      	movs	r2, #16
 800754a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800754c:	4b23      	ldr	r3, [pc, #140]	; (80075dc <takeWifiPass+0x288>)
 800754e:	2205      	movs	r2, #5
 8007550:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8007552:	2105      	movs	r1, #5
 8007554:	2003      	movs	r0, #3
 8007556:	f7f9 fc95 	bl	8000e84 <printTemplate>
 800755a:	e05c      	b.n	8007616 <takeWifiPass+0x2c2>
            	} else if(page == 2) {
 800755c:	4b1f      	ldr	r3, [pc, #124]	; (80075dc <takeWifiPass+0x288>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d10a      	bne.n	800757a <takeWifiPass+0x226>
            		cursorPosition = 16;
 8007564:	4b1c      	ldr	r3, [pc, #112]	; (80075d8 <takeWifiPass+0x284>)
 8007566:	2210      	movs	r2, #16
 8007568:	601a      	str	r2, [r3, #0]
            		page = 1;
 800756a:	4b1c      	ldr	r3, [pc, #112]	; (80075dc <takeWifiPass+0x288>)
 800756c:	2201      	movs	r2, #1
 800756e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8007570:	2101      	movs	r1, #1
 8007572:	2003      	movs	r0, #3
 8007574:	f7f9 fc86 	bl	8000e84 <printTemplate>
 8007578:	e04d      	b.n	8007616 <takeWifiPass+0x2c2>
            	} else if(page == 3) {
 800757a:	4b18      	ldr	r3, [pc, #96]	; (80075dc <takeWifiPass+0x288>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b03      	cmp	r3, #3
 8007580:	d10a      	bne.n	8007598 <takeWifiPass+0x244>
            		cursorPosition = 16;
 8007582:	4b15      	ldr	r3, [pc, #84]	; (80075d8 <takeWifiPass+0x284>)
 8007584:	2210      	movs	r2, #16
 8007586:	601a      	str	r2, [r3, #0]
            		page = 2;
 8007588:	4b14      	ldr	r3, [pc, #80]	; (80075dc <takeWifiPass+0x288>)
 800758a:	2202      	movs	r2, #2
 800758c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 800758e:	2102      	movs	r1, #2
 8007590:	2003      	movs	r0, #3
 8007592:	f7f9 fc77 	bl	8000e84 <printTemplate>
 8007596:	e03e      	b.n	8007616 <takeWifiPass+0x2c2>
            	} else if(page == 4) {
 8007598:	4b10      	ldr	r3, [pc, #64]	; (80075dc <takeWifiPass+0x288>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b04      	cmp	r3, #4
 800759e:	d10a      	bne.n	80075b6 <takeWifiPass+0x262>
            		cursorPosition = 16;
 80075a0:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <takeWifiPass+0x284>)
 80075a2:	2210      	movs	r2, #16
 80075a4:	601a      	str	r2, [r3, #0]
            		page = 3;
 80075a6:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <takeWifiPass+0x288>)
 80075a8:	2203      	movs	r2, #3
 80075aa:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80075ac:	2103      	movs	r1, #3
 80075ae:	2003      	movs	r0, #3
 80075b0:	f7f9 fc68 	bl	8000e84 <printTemplate>
 80075b4:	e02f      	b.n	8007616 <takeWifiPass+0x2c2>
            	} else if(page == 5) {
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <takeWifiPass+0x288>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b05      	cmp	r3, #5
 80075bc:	d12b      	bne.n	8007616 <takeWifiPass+0x2c2>
            		cursorPosition = 16;
 80075be:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <takeWifiPass+0x284>)
 80075c0:	2210      	movs	r2, #16
 80075c2:	601a      	str	r2, [r3, #0]
            		page = 4;
 80075c4:	4b05      	ldr	r3, [pc, #20]	; (80075dc <takeWifiPass+0x288>)
 80075c6:	2204      	movs	r2, #4
 80075c8:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80075ca:	2104      	movs	r1, #4
 80075cc:	2003      	movs	r0, #3
 80075ce:	f7f9 fc59 	bl	8000e84 <printTemplate>
 80075d2:	e020      	b.n	8007616 <takeWifiPass+0x2c2>
 80075d4:	200001c0 	.word	0x200001c0
 80075d8:	20000000 	.word	0x20000000
 80075dc:	20000004 	.word	0x20000004
 80075e0:	40010800 	.word	0x40010800
 80075e4:	20000245 	.word	0x20000245
 80075e8:	0800dd38 	.word	0x0800dd38
 80075ec:	0800dd88 	.word	0x0800dd88
 80075f0:	0800dd9c 	.word	0x0800dd9c
 80075f4:	0800dd74 	.word	0x0800dd74
 80075f8:	20000014 	.word	0x20000014
 80075fc:	20000128 	.word	0x20000128
 8007600:	200001e8 	.word	0x200001e8
 8007604:	200003ac 	.word	0x200003ac
 8007608:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800760c:	4b3e      	ldr	r3, [pc, #248]	; (8007708 <takeWifiPass+0x3b4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3b01      	subs	r3, #1
 8007612:	4a3d      	ldr	r2, [pc, #244]	; (8007708 <takeWifiPass+0x3b4>)
 8007614:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007616:	20fa      	movs	r0, #250	; 0xfa
 8007618:	f001 f90e 	bl	8008838 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800761c:	2102      	movs	r1, #2
 800761e:	483b      	ldr	r0, [pc, #236]	; (800770c <takeWifiPass+0x3b8>)
 8007620:	f001 feda 	bl	80093d8 <HAL_GPIO_ReadPin>
 8007624:	4603      	mov	r3, r0
 8007626:	2b01      	cmp	r3, #1
 8007628:	d127      	bne.n	800767a <takeWifiPass+0x326>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	3b01      	subs	r3, #1
 800762e:	4618      	mov	r0, r3
 8007630:	f7f9 f892 	bl	8000758 <getCharFromCursorPosition>
 8007634:	4603      	mov	r3, r0
 8007636:	b2d9      	uxtb	r1, r3
 8007638:	4a35      	ldr	r2, [pc, #212]	; (8007710 <takeWifiPass+0x3bc>)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	4413      	add	r3, r2
 800763e:	460a      	mov	r2, r1
 8007640:	701a      	strb	r2, [r3, #0]
        	wifiPassLocArr[wifiPassLoc] = realCharPos - 1;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	b2db      	uxtb	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	b2d9      	uxtb	r1, r3
 800764a:	4a32      	ldr	r2, [pc, #200]	; (8007714 <takeWifiPass+0x3c0>)
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	4413      	add	r3, r2
 8007650:	460a      	mov	r2, r1
 8007652:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	b2d9      	uxtb	r1, r3
 8007658:	4a2d      	ldr	r2, [pc, #180]	; (8007710 <takeWifiPass+0x3bc>)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	2001      	movs	r0, #1
 8007664:	f000 fba7 	bl	8007db6 <lcd_print_char>

            writeLoc++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3301      	adds	r3, #1
 8007672:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8007674:	20fa      	movs	r0, #250	; 0xfa
 8007676:	f001 f8df 	bl	8008838 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800767a:	2104      	movs	r1, #4
 800767c:	4823      	ldr	r0, [pc, #140]	; (800770c <takeWifiPass+0x3b8>)
 800767e:	f001 feab 	bl	80093d8 <HAL_GPIO_ReadPin>
 8007682:	4603      	mov	r3, r0
 8007684:	2b01      	cmp	r3, #1
 8007686:	d133      	bne.n	80076f0 <takeWifiPass+0x39c>
            if(strlen(wifiPass) >= 1) {
 8007688:	4b21      	ldr	r3, [pc, #132]	; (8007710 <takeWifiPass+0x3bc>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d02c      	beq.n	80076ea <takeWifiPass+0x396>
            	wifiPass[wifiPassLoc] = '\0';
 8007690:	4a1f      	ldr	r2, [pc, #124]	; (8007710 <takeWifiPass+0x3bc>)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	4413      	add	r3, r2
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]
            	wifiPassLocArr[wifiPassLoc] = '\0';
 800769a:	4a1e      	ldr	r2, [pc, #120]	; (8007714 <takeWifiPass+0x3c0>)
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	4413      	add	r3, r2
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	3306      	adds	r3, #6
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	4619      	mov	r1, r3
 80076ae:	2001      	movs	r0, #1
 80076b0:	f000 fba2 	bl	8007df8 <lcd_delete_char>
            	HAL_Delay(50);
 80076b4:	2032      	movs	r0, #50	; 0x32
 80076b6:	f001 f8bf 	bl	8008838 <HAL_Delay>

            	if(writeLoc > 7) {
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b07      	cmp	r3, #7
 80076be:	dd03      	ble.n	80076c8 <takeWifiPass+0x374>
            		writeLoc--;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	e004      	b.n	80076d2 <takeWifiPass+0x37e>
            	} else if(writeLoc < 7) {
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b06      	cmp	r3, #6
 80076cc:	dc01      	bgt.n	80076d2 <takeWifiPass+0x37e>
            		writeLoc = 7;
 80076ce:	2307      	movs	r3, #7
 80076d0:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dd03      	ble.n	80076e0 <takeWifiPass+0x38c>
            		wifiPassLoc--;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	3b01      	subs	r3, #1
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	e004      	b.n	80076ea <takeWifiPass+0x396>
            	} else if(wifiPassLoc < 0) {
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da01      	bge.n	80076ea <takeWifiPass+0x396>
            		wifiPassLoc = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80076ea:	20fa      	movs	r0, #250	; 0xfa
 80076ec:	f001 f8a4 	bl	8008838 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80076f0:	4b05      	ldr	r3, [pc, #20]	; (8007708 <takeWifiPass+0x3b4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	2002      	movs	r0, #2
 80076fa:	f000 fb28 	bl	8007d4e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80076fe:	e648      	b.n	8007392 <takeWifiPass+0x3e>
    }
}
 8007700:	bf00      	nop
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bdb0      	pop	{r4, r5, r7, pc}
 8007708:	20000000 	.word	0x20000000
 800770c:	40010800 	.word	0x40010800
 8007710:	200001c0 	.word	0x200001c0
 8007714:	200001e8 	.word	0x200001e8

08007718 <mergeData>:

char* mergeData() {
 8007718:	b580      	push	{r7, lr}
 800771a:	b09c      	sub	sp, #112	; 0x70
 800771c:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800771e:	2300      	movs	r3, #0
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007726:	2228      	movs	r2, #40	; 0x28
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f004 ffa7 	bl	800c67e <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007730:	4b67      	ldr	r3, [pc, #412]	; (80078d0 <mergeData+0x1b8>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	713b      	strb	r3, [r7, #4]
 8007736:	4b67      	ldr	r3, [pc, #412]	; (80078d4 <mergeData+0x1bc>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	717b      	strb	r3, [r7, #5]
 800773c:	4b66      	ldr	r3, [pc, #408]	; (80078d8 <mergeData+0x1c0>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	71bb      	strb	r3, [r7, #6]
 8007742:	4b66      	ldr	r3, [pc, #408]	; (80078dc <mergeData+0x1c4>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	71fb      	strb	r3, [r7, #7]
 8007748:	4b65      	ldr	r3, [pc, #404]	; (80078e0 <mergeData+0x1c8>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	723b      	strb	r3, [r7, #8]
 800774e:	4b65      	ldr	r3, [pc, #404]	; (80078e4 <mergeData+0x1cc>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	727b      	strb	r3, [r7, #9]
 8007754:	4b64      	ldr	r3, [pc, #400]	; (80078e8 <mergeData+0x1d0>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	72bb      	strb	r3, [r7, #10]
 800775a:	4b64      	ldr	r3, [pc, #400]	; (80078ec <mergeData+0x1d4>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	72fb      	strb	r3, [r7, #11]
 8007760:	4b63      	ldr	r3, [pc, #396]	; (80078f0 <mergeData+0x1d8>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	733b      	strb	r3, [r7, #12]
 8007766:	4b63      	ldr	r3, [pc, #396]	; (80078f4 <mergeData+0x1dc>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	737b      	strb	r3, [r7, #13]
 800776c:	4b62      	ldr	r3, [pc, #392]	; (80078f8 <mergeData+0x1e0>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	73bb      	strb	r3, [r7, #14]
 8007772:	4b62      	ldr	r3, [pc, #392]	; (80078fc <mergeData+0x1e4>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	73fb      	strb	r3, [r7, #15]
 8007778:	4b61      	ldr	r3, [pc, #388]	; (8007900 <mergeData+0x1e8>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	743b      	strb	r3, [r7, #16]
 800777e:	4b61      	ldr	r3, [pc, #388]	; (8007904 <mergeData+0x1ec>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	747b      	strb	r3, [r7, #17]
 8007784:	4b60      	ldr	r3, [pc, #384]	; (8007908 <mergeData+0x1f0>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	74bb      	strb	r3, [r7, #18]
 800778a:	4b60      	ldr	r3, [pc, #384]	; (800790c <mergeData+0x1f4>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	74fb      	strb	r3, [r7, #19]
 8007790:	4b5f      	ldr	r3, [pc, #380]	; (8007910 <mergeData+0x1f8>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	753b      	strb	r3, [r7, #20]
 8007796:	4b5f      	ldr	r3, [pc, #380]	; (8007914 <mergeData+0x1fc>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	757b      	strb	r3, [r7, #21]
 800779c:	4b5e      	ldr	r3, [pc, #376]	; (8007918 <mergeData+0x200>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	75bb      	strb	r3, [r7, #22]
 80077a2:	4b5e      	ldr	r3, [pc, #376]	; (800791c <mergeData+0x204>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	75fb      	strb	r3, [r7, #23]
 80077a8:	4b5d      	ldr	r3, [pc, #372]	; (8007920 <mergeData+0x208>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	763b      	strb	r3, [r7, #24]
 80077ae:	4b5d      	ldr	r3, [pc, #372]	; (8007924 <mergeData+0x20c>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	767b      	strb	r3, [r7, #25]
 80077b4:	4b5c      	ldr	r3, [pc, #368]	; (8007928 <mergeData+0x210>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	76bb      	strb	r3, [r7, #26]
 80077ba:	4b5c      	ldr	r3, [pc, #368]	; (800792c <mergeData+0x214>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	76fb      	strb	r3, [r7, #27]
 80077c0:	4b5b      	ldr	r3, [pc, #364]	; (8007930 <mergeData+0x218>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	773b      	strb	r3, [r7, #28]
 80077c6:	4b5b      	ldr	r3, [pc, #364]	; (8007934 <mergeData+0x21c>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	777b      	strb	r3, [r7, #29]
 80077cc:	4b5a      	ldr	r3, [pc, #360]	; (8007938 <mergeData+0x220>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	77bb      	strb	r3, [r7, #30]
 80077d2:	4b5a      	ldr	r3, [pc, #360]	; (800793c <mergeData+0x224>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	77fb      	strb	r3, [r7, #31]
 80077d8:	4b59      	ldr	r3, [pc, #356]	; (8007940 <mergeData+0x228>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f887 3020 	strb.w	r3, [r7, #32]
 80077e0:	4b58      	ldr	r3, [pc, #352]	; (8007944 <mergeData+0x22c>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80077e8:	4b57      	ldr	r3, [pc, #348]	; (8007948 <mergeData+0x230>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077f0:	4b56      	ldr	r3, [pc, #344]	; (800794c <mergeData+0x234>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077f8:	4b55      	ldr	r3, [pc, #340]	; (8007950 <mergeData+0x238>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007800:	4b54      	ldr	r3, [pc, #336]	; (8007954 <mergeData+0x23c>)
 8007802:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007806:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800780a:	4b52      	ldr	r3, [pc, #328]	; (8007954 <mergeData+0x23c>)
 800780c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007810:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007814:	4b4f      	ldr	r3, [pc, #316]	; (8007954 <mergeData+0x23c>)
 8007816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800781a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800781e:	4b4d      	ldr	r3, [pc, #308]	; (8007954 <mergeData+0x23c>)
 8007820:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007824:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007828:	4b4a      	ldr	r3, [pc, #296]	; (8007954 <mergeData+0x23c>)
 800782a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800782e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007832:	4b48      	ldr	r3, [pc, #288]	; (8007954 <mergeData+0x23c>)
 8007834:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007838:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 800783c:	4b45      	ldr	r3, [pc, #276]	; (8007954 <mergeData+0x23c>)
 800783e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007846:	4b43      	ldr	r3, [pc, #268]	; (8007954 <mergeData+0x23c>)
 8007848:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800784c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007850:	4b40      	ldr	r3, [pc, #256]	; (8007954 <mergeData+0x23c>)
 8007852:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007856:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 800785a:	4b3e      	ldr	r3, [pc, #248]	; (8007954 <mergeData+0x23c>)
 800785c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007860:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007864:	2306      	movs	r3, #6
 8007866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800786a:	2300      	movs	r3, #0
 800786c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800786e:	e015      	b.n	800789c <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007870:	1d3a      	adds	r2, r7, #4
 8007872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007874:	4413      	add	r3, r2
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800787e:	4936      	ldr	r1, [pc, #216]	; (8007958 <mergeData+0x240>)
 8007880:	4618      	mov	r0, r3
 8007882:	f004 fe8b 	bl	800c59c <siprintf>
	    strcat(combinedString, temp);
 8007886:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800788a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f004 fee5 	bl	800c660 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007898:	3301      	adds	r3, #1
 800789a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800789c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789e:	2b2b      	cmp	r3, #43	; 0x2b
 80078a0:	d9e6      	bls.n	8007870 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80078a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7f8 fcbc 	bl	8000224 <strlen>
 80078ac:	4603      	mov	r3, r0
 80078ae:	3301      	adds	r3, #1
 80078b0:	4618      	mov	r0, r3
 80078b2:	f004 fdbf 	bl	800c434 <malloc>
 80078b6:	4603      	mov	r3, r0
 80078b8:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80078ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078be:	4619      	mov	r1, r3
 80078c0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80078c2:	f004 ff21 	bl	800c708 <strcpy>
	return result;
 80078c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3770      	adds	r7, #112	; 0x70
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000233 	.word	0x20000233
 80078d4:	20000225 	.word	0x20000225
 80078d8:	20000228 	.word	0x20000228
 80078dc:	20000229 	.word	0x20000229
 80078e0:	2000022a 	.word	0x2000022a
 80078e4:	20000231 	.word	0x20000231
 80078e8:	2000022b 	.word	0x2000022b
 80078ec:	2000022c 	.word	0x2000022c
 80078f0:	20000230 	.word	0x20000230
 80078f4:	2000022d 	.word	0x2000022d
 80078f8:	2000023d 	.word	0x2000023d
 80078fc:	2000022e 	.word	0x2000022e
 8007900:	2000023e 	.word	0x2000023e
 8007904:	2000022f 	.word	0x2000022f
 8007908:	2000023f 	.word	0x2000023f
 800790c:	20000232 	.word	0x20000232
 8007910:	20000234 	.word	0x20000234
 8007914:	20000235 	.word	0x20000235
 8007918:	20000236 	.word	0x20000236
 800791c:	20000237 	.word	0x20000237
 8007920:	20000238 	.word	0x20000238
 8007924:	20000239 	.word	0x20000239
 8007928:	2000023a 	.word	0x2000023a
 800792c:	2000023b 	.word	0x2000023b
 8007930:	2000023c 	.word	0x2000023c
 8007934:	20000240 	.word	0x20000240
 8007938:	20000242 	.word	0x20000242
 800793c:	20000221 	.word	0x20000221
 8007940:	20000222 	.word	0x20000222
 8007944:	20000008 	.word	0x20000008
 8007948:	20000009 	.word	0x20000009
 800794c:	20000223 	.word	0x20000223
 8007950:	20000245 	.word	0x20000245
 8007954:	20000128 	.word	0x20000128
 8007958:	0800ddb0 	.word	0x0800ddb0

0800795c <convertAndSendData>:

void convertAndSendData() {
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <convertAndSendData+0x78>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 800796a:	4a1b      	ldr	r2, [pc, #108]	; (80079d8 <convertAndSendData+0x7c>)
 800796c:	2101      	movs	r1, #1
 800796e:	2001      	movs	r0, #1
 8007970:	f000 fa0c 	bl	8007d8c <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007974:	4a19      	ldr	r2, [pc, #100]	; (80079dc <convertAndSendData+0x80>)
 8007976:	2101      	movs	r1, #1
 8007978:	2002      	movs	r0, #2
 800797a:	f000 fa07 	bl	8007d8c <lcd_print>
 800797e:	e009      	b.n	8007994 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007980:	4a17      	ldr	r2, [pc, #92]	; (80079e0 <convertAndSendData+0x84>)
 8007982:	2101      	movs	r1, #1
 8007984:	2001      	movs	r0, #1
 8007986:	f000 fa01 	bl	8007d8c <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 800798a:	4a16      	ldr	r2, [pc, #88]	; (80079e4 <convertAndSendData+0x88>)
 800798c:	2101      	movs	r1, #1
 800798e:	2002      	movs	r0, #2
 8007990:	f000 f9fc 	bl	8007d8c <lcd_print>
	}
	for(int i=0; i<2; i++) {
 8007994:	2300      	movs	r3, #0
 8007996:	607b      	str	r3, [r7, #4]
 8007998:	e00a      	b.n	80079b0 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 800799a:	f7ff febd 	bl	8007718 <mergeData>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	4911      	ldr	r1, [pc, #68]	; (80079e8 <convertAndSendData+0x8c>)
 80079a4:	4811      	ldr	r0, [pc, #68]	; (80079ec <convertAndSendData+0x90>)
 80079a6:	f7f8 ffdf 	bl	8000968 <sendMachineData>
	for(int i=0; i<2; i++) {
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3301      	adds	r3, #1
 80079ae:	607b      	str	r3, [r7, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	ddf1      	ble.n	800799a <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 80079b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079ba:	f000 ff3d 	bl	8008838 <HAL_Delay>
	lcd_clear();
 80079be:	f000 fa11 	bl	8007de4 <lcd_clear>
	HAL_Delay(500);
 80079c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079c6:	f000 ff37 	bl	8008838 <HAL_Delay>
}
 80079ca:	bf00      	nop
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000245 	.word	0x20000245
 80079d8:	0800ddb4 	.word	0x0800ddb4
 80079dc:	0800ddc8 	.word	0x0800ddc8
 80079e0:	0800dddc 	.word	0x0800dddc
 80079e4:	0800ddf0 	.word	0x0800ddf0
 80079e8:	200001a0 	.word	0x200001a0
 80079ec:	20000448 	.word	0x20000448

080079f0 <iotSetup>:

void iotSetup() {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80079f4:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <iotSetup+0x58>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d014      	beq.n	8007a26 <iotSetup+0x36>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 80079fc:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <iotSetup+0x5c>)
 80079fe:	7adb      	ldrb	r3, [r3, #11]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d102      	bne.n	8007a0a <iotSetup+0x1a>
			takeMachineID(0);
 8007a04:	2000      	movs	r0, #0
 8007a06:	f7ff f959 	bl	8006cbc <takeMachineID>
		}

		if(wifiSSID[0] != '\0') {
 8007a0a:	4b11      	ldr	r3, [pc, #68]	; (8007a50 <iotSetup+0x60>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <iotSetup+0x28>
			takeWifiSSID(0);
 8007a12:	2000      	movs	r0, #0
 8007a14:	f7ff fabc 	bl	8006f90 <takeWifiSSID>
		}

		if(wifiPass[0] != '\0') {
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <iotSetup+0x64>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <iotSetup+0x36>
			takeWifiPass(0);
 8007a20:	2000      	movs	r0, #0
 8007a22:	f7ff fc97 	bl	8007354 <takeWifiPass>
		}
	}
	HAL_Delay(500);
 8007a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a2a:	f000 ff05 	bl	8008838 <HAL_Delay>

	//ESP8266_Init(&huart1, "iPhone", "ipek123456");
	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007a2e:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <iotSetup+0x64>)
 8007a30:	4907      	ldr	r1, [pc, #28]	; (8007a50 <iotSetup+0x60>)
 8007a32:	4809      	ldr	r0, [pc, #36]	; (8007a58 <iotSetup+0x68>)
 8007a34:	f7f8 feee 	bl	8000814 <ESP8266_Init>
	HAL_Delay(500);
 8007a38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a3c:	f000 fefc 	bl	8008838 <HAL_Delay>
	convertAndSendData();
 8007a40:	f7ff ff8c 	bl	800795c <convertAndSendData>
}
 8007a44:	bf00      	nop
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000243 	.word	0x20000243
 8007a4c:	200001a0 	.word	0x200001a0
 8007a50:	200001ac 	.word	0x200001ac
 8007a54:	200001c0 	.word	0x200001c0
 8007a58:	20000448 	.word	0x20000448

08007a5c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	4603      	mov	r3, r0
 8007a64:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	f023 030f 	bic.w	r3, r3, #15
 8007a6c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007a74:	7b7b      	ldrb	r3, [r7, #13]
 8007a76:	f043 030c 	orr.w	r3, r3, #12
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007a7e:	7b7b      	ldrb	r3, [r7, #13]
 8007a80:	f043 0308 	orr.w	r3, r3, #8
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007a88:	7b3b      	ldrb	r3, [r7, #12]
 8007a8a:	f043 030c 	orr.w	r3, r3, #12
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007a92:	7b3b      	ldrb	r3, [r7, #12]
 8007a94:	f043 0308 	orr.w	r3, r3, #8
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a9c:	bf00      	nop
 8007a9e:	4825      	ldr	r0, [pc, #148]	; (8007b34 <lcd_send_cmd+0xd8>)
 8007aa0:	f002 fac3 	bl	800a02a <HAL_I2C_GetError>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d0f9      	beq.n	8007a9e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007aaa:	bf00      	nop
 8007aac:	4821      	ldr	r0, [pc, #132]	; (8007b34 <lcd_send_cmd+0xd8>)
 8007aae:	f002 faaf 	bl	800a010 <HAL_I2C_GetState>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b20      	cmp	r3, #32
 8007ab6:	d1f9      	bne.n	8007aac <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007ab8:	4b1f      	ldr	r3, [pc, #124]	; (8007b38 <lcd_send_cmd+0xdc>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d116      	bne.n	8007aee <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
 8007ac4:	e00f      	b.n	8007ae6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	3310      	adds	r3, #16
 8007aca:	443b      	add	r3, r7
 8007acc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	f022 0208 	bic.w	r2, r2, #8
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	3310      	adds	r3, #16
 8007ada:	443b      	add	r3, r7
 8007adc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	73fb      	strb	r3, [r7, #15]
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d9ec      	bls.n	8007ac6 <lcd_send_cmd+0x6a>
 8007aec:	e015      	b.n	8007b1a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007aee:	2300      	movs	r3, #0
 8007af0:	73bb      	strb	r3, [r7, #14]
 8007af2:	e00f      	b.n	8007b14 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	3310      	adds	r3, #16
 8007af8:	443b      	add	r3, r7
 8007afa:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	f042 0208 	orr.w	r2, r2, #8
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	3310      	adds	r3, #16
 8007b08:	443b      	add	r3, r7
 8007b0a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	3301      	adds	r3, #1
 8007b12:	73bb      	strb	r3, [r7, #14]
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d9ec      	bls.n	8007af4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b1a:	f107 0208 	add.w	r2, r7, #8
 8007b1e:	2364      	movs	r3, #100	; 0x64
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	2304      	movs	r3, #4
 8007b24:	214e      	movs	r1, #78	; 0x4e
 8007b26:	4803      	ldr	r0, [pc, #12]	; (8007b34 <lcd_send_cmd+0xd8>)
 8007b28:	f001 fe12 	bl	8009750 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	200003ac 	.word	0x200003ac
 8007b38:	20000382 	.word	0x20000382

08007b3c <lcd_send_data>:

void lcd_send_data (char data) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	f023 030f 	bic.w	r3, r3, #15
 8007b4c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b54:	7b7b      	ldrb	r3, [r7, #13]
 8007b56:	f043 030d 	orr.w	r3, r3, #13
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b5e:	7b7b      	ldrb	r3, [r7, #13]
 8007b60:	f043 0309 	orr.w	r3, r3, #9
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b68:	7b3b      	ldrb	r3, [r7, #12]
 8007b6a:	f043 030d 	orr.w	r3, r3, #13
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007b72:	7b3b      	ldrb	r3, [r7, #12]
 8007b74:	f043 0309 	orr.w	r3, r3, #9
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b7c:	bf00      	nop
 8007b7e:	4825      	ldr	r0, [pc, #148]	; (8007c14 <lcd_send_data+0xd8>)
 8007b80:	f002 fa53 	bl	800a02a <HAL_I2C_GetError>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d0f9      	beq.n	8007b7e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b8a:	bf00      	nop
 8007b8c:	4821      	ldr	r0, [pc, #132]	; (8007c14 <lcd_send_data+0xd8>)
 8007b8e:	f002 fa3f 	bl	800a010 <HAL_I2C_GetState>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b20      	cmp	r3, #32
 8007b96:	d1f9      	bne.n	8007b8c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b98:	4b1f      	ldr	r3, [pc, #124]	; (8007c18 <lcd_send_data+0xdc>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d116      	bne.n	8007bce <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
 8007ba4:	e00f      	b.n	8007bc6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	3310      	adds	r3, #16
 8007baa:	443b      	add	r3, r7
 8007bac:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	f022 0208 	bic.w	r2, r2, #8
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	3310      	adds	r3, #16
 8007bba:	443b      	add	r3, r7
 8007bbc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d9ec      	bls.n	8007ba6 <lcd_send_data+0x6a>
 8007bcc:	e015      	b.n	8007bfa <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73bb      	strb	r3, [r7, #14]
 8007bd2:	e00f      	b.n	8007bf4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	3310      	adds	r3, #16
 8007bd8:	443b      	add	r3, r7
 8007bda:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	f042 0208 	orr.w	r2, r2, #8
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	3310      	adds	r3, #16
 8007be8:	443b      	add	r3, r7
 8007bea:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	73bb      	strb	r3, [r7, #14]
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d9ec      	bls.n	8007bd4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007bfa:	f107 0208 	add.w	r2, r7, #8
 8007bfe:	2364      	movs	r3, #100	; 0x64
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	2304      	movs	r3, #4
 8007c04:	214e      	movs	r1, #78	; 0x4e
 8007c06:	4803      	ldr	r0, [pc, #12]	; (8007c14 <lcd_send_data+0xd8>)
 8007c08:	f001 fda2 	bl	8009750 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007c0c:	bf00      	nop
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	200003ac 	.word	0x200003ac
 8007c18:	20000382 	.word	0x20000382

08007c1c <lcd_send_string>:

void lcd_send_string (char *str) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007c24:	e006      	b.n	8007c34 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff ff84 	bl	8007b3c <lcd_send_data>
	while (*str) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f4      	bne.n	8007c26 <lcd_send_string+0xa>
	}
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	4603      	mov	r3, r0
 8007c50:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	f023 030f 	bic.w	r3, r3, #15
 8007c58:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	011b      	lsls	r3, r3, #4
 8007c5e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c60:	7b7b      	ldrb	r3, [r7, #13]
 8007c62:	f043 030d 	orr.w	r3, r3, #13
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c6a:	7b7b      	ldrb	r3, [r7, #13]
 8007c6c:	f043 0309 	orr.w	r3, r3, #9
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007c74:	7b3b      	ldrb	r3, [r7, #12]
 8007c76:	f043 030d 	orr.w	r3, r3, #13
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007c7e:	7b3b      	ldrb	r3, [r7, #12]
 8007c80:	f043 0309 	orr.w	r3, r3, #9
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c88:	bf00      	nop
 8007c8a:	4825      	ldr	r0, [pc, #148]	; (8007d20 <lcd_send_char+0xd8>)
 8007c8c:	f002 f9cd 	bl	800a02a <HAL_I2C_GetError>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d0f9      	beq.n	8007c8a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c96:	bf00      	nop
 8007c98:	4821      	ldr	r0, [pc, #132]	; (8007d20 <lcd_send_char+0xd8>)
 8007c9a:	f002 f9b9 	bl	800a010 <HAL_I2C_GetState>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d1f9      	bne.n	8007c98 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007ca4:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <lcd_send_char+0xdc>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d116      	bne.n	8007cda <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]
 8007cb0:	e00f      	b.n	8007cd2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	3310      	adds	r3, #16
 8007cb6:	443b      	add	r3, r7
 8007cb8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	f022 0208 	bic.w	r2, r2, #8
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	3310      	adds	r3, #16
 8007cc6:	443b      	add	r3, r7
 8007cc8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	73fb      	strb	r3, [r7, #15]
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d9ec      	bls.n	8007cb2 <lcd_send_char+0x6a>
 8007cd8:	e015      	b.n	8007d06 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73bb      	strb	r3, [r7, #14]
 8007cde:	e00f      	b.n	8007d00 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
 8007ce2:	3310      	adds	r3, #16
 8007ce4:	443b      	add	r3, r7
 8007ce6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	f042 0208 	orr.w	r2, r2, #8
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	3310      	adds	r3, #16
 8007cf4:	443b      	add	r3, r7
 8007cf6:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	73bb      	strb	r3, [r7, #14]
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d9ec      	bls.n	8007ce0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007d06:	f107 0208 	add.w	r2, r7, #8
 8007d0a:	2364      	movs	r3, #100	; 0x64
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	2304      	movs	r3, #4
 8007d10:	214e      	movs	r1, #78	; 0x4e
 8007d12:	4803      	ldr	r0, [pc, #12]	; (8007d20 <lcd_send_char+0xd8>)
 8007d14:	f001 fd1c 	bl	8009750 <HAL_I2C_Master_Transmit>
}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	200003ac 	.word	0x200003ac
 8007d24:	20000382 	.word	0x20000382

08007d28 <lcd_init>:

void lcd_init (void) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007d2c:	2002      	movs	r0, #2
 8007d2e:	f7ff fe95 	bl	8007a5c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007d32:	2028      	movs	r0, #40	; 0x28
 8007d34:	f7ff fe92 	bl	8007a5c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007d38:	200c      	movs	r0, #12
 8007d3a:	f7ff fe8f 	bl	8007a5c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007d3e:	2080      	movs	r0, #128	; 0x80
 8007d40:	f7ff fe8c 	bl	8007a5c <lcd_send_cmd>
	lcd_backlight(1);
 8007d44:	2001      	movs	r0, #1
 8007d46:	f000 f86d 	bl	8007e24 <lcd_backlight>
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	4603      	mov	r3, r0
 8007d56:	460a      	mov	r2, r1
 8007d58:	71fb      	strb	r3, [r7, #7]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d106      	bne.n	8007d72 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d64:	79bb      	ldrb	r3, [r7, #6]
 8007d66:	337f      	adds	r3, #127	; 0x7f
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fe76 	bl	8007a5c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007d70:	e008      	b.n	8007d84 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d105      	bne.n	8007d84 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d78:	79bb      	ldrb	r3, [r7, #6]
 8007d7a:	3b41      	subs	r3, #65	; 0x41
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff fe6c 	bl	8007a5c <lcd_send_cmd>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	603a      	str	r2, [r7, #0]
 8007d96:	71fb      	strb	r3, [r7, #7]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007d9c:	79ba      	ldrb	r2, [r7, #6]
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	4611      	mov	r1, r2
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff ffd3 	bl	8007d4e <lcd_gotoxy>
	lcd_send_string(str);
 8007da8:	6838      	ldr	r0, [r7, #0]
 8007daa:	f7ff ff37 	bl	8007c1c <lcd_send_string>
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	71fb      	strb	r3, [r7, #7]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	71bb      	strb	r3, [r7, #6]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007dc8:	79ba      	ldrb	r2, [r7, #6]
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	4611      	mov	r1, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff ffbd 	bl	8007d4e <lcd_gotoxy>
    lcd_send_char(ch);
 8007dd4:	797b      	ldrb	r3, [r7, #5]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff ff36 	bl	8007c48 <lcd_send_char>
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <lcd_clear>:

void lcd_clear(void) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007de8:	2001      	movs	r0, #1
 8007dea:	f7ff fe37 	bl	8007a5c <lcd_send_cmd>
    HAL_Delay(2);
 8007dee:	2002      	movs	r0, #2
 8007df0:	f000 fd22 	bl	8008838 <HAL_Delay>
}
 8007df4:	bf00      	nop
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	460a      	mov	r2, r1
 8007e02:	71fb      	strb	r3, [r7, #7]
 8007e04:	4613      	mov	r3, r2
 8007e06:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007e08:	79ba      	ldrb	r2, [r7, #6]
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff ff9d 	bl	8007d4e <lcd_gotoxy>

    lcd_send_char(' ');
 8007e14:	2020      	movs	r0, #32
 8007e16:	f7ff ff17 	bl	8007c48 <lcd_send_char>
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007e2e:	4a05      	ldr	r2, [pc, #20]	; (8007e44 <lcd_backlight+0x20>)
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007e34:	2000      	movs	r0, #0
 8007e36:	f7ff fe11 	bl	8007a5c <lcd_send_cmd>
}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20000382 	.word	0x20000382

08007e48 <lcd_cursor>:

void lcd_cursor(int state) {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d106      	bne.n	8007e64 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e56:	200e      	movs	r0, #14
 8007e58:	f7ff fe00 	bl	8007a5c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e5c:	200f      	movs	r0, #15
 8007e5e:	f7ff fdfd 	bl	8007a5c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e62:	e002      	b.n	8007e6a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e64:	200c      	movs	r0, #12
 8007e66:	f7ff fdf9 	bl	8007a5c <lcd_send_cmd>
}
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007e7c:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	4a03      	ldr	r2, [pc, #12]	; (8007e90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e84:	6013      	str	r3, [r2, #0]
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr
 8007e90:	20000200 	.word	0x20000200

08007e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e98:	f000 fc6c 	bl	8008774 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007e9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ea0:	f000 fcca 	bl	8008838 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ea4:	f000 f89c 	bl	8007fe0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ea8:	f000 f9be 	bl	8008228 <MX_GPIO_Init>
  MX_CAN_Init();
 8007eac:	f000 f8de 	bl	800806c <MX_CAN_Init>
  MX_I2C1_Init();
 8007eb0:	f000 f910 	bl	80080d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007eb4:	f000 f93c 	bl	8008130 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007eb8:	f000 f98c 	bl	80081d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	2140      	movs	r1, #64	; 0x40
 8007ec0:	483e      	ldr	r0, [pc, #248]	; (8007fbc <main+0x128>)
 8007ec2:	f001 faa0 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	2180      	movs	r1, #128	; 0x80
 8007eca:	483c      	ldr	r0, [pc, #240]	; (8007fbc <main+0x128>)
 8007ecc:	f001 fa9b 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007ed0:	200a      	movs	r0, #10
 8007ed2:	f000 fcb1 	bl	8008838 <HAL_Delay>
  lcd_init();
 8007ed6:	f7ff ff27 	bl	8007d28 <lcd_init>
  HAL_Delay(10);
 8007eda:	200a      	movs	r0, #10
 8007edc:	f000 fcac 	bl	8008838 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007ee0:	4837      	ldr	r0, [pc, #220]	; (8007fc0 <main+0x12c>)
 8007ee2:	f003 f943 	bl	800b16c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ee6:	bf00      	nop
 8007ee8:	4836      	ldr	r0, [pc, #216]	; (8007fc4 <main+0x130>)
 8007eea:	f002 f89e 	bl	800a02a <HAL_I2C_GetError>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d0f9      	beq.n	8007ee8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ef4:	bf00      	nop
 8007ef6:	4833      	ldr	r0, [pc, #204]	; (8007fc4 <main+0x130>)
 8007ef8:	f002 f88a 	bl	800a010 <HAL_I2C_GetState>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d1f9      	bne.n	8007ef6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f02:	2200      	movs	r2, #0
 8007f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f08:	482c      	ldr	r0, [pc, #176]	; (8007fbc <main+0x128>)
 8007f0a:	f001 fa7c 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f14:	4829      	ldr	r0, [pc, #164]	; (8007fbc <main+0x128>)
 8007f16:	f001 fa76 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2104      	movs	r1, #4
 8007f1e:	4827      	ldr	r0, [pc, #156]	; (8007fbc <main+0x128>)
 8007f20:	f001 fa71 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2102      	movs	r1, #2
 8007f28:	4824      	ldr	r0, [pc, #144]	; (8007fbc <main+0x128>)
 8007f2a:	f001 fa6c 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2101      	movs	r1, #1
 8007f32:	4822      	ldr	r0, [pc, #136]	; (8007fbc <main+0x128>)
 8007f34:	f001 fa67 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2120      	movs	r1, #32
 8007f3c:	4822      	ldr	r0, [pc, #136]	; (8007fc8 <main+0x134>)
 8007f3e:	f001 fa62 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f42:	2200      	movs	r2, #0
 8007f44:	2110      	movs	r1, #16
 8007f46:	4820      	ldr	r0, [pc, #128]	; (8007fc8 <main+0x134>)
 8007f48:	f001 fa5d 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2180      	movs	r1, #128	; 0x80
 8007f50:	481e      	ldr	r0, [pc, #120]	; (8007fcc <main+0x138>)
 8007f52:	f001 fa58 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f56:	2200      	movs	r2, #0
 8007f58:	2140      	movs	r1, #64	; 0x40
 8007f5a:	481c      	ldr	r0, [pc, #112]	; (8007fcc <main+0x138>)
 8007f5c:	f001 fa53 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f60:	2200      	movs	r2, #0
 8007f62:	2120      	movs	r1, #32
 8007f64:	4819      	ldr	r0, [pc, #100]	; (8007fcc <main+0x138>)
 8007f66:	f001 fa4e 	bl	8009406 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2110      	movs	r1, #16
 8007f6e:	4817      	ldr	r0, [pc, #92]	; (8007fcc <main+0x138>)
 8007f70:	f001 fa49 	bl	8009406 <HAL_GPIO_WritePin>

  i2cTest();
 8007f74:	f7f8 fed8 	bl	8000d28 <i2cTest>
  HAL_Delay(100);
 8007f78:	2064      	movs	r0, #100	; 0x64
 8007f7a:	f000 fc5d 	bl	8008838 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007f7e:	4a14      	ldr	r2, [pc, #80]	; (8007fd0 <main+0x13c>)
 8007f80:	2101      	movs	r1, #1
 8007f82:	2001      	movs	r0, #1
 8007f84:	f7ff ff02 	bl	8007d8c <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007f88:	4a12      	ldr	r2, [pc, #72]	; (8007fd4 <main+0x140>)
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	2002      	movs	r0, #2
 8007f8e:	f7ff fefd 	bl	8007d8c <lcd_print>
  HAL_Delay(1000);
 8007f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f96:	f000 fc4f 	bl	8008838 <HAL_Delay>
  lcd_clear();
 8007f9a:	f7ff ff23 	bl	8007de4 <lcd_clear>

  eepromKontrol();
 8007f9e:	f7f8 f949 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007fa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fa6:	f000 fc47 	bl	8008838 <HAL_Delay>

  backLightTimer = millis;
 8007faa:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <main+0x144>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a0b      	ldr	r2, [pc, #44]	; (8007fdc <main+0x148>)
 8007fb0:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007fb2:	f7ff fd1d 	bl	80079f0 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007fb6:	f7fe fce9 	bl	800698c <mainLoop>
 8007fba:	e7fc      	b.n	8007fb6 <main+0x122>
 8007fbc:	40010c00 	.word	0x40010c00
 8007fc0:	20000400 	.word	0x20000400
 8007fc4:	200003ac 	.word	0x200003ac
 8007fc8:	40011000 	.word	0x40011000
 8007fcc:	40010800 	.word	0x40010800
 8007fd0:	0800de04 	.word	0x0800de04
 8007fd4:	0800de18 	.word	0x0800de18
 8007fd8:	20000200 	.word	0x20000200
 8007fdc:	2000021c 	.word	0x2000021c

08007fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b090      	sub	sp, #64	; 0x40
 8007fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fe6:	f107 0318 	add.w	r3, r7, #24
 8007fea:	2228      	movs	r2, #40	; 0x28
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f004 fb45 	bl	800c67e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ff4:	1d3b      	adds	r3, r7, #4
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	605a      	str	r2, [r3, #4]
 8007ffc:	609a      	str	r2, [r3, #8]
 8007ffe:	60da      	str	r2, [r3, #12]
 8008000:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008002:	2301      	movs	r3, #1
 8008004:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800800a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800800c:	2300      	movs	r3, #0
 800800e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008010:	2301      	movs	r3, #1
 8008012:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008014:	2302      	movs	r3, #2
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800801c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800801e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008024:	f107 0318 	add.w	r3, r7, #24
 8008028:	4618      	mov	r0, r3
 800802a:	f002 fc3f 	bl	800a8ac <HAL_RCC_OscConfig>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008034:	f000 f9a2 	bl	800837c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008038:	230f      	movs	r3, #15
 800803a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800803c:	2302      	movs	r3, #2
 800803e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008048:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800804e:	1d3b      	adds	r3, r7, #4
 8008050:	2102      	movs	r1, #2
 8008052:	4618      	mov	r0, r3
 8008054:	f002 feac 	bl	800adb0 <HAL_RCC_ClockConfig>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800805e:	f000 f98d 	bl	800837c <Error_Handler>
  }
}
 8008062:	bf00      	nop
 8008064:	3740      	adds	r7, #64	; 0x40
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008070:	4b16      	ldr	r3, [pc, #88]	; (80080cc <MX_CAN_Init+0x60>)
 8008072:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <MX_CAN_Init+0x64>)
 8008074:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008076:	4b15      	ldr	r3, [pc, #84]	; (80080cc <MX_CAN_Init+0x60>)
 8008078:	2210      	movs	r2, #16
 800807a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800807c:	4b13      	ldr	r3, [pc, #76]	; (80080cc <MX_CAN_Init+0x60>)
 800807e:	2200      	movs	r2, #0
 8008080:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <MX_CAN_Init+0x60>)
 8008084:	2200      	movs	r2, #0
 8008086:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008088:	4b10      	ldr	r3, [pc, #64]	; (80080cc <MX_CAN_Init+0x60>)
 800808a:	2200      	movs	r2, #0
 800808c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <MX_CAN_Init+0x60>)
 8008090:	2200      	movs	r2, #0
 8008092:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008094:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <MX_CAN_Init+0x60>)
 8008096:	2200      	movs	r2, #0
 8008098:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800809a:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <MX_CAN_Init+0x60>)
 800809c:	2200      	movs	r2, #0
 800809e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80080a0:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <MX_CAN_Init+0x60>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <MX_CAN_Init+0x60>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <MX_CAN_Init+0x60>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80080b2:	4b06      	ldr	r3, [pc, #24]	; (80080cc <MX_CAN_Init+0x60>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80080b8:	4804      	ldr	r0, [pc, #16]	; (80080cc <MX_CAN_Init+0x60>)
 80080ba:	f000 fbe1 	bl	8008880 <HAL_CAN_Init>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80080c4:	f000 f95a 	bl	800837c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80080c8:	bf00      	nop
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20000384 	.word	0x20000384
 80080d0:	40006400 	.word	0x40006400

080080d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80080d8:	4b12      	ldr	r3, [pc, #72]	; (8008124 <MX_I2C1_Init+0x50>)
 80080da:	4a13      	ldr	r2, [pc, #76]	; (8008128 <MX_I2C1_Init+0x54>)
 80080dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80080de:	4b11      	ldr	r3, [pc, #68]	; (8008124 <MX_I2C1_Init+0x50>)
 80080e0:	4a12      	ldr	r2, [pc, #72]	; (800812c <MX_I2C1_Init+0x58>)
 80080e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <MX_I2C1_Init+0x50>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80080ea:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <MX_I2C1_Init+0x50>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80080f0:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <MX_I2C1_Init+0x50>)
 80080f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <MX_I2C1_Init+0x50>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <MX_I2C1_Init+0x50>)
 8008100:	2200      	movs	r2, #0
 8008102:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008104:	4b07      	ldr	r3, [pc, #28]	; (8008124 <MX_I2C1_Init+0x50>)
 8008106:	2200      	movs	r2, #0
 8008108:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <MX_I2C1_Init+0x50>)
 800810c:	2200      	movs	r2, #0
 800810e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008110:	4804      	ldr	r0, [pc, #16]	; (8008124 <MX_I2C1_Init+0x50>)
 8008112:	f001 f9a9 	bl	8009468 <HAL_I2C_Init>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800811c:	f000 f92e 	bl	800837c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008120:	bf00      	nop
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200003ac 	.word	0x200003ac
 8008128:	40005400 	.word	0x40005400
 800812c:	00061a80 	.word	0x00061a80

08008130 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008136:	f107 0308 	add.w	r3, r7, #8
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008144:	463b      	mov	r3, r7
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800814c:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <MX_TIM1_Init+0x9c>)
 800814e:	4a20      	ldr	r2, [pc, #128]	; (80081d0 <MX_TIM1_Init+0xa0>)
 8008150:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008152:	4b1e      	ldr	r3, [pc, #120]	; (80081cc <MX_TIM1_Init+0x9c>)
 8008154:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008158:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800815a:	4b1c      	ldr	r3, [pc, #112]	; (80081cc <MX_TIM1_Init+0x9c>)
 800815c:	2200      	movs	r2, #0
 800815e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008160:	4b1a      	ldr	r3, [pc, #104]	; (80081cc <MX_TIM1_Init+0x9c>)
 8008162:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008166:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008168:	4b18      	ldr	r3, [pc, #96]	; (80081cc <MX_TIM1_Init+0x9c>)
 800816a:	2200      	movs	r2, #0
 800816c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800816e:	4b17      	ldr	r3, [pc, #92]	; (80081cc <MX_TIM1_Init+0x9c>)
 8008170:	2200      	movs	r2, #0
 8008172:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008174:	4b15      	ldr	r3, [pc, #84]	; (80081cc <MX_TIM1_Init+0x9c>)
 8008176:	2200      	movs	r2, #0
 8008178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800817a:	4814      	ldr	r0, [pc, #80]	; (80081cc <MX_TIM1_Init+0x9c>)
 800817c:	f002 ffa6 	bl	800b0cc <HAL_TIM_Base_Init>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008186:	f000 f8f9 	bl	800837c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800818a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800818e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008190:	f107 0308 	add.w	r3, r7, #8
 8008194:	4619      	mov	r1, r3
 8008196:	480d      	ldr	r0, [pc, #52]	; (80081cc <MX_TIM1_Init+0x9c>)
 8008198:	f003 f950 	bl	800b43c <HAL_TIM_ConfigClockSource>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80081a2:	f000 f8eb 	bl	800837c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081a6:	2300      	movs	r3, #0
 80081a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80081ae:	463b      	mov	r3, r7
 80081b0:	4619      	mov	r1, r3
 80081b2:	4806      	ldr	r0, [pc, #24]	; (80081cc <MX_TIM1_Init+0x9c>)
 80081b4:	f003 fb3e 	bl	800b834 <HAL_TIMEx_MasterConfigSynchronization>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80081be:	f000 f8dd 	bl	800837c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80081c2:	bf00      	nop
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000400 	.word	0x20000400
 80081d0:	40012c00 	.word	0x40012c00

080081d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80081d8:	4b11      	ldr	r3, [pc, #68]	; (8008220 <MX_USART1_UART_Init+0x4c>)
 80081da:	4a12      	ldr	r2, [pc, #72]	; (8008224 <MX_USART1_UART_Init+0x50>)
 80081dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80081de:	4b10      	ldr	r3, [pc, #64]	; (8008220 <MX_USART1_UART_Init+0x4c>)
 80081e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80081e6:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <MX_USART1_UART_Init+0x4c>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80081ec:	4b0c      	ldr	r3, [pc, #48]	; (8008220 <MX_USART1_UART_Init+0x4c>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80081f2:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <MX_USART1_UART_Init+0x4c>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80081f8:	4b09      	ldr	r3, [pc, #36]	; (8008220 <MX_USART1_UART_Init+0x4c>)
 80081fa:	220c      	movs	r2, #12
 80081fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081fe:	4b08      	ldr	r3, [pc, #32]	; (8008220 <MX_USART1_UART_Init+0x4c>)
 8008200:	2200      	movs	r2, #0
 8008202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008204:	4b06      	ldr	r3, [pc, #24]	; (8008220 <MX_USART1_UART_Init+0x4c>)
 8008206:	2200      	movs	r2, #0
 8008208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800820a:	4805      	ldr	r0, [pc, #20]	; (8008220 <MX_USART1_UART_Init+0x4c>)
 800820c:	f003 fb90 	bl	800b930 <HAL_UART_Init>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008216:	f000 f8b1 	bl	800837c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800821a:	bf00      	nop
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20000448 	.word	0x20000448
 8008224:	40013800 	.word	0x40013800

08008228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800822e:	f107 0310 	add.w	r3, r7, #16
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	605a      	str	r2, [r3, #4]
 8008238:	609a      	str	r2, [r3, #8]
 800823a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800823c:	4b4b      	ldr	r3, [pc, #300]	; (800836c <MX_GPIO_Init+0x144>)
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	4a4a      	ldr	r2, [pc, #296]	; (800836c <MX_GPIO_Init+0x144>)
 8008242:	f043 0310 	orr.w	r3, r3, #16
 8008246:	6193      	str	r3, [r2, #24]
 8008248:	4b48      	ldr	r3, [pc, #288]	; (800836c <MX_GPIO_Init+0x144>)
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f003 0310 	and.w	r3, r3, #16
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008254:	4b45      	ldr	r3, [pc, #276]	; (800836c <MX_GPIO_Init+0x144>)
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	4a44      	ldr	r2, [pc, #272]	; (800836c <MX_GPIO_Init+0x144>)
 800825a:	f043 0320 	orr.w	r3, r3, #32
 800825e:	6193      	str	r3, [r2, #24]
 8008260:	4b42      	ldr	r3, [pc, #264]	; (800836c <MX_GPIO_Init+0x144>)
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	60bb      	str	r3, [r7, #8]
 800826a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800826c:	4b3f      	ldr	r3, [pc, #252]	; (800836c <MX_GPIO_Init+0x144>)
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	4a3e      	ldr	r2, [pc, #248]	; (800836c <MX_GPIO_Init+0x144>)
 8008272:	f043 0304 	orr.w	r3, r3, #4
 8008276:	6193      	str	r3, [r2, #24]
 8008278:	4b3c      	ldr	r3, [pc, #240]	; (800836c <MX_GPIO_Init+0x144>)
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008284:	4b39      	ldr	r3, [pc, #228]	; (800836c <MX_GPIO_Init+0x144>)
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	4a38      	ldr	r2, [pc, #224]	; (800836c <MX_GPIO_Init+0x144>)
 800828a:	f043 0308 	orr.w	r3, r3, #8
 800828e:	6193      	str	r3, [r2, #24]
 8008290:	4b36      	ldr	r3, [pc, #216]	; (800836c <MX_GPIO_Init+0x144>)
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f003 0308 	and.w	r3, r3, #8
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800829c:	2200      	movs	r2, #0
 800829e:	21f0      	movs	r1, #240	; 0xf0
 80082a0:	4833      	ldr	r0, [pc, #204]	; (8008370 <MX_GPIO_Init+0x148>)
 80082a2:	f001 f8b0 	bl	8009406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80082a6:	2200      	movs	r2, #0
 80082a8:	f241 0130 	movw	r1, #4144	; 0x1030
 80082ac:	4831      	ldr	r0, [pc, #196]	; (8008374 <MX_GPIO_Init+0x14c>)
 80082ae:	f001 f8aa 	bl	8009406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082b2:	2200      	movs	r2, #0
 80082b4:	f640 4107 	movw	r1, #3079	; 0xc07
 80082b8:	482f      	ldr	r0, [pc, #188]	; (8008378 <MX_GPIO_Init+0x150>)
 80082ba:	f001 f8a4 	bl	8009406 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80082be:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80082c2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082cc:	f107 0310 	add.w	r3, r7, #16
 80082d0:	4619      	mov	r1, r3
 80082d2:	4828      	ldr	r0, [pc, #160]	; (8008374 <MX_GPIO_Init+0x14c>)
 80082d4:	f000 fe20 	bl	8008f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80082d8:	f248 130f 	movw	r3, #33039	; 0x810f
 80082dc:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082e6:	f107 0310 	add.w	r3, r7, #16
 80082ea:	4619      	mov	r1, r3
 80082ec:	4820      	ldr	r0, [pc, #128]	; (8008370 <MX_GPIO_Init+0x148>)
 80082ee:	f000 fe13 	bl	8008f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80082f2:	23f0      	movs	r3, #240	; 0xf0
 80082f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082f6:	2301      	movs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082fe:	2302      	movs	r3, #2
 8008300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008302:	f107 0310 	add.w	r3, r7, #16
 8008306:	4619      	mov	r1, r3
 8008308:	4819      	ldr	r0, [pc, #100]	; (8008370 <MX_GPIO_Init+0x148>)
 800830a:	f000 fe05 	bl	8008f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800830e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008314:	2301      	movs	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008318:	2300      	movs	r3, #0
 800831a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800831c:	2302      	movs	r3, #2
 800831e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008320:	f107 0310 	add.w	r3, r7, #16
 8008324:	4619      	mov	r1, r3
 8008326:	4813      	ldr	r0, [pc, #76]	; (8008374 <MX_GPIO_Init+0x14c>)
 8008328:	f000 fdf6 	bl	8008f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800832c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008330:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008332:	2301      	movs	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008336:	2300      	movs	r3, #0
 8008338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800833a:	2302      	movs	r3, #2
 800833c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800833e:	f107 0310 	add.w	r3, r7, #16
 8008342:	4619      	mov	r1, r3
 8008344:	480c      	ldr	r0, [pc, #48]	; (8008378 <MX_GPIO_Init+0x150>)
 8008346:	f000 fde7 	bl	8008f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800834a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800834e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008354:	2300      	movs	r3, #0
 8008356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008358:	f107 0310 	add.w	r3, r7, #16
 800835c:	4619      	mov	r1, r3
 800835e:	4806      	ldr	r0, [pc, #24]	; (8008378 <MX_GPIO_Init+0x150>)
 8008360:	f000 fdda 	bl	8008f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008364:	bf00      	nop
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40021000 	.word	0x40021000
 8008370:	40010800 	.word	0x40010800
 8008374:	40011000 	.word	0x40011000
 8008378:	40010c00 	.word	0x40010c00

0800837c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008380:	bf00      	nop
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr

08008388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800838e:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <HAL_MspInit+0x5c>)
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	4a14      	ldr	r2, [pc, #80]	; (80083e4 <HAL_MspInit+0x5c>)
 8008394:	f043 0301 	orr.w	r3, r3, #1
 8008398:	6193      	str	r3, [r2, #24]
 800839a:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <HAL_MspInit+0x5c>)
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	60bb      	str	r3, [r7, #8]
 80083a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083a6:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <HAL_MspInit+0x5c>)
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	4a0e      	ldr	r2, [pc, #56]	; (80083e4 <HAL_MspInit+0x5c>)
 80083ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b0:	61d3      	str	r3, [r2, #28]
 80083b2:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <HAL_MspInit+0x5c>)
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ba:	607b      	str	r3, [r7, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80083be:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <HAL_MspInit+0x60>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	4a04      	ldr	r2, [pc, #16]	; (80083e8 <HAL_MspInit+0x60>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr
 80083e4:	40021000 	.word	0x40021000
 80083e8:	40010000 	.word	0x40010000

080083ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083f4:	f107 0310 	add.w	r3, r7, #16
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	605a      	str	r2, [r3, #4]
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a1c      	ldr	r2, [pc, #112]	; (8008478 <HAL_CAN_MspInit+0x8c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d131      	bne.n	8008470 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800840c:	4b1b      	ldr	r3, [pc, #108]	; (800847c <HAL_CAN_MspInit+0x90>)
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	4a1a      	ldr	r2, [pc, #104]	; (800847c <HAL_CAN_MspInit+0x90>)
 8008412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008416:	61d3      	str	r3, [r2, #28]
 8008418:	4b18      	ldr	r3, [pc, #96]	; (800847c <HAL_CAN_MspInit+0x90>)
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008424:	4b15      	ldr	r3, [pc, #84]	; (800847c <HAL_CAN_MspInit+0x90>)
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	4a14      	ldr	r2, [pc, #80]	; (800847c <HAL_CAN_MspInit+0x90>)
 800842a:	f043 0304 	orr.w	r3, r3, #4
 800842e:	6193      	str	r3, [r2, #24]
 8008430:	4b12      	ldr	r3, [pc, #72]	; (800847c <HAL_CAN_MspInit+0x90>)
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800843c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008440:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008446:	2300      	movs	r3, #0
 8008448:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800844a:	f107 0310 	add.w	r3, r7, #16
 800844e:	4619      	mov	r1, r3
 8008450:	480b      	ldr	r0, [pc, #44]	; (8008480 <HAL_CAN_MspInit+0x94>)
 8008452:	f000 fd61 	bl	8008f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800845a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845c:	2302      	movs	r3, #2
 800845e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008460:	2303      	movs	r3, #3
 8008462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008464:	f107 0310 	add.w	r3, r7, #16
 8008468:	4619      	mov	r1, r3
 800846a:	4805      	ldr	r0, [pc, #20]	; (8008480 <HAL_CAN_MspInit+0x94>)
 800846c:	f000 fd54 	bl	8008f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008470:	bf00      	nop
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	40006400 	.word	0x40006400
 800847c:	40021000 	.word	0x40021000
 8008480:	40010800 	.word	0x40010800

08008484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800848c:	f107 0310 	add.w	r3, r7, #16
 8008490:	2200      	movs	r2, #0
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	605a      	str	r2, [r3, #4]
 8008496:	609a      	str	r2, [r3, #8]
 8008498:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a15      	ldr	r2, [pc, #84]	; (80084f4 <HAL_I2C_MspInit+0x70>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d123      	bne.n	80084ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084a4:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <HAL_I2C_MspInit+0x74>)
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	4a13      	ldr	r2, [pc, #76]	; (80084f8 <HAL_I2C_MspInit+0x74>)
 80084aa:	f043 0308 	orr.w	r3, r3, #8
 80084ae:	6193      	str	r3, [r2, #24]
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <HAL_I2C_MspInit+0x74>)
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80084bc:	23c0      	movs	r3, #192	; 0xc0
 80084be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084c0:	2312      	movs	r3, #18
 80084c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084c4:	2303      	movs	r3, #3
 80084c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084c8:	f107 0310 	add.w	r3, r7, #16
 80084cc:	4619      	mov	r1, r3
 80084ce:	480b      	ldr	r0, [pc, #44]	; (80084fc <HAL_I2C_MspInit+0x78>)
 80084d0:	f000 fd22 	bl	8008f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80084d4:	4b08      	ldr	r3, [pc, #32]	; (80084f8 <HAL_I2C_MspInit+0x74>)
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	4a07      	ldr	r2, [pc, #28]	; (80084f8 <HAL_I2C_MspInit+0x74>)
 80084da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084de:	61d3      	str	r3, [r2, #28]
 80084e0:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <HAL_I2C_MspInit+0x74>)
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e8:	60bb      	str	r3, [r7, #8]
 80084ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80084ec:	bf00      	nop
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	40005400 	.word	0x40005400
 80084f8:	40021000 	.word	0x40021000
 80084fc:	40010c00 	.word	0x40010c00

08008500 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a0a      	ldr	r2, [pc, #40]	; (8008538 <HAL_I2C_MspDeInit+0x38>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d10d      	bne.n	800852e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008512:	4b0a      	ldr	r3, [pc, #40]	; (800853c <HAL_I2C_MspDeInit+0x3c>)
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	4a09      	ldr	r2, [pc, #36]	; (800853c <HAL_I2C_MspDeInit+0x3c>)
 8008518:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800851c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800851e:	2140      	movs	r1, #64	; 0x40
 8008520:	4807      	ldr	r0, [pc, #28]	; (8008540 <HAL_I2C_MspDeInit+0x40>)
 8008522:	f000 fe8d 	bl	8009240 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008526:	2180      	movs	r1, #128	; 0x80
 8008528:	4805      	ldr	r0, [pc, #20]	; (8008540 <HAL_I2C_MspDeInit+0x40>)
 800852a:	f000 fe89 	bl	8009240 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	40005400 	.word	0x40005400
 800853c:	40021000 	.word	0x40021000
 8008540:	40010c00 	.word	0x40010c00

08008544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a0d      	ldr	r2, [pc, #52]	; (8008588 <HAL_TIM_Base_MspInit+0x44>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d113      	bne.n	800857e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <HAL_TIM_Base_MspInit+0x48>)
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	4a0c      	ldr	r2, [pc, #48]	; (800858c <HAL_TIM_Base_MspInit+0x48>)
 800855c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008560:	6193      	str	r3, [r2, #24]
 8008562:	4b0a      	ldr	r3, [pc, #40]	; (800858c <HAL_TIM_Base_MspInit+0x48>)
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800856e:	2200      	movs	r2, #0
 8008570:	2100      	movs	r1, #0
 8008572:	2019      	movs	r0, #25
 8008574:	f000 fb57 	bl	8008c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008578:	2019      	movs	r0, #25
 800857a:	f000 fb70 	bl	8008c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40012c00 	.word	0x40012c00
 800858c:	40021000 	.word	0x40021000

08008590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008598:	f107 0310 	add.w	r3, r7, #16
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a20      	ldr	r2, [pc, #128]	; (800862c <HAL_UART_MspInit+0x9c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d139      	bne.n	8008624 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085b0:	4b1f      	ldr	r3, [pc, #124]	; (8008630 <HAL_UART_MspInit+0xa0>)
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <HAL_UART_MspInit+0xa0>)
 80085b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085ba:	6193      	str	r3, [r2, #24]
 80085bc:	4b1c      	ldr	r3, [pc, #112]	; (8008630 <HAL_UART_MspInit+0xa0>)
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085c8:	4b19      	ldr	r3, [pc, #100]	; (8008630 <HAL_UART_MspInit+0xa0>)
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	4a18      	ldr	r2, [pc, #96]	; (8008630 <HAL_UART_MspInit+0xa0>)
 80085ce:	f043 0304 	orr.w	r3, r3, #4
 80085d2:	6193      	str	r3, [r2, #24]
 80085d4:	4b16      	ldr	r3, [pc, #88]	; (8008630 <HAL_UART_MspInit+0xa0>)
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	60bb      	str	r3, [r7, #8]
 80085de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e6:	2302      	movs	r3, #2
 80085e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085ea:	2303      	movs	r3, #3
 80085ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ee:	f107 0310 	add.w	r3, r7, #16
 80085f2:	4619      	mov	r1, r3
 80085f4:	480f      	ldr	r0, [pc, #60]	; (8008634 <HAL_UART_MspInit+0xa4>)
 80085f6:	f000 fc8f 	bl	8008f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80085fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008604:	2300      	movs	r3, #0
 8008606:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008608:	f107 0310 	add.w	r3, r7, #16
 800860c:	4619      	mov	r1, r3
 800860e:	4809      	ldr	r0, [pc, #36]	; (8008634 <HAL_UART_MspInit+0xa4>)
 8008610:	f000 fc82 	bl	8008f18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008614:	2200      	movs	r2, #0
 8008616:	2100      	movs	r1, #0
 8008618:	2025      	movs	r0, #37	; 0x25
 800861a:	f000 fb04 	bl	8008c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800861e:	2025      	movs	r0, #37	; 0x25
 8008620:	f000 fb1d 	bl	8008c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008624:	bf00      	nop
 8008626:	3720      	adds	r7, #32
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40013800 	.word	0x40013800
 8008630:	40021000 	.word	0x40021000
 8008634:	40010800 	.word	0x40010800

08008638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800863c:	e7fe      	b.n	800863c <NMI_Handler+0x4>

0800863e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800863e:	b480      	push	{r7}
 8008640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008642:	e7fe      	b.n	8008642 <HardFault_Handler+0x4>

08008644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008648:	e7fe      	b.n	8008648 <MemManage_Handler+0x4>

0800864a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800864a:	b480      	push	{r7}
 800864c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800864e:	e7fe      	b.n	800864e <BusFault_Handler+0x4>

08008650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008654:	e7fe      	b.n	8008654 <UsageFault_Handler+0x4>

08008656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008656:	b480      	push	{r7}
 8008658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800865a:	bf00      	nop
 800865c:	46bd      	mov	sp, r7
 800865e:	bc80      	pop	{r7}
 8008660:	4770      	bx	lr

08008662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008662:	b480      	push	{r7}
 8008664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008666:	bf00      	nop
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr

0800866e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800866e:	b480      	push	{r7}
 8008670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008672:	bf00      	nop
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr

0800867a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800867e:	f000 f8bf 	bl	8008800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008682:	bf00      	nop
 8008684:	bd80      	pop	{r7, pc}
	...

08008688 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800868c:	4802      	ldr	r0, [pc, #8]	; (8008698 <TIM1_UP_IRQHandler+0x10>)
 800868e:	f002 fdcd 	bl	800b22c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008692:	bf00      	nop
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000400 	.word	0x20000400

0800869c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80086a0:	4802      	ldr	r0, [pc, #8]	; (80086ac <USART1_IRQHandler+0x10>)
 80086a2:	f003 f9cb 	bl	800ba3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80086a6:	bf00      	nop
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000448 	.word	0x20000448

080086b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086b8:	4a14      	ldr	r2, [pc, #80]	; (800870c <_sbrk+0x5c>)
 80086ba:	4b15      	ldr	r3, [pc, #84]	; (8008710 <_sbrk+0x60>)
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80086c4:	4b13      	ldr	r3, [pc, #76]	; (8008714 <_sbrk+0x64>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d102      	bne.n	80086d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086cc:	4b11      	ldr	r3, [pc, #68]	; (8008714 <_sbrk+0x64>)
 80086ce:	4a12      	ldr	r2, [pc, #72]	; (8008718 <_sbrk+0x68>)
 80086d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <_sbrk+0x64>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4413      	add	r3, r2
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d207      	bcs.n	80086f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80086e0:	f003 ffe6 	bl	800c6b0 <__errno>
 80086e4:	4603      	mov	r3, r0
 80086e6:	220c      	movs	r2, #12
 80086e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80086ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ee:	e009      	b.n	8008704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80086f0:	4b08      	ldr	r3, [pc, #32]	; (8008714 <_sbrk+0x64>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086f6:	4b07      	ldr	r3, [pc, #28]	; (8008714 <_sbrk+0x64>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	4a05      	ldr	r2, [pc, #20]	; (8008714 <_sbrk+0x64>)
 8008700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008702:	68fb      	ldr	r3, [r7, #12]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	2000c000 	.word	0x2000c000
 8008710:	00000400 	.word	0x00000400
 8008714:	20000490 	.word	0x20000490
 8008718:	200005e0 	.word	0x200005e0

0800871c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008720:	bf00      	nop
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008728:	480c      	ldr	r0, [pc, #48]	; (800875c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800872a:	490d      	ldr	r1, [pc, #52]	; (8008760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800872c:	4a0d      	ldr	r2, [pc, #52]	; (8008764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800872e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008730:	e002      	b.n	8008738 <LoopCopyDataInit>

08008732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008736:	3304      	adds	r3, #4

08008738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800873a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800873c:	d3f9      	bcc.n	8008732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800873e:	4a0a      	ldr	r2, [pc, #40]	; (8008768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008740:	4c0a      	ldr	r4, [pc, #40]	; (800876c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008744:	e001      	b.n	800874a <LoopFillZerobss>

08008746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008748:	3204      	adds	r2, #4

0800874a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800874a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800874c:	d3fb      	bcc.n	8008746 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800874e:	f7ff ffe5 	bl	800871c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008752:	f003 ffb3 	bl	800c6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008756:	f7ff fb9d 	bl	8007e94 <main>
  bx lr
 800875a:	4770      	bx	lr
  ldr r0, =_sdata
 800875c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008760:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8008764:	0800deb8 	.word	0x0800deb8
  ldr r2, =_sbss
 8008768:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 800876c:	200005e0 	.word	0x200005e0

08008770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008770:	e7fe      	b.n	8008770 <ADC1_2_IRQHandler>
	...

08008774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008778:	4b08      	ldr	r3, [pc, #32]	; (800879c <HAL_Init+0x28>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a07      	ldr	r2, [pc, #28]	; (800879c <HAL_Init+0x28>)
 800877e:	f043 0310 	orr.w	r3, r3, #16
 8008782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008784:	2003      	movs	r0, #3
 8008786:	f000 fa43 	bl	8008c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800878a:	200f      	movs	r0, #15
 800878c:	f000 f808 	bl	80087a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008790:	f7ff fdfa 	bl	8008388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	40022000 	.word	0x40022000

080087a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80087a8:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <HAL_InitTick+0x54>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <HAL_InitTick+0x58>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	4619      	mov	r1, r3
 80087b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80087ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fa5b 	bl	8008c7a <HAL_SYSTICK_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e00e      	b.n	80087ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b0f      	cmp	r3, #15
 80087d2:	d80a      	bhi.n	80087ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087d4:	2200      	movs	r2, #0
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087dc:	f000 fa23 	bl	8008c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087e0:	4a06      	ldr	r2, [pc, #24]	; (80087fc <HAL_InitTick+0x5c>)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	e000      	b.n	80087ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200000b0 	.word	0x200000b0
 80087f8:	200000b8 	.word	0x200000b8
 80087fc:	200000b4 	.word	0x200000b4

08008800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008804:	4b05      	ldr	r3, [pc, #20]	; (800881c <HAL_IncTick+0x1c>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	4b05      	ldr	r3, [pc, #20]	; (8008820 <HAL_IncTick+0x20>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4413      	add	r3, r2
 8008810:	4a03      	ldr	r2, [pc, #12]	; (8008820 <HAL_IncTick+0x20>)
 8008812:	6013      	str	r3, [r2, #0]
}
 8008814:	bf00      	nop
 8008816:	46bd      	mov	sp, r7
 8008818:	bc80      	pop	{r7}
 800881a:	4770      	bx	lr
 800881c:	200000b8 	.word	0x200000b8
 8008820:	20000494 	.word	0x20000494

08008824 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  return uwTick;
 8008828:	4b02      	ldr	r3, [pc, #8]	; (8008834 <HAL_GetTick+0x10>)
 800882a:	681b      	ldr	r3, [r3, #0]
}
 800882c:	4618      	mov	r0, r3
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr
 8008834:	20000494 	.word	0x20000494

08008838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008840:	f7ff fff0 	bl	8008824 <HAL_GetTick>
 8008844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008850:	d005      	beq.n	800885e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <HAL_Delay+0x44>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800885e:	bf00      	nop
 8008860:	f7ff ffe0 	bl	8008824 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	429a      	cmp	r2, r3
 800886e:	d8f7      	bhi.n	8008860 <HAL_Delay+0x28>
  {
  }
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	200000b8 	.word	0x200000b8

08008880 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e0ed      	b.n	8008a6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d102      	bne.n	80088a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fda4 	bl	80083ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0201 	orr.w	r2, r2, #1
 80088b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088b4:	f7ff ffb6 	bl	8008824 <HAL_GetTick>
 80088b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088ba:	e012      	b.n	80088e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088bc:	f7ff ffb2 	bl	8008824 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b0a      	cmp	r3, #10
 80088c8:	d90b      	bls.n	80088e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2205      	movs	r2, #5
 80088da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e0c5      	b.n	8008a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0e5      	beq.n	80088bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0202 	bic.w	r2, r2, #2
 80088fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008900:	f7ff ff90 	bl	8008824 <HAL_GetTick>
 8008904:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008906:	e012      	b.n	800892e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008908:	f7ff ff8c 	bl	8008824 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b0a      	cmp	r3, #10
 8008914:	d90b      	bls.n	800892e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2205      	movs	r2, #5
 8008926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e09f      	b.n	8008a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e5      	bne.n	8008908 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	7e1b      	ldrb	r3, [r3, #24]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d108      	bne.n	8008956 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	e007      	b.n	8008966 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	7e5b      	ldrb	r3, [r3, #25]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d108      	bne.n	8008980 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	e007      	b.n	8008990 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800898e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	7e9b      	ldrb	r3, [r3, #26]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d108      	bne.n	80089aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0220 	orr.w	r2, r2, #32
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	e007      	b.n	80089ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 0220 	bic.w	r2, r2, #32
 80089b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7edb      	ldrb	r3, [r3, #27]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d108      	bne.n	80089d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 0210 	bic.w	r2, r2, #16
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	e007      	b.n	80089e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0210 	orr.w	r2, r2, #16
 80089e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	7f1b      	ldrb	r3, [r3, #28]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d108      	bne.n	80089fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0208 	orr.w	r2, r2, #8
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	e007      	b.n	8008a0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0208 	bic.w	r2, r2, #8
 8008a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	7f5b      	ldrb	r3, [r3, #29]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d108      	bne.n	8008a28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 0204 	orr.w	r2, r2, #4
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	e007      	b.n	8008a38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0204 	bic.w	r2, r2, #4
 8008a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	431a      	orrs	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	ea42 0103 	orr.w	r1, r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	1e5a      	subs	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <__NVIC_SetPriorityGrouping>:
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a88:	4b0c      	ldr	r3, [pc, #48]	; (8008abc <__NVIC_SetPriorityGrouping+0x44>)
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a94:	4013      	ands	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008aaa:	4a04      	ldr	r2, [pc, #16]	; (8008abc <__NVIC_SetPriorityGrouping+0x44>)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	60d3      	str	r3, [r2, #12]
}
 8008ab0:	bf00      	nop
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	e000ed00 	.word	0xe000ed00

08008ac0 <__NVIC_GetPriorityGrouping>:
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ac4:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	0a1b      	lsrs	r3, r3, #8
 8008aca:	f003 0307 	and.w	r3, r3, #7
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	e000ed00 	.word	0xe000ed00

08008adc <__NVIC_EnableIRQ>:
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	db0b      	blt.n	8008b06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	f003 021f 	and.w	r2, r3, #31
 8008af4:	4906      	ldr	r1, [pc, #24]	; (8008b10 <__NVIC_EnableIRQ+0x34>)
 8008af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afa:	095b      	lsrs	r3, r3, #5
 8008afc:	2001      	movs	r0, #1
 8008afe:	fa00 f202 	lsl.w	r2, r0, r2
 8008b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bc80      	pop	{r7}
 8008b0e:	4770      	bx	lr
 8008b10:	e000e100 	.word	0xe000e100

08008b14 <__NVIC_SetPriority>:
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	db0a      	blt.n	8008b3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	490c      	ldr	r1, [pc, #48]	; (8008b60 <__NVIC_SetPriority+0x4c>)
 8008b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b32:	0112      	lsls	r2, r2, #4
 8008b34:	b2d2      	uxtb	r2, r2
 8008b36:	440b      	add	r3, r1
 8008b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b3c:	e00a      	b.n	8008b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	4908      	ldr	r1, [pc, #32]	; (8008b64 <__NVIC_SetPriority+0x50>)
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	f003 030f 	and.w	r3, r3, #15
 8008b4a:	3b04      	subs	r3, #4
 8008b4c:	0112      	lsls	r2, r2, #4
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	440b      	add	r3, r1
 8008b52:	761a      	strb	r2, [r3, #24]
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc80      	pop	{r7}
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	e000e100 	.word	0xe000e100
 8008b64:	e000ed00 	.word	0xe000ed00

08008b68 <NVIC_EncodePriority>:
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b089      	sub	sp, #36	; 0x24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	f1c3 0307 	rsb	r3, r3, #7
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	bf28      	it	cs
 8008b86:	2304      	movcs	r3, #4
 8008b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	2b06      	cmp	r3, #6
 8008b90:	d902      	bls.n	8008b98 <NVIC_EncodePriority+0x30>
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	3b03      	subs	r3, #3
 8008b96:	e000      	b.n	8008b9a <NVIC_EncodePriority+0x32>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba6:	43da      	mvns	r2, r3
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	401a      	ands	r2, r3
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bba:	43d9      	mvns	r1, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bc0:	4313      	orrs	r3, r2
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3724      	adds	r7, #36	; 0x24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr

08008bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bdc:	d301      	bcc.n	8008be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008bde:	2301      	movs	r3, #1
 8008be0:	e00f      	b.n	8008c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008be2:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <SysTick_Config+0x40>)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008bea:	210f      	movs	r1, #15
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bf0:	f7ff ff90 	bl	8008b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008bf4:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <SysTick_Config+0x40>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bfa:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <SysTick_Config+0x40>)
 8008bfc:	2207      	movs	r2, #7
 8008bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	e000e010 	.word	0xe000e010

08008c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff ff2d 	bl	8008a78 <__NVIC_SetPriorityGrouping>
}
 8008c1e:	bf00      	nop
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b086      	sub	sp, #24
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	60b9      	str	r1, [r7, #8]
 8008c30:	607a      	str	r2, [r7, #4]
 8008c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c38:	f7ff ff42 	bl	8008ac0 <__NVIC_GetPriorityGrouping>
 8008c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	6978      	ldr	r0, [r7, #20]
 8008c44:	f7ff ff90 	bl	8008b68 <NVIC_EncodePriority>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff ff5f 	bl	8008b14 <__NVIC_SetPriority>
}
 8008c56:	bf00      	nop
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	4603      	mov	r3, r0
 8008c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff ff35 	bl	8008adc <__NVIC_EnableIRQ>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff ffa2 	bl	8008bcc <SysTick_Config>
 8008c88:	4603      	mov	r3, r0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d008      	beq.n	8008cbc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2204      	movs	r2, #4
 8008cae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e020      	b.n	8008cfe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f022 020e 	bic.w	r2, r2, #14
 8008cca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 0201 	bic.w	r2, r2, #1
 8008cda:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8008cea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bc80      	pop	{r7}
 8008d06:	4770      	bx	lr

08008d08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d005      	beq.n	8008d2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2204      	movs	r2, #4
 8008d24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	73fb      	strb	r3, [r7, #15]
 8008d2a:	e0d6      	b.n	8008eda <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 020e 	bic.w	r2, r2, #14
 8008d3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f022 0201 	bic.w	r2, r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	461a      	mov	r2, r3
 8008d52:	4b64      	ldr	r3, [pc, #400]	; (8008ee4 <HAL_DMA_Abort_IT+0x1dc>)
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d958      	bls.n	8008e0a <HAL_DMA_Abort_IT+0x102>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a62      	ldr	r2, [pc, #392]	; (8008ee8 <HAL_DMA_Abort_IT+0x1e0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d04f      	beq.n	8008e02 <HAL_DMA_Abort_IT+0xfa>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a61      	ldr	r2, [pc, #388]	; (8008eec <HAL_DMA_Abort_IT+0x1e4>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d048      	beq.n	8008dfe <HAL_DMA_Abort_IT+0xf6>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a5f      	ldr	r2, [pc, #380]	; (8008ef0 <HAL_DMA_Abort_IT+0x1e8>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d040      	beq.n	8008df8 <HAL_DMA_Abort_IT+0xf0>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a5e      	ldr	r2, [pc, #376]	; (8008ef4 <HAL_DMA_Abort_IT+0x1ec>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d038      	beq.n	8008df2 <HAL_DMA_Abort_IT+0xea>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a5c      	ldr	r2, [pc, #368]	; (8008ef8 <HAL_DMA_Abort_IT+0x1f0>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d030      	beq.n	8008dec <HAL_DMA_Abort_IT+0xe4>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a5b      	ldr	r2, [pc, #364]	; (8008efc <HAL_DMA_Abort_IT+0x1f4>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d028      	beq.n	8008de6 <HAL_DMA_Abort_IT+0xde>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a52      	ldr	r2, [pc, #328]	; (8008ee4 <HAL_DMA_Abort_IT+0x1dc>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d020      	beq.n	8008de0 <HAL_DMA_Abort_IT+0xd8>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a57      	ldr	r2, [pc, #348]	; (8008f00 <HAL_DMA_Abort_IT+0x1f8>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d019      	beq.n	8008ddc <HAL_DMA_Abort_IT+0xd4>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a55      	ldr	r2, [pc, #340]	; (8008f04 <HAL_DMA_Abort_IT+0x1fc>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d012      	beq.n	8008dd8 <HAL_DMA_Abort_IT+0xd0>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a54      	ldr	r2, [pc, #336]	; (8008f08 <HAL_DMA_Abort_IT+0x200>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d00a      	beq.n	8008dd2 <HAL_DMA_Abort_IT+0xca>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a52      	ldr	r2, [pc, #328]	; (8008f0c <HAL_DMA_Abort_IT+0x204>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d102      	bne.n	8008dcc <HAL_DMA_Abort_IT+0xc4>
 8008dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dca:	e01b      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dd0:	e018      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dd6:	e015      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	e013      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e011      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008de4:	e00e      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008de6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008dea:	e00b      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008df0:	e008      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008df6:	e005      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dfc:	e002      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008dfe:	2310      	movs	r3, #16
 8008e00:	e000      	b.n	8008e04 <HAL_DMA_Abort_IT+0xfc>
 8008e02:	2301      	movs	r3, #1
 8008e04:	4a42      	ldr	r2, [pc, #264]	; (8008f10 <HAL_DMA_Abort_IT+0x208>)
 8008e06:	6053      	str	r3, [r2, #4]
 8008e08:	e057      	b.n	8008eba <HAL_DMA_Abort_IT+0x1b2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a36      	ldr	r2, [pc, #216]	; (8008ee8 <HAL_DMA_Abort_IT+0x1e0>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d04f      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x1ac>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a34      	ldr	r2, [pc, #208]	; (8008eec <HAL_DMA_Abort_IT+0x1e4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d048      	beq.n	8008eb0 <HAL_DMA_Abort_IT+0x1a8>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a33      	ldr	r2, [pc, #204]	; (8008ef0 <HAL_DMA_Abort_IT+0x1e8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d040      	beq.n	8008eaa <HAL_DMA_Abort_IT+0x1a2>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a31      	ldr	r2, [pc, #196]	; (8008ef4 <HAL_DMA_Abort_IT+0x1ec>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d038      	beq.n	8008ea4 <HAL_DMA_Abort_IT+0x19c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a30      	ldr	r2, [pc, #192]	; (8008ef8 <HAL_DMA_Abort_IT+0x1f0>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d030      	beq.n	8008e9e <HAL_DMA_Abort_IT+0x196>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a2e      	ldr	r2, [pc, #184]	; (8008efc <HAL_DMA_Abort_IT+0x1f4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d028      	beq.n	8008e98 <HAL_DMA_Abort_IT+0x190>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a26      	ldr	r2, [pc, #152]	; (8008ee4 <HAL_DMA_Abort_IT+0x1dc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d020      	beq.n	8008e92 <HAL_DMA_Abort_IT+0x18a>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a2a      	ldr	r2, [pc, #168]	; (8008f00 <HAL_DMA_Abort_IT+0x1f8>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d019      	beq.n	8008e8e <HAL_DMA_Abort_IT+0x186>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a29      	ldr	r2, [pc, #164]	; (8008f04 <HAL_DMA_Abort_IT+0x1fc>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d012      	beq.n	8008e8a <HAL_DMA_Abort_IT+0x182>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a27      	ldr	r2, [pc, #156]	; (8008f08 <HAL_DMA_Abort_IT+0x200>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d00a      	beq.n	8008e84 <HAL_DMA_Abort_IT+0x17c>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a26      	ldr	r2, [pc, #152]	; (8008f0c <HAL_DMA_Abort_IT+0x204>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d102      	bne.n	8008e7e <HAL_DMA_Abort_IT+0x176>
 8008e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e7c:	e01b      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e82:	e018      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e88:	e015      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008e8a:	2310      	movs	r3, #16
 8008e8c:	e013      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e011      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e96:	e00e      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008e98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e9c:	e00b      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ea2:	e008      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ea8:	e005      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eae:	e002      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	e000      	b.n	8008eb6 <HAL_DMA_Abort_IT+0x1ae>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	4a17      	ldr	r2, [pc, #92]	; (8008f14 <HAL_DMA_Abort_IT+0x20c>)
 8008eb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	4798      	blx	r3
    } 
  }
  return status;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40020080 	.word	0x40020080
 8008ee8:	40020008 	.word	0x40020008
 8008eec:	4002001c 	.word	0x4002001c
 8008ef0:	40020030 	.word	0x40020030
 8008ef4:	40020044 	.word	0x40020044
 8008ef8:	40020058 	.word	0x40020058
 8008efc:	4002006c 	.word	0x4002006c
 8008f00:	40020408 	.word	0x40020408
 8008f04:	4002041c 	.word	0x4002041c
 8008f08:	40020430 	.word	0x40020430
 8008f0c:	40020444 	.word	0x40020444
 8008f10:	40020400 	.word	0x40020400
 8008f14:	40020000 	.word	0x40020000

08008f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b08b      	sub	sp, #44	; 0x2c
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f22:	2300      	movs	r3, #0
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008f26:	2300      	movs	r3, #0
 8008f28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f2a:	e179      	b.n	8009220 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	fa02 f303 	lsl.w	r3, r2, r3
 8008f34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	69fa      	ldr	r2, [r7, #28]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	f040 8168 	bne.w	800921a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	4a96      	ldr	r2, [pc, #600]	; (80091a8 <HAL_GPIO_Init+0x290>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d05e      	beq.n	8009012 <HAL_GPIO_Init+0xfa>
 8008f54:	4a94      	ldr	r2, [pc, #592]	; (80091a8 <HAL_GPIO_Init+0x290>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d875      	bhi.n	8009046 <HAL_GPIO_Init+0x12e>
 8008f5a:	4a94      	ldr	r2, [pc, #592]	; (80091ac <HAL_GPIO_Init+0x294>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d058      	beq.n	8009012 <HAL_GPIO_Init+0xfa>
 8008f60:	4a92      	ldr	r2, [pc, #584]	; (80091ac <HAL_GPIO_Init+0x294>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d86f      	bhi.n	8009046 <HAL_GPIO_Init+0x12e>
 8008f66:	4a92      	ldr	r2, [pc, #584]	; (80091b0 <HAL_GPIO_Init+0x298>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d052      	beq.n	8009012 <HAL_GPIO_Init+0xfa>
 8008f6c:	4a90      	ldr	r2, [pc, #576]	; (80091b0 <HAL_GPIO_Init+0x298>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d869      	bhi.n	8009046 <HAL_GPIO_Init+0x12e>
 8008f72:	4a90      	ldr	r2, [pc, #576]	; (80091b4 <HAL_GPIO_Init+0x29c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d04c      	beq.n	8009012 <HAL_GPIO_Init+0xfa>
 8008f78:	4a8e      	ldr	r2, [pc, #568]	; (80091b4 <HAL_GPIO_Init+0x29c>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d863      	bhi.n	8009046 <HAL_GPIO_Init+0x12e>
 8008f7e:	4a8e      	ldr	r2, [pc, #568]	; (80091b8 <HAL_GPIO_Init+0x2a0>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d046      	beq.n	8009012 <HAL_GPIO_Init+0xfa>
 8008f84:	4a8c      	ldr	r2, [pc, #560]	; (80091b8 <HAL_GPIO_Init+0x2a0>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d85d      	bhi.n	8009046 <HAL_GPIO_Init+0x12e>
 8008f8a:	2b12      	cmp	r3, #18
 8008f8c:	d82a      	bhi.n	8008fe4 <HAL_GPIO_Init+0xcc>
 8008f8e:	2b12      	cmp	r3, #18
 8008f90:	d859      	bhi.n	8009046 <HAL_GPIO_Init+0x12e>
 8008f92:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <HAL_GPIO_Init+0x80>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08009013 	.word	0x08009013
 8008f9c:	08008fed 	.word	0x08008fed
 8008fa0:	08008fff 	.word	0x08008fff
 8008fa4:	08009041 	.word	0x08009041
 8008fa8:	08009047 	.word	0x08009047
 8008fac:	08009047 	.word	0x08009047
 8008fb0:	08009047 	.word	0x08009047
 8008fb4:	08009047 	.word	0x08009047
 8008fb8:	08009047 	.word	0x08009047
 8008fbc:	08009047 	.word	0x08009047
 8008fc0:	08009047 	.word	0x08009047
 8008fc4:	08009047 	.word	0x08009047
 8008fc8:	08009047 	.word	0x08009047
 8008fcc:	08009047 	.word	0x08009047
 8008fd0:	08009047 	.word	0x08009047
 8008fd4:	08009047 	.word	0x08009047
 8008fd8:	08009047 	.word	0x08009047
 8008fdc:	08008ff5 	.word	0x08008ff5
 8008fe0:	08009009 	.word	0x08009009
 8008fe4:	4a75      	ldr	r2, [pc, #468]	; (80091bc <HAL_GPIO_Init+0x2a4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d013      	beq.n	8009012 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008fea:	e02c      	b.n	8009046 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	623b      	str	r3, [r7, #32]
          break;
 8008ff2:	e029      	b.n	8009048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	623b      	str	r3, [r7, #32]
          break;
 8008ffc:	e024      	b.n	8009048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	3308      	adds	r3, #8
 8009004:	623b      	str	r3, [r7, #32]
          break;
 8009006:	e01f      	b.n	8009048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	330c      	adds	r3, #12
 800900e:	623b      	str	r3, [r7, #32]
          break;
 8009010:	e01a      	b.n	8009048 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d102      	bne.n	8009020 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800901a:	2304      	movs	r3, #4
 800901c:	623b      	str	r3, [r7, #32]
          break;
 800901e:	e013      	b.n	8009048 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d105      	bne.n	8009034 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009028:	2308      	movs	r3, #8
 800902a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	611a      	str	r2, [r3, #16]
          break;
 8009032:	e009      	b.n	8009048 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009034:	2308      	movs	r3, #8
 8009036:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	615a      	str	r2, [r3, #20]
          break;
 800903e:	e003      	b.n	8009048 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009040:	2300      	movs	r3, #0
 8009042:	623b      	str	r3, [r7, #32]
          break;
 8009044:	e000      	b.n	8009048 <HAL_GPIO_Init+0x130>
          break;
 8009046:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	2bff      	cmp	r3, #255	; 0xff
 800904c:	d801      	bhi.n	8009052 <HAL_GPIO_Init+0x13a>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	e001      	b.n	8009056 <HAL_GPIO_Init+0x13e>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3304      	adds	r3, #4
 8009056:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	2bff      	cmp	r3, #255	; 0xff
 800905c:	d802      	bhi.n	8009064 <HAL_GPIO_Init+0x14c>
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	e002      	b.n	800906a <HAL_GPIO_Init+0x152>
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	3b08      	subs	r3, #8
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	210f      	movs	r1, #15
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	fa01 f303 	lsl.w	r3, r1, r3
 8009078:	43db      	mvns	r3, r3
 800907a:	401a      	ands	r2, r3
 800907c:	6a39      	ldr	r1, [r7, #32]
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	fa01 f303 	lsl.w	r3, r1, r3
 8009084:	431a      	orrs	r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 80c1 	beq.w	800921a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009098:	4b49      	ldr	r3, [pc, #292]	; (80091c0 <HAL_GPIO_Init+0x2a8>)
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	4a48      	ldr	r2, [pc, #288]	; (80091c0 <HAL_GPIO_Init+0x2a8>)
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	6193      	str	r3, [r2, #24]
 80090a4:	4b46      	ldr	r3, [pc, #280]	; (80091c0 <HAL_GPIO_Init+0x2a8>)
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	60bb      	str	r3, [r7, #8]
 80090ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80090b0:	4a44      	ldr	r2, [pc, #272]	; (80091c4 <HAL_GPIO_Init+0x2ac>)
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	089b      	lsrs	r3, r3, #2
 80090b6:	3302      	adds	r3, #2
 80090b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	f003 0303 	and.w	r3, r3, #3
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	220f      	movs	r2, #15
 80090c8:	fa02 f303 	lsl.w	r3, r2, r3
 80090cc:	43db      	mvns	r3, r3
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	4013      	ands	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a3c      	ldr	r2, [pc, #240]	; (80091c8 <HAL_GPIO_Init+0x2b0>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d01f      	beq.n	800911c <HAL_GPIO_Init+0x204>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a3b      	ldr	r2, [pc, #236]	; (80091cc <HAL_GPIO_Init+0x2b4>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d019      	beq.n	8009118 <HAL_GPIO_Init+0x200>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a3a      	ldr	r2, [pc, #232]	; (80091d0 <HAL_GPIO_Init+0x2b8>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <HAL_GPIO_Init+0x1fc>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a39      	ldr	r2, [pc, #228]	; (80091d4 <HAL_GPIO_Init+0x2bc>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00d      	beq.n	8009110 <HAL_GPIO_Init+0x1f8>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a38      	ldr	r2, [pc, #224]	; (80091d8 <HAL_GPIO_Init+0x2c0>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d007      	beq.n	800910c <HAL_GPIO_Init+0x1f4>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a37      	ldr	r2, [pc, #220]	; (80091dc <HAL_GPIO_Init+0x2c4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d101      	bne.n	8009108 <HAL_GPIO_Init+0x1f0>
 8009104:	2305      	movs	r3, #5
 8009106:	e00a      	b.n	800911e <HAL_GPIO_Init+0x206>
 8009108:	2306      	movs	r3, #6
 800910a:	e008      	b.n	800911e <HAL_GPIO_Init+0x206>
 800910c:	2304      	movs	r3, #4
 800910e:	e006      	b.n	800911e <HAL_GPIO_Init+0x206>
 8009110:	2303      	movs	r3, #3
 8009112:	e004      	b.n	800911e <HAL_GPIO_Init+0x206>
 8009114:	2302      	movs	r3, #2
 8009116:	e002      	b.n	800911e <HAL_GPIO_Init+0x206>
 8009118:	2301      	movs	r3, #1
 800911a:	e000      	b.n	800911e <HAL_GPIO_Init+0x206>
 800911c:	2300      	movs	r3, #0
 800911e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009120:	f002 0203 	and.w	r2, r2, #3
 8009124:	0092      	lsls	r2, r2, #2
 8009126:	4093      	lsls	r3, r2
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800912e:	4925      	ldr	r1, [pc, #148]	; (80091c4 <HAL_GPIO_Init+0x2ac>)
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	089b      	lsrs	r3, r3, #2
 8009134:	3302      	adds	r3, #2
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d006      	beq.n	8009156 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009148:	4b25      	ldr	r3, [pc, #148]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	4924      	ldr	r1, [pc, #144]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	4313      	orrs	r3, r2
 8009152:	608b      	str	r3, [r1, #8]
 8009154:	e006      	b.n	8009164 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009156:	4b22      	ldr	r3, [pc, #136]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 8009158:	689a      	ldr	r2, [r3, #8]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	43db      	mvns	r3, r3
 800915e:	4920      	ldr	r1, [pc, #128]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 8009160:	4013      	ands	r3, r2
 8009162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d006      	beq.n	800917e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009170:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	491a      	ldr	r1, [pc, #104]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	4313      	orrs	r3, r2
 800917a:	60cb      	str	r3, [r1, #12]
 800917c:	e006      	b.n	800918c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800917e:	4b18      	ldr	r3, [pc, #96]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	43db      	mvns	r3, r3
 8009186:	4916      	ldr	r1, [pc, #88]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 8009188:	4013      	ands	r3, r2
 800918a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d025      	beq.n	80091e4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009198:	4b11      	ldr	r3, [pc, #68]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	4910      	ldr	r1, [pc, #64]	; (80091e0 <HAL_GPIO_Init+0x2c8>)
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	604b      	str	r3, [r1, #4]
 80091a4:	e025      	b.n	80091f2 <HAL_GPIO_Init+0x2da>
 80091a6:	bf00      	nop
 80091a8:	10320000 	.word	0x10320000
 80091ac:	10310000 	.word	0x10310000
 80091b0:	10220000 	.word	0x10220000
 80091b4:	10210000 	.word	0x10210000
 80091b8:	10120000 	.word	0x10120000
 80091bc:	10110000 	.word	0x10110000
 80091c0:	40021000 	.word	0x40021000
 80091c4:	40010000 	.word	0x40010000
 80091c8:	40010800 	.word	0x40010800
 80091cc:	40010c00 	.word	0x40010c00
 80091d0:	40011000 	.word	0x40011000
 80091d4:	40011400 	.word	0x40011400
 80091d8:	40011800 	.word	0x40011800
 80091dc:	40011c00 	.word	0x40011c00
 80091e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80091e4:	4b15      	ldr	r3, [pc, #84]	; (800923c <HAL_GPIO_Init+0x324>)
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	43db      	mvns	r3, r3
 80091ec:	4913      	ldr	r1, [pc, #76]	; (800923c <HAL_GPIO_Init+0x324>)
 80091ee:	4013      	ands	r3, r2
 80091f0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d006      	beq.n	800920c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <HAL_GPIO_Init+0x324>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	490e      	ldr	r1, [pc, #56]	; (800923c <HAL_GPIO_Init+0x324>)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	4313      	orrs	r3, r2
 8009208:	600b      	str	r3, [r1, #0]
 800920a:	e006      	b.n	800921a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800920c:	4b0b      	ldr	r3, [pc, #44]	; (800923c <HAL_GPIO_Init+0x324>)
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	43db      	mvns	r3, r3
 8009214:	4909      	ldr	r1, [pc, #36]	; (800923c <HAL_GPIO_Init+0x324>)
 8009216:	4013      	ands	r3, r2
 8009218:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	3301      	adds	r3, #1
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	fa22 f303 	lsr.w	r3, r2, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	f47f ae7e 	bne.w	8008f2c <HAL_GPIO_Init+0x14>
  }
}
 8009230:	bf00      	nop
 8009232:	bf00      	nop
 8009234:	372c      	adds	r7, #44	; 0x2c
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr
 800923c:	40010400 	.word	0x40010400

08009240 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009240:	b480      	push	{r7}
 8009242:	b089      	sub	sp, #36	; 0x24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800924a:	2300      	movs	r3, #0
 800924c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800924e:	e0a6      	b.n	800939e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009250:	2201      	movs	r2, #1
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	4013      	ands	r3, r2
 800925c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 8099 	beq.w	8009398 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009266:	4a54      	ldr	r2, [pc, #336]	; (80093b8 <HAL_GPIO_DeInit+0x178>)
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	089b      	lsrs	r3, r3, #2
 800926c:	3302      	adds	r3, #2
 800926e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009272:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f003 0303 	and.w	r3, r3, #3
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	220f      	movs	r2, #15
 800927e:	fa02 f303 	lsl.w	r3, r2, r3
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	4013      	ands	r3, r2
 8009286:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a4c      	ldr	r2, [pc, #304]	; (80093bc <HAL_GPIO_DeInit+0x17c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d01f      	beq.n	80092d0 <HAL_GPIO_DeInit+0x90>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a4b      	ldr	r2, [pc, #300]	; (80093c0 <HAL_GPIO_DeInit+0x180>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d019      	beq.n	80092cc <HAL_GPIO_DeInit+0x8c>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a4a      	ldr	r2, [pc, #296]	; (80093c4 <HAL_GPIO_DeInit+0x184>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d013      	beq.n	80092c8 <HAL_GPIO_DeInit+0x88>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a49      	ldr	r2, [pc, #292]	; (80093c8 <HAL_GPIO_DeInit+0x188>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00d      	beq.n	80092c4 <HAL_GPIO_DeInit+0x84>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a48      	ldr	r2, [pc, #288]	; (80093cc <HAL_GPIO_DeInit+0x18c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d007      	beq.n	80092c0 <HAL_GPIO_DeInit+0x80>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a47      	ldr	r2, [pc, #284]	; (80093d0 <HAL_GPIO_DeInit+0x190>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d101      	bne.n	80092bc <HAL_GPIO_DeInit+0x7c>
 80092b8:	2305      	movs	r3, #5
 80092ba:	e00a      	b.n	80092d2 <HAL_GPIO_DeInit+0x92>
 80092bc:	2306      	movs	r3, #6
 80092be:	e008      	b.n	80092d2 <HAL_GPIO_DeInit+0x92>
 80092c0:	2304      	movs	r3, #4
 80092c2:	e006      	b.n	80092d2 <HAL_GPIO_DeInit+0x92>
 80092c4:	2303      	movs	r3, #3
 80092c6:	e004      	b.n	80092d2 <HAL_GPIO_DeInit+0x92>
 80092c8:	2302      	movs	r3, #2
 80092ca:	e002      	b.n	80092d2 <HAL_GPIO_DeInit+0x92>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e000      	b.n	80092d2 <HAL_GPIO_DeInit+0x92>
 80092d0:	2300      	movs	r3, #0
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	f002 0203 	and.w	r2, r2, #3
 80092d8:	0092      	lsls	r2, r2, #2
 80092da:	4093      	lsls	r3, r2
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d132      	bne.n	8009348 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80092e2:	4b3c      	ldr	r3, [pc, #240]	; (80093d4 <HAL_GPIO_DeInit+0x194>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	43db      	mvns	r3, r3
 80092ea:	493a      	ldr	r1, [pc, #232]	; (80093d4 <HAL_GPIO_DeInit+0x194>)
 80092ec:	4013      	ands	r3, r2
 80092ee:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80092f0:	4b38      	ldr	r3, [pc, #224]	; (80093d4 <HAL_GPIO_DeInit+0x194>)
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	43db      	mvns	r3, r3
 80092f8:	4936      	ldr	r1, [pc, #216]	; (80093d4 <HAL_GPIO_DeInit+0x194>)
 80092fa:	4013      	ands	r3, r2
 80092fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80092fe:	4b35      	ldr	r3, [pc, #212]	; (80093d4 <HAL_GPIO_DeInit+0x194>)
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	43db      	mvns	r3, r3
 8009306:	4933      	ldr	r1, [pc, #204]	; (80093d4 <HAL_GPIO_DeInit+0x194>)
 8009308:	4013      	ands	r3, r2
 800930a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800930c:	4b31      	ldr	r3, [pc, #196]	; (80093d4 <HAL_GPIO_DeInit+0x194>)
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	43db      	mvns	r3, r3
 8009314:	492f      	ldr	r1, [pc, #188]	; (80093d4 <HAL_GPIO_DeInit+0x194>)
 8009316:	4013      	ands	r3, r2
 8009318:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	220f      	movs	r2, #15
 8009324:	fa02 f303 	lsl.w	r3, r2, r3
 8009328:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800932a:	4a23      	ldr	r2, [pc, #140]	; (80093b8 <HAL_GPIO_DeInit+0x178>)
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	089b      	lsrs	r3, r3, #2
 8009330:	3302      	adds	r3, #2
 8009332:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	43da      	mvns	r2, r3
 800933a:	481f      	ldr	r0, [pc, #124]	; (80093b8 <HAL_GPIO_DeInit+0x178>)
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	089b      	lsrs	r3, r3, #2
 8009340:	400a      	ands	r2, r1
 8009342:	3302      	adds	r3, #2
 8009344:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2bff      	cmp	r3, #255	; 0xff
 800934c:	d801      	bhi.n	8009352 <HAL_GPIO_DeInit+0x112>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	e001      	b.n	8009356 <HAL_GPIO_DeInit+0x116>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3304      	adds	r3, #4
 8009356:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	2bff      	cmp	r3, #255	; 0xff
 800935c:	d802      	bhi.n	8009364 <HAL_GPIO_DeInit+0x124>
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	e002      	b.n	800936a <HAL_GPIO_DeInit+0x12a>
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	3b08      	subs	r3, #8
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	210f      	movs	r1, #15
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	fa01 f303 	lsl.w	r3, r1, r3
 8009378:	43db      	mvns	r3, r3
 800937a:	401a      	ands	r2, r3
 800937c:	2104      	movs	r1, #4
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	fa01 f303 	lsl.w	r3, r1, r3
 8009384:	431a      	orrs	r2, r3
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	43db      	mvns	r3, r3
 8009392:	401a      	ands	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	3301      	adds	r3, #1
 800939c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	fa22 f303 	lsr.w	r3, r2, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f47f af52 	bne.w	8009250 <HAL_GPIO_DeInit+0x10>
  }
}
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	3724      	adds	r7, #36	; 0x24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bc80      	pop	{r7}
 80093b6:	4770      	bx	lr
 80093b8:	40010000 	.word	0x40010000
 80093bc:	40010800 	.word	0x40010800
 80093c0:	40010c00 	.word	0x40010c00
 80093c4:	40011000 	.word	0x40011000
 80093c8:	40011400 	.word	0x40011400
 80093cc:	40011800 	.word	0x40011800
 80093d0:	40011c00 	.word	0x40011c00
 80093d4:	40010400 	.word	0x40010400

080093d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	887b      	ldrh	r3, [r7, #2]
 80093ea:	4013      	ands	r3, r2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093f0:	2301      	movs	r3, #1
 80093f2:	73fb      	strb	r3, [r7, #15]
 80093f4:	e001      	b.n	80093fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr

08009406 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	807b      	strh	r3, [r7, #2]
 8009412:	4613      	mov	r3, r2
 8009414:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009416:	787b      	ldrb	r3, [r7, #1]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800941c:	887a      	ldrh	r2, [r7, #2]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009422:	e003      	b.n	800942c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009424:	887b      	ldrh	r3, [r7, #2]
 8009426:	041a      	lsls	r2, r3, #16
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	611a      	str	r2, [r3, #16]
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	bc80      	pop	{r7}
 8009434:	4770      	bx	lr

08009436 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	460b      	mov	r3, r1
 8009440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009448:	887a      	ldrh	r2, [r7, #2]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4013      	ands	r3, r2
 800944e:	041a      	lsls	r2, r3, #16
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	43d9      	mvns	r1, r3
 8009454:	887b      	ldrh	r3, [r7, #2]
 8009456:	400b      	ands	r3, r1
 8009458:	431a      	orrs	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	611a      	str	r2, [r3, #16]
}
 800945e:	bf00      	nop
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	bc80      	pop	{r7}
 8009466:	4770      	bx	lr

08009468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e12b      	b.n	80096d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d106      	bne.n	8009494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7fe fff8 	bl	8008484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2224      	movs	r2, #36	; 0x24
 8009498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0201 	bic.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80094cc:	f001 fdb8 	bl	800b040 <HAL_RCC_GetPCLK1Freq>
 80094d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	4a81      	ldr	r2, [pc, #516]	; (80096dc <HAL_I2C_Init+0x274>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d807      	bhi.n	80094ec <HAL_I2C_Init+0x84>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4a80      	ldr	r2, [pc, #512]	; (80096e0 <HAL_I2C_Init+0x278>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	bf94      	ite	ls
 80094e4:	2301      	movls	r3, #1
 80094e6:	2300      	movhi	r3, #0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	e006      	b.n	80094fa <HAL_I2C_Init+0x92>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4a7d      	ldr	r2, [pc, #500]	; (80096e4 <HAL_I2C_Init+0x27c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	bf94      	ite	ls
 80094f4:	2301      	movls	r3, #1
 80094f6:	2300      	movhi	r3, #0
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e0e7      	b.n	80096d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4a78      	ldr	r2, [pc, #480]	; (80096e8 <HAL_I2C_Init+0x280>)
 8009506:	fba2 2303 	umull	r2, r3, r2, r3
 800950a:	0c9b      	lsrs	r3, r3, #18
 800950c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	430a      	orrs	r2, r1
 8009520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	4a6a      	ldr	r2, [pc, #424]	; (80096dc <HAL_I2C_Init+0x274>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d802      	bhi.n	800953c <HAL_I2C_Init+0xd4>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	3301      	adds	r3, #1
 800953a:	e009      	b.n	8009550 <HAL_I2C_Init+0xe8>
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009542:	fb02 f303 	mul.w	r3, r2, r3
 8009546:	4a69      	ldr	r2, [pc, #420]	; (80096ec <HAL_I2C_Init+0x284>)
 8009548:	fba2 2303 	umull	r2, r3, r2, r3
 800954c:	099b      	lsrs	r3, r3, #6
 800954e:	3301      	adds	r3, #1
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	6812      	ldr	r2, [r2, #0]
 8009554:	430b      	orrs	r3, r1
 8009556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	495c      	ldr	r1, [pc, #368]	; (80096dc <HAL_I2C_Init+0x274>)
 800956c:	428b      	cmp	r3, r1
 800956e:	d819      	bhi.n	80095a4 <HAL_I2C_Init+0x13c>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	1e59      	subs	r1, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	fbb1 f3f3 	udiv	r3, r1, r3
 800957e:	1c59      	adds	r1, r3, #1
 8009580:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009584:	400b      	ands	r3, r1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <HAL_I2C_Init+0x138>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	1e59      	subs	r1, r3, #1
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	fbb1 f3f3 	udiv	r3, r1, r3
 8009598:	3301      	adds	r3, #1
 800959a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800959e:	e051      	b.n	8009644 <HAL_I2C_Init+0x1dc>
 80095a0:	2304      	movs	r3, #4
 80095a2:	e04f      	b.n	8009644 <HAL_I2C_Init+0x1dc>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d111      	bne.n	80095d0 <HAL_I2C_Init+0x168>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	1e58      	subs	r0, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6859      	ldr	r1, [r3, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	440b      	add	r3, r1
 80095ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80095be:	3301      	adds	r3, #1
 80095c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bf0c      	ite	eq
 80095c8:	2301      	moveq	r3, #1
 80095ca:	2300      	movne	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	e012      	b.n	80095f6 <HAL_I2C_Init+0x18e>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	1e58      	subs	r0, r3, #1
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6859      	ldr	r1, [r3, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	0099      	lsls	r1, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80095e6:	3301      	adds	r3, #1
 80095e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	bf0c      	ite	eq
 80095f0:	2301      	moveq	r3, #1
 80095f2:	2300      	movne	r3, #0
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <HAL_I2C_Init+0x196>
 80095fa:	2301      	movs	r3, #1
 80095fc:	e022      	b.n	8009644 <HAL_I2C_Init+0x1dc>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10e      	bne.n	8009624 <HAL_I2C_Init+0x1bc>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	1e58      	subs	r0, r3, #1
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6859      	ldr	r1, [r3, #4]
 800960e:	460b      	mov	r3, r1
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	440b      	add	r3, r1
 8009614:	fbb0 f3f3 	udiv	r3, r0, r3
 8009618:	3301      	adds	r3, #1
 800961a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800961e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009622:	e00f      	b.n	8009644 <HAL_I2C_Init+0x1dc>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	1e58      	subs	r0, r3, #1
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6859      	ldr	r1, [r3, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	440b      	add	r3, r1
 8009632:	0099      	lsls	r1, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	fbb0 f3f3 	udiv	r3, r0, r3
 800963a:	3301      	adds	r3, #1
 800963c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	6809      	ldr	r1, [r1, #0]
 8009648:	4313      	orrs	r3, r2
 800964a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	69da      	ldr	r2, [r3, #28]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	6911      	ldr	r1, [r2, #16]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	68d2      	ldr	r2, [r2, #12]
 800967e:	4311      	orrs	r1, r2
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6812      	ldr	r2, [r2, #0]
 8009684:	430b      	orrs	r3, r1
 8009686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	695a      	ldr	r2, [r3, #20]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	431a      	orrs	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	430a      	orrs	r2, r1
 80096a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f042 0201 	orr.w	r2, r2, #1
 80096b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2220      	movs	r2, #32
 80096be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	000186a0 	.word	0x000186a0
 80096e0:	001e847f 	.word	0x001e847f
 80096e4:	003d08ff 	.word	0x003d08ff
 80096e8:	431bde83 	.word	0x431bde83
 80096ec:	10624dd3 	.word	0x10624dd3

080096f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e021      	b.n	8009746 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2224      	movs	r2, #36	; 0x24
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0201 	bic.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7fe fef0 	bl	8008500 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af02      	add	r7, sp, #8
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	607a      	str	r2, [r7, #4]
 800975a:	461a      	mov	r2, r3
 800975c:	460b      	mov	r3, r1
 800975e:	817b      	strh	r3, [r7, #10]
 8009760:	4613      	mov	r3, r2
 8009762:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009764:	f7ff f85e 	bl	8008824 <HAL_GetTick>
 8009768:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b20      	cmp	r3, #32
 8009774:	f040 80e0 	bne.w	8009938 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	2319      	movs	r3, #25
 800977e:	2201      	movs	r2, #1
 8009780:	4970      	ldr	r1, [pc, #448]	; (8009944 <HAL_I2C_Master_Transmit+0x1f4>)
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 fe5c 	bl	800a440 <I2C_WaitOnFlagUntilTimeout>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800978e:	2302      	movs	r3, #2
 8009790:	e0d3      	b.n	800993a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009798:	2b01      	cmp	r3, #1
 800979a:	d101      	bne.n	80097a0 <HAL_I2C_Master_Transmit+0x50>
 800979c:	2302      	movs	r3, #2
 800979e:	e0cc      	b.n	800993a <HAL_I2C_Master_Transmit+0x1ea>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d007      	beq.n	80097c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f042 0201 	orr.w	r2, r2, #1
 80097c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2221      	movs	r2, #33	; 0x21
 80097da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2210      	movs	r2, #16
 80097e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	893a      	ldrh	r2, [r7, #8]
 80097f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4a50      	ldr	r2, [pc, #320]	; (8009948 <HAL_I2C_Master_Transmit+0x1f8>)
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009808:	8979      	ldrh	r1, [r7, #10]
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	6a3a      	ldr	r2, [r7, #32]
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f000 fc16 	bl	800a040 <I2C_MasterRequestWrite>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e08d      	b.n	800993a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800981e:	2300      	movs	r3, #0
 8009820:	613b      	str	r3, [r7, #16]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	613b      	str	r3, [r7, #16]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009834:	e066      	b.n	8009904 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	6a39      	ldr	r1, [r7, #32]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f000 ff1a 	bl	800a674 <I2C_WaitOnTXEFlagUntilTimeout>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00d      	beq.n	8009862 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984a:	2b04      	cmp	r3, #4
 800984c:	d107      	bne.n	800985e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800985c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e06b      	b.n	800993a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	781a      	ldrb	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988a:	3b01      	subs	r3, #1
 800988c:	b29a      	uxth	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b04      	cmp	r3, #4
 800989e:	d11b      	bne.n	80098d8 <HAL_I2C_Master_Transmit+0x188>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d017      	beq.n	80098d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	781a      	ldrb	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	3b01      	subs	r3, #1
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	6a39      	ldr	r1, [r7, #32]
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 ff11 	bl	800a704 <I2C_WaitOnBTFFlagUntilTimeout>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00d      	beq.n	8009904 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d107      	bne.n	8009900 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e01a      	b.n	800993a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009908:	2b00      	cmp	r3, #0
 800990a:	d194      	bne.n	8009836 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800991a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2220      	movs	r2, #32
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	e000      	b.n	800993a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009938:	2302      	movs	r3, #2
  }
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	00100002 	.word	0x00100002
 8009948:	ffff0000 	.word	0xffff0000

0800994c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af02      	add	r7, sp, #8
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	4608      	mov	r0, r1
 8009956:	4611      	mov	r1, r2
 8009958:	461a      	mov	r2, r3
 800995a:	4603      	mov	r3, r0
 800995c:	817b      	strh	r3, [r7, #10]
 800995e:	460b      	mov	r3, r1
 8009960:	813b      	strh	r3, [r7, #8]
 8009962:	4613      	mov	r3, r2
 8009964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009966:	f7fe ff5d 	bl	8008824 <HAL_GetTick>
 800996a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b20      	cmp	r3, #32
 8009976:	f040 80d9 	bne.w	8009b2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	2319      	movs	r3, #25
 8009980:	2201      	movs	r2, #1
 8009982:	496d      	ldr	r1, [pc, #436]	; (8009b38 <HAL_I2C_Mem_Write+0x1ec>)
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fd5b 	bl	800a440 <I2C_WaitOnFlagUntilTimeout>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009990:	2302      	movs	r3, #2
 8009992:	e0cc      	b.n	8009b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <HAL_I2C_Mem_Write+0x56>
 800999e:	2302      	movs	r3, #2
 80099a0:	e0c5      	b.n	8009b2e <HAL_I2C_Mem_Write+0x1e2>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d007      	beq.n	80099c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f042 0201 	orr.w	r2, r2, #1
 80099c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2221      	movs	r2, #33	; 0x21
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2240      	movs	r2, #64	; 0x40
 80099e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a3a      	ldr	r2, [r7, #32]
 80099f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4a4d      	ldr	r2, [pc, #308]	; (8009b3c <HAL_I2C_Mem_Write+0x1f0>)
 8009a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a0a:	88f8      	ldrh	r0, [r7, #6]
 8009a0c:	893a      	ldrh	r2, [r7, #8]
 8009a0e:	8979      	ldrh	r1, [r7, #10]
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	4603      	mov	r3, r0
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 fb92 	bl	800a144 <I2C_RequestMemoryWrite>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d052      	beq.n	8009acc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e081      	b.n	8009b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f000 fe20 	bl	800a674 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00d      	beq.n	8009a56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	d107      	bne.n	8009a52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e06b      	b.n	8009b2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a70:	3b01      	subs	r3, #1
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d11b      	bne.n	8009acc <HAL_I2C_Mem_Write+0x180>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d017      	beq.n	8009acc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	781a      	ldrb	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1aa      	bne.n	8009a2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 fe13 	bl	800a704 <I2C_WaitOnBTFFlagUntilTimeout>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00d      	beq.n	8009b00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d107      	bne.n	8009afc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009afa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e016      	b.n	8009b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e000      	b.n	8009b2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009b2c:	2302      	movs	r3, #2
  }
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	00100002 	.word	0x00100002
 8009b3c:	ffff0000 	.word	0xffff0000

08009b40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08c      	sub	sp, #48	; 0x30
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	4603      	mov	r3, r0
 8009b50:	817b      	strh	r3, [r7, #10]
 8009b52:	460b      	mov	r3, r1
 8009b54:	813b      	strh	r3, [r7, #8]
 8009b56:	4613      	mov	r3, r2
 8009b58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b5e:	f7fe fe61 	bl	8008824 <HAL_GetTick>
 8009b62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b20      	cmp	r3, #32
 8009b6e:	f040 8244 	bne.w	8009ffa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	2319      	movs	r3, #25
 8009b78:	2201      	movs	r2, #1
 8009b7a:	4982      	ldr	r1, [pc, #520]	; (8009d84 <HAL_I2C_Mem_Read+0x244>)
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 fc5f 	bl	800a440 <I2C_WaitOnFlagUntilTimeout>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e237      	b.n	8009ffc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d101      	bne.n	8009b9a <HAL_I2C_Mem_Read+0x5a>
 8009b96:	2302      	movs	r3, #2
 8009b98:	e230      	b.n	8009ffc <HAL_I2C_Mem_Read+0x4bc>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d007      	beq.n	8009bc0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f042 0201 	orr.w	r2, r2, #1
 8009bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2222      	movs	r2, #34	; 0x22
 8009bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2240      	movs	r2, #64	; 0x40
 8009bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4a62      	ldr	r2, [pc, #392]	; (8009d88 <HAL_I2C_Mem_Read+0x248>)
 8009c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c02:	88f8      	ldrh	r0, [r7, #6]
 8009c04:	893a      	ldrh	r2, [r7, #8]
 8009c06:	8979      	ldrh	r1, [r7, #10]
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	4603      	mov	r3, r0
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 fb2c 	bl	800a270 <I2C_RequestMemoryRead>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e1ec      	b.n	8009ffc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d113      	bne.n	8009c52 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	61fb      	str	r3, [r7, #28]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	61fb      	str	r3, [r7, #28]
 8009c3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	e1c0      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d11e      	bne.n	8009c98 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c6a:	b672      	cpsid	i
}
 8009c6c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c6e:	2300      	movs	r3, #0
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	61bb      	str	r3, [r7, #24]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	61bb      	str	r3, [r7, #24]
 8009c82:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c94:	b662      	cpsie	i
}
 8009c96:	e035      	b.n	8009d04 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d11e      	bne.n	8009cde <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cb0:	b672      	cpsid	i
}
 8009cb2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	617b      	str	r3, [r7, #20]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	617b      	str	r3, [r7, #20]
 8009cc8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cda:	b662      	cpsie	i
}
 8009cdc:	e012      	b.n	8009d04 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cee:	2300      	movs	r3, #0
 8009cf0:	613b      	str	r3, [r7, #16]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	613b      	str	r3, [r7, #16]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	613b      	str	r3, [r7, #16]
 8009d02:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009d04:	e166      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	f200 811f 	bhi.w	8009f4e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d123      	bne.n	8009d60 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 fd39 	bl	800a794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e167      	b.n	8009ffc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691a      	ldr	r2, [r3, #16]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d5e:	e139      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d152      	bne.n	8009e0e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4906      	ldr	r1, [pc, #24]	; (8009d8c <HAL_I2C_Mem_Read+0x24c>)
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 fb64 	bl	800a440 <I2C_WaitOnFlagUntilTimeout>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d008      	beq.n	8009d90 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e13c      	b.n	8009ffc <HAL_I2C_Mem_Read+0x4bc>
 8009d82:	bf00      	nop
 8009d84:	00100002 	.word	0x00100002
 8009d88:	ffff0000 	.word	0xffff0000
 8009d8c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d90:	b672      	cpsid	i
}
 8009d92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691a      	ldr	r2, [r3, #16]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009dd6:	b662      	cpsie	i
}
 8009dd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	691a      	ldr	r2, [r3, #16]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	3b01      	subs	r3, #1
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e0c:	e0e2      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e14:	2200      	movs	r2, #0
 8009e16:	497b      	ldr	r1, [pc, #492]	; (800a004 <HAL_I2C_Mem_Read+0x4c4>)
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 fb11 	bl	800a440 <I2C_WaitOnFlagUntilTimeout>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e0e9      	b.n	8009ffc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e38:	b672      	cpsid	i
}
 8009e3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	691a      	ldr	r2, [r3, #16]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	b2d2      	uxtb	r2, r2
 8009e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	3b01      	subs	r3, #1
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e6e:	4b66      	ldr	r3, [pc, #408]	; (800a008 <HAL_I2C_Mem_Read+0x4c8>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	08db      	lsrs	r3, r3, #3
 8009e74:	4a65      	ldr	r2, [pc, #404]	; (800a00c <HAL_I2C_Mem_Read+0x4cc>)
 8009e76:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7a:	0a1a      	lsrs	r2, r3, #8
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	00da      	lsls	r2, r3, #3
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d118      	bne.n	8009ec6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	f043 0220 	orr.w	r2, r3, #32
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009eb6:	b662      	cpsie	i
}
 8009eb8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e09a      	b.n	8009ffc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b04      	cmp	r3, #4
 8009ed2:	d1d9      	bne.n	8009e88 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	691a      	ldr	r2, [r3, #16]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eee:	b2d2      	uxtb	r2, r2
 8009ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f00:	3b01      	subs	r3, #1
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009f16:	b662      	cpsie	i
}
 8009f18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	b2d2      	uxtb	r2, r2
 8009f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f36:	3b01      	subs	r3, #1
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	3b01      	subs	r3, #1
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f4c:	e042      	b.n	8009fd4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 fc1e 	bl	800a794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e04c      	b.n	8009ffc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	b2d2      	uxtb	r2, r2
 8009f6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	f003 0304 	and.w	r3, r3, #4
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	d118      	bne.n	8009fd4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	691a      	ldr	r2, [r3, #16]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fac:	b2d2      	uxtb	r2, r2
 8009fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f47f ae94 	bne.w	8009d06 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e000      	b.n	8009ffc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009ffa:	2302      	movs	r3, #2
  }
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3728      	adds	r7, #40	; 0x28
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	00010004 	.word	0x00010004
 800a008:	200000b0 	.word	0x200000b0
 800a00c:	14f8b589 	.word	0x14f8b589

0800a010 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a01e:	b2db      	uxtb	r3, r3
}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	bc80      	pop	{r7}
 800a028:	4770      	bx	lr

0800a02a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a036:	4618      	mov	r0, r3
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bc80      	pop	{r7}
 800a03e:	4770      	bx	lr

0800a040 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af02      	add	r7, sp, #8
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	460b      	mov	r3, r1
 800a04e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b08      	cmp	r3, #8
 800a05a:	d006      	beq.n	800a06a <I2C_MasterRequestWrite+0x2a>
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d003      	beq.n	800a06a <I2C_MasterRequestWrite+0x2a>
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a068:	d108      	bne.n	800a07c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	e00b      	b.n	800a094 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a080:	2b12      	cmp	r3, #18
 800a082:	d107      	bne.n	800a094 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a092:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f9cd 	bl	800a440 <I2C_WaitOnFlagUntilTimeout>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00d      	beq.n	800a0c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ba:	d103      	bne.n	800a0c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e035      	b.n	800a134 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0d0:	d108      	bne.n	800a0e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0d2:	897b      	ldrh	r3, [r7, #10]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0e0:	611a      	str	r2, [r3, #16]
 800a0e2:	e01b      	b.n	800a11c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0e4:	897b      	ldrh	r3, [r7, #10]
 800a0e6:	11db      	asrs	r3, r3, #7
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f003 0306 	and.w	r3, r3, #6
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	f063 030f 	orn	r3, r3, #15
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	490e      	ldr	r1, [pc, #56]	; (800a13c <I2C_MasterRequestWrite+0xfc>)
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 fa16 	bl	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e010      	b.n	800a134 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a112:	897b      	ldrh	r3, [r7, #10]
 800a114:	b2da      	uxtb	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	4907      	ldr	r1, [pc, #28]	; (800a140 <I2C_MasterRequestWrite+0x100>)
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 fa06 	bl	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	00010008 	.word	0x00010008
 800a140:	00010002 	.word	0x00010002

0800a144 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af02      	add	r7, sp, #8
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	4608      	mov	r0, r1
 800a14e:	4611      	mov	r1, r2
 800a150:	461a      	mov	r2, r3
 800a152:	4603      	mov	r3, r0
 800a154:	817b      	strh	r3, [r7, #10]
 800a156:	460b      	mov	r3, r1
 800a158:	813b      	strh	r3, [r7, #8]
 800a15a:	4613      	mov	r3, r2
 800a15c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a16c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	2200      	movs	r2, #0
 800a176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 f960 	bl	800a440 <I2C_WaitOnFlagUntilTimeout>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00d      	beq.n	800a1a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a194:	d103      	bne.n	800a19e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a19c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e05f      	b.n	800a262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1a2:	897b      	ldrh	r3, [r7, #10]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	6a3a      	ldr	r2, [r7, #32]
 800a1b6:	492d      	ldr	r1, [pc, #180]	; (800a26c <I2C_RequestMemoryWrite+0x128>)
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 f9bb 	bl	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e04c      	b.n	800a262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	617b      	str	r3, [r7, #20]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e0:	6a39      	ldr	r1, [r7, #32]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 fa46 	bl	800a674 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00d      	beq.n	800a20a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d107      	bne.n	800a206 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e02b      	b.n	800a262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a20a:	88fb      	ldrh	r3, [r7, #6]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d105      	bne.n	800a21c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a210:	893b      	ldrh	r3, [r7, #8]
 800a212:	b2da      	uxtb	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	611a      	str	r2, [r3, #16]
 800a21a:	e021      	b.n	800a260 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a21c:	893b      	ldrh	r3, [r7, #8]
 800a21e:	0a1b      	lsrs	r3, r3, #8
 800a220:	b29b      	uxth	r3, r3
 800a222:	b2da      	uxtb	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22c:	6a39      	ldr	r1, [r7, #32]
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f000 fa20 	bl	800a674 <I2C_WaitOnTXEFlagUntilTimeout>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00d      	beq.n	800a256 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d107      	bne.n	800a252 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e005      	b.n	800a262 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a256:	893b      	ldrh	r3, [r7, #8]
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	00010002 	.word	0x00010002

0800a270 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af02      	add	r7, sp, #8
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	4608      	mov	r0, r1
 800a27a:	4611      	mov	r1, r2
 800a27c:	461a      	mov	r2, r3
 800a27e:	4603      	mov	r3, r0
 800a280:	817b      	strh	r3, [r7, #10]
 800a282:	460b      	mov	r3, r1
 800a284:	813b      	strh	r3, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a298:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 f8c2 	bl	800a440 <I2C_WaitOnFlagUntilTimeout>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00d      	beq.n	800a2de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d0:	d103      	bne.n	800a2da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e0aa      	b.n	800a434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2de:	897b      	ldrh	r3, [r7, #10]
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	6a3a      	ldr	r2, [r7, #32]
 800a2f2:	4952      	ldr	r1, [pc, #328]	; (800a43c <I2C_RequestMemoryRead+0x1cc>)
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f91d 	bl	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e097      	b.n	800a434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	617b      	str	r3, [r7, #20]
 800a318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31c:	6a39      	ldr	r1, [r7, #32]
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 f9a8 	bl	800a674 <I2C_WaitOnTXEFlagUntilTimeout>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00d      	beq.n	800a346 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d107      	bne.n	800a342 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e076      	b.n	800a434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a346:	88fb      	ldrh	r3, [r7, #6]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d105      	bne.n	800a358 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a34c:	893b      	ldrh	r3, [r7, #8]
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	611a      	str	r2, [r3, #16]
 800a356:	e021      	b.n	800a39c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a358:	893b      	ldrh	r3, [r7, #8]
 800a35a:	0a1b      	lsrs	r3, r3, #8
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a368:	6a39      	ldr	r1, [r7, #32]
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f982 	bl	800a674 <I2C_WaitOnTXEFlagUntilTimeout>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00d      	beq.n	800a392 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d107      	bne.n	800a38e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a38c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e050      	b.n	800a434 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a392:	893b      	ldrh	r3, [r7, #8]
 800a394:	b2da      	uxtb	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a39c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39e:	6a39      	ldr	r1, [r7, #32]
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 f967 	bl	800a674 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00d      	beq.n	800a3c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d107      	bne.n	800a3c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e035      	b.n	800a434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f000 f82b 	bl	800a440 <I2C_WaitOnFlagUntilTimeout>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00d      	beq.n	800a40c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3fe:	d103      	bne.n	800a408 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e013      	b.n	800a434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a40c:	897b      	ldrh	r3, [r7, #10]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	f043 0301 	orr.w	r3, r3, #1
 800a414:	b2da      	uxtb	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	6a3a      	ldr	r2, [r7, #32]
 800a420:	4906      	ldr	r1, [pc, #24]	; (800a43c <I2C_RequestMemoryRead+0x1cc>)
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 f886 	bl	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e000      	b.n	800a434 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	00010002 	.word	0x00010002

0800a440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	4613      	mov	r3, r2
 800a44e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a450:	e048      	b.n	800a4e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a458:	d044      	beq.n	800a4e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a45a:	f7fe f9e3 	bl	8008824 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d302      	bcc.n	800a470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d139      	bne.n	800a4e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	0c1b      	lsrs	r3, r3, #16
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b01      	cmp	r3, #1
 800a478:	d10d      	bne.n	800a496 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	43da      	mvns	r2, r3
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	4013      	ands	r3, r2
 800a486:	b29b      	uxth	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	bf0c      	ite	eq
 800a48c:	2301      	moveq	r3, #1
 800a48e:	2300      	movne	r3, #0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	461a      	mov	r2, r3
 800a494:	e00c      	b.n	800a4b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	43da      	mvns	r2, r3
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	bf0c      	ite	eq
 800a4a8:	2301      	moveq	r3, #1
 800a4aa:	2300      	movne	r3, #0
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d116      	bne.n	800a4e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d0:	f043 0220 	orr.w	r2, r3, #32
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e023      	b.n	800a52c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	0c1b      	lsrs	r3, r3, #16
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d10d      	bne.n	800a50a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	43da      	mvns	r2, r3
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bf0c      	ite	eq
 800a500:	2301      	moveq	r3, #1
 800a502:	2300      	movne	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	461a      	mov	r2, r3
 800a508:	e00c      	b.n	800a524 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	43da      	mvns	r2, r3
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	4013      	ands	r3, r2
 800a516:	b29b      	uxth	r3, r3
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bf0c      	ite	eq
 800a51c:	2301      	moveq	r3, #1
 800a51e:	2300      	movne	r3, #0
 800a520:	b2db      	uxtb	r3, r3
 800a522:	461a      	mov	r2, r3
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	429a      	cmp	r2, r3
 800a528:	d093      	beq.n	800a452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a542:	e071      	b.n	800a628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a54e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a552:	d123      	bne.n	800a59c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a562:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a56c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2220      	movs	r2, #32
 800a578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a588:	f043 0204 	orr.w	r2, r3, #4
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e067      	b.n	800a66c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5a2:	d041      	beq.n	800a628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5a4:	f7fe f93e 	bl	8008824 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d302      	bcc.n	800a5ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d136      	bne.n	800a628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	0c1b      	lsrs	r3, r3, #16
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d10c      	bne.n	800a5de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	43da      	mvns	r2, r3
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	bf14      	ite	ne
 800a5d6:	2301      	movne	r3, #1
 800a5d8:	2300      	moveq	r3, #0
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	e00b      	b.n	800a5f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	43da      	mvns	r2, r3
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bf14      	ite	ne
 800a5f0:	2301      	movne	r3, #1
 800a5f2:	2300      	moveq	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d016      	beq.n	800a628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2220      	movs	r2, #32
 800a604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	f043 0220 	orr.w	r2, r3, #32
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e021      	b.n	800a66c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	0c1b      	lsrs	r3, r3, #16
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d10c      	bne.n	800a64c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	43da      	mvns	r2, r3
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	4013      	ands	r3, r2
 800a63e:	b29b      	uxth	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	bf14      	ite	ne
 800a644:	2301      	movne	r3, #1
 800a646:	2300      	moveq	r3, #0
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	e00b      	b.n	800a664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	43da      	mvns	r2, r3
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	4013      	ands	r3, r2
 800a658:	b29b      	uxth	r3, r3
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	bf14      	ite	ne
 800a65e:	2301      	movne	r3, #1
 800a660:	2300      	moveq	r3, #0
 800a662:	b2db      	uxtb	r3, r3
 800a664:	2b00      	cmp	r3, #0
 800a666:	f47f af6d 	bne.w	800a544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a680:	e034      	b.n	800a6ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 f8e3 	bl	800a84e <I2C_IsAcknowledgeFailed>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e034      	b.n	800a6fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a698:	d028      	beq.n	800a6ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a69a:	f7fe f8c3 	bl	8008824 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d302      	bcc.n	800a6b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d11d      	bne.n	800a6ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ba:	2b80      	cmp	r3, #128	; 0x80
 800a6bc:	d016      	beq.n	800a6ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d8:	f043 0220 	orr.w	r2, r3, #32
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e007      	b.n	800a6fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f6:	2b80      	cmp	r3, #128	; 0x80
 800a6f8:	d1c3      	bne.n	800a682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a710:	e034      	b.n	800a77c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 f89b 	bl	800a84e <I2C_IsAcknowledgeFailed>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e034      	b.n	800a78c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a728:	d028      	beq.n	800a77c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a72a:	f7fe f87b 	bl	8008824 <HAL_GetTick>
 800a72e:	4602      	mov	r2, r0
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	429a      	cmp	r2, r3
 800a738:	d302      	bcc.n	800a740 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d11d      	bne.n	800a77c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f003 0304 	and.w	r3, r3, #4
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d016      	beq.n	800a77c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2220      	movs	r2, #32
 800a758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a768:	f043 0220 	orr.w	r2, r3, #32
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e007      	b.n	800a78c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	f003 0304 	and.w	r3, r3, #4
 800a786:	2b04      	cmp	r3, #4
 800a788:	d1c3      	bne.n	800a712 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7a0:	e049      	b.n	800a836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	f003 0310 	and.w	r3, r3, #16
 800a7ac:	2b10      	cmp	r3, #16
 800a7ae:	d119      	bne.n	800a7e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0210 	mvn.w	r2, #16
 800a7b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e030      	b.n	800a846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7e4:	f7fe f81e 	bl	8008824 <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d302      	bcc.n	800a7fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d11d      	bne.n	800a836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a804:	2b40      	cmp	r3, #64	; 0x40
 800a806:	d016      	beq.n	800a836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2220      	movs	r2, #32
 800a812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a822:	f043 0220 	orr.w	r2, r3, #32
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e007      	b.n	800a846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a840:	2b40      	cmp	r3, #64	; 0x40
 800a842:	d1ae      	bne.n	800a7a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a864:	d11b      	bne.n	800a89e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a86e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f043 0204 	orr.w	r2, r3, #4
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e000      	b.n	800a8a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bc80      	pop	{r7}
 800a8a8:	4770      	bx	lr
	...

0800a8ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e272      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 8087 	beq.w	800a9da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8cc:	4b92      	ldr	r3, [pc, #584]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f003 030c 	and.w	r3, r3, #12
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	d00c      	beq.n	800a8f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a8d8:	4b8f      	ldr	r3, [pc, #572]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f003 030c 	and.w	r3, r3, #12
 800a8e0:	2b08      	cmp	r3, #8
 800a8e2:	d112      	bne.n	800a90a <HAL_RCC_OscConfig+0x5e>
 800a8e4:	4b8c      	ldr	r3, [pc, #560]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8f0:	d10b      	bne.n	800a90a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8f2:	4b89      	ldr	r3, [pc, #548]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d06c      	beq.n	800a9d8 <HAL_RCC_OscConfig+0x12c>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d168      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e24c      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a912:	d106      	bne.n	800a922 <HAL_RCC_OscConfig+0x76>
 800a914:	4b80      	ldr	r3, [pc, #512]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a7f      	ldr	r2, [pc, #508]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a91a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	e02e      	b.n	800a980 <HAL_RCC_OscConfig+0xd4>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10c      	bne.n	800a944 <HAL_RCC_OscConfig+0x98>
 800a92a:	4b7b      	ldr	r3, [pc, #492]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a7a      	ldr	r2, [pc, #488]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	4b78      	ldr	r3, [pc, #480]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a77      	ldr	r2, [pc, #476]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a93c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	e01d      	b.n	800a980 <HAL_RCC_OscConfig+0xd4>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a94c:	d10c      	bne.n	800a968 <HAL_RCC_OscConfig+0xbc>
 800a94e:	4b72      	ldr	r3, [pc, #456]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a71      	ldr	r2, [pc, #452]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	4b6f      	ldr	r3, [pc, #444]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a6e      	ldr	r2, [pc, #440]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	e00b      	b.n	800a980 <HAL_RCC_OscConfig+0xd4>
 800a968:	4b6b      	ldr	r3, [pc, #428]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a6a      	ldr	r2, [pc, #424]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a96e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	4b68      	ldr	r3, [pc, #416]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a67      	ldr	r2, [pc, #412]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a97a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a97e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d013      	beq.n	800a9b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a988:	f7fd ff4c 	bl	8008824 <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a990:	f7fd ff48 	bl	8008824 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b64      	cmp	r3, #100	; 0x64
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e200      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9a2:	4b5d      	ldr	r3, [pc, #372]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0f0      	beq.n	800a990 <HAL_RCC_OscConfig+0xe4>
 800a9ae:	e014      	b.n	800a9da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9b0:	f7fd ff38 	bl	8008824 <HAL_GetTick>
 800a9b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9b6:	e008      	b.n	800a9ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9b8:	f7fd ff34 	bl	8008824 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b64      	cmp	r3, #100	; 0x64
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e1ec      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9ca:	4b53      	ldr	r3, [pc, #332]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1f0      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x10c>
 800a9d6:	e000      	b.n	800a9da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0302 	and.w	r3, r3, #2
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d063      	beq.n	800aaae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9e6:	4b4c      	ldr	r3, [pc, #304]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	f003 030c 	and.w	r3, r3, #12
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00b      	beq.n	800aa0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a9f2:	4b49      	ldr	r3, [pc, #292]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f003 030c 	and.w	r3, r3, #12
 800a9fa:	2b08      	cmp	r3, #8
 800a9fc:	d11c      	bne.n	800aa38 <HAL_RCC_OscConfig+0x18c>
 800a9fe:	4b46      	ldr	r3, [pc, #280]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d116      	bne.n	800aa38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa0a:	4b43      	ldr	r3, [pc, #268]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0302 	and.w	r3, r3, #2
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d005      	beq.n	800aa22 <HAL_RCC_OscConfig+0x176>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d001      	beq.n	800aa22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e1c0      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa22:	4b3d      	ldr	r3, [pc, #244]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	4939      	ldr	r1, [pc, #228]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800aa32:	4313      	orrs	r3, r2
 800aa34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa36:	e03a      	b.n	800aaae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d020      	beq.n	800aa82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa40:	4b36      	ldr	r3, [pc, #216]	; (800ab1c <HAL_RCC_OscConfig+0x270>)
 800aa42:	2201      	movs	r2, #1
 800aa44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa46:	f7fd feed 	bl	8008824 <HAL_GetTick>
 800aa4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa4c:	e008      	b.n	800aa60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa4e:	f7fd fee9 	bl	8008824 <HAL_GetTick>
 800aa52:	4602      	mov	r2, r0
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d901      	bls.n	800aa60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e1a1      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa60:	4b2d      	ldr	r3, [pc, #180]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d0f0      	beq.n	800aa4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa6c:	4b2a      	ldr	r3, [pc, #168]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	4927      	ldr	r1, [pc, #156]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	600b      	str	r3, [r1, #0]
 800aa80:	e015      	b.n	800aaae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa82:	4b26      	ldr	r3, [pc, #152]	; (800ab1c <HAL_RCC_OscConfig+0x270>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa88:	f7fd fecc 	bl	8008824 <HAL_GetTick>
 800aa8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa8e:	e008      	b.n	800aaa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa90:	f7fd fec8 	bl	8008824 <HAL_GetTick>
 800aa94:	4602      	mov	r2, r0
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d901      	bls.n	800aaa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e180      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aaa2:	4b1d      	ldr	r3, [pc, #116]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 0302 	and.w	r3, r3, #2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1f0      	bne.n	800aa90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0308 	and.w	r3, r3, #8
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d03a      	beq.n	800ab30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d019      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aac2:	4b17      	ldr	r3, [pc, #92]	; (800ab20 <HAL_RCC_OscConfig+0x274>)
 800aac4:	2201      	movs	r2, #1
 800aac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aac8:	f7fd feac 	bl	8008824 <HAL_GetTick>
 800aacc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aace:	e008      	b.n	800aae2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aad0:	f7fd fea8 	bl	8008824 <HAL_GetTick>
 800aad4:	4602      	mov	r2, r0
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d901      	bls.n	800aae2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aade:	2303      	movs	r3, #3
 800aae0:	e160      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aae2:	4b0d      	ldr	r3, [pc, #52]	; (800ab18 <HAL_RCC_OscConfig+0x26c>)
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	f003 0302 	and.w	r3, r3, #2
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d0f0      	beq.n	800aad0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aaee:	2001      	movs	r0, #1
 800aaf0:	f000 face 	bl	800b090 <RCC_Delay>
 800aaf4:	e01c      	b.n	800ab30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aaf6:	4b0a      	ldr	r3, [pc, #40]	; (800ab20 <HAL_RCC_OscConfig+0x274>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aafc:	f7fd fe92 	bl	8008824 <HAL_GetTick>
 800ab00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab02:	e00f      	b.n	800ab24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab04:	f7fd fe8e 	bl	8008824 <HAL_GetTick>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d908      	bls.n	800ab24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ab12:	2303      	movs	r3, #3
 800ab14:	e146      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
 800ab16:	bf00      	nop
 800ab18:	40021000 	.word	0x40021000
 800ab1c:	42420000 	.word	0x42420000
 800ab20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab24:	4b92      	ldr	r3, [pc, #584]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	f003 0302 	and.w	r3, r3, #2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1e9      	bne.n	800ab04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f000 80a6 	beq.w	800ac8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab42:	4b8b      	ldr	r3, [pc, #556]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10d      	bne.n	800ab6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab4e:	4b88      	ldr	r3, [pc, #544]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	4a87      	ldr	r2, [pc, #540]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ab54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab58:	61d3      	str	r3, [r2, #28]
 800ab5a:	4b85      	ldr	r3, [pc, #532]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab62:	60bb      	str	r3, [r7, #8]
 800ab64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab66:	2301      	movs	r3, #1
 800ab68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab6a:	4b82      	ldr	r3, [pc, #520]	; (800ad74 <HAL_RCC_OscConfig+0x4c8>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d118      	bne.n	800aba8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab76:	4b7f      	ldr	r3, [pc, #508]	; (800ad74 <HAL_RCC_OscConfig+0x4c8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a7e      	ldr	r2, [pc, #504]	; (800ad74 <HAL_RCC_OscConfig+0x4c8>)
 800ab7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab82:	f7fd fe4f 	bl	8008824 <HAL_GetTick>
 800ab86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab88:	e008      	b.n	800ab9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab8a:	f7fd fe4b 	bl	8008824 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	2b64      	cmp	r3, #100	; 0x64
 800ab96:	d901      	bls.n	800ab9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e103      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab9c:	4b75      	ldr	r3, [pc, #468]	; (800ad74 <HAL_RCC_OscConfig+0x4c8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0f0      	beq.n	800ab8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d106      	bne.n	800abbe <HAL_RCC_OscConfig+0x312>
 800abb0:	4b6f      	ldr	r3, [pc, #444]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	4a6e      	ldr	r2, [pc, #440]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abb6:	f043 0301 	orr.w	r3, r3, #1
 800abba:	6213      	str	r3, [r2, #32]
 800abbc:	e02d      	b.n	800ac1a <HAL_RCC_OscConfig+0x36e>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10c      	bne.n	800abe0 <HAL_RCC_OscConfig+0x334>
 800abc6:	4b6a      	ldr	r3, [pc, #424]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	4a69      	ldr	r2, [pc, #420]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abcc:	f023 0301 	bic.w	r3, r3, #1
 800abd0:	6213      	str	r3, [r2, #32]
 800abd2:	4b67      	ldr	r3, [pc, #412]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	4a66      	ldr	r2, [pc, #408]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abd8:	f023 0304 	bic.w	r3, r3, #4
 800abdc:	6213      	str	r3, [r2, #32]
 800abde:	e01c      	b.n	800ac1a <HAL_RCC_OscConfig+0x36e>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	2b05      	cmp	r3, #5
 800abe6:	d10c      	bne.n	800ac02 <HAL_RCC_OscConfig+0x356>
 800abe8:	4b61      	ldr	r3, [pc, #388]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	4a60      	ldr	r2, [pc, #384]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abee:	f043 0304 	orr.w	r3, r3, #4
 800abf2:	6213      	str	r3, [r2, #32]
 800abf4:	4b5e      	ldr	r3, [pc, #376]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	4a5d      	ldr	r2, [pc, #372]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800abfa:	f043 0301 	orr.w	r3, r3, #1
 800abfe:	6213      	str	r3, [r2, #32]
 800ac00:	e00b      	b.n	800ac1a <HAL_RCC_OscConfig+0x36e>
 800ac02:	4b5b      	ldr	r3, [pc, #364]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	4a5a      	ldr	r2, [pc, #360]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ac08:	f023 0301 	bic.w	r3, r3, #1
 800ac0c:	6213      	str	r3, [r2, #32]
 800ac0e:	4b58      	ldr	r3, [pc, #352]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	4a57      	ldr	r2, [pc, #348]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ac14:	f023 0304 	bic.w	r3, r3, #4
 800ac18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d015      	beq.n	800ac4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac22:	f7fd fdff 	bl	8008824 <HAL_GetTick>
 800ac26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac28:	e00a      	b.n	800ac40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac2a:	f7fd fdfb 	bl	8008824 <HAL_GetTick>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d901      	bls.n	800ac40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e0b1      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac40:	4b4b      	ldr	r3, [pc, #300]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ac42:	6a1b      	ldr	r3, [r3, #32]
 800ac44:	f003 0302 	and.w	r3, r3, #2
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d0ee      	beq.n	800ac2a <HAL_RCC_OscConfig+0x37e>
 800ac4c:	e014      	b.n	800ac78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac4e:	f7fd fde9 	bl	8008824 <HAL_GetTick>
 800ac52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac54:	e00a      	b.n	800ac6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac56:	f7fd fde5 	bl	8008824 <HAL_GetTick>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d901      	bls.n	800ac6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	e09b      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac6c:	4b40      	ldr	r3, [pc, #256]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ac6e:	6a1b      	ldr	r3, [r3, #32]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1ee      	bne.n	800ac56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d105      	bne.n	800ac8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac7e:	4b3c      	ldr	r3, [pc, #240]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ac80:	69db      	ldr	r3, [r3, #28]
 800ac82:	4a3b      	ldr	r2, [pc, #236]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ac84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 8087 	beq.w	800ada2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac94:	4b36      	ldr	r3, [pc, #216]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	f003 030c 	and.w	r3, r3, #12
 800ac9c:	2b08      	cmp	r3, #8
 800ac9e:	d061      	beq.n	800ad64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	69db      	ldr	r3, [r3, #28]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d146      	bne.n	800ad36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aca8:	4b33      	ldr	r3, [pc, #204]	; (800ad78 <HAL_RCC_OscConfig+0x4cc>)
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acae:	f7fd fdb9 	bl	8008824 <HAL_GetTick>
 800acb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acb4:	e008      	b.n	800acc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acb6:	f7fd fdb5 	bl	8008824 <HAL_GetTick>
 800acba:	4602      	mov	r2, r0
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d901      	bls.n	800acc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800acc4:	2303      	movs	r3, #3
 800acc6:	e06d      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acc8:	4b29      	ldr	r3, [pc, #164]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1f0      	bne.n	800acb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acdc:	d108      	bne.n	800acf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800acde:	4b24      	ldr	r3, [pc, #144]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	4921      	ldr	r1, [pc, #132]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800acec:	4313      	orrs	r3, r2
 800acee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acf0:	4b1f      	ldr	r3, [pc, #124]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a19      	ldr	r1, [r3, #32]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	430b      	orrs	r3, r1
 800ad02:	491b      	ldr	r1, [pc, #108]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ad04:	4313      	orrs	r3, r2
 800ad06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad08:	4b1b      	ldr	r3, [pc, #108]	; (800ad78 <HAL_RCC_OscConfig+0x4cc>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad0e:	f7fd fd89 	bl	8008824 <HAL_GetTick>
 800ad12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad14:	e008      	b.n	800ad28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad16:	f7fd fd85 	bl	8008824 <HAL_GetTick>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d901      	bls.n	800ad28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e03d      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad28:	4b11      	ldr	r3, [pc, #68]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0f0      	beq.n	800ad16 <HAL_RCC_OscConfig+0x46a>
 800ad34:	e035      	b.n	800ada2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad36:	4b10      	ldr	r3, [pc, #64]	; (800ad78 <HAL_RCC_OscConfig+0x4cc>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad3c:	f7fd fd72 	bl	8008824 <HAL_GetTick>
 800ad40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad42:	e008      	b.n	800ad56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad44:	f7fd fd6e 	bl	8008824 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d901      	bls.n	800ad56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e026      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad56:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <HAL_RCC_OscConfig+0x4c4>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1f0      	bne.n	800ad44 <HAL_RCC_OscConfig+0x498>
 800ad62:	e01e      	b.n	800ada2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d107      	bne.n	800ad7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e019      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
 800ad70:	40021000 	.word	0x40021000
 800ad74:	40007000 	.word	0x40007000
 800ad78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad7c:	4b0b      	ldr	r3, [pc, #44]	; (800adac <HAL_RCC_OscConfig+0x500>)
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a1b      	ldr	r3, [r3, #32]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d106      	bne.n	800ad9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d001      	beq.n	800ada2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e000      	b.n	800ada4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3718      	adds	r7, #24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	40021000 	.word	0x40021000

0800adb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e0d0      	b.n	800af66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adc4:	4b6a      	ldr	r3, [pc, #424]	; (800af70 <HAL_RCC_ClockConfig+0x1c0>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 0307 	and.w	r3, r3, #7
 800adcc:	683a      	ldr	r2, [r7, #0]
 800adce:	429a      	cmp	r2, r3
 800add0:	d910      	bls.n	800adf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800add2:	4b67      	ldr	r3, [pc, #412]	; (800af70 <HAL_RCC_ClockConfig+0x1c0>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f023 0207 	bic.w	r2, r3, #7
 800adda:	4965      	ldr	r1, [pc, #404]	; (800af70 <HAL_RCC_ClockConfig+0x1c0>)
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	4313      	orrs	r3, r2
 800ade0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ade2:	4b63      	ldr	r3, [pc, #396]	; (800af70 <HAL_RCC_ClockConfig+0x1c0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0307 	and.w	r3, r3, #7
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	429a      	cmp	r2, r3
 800adee:	d001      	beq.n	800adf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e0b8      	b.n	800af66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 0302 	and.w	r3, r3, #2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d020      	beq.n	800ae42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae0c:	4b59      	ldr	r3, [pc, #356]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	4a58      	ldr	r2, [pc, #352]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ae16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0308 	and.w	r3, r3, #8
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d005      	beq.n	800ae30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae24:	4b53      	ldr	r3, [pc, #332]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	4a52      	ldr	r2, [pc, #328]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ae2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae30:	4b50      	ldr	r3, [pc, #320]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	494d      	ldr	r1, [pc, #308]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0301 	and.w	r3, r3, #1
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d040      	beq.n	800aed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d107      	bne.n	800ae66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae56:	4b47      	ldr	r3, [pc, #284]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d115      	bne.n	800ae8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e07f      	b.n	800af66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d107      	bne.n	800ae7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae6e:	4b41      	ldr	r3, [pc, #260]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e073      	b.n	800af66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae7e:	4b3d      	ldr	r3, [pc, #244]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e06b      	b.n	800af66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae8e:	4b39      	ldr	r3, [pc, #228]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	f023 0203 	bic.w	r2, r3, #3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	4936      	ldr	r1, [pc, #216]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aea0:	f7fd fcc0 	bl	8008824 <HAL_GetTick>
 800aea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aea6:	e00a      	b.n	800aebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aea8:	f7fd fcbc 	bl	8008824 <HAL_GetTick>
 800aeac:	4602      	mov	r2, r0
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d901      	bls.n	800aebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e053      	b.n	800af66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aebe:	4b2d      	ldr	r3, [pc, #180]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f003 020c 	and.w	r2, r3, #12
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	429a      	cmp	r2, r3
 800aece:	d1eb      	bne.n	800aea8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aed0:	4b27      	ldr	r3, [pc, #156]	; (800af70 <HAL_RCC_ClockConfig+0x1c0>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0307 	and.w	r3, r3, #7
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d210      	bcs.n	800af00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aede:	4b24      	ldr	r3, [pc, #144]	; (800af70 <HAL_RCC_ClockConfig+0x1c0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f023 0207 	bic.w	r2, r3, #7
 800aee6:	4922      	ldr	r1, [pc, #136]	; (800af70 <HAL_RCC_ClockConfig+0x1c0>)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeee:	4b20      	ldr	r3, [pc, #128]	; (800af70 <HAL_RCC_ClockConfig+0x1c0>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 0307 	and.w	r3, r3, #7
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d001      	beq.n	800af00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e032      	b.n	800af66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d008      	beq.n	800af1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af0c:	4b19      	ldr	r3, [pc, #100]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	4916      	ldr	r1, [pc, #88]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	2b00      	cmp	r3, #0
 800af28:	d009      	beq.n	800af3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800af2a:	4b12      	ldr	r3, [pc, #72]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	00db      	lsls	r3, r3, #3
 800af38:	490e      	ldr	r1, [pc, #56]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af3e:	f000 f821 	bl	800af84 <HAL_RCC_GetSysClockFreq>
 800af42:	4602      	mov	r2, r0
 800af44:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <HAL_RCC_ClockConfig+0x1c4>)
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	091b      	lsrs	r3, r3, #4
 800af4a:	f003 030f 	and.w	r3, r3, #15
 800af4e:	490a      	ldr	r1, [pc, #40]	; (800af78 <HAL_RCC_ClockConfig+0x1c8>)
 800af50:	5ccb      	ldrb	r3, [r1, r3]
 800af52:	fa22 f303 	lsr.w	r3, r2, r3
 800af56:	4a09      	ldr	r2, [pc, #36]	; (800af7c <HAL_RCC_ClockConfig+0x1cc>)
 800af58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af5a:	4b09      	ldr	r3, [pc, #36]	; (800af80 <HAL_RCC_ClockConfig+0x1d0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fd fc1e 	bl	80087a0 <HAL_InitTick>

  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	40022000 	.word	0x40022000
 800af74:	40021000 	.word	0x40021000
 800af78:	0800de2c 	.word	0x0800de2c
 800af7c:	200000b0 	.word	0x200000b0
 800af80:	200000b4 	.word	0x200000b4

0800af84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
 800af8e:	2300      	movs	r3, #0
 800af90:	60bb      	str	r3, [r7, #8]
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]
 800af96:	2300      	movs	r3, #0
 800af98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af9a:	2300      	movs	r3, #0
 800af9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af9e:	4b1e      	ldr	r3, [pc, #120]	; (800b018 <HAL_RCC_GetSysClockFreq+0x94>)
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f003 030c 	and.w	r3, r3, #12
 800afaa:	2b04      	cmp	r3, #4
 800afac:	d002      	beq.n	800afb4 <HAL_RCC_GetSysClockFreq+0x30>
 800afae:	2b08      	cmp	r3, #8
 800afb0:	d003      	beq.n	800afba <HAL_RCC_GetSysClockFreq+0x36>
 800afb2:	e027      	b.n	800b004 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800afb4:	4b19      	ldr	r3, [pc, #100]	; (800b01c <HAL_RCC_GetSysClockFreq+0x98>)
 800afb6:	613b      	str	r3, [r7, #16]
      break;
 800afb8:	e027      	b.n	800b00a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	0c9b      	lsrs	r3, r3, #18
 800afbe:	f003 030f 	and.w	r3, r3, #15
 800afc2:	4a17      	ldr	r2, [pc, #92]	; (800b020 <HAL_RCC_GetSysClockFreq+0x9c>)
 800afc4:	5cd3      	ldrb	r3, [r2, r3]
 800afc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d010      	beq.n	800aff4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800afd2:	4b11      	ldr	r3, [pc, #68]	; (800b018 <HAL_RCC_GetSysClockFreq+0x94>)
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	0c5b      	lsrs	r3, r3, #17
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	4a11      	ldr	r2, [pc, #68]	; (800b024 <HAL_RCC_GetSysClockFreq+0xa0>)
 800afde:	5cd3      	ldrb	r3, [r2, r3]
 800afe0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a0d      	ldr	r2, [pc, #52]	; (800b01c <HAL_RCC_GetSysClockFreq+0x98>)
 800afe6:	fb03 f202 	mul.w	r2, r3, r2
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff0:	617b      	str	r3, [r7, #20]
 800aff2:	e004      	b.n	800affe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a0c      	ldr	r2, [pc, #48]	; (800b028 <HAL_RCC_GetSysClockFreq+0xa4>)
 800aff8:	fb02 f303 	mul.w	r3, r2, r3
 800affc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	613b      	str	r3, [r7, #16]
      break;
 800b002:	e002      	b.n	800b00a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b004:	4b05      	ldr	r3, [pc, #20]	; (800b01c <HAL_RCC_GetSysClockFreq+0x98>)
 800b006:	613b      	str	r3, [r7, #16]
      break;
 800b008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b00a:	693b      	ldr	r3, [r7, #16]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	371c      	adds	r7, #28
 800b010:	46bd      	mov	sp, r7
 800b012:	bc80      	pop	{r7}
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	40021000 	.word	0x40021000
 800b01c:	007a1200 	.word	0x007a1200
 800b020:	0800de44 	.word	0x0800de44
 800b024:	0800de54 	.word	0x0800de54
 800b028:	003d0900 	.word	0x003d0900

0800b02c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b030:	4b02      	ldr	r3, [pc, #8]	; (800b03c <HAL_RCC_GetHCLKFreq+0x10>)
 800b032:	681b      	ldr	r3, [r3, #0]
}
 800b034:	4618      	mov	r0, r3
 800b036:	46bd      	mov	sp, r7
 800b038:	bc80      	pop	{r7}
 800b03a:	4770      	bx	lr
 800b03c:	200000b0 	.word	0x200000b0

0800b040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b044:	f7ff fff2 	bl	800b02c <HAL_RCC_GetHCLKFreq>
 800b048:	4602      	mov	r2, r0
 800b04a:	4b05      	ldr	r3, [pc, #20]	; (800b060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	0a1b      	lsrs	r3, r3, #8
 800b050:	f003 0307 	and.w	r3, r3, #7
 800b054:	4903      	ldr	r1, [pc, #12]	; (800b064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b056:	5ccb      	ldrb	r3, [r1, r3]
 800b058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	40021000 	.word	0x40021000
 800b064:	0800de3c 	.word	0x0800de3c

0800b068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b06c:	f7ff ffde 	bl	800b02c <HAL_RCC_GetHCLKFreq>
 800b070:	4602      	mov	r2, r0
 800b072:	4b05      	ldr	r3, [pc, #20]	; (800b088 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	0adb      	lsrs	r3, r3, #11
 800b078:	f003 0307 	and.w	r3, r3, #7
 800b07c:	4903      	ldr	r1, [pc, #12]	; (800b08c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b07e:	5ccb      	ldrb	r3, [r1, r3]
 800b080:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b084:	4618      	mov	r0, r3
 800b086:	bd80      	pop	{r7, pc}
 800b088:	40021000 	.word	0x40021000
 800b08c:	0800de3c 	.word	0x0800de3c

0800b090 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b098:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <RCC_Delay+0x34>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a0a      	ldr	r2, [pc, #40]	; (800b0c8 <RCC_Delay+0x38>)
 800b09e:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a2:	0a5b      	lsrs	r3, r3, #9
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	fb02 f303 	mul.w	r3, r2, r3
 800b0aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b0ac:	bf00      	nop
  }
  while (Delay --);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	1e5a      	subs	r2, r3, #1
 800b0b2:	60fa      	str	r2, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1f9      	bne.n	800b0ac <RCC_Delay+0x1c>
}
 800b0b8:	bf00      	nop
 800b0ba:	bf00      	nop
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bc80      	pop	{r7}
 800b0c2:	4770      	bx	lr
 800b0c4:	200000b0 	.word	0x200000b0
 800b0c8:	10624dd3 	.word	0x10624dd3

0800b0cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e041      	b.n	800b162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7fd fa26 	bl	8008544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3304      	adds	r3, #4
 800b108:	4619      	mov	r1, r3
 800b10a:	4610      	mov	r0, r2
 800b10c:	f000 fa82 	bl	800b614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d001      	beq.n	800b184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	e044      	b.n	800b20e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0201 	orr.w	r2, r2, #1
 800b19a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a1d      	ldr	r2, [pc, #116]	; (800b218 <HAL_TIM_Base_Start_IT+0xac>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d018      	beq.n	800b1d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a1c      	ldr	r2, [pc, #112]	; (800b21c <HAL_TIM_Base_Start_IT+0xb0>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d013      	beq.n	800b1d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1b8:	d00e      	beq.n	800b1d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a18      	ldr	r2, [pc, #96]	; (800b220 <HAL_TIM_Base_Start_IT+0xb4>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d009      	beq.n	800b1d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a16      	ldr	r2, [pc, #88]	; (800b224 <HAL_TIM_Base_Start_IT+0xb8>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d004      	beq.n	800b1d8 <HAL_TIM_Base_Start_IT+0x6c>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a15      	ldr	r2, [pc, #84]	; (800b228 <HAL_TIM_Base_Start_IT+0xbc>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d111      	bne.n	800b1fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f003 0307 	and.w	r3, r3, #7
 800b1e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2b06      	cmp	r3, #6
 800b1e8:	d010      	beq.n	800b20c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f042 0201 	orr.w	r2, r2, #1
 800b1f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1fa:	e007      	b.n	800b20c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f042 0201 	orr.w	r2, r2, #1
 800b20a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	bc80      	pop	{r7}
 800b216:	4770      	bx	lr
 800b218:	40012c00 	.word	0x40012c00
 800b21c:	40013400 	.word	0x40013400
 800b220:	40000400 	.word	0x40000400
 800b224:	40000800 	.word	0x40000800
 800b228:	40000c00 	.word	0x40000c00

0800b22c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	f003 0302 	and.w	r3, r3, #2
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d122      	bne.n	800b288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f003 0302 	and.w	r3, r3, #2
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d11b      	bne.n	800b288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f06f 0202 	mvn.w	r2, #2
 800b258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	699b      	ldr	r3, [r3, #24]
 800b266:	f003 0303 	and.w	r3, r3, #3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d003      	beq.n	800b276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f9b4 	bl	800b5dc <HAL_TIM_IC_CaptureCallback>
 800b274:	e005      	b.n	800b282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f9a7 	bl	800b5ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f9b6 	bl	800b5ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	f003 0304 	and.w	r3, r3, #4
 800b292:	2b04      	cmp	r3, #4
 800b294:	d122      	bne.n	800b2dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f003 0304 	and.w	r3, r3, #4
 800b2a0:	2b04      	cmp	r3, #4
 800b2a2:	d11b      	bne.n	800b2dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f06f 0204 	mvn.w	r2, #4
 800b2ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f98a 	bl	800b5dc <HAL_TIM_IC_CaptureCallback>
 800b2c8:	e005      	b.n	800b2d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f97d 	bl	800b5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f98c 	bl	800b5ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	f003 0308 	and.w	r3, r3, #8
 800b2e6:	2b08      	cmp	r3, #8
 800b2e8:	d122      	bne.n	800b330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	f003 0308 	and.w	r3, r3, #8
 800b2f4:	2b08      	cmp	r3, #8
 800b2f6:	d11b      	bne.n	800b330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f06f 0208 	mvn.w	r2, #8
 800b300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2204      	movs	r2, #4
 800b306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	2b00      	cmp	r3, #0
 800b314:	d003      	beq.n	800b31e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f960 	bl	800b5dc <HAL_TIM_IC_CaptureCallback>
 800b31c:	e005      	b.n	800b32a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f953 	bl	800b5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f962 	bl	800b5ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	f003 0310 	and.w	r3, r3, #16
 800b33a:	2b10      	cmp	r3, #16
 800b33c:	d122      	bne.n	800b384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	f003 0310 	and.w	r3, r3, #16
 800b348:	2b10      	cmp	r3, #16
 800b34a:	d11b      	bne.n	800b384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f06f 0210 	mvn.w	r2, #16
 800b354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2208      	movs	r2, #8
 800b35a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f936 	bl	800b5dc <HAL_TIM_IC_CaptureCallback>
 800b370:	e005      	b.n	800b37e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f929 	bl	800b5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 f938 	bl	800b5ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d10e      	bne.n	800b3b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d107      	bne.n	800b3b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f06f 0201 	mvn.w	r2, #1
 800b3a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7fc fd62 	bl	8007e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ba:	2b80      	cmp	r3, #128	; 0x80
 800b3bc:	d10e      	bne.n	800b3dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c8:	2b80      	cmp	r3, #128	; 0x80
 800b3ca:	d107      	bne.n	800b3dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 faa1 	bl	800b91e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e6:	2b40      	cmp	r3, #64	; 0x40
 800b3e8:	d10e      	bne.n	800b408 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f4:	2b40      	cmp	r3, #64	; 0x40
 800b3f6:	d107      	bne.n	800b408 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f8fc 	bl	800b600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	f003 0320 	and.w	r3, r3, #32
 800b412:	2b20      	cmp	r3, #32
 800b414:	d10e      	bne.n	800b434 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	f003 0320 	and.w	r3, r3, #32
 800b420:	2b20      	cmp	r3, #32
 800b422:	d107      	bne.n	800b434 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f06f 0220 	mvn.w	r2, #32
 800b42c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fa6c 	bl	800b90c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b434:	bf00      	nop
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b446:	2300      	movs	r3, #0
 800b448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b450:	2b01      	cmp	r3, #1
 800b452:	d101      	bne.n	800b458 <HAL_TIM_ConfigClockSource+0x1c>
 800b454:	2302      	movs	r3, #2
 800b456:	e0b4      	b.n	800b5c2 <HAL_TIM_ConfigClockSource+0x186>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2202      	movs	r2, #2
 800b464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b47e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b490:	d03e      	beq.n	800b510 <HAL_TIM_ConfigClockSource+0xd4>
 800b492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b496:	f200 8087 	bhi.w	800b5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b49e:	f000 8086 	beq.w	800b5ae <HAL_TIM_ConfigClockSource+0x172>
 800b4a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a6:	d87f      	bhi.n	800b5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a8:	2b70      	cmp	r3, #112	; 0x70
 800b4aa:	d01a      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0xa6>
 800b4ac:	2b70      	cmp	r3, #112	; 0x70
 800b4ae:	d87b      	bhi.n	800b5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4b0:	2b60      	cmp	r3, #96	; 0x60
 800b4b2:	d050      	beq.n	800b556 <HAL_TIM_ConfigClockSource+0x11a>
 800b4b4:	2b60      	cmp	r3, #96	; 0x60
 800b4b6:	d877      	bhi.n	800b5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4b8:	2b50      	cmp	r3, #80	; 0x50
 800b4ba:	d03c      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0xfa>
 800b4bc:	2b50      	cmp	r3, #80	; 0x50
 800b4be:	d873      	bhi.n	800b5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4c0:	2b40      	cmp	r3, #64	; 0x40
 800b4c2:	d058      	beq.n	800b576 <HAL_TIM_ConfigClockSource+0x13a>
 800b4c4:	2b40      	cmp	r3, #64	; 0x40
 800b4c6:	d86f      	bhi.n	800b5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4c8:	2b30      	cmp	r3, #48	; 0x30
 800b4ca:	d064      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x15a>
 800b4cc:	2b30      	cmp	r3, #48	; 0x30
 800b4ce:	d86b      	bhi.n	800b5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4d0:	2b20      	cmp	r3, #32
 800b4d2:	d060      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x15a>
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	d867      	bhi.n	800b5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d05c      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x15a>
 800b4dc:	2b10      	cmp	r3, #16
 800b4de:	d05a      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x15a>
 800b4e0:	e062      	b.n	800b5a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4f2:	f000 f980 	bl	800b7f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	609a      	str	r2, [r3, #8]
      break;
 800b50e:	e04f      	b.n	800b5b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b520:	f000 f969 	bl	800b7f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689a      	ldr	r2, [r3, #8]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b532:	609a      	str	r2, [r3, #8]
      break;
 800b534:	e03c      	b.n	800b5b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b542:	461a      	mov	r2, r3
 800b544:	f000 f8e0 	bl	800b708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2150      	movs	r1, #80	; 0x50
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 f937 	bl	800b7c2 <TIM_ITRx_SetConfig>
      break;
 800b554:	e02c      	b.n	800b5b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b562:	461a      	mov	r2, r3
 800b564:	f000 f8fe 	bl	800b764 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2160      	movs	r1, #96	; 0x60
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 f927 	bl	800b7c2 <TIM_ITRx_SetConfig>
      break;
 800b574:	e01c      	b.n	800b5b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b582:	461a      	mov	r2, r3
 800b584:	f000 f8c0 	bl	800b708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2140      	movs	r1, #64	; 0x40
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 f917 	bl	800b7c2 <TIM_ITRx_SetConfig>
      break;
 800b594:	e00c      	b.n	800b5b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	f000 f90e 	bl	800b7c2 <TIM_ITRx_SetConfig>
      break;
 800b5a6:	e003      	b.n	800b5b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ac:	e000      	b.n	800b5b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b083      	sub	sp, #12
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5d2:	bf00      	nop
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bc80      	pop	{r7}
 800b5da:	4770      	bx	lr

0800b5dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bc80      	pop	{r7}
 800b5ec:	4770      	bx	lr

0800b5ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5f6:	bf00      	nop
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bc80      	pop	{r7}
 800b5fe:	4770      	bx	lr

0800b600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bc80      	pop	{r7}
 800b610:	4770      	bx	lr
	...

0800b614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a33      	ldr	r2, [pc, #204]	; (800b6f4 <TIM_Base_SetConfig+0xe0>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d013      	beq.n	800b654 <TIM_Base_SetConfig+0x40>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a32      	ldr	r2, [pc, #200]	; (800b6f8 <TIM_Base_SetConfig+0xe4>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d00f      	beq.n	800b654 <TIM_Base_SetConfig+0x40>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63a:	d00b      	beq.n	800b654 <TIM_Base_SetConfig+0x40>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a2f      	ldr	r2, [pc, #188]	; (800b6fc <TIM_Base_SetConfig+0xe8>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d007      	beq.n	800b654 <TIM_Base_SetConfig+0x40>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a2e      	ldr	r2, [pc, #184]	; (800b700 <TIM_Base_SetConfig+0xec>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d003      	beq.n	800b654 <TIM_Base_SetConfig+0x40>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a2d      	ldr	r2, [pc, #180]	; (800b704 <TIM_Base_SetConfig+0xf0>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d108      	bne.n	800b666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b65a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	4313      	orrs	r3, r2
 800b664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a22      	ldr	r2, [pc, #136]	; (800b6f4 <TIM_Base_SetConfig+0xe0>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d013      	beq.n	800b696 <TIM_Base_SetConfig+0x82>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a21      	ldr	r2, [pc, #132]	; (800b6f8 <TIM_Base_SetConfig+0xe4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d00f      	beq.n	800b696 <TIM_Base_SetConfig+0x82>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b67c:	d00b      	beq.n	800b696 <TIM_Base_SetConfig+0x82>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a1e      	ldr	r2, [pc, #120]	; (800b6fc <TIM_Base_SetConfig+0xe8>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d007      	beq.n	800b696 <TIM_Base_SetConfig+0x82>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a1d      	ldr	r2, [pc, #116]	; (800b700 <TIM_Base_SetConfig+0xec>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d003      	beq.n	800b696 <TIM_Base_SetConfig+0x82>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a1c      	ldr	r2, [pc, #112]	; (800b704 <TIM_Base_SetConfig+0xf0>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d108      	bne.n	800b6a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b69c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	689a      	ldr	r2, [r3, #8]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a09      	ldr	r2, [pc, #36]	; (800b6f4 <TIM_Base_SetConfig+0xe0>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d003      	beq.n	800b6dc <TIM_Base_SetConfig+0xc8>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a08      	ldr	r2, [pc, #32]	; (800b6f8 <TIM_Base_SetConfig+0xe4>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d103      	bne.n	800b6e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	691a      	ldr	r2, [r3, #16]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	615a      	str	r2, [r3, #20]
}
 800b6ea:	bf00      	nop
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bc80      	pop	{r7}
 800b6f2:	4770      	bx	lr
 800b6f4:	40012c00 	.word	0x40012c00
 800b6f8:	40013400 	.word	0x40013400
 800b6fc:	40000400 	.word	0x40000400
 800b700:	40000800 	.word	0x40000800
 800b704:	40000c00 	.word	0x40000c00

0800b708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6a1b      	ldr	r3, [r3, #32]
 800b718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	f023 0201 	bic.w	r2, r3, #1
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	011b      	lsls	r3, r3, #4
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f023 030a 	bic.w	r3, r3, #10
 800b744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b746:	697a      	ldr	r2, [r7, #20]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	621a      	str	r2, [r3, #32]
}
 800b75a:	bf00      	nop
 800b75c:	371c      	adds	r7, #28
 800b75e:	46bd      	mov	sp, r7
 800b760:	bc80      	pop	{r7}
 800b762:	4770      	bx	lr

0800b764 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b764:	b480      	push	{r7}
 800b766:	b087      	sub	sp, #28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6a1b      	ldr	r3, [r3, #32]
 800b774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	f023 0210 	bic.w	r2, r3, #16
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	699b      	ldr	r3, [r3, #24]
 800b786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b78e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	031b      	lsls	r3, r3, #12
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	4313      	orrs	r3, r2
 800b798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	011b      	lsls	r3, r3, #4
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	621a      	str	r2, [r3, #32]
}
 800b7b8:	bf00      	nop
 800b7ba:	371c      	adds	r7, #28
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bc80      	pop	{r7}
 800b7c0:	4770      	bx	lr

0800b7c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	f043 0307 	orr.w	r3, r3, #7
 800b7e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	609a      	str	r2, [r3, #8]
}
 800b7ec:	bf00      	nop
 800b7ee:	3714      	adds	r7, #20
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bc80      	pop	{r7}
 800b7f4:	4770      	bx	lr

0800b7f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b087      	sub	sp, #28
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	60b9      	str	r1, [r7, #8]
 800b800:	607a      	str	r2, [r7, #4]
 800b802:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b810:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	021a      	lsls	r2, r3, #8
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	431a      	orrs	r2, r3
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	4313      	orrs	r3, r2
 800b822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	609a      	str	r2, [r3, #8]
}
 800b82a:	bf00      	nop
 800b82c:	371c      	adds	r7, #28
 800b82e:	46bd      	mov	sp, r7
 800b830:	bc80      	pop	{r7}
 800b832:	4770      	bx	lr

0800b834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b844:	2b01      	cmp	r3, #1
 800b846:	d101      	bne.n	800b84c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b848:	2302      	movs	r3, #2
 800b84a:	e050      	b.n	800b8ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2202      	movs	r2, #2
 800b858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a1b      	ldr	r2, [pc, #108]	; (800b8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d018      	beq.n	800b8c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a19      	ldr	r2, [pc, #100]	; (800b8fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d013      	beq.n	800b8c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a2:	d00e      	beq.n	800b8c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a15      	ldr	r2, [pc, #84]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d009      	beq.n	800b8c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a14      	ldr	r2, [pc, #80]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d004      	beq.n	800b8c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a12      	ldr	r2, [pc, #72]	; (800b908 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d10c      	bne.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bc80      	pop	{r7}
 800b8f6:	4770      	bx	lr
 800b8f8:	40012c00 	.word	0x40012c00
 800b8fc:	40013400 	.word	0x40013400
 800b900:	40000400 	.word	0x40000400
 800b904:	40000800 	.word	0x40000800
 800b908:	40000c00 	.word	0x40000c00

0800b90c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	bc80      	pop	{r7}
 800b91c:	4770      	bx	lr

0800b91e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b91e:	b480      	push	{r7}
 800b920:	b083      	sub	sp, #12
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b926:	bf00      	nop
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bc80      	pop	{r7}
 800b92e:	4770      	bx	lr

0800b930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e042      	b.n	800b9c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d106      	bne.n	800b95c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7fc fe1a 	bl	8008590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2224      	movs	r2, #36	; 0x24
 800b960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68da      	ldr	r2, [r3, #12]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fcb5 	bl	800c2e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	691a      	ldr	r2, [r3, #16]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	695a      	ldr	r2, [r3, #20]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68da      	ldr	r2, [r3, #12]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2220      	movs	r2, #32
 800b9bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b20      	cmp	r3, #32
 800b9e8:	d121      	bne.n	800ba2e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <HAL_UART_Transmit_IT+0x26>
 800b9f0:	88fb      	ldrh	r3, [r7, #6]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e01a      	b.n	800ba30 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	88fa      	ldrh	r2, [r7, #6]
 800ba04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	88fa      	ldrh	r2, [r7, #6]
 800ba0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2221      	movs	r2, #33	; 0x21
 800ba16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba28:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	e000      	b.n	800ba30 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ba2e:	2302      	movs	r3, #2
  }
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr
	...

0800ba3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b0ba      	sub	sp, #232	; 0xe8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10f      	bne.n	800baa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba86:	f003 0320 	and.w	r3, r3, #32
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d009      	beq.n	800baa2 <HAL_UART_IRQHandler+0x66>
 800ba8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba92:	f003 0320 	and.w	r3, r3, #32
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fb63 	bl	800c166 <UART_Receive_IT>
      return;
 800baa0:	e25b      	b.n	800bf5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800baa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 80de 	beq.w	800bc68 <HAL_UART_IRQHandler+0x22c>
 800baac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d106      	bne.n	800bac6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800babc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 80d1 	beq.w	800bc68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00b      	beq.n	800baea <HAL_UART_IRQHandler+0xae>
 800bad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bada:	2b00      	cmp	r3, #0
 800badc:	d005      	beq.n	800baea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bae2:	f043 0201 	orr.w	r2, r3, #1
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800baea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baee:	f003 0304 	and.w	r3, r3, #4
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00b      	beq.n	800bb0e <HAL_UART_IRQHandler+0xd2>
 800baf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d005      	beq.n	800bb0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb06:	f043 0202 	orr.w	r2, r3, #2
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb12:	f003 0302 	and.w	r3, r3, #2
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00b      	beq.n	800bb32 <HAL_UART_IRQHandler+0xf6>
 800bb1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d005      	beq.n	800bb32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2a:	f043 0204 	orr.w	r2, r3, #4
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb36:	f003 0308 	and.w	r3, r3, #8
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d011      	beq.n	800bb62 <HAL_UART_IRQHandler+0x126>
 800bb3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb42:	f003 0320 	and.w	r3, r3, #32
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d105      	bne.n	800bb56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d005      	beq.n	800bb62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb5a:	f043 0208 	orr.w	r2, r3, #8
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f000 81f2 	beq.w	800bf50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb70:	f003 0320 	and.w	r3, r3, #32
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d008      	beq.n	800bb8a <HAL_UART_IRQHandler+0x14e>
 800bb78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb7c:	f003 0320 	and.w	r3, r3, #32
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 faee 	bl	800c166 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	695b      	ldr	r3, [r3, #20]
 800bb90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	bf14      	ite	ne
 800bb98:	2301      	movne	r3, #1
 800bb9a:	2300      	moveq	r3, #0
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba6:	f003 0308 	and.w	r3, r3, #8
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d103      	bne.n	800bbb6 <HAL_UART_IRQHandler+0x17a>
 800bbae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d04f      	beq.n	800bc56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f9f8 	bl	800bfac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d041      	beq.n	800bc4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3314      	adds	r3, #20
 800bbd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbd8:	e853 3f00 	ldrex	r3, [r3]
 800bbdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bbe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bbe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3314      	adds	r3, #20
 800bbf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bc02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bc06:	e841 2300 	strex	r3, r2, [r1]
 800bc0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bc0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1d9      	bne.n	800bbca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d013      	beq.n	800bc46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc22:	4a7e      	ldr	r2, [pc, #504]	; (800be1c <HAL_UART_IRQHandler+0x3e0>)
 800bc24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fd f86c 	bl	8008d08 <HAL_DMA_Abort_IT>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d016      	beq.n	800bc64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc40:	4610      	mov	r0, r2
 800bc42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc44:	e00e      	b.n	800bc64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f99c 	bl	800bf84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc4c:	e00a      	b.n	800bc64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f998 	bl	800bf84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc54:	e006      	b.n	800bc64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f994 	bl	800bf84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc62:	e175      	b.n	800bf50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc64:	bf00      	nop
    return;
 800bc66:	e173      	b.n	800bf50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	f040 814f 	bne.w	800bf10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc76:	f003 0310 	and.w	r3, r3, #16
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 8148 	beq.w	800bf10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc84:	f003 0310 	and.w	r3, r3, #16
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 8141 	beq.w	800bf10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60bb      	str	r3, [r7, #8]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	60bb      	str	r3, [r7, #8]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	60bb      	str	r3, [r7, #8]
 800bca2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	695b      	ldr	r3, [r3, #20]
 800bcaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f000 80b6 	beq.w	800be20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bcc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f000 8145 	beq.w	800bf54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	f080 813e 	bcs.w	800bf54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	2b20      	cmp	r3, #32
 800bce8:	f000 8088 	beq.w	800bdfc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	330c      	adds	r3, #12
 800bcf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcfa:	e853 3f00 	ldrex	r3, [r3]
 800bcfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	330c      	adds	r3, #12
 800bd14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bd18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd28:	e841 2300 	strex	r3, r2, [r1]
 800bd2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1d9      	bne.n	800bcec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	3314      	adds	r3, #20
 800bd3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd42:	e853 3f00 	ldrex	r3, [r3]
 800bd46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd4a:	f023 0301 	bic.w	r3, r3, #1
 800bd4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3314      	adds	r3, #20
 800bd58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd68:	e841 2300 	strex	r3, r2, [r1]
 800bd6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e1      	bne.n	800bd38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3314      	adds	r3, #20
 800bd7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd7e:	e853 3f00 	ldrex	r3, [r3]
 800bd82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3314      	adds	r3, #20
 800bd94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd98:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bda0:	e841 2300 	strex	r3, r2, [r1]
 800bda4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bda6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1e3      	bne.n	800bd74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2220      	movs	r2, #32
 800bdb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	330c      	adds	r3, #12
 800bdc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdc4:	e853 3f00 	ldrex	r3, [r3]
 800bdc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bdca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdcc:	f023 0310 	bic.w	r3, r3, #16
 800bdd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	330c      	adds	r3, #12
 800bdda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bdde:	65ba      	str	r2, [r7, #88]	; 0x58
 800bde0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bde4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bdec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e3      	bne.n	800bdba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fc ff4b 	bl	8008c92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2202      	movs	r2, #2
 800be00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	b29b      	uxth	r3, r3
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f8bf 	bl	800bf96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be18:	e09c      	b.n	800bf54 <HAL_UART_IRQHandler+0x518>
 800be1a:	bf00      	nop
 800be1c:	0800c071 	.word	0x0800c071
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be28:	b29b      	uxth	r3, r3
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be34:	b29b      	uxth	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	f000 808e 	beq.w	800bf58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 8089 	beq.w	800bf58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	330c      	adds	r3, #12
 800be4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be50:	e853 3f00 	ldrex	r3, [r3]
 800be54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	330c      	adds	r3, #12
 800be66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be6a:	647a      	str	r2, [r7, #68]	; 0x44
 800be6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e3      	bne.n	800be46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	3314      	adds	r3, #20
 800be84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	623b      	str	r3, [r7, #32]
   return(result);
 800be8e:	6a3b      	ldr	r3, [r7, #32]
 800be90:	f023 0301 	bic.w	r3, r3, #1
 800be94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3314      	adds	r3, #20
 800be9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bea2:	633a      	str	r2, [r7, #48]	; 0x30
 800bea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1e3      	bne.n	800be7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2220      	movs	r2, #32
 800beba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	330c      	adds	r3, #12
 800beca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	e853 3f00 	ldrex	r3, [r3]
 800bed2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f023 0310 	bic.w	r3, r3, #16
 800beda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	330c      	adds	r3, #12
 800bee4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bee8:	61fa      	str	r2, [r7, #28]
 800beea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beec:	69b9      	ldr	r1, [r7, #24]
 800beee:	69fa      	ldr	r2, [r7, #28]
 800bef0:	e841 2300 	strex	r3, r2, [r1]
 800bef4:	617b      	str	r3, [r7, #20]
   return(result);
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1e3      	bne.n	800bec4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2202      	movs	r2, #2
 800bf00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf06:	4619      	mov	r1, r3
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f844 	bl	800bf96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf0e:	e023      	b.n	800bf58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d009      	beq.n	800bf30 <HAL_UART_IRQHandler+0x4f4>
 800bf1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d003      	beq.n	800bf30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f8b5 	bl	800c098 <UART_Transmit_IT>
    return;
 800bf2e:	e014      	b.n	800bf5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00e      	beq.n	800bf5a <HAL_UART_IRQHandler+0x51e>
 800bf3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d008      	beq.n	800bf5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 f8f4 	bl	800c136 <UART_EndTransmit_IT>
    return;
 800bf4e:	e004      	b.n	800bf5a <HAL_UART_IRQHandler+0x51e>
    return;
 800bf50:	bf00      	nop
 800bf52:	e002      	b.n	800bf5a <HAL_UART_IRQHandler+0x51e>
      return;
 800bf54:	bf00      	nop
 800bf56:	e000      	b.n	800bf5a <HAL_UART_IRQHandler+0x51e>
      return;
 800bf58:	bf00      	nop
  }
}
 800bf5a:	37e8      	adds	r7, #232	; 0xe8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bc80      	pop	{r7}
 800bf70:	4770      	bx	lr

0800bf72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf72:	b480      	push	{r7}
 800bf74:	b083      	sub	sp, #12
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf7a:	bf00      	nop
 800bf7c:	370c      	adds	r7, #12
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bc80      	pop	{r7}
 800bf82:	4770      	bx	lr

0800bf84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bc80      	pop	{r7}
 800bf94:	4770      	bx	lr

0800bf96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b083      	sub	sp, #12
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfa2:	bf00      	nop
 800bfa4:	370c      	adds	r7, #12
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bc80      	pop	{r7}
 800bfaa:	4770      	bx	lr

0800bfac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b095      	sub	sp, #84	; 0x54
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	330c      	adds	r3, #12
 800bfba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfbe:	e853 3f00 	ldrex	r3, [r3]
 800bfc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	330c      	adds	r3, #12
 800bfd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfd4:	643a      	str	r2, [r7, #64]	; 0x40
 800bfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e5      	bne.n	800bfb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3314      	adds	r3, #20
 800bfee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	e853 3f00 	ldrex	r3, [r3]
 800bff6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	f023 0301 	bic.w	r3, r3, #1
 800bffe:	64bb      	str	r3, [r7, #72]	; 0x48
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3314      	adds	r3, #20
 800c006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c00a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c00e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c010:	e841 2300 	strex	r3, r2, [r1]
 800c014:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1e5      	bne.n	800bfe8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c020:	2b01      	cmp	r3, #1
 800c022:	d119      	bne.n	800c058 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	330c      	adds	r3, #12
 800c02a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	e853 3f00 	ldrex	r3, [r3]
 800c032:	60bb      	str	r3, [r7, #8]
   return(result);
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	f023 0310 	bic.w	r3, r3, #16
 800c03a:	647b      	str	r3, [r7, #68]	; 0x44
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	330c      	adds	r3, #12
 800c042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c044:	61ba      	str	r2, [r7, #24]
 800c046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c048:	6979      	ldr	r1, [r7, #20]
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	e841 2300 	strex	r3, r2, [r1]
 800c050:	613b      	str	r3, [r7, #16]
   return(result);
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1e5      	bne.n	800c024 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2220      	movs	r2, #32
 800c05c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c066:	bf00      	nop
 800c068:	3754      	adds	r7, #84	; 0x54
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bc80      	pop	{r7}
 800c06e:	4770      	bx	lr

0800c070 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff ff7a 	bl	800bf84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c090:	bf00      	nop
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	2b21      	cmp	r3, #33	; 0x21
 800c0aa:	d13e      	bne.n	800c12a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b4:	d114      	bne.n	800c0e0 <UART_Transmit_IT+0x48>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d110      	bne.n	800c0e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a1b      	ldr	r3, [r3, #32]
 800c0c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6a1b      	ldr	r3, [r3, #32]
 800c0d8:	1c9a      	adds	r2, r3, #2
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	621a      	str	r2, [r3, #32]
 800c0de:	e008      	b.n	800c0f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a1b      	ldr	r3, [r3, #32]
 800c0e4:	1c59      	adds	r1, r3, #1
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	6211      	str	r1, [r2, #32]
 800c0ea:	781a      	ldrb	r2, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	4619      	mov	r1, r3
 800c100:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c102:	2b00      	cmp	r3, #0
 800c104:	d10f      	bne.n	800c126 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68da      	ldr	r2, [r3, #12]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c114:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68da      	ldr	r2, [r3, #12]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c124:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	e000      	b.n	800c12c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c12a:	2302      	movs	r3, #2
  }
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	bc80      	pop	{r7}
 800c134:	4770      	bx	lr

0800c136 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b082      	sub	sp, #8
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68da      	ldr	r2, [r3, #12]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c14c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2220      	movs	r2, #32
 800c152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7ff ff02 	bl	800bf60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b08c      	sub	sp, #48	; 0x30
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b22      	cmp	r3, #34	; 0x22
 800c178:	f040 80ae 	bne.w	800c2d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c184:	d117      	bne.n	800c1b6 <UART_Receive_IT+0x50>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d113      	bne.n	800c1b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c18e:	2300      	movs	r3, #0
 800c190:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c196:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1a4:	b29a      	uxth	r2, r3
 800c1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ae:	1c9a      	adds	r2, r3, #2
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	629a      	str	r2, [r3, #40]	; 0x28
 800c1b4:	e026      	b.n	800c204 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1c8:	d007      	beq.n	800c1da <UART_Receive_IT+0x74>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10a      	bne.n	800c1e8 <UART_Receive_IT+0x82>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	701a      	strb	r2, [r3, #0]
 800c1e6:	e008      	b.n	800c1fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1fe:	1c5a      	adds	r2, r3, #1
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c208:	b29b      	uxth	r3, r3
 800c20a:	3b01      	subs	r3, #1
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	4619      	mov	r1, r3
 800c212:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c214:	2b00      	cmp	r3, #0
 800c216:	d15d      	bne.n	800c2d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68da      	ldr	r2, [r3, #12]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f022 0220 	bic.w	r2, r2, #32
 800c226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68da      	ldr	r2, [r3, #12]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	695a      	ldr	r2, [r3, #20]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f022 0201 	bic.w	r2, r2, #1
 800c246:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2220      	movs	r2, #32
 800c24c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d135      	bne.n	800c2ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	330c      	adds	r3, #12
 800c26a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	613b      	str	r3, [r7, #16]
   return(result);
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	f023 0310 	bic.w	r3, r3, #16
 800c27a:	627b      	str	r3, [r7, #36]	; 0x24
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	330c      	adds	r3, #12
 800c282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c284:	623a      	str	r2, [r7, #32]
 800c286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c288:	69f9      	ldr	r1, [r7, #28]
 800c28a:	6a3a      	ldr	r2, [r7, #32]
 800c28c:	e841 2300 	strex	r3, r2, [r1]
 800c290:	61bb      	str	r3, [r7, #24]
   return(result);
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1e5      	bne.n	800c264 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 0310 	and.w	r3, r3, #16
 800c2a2:	2b10      	cmp	r3, #16
 800c2a4:	d10a      	bne.n	800c2bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	60fb      	str	r3, [r7, #12]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	60fb      	str	r3, [r7, #12]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	60fb      	str	r3, [r7, #12]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff fe67 	bl	800bf96 <HAL_UARTEx_RxEventCallback>
 800c2c8:	e002      	b.n	800c2d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7ff fe51 	bl	800bf72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e002      	b.n	800c2da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	e000      	b.n	800c2da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c2d8:	2302      	movs	r3, #2
  }
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3730      	adds	r7, #48	; 0x30
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
	...

0800c2e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	691b      	ldr	r3, [r3, #16]
 800c2f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	430a      	orrs	r2, r1
 800c300:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	689a      	ldr	r2, [r3, #8]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	431a      	orrs	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	4313      	orrs	r3, r2
 800c312:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c31e:	f023 030c 	bic.w	r3, r3, #12
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	6812      	ldr	r2, [r2, #0]
 800c326:	68b9      	ldr	r1, [r7, #8]
 800c328:	430b      	orrs	r3, r1
 800c32a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	695b      	ldr	r3, [r3, #20]
 800c332:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	699a      	ldr	r2, [r3, #24]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	430a      	orrs	r2, r1
 800c340:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a2c      	ldr	r2, [pc, #176]	; (800c3f8 <UART_SetConfig+0x114>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d103      	bne.n	800c354 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c34c:	f7fe fe8c 	bl	800b068 <HAL_RCC_GetPCLK2Freq>
 800c350:	60f8      	str	r0, [r7, #12]
 800c352:	e002      	b.n	800c35a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c354:	f7fe fe74 	bl	800b040 <HAL_RCC_GetPCLK1Freq>
 800c358:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	4613      	mov	r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	009a      	lsls	r2, r3, #2
 800c364:	441a      	add	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c370:	4a22      	ldr	r2, [pc, #136]	; (800c3fc <UART_SetConfig+0x118>)
 800c372:	fba2 2303 	umull	r2, r3, r2, r3
 800c376:	095b      	lsrs	r3, r3, #5
 800c378:	0119      	lsls	r1, r3, #4
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009a      	lsls	r2, r3, #2
 800c384:	441a      	add	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c390:	4b1a      	ldr	r3, [pc, #104]	; (800c3fc <UART_SetConfig+0x118>)
 800c392:	fba3 0302 	umull	r0, r3, r3, r2
 800c396:	095b      	lsrs	r3, r3, #5
 800c398:	2064      	movs	r0, #100	; 0x64
 800c39a:	fb00 f303 	mul.w	r3, r0, r3
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	011b      	lsls	r3, r3, #4
 800c3a2:	3332      	adds	r3, #50	; 0x32
 800c3a4:	4a15      	ldr	r2, [pc, #84]	; (800c3fc <UART_SetConfig+0x118>)
 800c3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3aa:	095b      	lsrs	r3, r3, #5
 800c3ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3b0:	4419      	add	r1, r3
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009a      	lsls	r2, r3, #2
 800c3bc:	441a      	add	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3c8:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <UART_SetConfig+0x118>)
 800c3ca:	fba3 0302 	umull	r0, r3, r3, r2
 800c3ce:	095b      	lsrs	r3, r3, #5
 800c3d0:	2064      	movs	r0, #100	; 0x64
 800c3d2:	fb00 f303 	mul.w	r3, r0, r3
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	011b      	lsls	r3, r3, #4
 800c3da:	3332      	adds	r3, #50	; 0x32
 800c3dc:	4a07      	ldr	r2, [pc, #28]	; (800c3fc <UART_SetConfig+0x118>)
 800c3de:	fba2 2303 	umull	r2, r3, r2, r3
 800c3e2:	095b      	lsrs	r3, r3, #5
 800c3e4:	f003 020f 	and.w	r2, r3, #15
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	440a      	add	r2, r1
 800c3ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c3f0:	bf00      	nop
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	40013800 	.word	0x40013800
 800c3fc:	51eb851f 	.word	0x51eb851f

0800c400 <__itoa>:
 800c400:	1e93      	subs	r3, r2, #2
 800c402:	2b22      	cmp	r3, #34	; 0x22
 800c404:	b510      	push	{r4, lr}
 800c406:	460c      	mov	r4, r1
 800c408:	d904      	bls.n	800c414 <__itoa+0x14>
 800c40a:	2300      	movs	r3, #0
 800c40c:	461c      	mov	r4, r3
 800c40e:	700b      	strb	r3, [r1, #0]
 800c410:	4620      	mov	r0, r4
 800c412:	bd10      	pop	{r4, pc}
 800c414:	2a0a      	cmp	r2, #10
 800c416:	d109      	bne.n	800c42c <__itoa+0x2c>
 800c418:	2800      	cmp	r0, #0
 800c41a:	da07      	bge.n	800c42c <__itoa+0x2c>
 800c41c:	232d      	movs	r3, #45	; 0x2d
 800c41e:	700b      	strb	r3, [r1, #0]
 800c420:	2101      	movs	r1, #1
 800c422:	4240      	negs	r0, r0
 800c424:	4421      	add	r1, r4
 800c426:	f000 f8d9 	bl	800c5dc <__utoa>
 800c42a:	e7f1      	b.n	800c410 <__itoa+0x10>
 800c42c:	2100      	movs	r1, #0
 800c42e:	e7f9      	b.n	800c424 <__itoa+0x24>

0800c430 <itoa>:
 800c430:	f7ff bfe6 	b.w	800c400 <__itoa>

0800c434 <malloc>:
 800c434:	4b02      	ldr	r3, [pc, #8]	; (800c440 <malloc+0xc>)
 800c436:	4601      	mov	r1, r0
 800c438:	6818      	ldr	r0, [r3, #0]
 800c43a:	f000 b823 	b.w	800c484 <_malloc_r>
 800c43e:	bf00      	nop
 800c440:	20000108 	.word	0x20000108

0800c444 <sbrk_aligned>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	4e0e      	ldr	r6, [pc, #56]	; (800c480 <sbrk_aligned+0x3c>)
 800c448:	460c      	mov	r4, r1
 800c44a:	6831      	ldr	r1, [r6, #0]
 800c44c:	4605      	mov	r5, r0
 800c44e:	b911      	cbnz	r1, 800c456 <sbrk_aligned+0x12>
 800c450:	f000 f91e 	bl	800c690 <_sbrk_r>
 800c454:	6030      	str	r0, [r6, #0]
 800c456:	4621      	mov	r1, r4
 800c458:	4628      	mov	r0, r5
 800c45a:	f000 f919 	bl	800c690 <_sbrk_r>
 800c45e:	1c43      	adds	r3, r0, #1
 800c460:	d00a      	beq.n	800c478 <sbrk_aligned+0x34>
 800c462:	1cc4      	adds	r4, r0, #3
 800c464:	f024 0403 	bic.w	r4, r4, #3
 800c468:	42a0      	cmp	r0, r4
 800c46a:	d007      	beq.n	800c47c <sbrk_aligned+0x38>
 800c46c:	1a21      	subs	r1, r4, r0
 800c46e:	4628      	mov	r0, r5
 800c470:	f000 f90e 	bl	800c690 <_sbrk_r>
 800c474:	3001      	adds	r0, #1
 800c476:	d101      	bne.n	800c47c <sbrk_aligned+0x38>
 800c478:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c47c:	4620      	mov	r0, r4
 800c47e:	bd70      	pop	{r4, r5, r6, pc}
 800c480:	2000049c 	.word	0x2000049c

0800c484 <_malloc_r>:
 800c484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c488:	1ccd      	adds	r5, r1, #3
 800c48a:	f025 0503 	bic.w	r5, r5, #3
 800c48e:	3508      	adds	r5, #8
 800c490:	2d0c      	cmp	r5, #12
 800c492:	bf38      	it	cc
 800c494:	250c      	movcc	r5, #12
 800c496:	2d00      	cmp	r5, #0
 800c498:	4607      	mov	r7, r0
 800c49a:	db01      	blt.n	800c4a0 <_malloc_r+0x1c>
 800c49c:	42a9      	cmp	r1, r5
 800c49e:	d905      	bls.n	800c4ac <_malloc_r+0x28>
 800c4a0:	230c      	movs	r3, #12
 800c4a2:	2600      	movs	r6, #0
 800c4a4:	603b      	str	r3, [r7, #0]
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c580 <_malloc_r+0xfc>
 800c4b0:	f000 f868 	bl	800c584 <__malloc_lock>
 800c4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b8:	461c      	mov	r4, r3
 800c4ba:	bb5c      	cbnz	r4, 800c514 <_malloc_r+0x90>
 800c4bc:	4629      	mov	r1, r5
 800c4be:	4638      	mov	r0, r7
 800c4c0:	f7ff ffc0 	bl	800c444 <sbrk_aligned>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	d155      	bne.n	800c576 <_malloc_r+0xf2>
 800c4ca:	f8d8 4000 	ldr.w	r4, [r8]
 800c4ce:	4626      	mov	r6, r4
 800c4d0:	2e00      	cmp	r6, #0
 800c4d2:	d145      	bne.n	800c560 <_malloc_r+0xdc>
 800c4d4:	2c00      	cmp	r4, #0
 800c4d6:	d048      	beq.n	800c56a <_malloc_r+0xe6>
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	4631      	mov	r1, r6
 800c4dc:	4638      	mov	r0, r7
 800c4de:	eb04 0903 	add.w	r9, r4, r3
 800c4e2:	f000 f8d5 	bl	800c690 <_sbrk_r>
 800c4e6:	4581      	cmp	r9, r0
 800c4e8:	d13f      	bne.n	800c56a <_malloc_r+0xe6>
 800c4ea:	6821      	ldr	r1, [r4, #0]
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	1a6d      	subs	r5, r5, r1
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	f7ff ffa7 	bl	800c444 <sbrk_aligned>
 800c4f6:	3001      	adds	r0, #1
 800c4f8:	d037      	beq.n	800c56a <_malloc_r+0xe6>
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	442b      	add	r3, r5
 800c4fe:	6023      	str	r3, [r4, #0]
 800c500:	f8d8 3000 	ldr.w	r3, [r8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d038      	beq.n	800c57a <_malloc_r+0xf6>
 800c508:	685a      	ldr	r2, [r3, #4]
 800c50a:	42a2      	cmp	r2, r4
 800c50c:	d12b      	bne.n	800c566 <_malloc_r+0xe2>
 800c50e:	2200      	movs	r2, #0
 800c510:	605a      	str	r2, [r3, #4]
 800c512:	e00f      	b.n	800c534 <_malloc_r+0xb0>
 800c514:	6822      	ldr	r2, [r4, #0]
 800c516:	1b52      	subs	r2, r2, r5
 800c518:	d41f      	bmi.n	800c55a <_malloc_r+0xd6>
 800c51a:	2a0b      	cmp	r2, #11
 800c51c:	d917      	bls.n	800c54e <_malloc_r+0xca>
 800c51e:	1961      	adds	r1, r4, r5
 800c520:	42a3      	cmp	r3, r4
 800c522:	6025      	str	r5, [r4, #0]
 800c524:	bf18      	it	ne
 800c526:	6059      	strne	r1, [r3, #4]
 800c528:	6863      	ldr	r3, [r4, #4]
 800c52a:	bf08      	it	eq
 800c52c:	f8c8 1000 	streq.w	r1, [r8]
 800c530:	5162      	str	r2, [r4, r5]
 800c532:	604b      	str	r3, [r1, #4]
 800c534:	4638      	mov	r0, r7
 800c536:	f104 060b 	add.w	r6, r4, #11
 800c53a:	f000 f829 	bl	800c590 <__malloc_unlock>
 800c53e:	f026 0607 	bic.w	r6, r6, #7
 800c542:	1d23      	adds	r3, r4, #4
 800c544:	1af2      	subs	r2, r6, r3
 800c546:	d0ae      	beq.n	800c4a6 <_malloc_r+0x22>
 800c548:	1b9b      	subs	r3, r3, r6
 800c54a:	50a3      	str	r3, [r4, r2]
 800c54c:	e7ab      	b.n	800c4a6 <_malloc_r+0x22>
 800c54e:	42a3      	cmp	r3, r4
 800c550:	6862      	ldr	r2, [r4, #4]
 800c552:	d1dd      	bne.n	800c510 <_malloc_r+0x8c>
 800c554:	f8c8 2000 	str.w	r2, [r8]
 800c558:	e7ec      	b.n	800c534 <_malloc_r+0xb0>
 800c55a:	4623      	mov	r3, r4
 800c55c:	6864      	ldr	r4, [r4, #4]
 800c55e:	e7ac      	b.n	800c4ba <_malloc_r+0x36>
 800c560:	4634      	mov	r4, r6
 800c562:	6876      	ldr	r6, [r6, #4]
 800c564:	e7b4      	b.n	800c4d0 <_malloc_r+0x4c>
 800c566:	4613      	mov	r3, r2
 800c568:	e7cc      	b.n	800c504 <_malloc_r+0x80>
 800c56a:	230c      	movs	r3, #12
 800c56c:	4638      	mov	r0, r7
 800c56e:	603b      	str	r3, [r7, #0]
 800c570:	f000 f80e 	bl	800c590 <__malloc_unlock>
 800c574:	e797      	b.n	800c4a6 <_malloc_r+0x22>
 800c576:	6025      	str	r5, [r4, #0]
 800c578:	e7dc      	b.n	800c534 <_malloc_r+0xb0>
 800c57a:	605b      	str	r3, [r3, #4]
 800c57c:	deff      	udf	#255	; 0xff
 800c57e:	bf00      	nop
 800c580:	20000498 	.word	0x20000498

0800c584 <__malloc_lock>:
 800c584:	4801      	ldr	r0, [pc, #4]	; (800c58c <__malloc_lock+0x8>)
 800c586:	f000 b8bd 	b.w	800c704 <__retarget_lock_acquire_recursive>
 800c58a:	bf00      	nop
 800c58c:	200005d8 	.word	0x200005d8

0800c590 <__malloc_unlock>:
 800c590:	4801      	ldr	r0, [pc, #4]	; (800c598 <__malloc_unlock+0x8>)
 800c592:	f000 b8b8 	b.w	800c706 <__retarget_lock_release_recursive>
 800c596:	bf00      	nop
 800c598:	200005d8 	.word	0x200005d8

0800c59c <siprintf>:
 800c59c:	b40e      	push	{r1, r2, r3}
 800c59e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5a2:	b500      	push	{lr}
 800c5a4:	b09c      	sub	sp, #112	; 0x70
 800c5a6:	ab1d      	add	r3, sp, #116	; 0x74
 800c5a8:	9002      	str	r0, [sp, #8]
 800c5aa:	9006      	str	r0, [sp, #24]
 800c5ac:	9107      	str	r1, [sp, #28]
 800c5ae:	9104      	str	r1, [sp, #16]
 800c5b0:	4808      	ldr	r0, [pc, #32]	; (800c5d4 <siprintf+0x38>)
 800c5b2:	4909      	ldr	r1, [pc, #36]	; (800c5d8 <siprintf+0x3c>)
 800c5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5b8:	9105      	str	r1, [sp, #20]
 800c5ba:	6800      	ldr	r0, [r0, #0]
 800c5bc:	a902      	add	r1, sp, #8
 800c5be:	9301      	str	r3, [sp, #4]
 800c5c0:	f000 f94c 	bl	800c85c <_svfiprintf_r>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	9b02      	ldr	r3, [sp, #8]
 800c5c8:	701a      	strb	r2, [r3, #0]
 800c5ca:	b01c      	add	sp, #112	; 0x70
 800c5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5d0:	b003      	add	sp, #12
 800c5d2:	4770      	bx	lr
 800c5d4:	20000108 	.word	0x20000108
 800c5d8:	ffff0208 	.word	0xffff0208

0800c5dc <__utoa>:
 800c5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5de:	b08b      	sub	sp, #44	; 0x2c
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	466e      	mov	r6, sp
 800c5e6:	4c1d      	ldr	r4, [pc, #116]	; (800c65c <__utoa+0x80>)
 800c5e8:	f104 0c20 	add.w	ip, r4, #32
 800c5ec:	4637      	mov	r7, r6
 800c5ee:	6820      	ldr	r0, [r4, #0]
 800c5f0:	6861      	ldr	r1, [r4, #4]
 800c5f2:	3408      	adds	r4, #8
 800c5f4:	c703      	stmia	r7!, {r0, r1}
 800c5f6:	4564      	cmp	r4, ip
 800c5f8:	463e      	mov	r6, r7
 800c5fa:	d1f7      	bne.n	800c5ec <__utoa+0x10>
 800c5fc:	7921      	ldrb	r1, [r4, #4]
 800c5fe:	6820      	ldr	r0, [r4, #0]
 800c600:	7139      	strb	r1, [r7, #4]
 800c602:	1e91      	subs	r1, r2, #2
 800c604:	2922      	cmp	r1, #34	; 0x22
 800c606:	6038      	str	r0, [r7, #0]
 800c608:	f04f 0100 	mov.w	r1, #0
 800c60c:	d904      	bls.n	800c618 <__utoa+0x3c>
 800c60e:	7019      	strb	r1, [r3, #0]
 800c610:	460b      	mov	r3, r1
 800c612:	4618      	mov	r0, r3
 800c614:	b00b      	add	sp, #44	; 0x2c
 800c616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c618:	1e58      	subs	r0, r3, #1
 800c61a:	4684      	mov	ip, r0
 800c61c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c620:	fb02 5617 	mls	r6, r2, r7, r5
 800c624:	3628      	adds	r6, #40	; 0x28
 800c626:	446e      	add	r6, sp
 800c628:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c62c:	460c      	mov	r4, r1
 800c62e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c632:	462e      	mov	r6, r5
 800c634:	42b2      	cmp	r2, r6
 800c636:	463d      	mov	r5, r7
 800c638:	f101 0101 	add.w	r1, r1, #1
 800c63c:	d9ee      	bls.n	800c61c <__utoa+0x40>
 800c63e:	2200      	movs	r2, #0
 800c640:	545a      	strb	r2, [r3, r1]
 800c642:	1919      	adds	r1, r3, r4
 800c644:	1aa5      	subs	r5, r4, r2
 800c646:	42aa      	cmp	r2, r5
 800c648:	dae3      	bge.n	800c612 <__utoa+0x36>
 800c64a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c64e:	780e      	ldrb	r6, [r1, #0]
 800c650:	3201      	adds	r2, #1
 800c652:	7006      	strb	r6, [r0, #0]
 800c654:	f801 5901 	strb.w	r5, [r1], #-1
 800c658:	e7f4      	b.n	800c644 <__utoa+0x68>
 800c65a:	bf00      	nop
 800c65c:	0800de56 	.word	0x0800de56

0800c660 <strcat>:
 800c660:	4602      	mov	r2, r0
 800c662:	b510      	push	{r4, lr}
 800c664:	7814      	ldrb	r4, [r2, #0]
 800c666:	4613      	mov	r3, r2
 800c668:	3201      	adds	r2, #1
 800c66a:	2c00      	cmp	r4, #0
 800c66c:	d1fa      	bne.n	800c664 <strcat+0x4>
 800c66e:	3b01      	subs	r3, #1
 800c670:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c674:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c678:	2a00      	cmp	r2, #0
 800c67a:	d1f9      	bne.n	800c670 <strcat+0x10>
 800c67c:	bd10      	pop	{r4, pc}

0800c67e <memset>:
 800c67e:	4603      	mov	r3, r0
 800c680:	4402      	add	r2, r0
 800c682:	4293      	cmp	r3, r2
 800c684:	d100      	bne.n	800c688 <memset+0xa>
 800c686:	4770      	bx	lr
 800c688:	f803 1b01 	strb.w	r1, [r3], #1
 800c68c:	e7f9      	b.n	800c682 <memset+0x4>
	...

0800c690 <_sbrk_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	2300      	movs	r3, #0
 800c694:	4d05      	ldr	r5, [pc, #20]	; (800c6ac <_sbrk_r+0x1c>)
 800c696:	4604      	mov	r4, r0
 800c698:	4608      	mov	r0, r1
 800c69a:	602b      	str	r3, [r5, #0]
 800c69c:	f7fc f808 	bl	80086b0 <_sbrk>
 800c6a0:	1c43      	adds	r3, r0, #1
 800c6a2:	d102      	bne.n	800c6aa <_sbrk_r+0x1a>
 800c6a4:	682b      	ldr	r3, [r5, #0]
 800c6a6:	b103      	cbz	r3, 800c6aa <_sbrk_r+0x1a>
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	200005dc 	.word	0x200005dc

0800c6b0 <__errno>:
 800c6b0:	4b01      	ldr	r3, [pc, #4]	; (800c6b8 <__errno+0x8>)
 800c6b2:	6818      	ldr	r0, [r3, #0]
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	20000108 	.word	0x20000108

0800c6bc <__libc_init_array>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	2600      	movs	r6, #0
 800c6c0:	4d0c      	ldr	r5, [pc, #48]	; (800c6f4 <__libc_init_array+0x38>)
 800c6c2:	4c0d      	ldr	r4, [pc, #52]	; (800c6f8 <__libc_init_array+0x3c>)
 800c6c4:	1b64      	subs	r4, r4, r5
 800c6c6:	10a4      	asrs	r4, r4, #2
 800c6c8:	42a6      	cmp	r6, r4
 800c6ca:	d109      	bne.n	800c6e0 <__libc_init_array+0x24>
 800c6cc:	f000 fbc6 	bl	800ce5c <_init>
 800c6d0:	2600      	movs	r6, #0
 800c6d2:	4d0a      	ldr	r5, [pc, #40]	; (800c6fc <__libc_init_array+0x40>)
 800c6d4:	4c0a      	ldr	r4, [pc, #40]	; (800c700 <__libc_init_array+0x44>)
 800c6d6:	1b64      	subs	r4, r4, r5
 800c6d8:	10a4      	asrs	r4, r4, #2
 800c6da:	42a6      	cmp	r6, r4
 800c6dc:	d105      	bne.n	800c6ea <__libc_init_array+0x2e>
 800c6de:	bd70      	pop	{r4, r5, r6, pc}
 800c6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6e4:	4798      	blx	r3
 800c6e6:	3601      	adds	r6, #1
 800c6e8:	e7ee      	b.n	800c6c8 <__libc_init_array+0xc>
 800c6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ee:	4798      	blx	r3
 800c6f0:	3601      	adds	r6, #1
 800c6f2:	e7f2      	b.n	800c6da <__libc_init_array+0x1e>
 800c6f4:	0800deb0 	.word	0x0800deb0
 800c6f8:	0800deb0 	.word	0x0800deb0
 800c6fc:	0800deb0 	.word	0x0800deb0
 800c700:	0800deb4 	.word	0x0800deb4

0800c704 <__retarget_lock_acquire_recursive>:
 800c704:	4770      	bx	lr

0800c706 <__retarget_lock_release_recursive>:
 800c706:	4770      	bx	lr

0800c708 <strcpy>:
 800c708:	4603      	mov	r3, r0
 800c70a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c70e:	f803 2b01 	strb.w	r2, [r3], #1
 800c712:	2a00      	cmp	r2, #0
 800c714:	d1f9      	bne.n	800c70a <strcpy+0x2>
 800c716:	4770      	bx	lr

0800c718 <_free_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4605      	mov	r5, r0
 800c71c:	2900      	cmp	r1, #0
 800c71e:	d040      	beq.n	800c7a2 <_free_r+0x8a>
 800c720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c724:	1f0c      	subs	r4, r1, #4
 800c726:	2b00      	cmp	r3, #0
 800c728:	bfb8      	it	lt
 800c72a:	18e4      	addlt	r4, r4, r3
 800c72c:	f7ff ff2a 	bl	800c584 <__malloc_lock>
 800c730:	4a1c      	ldr	r2, [pc, #112]	; (800c7a4 <_free_r+0x8c>)
 800c732:	6813      	ldr	r3, [r2, #0]
 800c734:	b933      	cbnz	r3, 800c744 <_free_r+0x2c>
 800c736:	6063      	str	r3, [r4, #4]
 800c738:	6014      	str	r4, [r2, #0]
 800c73a:	4628      	mov	r0, r5
 800c73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c740:	f7ff bf26 	b.w	800c590 <__malloc_unlock>
 800c744:	42a3      	cmp	r3, r4
 800c746:	d908      	bls.n	800c75a <_free_r+0x42>
 800c748:	6820      	ldr	r0, [r4, #0]
 800c74a:	1821      	adds	r1, r4, r0
 800c74c:	428b      	cmp	r3, r1
 800c74e:	bf01      	itttt	eq
 800c750:	6819      	ldreq	r1, [r3, #0]
 800c752:	685b      	ldreq	r3, [r3, #4]
 800c754:	1809      	addeq	r1, r1, r0
 800c756:	6021      	streq	r1, [r4, #0]
 800c758:	e7ed      	b.n	800c736 <_free_r+0x1e>
 800c75a:	461a      	mov	r2, r3
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	b10b      	cbz	r3, 800c764 <_free_r+0x4c>
 800c760:	42a3      	cmp	r3, r4
 800c762:	d9fa      	bls.n	800c75a <_free_r+0x42>
 800c764:	6811      	ldr	r1, [r2, #0]
 800c766:	1850      	adds	r0, r2, r1
 800c768:	42a0      	cmp	r0, r4
 800c76a:	d10b      	bne.n	800c784 <_free_r+0x6c>
 800c76c:	6820      	ldr	r0, [r4, #0]
 800c76e:	4401      	add	r1, r0
 800c770:	1850      	adds	r0, r2, r1
 800c772:	4283      	cmp	r3, r0
 800c774:	6011      	str	r1, [r2, #0]
 800c776:	d1e0      	bne.n	800c73a <_free_r+0x22>
 800c778:	6818      	ldr	r0, [r3, #0]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	4408      	add	r0, r1
 800c77e:	6010      	str	r0, [r2, #0]
 800c780:	6053      	str	r3, [r2, #4]
 800c782:	e7da      	b.n	800c73a <_free_r+0x22>
 800c784:	d902      	bls.n	800c78c <_free_r+0x74>
 800c786:	230c      	movs	r3, #12
 800c788:	602b      	str	r3, [r5, #0]
 800c78a:	e7d6      	b.n	800c73a <_free_r+0x22>
 800c78c:	6820      	ldr	r0, [r4, #0]
 800c78e:	1821      	adds	r1, r4, r0
 800c790:	428b      	cmp	r3, r1
 800c792:	bf01      	itttt	eq
 800c794:	6819      	ldreq	r1, [r3, #0]
 800c796:	685b      	ldreq	r3, [r3, #4]
 800c798:	1809      	addeq	r1, r1, r0
 800c79a:	6021      	streq	r1, [r4, #0]
 800c79c:	6063      	str	r3, [r4, #4]
 800c79e:	6054      	str	r4, [r2, #4]
 800c7a0:	e7cb      	b.n	800c73a <_free_r+0x22>
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	20000498 	.word	0x20000498

0800c7a8 <__ssputs_r>:
 800c7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ac:	461f      	mov	r7, r3
 800c7ae:	688e      	ldr	r6, [r1, #8]
 800c7b0:	4682      	mov	sl, r0
 800c7b2:	42be      	cmp	r6, r7
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	4690      	mov	r8, r2
 800c7b8:	680b      	ldr	r3, [r1, #0]
 800c7ba:	d82c      	bhi.n	800c816 <__ssputs_r+0x6e>
 800c7bc:	898a      	ldrh	r2, [r1, #12]
 800c7be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7c2:	d026      	beq.n	800c812 <__ssputs_r+0x6a>
 800c7c4:	6965      	ldr	r5, [r4, #20]
 800c7c6:	6909      	ldr	r1, [r1, #16]
 800c7c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7cc:	eba3 0901 	sub.w	r9, r3, r1
 800c7d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7d4:	1c7b      	adds	r3, r7, #1
 800c7d6:	444b      	add	r3, r9
 800c7d8:	106d      	asrs	r5, r5, #1
 800c7da:	429d      	cmp	r5, r3
 800c7dc:	bf38      	it	cc
 800c7de:	461d      	movcc	r5, r3
 800c7e0:	0553      	lsls	r3, r2, #21
 800c7e2:	d527      	bpl.n	800c834 <__ssputs_r+0x8c>
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	f7ff fe4d 	bl	800c484 <_malloc_r>
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	b360      	cbz	r0, 800c848 <__ssputs_r+0xa0>
 800c7ee:	464a      	mov	r2, r9
 800c7f0:	6921      	ldr	r1, [r4, #16]
 800c7f2:	f000 fb1c 	bl	800ce2e <memcpy>
 800c7f6:	89a3      	ldrh	r3, [r4, #12]
 800c7f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c800:	81a3      	strh	r3, [r4, #12]
 800c802:	6126      	str	r6, [r4, #16]
 800c804:	444e      	add	r6, r9
 800c806:	6026      	str	r6, [r4, #0]
 800c808:	463e      	mov	r6, r7
 800c80a:	6165      	str	r5, [r4, #20]
 800c80c:	eba5 0509 	sub.w	r5, r5, r9
 800c810:	60a5      	str	r5, [r4, #8]
 800c812:	42be      	cmp	r6, r7
 800c814:	d900      	bls.n	800c818 <__ssputs_r+0x70>
 800c816:	463e      	mov	r6, r7
 800c818:	4632      	mov	r2, r6
 800c81a:	4641      	mov	r1, r8
 800c81c:	6820      	ldr	r0, [r4, #0]
 800c81e:	f000 fade 	bl	800cdde <memmove>
 800c822:	2000      	movs	r0, #0
 800c824:	68a3      	ldr	r3, [r4, #8]
 800c826:	1b9b      	subs	r3, r3, r6
 800c828:	60a3      	str	r3, [r4, #8]
 800c82a:	6823      	ldr	r3, [r4, #0]
 800c82c:	4433      	add	r3, r6
 800c82e:	6023      	str	r3, [r4, #0]
 800c830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c834:	462a      	mov	r2, r5
 800c836:	f000 faa3 	bl	800cd80 <_realloc_r>
 800c83a:	4606      	mov	r6, r0
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d1e0      	bne.n	800c802 <__ssputs_r+0x5a>
 800c840:	4650      	mov	r0, sl
 800c842:	6921      	ldr	r1, [r4, #16]
 800c844:	f7ff ff68 	bl	800c718 <_free_r>
 800c848:	230c      	movs	r3, #12
 800c84a:	f8ca 3000 	str.w	r3, [sl]
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c858:	81a3      	strh	r3, [r4, #12]
 800c85a:	e7e9      	b.n	800c830 <__ssputs_r+0x88>

0800c85c <_svfiprintf_r>:
 800c85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c860:	4698      	mov	r8, r3
 800c862:	898b      	ldrh	r3, [r1, #12]
 800c864:	4607      	mov	r7, r0
 800c866:	061b      	lsls	r3, r3, #24
 800c868:	460d      	mov	r5, r1
 800c86a:	4614      	mov	r4, r2
 800c86c:	b09d      	sub	sp, #116	; 0x74
 800c86e:	d50e      	bpl.n	800c88e <_svfiprintf_r+0x32>
 800c870:	690b      	ldr	r3, [r1, #16]
 800c872:	b963      	cbnz	r3, 800c88e <_svfiprintf_r+0x32>
 800c874:	2140      	movs	r1, #64	; 0x40
 800c876:	f7ff fe05 	bl	800c484 <_malloc_r>
 800c87a:	6028      	str	r0, [r5, #0]
 800c87c:	6128      	str	r0, [r5, #16]
 800c87e:	b920      	cbnz	r0, 800c88a <_svfiprintf_r+0x2e>
 800c880:	230c      	movs	r3, #12
 800c882:	603b      	str	r3, [r7, #0]
 800c884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c888:	e0d0      	b.n	800ca2c <_svfiprintf_r+0x1d0>
 800c88a:	2340      	movs	r3, #64	; 0x40
 800c88c:	616b      	str	r3, [r5, #20]
 800c88e:	2300      	movs	r3, #0
 800c890:	9309      	str	r3, [sp, #36]	; 0x24
 800c892:	2320      	movs	r3, #32
 800c894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c898:	2330      	movs	r3, #48	; 0x30
 800c89a:	f04f 0901 	mov.w	r9, #1
 800c89e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca44 <_svfiprintf_r+0x1e8>
 800c8a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8aa:	4623      	mov	r3, r4
 800c8ac:	469a      	mov	sl, r3
 800c8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8b2:	b10a      	cbz	r2, 800c8b8 <_svfiprintf_r+0x5c>
 800c8b4:	2a25      	cmp	r2, #37	; 0x25
 800c8b6:	d1f9      	bne.n	800c8ac <_svfiprintf_r+0x50>
 800c8b8:	ebba 0b04 	subs.w	fp, sl, r4
 800c8bc:	d00b      	beq.n	800c8d6 <_svfiprintf_r+0x7a>
 800c8be:	465b      	mov	r3, fp
 800c8c0:	4622      	mov	r2, r4
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4638      	mov	r0, r7
 800c8c6:	f7ff ff6f 	bl	800c7a8 <__ssputs_r>
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	f000 80a9 	beq.w	800ca22 <_svfiprintf_r+0x1c6>
 800c8d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d2:	445a      	add	r2, fp
 800c8d4:	9209      	str	r2, [sp, #36]	; 0x24
 800c8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 80a1 	beq.w	800ca22 <_svfiprintf_r+0x1c6>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8ea:	f10a 0a01 	add.w	sl, sl, #1
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	9307      	str	r3, [sp, #28]
 800c8f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8f6:	931a      	str	r3, [sp, #104]	; 0x68
 800c8f8:	4654      	mov	r4, sl
 800c8fa:	2205      	movs	r2, #5
 800c8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c900:	4850      	ldr	r0, [pc, #320]	; (800ca44 <_svfiprintf_r+0x1e8>)
 800c902:	f000 fa86 	bl	800ce12 <memchr>
 800c906:	9a04      	ldr	r2, [sp, #16]
 800c908:	b9d8      	cbnz	r0, 800c942 <_svfiprintf_r+0xe6>
 800c90a:	06d0      	lsls	r0, r2, #27
 800c90c:	bf44      	itt	mi
 800c90e:	2320      	movmi	r3, #32
 800c910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c914:	0711      	lsls	r1, r2, #28
 800c916:	bf44      	itt	mi
 800c918:	232b      	movmi	r3, #43	; 0x2b
 800c91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c91e:	f89a 3000 	ldrb.w	r3, [sl]
 800c922:	2b2a      	cmp	r3, #42	; 0x2a
 800c924:	d015      	beq.n	800c952 <_svfiprintf_r+0xf6>
 800c926:	4654      	mov	r4, sl
 800c928:	2000      	movs	r0, #0
 800c92a:	f04f 0c0a 	mov.w	ip, #10
 800c92e:	9a07      	ldr	r2, [sp, #28]
 800c930:	4621      	mov	r1, r4
 800c932:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c936:	3b30      	subs	r3, #48	; 0x30
 800c938:	2b09      	cmp	r3, #9
 800c93a:	d94d      	bls.n	800c9d8 <_svfiprintf_r+0x17c>
 800c93c:	b1b0      	cbz	r0, 800c96c <_svfiprintf_r+0x110>
 800c93e:	9207      	str	r2, [sp, #28]
 800c940:	e014      	b.n	800c96c <_svfiprintf_r+0x110>
 800c942:	eba0 0308 	sub.w	r3, r0, r8
 800c946:	fa09 f303 	lsl.w	r3, r9, r3
 800c94a:	4313      	orrs	r3, r2
 800c94c:	46a2      	mov	sl, r4
 800c94e:	9304      	str	r3, [sp, #16]
 800c950:	e7d2      	b.n	800c8f8 <_svfiprintf_r+0x9c>
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	1d19      	adds	r1, r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	9103      	str	r1, [sp, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	bfbb      	ittet	lt
 800c95e:	425b      	neglt	r3, r3
 800c960:	f042 0202 	orrlt.w	r2, r2, #2
 800c964:	9307      	strge	r3, [sp, #28]
 800c966:	9307      	strlt	r3, [sp, #28]
 800c968:	bfb8      	it	lt
 800c96a:	9204      	strlt	r2, [sp, #16]
 800c96c:	7823      	ldrb	r3, [r4, #0]
 800c96e:	2b2e      	cmp	r3, #46	; 0x2e
 800c970:	d10c      	bne.n	800c98c <_svfiprintf_r+0x130>
 800c972:	7863      	ldrb	r3, [r4, #1]
 800c974:	2b2a      	cmp	r3, #42	; 0x2a
 800c976:	d134      	bne.n	800c9e2 <_svfiprintf_r+0x186>
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	3402      	adds	r4, #2
 800c97c:	1d1a      	adds	r2, r3, #4
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	9203      	str	r2, [sp, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	bfb8      	it	lt
 800c986:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c98a:	9305      	str	r3, [sp, #20]
 800c98c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca48 <_svfiprintf_r+0x1ec>
 800c990:	2203      	movs	r2, #3
 800c992:	4650      	mov	r0, sl
 800c994:	7821      	ldrb	r1, [r4, #0]
 800c996:	f000 fa3c 	bl	800ce12 <memchr>
 800c99a:	b138      	cbz	r0, 800c9ac <_svfiprintf_r+0x150>
 800c99c:	2240      	movs	r2, #64	; 0x40
 800c99e:	9b04      	ldr	r3, [sp, #16]
 800c9a0:	eba0 000a 	sub.w	r0, r0, sl
 800c9a4:	4082      	lsls	r2, r0
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	3401      	adds	r4, #1
 800c9aa:	9304      	str	r3, [sp, #16]
 800c9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b0:	2206      	movs	r2, #6
 800c9b2:	4826      	ldr	r0, [pc, #152]	; (800ca4c <_svfiprintf_r+0x1f0>)
 800c9b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9b8:	f000 fa2b 	bl	800ce12 <memchr>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d038      	beq.n	800ca32 <_svfiprintf_r+0x1d6>
 800c9c0:	4b23      	ldr	r3, [pc, #140]	; (800ca50 <_svfiprintf_r+0x1f4>)
 800c9c2:	bb1b      	cbnz	r3, 800ca0c <_svfiprintf_r+0x1b0>
 800c9c4:	9b03      	ldr	r3, [sp, #12]
 800c9c6:	3307      	adds	r3, #7
 800c9c8:	f023 0307 	bic.w	r3, r3, #7
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	9303      	str	r3, [sp, #12]
 800c9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d2:	4433      	add	r3, r6
 800c9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d6:	e768      	b.n	800c8aa <_svfiprintf_r+0x4e>
 800c9d8:	460c      	mov	r4, r1
 800c9da:	2001      	movs	r0, #1
 800c9dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9e0:	e7a6      	b.n	800c930 <_svfiprintf_r+0xd4>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f04f 0c0a 	mov.w	ip, #10
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	9305      	str	r3, [sp, #20]
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9f4:	3a30      	subs	r2, #48	; 0x30
 800c9f6:	2a09      	cmp	r2, #9
 800c9f8:	d903      	bls.n	800ca02 <_svfiprintf_r+0x1a6>
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d0c6      	beq.n	800c98c <_svfiprintf_r+0x130>
 800c9fe:	9105      	str	r1, [sp, #20]
 800ca00:	e7c4      	b.n	800c98c <_svfiprintf_r+0x130>
 800ca02:	4604      	mov	r4, r0
 800ca04:	2301      	movs	r3, #1
 800ca06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca0a:	e7f0      	b.n	800c9ee <_svfiprintf_r+0x192>
 800ca0c:	ab03      	add	r3, sp, #12
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	462a      	mov	r2, r5
 800ca12:	4638      	mov	r0, r7
 800ca14:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <_svfiprintf_r+0x1f8>)
 800ca16:	a904      	add	r1, sp, #16
 800ca18:	f3af 8000 	nop.w
 800ca1c:	1c42      	adds	r2, r0, #1
 800ca1e:	4606      	mov	r6, r0
 800ca20:	d1d6      	bne.n	800c9d0 <_svfiprintf_r+0x174>
 800ca22:	89ab      	ldrh	r3, [r5, #12]
 800ca24:	065b      	lsls	r3, r3, #25
 800ca26:	f53f af2d 	bmi.w	800c884 <_svfiprintf_r+0x28>
 800ca2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca2c:	b01d      	add	sp, #116	; 0x74
 800ca2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca32:	ab03      	add	r3, sp, #12
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	462a      	mov	r2, r5
 800ca38:	4638      	mov	r0, r7
 800ca3a:	4b06      	ldr	r3, [pc, #24]	; (800ca54 <_svfiprintf_r+0x1f8>)
 800ca3c:	a904      	add	r1, sp, #16
 800ca3e:	f000 f87d 	bl	800cb3c <_printf_i>
 800ca42:	e7eb      	b.n	800ca1c <_svfiprintf_r+0x1c0>
 800ca44:	0800de7b 	.word	0x0800de7b
 800ca48:	0800de81 	.word	0x0800de81
 800ca4c:	0800de85 	.word	0x0800de85
 800ca50:	00000000 	.word	0x00000000
 800ca54:	0800c7a9 	.word	0x0800c7a9

0800ca58 <_printf_common>:
 800ca58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca5c:	4616      	mov	r6, r2
 800ca5e:	4699      	mov	r9, r3
 800ca60:	688a      	ldr	r2, [r1, #8]
 800ca62:	690b      	ldr	r3, [r1, #16]
 800ca64:	4607      	mov	r7, r0
 800ca66:	4293      	cmp	r3, r2
 800ca68:	bfb8      	it	lt
 800ca6a:	4613      	movlt	r3, r2
 800ca6c:	6033      	str	r3, [r6, #0]
 800ca6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca72:	460c      	mov	r4, r1
 800ca74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca78:	b10a      	cbz	r2, 800ca7e <_printf_common+0x26>
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	6033      	str	r3, [r6, #0]
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	0699      	lsls	r1, r3, #26
 800ca82:	bf42      	ittt	mi
 800ca84:	6833      	ldrmi	r3, [r6, #0]
 800ca86:	3302      	addmi	r3, #2
 800ca88:	6033      	strmi	r3, [r6, #0]
 800ca8a:	6825      	ldr	r5, [r4, #0]
 800ca8c:	f015 0506 	ands.w	r5, r5, #6
 800ca90:	d106      	bne.n	800caa0 <_printf_common+0x48>
 800ca92:	f104 0a19 	add.w	sl, r4, #25
 800ca96:	68e3      	ldr	r3, [r4, #12]
 800ca98:	6832      	ldr	r2, [r6, #0]
 800ca9a:	1a9b      	subs	r3, r3, r2
 800ca9c:	42ab      	cmp	r3, r5
 800ca9e:	dc2b      	bgt.n	800caf8 <_printf_common+0xa0>
 800caa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800caa4:	1e13      	subs	r3, r2, #0
 800caa6:	6822      	ldr	r2, [r4, #0]
 800caa8:	bf18      	it	ne
 800caaa:	2301      	movne	r3, #1
 800caac:	0692      	lsls	r2, r2, #26
 800caae:	d430      	bmi.n	800cb12 <_printf_common+0xba>
 800cab0:	4649      	mov	r1, r9
 800cab2:	4638      	mov	r0, r7
 800cab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cab8:	47c0      	blx	r8
 800caba:	3001      	adds	r0, #1
 800cabc:	d023      	beq.n	800cb06 <_printf_common+0xae>
 800cabe:	6823      	ldr	r3, [r4, #0]
 800cac0:	6922      	ldr	r2, [r4, #16]
 800cac2:	f003 0306 	and.w	r3, r3, #6
 800cac6:	2b04      	cmp	r3, #4
 800cac8:	bf14      	ite	ne
 800caca:	2500      	movne	r5, #0
 800cacc:	6833      	ldreq	r3, [r6, #0]
 800cace:	f04f 0600 	mov.w	r6, #0
 800cad2:	bf08      	it	eq
 800cad4:	68e5      	ldreq	r5, [r4, #12]
 800cad6:	f104 041a 	add.w	r4, r4, #26
 800cada:	bf08      	it	eq
 800cadc:	1aed      	subeq	r5, r5, r3
 800cade:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cae2:	bf08      	it	eq
 800cae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cae8:	4293      	cmp	r3, r2
 800caea:	bfc4      	itt	gt
 800caec:	1a9b      	subgt	r3, r3, r2
 800caee:	18ed      	addgt	r5, r5, r3
 800caf0:	42b5      	cmp	r5, r6
 800caf2:	d11a      	bne.n	800cb2a <_printf_common+0xd2>
 800caf4:	2000      	movs	r0, #0
 800caf6:	e008      	b.n	800cb0a <_printf_common+0xb2>
 800caf8:	2301      	movs	r3, #1
 800cafa:	4652      	mov	r2, sl
 800cafc:	4649      	mov	r1, r9
 800cafe:	4638      	mov	r0, r7
 800cb00:	47c0      	blx	r8
 800cb02:	3001      	adds	r0, #1
 800cb04:	d103      	bne.n	800cb0e <_printf_common+0xb6>
 800cb06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0e:	3501      	adds	r5, #1
 800cb10:	e7c1      	b.n	800ca96 <_printf_common+0x3e>
 800cb12:	2030      	movs	r0, #48	; 0x30
 800cb14:	18e1      	adds	r1, r4, r3
 800cb16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb20:	4422      	add	r2, r4
 800cb22:	3302      	adds	r3, #2
 800cb24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb28:	e7c2      	b.n	800cab0 <_printf_common+0x58>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	4649      	mov	r1, r9
 800cb30:	4638      	mov	r0, r7
 800cb32:	47c0      	blx	r8
 800cb34:	3001      	adds	r0, #1
 800cb36:	d0e6      	beq.n	800cb06 <_printf_common+0xae>
 800cb38:	3601      	adds	r6, #1
 800cb3a:	e7d9      	b.n	800caf0 <_printf_common+0x98>

0800cb3c <_printf_i>:
 800cb3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb40:	7e0f      	ldrb	r7, [r1, #24]
 800cb42:	4691      	mov	r9, r2
 800cb44:	2f78      	cmp	r7, #120	; 0x78
 800cb46:	4680      	mov	r8, r0
 800cb48:	460c      	mov	r4, r1
 800cb4a:	469a      	mov	sl, r3
 800cb4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb52:	d807      	bhi.n	800cb64 <_printf_i+0x28>
 800cb54:	2f62      	cmp	r7, #98	; 0x62
 800cb56:	d80a      	bhi.n	800cb6e <_printf_i+0x32>
 800cb58:	2f00      	cmp	r7, #0
 800cb5a:	f000 80d5 	beq.w	800cd08 <_printf_i+0x1cc>
 800cb5e:	2f58      	cmp	r7, #88	; 0x58
 800cb60:	f000 80c1 	beq.w	800cce6 <_printf_i+0x1aa>
 800cb64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb6c:	e03a      	b.n	800cbe4 <_printf_i+0xa8>
 800cb6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb72:	2b15      	cmp	r3, #21
 800cb74:	d8f6      	bhi.n	800cb64 <_printf_i+0x28>
 800cb76:	a101      	add	r1, pc, #4	; (adr r1, 800cb7c <_printf_i+0x40>)
 800cb78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb7c:	0800cbd5 	.word	0x0800cbd5
 800cb80:	0800cbe9 	.word	0x0800cbe9
 800cb84:	0800cb65 	.word	0x0800cb65
 800cb88:	0800cb65 	.word	0x0800cb65
 800cb8c:	0800cb65 	.word	0x0800cb65
 800cb90:	0800cb65 	.word	0x0800cb65
 800cb94:	0800cbe9 	.word	0x0800cbe9
 800cb98:	0800cb65 	.word	0x0800cb65
 800cb9c:	0800cb65 	.word	0x0800cb65
 800cba0:	0800cb65 	.word	0x0800cb65
 800cba4:	0800cb65 	.word	0x0800cb65
 800cba8:	0800ccef 	.word	0x0800ccef
 800cbac:	0800cc15 	.word	0x0800cc15
 800cbb0:	0800cca9 	.word	0x0800cca9
 800cbb4:	0800cb65 	.word	0x0800cb65
 800cbb8:	0800cb65 	.word	0x0800cb65
 800cbbc:	0800cd11 	.word	0x0800cd11
 800cbc0:	0800cb65 	.word	0x0800cb65
 800cbc4:	0800cc15 	.word	0x0800cc15
 800cbc8:	0800cb65 	.word	0x0800cb65
 800cbcc:	0800cb65 	.word	0x0800cb65
 800cbd0:	0800ccb1 	.word	0x0800ccb1
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	1d1a      	adds	r2, r3, #4
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	602a      	str	r2, [r5, #0]
 800cbdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e0a0      	b.n	800cd2a <_printf_i+0x1ee>
 800cbe8:	6820      	ldr	r0, [r4, #0]
 800cbea:	682b      	ldr	r3, [r5, #0]
 800cbec:	0607      	lsls	r7, r0, #24
 800cbee:	f103 0104 	add.w	r1, r3, #4
 800cbf2:	6029      	str	r1, [r5, #0]
 800cbf4:	d501      	bpl.n	800cbfa <_printf_i+0xbe>
 800cbf6:	681e      	ldr	r6, [r3, #0]
 800cbf8:	e003      	b.n	800cc02 <_printf_i+0xc6>
 800cbfa:	0646      	lsls	r6, r0, #25
 800cbfc:	d5fb      	bpl.n	800cbf6 <_printf_i+0xba>
 800cbfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc02:	2e00      	cmp	r6, #0
 800cc04:	da03      	bge.n	800cc0e <_printf_i+0xd2>
 800cc06:	232d      	movs	r3, #45	; 0x2d
 800cc08:	4276      	negs	r6, r6
 800cc0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc0e:	230a      	movs	r3, #10
 800cc10:	4859      	ldr	r0, [pc, #356]	; (800cd78 <_printf_i+0x23c>)
 800cc12:	e012      	b.n	800cc3a <_printf_i+0xfe>
 800cc14:	682b      	ldr	r3, [r5, #0]
 800cc16:	6820      	ldr	r0, [r4, #0]
 800cc18:	1d19      	adds	r1, r3, #4
 800cc1a:	6029      	str	r1, [r5, #0]
 800cc1c:	0605      	lsls	r5, r0, #24
 800cc1e:	d501      	bpl.n	800cc24 <_printf_i+0xe8>
 800cc20:	681e      	ldr	r6, [r3, #0]
 800cc22:	e002      	b.n	800cc2a <_printf_i+0xee>
 800cc24:	0641      	lsls	r1, r0, #25
 800cc26:	d5fb      	bpl.n	800cc20 <_printf_i+0xe4>
 800cc28:	881e      	ldrh	r6, [r3, #0]
 800cc2a:	2f6f      	cmp	r7, #111	; 0x6f
 800cc2c:	bf0c      	ite	eq
 800cc2e:	2308      	moveq	r3, #8
 800cc30:	230a      	movne	r3, #10
 800cc32:	4851      	ldr	r0, [pc, #324]	; (800cd78 <_printf_i+0x23c>)
 800cc34:	2100      	movs	r1, #0
 800cc36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc3a:	6865      	ldr	r5, [r4, #4]
 800cc3c:	2d00      	cmp	r5, #0
 800cc3e:	bfa8      	it	ge
 800cc40:	6821      	ldrge	r1, [r4, #0]
 800cc42:	60a5      	str	r5, [r4, #8]
 800cc44:	bfa4      	itt	ge
 800cc46:	f021 0104 	bicge.w	r1, r1, #4
 800cc4a:	6021      	strge	r1, [r4, #0]
 800cc4c:	b90e      	cbnz	r6, 800cc52 <_printf_i+0x116>
 800cc4e:	2d00      	cmp	r5, #0
 800cc50:	d04b      	beq.n	800ccea <_printf_i+0x1ae>
 800cc52:	4615      	mov	r5, r2
 800cc54:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc58:	fb03 6711 	mls	r7, r3, r1, r6
 800cc5c:	5dc7      	ldrb	r7, [r0, r7]
 800cc5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc62:	4637      	mov	r7, r6
 800cc64:	42bb      	cmp	r3, r7
 800cc66:	460e      	mov	r6, r1
 800cc68:	d9f4      	bls.n	800cc54 <_printf_i+0x118>
 800cc6a:	2b08      	cmp	r3, #8
 800cc6c:	d10b      	bne.n	800cc86 <_printf_i+0x14a>
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	07de      	lsls	r6, r3, #31
 800cc72:	d508      	bpl.n	800cc86 <_printf_i+0x14a>
 800cc74:	6923      	ldr	r3, [r4, #16]
 800cc76:	6861      	ldr	r1, [r4, #4]
 800cc78:	4299      	cmp	r1, r3
 800cc7a:	bfde      	ittt	le
 800cc7c:	2330      	movle	r3, #48	; 0x30
 800cc7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc86:	1b52      	subs	r2, r2, r5
 800cc88:	6122      	str	r2, [r4, #16]
 800cc8a:	464b      	mov	r3, r9
 800cc8c:	4621      	mov	r1, r4
 800cc8e:	4640      	mov	r0, r8
 800cc90:	f8cd a000 	str.w	sl, [sp]
 800cc94:	aa03      	add	r2, sp, #12
 800cc96:	f7ff fedf 	bl	800ca58 <_printf_common>
 800cc9a:	3001      	adds	r0, #1
 800cc9c:	d14a      	bne.n	800cd34 <_printf_i+0x1f8>
 800cc9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cca2:	b004      	add	sp, #16
 800cca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	f043 0320 	orr.w	r3, r3, #32
 800ccae:	6023      	str	r3, [r4, #0]
 800ccb0:	2778      	movs	r7, #120	; 0x78
 800ccb2:	4832      	ldr	r0, [pc, #200]	; (800cd7c <_printf_i+0x240>)
 800ccb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	6829      	ldr	r1, [r5, #0]
 800ccbc:	061f      	lsls	r7, r3, #24
 800ccbe:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccc2:	d402      	bmi.n	800ccca <_printf_i+0x18e>
 800ccc4:	065f      	lsls	r7, r3, #25
 800ccc6:	bf48      	it	mi
 800ccc8:	b2b6      	uxthmi	r6, r6
 800ccca:	07df      	lsls	r7, r3, #31
 800cccc:	bf48      	it	mi
 800ccce:	f043 0320 	orrmi.w	r3, r3, #32
 800ccd2:	6029      	str	r1, [r5, #0]
 800ccd4:	bf48      	it	mi
 800ccd6:	6023      	strmi	r3, [r4, #0]
 800ccd8:	b91e      	cbnz	r6, 800cce2 <_printf_i+0x1a6>
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	f023 0320 	bic.w	r3, r3, #32
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	2310      	movs	r3, #16
 800cce4:	e7a6      	b.n	800cc34 <_printf_i+0xf8>
 800cce6:	4824      	ldr	r0, [pc, #144]	; (800cd78 <_printf_i+0x23c>)
 800cce8:	e7e4      	b.n	800ccb4 <_printf_i+0x178>
 800ccea:	4615      	mov	r5, r2
 800ccec:	e7bd      	b.n	800cc6a <_printf_i+0x12e>
 800ccee:	682b      	ldr	r3, [r5, #0]
 800ccf0:	6826      	ldr	r6, [r4, #0]
 800ccf2:	1d18      	adds	r0, r3, #4
 800ccf4:	6961      	ldr	r1, [r4, #20]
 800ccf6:	6028      	str	r0, [r5, #0]
 800ccf8:	0635      	lsls	r5, r6, #24
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	d501      	bpl.n	800cd02 <_printf_i+0x1c6>
 800ccfe:	6019      	str	r1, [r3, #0]
 800cd00:	e002      	b.n	800cd08 <_printf_i+0x1cc>
 800cd02:	0670      	lsls	r0, r6, #25
 800cd04:	d5fb      	bpl.n	800ccfe <_printf_i+0x1c2>
 800cd06:	8019      	strh	r1, [r3, #0]
 800cd08:	2300      	movs	r3, #0
 800cd0a:	4615      	mov	r5, r2
 800cd0c:	6123      	str	r3, [r4, #16]
 800cd0e:	e7bc      	b.n	800cc8a <_printf_i+0x14e>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	2100      	movs	r1, #0
 800cd14:	1d1a      	adds	r2, r3, #4
 800cd16:	602a      	str	r2, [r5, #0]
 800cd18:	681d      	ldr	r5, [r3, #0]
 800cd1a:	6862      	ldr	r2, [r4, #4]
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f000 f878 	bl	800ce12 <memchr>
 800cd22:	b108      	cbz	r0, 800cd28 <_printf_i+0x1ec>
 800cd24:	1b40      	subs	r0, r0, r5
 800cd26:	6060      	str	r0, [r4, #4]
 800cd28:	6863      	ldr	r3, [r4, #4]
 800cd2a:	6123      	str	r3, [r4, #16]
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd32:	e7aa      	b.n	800cc8a <_printf_i+0x14e>
 800cd34:	462a      	mov	r2, r5
 800cd36:	4649      	mov	r1, r9
 800cd38:	4640      	mov	r0, r8
 800cd3a:	6923      	ldr	r3, [r4, #16]
 800cd3c:	47d0      	blx	sl
 800cd3e:	3001      	adds	r0, #1
 800cd40:	d0ad      	beq.n	800cc9e <_printf_i+0x162>
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	079b      	lsls	r3, r3, #30
 800cd46:	d413      	bmi.n	800cd70 <_printf_i+0x234>
 800cd48:	68e0      	ldr	r0, [r4, #12]
 800cd4a:	9b03      	ldr	r3, [sp, #12]
 800cd4c:	4298      	cmp	r0, r3
 800cd4e:	bfb8      	it	lt
 800cd50:	4618      	movlt	r0, r3
 800cd52:	e7a6      	b.n	800cca2 <_printf_i+0x166>
 800cd54:	2301      	movs	r3, #1
 800cd56:	4632      	mov	r2, r6
 800cd58:	4649      	mov	r1, r9
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	47d0      	blx	sl
 800cd5e:	3001      	adds	r0, #1
 800cd60:	d09d      	beq.n	800cc9e <_printf_i+0x162>
 800cd62:	3501      	adds	r5, #1
 800cd64:	68e3      	ldr	r3, [r4, #12]
 800cd66:	9903      	ldr	r1, [sp, #12]
 800cd68:	1a5b      	subs	r3, r3, r1
 800cd6a:	42ab      	cmp	r3, r5
 800cd6c:	dcf2      	bgt.n	800cd54 <_printf_i+0x218>
 800cd6e:	e7eb      	b.n	800cd48 <_printf_i+0x20c>
 800cd70:	2500      	movs	r5, #0
 800cd72:	f104 0619 	add.w	r6, r4, #25
 800cd76:	e7f5      	b.n	800cd64 <_printf_i+0x228>
 800cd78:	0800de8c 	.word	0x0800de8c
 800cd7c:	0800de9d 	.word	0x0800de9d

0800cd80 <_realloc_r>:
 800cd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd84:	4680      	mov	r8, r0
 800cd86:	4614      	mov	r4, r2
 800cd88:	460e      	mov	r6, r1
 800cd8a:	b921      	cbnz	r1, 800cd96 <_realloc_r+0x16>
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd92:	f7ff bb77 	b.w	800c484 <_malloc_r>
 800cd96:	b92a      	cbnz	r2, 800cda4 <_realloc_r+0x24>
 800cd98:	f7ff fcbe 	bl	800c718 <_free_r>
 800cd9c:	4625      	mov	r5, r4
 800cd9e:	4628      	mov	r0, r5
 800cda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda4:	f000 f851 	bl	800ce4a <_malloc_usable_size_r>
 800cda8:	4284      	cmp	r4, r0
 800cdaa:	4607      	mov	r7, r0
 800cdac:	d802      	bhi.n	800cdb4 <_realloc_r+0x34>
 800cdae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdb2:	d812      	bhi.n	800cdda <_realloc_r+0x5a>
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	4640      	mov	r0, r8
 800cdb8:	f7ff fb64 	bl	800c484 <_malloc_r>
 800cdbc:	4605      	mov	r5, r0
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d0ed      	beq.n	800cd9e <_realloc_r+0x1e>
 800cdc2:	42bc      	cmp	r4, r7
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	bf28      	it	cs
 800cdca:	463a      	movcs	r2, r7
 800cdcc:	f000 f82f 	bl	800ce2e <memcpy>
 800cdd0:	4631      	mov	r1, r6
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	f7ff fca0 	bl	800c718 <_free_r>
 800cdd8:	e7e1      	b.n	800cd9e <_realloc_r+0x1e>
 800cdda:	4635      	mov	r5, r6
 800cddc:	e7df      	b.n	800cd9e <_realloc_r+0x1e>

0800cdde <memmove>:
 800cdde:	4288      	cmp	r0, r1
 800cde0:	b510      	push	{r4, lr}
 800cde2:	eb01 0402 	add.w	r4, r1, r2
 800cde6:	d902      	bls.n	800cdee <memmove+0x10>
 800cde8:	4284      	cmp	r4, r0
 800cdea:	4623      	mov	r3, r4
 800cdec:	d807      	bhi.n	800cdfe <memmove+0x20>
 800cdee:	1e43      	subs	r3, r0, #1
 800cdf0:	42a1      	cmp	r1, r4
 800cdf2:	d008      	beq.n	800ce06 <memmove+0x28>
 800cdf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdf8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdfc:	e7f8      	b.n	800cdf0 <memmove+0x12>
 800cdfe:	4601      	mov	r1, r0
 800ce00:	4402      	add	r2, r0
 800ce02:	428a      	cmp	r2, r1
 800ce04:	d100      	bne.n	800ce08 <memmove+0x2a>
 800ce06:	bd10      	pop	{r4, pc}
 800ce08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce10:	e7f7      	b.n	800ce02 <memmove+0x24>

0800ce12 <memchr>:
 800ce12:	4603      	mov	r3, r0
 800ce14:	b510      	push	{r4, lr}
 800ce16:	b2c9      	uxtb	r1, r1
 800ce18:	4402      	add	r2, r0
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	d101      	bne.n	800ce24 <memchr+0x12>
 800ce20:	2000      	movs	r0, #0
 800ce22:	e003      	b.n	800ce2c <memchr+0x1a>
 800ce24:	7804      	ldrb	r4, [r0, #0]
 800ce26:	3301      	adds	r3, #1
 800ce28:	428c      	cmp	r4, r1
 800ce2a:	d1f6      	bne.n	800ce1a <memchr+0x8>
 800ce2c:	bd10      	pop	{r4, pc}

0800ce2e <memcpy>:
 800ce2e:	440a      	add	r2, r1
 800ce30:	4291      	cmp	r1, r2
 800ce32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce36:	d100      	bne.n	800ce3a <memcpy+0xc>
 800ce38:	4770      	bx	lr
 800ce3a:	b510      	push	{r4, lr}
 800ce3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce40:	4291      	cmp	r1, r2
 800ce42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce46:	d1f9      	bne.n	800ce3c <memcpy+0xe>
 800ce48:	bd10      	pop	{r4, pc}

0800ce4a <_malloc_usable_size_r>:
 800ce4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce4e:	1f18      	subs	r0, r3, #4
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	bfbc      	itt	lt
 800ce54:	580b      	ldrlt	r3, [r1, r0]
 800ce56:	18c0      	addlt	r0, r0, r3
 800ce58:	4770      	bx	lr
	...

0800ce5c <_init>:
 800ce5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5e:	bf00      	nop
 800ce60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce62:	bc08      	pop	{r3}
 800ce64:	469e      	mov	lr, r3
 800ce66:	4770      	bx	lr

0800ce68 <_fini>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	bf00      	nop
 800ce6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6e:	bc08      	pop	{r3}
 800ce70:	469e      	mov	lr, r3
 800ce72:	4770      	bx	lr
