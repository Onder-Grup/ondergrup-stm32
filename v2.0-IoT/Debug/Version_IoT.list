
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d990  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0800db74  0800db74  0000eb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800def0  0800def0  0000ffd4  2**0
                  CONTENTS
  4 .ARM          00000008  0800def0  0800def0  0000eef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800def8  0800def8  0000ffd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800def8  0800def8  0000eef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800defc  0800defc  0000eefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd4  20000000  0800df00  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000fd4  0800eed4  0000ffd4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b74  0800eed4  00010b74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000ffd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dc1  00000000  00000000  0000fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364b  00000000  00000000  00028dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0002c410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb0  00000000  00000000  0002d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a4  00000000  00000000  0002e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8d3  00000000  00000000  0004ae54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a047d  00000000  00000000  00067727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107ba4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000535c  00000000  00000000  00107be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010cf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd4 	.word	0x20000fd4
 8000200:	00000000 	.word	0x00000000
 8000204:	0800db5c 	.word	0x0800db5c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd8 	.word	0x20000fd8
 8000220:	0800db5c 	.word	0x0800db5c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	@ (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	@ (80004bc <eepromKontrol+0x288>)
 8000250:	f00a fae6 	bl	800a820 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f009 f95e 	bl	8009518 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	@ (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	@ (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	@ (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	@ (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	@ (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	@ (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	@ (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	@ (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	@ (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	@ (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	@ (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	@ (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	@ (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	@ (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	@ (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	@ (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	@ (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	@ (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	@ (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	@ (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	@ (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	@ (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	@ (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	@ (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	@ (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	@ (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	@ (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	@ (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	@ (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	@ (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	@ (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	@ (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	@ (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	@ (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	@ (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	@ (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	@ (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	@ (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	@ (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	@ (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	@ (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	@ (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	@ (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	@ (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	@ (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	@ (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	@ (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	@ (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	@ (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	@ (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	@ (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	@ (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	@ (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	@ (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	@ (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	@ (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	@ (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	@ (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	@ (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	@ (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	@ (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	@ (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	@ (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	@ (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	@ (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	@ (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	@ (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	@ (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	@ (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	@ (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	@ (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	@ (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	@ (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	@ (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	@ (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	@ (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	@ (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	@ (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	@ (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	@ (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000ff0 	.word	0x20000ff0
 80004bc:	20001940 	.word	0x20001940
 80004c0:	2000109d 	.word	0x2000109d
 80004c4:	200010c5 	.word	0x200010c5
 80004c8:	200010c8 	.word	0x200010c8
 80004cc:	200010c9 	.word	0x200010c9
 80004d0:	200010ca 	.word	0x200010ca
 80004d4:	200010cb 	.word	0x200010cb
 80004d8:	200010cc 	.word	0x200010cc
 80004dc:	200010cd 	.word	0x200010cd
 80004e0:	200010dd 	.word	0x200010dd
 80004e4:	200010ce 	.word	0x200010ce
 80004e8:	200010de 	.word	0x200010de
 80004ec:	200010cf 	.word	0x200010cf
 80004f0:	200010df 	.word	0x200010df
 80004f4:	200010d2 	.word	0x200010d2
 80004f8:	200010d3 	.word	0x200010d3
 80004fc:	200010d4 	.word	0x200010d4
 8000500:	200010d5 	.word	0x200010d5
 8000504:	200010d6 	.word	0x200010d6
 8000508:	200010d7 	.word	0x200010d7
 800050c:	200010d8 	.word	0x200010d8
 8000510:	200010d9 	.word	0x200010d9
 8000514:	200010da 	.word	0x200010da
 8000518:	200010db 	.word	0x200010db
 800051c:	200010dc 	.word	0x200010dc
 8000520:	200010e0 	.word	0x200010e0
 8000524:	200010e2 	.word	0x200010e2
 8000528:	200010c0 	.word	0x200010c0
 800052c:	200010c1 	.word	0x200010c1
 8000530:	200010c2 	.word	0x200010c2
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200010c3 	.word	0x200010c3
 8000540:	200010e5 	.word	0x200010e5
 8000544:	200010e3 	.word	0x200010e3
 8000548:	200010d1 	.word	0x200010d1
 800054c:	200010e4 	.word	0x200010e4
 8000550:	200010d0 	.word	0x200010d0
 8000554:	200010e6 	.word	0x200010e6
 8000558:	200010e7 	.word	0x200010e7
 800055c:	200010e8 	.word	0x200010e8
 8000560:	200010e9 	.word	0x200010e9
 8000564:	200010ea 	.word	0x200010ea
 8000568:	200010eb 	.word	0x200010eb
 800056c:	200010ec 	.word	0x200010ec
 8000570:	200010ed 	.word	0x200010ed
 8000574:	200010ee 	.word	0x200010ee
 8000578:	200010ef 	.word	0x200010ef
 800057c:	2000109c 	.word	0x2000109c
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	@ (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	@ (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	@ (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	@ (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	@ (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	@ (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	@ (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	@ (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	@ (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	@ (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	@ (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	@ (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	@ (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	@ (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	@ (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	@ (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	@ (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	@ (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	@ 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	@ (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	@ 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	@ 0xfa
 80006bc:	f008 ff2c 	bl	8009518 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	@ 0xfa
 80006c8:	f008 ff26 	bl	8009518 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	@ 0xfa
 80006d4:	f008 ff20 	bl	8009518 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 fca3 	bl	8006028 <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200010dd 	.word	0x200010dd
 80006ec:	200010ce 	.word	0x200010ce
 80006f0:	200010de 	.word	0x200010de
 80006f4:	200010cf 	.word	0x200010cf
 80006f8:	200010d1 	.word	0x200010d1
 80006fc:	200010df 	.word	0x200010df
 8000700:	200010d2 	.word	0x200010d2
 8000704:	200010d3 	.word	0x200010d3
 8000708:	200010d4 	.word	0x200010d4
 800070c:	200010d5 	.word	0x200010d5
 8000710:	200010d6 	.word	0x200010d6
 8000714:	200010d7 	.word	0x200010d7
 8000718:	200010d8 	.word	0x200010d8
 800071c:	200010d9 	.word	0x200010d9
 8000720:	200010da 	.word	0x200010da
 8000724:	200010db 	.word	0x200010db
 8000728:	200010dc 	.word	0x200010dc
 800072c:	200010e0 	.word	0x200010e0
 8000730:	200010e2 	.word	0x200010e2
 8000734:	200010e4 	.word	0x200010e4
 8000738:	200010e5 	.word	0x200010e5
 800073c:	200010e3 	.word	0x200010e3

08000740 <convertArrays>:
		HAL_Delay(500);
		lcd_clear();
	}
}

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	@ (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	@ (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	@ (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	@ 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000ff0 	.word	0x20000ff0
 8000828:	20000010 	.word	0x20000010
 800082c:	20001068 	.word	0x20001068
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20001074 	.word	0x20001074
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20001088 	.word	0x20001088

08000844 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b09e      	sub	sp, #120	@ 0x78
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000850:	4947      	ldr	r1, [pc, #284]	@ (8000970 <ESP8266_Init+0x12c>)
 8000852:	4848      	ldr	r0, [pc, #288]	@ (8000974 <ESP8266_Init+0x130>)
 8000854:	f00c fd14 	bl	800d280 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000858:	4846      	ldr	r0, [pc, #280]	@ (8000974 <ESP8266_Init+0x130>)
 800085a:	f7ff fce3 	bl	8000224 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	b29b      	uxth	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	4943      	ldr	r1, [pc, #268]	@ (8000974 <ESP8266_Init+0x130>)
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f00b ff22 	bl	800c6b0 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000870:	f008 fe52 	bl	8009518 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000874:	4940      	ldr	r1, [pc, #256]	@ (8000978 <ESP8266_Init+0x134>)
 8000876:	483f      	ldr	r0, [pc, #252]	@ (8000974 <ESP8266_Init+0x130>)
 8000878:	f00c fd02 	bl	800d280 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800087c:	483d      	ldr	r0, [pc, #244]	@ (8000974 <ESP8266_Init+0x130>)
 800087e:	f7ff fcd1 	bl	8000224 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	493a      	ldr	r1, [pc, #232]	@ (8000974 <ESP8266_Init+0x130>)
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f00b ff10 	bl	800c6b0 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000890:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000894:	f008 fe40 	bl	8009518 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000898:	4938      	ldr	r1, [pc, #224]	@ (800097c <ESP8266_Init+0x138>)
 800089a:	4836      	ldr	r0, [pc, #216]	@ (8000974 <ESP8266_Init+0x130>)
 800089c:	f00c fcf0 	bl	800d280 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008a0:	4834      	ldr	r0, [pc, #208]	@ (8000974 <ESP8266_Init+0x130>)
 80008a2:	f7ff fcbf 	bl	8000224 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	4931      	ldr	r1, [pc, #196]	@ (8000974 <ESP8266_Init+0x130>)
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f00b fefe 	bl	800c6b0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008b8:	f008 fe2e 	bl	8009518 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008bc:	4930      	ldr	r1, [pc, #192]	@ (8000980 <ESP8266_Init+0x13c>)
 80008be:	482d      	ldr	r0, [pc, #180]	@ (8000974 <ESP8266_Init+0x130>)
 80008c0:	f00c fcde 	bl	800d280 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008c4:	482b      	ldr	r0, [pc, #172]	@ (8000974 <ESP8266_Init+0x130>)
 80008c6:	f7ff fcad 	bl	8000224 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	4928      	ldr	r1, [pc, #160]	@ (8000974 <ESP8266_Init+0x130>)
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f00b feec 	bl	800c6b0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008dc:	f008 fe1c 	bl	8009518 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <ESP8266_Init+0x140>)
 80008e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80008e8:	c303      	stmia	r3!, {r0, r1}
 80008ea:	801a      	strh	r2, [r3, #0]
 80008ec:	3302      	adds	r3, #2
 80008ee:	0c12      	lsrs	r2, r2, #16
 80008f0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	68b9      	ldr	r1, [r7, #8]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f00c fd23 	bl	800d344 <strcat>
	strcat(str, "\",\"");
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fc8e 	bl	8000224 <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4413      	add	r3, r2
 8000912:	4a1d      	ldr	r2, [pc, #116]	@ (8000988 <ESP8266_Init+0x144>)
 8000914:	6810      	ldr	r0, [r2, #0]
 8000916:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	4618      	mov	r0, r3
 8000920:	f00c fd10 	bl	800d344 <strcat>
	strcat(str, "\"\r\n");
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fc7b 	bl	8000224 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4413      	add	r3, r2
 8000938:	4a14      	ldr	r2, [pc, #80]	@ (800098c <ESP8266_Init+0x148>)
 800093a:	6810      	ldr	r0, [r2, #0]
 800093c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	461a      	mov	r2, r3
 8000944:	4912      	ldr	r1, [pc, #72]	@ (8000990 <ESP8266_Init+0x14c>)
 8000946:	480b      	ldr	r0, [pc, #44]	@ (8000974 <ESP8266_Init+0x130>)
 8000948:	f00c fc9a 	bl	800d280 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800094c:	4809      	ldr	r0, [pc, #36]	@ (8000974 <ESP8266_Init+0x130>)
 800094e:	f7ff fc69 	bl	8000224 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29b      	uxth	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	4906      	ldr	r1, [pc, #24]	@ (8000974 <ESP8266_Init+0x130>)
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f00b fea8 	bl	800c6b0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000960:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000964:	f008 fdd8 	bl	8009518 <HAL_Delay>
}
 8000968:	bf00      	nop
 800096a:	3778      	adds	r7, #120	@ 0x78
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	0800db74 	.word	0x0800db74
 8000974:	20001128 	.word	0x20001128
 8000978:	0800db84 	.word	0x0800db84
 800097c:	0800db90 	.word	0x0800db90
 8000980:	0800db98 	.word	0x0800db98
 8000984:	0800dba8 	.word	0x0800dba8
 8000988:	0800dbb4 	.word	0x0800dbb4
 800098c:	0800dbb8 	.word	0x0800dbb8
 8000990:	0800dbbc 	.word	0x0800dbbc

08000994 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800099a:	af04      	add	r7, sp, #16
 800099c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 80009a0:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 80009a4:	6020      	str	r0, [r4, #0]
 80009a6:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80009aa:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 80009ae:	6001      	str	r1, [r0, #0]
 80009b0:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80009b4:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80009b8:	600a      	str	r2, [r1, #0]
 80009ba:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80009be:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80009c2:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 80009c4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80009c8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80009cc:	f107 0014 	add.w	r0, r7, #20
 80009d0:	220c      	movs	r2, #12
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	f00c fcc5 	bl	800d362 <strncpy>
	subMachineID[12] = '\0';
 80009d8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80009dc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80009e0:	2200      	movs	r2, #0
 80009e2:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009e4:	4a35      	ldr	r2, [pc, #212]	@ (8000abc <sendMachineData+0x128>)
 80009e6:	4936      	ldr	r1, [pc, #216]	@ (8000ac0 <sendMachineData+0x12c>)
 80009e8:	4836      	ldr	r0, [pc, #216]	@ (8000ac4 <sendMachineData+0x130>)
 80009ea:	f00c fc49 	bl	800d280 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009ee:	4835      	ldr	r0, [pc, #212]	@ (8000ac4 <sendMachineData+0x130>)
 80009f0:	f7ff fc18 	bl	8000224 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80009fc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000a00:	4930      	ldr	r1, [pc, #192]	@ (8000ac4 <sendMachineData+0x130>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	f00b fe54 	bl	800c6b0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a08:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000a0c:	f008 fd84 	bl	8009518 <HAL_Delay>

	sprintf(local_txA,
 8000a10:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a14:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000a18:	f107 0114 	add.w	r1, r7, #20
 8000a1c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000a20:	4a29      	ldr	r2, [pc, #164]	@ (8000ac8 <sendMachineData+0x134>)
 8000a22:	9202      	str	r2, [sp, #8]
 8000a24:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8000a28:	9201      	str	r2, [sp, #4]
 8000a2a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000a2e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	9200      	str	r2, [sp, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	460a      	mov	r2, r1
 8000a3a:	4924      	ldr	r1, [pc, #144]	@ (8000acc <sendMachineData+0x138>)
 8000a3c:	f00c fc20 	bl	800d280 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a40:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fbed 	bl	8000224 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000a58:	491d      	ldr	r1, [pc, #116]	@ (8000ad0 <sendMachineData+0x13c>)
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00c fc10 	bl	800d280 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fbdd 	bl	8000224 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000a72:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a76:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	f00b fe18 	bl	800c6b0 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a80:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000a84:	f008 fd48 	bl	8009518 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a88:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fbc9 	bl	8000224 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000a9a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a9e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000aa2:	6818      	ldr	r0, [r3, #0]
 8000aa4:	f00b fe04 	bl	800c6b0 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000aa8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000aac:	f008 fd34 	bl	8009518 <HAL_Delay>
}
 8000ab0:	bf00      	nop
 8000ab2:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	bf00      	nop
 8000abc:	0800dbc0 	.word	0x0800dbc0
 8000ac0:	0800dbd0 	.word	0x0800dbd0
 8000ac4:	20001128 	.word	0x20001128
 8000ac8:	0800dc64 	.word	0x0800dc64
 8000acc:	0800dbf0 	.word	0x0800dbf0
 8000ad0:	0800dc78 	.word	0x0800dc78

08000ad4 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <hata2EEPROM+0xa0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1e5a      	subs	r2, r3, #1
 8000ae4:	4b24      	ldr	r3, [pc, #144]	@ (8000b78 <hata2EEPROM+0xa4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a24      	ldr	r2, [pc, #144]	@ (8000b7c <hata2EEPROM+0xa8>)
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000af2:	f000 f8d1 	bl	8000c98 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000af6:	e000      	b.n	8000afa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000af8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	e012      	b.n	8000b26 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000b00:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <hata2EEPROM+0xa4>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <hata2EEPROM+0xa8>)
 8000b0a:	5cd3      	ldrb	r3, [r2, r3]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d107      	bne.n	8000b20 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <hata2EEPROM+0xa4>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	4918      	ldr	r1, [pc, #96]	@ (8000b7c <hata2EEPROM+0xa8>)
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	54ca      	strb	r2, [r1, r3]
					break;
 8000b1e:	e007      	b.n	8000b30 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <hata2EEPROM+0xa0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbe7      	blt.n	8000b00 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <hata2EEPROM+0xa4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	b299      	uxth	r1, r3
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <hata2EEPROM+0xa0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	b298      	uxth	r0, r3
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <hata2EEPROM+0xa4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <hata2EEPROM+0xa8>)
 8000b42:	4413      	add	r3, r2
 8000b44:	4a0b      	ldr	r2, [pc, #44]	@ (8000b74 <hata2EEPROM+0xa0>)
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000b4e:	9402      	str	r4, [sp, #8]
 8000b50:	9201      	str	r2, [sp, #4]
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4603      	mov	r3, r0
 8000b56:	460a      	mov	r2, r1
 8000b58:	21a0      	movs	r1, #160	@ 0xa0
 8000b5a:	4809      	ldr	r0, [pc, #36]	@ (8000b80 <hata2EEPROM+0xac>)
 8000b5c:	f009 fd66 	bl	800a62c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b64:	f008 fcd8 	bl	8009518 <HAL_Delay>
	eepromKontrol();
 8000b68:	f7ff fb64 	bl	8000234 <eepromKontrol>
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	20000098 	.word	0x20000098
 8000b78:	2000009c 	.word	0x2000009c
 8000b7c:	20000ff0 	.word	0x20000ff0
 8000b80:	20001940 	.word	0x20001940

08000b84 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d10f      	bne.n	8000bb4 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000b94:	4a38      	ldr	r2, [pc, #224]	@ (8000c78 <hataKoduLcdGoster+0xf4>)
 8000b96:	2101      	movs	r1, #1
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f007 ff63 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, "1");
 8000b9e:	4a37      	ldr	r2, [pc, #220]	@ (8000c7c <hataKoduLcdGoster+0xf8>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f007 ff5e 	bl	8008a64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ba8:	4a35      	ldr	r2, [pc, #212]	@ (8000c80 <hataKoduLcdGoster+0xfc>)
 8000baa:	2107      	movs	r1, #7
 8000bac:	2002      	movs	r0, #2
 8000bae:	f007 ff59 	bl	8008a64 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bb2:	e05d      	b.n	8000c70 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d10f      	bne.n	8000bda <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000bba:	4a2f      	ldr	r2, [pc, #188]	@ (8000c78 <hataKoduLcdGoster+0xf4>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f007 ff50 	bl	8008a64 <lcd_print>
		lcd_print(2, 2, "2");
 8000bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8000c84 <hataKoduLcdGoster+0x100>)
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f007 ff4b 	bl	8008a64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bce:	4a2c      	ldr	r2, [pc, #176]	@ (8000c80 <hataKoduLcdGoster+0xfc>)
 8000bd0:	2107      	movs	r1, #7
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f007 ff46 	bl	8008a64 <lcd_print>
}
 8000bd8:	e04a      	b.n	8000c70 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	d10f      	bne.n	8000c00 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000be0:	4a25      	ldr	r2, [pc, #148]	@ (8000c78 <hataKoduLcdGoster+0xf4>)
 8000be2:	2101      	movs	r1, #1
 8000be4:	2001      	movs	r0, #1
 8000be6:	f007 ff3d 	bl	8008a64 <lcd_print>
		lcd_print(2, 3, "3");
 8000bea:	4a27      	ldr	r2, [pc, #156]	@ (8000c88 <hataKoduLcdGoster+0x104>)
 8000bec:	2103      	movs	r1, #3
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f007 ff38 	bl	8008a64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bf4:	4a22      	ldr	r2, [pc, #136]	@ (8000c80 <hataKoduLcdGoster+0xfc>)
 8000bf6:	2107      	movs	r1, #7
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f007 ff33 	bl	8008a64 <lcd_print>
}
 8000bfe:	e037      	b.n	8000c70 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d10f      	bne.n	8000c26 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000c06:	4a1c      	ldr	r2, [pc, #112]	@ (8000c78 <hataKoduLcdGoster+0xf4>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f007 ff2a 	bl	8008a64 <lcd_print>
		lcd_print(2, 4, "4");
 8000c10:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <hataKoduLcdGoster+0x108>)
 8000c12:	2104      	movs	r1, #4
 8000c14:	2002      	movs	r0, #2
 8000c16:	f007 ff25 	bl	8008a64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c1a:	4a19      	ldr	r2, [pc, #100]	@ (8000c80 <hataKoduLcdGoster+0xfc>)
 8000c1c:	2107      	movs	r1, #7
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f007 ff20 	bl	8008a64 <lcd_print>
}
 8000c24:	e024      	b.n	8000c70 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	d10f      	bne.n	8000c4c <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000c2c:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <hataKoduLcdGoster+0xf4>)
 8000c2e:	2101      	movs	r1, #1
 8000c30:	2001      	movs	r0, #1
 8000c32:	f007 ff17 	bl	8008a64 <lcd_print>
		lcd_print(2, 5, "5");
 8000c36:	4a16      	ldr	r2, [pc, #88]	@ (8000c90 <hataKoduLcdGoster+0x10c>)
 8000c38:	2105      	movs	r1, #5
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f007 ff12 	bl	8008a64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c40:	4a0f      	ldr	r2, [pc, #60]	@ (8000c80 <hataKoduLcdGoster+0xfc>)
 8000c42:	2107      	movs	r1, #7
 8000c44:	2002      	movs	r0, #2
 8000c46:	f007 ff0d 	bl	8008a64 <lcd_print>
}
 8000c4a:	e011      	b.n	8000c70 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d10e      	bne.n	8000c70 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000c52:	4a09      	ldr	r2, [pc, #36]	@ (8000c78 <hataKoduLcdGoster+0xf4>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	2001      	movs	r0, #1
 8000c58:	f007 ff04 	bl	8008a64 <lcd_print>
		lcd_print(2, 6, "6");
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <hataKoduLcdGoster+0x110>)
 8000c5e:	2106      	movs	r1, #6
 8000c60:	2002      	movs	r0, #2
 8000c62:	f007 feff 	bl	8008a64 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c66:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <hataKoduLcdGoster+0xfc>)
 8000c68:	2107      	movs	r1, #7
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f007 fefa 	bl	8008a64 <lcd_print>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200018b4 	.word	0x200018b4
 8000c7c:	0800dcec 	.word	0x0800dcec
 8000c80:	0800dcf0 	.word	0x0800dcf0
 8000c84:	0800dcfc 	.word	0x0800dcfc
 8000c88:	0800dd00 	.word	0x0800dd00
 8000c8c:	0800dd04 	.word	0x0800dd04
 8000c90:	0800dd08 	.word	0x0800dd08
 8000c94:	0800dd0c 	.word	0x0800dd0c

08000c98 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	e009      	b.n	8000cb8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <eepromDataFillWithEmpty+0x38>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cac:	4a09      	ldr	r2, [pc, #36]	@ (8000cd4 <eepromDataFillWithEmpty+0x3c>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <eepromDataFillWithEmpty+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dbf0      	blt.n	8000ca4 <eepromDataFillWithEmpty+0xc>
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000070 	.word	0x20000070
 8000cd4:	20000ff0 	.word	0x20000ff0
 8000cd8:	20000098 	.word	0x20000098

08000cdc <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000cee:	4b50      	ldr	r3, [pc, #320]	@ (8000e30 <i2cTest+0x154>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8000e30 <i2cTest+0x154>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0201 	bic.w	r2, r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000cfe:	484c      	ldr	r0, [pc, #304]	@ (8000e30 <i2cTest+0x154>)
 8000d00:	f009 fb66 	bl	800a3d0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d04:	23c0      	movs	r3, #192	@ 0xc0
 8000d06:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d08:	2311      	movs	r3, #17
 8000d0a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4846      	ldr	r0, [pc, #280]	@ (8000e34 <i2cTest+0x158>)
 8000d1a:	f008 ff6d 	bl	8009bf8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2140      	movs	r1, #64	@ 0x40
 8000d22:	4844      	ldr	r0, [pc, #272]	@ (8000e34 <i2cTest+0x158>)
 8000d24:	f009 f9df 	bl	800a0e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2180      	movs	r1, #128	@ 0x80
 8000d2c:	4841      	ldr	r0, [pc, #260]	@ (8000e34 <i2cTest+0x158>)
 8000d2e:	f009 f9da 	bl	800a0e6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000d32:	200a      	movs	r0, #10
 8000d34:	f008 fbf0 	bl	8009518 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d38:	bf00      	nop
 8000d3a:	2140      	movs	r1, #64	@ 0x40
 8000d3c:	483d      	ldr	r0, [pc, #244]	@ (8000e34 <i2cTest+0x158>)
 8000d3e:	f009 f9bb 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d006      	beq.n	8000d56 <i2cTest+0x7a>
 8000d48:	2180      	movs	r1, #128	@ 0x80
 8000d4a:	483a      	ldr	r0, [pc, #232]	@ (8000e34 <i2cTest+0x158>)
 8000d4c:	f009 f9b4 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d1f1      	bne.n	8000d3a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	4836      	ldr	r0, [pc, #216]	@ (8000e34 <i2cTest+0x158>)
 8000d5c:	f009 f9c3 	bl	800a0e6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000d60:	200a      	movs	r0, #10
 8000d62:	f008 fbd9 	bl	8009518 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d66:	bf00      	nop
 8000d68:	2180      	movs	r1, #128	@ 0x80
 8000d6a:	4832      	ldr	r0, [pc, #200]	@ (8000e34 <i2cTest+0x158>)
 8000d6c:	f009 f9a4 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d0f8      	beq.n	8000d68 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2140      	movs	r1, #64	@ 0x40
 8000d7a:	482e      	ldr	r0, [pc, #184]	@ (8000e34 <i2cTest+0x158>)
 8000d7c:	f009 f9b3 	bl	800a0e6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fbc9 	bl	8009518 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d86:	bf00      	nop
 8000d88:	2140      	movs	r1, #64	@ 0x40
 8000d8a:	482a      	ldr	r0, [pc, #168]	@ (8000e34 <i2cTest+0x158>)
 8000d8c:	f009 f994 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d0f8      	beq.n	8000d88 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2140      	movs	r1, #64	@ 0x40
 8000d9a:	4826      	ldr	r0, [pc, #152]	@ (8000e34 <i2cTest+0x158>)
 8000d9c:	f009 f9a3 	bl	800a0e6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000da0:	200a      	movs	r0, #10
 8000da2:	f008 fbb9 	bl	8009518 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000da6:	bf00      	nop
 8000da8:	2140      	movs	r1, #64	@ 0x40
 8000daa:	4822      	ldr	r0, [pc, #136]	@ (8000e34 <i2cTest+0x158>)
 8000dac:	f009 f984 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d1f8      	bne.n	8000da8 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2180      	movs	r1, #128	@ 0x80
 8000dba:	481e      	ldr	r0, [pc, #120]	@ (8000e34 <i2cTest+0x158>)
 8000dbc:	f009 f993 	bl	800a0e6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f008 fba9 	bl	8009518 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000dc6:	bf00      	nop
 8000dc8:	2180      	movs	r1, #128	@ 0x80
 8000dca:	481a      	ldr	r0, [pc, #104]	@ (8000e34 <i2cTest+0x158>)
 8000dcc:	f009 f974 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d1f8      	bne.n	8000dc8 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd6:	23c0      	movs	r3, #192	@ 0xc0
 8000dd8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <i2cTest+0x158>)
 8000dec:	f008 ff04 	bl	8009bf8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <i2cTest+0x154>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <i2cTest+0x154>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000dfe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e00:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <i2cTest+0x154>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <i2cTest+0x154>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e0e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <i2cTest+0x154>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <i2cTest+0x154>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e20:	4803      	ldr	r0, [pc, #12]	@ (8000e30 <i2cTest+0x154>)
 8000e22:	f009 f991 	bl	800a148 <HAL_I2C_Init>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20001940 	.word	0x20001940
 8000e34:	40010c00 	.word	0x40010c00

08000e38 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000e42:	20c8      	movs	r0, #200	@ 0xc8
 8000e44:	f008 fb68 	bl	8009518 <HAL_Delay>
	lcd_clear();
 8000e48:	f007 fe38 	bl	8008abc <lcd_clear>
	if(type == 1 && page == 0) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d13e      	bne.n	8000ed0 <printTemplate+0x98>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d13b      	bne.n	8000ed0 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000e58:	4a9a      	ldr	r2, [pc, #616]	@ (80010c4 <printTemplate+0x28c>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f007 fe01 	bl	8008a64 <lcd_print>
		lcd_print(2, 3, "0");
 8000e62:	4a99      	ldr	r2, [pc, #612]	@ (80010c8 <printTemplate+0x290>)
 8000e64:	2103      	movs	r1, #3
 8000e66:	2002      	movs	r0, #2
 8000e68:	f007 fdfc 	bl	8008a64 <lcd_print>
		lcd_print(2, 4, "1");
 8000e6c:	4a97      	ldr	r2, [pc, #604]	@ (80010cc <printTemplate+0x294>)
 8000e6e:	2104      	movs	r1, #4
 8000e70:	2002      	movs	r0, #2
 8000e72:	f007 fdf7 	bl	8008a64 <lcd_print>
		lcd_print(2, 5, "2");
 8000e76:	4a96      	ldr	r2, [pc, #600]	@ (80010d0 <printTemplate+0x298>)
 8000e78:	2105      	movs	r1, #5
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f007 fdf2 	bl	8008a64 <lcd_print>
		lcd_print(2, 6, "3");
 8000e80:	4a94      	ldr	r2, [pc, #592]	@ (80010d4 <printTemplate+0x29c>)
 8000e82:	2106      	movs	r1, #6
 8000e84:	2002      	movs	r0, #2
 8000e86:	f007 fded 	bl	8008a64 <lcd_print>
		lcd_print(2, 7, "4");
 8000e8a:	4a93      	ldr	r2, [pc, #588]	@ (80010d8 <printTemplate+0x2a0>)
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f007 fde8 	bl	8008a64 <lcd_print>
		lcd_print(2, 10, "5");
 8000e94:	4a91      	ldr	r2, [pc, #580]	@ (80010dc <printTemplate+0x2a4>)
 8000e96:	210a      	movs	r1, #10
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f007 fde3 	bl	8008a64 <lcd_print>
		lcd_print(2, 11, "6");
 8000e9e:	4a90      	ldr	r2, [pc, #576]	@ (80010e0 <printTemplate+0x2a8>)
 8000ea0:	210b      	movs	r1, #11
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f007 fdde 	bl	8008a64 <lcd_print>
		lcd_print(2, 12, "7");
 8000ea8:	4a8e      	ldr	r2, [pc, #568]	@ (80010e4 <printTemplate+0x2ac>)
 8000eaa:	210c      	movs	r1, #12
 8000eac:	2002      	movs	r0, #2
 8000eae:	f007 fdd9 	bl	8008a64 <lcd_print>
		lcd_print(2, 13, "8");
 8000eb2:	4a8d      	ldr	r2, [pc, #564]	@ (80010e8 <printTemplate+0x2b0>)
 8000eb4:	210d      	movs	r1, #13
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	f007 fdd4 	bl	8008a64 <lcd_print>
		lcd_print(2, 14, "9");
 8000ebc:	4a8b      	ldr	r2, [pc, #556]	@ (80010ec <printTemplate+0x2b4>)
 8000ebe:	210e      	movs	r1, #14
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f007 fdcf 	bl	8008a64 <lcd_print>
		lcd_gotoxy(2, 3);
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f007 fdac 	bl	8008a26 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000ece:	e0f5      	b.n	80010bc <printTemplate+0x284>
	} else if(type == 2) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d178      	bne.n	8000fc8 <printTemplate+0x190>
		if(page == 1) {
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d114      	bne.n	8000f06 <printTemplate+0xce>
			lcd_clear();
 8000edc:	f007 fdee 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8000ee0:	2064      	movs	r0, #100	@ 0x64
 8000ee2:	f008 fb19 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000ee6:	4a82      	ldr	r2, [pc, #520]	@ (80010f0 <printTemplate+0x2b8>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	2001      	movs	r0, #1
 8000eec:	f007 fdba 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ef0:	4a80      	ldr	r2, [pc, #512]	@ (80010f4 <printTemplate+0x2bc>)
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f007 fdb5 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000efa:	4a7f      	ldr	r2, [pc, #508]	@ (80010f8 <printTemplate+0x2c0>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	2002      	movs	r0, #2
 8000f00:	f007 fdb0 	bl	8008a64 <lcd_print>
}
 8000f04:	e0da      	b.n	80010bc <printTemplate+0x284>
		} else if(page == 2) {
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d114      	bne.n	8000f36 <printTemplate+0xfe>
			lcd_clear();
 8000f0c:	f007 fdd6 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8000f10:	2064      	movs	r0, #100	@ 0x64
 8000f12:	f008 fb01 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f16:	4a79      	ldr	r2, [pc, #484]	@ (80010fc <printTemplate+0x2c4>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f007 fda2 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f20:	4a74      	ldr	r2, [pc, #464]	@ (80010f4 <printTemplate+0x2bc>)
 8000f22:	2107      	movs	r1, #7
 8000f24:	2001      	movs	r0, #1
 8000f26:	f007 fd9d 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f2a:	4a75      	ldr	r2, [pc, #468]	@ (8001100 <printTemplate+0x2c8>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f007 fd98 	bl	8008a64 <lcd_print>
}
 8000f34:	e0c2      	b.n	80010bc <printTemplate+0x284>
		} else if(page == 3) {
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d114      	bne.n	8000f66 <printTemplate+0x12e>
			lcd_clear();
 8000f3c:	f007 fdbe 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8000f40:	2064      	movs	r0, #100	@ 0x64
 8000f42:	f008 fae9 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000f46:	4a6a      	ldr	r2, [pc, #424]	@ (80010f0 <printTemplate+0x2b8>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f007 fd8a 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f50:	4a68      	ldr	r2, [pc, #416]	@ (80010f4 <printTemplate+0x2bc>)
 8000f52:	2107      	movs	r1, #7
 8000f54:	2001      	movs	r0, #1
 8000f56:	f007 fd85 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000f5a:	4a6a      	ldr	r2, [pc, #424]	@ (8001104 <printTemplate+0x2cc>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f007 fd80 	bl	8008a64 <lcd_print>
}
 8000f64:	e0aa      	b.n	80010bc <printTemplate+0x284>
		} else if(page == 4) {
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d114      	bne.n	8000f96 <printTemplate+0x15e>
			lcd_clear();
 8000f6c:	f007 fda6 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8000f70:	2064      	movs	r0, #100	@ 0x64
 8000f72:	f008 fad1 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000f76:	4a5e      	ldr	r2, [pc, #376]	@ (80010f0 <printTemplate+0x2b8>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f007 fd72 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f80:	4a5c      	ldr	r2, [pc, #368]	@ (80010f4 <printTemplate+0x2bc>)
 8000f82:	2107      	movs	r1, #7
 8000f84:	2001      	movs	r0, #1
 8000f86:	f007 fd6d 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000f8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001108 <printTemplate+0x2d0>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f007 fd68 	bl	8008a64 <lcd_print>
}
 8000f94:	e092      	b.n	80010bc <printTemplate+0x284>
		} else if(page == 5) {
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	f040 808f 	bne.w	80010bc <printTemplate+0x284>
			lcd_clear();
 8000f9e:	f007 fd8d 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8000fa2:	2064      	movs	r0, #100	@ 0x64
 8000fa4:	f008 fab8 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000fa8:	4a51      	ldr	r2, [pc, #324]	@ (80010f0 <printTemplate+0x2b8>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	2001      	movs	r0, #1
 8000fae:	f007 fd59 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fb2:	4a50      	ldr	r2, [pc, #320]	@ (80010f4 <printTemplate+0x2bc>)
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f007 fd54 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000fbc:	4a53      	ldr	r2, [pc, #332]	@ (800110c <printTemplate+0x2d4>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f007 fd4f 	bl	8008a64 <lcd_print>
}
 8000fc6:	e079      	b.n	80010bc <printTemplate+0x284>
	} else if(type == 3) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d176      	bne.n	80010bc <printTemplate+0x284>
		if(page == 1) {
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d114      	bne.n	8000ffe <printTemplate+0x1c6>
			lcd_clear();
 8000fd4:	f007 fd72 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	@ 0x64
 8000fda:	f008 fa9d 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000fde:	4a4c      	ldr	r2, [pc, #304]	@ (8001110 <printTemplate+0x2d8>)
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f007 fd3e 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8001114 <printTemplate+0x2dc>)
 8000fea:	2107      	movs	r1, #7
 8000fec:	2001      	movs	r0, #1
 8000fee:	f007 fd39 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ff2:	4a41      	ldr	r2, [pc, #260]	@ (80010f8 <printTemplate+0x2c0>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f007 fd34 	bl	8008a64 <lcd_print>
}
 8000ffc:	e05e      	b.n	80010bc <printTemplate+0x284>
		} else if(page == 2) {
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d114      	bne.n	800102e <printTemplate+0x1f6>
			lcd_clear();
 8001004:	f007 fd5a 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	@ 0x64
 800100a:	f008 fa85 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800100e:	4a40      	ldr	r2, [pc, #256]	@ (8001110 <printTemplate+0x2d8>)
 8001010:	2101      	movs	r1, #1
 8001012:	2001      	movs	r0, #1
 8001014:	f007 fd26 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001018:	4a3e      	ldr	r2, [pc, #248]	@ (8001114 <printTemplate+0x2dc>)
 800101a:	2107      	movs	r1, #7
 800101c:	2001      	movs	r0, #1
 800101e:	f007 fd21 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001022:	4a37      	ldr	r2, [pc, #220]	@ (8001100 <printTemplate+0x2c8>)
 8001024:	2101      	movs	r1, #1
 8001026:	2002      	movs	r0, #2
 8001028:	f007 fd1c 	bl	8008a64 <lcd_print>
}
 800102c:	e046      	b.n	80010bc <printTemplate+0x284>
		} else if(page == 3) {
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d114      	bne.n	800105e <printTemplate+0x226>
			lcd_clear();
 8001034:	f007 fd42 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	@ 0x64
 800103a:	f008 fa6d 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800103e:	4a34      	ldr	r2, [pc, #208]	@ (8001110 <printTemplate+0x2d8>)
 8001040:	2101      	movs	r1, #1
 8001042:	2001      	movs	r0, #1
 8001044:	f007 fd0e 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001048:	4a32      	ldr	r2, [pc, #200]	@ (8001114 <printTemplate+0x2dc>)
 800104a:	2107      	movs	r1, #7
 800104c:	2001      	movs	r0, #1
 800104e:	f007 fd09 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001052:	4a2c      	ldr	r2, [pc, #176]	@ (8001104 <printTemplate+0x2cc>)
 8001054:	2101      	movs	r1, #1
 8001056:	2002      	movs	r0, #2
 8001058:	f007 fd04 	bl	8008a64 <lcd_print>
}
 800105c:	e02e      	b.n	80010bc <printTemplate+0x284>
		} else if(page == 4) {
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2b04      	cmp	r3, #4
 8001062:	d114      	bne.n	800108e <printTemplate+0x256>
			lcd_clear();
 8001064:	f007 fd2a 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8001068:	2064      	movs	r0, #100	@ 0x64
 800106a:	f008 fa55 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800106e:	4a28      	ldr	r2, [pc, #160]	@ (8001110 <printTemplate+0x2d8>)
 8001070:	2101      	movs	r1, #1
 8001072:	2001      	movs	r0, #1
 8001074:	f007 fcf6 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001078:	4a26      	ldr	r2, [pc, #152]	@ (8001114 <printTemplate+0x2dc>)
 800107a:	2107      	movs	r1, #7
 800107c:	2001      	movs	r0, #1
 800107e:	f007 fcf1 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001082:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <printTemplate+0x2d0>)
 8001084:	2101      	movs	r1, #1
 8001086:	2002      	movs	r0, #2
 8001088:	f007 fcec 	bl	8008a64 <lcd_print>
}
 800108c:	e016      	b.n	80010bc <printTemplate+0x284>
		} else if(page == 5) {
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b05      	cmp	r3, #5
 8001092:	d113      	bne.n	80010bc <printTemplate+0x284>
			lcd_clear();
 8001094:	f007 fd12 	bl	8008abc <lcd_clear>
			HAL_Delay(100);
 8001098:	2064      	movs	r0, #100	@ 0x64
 800109a:	f008 fa3d 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800109e:	4a1c      	ldr	r2, [pc, #112]	@ (8001110 <printTemplate+0x2d8>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	2001      	movs	r0, #1
 80010a4:	f007 fcde 	bl	8008a64 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001114 <printTemplate+0x2dc>)
 80010aa:	2107      	movs	r1, #7
 80010ac:	2001      	movs	r0, #1
 80010ae:	f007 fcd9 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 80010b2:	4a16      	ldr	r2, [pc, #88]	@ (800110c <printTemplate+0x2d4>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	2002      	movs	r0, #2
 80010b8:	f007 fcd4 	bl	8008a64 <lcd_print>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	0800dd10 	.word	0x0800dd10
 80010c8:	0800dd18 	.word	0x0800dd18
 80010cc:	0800dd1c 	.word	0x0800dd1c
 80010d0:	0800dd20 	.word	0x0800dd20
 80010d4:	0800dd24 	.word	0x0800dd24
 80010d8:	0800dd28 	.word	0x0800dd28
 80010dc:	0800dd2c 	.word	0x0800dd2c
 80010e0:	0800dd30 	.word	0x0800dd30
 80010e4:	0800dd34 	.word	0x0800dd34
 80010e8:	0800dd38 	.word	0x0800dd38
 80010ec:	0800dd3c 	.word	0x0800dd3c
 80010f0:	0800dd40 	.word	0x0800dd40
 80010f4:	20001074 	.word	0x20001074
 80010f8:	0800dd54 	.word	0x0800dd54
 80010fc:	0800dd68 	.word	0x0800dd68
 8001100:	0800dd70 	.word	0x0800dd70
 8001104:	0800dd84 	.word	0x0800dd84
 8001108:	0800dd98 	.word	0x0800dd98
 800110c:	0800ddac 	.word	0x0800ddac
 8001110:	0800ddc0 	.word	0x0800ddc0
 8001114:	20001088 	.word	0x20001088

08001118 <checkSlideVal>:

int checkSlideVal(int state) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d111      	bne.n	800114a <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001126:	2101      	movs	r1, #1
 8001128:	4813      	ldr	r0, [pc, #76]	@ (8001178 <checkSlideVal+0x60>)
 800112a:	f008 ffc5 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <checkSlideVal+0x20>
			return 34;
 8001134:	2322      	movs	r3, #34	@ 0x22
 8001136:	e01b      	b.n	8001170 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001138:	2108      	movs	r1, #8
 800113a:	4810      	ldr	r0, [pc, #64]	@ (800117c <checkSlideVal+0x64>)
 800113c:	f008 ffbc 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d113      	bne.n	800116e <checkSlideVal+0x56>
			return 32;
 8001146:	2320      	movs	r3, #32
 8001148:	e012      	b.n	8001170 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800114a:	2101      	movs	r1, #1
 800114c:	480a      	ldr	r0, [pc, #40]	@ (8001178 <checkSlideVal+0x60>)
 800114e:	f008 ffb3 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <checkSlideVal+0x44>
			return 35;
 8001158:	2323      	movs	r3, #35	@ 0x23
 800115a:	e009      	b.n	8001170 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800115c:	2108      	movs	r1, #8
 800115e:	4807      	ldr	r0, [pc, #28]	@ (800117c <checkSlideVal+0x64>)
 8001160:	f008 ffaa 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <checkSlideVal+0x56>
			return 33;
 800116a:	2321      	movs	r3, #33	@ 0x21
 800116c:	e000      	b.n	8001170 <checkSlideVal+0x58>
		}
	}
	return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40010800 	.word	0x40010800
 800117c:	40011000 	.word	0x40011000

08001180 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff f848 	bl	8000224 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 800119c:	e08a      	b.n	80012b4 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f7ff ffba 	bl	8001118 <checkSlideVal>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	dd07      	ble.n	80011ba <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f7ff ffb4 	bl	8001118 <checkSlideVal>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <slideText+0x148>)
 80011b6:	701a      	strb	r2, [r3, #0]
			break;
 80011b8:	e081      	b.n	80012be <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
 80011be:	e075      	b.n	80012ac <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f7ff ffa9 	bl	8001118 <checkSlideVal>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dd09      	ble.n	80011e0 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f7ff ffa3 	bl	8001118 <checkSlideVal>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <slideText+0x148>)
 80011d8:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 80011de:	e069      	b.n	80012b4 <slideText+0x134>
			}

			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	4413      	add	r3, r2
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	e029      	b.n	800123e <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80011ea:	6838      	ldr	r0, [r7, #0]
 80011ec:	f7ff ff94 	bl	8001118 <checkSlideVal>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dd0b      	ble.n	800120e <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	f7ff ff8e 	bl	8001118 <checkSlideVal>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <slideText+0x148>)
 8001202:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800120c:	e01d      	b.n	800124a <slideText+0xca>
				}

				lcd_print_char(startLine, i-z, text[i-startPos]);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	b2d8      	uxtb	r0, r3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b2d9      	uxtb	r1, r3
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	461a      	mov	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	f007 fc2e 	bl	8008a8e <lcd_print_char>
				HAL_Delay(30);
 8001232:	201e      	movs	r0, #30
 8001234:	f008 f970 	bl	8009518 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	7dfa      	ldrb	r2, [r7, #23]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	429a      	cmp	r2, r3
 8001248:	dbcf      	blt.n	80011ea <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	3b01      	subs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	e023      	b.n	800129a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001252:	6838      	ldr	r0, [r7, #0]
 8001254:	f7ff ff60 	bl	8001118 <checkSlideVal>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	dd0b      	ble.n	8001276 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f7ff ff5a 	bl	8001118 <checkSlideVal>
 8001264:	4603      	mov	r3, r0
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <slideText+0x148>)
 800126a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8001274:	e017      	b.n	80012a6 <slideText+0x126>
				}

			    if(j >= startPos) {
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	429a      	cmp	r2, r3
 800127c:	db0a      	blt.n	8001294 <slideText+0x114>
			    	lcd_print_char(startLine, j, ' ');
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	b2d1      	uxtb	r1, r2
 8001286:	2220      	movs	r2, #32
 8001288:	4618      	mov	r0, r3
 800128a:	f007 fc00 	bl	8008a8e <lcd_print_char>
			    	HAL_Delay(30);
 800128e:	201e      	movs	r0, #30
 8001290:	f008 f942 	bl	8009518 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	3b01      	subs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	7dfa      	ldrb	r2, [r7, #23]
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dad5      	bge.n	8001252 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	3301      	adds	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	6a3a      	ldr	r2, [r7, #32]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	db85      	blt.n	80011c0 <slideText+0x40>
	while(mainLoopVal == 1) {
 80012b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	f43f af71 	beq.w	800119e <slideText+0x1e>
			    }
			}
		}
	}
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200010c4 	.word	0x200010c4

080012cc <printCredentials>:

void printCredentials(int type) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d10f      	bne.n	80012fa <printCredentials+0x2e>
		//machine id yazdır
		lcd_print(1, 1, machineIDText);
 80012da:	4a31      	ldr	r2, [pc, #196]	@ (80013a0 <printCredentials+0xd4>)
 80012dc:	2101      	movs	r1, #1
 80012de:	2001      	movs	r0, #1
 80012e0:	f007 fbc0 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, machineID);
 80012e4:	4a2f      	ldr	r2, [pc, #188]	@ (80013a4 <printCredentials+0xd8>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	2002      	movs	r0, #2
 80012ea:	f007 fbbb 	bl	8008a64 <lcd_print>
		lcd_print(2, 13, "    ");
 80012ee:	4a2e      	ldr	r2, [pc, #184]	@ (80013a8 <printCredentials+0xdc>)
 80012f0:	210d      	movs	r1, #13
 80012f2:	2002      	movs	r0, #2
 80012f4:	f007 fbb6 	bl	8008a64 <lcd_print>
			slideText(wifiPass, 1, 2, 1);
		} else {
			lcd_print(2, 1, "                ");
		}
	}
}
 80012f8:	e04e      	b.n	8001398 <printCredentials+0xcc>
	} else if(type == 2) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d125      	bne.n	800134c <printCredentials+0x80>
		int ssidLength = strlen(wifiSSID);
 8001300:	482a      	ldr	r0, [pc, #168]	@ (80013ac <printCredentials+0xe0>)
 8001302:	f7fe ff8f 	bl	8000224 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 800130a:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <printCredentials+0xe4>)
 800130c:	2101      	movs	r1, #1
 800130e:	2001      	movs	r0, #1
 8001310:	f007 fba8 	bl	8008a64 <lcd_print>
		if(ssidLength == 16 || ssidLength < 16) {
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b10      	cmp	r3, #16
 8001318:	d002      	beq.n	8001320 <printCredentials+0x54>
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	dc05      	bgt.n	800132c <printCredentials+0x60>
			lcd_print(2, 1, wifiSSID);
 8001320:	4a22      	ldr	r2, [pc, #136]	@ (80013ac <printCredentials+0xe0>)
 8001322:	2101      	movs	r1, #1
 8001324:	2002      	movs	r0, #2
 8001326:	f007 fb9d 	bl	8008a64 <lcd_print>
 800132a:	e035      	b.n	8001398 <printCredentials+0xcc>
		} else if(ssidLength > 16) {
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b10      	cmp	r3, #16
 8001330:	dd06      	ble.n	8001340 <printCredentials+0x74>
			slideText(wifiSSID, 1, 2, 0);
 8001332:	2300      	movs	r3, #0
 8001334:	2202      	movs	r2, #2
 8001336:	2101      	movs	r1, #1
 8001338:	481c      	ldr	r0, [pc, #112]	@ (80013ac <printCredentials+0xe0>)
 800133a:	f7ff ff21 	bl	8001180 <slideText>
}
 800133e:	e02b      	b.n	8001398 <printCredentials+0xcc>
			lcd_print(2, 1, "                ");
 8001340:	4a1c      	ldr	r2, [pc, #112]	@ (80013b4 <printCredentials+0xe8>)
 8001342:	2101      	movs	r1, #1
 8001344:	2002      	movs	r0, #2
 8001346:	f007 fb8d 	bl	8008a64 <lcd_print>
}
 800134a:	e025      	b.n	8001398 <printCredentials+0xcc>
		int passLength = strlen(wifiPass);
 800134c:	481a      	ldr	r0, [pc, #104]	@ (80013b8 <printCredentials+0xec>)
 800134e:	f7fe ff69 	bl	8000224 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 8001356:	4a19      	ldr	r2, [pc, #100]	@ (80013bc <printCredentials+0xf0>)
 8001358:	2101      	movs	r1, #1
 800135a:	2001      	movs	r0, #1
 800135c:	f007 fb82 	bl	8008a64 <lcd_print>
		if(passLength == 16 || passLength < 16) {
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b10      	cmp	r3, #16
 8001364:	d002      	beq.n	800136c <printCredentials+0xa0>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	dc05      	bgt.n	8001378 <printCredentials+0xac>
			lcd_print(2, 1, wifiPass);
 800136c:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <printCredentials+0xec>)
 800136e:	2101      	movs	r1, #1
 8001370:	2002      	movs	r0, #2
 8001372:	f007 fb77 	bl	8008a64 <lcd_print>
 8001376:	e00f      	b.n	8001398 <printCredentials+0xcc>
		} else if(passLength > 16) {
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b10      	cmp	r3, #16
 800137c:	dd06      	ble.n	800138c <printCredentials+0xc0>
			slideText(wifiPass, 1, 2, 1);
 800137e:	2301      	movs	r3, #1
 8001380:	2202      	movs	r2, #2
 8001382:	2101      	movs	r1, #1
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <printCredentials+0xec>)
 8001386:	f7ff fefb 	bl	8001180 <slideText>
}
 800138a:	e005      	b.n	8001398 <printCredentials+0xcc>
			lcd_print(2, 1, "                ");
 800138c:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <printCredentials+0xe8>)
 800138e:	2101      	movs	r1, #1
 8001390:	2002      	movs	r0, #2
 8001392:	f007 fb67 	bl	8008a64 <lcd_print>
}
 8001396:	e7ff      	b.n	8001398 <printCredentials+0xcc>
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200018c8 	.word	0x200018c8
 80013a4:	20001068 	.word	0x20001068
 80013a8:	0800ddd4 	.word	0x0800ddd4
 80013ac:	20001074 	.word	0x20001074
 80013b0:	0800dddc 	.word	0x0800dddc
 80013b4:	0800ddf0 	.word	0x0800ddf0
 80013b8:	20001088 	.word	0x20001088
 80013bc:	0800de04 	.word	0x0800de04

080013c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013c4:	f3bf 8f4f 	dsb	sy
}
 80013c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <__NVIC_SystemReset+0x24>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013d2:	4904      	ldr	r1, [pc, #16]	@ (80013e4 <__NVIC_SystemReset+0x24>)
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <__NVIC_SystemReset+0x28>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013da:	f3bf 8f4f 	dsb	sy
}
 80013de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <__NVIC_SystemReset+0x20>
 80013e4:	e000ed00 	.word	0xe000ed00
 80013e8:	05fa0004 	.word	0x05fa0004

080013ec <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013f2:	2101      	movs	r1, #1
 80013f4:	488e      	ldr	r0, [pc, #568]	@ (8001630 <menu+0x244>)
 80013f6:	f008 fe5f 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f040 8099 	bne.w	8001534 <menu+0x148>
 8001402:	4b8c      	ldr	r3, [pc, #560]	@ (8001634 <menu+0x248>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	f083 0301 	eor.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8091 	beq.w	8001534 <menu+0x148>
		menuSayac = menuSayac+1;
 8001412:	4b89      	ldr	r3, [pc, #548]	@ (8001638 <menu+0x24c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b87      	ldr	r3, [pc, #540]	@ (8001638 <menu+0x24c>)
 800141c:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800141e:	4b86      	ldr	r3, [pc, #536]	@ (8001638 <menu+0x24c>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b24      	cmp	r3, #36	@ 0x24
 8001424:	d102      	bne.n	800142c <menu+0x40>
			menuSayac = 1;
 8001426:	4b84      	ldr	r3, [pc, #528]	@ (8001638 <menu+0x24c>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800142c:	4b82      	ldr	r3, [pc, #520]	@ (8001638 <menu+0x24c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b12      	cmp	r3, #18
 8001432:	d106      	bne.n	8001442 <menu+0x56>
 8001434:	4b81      	ldr	r3, [pc, #516]	@ (800163c <menu+0x250>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <menu+0x56>
			menuSayac = 21;
 800143c:	4b7e      	ldr	r3, [pc, #504]	@ (8001638 <menu+0x24c>)
 800143e:	2215      	movs	r2, #21
 8001440:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001442:	4b7d      	ldr	r3, [pc, #500]	@ (8001638 <menu+0x24c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b08      	cmp	r3, #8
 8001448:	d106      	bne.n	8001458 <menu+0x6c>
 800144a:	4b7d      	ldr	r3, [pc, #500]	@ (8001640 <menu+0x254>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <menu+0x6c>
			menuSayac = 16;
 8001452:	4b79      	ldr	r3, [pc, #484]	@ (8001638 <menu+0x24c>)
 8001454:	2210      	movs	r2, #16
 8001456:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001458:	4b77      	ldr	r3, [pc, #476]	@ (8001638 <menu+0x24c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b0d      	cmp	r3, #13
 800145e:	d106      	bne.n	800146e <menu+0x82>
 8001460:	4b77      	ldr	r3, [pc, #476]	@ (8001640 <menu+0x254>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d102      	bne.n	800146e <menu+0x82>
			menuSayac = 16;
 8001468:	4b73      	ldr	r3, [pc, #460]	@ (8001638 <menu+0x24c>)
 800146a:	2210      	movs	r2, #16
 800146c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800146e:	4b72      	ldr	r3, [pc, #456]	@ (8001638 <menu+0x24c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b09      	cmp	r3, #9
 8001474:	d106      	bne.n	8001484 <menu+0x98>
 8001476:	4b72      	ldr	r3, [pc, #456]	@ (8001640 <menu+0x254>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d102      	bne.n	8001484 <menu+0x98>
			menuSayac = 13;
 800147e:	4b6e      	ldr	r3, [pc, #440]	@ (8001638 <menu+0x24c>)
 8001480:	220d      	movs	r2, #13
 8001482:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001484:	4b6c      	ldr	r3, [pc, #432]	@ (8001638 <menu+0x24c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b0a      	cmp	r3, #10
 800148a:	d10a      	bne.n	80014a2 <menu+0xb6>
 800148c:	4b6d      	ldr	r3, [pc, #436]	@ (8001644 <menu+0x258>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d003      	beq.n	800149c <menu+0xb0>
 8001494:	4b6b      	ldr	r3, [pc, #428]	@ (8001644 <menu+0x258>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d102      	bne.n	80014a2 <menu+0xb6>
			menuSayac = 11;
 800149c:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <menu+0x24c>)
 800149e:	220b      	movs	r2, #11
 80014a0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80014a2:	4b65      	ldr	r3, [pc, #404]	@ (8001638 <menu+0x24c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d10e      	bne.n	80014c8 <menu+0xdc>
 80014aa:	4b67      	ldr	r3, [pc, #412]	@ (8001648 <menu+0x25c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d003      	beq.n	80014ba <menu+0xce>
 80014b2:	4b65      	ldr	r3, [pc, #404]	@ (8001648 <menu+0x25c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d106      	bne.n	80014c8 <menu+0xdc>
 80014ba:	4b61      	ldr	r3, [pc, #388]	@ (8001640 <menu+0x254>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d102      	bne.n	80014c8 <menu+0xdc>
			menuSayac = 16;
 80014c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001638 <menu+0x24c>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80014c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001638 <menu+0x24c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	d10e      	bne.n	80014ee <menu+0x102>
 80014d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <menu+0x25c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d003      	beq.n	80014e0 <menu+0xf4>
 80014d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001648 <menu+0x25c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d106      	bne.n	80014ee <menu+0x102>
 80014e0:	4b57      	ldr	r3, [pc, #348]	@ (8001640 <menu+0x254>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d102      	bne.n	80014ee <menu+0x102>
			menuSayac = 13;
 80014e8:	4b53      	ldr	r3, [pc, #332]	@ (8001638 <menu+0x24c>)
 80014ea:	220d      	movs	r2, #13
 80014ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014ee:	4b52      	ldr	r3, [pc, #328]	@ (8001638 <menu+0x24c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d106      	bne.n	8001504 <menu+0x118>
 80014f6:	4b55      	ldr	r3, [pc, #340]	@ (800164c <menu+0x260>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <menu+0x118>
			menuSayac = 16;
 80014fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001638 <menu+0x24c>)
 8001500:	2210      	movs	r2, #16
 8001502:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001504:	4b4c      	ldr	r3, [pc, #304]	@ (8001638 <menu+0x24c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b18      	cmp	r3, #24
 800150a:	d106      	bne.n	800151a <menu+0x12e>
 800150c:	4b4b      	ldr	r3, [pc, #300]	@ (800163c <menu+0x250>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <menu+0x12e>
			menuSayac = 26;
 8001514:	4b48      	ldr	r3, [pc, #288]	@ (8001638 <menu+0x24c>)
 8001516:	221a      	movs	r2, #26
 8001518:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 800151a:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <menu+0x24c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b21      	cmp	r3, #33	@ 0x21
 8001520:	d106      	bne.n	8001530 <menu+0x144>
 8001522:	4b4b      	ldr	r3, [pc, #300]	@ (8001650 <menu+0x264>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <menu+0x144>
			menuSayac = 35;
 800152a:	4b43      	ldr	r3, [pc, #268]	@ (8001638 <menu+0x24c>)
 800152c:	2223      	movs	r2, #35	@ 0x23
 800152e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001530:	f002 fc8a 	bl	8003e48 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001534:	2108      	movs	r1, #8
 8001536:	4847      	ldr	r0, [pc, #284]	@ (8001654 <menu+0x268>)
 8001538:	f008 fdbe 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	f040 8097 	bne.w	8001672 <menu+0x286>
 8001544:	4b3b      	ldr	r3, [pc, #236]	@ (8001634 <menu+0x248>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	f083 0301 	eor.w	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 808f 	beq.w	8001672 <menu+0x286>
		if (menuSayac <= 1) {
 8001554:	4b38      	ldr	r3, [pc, #224]	@ (8001638 <menu+0x24c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d802      	bhi.n	8001562 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800155c:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <menu+0x24c>)
 800155e:	2224      	movs	r2, #36	@ 0x24
 8001560:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001562:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <menu+0x24c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	3b01      	subs	r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b33      	ldr	r3, [pc, #204]	@ (8001638 <menu+0x24c>)
 800156c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800156e:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <menu+0x24c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b14      	cmp	r3, #20
 8001574:	d106      	bne.n	8001584 <menu+0x198>
 8001576:	4b31      	ldr	r3, [pc, #196]	@ (800163c <menu+0x250>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <menu+0x198>
			menuSayac = 17;
 800157e:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <menu+0x24c>)
 8001580:	2211      	movs	r2, #17
 8001582:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001584:	4b2c      	ldr	r3, [pc, #176]	@ (8001638 <menu+0x24c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d106      	bne.n	800159a <menu+0x1ae>
 800158c:	4b2c      	ldr	r3, [pc, #176]	@ (8001640 <menu+0x254>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <menu+0x1ae>
			menuSayac = 7;
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <menu+0x24c>)
 8001596:	2207      	movs	r2, #7
 8001598:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800159a:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <menu+0x24c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	d106      	bne.n	80015b0 <menu+0x1c4>
 80015a2:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <menu+0x254>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <menu+0x1c4>
			menuSayac = 12;
 80015aa:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <menu+0x24c>)
 80015ac:	220c      	movs	r2, #12
 80015ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80015b0:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <menu+0x24c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d106      	bne.n	80015c6 <menu+0x1da>
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <menu+0x254>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d102      	bne.n	80015c6 <menu+0x1da>
			menuSayac = 8;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <menu+0x24c>)
 80015c2:	2208      	movs	r2, #8
 80015c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <menu+0x24c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b0a      	cmp	r3, #10
 80015cc:	d10a      	bne.n	80015e4 <menu+0x1f8>
 80015ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <menu+0x258>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d003      	beq.n	80015de <menu+0x1f2>
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <menu+0x258>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d102      	bne.n	80015e4 <menu+0x1f8>
			menuSayac = 9;
 80015de:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <menu+0x24c>)
 80015e0:	2209      	movs	r2, #9
 80015e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <menu+0x24c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b0c      	cmp	r3, #12
 80015ea:	d10a      	bne.n	8001602 <menu+0x216>
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <menu+0x25c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d003      	beq.n	80015fc <menu+0x210>
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <menu+0x25c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d102      	bne.n	8001602 <menu+0x216>
			menuSayac = 11;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <menu+0x24c>)
 80015fe:	220b      	movs	r2, #11
 8001600:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <menu+0x24c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d106      	bne.n	8001618 <menu+0x22c>
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <menu+0x260>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <menu+0x22c>
			menuSayac = 14;
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <menu+0x24c>)
 8001614:	220e      	movs	r2, #14
 8001616:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <menu+0x24c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b19      	cmp	r3, #25
 800161e:	d11b      	bne.n	8001658 <menu+0x26c>
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <menu+0x250>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d117      	bne.n	8001658 <menu+0x26c>
			menuSayac = 23;
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <menu+0x24c>)
 800162a:	2217      	movs	r2, #23
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	e013      	b.n	8001658 <menu+0x26c>
 8001630:	40010800 	.word	0x40010800
 8001634:	200010f3 	.word	0x200010f3
 8001638:	200010c4 	.word	0x200010c4
 800163c:	200010d3 	.word	0x200010d3
 8001640:	200010cc 	.word	0x200010cc
 8001644:	200010cd 	.word	0x200010cd
 8001648:	200010ce 	.word	0x200010ce
 800164c:	200010cf 	.word	0x200010cf
 8001650:	200010e3 	.word	0x200010e3
 8001654:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001658:	4bb0      	ldr	r3, [pc, #704]	@ (800191c <menu+0x530>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b22      	cmp	r3, #34	@ 0x22
 800165e:	d106      	bne.n	800166e <menu+0x282>
 8001660:	4baf      	ldr	r3, [pc, #700]	@ (8001920 <menu+0x534>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <menu+0x282>
			menuSayac = 32;
 8001668:	4bac      	ldr	r3, [pc, #688]	@ (800191c <menu+0x530>)
 800166a:	2220      	movs	r2, #32
 800166c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800166e:	f002 fbeb 	bl	8003e48 <bekle>
	}

	if (menuSayac == 0) {
 8001672:	4baa      	ldr	r3, [pc, #680]	@ (800191c <menu+0x530>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 800167a:	4aaa      	ldr	r2, [pc, #680]	@ (8001924 <menu+0x538>)
 800167c:	2101      	movs	r1, #1
 800167e:	2001      	movs	r0, #1
 8001680:	f007 f9f0 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001684:	4aa8      	ldr	r2, [pc, #672]	@ (8001928 <menu+0x53c>)
 8001686:	2101      	movs	r1, #1
 8001688:	2002      	movs	r0, #2
 800168a:	f007 f9eb 	bl	8008a64 <lcd_print>
	}

	if (menuSayac == 1) {
 800168e:	4ba3      	ldr	r3, [pc, #652]	@ (800191c <menu+0x530>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	f040 81f4 	bne.w	8001a80 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001698:	4aa4      	ldr	r2, [pc, #656]	@ (800192c <menu+0x540>)
 800169a:	2101      	movs	r1, #1
 800169c:	2001      	movs	r0, #1
 800169e:	f007 f9e1 	bl	8008a64 <lcd_print>

		if(hataGostermeSirasi == 0) {
 80016a2:	4ba3      	ldr	r3, [pc, #652]	@ (8001930 <menu+0x544>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d115      	bne.n	80016d6 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 80016aa:	4aa2      	ldr	r2, [pc, #648]	@ (8001934 <menu+0x548>)
 80016ac:	2101      	movs	r1, #1
 80016ae:	2002      	movs	r0, #2
 80016b0:	f007 f9d8 	bl	8008a64 <lcd_print>
			lcd_print(2, 15, "   ");
 80016b4:	4aa0      	ldr	r2, [pc, #640]	@ (8001938 <menu+0x54c>)
 80016b6:	210f      	movs	r1, #15
 80016b8:	2002      	movs	r0, #2
 80016ba:	f007 f9d3 	bl	8008a64 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80016be:	4b9f      	ldr	r3, [pc, #636]	@ (800193c <menu+0x550>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	220a      	movs	r2, #10
 80016c4:	499e      	ldr	r1, [pc, #632]	@ (8001940 <menu+0x554>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00b fd22 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 80016cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001940 <menu+0x554>)
 80016ce:	210e      	movs	r1, #14
 80016d0:	2002      	movs	r0, #2
 80016d2:	f007 f9c7 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80016d6:	4b96      	ldr	r3, [pc, #600]	@ (8001930 <menu+0x544>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d115      	bne.n	800170a <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 80016de:	4a99      	ldr	r2, [pc, #612]	@ (8001944 <menu+0x558>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	2002      	movs	r0, #2
 80016e4:	f007 f9be 	bl	8008a64 <lcd_print>
			lcd_print(2, 15, "  ");
 80016e8:	4a97      	ldr	r2, [pc, #604]	@ (8001948 <menu+0x55c>)
 80016ea:	210f      	movs	r1, #15
 80016ec:	2002      	movs	r0, #2
 80016ee:	f007 f9b9 	bl	8008a64 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80016f2:	4b96      	ldr	r3, [pc, #600]	@ (800194c <menu+0x560>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	220a      	movs	r2, #10
 80016f8:	4991      	ldr	r1, [pc, #580]	@ (8001940 <menu+0x554>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f00b fd08 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 8001700:	4a8f      	ldr	r2, [pc, #572]	@ (8001940 <menu+0x554>)
 8001702:	210e      	movs	r1, #14
 8001704:	2002      	movs	r0, #2
 8001706:	f007 f9ad 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800170a:	4b89      	ldr	r3, [pc, #548]	@ (8001930 <menu+0x544>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d115      	bne.n	800173e <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 8001712:	4a8f      	ldr	r2, [pc, #572]	@ (8001950 <menu+0x564>)
 8001714:	2101      	movs	r1, #1
 8001716:	2002      	movs	r0, #2
 8001718:	f007 f9a4 	bl	8008a64 <lcd_print>
			lcd_print(2, 15, "  ");
 800171c:	4a8a      	ldr	r2, [pc, #552]	@ (8001948 <menu+0x55c>)
 800171e:	210f      	movs	r1, #15
 8001720:	2002      	movs	r0, #2
 8001722:	f007 f99f 	bl	8008a64 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001726:	4b8b      	ldr	r3, [pc, #556]	@ (8001954 <menu+0x568>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	220a      	movs	r2, #10
 800172c:	4984      	ldr	r1, [pc, #528]	@ (8001940 <menu+0x554>)
 800172e:	4618      	mov	r0, r3
 8001730:	f00b fcee 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 8001734:	4a82      	ldr	r2, [pc, #520]	@ (8001940 <menu+0x554>)
 8001736:	210e      	movs	r1, #14
 8001738:	2002      	movs	r0, #2
 800173a:	f007 f993 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800173e:	4b7c      	ldr	r3, [pc, #496]	@ (8001930 <menu+0x544>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d115      	bne.n	8001772 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001746:	4a84      	ldr	r2, [pc, #528]	@ (8001958 <menu+0x56c>)
 8001748:	2101      	movs	r1, #1
 800174a:	2002      	movs	r0, #2
 800174c:	f007 f98a 	bl	8008a64 <lcd_print>
			lcd_print(2, 15, "  ");
 8001750:	4a7d      	ldr	r2, [pc, #500]	@ (8001948 <menu+0x55c>)
 8001752:	210f      	movs	r1, #15
 8001754:	2002      	movs	r0, #2
 8001756:	f007 f985 	bl	8008a64 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800175a:	4b80      	ldr	r3, [pc, #512]	@ (800195c <menu+0x570>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	220a      	movs	r2, #10
 8001760:	4977      	ldr	r1, [pc, #476]	@ (8001940 <menu+0x554>)
 8001762:	4618      	mov	r0, r3
 8001764:	f00b fcd4 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 8001768:	4a75      	ldr	r2, [pc, #468]	@ (8001940 <menu+0x554>)
 800176a:	210e      	movs	r1, #14
 800176c:	2002      	movs	r0, #2
 800176e:	f007 f979 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001772:	4b6f      	ldr	r3, [pc, #444]	@ (8001930 <menu+0x544>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b04      	cmp	r3, #4
 8001778:	d115      	bne.n	80017a6 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 800177a:	4a79      	ldr	r2, [pc, #484]	@ (8001960 <menu+0x574>)
 800177c:	2101      	movs	r1, #1
 800177e:	2002      	movs	r0, #2
 8001780:	f007 f970 	bl	8008a64 <lcd_print>
			lcd_print(2, 15, "  ");
 8001784:	4a70      	ldr	r2, [pc, #448]	@ (8001948 <menu+0x55c>)
 8001786:	210f      	movs	r1, #15
 8001788:	2002      	movs	r0, #2
 800178a:	f007 f96b 	bl	8008a64 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800178e:	4b75      	ldr	r3, [pc, #468]	@ (8001964 <menu+0x578>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	220a      	movs	r2, #10
 8001794:	496a      	ldr	r1, [pc, #424]	@ (8001940 <menu+0x554>)
 8001796:	4618      	mov	r0, r3
 8001798:	f00b fcba 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 800179c:	4a68      	ldr	r2, [pc, #416]	@ (8001940 <menu+0x554>)
 800179e:	210e      	movs	r1, #14
 80017a0:	2002      	movs	r0, #2
 80017a2:	f007 f95f 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80017a6:	4b62      	ldr	r3, [pc, #392]	@ (8001930 <menu+0x544>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d115      	bne.n	80017da <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 80017ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001968 <menu+0x57c>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	2002      	movs	r0, #2
 80017b4:	f007 f956 	bl	8008a64 <lcd_print>
			lcd_print(2, 15, "  ");
 80017b8:	4a63      	ldr	r2, [pc, #396]	@ (8001948 <menu+0x55c>)
 80017ba:	210f      	movs	r1, #15
 80017bc:	2002      	movs	r0, #2
 80017be:	f007 f951 	bl	8008a64 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80017c2:	4b6a      	ldr	r3, [pc, #424]	@ (800196c <menu+0x580>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	220a      	movs	r2, #10
 80017c8:	495d      	ldr	r1, [pc, #372]	@ (8001940 <menu+0x554>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00b fca0 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 80017d0:	4a5b      	ldr	r2, [pc, #364]	@ (8001940 <menu+0x554>)
 80017d2:	210e      	movs	r1, #14
 80017d4:	2002      	movs	r0, #2
 80017d6:	f007 f945 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80017da:	4b55      	ldr	r3, [pc, #340]	@ (8001930 <menu+0x544>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d115      	bne.n	800180e <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 80017e2:	4a63      	ldr	r2, [pc, #396]	@ (8001970 <menu+0x584>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	2002      	movs	r0, #2
 80017e8:	f007 f93c 	bl	8008a64 <lcd_print>
			lcd_print(2, 15, "  ");
 80017ec:	4a56      	ldr	r2, [pc, #344]	@ (8001948 <menu+0x55c>)
 80017ee:	210f      	movs	r1, #15
 80017f0:	2002      	movs	r0, #2
 80017f2:	f007 f937 	bl	8008a64 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80017f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001974 <menu+0x588>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	220a      	movs	r2, #10
 80017fc:	4950      	ldr	r1, [pc, #320]	@ (8001940 <menu+0x554>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f00b fc86 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 8001804:	4a4e      	ldr	r2, [pc, #312]	@ (8001940 <menu+0x554>)
 8001806:	210e      	movs	r1, #14
 8001808:	2002      	movs	r0, #2
 800180a:	f007 f92b 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800180e:	4b48      	ldr	r3, [pc, #288]	@ (8001930 <menu+0x544>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b07      	cmp	r3, #7
 8001814:	d115      	bne.n	8001842 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001816:	4a58      	ldr	r2, [pc, #352]	@ (8001978 <menu+0x58c>)
 8001818:	2101      	movs	r1, #1
 800181a:	2002      	movs	r0, #2
 800181c:	f007 f922 	bl	8008a64 <lcd_print>
			lcd_print(2, 15, "  ");
 8001820:	4a49      	ldr	r2, [pc, #292]	@ (8001948 <menu+0x55c>)
 8001822:	210f      	movs	r1, #15
 8001824:	2002      	movs	r0, #2
 8001826:	f007 f91d 	bl	8008a64 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800182a:	4b54      	ldr	r3, [pc, #336]	@ (800197c <menu+0x590>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	220a      	movs	r2, #10
 8001830:	4943      	ldr	r1, [pc, #268]	@ (8001940 <menu+0x554>)
 8001832:	4618      	mov	r0, r3
 8001834:	f00b fc6c 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 8001838:	4a41      	ldr	r2, [pc, #260]	@ (8001940 <menu+0x554>)
 800183a:	210e      	movs	r1, #14
 800183c:	2002      	movs	r0, #2
 800183e:	f007 f911 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001842:	4b3b      	ldr	r3, [pc, #236]	@ (8001930 <menu+0x544>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b08      	cmp	r3, #8
 8001848:	d115      	bne.n	8001876 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 800184a:	4a4d      	ldr	r2, [pc, #308]	@ (8001980 <menu+0x594>)
 800184c:	2101      	movs	r1, #1
 800184e:	2002      	movs	r0, #2
 8001850:	f007 f908 	bl	8008a64 <lcd_print>
			lcd_print(2, 15, "  ");
 8001854:	4a3c      	ldr	r2, [pc, #240]	@ (8001948 <menu+0x55c>)
 8001856:	210f      	movs	r1, #15
 8001858:	2002      	movs	r0, #2
 800185a:	f007 f903 	bl	8008a64 <lcd_print>
			itoa(hataKayit9, snum, 10);
 800185e:	4b49      	ldr	r3, [pc, #292]	@ (8001984 <menu+0x598>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	220a      	movs	r2, #10
 8001864:	4936      	ldr	r1, [pc, #216]	@ (8001940 <menu+0x554>)
 8001866:	4618      	mov	r0, r3
 8001868:	f00b fc52 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 800186c:	4a34      	ldr	r2, [pc, #208]	@ (8001940 <menu+0x554>)
 800186e:	210e      	movs	r1, #14
 8001870:	2002      	movs	r0, #2
 8001872:	f007 f8f7 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001876:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <menu+0x544>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b09      	cmp	r3, #9
 800187c:	d115      	bne.n	80018aa <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 800187e:	4a42      	ldr	r2, [pc, #264]	@ (8001988 <menu+0x59c>)
 8001880:	2101      	movs	r1, #1
 8001882:	2002      	movs	r0, #2
 8001884:	f007 f8ee 	bl	8008a64 <lcd_print>
			lcd_print(2, 16, " ");
 8001888:	4a40      	ldr	r2, [pc, #256]	@ (800198c <menu+0x5a0>)
 800188a:	2110      	movs	r1, #16
 800188c:	2002      	movs	r0, #2
 800188e:	f007 f8e9 	bl	8008a64 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001892:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <menu+0x5a4>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	220a      	movs	r2, #10
 8001898:	4929      	ldr	r1, [pc, #164]	@ (8001940 <menu+0x554>)
 800189a:	4618      	mov	r0, r3
 800189c:	f00b fc38 	bl	800d110 <itoa>
			lcd_print(2, 15, snum);
 80018a0:	4a27      	ldr	r2, [pc, #156]	@ (8001940 <menu+0x554>)
 80018a2:	210f      	movs	r1, #15
 80018a4:	2002      	movs	r0, #2
 80018a6:	f007 f8dd 	bl	8008a64 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <menu+0x544>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b0a      	cmp	r3, #10
 80018b0:	d104      	bne.n	80018bc <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 80018b2:	4a38      	ldr	r2, [pc, #224]	@ (8001994 <menu+0x5a8>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	2002      	movs	r0, #2
 80018b8:	f007 f8d4 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018bc:	2102      	movs	r1, #2
 80018be:	4836      	ldr	r0, [pc, #216]	@ (8001998 <menu+0x5ac>)
 80018c0:	f008 fbfa 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d119      	bne.n	80018fe <menu+0x512>
 80018ca:	4b34      	ldr	r3, [pc, #208]	@ (800199c <menu+0x5b0>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f083 0301 	eor.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d012      	beq.n	80018fe <menu+0x512>
 80018d8:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <menu+0x5b4>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10e      	bne.n	80018fe <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <menu+0x544>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <menu+0x544>)
 80018ea:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <menu+0x544>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b0a      	cmp	r3, #10
 80018f2:	d902      	bls.n	80018fa <menu+0x50e>
				hataGostermeSirasi = 0;
 80018f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <menu+0x544>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018fa:	f002 faa5 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018fe:	2104      	movs	r1, #4
 8001900:	4825      	ldr	r0, [pc, #148]	@ (8001998 <menu+0x5ac>)
 8001902:	f008 fbd9 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d15e      	bne.n	80019ca <menu+0x5de>
 800190c:	4b23      	ldr	r3, [pc, #140]	@ (800199c <menu+0x5b0>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d057      	beq.n	80019ca <menu+0x5de>
 800191a:	e043      	b.n	80019a4 <menu+0x5b8>
 800191c:	200010c4 	.word	0x200010c4
 8001920:	200010e3 	.word	0x200010e3
 8001924:	20001224 	.word	0x20001224
 8001928:	20001238 	.word	0x20001238
 800192c:	2000124c 	.word	0x2000124c
 8001930:	200010c6 	.word	0x200010c6
 8001934:	20001260 	.word	0x20001260
 8001938:	0800de18 	.word	0x0800de18
 800193c:	200010e6 	.word	0x200010e6
 8001940:	20001060 	.word	0x20001060
 8001944:	20001274 	.word	0x20001274
 8001948:	0800de1c 	.word	0x0800de1c
 800194c:	200010e7 	.word	0x200010e7
 8001950:	20001288 	.word	0x20001288
 8001954:	200010e8 	.word	0x200010e8
 8001958:	2000129c 	.word	0x2000129c
 800195c:	200010e9 	.word	0x200010e9
 8001960:	200012b0 	.word	0x200012b0
 8001964:	200010ea 	.word	0x200010ea
 8001968:	200012c4 	.word	0x200012c4
 800196c:	200010eb 	.word	0x200010eb
 8001970:	200012d8 	.word	0x200012d8
 8001974:	200010ec 	.word	0x200010ec
 8001978:	200012ec 	.word	0x200012ec
 800197c:	200010ed 	.word	0x200010ed
 8001980:	20001300 	.word	0x20001300
 8001984:	200010ee 	.word	0x200010ee
 8001988:	20001314 	.word	0x20001314
 800198c:	0800de20 	.word	0x0800de20
 8001990:	200010ef 	.word	0x200010ef
 8001994:	20001328 	.word	0x20001328
 8001998:	40010800 	.word	0x40010800
 800199c:	200010f3 	.word	0x200010f3
 80019a0:	200010d3 	.word	0x200010d3
 80019a4:	4b8a      	ldr	r3, [pc, #552]	@ (8001bd0 <menu+0x7e4>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10e      	bne.n	80019ca <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80019ac:	4b89      	ldr	r3, [pc, #548]	@ (8001bd4 <menu+0x7e8>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b87      	ldr	r3, [pc, #540]	@ (8001bd4 <menu+0x7e8>)
 80019b6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80019b8:	4b86      	ldr	r3, [pc, #536]	@ (8001bd4 <menu+0x7e8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b0b      	cmp	r3, #11
 80019be:	d902      	bls.n	80019c6 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 80019c0:	4b84      	ldr	r3, [pc, #528]	@ (8001bd4 <menu+0x7e8>)
 80019c2:	220a      	movs	r2, #10
 80019c4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80019c6:	f002 fa3f 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80019ca:	2108      	movs	r1, #8
 80019cc:	4882      	ldr	r0, [pc, #520]	@ (8001bd8 <menu+0x7ec>)
 80019ce:	f008 fb73 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d153      	bne.n	8001a80 <menu+0x694>
 80019d8:	4b80      	ldr	r3, [pc, #512]	@ (8001bdc <menu+0x7f0>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	f083 0301 	eor.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d04c      	beq.n	8001a80 <menu+0x694>
 80019e6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bd4 <menu+0x7e8>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b0a      	cmp	r3, #10
 80019ec:	d148      	bne.n	8001a80 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 80019ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001be0 <menu+0x7f4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	4b7b      	ldr	r3, [pc, #492]	@ (8001be4 <menu+0x7f8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80019fc:	4b7a      	ldr	r3, [pc, #488]	@ (8001be8 <menu+0x7fc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	4b78      	ldr	r3, [pc, #480]	@ (8001be4 <menu+0x7f8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001a0a:	4b78      	ldr	r3, [pc, #480]	@ (8001bec <menu+0x800>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	4b74      	ldr	r3, [pc, #464]	@ (8001be4 <menu+0x7f8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001a18:	4b75      	ldr	r3, [pc, #468]	@ (8001bf0 <menu+0x804>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	4b71      	ldr	r3, [pc, #452]	@ (8001be4 <menu+0x7f8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001a26:	4b73      	ldr	r3, [pc, #460]	@ (8001bf4 <menu+0x808>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8001be4 <menu+0x7f8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001a34:	4b70      	ldr	r3, [pc, #448]	@ (8001bf8 <menu+0x80c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001be4 <menu+0x7f8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001a42:	4b6e      	ldr	r3, [pc, #440]	@ (8001bfc <menu+0x810>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	4b66      	ldr	r3, [pc, #408]	@ (8001be4 <menu+0x7f8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001a50:	4b6b      	ldr	r3, [pc, #428]	@ (8001c00 <menu+0x814>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	4b63      	ldr	r3, [pc, #396]	@ (8001be4 <menu+0x7f8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001a5e:	4b69      	ldr	r3, [pc, #420]	@ (8001c04 <menu+0x818>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	4b5f      	ldr	r3, [pc, #380]	@ (8001be4 <menu+0x7f8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001a6c:	4b66      	ldr	r3, [pc, #408]	@ (8001c08 <menu+0x81c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	4b5c      	ldr	r3, [pc, #368]	@ (8001be4 <menu+0x7f8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001a7a:	4b64      	ldr	r3, [pc, #400]	@ (8001c0c <menu+0x820>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001a80:	4b63      	ldr	r3, [pc, #396]	@ (8001c10 <menu+0x824>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	f040 808e 	bne.w	8001ba6 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001a8a:	4a62      	ldr	r2, [pc, #392]	@ (8001c14 <menu+0x828>)
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f006 ffe8 	bl	8008a64 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001a94:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd0 <menu+0x7e4>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d003      	beq.n	8001aa4 <menu+0x6b8>
 8001a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd0 <menu+0x7e4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d104      	bne.n	8001aae <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001aa4:	4a5c      	ldr	r2, [pc, #368]	@ (8001c18 <menu+0x82c>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f006 ffdb 	bl	8008a64 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001aae:	4b5b      	ldr	r3, [pc, #364]	@ (8001c1c <menu+0x830>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <menu+0x6dc>
 8001ab6:	4b46      	ldr	r3, [pc, #280]	@ (8001bd0 <menu+0x7e4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d104      	bne.n	8001ac8 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001abe:	4a58      	ldr	r2, [pc, #352]	@ (8001c20 <menu+0x834>)
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f006 ffce 	bl	8008a64 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001ac8:	4b54      	ldr	r3, [pc, #336]	@ (8001c1c <menu+0x830>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d108      	bne.n	8001ae2 <menu+0x6f6>
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd0 <menu+0x7e4>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d104      	bne.n	8001ae2 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001ad8:	4a52      	ldr	r2, [pc, #328]	@ (8001c24 <menu+0x838>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	2002      	movs	r0, #2
 8001ade:	f006 ffc1 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	483c      	ldr	r0, [pc, #240]	@ (8001bd8 <menu+0x7ec>)
 8001ae6:	f008 fae7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d119      	bne.n	8001b24 <menu+0x738>
 8001af0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <menu+0x7f0>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f083 0301 	eor.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d012      	beq.n	8001b24 <menu+0x738>
 8001afe:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <menu+0x7e4>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10e      	bne.n	8001b24 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001b06:	4b45      	ldr	r3, [pc, #276]	@ (8001c1c <menu+0x830>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b43      	ldr	r3, [pc, #268]	@ (8001c1c <menu+0x830>)
 8001b10:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b12:	4b42      	ldr	r3, [pc, #264]	@ (8001c1c <menu+0x830>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d902      	bls.n	8001b20 <menu+0x734>
				calismaSekli = 0;
 8001b1a:	4b40      	ldr	r3, [pc, #256]	@ (8001c1c <menu+0x830>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b20:	f002 f992 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b24:	2104      	movs	r1, #4
 8001b26:	482c      	ldr	r0, [pc, #176]	@ (8001bd8 <menu+0x7ec>)
 8001b28:	f008 fac6 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d119      	bne.n	8001b66 <menu+0x77a>
 8001b32:	4b2a      	ldr	r3, [pc, #168]	@ (8001bdc <menu+0x7f0>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	f083 0301 	eor.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d012      	beq.n	8001b66 <menu+0x77a>
 8001b40:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <menu+0x7e4>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10e      	bne.n	8001b66 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001b48:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <menu+0x830>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <menu+0x830>)
 8001b52:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001b54:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <menu+0x830>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <menu+0x776>
	    		calismaSekli = 1;
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <menu+0x830>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b62:	f002 f971 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b66:	2108      	movs	r1, #8
 8001b68:	481b      	ldr	r0, [pc, #108]	@ (8001bd8 <menu+0x7ec>)
 8001b6a:	f008 faa5 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d118      	bne.n	8001ba6 <menu+0x7ba>
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <menu+0x7f0>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d011      	beq.n	8001ba6 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001b82:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <menu+0x830>)
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <menu+0x7f8>)
 8001b88:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001b8a:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <menu+0x830>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d106      	bne.n	8001ba0 <menu+0x7b4>
				altLimit = 1;
 8001b92:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <menu+0x83c>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <menu+0x83c>)
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <menu+0x7f8>)
 8001b9e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <menu+0x820>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <menu+0x824>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	f040 809c 	bne.w	8001ce8 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c2c <menu+0x840>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f006 ff55 	bl	8008a64 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <menu+0x844>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d13a      	bne.n	8001c38 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c34 <menu+0x848>)
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f006 ff4c 	bl	8008a64 <lcd_print>
 8001bcc:	e03d      	b.n	8001c4a <menu+0x85e>
 8001bce:	bf00      	nop
 8001bd0:	200010d3 	.word	0x200010d3
 8001bd4:	200010c6 	.word	0x200010c6
 8001bd8:	40010800 	.word	0x40010800
 8001bdc:	200010f3 	.word	0x200010f3
 8001be0:	200010e6 	.word	0x200010e6
 8001be4:	20000ff0 	.word	0x20000ff0
 8001be8:	200010e7 	.word	0x200010e7
 8001bec:	200010e8 	.word	0x200010e8
 8001bf0:	200010e9 	.word	0x200010e9
 8001bf4:	200010ea 	.word	0x200010ea
 8001bf8:	200010eb 	.word	0x200010eb
 8001bfc:	200010ec 	.word	0x200010ec
 8001c00:	200010ed 	.word	0x200010ed
 8001c04:	200010ee 	.word	0x200010ee
 8001c08:	200010ef 	.word	0x200010ef
 8001c0c:	200010f0 	.word	0x200010f0
 8001c10:	200010c4 	.word	0x200010c4
 8001c14:	2000133c 	.word	0x2000133c
 8001c18:	20001350 	.word	0x20001350
 8001c1c:	200010c5 	.word	0x200010c5
 8001c20:	20001364 	.word	0x20001364
 8001c24:	20001378 	.word	0x20001378
 8001c28:	200010ca 	.word	0x200010ca
 8001c2c:	2000138c 	.word	0x2000138c
 8001c30:	200010c8 	.word	0x200010c8
 8001c34:	200013a0 	.word	0x200013a0
		} else if(emniyetCercevesi == 1) {
 8001c38:	4b6b      	ldr	r3, [pc, #428]	@ (8001de8 <menu+0x9fc>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d104      	bne.n	8001c4a <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001c40:	4a6a      	ldr	r2, [pc, #424]	@ (8001dec <menu+0xa00>)
 8001c42:	2101      	movs	r1, #1
 8001c44:	2002      	movs	r0, #2
 8001c46:	f006 ff0d 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	4868      	ldr	r0, [pc, #416]	@ (8001df0 <menu+0xa04>)
 8001c4e:	f008 fa33 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d115      	bne.n	8001c84 <menu+0x898>
 8001c58:	4b66      	ldr	r3, [pc, #408]	@ (8001df4 <menu+0xa08>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f083 0301 	eor.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00e      	beq.n	8001c84 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001c66:	4b60      	ldr	r3, [pc, #384]	@ (8001de8 <menu+0x9fc>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b5e      	ldr	r3, [pc, #376]	@ (8001de8 <menu+0x9fc>)
 8001c70:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001c72:	4b5d      	ldr	r3, [pc, #372]	@ (8001de8 <menu+0x9fc>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d902      	bls.n	8001c80 <menu+0x894>
				emniyetCercevesi = 0;
 8001c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001de8 <menu+0x9fc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c80:	f002 f8e2 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c84:	2104      	movs	r1, #4
 8001c86:	485a      	ldr	r0, [pc, #360]	@ (8001df0 <menu+0xa04>)
 8001c88:	f008 fa16 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d115      	bne.n	8001cbe <menu+0x8d2>
 8001c92:	4b58      	ldr	r3, [pc, #352]	@ (8001df4 <menu+0xa08>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f083 0301 	eor.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00e      	beq.n	8001cbe <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001ca0:	4b51      	ldr	r3, [pc, #324]	@ (8001de8 <menu+0x9fc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8001de8 <menu+0x9fc>)
 8001caa:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001cac:	4b4e      	ldr	r3, [pc, #312]	@ (8001de8 <menu+0x9fc>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8001de8 <menu+0x9fc>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cba:	f002 f8c5 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001cbe:	2108      	movs	r1, #8
 8001cc0:	484b      	ldr	r0, [pc, #300]	@ (8001df0 <menu+0xa04>)
 8001cc2:	f008 f9f9 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d10d      	bne.n	8001ce8 <menu+0x8fc>
 8001ccc:	4b49      	ldr	r3, [pc, #292]	@ (8001df4 <menu+0xa08>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	f083 0301 	eor.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001cda:	4b43      	ldr	r3, [pc, #268]	@ (8001de8 <menu+0x9fc>)
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	4b46      	ldr	r3, [pc, #280]	@ (8001df8 <menu+0xa0c>)
 8001ce0:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001ce2:	4b46      	ldr	r3, [pc, #280]	@ (8001dfc <menu+0xa10>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ce8:	4b45      	ldr	r3, [pc, #276]	@ (8001e00 <menu+0xa14>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d166      	bne.n	8001dbe <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001cf0:	4a44      	ldr	r2, [pc, #272]	@ (8001e04 <menu+0xa18>)
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f006 feb5 	bl	8008a64 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001cfa:	4b43      	ldr	r3, [pc, #268]	@ (8001e08 <menu+0xa1c>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d105      	bne.n	8001d0e <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001d02:	4a42      	ldr	r2, [pc, #264]	@ (8001e0c <menu+0xa20>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	2002      	movs	r0, #2
 8001d08:	f006 feac 	bl	8008a64 <lcd_print>
 8001d0c:	e008      	b.n	8001d20 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e08 <menu+0xa1c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d104      	bne.n	8001d20 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001d16:	4a3e      	ldr	r2, [pc, #248]	@ (8001e10 <menu+0xa24>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f006 fea2 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d20:	2102      	movs	r1, #2
 8001d22:	4833      	ldr	r0, [pc, #204]	@ (8001df0 <menu+0xa04>)
 8001d24:	f008 f9c8 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d115      	bne.n	8001d5a <menu+0x96e>
 8001d2e:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <menu+0xa08>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00e      	beq.n	8001d5a <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001d3c:	4b32      	ldr	r3, [pc, #200]	@ (8001e08 <menu+0xa1c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b30      	ldr	r3, [pc, #192]	@ (8001e08 <menu+0xa1c>)
 8001d46:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001d48:	4b2f      	ldr	r3, [pc, #188]	@ (8001e08 <menu+0xa1c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d902      	bls.n	8001d56 <menu+0x96a>
				yavaslamaLimit = 0;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <menu+0xa1c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d56:	f002 f877 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4824      	ldr	r0, [pc, #144]	@ (8001df0 <menu+0xa04>)
 8001d5e:	f008 f9ab 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d115      	bne.n	8001d94 <menu+0x9a8>
 8001d68:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <menu+0xa08>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00e      	beq.n	8001d94 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <menu+0xa1c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <menu+0xa1c>)
 8001d80:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001d82:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <menu+0xa1c>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e08 <menu+0xa1c>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d90:	f002 f85a 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d94:	2108      	movs	r1, #8
 8001d96:	4816      	ldr	r0, [pc, #88]	@ (8001df0 <menu+0xa04>)
 8001d98:	f008 f98e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10d      	bne.n	8001dbe <menu+0x9d2>
 8001da2:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <menu+0xa08>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f083 0301 	eor.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <menu+0xa1c>)
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <menu+0xa0c>)
 8001db6:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <menu+0xa10>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001dbe:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <menu+0xa14>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	f040 80aa 	bne.w	8001f1c <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001dc8:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <menu+0xa28>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f006 fe49 	bl	8008a64 <lcd_print>

		if(altLimit == 0) {
 8001dd2:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <menu+0xa2c>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d120      	bne.n	8001e1c <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001dda:	4a0c      	ldr	r2, [pc, #48]	@ (8001e0c <menu+0xa20>)
 8001ddc:	2101      	movs	r1, #1
 8001dde:	2002      	movs	r0, #2
 8001de0:	f006 fe40 	bl	8008a64 <lcd_print>
 8001de4:	e023      	b.n	8001e2e <menu+0xa42>
 8001de6:	bf00      	nop
 8001de8:	200010c8 	.word	0x200010c8
 8001dec:	200000f0 	.word	0x200000f0
 8001df0:	40010800 	.word	0x40010800
 8001df4:	200010f3 	.word	0x200010f3
 8001df8:	20000ff0 	.word	0x20000ff0
 8001dfc:	200010f0 	.word	0x200010f0
 8001e00:	200010c4 	.word	0x200010c4
 8001e04:	200013c8 	.word	0x200013c8
 8001e08:	200010c9 	.word	0x200010c9
 8001e0c:	200013a0 	.word	0x200013a0
 8001e10:	200013b4 	.word	0x200013b4
 8001e14:	200013dc 	.word	0x200013dc
 8001e18:	200010ca 	.word	0x200010ca
		} else if(altLimit == 1) {
 8001e1c:	4b89      	ldr	r3, [pc, #548]	@ (8002044 <menu+0xc58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d104      	bne.n	8001e2e <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001e24:	4a88      	ldr	r2, [pc, #544]	@ (8002048 <menu+0xc5c>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f006 fe1b 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001e2e:	2102      	movs	r1, #2
 8001e30:	4886      	ldr	r0, [pc, #536]	@ (800204c <menu+0xc60>)
 8001e32:	f008 f941 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d119      	bne.n	8001e70 <menu+0xa84>
 8001e3c:	4b84      	ldr	r3, [pc, #528]	@ (8002050 <menu+0xc64>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <menu+0xa84>
 8001e4a:	4b82      	ldr	r3, [pc, #520]	@ (8002054 <menu+0xc68>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10e      	bne.n	8001e70 <menu+0xa84>
			altLimit = altLimit + 1;
 8001e52:	4b7c      	ldr	r3, [pc, #496]	@ (8002044 <menu+0xc58>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002044 <menu+0xc58>)
 8001e5c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001e5e:	4b79      	ldr	r3, [pc, #484]	@ (8002044 <menu+0xc58>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d902      	bls.n	8001e6c <menu+0xa80>
				altLimit = 0;
 8001e66:	4b77      	ldr	r3, [pc, #476]	@ (8002044 <menu+0xc58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e6c:	f001 ffec 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001e70:	2104      	movs	r1, #4
 8001e72:	4876      	ldr	r0, [pc, #472]	@ (800204c <menu+0xc60>)
 8001e74:	f008 f920 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d119      	bne.n	8001eb2 <menu+0xac6>
 8001e7e:	4b74      	ldr	r3, [pc, #464]	@ (8002050 <menu+0xc64>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d012      	beq.n	8001eb2 <menu+0xac6>
 8001e8c:	4b71      	ldr	r3, [pc, #452]	@ (8002054 <menu+0xc68>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10e      	bne.n	8001eb2 <menu+0xac6>
			altLimit = altLimit - 1;
 8001e94:	4b6b      	ldr	r3, [pc, #428]	@ (8002044 <menu+0xc58>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b69      	ldr	r3, [pc, #420]	@ (8002044 <menu+0xc58>)
 8001e9e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001ea0:	4b68      	ldr	r3, [pc, #416]	@ (8002044 <menu+0xc58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <menu+0xac2>
		   		altLimit = 1;
 8001ea8:	4b66      	ldr	r3, [pc, #408]	@ (8002044 <menu+0xc58>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001eae:	f001 ffcb 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb2:	2108      	movs	r1, #8
 8001eb4:	4865      	ldr	r0, [pc, #404]	@ (800204c <menu+0xc60>)
 8001eb6:	f008 f8ff 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d12d      	bne.n	8001f1c <menu+0xb30>
 8001ec0:	4b63      	ldr	r3, [pc, #396]	@ (8002050 <menu+0xc64>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d026      	beq.n	8001f1c <menu+0xb30>
			eepromData[5] = altLimit;
 8001ece:	4b5d      	ldr	r3, [pc, #372]	@ (8002044 <menu+0xc58>)
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	4b61      	ldr	r3, [pc, #388]	@ (8002058 <menu+0xc6c>)
 8001ed4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8002044 <menu+0xc58>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d110      	bne.n	8001f00 <menu+0xb14>
 8001ede:	4b5f      	ldr	r3, [pc, #380]	@ (800205c <menu+0xc70>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <menu+0xb02>
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800205c <menu+0xc70>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d108      	bne.n	8001f00 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001eee:	4b5b      	ldr	r3, [pc, #364]	@ (800205c <menu+0xc70>)
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001ef4:	4b59      	ldr	r3, [pc, #356]	@ (800205c <menu+0xc70>)
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	4b57      	ldr	r3, [pc, #348]	@ (8002058 <menu+0xc6c>)
 8001efa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001efe:	e00a      	b.n	8001f16 <menu+0xb2a>
			} else if(altLimit == 0) {
 8001f00:	4b50      	ldr	r3, [pc, #320]	@ (8002044 <menu+0xc58>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <menu+0xb2a>
				platformSilindirTipi = 0;
 8001f08:	4b55      	ldr	r3, [pc, #340]	@ (8002060 <menu+0xc74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001f0e:	4b54      	ldr	r3, [pc, #336]	@ (8002060 <menu+0xc74>)
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	4b51      	ldr	r3, [pc, #324]	@ (8002058 <menu+0xc6c>)
 8001f14:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001f16:	4b53      	ldr	r3, [pc, #332]	@ (8002064 <menu+0xc78>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001f1c:	4b52      	ldr	r3, [pc, #328]	@ (8002068 <menu+0xc7c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b06      	cmp	r3, #6
 8001f22:	d166      	bne.n	8001ff2 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001f24:	4a51      	ldr	r2, [pc, #324]	@ (800206c <menu+0xc80>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f006 fd9b 	bl	8008a64 <lcd_print>

		if(basincSalteri == 0) {
 8001f2e:	4b50      	ldr	r3, [pc, #320]	@ (8002070 <menu+0xc84>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001f36:	4a4f      	ldr	r2, [pc, #316]	@ (8002074 <menu+0xc88>)
 8001f38:	2101      	movs	r1, #1
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f006 fd92 	bl	8008a64 <lcd_print>
 8001f40:	e008      	b.n	8001f54 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001f42:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <menu+0xc84>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d104      	bne.n	8001f54 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002048 <menu+0xc5c>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	2002      	movs	r0, #2
 8001f50:	f006 fd88 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f54:	2102      	movs	r1, #2
 8001f56:	483d      	ldr	r0, [pc, #244]	@ (800204c <menu+0xc60>)
 8001f58:	f008 f8ae 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d115      	bne.n	8001f8e <menu+0xba2>
 8001f62:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <menu+0xc64>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	f083 0301 	eor.w	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00e      	beq.n	8001f8e <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001f70:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <menu+0xc84>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b3d      	ldr	r3, [pc, #244]	@ (8002070 <menu+0xc84>)
 8001f7a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <menu+0xc84>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d902      	bls.n	8001f8a <menu+0xb9e>
				basincSalteri = 0;
 8001f84:	4b3a      	ldr	r3, [pc, #232]	@ (8002070 <menu+0xc84>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f8a:	f001 ff5d 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f8e:	2104      	movs	r1, #4
 8001f90:	482e      	ldr	r0, [pc, #184]	@ (800204c <menu+0xc60>)
 8001f92:	f008 f891 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d115      	bne.n	8001fc8 <menu+0xbdc>
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002050 <menu+0xc64>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f083 0301 	eor.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00e      	beq.n	8001fc8 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001faa:	4b31      	ldr	r3, [pc, #196]	@ (8002070 <menu+0xc84>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002070 <menu+0xc84>)
 8001fb4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <menu+0xc84>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <menu+0xbd8>
		   		basincSalteri = 1;
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002070 <menu+0xc84>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fc4:	f001 ff40 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fc8:	2108      	movs	r1, #8
 8001fca:	4820      	ldr	r0, [pc, #128]	@ (800204c <menu+0xc60>)
 8001fcc:	f008 f874 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10d      	bne.n	8001ff2 <menu+0xc06>
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <menu+0xc64>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	f083 0301 	eor.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <menu+0xc84>)
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <menu+0xc6c>)
 8001fea:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <menu+0xc78>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <menu+0xc7c>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b07      	cmp	r3, #7
 8001ff8:	f040 80a9 	bne.w	800214e <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8002078 <menu+0xc8c>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	2001      	movs	r0, #1
 8002002:	f006 fd2f 	bl	8008a64 <lcd_print>

		if(kapiSecimleri == 0) {
 8002006:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <menu+0xc90>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 800200e:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <menu+0xc88>)
 8002010:	2101      	movs	r1, #1
 8002012:	2002      	movs	r0, #2
 8002014:	f006 fd26 	bl	8008a64 <lcd_print>
 8002018:	e03f      	b.n	800209a <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <menu+0xc90>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8002022:	4a17      	ldr	r2, [pc, #92]	@ (8002080 <menu+0xc94>)
 8002024:	2101      	movs	r1, #1
 8002026:	2002      	movs	r0, #2
 8002028:	f006 fd1c 	bl	8008a64 <lcd_print>
 800202c:	e035      	b.n	800209a <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <menu+0xc90>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d128      	bne.n	8002088 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8002036:	4a13      	ldr	r2, [pc, #76]	@ (8002084 <menu+0xc98>)
 8002038:	2101      	movs	r1, #1
 800203a:	2002      	movs	r0, #2
 800203c:	f006 fd12 	bl	8008a64 <lcd_print>
 8002040:	e02b      	b.n	800209a <menu+0xcae>
 8002042:	bf00      	nop
 8002044:	200010ca 	.word	0x200010ca
 8002048:	200013b4 	.word	0x200013b4
 800204c:	40010800 	.word	0x40010800
 8002050:	200010f3 	.word	0x200010f3
 8002054:	200010c5 	.word	0x200010c5
 8002058:	20000ff0 	.word	0x20000ff0
 800205c:	200010d1 	.word	0x200010d1
 8002060:	200010d7 	.word	0x200010d7
 8002064:	200010f0 	.word	0x200010f0
 8002068:	200010c4 	.word	0x200010c4
 800206c:	200013f0 	.word	0x200013f0
 8002070:	200010cb 	.word	0x200010cb
 8002074:	200013a0 	.word	0x200013a0
 8002078:	20001404 	.word	0x20001404
 800207c:	200010cc 	.word	0x200010cc
 8002080:	20001418 	.word	0x20001418
 8002084:	2000142c 	.word	0x2000142c
		} else if(kapiSecimleri == 3) {
 8002088:	4b76      	ldr	r3, [pc, #472]	@ (8002264 <menu+0xe78>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d104      	bne.n	800209a <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8002090:	4a75      	ldr	r2, [pc, #468]	@ (8002268 <menu+0xe7c>)
 8002092:	2101      	movs	r1, #1
 8002094:	2002      	movs	r0, #2
 8002096:	f006 fce5 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800209a:	2102      	movs	r1, #2
 800209c:	4873      	ldr	r0, [pc, #460]	@ (800226c <menu+0xe80>)
 800209e:	f008 f80b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d115      	bne.n	80020d4 <menu+0xce8>
 80020a8:	4b71      	ldr	r3, [pc, #452]	@ (8002270 <menu+0xe84>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00e      	beq.n	80020d4 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 80020b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002264 <menu+0xe78>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b69      	ldr	r3, [pc, #420]	@ (8002264 <menu+0xe78>)
 80020c0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80020c2:	4b68      	ldr	r3, [pc, #416]	@ (8002264 <menu+0xe78>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d902      	bls.n	80020d0 <menu+0xce4>
				kapiSecimleri = 0;
 80020ca:	4b66      	ldr	r3, [pc, #408]	@ (8002264 <menu+0xe78>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020d0:	f001 feba 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020d4:	2104      	movs	r1, #4
 80020d6:	4865      	ldr	r0, [pc, #404]	@ (800226c <menu+0xe80>)
 80020d8:	f007 ffee 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d115      	bne.n	800210e <menu+0xd22>
 80020e2:	4b63      	ldr	r3, [pc, #396]	@ (8002270 <menu+0xe84>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00e      	beq.n	800210e <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 80020f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002264 <menu+0xe78>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b5a      	ldr	r3, [pc, #360]	@ (8002264 <menu+0xe78>)
 80020fa:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80020fc:	4b59      	ldr	r3, [pc, #356]	@ (8002264 <menu+0xe78>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d902      	bls.n	800210a <menu+0xd1e>
		   		kapiSecimleri = 3;
 8002104:	4b57      	ldr	r3, [pc, #348]	@ (8002264 <menu+0xe78>)
 8002106:	2203      	movs	r2, #3
 8002108:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800210a:	f001 fe9d 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800210e:	2108      	movs	r1, #8
 8002110:	4856      	ldr	r0, [pc, #344]	@ (800226c <menu+0xe80>)
 8002112:	f007 ffd1 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002116:	4603      	mov	r3, r0
 8002118:	2b01      	cmp	r3, #1
 800211a:	d118      	bne.n	800214e <menu+0xd62>
 800211c:	4b54      	ldr	r3, [pc, #336]	@ (8002270 <menu+0xe84>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d011      	beq.n	800214e <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 800212a:	4b4e      	ldr	r3, [pc, #312]	@ (8002264 <menu+0xe78>)
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	4b51      	ldr	r3, [pc, #324]	@ (8002274 <menu+0xe88>)
 8002130:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002132:	4b4c      	ldr	r3, [pc, #304]	@ (8002264 <menu+0xe78>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <menu+0xd5c>
				altLimit = 1;
 800213a:	4b4f      	ldr	r3, [pc, #316]	@ (8002278 <menu+0xe8c>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002140:	4b4d      	ldr	r3, [pc, #308]	@ (8002278 <menu+0xe8c>)
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	4b4b      	ldr	r3, [pc, #300]	@ (8002274 <menu+0xe88>)
 8002146:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002148:	4b4c      	ldr	r3, [pc, #304]	@ (800227c <menu+0xe90>)
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800214e:	4b4c      	ldr	r3, [pc, #304]	@ (8002280 <menu+0xe94>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b08      	cmp	r3, #8
 8002154:	d167      	bne.n	8002226 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8002156:	4a4b      	ldr	r2, [pc, #300]	@ (8002284 <menu+0xe98>)
 8002158:	2101      	movs	r1, #1
 800215a:	2001      	movs	r0, #1
 800215c:	f006 fc82 	bl	8008a64 <lcd_print>

		if(kapiAcTipi == 0) {
 8002160:	4b49      	ldr	r3, [pc, #292]	@ (8002288 <menu+0xe9c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002168:	4a48      	ldr	r2, [pc, #288]	@ (800228c <menu+0xea0>)
 800216a:	2101      	movs	r1, #1
 800216c:	2002      	movs	r0, #2
 800216e:	f006 fc79 	bl	8008a64 <lcd_print>
 8002172:	e008      	b.n	8002186 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002174:	4b44      	ldr	r3, [pc, #272]	@ (8002288 <menu+0xe9c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d104      	bne.n	8002186 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 800217c:	4a44      	ldr	r2, [pc, #272]	@ (8002290 <menu+0xea4>)
 800217e:	2101      	movs	r1, #1
 8002180:	2002      	movs	r0, #2
 8002182:	f006 fc6f 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002186:	2102      	movs	r1, #2
 8002188:	4838      	ldr	r0, [pc, #224]	@ (800226c <menu+0xe80>)
 800218a:	f007 ff95 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800218e:	4603      	mov	r3, r0
 8002190:	2b01      	cmp	r3, #1
 8002192:	d115      	bne.n	80021c0 <menu+0xdd4>
 8002194:	4b36      	ldr	r3, [pc, #216]	@ (8002270 <menu+0xe84>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f083 0301 	eor.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00e      	beq.n	80021c0 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 80021a2:	4b39      	ldr	r3, [pc, #228]	@ (8002288 <menu+0xe9c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b37      	ldr	r3, [pc, #220]	@ (8002288 <menu+0xe9c>)
 80021ac:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80021ae:	4b36      	ldr	r3, [pc, #216]	@ (8002288 <menu+0xe9c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d902      	bls.n	80021bc <menu+0xdd0>
				kapiAcTipi = 0;
 80021b6:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <menu+0xe9c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021bc:	f001 fe44 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021c0:	2104      	movs	r1, #4
 80021c2:	482a      	ldr	r0, [pc, #168]	@ (800226c <menu+0xe80>)
 80021c4:	f007 ff78 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d115      	bne.n	80021fa <menu+0xe0e>
 80021ce:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <menu+0xe84>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f083 0301 	eor.w	r3, r3, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00e      	beq.n	80021fa <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 80021dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002288 <menu+0xe9c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b28      	ldr	r3, [pc, #160]	@ (8002288 <menu+0xe9c>)
 80021e6:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <menu+0xe9c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <menu+0xe0a>
		   		kapiAcTipi = 1;
 80021f0:	4b25      	ldr	r3, [pc, #148]	@ (8002288 <menu+0xe9c>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021f6:	f001 fe27 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021fa:	2108      	movs	r1, #8
 80021fc:	481b      	ldr	r0, [pc, #108]	@ (800226c <menu+0xe80>)
 80021fe:	f007 ff5b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002202:	4603      	mov	r3, r0
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10e      	bne.n	8002226 <menu+0xe3a>
 8002208:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <menu+0xe84>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	f083 0301 	eor.w	r3, r3, #1
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8002216:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <menu+0xe9c>)
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <menu+0xe88>)
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002220:	4b16      	ldr	r3, [pc, #88]	@ (800227c <menu+0xe90>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002226:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <menu+0xe94>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b09      	cmp	r3, #9
 800222c:	f040 8092 	bne.w	8002354 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002230:	4a18      	ldr	r2, [pc, #96]	@ (8002294 <menu+0xea8>)
 8002232:	2101      	movs	r1, #1
 8002234:	2001      	movs	r0, #1
 8002236:	f006 fc15 	bl	8008a64 <lcd_print>

		if(kapi1Tip == 0) {
 800223a:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <menu+0xeac>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8002242:	4a16      	ldr	r2, [pc, #88]	@ (800229c <menu+0xeb0>)
 8002244:	2101      	movs	r1, #1
 8002246:	2002      	movs	r0, #2
 8002248:	f006 fc0c 	bl	8008a64 <lcd_print>
 800224c:	e033      	b.n	80022b6 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <menu+0xeac>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d126      	bne.n	80022a4 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <menu+0xeb4>)
 8002258:	2101      	movs	r1, #1
 800225a:	2002      	movs	r0, #2
 800225c:	f006 fc02 	bl	8008a64 <lcd_print>
 8002260:	e029      	b.n	80022b6 <menu+0xeca>
 8002262:	bf00      	nop
 8002264:	200010cc 	.word	0x200010cc
 8002268:	20001440 	.word	0x20001440
 800226c:	40010800 	.word	0x40010800
 8002270:	200010f3 	.word	0x200010f3
 8002274:	20000ff0 	.word	0x20000ff0
 8002278:	200010ca 	.word	0x200010ca
 800227c:	200010f0 	.word	0x200010f0
 8002280:	200010c4 	.word	0x200010c4
 8002284:	20001454 	.word	0x20001454
 8002288:	200010d0 	.word	0x200010d0
 800228c:	20001468 	.word	0x20001468
 8002290:	2000147c 	.word	0x2000147c
 8002294:	20001490 	.word	0x20001490
 8002298:	200010cd 	.word	0x200010cd
 800229c:	20000104 	.word	0x20000104
 80022a0:	200014a4 	.word	0x200014a4
		} else if(kapi1Tip == 2) {
 80022a4:	4b73      	ldr	r3, [pc, #460]	@ (8002474 <menu+0x1088>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d104      	bne.n	80022b6 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 80022ac:	4a72      	ldr	r2, [pc, #456]	@ (8002478 <menu+0x108c>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	2002      	movs	r0, #2
 80022b2:	f006 fbd7 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022b6:	2102      	movs	r1, #2
 80022b8:	4870      	ldr	r0, [pc, #448]	@ (800247c <menu+0x1090>)
 80022ba:	f007 fefd 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d115      	bne.n	80022f0 <menu+0xf04>
 80022c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002480 <menu+0x1094>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	f083 0301 	eor.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00e      	beq.n	80022f0 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 80022d2:	4b68      	ldr	r3, [pc, #416]	@ (8002474 <menu+0x1088>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4b66      	ldr	r3, [pc, #408]	@ (8002474 <menu+0x1088>)
 80022dc:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80022de:	4b65      	ldr	r3, [pc, #404]	@ (8002474 <menu+0x1088>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d902      	bls.n	80022ec <menu+0xf00>
				kapi1Tip = 0;
 80022e6:	4b63      	ldr	r3, [pc, #396]	@ (8002474 <menu+0x1088>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022ec:	f001 fdac 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022f0:	2104      	movs	r1, #4
 80022f2:	4862      	ldr	r0, [pc, #392]	@ (800247c <menu+0x1090>)
 80022f4:	f007 fee0 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d115      	bne.n	800232a <menu+0xf3e>
 80022fe:	4b60      	ldr	r3, [pc, #384]	@ (8002480 <menu+0x1094>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	f083 0301 	eor.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 800230c:	4b59      	ldr	r3, [pc, #356]	@ (8002474 <menu+0x1088>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3b01      	subs	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b57      	ldr	r3, [pc, #348]	@ (8002474 <menu+0x1088>)
 8002316:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002318:	4b56      	ldr	r3, [pc, #344]	@ (8002474 <menu+0x1088>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d902      	bls.n	8002326 <menu+0xf3a>
		   		kapi1Tip = 2;
 8002320:	4b54      	ldr	r3, [pc, #336]	@ (8002474 <menu+0x1088>)
 8002322:	2202      	movs	r2, #2
 8002324:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002326:	f001 fd8f 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800232a:	2108      	movs	r1, #8
 800232c:	4853      	ldr	r0, [pc, #332]	@ (800247c <menu+0x1090>)
 800232e:	f007 fec3 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002332:	4603      	mov	r3, r0
 8002334:	2b01      	cmp	r3, #1
 8002336:	d10d      	bne.n	8002354 <menu+0xf68>
 8002338:	4b51      	ldr	r3, [pc, #324]	@ (8002480 <menu+0x1094>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8002346:	4b4b      	ldr	r3, [pc, #300]	@ (8002474 <menu+0x1088>)
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <menu+0x1098>)
 800234c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800234e:	4b4e      	ldr	r3, [pc, #312]	@ (8002488 <menu+0x109c>)
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002354:	4b4d      	ldr	r3, [pc, #308]	@ (800248c <menu+0x10a0>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b0a      	cmp	r3, #10
 800235a:	d16c      	bne.n	8002436 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 800235c:	4a4c      	ldr	r2, [pc, #304]	@ (8002490 <menu+0x10a4>)
 800235e:	2101      	movs	r1, #1
 8002360:	2001      	movs	r0, #1
 8002362:	f006 fb7f 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002366:	4a4b      	ldr	r2, [pc, #300]	@ (8002494 <menu+0x10a8>)
 8002368:	2101      	movs	r1, #1
 800236a:	2002      	movs	r0, #2
 800236c:	f006 fb7a 	bl	8008a64 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002370:	4b49      	ldr	r3, [pc, #292]	@ (8002498 <menu+0x10ac>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	220a      	movs	r2, #10
 8002376:	4949      	ldr	r1, [pc, #292]	@ (800249c <menu+0x10b0>)
 8002378:	4618      	mov	r0, r3
 800237a:	f00a fec9 	bl	800d110 <itoa>
		lcd_print(2,16,snum);
 800237e:	4a47      	ldr	r2, [pc, #284]	@ (800249c <menu+0x10b0>)
 8002380:	2110      	movs	r1, #16
 8002382:	2002      	movs	r0, #2
 8002384:	f006 fb6e 	bl	8008a64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002388:	2102      	movs	r1, #2
 800238a:	483c      	ldr	r0, [pc, #240]	@ (800247c <menu+0x1090>)
 800238c:	f007 fe94 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002390:	4603      	mov	r3, r0
 8002392:	2b01      	cmp	r3, #1
 8002394:	d119      	bne.n	80023ca <menu+0xfde>
 8002396:	4b3a      	ldr	r3, [pc, #232]	@ (8002480 <menu+0x1094>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	f083 0301 	eor.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d012      	beq.n	80023ca <menu+0xfde>
 80023a4:	4b33      	ldr	r3, [pc, #204]	@ (8002474 <menu+0x1088>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10e      	bne.n	80023ca <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 80023ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002498 <menu+0x10ac>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b38      	ldr	r3, [pc, #224]	@ (8002498 <menu+0x10ac>)
 80023b6:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80023b8:	4b37      	ldr	r3, [pc, #220]	@ (8002498 <menu+0x10ac>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d902      	bls.n	80023c6 <menu+0xfda>
				kapi1AcSure = 0;
 80023c0:	4b35      	ldr	r3, [pc, #212]	@ (8002498 <menu+0x10ac>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023c6:	f001 fd3f 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80023ca:	2104      	movs	r1, #4
 80023cc:	482b      	ldr	r0, [pc, #172]	@ (800247c <menu+0x1090>)
 80023ce:	f007 fe73 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d119      	bne.n	800240c <menu+0x1020>
 80023d8:	4b29      	ldr	r3, [pc, #164]	@ (8002480 <menu+0x1094>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	f083 0301 	eor.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d012      	beq.n	800240c <menu+0x1020>
 80023e6:	4b23      	ldr	r3, [pc, #140]	@ (8002474 <menu+0x1088>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10e      	bne.n	800240c <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80023ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <menu+0x10ac>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <menu+0x10ac>)
 80023f8:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80023fa:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <menu+0x10ac>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <menu+0x101c>
		   		kapi1AcSure = 5;
 8002402:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <menu+0x10ac>)
 8002404:	2205      	movs	r2, #5
 8002406:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002408:	f001 fd1e 	bl	8003e48 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800240c:	2108      	movs	r1, #8
 800240e:	481b      	ldr	r0, [pc, #108]	@ (800247c <menu+0x1090>)
 8002410:	f007 fe52 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10d      	bne.n	8002436 <menu+0x104a>
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <menu+0x1094>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	f083 0301 	eor.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002428:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <menu+0x10ac>)
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <menu+0x1098>)
 800242e:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002430:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <menu+0x109c>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <menu+0x10a0>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b0b      	cmp	r3, #11
 800243c:	f040 8090 	bne.w	8002560 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002440:	4a17      	ldr	r2, [pc, #92]	@ (80024a0 <menu+0x10b4>)
 8002442:	2101      	movs	r1, #1
 8002444:	2001      	movs	r0, #1
 8002446:	f006 fb0d 	bl	8008a64 <lcd_print>

		if(kapi2Tip == 0) {
 800244a:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <menu+0x10b8>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8002452:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <menu+0x10bc>)
 8002454:	2101      	movs	r1, #1
 8002456:	2002      	movs	r0, #2
 8002458:	f006 fb04 	bl	8008a64 <lcd_print>
 800245c:	e031      	b.n	80024c2 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <menu+0x10b8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d124      	bne.n	80024b0 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002466:	4a11      	ldr	r2, [pc, #68]	@ (80024ac <menu+0x10c0>)
 8002468:	2101      	movs	r1, #1
 800246a:	2002      	movs	r0, #2
 800246c:	f006 fafa 	bl	8008a64 <lcd_print>
 8002470:	e027      	b.n	80024c2 <menu+0x10d6>
 8002472:	bf00      	nop
 8002474:	200010cd 	.word	0x200010cd
 8002478:	20000118 	.word	0x20000118
 800247c:	40010800 	.word	0x40010800
 8002480:	200010f3 	.word	0x200010f3
 8002484:	20000ff0 	.word	0x20000ff0
 8002488:	200010f0 	.word	0x200010f0
 800248c:	200010c4 	.word	0x200010c4
 8002490:	200014b8 	.word	0x200014b8
 8002494:	200014cc 	.word	0x200014cc
 8002498:	200010dd 	.word	0x200010dd
 800249c:	20001060 	.word	0x20001060
 80024a0:	200014e0 	.word	0x200014e0
 80024a4:	200010ce 	.word	0x200010ce
 80024a8:	20000104 	.word	0x20000104
 80024ac:	200014a4 	.word	0x200014a4
		} else if(kapi2Tip == 2) {
 80024b0:	4b73      	ldr	r3, [pc, #460]	@ (8002680 <menu+0x1294>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d104      	bne.n	80024c2 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 80024b8:	4a72      	ldr	r2, [pc, #456]	@ (8002684 <menu+0x1298>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	2002      	movs	r0, #2
 80024be:	f006 fad1 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024c2:	2102      	movs	r1, #2
 80024c4:	4870      	ldr	r0, [pc, #448]	@ (8002688 <menu+0x129c>)
 80024c6:	f007 fdf7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d115      	bne.n	80024fc <menu+0x1110>
 80024d0:	4b6e      	ldr	r3, [pc, #440]	@ (800268c <menu+0x12a0>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	f083 0301 	eor.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00e      	beq.n	80024fc <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 80024de:	4b68      	ldr	r3, [pc, #416]	@ (8002680 <menu+0x1294>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b66      	ldr	r3, [pc, #408]	@ (8002680 <menu+0x1294>)
 80024e8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80024ea:	4b65      	ldr	r3, [pc, #404]	@ (8002680 <menu+0x1294>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d902      	bls.n	80024f8 <menu+0x110c>
				kapi2Tip = 0;
 80024f2:	4b63      	ldr	r3, [pc, #396]	@ (8002680 <menu+0x1294>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024f8:	f001 fca6 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024fc:	2104      	movs	r1, #4
 80024fe:	4862      	ldr	r0, [pc, #392]	@ (8002688 <menu+0x129c>)
 8002500:	f007 fdda 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002504:	4603      	mov	r3, r0
 8002506:	2b01      	cmp	r3, #1
 8002508:	d115      	bne.n	8002536 <menu+0x114a>
 800250a:	4b60      	ldr	r3, [pc, #384]	@ (800268c <menu+0x12a0>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	f083 0301 	eor.w	r3, r3, #1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00e      	beq.n	8002536 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002518:	4b59      	ldr	r3, [pc, #356]	@ (8002680 <menu+0x1294>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	3b01      	subs	r3, #1
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b57      	ldr	r3, [pc, #348]	@ (8002680 <menu+0x1294>)
 8002522:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002524:	4b56      	ldr	r3, [pc, #344]	@ (8002680 <menu+0x1294>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d902      	bls.n	8002532 <menu+0x1146>
		   		kapi2Tip = 2;
 800252c:	4b54      	ldr	r3, [pc, #336]	@ (8002680 <menu+0x1294>)
 800252e:	2202      	movs	r2, #2
 8002530:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002532:	f001 fc89 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002536:	2108      	movs	r1, #8
 8002538:	4853      	ldr	r0, [pc, #332]	@ (8002688 <menu+0x129c>)
 800253a:	f007 fdbd 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10d      	bne.n	8002560 <menu+0x1174>
 8002544:	4b51      	ldr	r3, [pc, #324]	@ (800268c <menu+0x12a0>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 8002552:	4b4b      	ldr	r3, [pc, #300]	@ (8002680 <menu+0x1294>)
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <menu+0x12a4>)
 8002558:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800255a:	4b4e      	ldr	r3, [pc, #312]	@ (8002694 <menu+0x12a8>)
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002560:	4b4d      	ldr	r3, [pc, #308]	@ (8002698 <menu+0x12ac>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d16c      	bne.n	8002642 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002568:	4a4c      	ldr	r2, [pc, #304]	@ (800269c <menu+0x12b0>)
 800256a:	2101      	movs	r1, #1
 800256c:	2001      	movs	r0, #1
 800256e:	f006 fa79 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002572:	4a4b      	ldr	r2, [pc, #300]	@ (80026a0 <menu+0x12b4>)
 8002574:	2101      	movs	r1, #1
 8002576:	2002      	movs	r0, #2
 8002578:	f006 fa74 	bl	8008a64 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 800257c:	4b49      	ldr	r3, [pc, #292]	@ (80026a4 <menu+0x12b8>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	220a      	movs	r2, #10
 8002582:	4949      	ldr	r1, [pc, #292]	@ (80026a8 <menu+0x12bc>)
 8002584:	4618      	mov	r0, r3
 8002586:	f00a fdc3 	bl	800d110 <itoa>
		lcd_print(2,16,snum);
 800258a:	4a47      	ldr	r2, [pc, #284]	@ (80026a8 <menu+0x12bc>)
 800258c:	2110      	movs	r1, #16
 800258e:	2002      	movs	r0, #2
 8002590:	f006 fa68 	bl	8008a64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002594:	2102      	movs	r1, #2
 8002596:	483c      	ldr	r0, [pc, #240]	@ (8002688 <menu+0x129c>)
 8002598:	f007 fd8e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d119      	bne.n	80025d6 <menu+0x11ea>
 80025a2:	4b3a      	ldr	r3, [pc, #232]	@ (800268c <menu+0x12a0>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	f083 0301 	eor.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d012      	beq.n	80025d6 <menu+0x11ea>
 80025b0:	4b33      	ldr	r3, [pc, #204]	@ (8002680 <menu+0x1294>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10e      	bne.n	80025d6 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 80025b8:	4b3a      	ldr	r3, [pc, #232]	@ (80026a4 <menu+0x12b8>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	4b38      	ldr	r3, [pc, #224]	@ (80026a4 <menu+0x12b8>)
 80025c2:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80025c4:	4b37      	ldr	r3, [pc, #220]	@ (80026a4 <menu+0x12b8>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d902      	bls.n	80025d2 <menu+0x11e6>
				kapi2AcSure = 0;
 80025cc:	4b35      	ldr	r3, [pc, #212]	@ (80026a4 <menu+0x12b8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025d2:	f001 fc39 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80025d6:	2104      	movs	r1, #4
 80025d8:	482b      	ldr	r0, [pc, #172]	@ (8002688 <menu+0x129c>)
 80025da:	f007 fd6d 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d119      	bne.n	8002618 <menu+0x122c>
 80025e4:	4b29      	ldr	r3, [pc, #164]	@ (800268c <menu+0x12a0>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	f083 0301 	eor.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d012      	beq.n	8002618 <menu+0x122c>
 80025f2:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <menu+0x1294>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10e      	bne.n	8002618 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80025fa:	4b2a      	ldr	r3, [pc, #168]	@ (80026a4 <menu+0x12b8>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	3b01      	subs	r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b28      	ldr	r3, [pc, #160]	@ (80026a4 <menu+0x12b8>)
 8002604:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002606:	4b27      	ldr	r3, [pc, #156]	@ (80026a4 <menu+0x12b8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <menu+0x1228>
		   		kapi2AcSure = 5;
 800260e:	4b25      	ldr	r3, [pc, #148]	@ (80026a4 <menu+0x12b8>)
 8002610:	2205      	movs	r2, #5
 8002612:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002614:	f001 fc18 	bl	8003e48 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002618:	2108      	movs	r1, #8
 800261a:	481b      	ldr	r0, [pc, #108]	@ (8002688 <menu+0x129c>)
 800261c:	f007 fd4c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10d      	bne.n	8002642 <menu+0x1256>
 8002626:	4b19      	ldr	r3, [pc, #100]	@ (800268c <menu+0x12a0>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f083 0301 	eor.w	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <menu+0x12b8>)
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <menu+0x12a4>)
 800263a:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 800263c:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <menu+0x12a8>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <menu+0x12ac>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b0d      	cmp	r3, #13
 8002648:	f040 8090 	bne.w	800276c <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 800264c:	4a17      	ldr	r2, [pc, #92]	@ (80026ac <menu+0x12c0>)
 800264e:	2101      	movs	r1, #1
 8002650:	2001      	movs	r0, #1
 8002652:	f006 fa07 	bl	8008a64 <lcd_print>

		if(kapitablaTip == 0) {
 8002656:	4b16      	ldr	r3, [pc, #88]	@ (80026b0 <menu+0x12c4>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d105      	bne.n	800266a <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 800265e:	4a15      	ldr	r2, [pc, #84]	@ (80026b4 <menu+0x12c8>)
 8002660:	2101      	movs	r1, #1
 8002662:	2002      	movs	r0, #2
 8002664:	f006 f9fe 	bl	8008a64 <lcd_print>
 8002668:	e031      	b.n	80026ce <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <menu+0x12c4>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d124      	bne.n	80026bc <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 8002672:	4a11      	ldr	r2, [pc, #68]	@ (80026b8 <menu+0x12cc>)
 8002674:	2101      	movs	r1, #1
 8002676:	2002      	movs	r0, #2
 8002678:	f006 f9f4 	bl	8008a64 <lcd_print>
 800267c:	e027      	b.n	80026ce <menu+0x12e2>
 800267e:	bf00      	nop
 8002680:	200010ce 	.word	0x200010ce
 8002684:	20000118 	.word	0x20000118
 8002688:	40010800 	.word	0x40010800
 800268c:	200010f3 	.word	0x200010f3
 8002690:	20000ff0 	.word	0x20000ff0
 8002694:	200010f0 	.word	0x200010f0
 8002698:	200010c4 	.word	0x200010c4
 800269c:	200014f4 	.word	0x200014f4
 80026a0:	200014cc 	.word	0x200014cc
 80026a4:	200010de 	.word	0x200010de
 80026a8:	20001060 	.word	0x20001060
 80026ac:	20001508 	.word	0x20001508
 80026b0:	200010cf 	.word	0x200010cf
 80026b4:	20000104 	.word	0x20000104
 80026b8:	200014a4 	.word	0x200014a4
		} else if(kapitablaTip == 2) {
 80026bc:	4b3f      	ldr	r3, [pc, #252]	@ (80027bc <menu+0x13d0>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d104      	bne.n	80026ce <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 80026c4:	4a3e      	ldr	r2, [pc, #248]	@ (80027c0 <menu+0x13d4>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	2002      	movs	r0, #2
 80026ca:	f006 f9cb 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ce:	2102      	movs	r1, #2
 80026d0:	483c      	ldr	r0, [pc, #240]	@ (80027c4 <menu+0x13d8>)
 80026d2:	f007 fcf1 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d115      	bne.n	8002708 <menu+0x131c>
 80026dc:	4b3a      	ldr	r3, [pc, #232]	@ (80027c8 <menu+0x13dc>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f083 0301 	eor.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00e      	beq.n	8002708 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80026ea:	4b34      	ldr	r3, [pc, #208]	@ (80027bc <menu+0x13d0>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b32      	ldr	r3, [pc, #200]	@ (80027bc <menu+0x13d0>)
 80026f4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80026f6:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <menu+0x13d0>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d902      	bls.n	8002704 <menu+0x1318>
				kapitablaTip = 0;
 80026fe:	4b2f      	ldr	r3, [pc, #188]	@ (80027bc <menu+0x13d0>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002704:	f001 fba0 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002708:	2104      	movs	r1, #4
 800270a:	482e      	ldr	r0, [pc, #184]	@ (80027c4 <menu+0x13d8>)
 800270c:	f007 fcd4 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002710:	4603      	mov	r3, r0
 8002712:	2b01      	cmp	r3, #1
 8002714:	d115      	bne.n	8002742 <menu+0x1356>
 8002716:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <menu+0x13dc>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	f083 0301 	eor.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 8002724:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <menu+0x13d0>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	3b01      	subs	r3, #1
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b23      	ldr	r3, [pc, #140]	@ (80027bc <menu+0x13d0>)
 800272e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002730:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <menu+0x13d0>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d902      	bls.n	800273e <menu+0x1352>
		   		kapitablaTip = 2;
 8002738:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <menu+0x13d0>)
 800273a:	2202      	movs	r2, #2
 800273c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800273e:	f001 fb83 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002742:	2108      	movs	r1, #8
 8002744:	481f      	ldr	r0, [pc, #124]	@ (80027c4 <menu+0x13d8>)
 8002746:	f007 fcb7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10d      	bne.n	800276c <menu+0x1380>
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <menu+0x13dc>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	f083 0301 	eor.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <menu+0x1380>
			eepromData[12] = kapitablaTip;
 800275e:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <menu+0x13d0>)
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <menu+0x13e0>)
 8002764:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002766:	4b1a      	ldr	r3, [pc, #104]	@ (80027d0 <menu+0x13e4>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 800276c:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <menu+0x13e8>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b0e      	cmp	r3, #14
 8002772:	f040 80a3 	bne.w	80028bc <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002776:	4a18      	ldr	r2, [pc, #96]	@ (80027d8 <menu+0x13ec>)
 8002778:	2101      	movs	r1, #1
 800277a:	2001      	movs	r0, #1
 800277c:	f006 f972 	bl	8008a64 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002780:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <menu+0x13f0>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002788:	4a15      	ldr	r2, [pc, #84]	@ (80027e0 <menu+0x13f4>)
 800278a:	2101      	movs	r1, #1
 800278c:	2002      	movs	r0, #2
 800278e:	f006 f969 	bl	8008a64 <lcd_print>
 8002792:	e034      	b.n	80027fe <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <menu+0x13f0>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 800279c:	4a11      	ldr	r2, [pc, #68]	@ (80027e4 <menu+0x13f8>)
 800279e:	2101      	movs	r1, #1
 80027a0:	2002      	movs	r0, #2
 80027a2:	f006 f95f 	bl	8008a64 <lcd_print>
 80027a6:	e02a      	b.n	80027fe <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <menu+0x13f0>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d11d      	bne.n	80027ec <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 80027b0:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <menu+0x13fc>)
 80027b2:	2101      	movs	r1, #1
 80027b4:	2002      	movs	r0, #2
 80027b6:	f006 f955 	bl	8008a64 <lcd_print>
 80027ba:	e020      	b.n	80027fe <menu+0x1412>
 80027bc:	200010cf 	.word	0x200010cf
 80027c0:	20000118 	.word	0x20000118
 80027c4:	40010800 	.word	0x40010800
 80027c8:	200010f3 	.word	0x200010f3
 80027cc:	20000ff0 	.word	0x20000ff0
 80027d0:	200010f0 	.word	0x200010f0
 80027d4:	200010c4 	.word	0x200010c4
 80027d8:	2000151c 	.word	0x2000151c
 80027dc:	200010d1 	.word	0x200010d1
 80027e0:	20001530 	.word	0x20001530
 80027e4:	20001544 	.word	0x20001544
 80027e8:	20001558 	.word	0x20001558
		} else if(kapiTablaAcKonum == 3) {
 80027ec:	4b76      	ldr	r3, [pc, #472]	@ (80029c8 <menu+0x15dc>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d104      	bne.n	80027fe <menu+0x1412>
			lcd_print(2, 1, pasifText);
 80027f4:	4a75      	ldr	r2, [pc, #468]	@ (80029cc <menu+0x15e0>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	2002      	movs	r0, #2
 80027fa:	f006 f933 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027fe:	2102      	movs	r1, #2
 8002800:	4873      	ldr	r0, [pc, #460]	@ (80029d0 <menu+0x15e4>)
 8002802:	f007 fc59 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	d115      	bne.n	8002838 <menu+0x144c>
 800280c:	4b71      	ldr	r3, [pc, #452]	@ (80029d4 <menu+0x15e8>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f083 0301 	eor.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800281a:	4b6b      	ldr	r3, [pc, #428]	@ (80029c8 <menu+0x15dc>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b69      	ldr	r3, [pc, #420]	@ (80029c8 <menu+0x15dc>)
 8002824:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002826:	4b68      	ldr	r3, [pc, #416]	@ (80029c8 <menu+0x15dc>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <menu+0x1448>
				kapiTablaAcKonum = 0;
 800282e:	4b66      	ldr	r3, [pc, #408]	@ (80029c8 <menu+0x15dc>)
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002834:	f001 fb08 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002838:	2104      	movs	r1, #4
 800283a:	4865      	ldr	r0, [pc, #404]	@ (80029d0 <menu+0x15e4>)
 800283c:	f007 fc3c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002840:	4603      	mov	r3, r0
 8002842:	2b01      	cmp	r3, #1
 8002844:	d115      	bne.n	8002872 <menu+0x1486>
 8002846:	4b63      	ldr	r3, [pc, #396]	@ (80029d4 <menu+0x15e8>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f083 0301 	eor.w	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00e      	beq.n	8002872 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002854:	4b5c      	ldr	r3, [pc, #368]	@ (80029c8 <menu+0x15dc>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b5a      	ldr	r3, [pc, #360]	@ (80029c8 <menu+0x15dc>)
 800285e:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002860:	4b59      	ldr	r3, [pc, #356]	@ (80029c8 <menu+0x15dc>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d902      	bls.n	800286e <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002868:	4b57      	ldr	r3, [pc, #348]	@ (80029c8 <menu+0x15dc>)
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800286e:	f001 faeb 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002872:	2108      	movs	r1, #8
 8002874:	4856      	ldr	r0, [pc, #344]	@ (80029d0 <menu+0x15e4>)
 8002876:	f007 fc1f 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d11d      	bne.n	80028bc <menu+0x14d0>
 8002880:	4b54      	ldr	r3, [pc, #336]	@ (80029d4 <menu+0x15e8>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f083 0301 	eor.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d016      	beq.n	80028bc <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 800288e:	4b4e      	ldr	r3, [pc, #312]	@ (80029c8 <menu+0x15dc>)
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	4b51      	ldr	r3, [pc, #324]	@ (80029d8 <menu+0x15ec>)
 8002894:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002898:	4b4b      	ldr	r3, [pc, #300]	@ (80029c8 <menu+0x15dc>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <menu+0x14bc>
 80028a0:	4b49      	ldr	r3, [pc, #292]	@ (80029c8 <menu+0x15dc>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d106      	bne.n	80028b6 <menu+0x14ca>
				altLimit = 1;
 80028a8:	4b4c      	ldr	r3, [pc, #304]	@ (80029dc <menu+0x15f0>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80028ae:	4b4b      	ldr	r3, [pc, #300]	@ (80029dc <menu+0x15f0>)
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	4b49      	ldr	r3, [pc, #292]	@ (80029d8 <menu+0x15ec>)
 80028b4:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80028b6:	4b4a      	ldr	r3, [pc, #296]	@ (80029e0 <menu+0x15f4>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80028bc:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <menu+0x15f8>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b0f      	cmp	r3, #15
 80028c2:	d16c      	bne.n	800299e <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 80028c4:	4a48      	ldr	r2, [pc, #288]	@ (80029e8 <menu+0x15fc>)
 80028c6:	2101      	movs	r1, #1
 80028c8:	2001      	movs	r0, #1
 80028ca:	f006 f8cb 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80028ce:	4a47      	ldr	r2, [pc, #284]	@ (80029ec <menu+0x1600>)
 80028d0:	2101      	movs	r1, #1
 80028d2:	2002      	movs	r0, #2
 80028d4:	f006 f8c6 	bl	8008a64 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 80028d8:	4b45      	ldr	r3, [pc, #276]	@ (80029f0 <menu+0x1604>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	220a      	movs	r2, #10
 80028de:	4945      	ldr	r1, [pc, #276]	@ (80029f4 <menu+0x1608>)
 80028e0:	4618      	mov	r0, r3
 80028e2:	f00a fc15 	bl	800d110 <itoa>
		lcd_print(2,16,snum);
 80028e6:	4a43      	ldr	r2, [pc, #268]	@ (80029f4 <menu+0x1608>)
 80028e8:	2110      	movs	r1, #16
 80028ea:	2002      	movs	r0, #2
 80028ec:	f006 f8ba 	bl	8008a64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80028f0:	2102      	movs	r1, #2
 80028f2:	4837      	ldr	r0, [pc, #220]	@ (80029d0 <menu+0x15e4>)
 80028f4:	f007 fbe0 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d119      	bne.n	8002932 <menu+0x1546>
 80028fe:	4b35      	ldr	r3, [pc, #212]	@ (80029d4 <menu+0x15e8>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	f083 0301 	eor.w	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d012      	beq.n	8002932 <menu+0x1546>
 800290c:	4b3a      	ldr	r3, [pc, #232]	@ (80029f8 <menu+0x160c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10e      	bne.n	8002932 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002914:	4b36      	ldr	r3, [pc, #216]	@ (80029f0 <menu+0x1604>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b34      	ldr	r3, [pc, #208]	@ (80029f0 <menu+0x1604>)
 800291e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002920:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <menu+0x1604>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b05      	cmp	r3, #5
 8002926:	d902      	bls.n	800292e <menu+0x1542>
				kapiTablaAcSure = 0;
 8002928:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <menu+0x1604>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800292e:	f001 fa8b 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002932:	2104      	movs	r1, #4
 8002934:	4826      	ldr	r0, [pc, #152]	@ (80029d0 <menu+0x15e4>)
 8002936:	f007 fbbf 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800293a:	4603      	mov	r3, r0
 800293c:	2b01      	cmp	r3, #1
 800293e:	d119      	bne.n	8002974 <menu+0x1588>
 8002940:	4b24      	ldr	r3, [pc, #144]	@ (80029d4 <menu+0x15e8>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d012      	beq.n	8002974 <menu+0x1588>
 800294e:	4b2a      	ldr	r3, [pc, #168]	@ (80029f8 <menu+0x160c>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10e      	bne.n	8002974 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002956:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <menu+0x1604>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	3b01      	subs	r3, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <menu+0x1604>)
 8002960:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002962:	4b23      	ldr	r3, [pc, #140]	@ (80029f0 <menu+0x1604>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 800296a:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <menu+0x1604>)
 800296c:	2205      	movs	r2, #5
 800296e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002970:	f001 fa6a 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002974:	2108      	movs	r1, #8
 8002976:	4816      	ldr	r0, [pc, #88]	@ (80029d0 <menu+0x15e4>)
 8002978:	f007 fb9e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800297c:	4603      	mov	r3, r0
 800297e:	2b01      	cmp	r3, #1
 8002980:	d10d      	bne.n	800299e <menu+0x15b2>
 8002982:	4b14      	ldr	r3, [pc, #80]	@ (80029d4 <menu+0x15e8>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	f083 0301 	eor.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <menu+0x1604>)
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <menu+0x15ec>)
 8002996:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <menu+0x15f4>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800299e:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <menu+0x15f8>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	f040 8086 	bne.w	8002ab4 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 80029a8:	4a14      	ldr	r2, [pc, #80]	@ (80029fc <menu+0x1610>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	2001      	movs	r0, #1
 80029ae:	f006 f859 	bl	8008a64 <lcd_print>

		if(yukariYavasLimit == 0) {
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <menu+0x1614>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d124      	bne.n	8002a04 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 80029ba:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <menu+0x15e0>)
 80029bc:	2101      	movs	r1, #1
 80029be:	2002      	movs	r0, #2
 80029c0:	f006 f850 	bl	8008a64 <lcd_print>
 80029c4:	e027      	b.n	8002a16 <menu+0x162a>
 80029c6:	bf00      	nop
 80029c8:	200010d1 	.word	0x200010d1
 80029cc:	200013a0 	.word	0x200013a0
 80029d0:	40010800 	.word	0x40010800
 80029d4:	200010f3 	.word	0x200010f3
 80029d8:	20000ff0 	.word	0x20000ff0
 80029dc:	200010ca 	.word	0x200010ca
 80029e0:	200010f0 	.word	0x200010f0
 80029e4:	200010c4 	.word	0x200010c4
 80029e8:	2000156c 	.word	0x2000156c
 80029ec:	200014cc 	.word	0x200014cc
 80029f0:	200010df 	.word	0x200010df
 80029f4:	20001060 	.word	0x20001060
 80029f8:	200010cf 	.word	0x200010cf
 80029fc:	20001580 	.word	0x20001580
 8002a00:	200010d2 	.word	0x200010d2
		} else if(yukariYavasLimit == 1) {
 8002a04:	4b84      	ldr	r3, [pc, #528]	@ (8002c18 <menu+0x182c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d104      	bne.n	8002a16 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002a0c:	4a83      	ldr	r2, [pc, #524]	@ (8002c1c <menu+0x1830>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2002      	movs	r0, #2
 8002a12:	f006 f827 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a16:	2102      	movs	r1, #2
 8002a18:	4881      	ldr	r0, [pc, #516]	@ (8002c20 <menu+0x1834>)
 8002a1a:	f007 fb4d 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d115      	bne.n	8002a50 <menu+0x1664>
 8002a24:	4b7f      	ldr	r3, [pc, #508]	@ (8002c24 <menu+0x1838>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	f083 0301 	eor.w	r3, r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00e      	beq.n	8002a50 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002a32:	4b79      	ldr	r3, [pc, #484]	@ (8002c18 <menu+0x182c>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4b77      	ldr	r3, [pc, #476]	@ (8002c18 <menu+0x182c>)
 8002a3c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002a3e:	4b76      	ldr	r3, [pc, #472]	@ (8002c18 <menu+0x182c>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d902      	bls.n	8002a4c <menu+0x1660>
				yukariYavasLimit = 0;
 8002a46:	4b74      	ldr	r3, [pc, #464]	@ (8002c18 <menu+0x182c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a4c:	f001 f9fc 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a50:	2104      	movs	r1, #4
 8002a52:	4873      	ldr	r0, [pc, #460]	@ (8002c20 <menu+0x1834>)
 8002a54:	f007 fb30 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d115      	bne.n	8002a8a <menu+0x169e>
 8002a5e:	4b71      	ldr	r3, [pc, #452]	@ (8002c24 <menu+0x1838>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f083 0301 	eor.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c18 <menu+0x182c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	4b68      	ldr	r3, [pc, #416]	@ (8002c18 <menu+0x182c>)
 8002a76:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002a78:	4b67      	ldr	r3, [pc, #412]	@ (8002c18 <menu+0x182c>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002a80:	4b65      	ldr	r3, [pc, #404]	@ (8002c18 <menu+0x182c>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a86:	f001 f9df 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a8a:	2108      	movs	r1, #8
 8002a8c:	4864      	ldr	r0, [pc, #400]	@ (8002c20 <menu+0x1834>)
 8002a8e:	f007 fb13 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d10d      	bne.n	8002ab4 <menu+0x16c8>
 8002a98:	4b62      	ldr	r3, [pc, #392]	@ (8002c24 <menu+0x1838>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	f083 0301 	eor.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c18 <menu+0x182c>)
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002c28 <menu+0x183c>)
 8002aac:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002aae:	4b5f      	ldr	r3, [pc, #380]	@ (8002c2c <menu+0x1840>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c30 <menu+0x1844>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b11      	cmp	r3, #17
 8002aba:	f040 808b 	bne.w	8002bd4 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002abe:	4a5d      	ldr	r2, [pc, #372]	@ (8002c34 <menu+0x1848>)
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f005 ffce 	bl	8008a64 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002ac8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c38 <menu+0x184c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d105      	bne.n	8002adc <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c3c <menu+0x1850>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	f005 ffc5 	bl	8008a64 <lcd_print>
 8002ada:	e012      	b.n	8002b02 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002adc:	4b56      	ldr	r3, [pc, #344]	@ (8002c38 <menu+0x184c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002ae4:	4a56      	ldr	r2, [pc, #344]	@ (8002c40 <menu+0x1854>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	2002      	movs	r0, #2
 8002aea:	f005 ffbb 	bl	8008a64 <lcd_print>
 8002aee:	e008      	b.n	8002b02 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002af0:	4b51      	ldr	r3, [pc, #324]	@ (8002c38 <menu+0x184c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d104      	bne.n	8002b02 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002af8:	4a52      	ldr	r2, [pc, #328]	@ (8002c44 <menu+0x1858>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	2002      	movs	r0, #2
 8002afe:	f005 ffb1 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b02:	2102      	movs	r1, #2
 8002b04:	4846      	ldr	r0, [pc, #280]	@ (8002c20 <menu+0x1834>)
 8002b06:	f007 fad7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d115      	bne.n	8002b3c <menu+0x1750>
 8002b10:	4b44      	ldr	r3, [pc, #272]	@ (8002c24 <menu+0x1838>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	f083 0301 	eor.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00e      	beq.n	8002b3c <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002b1e:	4b46      	ldr	r3, [pc, #280]	@ (8002c38 <menu+0x184c>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4b44      	ldr	r3, [pc, #272]	@ (8002c38 <menu+0x184c>)
 8002b28:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002b2a:	4b43      	ldr	r3, [pc, #268]	@ (8002c38 <menu+0x184c>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d902      	bls.n	8002b38 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002b32:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <menu+0x184c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b38:	f001 f986 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	4838      	ldr	r0, [pc, #224]	@ (8002c20 <menu+0x1834>)
 8002b40:	f007 faba 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d115      	bne.n	8002b76 <menu+0x178a>
 8002b4a:	4b36      	ldr	r3, [pc, #216]	@ (8002c24 <menu+0x1838>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f083 0301 	eor.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00e      	beq.n	8002b76 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002b58:	4b37      	ldr	r3, [pc, #220]	@ (8002c38 <menu+0x184c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	4b35      	ldr	r3, [pc, #212]	@ (8002c38 <menu+0x184c>)
 8002b62:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002b64:	4b34      	ldr	r3, [pc, #208]	@ (8002c38 <menu+0x184c>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d902      	bls.n	8002b72 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002b6c:	4b32      	ldr	r3, [pc, #200]	@ (8002c38 <menu+0x184c>)
 8002b6e:	2202      	movs	r2, #2
 8002b70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b72:	f001 f969 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b76:	2108      	movs	r1, #8
 8002b78:	4829      	ldr	r0, [pc, #164]	@ (8002c20 <menu+0x1834>)
 8002b7a:	f007 fa9d 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d127      	bne.n	8002bd4 <menu+0x17e8>
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <menu+0x1838>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d020      	beq.n	8002bd4 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002b92:	4b29      	ldr	r3, [pc, #164]	@ (8002c38 <menu+0x184c>)
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <menu+0x183c>)
 8002b98:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002b9a:	4b27      	ldr	r3, [pc, #156]	@ (8002c38 <menu+0x184c>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d003      	beq.n	8002baa <menu+0x17be>
 8002ba2:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <menu+0x184c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d106      	bne.n	8002bb8 <menu+0x17cc>
				calismaSekli = 0;
 8002baa:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <menu+0x185c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002bb0:	4b25      	ldr	r3, [pc, #148]	@ (8002c48 <menu+0x185c>)
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c28 <menu+0x183c>)
 8002bb6:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c38 <menu+0x184c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d106      	bne.n	8002bce <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002bc0:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <menu+0x1860>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002bc6:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <menu+0x1860>)
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	4b17      	ldr	r3, [pc, #92]	@ (8002c28 <menu+0x183c>)
 8002bcc:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002bce:	4b17      	ldr	r3, [pc, #92]	@ (8002c2c <menu+0x1840>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002bd4:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <menu+0x1844>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b12      	cmp	r3, #18
 8002bda:	f040 8097 	bne.w	8002d0c <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <menu+0x184c>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d105      	bne.n	8002bf2 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002be6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c50 <menu+0x1864>)
 8002be8:	2101      	movs	r1, #1
 8002bea:	2001      	movs	r0, #1
 8002bec:	f005 ff3a 	bl	8008a64 <lcd_print>
 8002bf0:	e008      	b.n	8002c04 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002bf2:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <menu+0x184c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d104      	bne.n	8002c04 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002bfa:	4a16      	ldr	r2, [pc, #88]	@ (8002c54 <menu+0x1868>)
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f005 ff30 	bl	8008a64 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <menu+0x186c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d127      	bne.n	8002c5c <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <menu+0x1858>)
 8002c0e:	2101      	movs	r1, #1
 8002c10:	2002      	movs	r0, #2
 8002c12:	f005 ff27 	bl	8008a64 <lcd_print>
 8002c16:	e02a      	b.n	8002c6e <menu+0x1882>
 8002c18:	200010d2 	.word	0x200010d2
 8002c1c:	200013b4 	.word	0x200013b4
 8002c20:	40010800 	.word	0x40010800
 8002c24:	200010f3 	.word	0x200010f3
 8002c28:	20000ff0 	.word	0x20000ff0
 8002c2c:	200010f0 	.word	0x200010f0
 8002c30:	200010c4 	.word	0x200010c4
 8002c34:	20001594 	.word	0x20001594
 8002c38:	200010d3 	.word	0x200010d3
 8002c3c:	200015a8 	.word	0x200015a8
 8002c40:	200015bc 	.word	0x200015bc
 8002c44:	200013a0 	.word	0x200013a0
 8002c48:	200010c5 	.word	0x200010c5
 8002c4c:	200010d6 	.word	0x200010d6
 8002c50:	200015d0 	.word	0x200015d0
 8002c54:	200015e4 	.word	0x200015e4
 8002c58:	200010d4 	.word	0x200010d4
		} else if(devirmeYukariIleriLimit == 1){
 8002c5c:	4b79      	ldr	r3, [pc, #484]	@ (8002e44 <menu+0x1a58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d104      	bne.n	8002c6e <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002c64:	4a78      	ldr	r2, [pc, #480]	@ (8002e48 <menu+0x1a5c>)
 8002c66:	2101      	movs	r1, #1
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f005 fefb 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c6e:	2102      	movs	r1, #2
 8002c70:	4876      	ldr	r0, [pc, #472]	@ (8002e4c <menu+0x1a60>)
 8002c72:	f007 fa21 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d115      	bne.n	8002ca8 <menu+0x18bc>
 8002c7c:	4b74      	ldr	r3, [pc, #464]	@ (8002e50 <menu+0x1a64>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f083 0301 	eor.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00e      	beq.n	8002ca8 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e44 <menu+0x1a58>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b6c      	ldr	r3, [pc, #432]	@ (8002e44 <menu+0x1a58>)
 8002c94:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002c96:	4b6b      	ldr	r3, [pc, #428]	@ (8002e44 <menu+0x1a58>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d902      	bls.n	8002ca4 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002c9e:	4b69      	ldr	r3, [pc, #420]	@ (8002e44 <menu+0x1a58>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ca4:	f001 f8d0 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ca8:	2104      	movs	r1, #4
 8002caa:	4868      	ldr	r0, [pc, #416]	@ (8002e4c <menu+0x1a60>)
 8002cac:	f007 fa04 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d115      	bne.n	8002ce2 <menu+0x18f6>
 8002cb6:	4b66      	ldr	r3, [pc, #408]	@ (8002e50 <menu+0x1a64>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f083 0301 	eor.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00e      	beq.n	8002ce2 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002cc4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e44 <menu+0x1a58>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b5d      	ldr	r3, [pc, #372]	@ (8002e44 <menu+0x1a58>)
 8002cce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002cd0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e44 <menu+0x1a58>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e44 <menu+0x1a58>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cde:	f001 f8b3 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	4859      	ldr	r0, [pc, #356]	@ (8002e4c <menu+0x1a60>)
 8002ce6:	f007 f9e7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10d      	bne.n	8002d0c <menu+0x1920>
 8002cf0:	4b57      	ldr	r3, [pc, #348]	@ (8002e50 <menu+0x1a64>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002cfe:	4b51      	ldr	r3, [pc, #324]	@ (8002e44 <menu+0x1a58>)
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	4b54      	ldr	r3, [pc, #336]	@ (8002e54 <menu+0x1a68>)
 8002d04:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002d06:	4b54      	ldr	r3, [pc, #336]	@ (8002e58 <menu+0x1a6c>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002d0c:	4b53      	ldr	r3, [pc, #332]	@ (8002e5c <menu+0x1a70>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b13      	cmp	r3, #19
 8002d12:	d174      	bne.n	8002dfe <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002d14:	4b52      	ldr	r3, [pc, #328]	@ (8002e60 <menu+0x1a74>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d105      	bne.n	8002d28 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002d1c:	4a51      	ldr	r2, [pc, #324]	@ (8002e64 <menu+0x1a78>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	2001      	movs	r0, #1
 8002d22:	f005 fe9f 	bl	8008a64 <lcd_print>
 8002d26:	e008      	b.n	8002d3a <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002d28:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <menu+0x1a74>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d104      	bne.n	8002d3a <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002d30:	4a4d      	ldr	r2, [pc, #308]	@ (8002e68 <menu+0x1a7c>)
 8002d32:	2101      	movs	r1, #1
 8002d34:	2001      	movs	r0, #1
 8002d36:	f005 fe95 	bl	8008a64 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e6c <menu+0x1a80>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002d42:	4a4b      	ldr	r2, [pc, #300]	@ (8002e70 <menu+0x1a84>)
 8002d44:	2101      	movs	r1, #1
 8002d46:	2002      	movs	r0, #2
 8002d48:	f005 fe8c 	bl	8008a64 <lcd_print>
 8002d4c:	e008      	b.n	8002d60 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002d4e:	4b47      	ldr	r3, [pc, #284]	@ (8002e6c <menu+0x1a80>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d104      	bne.n	8002d60 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002d56:	4a3c      	ldr	r2, [pc, #240]	@ (8002e48 <menu+0x1a5c>)
 8002d58:	2101      	movs	r1, #1
 8002d5a:	2002      	movs	r0, #2
 8002d5c:	f005 fe82 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d60:	2102      	movs	r1, #2
 8002d62:	483a      	ldr	r0, [pc, #232]	@ (8002e4c <menu+0x1a60>)
 8002d64:	f007 f9a8 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d115      	bne.n	8002d9a <menu+0x19ae>
 8002d6e:	4b38      	ldr	r3, [pc, #224]	@ (8002e50 <menu+0x1a64>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f083 0301 	eor.w	r3, r3, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e6c <menu+0x1a80>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	4b39      	ldr	r3, [pc, #228]	@ (8002e6c <menu+0x1a80>)
 8002d86:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002d88:	4b38      	ldr	r3, [pc, #224]	@ (8002e6c <menu+0x1a80>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d902      	bls.n	8002d96 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002d90:	4b36      	ldr	r3, [pc, #216]	@ (8002e6c <menu+0x1a80>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d96:	f001 f857 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	482b      	ldr	r0, [pc, #172]	@ (8002e4c <menu+0x1a60>)
 8002d9e:	f007 f98b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d115      	bne.n	8002dd4 <menu+0x19e8>
 8002da8:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <menu+0x1a64>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	f083 0301 	eor.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00e      	beq.n	8002dd4 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002db6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e6c <menu+0x1a80>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <menu+0x1a80>)
 8002dc0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e6c <menu+0x1a80>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002dca:	4b28      	ldr	r3, [pc, #160]	@ (8002e6c <menu+0x1a80>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dd0:	f001 f83a 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dd4:	2108      	movs	r1, #8
 8002dd6:	481d      	ldr	r0, [pc, #116]	@ (8002e4c <menu+0x1a60>)
 8002dd8:	f007 f96e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10d      	bne.n	8002dfe <menu+0x1a12>
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <menu+0x1a64>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	f083 0301 	eor.w	r3, r3, #1
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <menu+0x1a80>)
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <menu+0x1a68>)
 8002df6:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002df8:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <menu+0x1a6c>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002dfe:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <menu+0x1a70>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b14      	cmp	r3, #20
 8002e04:	f040 809e 	bne.w	8002f44 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002e08:	4b15      	ldr	r3, [pc, #84]	@ (8002e60 <menu+0x1a74>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002e10:	4a18      	ldr	r2, [pc, #96]	@ (8002e74 <menu+0x1a88>)
 8002e12:	2101      	movs	r1, #1
 8002e14:	2001      	movs	r0, #1
 8002e16:	f005 fe25 	bl	8008a64 <lcd_print>
 8002e1a:	e008      	b.n	8002e2e <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002e1c:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <menu+0x1a74>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d104      	bne.n	8002e2e <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002e24:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <menu+0x1a8c>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f005 fe1b 	bl	8008a64 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <menu+0x1a90>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d126      	bne.n	8002e84 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002e36:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <menu+0x1a94>)
 8002e38:	2101      	movs	r1, #1
 8002e3a:	2002      	movs	r0, #2
 8002e3c:	f005 fe12 	bl	8008a64 <lcd_print>
 8002e40:	e029      	b.n	8002e96 <menu+0x1aaa>
 8002e42:	bf00      	nop
 8002e44:	200010d4 	.word	0x200010d4
 8002e48:	200013b4 	.word	0x200013b4
 8002e4c:	40010800 	.word	0x40010800
 8002e50:	200010f3 	.word	0x200010f3
 8002e54:	20000ff0 	.word	0x20000ff0
 8002e58:	200010f0 	.word	0x200010f0
 8002e5c:	200010c4 	.word	0x200010c4
 8002e60:	200010d3 	.word	0x200010d3
 8002e64:	200015f8 	.word	0x200015f8
 8002e68:	2000160c 	.word	0x2000160c
 8002e6c:	200010d5 	.word	0x200010d5
 8002e70:	200013a0 	.word	0x200013a0
 8002e74:	20001620 	.word	0x20001620
 8002e78:	20001634 	.word	0x20001634
 8002e7c:	200010d6 	.word	0x200010d6
 8002e80:	20001648 	.word	0x20001648
		} else if(devirmeSilindirTipi == 1) {
 8002e84:	4b39      	ldr	r3, [pc, #228]	@ (8002f6c <menu+0x1b80>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d104      	bne.n	8002e96 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002e8c:	4a38      	ldr	r2, [pc, #224]	@ (8002f70 <menu+0x1b84>)
 8002e8e:	2101      	movs	r1, #1
 8002e90:	2002      	movs	r0, #2
 8002e92:	f005 fde7 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002e96:	2102      	movs	r1, #2
 8002e98:	4836      	ldr	r0, [pc, #216]	@ (8002f74 <menu+0x1b88>)
 8002e9a:	f007 f90d 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d119      	bne.n	8002ed8 <menu+0x1aec>
 8002ea4:	4b34      	ldr	r3, [pc, #208]	@ (8002f78 <menu+0x1b8c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	f083 0301 	eor.w	r3, r3, #1
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d012      	beq.n	8002ed8 <menu+0x1aec>
 8002eb2:	4b32      	ldr	r3, [pc, #200]	@ (8002f7c <menu+0x1b90>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d10e      	bne.n	8002ed8 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002eba:	4b2c      	ldr	r3, [pc, #176]	@ (8002f6c <menu+0x1b80>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f6c <menu+0x1b80>)
 8002ec4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002ec6:	4b29      	ldr	r3, [pc, #164]	@ (8002f6c <menu+0x1b80>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d902      	bls.n	8002ed4 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002ece:	4b27      	ldr	r3, [pc, #156]	@ (8002f6c <menu+0x1b80>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ed4:	f000 ffb8 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002ed8:	2104      	movs	r1, #4
 8002eda:	4826      	ldr	r0, [pc, #152]	@ (8002f74 <menu+0x1b88>)
 8002edc:	f007 f8ec 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d119      	bne.n	8002f1a <menu+0x1b2e>
 8002ee6:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <menu+0x1b8c>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f083 0301 	eor.w	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <menu+0x1b2e>
 8002ef4:	4b21      	ldr	r3, [pc, #132]	@ (8002f7c <menu+0x1b90>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d10e      	bne.n	8002f1a <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <menu+0x1b80>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <menu+0x1b80>)
 8002f06:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002f08:	4b18      	ldr	r3, [pc, #96]	@ (8002f6c <menu+0x1b80>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002f10:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <menu+0x1b80>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f16:	f000 ff97 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f1a:	2108      	movs	r1, #8
 8002f1c:	4815      	ldr	r0, [pc, #84]	@ (8002f74 <menu+0x1b88>)
 8002f1e:	f007 f8cb 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10d      	bne.n	8002f44 <menu+0x1b58>
 8002f28:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <menu+0x1b8c>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f083 0301 	eor.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <menu+0x1b80>)
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <menu+0x1b94>)
 8002f3c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <menu+0x1b98>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002f44:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <menu+0x1b9c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b15      	cmp	r3, #21
 8002f4a:	f040 8088 	bne.w	800305e <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f8c <menu+0x1ba0>)
 8002f50:	2101      	movs	r1, #1
 8002f52:	2001      	movs	r0, #1
 8002f54:	f005 fd86 	bl	8008a64 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002f58:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <menu+0x1ba4>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11b      	bne.n	8002f98 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002f60:	4a0c      	ldr	r2, [pc, #48]	@ (8002f94 <menu+0x1ba8>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	2002      	movs	r0, #2
 8002f66:	f005 fd7d 	bl	8008a64 <lcd_print>
 8002f6a:	e01e      	b.n	8002faa <menu+0x1bbe>
 8002f6c:	200010d6 	.word	0x200010d6
 8002f70:	2000165c 	.word	0x2000165c
 8002f74:	40010800 	.word	0x40010800
 8002f78:	200010f3 	.word	0x200010f3
 8002f7c:	200010d3 	.word	0x200010d3
 8002f80:	20000ff0 	.word	0x20000ff0
 8002f84:	200010f0 	.word	0x200010f0
 8002f88:	200010c4 	.word	0x200010c4
 8002f8c:	20001670 	.word	0x20001670
 8002f90:	200010d7 	.word	0x200010d7
 8002f94:	20001648 	.word	0x20001648
		} else if(platformSilindirTipi == 1) {
 8002f98:	4ba1      	ldr	r3, [pc, #644]	@ (8003220 <menu+0x1e34>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d104      	bne.n	8002faa <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002fa0:	4aa0      	ldr	r2, [pc, #640]	@ (8003224 <menu+0x1e38>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f005 fd5d 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002faa:	2102      	movs	r1, #2
 8002fac:	489e      	ldr	r0, [pc, #632]	@ (8003228 <menu+0x1e3c>)
 8002fae:	f007 f883 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d115      	bne.n	8002fe4 <menu+0x1bf8>
 8002fb8:	4b9c      	ldr	r3, [pc, #624]	@ (800322c <menu+0x1e40>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	f083 0301 	eor.w	r3, r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00e      	beq.n	8002fe4 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002fc6:	4b96      	ldr	r3, [pc, #600]	@ (8003220 <menu+0x1e34>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4b94      	ldr	r3, [pc, #592]	@ (8003220 <menu+0x1e34>)
 8002fd0:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002fd2:	4b93      	ldr	r3, [pc, #588]	@ (8003220 <menu+0x1e34>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d902      	bls.n	8002fe0 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002fda:	4b91      	ldr	r3, [pc, #580]	@ (8003220 <menu+0x1e34>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fe0:	f000 ff32 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	4890      	ldr	r0, [pc, #576]	@ (8003228 <menu+0x1e3c>)
 8002fe8:	f007 f866 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d115      	bne.n	800301e <menu+0x1c32>
 8002ff2:	4b8e      	ldr	r3, [pc, #568]	@ (800322c <menu+0x1e40>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f083 0301 	eor.w	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003000:	4b87      	ldr	r3, [pc, #540]	@ (8003220 <menu+0x1e34>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	3b01      	subs	r3, #1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	4b85      	ldr	r3, [pc, #532]	@ (8003220 <menu+0x1e34>)
 800300a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 800300c:	4b84      	ldr	r3, [pc, #528]	@ (8003220 <menu+0x1e34>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8003014:	4b82      	ldr	r3, [pc, #520]	@ (8003220 <menu+0x1e34>)
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800301a:	f000 ff15 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800301e:	2108      	movs	r1, #8
 8003020:	4881      	ldr	r0, [pc, #516]	@ (8003228 <menu+0x1e3c>)
 8003022:	f007 f849 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003026:	4603      	mov	r3, r0
 8003028:	2b01      	cmp	r3, #1
 800302a:	d118      	bne.n	800305e <menu+0x1c72>
 800302c:	4b7f      	ldr	r3, [pc, #508]	@ (800322c <menu+0x1e40>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	f083 0301 	eor.w	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d011      	beq.n	800305e <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 800303a:	4b79      	ldr	r3, [pc, #484]	@ (8003220 <menu+0x1e34>)
 800303c:	781a      	ldrb	r2, [r3, #0]
 800303e:	4b7c      	ldr	r3, [pc, #496]	@ (8003230 <menu+0x1e44>)
 8003040:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003042:	4b77      	ldr	r3, [pc, #476]	@ (8003220 <menu+0x1e34>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d106      	bne.n	8003058 <menu+0x1c6c>
				altLimit = 1;
 800304a:	4b7a      	ldr	r3, [pc, #488]	@ (8003234 <menu+0x1e48>)
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003050:	4b78      	ldr	r3, [pc, #480]	@ (8003234 <menu+0x1e48>)
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	4b76      	ldr	r3, [pc, #472]	@ (8003230 <menu+0x1e44>)
 8003056:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003058:	4b77      	ldr	r3, [pc, #476]	@ (8003238 <menu+0x1e4c>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800305e:	4b77      	ldr	r3, [pc, #476]	@ (800323c <menu+0x1e50>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b16      	cmp	r3, #22
 8003064:	d164      	bne.n	8003130 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8003066:	4a76      	ldr	r2, [pc, #472]	@ (8003240 <menu+0x1e54>)
 8003068:	2101      	movs	r1, #1
 800306a:	2001      	movs	r0, #1
 800306c:	f005 fcfa 	bl	8008a64 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003070:	4a74      	ldr	r2, [pc, #464]	@ (8003244 <menu+0x1e58>)
 8003072:	2101      	movs	r1, #1
 8003074:	2002      	movs	r0, #2
 8003076:	f005 fcf5 	bl	8008a64 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 800307a:	4b73      	ldr	r3, [pc, #460]	@ (8003248 <menu+0x1e5c>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	220a      	movs	r2, #10
 8003080:	4972      	ldr	r1, [pc, #456]	@ (800324c <menu+0x1e60>)
 8003082:	4618      	mov	r0, r3
 8003084:	f00a f844 	bl	800d110 <itoa>
		lcd_print(2,16,snum);
 8003088:	4a70      	ldr	r2, [pc, #448]	@ (800324c <menu+0x1e60>)
 800308a:	2110      	movs	r1, #16
 800308c:	2002      	movs	r0, #2
 800308e:	f005 fce9 	bl	8008a64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003092:	2102      	movs	r1, #2
 8003094:	4864      	ldr	r0, [pc, #400]	@ (8003228 <menu+0x1e3c>)
 8003096:	f007 f80f 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800309a:	4603      	mov	r3, r0
 800309c:	2b01      	cmp	r3, #1
 800309e:	d115      	bne.n	80030cc <menu+0x1ce0>
 80030a0:	4b62      	ldr	r3, [pc, #392]	@ (800322c <menu+0x1e40>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	f083 0301 	eor.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00e      	beq.n	80030cc <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 80030ae:	4b66      	ldr	r3, [pc, #408]	@ (8003248 <menu+0x1e5c>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b64      	ldr	r3, [pc, #400]	@ (8003248 <menu+0x1e5c>)
 80030b8:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80030ba:	4b63      	ldr	r3, [pc, #396]	@ (8003248 <menu+0x1e5c>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d902      	bls.n	80030c8 <menu+0x1cdc>
				yukariValfTmr = 0;
 80030c2:	4b61      	ldr	r3, [pc, #388]	@ (8003248 <menu+0x1e5c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030c8:	f000 febe 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030cc:	2104      	movs	r1, #4
 80030ce:	4856      	ldr	r0, [pc, #344]	@ (8003228 <menu+0x1e3c>)
 80030d0:	f006 fff2 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d115      	bne.n	8003106 <menu+0x1d1a>
 80030da:	4b54      	ldr	r3, [pc, #336]	@ (800322c <menu+0x1e40>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	f083 0301 	eor.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 80030e8:	4b57      	ldr	r3, [pc, #348]	@ (8003248 <menu+0x1e5c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	4b55      	ldr	r3, [pc, #340]	@ (8003248 <menu+0x1e5c>)
 80030f2:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80030f4:	4b54      	ldr	r3, [pc, #336]	@ (8003248 <menu+0x1e5c>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d902      	bls.n	8003102 <menu+0x1d16>
		   		yukariValfTmr = 5;
 80030fc:	4b52      	ldr	r3, [pc, #328]	@ (8003248 <menu+0x1e5c>)
 80030fe:	2205      	movs	r2, #5
 8003100:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003102:	f000 fea1 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003106:	2108      	movs	r1, #8
 8003108:	4847      	ldr	r0, [pc, #284]	@ (8003228 <menu+0x1e3c>)
 800310a:	f006 ffd5 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800310e:	4603      	mov	r3, r0
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10d      	bne.n	8003130 <menu+0x1d44>
 8003114:	4b45      	ldr	r3, [pc, #276]	@ (800322c <menu+0x1e40>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	f083 0301 	eor.w	r3, r3, #1
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8003122:	4b49      	ldr	r3, [pc, #292]	@ (8003248 <menu+0x1e5c>)
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	4b42      	ldr	r3, [pc, #264]	@ (8003230 <menu+0x1e44>)
 8003128:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 800312a:	4b43      	ldr	r3, [pc, #268]	@ (8003238 <menu+0x1e4c>)
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003130:	4b42      	ldr	r3, [pc, #264]	@ (800323c <menu+0x1e50>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b17      	cmp	r3, #23
 8003136:	d164      	bne.n	8003202 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8003138:	4a45      	ldr	r2, [pc, #276]	@ (8003250 <menu+0x1e64>)
 800313a:	2101      	movs	r1, #1
 800313c:	2001      	movs	r0, #1
 800313e:	f005 fc91 	bl	8008a64 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003142:	4a40      	ldr	r2, [pc, #256]	@ (8003244 <menu+0x1e58>)
 8003144:	2101      	movs	r1, #1
 8003146:	2002      	movs	r0, #2
 8003148:	f005 fc8c 	bl	8008a64 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 800314c:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <menu+0x1e68>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	220a      	movs	r2, #10
 8003152:	493e      	ldr	r1, [pc, #248]	@ (800324c <menu+0x1e60>)
 8003154:	4618      	mov	r0, r3
 8003156:	f009 ffdb 	bl	800d110 <itoa>
		lcd_print(2,16,snum);
 800315a:	4a3c      	ldr	r2, [pc, #240]	@ (800324c <menu+0x1e60>)
 800315c:	2110      	movs	r1, #16
 800315e:	2002      	movs	r0, #2
 8003160:	f005 fc80 	bl	8008a64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003164:	2102      	movs	r1, #2
 8003166:	4830      	ldr	r0, [pc, #192]	@ (8003228 <menu+0x1e3c>)
 8003168:	f006 ffa6 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d115      	bne.n	800319e <menu+0x1db2>
 8003172:	4b2e      	ldr	r3, [pc, #184]	@ (800322c <menu+0x1e40>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	f083 0301 	eor.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00e      	beq.n	800319e <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003180:	4b34      	ldr	r3, [pc, #208]	@ (8003254 <menu+0x1e68>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	b2da      	uxtb	r2, r3
 8003188:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <menu+0x1e68>)
 800318a:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800318c:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <menu+0x1e68>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b05      	cmp	r3, #5
 8003192:	d902      	bls.n	800319a <menu+0x1dae>
				asagiValfTmr = 0;
 8003194:	4b2f      	ldr	r3, [pc, #188]	@ (8003254 <menu+0x1e68>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800319a:	f000 fe55 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800319e:	2104      	movs	r1, #4
 80031a0:	4821      	ldr	r0, [pc, #132]	@ (8003228 <menu+0x1e3c>)
 80031a2:	f006 ff89 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d115      	bne.n	80031d8 <menu+0x1dec>
 80031ac:	4b1f      	ldr	r3, [pc, #124]	@ (800322c <menu+0x1e40>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 80031ba:	4b26      	ldr	r3, [pc, #152]	@ (8003254 <menu+0x1e68>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b24      	ldr	r3, [pc, #144]	@ (8003254 <menu+0x1e68>)
 80031c4:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80031c6:	4b23      	ldr	r3, [pc, #140]	@ (8003254 <menu+0x1e68>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d902      	bls.n	80031d4 <menu+0x1de8>
		   		asagiValfTmr = 5;
 80031ce:	4b21      	ldr	r3, [pc, #132]	@ (8003254 <menu+0x1e68>)
 80031d0:	2205      	movs	r2, #5
 80031d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031d4:	f000 fe38 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031d8:	2108      	movs	r1, #8
 80031da:	4813      	ldr	r0, [pc, #76]	@ (8003228 <menu+0x1e3c>)
 80031dc:	f006 ff6c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10d      	bne.n	8003202 <menu+0x1e16>
 80031e6:	4b11      	ldr	r3, [pc, #68]	@ (800322c <menu+0x1e40>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80031f4:	4b17      	ldr	r3, [pc, #92]	@ (8003254 <menu+0x1e68>)
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <menu+0x1e44>)
 80031fa:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80031fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <menu+0x1e4c>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003202:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <menu+0x1e50>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b18      	cmp	r3, #24
 8003208:	f040 8093 	bne.w	8003332 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 800320c:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <menu+0x1e6c>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d125      	bne.n	8003260 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8003214:	4a11      	ldr	r2, [pc, #68]	@ (800325c <menu+0x1e70>)
 8003216:	2101      	movs	r1, #1
 8003218:	2001      	movs	r0, #1
 800321a:	f005 fc23 	bl	8008a64 <lcd_print>
 800321e:	e028      	b.n	8003272 <menu+0x1e86>
 8003220:	200010d7 	.word	0x200010d7
 8003224:	2000165c 	.word	0x2000165c
 8003228:	40010800 	.word	0x40010800
 800322c:	200010f3 	.word	0x200010f3
 8003230:	20000ff0 	.word	0x20000ff0
 8003234:	200010ca 	.word	0x200010ca
 8003238:	200010f0 	.word	0x200010f0
 800323c:	200010c4 	.word	0x200010c4
 8003240:	20001684 	.word	0x20001684
 8003244:	200014cc 	.word	0x200014cc
 8003248:	200010d8 	.word	0x200010d8
 800324c:	20001060 	.word	0x20001060
 8003250:	20001698 	.word	0x20001698
 8003254:	200010d9 	.word	0x200010d9
 8003258:	200010d3 	.word	0x200010d3
 800325c:	200016ac 	.word	0x200016ac
		} else if(devirmeYuruyusSecim == 1) {
 8003260:	4b8c      	ldr	r3, [pc, #560]	@ (8003494 <menu+0x20a8>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d104      	bne.n	8003272 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003268:	4a8b      	ldr	r2, [pc, #556]	@ (8003498 <menu+0x20ac>)
 800326a:	2101      	movs	r1, #1
 800326c:	2001      	movs	r0, #1
 800326e:	f005 fbf9 	bl	8008a64 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003272:	4a8a      	ldr	r2, [pc, #552]	@ (800349c <menu+0x20b0>)
 8003274:	2101      	movs	r1, #1
 8003276:	2002      	movs	r0, #2
 8003278:	f005 fbf4 	bl	8008a64 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800327c:	4b88      	ldr	r3, [pc, #544]	@ (80034a0 <menu+0x20b4>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	220a      	movs	r2, #10
 8003282:	4988      	ldr	r1, [pc, #544]	@ (80034a4 <menu+0x20b8>)
 8003284:	4618      	mov	r0, r3
 8003286:	f009 ff43 	bl	800d110 <itoa>
		lcd_print(2, 16, snum);
 800328a:	4a86      	ldr	r2, [pc, #536]	@ (80034a4 <menu+0x20b8>)
 800328c:	2110      	movs	r1, #16
 800328e:	2002      	movs	r0, #2
 8003290:	f005 fbe8 	bl	8008a64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003294:	2102      	movs	r1, #2
 8003296:	4884      	ldr	r0, [pc, #528]	@ (80034a8 <menu+0x20bc>)
 8003298:	f006 ff0e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d115      	bne.n	80032ce <menu+0x1ee2>
 80032a2:	4b82      	ldr	r3, [pc, #520]	@ (80034ac <menu+0x20c0>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	f083 0301 	eor.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80032b0:	4b7b      	ldr	r3, [pc, #492]	@ (80034a0 <menu+0x20b4>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4b79      	ldr	r3, [pc, #484]	@ (80034a0 <menu+0x20b4>)
 80032ba:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80032bc:	4b78      	ldr	r3, [pc, #480]	@ (80034a0 <menu+0x20b4>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d902      	bls.n	80032ca <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 80032c4:	4b76      	ldr	r3, [pc, #472]	@ (80034a0 <menu+0x20b4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032ca:	f000 fdbd 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ce:	2104      	movs	r1, #4
 80032d0:	4875      	ldr	r0, [pc, #468]	@ (80034a8 <menu+0x20bc>)
 80032d2:	f006 fef1 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d115      	bne.n	8003308 <menu+0x1f1c>
 80032dc:	4b73      	ldr	r3, [pc, #460]	@ (80034ac <menu+0x20c0>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	f083 0301 	eor.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00e      	beq.n	8003308 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80032ea:	4b6d      	ldr	r3, [pc, #436]	@ (80034a0 <menu+0x20b4>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4b6b      	ldr	r3, [pc, #428]	@ (80034a0 <menu+0x20b4>)
 80032f4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80032f6:	4b6a      	ldr	r3, [pc, #424]	@ (80034a0 <menu+0x20b4>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d902      	bls.n	8003304 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 80032fe:	4b68      	ldr	r3, [pc, #416]	@ (80034a0 <menu+0x20b4>)
 8003300:	2205      	movs	r2, #5
 8003302:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003304:	f000 fda0 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003308:	2108      	movs	r1, #8
 800330a:	4867      	ldr	r0, [pc, #412]	@ (80034a8 <menu+0x20bc>)
 800330c:	f006 fed4 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10d      	bne.n	8003332 <menu+0x1f46>
 8003316:	4b65      	ldr	r3, [pc, #404]	@ (80034ac <menu+0x20c0>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d006      	beq.n	8003332 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8003324:	4b5e      	ldr	r3, [pc, #376]	@ (80034a0 <menu+0x20b4>)
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	4b61      	ldr	r3, [pc, #388]	@ (80034b0 <menu+0x20c4>)
 800332a:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800332c:	4b61      	ldr	r3, [pc, #388]	@ (80034b4 <menu+0x20c8>)
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003332:	4b61      	ldr	r3, [pc, #388]	@ (80034b8 <menu+0x20cc>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b19      	cmp	r3, #25
 8003338:	d172      	bne.n	8003420 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 800333a:	4b56      	ldr	r3, [pc, #344]	@ (8003494 <menu+0x20a8>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d105      	bne.n	800334e <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8003342:	4a5e      	ldr	r2, [pc, #376]	@ (80034bc <menu+0x20d0>)
 8003344:	2101      	movs	r1, #1
 8003346:	2001      	movs	r0, #1
 8003348:	f005 fb8c 	bl	8008a64 <lcd_print>
 800334c:	e008      	b.n	8003360 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 800334e:	4b51      	ldr	r3, [pc, #324]	@ (8003494 <menu+0x20a8>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d104      	bne.n	8003360 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8003356:	4a5a      	ldr	r2, [pc, #360]	@ (80034c0 <menu+0x20d4>)
 8003358:	2101      	movs	r1, #1
 800335a:	2001      	movs	r0, #1
 800335c:	f005 fb82 	bl	8008a64 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003360:	4a4e      	ldr	r2, [pc, #312]	@ (800349c <menu+0x20b0>)
 8003362:	2101      	movs	r1, #1
 8003364:	2002      	movs	r0, #2
 8003366:	f005 fb7d 	bl	8008a64 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800336a:	4b56      	ldr	r3, [pc, #344]	@ (80034c4 <menu+0x20d8>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	220a      	movs	r2, #10
 8003370:	494c      	ldr	r1, [pc, #304]	@ (80034a4 <menu+0x20b8>)
 8003372:	4618      	mov	r0, r3
 8003374:	f009 fecc 	bl	800d110 <itoa>
		lcd_print(2,16,snum);
 8003378:	4a4a      	ldr	r2, [pc, #296]	@ (80034a4 <menu+0x20b8>)
 800337a:	2110      	movs	r1, #16
 800337c:	2002      	movs	r0, #2
 800337e:	f005 fb71 	bl	8008a64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003382:	2102      	movs	r1, #2
 8003384:	4848      	ldr	r0, [pc, #288]	@ (80034a8 <menu+0x20bc>)
 8003386:	f006 fe97 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800338a:	4603      	mov	r3, r0
 800338c:	2b01      	cmp	r3, #1
 800338e:	d115      	bne.n	80033bc <menu+0x1fd0>
 8003390:	4b46      	ldr	r3, [pc, #280]	@ (80034ac <menu+0x20c0>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00e      	beq.n	80033bc <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800339e:	4b49      	ldr	r3, [pc, #292]	@ (80034c4 <menu+0x20d8>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <menu+0x20d8>)
 80033a8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80033aa:	4b46      	ldr	r3, [pc, #280]	@ (80034c4 <menu+0x20d8>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d902      	bls.n	80033b8 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 80033b2:	4b44      	ldr	r3, [pc, #272]	@ (80034c4 <menu+0x20d8>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033b8:	f000 fd46 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033bc:	2104      	movs	r1, #4
 80033be:	483a      	ldr	r0, [pc, #232]	@ (80034a8 <menu+0x20bc>)
 80033c0:	f006 fe7a 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d115      	bne.n	80033f6 <menu+0x200a>
 80033ca:	4b38      	ldr	r3, [pc, #224]	@ (80034ac <menu+0x20c0>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80033d8:	4b3a      	ldr	r3, [pc, #232]	@ (80034c4 <menu+0x20d8>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	3b01      	subs	r3, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	4b38      	ldr	r3, [pc, #224]	@ (80034c4 <menu+0x20d8>)
 80033e2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80033e4:	4b37      	ldr	r3, [pc, #220]	@ (80034c4 <menu+0x20d8>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b06      	cmp	r3, #6
 80033ea:	d902      	bls.n	80033f2 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80033ec:	4b35      	ldr	r3, [pc, #212]	@ (80034c4 <menu+0x20d8>)
 80033ee:	2205      	movs	r2, #5
 80033f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033f2:	f000 fd29 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f6:	2108      	movs	r1, #8
 80033f8:	482b      	ldr	r0, [pc, #172]	@ (80034a8 <menu+0x20bc>)
 80033fa:	f006 fe5d 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10d      	bne.n	8003420 <menu+0x2034>
 8003404:	4b29      	ldr	r3, [pc, #164]	@ (80034ac <menu+0x20c0>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	f083 0301 	eor.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003412:	4b2c      	ldr	r3, [pc, #176]	@ (80034c4 <menu+0x20d8>)
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	4b26      	ldr	r3, [pc, #152]	@ (80034b0 <menu+0x20c4>)
 8003418:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800341a:	4b26      	ldr	r3, [pc, #152]	@ (80034b4 <menu+0x20c8>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003420:	4b25      	ldr	r3, [pc, #148]	@ (80034b8 <menu+0x20cc>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b1a      	cmp	r3, #26
 8003426:	f040 80b7 	bne.w	8003598 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 800342a:	4a27      	ldr	r2, [pc, #156]	@ (80034c8 <menu+0x20dc>)
 800342c:	2101      	movs	r1, #1
 800342e:	2001      	movs	r0, #1
 8003430:	f005 fb18 	bl	8008a64 <lcd_print>

		if(makineCalismaTmr > 99) {
 8003434:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <menu+0x20e0>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b63      	cmp	r3, #99	@ 0x63
 800343a:	d911      	bls.n	8003460 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 800343c:	4a17      	ldr	r2, [pc, #92]	@ (800349c <menu+0x20b0>)
 800343e:	2101      	movs	r1, #1
 8003440:	2002      	movs	r0, #2
 8003442:	f005 fb0f 	bl	8008a64 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003446:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <menu+0x20e0>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	220a      	movs	r2, #10
 800344c:	4915      	ldr	r1, [pc, #84]	@ (80034a4 <menu+0x20b8>)
 800344e:	4618      	mov	r0, r3
 8003450:	f009 fe5e 	bl	800d110 <itoa>
			lcd_print(2,14,snum);
 8003454:	4a13      	ldr	r2, [pc, #76]	@ (80034a4 <menu+0x20b8>)
 8003456:	210e      	movs	r1, #14
 8003458:	2002      	movs	r0, #2
 800345a:	f005 fb03 	bl	8008a64 <lcd_print>
 800345e:	e04c      	b.n	80034fa <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003460:	4b1a      	ldr	r3, [pc, #104]	@ (80034cc <menu+0x20e0>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b09      	cmp	r3, #9
 8003466:	d933      	bls.n	80034d0 <menu+0x20e4>
 8003468:	4b18      	ldr	r3, [pc, #96]	@ (80034cc <menu+0x20e0>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b63      	cmp	r3, #99	@ 0x63
 800346e:	d82f      	bhi.n	80034d0 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003470:	4a0a      	ldr	r2, [pc, #40]	@ (800349c <menu+0x20b0>)
 8003472:	2101      	movs	r1, #1
 8003474:	2002      	movs	r0, #2
 8003476:	f005 faf5 	bl	8008a64 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800347a:	4b14      	ldr	r3, [pc, #80]	@ (80034cc <menu+0x20e0>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	220a      	movs	r2, #10
 8003480:	4908      	ldr	r1, [pc, #32]	@ (80034a4 <menu+0x20b8>)
 8003482:	4618      	mov	r0, r3
 8003484:	f009 fe44 	bl	800d110 <itoa>
			lcd_print(2, 15, snum);
 8003488:	4a06      	ldr	r2, [pc, #24]	@ (80034a4 <menu+0x20b8>)
 800348a:	210f      	movs	r1, #15
 800348c:	2002      	movs	r0, #2
 800348e:	f005 fae9 	bl	8008a64 <lcd_print>
 8003492:	e032      	b.n	80034fa <menu+0x210e>
 8003494:	200010d3 	.word	0x200010d3
 8003498:	200016c0 	.word	0x200016c0
 800349c:	200014cc 	.word	0x200014cc
 80034a0:	200010da 	.word	0x200010da
 80034a4:	20001060 	.word	0x20001060
 80034a8:	40010800 	.word	0x40010800
 80034ac:	200010f3 	.word	0x200010f3
 80034b0:	20000ff0 	.word	0x20000ff0
 80034b4:	200010f0 	.word	0x200010f0
 80034b8:	200010c4 	.word	0x200010c4
 80034bc:	200016d4 	.word	0x200016d4
 80034c0:	200016e8 	.word	0x200016e8
 80034c4:	200010db 	.word	0x200010db
 80034c8:	200016fc 	.word	0x200016fc
 80034cc:	200010dc 	.word	0x200010dc
		} else if(makineCalismaTmr <=  9) {
 80034d0:	4b72      	ldr	r3, [pc, #456]	@ (800369c <menu+0x22b0>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b09      	cmp	r3, #9
 80034d6:	d810      	bhi.n	80034fa <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 80034d8:	4a71      	ldr	r2, [pc, #452]	@ (80036a0 <menu+0x22b4>)
 80034da:	2101      	movs	r1, #1
 80034dc:	2002      	movs	r0, #2
 80034de:	f005 fac1 	bl	8008a64 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80034e2:	4b6e      	ldr	r3, [pc, #440]	@ (800369c <menu+0x22b0>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	220a      	movs	r2, #10
 80034e8:	496e      	ldr	r1, [pc, #440]	@ (80036a4 <menu+0x22b8>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f009 fe10 	bl	800d110 <itoa>
			lcd_print(2, 16, snum);
 80034f0:	4a6c      	ldr	r2, [pc, #432]	@ (80036a4 <menu+0x22b8>)
 80034f2:	2110      	movs	r1, #16
 80034f4:	2002      	movs	r0, #2
 80034f6:	f005 fab5 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034fa:	2102      	movs	r1, #2
 80034fc:	486a      	ldr	r0, [pc, #424]	@ (80036a8 <menu+0x22bc>)
 80034fe:	f006 fddb 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003502:	4603      	mov	r3, r0
 8003504:	2b01      	cmp	r3, #1
 8003506:	d115      	bne.n	8003534 <menu+0x2148>
 8003508:	4b68      	ldr	r3, [pc, #416]	@ (80036ac <menu+0x22c0>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	f083 0301 	eor.w	r3, r3, #1
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00e      	beq.n	8003534 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003516:	4b61      	ldr	r3, [pc, #388]	@ (800369c <menu+0x22b0>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4b5f      	ldr	r3, [pc, #380]	@ (800369c <menu+0x22b0>)
 8003520:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003522:	4b5e      	ldr	r3, [pc, #376]	@ (800369c <menu+0x22b0>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2bb4      	cmp	r3, #180	@ 0xb4
 8003528:	d902      	bls.n	8003530 <menu+0x2144>
				makineCalismaTmr = 0;
 800352a:	4b5c      	ldr	r3, [pc, #368]	@ (800369c <menu+0x22b0>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003530:	f000 fc8a 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003534:	2104      	movs	r1, #4
 8003536:	485c      	ldr	r0, [pc, #368]	@ (80036a8 <menu+0x22bc>)
 8003538:	f006 fdbe 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800353c:	4603      	mov	r3, r0
 800353e:	2b01      	cmp	r3, #1
 8003540:	d115      	bne.n	800356e <menu+0x2182>
 8003542:	4b5a      	ldr	r3, [pc, #360]	@ (80036ac <menu+0x22c0>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	f083 0301 	eor.w	r3, r3, #1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003550:	4b52      	ldr	r3, [pc, #328]	@ (800369c <menu+0x22b0>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	3b01      	subs	r3, #1
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b50      	ldr	r3, [pc, #320]	@ (800369c <menu+0x22b0>)
 800355a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800355c:	4b4f      	ldr	r3, [pc, #316]	@ (800369c <menu+0x22b0>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2bb5      	cmp	r3, #181	@ 0xb5
 8003562:	d902      	bls.n	800356a <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003564:	4b4d      	ldr	r3, [pc, #308]	@ (800369c <menu+0x22b0>)
 8003566:	22b4      	movs	r2, #180	@ 0xb4
 8003568:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800356a:	f000 fc6d 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800356e:	2108      	movs	r1, #8
 8003570:	484d      	ldr	r0, [pc, #308]	@ (80036a8 <menu+0x22bc>)
 8003572:	f006 fda1 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d10d      	bne.n	8003598 <menu+0x21ac>
 800357c:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <menu+0x22c0>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f083 0301 	eor.w	r3, r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 800358a:	4b44      	ldr	r3, [pc, #272]	@ (800369c <menu+0x22b0>)
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	4b48      	ldr	r3, [pc, #288]	@ (80036b0 <menu+0x22c4>)
 8003590:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003592:	4b48      	ldr	r3, [pc, #288]	@ (80036b4 <menu+0x22c8>)
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003598:	4b47      	ldr	r3, [pc, #284]	@ (80036b8 <menu+0x22cc>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b1b      	cmp	r3, #27
 800359e:	d166      	bne.n	800366e <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 80035a0:	4a46      	ldr	r2, [pc, #280]	@ (80036bc <menu+0x22d0>)
 80035a2:	2101      	movs	r1, #1
 80035a4:	2001      	movs	r0, #1
 80035a6:	f005 fa5d 	bl	8008a64 <lcd_print>

		if(buzzer == 0) {
 80035aa:	4b45      	ldr	r3, [pc, #276]	@ (80036c0 <menu+0x22d4>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 80035b2:	4a44      	ldr	r2, [pc, #272]	@ (80036c4 <menu+0x22d8>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	2002      	movs	r0, #2
 80035b8:	f005 fa54 	bl	8008a64 <lcd_print>
 80035bc:	e008      	b.n	80035d0 <menu+0x21e4>
		} else if(buzzer == 1) {
 80035be:	4b40      	ldr	r3, [pc, #256]	@ (80036c0 <menu+0x22d4>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d104      	bne.n	80035d0 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 80035c6:	4a40      	ldr	r2, [pc, #256]	@ (80036c8 <menu+0x22dc>)
 80035c8:	2101      	movs	r1, #1
 80035ca:	2002      	movs	r0, #2
 80035cc:	f005 fa4a 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035d0:	2102      	movs	r1, #2
 80035d2:	4835      	ldr	r0, [pc, #212]	@ (80036a8 <menu+0x22bc>)
 80035d4:	f006 fd70 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d115      	bne.n	800360a <menu+0x221e>
 80035de:	4b33      	ldr	r3, [pc, #204]	@ (80036ac <menu+0x22c0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	f083 0301 	eor.w	r3, r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <menu+0x221e>
			buzzer = buzzer + 1;
 80035ec:	4b34      	ldr	r3, [pc, #208]	@ (80036c0 <menu+0x22d4>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	4b32      	ldr	r3, [pc, #200]	@ (80036c0 <menu+0x22d4>)
 80035f6:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80035f8:	4b31      	ldr	r3, [pc, #196]	@ (80036c0 <menu+0x22d4>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d902      	bls.n	8003606 <menu+0x221a>
				buzzer = 0;
 8003600:	4b2f      	ldr	r3, [pc, #188]	@ (80036c0 <menu+0x22d4>)
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003606:	f000 fc1f 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800360a:	2104      	movs	r1, #4
 800360c:	4826      	ldr	r0, [pc, #152]	@ (80036a8 <menu+0x22bc>)
 800360e:	f006 fd53 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003612:	4603      	mov	r3, r0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d115      	bne.n	8003644 <menu+0x2258>
 8003618:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <menu+0x22c0>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f083 0301 	eor.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00e      	beq.n	8003644 <menu+0x2258>
			buzzer = buzzer - 1;
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <menu+0x22d4>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	3b01      	subs	r3, #1
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b24      	ldr	r3, [pc, #144]	@ (80036c0 <menu+0x22d4>)
 8003630:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003632:	4b23      	ldr	r3, [pc, #140]	@ (80036c0 <menu+0x22d4>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <menu+0x2254>
		   		buzzer = 1;
 800363a:	4b21      	ldr	r3, [pc, #132]	@ (80036c0 <menu+0x22d4>)
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003640:	f000 fc02 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003644:	2108      	movs	r1, #8
 8003646:	4818      	ldr	r0, [pc, #96]	@ (80036a8 <menu+0x22bc>)
 8003648:	f006 fd36 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800364c:	4603      	mov	r3, r0
 800364e:	2b01      	cmp	r3, #1
 8003650:	d10d      	bne.n	800366e <menu+0x2282>
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <menu+0x22c0>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f083 0301 	eor.w	r3, r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d006      	beq.n	800366e <menu+0x2282>
			eepromData[25] = buzzer;
 8003660:	4b17      	ldr	r3, [pc, #92]	@ (80036c0 <menu+0x22d4>)
 8003662:	781a      	ldrb	r2, [r3, #0]
 8003664:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <menu+0x22c4>)
 8003666:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003668:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <menu+0x22c8>)
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800366e:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <menu+0x22cc>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b1c      	cmp	r3, #28
 8003674:	f040 8088 	bne.w	8003788 <menu+0x239c>
		calismaSayModu = 0;
 8003678:	4b14      	ldr	r3, [pc, #80]	@ (80036cc <menu+0x22e0>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800367e:	4a14      	ldr	r2, [pc, #80]	@ (80036d0 <menu+0x22e4>)
 8003680:	2101      	movs	r1, #1
 8003682:	2001      	movs	r0, #1
 8003684:	f005 f9ee 	bl	8008a64 <lcd_print>

		if(demoMode == 0) {
 8003688:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <menu+0x22e8>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d123      	bne.n	80036d8 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003690:	4a0c      	ldr	r2, [pc, #48]	@ (80036c4 <menu+0x22d8>)
 8003692:	2101      	movs	r1, #1
 8003694:	2002      	movs	r0, #2
 8003696:	f005 f9e5 	bl	8008a64 <lcd_print>
 800369a:	e026      	b.n	80036ea <menu+0x22fe>
 800369c:	200010dc 	.word	0x200010dc
 80036a0:	200014cc 	.word	0x200014cc
 80036a4:	20001060 	.word	0x20001060
 80036a8:	40010800 	.word	0x40010800
 80036ac:	200010f3 	.word	0x200010f3
 80036b0:	20000ff0 	.word	0x20000ff0
 80036b4:	200010f0 	.word	0x200010f0
 80036b8:	200010c4 	.word	0x200010c4
 80036bc:	2000012c 	.word	0x2000012c
 80036c0:	200010e0 	.word	0x200010e0
 80036c4:	200013a0 	.word	0x200013a0
 80036c8:	200013b4 	.word	0x200013b4
 80036cc:	200010e4 	.word	0x200010e4
 80036d0:	20000140 	.word	0x20000140
 80036d4:	200010e2 	.word	0x200010e2
		} else if(demoMode == 1) {
 80036d8:	4b61      	ldr	r3, [pc, #388]	@ (8003860 <menu+0x2474>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d104      	bne.n	80036ea <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 80036e0:	4a60      	ldr	r2, [pc, #384]	@ (8003864 <menu+0x2478>)
 80036e2:	2101      	movs	r1, #1
 80036e4:	2002      	movs	r0, #2
 80036e6:	f005 f9bd 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ea:	2102      	movs	r1, #2
 80036ec:	485e      	ldr	r0, [pc, #376]	@ (8003868 <menu+0x247c>)
 80036ee:	f006 fce3 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d115      	bne.n	8003724 <menu+0x2338>
 80036f8:	4b5c      	ldr	r3, [pc, #368]	@ (800386c <menu+0x2480>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	f083 0301 	eor.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <menu+0x2338>
			demoMode = demoMode + 1;
 8003706:	4b56      	ldr	r3, [pc, #344]	@ (8003860 <menu+0x2474>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b54      	ldr	r3, [pc, #336]	@ (8003860 <menu+0x2474>)
 8003710:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003712:	4b53      	ldr	r3, [pc, #332]	@ (8003860 <menu+0x2474>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d902      	bls.n	8003720 <menu+0x2334>
				demoMode = 0;
 800371a:	4b51      	ldr	r3, [pc, #324]	@ (8003860 <menu+0x2474>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003720:	f000 fb92 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003724:	2104      	movs	r1, #4
 8003726:	4850      	ldr	r0, [pc, #320]	@ (8003868 <menu+0x247c>)
 8003728:	f006 fcc6 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800372c:	4603      	mov	r3, r0
 800372e:	2b01      	cmp	r3, #1
 8003730:	d115      	bne.n	800375e <menu+0x2372>
 8003732:	4b4e      	ldr	r3, [pc, #312]	@ (800386c <menu+0x2480>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	f083 0301 	eor.w	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <menu+0x2372>
			demoMode = demoMode - 1;
 8003740:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <menu+0x2474>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	3b01      	subs	r3, #1
 8003746:	b2da      	uxtb	r2, r3
 8003748:	4b45      	ldr	r3, [pc, #276]	@ (8003860 <menu+0x2474>)
 800374a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800374c:	4b44      	ldr	r3, [pc, #272]	@ (8003860 <menu+0x2474>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <menu+0x236e>
		   		demoMode = 1;
 8003754:	4b42      	ldr	r3, [pc, #264]	@ (8003860 <menu+0x2474>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800375a:	f000 fb75 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800375e:	2108      	movs	r1, #8
 8003760:	4841      	ldr	r0, [pc, #260]	@ (8003868 <menu+0x247c>)
 8003762:	f006 fca9 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10d      	bne.n	8003788 <menu+0x239c>
 800376c:	4b3f      	ldr	r3, [pc, #252]	@ (800386c <menu+0x2480>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <menu+0x239c>
			eepromData[26] = demoMode;
 800377a:	4b39      	ldr	r3, [pc, #228]	@ (8003860 <menu+0x2474>)
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	4b3c      	ldr	r3, [pc, #240]	@ (8003870 <menu+0x2484>)
 8003780:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003782:	4b3c      	ldr	r3, [pc, #240]	@ (8003874 <menu+0x2488>)
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003788:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <menu+0x248c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b1d      	cmp	r3, #29
 800378e:	f040 810c 	bne.w	80039aa <menu+0x25be>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003792:	4b3a      	ldr	r3, [pc, #232]	@ (800387c <menu+0x2490>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d113      	bne.n	80037c2 <menu+0x23d6>
 800379a:	4b39      	ldr	r3, [pc, #228]	@ (8003880 <menu+0x2494>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <menu+0x23d6>
 80037a2:	4b38      	ldr	r3, [pc, #224]	@ (8003884 <menu+0x2498>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <menu+0x23d6>
 80037aa:	4b37      	ldr	r3, [pc, #220]	@ (8003888 <menu+0x249c>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d107      	bne.n	80037c2 <menu+0x23d6>
 80037b2:	4b36      	ldr	r3, [pc, #216]	@ (800388c <menu+0x24a0>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <menu+0x23d6>
			calismaSayisiYar = 0;
 80037ba:	4b35      	ldr	r3, [pc, #212]	@ (8003890 <menu+0x24a4>)
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e002      	b.n	80037c8 <menu+0x23dc>
		} else {
			calismaSayisiYar = 1;
 80037c2:	4b33      	ldr	r3, [pc, #204]	@ (8003890 <menu+0x24a4>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80037c8:	4b32      	ldr	r3, [pc, #200]	@ (8003894 <menu+0x24a8>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d169      	bne.n	80038a4 <menu+0x24b8>
			lcd_print(1, 1, calismaSayisiText);
 80037d0:	4a31      	ldr	r2, [pc, #196]	@ (8003898 <menu+0x24ac>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	2001      	movs	r0, #1
 80037d6:	f005 f945 	bl	8008a64 <lcd_print>

			itoa(calismaSayisi10000, snum, 10);
 80037da:	4b2c      	ldr	r3, [pc, #176]	@ (800388c <menu+0x24a0>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	220a      	movs	r2, #10
 80037e0:	492e      	ldr	r1, [pc, #184]	@ (800389c <menu+0x24b0>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f009 fc94 	bl	800d110 <itoa>
			lcd_print(2, 12, snum);
 80037e8:	4a2c      	ldr	r2, [pc, #176]	@ (800389c <menu+0x24b0>)
 80037ea:	210c      	movs	r1, #12
 80037ec:	2002      	movs	r0, #2
 80037ee:	f005 f939 	bl	8008a64 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80037f2:	4b25      	ldr	r3, [pc, #148]	@ (8003888 <menu+0x249c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	220a      	movs	r2, #10
 80037f8:	4928      	ldr	r1, [pc, #160]	@ (800389c <menu+0x24b0>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f009 fc88 	bl	800d110 <itoa>
			lcd_print(2, 13, snum);
 8003800:	4a26      	ldr	r2, [pc, #152]	@ (800389c <menu+0x24b0>)
 8003802:	210d      	movs	r1, #13
 8003804:	2002      	movs	r0, #2
 8003806:	f005 f92d 	bl	8008a64 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800380a:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <menu+0x2498>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	220a      	movs	r2, #10
 8003810:	4922      	ldr	r1, [pc, #136]	@ (800389c <menu+0x24b0>)
 8003812:	4618      	mov	r0, r3
 8003814:	f009 fc7c 	bl	800d110 <itoa>
			lcd_print(2, 14, snum);
 8003818:	4a20      	ldr	r2, [pc, #128]	@ (800389c <menu+0x24b0>)
 800381a:	210e      	movs	r1, #14
 800381c:	2002      	movs	r0, #2
 800381e:	f005 f921 	bl	8008a64 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8003822:	4b17      	ldr	r3, [pc, #92]	@ (8003880 <menu+0x2494>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	220a      	movs	r2, #10
 8003828:	491c      	ldr	r1, [pc, #112]	@ (800389c <menu+0x24b0>)
 800382a:	4618      	mov	r0, r3
 800382c:	f009 fc70 	bl	800d110 <itoa>
			lcd_print(2, 15, snum);
 8003830:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <menu+0x24b0>)
 8003832:	210f      	movs	r1, #15
 8003834:	2002      	movs	r0, #2
 8003836:	f005 f915 	bl	8008a64 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800383a:	4b10      	ldr	r3, [pc, #64]	@ (800387c <menu+0x2490>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	220a      	movs	r2, #10
 8003840:	4916      	ldr	r1, [pc, #88]	@ (800389c <menu+0x24b0>)
 8003842:	4618      	mov	r0, r3
 8003844:	f009 fc64 	bl	800d110 <itoa>
			lcd_print(2, 16, snum);
 8003848:	4a14      	ldr	r2, [pc, #80]	@ (800389c <menu+0x24b0>)
 800384a:	2110      	movs	r1, #16
 800384c:	2002      	movs	r0, #2
 800384e:	f005 f909 	bl	8008a64 <lcd_print>

			lcd_print(2, 1, "           ");
 8003852:	4a13      	ldr	r2, [pc, #76]	@ (80038a0 <menu+0x24b4>)
 8003854:	2101      	movs	r1, #1
 8003856:	2002      	movs	r0, #2
 8003858:	f005 f904 	bl	8008a64 <lcd_print>
 800385c:	e030      	b.n	80038c0 <menu+0x24d4>
 800385e:	bf00      	nop
 8003860:	200010e2 	.word	0x200010e2
 8003864:	200013b4 	.word	0x200013b4
 8003868:	40010800 	.word	0x40010800
 800386c:	200010f3 	.word	0x200010f3
 8003870:	20000ff0 	.word	0x20000ff0
 8003874:	200010f0 	.word	0x200010f0
 8003878:	200010c4 	.word	0x200010c4
 800387c:	200010c1 	.word	0x200010c1
 8003880:	200010c2 	.word	0x200010c2
 8003884:	20000000 	.word	0x20000000
 8003888:	20000001 	.word	0x20000001
 800388c:	200010c3 	.word	0x200010c3
 8003890:	20001105 	.word	0x20001105
 8003894:	200010e4 	.word	0x200010e4
 8003898:	20001710 	.word	0x20001710
 800389c:	20001060 	.word	0x20001060
 80038a0:	0800de24 	.word	0x0800de24
		} else if(calismaSayModu == 1) {
 80038a4:	4b82      	ldr	r3, [pc, #520]	@ (8003ab0 <menu+0x26c4>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d109      	bne.n	80038c0 <menu+0x24d4>
			lcd_print(1, 1, calismaSayisiText);
 80038ac:	4a81      	ldr	r2, [pc, #516]	@ (8003ab4 <menu+0x26c8>)
 80038ae:	2101      	movs	r1, #1
 80038b0:	2001      	movs	r0, #1
 80038b2:	f005 f8d7 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80038b6:	4a80      	ldr	r2, [pc, #512]	@ (8003ab8 <menu+0x26cc>)
 80038b8:	2101      	movs	r1, #1
 80038ba:	2002      	movs	r0, #2
 80038bc:	f005 f8d2 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80038c0:	2102      	movs	r1, #2
 80038c2:	487e      	ldr	r0, [pc, #504]	@ (8003abc <menu+0x26d0>)
 80038c4:	f006 fbf8 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d119      	bne.n	8003902 <menu+0x2516>
 80038ce:	4b7c      	ldr	r3, [pc, #496]	@ (8003ac0 <menu+0x26d4>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	f083 0301 	eor.w	r3, r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d012      	beq.n	8003902 <menu+0x2516>
 80038dc:	4b79      	ldr	r3, [pc, #484]	@ (8003ac4 <menu+0x26d8>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00e      	beq.n	8003902 <menu+0x2516>
			calismaSayModu = calismaSayModu + 1;
 80038e4:	4b72      	ldr	r3, [pc, #456]	@ (8003ab0 <menu+0x26c4>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b70      	ldr	r3, [pc, #448]	@ (8003ab0 <menu+0x26c4>)
 80038ee:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80038f0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab0 <menu+0x26c4>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d902      	bls.n	80038fe <menu+0x2512>
				calismaSayModu = 0;
 80038f8:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab0 <menu+0x26c4>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038fe:	f000 faa3 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003902:	2104      	movs	r1, #4
 8003904:	486d      	ldr	r0, [pc, #436]	@ (8003abc <menu+0x26d0>)
 8003906:	f006 fbd7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d119      	bne.n	8003944 <menu+0x2558>
 8003910:	4b6b      	ldr	r3, [pc, #428]	@ (8003ac0 <menu+0x26d4>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	f083 0301 	eor.w	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <menu+0x2558>
 800391e:	4b69      	ldr	r3, [pc, #420]	@ (8003ac4 <menu+0x26d8>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00e      	beq.n	8003944 <menu+0x2558>
			calismaSayModu = calismaSayModu - 1;
 8003926:	4b62      	ldr	r3, [pc, #392]	@ (8003ab0 <menu+0x26c4>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	3b01      	subs	r3, #1
 800392c:	b2da      	uxtb	r2, r3
 800392e:	4b60      	ldr	r3, [pc, #384]	@ (8003ab0 <menu+0x26c4>)
 8003930:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003932:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab0 <menu+0x26c4>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <menu+0x2554>
		   		calismaSayModu = 1;
 800393a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ab0 <menu+0x26c4>)
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003940:	f000 fa82 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003944:	2108      	movs	r1, #8
 8003946:	485d      	ldr	r0, [pc, #372]	@ (8003abc <menu+0x26d0>)
 8003948:	f006 fbb6 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800394c:	4603      	mov	r3, r0
 800394e:	2b01      	cmp	r3, #1
 8003950:	d12b      	bne.n	80039aa <menu+0x25be>
 8003952:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac0 <menu+0x26d4>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	f083 0301 	eor.w	r3, r3, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d024      	beq.n	80039aa <menu+0x25be>
			eepromData[32] = 0;
 8003960:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <menu+0x26dc>)
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003968:	4b57      	ldr	r3, [pc, #348]	@ (8003ac8 <menu+0x26dc>)
 800396a:	2200      	movs	r2, #0
 800396c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800396e:	4b56      	ldr	r3, [pc, #344]	@ (8003ac8 <menu+0x26dc>)
 8003970:	2200      	movs	r2, #0
 8003972:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003974:	4b54      	ldr	r3, [pc, #336]	@ (8003ac8 <menu+0x26dc>)
 8003976:	2200      	movs	r2, #0
 8003978:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800397a:	4b53      	ldr	r3, [pc, #332]	@ (8003ac8 <menu+0x26dc>)
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003980:	4b52      	ldr	r3, [pc, #328]	@ (8003acc <menu+0x26e0>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8003986:	4b52      	ldr	r3, [pc, #328]	@ (8003ad0 <menu+0x26e4>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800398c:	4b51      	ldr	r3, [pc, #324]	@ (8003ad4 <menu+0x26e8>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003992:	4b51      	ldr	r3, [pc, #324]	@ (8003ad8 <menu+0x26ec>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8003998:	4b50      	ldr	r3, [pc, #320]	@ (8003adc <menu+0x26f0>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800399e:	4b44      	ldr	r3, [pc, #272]	@ (8003ab0 <menu+0x26c4>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80039a4:	4b4e      	ldr	r3, [pc, #312]	@ (8003ae0 <menu+0x26f4>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80039aa:	4b4e      	ldr	r3, [pc, #312]	@ (8003ae4 <menu+0x26f8>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b1e      	cmp	r3, #30
 80039b0:	d166      	bne.n	8003a80 <menu+0x2694>
		calismaSayModu = 0;
 80039b2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab0 <menu+0x26c4>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80039b8:	4a4b      	ldr	r2, [pc, #300]	@ (8003ae8 <menu+0x26fc>)
 80039ba:	2101      	movs	r1, #1
 80039bc:	2001      	movs	r0, #1
 80039be:	f005 f851 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80039c2:	4a4a      	ldr	r2, [pc, #296]	@ (8003aec <menu+0x2700>)
 80039c4:	2101      	movs	r1, #1
 80039c6:	2002      	movs	r0, #2
 80039c8:	f005 f84c 	bl	8008a64 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039cc:	2102      	movs	r1, #2
 80039ce:	483b      	ldr	r0, [pc, #236]	@ (8003abc <menu+0x26d0>)
 80039d0:	f006 fb72 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d11a      	bne.n	8003a10 <menu+0x2624>
 80039da:	4b39      	ldr	r3, [pc, #228]	@ (8003ac0 <menu+0x26d4>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	f083 0301 	eor.w	r3, r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <menu+0x2624>
			dilSecim = dilSecim + 1;
 80039e8:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <menu+0x2704>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	4b3f      	ldr	r3, [pc, #252]	@ (8003af0 <menu+0x2704>)
 80039f2:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80039f4:	4b3e      	ldr	r3, [pc, #248]	@ (8003af0 <menu+0x2704>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d902      	bls.n	8003a02 <menu+0x2616>
				dilSecim = 0;
 80039fc:	4b3c      	ldr	r3, [pc, #240]	@ (8003af0 <menu+0x2704>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 8003a02:	4b3b      	ldr	r3, [pc, #236]	@ (8003af0 <menu+0x2704>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f002 fb0e 	bl	8006028 <loadMenuTexts>

			bekle();
 8003a0c:	f000 fa1c 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a10:	2104      	movs	r1, #4
 8003a12:	482a      	ldr	r0, [pc, #168]	@ (8003abc <menu+0x26d0>)
 8003a14:	f006 fb50 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d11a      	bne.n	8003a54 <menu+0x2668>
 8003a1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ac0 <menu+0x26d4>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	f083 0301 	eor.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <menu+0x2668>
			dilSecim = dilSecim - 1;
 8003a2c:	4b30      	ldr	r3, [pc, #192]	@ (8003af0 <menu+0x2704>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	4b2e      	ldr	r3, [pc, #184]	@ (8003af0 <menu+0x2704>)
 8003a36:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003a38:	4b2d      	ldr	r3, [pc, #180]	@ (8003af0 <menu+0x2704>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <menu+0x265a>
		   		dilSecim = 1;
 8003a40:	4b2b      	ldr	r3, [pc, #172]	@ (8003af0 <menu+0x2704>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 8003a46:	4b2a      	ldr	r3, [pc, #168]	@ (8003af0 <menu+0x2704>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f002 faec 	bl	8006028 <loadMenuTexts>

			bekle();
 8003a50:	f000 f9fa 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a54:	2108      	movs	r1, #8
 8003a56:	4819      	ldr	r0, [pc, #100]	@ (8003abc <menu+0x26d0>)
 8003a58:	f006 fb2e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10e      	bne.n	8003a80 <menu+0x2694>
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <menu+0x26d4>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	f083 0301 	eor.w	r3, r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <menu+0x2694>
			eepromData[33] = dilSecim;
 8003a70:	4b1f      	ldr	r3, [pc, #124]	@ (8003af0 <menu+0x2704>)
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	4b14      	ldr	r3, [pc, #80]	@ (8003ac8 <menu+0x26dc>)
 8003a76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003a7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ae0 <menu+0x26f4>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003a80:	4b18      	ldr	r3, [pc, #96]	@ (8003ae4 <menu+0x26f8>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b1f      	cmp	r3, #31
 8003a86:	f040 8094 	bne.w	8003bb2 <menu+0x27c6>
		calismaSayModu = 0;
 8003a8a:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <menu+0x26c4>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003a90:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <menu+0x2708>)
 8003a92:	2101      	movs	r1, #1
 8003a94:	2001      	movs	r0, #1
 8003a96:	f004 ffe5 	bl	8008a64 <lcd_print>

		if(iotMode == 0) {
 8003a9a:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <menu+0x270c>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d12e      	bne.n	8003b00 <menu+0x2714>
			lcd_print(2, 1, pasifText);
 8003aa2:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <menu+0x2710>)
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	2002      	movs	r0, #2
 8003aa8:	f004 ffdc 	bl	8008a64 <lcd_print>
 8003aac:	e031      	b.n	8003b12 <menu+0x2726>
 8003aae:	bf00      	nop
 8003ab0:	200010e4 	.word	0x200010e4
 8003ab4:	20001710 	.word	0x20001710
 8003ab8:	20001724 	.word	0x20001724
 8003abc:	40010800 	.word	0x40010800
 8003ac0:	200010f3 	.word	0x200010f3
 8003ac4:	20001105 	.word	0x20001105
 8003ac8:	20000ff0 	.word	0x20000ff0
 8003acc:	200010c3 	.word	0x200010c3
 8003ad0:	20000001 	.word	0x20000001
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	200010c2 	.word	0x200010c2
 8003adc:	200010c1 	.word	0x200010c1
 8003ae0:	200010f0 	.word	0x200010f0
 8003ae4:	200010c4 	.word	0x200010c4
 8003ae8:	20001738 	.word	0x20001738
 8003aec:	2000174c 	.word	0x2000174c
 8003af0:	200010e5 	.word	0x200010e5
 8003af4:	20000154 	.word	0x20000154
 8003af8:	200010e3 	.word	0x200010e3
 8003afc:	200013a0 	.word	0x200013a0
		} else if(iotMode == 1) {
 8003b00:	4b90      	ldr	r3, [pc, #576]	@ (8003d44 <menu+0x2958>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d104      	bne.n	8003b12 <menu+0x2726>
			lcd_print(2, 1, aktifText);
 8003b08:	4a8f      	ldr	r2, [pc, #572]	@ (8003d48 <menu+0x295c>)
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	2002      	movs	r0, #2
 8003b0e:	f004 ffa9 	bl	8008a64 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b12:	2102      	movs	r1, #2
 8003b14:	488d      	ldr	r0, [pc, #564]	@ (8003d4c <menu+0x2960>)
 8003b16:	f006 facf 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d115      	bne.n	8003b4c <menu+0x2760>
 8003b20:	4b8b      	ldr	r3, [pc, #556]	@ (8003d50 <menu+0x2964>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	f083 0301 	eor.w	r3, r3, #1
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00e      	beq.n	8003b4c <menu+0x2760>
			iotMode = iotMode + 1;
 8003b2e:	4b85      	ldr	r3, [pc, #532]	@ (8003d44 <menu+0x2958>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b83      	ldr	r3, [pc, #524]	@ (8003d44 <menu+0x2958>)
 8003b38:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003b3a:	4b82      	ldr	r3, [pc, #520]	@ (8003d44 <menu+0x2958>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d902      	bls.n	8003b48 <menu+0x275c>
				iotMode = 0;
 8003b42:	4b80      	ldr	r3, [pc, #512]	@ (8003d44 <menu+0x2958>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003b48:	f000 f97e 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	487f      	ldr	r0, [pc, #508]	@ (8003d4c <menu+0x2960>)
 8003b50:	f006 fab2 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d115      	bne.n	8003b86 <menu+0x279a>
 8003b5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d50 <menu+0x2964>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	f083 0301 	eor.w	r3, r3, #1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <menu+0x279a>
			iotMode = iotMode - 1;
 8003b68:	4b76      	ldr	r3, [pc, #472]	@ (8003d44 <menu+0x2958>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	4b74      	ldr	r3, [pc, #464]	@ (8003d44 <menu+0x2958>)
 8003b72:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003b74:	4b73      	ldr	r3, [pc, #460]	@ (8003d44 <menu+0x2958>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <menu+0x2796>
		   		iotMode = 1;
 8003b7c:	4b71      	ldr	r3, [pc, #452]	@ (8003d44 <menu+0x2958>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003b82:	f000 f961 	bl	8003e48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b86:	2108      	movs	r1, #8
 8003b88:	4870      	ldr	r0, [pc, #448]	@ (8003d4c <menu+0x2960>)
 8003b8a:	f006 fa95 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10e      	bne.n	8003bb2 <menu+0x27c6>
 8003b94:	4b6e      	ldr	r3, [pc, #440]	@ (8003d50 <menu+0x2964>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f083 0301 	eor.w	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <menu+0x27c6>
			eepromData[48] = iotMode;
 8003ba2:	4b68      	ldr	r3, [pc, #416]	@ (8003d44 <menu+0x2958>)
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8003d54 <menu+0x2968>)
 8003ba8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003bac:	4b6a      	ldr	r3, [pc, #424]	@ (8003d58 <menu+0x296c>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d5c <menu+0x2970>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d122      	bne.n	8003c00 <menu+0x2814>
		calismaSayModu = 0;
 8003bba:	4b69      	ldr	r3, [pc, #420]	@ (8003d60 <menu+0x2974>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7fc fdbd 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003bc6:	2032      	movs	r0, #50	@ 0x32
 8003bc8:	f005 fca6 	bl	8009518 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f7fd fb7d 	bl	80012cc <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	485d      	ldr	r0, [pc, #372]	@ (8003d4c <menu+0x2960>)
 8003bd6:	f006 fa6f 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10f      	bne.n	8003c00 <menu+0x2814>
 8003be0:	2104      	movs	r1, #4
 8003be2:	485a      	ldr	r0, [pc, #360]	@ (8003d4c <menu+0x2960>)
 8003be4:	f006 fa68 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d108      	bne.n	8003c00 <menu+0x2814>
 8003bee:	4b58      	ldr	r3, [pc, #352]	@ (8003d50 <menu+0x2964>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	f083 0301 	eor.w	r3, r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <menu+0x2814>
			takeMachineIDWithConfirmation();
 8003bfc:	f003 fe9a 	bl	8007934 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003c00:	4b56      	ldr	r3, [pc, #344]	@ (8003d5c <menu+0x2970>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b21      	cmp	r3, #33	@ 0x21
 8003c06:	d12b      	bne.n	8003c60 <menu+0x2874>
		calismaSayModu = 0;
 8003c08:	4b55      	ldr	r3, [pc, #340]	@ (8003d60 <menu+0x2974>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003c0e:	2002      	movs	r0, #2
 8003c10:	f7fc fd96 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003c14:	2032      	movs	r0, #50	@ 0x32
 8003c16:	f005 fc7f 	bl	8009518 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003c1a:	2002      	movs	r0, #2
 8003c1c:	f7fd fb56 	bl	80012cc <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c20:	2102      	movs	r1, #2
 8003c22:	484a      	ldr	r0, [pc, #296]	@ (8003d4c <menu+0x2960>)
 8003c24:	f006 fa48 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d118      	bne.n	8003c60 <menu+0x2874>
 8003c2e:	2104      	movs	r1, #4
 8003c30:	4846      	ldr	r0, [pc, #280]	@ (8003d4c <menu+0x2960>)
 8003c32:	f006 fa41 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d111      	bne.n	8003c60 <menu+0x2874>
 8003c3c:	4b44      	ldr	r3, [pc, #272]	@ (8003d50 <menu+0x2964>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	f083 0301 	eor.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <menu+0x2874>
			takeWifiSSID();
 8003c4a:	f004 f899 	bl	8007d80 <takeWifiSSID>

			convertArrays(2);
 8003c4e:	2002      	movs	r0, #2
 8003c50:	f7fc fd76 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003c54:	2032      	movs	r0, #50	@ 0x32
 8003c56:	f005 fc5f 	bl	8009518 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003c5a:	2002      	movs	r0, #2
 8003c5c:	f7fd fb36 	bl	80012cc <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003c60:	4b3e      	ldr	r3, [pc, #248]	@ (8003d5c <menu+0x2970>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b22      	cmp	r3, #34	@ 0x22
 8003c66:	d12b      	bne.n	8003cc0 <menu+0x28d4>
		calismaSayModu = 0;
 8003c68:	4b3d      	ldr	r3, [pc, #244]	@ (8003d60 <menu+0x2974>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003c6e:	2003      	movs	r0, #3
 8003c70:	f7fc fd66 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003c74:	2032      	movs	r0, #50	@ 0x32
 8003c76:	f005 fc4f 	bl	8009518 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	f7fd fb26 	bl	80012cc <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c80:	2102      	movs	r1, #2
 8003c82:	4832      	ldr	r0, [pc, #200]	@ (8003d4c <menu+0x2960>)
 8003c84:	f006 fa18 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d118      	bne.n	8003cc0 <menu+0x28d4>
 8003c8e:	2104      	movs	r1, #4
 8003c90:	482e      	ldr	r0, [pc, #184]	@ (8003d4c <menu+0x2960>)
 8003c92:	f006 fa11 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d111      	bne.n	8003cc0 <menu+0x28d4>
 8003c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d50 <menu+0x2964>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f083 0301 	eor.w	r3, r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <menu+0x28d4>
			takeWifiPass();
 8003caa:	f004 fa35 	bl	8008118 <takeWifiPass>

			convertArrays(3);
 8003cae:	2003      	movs	r0, #3
 8003cb0:	f7fc fd46 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003cb4:	2032      	movs	r0, #50	@ 0x32
 8003cb6:	f005 fc2f 	bl	8009518 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003cba:	2003      	movs	r0, #3
 8003cbc:	f7fd fb06 	bl	80012cc <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003cc0:	4b26      	ldr	r3, [pc, #152]	@ (8003d5c <menu+0x2970>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b23      	cmp	r3, #35	@ 0x23
 8003cc6:	d13a      	bne.n	8003d3e <menu+0x2952>
		lcd_print(1, 1, menudenCikisText);
 8003cc8:	4a26      	ldr	r2, [pc, #152]	@ (8003d64 <menu+0x2978>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f004 fec9 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003cd2:	4a25      	ldr	r2, [pc, #148]	@ (8003d68 <menu+0x297c>)
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f004 fec4 	bl	8008a64 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003cdc:	2108      	movs	r1, #8
 8003cde:	481b      	ldr	r0, [pc, #108]	@ (8003d4c <menu+0x2960>)
 8003ce0:	f006 f9ea 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d129      	bne.n	8003d3e <menu+0x2952>
			menuGiris = 0;
 8003cea:	4b20      	ldr	r3, [pc, #128]	@ (8003d6c <menu+0x2980>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003cf0:	bf00      	nop
 8003cf2:	481f      	ldr	r0, [pc, #124]	@ (8003d70 <menu+0x2984>)
 8003cf4:	f007 f809 	bl	800ad0a <HAL_I2C_GetError>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d0f9      	beq.n	8003cf2 <menu+0x2906>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003cfe:	bf00      	nop
 8003d00:	481b      	ldr	r0, [pc, #108]	@ (8003d70 <menu+0x2984>)
 8003d02:	f006 fff5 	bl	800acf0 <HAL_I2C_GetState>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d1f9      	bne.n	8003d00 <menu+0x2914>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003d0c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003d10:	9302      	str	r3, [sp, #8]
 8003d12:	236e      	movs	r3, #110	@ 0x6e
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	4b0f      	ldr	r3, [pc, #60]	@ (8003d54 <menu+0x2968>)
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	236e      	movs	r3, #110	@ 0x6e
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	21a0      	movs	r1, #160	@ 0xa0
 8003d20:	4813      	ldr	r0, [pc, #76]	@ (8003d70 <menu+0x2984>)
 8003d22:	f006 fc83 	bl	800a62c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003d26:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003d2a:	f005 fbf5 	bl	8009518 <HAL_Delay>

			lcd_clear();
 8003d2e:	f004 fec5 	bl	8008abc <lcd_clear>
			HAL_Delay(500);
 8003d32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d36:	f005 fbef 	bl	8009518 <HAL_Delay>
			NVIC_SystemReset();
 8003d3a:	f7fd fb41 	bl	80013c0 <__NVIC_SystemReset>
		}
	}
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200010e3 	.word	0x200010e3
 8003d48:	200013b4 	.word	0x200013b4
 8003d4c:	40010800 	.word	0x40010800
 8003d50:	200010f3 	.word	0x200010f3
 8003d54:	20000ff0 	.word	0x20000ff0
 8003d58:	200010f0 	.word	0x200010f0
 8003d5c:	200010c4 	.word	0x200010c4
 8003d60:	200010e4 	.word	0x200010e4
 8003d64:	20001760 	.word	0x20001760
 8003d68:	20001774 	.word	0x20001774
 8003d6c:	200010e1 	.word	0x200010e1
 8003d70:	20001940 	.word	0x20001940

08003d74 <lcdUpdate>:
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d105      	bne.n	8003d90 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003d84:	4a22      	ldr	r2, [pc, #136]	@ (8003e10 <lcdUpdate+0x9c>)
 8003d86:	2101      	movs	r1, #1
 8003d88:	2002      	movs	r0, #2
 8003d8a:	f004 fe6b 	bl	8008a64 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003d8e:	e03b      	b.n	8003e08 <lcdUpdate+0x94>
	} else if(y==2) {
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d105      	bne.n	8003da2 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003d96:	4a1e      	ldr	r2, [pc, #120]	@ (8003e10 <lcdUpdate+0x9c>)
 8003d98:	2102      	movs	r1, #2
 8003d9a:	2002      	movs	r0, #2
 8003d9c:	f004 fe62 	bl	8008a64 <lcd_print>
}
 8003da0:	e032      	b.n	8003e08 <lcdUpdate+0x94>
	} else if(y==3) {
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d105      	bne.n	8003db4 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003da8:	4a19      	ldr	r2, [pc, #100]	@ (8003e10 <lcdUpdate+0x9c>)
 8003daa:	2103      	movs	r1, #3
 8003dac:	2002      	movs	r0, #2
 8003dae:	f004 fe59 	bl	8008a64 <lcd_print>
}
 8003db2:	e029      	b.n	8003e08 <lcdUpdate+0x94>
	} else if(y==4) {
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d105      	bne.n	8003dc6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003dba:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <lcdUpdate+0x9c>)
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f004 fe50 	bl	8008a64 <lcd_print>
}
 8003dc4:	e020      	b.n	8003e08 <lcdUpdate+0x94>
	} else if(y==5) {
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d105      	bne.n	8003dd8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003dcc:	4a10      	ldr	r2, [pc, #64]	@ (8003e10 <lcdUpdate+0x9c>)
 8003dce:	2105      	movs	r1, #5
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f004 fe47 	bl	8008a64 <lcd_print>
}
 8003dd6:	e017      	b.n	8003e08 <lcdUpdate+0x94>
	} else if(y==6) {
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d105      	bne.n	8003dea <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003dde:	4a0c      	ldr	r2, [pc, #48]	@ (8003e10 <lcdUpdate+0x9c>)
 8003de0:	2106      	movs	r1, #6
 8003de2:	2002      	movs	r0, #2
 8003de4:	f004 fe3e 	bl	8008a64 <lcd_print>
}
 8003de8:	e00e      	b.n	8003e08 <lcdUpdate+0x94>
	} else if (y==7) {
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	2b07      	cmp	r3, #7
 8003dee:	d10b      	bne.n	8003e08 <lcdUpdate+0x94>
		lcd_clear();
 8003df0:	f004 fe64 	bl	8008abc <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003df4:	4a07      	ldr	r2, [pc, #28]	@ (8003e14 <lcdUpdate+0xa0>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f004 fe33 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003dfe:	4a06      	ldr	r2, [pc, #24]	@ (8003e18 <lcdUpdate+0xa4>)
 8003e00:	2101      	movs	r1, #1
 8003e02:	2002      	movs	r0, #2
 8003e04:	f004 fe2e 	bl	8008a64 <lcd_print>
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	0800de30 	.word	0x0800de30
 8003e14:	200000c8 	.word	0x200000c8
 8003e18:	200000dc 	.word	0x200000dc

08003e1c <checkLCDBacklight>:

void checkLCDBacklight() {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003e20:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <checkLCDBacklight+0x24>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <checkLCDBacklight+0x28>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b3b      	cmp	r3, #59	@ 0x3b
 8003e2c:	d903      	bls.n	8003e36 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f004 fe64 	bl	8008afc <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003e34:	e002      	b.n	8003e3c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003e36:	2001      	movs	r0, #1
 8003e38:	f004 fe60 	bl	8008afc <lcd_backlight>
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200010a0 	.word	0x200010a0
 8003e44:	200010bc 	.word	0x200010bc

08003e48 <bekle>:

void bekle() {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	timer1=millis;
 8003e4c:	4b47      	ldr	r3, [pc, #284]	@ (8003f6c <bekle+0x124>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a47      	ldr	r2, [pc, #284]	@ (8003f70 <bekle+0x128>)
 8003e52:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e54:	e002      	b.n	8003e5c <bekle+0x14>
    	butonKontrol = 1;
 8003e56:	4b47      	ldr	r3, [pc, #284]	@ (8003f74 <bekle+0x12c>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4846      	ldr	r0, [pc, #280]	@ (8003f78 <bekle+0x130>)
 8003e60:	f006 f92a 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d109      	bne.n	8003e7e <bekle+0x36>
 8003e6a:	4b40      	ldr	r3, [pc, #256]	@ (8003f6c <bekle+0x124>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b40      	ldr	r3, [pc, #256]	@ (8003f70 <bekle+0x128>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d0ef      	beq.n	8003e56 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e76:	e002      	b.n	8003e7e <bekle+0x36>
    	butonKontrol = 1;
 8003e78:	4b3e      	ldr	r3, [pc, #248]	@ (8003f74 <bekle+0x12c>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e7e:	2108      	movs	r1, #8
 8003e80:	483e      	ldr	r0, [pc, #248]	@ (8003f7c <bekle+0x134>)
 8003e82:	f006 f919 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d109      	bne.n	8003ea0 <bekle+0x58>
 8003e8c:	4b37      	ldr	r3, [pc, #220]	@ (8003f6c <bekle+0x124>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b37      	ldr	r3, [pc, #220]	@ (8003f70 <bekle+0x128>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d0ef      	beq.n	8003e78 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e98:	e002      	b.n	8003ea0 <bekle+0x58>
    	butonKontrol = 1;
 8003e9a:	4b36      	ldr	r3, [pc, #216]	@ (8003f74 <bekle+0x12c>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	4835      	ldr	r0, [pc, #212]	@ (8003f78 <bekle+0x130>)
 8003ea4:	f006 f908 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d109      	bne.n	8003ec2 <bekle+0x7a>
 8003eae:	4b2f      	ldr	r3, [pc, #188]	@ (8003f6c <bekle+0x124>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f70 <bekle+0x128>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d0ef      	beq.n	8003e9a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003eba:	e002      	b.n	8003ec2 <bekle+0x7a>
    	butonKontrol = 1;
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8003f74 <bekle+0x12c>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	482c      	ldr	r0, [pc, #176]	@ (8003f78 <bekle+0x130>)
 8003ec6:	f006 f8f7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d109      	bne.n	8003ee4 <bekle+0x9c>
 8003ed0:	4b26      	ldr	r3, [pc, #152]	@ (8003f6c <bekle+0x124>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b26      	ldr	r3, [pc, #152]	@ (8003f70 <bekle+0x128>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d0ef      	beq.n	8003ebc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003edc:	e002      	b.n	8003ee4 <bekle+0x9c>
    	butonKontrol = 1;
 8003ede:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <bekle+0x12c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ee4:	2108      	movs	r1, #8
 8003ee6:	4824      	ldr	r0, [pc, #144]	@ (8003f78 <bekle+0x130>)
 8003ee8:	f006 f8e6 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d109      	bne.n	8003f06 <bekle+0xbe>
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f6c <bekle+0x124>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <bekle+0x128>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d0ef      	beq.n	8003ede <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003efe:	e002      	b.n	8003f06 <bekle+0xbe>
    	butonKontrol = 1;
 8003f00:	4b1c      	ldr	r3, [pc, #112]	@ (8003f74 <bekle+0x12c>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003f06:	2180      	movs	r1, #128	@ 0x80
 8003f08:	481c      	ldr	r0, [pc, #112]	@ (8003f7c <bekle+0x134>)
 8003f0a:	f006 f8d5 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <bekle+0xe0>
 8003f14:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <bekle+0x124>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <bekle+0x128>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d0ef      	beq.n	8003f00 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003f20:	e002      	b.n	8003f28 <bekle+0xe0>
    	butonKontrol = 1;
 8003f22:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <bekle+0x12c>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003f28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f2c:	4813      	ldr	r0, [pc, #76]	@ (8003f7c <bekle+0x134>)
 8003f2e:	f006 f8c3 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <bekle+0x104>
 8003f38:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <bekle+0x124>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <bekle+0x128>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d0ee      	beq.n	8003f22 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003f44:	e002      	b.n	8003f4c <bekle+0x104>
    	butonKontrol = 1;
 8003f46:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <bekle+0x12c>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003f4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f50:	480a      	ldr	r0, [pc, #40]	@ (8003f7c <bekle+0x134>)
 8003f52:	f006 f8b1 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <bekle+0x120>
 8003f5c:	4b03      	ldr	r3, [pc, #12]	@ (8003f6c <bekle+0x124>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b03      	ldr	r3, [pc, #12]	@ (8003f70 <bekle+0x128>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d0ee      	beq.n	8003f46 <bekle+0xfe>
    }

}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	200010a0 	.word	0x200010a0
 8003f70:	200010a8 	.word	0x200010a8
 8003f74:	200010f3 	.word	0x200010f3
 8003f78:	40010800 	.word	0x40010800
 8003f7c:	40011000 	.word	0x40011000

08003f80 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003f84:	2101      	movs	r1, #1
 8003f86:	4815      	ldr	r0, [pc, #84]	@ (8003fdc <buttonCheck+0x5c>)
 8003f88:	f006 f896 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d01b      	beq.n	8003fca <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003f92:	2108      	movs	r1, #8
 8003f94:	4812      	ldr	r0, [pc, #72]	@ (8003fe0 <buttonCheck+0x60>)
 8003f96:	f006 f88f 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d014      	beq.n	8003fca <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	480e      	ldr	r0, [pc, #56]	@ (8003fdc <buttonCheck+0x5c>)
 8003fa4:	f006 f888 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00d      	beq.n	8003fca <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003fae:	2104      	movs	r1, #4
 8003fb0:	480a      	ldr	r0, [pc, #40]	@ (8003fdc <buttonCheck+0x5c>)
 8003fb2:	f006 f881 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d006      	beq.n	8003fca <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003fbc:	2108      	movs	r1, #8
 8003fbe:	4807      	ldr	r0, [pc, #28]	@ (8003fdc <buttonCheck+0x5c>)
 8003fc0:	f006 f87a 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d104      	bne.n	8003fd4 <buttonCheck+0x54>
		backLightTimer = 0;
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <buttonCheck+0x64>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
		return 1;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <buttonCheck+0x56>
	}
	return 0;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40010800 	.word	0x40010800
 8003fe0:	40011000 	.word	0x40011000
 8003fe4:	200010bc 	.word	0x200010bc

08003fe8 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003fec:	4b13      	ldr	r3, [pc, #76]	@ (800403c <checkBasincSalteri+0x54>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <checkBasincSalteri+0x12>
		basincVar=1;
 8003ff4:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <checkBasincSalteri+0x58>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003ffa:	4b10      	ldr	r3, [pc, #64]	@ (800403c <checkBasincSalteri+0x54>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d119      	bne.n	8004036 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004002:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004006:	480f      	ldr	r0, [pc, #60]	@ (8004044 <checkBasincSalteri+0x5c>)
 8004008:	f006 f856 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <checkBasincSalteri+0x60>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <checkBasincSalteri+0x64>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d90a      	bls.n	8004036 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004020:	4b07      	ldr	r3, [pc, #28]	@ (8004040 <checkBasincSalteri+0x58>)
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004026:	e006      	b.n	8004036 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004028:	4b07      	ldr	r3, [pc, #28]	@ (8004048 <checkBasincSalteri+0x60>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a07      	ldr	r2, [pc, #28]	@ (800404c <checkBasincSalteri+0x64>)
 800402e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <checkBasincSalteri+0x58>)
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200010cb 	.word	0x200010cb
 8004040:	200010c7 	.word	0x200010c7
 8004044:	40011000 	.word	0x40011000
 8004048:	200010a0 	.word	0x200010a0
 800404c:	200010b8 	.word	0x200010b8

08004050 <checkBasGonder>:

void checkBasGonder() {
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004054:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <checkBasGonder+0x74>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d10b      	bne.n	8004074 <checkBasGonder+0x24>
 800405c:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <checkBasGonder+0x78>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <checkBasGonder+0x24>
 8004064:	4b19      	ldr	r3, [pc, #100]	@ (80040cc <checkBasGonder+0x7c>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800406c:	4b18      	ldr	r3, [pc, #96]	@ (80040d0 <checkBasGonder+0x80>)
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e009      	b.n	8004088 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004074:	4b14      	ldr	r3, [pc, #80]	@ (80040c8 <checkBasGonder+0x78>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	f083 0301 	eor.w	r3, r3, #1
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004082:	4b13      	ldr	r3, [pc, #76]	@ (80040d0 <checkBasGonder+0x80>)
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004088:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <checkBasGonder+0x74>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d10b      	bne.n	80040a8 <checkBasGonder+0x58>
 8004090:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <checkBasGonder+0x84>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <checkBasGonder+0x58>
 8004098:	4b0c      	ldr	r3, [pc, #48]	@ (80040cc <checkBasGonder+0x7c>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80040a0:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <checkBasGonder+0x88>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80040a6:	e009      	b.n	80040bc <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80040a8:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <checkBasGonder+0x84>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f083 0301 	eor.w	r3, r3, #1
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80040b6:	4b08      	ldr	r3, [pc, #32]	@ (80040d8 <checkBasGonder+0x88>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	200010c5 	.word	0x200010c5
 80040c8:	200010f9 	.word	0x200010f9
 80040cc:	200010d3 	.word	0x200010d3
 80040d0:	20001100 	.word	0x20001100
 80040d4:	200010fc 	.word	0x200010fc
 80040d8:	20001101 	.word	0x20001101

080040dc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80040e0:	4b24      	ldr	r3, [pc, #144]	@ (8004174 <checkKapiSecimleri+0x98>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80040e8:	4b23      	ldr	r3, [pc, #140]	@ (8004178 <checkKapiSecimleri+0x9c>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80040ee:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <checkKapiSecimleri+0x98>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10e      	bne.n	8004114 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80040f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040fa:	4820      	ldr	r0, [pc, #128]	@ (800417c <checkKapiSecimleri+0xa0>)
 80040fc:	f005 ffdc 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004106:	4b1c      	ldr	r3, [pc, #112]	@ (8004178 <checkKapiSecimleri+0x9c>)
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	e002      	b.n	8004114 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800410e:	4b1a      	ldr	r3, [pc, #104]	@ (8004178 <checkKapiSecimleri+0x9c>)
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004114:	4b17      	ldr	r3, [pc, #92]	@ (8004174 <checkKapiSecimleri+0x98>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d10e      	bne.n	800413a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800411c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004120:	4816      	ldr	r0, [pc, #88]	@ (800417c <checkKapiSecimleri+0xa0>)
 8004122:	f005 ffc9 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d103      	bne.n	8004134 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800412c:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <checkKapiSecimleri+0x9c>)
 800412e:	2201      	movs	r2, #1
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e002      	b.n	800413a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004134:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <checkKapiSecimleri+0x9c>)
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800413a:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <checkKapiSecimleri+0x98>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b03      	cmp	r3, #3
 8004140:	d116      	bne.n	8004170 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004142:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004146:	480d      	ldr	r0, [pc, #52]	@ (800417c <checkKapiSecimleri+0xa0>)
 8004148:	f005 ffb6 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <checkKapiSecimleri+0x8e>
 8004152:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004156:	4809      	ldr	r0, [pc, #36]	@ (800417c <checkKapiSecimleri+0xa0>)
 8004158:	f005 ffae 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004162:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <checkKapiSecimleri+0x9c>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004168:	e002      	b.n	8004170 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800416a:	4b03      	ldr	r3, [pc, #12]	@ (8004178 <checkKapiSecimleri+0x9c>)
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
}
 8004170:	bf00      	nop
 8004172:	bd80      	pop	{r7, pc}
 8004174:	200010cc 	.word	0x200010cc
 8004178:	20001117 	.word	0x20001117
 800417c:	40010800 	.word	0x40010800

08004180 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004184:	4b62      	ldr	r3, [pc, #392]	@ (8004310 <checkAktifCalisma+0x190>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f041 833e 	bne.w	800580a <checkAktifCalisma+0x168a>
 800418e:	4b61      	ldr	r3, [pc, #388]	@ (8004314 <checkAktifCalisma+0x194>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f041 8339 	bne.w	800580a <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004198:	4b5f      	ldr	r3, [pc, #380]	@ (8004318 <checkAktifCalisma+0x198>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d11a      	bne.n	80041d6 <checkAktifCalisma+0x56>
 80041a0:	4b5e      	ldr	r3, [pc, #376]	@ (800431c <checkAktifCalisma+0x19c>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d116      	bne.n	80041d6 <checkAktifCalisma+0x56>
 80041a8:	4b5d      	ldr	r3, [pc, #372]	@ (8004320 <checkAktifCalisma+0x1a0>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <checkAktifCalisma+0x46>
 80041b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004324 <checkAktifCalisma+0x1a4>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <checkAktifCalisma+0x46>
 80041be:	4b5a      	ldr	r3, [pc, #360]	@ (8004328 <checkAktifCalisma+0x1a8>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d007      	beq.n	80041d6 <checkAktifCalisma+0x56>
 80041c6:	4b59      	ldr	r3, [pc, #356]	@ (800432c <checkAktifCalisma+0x1ac>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <checkAktifCalisma+0x80>
 80041ce:	4b58      	ldr	r3, [pc, #352]	@ (8004330 <checkAktifCalisma+0x1b0>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d114      	bne.n	8004200 <checkAktifCalisma+0x80>
 80041d6:	4b57      	ldr	r3, [pc, #348]	@ (8004334 <checkAktifCalisma+0x1b4>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d010      	beq.n	8004200 <checkAktifCalisma+0x80>
 80041de:	4b56      	ldr	r3, [pc, #344]	@ (8004338 <checkAktifCalisma+0x1b8>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00c      	beq.n	8004200 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80041e6:	2201      	movs	r2, #1
 80041e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041ec:	4853      	ldr	r0, [pc, #332]	@ (800433c <checkAktifCalisma+0x1bc>)
 80041ee:	f005 ff7a 	bl	800a0e6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80041f2:	4b53      	ldr	r3, [pc, #332]	@ (8004340 <checkAktifCalisma+0x1c0>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80041f8:	4b52      	ldr	r3, [pc, #328]	@ (8004344 <checkAktifCalisma+0x1c4>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e008      	b.n	8004212 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004206:	484d      	ldr	r0, [pc, #308]	@ (800433c <checkAktifCalisma+0x1bc>)
 8004208:	f005 ff6d 	bl	800a0e6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 800420c:	4b4c      	ldr	r3, [pc, #304]	@ (8004340 <checkAktifCalisma+0x1c0>)
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004212:	4b40      	ldr	r3, [pc, #256]	@ (8004314 <checkAktifCalisma+0x194>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d160      	bne.n	80042dc <checkAktifCalisma+0x15c>
 800421a:	4b46      	ldr	r3, [pc, #280]	@ (8004334 <checkAktifCalisma+0x1b4>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d05c      	beq.n	80042dc <checkAktifCalisma+0x15c>
 8004222:	4b45      	ldr	r3, [pc, #276]	@ (8004338 <checkAktifCalisma+0x1b8>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d058      	beq.n	80042dc <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800422a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800422e:	4843      	ldr	r0, [pc, #268]	@ (800433c <checkAktifCalisma+0x1bc>)
 8004230:	f005 ff42 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <checkAktifCalisma+0xc2>
 800423a:	4b43      	ldr	r3, [pc, #268]	@ (8004348 <checkAktifCalisma+0x1c8>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d04c      	beq.n	80042dc <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004242:	2102      	movs	r1, #2
 8004244:	4841      	ldr	r0, [pc, #260]	@ (800434c <checkAktifCalisma+0x1cc>)
 8004246:	f005 ff37 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d145      	bne.n	80042dc <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004250:	4b3f      	ldr	r3, [pc, #252]	@ (8004350 <checkAktifCalisma+0x1d0>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d041      	beq.n	80042dc <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004258:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800425c:	4837      	ldr	r0, [pc, #220]	@ (800433c <checkAktifCalisma+0x1bc>)
 800425e:	f005 ff2b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004262:	4603      	mov	r3, r0
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10e      	bne.n	8004286 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004268:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800426c:	4833      	ldr	r0, [pc, #204]	@ (800433c <checkAktifCalisma+0x1bc>)
 800426e:	f005 ff23 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004272:	4603      	mov	r3, r0
 8004274:	2b01      	cmp	r3, #1
 8004276:	d106      	bne.n	8004286 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004278:	2140      	movs	r1, #64	@ 0x40
 800427a:	4834      	ldr	r0, [pc, #208]	@ (800434c <checkAktifCalisma+0x1cc>)
 800427c:	f005 ff1c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004280:	4603      	mov	r3, r0
 8004282:	2b01      	cmp	r3, #1
 8004284:	d003      	beq.n	800428e <checkAktifCalisma+0x10e>
 8004286:	4b24      	ldr	r3, [pc, #144]	@ (8004318 <checkAktifCalisma+0x198>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d026      	beq.n	80042dc <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800428e:	4b24      	ldr	r3, [pc, #144]	@ (8004320 <checkAktifCalisma+0x1a0>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	f083 0301 	eor.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01f      	beq.n	80042dc <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 800429c:	4b1f      	ldr	r3, [pc, #124]	@ (800431c <checkAktifCalisma+0x19c>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	f083 0301 	eor.w	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d018      	beq.n	80042dc <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80042aa:	4b20      	ldr	r3, [pc, #128]	@ (800432c <checkAktifCalisma+0x1ac>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	f083 0301 	eor.w	r3, r3, #1
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d011      	beq.n	80042dc <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80042b8:	4b26      	ldr	r3, [pc, #152]	@ (8004354 <checkAktifCalisma+0x1d4>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	f083 0301 	eor.w	r3, r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80042c6:	4b24      	ldr	r3, [pc, #144]	@ (8004358 <checkAktifCalisma+0x1d8>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	f083 0301 	eor.w	r3, r3, #1
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80042d4:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <checkAktifCalisma+0x198>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e002      	b.n	80042e2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80042dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <checkAktifCalisma+0x198>)
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <checkAktifCalisma+0x198>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d03a      	beq.n	8004360 <checkAktifCalisma+0x1e0>
 80042ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042ee:	4817      	ldr	r0, [pc, #92]	@ (800434c <checkAktifCalisma+0x1cc>)
 80042f0:	f005 fee2 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d132      	bne.n	8004360 <checkAktifCalisma+0x1e0>
 80042fa:	4b18      	ldr	r3, [pc, #96]	@ (800435c <checkAktifCalisma+0x1dc>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02e      	beq.n	8004360 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004302:	2201      	movs	r2, #1
 8004304:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004308:	480c      	ldr	r0, [pc, #48]	@ (800433c <checkAktifCalisma+0x1bc>)
 800430a:	f005 feec 	bl	800a0e6 <HAL_GPIO_WritePin>
 800430e:	e02d      	b.n	800436c <checkAktifCalisma+0x1ec>
 8004310:	200010e2 	.word	0x200010e2
 8004314:	200010e1 	.word	0x200010e1
 8004318:	200010f9 	.word	0x200010f9
 800431c:	200010fa 	.word	0x200010fa
 8004320:	200010fc 	.word	0x200010fc
 8004324:	200010f4 	.word	0x200010f4
 8004328:	200010d7 	.word	0x200010d7
 800432c:	200010fb 	.word	0x200010fb
 8004330:	200010d6 	.word	0x200010d6
 8004334:	20001116 	.word	0x20001116
 8004338:	20001117 	.word	0x20001117
 800433c:	40010c00 	.word	0x40010c00
 8004340:	20001118 	.word	0x20001118
 8004344:	20001103 	.word	0x20001103
 8004348:	20001100 	.word	0x20001100
 800434c:	40011000 	.word	0x40011000
 8004350:	200010c7 	.word	0x200010c7
 8004354:	200010fe 	.word	0x200010fe
 8004358:	200010ff 	.word	0x200010ff
 800435c:	200010d2 	.word	0x200010d2
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004360:	2200      	movs	r2, #0
 8004362:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004366:	4860      	ldr	r0, [pc, #384]	@ (80044e8 <checkAktifCalisma+0x368>)
 8004368:	f005 febd 	bl	800a0e6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800436c:	4b5f      	ldr	r3, [pc, #380]	@ (80044ec <checkAktifCalisma+0x36c>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <checkAktifCalisma+0x21c>
 8004374:	4b5e      	ldr	r3, [pc, #376]	@ (80044f0 <checkAktifCalisma+0x370>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d007      	beq.n	800438c <checkAktifCalisma+0x20c>
 800437c:	4b5c      	ldr	r3, [pc, #368]	@ (80044f0 <checkAktifCalisma+0x370>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d003      	beq.n	800438c <checkAktifCalisma+0x20c>
 8004384:	4b5b      	ldr	r3, [pc, #364]	@ (80044f4 <checkAktifCalisma+0x374>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800438c:	2201      	movs	r2, #1
 800438e:	2104      	movs	r1, #4
 8004390:	4855      	ldr	r0, [pc, #340]	@ (80044e8 <checkAktifCalisma+0x368>)
 8004392:	f005 fea8 	bl	800a0e6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004396:	4b58      	ldr	r3, [pc, #352]	@ (80044f8 <checkAktifCalisma+0x378>)
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800439c:	4b56      	ldr	r3, [pc, #344]	@ (80044f8 <checkAktifCalisma+0x378>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02f      	beq.n	8004404 <checkAktifCalisma+0x284>
 80043a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043a8:	484f      	ldr	r0, [pc, #316]	@ (80044e8 <checkAktifCalisma+0x368>)
 80043aa:	f005 fe85 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d106      	bne.n	80043c2 <checkAktifCalisma+0x242>
 80043b4:	4b51      	ldr	r3, [pc, #324]	@ (80044fc <checkAktifCalisma+0x37c>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	f083 0301 	eor.w	r3, r3, #1
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <checkAktifCalisma+0x250>
 80043c2:	2102      	movs	r1, #2
 80043c4:	484e      	ldr	r0, [pc, #312]	@ (8004500 <checkAktifCalisma+0x380>)
 80043c6:	f005 fe77 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d119      	bne.n	8004404 <checkAktifCalisma+0x284>
 80043d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004504 <checkAktifCalisma+0x384>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <checkAktifCalisma+0x284>
 80043d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004508 <checkAktifCalisma+0x388>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d011      	beq.n	8004404 <checkAktifCalisma+0x284>
 80043e0:	4b4a      	ldr	r3, [pc, #296]	@ (800450c <checkAktifCalisma+0x38c>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00d      	beq.n	8004404 <checkAktifCalisma+0x284>
 80043e8:	4b49      	ldr	r3, [pc, #292]	@ (8004510 <checkAktifCalisma+0x390>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	f083 0301 	eor.w	r3, r3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d006      	beq.n	8004404 <checkAktifCalisma+0x284>
			timer2=millis;
 80043f6:	4b47      	ldr	r3, [pc, #284]	@ (8004514 <checkAktifCalisma+0x394>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a47      	ldr	r2, [pc, #284]	@ (8004518 <checkAktifCalisma+0x398>)
 80043fc:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80043fe:	4b44      	ldr	r3, [pc, #272]	@ (8004510 <checkAktifCalisma+0x390>)
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004404:	4b43      	ldr	r3, [pc, #268]	@ (8004514 <checkAktifCalisma+0x394>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b43      	ldr	r3, [pc, #268]	@ (8004518 <checkAktifCalisma+0x398>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	4a43      	ldr	r2, [pc, #268]	@ (800451c <checkAktifCalisma+0x39c>)
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	4293      	cmp	r3, r2
 8004414:	d303      	bcc.n	800441e <checkAktifCalisma+0x29e>
 8004416:	4b3e      	ldr	r3, [pc, #248]	@ (8004510 <checkAktifCalisma+0x390>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d111      	bne.n	8004442 <checkAktifCalisma+0x2c2>
 800441e:	4b39      	ldr	r3, [pc, #228]	@ (8004504 <checkAktifCalisma+0x384>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	f083 0301 	eor.w	r3, r3, #1
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <checkAktifCalisma+0x2c2>
 800442c:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <checkAktifCalisma+0x388>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	f083 0301 	eor.w	r3, r3, #1
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <checkAktifCalisma+0x2c2>
 800443a:	4b34      	ldr	r3, [pc, #208]	@ (800450c <checkAktifCalisma+0x38c>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004442:	2200      	movs	r2, #0
 8004444:	2104      	movs	r1, #4
 8004446:	4828      	ldr	r0, [pc, #160]	@ (80044e8 <checkAktifCalisma+0x368>)
 8004448:	f005 fe4d 	bl	800a0e6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800444c:	4b2a      	ldr	r3, [pc, #168]	@ (80044f8 <checkAktifCalisma+0x378>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004452:	4b2f      	ldr	r3, [pc, #188]	@ (8004510 <checkAktifCalisma+0x390>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004458:	4b31      	ldr	r3, [pc, #196]	@ (8004520 <checkAktifCalisma+0x3a0>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004460:	4b30      	ldr	r3, [pc, #192]	@ (8004524 <checkAktifCalisma+0x3a4>)
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004466:	4b2e      	ldr	r3, [pc, #184]	@ (8004520 <checkAktifCalisma+0x3a0>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d116      	bne.n	800449c <checkAktifCalisma+0x31c>
 800446e:	4b2e      	ldr	r3, [pc, #184]	@ (8004528 <checkAktifCalisma+0x3a8>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d112      	bne.n	800449c <checkAktifCalisma+0x31c>
 8004476:	2101      	movs	r1, #1
 8004478:	4821      	ldr	r0, [pc, #132]	@ (8004500 <checkAktifCalisma+0x380>)
 800447a:	f005 fe1d 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <checkAktifCalisma+0x31c>
 8004484:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004488:	4817      	ldr	r0, [pc, #92]	@ (80044e8 <checkAktifCalisma+0x368>)
 800448a:	f005 fe15 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004494:	4b23      	ldr	r3, [pc, #140]	@ (8004524 <checkAktifCalisma+0x3a4>)
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e011      	b.n	80044c0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800449c:	4b20      	ldr	r3, [pc, #128]	@ (8004520 <checkAktifCalisma+0x3a0>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d10d      	bne.n	80044c0 <checkAktifCalisma+0x340>
 80044a4:	2101      	movs	r1, #1
 80044a6:	4816      	ldr	r0, [pc, #88]	@ (8004500 <checkAktifCalisma+0x380>)
 80044a8:	f005 fe06 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d106      	bne.n	80044c0 <checkAktifCalisma+0x340>
 80044b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004528 <checkAktifCalisma+0x3a8>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80044ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004524 <checkAktifCalisma+0x3a4>)
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80044c0:	4b17      	ldr	r3, [pc, #92]	@ (8004520 <checkAktifCalisma+0x3a0>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d134      	bne.n	8004532 <checkAktifCalisma+0x3b2>
 80044c8:	4b17      	ldr	r3, [pc, #92]	@ (8004528 <checkAktifCalisma+0x3a8>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d130      	bne.n	8004532 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80044d0:	2101      	movs	r1, #1
 80044d2:	480b      	ldr	r0, [pc, #44]	@ (8004500 <checkAktifCalisma+0x380>)
 80044d4:	f005 fdf0 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d126      	bne.n	800452c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80044de:	4b11      	ldr	r3, [pc, #68]	@ (8004524 <checkAktifCalisma+0x3a4>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e025      	b.n	8004532 <checkAktifCalisma+0x3b2>
 80044e6:	bf00      	nop
 80044e8:	40010c00 	.word	0x40010c00
 80044ec:	200010f9 	.word	0x200010f9
 80044f0:	200010d3 	.word	0x200010d3
 80044f4:	200010d7 	.word	0x200010d7
 80044f8:	200010fd 	.word	0x200010fd
 80044fc:	20001100 	.word	0x20001100
 8004500:	40011000 	.word	0x40011000
 8004504:	20001116 	.word	0x20001116
 8004508:	20001117 	.word	0x20001117
 800450c:	200010c7 	.word	0x200010c7
 8004510:	200010f5 	.word	0x200010f5
 8004514:	200010a0 	.word	0x200010a0
 8004518:	200010ac 	.word	0x200010ac
 800451c:	200010d8 	.word	0x200010d8
 8004520:	200010c8 	.word	0x200010c8
 8004524:	2000111b 	.word	0x2000111b
 8004528:	200010c5 	.word	0x200010c5
			} else {
				cerceveVar=0;
 800452c:	4b7f      	ldr	r3, [pc, #508]	@ (800472c <checkAktifCalisma+0x5ac>)
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004532:	4b7f      	ldr	r3, [pc, #508]	@ (8004730 <checkAktifCalisma+0x5b0>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d17c      	bne.n	8004634 <checkAktifCalisma+0x4b4>
 800453a:	4b7e      	ldr	r3, [pc, #504]	@ (8004734 <checkAktifCalisma+0x5b4>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d078      	beq.n	8004634 <checkAktifCalisma+0x4b4>
 8004542:	4b7d      	ldr	r3, [pc, #500]	@ (8004738 <checkAktifCalisma+0x5b8>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d074      	beq.n	8004634 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800454a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800454e:	487b      	ldr	r0, [pc, #492]	@ (800473c <checkAktifCalisma+0x5bc>)
 8004550:	f005 fdb2 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <checkAktifCalisma+0x3e2>
 800455a:	4b79      	ldr	r3, [pc, #484]	@ (8004740 <checkAktifCalisma+0x5c0>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d068      	beq.n	8004634 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004562:	4b72      	ldr	r3, [pc, #456]	@ (800472c <checkAktifCalisma+0x5ac>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d064      	beq.n	8004634 <checkAktifCalisma+0x4b4>
 800456a:	4b76      	ldr	r3, [pc, #472]	@ (8004744 <checkAktifCalisma+0x5c4>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	f083 0301 	eor.w	r3, r3, #1
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d05d      	beq.n	8004634 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004578:	2104      	movs	r1, #4
 800457a:	4873      	ldr	r0, [pc, #460]	@ (8004748 <checkAktifCalisma+0x5c8>)
 800457c:	f005 fd9c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <checkAktifCalisma+0x40e>
 8004586:	4b71      	ldr	r3, [pc, #452]	@ (800474c <checkAktifCalisma+0x5cc>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d152      	bne.n	8004634 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800458e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004592:	486a      	ldr	r0, [pc, #424]	@ (800473c <checkAktifCalisma+0x5bc>)
 8004594:	f005 fd90 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10e      	bne.n	80045bc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800459e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045a2:	4866      	ldr	r0, [pc, #408]	@ (800473c <checkAktifCalisma+0x5bc>)
 80045a4:	f005 fd88 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d106      	bne.n	80045bc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80045ae:	2140      	movs	r1, #64	@ 0x40
 80045b0:	4865      	ldr	r0, [pc, #404]	@ (8004748 <checkAktifCalisma+0x5c8>)
 80045b2:	f005 fd81 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d003      	beq.n	80045c4 <checkAktifCalisma+0x444>
 80045bc:	4b64      	ldr	r3, [pc, #400]	@ (8004750 <checkAktifCalisma+0x5d0>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d037      	beq.n	8004634 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80045c4:	4b63      	ldr	r3, [pc, #396]	@ (8004754 <checkAktifCalisma+0x5d4>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f083 0301 	eor.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d030      	beq.n	8004634 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80045d2:	4b61      	ldr	r3, [pc, #388]	@ (8004758 <checkAktifCalisma+0x5d8>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f083 0301 	eor.w	r3, r3, #1
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d029      	beq.n	8004634 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80045e0:	4b5e      	ldr	r3, [pc, #376]	@ (800475c <checkAktifCalisma+0x5dc>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	f083 0301 	eor.w	r3, r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d022      	beq.n	8004634 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80045ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004760 <checkAktifCalisma+0x5e0>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	f083 0301 	eor.w	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80045fc:	4b59      	ldr	r3, [pc, #356]	@ (8004764 <checkAktifCalisma+0x5e4>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	f083 0301 	eor.w	r3, r3, #1
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d014      	beq.n	8004634 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800460a:	4b57      	ldr	r3, [pc, #348]	@ (8004768 <checkAktifCalisma+0x5e8>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f083 0301 	eor.w	r3, r3, #1
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00d      	beq.n	8004634 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004618:	2201      	movs	r2, #1
 800461a:	2102      	movs	r1, #2
 800461c:	4847      	ldr	r0, [pc, #284]	@ (800473c <checkAktifCalisma+0x5bc>)
 800461e:	f005 fd62 	bl	800a0e6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8004622:	4b4b      	ldr	r3, [pc, #300]	@ (8004750 <checkAktifCalisma+0x5d0>)
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8004628:	4b50      	ldr	r3, [pc, #320]	@ (800476c <checkAktifCalisma+0x5ec>)
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800462e:	4b50      	ldr	r3, [pc, #320]	@ (8004770 <checkAktifCalisma+0x5f0>)
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004634:	4b46      	ldr	r3, [pc, #280]	@ (8004750 <checkAktifCalisma+0x5d0>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d033      	beq.n	80046a4 <checkAktifCalisma+0x524>
 800463c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004640:	483e      	ldr	r0, [pc, #248]	@ (800473c <checkAktifCalisma+0x5bc>)
 8004642:	f005 fd39 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004646:	4603      	mov	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	d106      	bne.n	800465a <checkAktifCalisma+0x4da>
 800464c:	4b3c      	ldr	r3, [pc, #240]	@ (8004740 <checkAktifCalisma+0x5c0>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f083 0301 	eor.w	r3, r3, #1
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <checkAktifCalisma+0x4f0>
 800465a:	2104      	movs	r1, #4
 800465c:	483a      	ldr	r0, [pc, #232]	@ (8004748 <checkAktifCalisma+0x5c8>)
 800465e:	f005 fd2b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d11d      	bne.n	80046a4 <checkAktifCalisma+0x524>
 8004668:	4b38      	ldr	r3, [pc, #224]	@ (800474c <checkAktifCalisma+0x5cc>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d019      	beq.n	80046a4 <checkAktifCalisma+0x524>
 8004670:	4b30      	ldr	r3, [pc, #192]	@ (8004734 <checkAktifCalisma+0x5b4>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <checkAktifCalisma+0x524>
 8004678:	4b2f      	ldr	r3, [pc, #188]	@ (8004738 <checkAktifCalisma+0x5b8>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d011      	beq.n	80046a4 <checkAktifCalisma+0x524>
 8004680:	4b2a      	ldr	r3, [pc, #168]	@ (800472c <checkAktifCalisma+0x5ac>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <checkAktifCalisma+0x524>
 8004688:	4b3a      	ldr	r3, [pc, #232]	@ (8004774 <checkAktifCalisma+0x5f4>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f083 0301 	eor.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <checkAktifCalisma+0x524>
			timer2=millis;
 8004696:	4b38      	ldr	r3, [pc, #224]	@ (8004778 <checkAktifCalisma+0x5f8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a38      	ldr	r2, [pc, #224]	@ (800477c <checkAktifCalisma+0x5fc>)
 800469c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800469e:	4b35      	ldr	r3, [pc, #212]	@ (8004774 <checkAktifCalisma+0x5f4>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80046a4:	4b34      	ldr	r3, [pc, #208]	@ (8004778 <checkAktifCalisma+0x5f8>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b34      	ldr	r3, [pc, #208]	@ (800477c <checkAktifCalisma+0x5fc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	4a34      	ldr	r2, [pc, #208]	@ (8004780 <checkAktifCalisma+0x600>)
 80046b0:	7812      	ldrb	r2, [r2, #0]
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d303      	bcc.n	80046be <checkAktifCalisma+0x53e>
 80046b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004774 <checkAktifCalisma+0x5f4>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d114      	bne.n	80046e8 <checkAktifCalisma+0x568>
 80046be:	4b1d      	ldr	r3, [pc, #116]	@ (8004734 <checkAktifCalisma+0x5b4>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	f083 0301 	eor.w	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <checkAktifCalisma+0x568>
 80046cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004738 <checkAktifCalisma+0x5b8>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f083 0301 	eor.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <checkAktifCalisma+0x568>
 80046da:	4b14      	ldr	r3, [pc, #80]	@ (800472c <checkAktifCalisma+0x5ac>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	f083 0301 	eor.w	r3, r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80046e8:	2200      	movs	r2, #0
 80046ea:	2102      	movs	r1, #2
 80046ec:	4813      	ldr	r0, [pc, #76]	@ (800473c <checkAktifCalisma+0x5bc>)
 80046ee:	f005 fcfa 	bl	800a0e6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80046f2:	4b17      	ldr	r3, [pc, #92]	@ (8004750 <checkAktifCalisma+0x5d0>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80046f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004774 <checkAktifCalisma+0x5f4>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80046fe:	4b14      	ldr	r3, [pc, #80]	@ (8004750 <checkAktifCalisma+0x5d0>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d040      	beq.n	8004788 <checkAktifCalisma+0x608>
 8004706:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800470a:	480f      	ldr	r0, [pc, #60]	@ (8004748 <checkAktifCalisma+0x5c8>)
 800470c:	f005 fcd4 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d138      	bne.n	8004788 <checkAktifCalisma+0x608>
 8004716:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <checkAktifCalisma+0x604>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d034      	beq.n	8004788 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800471e:	2201      	movs	r2, #1
 8004720:	2101      	movs	r1, #1
 8004722:	4806      	ldr	r0, [pc, #24]	@ (800473c <checkAktifCalisma+0x5bc>)
 8004724:	f005 fcdf 	bl	800a0e6 <HAL_GPIO_WritePin>
 8004728:	e033      	b.n	8004792 <checkAktifCalisma+0x612>
 800472a:	bf00      	nop
 800472c:	2000111b 	.word	0x2000111b
 8004730:	200010e1 	.word	0x200010e1
 8004734:	20001116 	.word	0x20001116
 8004738:	20001117 	.word	0x20001117
 800473c:	40010c00 	.word	0x40010c00
 8004740:	20001101 	.word	0x20001101
 8004744:	20001115 	.word	0x20001115
 8004748:	40011000 	.word	0x40011000
 800474c:	200010ca 	.word	0x200010ca
 8004750:	200010fc 	.word	0x200010fc
 8004754:	200010f9 	.word	0x200010f9
 8004758:	200010fd 	.word	0x200010fd
 800475c:	200010fa 	.word	0x200010fa
 8004760:	200010fb 	.word	0x200010fb
 8004764:	200010fe 	.word	0x200010fe
 8004768:	200010ff 	.word	0x200010ff
 800476c:	20001104 	.word	0x20001104
 8004770:	20001125 	.word	0x20001125
 8004774:	200010f4 	.word	0x200010f4
 8004778:	200010a0 	.word	0x200010a0
 800477c:	200010ac 	.word	0x200010ac
 8004780:	200010d9 	.word	0x200010d9
 8004784:	200010c9 	.word	0x200010c9
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004788:	2200      	movs	r2, #0
 800478a:	2101      	movs	r1, #1
 800478c:	4836      	ldr	r0, [pc, #216]	@ (8004868 <checkAktifCalisma+0x6e8>)
 800478e:	f005 fcaa 	bl	800a0e6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8004792:	4b36      	ldr	r3, [pc, #216]	@ (800486c <checkAktifCalisma+0x6ec>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 8080 	bne.w	800489c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800479c:	4b34      	ldr	r3, [pc, #208]	@ (8004870 <checkAktifCalisma+0x6f0>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d003      	beq.n	80047ac <checkAktifCalisma+0x62c>
 80047a4:	4b32      	ldr	r3, [pc, #200]	@ (8004870 <checkAktifCalisma+0x6f0>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d177      	bne.n	800489c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80047ac:	4b31      	ldr	r3, [pc, #196]	@ (8004874 <checkAktifCalisma+0x6f4>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d073      	beq.n	800489c <checkAktifCalisma+0x71c>
 80047b4:	4b30      	ldr	r3, [pc, #192]	@ (8004878 <checkAktifCalisma+0x6f8>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d06f      	beq.n	800489c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80047bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047c0:	4829      	ldr	r0, [pc, #164]	@ (8004868 <checkAktifCalisma+0x6e8>)
 80047c2:	f005 fc79 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d167      	bne.n	800489c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80047cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047d0:	482a      	ldr	r0, [pc, #168]	@ (800487c <checkAktifCalisma+0x6fc>)
 80047d2:	f005 fc71 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <checkAktifCalisma+0x664>
 80047dc:	4b28      	ldr	r3, [pc, #160]	@ (8004880 <checkAktifCalisma+0x700>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d15b      	bne.n	800489c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80047e4:	2140      	movs	r1, #64	@ 0x40
 80047e6:	4825      	ldr	r0, [pc, #148]	@ (800487c <checkAktifCalisma+0x6fc>)
 80047e8:	f005 fc66 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d10f      	bne.n	8004812 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80047f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047f6:	481c      	ldr	r0, [pc, #112]	@ (8004868 <checkAktifCalisma+0x6e8>)
 80047f8:	f005 fc5e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d107      	bne.n	8004812 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004802:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004806:	4818      	ldr	r0, [pc, #96]	@ (8004868 <checkAktifCalisma+0x6e8>)
 8004808:	f005 fc56 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800480c:	4603      	mov	r3, r0
 800480e:	2b01      	cmp	r3, #1
 8004810:	d003      	beq.n	800481a <checkAktifCalisma+0x69a>
 8004812:	4b1c      	ldr	r3, [pc, #112]	@ (8004884 <checkAktifCalisma+0x704>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d040      	beq.n	800489c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800481a:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <checkAktifCalisma+0x708>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	f083 0301 	eor.w	r3, r3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d039      	beq.n	800489c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8004828:	4b18      	ldr	r3, [pc, #96]	@ (800488c <checkAktifCalisma+0x70c>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	f083 0301 	eor.w	r3, r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d032      	beq.n	800489c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8004836:	4b16      	ldr	r3, [pc, #88]	@ (8004890 <checkAktifCalisma+0x710>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	f083 0301 	eor.w	r3, r3, #1
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d02b      	beq.n	800489c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8004844:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <checkAktifCalisma+0x714>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f083 0301 	eor.w	r3, r3, #1
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d024      	beq.n	800489c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8004852:	4b11      	ldr	r3, [pc, #68]	@ (8004898 <checkAktifCalisma+0x718>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	f083 0301 	eor.w	r3, r3, #1
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01d      	beq.n	800489c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8004860:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <checkAktifCalisma+0x704>)
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e01c      	b.n	80048a2 <checkAktifCalisma+0x722>
 8004868:	40010c00 	.word	0x40010c00
 800486c:	200010e1 	.word	0x200010e1
 8004870:	200010d3 	.word	0x200010d3
 8004874:	20001116 	.word	0x20001116
 8004878:	20001117 	.word	0x20001117
 800487c:	40011000 	.word	0x40011000
 8004880:	200010d4 	.word	0x200010d4
 8004884:	200010fa 	.word	0x200010fa
 8004888:	200010f9 	.word	0x200010f9
 800488c:	200010fd 	.word	0x200010fd
 8004890:	200010fc 	.word	0x200010fc
 8004894:	200010fb 	.word	0x200010fb
 8004898:	200010ff 	.word	0x200010ff
		} else {
			devmotoryukaricalisiyor=0;
 800489c:	4b64      	ldr	r3, [pc, #400]	@ (8004a30 <checkAktifCalisma+0x8b0>)
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80048a2:	4b63      	ldr	r3, [pc, #396]	@ (8004a30 <checkAktifCalisma+0x8b0>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80048aa:	2201      	movs	r2, #1
 80048ac:	2120      	movs	r1, #32
 80048ae:	4861      	ldr	r0, [pc, #388]	@ (8004a34 <checkAktifCalisma+0x8b4>)
 80048b0:	f005 fc19 	bl	800a0e6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80048b4:	4b60      	ldr	r3, [pc, #384]	@ (8004a38 <checkAktifCalisma+0x8b8>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80048ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004a38 <checkAktifCalisma+0x8b8>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d025      	beq.n	800490e <checkAktifCalisma+0x78e>
 80048c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048c6:	485d      	ldr	r0, [pc, #372]	@ (8004a3c <checkAktifCalisma+0x8bc>)
 80048c8:	f005 fbf6 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d007      	beq.n	80048e2 <checkAktifCalisma+0x762>
 80048d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80048d6:	4857      	ldr	r0, [pc, #348]	@ (8004a34 <checkAktifCalisma+0x8b4>)
 80048d8:	f005 fbee 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d115      	bne.n	800490e <checkAktifCalisma+0x78e>
 80048e2:	4b57      	ldr	r3, [pc, #348]	@ (8004a40 <checkAktifCalisma+0x8c0>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d011      	beq.n	800490e <checkAktifCalisma+0x78e>
 80048ea:	4b56      	ldr	r3, [pc, #344]	@ (8004a44 <checkAktifCalisma+0x8c4>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <checkAktifCalisma+0x78e>
 80048f2:	4b55      	ldr	r3, [pc, #340]	@ (8004a48 <checkAktifCalisma+0x8c8>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f083 0301 	eor.w	r3, r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <checkAktifCalisma+0x78e>
			timer2=millis;
 8004900:	4b52      	ldr	r3, [pc, #328]	@ (8004a4c <checkAktifCalisma+0x8cc>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a52      	ldr	r2, [pc, #328]	@ (8004a50 <checkAktifCalisma+0x8d0>)
 8004906:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8004908:	4b4f      	ldr	r3, [pc, #316]	@ (8004a48 <checkAktifCalisma+0x8c8>)
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800490e:	4b4f      	ldr	r3, [pc, #316]	@ (8004a4c <checkAktifCalisma+0x8cc>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b4f      	ldr	r3, [pc, #316]	@ (8004a50 <checkAktifCalisma+0x8d0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	4a4e      	ldr	r2, [pc, #312]	@ (8004a54 <checkAktifCalisma+0x8d4>)
 800491a:	7812      	ldrb	r2, [r2, #0]
 800491c:	4293      	cmp	r3, r2
 800491e:	d303      	bcc.n	8004928 <checkAktifCalisma+0x7a8>
 8004920:	4b49      	ldr	r3, [pc, #292]	@ (8004a48 <checkAktifCalisma+0x8c8>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10d      	bne.n	8004944 <checkAktifCalisma+0x7c4>
 8004928:	4b45      	ldr	r3, [pc, #276]	@ (8004a40 <checkAktifCalisma+0x8c0>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	f083 0301 	eor.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <checkAktifCalisma+0x7c4>
 8004936:	4b43      	ldr	r3, [pc, #268]	@ (8004a44 <checkAktifCalisma+0x8c4>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	f083 0301 	eor.w	r3, r3, #1
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004944:	2200      	movs	r2, #0
 8004946:	2120      	movs	r1, #32
 8004948:	483a      	ldr	r0, [pc, #232]	@ (8004a34 <checkAktifCalisma+0x8b4>)
 800494a:	f005 fbcc 	bl	800a0e6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800494e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a38 <checkAktifCalisma+0x8b8>)
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8004954:	4b3c      	ldr	r3, [pc, #240]	@ (8004a48 <checkAktifCalisma+0x8c8>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800495a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a58 <checkAktifCalisma+0x8d8>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	f040 8088 	bne.w	8004a74 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004964:	4b3d      	ldr	r3, [pc, #244]	@ (8004a5c <checkAktifCalisma+0x8dc>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d003      	beq.n	8004974 <checkAktifCalisma+0x7f4>
 800496c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <checkAktifCalisma+0x8dc>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d17f      	bne.n	8004a74 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8004974:	4b32      	ldr	r3, [pc, #200]	@ (8004a40 <checkAktifCalisma+0x8c0>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d07b      	beq.n	8004a74 <checkAktifCalisma+0x8f4>
 800497c:	4b31      	ldr	r3, [pc, #196]	@ (8004a44 <checkAktifCalisma+0x8c4>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d077      	beq.n	8004a74 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004984:	2140      	movs	r1, #64	@ 0x40
 8004986:	482b      	ldr	r0, [pc, #172]	@ (8004a34 <checkAktifCalisma+0x8b4>)
 8004988:	f005 fb96 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d170      	bne.n	8004a74 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004992:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004996:	4827      	ldr	r0, [pc, #156]	@ (8004a34 <checkAktifCalisma+0x8b4>)
 8004998:	f005 fb8e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <checkAktifCalisma+0x82a>
 80049a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a60 <checkAktifCalisma+0x8e0>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d164      	bne.n	8004a74 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80049aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049ae:	4823      	ldr	r0, [pc, #140]	@ (8004a3c <checkAktifCalisma+0x8bc>)
 80049b0:	f005 fb82 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10f      	bne.n	80049da <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80049ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049be:	481f      	ldr	r0, [pc, #124]	@ (8004a3c <checkAktifCalisma+0x8bc>)
 80049c0:	f005 fb7a 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d107      	bne.n	80049da <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80049ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049ce:	481b      	ldr	r0, [pc, #108]	@ (8004a3c <checkAktifCalisma+0x8bc>)
 80049d0:	f005 fb72 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d003      	beq.n	80049e2 <checkAktifCalisma+0x862>
 80049da:	4b22      	ldr	r3, [pc, #136]	@ (8004a64 <checkAktifCalisma+0x8e4>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d048      	beq.n	8004a74 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80049e2:	4b21      	ldr	r3, [pc, #132]	@ (8004a68 <checkAktifCalisma+0x8e8>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	f083 0301 	eor.w	r3, r3, #1
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d041      	beq.n	8004a74 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80049f0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a6c <checkAktifCalisma+0x8ec>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	f083 0301 	eor.w	r3, r3, #1
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d03a      	beq.n	8004a74 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80049fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004a70 <checkAktifCalisma+0x8f0>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	f083 0301 	eor.w	r3, r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d033      	beq.n	8004a74 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <checkAktifCalisma+0x8b8>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	f083 0301 	eor.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02c      	beq.n	8004a74 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8004a1a:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <checkAktifCalisma+0x8b0>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	f083 0301 	eor.w	r3, r3, #1
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d025      	beq.n	8004a74 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8004a28:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <checkAktifCalisma+0x8e4>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e024      	b.n	8004a7a <checkAktifCalisma+0x8fa>
 8004a30:	200010fa 	.word	0x200010fa
 8004a34:	40011000 	.word	0x40011000
 8004a38:	200010fe 	.word	0x200010fe
 8004a3c:	40010c00 	.word	0x40010c00
 8004a40:	20001116 	.word	0x20001116
 8004a44:	20001117 	.word	0x20001117
 8004a48:	200010f6 	.word	0x200010f6
 8004a4c:	200010a0 	.word	0x200010a0
 8004a50:	200010ac 	.word	0x200010ac
 8004a54:	200010da 	.word	0x200010da
 8004a58:	200010e1 	.word	0x200010e1
 8004a5c:	200010d3 	.word	0x200010d3
 8004a60:	200010d5 	.word	0x200010d5
 8004a64:	200010fb 	.word	0x200010fb
 8004a68:	200010f9 	.word	0x200010f9
 8004a6c:	200010fd 	.word	0x200010fd
 8004a70:	200010fc 	.word	0x200010fc
		} else {
			devmotorasagicalisiyor=0;
 8004a74:	4b96      	ldr	r3, [pc, #600]	@ (8004cd0 <checkAktifCalisma+0xb50>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8004a7a:	4b95      	ldr	r3, [pc, #596]	@ (8004cd0 <checkAktifCalisma+0xb50>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004a82:	2201      	movs	r2, #1
 8004a84:	2110      	movs	r1, #16
 8004a86:	4893      	ldr	r0, [pc, #588]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004a88:	f005 fb2d 	bl	800a0e6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8004a8c:	4b92      	ldr	r3, [pc, #584]	@ (8004cd8 <checkAktifCalisma+0xb58>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004a92:	4b91      	ldr	r3, [pc, #580]	@ (8004cd8 <checkAktifCalisma+0xb58>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d024      	beq.n	8004ae4 <checkAktifCalisma+0x964>
 8004a9a:	2140      	movs	r1, #64	@ 0x40
 8004a9c:	488d      	ldr	r0, [pc, #564]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004a9e:	f005 fb0b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d007      	beq.n	8004ab8 <checkAktifCalisma+0x938>
 8004aa8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004aac:	4889      	ldr	r0, [pc, #548]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004aae:	f005 fb03 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d115      	bne.n	8004ae4 <checkAktifCalisma+0x964>
 8004ab8:	4b88      	ldr	r3, [pc, #544]	@ (8004cdc <checkAktifCalisma+0xb5c>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d011      	beq.n	8004ae4 <checkAktifCalisma+0x964>
 8004ac0:	4b87      	ldr	r3, [pc, #540]	@ (8004ce0 <checkAktifCalisma+0xb60>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00d      	beq.n	8004ae4 <checkAktifCalisma+0x964>
 8004ac8:	4b86      	ldr	r3, [pc, #536]	@ (8004ce4 <checkAktifCalisma+0xb64>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f083 0301 	eor.w	r3, r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d006      	beq.n	8004ae4 <checkAktifCalisma+0x964>
			timer2=millis;
 8004ad6:	4b84      	ldr	r3, [pc, #528]	@ (8004ce8 <checkAktifCalisma+0xb68>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a84      	ldr	r2, [pc, #528]	@ (8004cec <checkAktifCalisma+0xb6c>)
 8004adc:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8004ade:	4b81      	ldr	r3, [pc, #516]	@ (8004ce4 <checkAktifCalisma+0xb64>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004ae4:	4b80      	ldr	r3, [pc, #512]	@ (8004ce8 <checkAktifCalisma+0xb68>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4b80      	ldr	r3, [pc, #512]	@ (8004cec <checkAktifCalisma+0xb6c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	4a80      	ldr	r2, [pc, #512]	@ (8004cf0 <checkAktifCalisma+0xb70>)
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d303      	bcc.n	8004afe <checkAktifCalisma+0x97e>
 8004af6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ce4 <checkAktifCalisma+0xb64>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <checkAktifCalisma+0x99a>
 8004afe:	4b77      	ldr	r3, [pc, #476]	@ (8004cdc <checkAktifCalisma+0xb5c>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f083 0301 	eor.w	r3, r3, #1
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <checkAktifCalisma+0x99a>
 8004b0c:	4b74      	ldr	r3, [pc, #464]	@ (8004ce0 <checkAktifCalisma+0xb60>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f083 0301 	eor.w	r3, r3, #1
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2110      	movs	r1, #16
 8004b1e:	486d      	ldr	r0, [pc, #436]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004b20:	f005 fae1 	bl	800a0e6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8004b24:	4b6c      	ldr	r3, [pc, #432]	@ (8004cd8 <checkAktifCalisma+0xb58>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8004b2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004ce4 <checkAktifCalisma+0xb64>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004b30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b34:	486f      	ldr	r0, [pc, #444]	@ (8004cf4 <checkAktifCalisma+0xb74>)
 8004b36:	f005 fabf 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d120      	bne.n	8004b82 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004b40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b44:	486b      	ldr	r0, [pc, #428]	@ (8004cf4 <checkAktifCalisma+0xb74>)
 8004b46:	f005 fab7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d118      	bne.n	8004b82 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004b50:	2104      	movs	r1, #4
 8004b52:	4868      	ldr	r0, [pc, #416]	@ (8004cf4 <checkAktifCalisma+0xb74>)
 8004b54:	f005 fab0 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d111      	bne.n	8004b82 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004b5e:	2102      	movs	r1, #2
 8004b60:	4864      	ldr	r0, [pc, #400]	@ (8004cf4 <checkAktifCalisma+0xb74>)
 8004b62:	f005 faa9 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	4861      	ldr	r0, [pc, #388]	@ (8004cf4 <checkAktifCalisma+0xb74>)
 8004b70:	f005 faa2 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d103      	bne.n	8004b82 <checkAktifCalisma+0xa02>
			makineStop=1;
 8004b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004cf8 <checkAktifCalisma+0xb78>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e002      	b.n	8004b88 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8004b82:	4b5d      	ldr	r3, [pc, #372]	@ (8004cf8 <checkAktifCalisma+0xb78>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b88:	4b5c      	ldr	r3, [pc, #368]	@ (8004cfc <checkAktifCalisma+0xb7c>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d144      	bne.n	8004c1a <checkAktifCalisma+0xa9a>
 8004b90:	4b5b      	ldr	r3, [pc, #364]	@ (8004d00 <checkAktifCalisma+0xb80>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d003      	beq.n	8004ba0 <checkAktifCalisma+0xa20>
 8004b98:	4b59      	ldr	r3, [pc, #356]	@ (8004d00 <checkAktifCalisma+0xb80>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d13c      	bne.n	8004c1a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004ba0:	2180      	movs	r1, #128	@ 0x80
 8004ba2:	484c      	ldr	r0, [pc, #304]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004ba4:	f005 fa88 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <checkAktifCalisma+0xa36>
 8004bae:	4b55      	ldr	r3, [pc, #340]	@ (8004d04 <checkAktifCalisma+0xb84>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <checkAktifCalisma+0xa4e>
 8004bb6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bba:	484e      	ldr	r0, [pc, #312]	@ (8004cf4 <checkAktifCalisma+0xb74>)
 8004bbc:	f005 fa7c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d129      	bne.n	8004c1a <checkAktifCalisma+0xa9a>
 8004bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8004d04 <checkAktifCalisma+0xb84>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d125      	bne.n	8004c1a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004bce:	2104      	movs	r1, #4
 8004bd0:	4840      	ldr	r0, [pc, #256]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004bd2:	f005 fa71 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d003      	beq.n	8004be4 <checkAktifCalisma+0xa64>
 8004bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8004d08 <checkAktifCalisma+0xb88>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d11a      	bne.n	8004c1a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004be4:	2102      	movs	r1, #2
 8004be6:	483b      	ldr	r0, [pc, #236]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004be8:	f005 fa66 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d113      	bne.n	8004c1a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8004bf2:	4b46      	ldr	r3, [pc, #280]	@ (8004d0c <checkAktifCalisma+0xb8c>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	f083 0301 	eor.w	r3, r3, #1
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00c      	beq.n	8004c1a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8004c00:	4b3d      	ldr	r3, [pc, #244]	@ (8004cf8 <checkAktifCalisma+0xb78>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8004c08:	4b41      	ldr	r3, [pc, #260]	@ (8004d10 <checkAktifCalisma+0xb90>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004c0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <checkAktifCalisma+0xb68>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a40      	ldr	r2, [pc, #256]	@ (8004d14 <checkAktifCalisma+0xb94>)
 8004c14:	6013      	str	r3, [r2, #0]
			bekle();
 8004c16:	f7ff f917 	bl	8003e48 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004c1a:	4b33      	ldr	r3, [pc, #204]	@ (8004ce8 <checkAktifCalisma+0xb68>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d14 <checkAktifCalisma+0xb94>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	4a3c      	ldr	r2, [pc, #240]	@ (8004d18 <checkAktifCalisma+0xb98>)
 8004c26:	7812      	ldrb	r2, [r2, #0]
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d211      	bcs.n	8004c50 <checkAktifCalisma+0xad0>
 8004c2c:	2104      	movs	r1, #4
 8004c2e:	4829      	ldr	r0, [pc, #164]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004c30:	f005 fa42 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <checkAktifCalisma+0xad0>
 8004c3a:	4b33      	ldr	r3, [pc, #204]	@ (8004d08 <checkAktifCalisma+0xb88>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d006      	beq.n	8004c50 <checkAktifCalisma+0xad0>
 8004c42:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf8 <checkAktifCalisma+0xb78>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	f083 0301 	eor.w	r3, r3, #1
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8004c50:	4b2f      	ldr	r3, [pc, #188]	@ (8004d10 <checkAktifCalisma+0xb90>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c56:	4b29      	ldr	r3, [pc, #164]	@ (8004cfc <checkAktifCalisma+0xb7c>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d160      	bne.n	8004d20 <checkAktifCalisma+0xba0>
 8004c5e:	4b28      	ldr	r3, [pc, #160]	@ (8004d00 <checkAktifCalisma+0xb80>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d003      	beq.n	8004c6e <checkAktifCalisma+0xaee>
 8004c66:	4b26      	ldr	r3, [pc, #152]	@ (8004d00 <checkAktifCalisma+0xb80>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d158      	bne.n	8004d20 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004c6e:	2104      	movs	r1, #4
 8004c70:	4818      	ldr	r0, [pc, #96]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004c72:	f005 fa21 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d003      	beq.n	8004c84 <checkAktifCalisma+0xb04>
 8004c7c:	4b22      	ldr	r3, [pc, #136]	@ (8004d08 <checkAktifCalisma+0xb88>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d14d      	bne.n	8004d20 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c84:	2102      	movs	r1, #2
 8004c86:	4813      	ldr	r0, [pc, #76]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004c88:	f005 fa16 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d146      	bne.n	8004d20 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c92:	2180      	movs	r1, #128	@ 0x80
 8004c94:	480f      	ldr	r0, [pc, #60]	@ (8004cd4 <checkAktifCalisma+0xb54>)
 8004c96:	f005 fa0f 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d103      	bne.n	8004ca8 <checkAktifCalisma+0xb28>
 8004ca0:	4b18      	ldr	r3, [pc, #96]	@ (8004d04 <checkAktifCalisma+0xb84>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <checkAktifCalisma+0xb40>
 8004ca8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004cac:	4811      	ldr	r0, [pc, #68]	@ (8004cf4 <checkAktifCalisma+0xb74>)
 8004cae:	f005 fa03 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d133      	bne.n	8004d20 <checkAktifCalisma+0xba0>
 8004cb8:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <checkAktifCalisma+0xb84>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d12f      	bne.n	8004d20 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf8 <checkAktifCalisma+0xb78>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02b      	beq.n	8004d20 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8004cc8:	4b14      	ldr	r3, [pc, #80]	@ (8004d1c <checkAktifCalisma+0xb9c>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e02a      	b.n	8004d26 <checkAktifCalisma+0xba6>
 8004cd0:	200010fb 	.word	0x200010fb
 8004cd4:	40011000 	.word	0x40011000
 8004cd8:	200010ff 	.word	0x200010ff
 8004cdc:	20001116 	.word	0x20001116
 8004ce0:	20001117 	.word	0x20001117
 8004ce4:	200010f7 	.word	0x200010f7
 8004ce8:	200010a0 	.word	0x200010a0
 8004cec:	200010ac 	.word	0x200010ac
 8004cf0:	200010da 	.word	0x200010da
 8004cf4:	40010c00 	.word	0x40010c00
 8004cf8:	20001106 	.word	0x20001106
 8004cfc:	200010cd 	.word	0x200010cd
 8004d00:	200010cc 	.word	0x200010cc
 8004d04:	200010d0 	.word	0x200010d0
 8004d08:	200010ca 	.word	0x200010ca
 8004d0c:	200010f3 	.word	0x200010f3
 8004d10:	20001107 	.word	0x20001107
 8004d14:	200010a4 	.word	0x200010a4
 8004d18:	200010dd 	.word	0x200010dd
 8004d1c:	20001108 	.word	0x20001108
		} else {
			kapi1butonkontrol=0;
 8004d20:	4b8b      	ldr	r3, [pc, #556]	@ (8004f50 <checkAktifCalisma+0xdd0>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d26:	4b8b      	ldr	r3, [pc, #556]	@ (8004f54 <checkAktifCalisma+0xdd4>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d121      	bne.n	8004d72 <checkAktifCalisma+0xbf2>
 8004d2e:	4b8a      	ldr	r3, [pc, #552]	@ (8004f58 <checkAktifCalisma+0xdd8>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d003      	beq.n	8004d3e <checkAktifCalisma+0xbbe>
 8004d36:	4b88      	ldr	r3, [pc, #544]	@ (8004f58 <checkAktifCalisma+0xdd8>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d119      	bne.n	8004d72 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004d3e:	2104      	movs	r1, #4
 8004d40:	4886      	ldr	r0, [pc, #536]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004d42:	f005 f9b9 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d003      	beq.n	8004d54 <checkAktifCalisma+0xbd4>
 8004d4c:	4b84      	ldr	r3, [pc, #528]	@ (8004f60 <checkAktifCalisma+0xde0>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10e      	bne.n	8004d72 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d54:	2102      	movs	r1, #2
 8004d56:	4881      	ldr	r0, [pc, #516]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004d58:	f005 f9ae 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8004d62:	4b80      	ldr	r3, [pc, #512]	@ (8004f64 <checkAktifCalisma+0xde4>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8004d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f68 <checkAktifCalisma+0xde8>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e002      	b.n	8004d78 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8004d72:	4b7d      	ldr	r3, [pc, #500]	@ (8004f68 <checkAktifCalisma+0xde8>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004d78:	4b75      	ldr	r3, [pc, #468]	@ (8004f50 <checkAktifCalisma+0xdd0>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <checkAktifCalisma+0xc10>
 8004d80:	4b79      	ldr	r3, [pc, #484]	@ (8004f68 <checkAktifCalisma+0xde8>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <checkAktifCalisma+0xc10>
 8004d88:	4b78      	ldr	r3, [pc, #480]	@ (8004f6c <checkAktifCalisma+0xdec>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004d90:	2201      	movs	r2, #1
 8004d92:	2180      	movs	r1, #128	@ 0x80
 8004d94:	4876      	ldr	r0, [pc, #472]	@ (8004f70 <checkAktifCalisma+0xdf0>)
 8004d96:	f005 f9a6 	bl	800a0e6 <HAL_GPIO_WritePin>
 8004d9a:	e004      	b.n	8004da6 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2180      	movs	r1, #128	@ 0x80
 8004da0:	4873      	ldr	r0, [pc, #460]	@ (8004f70 <checkAktifCalisma+0xdf0>)
 8004da2:	f005 f9a0 	bl	800a0e6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004da6:	4b73      	ldr	r3, [pc, #460]	@ (8004f74 <checkAktifCalisma+0xdf4>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d141      	bne.n	8004e32 <checkAktifCalisma+0xcb2>
 8004dae:	4b6a      	ldr	r3, [pc, #424]	@ (8004f58 <checkAktifCalisma+0xdd8>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d003      	beq.n	8004dbe <checkAktifCalisma+0xc3e>
 8004db6:	4b68      	ldr	r3, [pc, #416]	@ (8004f58 <checkAktifCalisma+0xdd8>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d139      	bne.n	8004e32 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004dbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004dc2:	4866      	ldr	r0, [pc, #408]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004dc4:	f005 f978 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <checkAktifCalisma+0xc56>
 8004dce:	4b6a      	ldr	r3, [pc, #424]	@ (8004f78 <checkAktifCalisma+0xdf8>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <checkAktifCalisma+0xc6e>
 8004dd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004dda:	4868      	ldr	r0, [pc, #416]	@ (8004f7c <checkAktifCalisma+0xdfc>)
 8004ddc:	f005 f96c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d125      	bne.n	8004e32 <checkAktifCalisma+0xcb2>
 8004de6:	4b64      	ldr	r3, [pc, #400]	@ (8004f78 <checkAktifCalisma+0xdf8>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d121      	bne.n	8004e32 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004dee:	2102      	movs	r1, #2
 8004df0:	485a      	ldr	r0, [pc, #360]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004df2:	f005 f961 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d11a      	bne.n	8004e32 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	4857      	ldr	r0, [pc, #348]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004e00:	f005 f95a 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d113      	bne.n	8004e32 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8004e0a:	4b56      	ldr	r3, [pc, #344]	@ (8004f64 <checkAktifCalisma+0xde4>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00f      	beq.n	8004e32 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8004e12:	4b5b      	ldr	r3, [pc, #364]	@ (8004f80 <checkAktifCalisma+0xe00>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	f083 0301 	eor.w	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8004e20:	4b58      	ldr	r3, [pc, #352]	@ (8004f84 <checkAktifCalisma+0xe04>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004e26:	4b58      	ldr	r3, [pc, #352]	@ (8004f88 <checkAktifCalisma+0xe08>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a58      	ldr	r2, [pc, #352]	@ (8004f8c <checkAktifCalisma+0xe0c>)
 8004e2c:	6013      	str	r3, [r2, #0]
			bekle();
 8004e2e:	f7ff f80b 	bl	8003e48 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004e32:	4b55      	ldr	r3, [pc, #340]	@ (8004f88 <checkAktifCalisma+0xe08>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b55      	ldr	r3, [pc, #340]	@ (8004f8c <checkAktifCalisma+0xe0c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	4a54      	ldr	r2, [pc, #336]	@ (8004f90 <checkAktifCalisma+0xe10>)
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d20d      	bcs.n	8004e60 <checkAktifCalisma+0xce0>
 8004e44:	2102      	movs	r1, #2
 8004e46:	4845      	ldr	r0, [pc, #276]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004e48:	f005 f936 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <checkAktifCalisma+0xce0>
 8004e52:	4b44      	ldr	r3, [pc, #272]	@ (8004f64 <checkAktifCalisma+0xde4>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	f083 0301 	eor.w	r3, r3, #1
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8004e60:	4b48      	ldr	r3, [pc, #288]	@ (8004f84 <checkAktifCalisma+0xe04>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e66:	4b43      	ldr	r3, [pc, #268]	@ (8004f74 <checkAktifCalisma+0xdf4>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d135      	bne.n	8004eda <checkAktifCalisma+0xd5a>
 8004e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f58 <checkAktifCalisma+0xdd8>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d003      	beq.n	8004e7e <checkAktifCalisma+0xcfe>
 8004e76:	4b38      	ldr	r3, [pc, #224]	@ (8004f58 <checkAktifCalisma+0xdd8>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d12d      	bne.n	8004eda <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e82:	4836      	ldr	r0, [pc, #216]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004e84:	f005 f918 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <checkAktifCalisma+0xd16>
 8004e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f78 <checkAktifCalisma+0xdf8>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <checkAktifCalisma+0xd2e>
 8004e96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e9a:	4838      	ldr	r0, [pc, #224]	@ (8004f7c <checkAktifCalisma+0xdfc>)
 8004e9c:	f005 f90c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d119      	bne.n	8004eda <checkAktifCalisma+0xd5a>
 8004ea6:	4b34      	ldr	r3, [pc, #208]	@ (8004f78 <checkAktifCalisma+0xdf8>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d115      	bne.n	8004eda <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004eae:	2102      	movs	r1, #2
 8004eb0:	482a      	ldr	r0, [pc, #168]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004eb2:	f005 f901 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10e      	bne.n	8004eda <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004ebc:	2104      	movs	r1, #4
 8004ebe:	4827      	ldr	r0, [pc, #156]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004ec0:	f005 f8fa 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d107      	bne.n	8004eda <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8004eca:	4b26      	ldr	r3, [pc, #152]	@ (8004f64 <checkAktifCalisma+0xde4>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8004ed2:	4b30      	ldr	r3, [pc, #192]	@ (8004f94 <checkAktifCalisma+0xe14>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e002      	b.n	8004ee0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8004eda:	4b2e      	ldr	r3, [pc, #184]	@ (8004f94 <checkAktifCalisma+0xe14>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004ee0:	4b24      	ldr	r3, [pc, #144]	@ (8004f74 <checkAktifCalisma+0xdf4>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d11d      	bne.n	8004f24 <checkAktifCalisma+0xda4>
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <checkAktifCalisma+0xdd8>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d003      	beq.n	8004ef8 <checkAktifCalisma+0xd78>
 8004ef0:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <checkAktifCalisma+0xdd8>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d115      	bne.n	8004f24 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004ef8:	2102      	movs	r1, #2
 8004efa:	4818      	ldr	r0, [pc, #96]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004efc:	f005 f8dc 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10e      	bne.n	8004f24 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004f06:	2104      	movs	r1, #4
 8004f08:	4814      	ldr	r0, [pc, #80]	@ (8004f5c <checkAktifCalisma+0xddc>)
 8004f0a:	f005 f8d5 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d107      	bne.n	8004f24 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8004f14:	4b13      	ldr	r3, [pc, #76]	@ (8004f64 <checkAktifCalisma+0xde4>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <checkAktifCalisma+0xe18>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8004f24:	4b1c      	ldr	r3, [pc, #112]	@ (8004f98 <checkAktifCalisma+0xe18>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f94 <checkAktifCalisma+0xe14>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d107      	bne.n	8004f42 <checkAktifCalisma+0xdc2>
 8004f32:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <checkAktifCalisma+0xe18>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <checkAktifCalisma+0xdc2>
 8004f3a:	4b12      	ldr	r3, [pc, #72]	@ (8004f84 <checkAktifCalisma+0xe04>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d02c      	beq.n	8004f9c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004f42:	2201      	movs	r2, #1
 8004f44:	2140      	movs	r1, #64	@ 0x40
 8004f46:	480a      	ldr	r0, [pc, #40]	@ (8004f70 <checkAktifCalisma+0xdf0>)
 8004f48:	f005 f8cd 	bl	800a0e6 <HAL_GPIO_WritePin>
 8004f4c:	e02b      	b.n	8004fa6 <checkAktifCalisma+0xe26>
 8004f4e:	bf00      	nop
 8004f50:	20001108 	.word	0x20001108
 8004f54:	200010cd 	.word	0x200010cd
 8004f58:	200010cc 	.word	0x200010cc
 8004f5c:	40011000 	.word	0x40011000
 8004f60:	200010ca 	.word	0x200010ca
 8004f64:	20001106 	.word	0x20001106
 8004f68:	20001109 	.word	0x20001109
 8004f6c:	20001107 	.word	0x20001107
 8004f70:	40010800 	.word	0x40010800
 8004f74:	200010ce 	.word	0x200010ce
 8004f78:	200010d0 	.word	0x200010d0
 8004f7c:	40010c00 	.word	0x40010c00
 8004f80:	200010f3 	.word	0x200010f3
 8004f84:	2000110a 	.word	0x2000110a
 8004f88:	200010a0 	.word	0x200010a0
 8004f8c:	200010a4 	.word	0x200010a4
 8004f90:	200010de 	.word	0x200010de
 8004f94:	2000110b 	.word	0x2000110b
 8004f98:	2000110c 	.word	0x2000110c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2140      	movs	r1, #64	@ 0x40
 8004fa0:	488d      	ldr	r0, [pc, #564]	@ (80051d8 <checkAktifCalisma+0x1058>)
 8004fa2:	f005 f8a0 	bl	800a0e6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8004fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80051dc <checkAktifCalisma+0x105c>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <checkAktifCalisma+0xe36>
 8004fae:	4b8b      	ldr	r3, [pc, #556]	@ (80051dc <checkAktifCalisma+0x105c>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d115      	bne.n	8004fe2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004fb6:	2104      	movs	r1, #4
 8004fb8:	4889      	ldr	r0, [pc, #548]	@ (80051e0 <checkAktifCalisma+0x1060>)
 8004fba:	f005 f87d 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d003      	beq.n	8004fcc <checkAktifCalisma+0xe4c>
 8004fc4:	4b87      	ldr	r3, [pc, #540]	@ (80051e4 <checkAktifCalisma+0x1064>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004fcc:	2102      	movs	r1, #2
 8004fce:	4884      	ldr	r0, [pc, #528]	@ (80051e0 <checkAktifCalisma+0x1060>)
 8004fd0:	f005 f872 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8004fda:	4b83      	ldr	r3, [pc, #524]	@ (80051e8 <checkAktifCalisma+0x1068>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e002      	b.n	8004fe8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8004fe2:	4b81      	ldr	r3, [pc, #516]	@ (80051e8 <checkAktifCalisma+0x1068>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004fe8:	4b7c      	ldr	r3, [pc, #496]	@ (80051dc <checkAktifCalisma+0x105c>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d003      	beq.n	8004ff8 <checkAktifCalisma+0xe78>
 8004ff0:	4b7a      	ldr	r3, [pc, #488]	@ (80051dc <checkAktifCalisma+0x105c>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d111      	bne.n	800501c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	4879      	ldr	r0, [pc, #484]	@ (80051e0 <checkAktifCalisma+0x1060>)
 8004ffc:	f005 f85c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10a      	bne.n	800501c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005006:	2104      	movs	r1, #4
 8005008:	4875      	ldr	r0, [pc, #468]	@ (80051e0 <checkAktifCalisma+0x1060>)
 800500a:	f005 f855 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d103      	bne.n	800501c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005014:	4b75      	ldr	r3, [pc, #468]	@ (80051ec <checkAktifCalisma+0x106c>)
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e002      	b.n	8005022 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 800501c:	4b73      	ldr	r3, [pc, #460]	@ (80051ec <checkAktifCalisma+0x106c>)
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005022:	4b71      	ldr	r3, [pc, #452]	@ (80051e8 <checkAktifCalisma+0x1068>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00f      	beq.n	800504a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800502a:	4b71      	ldr	r3, [pc, #452]	@ (80051f0 <checkAktifCalisma+0x1070>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d10b      	bne.n	800504a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005032:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005036:	486f      	ldr	r0, [pc, #444]	@ (80051f4 <checkAktifCalisma+0x1074>)
 8005038:	f005 f83e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005042:	4b6d      	ldr	r3, [pc, #436]	@ (80051f8 <checkAktifCalisma+0x1078>)
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e002      	b.n	8005050 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800504a:	4b6b      	ldr	r3, [pc, #428]	@ (80051f8 <checkAktifCalisma+0x1078>)
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005050:	4b66      	ldr	r3, [pc, #408]	@ (80051ec <checkAktifCalisma+0x106c>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00f      	beq.n	8005078 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005058:	4b65      	ldr	r3, [pc, #404]	@ (80051f0 <checkAktifCalisma+0x1070>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10b      	bne.n	8005078 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005060:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005064:	4863      	ldr	r0, [pc, #396]	@ (80051f4 <checkAktifCalisma+0x1074>)
 8005066:	f005 f827 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005070:	4b62      	ldr	r3, [pc, #392]	@ (80051fc <checkAktifCalisma+0x107c>)
 8005072:	2201      	movs	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e002      	b.n	800507e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005078:	4b60      	ldr	r3, [pc, #384]	@ (80051fc <checkAktifCalisma+0x107c>)
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800507e:	4b60      	ldr	r3, [pc, #384]	@ (8005200 <checkAktifCalisma+0x1080>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d137      	bne.n	80050f6 <checkAktifCalisma+0xf76>
 8005086:	4b5f      	ldr	r3, [pc, #380]	@ (8005204 <checkAktifCalisma+0x1084>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d003      	beq.n	8005096 <checkAktifCalisma+0xf16>
 800508e:	4b5d      	ldr	r3, [pc, #372]	@ (8005204 <checkAktifCalisma+0x1084>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d12f      	bne.n	80050f6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005096:	4b54      	ldr	r3, [pc, #336]	@ (80051e8 <checkAktifCalisma+0x1068>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <checkAktifCalisma+0xf26>
 800509e:	4b53      	ldr	r3, [pc, #332]	@ (80051ec <checkAktifCalisma+0x106c>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d027      	beq.n	80050f6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80050a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050aa:	484d      	ldr	r0, [pc, #308]	@ (80051e0 <checkAktifCalisma+0x1060>)
 80050ac:	f005 f804 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <checkAktifCalisma+0xf3e>
 80050b6:	4b4e      	ldr	r3, [pc, #312]	@ (80051f0 <checkAktifCalisma+0x1070>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80050be:	4b4e      	ldr	r3, [pc, #312]	@ (80051f8 <checkAktifCalisma+0x1078>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <checkAktifCalisma+0xf4e>
 80050c6:	4b4d      	ldr	r3, [pc, #308]	@ (80051fc <checkAktifCalisma+0x107c>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d013      	beq.n	80050f6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80050ce:	4b4e      	ldr	r3, [pc, #312]	@ (8005208 <checkAktifCalisma+0x1088>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00f      	beq.n	80050f6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80050d6:	4b4d      	ldr	r3, [pc, #308]	@ (800520c <checkAktifCalisma+0x108c>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	f083 0301 	eor.w	r3, r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80050e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005210 <checkAktifCalisma+0x1090>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80050ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005214 <checkAktifCalisma+0x1094>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005218 <checkAktifCalisma+0x1098>)
 80050f0:	6013      	str	r3, [r2, #0]
			bekle();
 80050f2:	f7fe fea9 	bl	8003e48 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80050f6:	4b47      	ldr	r3, [pc, #284]	@ (8005214 <checkAktifCalisma+0x1094>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <checkAktifCalisma+0x1098>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	4a46      	ldr	r2, [pc, #280]	@ (800521c <checkAktifCalisma+0x109c>)
 8005102:	7812      	ldrb	r2, [r2, #0]
 8005104:	4293      	cmp	r3, r2
 8005106:	d214      	bcs.n	8005132 <checkAktifCalisma+0xfb2>
 8005108:	4b37      	ldr	r3, [pc, #220]	@ (80051e8 <checkAktifCalisma+0x1068>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	f083 0301 	eor.w	r3, r3, #1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <checkAktifCalisma+0xfa4>
 8005116:	4b35      	ldr	r3, [pc, #212]	@ (80051ec <checkAktifCalisma+0x106c>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	f083 0301 	eor.w	r3, r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <checkAktifCalisma+0xfb2>
 8005124:	4b38      	ldr	r3, [pc, #224]	@ (8005208 <checkAktifCalisma+0x1088>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	f083 0301 	eor.w	r3, r3, #1
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005132:	4b37      	ldr	r3, [pc, #220]	@ (8005210 <checkAktifCalisma+0x1090>)
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005138:	4b31      	ldr	r3, [pc, #196]	@ (8005200 <checkAktifCalisma+0x1080>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d12b      	bne.n	8005198 <checkAktifCalisma+0x1018>
 8005140:	4b30      	ldr	r3, [pc, #192]	@ (8005204 <checkAktifCalisma+0x1084>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d003      	beq.n	8005150 <checkAktifCalisma+0xfd0>
 8005148:	4b2e      	ldr	r3, [pc, #184]	@ (8005204 <checkAktifCalisma+0x1084>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d123      	bne.n	8005198 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005150:	4b25      	ldr	r3, [pc, #148]	@ (80051e8 <checkAktifCalisma+0x1068>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <checkAktifCalisma+0xfe0>
 8005158:	4b24      	ldr	r3, [pc, #144]	@ (80051ec <checkAktifCalisma+0x106c>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01b      	beq.n	8005198 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005160:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005164:	481e      	ldr	r0, [pc, #120]	@ (80051e0 <checkAktifCalisma+0x1060>)
 8005166:	f004 ffa7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <checkAktifCalisma+0xff8>
 8005170:	4b1f      	ldr	r3, [pc, #124]	@ (80051f0 <checkAktifCalisma+0x1070>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005178:	4b1f      	ldr	r3, [pc, #124]	@ (80051f8 <checkAktifCalisma+0x1078>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d103      	bne.n	8005188 <checkAktifCalisma+0x1008>
 8005180:	4b1e      	ldr	r3, [pc, #120]	@ (80051fc <checkAktifCalisma+0x107c>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005188:	4b1f      	ldr	r3, [pc, #124]	@ (8005208 <checkAktifCalisma+0x1088>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005190:	4b23      	ldr	r3, [pc, #140]	@ (8005220 <checkAktifCalisma+0x10a0>)
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e002      	b.n	800519e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005198:	4b21      	ldr	r3, [pc, #132]	@ (8005220 <checkAktifCalisma+0x10a0>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800519e:	4b18      	ldr	r3, [pc, #96]	@ (8005200 <checkAktifCalisma+0x1080>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d140      	bne.n	8005228 <checkAktifCalisma+0x10a8>
 80051a6:	4b17      	ldr	r3, [pc, #92]	@ (8005204 <checkAktifCalisma+0x1084>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d003      	beq.n	80051b6 <checkAktifCalisma+0x1036>
 80051ae:	4b15      	ldr	r3, [pc, #84]	@ (8005204 <checkAktifCalisma+0x1084>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d138      	bne.n	8005228 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80051b6:	4b0c      	ldr	r3, [pc, #48]	@ (80051e8 <checkAktifCalisma+0x1068>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <checkAktifCalisma+0x1046>
 80051be:	4b0b      	ldr	r3, [pc, #44]	@ (80051ec <checkAktifCalisma+0x106c>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d030      	beq.n	8005228 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80051c6:	4b10      	ldr	r3, [pc, #64]	@ (8005208 <checkAktifCalisma+0x1088>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d02c      	beq.n	8005228 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80051ce:	4b15      	ldr	r3, [pc, #84]	@ (8005224 <checkAktifCalisma+0x10a4>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e02b      	b.n	800522e <checkAktifCalisma+0x10ae>
 80051d6:	bf00      	nop
 80051d8:	40010800 	.word	0x40010800
 80051dc:	200010d1 	.word	0x200010d1
 80051e0:	40011000 	.word	0x40011000
 80051e4:	200010ca 	.word	0x200010ca
 80051e8:	20001110 	.word	0x20001110
 80051ec:	20001111 	.word	0x20001111
 80051f0:	200010d0 	.word	0x200010d0
 80051f4:	40010c00 	.word	0x40010c00
 80051f8:	20001120 	.word	0x20001120
 80051fc:	20001121 	.word	0x20001121
 8005200:	200010cf 	.word	0x200010cf
 8005204:	200010cc 	.word	0x200010cc
 8005208:	20001106 	.word	0x20001106
 800520c:	200010f3 	.word	0x200010f3
 8005210:	2000110d 	.word	0x2000110d
 8005214:	200010a0 	.word	0x200010a0
 8005218:	200010a4 	.word	0x200010a4
 800521c:	200010df 	.word	0x200010df
 8005220:	2000110e 	.word	0x2000110e
 8005224:	2000110f 	.word	0x2000110f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005228:	4b8b      	ldr	r3, [pc, #556]	@ (8005458 <checkAktifCalisma+0x12d8>)
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800522e:	4b8b      	ldr	r3, [pc, #556]	@ (800545c <checkAktifCalisma+0x12dc>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d107      	bne.n	8005246 <checkAktifCalisma+0x10c6>
 8005236:	4b8a      	ldr	r3, [pc, #552]	@ (8005460 <checkAktifCalisma+0x12e0>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <checkAktifCalisma+0x10c6>
 800523e:	4b86      	ldr	r3, [pc, #536]	@ (8005458 <checkAktifCalisma+0x12d8>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005246:	2201      	movs	r2, #1
 8005248:	2120      	movs	r1, #32
 800524a:	4886      	ldr	r0, [pc, #536]	@ (8005464 <checkAktifCalisma+0x12e4>)
 800524c:	f004 ff4b 	bl	800a0e6 <HAL_GPIO_WritePin>
 8005250:	e004      	b.n	800525c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005252:	2200      	movs	r2, #0
 8005254:	2120      	movs	r1, #32
 8005256:	4883      	ldr	r0, [pc, #524]	@ (8005464 <checkAktifCalisma+0x12e4>)
 8005258:	f004 ff45 	bl	800a0e6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800525c:	4b82      	ldr	r3, [pc, #520]	@ (8005468 <checkAktifCalisma+0x12e8>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00e      	beq.n	8005282 <checkAktifCalisma+0x1102>
 8005264:	2102      	movs	r1, #2
 8005266:	4881      	ldr	r0, [pc, #516]	@ (800546c <checkAktifCalisma+0x12ec>)
 8005268:	f004 ff26 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800526c:	4603      	mov	r3, r0
 800526e:	2b01      	cmp	r3, #1
 8005270:	d107      	bne.n	8005282 <checkAktifCalisma+0x1102>
 8005272:	4b7f      	ldr	r3, [pc, #508]	@ (8005470 <checkAktifCalisma+0x12f0>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <checkAktifCalisma+0x1102>
 800527a:	4b7e      	ldr	r3, [pc, #504]	@ (8005474 <checkAktifCalisma+0x12f4>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d112      	bne.n	80052a8 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005282:	4b7d      	ldr	r3, [pc, #500]	@ (8005478 <checkAktifCalisma+0x12f8>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d066      	beq.n	8005358 <checkAktifCalisma+0x11d8>
 800528a:	2104      	movs	r1, #4
 800528c:	4877      	ldr	r0, [pc, #476]	@ (800546c <checkAktifCalisma+0x12ec>)
 800528e:	f004 ff13 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005292:	4603      	mov	r3, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	d15f      	bne.n	8005358 <checkAktifCalisma+0x11d8>
 8005298:	4b75      	ldr	r3, [pc, #468]	@ (8005470 <checkAktifCalisma+0x12f0>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05b      	beq.n	8005358 <checkAktifCalisma+0x11d8>
 80052a0:	4b74      	ldr	r3, [pc, #464]	@ (8005474 <checkAktifCalisma+0x12f4>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d057      	beq.n	8005358 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80052a8:	4b74      	ldr	r3, [pc, #464]	@ (800547c <checkAktifCalisma+0x12fc>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	3301      	adds	r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	4b72      	ldr	r3, [pc, #456]	@ (800547c <checkAktifCalisma+0x12fc>)
 80052b2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80052b4:	4b71      	ldr	r3, [pc, #452]	@ (800547c <checkAktifCalisma+0x12fc>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b09      	cmp	r3, #9
 80052ba:	d908      	bls.n	80052ce <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80052bc:	4b6f      	ldr	r3, [pc, #444]	@ (800547c <checkAktifCalisma+0x12fc>)
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80052c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005480 <checkAktifCalisma+0x1300>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005480 <checkAktifCalisma+0x1300>)
 80052cc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80052ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005480 <checkAktifCalisma+0x1300>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b09      	cmp	r3, #9
 80052d4:	d908      	bls.n	80052e8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80052d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005480 <checkAktifCalisma+0x1300>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80052dc:	4b69      	ldr	r3, [pc, #420]	@ (8005484 <checkAktifCalisma+0x1304>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	4b67      	ldr	r3, [pc, #412]	@ (8005484 <checkAktifCalisma+0x1304>)
 80052e6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80052e8:	4b66      	ldr	r3, [pc, #408]	@ (8005484 <checkAktifCalisma+0x1304>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b09      	cmp	r3, #9
 80052ee:	d908      	bls.n	8005302 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80052f0:	4b64      	ldr	r3, [pc, #400]	@ (8005484 <checkAktifCalisma+0x1304>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80052f6:	4b64      	ldr	r3, [pc, #400]	@ (8005488 <checkAktifCalisma+0x1308>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	3301      	adds	r3, #1
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	4b62      	ldr	r3, [pc, #392]	@ (8005488 <checkAktifCalisma+0x1308>)
 8005300:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005302:	4b61      	ldr	r3, [pc, #388]	@ (8005488 <checkAktifCalisma+0x1308>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b09      	cmp	r3, #9
 8005308:	d908      	bls.n	800531c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800530a:	4b5f      	ldr	r3, [pc, #380]	@ (8005488 <checkAktifCalisma+0x1308>)
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005310:	4b5e      	ldr	r3, [pc, #376]	@ (800548c <checkAktifCalisma+0x130c>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	b2da      	uxtb	r2, r3
 8005318:	4b5c      	ldr	r3, [pc, #368]	@ (800548c <checkAktifCalisma+0x130c>)
 800531a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800531c:	4b5b      	ldr	r3, [pc, #364]	@ (800548c <checkAktifCalisma+0x130c>)
 800531e:	781a      	ldrb	r2, [r3, #0]
 8005320:	4b5b      	ldr	r3, [pc, #364]	@ (8005490 <checkAktifCalisma+0x1310>)
 8005322:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005326:	4b58      	ldr	r3, [pc, #352]	@ (8005488 <checkAktifCalisma+0x1308>)
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	4b59      	ldr	r3, [pc, #356]	@ (8005490 <checkAktifCalisma+0x1310>)
 800532c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800532e:	4b55      	ldr	r3, [pc, #340]	@ (8005484 <checkAktifCalisma+0x1304>)
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	4b57      	ldr	r3, [pc, #348]	@ (8005490 <checkAktifCalisma+0x1310>)
 8005334:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005336:	4b52      	ldr	r3, [pc, #328]	@ (8005480 <checkAktifCalisma+0x1300>)
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	4b55      	ldr	r3, [pc, #340]	@ (8005490 <checkAktifCalisma+0x1310>)
 800533c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800533e:	4b4f      	ldr	r3, [pc, #316]	@ (800547c <checkAktifCalisma+0x12fc>)
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	4b53      	ldr	r3, [pc, #332]	@ (8005490 <checkAktifCalisma+0x1310>)
 8005344:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005346:	4b53      	ldr	r3, [pc, #332]	@ (8005494 <checkAktifCalisma+0x1314>)
 8005348:	2201      	movs	r2, #1
 800534a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800534c:	4b46      	ldr	r3, [pc, #280]	@ (8005468 <checkAktifCalisma+0x12e8>)
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005352:	4b49      	ldr	r3, [pc, #292]	@ (8005478 <checkAktifCalisma+0x12f8>)
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005358:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800535c:	484e      	ldr	r0, [pc, #312]	@ (8005498 <checkAktifCalisma+0x1318>)
 800535e:	f004 feab 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d016      	beq.n	8005396 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005368:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800536c:	484a      	ldr	r0, [pc, #296]	@ (8005498 <checkAktifCalisma+0x1318>)
 800536e:	f004 fea3 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00e      	beq.n	8005396 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005378:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800537c:	4846      	ldr	r0, [pc, #280]	@ (8005498 <checkAktifCalisma+0x1318>)
 800537e:	f004 fe9b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d006      	beq.n	8005396 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005388:	2140      	movs	r1, #64	@ 0x40
 800538a:	4838      	ldr	r0, [pc, #224]	@ (800546c <checkAktifCalisma+0x12ec>)
 800538c:	f004 fe94 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <checkAktifCalisma+0x121e>
			startBasili=1;
 8005396:	4b41      	ldr	r3, [pc, #260]	@ (800549c <checkAktifCalisma+0x131c>)
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e002      	b.n	80053a4 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800539e:	4b3f      	ldr	r3, [pc, #252]	@ (800549c <checkAktifCalisma+0x131c>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80053a4:	4b3d      	ldr	r3, [pc, #244]	@ (800549c <checkAktifCalisma+0x131c>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d016      	beq.n	80053da <checkAktifCalisma+0x125a>
 80053ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053b0:	4839      	ldr	r0, [pc, #228]	@ (8005498 <checkAktifCalisma+0x1318>)
 80053b2:	f004 fe81 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10e      	bne.n	80053da <checkAktifCalisma+0x125a>
			hataVar=1;
 80053bc:	4b38      	ldr	r3, [pc, #224]	@ (80054a0 <checkAktifCalisma+0x1320>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80053c2:	2001      	movs	r0, #1
 80053c4:	f7fb fbde 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80053c8:	2001      	movs	r0, #1
 80053ca:	f7fb fb83 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 80053ce:	f003 f91f 	bl	8008610 <convertAndSendData>
			acilstophatasi=1;
 80053d2:	4b34      	ldr	r3, [pc, #208]	@ (80054a4 <checkAktifCalisma+0x1324>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e018      	b.n	800540c <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80053da:	4b32      	ldr	r3, [pc, #200]	@ (80054a4 <checkAktifCalisma+0x1324>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d014      	beq.n	800540c <checkAktifCalisma+0x128c>
 80053e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053e6:	482c      	ldr	r0, [pc, #176]	@ (8005498 <checkAktifCalisma+0x1318>)
 80053e8:	f004 fe66 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10c      	bne.n	800540c <checkAktifCalisma+0x128c>
 80053f2:	4b2a      	ldr	r3, [pc, #168]	@ (800549c <checkAktifCalisma+0x131c>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	f083 0301 	eor.w	r3, r3, #1
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005400:	4b28      	ldr	r3, [pc, #160]	@ (80054a4 <checkAktifCalisma+0x1324>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005406:	2001      	movs	r0, #1
 8005408:	f7fe fcb4 	bl	8003d74 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800540c:	4b26      	ldr	r3, [pc, #152]	@ (80054a8 <checkAktifCalisma+0x1328>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	f083 0301 	eor.w	r3, r3, #1
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d04e      	beq.n	80054b8 <checkAktifCalisma+0x1338>
 800541a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800541e:	481e      	ldr	r0, [pc, #120]	@ (8005498 <checkAktifCalisma+0x1318>)
 8005420:	f004 fe4a 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <checkAktifCalisma+0x12b2>
 800542a:	4b20      	ldr	r3, [pc, #128]	@ (80054ac <checkAktifCalisma+0x132c>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d042      	beq.n	80054b8 <checkAktifCalisma+0x1338>
 8005432:	4b1f      	ldr	r3, [pc, #124]	@ (80054b0 <checkAktifCalisma+0x1330>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d13e      	bne.n	80054b8 <checkAktifCalisma+0x1338>
			hataVar=1;
 800543a:	4b19      	ldr	r3, [pc, #100]	@ (80054a0 <checkAktifCalisma+0x1320>)
 800543c:	2201      	movs	r2, #1
 800543e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005440:	2002      	movs	r0, #2
 8005442:	f7fb fb9f 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005446:	2002      	movs	r0, #2
 8005448:	f7fb fb44 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 800544c:	f003 f8e0 	bl	8008610 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005450:	4b18      	ldr	r3, [pc, #96]	@ (80054b4 <checkAktifCalisma+0x1334>)
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e047      	b.n	80054e8 <checkAktifCalisma+0x1368>
 8005458:	2000110f 	.word	0x2000110f
 800545c:	2000110e 	.word	0x2000110e
 8005460:	2000110d 	.word	0x2000110d
 8005464:	40010800 	.word	0x40010800
 8005468:	20001103 	.word	0x20001103
 800546c:	40011000 	.word	0x40011000
 8005470:	200010ca 	.word	0x200010ca
 8005474:	20001106 	.word	0x20001106
 8005478:	20001104 	.word	0x20001104
 800547c:	200010c1 	.word	0x200010c1
 8005480:	200010c2 	.word	0x200010c2
 8005484:	20000000 	.word	0x20000000
 8005488:	20000001 	.word	0x20000001
 800548c:	200010c3 	.word	0x200010c3
 8005490:	20000ff0 	.word	0x20000ff0
 8005494:	200010f0 	.word	0x200010f0
 8005498:	40010c00 	.word	0x40010c00
 800549c:	20001112 	.word	0x20001112
 80054a0:	20001119 	.word	0x20001119
 80054a4:	20001114 	.word	0x20001114
 80054a8:	2000111b 	.word	0x2000111b
 80054ac:	20001125 	.word	0x20001125
 80054b0:	200010c8 	.word	0x200010c8
 80054b4:	20001115 	.word	0x20001115
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80054b8:	4b9b      	ldr	r3, [pc, #620]	@ (8005728 <checkAktifCalisma+0x15a8>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d013      	beq.n	80054e8 <checkAktifCalisma+0x1368>
 80054c0:	4b9a      	ldr	r3, [pc, #616]	@ (800572c <checkAktifCalisma+0x15ac>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00f      	beq.n	80054e8 <checkAktifCalisma+0x1368>
 80054c8:	4b99      	ldr	r3, [pc, #612]	@ (8005730 <checkAktifCalisma+0x15b0>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f083 0301 	eor.w	r3, r3, #1
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80054d6:	4b94      	ldr	r3, [pc, #592]	@ (8005728 <checkAktifCalisma+0x15a8>)
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80054dc:	4b95      	ldr	r3, [pc, #596]	@ (8005734 <checkAktifCalisma+0x15b4>)
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80054e2:	2002      	movs	r0, #2
 80054e4:	f7fe fc46 	bl	8003d74 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80054e8:	4b93      	ldr	r3, [pc, #588]	@ (8005738 <checkAktifCalisma+0x15b8>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d11e      	bne.n	800552e <checkAktifCalisma+0x13ae>
 80054f0:	4b92      	ldr	r3, [pc, #584]	@ (800573c <checkAktifCalisma+0x15bc>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d11a      	bne.n	800552e <checkAktifCalisma+0x13ae>
 80054f8:	4b91      	ldr	r3, [pc, #580]	@ (8005740 <checkAktifCalisma+0x15c0>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d016      	beq.n	800552e <checkAktifCalisma+0x13ae>
 8005500:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005504:	488f      	ldr	r0, [pc, #572]	@ (8005744 <checkAktifCalisma+0x15c4>)
 8005506:	f004 fdd7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800550a:	4603      	mov	r3, r0
 800550c:	2b01      	cmp	r3, #1
 800550e:	d10e      	bne.n	800552e <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005510:	4b8d      	ldr	r3, [pc, #564]	@ (8005748 <checkAktifCalisma+0x15c8>)
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005516:	2003      	movs	r0, #3
 8005518:	f7fb fb34 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(3);
 800551c:	2003      	movs	r0, #3
 800551e:	f7fb fad9 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 8005522:	f003 f875 	bl	8008610 <convertAndSendData>
			basinchatasi=1;
 8005526:	4b89      	ldr	r3, [pc, #548]	@ (800574c <checkAktifCalisma+0x15cc>)
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e015      	b.n	800555a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800552e:	4b87      	ldr	r3, [pc, #540]	@ (800574c <checkAktifCalisma+0x15cc>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d011      	beq.n	800555a <checkAktifCalisma+0x13da>
 8005536:	4b80      	ldr	r3, [pc, #512]	@ (8005738 <checkAktifCalisma+0x15b8>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10d      	bne.n	800555a <checkAktifCalisma+0x13da>
 800553e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005542:	4883      	ldr	r0, [pc, #524]	@ (8005750 <checkAktifCalisma+0x15d0>)
 8005544:	f004 fdb8 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d105      	bne.n	800555a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800554e:	4b7f      	ldr	r3, [pc, #508]	@ (800574c <checkAktifCalisma+0x15cc>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005554:	2003      	movs	r0, #3
 8005556:	f7fe fc0d 	bl	8003d74 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800555a:	4b7e      	ldr	r3, [pc, #504]	@ (8005754 <checkAktifCalisma+0x15d4>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <checkAktifCalisma+0x13ea>
 8005562:	4b7d      	ldr	r3, [pc, #500]	@ (8005758 <checkAktifCalisma+0x15d8>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01e      	beq.n	80055a8 <checkAktifCalisma+0x1428>
 800556a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800556e:	487b      	ldr	r0, [pc, #492]	@ (800575c <checkAktifCalisma+0x15dc>)
 8005570:	f004 fda2 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d116      	bne.n	80055a8 <checkAktifCalisma+0x1428>
 800557a:	4b79      	ldr	r3, [pc, #484]	@ (8005760 <checkAktifCalisma+0x15e0>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d003      	beq.n	800558a <checkAktifCalisma+0x140a>
 8005582:	4b77      	ldr	r3, [pc, #476]	@ (8005760 <checkAktifCalisma+0x15e0>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d10e      	bne.n	80055a8 <checkAktifCalisma+0x1428>
			hataVar=1;
 800558a:	4b6f      	ldr	r3, [pc, #444]	@ (8005748 <checkAktifCalisma+0x15c8>)
 800558c:	2201      	movs	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005590:	2004      	movs	r0, #4
 8005592:	f7fb faf7 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005596:	2004      	movs	r0, #4
 8005598:	f7fb fa9c 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 800559c:	f003 f838 	bl	8008610 <convertAndSendData>
			katkapisivicihatasi=1;
 80055a0:	4b70      	ldr	r3, [pc, #448]	@ (8005764 <checkAktifCalisma+0x15e4>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	e01f      	b.n	80055e8 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80055a8:	4b6e      	ldr	r3, [pc, #440]	@ (8005764 <checkAktifCalisma+0x15e4>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01b      	beq.n	80055e8 <checkAktifCalisma+0x1468>
 80055b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005768 <checkAktifCalisma+0x15e8>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d017      	beq.n	80055e8 <checkAktifCalisma+0x1468>
 80055b8:	4b66      	ldr	r3, [pc, #408]	@ (8005754 <checkAktifCalisma+0x15d4>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d010      	beq.n	80055e8 <checkAktifCalisma+0x1468>
 80055c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055ca:	4864      	ldr	r0, [pc, #400]	@ (800575c <checkAktifCalisma+0x15dc>)
 80055cc:	f004 fd74 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d108      	bne.n	80055e8 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80055d6:	4b63      	ldr	r3, [pc, #396]	@ (8005764 <checkAktifCalisma+0x15e4>)
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80055dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005758 <checkAktifCalisma+0x15d8>)
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80055e2:	2004      	movs	r0, #4
 80055e4:	f7fe fbc6 	bl	8003d74 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80055e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005754 <checkAktifCalisma+0x15d4>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d103      	bne.n	80055f8 <checkAktifCalisma+0x1478>
 80055f0:	4b5e      	ldr	r3, [pc, #376]	@ (800576c <checkAktifCalisma+0x15ec>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01e      	beq.n	8005636 <checkAktifCalisma+0x14b6>
 80055f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055fc:	4857      	ldr	r0, [pc, #348]	@ (800575c <checkAktifCalisma+0x15dc>)
 80055fe:	f004 fd5b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005602:	4603      	mov	r3, r0
 8005604:	2b01      	cmp	r3, #1
 8005606:	d116      	bne.n	8005636 <checkAktifCalisma+0x14b6>
 8005608:	4b55      	ldr	r3, [pc, #340]	@ (8005760 <checkAktifCalisma+0x15e0>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d003      	beq.n	8005618 <checkAktifCalisma+0x1498>
 8005610:	4b53      	ldr	r3, [pc, #332]	@ (8005760 <checkAktifCalisma+0x15e0>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d10e      	bne.n	8005636 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8005618:	4b4b      	ldr	r3, [pc, #300]	@ (8005748 <checkAktifCalisma+0x15c8>)
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800561e:	2005      	movs	r0, #5
 8005620:	f7fb fab0 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8005624:	2005      	movs	r0, #5
 8005626:	f7fb fa55 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 800562a:	f002 fff1 	bl	8008610 <convertAndSendData>
			tablakapisivicihatasi=1;
 800562e:	4b50      	ldr	r3, [pc, #320]	@ (8005770 <checkAktifCalisma+0x15f0>)
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e023      	b.n	800567e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005636:	4b4e      	ldr	r3, [pc, #312]	@ (8005770 <checkAktifCalisma+0x15f0>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01f      	beq.n	800567e <checkAktifCalisma+0x14fe>
 800563e:	4b4a      	ldr	r3, [pc, #296]	@ (8005768 <checkAktifCalisma+0x15e8>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01b      	beq.n	800567e <checkAktifCalisma+0x14fe>
 8005646:	4b43      	ldr	r3, [pc, #268]	@ (8005754 <checkAktifCalisma+0x15d4>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	f083 0301 	eor.w	r3, r3, #1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d014      	beq.n	800567e <checkAktifCalisma+0x14fe>
 8005654:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005658:	4840      	ldr	r0, [pc, #256]	@ (800575c <checkAktifCalisma+0x15dc>)
 800565a:	f004 fd2d 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10c      	bne.n	800567e <checkAktifCalisma+0x14fe>
 8005664:	4b40      	ldr	r3, [pc, #256]	@ (8005768 <checkAktifCalisma+0x15e8>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800566c:	4b40      	ldr	r3, [pc, #256]	@ (8005770 <checkAktifCalisma+0x15f0>)
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8005672:	4b3e      	ldr	r3, [pc, #248]	@ (800576c <checkAktifCalisma+0x15ec>)
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8005678:	2005      	movs	r0, #5
 800567a:	f7fe fb7b 	bl	8003d74 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800567e:	4b30      	ldr	r3, [pc, #192]	@ (8005740 <checkAktifCalisma+0x15c0>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d107      	bne.n	8005696 <checkAktifCalisma+0x1516>
 8005686:	4b2a      	ldr	r3, [pc, #168]	@ (8005730 <checkAktifCalisma+0x15b0>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <checkAktifCalisma+0x1516>
 800568e:	4b39      	ldr	r3, [pc, #228]	@ (8005774 <checkAktifCalisma+0x15f4>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d016      	beq.n	80056c4 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8005696:	4b38      	ldr	r3, [pc, #224]	@ (8005778 <checkAktifCalisma+0x15f8>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b38      	ldr	r3, [pc, #224]	@ (800577c <checkAktifCalisma+0x15fc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	4a37      	ldr	r2, [pc, #220]	@ (8005780 <checkAktifCalisma+0x1600>)
 80056a2:	7812      	ldrb	r2, [r2, #0]
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d30d      	bcc.n	80056c4 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80056a8:	4b27      	ldr	r3, [pc, #156]	@ (8005748 <checkAktifCalisma+0x15c8>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80056ae:	2006      	movs	r0, #6
 80056b0:	f7fb fa68 	bl	8000b84 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80056b4:	2006      	movs	r0, #6
 80056b6:	f7fb fa0d 	bl	8000ad4 <hata2EEPROM>
			  	convertAndSendData();
 80056ba:	f002 ffa9 	bl	8008610 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80056be:	4b31      	ldr	r3, [pc, #196]	@ (8005784 <checkAktifCalisma+0x1604>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80056c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005784 <checkAktifCalisma+0x1604>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d013      	beq.n	80056f4 <checkAktifCalisma+0x1574>
 80056cc:	2108      	movs	r1, #8
 80056ce:	4823      	ldr	r0, [pc, #140]	@ (800575c <checkAktifCalisma+0x15dc>)
 80056d0:	f004 fcf2 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00c      	beq.n	80056f4 <checkAktifCalisma+0x1574>
 80056da:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <checkAktifCalisma+0x15d4>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	f083 0301 	eor.w	r3, r3, #1
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80056e8:	4b26      	ldr	r3, [pc, #152]	@ (8005784 <checkAktifCalisma+0x1604>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80056ee:	2006      	movs	r0, #6
 80056f0:	f7fe fb40 	bl	8003d74 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80056f4:	4b24      	ldr	r3, [pc, #144]	@ (8005788 <checkAktifCalisma+0x1608>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <checkAktifCalisma+0x1594>
 80056fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005730 <checkAktifCalisma+0x15b0>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d107      	bne.n	8005714 <checkAktifCalisma+0x1594>
 8005704:	4b21      	ldr	r3, [pc, #132]	@ (800578c <checkAktifCalisma+0x160c>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d103      	bne.n	8005714 <checkAktifCalisma+0x1594>
 800570c:	4b19      	ldr	r3, [pc, #100]	@ (8005774 <checkAktifCalisma+0x15f4>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d03f      	beq.n	8005794 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8005714:	4b1e      	ldr	r3, [pc, #120]	@ (8005790 <checkAktifCalisma+0x1610>)
 8005716:	2200      	movs	r2, #0
 8005718:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800571a:	4b0f      	ldr	r3, [pc, #60]	@ (8005758 <checkAktifCalisma+0x15d8>)
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8005720:	4b12      	ldr	r3, [pc, #72]	@ (800576c <checkAktifCalisma+0x15ec>)
 8005722:	2201      	movs	r2, #1
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e03c      	b.n	80057a2 <checkAktifCalisma+0x1622>
 8005728:	20001115 	.word	0x20001115
 800572c:	2000111b 	.word	0x2000111b
 8005730:	200010fc 	.word	0x200010fc
 8005734:	20001125 	.word	0x20001125
 8005738:	200010c7 	.word	0x200010c7
 800573c:	200010cb 	.word	0x200010cb
 8005740:	20001118 	.word	0x20001118
 8005744:	40011000 	.word	0x40011000
 8005748:	20001119 	.word	0x20001119
 800574c:	20001122 	.word	0x20001122
 8005750:	40010c00 	.word	0x40010c00
 8005754:	20001112 	.word	0x20001112
 8005758:	20001126 	.word	0x20001126
 800575c:	40010800 	.word	0x40010800
 8005760:	200010cc 	.word	0x200010cc
 8005764:	20001123 	.word	0x20001123
 8005768:	20001106 	.word	0x20001106
 800576c:	20001127 	.word	0x20001127
 8005770:	20001124 	.word	0x20001124
 8005774:	200010fb 	.word	0x200010fb
 8005778:	200010a0 	.word	0x200010a0
 800577c:	200010b4 	.word	0x200010b4
 8005780:	200010dc 	.word	0x200010dc
 8005784:	20001113 	.word	0x20001113
 8005788:	200010f9 	.word	0x200010f9
 800578c:	200010fa 	.word	0x200010fa
 8005790:	2000111a 	.word	0x2000111a
		} else {
			makineCalisiyor=1;
 8005794:	4b1e      	ldr	r3, [pc, #120]	@ (8005810 <checkAktifCalisma+0x1690>)
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800579a:	4b1e      	ldr	r3, [pc, #120]	@ (8005814 <checkAktifCalisma+0x1694>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1e      	ldr	r2, [pc, #120]	@ (8005818 <checkAktifCalisma+0x1698>)
 80057a0:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80057a2:	4b1e      	ldr	r3, [pc, #120]	@ (800581c <checkAktifCalisma+0x169c>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d02f      	beq.n	800580a <checkAktifCalisma+0x168a>
 80057aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005820 <checkAktifCalisma+0x16a0>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f083 0301 	eor.w	r3, r3, #1
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d028      	beq.n	800580a <checkAktifCalisma+0x168a>
 80057b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <checkAktifCalisma+0x16a4>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f083 0301 	eor.w	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d021      	beq.n	800580a <checkAktifCalisma+0x168a>
 80057c6:	4b18      	ldr	r3, [pc, #96]	@ (8005828 <checkAktifCalisma+0x16a8>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f083 0301 	eor.w	r3, r3, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01a      	beq.n	800580a <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80057d4:	4b15      	ldr	r3, [pc, #84]	@ (800582c <checkAktifCalisma+0x16ac>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f083 0301 	eor.w	r3, r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d013      	beq.n	800580a <checkAktifCalisma+0x168a>
 80057e2:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <checkAktifCalisma+0x16b0>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f083 0301 	eor.w	r3, r3, #1
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <checkAktifCalisma+0x168a>
 80057f0:	4b10      	ldr	r3, [pc, #64]	@ (8005834 <checkAktifCalisma+0x16b4>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f083 0301 	eor.w	r3, r3, #1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <checkAktifCalisma+0x168a>
			hataVar=0;
 80057fe:	4b07      	ldr	r3, [pc, #28]	@ (800581c <checkAktifCalisma+0x169c>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8005804:	2007      	movs	r0, #7
 8005806:	f7fe fab5 	bl	8003d74 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800580a:	bf00      	nop
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	2000111a 	.word	0x2000111a
 8005814:	200010a0 	.word	0x200010a0
 8005818:	200010b4 	.word	0x200010b4
 800581c:	20001119 	.word	0x20001119
 8005820:	20001114 	.word	0x20001114
 8005824:	20001115 	.word	0x20001115
 8005828:	20001122 	.word	0x20001122
 800582c:	20001123 	.word	0x20001123
 8005830:	20001124 	.word	0x20001124
 8005834:	20001113 	.word	0x20001113

08005838 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800583c:	4b8b      	ldr	r3, [pc, #556]	@ (8005a6c <checkDemoModCalisma+0x234>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b01      	cmp	r3, #1
 8005842:	f040 8229 	bne.w	8005c98 <checkDemoModCalisma+0x460>
 8005846:	4b8a      	ldr	r3, [pc, #552]	@ (8005a70 <checkDemoModCalisma+0x238>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8224 	beq.w	8005c98 <checkDemoModCalisma+0x460>
 8005850:	4b88      	ldr	r3, [pc, #544]	@ (8005a74 <checkDemoModCalisma+0x23c>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f040 821f 	bne.w	8005c98 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800585a:	2102      	movs	r1, #2
 800585c:	4886      	ldr	r0, [pc, #536]	@ (8005a78 <checkDemoModCalisma+0x240>)
 800585e:	f004 fc2b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11d      	bne.n	80058a4 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8005868:	4b84      	ldr	r3, [pc, #528]	@ (8005a7c <checkDemoModCalisma+0x244>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f083 0301 	eor.w	r3, r3, #1
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8005876:	4b82      	ldr	r3, [pc, #520]	@ (8005a80 <checkDemoModCalisma+0x248>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	f083 0301 	eor.w	r3, r3, #1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00f      	beq.n	80058a4 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8005884:	4b7f      	ldr	r3, [pc, #508]	@ (8005a84 <checkDemoModCalisma+0x24c>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	f083 0301 	eor.w	r3, r3, #1
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d008      	beq.n	80058a4 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005892:	2201      	movs	r2, #1
 8005894:	2104      	movs	r1, #4
 8005896:	487c      	ldr	r0, [pc, #496]	@ (8005a88 <checkDemoModCalisma+0x250>)
 8005898:	f004 fc25 	bl	800a0e6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 800589c:	4b7b      	ldr	r3, [pc, #492]	@ (8005a8c <checkDemoModCalisma+0x254>)
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	e00e      	b.n	80058c2 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80058a4:	2102      	movs	r1, #2
 80058a6:	4874      	ldr	r0, [pc, #464]	@ (8005a78 <checkDemoModCalisma+0x240>)
 80058a8:	f004 fc06 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d107      	bne.n	80058c2 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80058b2:	2200      	movs	r2, #0
 80058b4:	2104      	movs	r1, #4
 80058b6:	4874      	ldr	r0, [pc, #464]	@ (8005a88 <checkDemoModCalisma+0x250>)
 80058b8:	f004 fc15 	bl	800a0e6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80058bc:	4b73      	ldr	r3, [pc, #460]	@ (8005a8c <checkDemoModCalisma+0x254>)
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80058c2:	4b72      	ldr	r3, [pc, #456]	@ (8005a8c <checkDemoModCalisma+0x254>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <checkDemoModCalisma+0xaa>
 80058ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005a80 <checkDemoModCalisma+0x248>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d107      	bne.n	80058e2 <checkDemoModCalisma+0xaa>
 80058d2:	4b6c      	ldr	r3, [pc, #432]	@ (8005a84 <checkDemoModCalisma+0x24c>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <checkDemoModCalisma+0xaa>
 80058da:	4b68      	ldr	r3, [pc, #416]	@ (8005a7c <checkDemoModCalisma+0x244>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80058e2:	2201      	movs	r2, #1
 80058e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058e8:	4867      	ldr	r0, [pc, #412]	@ (8005a88 <checkDemoModCalisma+0x250>)
 80058ea:	f004 fbfc 	bl	800a0e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80058ee:	2201      	movs	r2, #1
 80058f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058f4:	4864      	ldr	r0, [pc, #400]	@ (8005a88 <checkDemoModCalisma+0x250>)
 80058f6:	f004 fbf6 	bl	800a0e6 <HAL_GPIO_WritePin>
 80058fa:	e00b      	b.n	8005914 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80058fc:	2200      	movs	r2, #0
 80058fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005902:	4861      	ldr	r0, [pc, #388]	@ (8005a88 <checkDemoModCalisma+0x250>)
 8005904:	f004 fbef 	bl	800a0e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005908:	2200      	movs	r2, #0
 800590a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800590e:	485e      	ldr	r0, [pc, #376]	@ (8005a88 <checkDemoModCalisma+0x250>)
 8005910:	f004 fbe9 	bl	800a0e6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005914:	2102      	movs	r1, #2
 8005916:	4858      	ldr	r0, [pc, #352]	@ (8005a78 <checkDemoModCalisma+0x240>)
 8005918:	f004 fbce 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10d      	bne.n	800593e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005922:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005926:	4854      	ldr	r0, [pc, #336]	@ (8005a78 <checkDemoModCalisma+0x240>)
 8005928:	f004 fbc6 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d105      	bne.n	800593e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8005932:	4b56      	ldr	r3, [pc, #344]	@ (8005a8c <checkDemoModCalisma+0x254>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f083 0301 	eor.w	r3, r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800593e:	2102      	movs	r1, #2
 8005940:	484d      	ldr	r0, [pc, #308]	@ (8005a78 <checkDemoModCalisma+0x240>)
 8005942:	f004 fbb9 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005946:	4603      	mov	r3, r0
 8005948:	2b01      	cmp	r3, #1
 800594a:	d125      	bne.n	8005998 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800594c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005950:	4849      	ldr	r0, [pc, #292]	@ (8005a78 <checkDemoModCalisma+0x240>)
 8005952:	f004 fbb1 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d11d      	bne.n	8005998 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800595c:	4b4b      	ldr	r3, [pc, #300]	@ (8005a8c <checkDemoModCalisma+0x254>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f083 0301 	eor.w	r3, r3, #1
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800596a:	4b44      	ldr	r3, [pc, #272]	@ (8005a7c <checkDemoModCalisma+0x244>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	f083 0301 	eor.w	r3, r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00f      	beq.n	8005998 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8005978:	4b42      	ldr	r3, [pc, #264]	@ (8005a84 <checkDemoModCalisma+0x24c>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f083 0301 	eor.w	r3, r3, #1
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005986:	2201      	movs	r2, #1
 8005988:	2120      	movs	r1, #32
 800598a:	483b      	ldr	r0, [pc, #236]	@ (8005a78 <checkDemoModCalisma+0x240>)
 800598c:	f004 fbab 	bl	800a0e6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8005990:	4b3b      	ldr	r3, [pc, #236]	@ (8005a80 <checkDemoModCalisma+0x248>)
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e007      	b.n	80059a8 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005998:	2200      	movs	r2, #0
 800599a:	2120      	movs	r1, #32
 800599c:	4836      	ldr	r0, [pc, #216]	@ (8005a78 <checkDemoModCalisma+0x240>)
 800599e:	f004 fba2 	bl	800a0e6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80059a2:	4b37      	ldr	r3, [pc, #220]	@ (8005a80 <checkDemoModCalisma+0x248>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059a8:	2102      	movs	r1, #2
 80059aa:	4833      	ldr	r0, [pc, #204]	@ (8005a78 <checkDemoModCalisma+0x240>)
 80059ac:	f004 fb84 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d125      	bne.n	8005a02 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80059b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059ba:	482f      	ldr	r0, [pc, #188]	@ (8005a78 <checkDemoModCalisma+0x240>)
 80059bc:	f004 fb7c 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d11d      	bne.n	8005a02 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80059c6:	4b31      	ldr	r3, [pc, #196]	@ (8005a8c <checkDemoModCalisma+0x254>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	f083 0301 	eor.w	r3, r3, #1
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d016      	beq.n	8005a02 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80059d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005a80 <checkDemoModCalisma+0x248>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f083 0301 	eor.w	r3, r3, #1
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00f      	beq.n	8005a02 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80059e2:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <checkDemoModCalisma+0x244>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f083 0301 	eor.w	r3, r3, #1
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80059f0:	2201      	movs	r2, #1
 80059f2:	2110      	movs	r1, #16
 80059f4:	4820      	ldr	r0, [pc, #128]	@ (8005a78 <checkDemoModCalisma+0x240>)
 80059f6:	f004 fb76 	bl	800a0e6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80059fa:	4b22      	ldr	r3, [pc, #136]	@ (8005a84 <checkDemoModCalisma+0x24c>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	e007      	b.n	8005a12 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005a02:	2200      	movs	r2, #0
 8005a04:	2110      	movs	r1, #16
 8005a06:	481c      	ldr	r0, [pc, #112]	@ (8005a78 <checkDemoModCalisma+0x240>)
 8005a08:	f004 fb6d 	bl	800a0e6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8005a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a84 <checkDemoModCalisma+0x24c>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a12:	2104      	movs	r1, #4
 8005a14:	4818      	ldr	r0, [pc, #96]	@ (8005a78 <checkDemoModCalisma+0x240>)
 8005a16:	f004 fb4f 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d139      	bne.n	8005a94 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8005a20:	4b1a      	ldr	r3, [pc, #104]	@ (8005a8c <checkDemoModCalisma+0x254>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f083 0301 	eor.w	r3, r3, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d032      	beq.n	8005a94 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8005a2e:	4b15      	ldr	r3, [pc, #84]	@ (8005a84 <checkDemoModCalisma+0x24c>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f083 0301 	eor.w	r3, r3, #1
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d02b      	beq.n	8005a94 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8005a3c:	4b10      	ldr	r3, [pc, #64]	@ (8005a80 <checkDemoModCalisma+0x248>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	f083 0301 	eor.w	r3, r3, #1
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d024      	beq.n	8005a94 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	480e      	ldr	r0, [pc, #56]	@ (8005a88 <checkDemoModCalisma+0x250>)
 8005a50:	f004 fb49 	bl	800a0e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005a54:	2201      	movs	r2, #1
 8005a56:	2101      	movs	r1, #1
 8005a58:	480b      	ldr	r0, [pc, #44]	@ (8005a88 <checkDemoModCalisma+0x250>)
 8005a5a:	f004 fb44 	bl	800a0e6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8005a5e:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <checkDemoModCalisma+0x244>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <checkDemoModCalisma+0x258>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	e027      	b.n	8005abc <checkDemoModCalisma+0x284>
 8005a6c:	200010e2 	.word	0x200010e2
 8005a70:	20001116 	.word	0x20001116
 8005a74:	200010e1 	.word	0x200010e1
 8005a78:	40011000 	.word	0x40011000
 8005a7c:	2000111d 	.word	0x2000111d
 8005a80:	2000111e 	.word	0x2000111e
 8005a84:	2000111f 	.word	0x2000111f
 8005a88:	40010c00 	.word	0x40010c00
 8005a8c:	2000111c 	.word	0x2000111c
 8005a90:	20001102 	.word	0x20001102
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005a94:	2104      	movs	r1, #4
 8005a96:	48a0      	ldr	r0, [pc, #640]	@ (8005d18 <checkDemoModCalisma+0x4e0>)
 8005a98:	f004 fb0e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d10c      	bne.n	8005abc <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	489d      	ldr	r0, [pc, #628]	@ (8005d1c <checkDemoModCalisma+0x4e4>)
 8005aa8:	f004 fb1d 	bl	800a0e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005aac:	2200      	movs	r2, #0
 8005aae:	2101      	movs	r1, #1
 8005ab0:	489a      	ldr	r0, [pc, #616]	@ (8005d1c <checkDemoModCalisma+0x4e4>)
 8005ab2:	f004 fb18 	bl	800a0e6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8005ab6:	4b9a      	ldr	r3, [pc, #616]	@ (8005d20 <checkDemoModCalisma+0x4e8>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005abc:	2104      	movs	r1, #4
 8005abe:	4896      	ldr	r0, [pc, #600]	@ (8005d18 <checkDemoModCalisma+0x4e0>)
 8005ac0:	f004 fafa 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d10d      	bne.n	8005ae6 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005aca:	2201      	movs	r2, #1
 8005acc:	2180      	movs	r1, #128	@ 0x80
 8005ace:	4895      	ldr	r0, [pc, #596]	@ (8005d24 <checkDemoModCalisma+0x4ec>)
 8005ad0:	f004 fb09 	bl	800a0e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	2120      	movs	r1, #32
 8005ad8:	4892      	ldr	r0, [pc, #584]	@ (8005d24 <checkDemoModCalisma+0x4ec>)
 8005ada:	f004 fb04 	bl	800a0e6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8005ade:	4b92      	ldr	r3, [pc, #584]	@ (8005d28 <checkDemoModCalisma+0x4f0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a92      	ldr	r2, [pc, #584]	@ (8005d2c <checkDemoModCalisma+0x4f4>)
 8005ae4:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005ae6:	4b90      	ldr	r3, [pc, #576]	@ (8005d28 <checkDemoModCalisma+0x4f0>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b90      	ldr	r3, [pc, #576]	@ (8005d2c <checkDemoModCalisma+0x4f4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d909      	bls.n	8005b08 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005af4:	2200      	movs	r2, #0
 8005af6:	2180      	movs	r1, #128	@ 0x80
 8005af8:	488a      	ldr	r0, [pc, #552]	@ (8005d24 <checkDemoModCalisma+0x4ec>)
 8005afa:	f004 faf4 	bl	800a0e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005afe:	2200      	movs	r2, #0
 8005b00:	2120      	movs	r1, #32
 8005b02:	4888      	ldr	r0, [pc, #544]	@ (8005d24 <checkDemoModCalisma+0x4ec>)
 8005b04:	f004 faef 	bl	800a0e6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005b08:	2102      	movs	r1, #2
 8005b0a:	4883      	ldr	r0, [pc, #524]	@ (8005d18 <checkDemoModCalisma+0x4e0>)
 8005b0c:	f004 fad4 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d108      	bne.n	8005b28 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005b16:	2201      	movs	r2, #1
 8005b18:	2140      	movs	r1, #64	@ 0x40
 8005b1a:	4882      	ldr	r0, [pc, #520]	@ (8005d24 <checkDemoModCalisma+0x4ec>)
 8005b1c:	f004 fae3 	bl	800a0e6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8005b20:	4b81      	ldr	r3, [pc, #516]	@ (8005d28 <checkDemoModCalisma+0x4f0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a81      	ldr	r2, [pc, #516]	@ (8005d2c <checkDemoModCalisma+0x4f4>)
 8005b26:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005b28:	4b7f      	ldr	r3, [pc, #508]	@ (8005d28 <checkDemoModCalisma+0x4f0>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b7f      	ldr	r3, [pc, #508]	@ (8005d2c <checkDemoModCalisma+0x4f4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d904      	bls.n	8005b40 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005b36:	2200      	movs	r2, #0
 8005b38:	2140      	movs	r1, #64	@ 0x40
 8005b3a:	487a      	ldr	r0, [pc, #488]	@ (8005d24 <checkDemoModCalisma+0x4ec>)
 8005b3c:	f004 fad3 	bl	800a0e6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005b40:	4b7b      	ldr	r3, [pc, #492]	@ (8005d30 <checkDemoModCalisma+0x4f8>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d058      	beq.n	8005bfa <checkDemoModCalisma+0x3c2>
 8005b48:	4b7a      	ldr	r3, [pc, #488]	@ (8005d34 <checkDemoModCalisma+0x4fc>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d054      	beq.n	8005bfa <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8005b50:	4b79      	ldr	r3, [pc, #484]	@ (8005d38 <checkDemoModCalisma+0x500>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	3301      	adds	r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	4b77      	ldr	r3, [pc, #476]	@ (8005d38 <checkDemoModCalisma+0x500>)
 8005b5a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8005b5c:	4b76      	ldr	r3, [pc, #472]	@ (8005d38 <checkDemoModCalisma+0x500>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b09      	cmp	r3, #9
 8005b62:	d908      	bls.n	8005b76 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8005b64:	4b74      	ldr	r3, [pc, #464]	@ (8005d38 <checkDemoModCalisma+0x500>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8005b6a:	4b74      	ldr	r3, [pc, #464]	@ (8005d3c <checkDemoModCalisma+0x504>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	4b72      	ldr	r3, [pc, #456]	@ (8005d3c <checkDemoModCalisma+0x504>)
 8005b74:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8005b76:	4b71      	ldr	r3, [pc, #452]	@ (8005d3c <checkDemoModCalisma+0x504>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b09      	cmp	r3, #9
 8005b7c:	d908      	bls.n	8005b90 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8005b7e:	4b6f      	ldr	r3, [pc, #444]	@ (8005d3c <checkDemoModCalisma+0x504>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8005b84:	4b6e      	ldr	r3, [pc, #440]	@ (8005d40 <checkDemoModCalisma+0x508>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8005d40 <checkDemoModCalisma+0x508>)
 8005b8e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8005b90:	4b6b      	ldr	r3, [pc, #428]	@ (8005d40 <checkDemoModCalisma+0x508>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b09      	cmp	r3, #9
 8005b96:	d908      	bls.n	8005baa <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8005b98:	4b69      	ldr	r3, [pc, #420]	@ (8005d40 <checkDemoModCalisma+0x508>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8005b9e:	4b69      	ldr	r3, [pc, #420]	@ (8005d44 <checkDemoModCalisma+0x50c>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	4b67      	ldr	r3, [pc, #412]	@ (8005d44 <checkDemoModCalisma+0x50c>)
 8005ba8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8005baa:	4b66      	ldr	r3, [pc, #408]	@ (8005d44 <checkDemoModCalisma+0x50c>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	d908      	bls.n	8005bc4 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8005bb2:	4b64      	ldr	r3, [pc, #400]	@ (8005d44 <checkDemoModCalisma+0x50c>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8005bb8:	4b63      	ldr	r3, [pc, #396]	@ (8005d48 <checkDemoModCalisma+0x510>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	4b61      	ldr	r3, [pc, #388]	@ (8005d48 <checkDemoModCalisma+0x510>)
 8005bc2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005bc4:	4b60      	ldr	r3, [pc, #384]	@ (8005d48 <checkDemoModCalisma+0x510>)
 8005bc6:	781a      	ldrb	r2, [r3, #0]
 8005bc8:	4b60      	ldr	r3, [pc, #384]	@ (8005d4c <checkDemoModCalisma+0x514>)
 8005bca:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005bce:	4b5d      	ldr	r3, [pc, #372]	@ (8005d44 <checkDemoModCalisma+0x50c>)
 8005bd0:	781a      	ldrb	r2, [r3, #0]
 8005bd2:	4b5e      	ldr	r3, [pc, #376]	@ (8005d4c <checkDemoModCalisma+0x514>)
 8005bd4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005bd6:	4b5a      	ldr	r3, [pc, #360]	@ (8005d40 <checkDemoModCalisma+0x508>)
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	4b5c      	ldr	r3, [pc, #368]	@ (8005d4c <checkDemoModCalisma+0x514>)
 8005bdc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005bde:	4b57      	ldr	r3, [pc, #348]	@ (8005d3c <checkDemoModCalisma+0x504>)
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	4b5a      	ldr	r3, [pc, #360]	@ (8005d4c <checkDemoModCalisma+0x514>)
 8005be4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005be6:	4b54      	ldr	r3, [pc, #336]	@ (8005d38 <checkDemoModCalisma+0x500>)
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	4b58      	ldr	r3, [pc, #352]	@ (8005d4c <checkDemoModCalisma+0x514>)
 8005bec:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8005bee:	4b58      	ldr	r3, [pc, #352]	@ (8005d50 <checkDemoModCalisma+0x518>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8005bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8005d34 <checkDemoModCalisma+0x4fc>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8005bfa:	4b56      	ldr	r3, [pc, #344]	@ (8005d54 <checkDemoModCalisma+0x51c>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f040 8087 	bne.w	8005d12 <checkDemoModCalisma+0x4da>
			lcd_print(1, 1, demoModTextGN);
 8005c04:	4a54      	ldr	r2, [pc, #336]	@ (8005d58 <checkDemoModCalisma+0x520>)
 8005c06:	2101      	movs	r1, #1
 8005c08:	2001      	movs	r0, #1
 8005c0a:	f002 ff2b 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, cycleTextGN);
 8005c0e:	4a53      	ldr	r2, [pc, #332]	@ (8005d5c <checkDemoModCalisma+0x524>)
 8005c10:	2101      	movs	r1, #1
 8005c12:	2002      	movs	r0, #2
 8005c14:	f002 ff26 	bl	8008a64 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8005c18:	4b4b      	ldr	r3, [pc, #300]	@ (8005d48 <checkDemoModCalisma+0x510>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	220a      	movs	r2, #10
 8005c1e:	4950      	ldr	r1, [pc, #320]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c20:	4618      	mov	r0, r3
 8005c22:	f007 fa75 	bl	800d110 <itoa>
			lcd_print(2,12,snum);
 8005c26:	4a4e      	ldr	r2, [pc, #312]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c28:	210c      	movs	r1, #12
 8005c2a:	2002      	movs	r0, #2
 8005c2c:	f002 ff1a 	bl	8008a64 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8005c30:	4b44      	ldr	r3, [pc, #272]	@ (8005d44 <checkDemoModCalisma+0x50c>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	220a      	movs	r2, #10
 8005c36:	494a      	ldr	r1, [pc, #296]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f007 fa69 	bl	800d110 <itoa>
			lcd_print(2,13,snum);
 8005c3e:	4a48      	ldr	r2, [pc, #288]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c40:	210d      	movs	r1, #13
 8005c42:	2002      	movs	r0, #2
 8005c44:	f002 ff0e 	bl	8008a64 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8005c48:	4b3d      	ldr	r3, [pc, #244]	@ (8005d40 <checkDemoModCalisma+0x508>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	220a      	movs	r2, #10
 8005c4e:	4944      	ldr	r1, [pc, #272]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c50:	4618      	mov	r0, r3
 8005c52:	f007 fa5d 	bl	800d110 <itoa>
			lcd_print(2,14,snum);
 8005c56:	4a42      	ldr	r2, [pc, #264]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c58:	210e      	movs	r1, #14
 8005c5a:	2002      	movs	r0, #2
 8005c5c:	f002 ff02 	bl	8008a64 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8005c60:	4b36      	ldr	r3, [pc, #216]	@ (8005d3c <checkDemoModCalisma+0x504>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	220a      	movs	r2, #10
 8005c66:	493e      	ldr	r1, [pc, #248]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f007 fa51 	bl	800d110 <itoa>
			lcd_print(2,15,snum);
 8005c6e:	4a3c      	ldr	r2, [pc, #240]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c70:	210f      	movs	r1, #15
 8005c72:	2002      	movs	r0, #2
 8005c74:	f002 fef6 	bl	8008a64 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8005c78:	4b2f      	ldr	r3, [pc, #188]	@ (8005d38 <checkDemoModCalisma+0x500>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	220a      	movs	r2, #10
 8005c7e:	4938      	ldr	r1, [pc, #224]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c80:	4618      	mov	r0, r3
 8005c82:	f007 fa45 	bl	800d110 <itoa>
			lcd_print(2,16,snum);
 8005c86:	4a36      	ldr	r2, [pc, #216]	@ (8005d60 <checkDemoModCalisma+0x528>)
 8005c88:	2110      	movs	r1, #16
 8005c8a:	2002      	movs	r0, #2
 8005c8c:	f002 feea 	bl	8008a64 <lcd_print>
			mesajYazildi=1;
 8005c90:	4b34      	ldr	r3, [pc, #208]	@ (8005d64 <checkDemoModCalisma+0x52c>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8005c96:	e03c      	b.n	8005d12 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8005c98:	4b33      	ldr	r3, [pc, #204]	@ (8005d68 <checkDemoModCalisma+0x530>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d003      	beq.n	8005ca8 <checkDemoModCalisma+0x470>
 8005ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8005d54 <checkDemoModCalisma+0x51c>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d134      	bne.n	8005d12 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005cae:	481b      	ldr	r0, [pc, #108]	@ (8005d1c <checkDemoModCalisma+0x4e4>)
 8005cb0:	f004 fa19 	bl	800a0e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005cba:	4818      	ldr	r0, [pc, #96]	@ (8005d1c <checkDemoModCalisma+0x4e4>)
 8005cbc:	f004 fa13 	bl	800a0e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2104      	movs	r1, #4
 8005cc4:	4815      	ldr	r0, [pc, #84]	@ (8005d1c <checkDemoModCalisma+0x4e4>)
 8005cc6:	f004 fa0e 	bl	800a0e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2102      	movs	r1, #2
 8005cce:	4813      	ldr	r0, [pc, #76]	@ (8005d1c <checkDemoModCalisma+0x4e4>)
 8005cd0:	f004 fa09 	bl	800a0e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	4810      	ldr	r0, [pc, #64]	@ (8005d1c <checkDemoModCalisma+0x4e4>)
 8005cda:	f004 fa04 	bl	800a0e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2120      	movs	r1, #32
 8005ce2:	480d      	ldr	r0, [pc, #52]	@ (8005d18 <checkDemoModCalisma+0x4e0>)
 8005ce4:	f004 f9ff 	bl	800a0e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2110      	movs	r1, #16
 8005cec:	480a      	ldr	r0, [pc, #40]	@ (8005d18 <checkDemoModCalisma+0x4e0>)
 8005cee:	f004 f9fa 	bl	800a0e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2180      	movs	r1, #128	@ 0x80
 8005cf6:	480b      	ldr	r0, [pc, #44]	@ (8005d24 <checkDemoModCalisma+0x4ec>)
 8005cf8:	f004 f9f5 	bl	800a0e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2140      	movs	r1, #64	@ 0x40
 8005d00:	4808      	ldr	r0, [pc, #32]	@ (8005d24 <checkDemoModCalisma+0x4ec>)
 8005d02:	f004 f9f0 	bl	800a0e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005d06:	2200      	movs	r2, #0
 8005d08:	2120      	movs	r1, #32
 8005d0a:	4806      	ldr	r0, [pc, #24]	@ (8005d24 <checkDemoModCalisma+0x4ec>)
 8005d0c:	f004 f9eb 	bl	800a0e6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8005d10:	e7ff      	b.n	8005d12 <checkDemoModCalisma+0x4da>
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40011000 	.word	0x40011000
 8005d1c:	40010c00 	.word	0x40010c00
 8005d20:	2000111d 	.word	0x2000111d
 8005d24:	40010800 	.word	0x40010800
 8005d28:	200010a0 	.word	0x200010a0
 8005d2c:	200010b0 	.word	0x200010b0
 8005d30:	2000111c 	.word	0x2000111c
 8005d34:	20001102 	.word	0x20001102
 8005d38:	200010c1 	.word	0x200010c1
 8005d3c:	200010c2 	.word	0x200010c2
 8005d40:	20000000 	.word	0x20000000
 8005d44:	20000001 	.word	0x20000001
 8005d48:	200010c3 	.word	0x200010c3
 8005d4c:	20000ff0 	.word	0x20000ff0
 8005d50:	200010f0 	.word	0x200010f0
 8005d54:	200010e1 	.word	0x200010e1
 8005d58:	20000140 	.word	0x20000140
 8005d5c:	20000168 	.word	0x20000168
 8005d60:	20001060 	.word	0x20001060
 8005d64:	200010f8 	.word	0x200010f8
 8005d68:	200010e2 	.word	0x200010e2

08005d6c <mainLoop>:

void mainLoop() {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8005d72:	f7fe f853 	bl	8003e1c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005d76:	2101      	movs	r1, #1
 8005d78:	4894      	ldr	r0, [pc, #592]	@ (8005fcc <mainLoop+0x260>)
 8005d7a:	f004 f99d 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d136      	bne.n	8005df2 <mainLoop+0x86>
 8005d84:	2108      	movs	r1, #8
 8005d86:	4892      	ldr	r0, [pc, #584]	@ (8005fd0 <mainLoop+0x264>)
 8005d88:	f004 f996 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d12f      	bne.n	8005df2 <mainLoop+0x86>
 8005d92:	2102      	movs	r1, #2
 8005d94:	488d      	ldr	r0, [pc, #564]	@ (8005fcc <mainLoop+0x260>)
 8005d96:	f004 f98f 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d128      	bne.n	8005df2 <mainLoop+0x86>
 8005da0:	2104      	movs	r1, #4
 8005da2:	488a      	ldr	r0, [pc, #552]	@ (8005fcc <mainLoop+0x260>)
 8005da4:	f004 f988 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d121      	bne.n	8005df2 <mainLoop+0x86>
 8005dae:	2108      	movs	r1, #8
 8005db0:	4886      	ldr	r0, [pc, #536]	@ (8005fcc <mainLoop+0x260>)
 8005db2:	f004 f981 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d11a      	bne.n	8005df2 <mainLoop+0x86>
 8005dbc:	2180      	movs	r1, #128	@ 0x80
 8005dbe:	4884      	ldr	r0, [pc, #528]	@ (8005fd0 <mainLoop+0x264>)
 8005dc0:	f004 f97a 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d113      	bne.n	8005df2 <mainLoop+0x86>
 8005dca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005dce:	4880      	ldr	r0, [pc, #512]	@ (8005fd0 <mainLoop+0x264>)
 8005dd0:	f004 f972 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d10b      	bne.n	8005df2 <mainLoop+0x86>
 8005dda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005dde:	487c      	ldr	r0, [pc, #496]	@ (8005fd0 <mainLoop+0x264>)
 8005de0:	f004 f96a 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d103      	bne.n	8005df2 <mainLoop+0x86>
			butonKontrol=0;
 8005dea:	4b7a      	ldr	r3, [pc, #488]	@ (8005fd4 <mainLoop+0x268>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	e003      	b.n	8005dfa <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8005df2:	4b79      	ldr	r3, [pc, #484]	@ (8005fd8 <mainLoop+0x26c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a79      	ldr	r2, [pc, #484]	@ (8005fdc <mainLoop+0x270>)
 8005df8:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005dfa:	f7fe f8c1 	bl	8003f80 <buttonCheck>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d103      	bne.n	8005e0c <mainLoop+0xa0>
			backLightTimer = millis;
 8005e04:	4b74      	ldr	r3, [pc, #464]	@ (8005fd8 <mainLoop+0x26c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a74      	ldr	r2, [pc, #464]	@ (8005fdc <mainLoop+0x270>)
 8005e0a:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8005e0c:	4b74      	ldr	r3, [pc, #464]	@ (8005fe0 <mainLoop+0x274>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02c      	beq.n	8005e6e <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005e14:	bf00      	nop
 8005e16:	4873      	ldr	r0, [pc, #460]	@ (8005fe4 <mainLoop+0x278>)
 8005e18:	f004 ff77 	bl	800ad0a <HAL_I2C_GetError>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d0f9      	beq.n	8005e16 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8005e22:	bf00      	nop
 8005e24:	486f      	ldr	r0, [pc, #444]	@ (8005fe4 <mainLoop+0x278>)
 8005e26:	f004 ff63 	bl	800acf0 <HAL_I2C_GetState>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d1f9      	bne.n	8005e24 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005e30:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005e34:	9302      	str	r3, [sp, #8]
 8005e36:	236e      	movs	r3, #110	@ 0x6e
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	4b6b      	ldr	r3, [pc, #428]	@ (8005fe8 <mainLoop+0x27c>)
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	236e      	movs	r3, #110	@ 0x6e
 8005e40:	2200      	movs	r2, #0
 8005e42:	21a0      	movs	r1, #160	@ 0xa0
 8005e44:	4867      	ldr	r0, [pc, #412]	@ (8005fe4 <mainLoop+0x278>)
 8005e46:	f004 fbf1 	bl	800a62c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8005e4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005e4e:	f003 fb63 	bl	8009518 <HAL_Delay>

		  hafizaYaz=0;
 8005e52:	4b63      	ldr	r3, [pc, #396]	@ (8005fe0 <mainLoop+0x274>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8005e58:	4a64      	ldr	r2, [pc, #400]	@ (8005fec <mainLoop+0x280>)
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	2002      	movs	r0, #2
 8005e5e:	f002 fe01 	bl	8008a64 <lcd_print>

		  HAL_Delay(1000);
 8005e62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e66:	f003 fb57 	bl	8009518 <HAL_Delay>
		  lcd_clear();
 8005e6a:	f002 fe27 	bl	8008abc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005e6e:	4b60      	ldr	r3, [pc, #384]	@ (8005ff0 <mainLoop+0x284>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	f083 0301 	eor.w	r3, r3, #1
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d043      	beq.n	8005f04 <mainLoop+0x198>
 8005e7c:	4859      	ldr	r0, [pc, #356]	@ (8005fe4 <mainLoop+0x278>)
 8005e7e:	f004 ff37 	bl	800acf0 <HAL_I2C_GetState>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d13d      	bne.n	8005f04 <mainLoop+0x198>
		  if(ilkOkuma==0) {
 8005e88:	4b5a      	ldr	r3, [pc, #360]	@ (8005ff4 <mainLoop+0x288>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f083 0301 	eor.w	r3, r3, #1
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d028      	beq.n	8005ee8 <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 8005e96:	4a58      	ldr	r2, [pc, #352]	@ (8005ff8 <mainLoop+0x28c>)
 8005e98:	2101      	movs	r1, #1
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	f002 fde2 	bl	8008a64 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005ea0:	4a56      	ldr	r2, [pc, #344]	@ (8005ffc <mainLoop+0x290>)
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	f002 fddd 	bl	8008a64 <lcd_print>
			  HAL_Delay(1000);
 8005eaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005eae:	f003 fb33 	bl	8009518 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005eb2:	bf00      	nop
 8005eb4:	484b      	ldr	r0, [pc, #300]	@ (8005fe4 <mainLoop+0x278>)
 8005eb6:	f004 ff28 	bl	800ad0a <HAL_I2C_GetError>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d0f9      	beq.n	8005eb4 <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005ec0:	e003      	b.n	8005eca <mainLoop+0x15e>
				  HAL_Delay(1000);
 8005ec2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005ec6:	f003 fb27 	bl	8009518 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005eca:	4846      	ldr	r0, [pc, #280]	@ (8005fe4 <mainLoop+0x278>)
 8005ecc:	f004 ff10 	bl	800acf0 <HAL_I2C_GetState>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d1f5      	bne.n	8005ec2 <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005ed6:	4a4a      	ldr	r2, [pc, #296]	@ (8006000 <mainLoop+0x294>)
 8005ed8:	2101      	movs	r1, #1
 8005eda:	2002      	movs	r0, #2
 8005edc:	f002 fdc2 	bl	8008a64 <lcd_print>

			  ilkOkuma=1;
 8005ee0:	4b44      	ldr	r3, [pc, #272]	@ (8005ff4 <mainLoop+0x288>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e006      	b.n	8005ef6 <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005ee8:	4a46      	ldr	r2, [pc, #280]	@ (8006004 <mainLoop+0x298>)
 8005eea:	2101      	movs	r1, #1
 8005eec:	2002      	movs	r0, #2
 8005eee:	f002 fdb9 	bl	8008a64 <lcd_print>
			  lcd_clear();
 8005ef2:	f002 fde3 	bl	8008abc <lcd_clear>
		  }

		  lcd_clear();
 8005ef6:	f002 fde1 	bl	8008abc <lcd_clear>

		  eepromKontrol();
 8005efa:	f7fa f99b 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005efe:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff0 <mainLoop+0x284>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005f04:	4b40      	ldr	r3, [pc, #256]	@ (8006008 <mainLoop+0x29c>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d11c      	bne.n	8005f46 <mainLoop+0x1da>
 8005f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800600c <mainLoop+0x2a0>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	f083 0301 	eor.w	r3, r3, #1
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d015      	beq.n	8005f46 <mainLoop+0x1da>
 8005f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006010 <mainLoop+0x2a4>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d111      	bne.n	8005f46 <mainLoop+0x1da>
			lcd_clear();
 8005f22:	f002 fdcb 	bl	8008abc <lcd_clear>
			HAL_Delay(10);
 8005f26:	200a      	movs	r0, #10
 8005f28:	f003 faf6 	bl	8009518 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005f2c:	4a39      	ldr	r2, [pc, #228]	@ (8006014 <mainLoop+0x2a8>)
 8005f2e:	2101      	movs	r1, #1
 8005f30:	2001      	movs	r0, #1
 8005f32:	f002 fd97 	bl	8008a64 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005f36:	4a38      	ldr	r2, [pc, #224]	@ (8006018 <mainLoop+0x2ac>)
 8005f38:	2101      	movs	r1, #1
 8005f3a:	2002      	movs	r0, #2
 8005f3c:	f002 fd92 	bl	8008a64 <lcd_print>
			mesajYazildi=1;
 8005f40:	4b32      	ldr	r3, [pc, #200]	@ (800600c <mainLoop+0x2a0>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005f46:	4b30      	ldr	r3, [pc, #192]	@ (8006008 <mainLoop+0x29c>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d112      	bne.n	8005f74 <mainLoop+0x208>
 8005f4e:	2102      	movs	r1, #2
 8005f50:	481e      	ldr	r0, [pc, #120]	@ (8005fcc <mainLoop+0x260>)
 8005f52:	f004 f8b1 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d10b      	bne.n	8005f74 <mainLoop+0x208>
 8005f5c:	2104      	movs	r1, #4
 8005f5e:	481b      	ldr	r0, [pc, #108]	@ (8005fcc <mainLoop+0x260>)
 8005f60:	f004 f8aa 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d104      	bne.n	8005f74 <mainLoop+0x208>
			menuGiris=1;
 8005f6a:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <mainLoop+0x29c>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005f70:	f002 fda4 	bl	8008abc <lcd_clear>
		}

		if(menuGiris==1) {
 8005f74:	4b24      	ldr	r3, [pc, #144]	@ (8006008 <mainLoop+0x29c>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <mainLoop+0x214>
			menu();
 8005f7c:	f7fb fa36 	bl	80013ec <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005f80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f84:	4812      	ldr	r0, [pc, #72]	@ (8005fd0 <mainLoop+0x264>)
 8005f86:	f004 f8c6 	bl	800a116 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005f8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f8e:	4823      	ldr	r0, [pc, #140]	@ (800601c <mainLoop+0x2b0>)
 8005f90:	f004 f892 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <mainLoop+0x244>
 8005f9a:	4b21      	ldr	r3, [pc, #132]	@ (8006020 <mainLoop+0x2b4>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	f083 0301 	eor.w	r3, r3, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <mainLoop+0x244>
			stopVar=1;
 8005fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8006024 <mainLoop+0x2b8>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	e002      	b.n	8005fb6 <mainLoop+0x24a>
		} else {
			stopVar=0;
 8005fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006024 <mainLoop+0x2b8>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005fb6:	f7fe f817 	bl	8003fe8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005fba:	f7fe f849 	bl	8004050 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005fbe:	f7fe f88d 	bl	80040dc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005fc2:	f7fe f8dd 	bl	8004180 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005fc6:	f7ff fc37 	bl	8005838 <checkDemoModCalisma>
		checkLCDBacklight();
 8005fca:	e6d2      	b.n	8005d72 <mainLoop+0x6>
 8005fcc:	40010800 	.word	0x40010800
 8005fd0:	40011000 	.word	0x40011000
 8005fd4:	200010f3 	.word	0x200010f3
 8005fd8:	200010a0 	.word	0x200010a0
 8005fdc:	200010bc 	.word	0x200010bc
 8005fe0:	200010f0 	.word	0x200010f0
 8005fe4:	20001940 	.word	0x20001940
 8005fe8:	20000ff0 	.word	0x20000ff0
 8005fec:	20001864 	.word	0x20001864
 8005ff0:	200010f1 	.word	0x200010f1
 8005ff4:	200010f2 	.word	0x200010f2
 8005ff8:	2000017c 	.word	0x2000017c
 8005ffc:	20001878 	.word	0x20001878
 8006000:	2000188c 	.word	0x2000188c
 8006004:	200018a0 	.word	0x200018a0
 8006008:	200010e1 	.word	0x200010e1
 800600c:	200010f8 	.word	0x200010f8
 8006010:	200010e2 	.word	0x200010e2
 8006014:	200000c8 	.word	0x200000c8
 8006018:	200000dc 	.word	0x200000dc
 800601c:	40010c00 	.word	0x40010c00
 8006020:	20001119 	.word	0x20001119
 8006024:	20001116 	.word	0x20001116

08006028 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8006028:	b5b0      	push	{r4, r5, r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	4603      	mov	r3, r0
 8006030:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 853d 	bne.w	8006ab4 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 800603a:	4ac7      	ldr	r2, [pc, #796]	@ (8006358 <loadMenuTexts+0x330>)
 800603c:	4bc7      	ldr	r3, [pc, #796]	@ (800635c <loadMenuTexts+0x334>)
 800603e:	4614      	mov	r4, r2
 8006040:	461d      	mov	r5, r3
 8006042:	6828      	ldr	r0, [r5, #0]
 8006044:	6869      	ldr	r1, [r5, #4]
 8006046:	68aa      	ldr	r2, [r5, #8]
 8006048:	68eb      	ldr	r3, [r5, #12]
 800604a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604c:	7c2b      	ldrb	r3, [r5, #16]
 800604e:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006050:	4ac3      	ldr	r2, [pc, #780]	@ (8006360 <loadMenuTexts+0x338>)
 8006052:	4bc4      	ldr	r3, [pc, #784]	@ (8006364 <loadMenuTexts+0x33c>)
 8006054:	4614      	mov	r4, r2
 8006056:	461d      	mov	r5, r3
 8006058:	6828      	ldr	r0, [r5, #0]
 800605a:	6869      	ldr	r1, [r5, #4]
 800605c:	68aa      	ldr	r2, [r5, #8]
 800605e:	68eb      	ldr	r3, [r5, #12]
 8006060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006062:	7c2b      	ldrb	r3, [r5, #16]
 8006064:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006066:	4ac0      	ldr	r2, [pc, #768]	@ (8006368 <loadMenuTexts+0x340>)
 8006068:	4bc0      	ldr	r3, [pc, #768]	@ (800636c <loadMenuTexts+0x344>)
 800606a:	4614      	mov	r4, r2
 800606c:	461d      	mov	r5, r3
 800606e:	6828      	ldr	r0, [r5, #0]
 8006070:	6869      	ldr	r1, [r5, #4]
 8006072:	68aa      	ldr	r2, [r5, #8]
 8006074:	68eb      	ldr	r3, [r5, #12]
 8006076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006078:	7c2b      	ldrb	r3, [r5, #16]
 800607a:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 800607c:	4abc      	ldr	r2, [pc, #752]	@ (8006370 <loadMenuTexts+0x348>)
 800607e:	4bbd      	ldr	r3, [pc, #756]	@ (8006374 <loadMenuTexts+0x34c>)
 8006080:	4614      	mov	r4, r2
 8006082:	461d      	mov	r5, r3
 8006084:	6828      	ldr	r0, [r5, #0]
 8006086:	6869      	ldr	r1, [r5, #4]
 8006088:	68aa      	ldr	r2, [r5, #8]
 800608a:	68eb      	ldr	r3, [r5, #12]
 800608c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800608e:	7c2b      	ldrb	r3, [r5, #16]
 8006090:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8006092:	4ab9      	ldr	r2, [pc, #740]	@ (8006378 <loadMenuTexts+0x350>)
 8006094:	4bb9      	ldr	r3, [pc, #740]	@ (800637c <loadMenuTexts+0x354>)
 8006096:	4614      	mov	r4, r2
 8006098:	461d      	mov	r5, r3
 800609a:	6828      	ldr	r0, [r5, #0]
 800609c:	6869      	ldr	r1, [r5, #4]
 800609e:	68aa      	ldr	r2, [r5, #8]
 80060a0:	68eb      	ldr	r3, [r5, #12]
 80060a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a4:	7c2b      	ldrb	r3, [r5, #16]
 80060a6:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80060a8:	4ab5      	ldr	r2, [pc, #724]	@ (8006380 <loadMenuTexts+0x358>)
 80060aa:	4bb6      	ldr	r3, [pc, #728]	@ (8006384 <loadMenuTexts+0x35c>)
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	6828      	ldr	r0, [r5, #0]
 80060b2:	6869      	ldr	r1, [r5, #4]
 80060b4:	68aa      	ldr	r2, [r5, #8]
 80060b6:	68eb      	ldr	r3, [r5, #12]
 80060b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ba:	7c2b      	ldrb	r3, [r5, #16]
 80060bc:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80060be:	4ab2      	ldr	r2, [pc, #712]	@ (8006388 <loadMenuTexts+0x360>)
 80060c0:	4bb2      	ldr	r3, [pc, #712]	@ (800638c <loadMenuTexts+0x364>)
 80060c2:	4614      	mov	r4, r2
 80060c4:	461d      	mov	r5, r3
 80060c6:	6828      	ldr	r0, [r5, #0]
 80060c8:	6869      	ldr	r1, [r5, #4]
 80060ca:	68aa      	ldr	r2, [r5, #8]
 80060cc:	68eb      	ldr	r3, [r5, #12]
 80060ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060d0:	7c2b      	ldrb	r3, [r5, #16]
 80060d2:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80060d4:	4aae      	ldr	r2, [pc, #696]	@ (8006390 <loadMenuTexts+0x368>)
 80060d6:	4baf      	ldr	r3, [pc, #700]	@ (8006394 <loadMenuTexts+0x36c>)
 80060d8:	4614      	mov	r4, r2
 80060da:	461d      	mov	r5, r3
 80060dc:	6828      	ldr	r0, [r5, #0]
 80060de:	6869      	ldr	r1, [r5, #4]
 80060e0:	68aa      	ldr	r2, [r5, #8]
 80060e2:	68eb      	ldr	r3, [r5, #12]
 80060e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e6:	7c2b      	ldrb	r3, [r5, #16]
 80060e8:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 80060ea:	4aab      	ldr	r2, [pc, #684]	@ (8006398 <loadMenuTexts+0x370>)
 80060ec:	4bab      	ldr	r3, [pc, #684]	@ (800639c <loadMenuTexts+0x374>)
 80060ee:	4614      	mov	r4, r2
 80060f0:	461d      	mov	r5, r3
 80060f2:	6828      	ldr	r0, [r5, #0]
 80060f4:	6869      	ldr	r1, [r5, #4]
 80060f6:	68aa      	ldr	r2, [r5, #8]
 80060f8:	68eb      	ldr	r3, [r5, #12]
 80060fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060fc:	7c2b      	ldrb	r3, [r5, #16]
 80060fe:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006100:	4aa7      	ldr	r2, [pc, #668]	@ (80063a0 <loadMenuTexts+0x378>)
 8006102:	4ba8      	ldr	r3, [pc, #672]	@ (80063a4 <loadMenuTexts+0x37c>)
 8006104:	4614      	mov	r4, r2
 8006106:	461d      	mov	r5, r3
 8006108:	6828      	ldr	r0, [r5, #0]
 800610a:	6869      	ldr	r1, [r5, #4]
 800610c:	68aa      	ldr	r2, [r5, #8]
 800610e:	68eb      	ldr	r3, [r5, #12]
 8006110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006112:	7c2b      	ldrb	r3, [r5, #16]
 8006114:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8006116:	4aa4      	ldr	r2, [pc, #656]	@ (80063a8 <loadMenuTexts+0x380>)
 8006118:	4ba4      	ldr	r3, [pc, #656]	@ (80063ac <loadMenuTexts+0x384>)
 800611a:	4614      	mov	r4, r2
 800611c:	461d      	mov	r5, r3
 800611e:	6828      	ldr	r0, [r5, #0]
 8006120:	6869      	ldr	r1, [r5, #4]
 8006122:	68aa      	ldr	r2, [r5, #8]
 8006124:	68eb      	ldr	r3, [r5, #12]
 8006126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006128:	7c2b      	ldrb	r3, [r5, #16]
 800612a:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 800612c:	4aa0      	ldr	r2, [pc, #640]	@ (80063b0 <loadMenuTexts+0x388>)
 800612e:	4ba1      	ldr	r3, [pc, #644]	@ (80063b4 <loadMenuTexts+0x38c>)
 8006130:	4614      	mov	r4, r2
 8006132:	461d      	mov	r5, r3
 8006134:	6828      	ldr	r0, [r5, #0]
 8006136:	6869      	ldr	r1, [r5, #4]
 8006138:	68aa      	ldr	r2, [r5, #8]
 800613a:	68eb      	ldr	r3, [r5, #12]
 800613c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800613e:	7c2b      	ldrb	r3, [r5, #16]
 8006140:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006142:	4a9d      	ldr	r2, [pc, #628]	@ (80063b8 <loadMenuTexts+0x390>)
 8006144:	4b9d      	ldr	r3, [pc, #628]	@ (80063bc <loadMenuTexts+0x394>)
 8006146:	4614      	mov	r4, r2
 8006148:	461d      	mov	r5, r3
 800614a:	6828      	ldr	r0, [r5, #0]
 800614c:	6869      	ldr	r1, [r5, #4]
 800614e:	68aa      	ldr	r2, [r5, #8]
 8006150:	68eb      	ldr	r3, [r5, #12]
 8006152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006154:	7c2b      	ldrb	r3, [r5, #16]
 8006156:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006158:	4a99      	ldr	r2, [pc, #612]	@ (80063c0 <loadMenuTexts+0x398>)
 800615a:	4b9a      	ldr	r3, [pc, #616]	@ (80063c4 <loadMenuTexts+0x39c>)
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	6828      	ldr	r0, [r5, #0]
 8006162:	6869      	ldr	r1, [r5, #4]
 8006164:	68aa      	ldr	r2, [r5, #8]
 8006166:	68eb      	ldr	r3, [r5, #12]
 8006168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800616a:	7c2b      	ldrb	r3, [r5, #16]
 800616c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800616e:	4a96      	ldr	r2, [pc, #600]	@ (80063c8 <loadMenuTexts+0x3a0>)
 8006170:	4b96      	ldr	r3, [pc, #600]	@ (80063cc <loadMenuTexts+0x3a4>)
 8006172:	4614      	mov	r4, r2
 8006174:	461d      	mov	r5, r3
 8006176:	6828      	ldr	r0, [r5, #0]
 8006178:	6869      	ldr	r1, [r5, #4]
 800617a:	68aa      	ldr	r2, [r5, #8]
 800617c:	68eb      	ldr	r3, [r5, #12]
 800617e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006180:	7c2b      	ldrb	r3, [r5, #16]
 8006182:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006184:	4a92      	ldr	r2, [pc, #584]	@ (80063d0 <loadMenuTexts+0x3a8>)
 8006186:	4b93      	ldr	r3, [pc, #588]	@ (80063d4 <loadMenuTexts+0x3ac>)
 8006188:	4614      	mov	r4, r2
 800618a:	461d      	mov	r5, r3
 800618c:	6828      	ldr	r0, [r5, #0]
 800618e:	6869      	ldr	r1, [r5, #4]
 8006190:	68aa      	ldr	r2, [r5, #8]
 8006192:	68eb      	ldr	r3, [r5, #12]
 8006194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006196:	7c2b      	ldrb	r3, [r5, #16]
 8006198:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 800619a:	4a8f      	ldr	r2, [pc, #572]	@ (80063d8 <loadMenuTexts+0x3b0>)
 800619c:	4b8f      	ldr	r3, [pc, #572]	@ (80063dc <loadMenuTexts+0x3b4>)
 800619e:	4614      	mov	r4, r2
 80061a0:	461d      	mov	r5, r3
 80061a2:	6828      	ldr	r0, [r5, #0]
 80061a4:	6869      	ldr	r1, [r5, #4]
 80061a6:	68aa      	ldr	r2, [r5, #8]
 80061a8:	68eb      	ldr	r3, [r5, #12]
 80061aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ac:	7c2b      	ldrb	r3, [r5, #16]
 80061ae:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80061b0:	4a8b      	ldr	r2, [pc, #556]	@ (80063e0 <loadMenuTexts+0x3b8>)
 80061b2:	4b8c      	ldr	r3, [pc, #560]	@ (80063e4 <loadMenuTexts+0x3bc>)
 80061b4:	4614      	mov	r4, r2
 80061b6:	461d      	mov	r5, r3
 80061b8:	6828      	ldr	r0, [r5, #0]
 80061ba:	6869      	ldr	r1, [r5, #4]
 80061bc:	68aa      	ldr	r2, [r5, #8]
 80061be:	68eb      	ldr	r3, [r5, #12]
 80061c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c2:	7c2b      	ldrb	r3, [r5, #16]
 80061c4:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80061c6:	4a88      	ldr	r2, [pc, #544]	@ (80063e8 <loadMenuTexts+0x3c0>)
 80061c8:	4b88      	ldr	r3, [pc, #544]	@ (80063ec <loadMenuTexts+0x3c4>)
 80061ca:	4614      	mov	r4, r2
 80061cc:	461d      	mov	r5, r3
 80061ce:	6828      	ldr	r0, [r5, #0]
 80061d0:	6869      	ldr	r1, [r5, #4]
 80061d2:	68aa      	ldr	r2, [r5, #8]
 80061d4:	68eb      	ldr	r3, [r5, #12]
 80061d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061d8:	7c2b      	ldrb	r3, [r5, #16]
 80061da:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80061dc:	4a84      	ldr	r2, [pc, #528]	@ (80063f0 <loadMenuTexts+0x3c8>)
 80061de:	4b85      	ldr	r3, [pc, #532]	@ (80063f4 <loadMenuTexts+0x3cc>)
 80061e0:	4614      	mov	r4, r2
 80061e2:	461d      	mov	r5, r3
 80061e4:	6828      	ldr	r0, [r5, #0]
 80061e6:	6869      	ldr	r1, [r5, #4]
 80061e8:	68aa      	ldr	r2, [r5, #8]
 80061ea:	68eb      	ldr	r3, [r5, #12]
 80061ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ee:	7c2b      	ldrb	r3, [r5, #16]
 80061f0:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 80061f2:	4a81      	ldr	r2, [pc, #516]	@ (80063f8 <loadMenuTexts+0x3d0>)
 80061f4:	4b81      	ldr	r3, [pc, #516]	@ (80063fc <loadMenuTexts+0x3d4>)
 80061f6:	4614      	mov	r4, r2
 80061f8:	461d      	mov	r5, r3
 80061fa:	6828      	ldr	r0, [r5, #0]
 80061fc:	6869      	ldr	r1, [r5, #4]
 80061fe:	68aa      	ldr	r2, [r5, #8]
 8006200:	68eb      	ldr	r3, [r5, #12]
 8006202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006204:	7c2b      	ldrb	r3, [r5, #16]
 8006206:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8006208:	4a7d      	ldr	r2, [pc, #500]	@ (8006400 <loadMenuTexts+0x3d8>)
 800620a:	4b7e      	ldr	r3, [pc, #504]	@ (8006404 <loadMenuTexts+0x3dc>)
 800620c:	4614      	mov	r4, r2
 800620e:	461d      	mov	r5, r3
 8006210:	6828      	ldr	r0, [r5, #0]
 8006212:	6869      	ldr	r1, [r5, #4]
 8006214:	68aa      	ldr	r2, [r5, #8]
 8006216:	68eb      	ldr	r3, [r5, #12]
 8006218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800621a:	7c2b      	ldrb	r3, [r5, #16]
 800621c:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 800621e:	4a7a      	ldr	r2, [pc, #488]	@ (8006408 <loadMenuTexts+0x3e0>)
 8006220:	4b7a      	ldr	r3, [pc, #488]	@ (800640c <loadMenuTexts+0x3e4>)
 8006222:	4614      	mov	r4, r2
 8006224:	461d      	mov	r5, r3
 8006226:	6828      	ldr	r0, [r5, #0]
 8006228:	6869      	ldr	r1, [r5, #4]
 800622a:	68aa      	ldr	r2, [r5, #8]
 800622c:	68eb      	ldr	r3, [r5, #12]
 800622e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006230:	7c2b      	ldrb	r3, [r5, #16]
 8006232:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006234:	4a76      	ldr	r2, [pc, #472]	@ (8006410 <loadMenuTexts+0x3e8>)
 8006236:	4b77      	ldr	r3, [pc, #476]	@ (8006414 <loadMenuTexts+0x3ec>)
 8006238:	4614      	mov	r4, r2
 800623a:	461d      	mov	r5, r3
 800623c:	6828      	ldr	r0, [r5, #0]
 800623e:	6869      	ldr	r1, [r5, #4]
 8006240:	68aa      	ldr	r2, [r5, #8]
 8006242:	68eb      	ldr	r3, [r5, #12]
 8006244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006246:	7c2b      	ldrb	r3, [r5, #16]
 8006248:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800624a:	4a73      	ldr	r2, [pc, #460]	@ (8006418 <loadMenuTexts+0x3f0>)
 800624c:	4b73      	ldr	r3, [pc, #460]	@ (800641c <loadMenuTexts+0x3f4>)
 800624e:	4614      	mov	r4, r2
 8006250:	461d      	mov	r5, r3
 8006252:	6828      	ldr	r0, [r5, #0]
 8006254:	6869      	ldr	r1, [r5, #4]
 8006256:	68aa      	ldr	r2, [r5, #8]
 8006258:	68eb      	ldr	r3, [r5, #12]
 800625a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800625c:	7c2b      	ldrb	r3, [r5, #16]
 800625e:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006260:	4a6f      	ldr	r2, [pc, #444]	@ (8006420 <loadMenuTexts+0x3f8>)
 8006262:	4b70      	ldr	r3, [pc, #448]	@ (8006424 <loadMenuTexts+0x3fc>)
 8006264:	4614      	mov	r4, r2
 8006266:	461d      	mov	r5, r3
 8006268:	6828      	ldr	r0, [r5, #0]
 800626a:	6869      	ldr	r1, [r5, #4]
 800626c:	68aa      	ldr	r2, [r5, #8]
 800626e:	68eb      	ldr	r3, [r5, #12]
 8006270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006272:	7c2b      	ldrb	r3, [r5, #16]
 8006274:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006276:	4a6c      	ldr	r2, [pc, #432]	@ (8006428 <loadMenuTexts+0x400>)
 8006278:	4b6c      	ldr	r3, [pc, #432]	@ (800642c <loadMenuTexts+0x404>)
 800627a:	4614      	mov	r4, r2
 800627c:	461d      	mov	r5, r3
 800627e:	6828      	ldr	r0, [r5, #0]
 8006280:	6869      	ldr	r1, [r5, #4]
 8006282:	68aa      	ldr	r2, [r5, #8]
 8006284:	68eb      	ldr	r3, [r5, #12]
 8006286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006288:	7c2b      	ldrb	r3, [r5, #16]
 800628a:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 800628c:	4a68      	ldr	r2, [pc, #416]	@ (8006430 <loadMenuTexts+0x408>)
 800628e:	4b69      	ldr	r3, [pc, #420]	@ (8006434 <loadMenuTexts+0x40c>)
 8006290:	4614      	mov	r4, r2
 8006292:	461d      	mov	r5, r3
 8006294:	6828      	ldr	r0, [r5, #0]
 8006296:	6869      	ldr	r1, [r5, #4]
 8006298:	68aa      	ldr	r2, [r5, #8]
 800629a:	68eb      	ldr	r3, [r5, #12]
 800629c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800629e:	7c2b      	ldrb	r3, [r5, #16]
 80062a0:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80062a2:	4a65      	ldr	r2, [pc, #404]	@ (8006438 <loadMenuTexts+0x410>)
 80062a4:	4b65      	ldr	r3, [pc, #404]	@ (800643c <loadMenuTexts+0x414>)
 80062a6:	4614      	mov	r4, r2
 80062a8:	461d      	mov	r5, r3
 80062aa:	6828      	ldr	r0, [r5, #0]
 80062ac:	6869      	ldr	r1, [r5, #4]
 80062ae:	68aa      	ldr	r2, [r5, #8]
 80062b0:	68eb      	ldr	r3, [r5, #12]
 80062b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b4:	7c2b      	ldrb	r3, [r5, #16]
 80062b6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80062b8:	4a61      	ldr	r2, [pc, #388]	@ (8006440 <loadMenuTexts+0x418>)
 80062ba:	4b62      	ldr	r3, [pc, #392]	@ (8006444 <loadMenuTexts+0x41c>)
 80062bc:	4614      	mov	r4, r2
 80062be:	461d      	mov	r5, r3
 80062c0:	6828      	ldr	r0, [r5, #0]
 80062c2:	6869      	ldr	r1, [r5, #4]
 80062c4:	68aa      	ldr	r2, [r5, #8]
 80062c6:	68eb      	ldr	r3, [r5, #12]
 80062c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ca:	7c2b      	ldrb	r3, [r5, #16]
 80062cc:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80062ce:	4a5e      	ldr	r2, [pc, #376]	@ (8006448 <loadMenuTexts+0x420>)
 80062d0:	4b5e      	ldr	r3, [pc, #376]	@ (800644c <loadMenuTexts+0x424>)
 80062d2:	4614      	mov	r4, r2
 80062d4:	461d      	mov	r5, r3
 80062d6:	6828      	ldr	r0, [r5, #0]
 80062d8:	6869      	ldr	r1, [r5, #4]
 80062da:	68aa      	ldr	r2, [r5, #8]
 80062dc:	68eb      	ldr	r3, [r5, #12]
 80062de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062e0:	7c2b      	ldrb	r3, [r5, #16]
 80062e2:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80062e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006450 <loadMenuTexts+0x428>)
 80062e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006454 <loadMenuTexts+0x42c>)
 80062e8:	4614      	mov	r4, r2
 80062ea:	461d      	mov	r5, r3
 80062ec:	6828      	ldr	r0, [r5, #0]
 80062ee:	6869      	ldr	r1, [r5, #4]
 80062f0:	68aa      	ldr	r2, [r5, #8]
 80062f2:	68eb      	ldr	r3, [r5, #12]
 80062f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062f6:	7c2b      	ldrb	r3, [r5, #16]
 80062f8:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80062fa:	4a57      	ldr	r2, [pc, #348]	@ (8006458 <loadMenuTexts+0x430>)
 80062fc:	4b57      	ldr	r3, [pc, #348]	@ (800645c <loadMenuTexts+0x434>)
 80062fe:	4614      	mov	r4, r2
 8006300:	461d      	mov	r5, r3
 8006302:	6828      	ldr	r0, [r5, #0]
 8006304:	6869      	ldr	r1, [r5, #4]
 8006306:	68aa      	ldr	r2, [r5, #8]
 8006308:	68eb      	ldr	r3, [r5, #12]
 800630a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800630c:	7c2b      	ldrb	r3, [r5, #16]
 800630e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006310:	4a53      	ldr	r2, [pc, #332]	@ (8006460 <loadMenuTexts+0x438>)
 8006312:	4b54      	ldr	r3, [pc, #336]	@ (8006464 <loadMenuTexts+0x43c>)
 8006314:	4614      	mov	r4, r2
 8006316:	461d      	mov	r5, r3
 8006318:	6828      	ldr	r0, [r5, #0]
 800631a:	6869      	ldr	r1, [r5, #4]
 800631c:	68aa      	ldr	r2, [r5, #8]
 800631e:	68eb      	ldr	r3, [r5, #12]
 8006320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006322:	7c2b      	ldrb	r3, [r5, #16]
 8006324:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8006326:	4a50      	ldr	r2, [pc, #320]	@ (8006468 <loadMenuTexts+0x440>)
 8006328:	4b50      	ldr	r3, [pc, #320]	@ (800646c <loadMenuTexts+0x444>)
 800632a:	4614      	mov	r4, r2
 800632c:	461d      	mov	r5, r3
 800632e:	6828      	ldr	r0, [r5, #0]
 8006330:	6869      	ldr	r1, [r5, #4]
 8006332:	68aa      	ldr	r2, [r5, #8]
 8006334:	68eb      	ldr	r3, [r5, #12]
 8006336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006338:	7c2b      	ldrb	r3, [r5, #16]
 800633a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 800633c:	4a4c      	ldr	r2, [pc, #304]	@ (8006470 <loadMenuTexts+0x448>)
 800633e:	4b4d      	ldr	r3, [pc, #308]	@ (8006474 <loadMenuTexts+0x44c>)
 8006340:	4614      	mov	r4, r2
 8006342:	461d      	mov	r5, r3
 8006344:	6828      	ldr	r0, [r5, #0]
 8006346:	6869      	ldr	r1, [r5, #4]
 8006348:	68aa      	ldr	r2, [r5, #8]
 800634a:	68eb      	ldr	r3, [r5, #12]
 800634c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800634e:	7c2b      	ldrb	r3, [r5, #16]
 8006350:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006352:	4a49      	ldr	r2, [pc, #292]	@ (8006478 <loadMenuTexts+0x450>)
 8006354:	e092      	b.n	800647c <loadMenuTexts+0x454>
 8006356:	bf00      	nop
 8006358:	20001224 	.word	0x20001224
 800635c:	20000190 	.word	0x20000190
 8006360:	20001238 	.word	0x20001238
 8006364:	200001a4 	.word	0x200001a4
 8006368:	2000124c 	.word	0x2000124c
 800636c:	200001b8 	.word	0x200001b8
 8006370:	20001260 	.word	0x20001260
 8006374:	200001cc 	.word	0x200001cc
 8006378:	20001274 	.word	0x20001274
 800637c:	200001e0 	.word	0x200001e0
 8006380:	20001288 	.word	0x20001288
 8006384:	200001f4 	.word	0x200001f4
 8006388:	2000129c 	.word	0x2000129c
 800638c:	20000208 	.word	0x20000208
 8006390:	200012b0 	.word	0x200012b0
 8006394:	2000021c 	.word	0x2000021c
 8006398:	200012c4 	.word	0x200012c4
 800639c:	20000230 	.word	0x20000230
 80063a0:	200012d8 	.word	0x200012d8
 80063a4:	20000244 	.word	0x20000244
 80063a8:	200012ec 	.word	0x200012ec
 80063ac:	20000258 	.word	0x20000258
 80063b0:	20001300 	.word	0x20001300
 80063b4:	2000026c 	.word	0x2000026c
 80063b8:	20001314 	.word	0x20001314
 80063bc:	20000280 	.word	0x20000280
 80063c0:	20001328 	.word	0x20001328
 80063c4:	20000294 	.word	0x20000294
 80063c8:	2000133c 	.word	0x2000133c
 80063cc:	200002a8 	.word	0x200002a8
 80063d0:	20001350 	.word	0x20001350
 80063d4:	200002bc 	.word	0x200002bc
 80063d8:	20001364 	.word	0x20001364
 80063dc:	200002d0 	.word	0x200002d0
 80063e0:	20001378 	.word	0x20001378
 80063e4:	200002e4 	.word	0x200002e4
 80063e8:	2000138c 	.word	0x2000138c
 80063ec:	200002f8 	.word	0x200002f8
 80063f0:	200013a0 	.word	0x200013a0
 80063f4:	2000030c 	.word	0x2000030c
 80063f8:	200013b4 	.word	0x200013b4
 80063fc:	20000320 	.word	0x20000320
 8006400:	200013c8 	.word	0x200013c8
 8006404:	20000334 	.word	0x20000334
 8006408:	200013dc 	.word	0x200013dc
 800640c:	20000348 	.word	0x20000348
 8006410:	200013f0 	.word	0x200013f0
 8006414:	2000035c 	.word	0x2000035c
 8006418:	20001404 	.word	0x20001404
 800641c:	20000370 	.word	0x20000370
 8006420:	20001418 	.word	0x20001418
 8006424:	20000384 	.word	0x20000384
 8006428:	2000142c 	.word	0x2000142c
 800642c:	20000398 	.word	0x20000398
 8006430:	20001440 	.word	0x20001440
 8006434:	200003ac 	.word	0x200003ac
 8006438:	20001454 	.word	0x20001454
 800643c:	200003c0 	.word	0x200003c0
 8006440:	20001468 	.word	0x20001468
 8006444:	200003d4 	.word	0x200003d4
 8006448:	2000147c 	.word	0x2000147c
 800644c:	200003e8 	.word	0x200003e8
 8006450:	20001490 	.word	0x20001490
 8006454:	200003fc 	.word	0x200003fc
 8006458:	200014a4 	.word	0x200014a4
 800645c:	20000410 	.word	0x20000410
 8006460:	200014b8 	.word	0x200014b8
 8006464:	20000424 	.word	0x20000424
 8006468:	200014cc 	.word	0x200014cc
 800646c:	20000438 	.word	0x20000438
 8006470:	200014e0 	.word	0x200014e0
 8006474:	2000044c 	.word	0x2000044c
 8006478:	200014f4 	.word	0x200014f4
 800647c:	4bc7      	ldr	r3, [pc, #796]	@ (800679c <loadMenuTexts+0x774>)
 800647e:	4614      	mov	r4, r2
 8006480:	461d      	mov	r5, r3
 8006482:	6828      	ldr	r0, [r5, #0]
 8006484:	6869      	ldr	r1, [r5, #4]
 8006486:	68aa      	ldr	r2, [r5, #8]
 8006488:	68eb      	ldr	r3, [r5, #12]
 800648a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648c:	7c2b      	ldrb	r3, [r5, #16]
 800648e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006490:	4ac3      	ldr	r2, [pc, #780]	@ (80067a0 <loadMenuTexts+0x778>)
 8006492:	4bc4      	ldr	r3, [pc, #784]	@ (80067a4 <loadMenuTexts+0x77c>)
 8006494:	4614      	mov	r4, r2
 8006496:	461d      	mov	r5, r3
 8006498:	6828      	ldr	r0, [r5, #0]
 800649a:	6869      	ldr	r1, [r5, #4]
 800649c:	68aa      	ldr	r2, [r5, #8]
 800649e:	68eb      	ldr	r3, [r5, #12]
 80064a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a2:	7c2b      	ldrb	r3, [r5, #16]
 80064a4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80064a6:	4ac0      	ldr	r2, [pc, #768]	@ (80067a8 <loadMenuTexts+0x780>)
 80064a8:	4bc0      	ldr	r3, [pc, #768]	@ (80067ac <loadMenuTexts+0x784>)
 80064aa:	4614      	mov	r4, r2
 80064ac:	461d      	mov	r5, r3
 80064ae:	6828      	ldr	r0, [r5, #0]
 80064b0:	6869      	ldr	r1, [r5, #4]
 80064b2:	68aa      	ldr	r2, [r5, #8]
 80064b4:	68eb      	ldr	r3, [r5, #12]
 80064b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064b8:	7c2b      	ldrb	r3, [r5, #16]
 80064ba:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80064bc:	4abc      	ldr	r2, [pc, #752]	@ (80067b0 <loadMenuTexts+0x788>)
 80064be:	4bbd      	ldr	r3, [pc, #756]	@ (80067b4 <loadMenuTexts+0x78c>)
 80064c0:	4614      	mov	r4, r2
 80064c2:	461d      	mov	r5, r3
 80064c4:	6828      	ldr	r0, [r5, #0]
 80064c6:	6869      	ldr	r1, [r5, #4]
 80064c8:	68aa      	ldr	r2, [r5, #8]
 80064ca:	68eb      	ldr	r3, [r5, #12]
 80064cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ce:	7c2b      	ldrb	r3, [r5, #16]
 80064d0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80064d2:	4ab9      	ldr	r2, [pc, #740]	@ (80067b8 <loadMenuTexts+0x790>)
 80064d4:	4bb9      	ldr	r3, [pc, #740]	@ (80067bc <loadMenuTexts+0x794>)
 80064d6:	4614      	mov	r4, r2
 80064d8:	461d      	mov	r5, r3
 80064da:	6828      	ldr	r0, [r5, #0]
 80064dc:	6869      	ldr	r1, [r5, #4]
 80064de:	68aa      	ldr	r2, [r5, #8]
 80064e0:	68eb      	ldr	r3, [r5, #12]
 80064e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e4:	7c2b      	ldrb	r3, [r5, #16]
 80064e6:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80064e8:	4ab5      	ldr	r2, [pc, #724]	@ (80067c0 <loadMenuTexts+0x798>)
 80064ea:	4bb6      	ldr	r3, [pc, #728]	@ (80067c4 <loadMenuTexts+0x79c>)
 80064ec:	4614      	mov	r4, r2
 80064ee:	461d      	mov	r5, r3
 80064f0:	6828      	ldr	r0, [r5, #0]
 80064f2:	6869      	ldr	r1, [r5, #4]
 80064f4:	68aa      	ldr	r2, [r5, #8]
 80064f6:	68eb      	ldr	r3, [r5, #12]
 80064f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fa:	7c2b      	ldrb	r3, [r5, #16]
 80064fc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80064fe:	4ab2      	ldr	r2, [pc, #712]	@ (80067c8 <loadMenuTexts+0x7a0>)
 8006500:	4bb2      	ldr	r3, [pc, #712]	@ (80067cc <loadMenuTexts+0x7a4>)
 8006502:	4614      	mov	r4, r2
 8006504:	461d      	mov	r5, r3
 8006506:	6828      	ldr	r0, [r5, #0]
 8006508:	6869      	ldr	r1, [r5, #4]
 800650a:	68aa      	ldr	r2, [r5, #8]
 800650c:	68eb      	ldr	r3, [r5, #12]
 800650e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006510:	7c2b      	ldrb	r3, [r5, #16]
 8006512:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8006514:	4aae      	ldr	r2, [pc, #696]	@ (80067d0 <loadMenuTexts+0x7a8>)
 8006516:	4baf      	ldr	r3, [pc, #700]	@ (80067d4 <loadMenuTexts+0x7ac>)
 8006518:	4614      	mov	r4, r2
 800651a:	461d      	mov	r5, r3
 800651c:	6828      	ldr	r0, [r5, #0]
 800651e:	6869      	ldr	r1, [r5, #4]
 8006520:	68aa      	ldr	r2, [r5, #8]
 8006522:	68eb      	ldr	r3, [r5, #12]
 8006524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006526:	7c2b      	ldrb	r3, [r5, #16]
 8006528:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800652a:	4aab      	ldr	r2, [pc, #684]	@ (80067d8 <loadMenuTexts+0x7b0>)
 800652c:	4bab      	ldr	r3, [pc, #684]	@ (80067dc <loadMenuTexts+0x7b4>)
 800652e:	4614      	mov	r4, r2
 8006530:	461d      	mov	r5, r3
 8006532:	6828      	ldr	r0, [r5, #0]
 8006534:	6869      	ldr	r1, [r5, #4]
 8006536:	68aa      	ldr	r2, [r5, #8]
 8006538:	68eb      	ldr	r3, [r5, #12]
 800653a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800653c:	7c2b      	ldrb	r3, [r5, #16]
 800653e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006540:	4aa7      	ldr	r2, [pc, #668]	@ (80067e0 <loadMenuTexts+0x7b8>)
 8006542:	4ba8      	ldr	r3, [pc, #672]	@ (80067e4 <loadMenuTexts+0x7bc>)
 8006544:	4614      	mov	r4, r2
 8006546:	461d      	mov	r5, r3
 8006548:	6828      	ldr	r0, [r5, #0]
 800654a:	6869      	ldr	r1, [r5, #4]
 800654c:	68aa      	ldr	r2, [r5, #8]
 800654e:	68eb      	ldr	r3, [r5, #12]
 8006550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006552:	7c2b      	ldrb	r3, [r5, #16]
 8006554:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8006556:	4aa4      	ldr	r2, [pc, #656]	@ (80067e8 <loadMenuTexts+0x7c0>)
 8006558:	4ba4      	ldr	r3, [pc, #656]	@ (80067ec <loadMenuTexts+0x7c4>)
 800655a:	4614      	mov	r4, r2
 800655c:	461d      	mov	r5, r3
 800655e:	6828      	ldr	r0, [r5, #0]
 8006560:	6869      	ldr	r1, [r5, #4]
 8006562:	68aa      	ldr	r2, [r5, #8]
 8006564:	68eb      	ldr	r3, [r5, #12]
 8006566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006568:	7c2b      	ldrb	r3, [r5, #16]
 800656a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 800656c:	4aa0      	ldr	r2, [pc, #640]	@ (80067f0 <loadMenuTexts+0x7c8>)
 800656e:	4ba1      	ldr	r3, [pc, #644]	@ (80067f4 <loadMenuTexts+0x7cc>)
 8006570:	4614      	mov	r4, r2
 8006572:	461d      	mov	r5, r3
 8006574:	6828      	ldr	r0, [r5, #0]
 8006576:	6869      	ldr	r1, [r5, #4]
 8006578:	68aa      	ldr	r2, [r5, #8]
 800657a:	68eb      	ldr	r3, [r5, #12]
 800657c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800657e:	7c2b      	ldrb	r3, [r5, #16]
 8006580:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006582:	4a9d      	ldr	r2, [pc, #628]	@ (80067f8 <loadMenuTexts+0x7d0>)
 8006584:	4b9d      	ldr	r3, [pc, #628]	@ (80067fc <loadMenuTexts+0x7d4>)
 8006586:	4614      	mov	r4, r2
 8006588:	461d      	mov	r5, r3
 800658a:	6828      	ldr	r0, [r5, #0]
 800658c:	6869      	ldr	r1, [r5, #4]
 800658e:	68aa      	ldr	r2, [r5, #8]
 8006590:	68eb      	ldr	r3, [r5, #12]
 8006592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006594:	7c2b      	ldrb	r3, [r5, #16]
 8006596:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006598:	4a99      	ldr	r2, [pc, #612]	@ (8006800 <loadMenuTexts+0x7d8>)
 800659a:	4b9a      	ldr	r3, [pc, #616]	@ (8006804 <loadMenuTexts+0x7dc>)
 800659c:	4614      	mov	r4, r2
 800659e:	461d      	mov	r5, r3
 80065a0:	6828      	ldr	r0, [r5, #0]
 80065a2:	6869      	ldr	r1, [r5, #4]
 80065a4:	68aa      	ldr	r2, [r5, #8]
 80065a6:	68eb      	ldr	r3, [r5, #12]
 80065a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065aa:	7c2b      	ldrb	r3, [r5, #16]
 80065ac:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80065ae:	4a96      	ldr	r2, [pc, #600]	@ (8006808 <loadMenuTexts+0x7e0>)
 80065b0:	4b96      	ldr	r3, [pc, #600]	@ (800680c <loadMenuTexts+0x7e4>)
 80065b2:	4614      	mov	r4, r2
 80065b4:	461d      	mov	r5, r3
 80065b6:	6828      	ldr	r0, [r5, #0]
 80065b8:	6869      	ldr	r1, [r5, #4]
 80065ba:	68aa      	ldr	r2, [r5, #8]
 80065bc:	68eb      	ldr	r3, [r5, #12]
 80065be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065c0:	7c2b      	ldrb	r3, [r5, #16]
 80065c2:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80065c4:	4a92      	ldr	r2, [pc, #584]	@ (8006810 <loadMenuTexts+0x7e8>)
 80065c6:	4b93      	ldr	r3, [pc, #588]	@ (8006814 <loadMenuTexts+0x7ec>)
 80065c8:	4614      	mov	r4, r2
 80065ca:	461d      	mov	r5, r3
 80065cc:	6828      	ldr	r0, [r5, #0]
 80065ce:	6869      	ldr	r1, [r5, #4]
 80065d0:	68aa      	ldr	r2, [r5, #8]
 80065d2:	68eb      	ldr	r3, [r5, #12]
 80065d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d6:	7c2b      	ldrb	r3, [r5, #16]
 80065d8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80065da:	4a8f      	ldr	r2, [pc, #572]	@ (8006818 <loadMenuTexts+0x7f0>)
 80065dc:	4b8f      	ldr	r3, [pc, #572]	@ (800681c <loadMenuTexts+0x7f4>)
 80065de:	4614      	mov	r4, r2
 80065e0:	461d      	mov	r5, r3
 80065e2:	6828      	ldr	r0, [r5, #0]
 80065e4:	6869      	ldr	r1, [r5, #4]
 80065e6:	68aa      	ldr	r2, [r5, #8]
 80065e8:	68eb      	ldr	r3, [r5, #12]
 80065ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ec:	7c2b      	ldrb	r3, [r5, #16]
 80065ee:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 80065f0:	4a8b      	ldr	r2, [pc, #556]	@ (8006820 <loadMenuTexts+0x7f8>)
 80065f2:	4b8c      	ldr	r3, [pc, #560]	@ (8006824 <loadMenuTexts+0x7fc>)
 80065f4:	4614      	mov	r4, r2
 80065f6:	461d      	mov	r5, r3
 80065f8:	6828      	ldr	r0, [r5, #0]
 80065fa:	6869      	ldr	r1, [r5, #4]
 80065fc:	68aa      	ldr	r2, [r5, #8]
 80065fe:	68eb      	ldr	r3, [r5, #12]
 8006600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006602:	7c2b      	ldrb	r3, [r5, #16]
 8006604:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8006606:	4a88      	ldr	r2, [pc, #544]	@ (8006828 <loadMenuTexts+0x800>)
 8006608:	4b88      	ldr	r3, [pc, #544]	@ (800682c <loadMenuTexts+0x804>)
 800660a:	4614      	mov	r4, r2
 800660c:	461d      	mov	r5, r3
 800660e:	6828      	ldr	r0, [r5, #0]
 8006610:	6869      	ldr	r1, [r5, #4]
 8006612:	68aa      	ldr	r2, [r5, #8]
 8006614:	68eb      	ldr	r3, [r5, #12]
 8006616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006618:	7c2b      	ldrb	r3, [r5, #16]
 800661a:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 800661c:	4a84      	ldr	r2, [pc, #528]	@ (8006830 <loadMenuTexts+0x808>)
 800661e:	4b85      	ldr	r3, [pc, #532]	@ (8006834 <loadMenuTexts+0x80c>)
 8006620:	4614      	mov	r4, r2
 8006622:	461d      	mov	r5, r3
 8006624:	6828      	ldr	r0, [r5, #0]
 8006626:	6869      	ldr	r1, [r5, #4]
 8006628:	68aa      	ldr	r2, [r5, #8]
 800662a:	68eb      	ldr	r3, [r5, #12]
 800662c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800662e:	7c2b      	ldrb	r3, [r5, #16]
 8006630:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006632:	4a81      	ldr	r2, [pc, #516]	@ (8006838 <loadMenuTexts+0x810>)
 8006634:	4b81      	ldr	r3, [pc, #516]	@ (800683c <loadMenuTexts+0x814>)
 8006636:	4614      	mov	r4, r2
 8006638:	461d      	mov	r5, r3
 800663a:	6828      	ldr	r0, [r5, #0]
 800663c:	6869      	ldr	r1, [r5, #4]
 800663e:	68aa      	ldr	r2, [r5, #8]
 8006640:	68eb      	ldr	r3, [r5, #12]
 8006642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006644:	7c2b      	ldrb	r3, [r5, #16]
 8006646:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8006648:	4a7d      	ldr	r2, [pc, #500]	@ (8006840 <loadMenuTexts+0x818>)
 800664a:	4b7e      	ldr	r3, [pc, #504]	@ (8006844 <loadMenuTexts+0x81c>)
 800664c:	4614      	mov	r4, r2
 800664e:	461d      	mov	r5, r3
 8006650:	6828      	ldr	r0, [r5, #0]
 8006652:	6869      	ldr	r1, [r5, #4]
 8006654:	68aa      	ldr	r2, [r5, #8]
 8006656:	68eb      	ldr	r3, [r5, #12]
 8006658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665a:	7c2b      	ldrb	r3, [r5, #16]
 800665c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800665e:	4a7a      	ldr	r2, [pc, #488]	@ (8006848 <loadMenuTexts+0x820>)
 8006660:	4b7a      	ldr	r3, [pc, #488]	@ (800684c <loadMenuTexts+0x824>)
 8006662:	4614      	mov	r4, r2
 8006664:	461d      	mov	r5, r3
 8006666:	6828      	ldr	r0, [r5, #0]
 8006668:	6869      	ldr	r1, [r5, #4]
 800666a:	68aa      	ldr	r2, [r5, #8]
 800666c:	68eb      	ldr	r3, [r5, #12]
 800666e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006670:	7c2b      	ldrb	r3, [r5, #16]
 8006672:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006674:	4a76      	ldr	r2, [pc, #472]	@ (8006850 <loadMenuTexts+0x828>)
 8006676:	4b77      	ldr	r3, [pc, #476]	@ (8006854 <loadMenuTexts+0x82c>)
 8006678:	4614      	mov	r4, r2
 800667a:	461d      	mov	r5, r3
 800667c:	6828      	ldr	r0, [r5, #0]
 800667e:	6869      	ldr	r1, [r5, #4]
 8006680:	68aa      	ldr	r2, [r5, #8]
 8006682:	68eb      	ldr	r3, [r5, #12]
 8006684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006686:	7c2b      	ldrb	r3, [r5, #16]
 8006688:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800668a:	4a73      	ldr	r2, [pc, #460]	@ (8006858 <loadMenuTexts+0x830>)
 800668c:	4b73      	ldr	r3, [pc, #460]	@ (800685c <loadMenuTexts+0x834>)
 800668e:	4614      	mov	r4, r2
 8006690:	461d      	mov	r5, r3
 8006692:	6828      	ldr	r0, [r5, #0]
 8006694:	6869      	ldr	r1, [r5, #4]
 8006696:	68aa      	ldr	r2, [r5, #8]
 8006698:	68eb      	ldr	r3, [r5, #12]
 800669a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800669c:	7c2b      	ldrb	r3, [r5, #16]
 800669e:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80066a0:	4a6f      	ldr	r2, [pc, #444]	@ (8006860 <loadMenuTexts+0x838>)
 80066a2:	4b70      	ldr	r3, [pc, #448]	@ (8006864 <loadMenuTexts+0x83c>)
 80066a4:	4614      	mov	r4, r2
 80066a6:	461d      	mov	r5, r3
 80066a8:	6828      	ldr	r0, [r5, #0]
 80066aa:	6869      	ldr	r1, [r5, #4]
 80066ac:	68aa      	ldr	r2, [r5, #8]
 80066ae:	68eb      	ldr	r3, [r5, #12]
 80066b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066b2:	7c2b      	ldrb	r3, [r5, #16]
 80066b4:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80066b6:	4a6c      	ldr	r2, [pc, #432]	@ (8006868 <loadMenuTexts+0x840>)
 80066b8:	4b6c      	ldr	r3, [pc, #432]	@ (800686c <loadMenuTexts+0x844>)
 80066ba:	4614      	mov	r4, r2
 80066bc:	461d      	mov	r5, r3
 80066be:	6828      	ldr	r0, [r5, #0]
 80066c0:	6869      	ldr	r1, [r5, #4]
 80066c2:	68aa      	ldr	r2, [r5, #8]
 80066c4:	68eb      	ldr	r3, [r5, #12]
 80066c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066c8:	7c2b      	ldrb	r3, [r5, #16]
 80066ca:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80066cc:	4a68      	ldr	r2, [pc, #416]	@ (8006870 <loadMenuTexts+0x848>)
 80066ce:	4b69      	ldr	r3, [pc, #420]	@ (8006874 <loadMenuTexts+0x84c>)
 80066d0:	4614      	mov	r4, r2
 80066d2:	461d      	mov	r5, r3
 80066d4:	6828      	ldr	r0, [r5, #0]
 80066d6:	6869      	ldr	r1, [r5, #4]
 80066d8:	68aa      	ldr	r2, [r5, #8]
 80066da:	68eb      	ldr	r3, [r5, #12]
 80066dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066de:	7c2b      	ldrb	r3, [r5, #16]
 80066e0:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80066e2:	4a65      	ldr	r2, [pc, #404]	@ (8006878 <loadMenuTexts+0x850>)
 80066e4:	4b65      	ldr	r3, [pc, #404]	@ (800687c <loadMenuTexts+0x854>)
 80066e6:	4614      	mov	r4, r2
 80066e8:	461d      	mov	r5, r3
 80066ea:	6828      	ldr	r0, [r5, #0]
 80066ec:	6869      	ldr	r1, [r5, #4]
 80066ee:	68aa      	ldr	r2, [r5, #8]
 80066f0:	68eb      	ldr	r3, [r5, #12]
 80066f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f4:	7c2b      	ldrb	r3, [r5, #16]
 80066f6:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80066f8:	4a61      	ldr	r2, [pc, #388]	@ (8006880 <loadMenuTexts+0x858>)
 80066fa:	4b62      	ldr	r3, [pc, #392]	@ (8006884 <loadMenuTexts+0x85c>)
 80066fc:	4614      	mov	r4, r2
 80066fe:	461d      	mov	r5, r3
 8006700:	6828      	ldr	r0, [r5, #0]
 8006702:	6869      	ldr	r1, [r5, #4]
 8006704:	68aa      	ldr	r2, [r5, #8]
 8006706:	68eb      	ldr	r3, [r5, #12]
 8006708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800670a:	7c2b      	ldrb	r3, [r5, #16]
 800670c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 800670e:	4a5e      	ldr	r2, [pc, #376]	@ (8006888 <loadMenuTexts+0x860>)
 8006710:	4b5e      	ldr	r3, [pc, #376]	@ (800688c <loadMenuTexts+0x864>)
 8006712:	4614      	mov	r4, r2
 8006714:	461d      	mov	r5, r3
 8006716:	6828      	ldr	r0, [r5, #0]
 8006718:	6869      	ldr	r1, [r5, #4]
 800671a:	68aa      	ldr	r2, [r5, #8]
 800671c:	68eb      	ldr	r3, [r5, #12]
 800671e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006720:	7c2b      	ldrb	r3, [r5, #16]
 8006722:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006724:	4a5a      	ldr	r2, [pc, #360]	@ (8006890 <loadMenuTexts+0x868>)
 8006726:	4b5b      	ldr	r3, [pc, #364]	@ (8006894 <loadMenuTexts+0x86c>)
 8006728:	4614      	mov	r4, r2
 800672a:	461d      	mov	r5, r3
 800672c:	6828      	ldr	r0, [r5, #0]
 800672e:	6869      	ldr	r1, [r5, #4]
 8006730:	68aa      	ldr	r2, [r5, #8]
 8006732:	68eb      	ldr	r3, [r5, #12]
 8006734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006736:	7c2b      	ldrb	r3, [r5, #16]
 8006738:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800673a:	4a57      	ldr	r2, [pc, #348]	@ (8006898 <loadMenuTexts+0x870>)
 800673c:	4b57      	ldr	r3, [pc, #348]	@ (800689c <loadMenuTexts+0x874>)
 800673e:	4614      	mov	r4, r2
 8006740:	461d      	mov	r5, r3
 8006742:	6828      	ldr	r0, [r5, #0]
 8006744:	6869      	ldr	r1, [r5, #4]
 8006746:	68aa      	ldr	r2, [r5, #8]
 8006748:	68eb      	ldr	r3, [r5, #12]
 800674a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800674c:	7c2b      	ldrb	r3, [r5, #16]
 800674e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006750:	4a53      	ldr	r2, [pc, #332]	@ (80068a0 <loadMenuTexts+0x878>)
 8006752:	4b54      	ldr	r3, [pc, #336]	@ (80068a4 <loadMenuTexts+0x87c>)
 8006754:	4614      	mov	r4, r2
 8006756:	461d      	mov	r5, r3
 8006758:	6828      	ldr	r0, [r5, #0]
 800675a:	6869      	ldr	r1, [r5, #4]
 800675c:	68aa      	ldr	r2, [r5, #8]
 800675e:	68eb      	ldr	r3, [r5, #12]
 8006760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006762:	7c2b      	ldrb	r3, [r5, #16]
 8006764:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006766:	4a50      	ldr	r2, [pc, #320]	@ (80068a8 <loadMenuTexts+0x880>)
 8006768:	4b50      	ldr	r3, [pc, #320]	@ (80068ac <loadMenuTexts+0x884>)
 800676a:	4614      	mov	r4, r2
 800676c:	461d      	mov	r5, r3
 800676e:	6828      	ldr	r0, [r5, #0]
 8006770:	6869      	ldr	r1, [r5, #4]
 8006772:	68aa      	ldr	r2, [r5, #8]
 8006774:	68eb      	ldr	r3, [r5, #12]
 8006776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006778:	7c2b      	ldrb	r3, [r5, #16]
 800677a:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 800677c:	4a4c      	ldr	r2, [pc, #304]	@ (80068b0 <loadMenuTexts+0x888>)
 800677e:	4b4d      	ldr	r3, [pc, #308]	@ (80068b4 <loadMenuTexts+0x88c>)
 8006780:	4614      	mov	r4, r2
 8006782:	461d      	mov	r5, r3
 8006784:	6828      	ldr	r0, [r5, #0]
 8006786:	6869      	ldr	r1, [r5, #4]
 8006788:	68aa      	ldr	r2, [r5, #8]
 800678a:	68eb      	ldr	r3, [r5, #12]
 800678c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678e:	7c2b      	ldrb	r3, [r5, #16]
 8006790:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006792:	4a49      	ldr	r2, [pc, #292]	@ (80068b8 <loadMenuTexts+0x890>)
 8006794:	4b49      	ldr	r3, [pc, #292]	@ (80068bc <loadMenuTexts+0x894>)
 8006796:	4614      	mov	r4, r2
 8006798:	461d      	mov	r5, r3
 800679a:	e091      	b.n	80068c0 <loadMenuTexts+0x898>
 800679c:	20000460 	.word	0x20000460
 80067a0:	20001508 	.word	0x20001508
 80067a4:	20000474 	.word	0x20000474
 80067a8:	2000151c 	.word	0x2000151c
 80067ac:	20000488 	.word	0x20000488
 80067b0:	20001530 	.word	0x20001530
 80067b4:	2000049c 	.word	0x2000049c
 80067b8:	20001544 	.word	0x20001544
 80067bc:	200004b0 	.word	0x200004b0
 80067c0:	20001558 	.word	0x20001558
 80067c4:	200004c4 	.word	0x200004c4
 80067c8:	2000156c 	.word	0x2000156c
 80067cc:	200004d8 	.word	0x200004d8
 80067d0:	20001580 	.word	0x20001580
 80067d4:	200004ec 	.word	0x200004ec
 80067d8:	20001594 	.word	0x20001594
 80067dc:	20000500 	.word	0x20000500
 80067e0:	200015a8 	.word	0x200015a8
 80067e4:	20000514 	.word	0x20000514
 80067e8:	200015bc 	.word	0x200015bc
 80067ec:	20000528 	.word	0x20000528
 80067f0:	200015d0 	.word	0x200015d0
 80067f4:	2000053c 	.word	0x2000053c
 80067f8:	200015e4 	.word	0x200015e4
 80067fc:	20000550 	.word	0x20000550
 8006800:	200015f8 	.word	0x200015f8
 8006804:	20000564 	.word	0x20000564
 8006808:	2000160c 	.word	0x2000160c
 800680c:	20000578 	.word	0x20000578
 8006810:	20001620 	.word	0x20001620
 8006814:	2000058c 	.word	0x2000058c
 8006818:	20001634 	.word	0x20001634
 800681c:	200005a0 	.word	0x200005a0
 8006820:	20001648 	.word	0x20001648
 8006824:	200005b4 	.word	0x200005b4
 8006828:	2000165c 	.word	0x2000165c
 800682c:	200005c8 	.word	0x200005c8
 8006830:	20001670 	.word	0x20001670
 8006834:	200005dc 	.word	0x200005dc
 8006838:	20001684 	.word	0x20001684
 800683c:	200005f0 	.word	0x200005f0
 8006840:	20001698 	.word	0x20001698
 8006844:	20000604 	.word	0x20000604
 8006848:	200016ac 	.word	0x200016ac
 800684c:	20000618 	.word	0x20000618
 8006850:	200016c0 	.word	0x200016c0
 8006854:	2000062c 	.word	0x2000062c
 8006858:	200016d4 	.word	0x200016d4
 800685c:	20000640 	.word	0x20000640
 8006860:	200016e8 	.word	0x200016e8
 8006864:	20000654 	.word	0x20000654
 8006868:	200016fc 	.word	0x200016fc
 800686c:	20000668 	.word	0x20000668
 8006870:	20001710 	.word	0x20001710
 8006874:	2000067c 	.word	0x2000067c
 8006878:	20001724 	.word	0x20001724
 800687c:	20000690 	.word	0x20000690
 8006880:	20001738 	.word	0x20001738
 8006884:	200006a4 	.word	0x200006a4
 8006888:	2000174c 	.word	0x2000174c
 800688c:	200006b8 	.word	0x200006b8
 8006890:	20001760 	.word	0x20001760
 8006894:	200006cc 	.word	0x200006cc
 8006898:	20001774 	.word	0x20001774
 800689c:	200006e0 	.word	0x200006e0
 80068a0:	20001788 	.word	0x20001788
 80068a4:	200006f4 	.word	0x200006f4
 80068a8:	2000179c 	.word	0x2000179c
 80068ac:	20000c80 	.word	0x20000c80
 80068b0:	200017b0 	.word	0x200017b0
 80068b4:	20000c94 	.word	0x20000c94
 80068b8:	200017c4 	.word	0x200017c4
 80068bc:	20000ca8 	.word	0x20000ca8
 80068c0:	6828      	ldr	r0, [r5, #0]
 80068c2:	6869      	ldr	r1, [r5, #4]
 80068c4:	68aa      	ldr	r2, [r5, #8]
 80068c6:	68eb      	ldr	r3, [r5, #12]
 80068c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ca:	7c2b      	ldrb	r3, [r5, #16]
 80068cc:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 80068ce:	4a59      	ldr	r2, [pc, #356]	@ (8006a34 <loadMenuTexts+0xa0c>)
 80068d0:	4b59      	ldr	r3, [pc, #356]	@ (8006a38 <loadMenuTexts+0xa10>)
 80068d2:	4614      	mov	r4, r2
 80068d4:	461d      	mov	r5, r3
 80068d6:	6828      	ldr	r0, [r5, #0]
 80068d8:	6869      	ldr	r1, [r5, #4]
 80068da:	68aa      	ldr	r2, [r5, #8]
 80068dc:	68eb      	ldr	r3, [r5, #12]
 80068de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e0:	7c2b      	ldrb	r3, [r5, #16]
 80068e2:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80068e4:	4a55      	ldr	r2, [pc, #340]	@ (8006a3c <loadMenuTexts+0xa14>)
 80068e6:	4b56      	ldr	r3, [pc, #344]	@ (8006a40 <loadMenuTexts+0xa18>)
 80068e8:	4614      	mov	r4, r2
 80068ea:	461d      	mov	r5, r3
 80068ec:	6828      	ldr	r0, [r5, #0]
 80068ee:	6869      	ldr	r1, [r5, #4]
 80068f0:	68aa      	ldr	r2, [r5, #8]
 80068f2:	68eb      	ldr	r3, [r5, #12]
 80068f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f6:	7c2b      	ldrb	r3, [r5, #16]
 80068f8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80068fa:	4a52      	ldr	r2, [pc, #328]	@ (8006a44 <loadMenuTexts+0xa1c>)
 80068fc:	4b52      	ldr	r3, [pc, #328]	@ (8006a48 <loadMenuTexts+0xa20>)
 80068fe:	4614      	mov	r4, r2
 8006900:	461d      	mov	r5, r3
 8006902:	6828      	ldr	r0, [r5, #0]
 8006904:	6869      	ldr	r1, [r5, #4]
 8006906:	68aa      	ldr	r2, [r5, #8]
 8006908:	68eb      	ldr	r3, [r5, #12]
 800690a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800690c:	7c2b      	ldrb	r3, [r5, #16]
 800690e:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006910:	4a4e      	ldr	r2, [pc, #312]	@ (8006a4c <loadMenuTexts+0xa24>)
 8006912:	4b4f      	ldr	r3, [pc, #316]	@ (8006a50 <loadMenuTexts+0xa28>)
 8006914:	4614      	mov	r4, r2
 8006916:	461d      	mov	r5, r3
 8006918:	6828      	ldr	r0, [r5, #0]
 800691a:	6869      	ldr	r1, [r5, #4]
 800691c:	68aa      	ldr	r2, [r5, #8]
 800691e:	68eb      	ldr	r3, [r5, #12]
 8006920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006922:	7c2b      	ldrb	r3, [r5, #16]
 8006924:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006926:	4a4b      	ldr	r2, [pc, #300]	@ (8006a54 <loadMenuTexts+0xa2c>)
 8006928:	4b4b      	ldr	r3, [pc, #300]	@ (8006a58 <loadMenuTexts+0xa30>)
 800692a:	4614      	mov	r4, r2
 800692c:	461d      	mov	r5, r3
 800692e:	6828      	ldr	r0, [r5, #0]
 8006930:	6869      	ldr	r1, [r5, #4]
 8006932:	68aa      	ldr	r2, [r5, #8]
 8006934:	68eb      	ldr	r3, [r5, #12]
 8006936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006938:	7c2b      	ldrb	r3, [r5, #16]
 800693a:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 800693c:	4a47      	ldr	r2, [pc, #284]	@ (8006a5c <loadMenuTexts+0xa34>)
 800693e:	4b48      	ldr	r3, [pc, #288]	@ (8006a60 <loadMenuTexts+0xa38>)
 8006940:	4614      	mov	r4, r2
 8006942:	461d      	mov	r5, r3
 8006944:	6828      	ldr	r0, [r5, #0]
 8006946:	6869      	ldr	r1, [r5, #4]
 8006948:	68aa      	ldr	r2, [r5, #8]
 800694a:	68eb      	ldr	r3, [r5, #12]
 800694c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800694e:	7c2b      	ldrb	r3, [r5, #16]
 8006950:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006952:	4a44      	ldr	r2, [pc, #272]	@ (8006a64 <loadMenuTexts+0xa3c>)
 8006954:	4b44      	ldr	r3, [pc, #272]	@ (8006a68 <loadMenuTexts+0xa40>)
 8006956:	4614      	mov	r4, r2
 8006958:	461d      	mov	r5, r3
 800695a:	6828      	ldr	r0, [r5, #0]
 800695c:	6869      	ldr	r1, [r5, #4]
 800695e:	68aa      	ldr	r2, [r5, #8]
 8006960:	68eb      	ldr	r3, [r5, #12]
 8006962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006964:	7c2b      	ldrb	r3, [r5, #16]
 8006966:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006968:	4a40      	ldr	r2, [pc, #256]	@ (8006a6c <loadMenuTexts+0xa44>)
 800696a:	4b41      	ldr	r3, [pc, #260]	@ (8006a70 <loadMenuTexts+0xa48>)
 800696c:	4614      	mov	r4, r2
 800696e:	461d      	mov	r5, r3
 8006970:	6828      	ldr	r0, [r5, #0]
 8006972:	6869      	ldr	r1, [r5, #4]
 8006974:	68aa      	ldr	r2, [r5, #8]
 8006976:	68eb      	ldr	r3, [r5, #12]
 8006978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697a:	7c2b      	ldrb	r3, [r5, #16]
 800697c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 800697e:	4a3d      	ldr	r2, [pc, #244]	@ (8006a74 <loadMenuTexts+0xa4c>)
 8006980:	4b3d      	ldr	r3, [pc, #244]	@ (8006a78 <loadMenuTexts+0xa50>)
 8006982:	4614      	mov	r4, r2
 8006984:	461d      	mov	r5, r3
 8006986:	6828      	ldr	r0, [r5, #0]
 8006988:	6869      	ldr	r1, [r5, #4]
 800698a:	68aa      	ldr	r2, [r5, #8]
 800698c:	68eb      	ldr	r3, [r5, #12]
 800698e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006990:	7c2b      	ldrb	r3, [r5, #16]
 8006992:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006994:	4a39      	ldr	r2, [pc, #228]	@ (8006a7c <loadMenuTexts+0xa54>)
 8006996:	4b3a      	ldr	r3, [pc, #232]	@ (8006a80 <loadMenuTexts+0xa58>)
 8006998:	4614      	mov	r4, r2
 800699a:	461d      	mov	r5, r3
 800699c:	6828      	ldr	r0, [r5, #0]
 800699e:	6869      	ldr	r1, [r5, #4]
 80069a0:	68aa      	ldr	r2, [r5, #8]
 80069a2:	68eb      	ldr	r3, [r5, #12]
 80069a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069a6:	7c2b      	ldrb	r3, [r5, #16]
 80069a8:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 80069aa:	4a36      	ldr	r2, [pc, #216]	@ (8006a84 <loadMenuTexts+0xa5c>)
 80069ac:	4b36      	ldr	r3, [pc, #216]	@ (8006a88 <loadMenuTexts+0xa60>)
 80069ae:	4614      	mov	r4, r2
 80069b0:	461d      	mov	r5, r3
 80069b2:	6828      	ldr	r0, [r5, #0]
 80069b4:	6869      	ldr	r1, [r5, #4]
 80069b6:	68aa      	ldr	r2, [r5, #8]
 80069b8:	68eb      	ldr	r3, [r5, #12]
 80069ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069bc:	7c2b      	ldrb	r3, [r5, #16]
 80069be:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 80069c0:	4a32      	ldr	r2, [pc, #200]	@ (8006a8c <loadMenuTexts+0xa64>)
 80069c2:	4b33      	ldr	r3, [pc, #204]	@ (8006a90 <loadMenuTexts+0xa68>)
 80069c4:	4614      	mov	r4, r2
 80069c6:	461d      	mov	r5, r3
 80069c8:	6828      	ldr	r0, [r5, #0]
 80069ca:	6869      	ldr	r1, [r5, #4]
 80069cc:	68aa      	ldr	r2, [r5, #8]
 80069ce:	68eb      	ldr	r3, [r5, #12]
 80069d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d2:	7c2b      	ldrb	r3, [r5, #16]
 80069d4:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 80069d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006a94 <loadMenuTexts+0xa6c>)
 80069d8:	4b2f      	ldr	r3, [pc, #188]	@ (8006a98 <loadMenuTexts+0xa70>)
 80069da:	4614      	mov	r4, r2
 80069dc:	461d      	mov	r5, r3
 80069de:	6828      	ldr	r0, [r5, #0]
 80069e0:	6869      	ldr	r1, [r5, #4]
 80069e2:	68aa      	ldr	r2, [r5, #8]
 80069e4:	68eb      	ldr	r3, [r5, #12]
 80069e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e8:	7c2b      	ldrb	r3, [r5, #16]
 80069ea:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 80069ec:	4a2b      	ldr	r2, [pc, #172]	@ (8006a9c <loadMenuTexts+0xa74>)
 80069ee:	4b2c      	ldr	r3, [pc, #176]	@ (8006aa0 <loadMenuTexts+0xa78>)
 80069f0:	4614      	mov	r4, r2
 80069f2:	461d      	mov	r5, r3
 80069f4:	6828      	ldr	r0, [r5, #0]
 80069f6:	6869      	ldr	r1, [r5, #4]
 80069f8:	68aa      	ldr	r2, [r5, #8]
 80069fa:	68eb      	ldr	r3, [r5, #12]
 80069fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069fe:	7c2b      	ldrb	r3, [r5, #16]
 8006a00:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006a02:	4a28      	ldr	r2, [pc, #160]	@ (8006aa4 <loadMenuTexts+0xa7c>)
 8006a04:	4b28      	ldr	r3, [pc, #160]	@ (8006aa8 <loadMenuTexts+0xa80>)
 8006a06:	4614      	mov	r4, r2
 8006a08:	461d      	mov	r5, r3
 8006a0a:	6828      	ldr	r0, [r5, #0]
 8006a0c:	6869      	ldr	r1, [r5, #4]
 8006a0e:	68aa      	ldr	r2, [r5, #8]
 8006a10:	68eb      	ldr	r3, [r5, #12]
 8006a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a14:	7c2b      	ldrb	r3, [r5, #16]
 8006a16:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006a18:	4a24      	ldr	r2, [pc, #144]	@ (8006aac <loadMenuTexts+0xa84>)
 8006a1a:	4b25      	ldr	r3, [pc, #148]	@ (8006ab0 <loadMenuTexts+0xa88>)
 8006a1c:	4614      	mov	r4, r2
 8006a1e:	461d      	mov	r5, r3
 8006a20:	6828      	ldr	r0, [r5, #0]
 8006a22:	6869      	ldr	r1, [r5, #4]
 8006a24:	68aa      	ldr	r2, [r5, #8]
 8006a26:	68eb      	ldr	r3, [r5, #12]
 8006a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a2a:	7c2b      	ldrb	r3, [r5, #16]
 8006a2c:	7023      	strb	r3, [r4, #0]
 8006a2e:	f000 bd3a 	b.w	80074a6 <loadMenuTexts+0x147e>
 8006a32:	bf00      	nop
 8006a34:	200017d8 	.word	0x200017d8
 8006a38:	20000cbc 	.word	0x20000cbc
 8006a3c:	200017ec 	.word	0x200017ec
 8006a40:	20000d20 	.word	0x20000d20
 8006a44:	20001800 	.word	0x20001800
 8006a48:	20000d34 	.word	0x20000d34
 8006a4c:	20001814 	.word	0x20001814
 8006a50:	20000d70 	.word	0x20000d70
 8006a54:	20001828 	.word	0x20001828
 8006a58:	20000d84 	.word	0x20000d84
 8006a5c:	2000183c 	.word	0x2000183c
 8006a60:	20000dc0 	.word	0x20000dc0
 8006a64:	20001850 	.word	0x20001850
 8006a68:	20000dd4 	.word	0x20000dd4
 8006a6c:	20001864 	.word	0x20001864
 8006a70:	20000e10 	.word	0x20000e10
 8006a74:	20001878 	.word	0x20001878
 8006a78:	20000e38 	.word	0x20000e38
 8006a7c:	2000188c 	.word	0x2000188c
 8006a80:	20000e60 	.word	0x20000e60
 8006a84:	200018a0 	.word	0x200018a0
 8006a88:	20000e88 	.word	0x20000e88
 8006a8c:	200018b4 	.word	0x200018b4
 8006a90:	20000eb0 	.word	0x20000eb0
 8006a94:	200018c8 	.word	0x200018c8
 8006a98:	20000ed8 	.word	0x20000ed8
 8006a9c:	200018dc 	.word	0x200018dc
 8006aa0:	20000f00 	.word	0x20000f00
 8006aa4:	200018f0 	.word	0x200018f0
 8006aa8:	20000f28 	.word	0x20000f28
 8006aac:	20001904 	.word	0x20001904
 8006ab0:	20000f50 	.word	0x20000f50
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006ab4:	4ac6      	ldr	r2, [pc, #792]	@ (8006dd0 <loadMenuTexts+0xda8>)
 8006ab6:	4bc7      	ldr	r3, [pc, #796]	@ (8006dd4 <loadMenuTexts+0xdac>)
 8006ab8:	4614      	mov	r4, r2
 8006aba:	461d      	mov	r5, r3
 8006abc:	6828      	ldr	r0, [r5, #0]
 8006abe:	6869      	ldr	r1, [r5, #4]
 8006ac0:	68aa      	ldr	r2, [r5, #8]
 8006ac2:	68eb      	ldr	r3, [r5, #12]
 8006ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac6:	7c2b      	ldrb	r3, [r5, #16]
 8006ac8:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006aca:	4ac3      	ldr	r2, [pc, #780]	@ (8006dd8 <loadMenuTexts+0xdb0>)
 8006acc:	4bc3      	ldr	r3, [pc, #780]	@ (8006ddc <loadMenuTexts+0xdb4>)
 8006ace:	4614      	mov	r4, r2
 8006ad0:	461d      	mov	r5, r3
 8006ad2:	6828      	ldr	r0, [r5, #0]
 8006ad4:	6869      	ldr	r1, [r5, #4]
 8006ad6:	68aa      	ldr	r2, [r5, #8]
 8006ad8:	68eb      	ldr	r3, [r5, #12]
 8006ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006adc:	7c2b      	ldrb	r3, [r5, #16]
 8006ade:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006ae0:	4abf      	ldr	r2, [pc, #764]	@ (8006de0 <loadMenuTexts+0xdb8>)
 8006ae2:	4bc0      	ldr	r3, [pc, #768]	@ (8006de4 <loadMenuTexts+0xdbc>)
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	461d      	mov	r5, r3
 8006ae8:	6828      	ldr	r0, [r5, #0]
 8006aea:	6869      	ldr	r1, [r5, #4]
 8006aec:	68aa      	ldr	r2, [r5, #8]
 8006aee:	68eb      	ldr	r3, [r5, #12]
 8006af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af2:	7c2b      	ldrb	r3, [r5, #16]
 8006af4:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006af6:	4abc      	ldr	r2, [pc, #752]	@ (8006de8 <loadMenuTexts+0xdc0>)
 8006af8:	4bbc      	ldr	r3, [pc, #752]	@ (8006dec <loadMenuTexts+0xdc4>)
 8006afa:	4614      	mov	r4, r2
 8006afc:	461d      	mov	r5, r3
 8006afe:	6828      	ldr	r0, [r5, #0]
 8006b00:	6869      	ldr	r1, [r5, #4]
 8006b02:	68aa      	ldr	r2, [r5, #8]
 8006b04:	68eb      	ldr	r3, [r5, #12]
 8006b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b08:	7c2b      	ldrb	r3, [r5, #16]
 8006b0a:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006b0c:	4ab8      	ldr	r2, [pc, #736]	@ (8006df0 <loadMenuTexts+0xdc8>)
 8006b0e:	4bb9      	ldr	r3, [pc, #740]	@ (8006df4 <loadMenuTexts+0xdcc>)
 8006b10:	4614      	mov	r4, r2
 8006b12:	461d      	mov	r5, r3
 8006b14:	6828      	ldr	r0, [r5, #0]
 8006b16:	6869      	ldr	r1, [r5, #4]
 8006b18:	68aa      	ldr	r2, [r5, #8]
 8006b1a:	68eb      	ldr	r3, [r5, #12]
 8006b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b1e:	7c2b      	ldrb	r3, [r5, #16]
 8006b20:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006b22:	4ab5      	ldr	r2, [pc, #724]	@ (8006df8 <loadMenuTexts+0xdd0>)
 8006b24:	4bb5      	ldr	r3, [pc, #724]	@ (8006dfc <loadMenuTexts+0xdd4>)
 8006b26:	4614      	mov	r4, r2
 8006b28:	461d      	mov	r5, r3
 8006b2a:	6828      	ldr	r0, [r5, #0]
 8006b2c:	6869      	ldr	r1, [r5, #4]
 8006b2e:	68aa      	ldr	r2, [r5, #8]
 8006b30:	68eb      	ldr	r3, [r5, #12]
 8006b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b34:	7c2b      	ldrb	r3, [r5, #16]
 8006b36:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006b38:	4ab1      	ldr	r2, [pc, #708]	@ (8006e00 <loadMenuTexts+0xdd8>)
 8006b3a:	4bb2      	ldr	r3, [pc, #712]	@ (8006e04 <loadMenuTexts+0xddc>)
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	461d      	mov	r5, r3
 8006b40:	6828      	ldr	r0, [r5, #0]
 8006b42:	6869      	ldr	r1, [r5, #4]
 8006b44:	68aa      	ldr	r2, [r5, #8]
 8006b46:	68eb      	ldr	r3, [r5, #12]
 8006b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b4a:	7c2b      	ldrb	r3, [r5, #16]
 8006b4c:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006b4e:	4aae      	ldr	r2, [pc, #696]	@ (8006e08 <loadMenuTexts+0xde0>)
 8006b50:	4bae      	ldr	r3, [pc, #696]	@ (8006e0c <loadMenuTexts+0xde4>)
 8006b52:	4614      	mov	r4, r2
 8006b54:	461d      	mov	r5, r3
 8006b56:	6828      	ldr	r0, [r5, #0]
 8006b58:	6869      	ldr	r1, [r5, #4]
 8006b5a:	68aa      	ldr	r2, [r5, #8]
 8006b5c:	68eb      	ldr	r3, [r5, #12]
 8006b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b60:	7c2b      	ldrb	r3, [r5, #16]
 8006b62:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006b64:	4aaa      	ldr	r2, [pc, #680]	@ (8006e10 <loadMenuTexts+0xde8>)
 8006b66:	4bab      	ldr	r3, [pc, #684]	@ (8006e14 <loadMenuTexts+0xdec>)
 8006b68:	4614      	mov	r4, r2
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	6828      	ldr	r0, [r5, #0]
 8006b6e:	6869      	ldr	r1, [r5, #4]
 8006b70:	68aa      	ldr	r2, [r5, #8]
 8006b72:	68eb      	ldr	r3, [r5, #12]
 8006b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b76:	7c2b      	ldrb	r3, [r5, #16]
 8006b78:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006b7a:	4aa7      	ldr	r2, [pc, #668]	@ (8006e18 <loadMenuTexts+0xdf0>)
 8006b7c:	4ba7      	ldr	r3, [pc, #668]	@ (8006e1c <loadMenuTexts+0xdf4>)
 8006b7e:	4614      	mov	r4, r2
 8006b80:	461d      	mov	r5, r3
 8006b82:	6828      	ldr	r0, [r5, #0]
 8006b84:	6869      	ldr	r1, [r5, #4]
 8006b86:	68aa      	ldr	r2, [r5, #8]
 8006b88:	68eb      	ldr	r3, [r5, #12]
 8006b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8c:	7c2b      	ldrb	r3, [r5, #16]
 8006b8e:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006b90:	4aa3      	ldr	r2, [pc, #652]	@ (8006e20 <loadMenuTexts+0xdf8>)
 8006b92:	4ba4      	ldr	r3, [pc, #656]	@ (8006e24 <loadMenuTexts+0xdfc>)
 8006b94:	4614      	mov	r4, r2
 8006b96:	461d      	mov	r5, r3
 8006b98:	6828      	ldr	r0, [r5, #0]
 8006b9a:	6869      	ldr	r1, [r5, #4]
 8006b9c:	68aa      	ldr	r2, [r5, #8]
 8006b9e:	68eb      	ldr	r3, [r5, #12]
 8006ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba2:	7c2b      	ldrb	r3, [r5, #16]
 8006ba4:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006ba6:	4aa0      	ldr	r2, [pc, #640]	@ (8006e28 <loadMenuTexts+0xe00>)
 8006ba8:	4ba0      	ldr	r3, [pc, #640]	@ (8006e2c <loadMenuTexts+0xe04>)
 8006baa:	4614      	mov	r4, r2
 8006bac:	461d      	mov	r5, r3
 8006bae:	6828      	ldr	r0, [r5, #0]
 8006bb0:	6869      	ldr	r1, [r5, #4]
 8006bb2:	68aa      	ldr	r2, [r5, #8]
 8006bb4:	68eb      	ldr	r3, [r5, #12]
 8006bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bb8:	7c2b      	ldrb	r3, [r5, #16]
 8006bba:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006bbc:	4a9c      	ldr	r2, [pc, #624]	@ (8006e30 <loadMenuTexts+0xe08>)
 8006bbe:	4b9d      	ldr	r3, [pc, #628]	@ (8006e34 <loadMenuTexts+0xe0c>)
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	461d      	mov	r5, r3
 8006bc4:	6828      	ldr	r0, [r5, #0]
 8006bc6:	6869      	ldr	r1, [r5, #4]
 8006bc8:	68aa      	ldr	r2, [r5, #8]
 8006bca:	68eb      	ldr	r3, [r5, #12]
 8006bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bce:	7c2b      	ldrb	r3, [r5, #16]
 8006bd0:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006bd2:	4a99      	ldr	r2, [pc, #612]	@ (8006e38 <loadMenuTexts+0xe10>)
 8006bd4:	4b99      	ldr	r3, [pc, #612]	@ (8006e3c <loadMenuTexts+0xe14>)
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	461d      	mov	r5, r3
 8006bda:	6828      	ldr	r0, [r5, #0]
 8006bdc:	6869      	ldr	r1, [r5, #4]
 8006bde:	68aa      	ldr	r2, [r5, #8]
 8006be0:	68eb      	ldr	r3, [r5, #12]
 8006be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006be4:	7c2b      	ldrb	r3, [r5, #16]
 8006be6:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006be8:	4a95      	ldr	r2, [pc, #596]	@ (8006e40 <loadMenuTexts+0xe18>)
 8006bea:	4b96      	ldr	r3, [pc, #600]	@ (8006e44 <loadMenuTexts+0xe1c>)
 8006bec:	4614      	mov	r4, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	6828      	ldr	r0, [r5, #0]
 8006bf2:	6869      	ldr	r1, [r5, #4]
 8006bf4:	68aa      	ldr	r2, [r5, #8]
 8006bf6:	68eb      	ldr	r3, [r5, #12]
 8006bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfa:	7c2b      	ldrb	r3, [r5, #16]
 8006bfc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006bfe:	4a92      	ldr	r2, [pc, #584]	@ (8006e48 <loadMenuTexts+0xe20>)
 8006c00:	4b92      	ldr	r3, [pc, #584]	@ (8006e4c <loadMenuTexts+0xe24>)
 8006c02:	4614      	mov	r4, r2
 8006c04:	461d      	mov	r5, r3
 8006c06:	6828      	ldr	r0, [r5, #0]
 8006c08:	6869      	ldr	r1, [r5, #4]
 8006c0a:	68aa      	ldr	r2, [r5, #8]
 8006c0c:	68eb      	ldr	r3, [r5, #12]
 8006c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c10:	7c2b      	ldrb	r3, [r5, #16]
 8006c12:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006c14:	4a8e      	ldr	r2, [pc, #568]	@ (8006e50 <loadMenuTexts+0xe28>)
 8006c16:	4b8f      	ldr	r3, [pc, #572]	@ (8006e54 <loadMenuTexts+0xe2c>)
 8006c18:	4614      	mov	r4, r2
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	6828      	ldr	r0, [r5, #0]
 8006c1e:	6869      	ldr	r1, [r5, #4]
 8006c20:	68aa      	ldr	r2, [r5, #8]
 8006c22:	68eb      	ldr	r3, [r5, #12]
 8006c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c26:	7c2b      	ldrb	r3, [r5, #16]
 8006c28:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006c2a:	4a8b      	ldr	r2, [pc, #556]	@ (8006e58 <loadMenuTexts+0xe30>)
 8006c2c:	4b8b      	ldr	r3, [pc, #556]	@ (8006e5c <loadMenuTexts+0xe34>)
 8006c2e:	4614      	mov	r4, r2
 8006c30:	461d      	mov	r5, r3
 8006c32:	6828      	ldr	r0, [r5, #0]
 8006c34:	6869      	ldr	r1, [r5, #4]
 8006c36:	68aa      	ldr	r2, [r5, #8]
 8006c38:	68eb      	ldr	r3, [r5, #12]
 8006c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c3c:	7c2b      	ldrb	r3, [r5, #16]
 8006c3e:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006c40:	4a87      	ldr	r2, [pc, #540]	@ (8006e60 <loadMenuTexts+0xe38>)
 8006c42:	4b88      	ldr	r3, [pc, #544]	@ (8006e64 <loadMenuTexts+0xe3c>)
 8006c44:	4614      	mov	r4, r2
 8006c46:	461d      	mov	r5, r3
 8006c48:	6828      	ldr	r0, [r5, #0]
 8006c4a:	6869      	ldr	r1, [r5, #4]
 8006c4c:	68aa      	ldr	r2, [r5, #8]
 8006c4e:	68eb      	ldr	r3, [r5, #12]
 8006c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c52:	7c2b      	ldrb	r3, [r5, #16]
 8006c54:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006c56:	4a84      	ldr	r2, [pc, #528]	@ (8006e68 <loadMenuTexts+0xe40>)
 8006c58:	4b84      	ldr	r3, [pc, #528]	@ (8006e6c <loadMenuTexts+0xe44>)
 8006c5a:	4614      	mov	r4, r2
 8006c5c:	461d      	mov	r5, r3
 8006c5e:	6828      	ldr	r0, [r5, #0]
 8006c60:	6869      	ldr	r1, [r5, #4]
 8006c62:	68aa      	ldr	r2, [r5, #8]
 8006c64:	68eb      	ldr	r3, [r5, #12]
 8006c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c68:	7c2b      	ldrb	r3, [r5, #16]
 8006c6a:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006c6c:	4a80      	ldr	r2, [pc, #512]	@ (8006e70 <loadMenuTexts+0xe48>)
 8006c6e:	4b81      	ldr	r3, [pc, #516]	@ (8006e74 <loadMenuTexts+0xe4c>)
 8006c70:	4614      	mov	r4, r2
 8006c72:	461d      	mov	r5, r3
 8006c74:	6828      	ldr	r0, [r5, #0]
 8006c76:	6869      	ldr	r1, [r5, #4]
 8006c78:	68aa      	ldr	r2, [r5, #8]
 8006c7a:	68eb      	ldr	r3, [r5, #12]
 8006c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c7e:	7c2b      	ldrb	r3, [r5, #16]
 8006c80:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006c82:	4a7d      	ldr	r2, [pc, #500]	@ (8006e78 <loadMenuTexts+0xe50>)
 8006c84:	4b7d      	ldr	r3, [pc, #500]	@ (8006e7c <loadMenuTexts+0xe54>)
 8006c86:	4614      	mov	r4, r2
 8006c88:	461d      	mov	r5, r3
 8006c8a:	6828      	ldr	r0, [r5, #0]
 8006c8c:	6869      	ldr	r1, [r5, #4]
 8006c8e:	68aa      	ldr	r2, [r5, #8]
 8006c90:	68eb      	ldr	r3, [r5, #12]
 8006c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c94:	7c2b      	ldrb	r3, [r5, #16]
 8006c96:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006c98:	4a79      	ldr	r2, [pc, #484]	@ (8006e80 <loadMenuTexts+0xe58>)
 8006c9a:	4b7a      	ldr	r3, [pc, #488]	@ (8006e84 <loadMenuTexts+0xe5c>)
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	6828      	ldr	r0, [r5, #0]
 8006ca2:	6869      	ldr	r1, [r5, #4]
 8006ca4:	68aa      	ldr	r2, [r5, #8]
 8006ca6:	68eb      	ldr	r3, [r5, #12]
 8006ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006caa:	7c2b      	ldrb	r3, [r5, #16]
 8006cac:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006cae:	4a76      	ldr	r2, [pc, #472]	@ (8006e88 <loadMenuTexts+0xe60>)
 8006cb0:	4b76      	ldr	r3, [pc, #472]	@ (8006e8c <loadMenuTexts+0xe64>)
 8006cb2:	4614      	mov	r4, r2
 8006cb4:	461d      	mov	r5, r3
 8006cb6:	6828      	ldr	r0, [r5, #0]
 8006cb8:	6869      	ldr	r1, [r5, #4]
 8006cba:	68aa      	ldr	r2, [r5, #8]
 8006cbc:	68eb      	ldr	r3, [r5, #12]
 8006cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cc0:	7c2b      	ldrb	r3, [r5, #16]
 8006cc2:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006cc4:	4a72      	ldr	r2, [pc, #456]	@ (8006e90 <loadMenuTexts+0xe68>)
 8006cc6:	4b73      	ldr	r3, [pc, #460]	@ (8006e94 <loadMenuTexts+0xe6c>)
 8006cc8:	4614      	mov	r4, r2
 8006cca:	461d      	mov	r5, r3
 8006ccc:	6828      	ldr	r0, [r5, #0]
 8006cce:	6869      	ldr	r1, [r5, #4]
 8006cd0:	68aa      	ldr	r2, [r5, #8]
 8006cd2:	68eb      	ldr	r3, [r5, #12]
 8006cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd6:	7c2b      	ldrb	r3, [r5, #16]
 8006cd8:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006cda:	4a6f      	ldr	r2, [pc, #444]	@ (8006e98 <loadMenuTexts+0xe70>)
 8006cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8006e9c <loadMenuTexts+0xe74>)
 8006cde:	4614      	mov	r4, r2
 8006ce0:	461d      	mov	r5, r3
 8006ce2:	6828      	ldr	r0, [r5, #0]
 8006ce4:	6869      	ldr	r1, [r5, #4]
 8006ce6:	68aa      	ldr	r2, [r5, #8]
 8006ce8:	68eb      	ldr	r3, [r5, #12]
 8006cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cec:	7c2b      	ldrb	r3, [r5, #16]
 8006cee:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006cf0:	4a6b      	ldr	r2, [pc, #428]	@ (8006ea0 <loadMenuTexts+0xe78>)
 8006cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8006ea4 <loadMenuTexts+0xe7c>)
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	6828      	ldr	r0, [r5, #0]
 8006cfa:	6869      	ldr	r1, [r5, #4]
 8006cfc:	68aa      	ldr	r2, [r5, #8]
 8006cfe:	68eb      	ldr	r3, [r5, #12]
 8006d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d02:	7c2b      	ldrb	r3, [r5, #16]
 8006d04:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006d06:	4a68      	ldr	r2, [pc, #416]	@ (8006ea8 <loadMenuTexts+0xe80>)
 8006d08:	4b68      	ldr	r3, [pc, #416]	@ (8006eac <loadMenuTexts+0xe84>)
 8006d0a:	4614      	mov	r4, r2
 8006d0c:	461d      	mov	r5, r3
 8006d0e:	6828      	ldr	r0, [r5, #0]
 8006d10:	6869      	ldr	r1, [r5, #4]
 8006d12:	68aa      	ldr	r2, [r5, #8]
 8006d14:	68eb      	ldr	r3, [r5, #12]
 8006d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d18:	7c2b      	ldrb	r3, [r5, #16]
 8006d1a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006d1c:	4a64      	ldr	r2, [pc, #400]	@ (8006eb0 <loadMenuTexts+0xe88>)
 8006d1e:	4b65      	ldr	r3, [pc, #404]	@ (8006eb4 <loadMenuTexts+0xe8c>)
 8006d20:	4614      	mov	r4, r2
 8006d22:	461d      	mov	r5, r3
 8006d24:	6828      	ldr	r0, [r5, #0]
 8006d26:	6869      	ldr	r1, [r5, #4]
 8006d28:	68aa      	ldr	r2, [r5, #8]
 8006d2a:	68eb      	ldr	r3, [r5, #12]
 8006d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d2e:	7c2b      	ldrb	r3, [r5, #16]
 8006d30:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006d32:	4a61      	ldr	r2, [pc, #388]	@ (8006eb8 <loadMenuTexts+0xe90>)
 8006d34:	4b61      	ldr	r3, [pc, #388]	@ (8006ebc <loadMenuTexts+0xe94>)
 8006d36:	4614      	mov	r4, r2
 8006d38:	461d      	mov	r5, r3
 8006d3a:	6828      	ldr	r0, [r5, #0]
 8006d3c:	6869      	ldr	r1, [r5, #4]
 8006d3e:	68aa      	ldr	r2, [r5, #8]
 8006d40:	68eb      	ldr	r3, [r5, #12]
 8006d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d44:	7c2b      	ldrb	r3, [r5, #16]
 8006d46:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006d48:	4a5d      	ldr	r2, [pc, #372]	@ (8006ec0 <loadMenuTexts+0xe98>)
 8006d4a:	4b5e      	ldr	r3, [pc, #376]	@ (8006ec4 <loadMenuTexts+0xe9c>)
 8006d4c:	4614      	mov	r4, r2
 8006d4e:	461d      	mov	r5, r3
 8006d50:	6828      	ldr	r0, [r5, #0]
 8006d52:	6869      	ldr	r1, [r5, #4]
 8006d54:	68aa      	ldr	r2, [r5, #8]
 8006d56:	68eb      	ldr	r3, [r5, #12]
 8006d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d5a:	7c2b      	ldrb	r3, [r5, #16]
 8006d5c:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8006ec8 <loadMenuTexts+0xea0>)
 8006d60:	4b5a      	ldr	r3, [pc, #360]	@ (8006ecc <loadMenuTexts+0xea4>)
 8006d62:	4614      	mov	r4, r2
 8006d64:	461d      	mov	r5, r3
 8006d66:	6828      	ldr	r0, [r5, #0]
 8006d68:	6869      	ldr	r1, [r5, #4]
 8006d6a:	68aa      	ldr	r2, [r5, #8]
 8006d6c:	68eb      	ldr	r3, [r5, #12]
 8006d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d70:	7c2b      	ldrb	r3, [r5, #16]
 8006d72:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006d74:	4a56      	ldr	r2, [pc, #344]	@ (8006ed0 <loadMenuTexts+0xea8>)
 8006d76:	4b57      	ldr	r3, [pc, #348]	@ (8006ed4 <loadMenuTexts+0xeac>)
 8006d78:	4614      	mov	r4, r2
 8006d7a:	461d      	mov	r5, r3
 8006d7c:	6828      	ldr	r0, [r5, #0]
 8006d7e:	6869      	ldr	r1, [r5, #4]
 8006d80:	68aa      	ldr	r2, [r5, #8]
 8006d82:	68eb      	ldr	r3, [r5, #12]
 8006d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d86:	7c2b      	ldrb	r3, [r5, #16]
 8006d88:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006d8a:	4a53      	ldr	r2, [pc, #332]	@ (8006ed8 <loadMenuTexts+0xeb0>)
 8006d8c:	4b53      	ldr	r3, [pc, #332]	@ (8006edc <loadMenuTexts+0xeb4>)
 8006d8e:	4614      	mov	r4, r2
 8006d90:	461d      	mov	r5, r3
 8006d92:	6828      	ldr	r0, [r5, #0]
 8006d94:	6869      	ldr	r1, [r5, #4]
 8006d96:	68aa      	ldr	r2, [r5, #8]
 8006d98:	68eb      	ldr	r3, [r5, #12]
 8006d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d9c:	7c2b      	ldrb	r3, [r5, #16]
 8006d9e:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006da0:	4a4f      	ldr	r2, [pc, #316]	@ (8006ee0 <loadMenuTexts+0xeb8>)
 8006da2:	4b50      	ldr	r3, [pc, #320]	@ (8006ee4 <loadMenuTexts+0xebc>)
 8006da4:	4614      	mov	r4, r2
 8006da6:	461d      	mov	r5, r3
 8006da8:	6828      	ldr	r0, [r5, #0]
 8006daa:	6869      	ldr	r1, [r5, #4]
 8006dac:	68aa      	ldr	r2, [r5, #8]
 8006dae:	68eb      	ldr	r3, [r5, #12]
 8006db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db2:	7c2b      	ldrb	r3, [r5, #16]
 8006db4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006db6:	4a4c      	ldr	r2, [pc, #304]	@ (8006ee8 <loadMenuTexts+0xec0>)
 8006db8:	4b4c      	ldr	r3, [pc, #304]	@ (8006eec <loadMenuTexts+0xec4>)
 8006dba:	4614      	mov	r4, r2
 8006dbc:	461d      	mov	r5, r3
 8006dbe:	6828      	ldr	r0, [r5, #0]
 8006dc0:	6869      	ldr	r1, [r5, #4]
 8006dc2:	68aa      	ldr	r2, [r5, #8]
 8006dc4:	68eb      	ldr	r3, [r5, #12]
 8006dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc8:	7c2b      	ldrb	r3, [r5, #16]
 8006dca:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006dcc:	4a48      	ldr	r2, [pc, #288]	@ (8006ef0 <loadMenuTexts+0xec8>)
 8006dce:	e091      	b.n	8006ef4 <loadMenuTexts+0xecc>
 8006dd0:	20001224 	.word	0x20001224
 8006dd4:	20000708 	.word	0x20000708
 8006dd8:	20001238 	.word	0x20001238
 8006ddc:	2000071c 	.word	0x2000071c
 8006de0:	2000124c 	.word	0x2000124c
 8006de4:	20000730 	.word	0x20000730
 8006de8:	20001260 	.word	0x20001260
 8006dec:	20000744 	.word	0x20000744
 8006df0:	20001274 	.word	0x20001274
 8006df4:	20000758 	.word	0x20000758
 8006df8:	20001288 	.word	0x20001288
 8006dfc:	2000076c 	.word	0x2000076c
 8006e00:	2000129c 	.word	0x2000129c
 8006e04:	20000780 	.word	0x20000780
 8006e08:	200012b0 	.word	0x200012b0
 8006e0c:	20000794 	.word	0x20000794
 8006e10:	200012c4 	.word	0x200012c4
 8006e14:	200007a8 	.word	0x200007a8
 8006e18:	200012d8 	.word	0x200012d8
 8006e1c:	200007bc 	.word	0x200007bc
 8006e20:	200012ec 	.word	0x200012ec
 8006e24:	200007d0 	.word	0x200007d0
 8006e28:	20001300 	.word	0x20001300
 8006e2c:	200007e4 	.word	0x200007e4
 8006e30:	20001314 	.word	0x20001314
 8006e34:	200007f8 	.word	0x200007f8
 8006e38:	20001328 	.word	0x20001328
 8006e3c:	2000080c 	.word	0x2000080c
 8006e40:	2000133c 	.word	0x2000133c
 8006e44:	20000820 	.word	0x20000820
 8006e48:	20001350 	.word	0x20001350
 8006e4c:	20000834 	.word	0x20000834
 8006e50:	20001364 	.word	0x20001364
 8006e54:	20000848 	.word	0x20000848
 8006e58:	20001378 	.word	0x20001378
 8006e5c:	2000085c 	.word	0x2000085c
 8006e60:	2000138c 	.word	0x2000138c
 8006e64:	20000870 	.word	0x20000870
 8006e68:	200013a0 	.word	0x200013a0
 8006e6c:	20000884 	.word	0x20000884
 8006e70:	200013b4 	.word	0x200013b4
 8006e74:	20000898 	.word	0x20000898
 8006e78:	200013c8 	.word	0x200013c8
 8006e7c:	200008ac 	.word	0x200008ac
 8006e80:	200013dc 	.word	0x200013dc
 8006e84:	200008c0 	.word	0x200008c0
 8006e88:	200013f0 	.word	0x200013f0
 8006e8c:	200008d4 	.word	0x200008d4
 8006e90:	20001404 	.word	0x20001404
 8006e94:	200008e8 	.word	0x200008e8
 8006e98:	20001418 	.word	0x20001418
 8006e9c:	200008fc 	.word	0x200008fc
 8006ea0:	2000142c 	.word	0x2000142c
 8006ea4:	20000910 	.word	0x20000910
 8006ea8:	20001440 	.word	0x20001440
 8006eac:	20000924 	.word	0x20000924
 8006eb0:	20001454 	.word	0x20001454
 8006eb4:	20000938 	.word	0x20000938
 8006eb8:	20001468 	.word	0x20001468
 8006ebc:	2000094c 	.word	0x2000094c
 8006ec0:	2000147c 	.word	0x2000147c
 8006ec4:	20000960 	.word	0x20000960
 8006ec8:	20001490 	.word	0x20001490
 8006ecc:	20000974 	.word	0x20000974
 8006ed0:	200014a4 	.word	0x200014a4
 8006ed4:	20000988 	.word	0x20000988
 8006ed8:	200014b8 	.word	0x200014b8
 8006edc:	2000099c 	.word	0x2000099c
 8006ee0:	200014cc 	.word	0x200014cc
 8006ee4:	200009b0 	.word	0x200009b0
 8006ee8:	200014e0 	.word	0x200014e0
 8006eec:	200009c4 	.word	0x200009c4
 8006ef0:	200014f4 	.word	0x200014f4
 8006ef4:	4bc7      	ldr	r3, [pc, #796]	@ (8007214 <loadMenuTexts+0x11ec>)
 8006ef6:	4614      	mov	r4, r2
 8006ef8:	461d      	mov	r5, r3
 8006efa:	6828      	ldr	r0, [r5, #0]
 8006efc:	6869      	ldr	r1, [r5, #4]
 8006efe:	68aa      	ldr	r2, [r5, #8]
 8006f00:	68eb      	ldr	r3, [r5, #12]
 8006f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f04:	7c2b      	ldrb	r3, [r5, #16]
 8006f06:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006f08:	4ac3      	ldr	r2, [pc, #780]	@ (8007218 <loadMenuTexts+0x11f0>)
 8006f0a:	4bc4      	ldr	r3, [pc, #784]	@ (800721c <loadMenuTexts+0x11f4>)
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	461d      	mov	r5, r3
 8006f10:	6828      	ldr	r0, [r5, #0]
 8006f12:	6869      	ldr	r1, [r5, #4]
 8006f14:	68aa      	ldr	r2, [r5, #8]
 8006f16:	68eb      	ldr	r3, [r5, #12]
 8006f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1a:	7c2b      	ldrb	r3, [r5, #16]
 8006f1c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006f1e:	4ac0      	ldr	r2, [pc, #768]	@ (8007220 <loadMenuTexts+0x11f8>)
 8006f20:	4bc0      	ldr	r3, [pc, #768]	@ (8007224 <loadMenuTexts+0x11fc>)
 8006f22:	4614      	mov	r4, r2
 8006f24:	461d      	mov	r5, r3
 8006f26:	6828      	ldr	r0, [r5, #0]
 8006f28:	6869      	ldr	r1, [r5, #4]
 8006f2a:	68aa      	ldr	r2, [r5, #8]
 8006f2c:	68eb      	ldr	r3, [r5, #12]
 8006f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f30:	7c2b      	ldrb	r3, [r5, #16]
 8006f32:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006f34:	4abc      	ldr	r2, [pc, #752]	@ (8007228 <loadMenuTexts+0x1200>)
 8006f36:	4bbd      	ldr	r3, [pc, #756]	@ (800722c <loadMenuTexts+0x1204>)
 8006f38:	4614      	mov	r4, r2
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	6828      	ldr	r0, [r5, #0]
 8006f3e:	6869      	ldr	r1, [r5, #4]
 8006f40:	68aa      	ldr	r2, [r5, #8]
 8006f42:	68eb      	ldr	r3, [r5, #12]
 8006f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f46:	7c2b      	ldrb	r3, [r5, #16]
 8006f48:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006f4a:	4ab9      	ldr	r2, [pc, #740]	@ (8007230 <loadMenuTexts+0x1208>)
 8006f4c:	4bb9      	ldr	r3, [pc, #740]	@ (8007234 <loadMenuTexts+0x120c>)
 8006f4e:	4614      	mov	r4, r2
 8006f50:	461d      	mov	r5, r3
 8006f52:	6828      	ldr	r0, [r5, #0]
 8006f54:	6869      	ldr	r1, [r5, #4]
 8006f56:	68aa      	ldr	r2, [r5, #8]
 8006f58:	68eb      	ldr	r3, [r5, #12]
 8006f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f5c:	7c2b      	ldrb	r3, [r5, #16]
 8006f5e:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006f60:	4ab5      	ldr	r2, [pc, #724]	@ (8007238 <loadMenuTexts+0x1210>)
 8006f62:	4bb6      	ldr	r3, [pc, #728]	@ (800723c <loadMenuTexts+0x1214>)
 8006f64:	4614      	mov	r4, r2
 8006f66:	461d      	mov	r5, r3
 8006f68:	6828      	ldr	r0, [r5, #0]
 8006f6a:	6869      	ldr	r1, [r5, #4]
 8006f6c:	68aa      	ldr	r2, [r5, #8]
 8006f6e:	68eb      	ldr	r3, [r5, #12]
 8006f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f72:	7c2b      	ldrb	r3, [r5, #16]
 8006f74:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006f76:	4ab2      	ldr	r2, [pc, #712]	@ (8007240 <loadMenuTexts+0x1218>)
 8006f78:	4bb2      	ldr	r3, [pc, #712]	@ (8007244 <loadMenuTexts+0x121c>)
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	461d      	mov	r5, r3
 8006f7e:	6828      	ldr	r0, [r5, #0]
 8006f80:	6869      	ldr	r1, [r5, #4]
 8006f82:	68aa      	ldr	r2, [r5, #8]
 8006f84:	68eb      	ldr	r3, [r5, #12]
 8006f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f88:	7c2b      	ldrb	r3, [r5, #16]
 8006f8a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006f8c:	4aae      	ldr	r2, [pc, #696]	@ (8007248 <loadMenuTexts+0x1220>)
 8006f8e:	4baf      	ldr	r3, [pc, #700]	@ (800724c <loadMenuTexts+0x1224>)
 8006f90:	4614      	mov	r4, r2
 8006f92:	461d      	mov	r5, r3
 8006f94:	6828      	ldr	r0, [r5, #0]
 8006f96:	6869      	ldr	r1, [r5, #4]
 8006f98:	68aa      	ldr	r2, [r5, #8]
 8006f9a:	68eb      	ldr	r3, [r5, #12]
 8006f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f9e:	7c2b      	ldrb	r3, [r5, #16]
 8006fa0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006fa2:	4aab      	ldr	r2, [pc, #684]	@ (8007250 <loadMenuTexts+0x1228>)
 8006fa4:	4bab      	ldr	r3, [pc, #684]	@ (8007254 <loadMenuTexts+0x122c>)
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	461d      	mov	r5, r3
 8006faa:	6828      	ldr	r0, [r5, #0]
 8006fac:	6869      	ldr	r1, [r5, #4]
 8006fae:	68aa      	ldr	r2, [r5, #8]
 8006fb0:	68eb      	ldr	r3, [r5, #12]
 8006fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb4:	7c2b      	ldrb	r3, [r5, #16]
 8006fb6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006fb8:	4aa7      	ldr	r2, [pc, #668]	@ (8007258 <loadMenuTexts+0x1230>)
 8006fba:	4ba8      	ldr	r3, [pc, #672]	@ (800725c <loadMenuTexts+0x1234>)
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	461d      	mov	r5, r3
 8006fc0:	6828      	ldr	r0, [r5, #0]
 8006fc2:	6869      	ldr	r1, [r5, #4]
 8006fc4:	68aa      	ldr	r2, [r5, #8]
 8006fc6:	68eb      	ldr	r3, [r5, #12]
 8006fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fca:	7c2b      	ldrb	r3, [r5, #16]
 8006fcc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006fce:	4aa4      	ldr	r2, [pc, #656]	@ (8007260 <loadMenuTexts+0x1238>)
 8006fd0:	4ba4      	ldr	r3, [pc, #656]	@ (8007264 <loadMenuTexts+0x123c>)
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	461d      	mov	r5, r3
 8006fd6:	6828      	ldr	r0, [r5, #0]
 8006fd8:	6869      	ldr	r1, [r5, #4]
 8006fda:	68aa      	ldr	r2, [r5, #8]
 8006fdc:	68eb      	ldr	r3, [r5, #12]
 8006fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe0:	7c2b      	ldrb	r3, [r5, #16]
 8006fe2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006fe4:	4aa0      	ldr	r2, [pc, #640]	@ (8007268 <loadMenuTexts+0x1240>)
 8006fe6:	4ba1      	ldr	r3, [pc, #644]	@ (800726c <loadMenuTexts+0x1244>)
 8006fe8:	4614      	mov	r4, r2
 8006fea:	461d      	mov	r5, r3
 8006fec:	6828      	ldr	r0, [r5, #0]
 8006fee:	6869      	ldr	r1, [r5, #4]
 8006ff0:	68aa      	ldr	r2, [r5, #8]
 8006ff2:	68eb      	ldr	r3, [r5, #12]
 8006ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ff6:	7c2b      	ldrb	r3, [r5, #16]
 8006ff8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006ffa:	4a9d      	ldr	r2, [pc, #628]	@ (8007270 <loadMenuTexts+0x1248>)
 8006ffc:	4b9d      	ldr	r3, [pc, #628]	@ (8007274 <loadMenuTexts+0x124c>)
 8006ffe:	4614      	mov	r4, r2
 8007000:	461d      	mov	r5, r3
 8007002:	6828      	ldr	r0, [r5, #0]
 8007004:	6869      	ldr	r1, [r5, #4]
 8007006:	68aa      	ldr	r2, [r5, #8]
 8007008:	68eb      	ldr	r3, [r5, #12]
 800700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800700c:	7c2b      	ldrb	r3, [r5, #16]
 800700e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8007010:	4a99      	ldr	r2, [pc, #612]	@ (8007278 <loadMenuTexts+0x1250>)
 8007012:	4b9a      	ldr	r3, [pc, #616]	@ (800727c <loadMenuTexts+0x1254>)
 8007014:	4614      	mov	r4, r2
 8007016:	461d      	mov	r5, r3
 8007018:	6828      	ldr	r0, [r5, #0]
 800701a:	6869      	ldr	r1, [r5, #4]
 800701c:	68aa      	ldr	r2, [r5, #8]
 800701e:	68eb      	ldr	r3, [r5, #12]
 8007020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007022:	7c2b      	ldrb	r3, [r5, #16]
 8007024:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8007026:	4a96      	ldr	r2, [pc, #600]	@ (8007280 <loadMenuTexts+0x1258>)
 8007028:	4b96      	ldr	r3, [pc, #600]	@ (8007284 <loadMenuTexts+0x125c>)
 800702a:	4614      	mov	r4, r2
 800702c:	461d      	mov	r5, r3
 800702e:	6828      	ldr	r0, [r5, #0]
 8007030:	6869      	ldr	r1, [r5, #4]
 8007032:	68aa      	ldr	r2, [r5, #8]
 8007034:	68eb      	ldr	r3, [r5, #12]
 8007036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007038:	7c2b      	ldrb	r3, [r5, #16]
 800703a:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 800703c:	4a92      	ldr	r2, [pc, #584]	@ (8007288 <loadMenuTexts+0x1260>)
 800703e:	4b93      	ldr	r3, [pc, #588]	@ (800728c <loadMenuTexts+0x1264>)
 8007040:	4614      	mov	r4, r2
 8007042:	461d      	mov	r5, r3
 8007044:	6828      	ldr	r0, [r5, #0]
 8007046:	6869      	ldr	r1, [r5, #4]
 8007048:	68aa      	ldr	r2, [r5, #8]
 800704a:	68eb      	ldr	r3, [r5, #12]
 800704c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800704e:	7c2b      	ldrb	r3, [r5, #16]
 8007050:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007052:	4a8f      	ldr	r2, [pc, #572]	@ (8007290 <loadMenuTexts+0x1268>)
 8007054:	4b8f      	ldr	r3, [pc, #572]	@ (8007294 <loadMenuTexts+0x126c>)
 8007056:	4614      	mov	r4, r2
 8007058:	461d      	mov	r5, r3
 800705a:	6828      	ldr	r0, [r5, #0]
 800705c:	6869      	ldr	r1, [r5, #4]
 800705e:	68aa      	ldr	r2, [r5, #8]
 8007060:	68eb      	ldr	r3, [r5, #12]
 8007062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007064:	7c2b      	ldrb	r3, [r5, #16]
 8007066:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007068:	4a8b      	ldr	r2, [pc, #556]	@ (8007298 <loadMenuTexts+0x1270>)
 800706a:	4b8c      	ldr	r3, [pc, #560]	@ (800729c <loadMenuTexts+0x1274>)
 800706c:	4614      	mov	r4, r2
 800706e:	461d      	mov	r5, r3
 8007070:	6828      	ldr	r0, [r5, #0]
 8007072:	6869      	ldr	r1, [r5, #4]
 8007074:	68aa      	ldr	r2, [r5, #8]
 8007076:	68eb      	ldr	r3, [r5, #12]
 8007078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800707a:	7c2b      	ldrb	r3, [r5, #16]
 800707c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 800707e:	4a88      	ldr	r2, [pc, #544]	@ (80072a0 <loadMenuTexts+0x1278>)
 8007080:	4b88      	ldr	r3, [pc, #544]	@ (80072a4 <loadMenuTexts+0x127c>)
 8007082:	4614      	mov	r4, r2
 8007084:	461d      	mov	r5, r3
 8007086:	6828      	ldr	r0, [r5, #0]
 8007088:	6869      	ldr	r1, [r5, #4]
 800708a:	68aa      	ldr	r2, [r5, #8]
 800708c:	68eb      	ldr	r3, [r5, #12]
 800708e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007090:	7c2b      	ldrb	r3, [r5, #16]
 8007092:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007094:	4a84      	ldr	r2, [pc, #528]	@ (80072a8 <loadMenuTexts+0x1280>)
 8007096:	4b85      	ldr	r3, [pc, #532]	@ (80072ac <loadMenuTexts+0x1284>)
 8007098:	4614      	mov	r4, r2
 800709a:	461d      	mov	r5, r3
 800709c:	6828      	ldr	r0, [r5, #0]
 800709e:	6869      	ldr	r1, [r5, #4]
 80070a0:	68aa      	ldr	r2, [r5, #8]
 80070a2:	68eb      	ldr	r3, [r5, #12]
 80070a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070a6:	7c2b      	ldrb	r3, [r5, #16]
 80070a8:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80070aa:	4a81      	ldr	r2, [pc, #516]	@ (80072b0 <loadMenuTexts+0x1288>)
 80070ac:	4b81      	ldr	r3, [pc, #516]	@ (80072b4 <loadMenuTexts+0x128c>)
 80070ae:	4614      	mov	r4, r2
 80070b0:	461d      	mov	r5, r3
 80070b2:	6828      	ldr	r0, [r5, #0]
 80070b4:	6869      	ldr	r1, [r5, #4]
 80070b6:	68aa      	ldr	r2, [r5, #8]
 80070b8:	68eb      	ldr	r3, [r5, #12]
 80070ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070bc:	7c2b      	ldrb	r3, [r5, #16]
 80070be:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 80070c0:	4a7d      	ldr	r2, [pc, #500]	@ (80072b8 <loadMenuTexts+0x1290>)
 80070c2:	4b7e      	ldr	r3, [pc, #504]	@ (80072bc <loadMenuTexts+0x1294>)
 80070c4:	4614      	mov	r4, r2
 80070c6:	461d      	mov	r5, r3
 80070c8:	6828      	ldr	r0, [r5, #0]
 80070ca:	6869      	ldr	r1, [r5, #4]
 80070cc:	68aa      	ldr	r2, [r5, #8]
 80070ce:	68eb      	ldr	r3, [r5, #12]
 80070d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070d2:	7c2b      	ldrb	r3, [r5, #16]
 80070d4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 80070d6:	4a7a      	ldr	r2, [pc, #488]	@ (80072c0 <loadMenuTexts+0x1298>)
 80070d8:	4b7a      	ldr	r3, [pc, #488]	@ (80072c4 <loadMenuTexts+0x129c>)
 80070da:	4614      	mov	r4, r2
 80070dc:	461d      	mov	r5, r3
 80070de:	6828      	ldr	r0, [r5, #0]
 80070e0:	6869      	ldr	r1, [r5, #4]
 80070e2:	68aa      	ldr	r2, [r5, #8]
 80070e4:	68eb      	ldr	r3, [r5, #12]
 80070e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e8:	7c2b      	ldrb	r3, [r5, #16]
 80070ea:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 80070ec:	4a76      	ldr	r2, [pc, #472]	@ (80072c8 <loadMenuTexts+0x12a0>)
 80070ee:	4b77      	ldr	r3, [pc, #476]	@ (80072cc <loadMenuTexts+0x12a4>)
 80070f0:	4614      	mov	r4, r2
 80070f2:	461d      	mov	r5, r3
 80070f4:	6828      	ldr	r0, [r5, #0]
 80070f6:	6869      	ldr	r1, [r5, #4]
 80070f8:	68aa      	ldr	r2, [r5, #8]
 80070fa:	68eb      	ldr	r3, [r5, #12]
 80070fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070fe:	7c2b      	ldrb	r3, [r5, #16]
 8007100:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007102:	4a73      	ldr	r2, [pc, #460]	@ (80072d0 <loadMenuTexts+0x12a8>)
 8007104:	4b73      	ldr	r3, [pc, #460]	@ (80072d4 <loadMenuTexts+0x12ac>)
 8007106:	4614      	mov	r4, r2
 8007108:	461d      	mov	r5, r3
 800710a:	6828      	ldr	r0, [r5, #0]
 800710c:	6869      	ldr	r1, [r5, #4]
 800710e:	68aa      	ldr	r2, [r5, #8]
 8007110:	68eb      	ldr	r3, [r5, #12]
 8007112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007114:	7c2b      	ldrb	r3, [r5, #16]
 8007116:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8007118:	4a6f      	ldr	r2, [pc, #444]	@ (80072d8 <loadMenuTexts+0x12b0>)
 800711a:	4b70      	ldr	r3, [pc, #448]	@ (80072dc <loadMenuTexts+0x12b4>)
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	6828      	ldr	r0, [r5, #0]
 8007122:	6869      	ldr	r1, [r5, #4]
 8007124:	68aa      	ldr	r2, [r5, #8]
 8007126:	68eb      	ldr	r3, [r5, #12]
 8007128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800712a:	7c2b      	ldrb	r3, [r5, #16]
 800712c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 800712e:	4a6c      	ldr	r2, [pc, #432]	@ (80072e0 <loadMenuTexts+0x12b8>)
 8007130:	4b6c      	ldr	r3, [pc, #432]	@ (80072e4 <loadMenuTexts+0x12bc>)
 8007132:	4614      	mov	r4, r2
 8007134:	461d      	mov	r5, r3
 8007136:	6828      	ldr	r0, [r5, #0]
 8007138:	6869      	ldr	r1, [r5, #4]
 800713a:	68aa      	ldr	r2, [r5, #8]
 800713c:	68eb      	ldr	r3, [r5, #12]
 800713e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007140:	7c2b      	ldrb	r3, [r5, #16]
 8007142:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007144:	4a68      	ldr	r2, [pc, #416]	@ (80072e8 <loadMenuTexts+0x12c0>)
 8007146:	4b69      	ldr	r3, [pc, #420]	@ (80072ec <loadMenuTexts+0x12c4>)
 8007148:	4614      	mov	r4, r2
 800714a:	461d      	mov	r5, r3
 800714c:	6828      	ldr	r0, [r5, #0]
 800714e:	6869      	ldr	r1, [r5, #4]
 8007150:	68aa      	ldr	r2, [r5, #8]
 8007152:	68eb      	ldr	r3, [r5, #12]
 8007154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007156:	7c2b      	ldrb	r3, [r5, #16]
 8007158:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800715a:	4a65      	ldr	r2, [pc, #404]	@ (80072f0 <loadMenuTexts+0x12c8>)
 800715c:	4b65      	ldr	r3, [pc, #404]	@ (80072f4 <loadMenuTexts+0x12cc>)
 800715e:	4614      	mov	r4, r2
 8007160:	461d      	mov	r5, r3
 8007162:	6828      	ldr	r0, [r5, #0]
 8007164:	6869      	ldr	r1, [r5, #4]
 8007166:	68aa      	ldr	r2, [r5, #8]
 8007168:	68eb      	ldr	r3, [r5, #12]
 800716a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800716c:	7c2b      	ldrb	r3, [r5, #16]
 800716e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007170:	4a61      	ldr	r2, [pc, #388]	@ (80072f8 <loadMenuTexts+0x12d0>)
 8007172:	4b62      	ldr	r3, [pc, #392]	@ (80072fc <loadMenuTexts+0x12d4>)
 8007174:	4614      	mov	r4, r2
 8007176:	461d      	mov	r5, r3
 8007178:	6828      	ldr	r0, [r5, #0]
 800717a:	6869      	ldr	r1, [r5, #4]
 800717c:	68aa      	ldr	r2, [r5, #8]
 800717e:	68eb      	ldr	r3, [r5, #12]
 8007180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007182:	7c2b      	ldrb	r3, [r5, #16]
 8007184:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007186:	4a5e      	ldr	r2, [pc, #376]	@ (8007300 <loadMenuTexts+0x12d8>)
 8007188:	4b5e      	ldr	r3, [pc, #376]	@ (8007304 <loadMenuTexts+0x12dc>)
 800718a:	4614      	mov	r4, r2
 800718c:	461d      	mov	r5, r3
 800718e:	6828      	ldr	r0, [r5, #0]
 8007190:	6869      	ldr	r1, [r5, #4]
 8007192:	68aa      	ldr	r2, [r5, #8]
 8007194:	68eb      	ldr	r3, [r5, #12]
 8007196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007198:	7c2b      	ldrb	r3, [r5, #16]
 800719a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 800719c:	4a5a      	ldr	r2, [pc, #360]	@ (8007308 <loadMenuTexts+0x12e0>)
 800719e:	4b5b      	ldr	r3, [pc, #364]	@ (800730c <loadMenuTexts+0x12e4>)
 80071a0:	4614      	mov	r4, r2
 80071a2:	461d      	mov	r5, r3
 80071a4:	6828      	ldr	r0, [r5, #0]
 80071a6:	6869      	ldr	r1, [r5, #4]
 80071a8:	68aa      	ldr	r2, [r5, #8]
 80071aa:	68eb      	ldr	r3, [r5, #12]
 80071ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ae:	7c2b      	ldrb	r3, [r5, #16]
 80071b0:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80071b2:	4a57      	ldr	r2, [pc, #348]	@ (8007310 <loadMenuTexts+0x12e8>)
 80071b4:	4b57      	ldr	r3, [pc, #348]	@ (8007314 <loadMenuTexts+0x12ec>)
 80071b6:	4614      	mov	r4, r2
 80071b8:	461d      	mov	r5, r3
 80071ba:	6828      	ldr	r0, [r5, #0]
 80071bc:	6869      	ldr	r1, [r5, #4]
 80071be:	68aa      	ldr	r2, [r5, #8]
 80071c0:	68eb      	ldr	r3, [r5, #12]
 80071c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071c4:	7c2b      	ldrb	r3, [r5, #16]
 80071c6:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80071c8:	4a53      	ldr	r2, [pc, #332]	@ (8007318 <loadMenuTexts+0x12f0>)
 80071ca:	4b54      	ldr	r3, [pc, #336]	@ (800731c <loadMenuTexts+0x12f4>)
 80071cc:	4614      	mov	r4, r2
 80071ce:	461d      	mov	r5, r3
 80071d0:	6828      	ldr	r0, [r5, #0]
 80071d2:	6869      	ldr	r1, [r5, #4]
 80071d4:	68aa      	ldr	r2, [r5, #8]
 80071d6:	68eb      	ldr	r3, [r5, #12]
 80071d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071da:	7c2b      	ldrb	r3, [r5, #16]
 80071dc:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80071de:	4a50      	ldr	r2, [pc, #320]	@ (8007320 <loadMenuTexts+0x12f8>)
 80071e0:	4b50      	ldr	r3, [pc, #320]	@ (8007324 <loadMenuTexts+0x12fc>)
 80071e2:	4614      	mov	r4, r2
 80071e4:	461d      	mov	r5, r3
 80071e6:	6828      	ldr	r0, [r5, #0]
 80071e8:	6869      	ldr	r1, [r5, #4]
 80071ea:	68aa      	ldr	r2, [r5, #8]
 80071ec:	68eb      	ldr	r3, [r5, #12]
 80071ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071f0:	7c2b      	ldrb	r3, [r5, #16]
 80071f2:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80071f4:	4a4c      	ldr	r2, [pc, #304]	@ (8007328 <loadMenuTexts+0x1300>)
 80071f6:	4b4d      	ldr	r3, [pc, #308]	@ (800732c <loadMenuTexts+0x1304>)
 80071f8:	4614      	mov	r4, r2
 80071fa:	461d      	mov	r5, r3
 80071fc:	6828      	ldr	r0, [r5, #0]
 80071fe:	6869      	ldr	r1, [r5, #4]
 8007200:	68aa      	ldr	r2, [r5, #8]
 8007202:	68eb      	ldr	r3, [r5, #12]
 8007204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007206:	7c2b      	ldrb	r3, [r5, #16]
 8007208:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800720a:	4a49      	ldr	r2, [pc, #292]	@ (8007330 <loadMenuTexts+0x1308>)
 800720c:	4b49      	ldr	r3, [pc, #292]	@ (8007334 <loadMenuTexts+0x130c>)
 800720e:	4614      	mov	r4, r2
 8007210:	461d      	mov	r5, r3
 8007212:	e091      	b.n	8007338 <loadMenuTexts+0x1310>
 8007214:	200009d8 	.word	0x200009d8
 8007218:	20001508 	.word	0x20001508
 800721c:	200009ec 	.word	0x200009ec
 8007220:	2000151c 	.word	0x2000151c
 8007224:	20000a00 	.word	0x20000a00
 8007228:	20001530 	.word	0x20001530
 800722c:	20000a14 	.word	0x20000a14
 8007230:	20001544 	.word	0x20001544
 8007234:	20000a28 	.word	0x20000a28
 8007238:	20001558 	.word	0x20001558
 800723c:	20000a3c 	.word	0x20000a3c
 8007240:	2000156c 	.word	0x2000156c
 8007244:	20000a50 	.word	0x20000a50
 8007248:	20001580 	.word	0x20001580
 800724c:	20000a64 	.word	0x20000a64
 8007250:	20001594 	.word	0x20001594
 8007254:	20000a78 	.word	0x20000a78
 8007258:	200015a8 	.word	0x200015a8
 800725c:	20000a8c 	.word	0x20000a8c
 8007260:	200015bc 	.word	0x200015bc
 8007264:	20000aa0 	.word	0x20000aa0
 8007268:	200015d0 	.word	0x200015d0
 800726c:	20000ab4 	.word	0x20000ab4
 8007270:	200015e4 	.word	0x200015e4
 8007274:	20000ac8 	.word	0x20000ac8
 8007278:	200015f8 	.word	0x200015f8
 800727c:	20000adc 	.word	0x20000adc
 8007280:	2000160c 	.word	0x2000160c
 8007284:	20000af0 	.word	0x20000af0
 8007288:	20001620 	.word	0x20001620
 800728c:	20000b04 	.word	0x20000b04
 8007290:	20001634 	.word	0x20001634
 8007294:	20000b18 	.word	0x20000b18
 8007298:	20001648 	.word	0x20001648
 800729c:	20000b2c 	.word	0x20000b2c
 80072a0:	2000165c 	.word	0x2000165c
 80072a4:	20000b40 	.word	0x20000b40
 80072a8:	20001670 	.word	0x20001670
 80072ac:	20000b54 	.word	0x20000b54
 80072b0:	20001684 	.word	0x20001684
 80072b4:	20000b68 	.word	0x20000b68
 80072b8:	20001698 	.word	0x20001698
 80072bc:	20000b7c 	.word	0x20000b7c
 80072c0:	200016ac 	.word	0x200016ac
 80072c4:	20000b90 	.word	0x20000b90
 80072c8:	200016c0 	.word	0x200016c0
 80072cc:	20000ba4 	.word	0x20000ba4
 80072d0:	200016d4 	.word	0x200016d4
 80072d4:	20000bb8 	.word	0x20000bb8
 80072d8:	200016e8 	.word	0x200016e8
 80072dc:	20000bcc 	.word	0x20000bcc
 80072e0:	200016fc 	.word	0x200016fc
 80072e4:	20000be0 	.word	0x20000be0
 80072e8:	20001710 	.word	0x20001710
 80072ec:	20000bf4 	.word	0x20000bf4
 80072f0:	20001724 	.word	0x20001724
 80072f4:	20000c08 	.word	0x20000c08
 80072f8:	20001738 	.word	0x20001738
 80072fc:	20000c1c 	.word	0x20000c1c
 8007300:	2000174c 	.word	0x2000174c
 8007304:	20000c30 	.word	0x20000c30
 8007308:	20001760 	.word	0x20001760
 800730c:	20000c44 	.word	0x20000c44
 8007310:	20001774 	.word	0x20001774
 8007314:	20000c58 	.word	0x20000c58
 8007318:	20001788 	.word	0x20001788
 800731c:	20000c6c 	.word	0x20000c6c
 8007320:	2000179c 	.word	0x2000179c
 8007324:	20000cf8 	.word	0x20000cf8
 8007328:	200017b0 	.word	0x200017b0
 800732c:	20000d0c 	.word	0x20000d0c
 8007330:	200017c4 	.word	0x200017c4
 8007334:	20000cd0 	.word	0x20000cd0
 8007338:	6828      	ldr	r0, [r5, #0]
 800733a:	6869      	ldr	r1, [r5, #4]
 800733c:	68aa      	ldr	r2, [r5, #8]
 800733e:	68eb      	ldr	r3, [r5, #12]
 8007340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007342:	7c2b      	ldrb	r3, [r5, #16]
 8007344:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8007346:	4a5b      	ldr	r2, [pc, #364]	@ (80074b4 <loadMenuTexts+0x148c>)
 8007348:	4b5b      	ldr	r3, [pc, #364]	@ (80074b8 <loadMenuTexts+0x1490>)
 800734a:	4614      	mov	r4, r2
 800734c:	461d      	mov	r5, r3
 800734e:	6828      	ldr	r0, [r5, #0]
 8007350:	6869      	ldr	r1, [r5, #4]
 8007352:	68aa      	ldr	r2, [r5, #8]
 8007354:	68eb      	ldr	r3, [r5, #12]
 8007356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007358:	7c2b      	ldrb	r3, [r5, #16]
 800735a:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 800735c:	4a57      	ldr	r2, [pc, #348]	@ (80074bc <loadMenuTexts+0x1494>)
 800735e:	4b58      	ldr	r3, [pc, #352]	@ (80074c0 <loadMenuTexts+0x1498>)
 8007360:	4614      	mov	r4, r2
 8007362:	461d      	mov	r5, r3
 8007364:	6828      	ldr	r0, [r5, #0]
 8007366:	6869      	ldr	r1, [r5, #4]
 8007368:	68aa      	ldr	r2, [r5, #8]
 800736a:	68eb      	ldr	r3, [r5, #12]
 800736c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800736e:	7c2b      	ldrb	r3, [r5, #16]
 8007370:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007372:	4a54      	ldr	r2, [pc, #336]	@ (80074c4 <loadMenuTexts+0x149c>)
 8007374:	4b54      	ldr	r3, [pc, #336]	@ (80074c8 <loadMenuTexts+0x14a0>)
 8007376:	4614      	mov	r4, r2
 8007378:	461d      	mov	r5, r3
 800737a:	6828      	ldr	r0, [r5, #0]
 800737c:	6869      	ldr	r1, [r5, #4]
 800737e:	68aa      	ldr	r2, [r5, #8]
 8007380:	68eb      	ldr	r3, [r5, #12]
 8007382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007384:	7c2b      	ldrb	r3, [r5, #16]
 8007386:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007388:	4a50      	ldr	r2, [pc, #320]	@ (80074cc <loadMenuTexts+0x14a4>)
 800738a:	4b51      	ldr	r3, [pc, #324]	@ (80074d0 <loadMenuTexts+0x14a8>)
 800738c:	4614      	mov	r4, r2
 800738e:	461d      	mov	r5, r3
 8007390:	6828      	ldr	r0, [r5, #0]
 8007392:	6869      	ldr	r1, [r5, #4]
 8007394:	68aa      	ldr	r2, [r5, #8]
 8007396:	68eb      	ldr	r3, [r5, #12]
 8007398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800739a:	7c2b      	ldrb	r3, [r5, #16]
 800739c:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800739e:	4a4d      	ldr	r2, [pc, #308]	@ (80074d4 <loadMenuTexts+0x14ac>)
 80073a0:	4b4d      	ldr	r3, [pc, #308]	@ (80074d8 <loadMenuTexts+0x14b0>)
 80073a2:	4614      	mov	r4, r2
 80073a4:	461d      	mov	r5, r3
 80073a6:	6828      	ldr	r0, [r5, #0]
 80073a8:	6869      	ldr	r1, [r5, #4]
 80073aa:	68aa      	ldr	r2, [r5, #8]
 80073ac:	68eb      	ldr	r3, [r5, #12]
 80073ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b0:	7c2b      	ldrb	r3, [r5, #16]
 80073b2:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80073b4:	4a49      	ldr	r2, [pc, #292]	@ (80074dc <loadMenuTexts+0x14b4>)
 80073b6:	4b4a      	ldr	r3, [pc, #296]	@ (80074e0 <loadMenuTexts+0x14b8>)
 80073b8:	4614      	mov	r4, r2
 80073ba:	461d      	mov	r5, r3
 80073bc:	6828      	ldr	r0, [r5, #0]
 80073be:	6869      	ldr	r1, [r5, #4]
 80073c0:	68aa      	ldr	r2, [r5, #8]
 80073c2:	68eb      	ldr	r3, [r5, #12]
 80073c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073c6:	7c2b      	ldrb	r3, [r5, #16]
 80073c8:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80073ca:	4a46      	ldr	r2, [pc, #280]	@ (80074e4 <loadMenuTexts+0x14bc>)
 80073cc:	4b46      	ldr	r3, [pc, #280]	@ (80074e8 <loadMenuTexts+0x14c0>)
 80073ce:	4614      	mov	r4, r2
 80073d0:	461d      	mov	r5, r3
 80073d2:	6828      	ldr	r0, [r5, #0]
 80073d4:	6869      	ldr	r1, [r5, #4]
 80073d6:	68aa      	ldr	r2, [r5, #8]
 80073d8:	68eb      	ldr	r3, [r5, #12]
 80073da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073dc:	7c2b      	ldrb	r3, [r5, #16]
 80073de:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80073e0:	4a42      	ldr	r2, [pc, #264]	@ (80074ec <loadMenuTexts+0x14c4>)
 80073e2:	4b43      	ldr	r3, [pc, #268]	@ (80074f0 <loadMenuTexts+0x14c8>)
 80073e4:	4614      	mov	r4, r2
 80073e6:	461d      	mov	r5, r3
 80073e8:	6828      	ldr	r0, [r5, #0]
 80073ea:	6869      	ldr	r1, [r5, #4]
 80073ec:	68aa      	ldr	r2, [r5, #8]
 80073ee:	68eb      	ldr	r3, [r5, #12]
 80073f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f2:	7c2b      	ldrb	r3, [r5, #16]
 80073f4:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80073f6:	4a3f      	ldr	r2, [pc, #252]	@ (80074f4 <loadMenuTexts+0x14cc>)
 80073f8:	4b3f      	ldr	r3, [pc, #252]	@ (80074f8 <loadMenuTexts+0x14d0>)
 80073fa:	4614      	mov	r4, r2
 80073fc:	461d      	mov	r5, r3
 80073fe:	6828      	ldr	r0, [r5, #0]
 8007400:	6869      	ldr	r1, [r5, #4]
 8007402:	68aa      	ldr	r2, [r5, #8]
 8007404:	68eb      	ldr	r3, [r5, #12]
 8007406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007408:	7c2b      	ldrb	r3, [r5, #16]
 800740a:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 800740c:	4a3b      	ldr	r2, [pc, #236]	@ (80074fc <loadMenuTexts+0x14d4>)
 800740e:	4b3c      	ldr	r3, [pc, #240]	@ (8007500 <loadMenuTexts+0x14d8>)
 8007410:	4614      	mov	r4, r2
 8007412:	461d      	mov	r5, r3
 8007414:	6828      	ldr	r0, [r5, #0]
 8007416:	6869      	ldr	r1, [r5, #4]
 8007418:	68aa      	ldr	r2, [r5, #8]
 800741a:	68eb      	ldr	r3, [r5, #12]
 800741c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800741e:	7c2b      	ldrb	r3, [r5, #16]
 8007420:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007422:	4a38      	ldr	r2, [pc, #224]	@ (8007504 <loadMenuTexts+0x14dc>)
 8007424:	4b38      	ldr	r3, [pc, #224]	@ (8007508 <loadMenuTexts+0x14e0>)
 8007426:	4614      	mov	r4, r2
 8007428:	461d      	mov	r5, r3
 800742a:	6828      	ldr	r0, [r5, #0]
 800742c:	6869      	ldr	r1, [r5, #4]
 800742e:	68aa      	ldr	r2, [r5, #8]
 8007430:	68eb      	ldr	r3, [r5, #12]
 8007432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007434:	7c2b      	ldrb	r3, [r5, #16]
 8007436:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8007438:	4a34      	ldr	r2, [pc, #208]	@ (800750c <loadMenuTexts+0x14e4>)
 800743a:	4b35      	ldr	r3, [pc, #212]	@ (8007510 <loadMenuTexts+0x14e8>)
 800743c:	4614      	mov	r4, r2
 800743e:	461d      	mov	r5, r3
 8007440:	6828      	ldr	r0, [r5, #0]
 8007442:	6869      	ldr	r1, [r5, #4]
 8007444:	68aa      	ldr	r2, [r5, #8]
 8007446:	68eb      	ldr	r3, [r5, #12]
 8007448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800744a:	7c2b      	ldrb	r3, [r5, #16]
 800744c:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 800744e:	4a31      	ldr	r2, [pc, #196]	@ (8007514 <loadMenuTexts+0x14ec>)
 8007450:	4b31      	ldr	r3, [pc, #196]	@ (8007518 <loadMenuTexts+0x14f0>)
 8007452:	4614      	mov	r4, r2
 8007454:	461d      	mov	r5, r3
 8007456:	6828      	ldr	r0, [r5, #0]
 8007458:	6869      	ldr	r1, [r5, #4]
 800745a:	68aa      	ldr	r2, [r5, #8]
 800745c:	68eb      	ldr	r3, [r5, #12]
 800745e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007460:	7c2b      	ldrb	r3, [r5, #16]
 8007462:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007464:	4a2d      	ldr	r2, [pc, #180]	@ (800751c <loadMenuTexts+0x14f4>)
 8007466:	4b2e      	ldr	r3, [pc, #184]	@ (8007520 <loadMenuTexts+0x14f8>)
 8007468:	4614      	mov	r4, r2
 800746a:	461d      	mov	r5, r3
 800746c:	6828      	ldr	r0, [r5, #0]
 800746e:	6869      	ldr	r1, [r5, #4]
 8007470:	68aa      	ldr	r2, [r5, #8]
 8007472:	68eb      	ldr	r3, [r5, #12]
 8007474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007476:	7c2b      	ldrb	r3, [r5, #16]
 8007478:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800747a:	4a2a      	ldr	r2, [pc, #168]	@ (8007524 <loadMenuTexts+0x14fc>)
 800747c:	4b2a      	ldr	r3, [pc, #168]	@ (8007528 <loadMenuTexts+0x1500>)
 800747e:	4614      	mov	r4, r2
 8007480:	461d      	mov	r5, r3
 8007482:	6828      	ldr	r0, [r5, #0]
 8007484:	6869      	ldr	r1, [r5, #4]
 8007486:	68aa      	ldr	r2, [r5, #8]
 8007488:	68eb      	ldr	r3, [r5, #12]
 800748a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800748c:	7c2b      	ldrb	r3, [r5, #16]
 800748e:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8007490:	4a26      	ldr	r2, [pc, #152]	@ (800752c <loadMenuTexts+0x1504>)
 8007492:	4b27      	ldr	r3, [pc, #156]	@ (8007530 <loadMenuTexts+0x1508>)
 8007494:	4614      	mov	r4, r2
 8007496:	461d      	mov	r5, r3
 8007498:	6828      	ldr	r0, [r5, #0]
 800749a:	6869      	ldr	r1, [r5, #4]
 800749c:	68aa      	ldr	r2, [r5, #8]
 800749e:	68eb      	ldr	r3, [r5, #12]
 80074a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074a2:	7c2b      	ldrb	r3, [r5, #16]
 80074a4:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80074a6:	f000 f845 	bl	8007534 <menuVariableFinisher>
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bdb0      	pop	{r4, r5, r7, pc}
 80074b2:	bf00      	nop
 80074b4:	200017d8 	.word	0x200017d8
 80074b8:	20000ce4 	.word	0x20000ce4
 80074bc:	200017ec 	.word	0x200017ec
 80074c0:	20000d48 	.word	0x20000d48
 80074c4:	20001800 	.word	0x20001800
 80074c8:	20000d5c 	.word	0x20000d5c
 80074cc:	20001814 	.word	0x20001814
 80074d0:	20000d98 	.word	0x20000d98
 80074d4:	20001828 	.word	0x20001828
 80074d8:	20000dac 	.word	0x20000dac
 80074dc:	2000183c 	.word	0x2000183c
 80074e0:	20000de8 	.word	0x20000de8
 80074e4:	20001850 	.word	0x20001850
 80074e8:	20000dfc 	.word	0x20000dfc
 80074ec:	20001864 	.word	0x20001864
 80074f0:	20000e24 	.word	0x20000e24
 80074f4:	20001878 	.word	0x20001878
 80074f8:	20000e4c 	.word	0x20000e4c
 80074fc:	2000188c 	.word	0x2000188c
 8007500:	20000e74 	.word	0x20000e74
 8007504:	200018a0 	.word	0x200018a0
 8007508:	20000e9c 	.word	0x20000e9c
 800750c:	200018b4 	.word	0x200018b4
 8007510:	20000ec4 	.word	0x20000ec4
 8007514:	200018c8 	.word	0x200018c8
 8007518:	20000eec 	.word	0x20000eec
 800751c:	200018dc 	.word	0x200018dc
 8007520:	20000f14 	.word	0x20000f14
 8007524:	200018f0 	.word	0x200018f0
 8007528:	20000f3c 	.word	0x20000f3c
 800752c:	20001904 	.word	0x20001904
 8007530:	20000f64 	.word	0x20000f64

08007534 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007538:	4b99      	ldr	r3, [pc, #612]	@ (80077a0 <menuVariableFinisher+0x26c>)
 800753a:	2200      	movs	r2, #0
 800753c:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 800753e:	4b99      	ldr	r3, [pc, #612]	@ (80077a4 <menuVariableFinisher+0x270>)
 8007540:	2200      	movs	r2, #0
 8007542:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007544:	4b98      	ldr	r3, [pc, #608]	@ (80077a8 <menuVariableFinisher+0x274>)
 8007546:	2200      	movs	r2, #0
 8007548:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800754a:	4b98      	ldr	r3, [pc, #608]	@ (80077ac <menuVariableFinisher+0x278>)
 800754c:	2200      	movs	r2, #0
 800754e:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007550:	4b97      	ldr	r3, [pc, #604]	@ (80077b0 <menuVariableFinisher+0x27c>)
 8007552:	2200      	movs	r2, #0
 8007554:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8007556:	4b97      	ldr	r3, [pc, #604]	@ (80077b4 <menuVariableFinisher+0x280>)
 8007558:	2200      	movs	r2, #0
 800755a:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 800755c:	4b96      	ldr	r3, [pc, #600]	@ (80077b8 <menuVariableFinisher+0x284>)
 800755e:	2200      	movs	r2, #0
 8007560:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007562:	4b96      	ldr	r3, [pc, #600]	@ (80077bc <menuVariableFinisher+0x288>)
 8007564:	2200      	movs	r2, #0
 8007566:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007568:	4b95      	ldr	r3, [pc, #596]	@ (80077c0 <menuVariableFinisher+0x28c>)
 800756a:	2200      	movs	r2, #0
 800756c:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800756e:	4b95      	ldr	r3, [pc, #596]	@ (80077c4 <menuVariableFinisher+0x290>)
 8007570:	2200      	movs	r2, #0
 8007572:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007574:	4b94      	ldr	r3, [pc, #592]	@ (80077c8 <menuVariableFinisher+0x294>)
 8007576:	2200      	movs	r2, #0
 8007578:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800757a:	4b94      	ldr	r3, [pc, #592]	@ (80077cc <menuVariableFinisher+0x298>)
 800757c:	2200      	movs	r2, #0
 800757e:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007580:	4b93      	ldr	r3, [pc, #588]	@ (80077d0 <menuVariableFinisher+0x29c>)
 8007582:	2200      	movs	r2, #0
 8007584:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007586:	4b93      	ldr	r3, [pc, #588]	@ (80077d4 <menuVariableFinisher+0x2a0>)
 8007588:	2200      	movs	r2, #0
 800758a:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 800758c:	4b92      	ldr	r3, [pc, #584]	@ (80077d8 <menuVariableFinisher+0x2a4>)
 800758e:	2200      	movs	r2, #0
 8007590:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007592:	4b92      	ldr	r3, [pc, #584]	@ (80077dc <menuVariableFinisher+0x2a8>)
 8007594:	2200      	movs	r2, #0
 8007596:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007598:	4b91      	ldr	r3, [pc, #580]	@ (80077e0 <menuVariableFinisher+0x2ac>)
 800759a:	2200      	movs	r2, #0
 800759c:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800759e:	4b91      	ldr	r3, [pc, #580]	@ (80077e4 <menuVariableFinisher+0x2b0>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80075a4:	4b90      	ldr	r3, [pc, #576]	@ (80077e8 <menuVariableFinisher+0x2b4>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80075aa:	4b90      	ldr	r3, [pc, #576]	@ (80077ec <menuVariableFinisher+0x2b8>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80075b0:	4b8f      	ldr	r3, [pc, #572]	@ (80077f0 <menuVariableFinisher+0x2bc>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80075b6:	4b8f      	ldr	r3, [pc, #572]	@ (80077f4 <menuVariableFinisher+0x2c0>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80075bc:	4b8e      	ldr	r3, [pc, #568]	@ (80077f8 <menuVariableFinisher+0x2c4>)
 80075be:	2200      	movs	r2, #0
 80075c0:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80075c2:	4b8e      	ldr	r3, [pc, #568]	@ (80077fc <menuVariableFinisher+0x2c8>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80075c8:	4b8d      	ldr	r3, [pc, #564]	@ (8007800 <menuVariableFinisher+0x2cc>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 80075ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007804 <menuVariableFinisher+0x2d0>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80075d4:	4b8c      	ldr	r3, [pc, #560]	@ (8007808 <menuVariableFinisher+0x2d4>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80075da:	4b8c      	ldr	r3, [pc, #560]	@ (800780c <menuVariableFinisher+0x2d8>)
 80075dc:	2200      	movs	r2, #0
 80075de:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80075e0:	4b8b      	ldr	r3, [pc, #556]	@ (8007810 <menuVariableFinisher+0x2dc>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80075e6:	4b8b      	ldr	r3, [pc, #556]	@ (8007814 <menuVariableFinisher+0x2e0>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80075ec:	4b8a      	ldr	r3, [pc, #552]	@ (8007818 <menuVariableFinisher+0x2e4>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80075f2:	4b8a      	ldr	r3, [pc, #552]	@ (800781c <menuVariableFinisher+0x2e8>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80075f8:	4b89      	ldr	r3, [pc, #548]	@ (8007820 <menuVariableFinisher+0x2ec>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80075fe:	4b89      	ldr	r3, [pc, #548]	@ (8007824 <menuVariableFinisher+0x2f0>)
 8007600:	2200      	movs	r2, #0
 8007602:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007604:	4b88      	ldr	r3, [pc, #544]	@ (8007828 <menuVariableFinisher+0x2f4>)
 8007606:	2200      	movs	r2, #0
 8007608:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 800760a:	4b88      	ldr	r3, [pc, #544]	@ (800782c <menuVariableFinisher+0x2f8>)
 800760c:	2200      	movs	r2, #0
 800760e:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007610:	4b87      	ldr	r3, [pc, #540]	@ (8007830 <menuVariableFinisher+0x2fc>)
 8007612:	2200      	movs	r2, #0
 8007614:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8007616:	4b87      	ldr	r3, [pc, #540]	@ (8007834 <menuVariableFinisher+0x300>)
 8007618:	2200      	movs	r2, #0
 800761a:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 800761c:	4b86      	ldr	r3, [pc, #536]	@ (8007838 <menuVariableFinisher+0x304>)
 800761e:	2200      	movs	r2, #0
 8007620:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007622:	4b86      	ldr	r3, [pc, #536]	@ (800783c <menuVariableFinisher+0x308>)
 8007624:	2200      	movs	r2, #0
 8007626:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8007628:	4b85      	ldr	r3, [pc, #532]	@ (8007840 <menuVariableFinisher+0x30c>)
 800762a:	2200      	movs	r2, #0
 800762c:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 800762e:	4b85      	ldr	r3, [pc, #532]	@ (8007844 <menuVariableFinisher+0x310>)
 8007630:	2200      	movs	r2, #0
 8007632:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007634:	4b84      	ldr	r3, [pc, #528]	@ (8007848 <menuVariableFinisher+0x314>)
 8007636:	2200      	movs	r2, #0
 8007638:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800763a:	4b84      	ldr	r3, [pc, #528]	@ (800784c <menuVariableFinisher+0x318>)
 800763c:	2200      	movs	r2, #0
 800763e:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007640:	4b83      	ldr	r3, [pc, #524]	@ (8007850 <menuVariableFinisher+0x31c>)
 8007642:	2200      	movs	r2, #0
 8007644:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8007646:	4b83      	ldr	r3, [pc, #524]	@ (8007854 <menuVariableFinisher+0x320>)
 8007648:	2200      	movs	r2, #0
 800764a:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 800764c:	4b82      	ldr	r3, [pc, #520]	@ (8007858 <menuVariableFinisher+0x324>)
 800764e:	2200      	movs	r2, #0
 8007650:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007652:	4b82      	ldr	r3, [pc, #520]	@ (800785c <menuVariableFinisher+0x328>)
 8007654:	2200      	movs	r2, #0
 8007656:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007658:	4b81      	ldr	r3, [pc, #516]	@ (8007860 <menuVariableFinisher+0x32c>)
 800765a:	2200      	movs	r2, #0
 800765c:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 800765e:	4b81      	ldr	r3, [pc, #516]	@ (8007864 <menuVariableFinisher+0x330>)
 8007660:	2200      	movs	r2, #0
 8007662:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007664:	4b80      	ldr	r3, [pc, #512]	@ (8007868 <menuVariableFinisher+0x334>)
 8007666:	2200      	movs	r2, #0
 8007668:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800766a:	4b80      	ldr	r3, [pc, #512]	@ (800786c <menuVariableFinisher+0x338>)
 800766c:	2200      	movs	r2, #0
 800766e:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007670:	4b7f      	ldr	r3, [pc, #508]	@ (8007870 <menuVariableFinisher+0x33c>)
 8007672:	2200      	movs	r2, #0
 8007674:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007676:	4b7f      	ldr	r3, [pc, #508]	@ (8007874 <menuVariableFinisher+0x340>)
 8007678:	2200      	movs	r2, #0
 800767a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 800767c:	4b7e      	ldr	r3, [pc, #504]	@ (8007878 <menuVariableFinisher+0x344>)
 800767e:	2200      	movs	r2, #0
 8007680:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007682:	4b7e      	ldr	r3, [pc, #504]	@ (800787c <menuVariableFinisher+0x348>)
 8007684:	2200      	movs	r2, #0
 8007686:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007688:	4b7d      	ldr	r3, [pc, #500]	@ (8007880 <menuVariableFinisher+0x34c>)
 800768a:	2200      	movs	r2, #0
 800768c:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800768e:	4b7d      	ldr	r3, [pc, #500]	@ (8007884 <menuVariableFinisher+0x350>)
 8007690:	2200      	movs	r2, #0
 8007692:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007694:	4b7c      	ldr	r3, [pc, #496]	@ (8007888 <menuVariableFinisher+0x354>)
 8007696:	2200      	movs	r2, #0
 8007698:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800769a:	4b7c      	ldr	r3, [pc, #496]	@ (800788c <menuVariableFinisher+0x358>)
 800769c:	2200      	movs	r2, #0
 800769e:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80076a0:	4b7b      	ldr	r3, [pc, #492]	@ (8007890 <menuVariableFinisher+0x35c>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80076a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007894 <menuVariableFinisher+0x360>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80076ac:	4b7a      	ldr	r3, [pc, #488]	@ (8007898 <menuVariableFinisher+0x364>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80076b2:	4b7a      	ldr	r3, [pc, #488]	@ (800789c <menuVariableFinisher+0x368>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80076b8:	4b79      	ldr	r3, [pc, #484]	@ (80078a0 <menuVariableFinisher+0x36c>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80076be:	4b79      	ldr	r3, [pc, #484]	@ (80078a4 <menuVariableFinisher+0x370>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80076c4:	4b78      	ldr	r3, [pc, #480]	@ (80078a8 <menuVariableFinisher+0x374>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80076ca:	4b78      	ldr	r3, [pc, #480]	@ (80078ac <menuVariableFinisher+0x378>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80076d0:	4b77      	ldr	r3, [pc, #476]	@ (80078b0 <menuVariableFinisher+0x37c>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80076d6:	4b77      	ldr	r3, [pc, #476]	@ (80078b4 <menuVariableFinisher+0x380>)
 80076d8:	2200      	movs	r2, #0
 80076da:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80076dc:	4b76      	ldr	r3, [pc, #472]	@ (80078b8 <menuVariableFinisher+0x384>)
 80076de:	2200      	movs	r2, #0
 80076e0:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80076e2:	4b76      	ldr	r3, [pc, #472]	@ (80078bc <menuVariableFinisher+0x388>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80076e8:	4b75      	ldr	r3, [pc, #468]	@ (80078c0 <menuVariableFinisher+0x38c>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80076ee:	4b75      	ldr	r3, [pc, #468]	@ (80078c4 <menuVariableFinisher+0x390>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80076f4:	4b74      	ldr	r3, [pc, #464]	@ (80078c8 <menuVariableFinisher+0x394>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80076fa:	4b74      	ldr	r3, [pc, #464]	@ (80078cc <menuVariableFinisher+0x398>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007700:	4b73      	ldr	r3, [pc, #460]	@ (80078d0 <menuVariableFinisher+0x39c>)
 8007702:	2200      	movs	r2, #0
 8007704:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8007706:	4b73      	ldr	r3, [pc, #460]	@ (80078d4 <menuVariableFinisher+0x3a0>)
 8007708:	2200      	movs	r2, #0
 800770a:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 800770c:	4b72      	ldr	r3, [pc, #456]	@ (80078d8 <menuVariableFinisher+0x3a4>)
 800770e:	2200      	movs	r2, #0
 8007710:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007712:	4b72      	ldr	r3, [pc, #456]	@ (80078dc <menuVariableFinisher+0x3a8>)
 8007714:	2200      	movs	r2, #0
 8007716:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8007718:	4b71      	ldr	r3, [pc, #452]	@ (80078e0 <menuVariableFinisher+0x3ac>)
 800771a:	2200      	movs	r2, #0
 800771c:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 800771e:	4b71      	ldr	r3, [pc, #452]	@ (80078e4 <menuVariableFinisher+0x3b0>)
 8007720:	2200      	movs	r2, #0
 8007722:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007724:	4b70      	ldr	r3, [pc, #448]	@ (80078e8 <menuVariableFinisher+0x3b4>)
 8007726:	2200      	movs	r2, #0
 8007728:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 800772a:	4b70      	ldr	r3, [pc, #448]	@ (80078ec <menuVariableFinisher+0x3b8>)
 800772c:	2200      	movs	r2, #0
 800772e:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007730:	4b6f      	ldr	r3, [pc, #444]	@ (80078f0 <menuVariableFinisher+0x3bc>)
 8007732:	2200      	movs	r2, #0
 8007734:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8007736:	4b6f      	ldr	r3, [pc, #444]	@ (80078f4 <menuVariableFinisher+0x3c0>)
 8007738:	2200      	movs	r2, #0
 800773a:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 800773c:	4b6e      	ldr	r3, [pc, #440]	@ (80078f8 <menuVariableFinisher+0x3c4>)
 800773e:	2200      	movs	r2, #0
 8007740:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007742:	4b6e      	ldr	r3, [pc, #440]	@ (80078fc <menuVariableFinisher+0x3c8>)
 8007744:	2200      	movs	r2, #0
 8007746:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8007748:	4b6d      	ldr	r3, [pc, #436]	@ (8007900 <menuVariableFinisher+0x3cc>)
 800774a:	2200      	movs	r2, #0
 800774c:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 800774e:	4b6d      	ldr	r3, [pc, #436]	@ (8007904 <menuVariableFinisher+0x3d0>)
 8007750:	2200      	movs	r2, #0
 8007752:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007754:	4b6c      	ldr	r3, [pc, #432]	@ (8007908 <menuVariableFinisher+0x3d4>)
 8007756:	2200      	movs	r2, #0
 8007758:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 800775a:	4b6c      	ldr	r3, [pc, #432]	@ (800790c <menuVariableFinisher+0x3d8>)
 800775c:	2200      	movs	r2, #0
 800775e:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007760:	4b6b      	ldr	r3, [pc, #428]	@ (8007910 <menuVariableFinisher+0x3dc>)
 8007762:	2200      	movs	r2, #0
 8007764:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007766:	4b6b      	ldr	r3, [pc, #428]	@ (8007914 <menuVariableFinisher+0x3e0>)
 8007768:	2200      	movs	r2, #0
 800776a:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 800776c:	4b6a      	ldr	r3, [pc, #424]	@ (8007918 <menuVariableFinisher+0x3e4>)
 800776e:	2200      	movs	r2, #0
 8007770:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007772:	4b6a      	ldr	r3, [pc, #424]	@ (800791c <menuVariableFinisher+0x3e8>)
 8007774:	2200      	movs	r2, #0
 8007776:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007778:	4b69      	ldr	r3, [pc, #420]	@ (8007920 <menuVariableFinisher+0x3ec>)
 800777a:	2200      	movs	r2, #0
 800777c:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 800777e:	4b69      	ldr	r3, [pc, #420]	@ (8007924 <menuVariableFinisher+0x3f0>)
 8007780:	2200      	movs	r2, #0
 8007782:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007784:	4b68      	ldr	r3, [pc, #416]	@ (8007928 <menuVariableFinisher+0x3f4>)
 8007786:	2200      	movs	r2, #0
 8007788:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800778a:	4b68      	ldr	r3, [pc, #416]	@ (800792c <menuVariableFinisher+0x3f8>)
 800778c:	2200      	movs	r2, #0
 800778e:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007790:	4b67      	ldr	r3, [pc, #412]	@ (8007930 <menuVariableFinisher+0x3fc>)
 8007792:	2200      	movs	r2, #0
 8007794:	741a      	strb	r2, [r3, #16]
}
 8007796:	bf00      	nop
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	200000a0 	.word	0x200000a0
 80077a4:	200000b4 	.word	0x200000b4
 80077a8:	200000c8 	.word	0x200000c8
 80077ac:	200000dc 	.word	0x200000dc
 80077b0:	200000f0 	.word	0x200000f0
 80077b4:	20000104 	.word	0x20000104
 80077b8:	20000118 	.word	0x20000118
 80077bc:	2000012c 	.word	0x2000012c
 80077c0:	20000140 	.word	0x20000140
 80077c4:	20000154 	.word	0x20000154
 80077c8:	20000168 	.word	0x20000168
 80077cc:	2000017c 	.word	0x2000017c
 80077d0:	20001224 	.word	0x20001224
 80077d4:	20001238 	.word	0x20001238
 80077d8:	2000124c 	.word	0x2000124c
 80077dc:	20001260 	.word	0x20001260
 80077e0:	20001274 	.word	0x20001274
 80077e4:	20001288 	.word	0x20001288
 80077e8:	2000129c 	.word	0x2000129c
 80077ec:	200012b0 	.word	0x200012b0
 80077f0:	200012c4 	.word	0x200012c4
 80077f4:	200012d8 	.word	0x200012d8
 80077f8:	200012ec 	.word	0x200012ec
 80077fc:	20001300 	.word	0x20001300
 8007800:	20001314 	.word	0x20001314
 8007804:	20001328 	.word	0x20001328
 8007808:	2000133c 	.word	0x2000133c
 800780c:	20001350 	.word	0x20001350
 8007810:	20001364 	.word	0x20001364
 8007814:	20001378 	.word	0x20001378
 8007818:	2000138c 	.word	0x2000138c
 800781c:	200013a0 	.word	0x200013a0
 8007820:	200013b4 	.word	0x200013b4
 8007824:	200013c8 	.word	0x200013c8
 8007828:	200013dc 	.word	0x200013dc
 800782c:	200013f0 	.word	0x200013f0
 8007830:	20001404 	.word	0x20001404
 8007834:	20001418 	.word	0x20001418
 8007838:	2000142c 	.word	0x2000142c
 800783c:	20001440 	.word	0x20001440
 8007840:	20001454 	.word	0x20001454
 8007844:	20001468 	.word	0x20001468
 8007848:	2000147c 	.word	0x2000147c
 800784c:	20001490 	.word	0x20001490
 8007850:	200014a4 	.word	0x200014a4
 8007854:	200014b8 	.word	0x200014b8
 8007858:	200014cc 	.word	0x200014cc
 800785c:	200014e0 	.word	0x200014e0
 8007860:	200014f4 	.word	0x200014f4
 8007864:	20001508 	.word	0x20001508
 8007868:	2000151c 	.word	0x2000151c
 800786c:	20001530 	.word	0x20001530
 8007870:	20001544 	.word	0x20001544
 8007874:	20001558 	.word	0x20001558
 8007878:	2000156c 	.word	0x2000156c
 800787c:	20001580 	.word	0x20001580
 8007880:	20001594 	.word	0x20001594
 8007884:	200015a8 	.word	0x200015a8
 8007888:	200015bc 	.word	0x200015bc
 800788c:	200015d0 	.word	0x200015d0
 8007890:	200015e4 	.word	0x200015e4
 8007894:	200015f8 	.word	0x200015f8
 8007898:	2000160c 	.word	0x2000160c
 800789c:	20001620 	.word	0x20001620
 80078a0:	20001634 	.word	0x20001634
 80078a4:	20001648 	.word	0x20001648
 80078a8:	2000165c 	.word	0x2000165c
 80078ac:	20001670 	.word	0x20001670
 80078b0:	20001684 	.word	0x20001684
 80078b4:	20001698 	.word	0x20001698
 80078b8:	200016ac 	.word	0x200016ac
 80078bc:	200016c0 	.word	0x200016c0
 80078c0:	200016d4 	.word	0x200016d4
 80078c4:	200016e8 	.word	0x200016e8
 80078c8:	200016fc 	.word	0x200016fc
 80078cc:	20001710 	.word	0x20001710
 80078d0:	20001724 	.word	0x20001724
 80078d4:	20001738 	.word	0x20001738
 80078d8:	2000174c 	.word	0x2000174c
 80078dc:	20001760 	.word	0x20001760
 80078e0:	20001774 	.word	0x20001774
 80078e4:	20001788 	.word	0x20001788
 80078e8:	2000179c 	.word	0x2000179c
 80078ec:	200017b0 	.word	0x200017b0
 80078f0:	200017c4 	.word	0x200017c4
 80078f4:	200017d8 	.word	0x200017d8
 80078f8:	200017ec 	.word	0x200017ec
 80078fc:	20001800 	.word	0x20001800
 8007900:	20001814 	.word	0x20001814
 8007904:	20001828 	.word	0x20001828
 8007908:	2000183c 	.word	0x2000183c
 800790c:	20001850 	.word	0x20001850
 8007910:	20001864 	.word	0x20001864
 8007914:	20001878 	.word	0x20001878
 8007918:	2000188c 	.word	0x2000188c
 800791c:	200018a0 	.word	0x200018a0
 8007920:	200018b4 	.word	0x200018b4
 8007924:	200018c8 	.word	0x200018c8
 8007928:	200018dc 	.word	0x200018dc
 800792c:	200018f0 	.word	0x200018f0
 8007930:	20001904 	.word	0x20001904

08007934 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800793a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800793e:	f001 fdeb 	bl	8009518 <HAL_Delay>
	int confirmationVal = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007946:	e012      	b.n	800796e <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007948:	4a12      	ldr	r2, [pc, #72]	@ (8007994 <takeMachineIDWithConfirmation+0x60>)
 800794a:	2101      	movs	r1, #1
 800794c:	2001      	movs	r0, #1
 800794e:	f001 f889 	bl	8008a64 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8007952:	4a11      	ldr	r2, [pc, #68]	@ (8007998 <takeMachineIDWithConfirmation+0x64>)
 8007954:	2101      	movs	r1, #1
 8007956:	2002      	movs	r0, #2
 8007958:	f001 f884 	bl	8008a64 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 800795c:	2102      	movs	r1, #2
 800795e:	480f      	ldr	r0, [pc, #60]	@ (800799c <takeMachineIDWithConfirmation+0x68>)
 8007960:	f002 fbaa 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007964:	4603      	mov	r3, r0
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0e9      	beq.n	8007948 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007974:	f000 f814 	bl	80079a0 <takeMachineID>

	convertArrays(1);
 8007978:	2001      	movs	r0, #1
 800797a:	f7f8 fee1 	bl	8000740 <convertArrays>
	HAL_Delay(50);
 800797e:	2032      	movs	r0, #50	@ 0x32
 8007980:	f001 fdca 	bl	8009518 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007984:	2001      	movs	r0, #1
 8007986:	f7f9 fca1 	bl	80012cc <printCredentials>
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	200018dc 	.word	0x200018dc
 8007998:	200018f0 	.word	0x200018f0
 800799c:	40010800 	.word	0x40010800

080079a0 <takeMachineID>:

void takeMachineID() {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 80079a6:	2001      	movs	r0, #1
 80079a8:	f001 f8ba 	bl	8008b20 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 80079ac:	220c      	movs	r2, #12
 80079ae:	2100      	movs	r1, #0
 80079b0:	48a2      	ldr	r0, [pc, #648]	@ (8007c3c <takeMachineID+0x29c>)
 80079b2:	f005 fce9 	bl	800d388 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 80079b6:	2305      	movs	r3, #5
 80079b8:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 80079ba:	2303      	movs	r3, #3
 80079bc:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 80079be:	2300      	movs	r3, #0
 80079c0:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 80079c2:	4b9f      	ldr	r3, [pc, #636]	@ (8007c40 <takeMachineID+0x2a0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 80079c8:	2100      	movs	r1, #0
 80079ca:	2001      	movs	r0, #1
 80079cc:	f7f9 fa34 	bl	8000e38 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80079d0:	2108      	movs	r1, #8
 80079d2:	489c      	ldr	r0, [pc, #624]	@ (8007c44 <takeMachineID+0x2a4>)
 80079d4:	f002 fb70 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d128      	bne.n	8007a30 <takeMachineID+0x90>
        	lcd_cursor(0);
 80079de:	2000      	movs	r0, #0
 80079e0:	f001 f89e 	bl	8008b20 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 80079e4:	f000 fe80 	bl	80086e8 <checkEEPROM4ID>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d00e      	beq.n	8007a0c <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 80079ee:	4a96      	ldr	r2, [pc, #600]	@ (8007c48 <takeMachineID+0x2a8>)
 80079f0:	2101      	movs	r1, #1
 80079f2:	2001      	movs	r0, #1
 80079f4:	f001 f836 	bl	8008a64 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 80079f8:	4a94      	ldr	r2, [pc, #592]	@ (8007c4c <takeMachineID+0x2ac>)
 80079fa:	2101      	movs	r1, #1
 80079fc:	2002      	movs	r0, #2
 80079fe:	f001 f831 	bl	8008a64 <lcd_print>
        		HAL_Delay(1250);
 8007a02:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007a06:	f001 fd87 	bl	8009518 <HAL_Delay>

        		goto mainSection;
 8007a0a:	e7cc      	b.n	80079a6 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007a0c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007a10:	9302      	str	r3, [sp, #8]
 8007a12:	236e      	movs	r3, #110	@ 0x6e
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	4b8e      	ldr	r3, [pc, #568]	@ (8007c50 <takeMachineID+0x2b0>)
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	236e      	movs	r3, #110	@ 0x6e
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	21a0      	movs	r1, #160	@ 0xa0
 8007a20:	488c      	ldr	r0, [pc, #560]	@ (8007c54 <takeMachineID+0x2b4>)
 8007a22:	f002 fe03 	bl	800a62c <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007a26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007a2a:	f001 fd75 	bl	8009518 <HAL_Delay>

            	break;
 8007a2e:	e132      	b.n	8007c96 <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007a30:	2101      	movs	r1, #1
 8007a32:	4884      	ldr	r0, [pc, #528]	@ (8007c44 <takeMachineID+0x2a4>)
 8007a34:	f002 fb40 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d111      	bne.n	8007a62 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b07      	cmp	r3, #7
 8007a42:	d102      	bne.n	8007a4a <takeMachineID+0xaa>
        		cursorPosition = 10;
 8007a44:	230a      	movs	r3, #10
 8007a46:	60bb      	str	r3, [r7, #8]
 8007a48:	e008      	b.n	8007a5c <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b0e      	cmp	r3, #14
 8007a4e:	d102      	bne.n	8007a56 <takeMachineID+0xb6>
                cursorPosition = 3;
 8007a50:	2303      	movs	r3, #3
 8007a52:	60bb      	str	r3, [r7, #8]
 8007a54:	e002      	b.n	8007a5c <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007a5c:	2096      	movs	r0, #150	@ 0x96
 8007a5e:	f001 fd5b 	bl	8009518 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007a62:	2108      	movs	r1, #8
 8007a64:	487c      	ldr	r0, [pc, #496]	@ (8007c58 <takeMachineID+0x2b8>)
 8007a66:	f002 fb27 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d111      	bne.n	8007a94 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d102      	bne.n	8007a7c <takeMachineID+0xdc>
                cursorPosition = 14;
 8007a76:	230e      	movs	r3, #14
 8007a78:	60bb      	str	r3, [r7, #8]
 8007a7a:	e008      	b.n	8007a8e <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b0a      	cmp	r3, #10
 8007a80:	d102      	bne.n	8007a88 <takeMachineID+0xe8>
            	cursorPosition = 7;
 8007a82:	2307      	movs	r3, #7
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	e002      	b.n	8007a8e <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007a8e:	20fa      	movs	r0, #250	@ 0xfa
 8007a90:	f001 fd42 	bl	8009518 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007a94:	2102      	movs	r1, #2
 8007a96:	486b      	ldr	r0, [pc, #428]	@ (8007c44 <takeMachineID+0x2a4>)
 8007a98:	f002 fb0e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	f040 80a1 	bne.w	8007be6 <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d10a      	bne.n	8007ac0 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 8007aaa:	4a64      	ldr	r2, [pc, #400]	@ (8007c3c <takeMachineID+0x29c>)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4413      	add	r3, r2
 8007ab0:	2230      	movs	r2, #48	@ 0x30
 8007ab2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007ab4:	4a66      	ldr	r2, [pc, #408]	@ (8007c50 <takeMachineID+0x2b0>)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	4413      	add	r3, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	e07c      	b.n	8007bba <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d10a      	bne.n	8007adc <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 8007ac6:	4a5d      	ldr	r2, [pc, #372]	@ (8007c3c <takeMachineID+0x29c>)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4413      	add	r3, r2
 8007acc:	2231      	movs	r2, #49	@ 0x31
 8007ace:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007ad0:	4a5f      	ldr	r2, [pc, #380]	@ (8007c50 <takeMachineID+0x2b0>)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e06e      	b.n	8007bba <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	d10a      	bne.n	8007af8 <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8007ae2:	4a56      	ldr	r2, [pc, #344]	@ (8007c3c <takeMachineID+0x29c>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	2232      	movs	r2, #50	@ 0x32
 8007aea:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007aec:	4a58      	ldr	r2, [pc, #352]	@ (8007c50 <takeMachineID+0x2b0>)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	4413      	add	r3, r2
 8007af2:	2202      	movs	r2, #2
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e060      	b.n	8007bba <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b06      	cmp	r3, #6
 8007afc:	d10a      	bne.n	8007b14 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8007afe:	4a4f      	ldr	r2, [pc, #316]	@ (8007c3c <takeMachineID+0x29c>)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4413      	add	r3, r2
 8007b04:	2233      	movs	r2, #51	@ 0x33
 8007b06:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007b08:	4a51      	ldr	r2, [pc, #324]	@ (8007c50 <takeMachineID+0x2b0>)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	2203      	movs	r2, #3
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	e052      	b.n	8007bba <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b07      	cmp	r3, #7
 8007b18:	d10a      	bne.n	8007b30 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 8007b1a:	4a48      	ldr	r2, [pc, #288]	@ (8007c3c <takeMachineID+0x29c>)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4413      	add	r3, r2
 8007b20:	2234      	movs	r2, #52	@ 0x34
 8007b22:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007b24:	4a4a      	ldr	r2, [pc, #296]	@ (8007c50 <takeMachineID+0x2b0>)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	4413      	add	r3, r2
 8007b2a:	2204      	movs	r2, #4
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	e044      	b.n	8007bba <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2b0a      	cmp	r3, #10
 8007b34:	d10a      	bne.n	8007b4c <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8007b36:	4a41      	ldr	r2, [pc, #260]	@ (8007c3c <takeMachineID+0x29c>)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	2235      	movs	r2, #53	@ 0x35
 8007b3e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8007b40:	4a43      	ldr	r2, [pc, #268]	@ (8007c50 <takeMachineID+0x2b0>)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	4413      	add	r3, r2
 8007b46:	2205      	movs	r2, #5
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	e036      	b.n	8007bba <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b0b      	cmp	r3, #11
 8007b50:	d10a      	bne.n	8007b68 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8007b52:	4a3a      	ldr	r2, [pc, #232]	@ (8007c3c <takeMachineID+0x29c>)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4413      	add	r3, r2
 8007b58:	2236      	movs	r2, #54	@ 0x36
 8007b5a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8007c50 <takeMachineID+0x2b0>)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	4413      	add	r3, r2
 8007b62:	2206      	movs	r2, #6
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e028      	b.n	8007bba <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b0c      	cmp	r3, #12
 8007b6c:	d10a      	bne.n	8007b84 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8007b6e:	4a33      	ldr	r2, [pc, #204]	@ (8007c3c <takeMachineID+0x29c>)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4413      	add	r3, r2
 8007b74:	2237      	movs	r2, #55	@ 0x37
 8007b76:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007b78:	4a35      	ldr	r2, [pc, #212]	@ (8007c50 <takeMachineID+0x2b0>)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	2207      	movs	r2, #7
 8007b80:	701a      	strb	r2, [r3, #0]
 8007b82:	e01a      	b.n	8007bba <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b0d      	cmp	r3, #13
 8007b88:	d10a      	bne.n	8007ba0 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 8007b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8007c3c <takeMachineID+0x29c>)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4413      	add	r3, r2
 8007b90:	2238      	movs	r2, #56	@ 0x38
 8007b92:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007b94:	4a2e      	ldr	r2, [pc, #184]	@ (8007c50 <takeMachineID+0x2b0>)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	4413      	add	r3, r2
 8007b9a:	2208      	movs	r2, #8
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	e00c      	b.n	8007bba <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b0e      	cmp	r3, #14
 8007ba4:	d109      	bne.n	8007bba <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8007ba6:	4a25      	ldr	r2, [pc, #148]	@ (8007c3c <takeMachineID+0x29c>)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4413      	add	r3, r2
 8007bac:	2239      	movs	r2, #57	@ 0x39
 8007bae:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007bb0:	4a27      	ldr	r2, [pc, #156]	@ (8007c50 <takeMachineID+0x2b0>)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	2209      	movs	r2, #9
 8007bb8:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	b2d9      	uxtb	r1, r3
 8007bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8007c3c <takeMachineID+0x29c>)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f000 ff60 	bl	8008a8e <lcd_print_char>

        	writeLoc++;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007be0:	2096      	movs	r0, #150	@ 0x96
 8007be2:	f001 fc99 	bl	8009518 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007be6:	2104      	movs	r1, #4
 8007be8:	4816      	ldr	r0, [pc, #88]	@ (8007c44 <takeMachineID+0x2a4>)
 8007bea:	f002 fa65 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d149      	bne.n	8007c88 <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8007bf4:	4b11      	ldr	r3, [pc, #68]	@ (8007c3c <takeMachineID+0x29c>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d042      	beq.n	8007c82 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8007bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8007c3c <takeMachineID+0x29c>)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007c06:	4a12      	ldr	r2, [pc, #72]	@ (8007c50 <takeMachineID+0x2b0>)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	dd03      	ble.n	8007c1e <takeMachineID+0x27e>
                	writeLoc--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e004      	b.n	8007c28 <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	dc01      	bgt.n	8007c28 <takeMachineID+0x288>
                	writeLoc = 5;
 8007c24:	2305      	movs	r3, #5
 8007c26:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	dd16      	ble.n	8007c5c <takeMachineID+0x2bc>
                	arrayPos--;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3b01      	subs	r3, #1
 8007c32:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	603b      	str	r3, [r7, #0]
 8007c3a:	e017      	b.n	8007c6c <takeMachineID+0x2cc>
 8007c3c:	20001068 	.word	0x20001068
 8007c40:	20000004 	.word	0x20000004
 8007c44:	40010800 	.word	0x40010800
 8007c48:	200017ec 	.word	0x200017ec
 8007c4c:	20001800 	.word	0x20001800
 8007c50:	20000ff0 	.word	0x20000ff0
 8007c54:	20001940 	.word	0x20001940
 8007c58:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da04      	bge.n	8007c6c <takeMachineID+0x2cc>
                	arrayPos = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007c66:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca0 <takeMachineID+0x300>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	3305      	adds	r3, #5
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	4619      	mov	r1, r3
 8007c76:	2001      	movs	r0, #1
 8007c78:	f000 ff2a 	bl	8008ad0 <lcd_delete_char>
                HAL_Delay(50);
 8007c7c:	2032      	movs	r0, #50	@ 0x32
 8007c7e:	f001 fc4b 	bl	8009518 <HAL_Delay>
            }

            HAL_Delay(150);
 8007c82:	2096      	movs	r0, #150	@ 0x96
 8007c84:	f001 fc48 	bl	8009518 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	2002      	movs	r0, #2
 8007c90:	f000 fec9 	bl	8008a26 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007c94:	e69c      	b.n	80079d0 <takeMachineID+0x30>
    }
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000004 	.word	0x20000004

08007ca4 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8007caa:	2301      	movs	r3, #1
 8007cac:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8007cae:	4a2c      	ldr	r2, [pc, #176]	@ (8007d60 <ssidConfirmation+0xbc>)
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	f000 fed6 	bl	8008a64 <lcd_print>

	while(loopVal == 1) {
 8007cb8:	e01f      	b.n	8007cfa <ssidConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 8007cba:	4a2a      	ldr	r2, [pc, #168]	@ (8007d64 <ssidConfirmation+0xc0>)
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	2002      	movs	r0, #2
 8007cc0:	f000 fed0 	bl	8008a64 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007cc4:	2102      	movs	r1, #2
 8007cc6:	4828      	ldr	r0, [pc, #160]	@ (8007d68 <ssidConfirmation+0xc4>)
 8007cc8:	f002 f9f6 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d101      	bne.n	8007cd6 <ssidConfirmation+0x32>
			loopVal = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiSSID) > 16) {
 8007cd6:	4825      	ldr	r0, [pc, #148]	@ (8007d6c <ssidConfirmation+0xc8>)
 8007cd8:	f7f8 faa4 	bl	8000224 <strlen>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d906      	bls.n	8007cf0 <ssidConfirmation+0x4c>
			slideText(wifiSSID, 1, 1, 1);
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	4820      	ldr	r0, [pc, #128]	@ (8007d6c <ssidConfirmation+0xc8>)
 8007cea:	f7f9 fa49 	bl	8001180 <slideText>
 8007cee:	e004      	b.n	8007cfa <ssidConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiSSID);
 8007cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8007d6c <ssidConfirmation+0xc8>)
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	f000 feb5 	bl	8008a64 <lcd_print>
	while(loopVal == 1) {
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d0dc      	beq.n	8007cba <ssidConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 8007d00:	2000      	movs	r0, #0
 8007d02:	f000 ff0d 	bl	8008b20 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8007d06:	4819      	ldr	r0, [pc, #100]	@ (8007d6c <ssidConfirmation+0xc8>)
 8007d08:	f7f8 fa8c 	bl	8000224 <strlen>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b14      	cmp	r3, #20
 8007d10:	d90f      	bls.n	8007d32 <ssidConfirmation+0x8e>
    	lcd_print(1, 1, ssidExceedErrorText);
 8007d12:	4a17      	ldr	r2, [pc, #92]	@ (8007d70 <ssidConfirmation+0xcc>)
 8007d14:	2101      	movs	r1, #1
 8007d16:	2001      	movs	r0, #1
 8007d18:	f000 fea4 	bl	8008a64 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8007d1c:	4a15      	ldr	r2, [pc, #84]	@ (8007d74 <ssidConfirmation+0xd0>)
 8007d1e:	2101      	movs	r1, #1
 8007d20:	2002      	movs	r0, #2
 8007d22:	f000 fe9f 	bl	8008a64 <lcd_print>
        HAL_Delay(1250);
 8007d26:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007d2a:	f001 fbf5 	bl	8009518 <HAL_Delay>

        return 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e011      	b.n	8007d56 <ssidConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007d32:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007d36:	9302      	str	r3, [sp, #8]
 8007d38:	236e      	movs	r3, #110	@ 0x6e
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8007d78 <ssidConfirmation+0xd4>)
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	236e      	movs	r3, #110	@ 0x6e
 8007d42:	2200      	movs	r2, #0
 8007d44:	21a0      	movs	r1, #160	@ 0xa0
 8007d46:	480d      	ldr	r0, [pc, #52]	@ (8007d7c <ssidConfirmation+0xd8>)
 8007d48:	f002 fc70 	bl	800a62c <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8007d4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007d50:	f001 fbe2 	bl	8009518 <HAL_Delay>

    	return 1;
 8007d54:	2301      	movs	r3, #1
    }
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	0800de34 	.word	0x0800de34
 8007d64:	20001904 	.word	0x20001904
 8007d68:	40010800 	.word	0x40010800
 8007d6c:	20001074 	.word	0x20001074
 8007d70:	20001814 	.word	0x20001814
 8007d74:	20001828 	.word	0x20001828
 8007d78:	20000ff0 	.word	0x20000ff0
 8007d7c:	20001940 	.word	0x20001940

08007d80 <takeWifiSSID>:

void takeWifiSSID() {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8007d86:	2001      	movs	r0, #1
 8007d88:	f000 feca 	bl	8008b20 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007d8c:	2214      	movs	r2, #20
 8007d8e:	2100      	movs	r1, #0
 8007d90:	48a4      	ldr	r0, [pc, #656]	@ (8008024 <takeWifiSSID+0x2a4>)
 8007d92:	f005 faf9 	bl	800d388 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007d96:	2301      	movs	r3, #1
 8007d98:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007d9a:	2307      	movs	r3, #7
 8007d9c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007d9e:	2301      	movs	r3, #1
 8007da0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007da2:	2300      	movs	r3, #0
 8007da4:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007da6:	4ba0      	ldr	r3, [pc, #640]	@ (8008028 <takeWifiSSID+0x2a8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007dac:	2101      	movs	r1, #1
 8007dae:	2002      	movs	r0, #2
 8007db0:	f7f9 f842 	bl	8000e38 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007db4:	2108      	movs	r1, #8
 8007db6:	489d      	ldr	r0, [pc, #628]	@ (800802c <takeWifiSSID+0x2ac>)
 8007db8:	f002 f97e 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d106      	bne.n	8007dd0 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 8007dc2:	f7ff ff6f 	bl	8007ca4 <ssidConfirmation>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 8126 	bne.w	800801a <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 8007dce:	e7da      	b.n	8007d86 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4896      	ldr	r0, [pc, #600]	@ (800802c <takeWifiSSID+0x2ac>)
 8007dd4:	f002 f970 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d14d      	bne.n	8007e7a <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b50      	cmp	r3, #80	@ 0x50
 8007de2:	dd01      	ble.n	8007de8 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8007de4:	2301      	movs	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b10      	cmp	r3, #16
 8007dec:	d13f      	bne.n	8007e6e <takeWifiSSID+0xee>
            	if(page == 1) {
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d109      	bne.n	8007e08 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8007df4:	2301      	movs	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
            		page++;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007dfe:	2102      	movs	r1, #2
 8007e00:	2002      	movs	r0, #2
 8007e02:	f7f9 f819 	bl	8000e38 <printTemplate>
 8007e06:	e035      	b.n	8007e74 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d109      	bne.n	8007e22 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]
            		page++;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	3301      	adds	r3, #1
 8007e16:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007e18:	2103      	movs	r1, #3
 8007e1a:	2002      	movs	r0, #2
 8007e1c:	f7f9 f80c 	bl	8000e38 <printTemplate>
 8007e20:	e028      	b.n	8007e74 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d109      	bne.n	8007e3c <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]
            		page++;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007e32:	2104      	movs	r1, #4
 8007e34:	2002      	movs	r0, #2
 8007e36:	f7f8 ffff 	bl	8000e38 <printTemplate>
 8007e3a:	e01b      	b.n	8007e74 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d109      	bne.n	8007e56 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8007e42:	2301      	movs	r3, #1
 8007e44:	60fb      	str	r3, [r7, #12]
            		page++;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007e4c:	2105      	movs	r1, #5
 8007e4e:	2002      	movs	r0, #2
 8007e50:	f7f8 fff2 	bl	8000e38 <printTemplate>
 8007e54:	e00e      	b.n	8007e74 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	d10b      	bne.n	8007e74 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007e60:	2301      	movs	r3, #1
 8007e62:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007e64:	2101      	movs	r1, #1
 8007e66:	2002      	movs	r0, #2
 8007e68:	f7f8 ffe6 	bl	8000e38 <printTemplate>
 8007e6c:	e002      	b.n	8007e74 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3301      	adds	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007e74:	2096      	movs	r0, #150	@ 0x96
 8007e76:	f001 fb4f 	bl	8009518 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007e7a:	2108      	movs	r1, #8
 8007e7c:	486c      	ldr	r0, [pc, #432]	@ (8008030 <takeWifiSSID+0x2b0>)
 8007e7e:	f002 f91b 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d149      	bne.n	8007f1c <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	dc01      	bgt.n	8007e92 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 8007e8e:	2350      	movs	r3, #80	@ 0x50
 8007e90:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d13b      	bne.n	8007f10 <takeWifiSSID+0x190>
            	if(page == 1) {
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d108      	bne.n	8007eb0 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007ea2:	2305      	movs	r3, #5
 8007ea4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007ea6:	2105      	movs	r1, #5
 8007ea8:	2002      	movs	r0, #2
 8007eaa:	f7f8 ffc5 	bl	8000e38 <printTemplate>
 8007eae:	e032      	b.n	8007f16 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d108      	bne.n	8007ec8 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 8007eb6:	2310      	movs	r3, #16
 8007eb8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	2002      	movs	r0, #2
 8007ec2:	f7f8 ffb9 	bl	8000e38 <printTemplate>
 8007ec6:	e026      	b.n	8007f16 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d108      	bne.n	8007ee0 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8007ece:	2310      	movs	r3, #16
 8007ed0:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007ed6:	2102      	movs	r1, #2
 8007ed8:	2002      	movs	r0, #2
 8007eda:	f7f8 ffad 	bl	8000e38 <printTemplate>
 8007ede:	e01a      	b.n	8007f16 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d108      	bne.n	8007ef8 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 8007ee6:	2310      	movs	r3, #16
 8007ee8:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007eea:	2303      	movs	r3, #3
 8007eec:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007eee:	2103      	movs	r1, #3
 8007ef0:	2002      	movs	r0, #2
 8007ef2:	f7f8 ffa1 	bl	8000e38 <printTemplate>
 8007ef6:	e00e      	b.n	8007f16 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	d10b      	bne.n	8007f16 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8007efe:	2310      	movs	r3, #16
 8007f00:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007f02:	2304      	movs	r3, #4
 8007f04:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007f06:	2104      	movs	r1, #4
 8007f08:	2002      	movs	r0, #2
 8007f0a:	f7f8 ff95 	bl	8000e38 <printTemplate>
 8007f0e:	e002      	b.n	8007f16 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007f16:	2096      	movs	r0, #150	@ 0x96
 8007f18:	f001 fafe 	bl	8009518 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007f1c:	2102      	movs	r1, #2
 8007f1e:	4843      	ldr	r0, [pc, #268]	@ (800802c <takeWifiSSID+0x2ac>)
 8007f20:	f002 f8ca 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d12f      	bne.n	8007f8a <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	b2d9      	uxtb	r1, r3
 8007f2e:	4a41      	ldr	r2, [pc, #260]	@ (8008034 <takeWifiSSID+0x2b4>)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4413      	add	r3, r2
 8007f34:	460a      	mov	r2, r1
 8007f36:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8007f38:	4a3f      	ldr	r2, [pc, #252]	@ (8008038 <takeWifiSSID+0x2b8>)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	7819      	ldrb	r1, [r3, #0]
 8007f40:	4a38      	ldr	r2, [pc, #224]	@ (8008024 <takeWifiSSID+0x2a4>)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4413      	add	r3, r2
 8007f46:	460a      	mov	r2, r1
 8007f48:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	b2d9      	uxtb	r1, r3
 8007f4e:	4a3a      	ldr	r2, [pc, #232]	@ (8008038 <takeWifiSSID+0x2b8>)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	2001      	movs	r0, #1
 8007f5a:	f000 fd98 	bl	8008a8e <lcd_print_char>

            writeLoc++;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	3301      	adds	r3, #1
 8007f62:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	3301      	adds	r3, #1
 8007f68:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007f70:	4a30      	ldr	r2, [pc, #192]	@ (8008034 <takeWifiSSID+0x2b4>)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	2200      	movs	r2, #0
 8007f78:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8007f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8008024 <takeWifiSSID+0x2a4>)
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4413      	add	r3, r2
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007f84:	2096      	movs	r0, #150	@ 0x96
 8007f86:	f001 fac7 	bl	8009518 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007f8a:	2104      	movs	r1, #4
 8007f8c:	4827      	ldr	r0, [pc, #156]	@ (800802c <takeWifiSSID+0x2ac>)
 8007f8e:	f002 f893 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d139      	bne.n	800800c <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8007f98:	4b22      	ldr	r3, [pc, #136]	@ (8008024 <takeWifiSSID+0x2a4>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d032      	beq.n	8008006 <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 8007fa0:	4a24      	ldr	r2, [pc, #144]	@ (8008034 <takeWifiSSID+0x2b4>)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8007faa:	4a1e      	ldr	r2, [pc, #120]	@ (8008024 <takeWifiSSID+0x2a4>)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4413      	add	r3, r2
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]

        		//if(strlen(wifiSSID) > 10) {
        		    //slideTextInput(wifiSSID, 7, 1, 1);
        		//}

        		if(writeLoc > 7) {
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2b07      	cmp	r3, #7
 8007fb8:	dd03      	ble.n	8007fc2 <takeWifiSSID+0x242>
        			writeLoc--;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	613b      	str	r3, [r7, #16]
 8007fc0:	e004      	b.n	8007fcc <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b06      	cmp	r3, #6
 8007fc6:	dc01      	bgt.n	8007fcc <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8007fc8:	2307      	movs	r3, #7
 8007fca:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	dd06      	ble.n	8007fe0 <takeWifiSSID+0x260>
        			arrayPosition--;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	607b      	str	r3, [r7, #4]
 8007fde:	e007      	b.n	8007ff0 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	da04      	bge.n	8007ff0 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007fea:	4b0f      	ldr	r3, [pc, #60]	@ (8008028 <takeWifiSSID+0x2a8>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	3307      	adds	r3, #7
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	f000 fd68 	bl	8008ad0 <lcd_delete_char>
        		HAL_Delay(50);
 8008000:	2032      	movs	r0, #50	@ 0x32
 8008002:	f001 fa89 	bl	8009518 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008006:	2096      	movs	r0, #150	@ 0x96
 8008008:	f001 fa86 	bl	8009518 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	2002      	movs	r0, #2
 8008014:	f000 fd07 	bl	8008a26 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008018:	e6cc      	b.n	8007db4 <takeWifiSSID+0x34>
        		break;
 800801a:	bf00      	nop
    }
}
 800801c:	bf00      	nop
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20001074 	.word	0x20001074
 8008028:	20000008 	.word	0x20000008
 800802c:	40010800 	.word	0x40010800
 8008030:	40011000 	.word	0x40011000
 8008034:	20000ff0 	.word	0x20000ff0
 8008038:	2000001c 	.word	0x2000001c

0800803c <passConfirmation>:

uint8_t passConfirmation() {
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8008042:	2301      	movs	r3, #1
 8008044:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008046:	4a2c      	ldr	r2, [pc, #176]	@ (80080f8 <passConfirmation+0xbc>)
 8008048:	2101      	movs	r1, #1
 800804a:	2001      	movs	r0, #1
 800804c:	f000 fd0a 	bl	8008a64 <lcd_print>

	while(loopVal == 1) {
 8008050:	e01f      	b.n	8008092 <passConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 8008052:	4a2a      	ldr	r2, [pc, #168]	@ (80080fc <passConfirmation+0xc0>)
 8008054:	2101      	movs	r1, #1
 8008056:	2002      	movs	r0, #2
 8008058:	f000 fd04 	bl	8008a64 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800805c:	2102      	movs	r1, #2
 800805e:	4828      	ldr	r0, [pc, #160]	@ (8008100 <passConfirmation+0xc4>)
 8008060:	f002 f82a 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8008064:	4603      	mov	r3, r0
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <passConfirmation+0x32>
			loopVal = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiPass) > 16) {
 800806e:	4825      	ldr	r0, [pc, #148]	@ (8008104 <passConfirmation+0xc8>)
 8008070:	f7f8 f8d8 	bl	8000224 <strlen>
 8008074:	4603      	mov	r3, r0
 8008076:	2b10      	cmp	r3, #16
 8008078:	d906      	bls.n	8008088 <passConfirmation+0x4c>
			slideText(wifiPass, 1, 1, 1);
 800807a:	2301      	movs	r3, #1
 800807c:	2201      	movs	r2, #1
 800807e:	2101      	movs	r1, #1
 8008080:	4820      	ldr	r0, [pc, #128]	@ (8008104 <passConfirmation+0xc8>)
 8008082:	f7f9 f87d 	bl	8001180 <slideText>
 8008086:	e004      	b.n	8008092 <passConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiPass);
 8008088:	4a1e      	ldr	r2, [pc, #120]	@ (8008104 <passConfirmation+0xc8>)
 800808a:	2101      	movs	r1, #1
 800808c:	2001      	movs	r0, #1
 800808e:	f000 fce9 	bl	8008a64 <lcd_print>
	while(loopVal == 1) {
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d0dc      	beq.n	8008052 <passConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 8008098:	2000      	movs	r0, #0
 800809a:	f000 fd41 	bl	8008b20 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 800809e:	4819      	ldr	r0, [pc, #100]	@ (8008104 <passConfirmation+0xc8>)
 80080a0:	f7f8 f8c0 	bl	8000224 <strlen>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b14      	cmp	r3, #20
 80080a8:	d90f      	bls.n	80080ca <passConfirmation+0x8e>
    	lcd_print(1, 1, passExceedErrorText);
 80080aa:	4a17      	ldr	r2, [pc, #92]	@ (8008108 <passConfirmation+0xcc>)
 80080ac:	2101      	movs	r1, #1
 80080ae:	2001      	movs	r0, #1
 80080b0:	f000 fcd8 	bl	8008a64 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80080b4:	4a15      	ldr	r2, [pc, #84]	@ (800810c <passConfirmation+0xd0>)
 80080b6:	2101      	movs	r1, #1
 80080b8:	2002      	movs	r0, #2
 80080ba:	f000 fcd3 	bl	8008a64 <lcd_print>
        HAL_Delay(1250);
 80080be:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80080c2:	f001 fa29 	bl	8009518 <HAL_Delay>

        return 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	e011      	b.n	80080ee <passConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80080ca:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80080ce:	9302      	str	r3, [sp, #8]
 80080d0:	236e      	movs	r3, #110	@ 0x6e
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008110 <passConfirmation+0xd4>)
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	236e      	movs	r3, #110	@ 0x6e
 80080da:	2200      	movs	r2, #0
 80080dc:	21a0      	movs	r1, #160	@ 0xa0
 80080de:	480d      	ldr	r0, [pc, #52]	@ (8008114 <passConfirmation+0xd8>)
 80080e0:	f002 faa4 	bl	800a62c <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 80080e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80080e8:	f001 fa16 	bl	8009518 <HAL_Delay>

    	return 1;
 80080ec:	2301      	movs	r3, #1
    }
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	0800de34 	.word	0x0800de34
 80080fc:	20001904 	.word	0x20001904
 8008100:	40010800 	.word	0x40010800
 8008104:	20001088 	.word	0x20001088
 8008108:	2000183c 	.word	0x2000183c
 800810c:	20001850 	.word	0x20001850
 8008110:	20000ff0 	.word	0x20000ff0
 8008114:	20001940 	.word	0x20001940

08008118 <takeWifiPass>:

void takeWifiPass() {
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 800811e:	2001      	movs	r0, #1
 8008120:	f000 fcfe 	bl	8008b20 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8008124:	2214      	movs	r2, #20
 8008126:	2100      	movs	r1, #0
 8008128:	48a4      	ldr	r0, [pc, #656]	@ (80083bc <takeWifiPass+0x2a4>)
 800812a:	f005 f92d 	bl	800d388 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800812e:	2301      	movs	r3, #1
 8008130:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008132:	2307      	movs	r3, #7
 8008134:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8008136:	2301      	movs	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800813a:	2300      	movs	r3, #0
 800813c:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800813e:	4ba0      	ldr	r3, [pc, #640]	@ (80083c0 <takeWifiPass+0x2a8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8008144:	2101      	movs	r1, #1
 8008146:	2003      	movs	r0, #3
 8008148:	f7f8 fe76 	bl	8000e38 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800814c:	2108      	movs	r1, #8
 800814e:	489d      	ldr	r0, [pc, #628]	@ (80083c4 <takeWifiPass+0x2ac>)
 8008150:	f001 ffb2 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8008154:	4603      	mov	r3, r0
 8008156:	2b01      	cmp	r3, #1
 8008158:	d106      	bne.n	8008168 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 800815a:	f7ff ff6f 	bl	800803c <passConfirmation>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 8126 	bne.w	80083b2 <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8008166:	e7da      	b.n	800811e <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008168:	2101      	movs	r1, #1
 800816a:	4896      	ldr	r0, [pc, #600]	@ (80083c4 <takeWifiPass+0x2ac>)
 800816c:	f001 ffa4 	bl	800a0b8 <HAL_GPIO_ReadPin>
 8008170:	4603      	mov	r3, r0
 8008172:	2b01      	cmp	r3, #1
 8008174:	d14d      	bne.n	8008212 <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b50      	cmp	r3, #80	@ 0x50
 800817a:	dd01      	ble.n	8008180 <takeWifiPass+0x68>
        		cursorPosition = 1;
 800817c:	2301      	movs	r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b10      	cmp	r3, #16
 8008184:	d13f      	bne.n	8008206 <takeWifiPass+0xee>
            	if(page == 1) {
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d109      	bne.n	80081a0 <takeWifiPass+0x88>
            		cursorPosition = 1;
 800818c:	2301      	movs	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	3301      	adds	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008196:	2102      	movs	r1, #2
 8008198:	2003      	movs	r0, #3
 800819a:	f7f8 fe4d 	bl	8000e38 <printTemplate>
 800819e:	e035      	b.n	800820c <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d109      	bne.n	80081ba <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80081a6:	2301      	movs	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
            		page++;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	3301      	adds	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80081b0:	2103      	movs	r1, #3
 80081b2:	2003      	movs	r0, #3
 80081b4:	f7f8 fe40 	bl	8000e38 <printTemplate>
 80081b8:	e028      	b.n	800820c <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d109      	bne.n	80081d4 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80081c0:	2301      	movs	r3, #1
 80081c2:	60fb      	str	r3, [r7, #12]
            		page++;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	3301      	adds	r3, #1
 80081c8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80081ca:	2104      	movs	r1, #4
 80081cc:	2003      	movs	r0, #3
 80081ce:	f7f8 fe33 	bl	8000e38 <printTemplate>
 80081d2:	e01b      	b.n	800820c <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d109      	bne.n	80081ee <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80081da:	2301      	movs	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
            		page++;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	3301      	adds	r3, #1
 80081e2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80081e4:	2105      	movs	r1, #5
 80081e6:	2003      	movs	r0, #3
 80081e8:	f7f8 fe26 	bl	8000e38 <printTemplate>
 80081ec:	e00e      	b.n	800820c <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b05      	cmp	r3, #5
 80081f2:	d10b      	bne.n	800820c <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80081f4:	2301      	movs	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80081fc:	2101      	movs	r1, #1
 80081fe:	2003      	movs	r0, #3
 8008200:	f7f8 fe1a 	bl	8000e38 <printTemplate>
 8008204:	e002      	b.n	800820c <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800820c:	2096      	movs	r0, #150	@ 0x96
 800820e:	f001 f983 	bl	8009518 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008212:	2108      	movs	r1, #8
 8008214:	486c      	ldr	r0, [pc, #432]	@ (80083c8 <takeWifiPass+0x2b0>)
 8008216:	f001 ff4f 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800821a:	4603      	mov	r3, r0
 800821c:	2b01      	cmp	r3, #1
 800821e:	d149      	bne.n	80082b4 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	dc01      	bgt.n	800822a <takeWifiPass+0x112>
        		cursorPosition = 80;
 8008226:	2350      	movs	r3, #80	@ 0x50
 8008228:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d13b      	bne.n	80082a8 <takeWifiPass+0x190>
            	if(page == 1) {
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d108      	bne.n	8008248 <takeWifiPass+0x130>
            		cursorPosition = 16;
 8008236:	2310      	movs	r3, #16
 8008238:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800823a:	2305      	movs	r3, #5
 800823c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800823e:	2105      	movs	r1, #5
 8008240:	2003      	movs	r0, #3
 8008242:	f7f8 fdf9 	bl	8000e38 <printTemplate>
 8008246:	e032      	b.n	80082ae <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d108      	bne.n	8008260 <takeWifiPass+0x148>
            		cursorPosition = 16;
 800824e:	2310      	movs	r3, #16
 8008250:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008252:	2301      	movs	r3, #1
 8008254:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008256:	2101      	movs	r1, #1
 8008258:	2003      	movs	r0, #3
 800825a:	f7f8 fded 	bl	8000e38 <printTemplate>
 800825e:	e026      	b.n	80082ae <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b03      	cmp	r3, #3
 8008264:	d108      	bne.n	8008278 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8008266:	2310      	movs	r3, #16
 8008268:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800826a:	2302      	movs	r3, #2
 800826c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800826e:	2102      	movs	r1, #2
 8008270:	2003      	movs	r0, #3
 8008272:	f7f8 fde1 	bl	8000e38 <printTemplate>
 8008276:	e01a      	b.n	80082ae <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2b04      	cmp	r3, #4
 800827c:	d108      	bne.n	8008290 <takeWifiPass+0x178>
            		cursorPosition = 16;
 800827e:	2310      	movs	r3, #16
 8008280:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008282:	2303      	movs	r3, #3
 8008284:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008286:	2103      	movs	r1, #3
 8008288:	2003      	movs	r0, #3
 800828a:	f7f8 fdd5 	bl	8000e38 <printTemplate>
 800828e:	e00e      	b.n	80082ae <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2b05      	cmp	r3, #5
 8008294:	d10b      	bne.n	80082ae <takeWifiPass+0x196>
            		cursorPosition = 16;
 8008296:	2310      	movs	r3, #16
 8008298:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800829a:	2304      	movs	r3, #4
 800829c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800829e:	2104      	movs	r1, #4
 80082a0:	2003      	movs	r0, #3
 80082a2:	f7f8 fdc9 	bl	8000e38 <printTemplate>
 80082a6:	e002      	b.n	80082ae <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80082ae:	2096      	movs	r0, #150	@ 0x96
 80082b0:	f001 f932 	bl	8009518 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80082b4:	2102      	movs	r1, #2
 80082b6:	4843      	ldr	r0, [pc, #268]	@ (80083c4 <takeWifiPass+0x2ac>)
 80082b8:	f001 fefe 	bl	800a0b8 <HAL_GPIO_ReadPin>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d12f      	bne.n	8008322 <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	b2d9      	uxtb	r1, r3
 80082c6:	4a41      	ldr	r2, [pc, #260]	@ (80083cc <takeWifiPass+0x2b4>)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	460a      	mov	r2, r1
 80082ce:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80082d0:	4a3f      	ldr	r2, [pc, #252]	@ (80083d0 <takeWifiPass+0x2b8>)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	7819      	ldrb	r1, [r3, #0]
 80082d8:	4a38      	ldr	r2, [pc, #224]	@ (80083bc <takeWifiPass+0x2a4>)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	460a      	mov	r2, r1
 80082e0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	b2d9      	uxtb	r1, r3
 80082e6:	4a3a      	ldr	r2, [pc, #232]	@ (80083d0 <takeWifiPass+0x2b8>)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	2001      	movs	r0, #1
 80082f2:	f000 fbcc 	bl	8008a8e <lcd_print_char>

            writeLoc++;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	3301      	adds	r3, #1
 80082fa:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	3301      	adds	r3, #1
 8008300:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3301      	adds	r3, #1
 8008306:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008308:	4a30      	ldr	r2, [pc, #192]	@ (80083cc <takeWifiPass+0x2b4>)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8008312:	4a2a      	ldr	r2, [pc, #168]	@ (80083bc <takeWifiPass+0x2a4>)
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4413      	add	r3, r2
 8008318:	2200      	movs	r2, #0
 800831a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 800831c:	2096      	movs	r0, #150	@ 0x96
 800831e:	f001 f8fb 	bl	8009518 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008322:	2104      	movs	r1, #4
 8008324:	4827      	ldr	r0, [pc, #156]	@ (80083c4 <takeWifiPass+0x2ac>)
 8008326:	f001 fec7 	bl	800a0b8 <HAL_GPIO_ReadPin>
 800832a:	4603      	mov	r3, r0
 800832c:	2b01      	cmp	r3, #1
 800832e:	d139      	bne.n	80083a4 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008330:	4b22      	ldr	r3, [pc, #136]	@ (80083bc <takeWifiPass+0x2a4>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d032      	beq.n	800839e <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008338:	4a24      	ldr	r2, [pc, #144]	@ (80083cc <takeWifiPass+0x2b4>)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8008342:	4a1e      	ldr	r2, [pc, #120]	@ (80083bc <takeWifiPass+0x2a4>)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4413      	add	r3, r2
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b07      	cmp	r3, #7
 8008350:	dd03      	ble.n	800835a <takeWifiPass+0x242>
        			writeLoc--;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	3b01      	subs	r3, #1
 8008356:	613b      	str	r3, [r7, #16]
 8008358:	e004      	b.n	8008364 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	2b06      	cmp	r3, #6
 800835e:	dc01      	bgt.n	8008364 <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008360:	2307      	movs	r3, #7
 8008362:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	dd06      	ble.n	8008378 <takeWifiPass+0x260>
        			arrayPosition--;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	3b01      	subs	r3, #1
 800836e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3b01      	subs	r3, #1
 8008374:	607b      	str	r3, [r7, #4]
 8008376:	e007      	b.n	8008388 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	da04      	bge.n	8008388 <takeWifiPass+0x270>
        			arrayPosition = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008382:	4b0f      	ldr	r3, [pc, #60]	@ (80083c0 <takeWifiPass+0x2a8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	3307      	adds	r3, #7
 800838e:	b2db      	uxtb	r3, r3
 8008390:	4619      	mov	r1, r3
 8008392:	2001      	movs	r0, #1
 8008394:	f000 fb9c 	bl	8008ad0 <lcd_delete_char>
        		HAL_Delay(50);
 8008398:	2032      	movs	r0, #50	@ 0x32
 800839a:	f001 f8bd 	bl	8009518 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800839e:	2096      	movs	r0, #150	@ 0x96
 80083a0:	f001 f8ba 	bl	8009518 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	4619      	mov	r1, r3
 80083aa:	2002      	movs	r0, #2
 80083ac:	f000 fb3b 	bl	8008a26 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80083b0:	e6cc      	b.n	800814c <takeWifiPass+0x34>
    	        break;
 80083b2:	bf00      	nop
    }
}
 80083b4:	bf00      	nop
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20001088 	.word	0x20001088
 80083c0:	2000000c 	.word	0x2000000c
 80083c4:	40010800 	.word	0x40010800
 80083c8:	40011000 	.word	0x40011000
 80083cc:	20000ff0 	.word	0x20000ff0
 80083d0:	2000001c 	.word	0x2000001c

080083d4 <mergeData>:

char* mergeData() {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b09c      	sub	sp, #112	@ 0x70
 80083d8:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80083da:	2300      	movs	r3, #0
 80083dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80083e2:	2229      	movs	r2, #41	@ 0x29
 80083e4:	2100      	movs	r1, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f004 ffce 	bl	800d388 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80083ec:	4b65      	ldr	r3, [pc, #404]	@ (8008584 <mergeData+0x1b0>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	703b      	strb	r3, [r7, #0]
 80083f2:	4b65      	ldr	r3, [pc, #404]	@ (8008588 <mergeData+0x1b4>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	707b      	strb	r3, [r7, #1]
 80083f8:	4b64      	ldr	r3, [pc, #400]	@ (800858c <mergeData+0x1b8>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	70bb      	strb	r3, [r7, #2]
 80083fe:	4b64      	ldr	r3, [pc, #400]	@ (8008590 <mergeData+0x1bc>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	70fb      	strb	r3, [r7, #3]
 8008404:	4b63      	ldr	r3, [pc, #396]	@ (8008594 <mergeData+0x1c0>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	713b      	strb	r3, [r7, #4]
 800840a:	4b63      	ldr	r3, [pc, #396]	@ (8008598 <mergeData+0x1c4>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	717b      	strb	r3, [r7, #5]
 8008410:	4b62      	ldr	r3, [pc, #392]	@ (800859c <mergeData+0x1c8>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	71bb      	strb	r3, [r7, #6]
 8008416:	4b62      	ldr	r3, [pc, #392]	@ (80085a0 <mergeData+0x1cc>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	71fb      	strb	r3, [r7, #7]
 800841c:	4b61      	ldr	r3, [pc, #388]	@ (80085a4 <mergeData+0x1d0>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	723b      	strb	r3, [r7, #8]
 8008422:	4b61      	ldr	r3, [pc, #388]	@ (80085a8 <mergeData+0x1d4>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	727b      	strb	r3, [r7, #9]
 8008428:	4b60      	ldr	r3, [pc, #384]	@ (80085ac <mergeData+0x1d8>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	72bb      	strb	r3, [r7, #10]
 800842e:	4b60      	ldr	r3, [pc, #384]	@ (80085b0 <mergeData+0x1dc>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	72fb      	strb	r3, [r7, #11]
 8008434:	4b5f      	ldr	r3, [pc, #380]	@ (80085b4 <mergeData+0x1e0>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	733b      	strb	r3, [r7, #12]
 800843a:	4b5f      	ldr	r3, [pc, #380]	@ (80085b8 <mergeData+0x1e4>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	737b      	strb	r3, [r7, #13]
 8008440:	4b5e      	ldr	r3, [pc, #376]	@ (80085bc <mergeData+0x1e8>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	73bb      	strb	r3, [r7, #14]
 8008446:	4b5e      	ldr	r3, [pc, #376]	@ (80085c0 <mergeData+0x1ec>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	4b5d      	ldr	r3, [pc, #372]	@ (80085c4 <mergeData+0x1f0>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	743b      	strb	r3, [r7, #16]
 8008452:	4b5d      	ldr	r3, [pc, #372]	@ (80085c8 <mergeData+0x1f4>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	747b      	strb	r3, [r7, #17]
 8008458:	4b5c      	ldr	r3, [pc, #368]	@ (80085cc <mergeData+0x1f8>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	74bb      	strb	r3, [r7, #18]
 800845e:	4b5c      	ldr	r3, [pc, #368]	@ (80085d0 <mergeData+0x1fc>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	74fb      	strb	r3, [r7, #19]
 8008464:	4b5b      	ldr	r3, [pc, #364]	@ (80085d4 <mergeData+0x200>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	753b      	strb	r3, [r7, #20]
 800846a:	4b5b      	ldr	r3, [pc, #364]	@ (80085d8 <mergeData+0x204>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	757b      	strb	r3, [r7, #21]
 8008470:	4b5a      	ldr	r3, [pc, #360]	@ (80085dc <mergeData+0x208>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	75bb      	strb	r3, [r7, #22]
 8008476:	4b5a      	ldr	r3, [pc, #360]	@ (80085e0 <mergeData+0x20c>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	75fb      	strb	r3, [r7, #23]
 800847c:	4b59      	ldr	r3, [pc, #356]	@ (80085e4 <mergeData+0x210>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	763b      	strb	r3, [r7, #24]
 8008482:	4b59      	ldr	r3, [pc, #356]	@ (80085e8 <mergeData+0x214>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	767b      	strb	r3, [r7, #25]
 8008488:	4b58      	ldr	r3, [pc, #352]	@ (80085ec <mergeData+0x218>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	76bb      	strb	r3, [r7, #26]
 800848e:	4b58      	ldr	r3, [pc, #352]	@ (80085f0 <mergeData+0x21c>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	76fb      	strb	r3, [r7, #27]
 8008494:	4b57      	ldr	r3, [pc, #348]	@ (80085f4 <mergeData+0x220>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	773b      	strb	r3, [r7, #28]
 800849a:	4b57      	ldr	r3, [pc, #348]	@ (80085f8 <mergeData+0x224>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	777b      	strb	r3, [r7, #29]
 80084a0:	4b56      	ldr	r3, [pc, #344]	@ (80085fc <mergeData+0x228>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	77bb      	strb	r3, [r7, #30]
 80084a6:	4b56      	ldr	r3, [pc, #344]	@ (8008600 <mergeData+0x22c>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	77fb      	strb	r3, [r7, #31]
 80084ac:	4b55      	ldr	r3, [pc, #340]	@ (8008604 <mergeData+0x230>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80084b4:	4b54      	ldr	r3, [pc, #336]	@ (8008608 <mergeData+0x234>)
 80084b6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 80084ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[39],
 80084be:	4b52      	ldr	r3, [pc, #328]	@ (8008608 <mergeData+0x234>)
 80084c0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 80084c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[40],
 80084c8:	4b4f      	ldr	r3, [pc, #316]	@ (8008608 <mergeData+0x234>)
 80084ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 80084ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[41],
 80084d2:	4b4d      	ldr	r3, [pc, #308]	@ (8008608 <mergeData+0x234>)
 80084d4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 80084d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[42],
 80084dc:	4b4a      	ldr	r3, [pc, #296]	@ (8008608 <mergeData+0x234>)
 80084de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 80084e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[43],
 80084e6:	4b48      	ldr	r3, [pc, #288]	@ (8008608 <mergeData+0x234>)
 80084e8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 80084ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[44],
 80084f0:	4b45      	ldr	r3, [pc, #276]	@ (8008608 <mergeData+0x234>)
 80084f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 80084f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			eepromData[45],
 80084fa:	4b43      	ldr	r3, [pc, #268]	@ (8008608 <mergeData+0x234>)
 80084fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008500:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			eepromData[46],
 8008504:	4b40      	ldr	r3, [pc, #256]	@ (8008608 <mergeData+0x234>)
 8008506:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 800850a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			eepromData[47],
 800850e:	4b3e      	ldr	r3, [pc, #248]	@ (8008608 <mergeData+0x234>)
 8008510:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008514:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008518:	2306      	movs	r3, #6
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800851e:	2300      	movs	r3, #0
 8008520:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008522:	e015      	b.n	8008550 <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 8008524:	463a      	mov	r2, r7
 8008526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008528:	4413      	add	r3, r2
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	461a      	mov	r2, r3
 800852e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008532:	4936      	ldr	r1, [pc, #216]	@ (800860c <mergeData+0x238>)
 8008534:	4618      	mov	r0, r3
 8008536:	f004 fea3 	bl	800d280 <siprintf>
	    strcat(combinedString, temp);
 800853a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800853e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f004 fefd 	bl	800d344 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800854a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800854c:	3301      	adds	r3, #1
 800854e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008552:	2b2b      	cmp	r3, #43	@ 0x2b
 8008554:	d9e6      	bls.n	8008524 <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008556:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800855a:	4618      	mov	r0, r3
 800855c:	f7f7 fe62 	bl	8000224 <strlen>
 8008560:	4603      	mov	r3, r0
 8008562:	3301      	adds	r3, #1
 8008564:	4618      	mov	r0, r3
 8008566:	f004 fdd5 	bl	800d114 <malloc>
 800856a:	4603      	mov	r3, r0
 800856c:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 800856e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008572:	4619      	mov	r1, r3
 8008574:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008576:	f004 ff4b 	bl	800d410 <strcpy>
	return result;
 800857a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 800857c:	4618      	mov	r0, r3
 800857e:	3770      	adds	r7, #112	@ 0x70
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	200010d3 	.word	0x200010d3
 8008588:	200010c5 	.word	0x200010c5
 800858c:	200010c8 	.word	0x200010c8
 8008590:	200010c9 	.word	0x200010c9
 8008594:	200010ca 	.word	0x200010ca
 8008598:	200010d1 	.word	0x200010d1
 800859c:	200010cb 	.word	0x200010cb
 80085a0:	200010cc 	.word	0x200010cc
 80085a4:	200010d0 	.word	0x200010d0
 80085a8:	200010cd 	.word	0x200010cd
 80085ac:	200010dd 	.word	0x200010dd
 80085b0:	200010ce 	.word	0x200010ce
 80085b4:	200010de 	.word	0x200010de
 80085b8:	200010cf 	.word	0x200010cf
 80085bc:	200010df 	.word	0x200010df
 80085c0:	200010d2 	.word	0x200010d2
 80085c4:	200010d4 	.word	0x200010d4
 80085c8:	200010d5 	.word	0x200010d5
 80085cc:	200010d6 	.word	0x200010d6
 80085d0:	200010d7 	.word	0x200010d7
 80085d4:	200010d8 	.word	0x200010d8
 80085d8:	200010d9 	.word	0x200010d9
 80085dc:	200010da 	.word	0x200010da
 80085e0:	200010db 	.word	0x200010db
 80085e4:	200010dc 	.word	0x200010dc
 80085e8:	200010e0 	.word	0x200010e0
 80085ec:	200010e2 	.word	0x200010e2
 80085f0:	200010c1 	.word	0x200010c1
 80085f4:	200010c2 	.word	0x200010c2
 80085f8:	20000000 	.word	0x20000000
 80085fc:	20000001 	.word	0x20000001
 8008600:	200010c3 	.word	0x200010c3
 8008604:	200010e5 	.word	0x200010e5
 8008608:	20000ff0 	.word	0x20000ff0
 800860c:	0800de48 	.word	0x0800de48

08008610 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008616:	4a13      	ldr	r2, [pc, #76]	@ (8008664 <convertAndSendData+0x54>)
 8008618:	2101      	movs	r1, #1
 800861a:	2001      	movs	r0, #1
 800861c:	f000 fa22 	bl	8008a64 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008620:	4a11      	ldr	r2, [pc, #68]	@ (8008668 <convertAndSendData+0x58>)
 8008622:	2101      	movs	r1, #1
 8008624:	2002      	movs	r0, #2
 8008626:	f000 fa1d 	bl	8008a64 <lcd_print>

	for(int i=0; i<2; i++) {
 800862a:	2300      	movs	r3, #0
 800862c:	607b      	str	r3, [r7, #4]
 800862e:	e00c      	b.n	800864a <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008630:	f7ff fed0 	bl	80083d4 <mergeData>
 8008634:	4603      	mov	r3, r0
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <convertAndSendData+0x5c>)
 800863a:	4a0d      	ldr	r2, [pc, #52]	@ (8008670 <convertAndSendData+0x60>)
 800863c:	490d      	ldr	r1, [pc, #52]	@ (8008674 <convertAndSendData+0x64>)
 800863e:	480e      	ldr	r0, [pc, #56]	@ (8008678 <convertAndSendData+0x68>)
 8008640:	f7f8 f9a8 	bl	8000994 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3301      	adds	r3, #1
 8008648:	607b      	str	r3, [r7, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b01      	cmp	r3, #1
 800864e:	ddef      	ble.n	8008630 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008650:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008654:	f000 ff60 	bl	8009518 <HAL_Delay>
	lcd_clear();
 8008658:	f000 fa30 	bl	8008abc <lcd_clear>
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	2000179c 	.word	0x2000179c
 8008668:	200017b0 	.word	0x200017b0
 800866c:	20001088 	.word	0x20001088
 8008670:	20001074 	.word	0x20001074
 8008674:	20001068 	.word	0x20001068
 8008678:	200019dc 	.word	0x200019dc

0800867c <iotSetup>:

void iotSetup() {
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008680:	4b13      	ldr	r3, [pc, #76]	@ (80086d0 <iotSetup+0x54>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d016      	beq.n	80086b6 <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 8008688:	f000 f82e 	bl	80086e8 <checkEEPROM4ID>
 800868c:	4603      	mov	r3, r0
 800868e:	2b01      	cmp	r3, #1
 8008690:	d001      	beq.n	8008696 <iotSetup+0x1a>
			takeMachineID();
 8008692:	f7ff f985 	bl	80079a0 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008696:	480f      	ldr	r0, [pc, #60]	@ (80086d4 <iotSetup+0x58>)
 8008698:	f7f7 fdc4 	bl	8000224 <strlen>
 800869c:	4603      	mov	r3, r0
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d801      	bhi.n	80086a6 <iotSetup+0x2a>
			takeWifiSSID();
 80086a2:	f7ff fb6d 	bl	8007d80 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 80086a6:	480c      	ldr	r0, [pc, #48]	@ (80086d8 <iotSetup+0x5c>)
 80086a8:	f7f7 fdbc 	bl	8000224 <strlen>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d801      	bhi.n	80086b6 <iotSetup+0x3a>
			takeWifiPass();
 80086b2:	f7ff fd31 	bl	8008118 <takeWifiPass>
			//HAL_Delay(200);
			//goto takeIDSection;
		//}
	//}

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 80086b6:	4a09      	ldr	r2, [pc, #36]	@ (80086dc <iotSetup+0x60>)
 80086b8:	4909      	ldr	r1, [pc, #36]	@ (80086e0 <iotSetup+0x64>)
 80086ba:	480a      	ldr	r0, [pc, #40]	@ (80086e4 <iotSetup+0x68>)
 80086bc:	f7f8 f8c2 	bl	8000844 <ESP8266_Init>
	HAL_Delay(500);
 80086c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80086c4:	f000 ff28 	bl	8009518 <HAL_Delay>
	convertAndSendData();
 80086c8:	f7ff ffa2 	bl	8008610 <convertAndSendData>
}
 80086cc:	bf00      	nop
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	200010e3 	.word	0x200010e3
 80086d4:	20001074 	.word	0x20001074
 80086d8:	20001088 	.word	0x20001088
 80086dc:	0800de4c 	.word	0x0800de4c
 80086e0:	0800de64 	.word	0x0800de64
 80086e4:	200019dc 	.word	0x200019dc

080086e8 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 80086ee:	4b0f      	ldr	r3, [pc, #60]	@ (800872c <checkEEPROM4ID+0x44>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 80086f4:	2301      	movs	r3, #1
 80086f6:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 80086f8:	2300      	movs	r3, #0
 80086fa:	607b      	str	r3, [r7, #4]
 80086fc:	e00d      	b.n	800871a <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 80086fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008730 <checkEEPROM4ID+0x48>)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4413      	add	r3, r2
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <checkEEPROM4ID+0x26>
			returnVal = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3301      	adds	r3, #1
 8008712:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3301      	adds	r3, #1
 8008718:	607b      	str	r3, [r7, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b0b      	cmp	r3, #11
 800871e:	ddee      	ble.n	80086fe <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008720:	68bb      	ldr	r3, [r7, #8]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr
 800872c:	20000004 	.word	0x20000004
 8008730:	20000ff0 	.word	0x20000ff0

08008734 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af02      	add	r7, sp, #8
 800873a:	4603      	mov	r3, r0
 800873c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	f023 030f 	bic.w	r3, r3, #15
 8008744:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	011b      	lsls	r3, r3, #4
 800874a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800874c:	7b7b      	ldrb	r3, [r7, #13]
 800874e:	f043 030c 	orr.w	r3, r3, #12
 8008752:	b2db      	uxtb	r3, r3
 8008754:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008756:	7b7b      	ldrb	r3, [r7, #13]
 8008758:	f043 0308 	orr.w	r3, r3, #8
 800875c:	b2db      	uxtb	r3, r3
 800875e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008760:	7b3b      	ldrb	r3, [r7, #12]
 8008762:	f043 030c 	orr.w	r3, r3, #12
 8008766:	b2db      	uxtb	r3, r3
 8008768:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800876a:	7b3b      	ldrb	r3, [r7, #12]
 800876c:	f043 0308 	orr.w	r3, r3, #8
 8008770:	b2db      	uxtb	r3, r3
 8008772:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008774:	bf00      	nop
 8008776:	4825      	ldr	r0, [pc, #148]	@ (800880c <lcd_send_cmd+0xd8>)
 8008778:	f002 fac7 	bl	800ad0a <HAL_I2C_GetError>
 800877c:	4603      	mov	r3, r0
 800877e:	2b04      	cmp	r3, #4
 8008780:	d0f9      	beq.n	8008776 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008782:	bf00      	nop
 8008784:	4821      	ldr	r0, [pc, #132]	@ (800880c <lcd_send_cmd+0xd8>)
 8008786:	f002 fab3 	bl	800acf0 <HAL_I2C_GetState>
 800878a:	4603      	mov	r3, r0
 800878c:	2b20      	cmp	r3, #32
 800878e:	d1f9      	bne.n	8008784 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008790:	4b1f      	ldr	r3, [pc, #124]	@ (8008810 <lcd_send_cmd+0xdc>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d116      	bne.n	80087c6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
 800879c:	e00f      	b.n	80087be <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	3310      	adds	r3, #16
 80087a2:	443b      	add	r3, r7
 80087a4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	f022 0208 	bic.w	r2, r2, #8
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	3310      	adds	r3, #16
 80087b2:	443b      	add	r3, r7
 80087b4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	3301      	adds	r3, #1
 80087bc:	73fb      	strb	r3, [r7, #15]
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d9ec      	bls.n	800879e <lcd_send_cmd+0x6a>
 80087c4:	e015      	b.n	80087f2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80087c6:	2300      	movs	r3, #0
 80087c8:	73bb      	strb	r3, [r7, #14]
 80087ca:	e00f      	b.n	80087ec <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	3310      	adds	r3, #16
 80087d0:	443b      	add	r3, r7
 80087d2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	f042 0208 	orr.w	r2, r2, #8
 80087dc:	b2d2      	uxtb	r2, r2
 80087de:	3310      	adds	r3, #16
 80087e0:	443b      	add	r3, r7
 80087e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	3301      	adds	r3, #1
 80087ea:	73bb      	strb	r3, [r7, #14]
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d9ec      	bls.n	80087cc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80087f2:	f107 0208 	add.w	r2, r7, #8
 80087f6:	2364      	movs	r3, #100	@ 0x64
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	2304      	movs	r3, #4
 80087fc:	214e      	movs	r1, #78	@ 0x4e
 80087fe:	4803      	ldr	r0, [pc, #12]	@ (800880c <lcd_send_cmd+0xd8>)
 8008800:	f001 fe16 	bl	800a430 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008804:	bf00      	nop
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20001940 	.word	0x20001940
 8008810:	20001915 	.word	0x20001915

08008814 <lcd_send_data>:

void lcd_send_data (char data) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af02      	add	r7, sp, #8
 800881a:	4603      	mov	r3, r0
 800881c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	f023 030f 	bic.w	r3, r3, #15
 8008824:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	011b      	lsls	r3, r3, #4
 800882a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800882c:	7b7b      	ldrb	r3, [r7, #13]
 800882e:	f043 030d 	orr.w	r3, r3, #13
 8008832:	b2db      	uxtb	r3, r3
 8008834:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008836:	7b7b      	ldrb	r3, [r7, #13]
 8008838:	f043 0309 	orr.w	r3, r3, #9
 800883c:	b2db      	uxtb	r3, r3
 800883e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008840:	7b3b      	ldrb	r3, [r7, #12]
 8008842:	f043 030d 	orr.w	r3, r3, #13
 8008846:	b2db      	uxtb	r3, r3
 8008848:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800884a:	7b3b      	ldrb	r3, [r7, #12]
 800884c:	f043 0309 	orr.w	r3, r3, #9
 8008850:	b2db      	uxtb	r3, r3
 8008852:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008854:	bf00      	nop
 8008856:	4825      	ldr	r0, [pc, #148]	@ (80088ec <lcd_send_data+0xd8>)
 8008858:	f002 fa57 	bl	800ad0a <HAL_I2C_GetError>
 800885c:	4603      	mov	r3, r0
 800885e:	2b04      	cmp	r3, #4
 8008860:	d0f9      	beq.n	8008856 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008862:	bf00      	nop
 8008864:	4821      	ldr	r0, [pc, #132]	@ (80088ec <lcd_send_data+0xd8>)
 8008866:	f002 fa43 	bl	800acf0 <HAL_I2C_GetState>
 800886a:	4603      	mov	r3, r0
 800886c:	2b20      	cmp	r3, #32
 800886e:	d1f9      	bne.n	8008864 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008870:	4b1f      	ldr	r3, [pc, #124]	@ (80088f0 <lcd_send_data+0xdc>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d116      	bne.n	80088a6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	e00f      	b.n	800889e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	3310      	adds	r3, #16
 8008882:	443b      	add	r3, r7
 8008884:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	f022 0208 	bic.w	r2, r2, #8
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	3310      	adds	r3, #16
 8008892:	443b      	add	r3, r7
 8008894:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	3301      	adds	r3, #1
 800889c:	73fb      	strb	r3, [r7, #15]
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d9ec      	bls.n	800887e <lcd_send_data+0x6a>
 80088a4:	e015      	b.n	80088d2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80088a6:	2300      	movs	r3, #0
 80088a8:	73bb      	strb	r3, [r7, #14]
 80088aa:	e00f      	b.n	80088cc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	3310      	adds	r3, #16
 80088b0:	443b      	add	r3, r7
 80088b2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	f042 0208 	orr.w	r2, r2, #8
 80088bc:	b2d2      	uxtb	r2, r2
 80088be:	3310      	adds	r3, #16
 80088c0:	443b      	add	r3, r7
 80088c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	3301      	adds	r3, #1
 80088ca:	73bb      	strb	r3, [r7, #14]
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d9ec      	bls.n	80088ac <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80088d2:	f107 0208 	add.w	r2, r7, #8
 80088d6:	2364      	movs	r3, #100	@ 0x64
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	2304      	movs	r3, #4
 80088dc:	214e      	movs	r1, #78	@ 0x4e
 80088de:	4803      	ldr	r0, [pc, #12]	@ (80088ec <lcd_send_data+0xd8>)
 80088e0:	f001 fda6 	bl	800a430 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80088e4:	bf00      	nop
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20001940 	.word	0x20001940
 80088f0:	20001915 	.word	0x20001915

080088f4 <lcd_send_string>:

void lcd_send_string (char *str) {
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	while (*str) {
 80088fc:	e006      	b.n	800890c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff ff84 	bl	8008814 <lcd_send_data>
	while (*str) {
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1f4      	bne.n	80088fe <lcd_send_string+0xa>
	}
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af02      	add	r7, sp, #8
 8008926:	4603      	mov	r3, r0
 8008928:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	f023 030f 	bic.w	r3, r3, #15
 8008930:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008938:	7b7b      	ldrb	r3, [r7, #13]
 800893a:	f043 030d 	orr.w	r3, r3, #13
 800893e:	b2db      	uxtb	r3, r3
 8008940:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008942:	7b7b      	ldrb	r3, [r7, #13]
 8008944:	f043 0309 	orr.w	r3, r3, #9
 8008948:	b2db      	uxtb	r3, r3
 800894a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800894c:	7b3b      	ldrb	r3, [r7, #12]
 800894e:	f043 030d 	orr.w	r3, r3, #13
 8008952:	b2db      	uxtb	r3, r3
 8008954:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008956:	7b3b      	ldrb	r3, [r7, #12]
 8008958:	f043 0309 	orr.w	r3, r3, #9
 800895c:	b2db      	uxtb	r3, r3
 800895e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008960:	bf00      	nop
 8008962:	4825      	ldr	r0, [pc, #148]	@ (80089f8 <lcd_send_char+0xd8>)
 8008964:	f002 f9d1 	bl	800ad0a <HAL_I2C_GetError>
 8008968:	4603      	mov	r3, r0
 800896a:	2b04      	cmp	r3, #4
 800896c:	d0f9      	beq.n	8008962 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800896e:	bf00      	nop
 8008970:	4821      	ldr	r0, [pc, #132]	@ (80089f8 <lcd_send_char+0xd8>)
 8008972:	f002 f9bd 	bl	800acf0 <HAL_I2C_GetState>
 8008976:	4603      	mov	r3, r0
 8008978:	2b20      	cmp	r3, #32
 800897a:	d1f9      	bne.n	8008970 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800897c:	4b1f      	ldr	r3, [pc, #124]	@ (80089fc <lcd_send_char+0xdc>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d116      	bne.n	80089b2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
 8008988:	e00f      	b.n	80089aa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	3310      	adds	r3, #16
 800898e:	443b      	add	r3, r7
 8008990:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	f022 0208 	bic.w	r2, r2, #8
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	3310      	adds	r3, #16
 800899e:	443b      	add	r3, r7
 80089a0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	3301      	adds	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d9ec      	bls.n	800898a <lcd_send_char+0x6a>
 80089b0:	e015      	b.n	80089de <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80089b2:	2300      	movs	r3, #0
 80089b4:	73bb      	strb	r3, [r7, #14]
 80089b6:	e00f      	b.n	80089d8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	3310      	adds	r3, #16
 80089bc:	443b      	add	r3, r7
 80089be:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	f042 0208 	orr.w	r2, r2, #8
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	3310      	adds	r3, #16
 80089cc:	443b      	add	r3, r7
 80089ce:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	3301      	adds	r3, #1
 80089d6:	73bb      	strb	r3, [r7, #14]
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d9ec      	bls.n	80089b8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80089de:	f107 0208 	add.w	r2, r7, #8
 80089e2:	2364      	movs	r3, #100	@ 0x64
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	2304      	movs	r3, #4
 80089e8:	214e      	movs	r1, #78	@ 0x4e
 80089ea:	4803      	ldr	r0, [pc, #12]	@ (80089f8 <lcd_send_char+0xd8>)
 80089ec:	f001 fd20 	bl	800a430 <HAL_I2C_Master_Transmit>
}
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20001940 	.word	0x20001940
 80089fc:	20001915 	.word	0x20001915

08008a00 <lcd_init>:

void lcd_init (void) {
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008a04:	2002      	movs	r0, #2
 8008a06:	f7ff fe95 	bl	8008734 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008a0a:	2028      	movs	r0, #40	@ 0x28
 8008a0c:	f7ff fe92 	bl	8008734 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008a10:	200c      	movs	r0, #12
 8008a12:	f7ff fe8f 	bl	8008734 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008a16:	2080      	movs	r0, #128	@ 0x80
 8008a18:	f7ff fe8c 	bl	8008734 <lcd_send_cmd>
	lcd_backlight(1);
 8008a1c:	2001      	movs	r0, #1
 8008a1e:	f000 f86d 	bl	8008afc <lcd_backlight>
}
 8008a22:	bf00      	nop
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	460a      	mov	r2, r1
 8008a30:	71fb      	strb	r3, [r7, #7]
 8008a32:	4613      	mov	r3, r2
 8008a34:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d106      	bne.n	8008a4a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008a3c:	79bb      	ldrb	r3, [r7, #6]
 8008a3e:	337f      	adds	r3, #127	@ 0x7f
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff fe76 	bl	8008734 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008a48:	e008      	b.n	8008a5c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d105      	bne.n	8008a5c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008a50:	79bb      	ldrb	r3, [r7, #6]
 8008a52:	3b41      	subs	r3, #65	@ 0x41
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fe6c 	bl	8008734 <lcd_send_cmd>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	603a      	str	r2, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
 8008a70:	460b      	mov	r3, r1
 8008a72:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008a74:	79ba      	ldrb	r2, [r7, #6]
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff ffd3 	bl	8008a26 <lcd_gotoxy>
	lcd_send_string(str);
 8008a80:	6838      	ldr	r0, [r7, #0]
 8008a82:	f7ff ff37 	bl	80088f4 <lcd_send_string>
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	4603      	mov	r3, r0
 8008a96:	71fb      	strb	r3, [r7, #7]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	71bb      	strb	r3, [r7, #6]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008aa0:	79ba      	ldrb	r2, [r7, #6]
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff ffbd 	bl	8008a26 <lcd_gotoxy>
    lcd_send_char(ch);
 8008aac:	797b      	ldrb	r3, [r7, #5]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff ff36 	bl	8008920 <lcd_send_char>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <lcd_clear>:

void lcd_clear(void) {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008ac0:	2001      	movs	r0, #1
 8008ac2:	f7ff fe37 	bl	8008734 <lcd_send_cmd>
    HAL_Delay(2);
 8008ac6:	2002      	movs	r0, #2
 8008ac8:	f000 fd26 	bl	8009518 <HAL_Delay>
}
 8008acc:	bf00      	nop
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	460a      	mov	r2, r1
 8008ada:	71fb      	strb	r3, [r7, #7]
 8008adc:	4613      	mov	r3, r2
 8008ade:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008ae0:	79ba      	ldrb	r2, [r7, #6]
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff ff9d 	bl	8008a26 <lcd_gotoxy>

    lcd_send_char(' ');
 8008aec:	2020      	movs	r0, #32
 8008aee:	f7ff ff17 	bl	8008920 <lcd_send_char>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008b06:	4a05      	ldr	r2, [pc, #20]	@ (8008b1c <lcd_backlight+0x20>)
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f7ff fe11 	bl	8008734 <lcd_send_cmd>
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20001915 	.word	0x20001915

08008b20 <lcd_cursor>:

void lcd_cursor(int state) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d106      	bne.n	8008b3c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8008b2e:	200e      	movs	r0, #14
 8008b30:	f7ff fe00 	bl	8008734 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008b34:	200f      	movs	r0, #15
 8008b36:	f7ff fdfd 	bl	8008734 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8008b3a:	e002      	b.n	8008b42 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8008b3c:	200c      	movs	r0, #12
 8008b3e:	f7ff fdf9 	bl	8008734 <lcd_send_cmd>
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008b54:	4b04      	ldr	r3, [pc, #16]	@ (8008b68 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	4a03      	ldr	r2, [pc, #12]	@ (8008b68 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008b5c:	6013      	str	r3, [r2, #0]
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bc80      	pop	{r7}
 8008b66:	4770      	bx	lr
 8008b68:	200010a0 	.word	0x200010a0

08008b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008b70:	f000 fc70 	bl	8009454 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008b74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008b78:	f000 fcce 	bl	8009518 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008b7c:	f000 f89c 	bl	8008cb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008b80:	f000 f9be 	bl	8008f00 <MX_GPIO_Init>
  MX_CAN_Init();
 8008b84:	f000 f8de 	bl	8008d44 <MX_CAN_Init>
  MX_I2C1_Init();
 8008b88:	f000 f910 	bl	8008dac <MX_I2C1_Init>
  MX_TIM1_Init();
 8008b8c:	f000 f93c 	bl	8008e08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008b90:	f000 f98c 	bl	8008eac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008b94:	2201      	movs	r2, #1
 8008b96:	2140      	movs	r1, #64	@ 0x40
 8008b98:	483e      	ldr	r0, [pc, #248]	@ (8008c94 <main+0x128>)
 8008b9a:	f001 faa4 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	2180      	movs	r1, #128	@ 0x80
 8008ba2:	483c      	ldr	r0, [pc, #240]	@ (8008c94 <main+0x128>)
 8008ba4:	f001 fa9f 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008ba8:	200a      	movs	r0, #10
 8008baa:	f000 fcb5 	bl	8009518 <HAL_Delay>
  lcd_init();
 8008bae:	f7ff ff27 	bl	8008a00 <lcd_init>
  HAL_Delay(10);
 8008bb2:	200a      	movs	r0, #10
 8008bb4:	f000 fcb0 	bl	8009518 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8008bb8:	4837      	ldr	r0, [pc, #220]	@ (8008c98 <main+0x12c>)
 8008bba:	f003 f947 	bl	800be4c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008bbe:	bf00      	nop
 8008bc0:	4836      	ldr	r0, [pc, #216]	@ (8008c9c <main+0x130>)
 8008bc2:	f002 f8a2 	bl	800ad0a <HAL_I2C_GetError>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d0f9      	beq.n	8008bc0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008bcc:	bf00      	nop
 8008bce:	4833      	ldr	r0, [pc, #204]	@ (8008c9c <main+0x130>)
 8008bd0:	f002 f88e 	bl	800acf0 <HAL_I2C_GetState>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d1f9      	bne.n	8008bce <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008be0:	482c      	ldr	r0, [pc, #176]	@ (8008c94 <main+0x128>)
 8008be2:	f001 fa80 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008be6:	2200      	movs	r2, #0
 8008be8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008bec:	4829      	ldr	r0, [pc, #164]	@ (8008c94 <main+0x128>)
 8008bee:	f001 fa7a 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2104      	movs	r1, #4
 8008bf6:	4827      	ldr	r0, [pc, #156]	@ (8008c94 <main+0x128>)
 8008bf8:	f001 fa75 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2102      	movs	r1, #2
 8008c00:	4824      	ldr	r0, [pc, #144]	@ (8008c94 <main+0x128>)
 8008c02:	f001 fa70 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008c06:	2200      	movs	r2, #0
 8008c08:	2101      	movs	r1, #1
 8008c0a:	4822      	ldr	r0, [pc, #136]	@ (8008c94 <main+0x128>)
 8008c0c:	f001 fa6b 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008c10:	2200      	movs	r2, #0
 8008c12:	2120      	movs	r1, #32
 8008c14:	4822      	ldr	r0, [pc, #136]	@ (8008ca0 <main+0x134>)
 8008c16:	f001 fa66 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2110      	movs	r1, #16
 8008c1e:	4820      	ldr	r0, [pc, #128]	@ (8008ca0 <main+0x134>)
 8008c20:	f001 fa61 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008c24:	2200      	movs	r2, #0
 8008c26:	2180      	movs	r1, #128	@ 0x80
 8008c28:	481e      	ldr	r0, [pc, #120]	@ (8008ca4 <main+0x138>)
 8008c2a:	f001 fa5c 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2140      	movs	r1, #64	@ 0x40
 8008c32:	481c      	ldr	r0, [pc, #112]	@ (8008ca4 <main+0x138>)
 8008c34:	f001 fa57 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2120      	movs	r1, #32
 8008c3c:	4819      	ldr	r0, [pc, #100]	@ (8008ca4 <main+0x138>)
 8008c3e:	f001 fa52 	bl	800a0e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008c42:	2200      	movs	r2, #0
 8008c44:	2110      	movs	r1, #16
 8008c46:	4817      	ldr	r0, [pc, #92]	@ (8008ca4 <main+0x138>)
 8008c48:	f001 fa4d 	bl	800a0e6 <HAL_GPIO_WritePin>

  i2cTest();
 8008c4c:	f7f8 f846 	bl	8000cdc <i2cTest>
  HAL_Delay(100);
 8008c50:	2064      	movs	r0, #100	@ 0x64
 8008c52:	f000 fc61 	bl	8009518 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008c56:	4a14      	ldr	r2, [pc, #80]	@ (8008ca8 <main+0x13c>)
 8008c58:	2101      	movs	r1, #1
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	f7ff ff02 	bl	8008a64 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008c60:	4a12      	ldr	r2, [pc, #72]	@ (8008cac <main+0x140>)
 8008c62:	2101      	movs	r1, #1
 8008c64:	2002      	movs	r0, #2
 8008c66:	f7ff fefd 	bl	8008a64 <lcd_print>
  HAL_Delay(1000);
 8008c6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c6e:	f000 fc53 	bl	8009518 <HAL_Delay>
  lcd_clear();
 8008c72:	f7ff ff23 	bl	8008abc <lcd_clear>

  eepromKontrol();
 8008c76:	f7f7 fadd 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008c7a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008c7e:	f000 fc4b 	bl	8009518 <HAL_Delay>

  backLightTimer = millis;
 8008c82:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb0 <main+0x144>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a0b      	ldr	r2, [pc, #44]	@ (8008cb4 <main+0x148>)
 8008c88:	6013      	str	r3, [r2, #0]

  iotSetup();
 8008c8a:	f7ff fcf7 	bl	800867c <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008c8e:	f7fd f86d 	bl	8005d6c <mainLoop>
 8008c92:	e7fc      	b.n	8008c8e <main+0x122>
 8008c94:	40010c00 	.word	0x40010c00
 8008c98:	20001994 	.word	0x20001994
 8008c9c:	20001940 	.word	0x20001940
 8008ca0:	40011000 	.word	0x40011000
 8008ca4:	40010800 	.word	0x40010800
 8008ca8:	200000a0 	.word	0x200000a0
 8008cac:	200000b4 	.word	0x200000b4
 8008cb0:	200010a0 	.word	0x200010a0
 8008cb4:	200010bc 	.word	0x200010bc

08008cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b090      	sub	sp, #64	@ 0x40
 8008cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cbe:	f107 0318 	add.w	r3, r7, #24
 8008cc2:	2228      	movs	r2, #40	@ 0x28
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f004 fb5e 	bl	800d388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008ccc:	1d3b      	adds	r3, r7, #4
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
 8008cd4:	609a      	str	r2, [r3, #8]
 8008cd6:	60da      	str	r2, [r3, #12]
 8008cd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008cde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008ce2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008cec:	2302      	movs	r3, #2
 8008cee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008cf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008cf6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008cfc:	f107 0318 	add.w	r3, r7, #24
 8008d00:	4618      	mov	r0, r3
 8008d02:	f002 fc43 	bl	800b58c <HAL_RCC_OscConfig>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008d0c:	f000 f9a2 	bl	8009054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d10:	230f      	movs	r3, #15
 8008d12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d14:	2302      	movs	r3, #2
 8008d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008d1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d22:	2300      	movs	r3, #0
 8008d24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008d26:	1d3b      	adds	r3, r7, #4
 8008d28:	2102      	movs	r1, #2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f002 feb0 	bl	800ba90 <HAL_RCC_ClockConfig>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008d36:	f000 f98d 	bl	8009054 <Error_Handler>
  }
}
 8008d3a:	bf00      	nop
 8008d3c:	3740      	adds	r7, #64	@ 0x40
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008d48:	4b16      	ldr	r3, [pc, #88]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d4a:	4a17      	ldr	r2, [pc, #92]	@ (8008da8 <MX_CAN_Init+0x64>)
 8008d4c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008d4e:	4b15      	ldr	r3, [pc, #84]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d50:	2210      	movs	r2, #16
 8008d52:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008d54:	4b13      	ldr	r3, [pc, #76]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008d5a:	4b12      	ldr	r3, [pc, #72]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008d60:	4b10      	ldr	r3, [pc, #64]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008d66:	4b0f      	ldr	r3, [pc, #60]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008d72:	4b0c      	ldr	r3, [pc, #48]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008d78:	4b0a      	ldr	r3, [pc, #40]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008d7e:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008d84:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008d8a:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008d90:	4804      	ldr	r0, [pc, #16]	@ (8008da4 <MX_CAN_Init+0x60>)
 8008d92:	f000 fbe5 	bl	8009560 <HAL_CAN_Init>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008d9c:	f000 f95a 	bl	8009054 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008da0:	bf00      	nop
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20001918 	.word	0x20001918
 8008da8:	40006400 	.word	0x40006400

08008dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008db0:	4b12      	ldr	r3, [pc, #72]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008db2:	4a13      	ldr	r2, [pc, #76]	@ (8008e00 <MX_I2C1_Init+0x54>)
 8008db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008db6:	4b11      	ldr	r3, [pc, #68]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008db8:	4a12      	ldr	r2, [pc, #72]	@ (8008e04 <MX_I2C1_Init+0x58>)
 8008dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008dca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008dd6:	4b09      	ldr	r3, [pc, #36]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008ddc:	4b07      	ldr	r3, [pc, #28]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008de2:	4b06      	ldr	r3, [pc, #24]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008de8:	4804      	ldr	r0, [pc, #16]	@ (8008dfc <MX_I2C1_Init+0x50>)
 8008dea:	f001 f9ad 	bl	800a148 <HAL_I2C_Init>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008df4:	f000 f92e 	bl	8009054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008df8:	bf00      	nop
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20001940 	.word	0x20001940
 8008e00:	40005400 	.word	0x40005400
 8008e04:	00061a80 	.word	0x00061a80

08008e08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008e0e:	f107 0308 	add.w	r3, r7, #8
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	609a      	str	r2, [r3, #8]
 8008e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e1c:	463b      	mov	r3, r7
 8008e1e:	2200      	movs	r2, #0
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008e24:	4b1f      	ldr	r3, [pc, #124]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e26:	4a20      	ldr	r2, [pc, #128]	@ (8008ea8 <MX_TIM1_Init+0xa0>)
 8008e28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e2c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008e30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e32:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008e38:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e3a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008e3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e40:	4b18      	ldr	r3, [pc, #96]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008e46:	4b17      	ldr	r3, [pc, #92]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e4c:	4b15      	ldr	r3, [pc, #84]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008e52:	4814      	ldr	r0, [pc, #80]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e54:	f002 ffaa 	bl	800bdac <HAL_TIM_Base_Init>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008e5e:	f000 f8f9 	bl	8009054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008e62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008e68:	f107 0308 	add.w	r3, r7, #8
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	480d      	ldr	r0, [pc, #52]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e70:	f003 f954 	bl	800c11c <HAL_TIM_ConfigClockSource>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008e7a:	f000 f8eb 	bl	8009054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008e86:	463b      	mov	r3, r7
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4806      	ldr	r0, [pc, #24]	@ (8008ea4 <MX_TIM1_Init+0x9c>)
 8008e8c:	f003 fb42 	bl	800c514 <HAL_TIMEx_MasterConfigSynchronization>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008e96:	f000 f8dd 	bl	8009054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008e9a:	bf00      	nop
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20001994 	.word	0x20001994
 8008ea8:	40012c00 	.word	0x40012c00

08008eac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008eb0:	4b11      	ldr	r3, [pc, #68]	@ (8008ef8 <MX_USART1_UART_Init+0x4c>)
 8008eb2:	4a12      	ldr	r2, [pc, #72]	@ (8008efc <MX_USART1_UART_Init+0x50>)
 8008eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008eb6:	4b10      	ldr	r3, [pc, #64]	@ (8008ef8 <MX_USART1_UART_Init+0x4c>)
 8008eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef8 <MX_USART1_UART_Init+0x4c>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef8 <MX_USART1_UART_Init+0x4c>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008eca:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef8 <MX_USART1_UART_Init+0x4c>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008ed0:	4b09      	ldr	r3, [pc, #36]	@ (8008ef8 <MX_USART1_UART_Init+0x4c>)
 8008ed2:	220c      	movs	r2, #12
 8008ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ed6:	4b08      	ldr	r3, [pc, #32]	@ (8008ef8 <MX_USART1_UART_Init+0x4c>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008edc:	4b06      	ldr	r3, [pc, #24]	@ (8008ef8 <MX_USART1_UART_Init+0x4c>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008ee2:	4805      	ldr	r0, [pc, #20]	@ (8008ef8 <MX_USART1_UART_Init+0x4c>)
 8008ee4:	f003 fb94 	bl	800c610 <HAL_UART_Init>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008eee:	f000 f8b1 	bl	8009054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008ef2:	bf00      	nop
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200019dc 	.word	0x200019dc
 8008efc:	40013800 	.word	0x40013800

08008f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f06:	f107 0310 	add.w	r3, r7, #16
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	605a      	str	r2, [r3, #4]
 8008f10:	609a      	str	r2, [r3, #8]
 8008f12:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f14:	4b4b      	ldr	r3, [pc, #300]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	4a4a      	ldr	r2, [pc, #296]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f1a:	f043 0310 	orr.w	r3, r3, #16
 8008f1e:	6193      	str	r3, [r2, #24]
 8008f20:	4b48      	ldr	r3, [pc, #288]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	f003 0310 	and.w	r3, r3, #16
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f2c:	4b45      	ldr	r3, [pc, #276]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	4a44      	ldr	r2, [pc, #272]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f32:	f043 0320 	orr.w	r3, r3, #32
 8008f36:	6193      	str	r3, [r2, #24]
 8008f38:	4b42      	ldr	r3, [pc, #264]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	f003 0320 	and.w	r3, r3, #32
 8008f40:	60bb      	str	r3, [r7, #8]
 8008f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f44:	4b3f      	ldr	r3, [pc, #252]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	4a3e      	ldr	r2, [pc, #248]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f4a:	f043 0304 	orr.w	r3, r3, #4
 8008f4e:	6193      	str	r3, [r2, #24]
 8008f50:	4b3c      	ldr	r3, [pc, #240]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	607b      	str	r3, [r7, #4]
 8008f5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f5c:	4b39      	ldr	r3, [pc, #228]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	4a38      	ldr	r2, [pc, #224]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f62:	f043 0308 	orr.w	r3, r3, #8
 8008f66:	6193      	str	r3, [r2, #24]
 8008f68:	4b36      	ldr	r3, [pc, #216]	@ (8009044 <MX_GPIO_Init+0x144>)
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008f74:	2200      	movs	r2, #0
 8008f76:	21f0      	movs	r1, #240	@ 0xf0
 8008f78:	4833      	ldr	r0, [pc, #204]	@ (8009048 <MX_GPIO_Init+0x148>)
 8008f7a:	f001 f8b4 	bl	800a0e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008f84:	4831      	ldr	r0, [pc, #196]	@ (800904c <MX_GPIO_Init+0x14c>)
 8008f86:	f001 f8ae 	bl	800a0e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008f90:	482f      	ldr	r0, [pc, #188]	@ (8009050 <MX_GPIO_Init+0x150>)
 8008f92:	f001 f8a8 	bl	800a0e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008f96:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008f9a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fa4:	f107 0310 	add.w	r3, r7, #16
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4828      	ldr	r0, [pc, #160]	@ (800904c <MX_GPIO_Init+0x14c>)
 8008fac:	f000 fe24 	bl	8009bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008fb0:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008fb4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fbe:	f107 0310 	add.w	r3, r7, #16
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4820      	ldr	r0, [pc, #128]	@ (8009048 <MX_GPIO_Init+0x148>)
 8008fc6:	f000 fe17 	bl	8009bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008fca:	23f0      	movs	r3, #240	@ 0xf0
 8008fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fda:	f107 0310 	add.w	r3, r7, #16
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4819      	ldr	r0, [pc, #100]	@ (8009048 <MX_GPIO_Init+0x148>)
 8008fe2:	f000 fe09 	bl	8009bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008fe6:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fec:	2301      	movs	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ff8:	f107 0310 	add.w	r3, r7, #16
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4813      	ldr	r0, [pc, #76]	@ (800904c <MX_GPIO_Init+0x14c>)
 8009000:	f000 fdfa 	bl	8009bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009004:	f640 4307 	movw	r3, #3079	@ 0xc07
 8009008:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800900a:	2301      	movs	r3, #1
 800900c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800900e:	2300      	movs	r3, #0
 8009010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009012:	2302      	movs	r3, #2
 8009014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009016:	f107 0310 	add.w	r3, r7, #16
 800901a:	4619      	mov	r1, r3
 800901c:	480c      	ldr	r0, [pc, #48]	@ (8009050 <MX_GPIO_Init+0x150>)
 800901e:	f000 fdeb 	bl	8009bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8009022:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8009026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800902c:	2300      	movs	r3, #0
 800902e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009030:	f107 0310 	add.w	r3, r7, #16
 8009034:	4619      	mov	r1, r3
 8009036:	4806      	ldr	r0, [pc, #24]	@ (8009050 <MX_GPIO_Init+0x150>)
 8009038:	f000 fdde 	bl	8009bf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800903c:	bf00      	nop
 800903e:	3720      	adds	r7, #32
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	40021000 	.word	0x40021000
 8009048:	40010800 	.word	0x40010800
 800904c:	40011000 	.word	0x40011000
 8009050:	40010c00 	.word	0x40010c00

08009054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009054:	b480      	push	{r7}
 8009056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009058:	bf00      	nop
 800905a:	46bd      	mov	sp, r7
 800905c:	bc80      	pop	{r7}
 800905e:	4770      	bx	lr

08009060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009066:	4b15      	ldr	r3, [pc, #84]	@ (80090bc <HAL_MspInit+0x5c>)
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	4a14      	ldr	r2, [pc, #80]	@ (80090bc <HAL_MspInit+0x5c>)
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	6193      	str	r3, [r2, #24]
 8009072:	4b12      	ldr	r3, [pc, #72]	@ (80090bc <HAL_MspInit+0x5c>)
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800907e:	4b0f      	ldr	r3, [pc, #60]	@ (80090bc <HAL_MspInit+0x5c>)
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	4a0e      	ldr	r2, [pc, #56]	@ (80090bc <HAL_MspInit+0x5c>)
 8009084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009088:	61d3      	str	r3, [r2, #28]
 800908a:	4b0c      	ldr	r3, [pc, #48]	@ (80090bc <HAL_MspInit+0x5c>)
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009092:	607b      	str	r3, [r7, #4]
 8009094:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009096:	4b0a      	ldr	r3, [pc, #40]	@ (80090c0 <HAL_MspInit+0x60>)
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	4a04      	ldr	r2, [pc, #16]	@ (80090c0 <HAL_MspInit+0x60>)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80090b2:	bf00      	nop
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr
 80090bc:	40021000 	.word	0x40021000
 80090c0:	40010000 	.word	0x40010000

080090c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090cc:	f107 0310 	add.w	r3, r7, #16
 80090d0:	2200      	movs	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	605a      	str	r2, [r3, #4]
 80090d6:	609a      	str	r2, [r3, #8]
 80090d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a1c      	ldr	r2, [pc, #112]	@ (8009150 <HAL_CAN_MspInit+0x8c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d131      	bne.n	8009148 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80090e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009154 <HAL_CAN_MspInit+0x90>)
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	4a1a      	ldr	r2, [pc, #104]	@ (8009154 <HAL_CAN_MspInit+0x90>)
 80090ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80090ee:	61d3      	str	r3, [r2, #28]
 80090f0:	4b18      	ldr	r3, [pc, #96]	@ (8009154 <HAL_CAN_MspInit+0x90>)
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090fc:	4b15      	ldr	r3, [pc, #84]	@ (8009154 <HAL_CAN_MspInit+0x90>)
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	4a14      	ldr	r2, [pc, #80]	@ (8009154 <HAL_CAN_MspInit+0x90>)
 8009102:	f043 0304 	orr.w	r3, r3, #4
 8009106:	6193      	str	r3, [r2, #24]
 8009108:	4b12      	ldr	r3, [pc, #72]	@ (8009154 <HAL_CAN_MspInit+0x90>)
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	60bb      	str	r3, [r7, #8]
 8009112:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009114:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009118:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800911a:	2300      	movs	r3, #0
 800911c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800911e:	2300      	movs	r3, #0
 8009120:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009122:	f107 0310 	add.w	r3, r7, #16
 8009126:	4619      	mov	r1, r3
 8009128:	480b      	ldr	r0, [pc, #44]	@ (8009158 <HAL_CAN_MspInit+0x94>)
 800912a:	f000 fd65 	bl	8009bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800912e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009134:	2302      	movs	r3, #2
 8009136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009138:	2303      	movs	r3, #3
 800913a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800913c:	f107 0310 	add.w	r3, r7, #16
 8009140:	4619      	mov	r1, r3
 8009142:	4805      	ldr	r0, [pc, #20]	@ (8009158 <HAL_CAN_MspInit+0x94>)
 8009144:	f000 fd58 	bl	8009bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8009148:	bf00      	nop
 800914a:	3720      	adds	r7, #32
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	40006400 	.word	0x40006400
 8009154:	40021000 	.word	0x40021000
 8009158:	40010800 	.word	0x40010800

0800915c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009164:	f107 0310 	add.w	r3, r7, #16
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
 800916c:	605a      	str	r2, [r3, #4]
 800916e:	609a      	str	r2, [r3, #8]
 8009170:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a15      	ldr	r2, [pc, #84]	@ (80091cc <HAL_I2C_MspInit+0x70>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d123      	bne.n	80091c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800917c:	4b14      	ldr	r3, [pc, #80]	@ (80091d0 <HAL_I2C_MspInit+0x74>)
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	4a13      	ldr	r2, [pc, #76]	@ (80091d0 <HAL_I2C_MspInit+0x74>)
 8009182:	f043 0308 	orr.w	r3, r3, #8
 8009186:	6193      	str	r3, [r2, #24]
 8009188:	4b11      	ldr	r3, [pc, #68]	@ (80091d0 <HAL_I2C_MspInit+0x74>)
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	f003 0308 	and.w	r3, r3, #8
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009194:	23c0      	movs	r3, #192	@ 0xc0
 8009196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009198:	2312      	movs	r3, #18
 800919a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800919c:	2303      	movs	r3, #3
 800919e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091a0:	f107 0310 	add.w	r3, r7, #16
 80091a4:	4619      	mov	r1, r3
 80091a6:	480b      	ldr	r0, [pc, #44]	@ (80091d4 <HAL_I2C_MspInit+0x78>)
 80091a8:	f000 fd26 	bl	8009bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80091ac:	4b08      	ldr	r3, [pc, #32]	@ (80091d0 <HAL_I2C_MspInit+0x74>)
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	4a07      	ldr	r2, [pc, #28]	@ (80091d0 <HAL_I2C_MspInit+0x74>)
 80091b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80091b6:	61d3      	str	r3, [r2, #28]
 80091b8:	4b05      	ldr	r3, [pc, #20]	@ (80091d0 <HAL_I2C_MspInit+0x74>)
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091c0:	60bb      	str	r3, [r7, #8]
 80091c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80091c4:	bf00      	nop
 80091c6:	3720      	adds	r7, #32
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	40005400 	.word	0x40005400
 80091d0:	40021000 	.word	0x40021000
 80091d4:	40010c00 	.word	0x40010c00

080091d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a0a      	ldr	r2, [pc, #40]	@ (8009210 <HAL_I2C_MspDeInit+0x38>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d10d      	bne.n	8009206 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80091ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009214 <HAL_I2C_MspDeInit+0x3c>)
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	4a09      	ldr	r2, [pc, #36]	@ (8009214 <HAL_I2C_MspDeInit+0x3c>)
 80091f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091f4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80091f6:	2140      	movs	r1, #64	@ 0x40
 80091f8:	4807      	ldr	r0, [pc, #28]	@ (8009218 <HAL_I2C_MspDeInit+0x40>)
 80091fa:	f000 fe91 	bl	8009f20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80091fe:	2180      	movs	r1, #128	@ 0x80
 8009200:	4805      	ldr	r0, [pc, #20]	@ (8009218 <HAL_I2C_MspDeInit+0x40>)
 8009202:	f000 fe8d 	bl	8009f20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009206:	bf00      	nop
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	40005400 	.word	0x40005400
 8009214:	40021000 	.word	0x40021000
 8009218:	40010c00 	.word	0x40010c00

0800921c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a0d      	ldr	r2, [pc, #52]	@ (8009260 <HAL_TIM_Base_MspInit+0x44>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d113      	bne.n	8009256 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800922e:	4b0d      	ldr	r3, [pc, #52]	@ (8009264 <HAL_TIM_Base_MspInit+0x48>)
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	4a0c      	ldr	r2, [pc, #48]	@ (8009264 <HAL_TIM_Base_MspInit+0x48>)
 8009234:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009238:	6193      	str	r3, [r2, #24]
 800923a:	4b0a      	ldr	r3, [pc, #40]	@ (8009264 <HAL_TIM_Base_MspInit+0x48>)
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009246:	2200      	movs	r2, #0
 8009248:	2100      	movs	r1, #0
 800924a:	2019      	movs	r0, #25
 800924c:	f000 fb5b 	bl	8009906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009250:	2019      	movs	r0, #25
 8009252:	f000 fb74 	bl	800993e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8009256:	bf00      	nop
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	40012c00 	.word	0x40012c00
 8009264:	40021000 	.word	0x40021000

08009268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009270:	f107 0310 	add.w	r3, r7, #16
 8009274:	2200      	movs	r2, #0
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	605a      	str	r2, [r3, #4]
 800927a:	609a      	str	r2, [r3, #8]
 800927c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a20      	ldr	r2, [pc, #128]	@ (8009304 <HAL_UART_MspInit+0x9c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d139      	bne.n	80092fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009288:	4b1f      	ldr	r3, [pc, #124]	@ (8009308 <HAL_UART_MspInit+0xa0>)
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	4a1e      	ldr	r2, [pc, #120]	@ (8009308 <HAL_UART_MspInit+0xa0>)
 800928e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009292:	6193      	str	r3, [r2, #24]
 8009294:	4b1c      	ldr	r3, [pc, #112]	@ (8009308 <HAL_UART_MspInit+0xa0>)
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092a0:	4b19      	ldr	r3, [pc, #100]	@ (8009308 <HAL_UART_MspInit+0xa0>)
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	4a18      	ldr	r2, [pc, #96]	@ (8009308 <HAL_UART_MspInit+0xa0>)
 80092a6:	f043 0304 	orr.w	r3, r3, #4
 80092aa:	6193      	str	r3, [r2, #24]
 80092ac:	4b16      	ldr	r3, [pc, #88]	@ (8009308 <HAL_UART_MspInit+0xa0>)
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	60bb      	str	r3, [r7, #8]
 80092b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80092b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092be:	2302      	movs	r3, #2
 80092c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80092c2:	2303      	movs	r3, #3
 80092c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092c6:	f107 0310 	add.w	r3, r7, #16
 80092ca:	4619      	mov	r1, r3
 80092cc:	480f      	ldr	r0, [pc, #60]	@ (800930c <HAL_UART_MspInit+0xa4>)
 80092ce:	f000 fc93 	bl	8009bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80092d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092d8:	2300      	movs	r3, #0
 80092da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092dc:	2300      	movs	r3, #0
 80092de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092e0:	f107 0310 	add.w	r3, r7, #16
 80092e4:	4619      	mov	r1, r3
 80092e6:	4809      	ldr	r0, [pc, #36]	@ (800930c <HAL_UART_MspInit+0xa4>)
 80092e8:	f000 fc86 	bl	8009bf8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80092ec:	2200      	movs	r2, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	2025      	movs	r0, #37	@ 0x25
 80092f2:	f000 fb08 	bl	8009906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80092f6:	2025      	movs	r0, #37	@ 0x25
 80092f8:	f000 fb21 	bl	800993e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80092fc:	bf00      	nop
 80092fe:	3720      	adds	r7, #32
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	40013800 	.word	0x40013800
 8009308:	40021000 	.word	0x40021000
 800930c:	40010800 	.word	0x40010800

08009310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009310:	b480      	push	{r7}
 8009312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <NMI_Handler+0x4>

08009318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800931c:	bf00      	nop
 800931e:	e7fd      	b.n	800931c <HardFault_Handler+0x4>

08009320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009324:	bf00      	nop
 8009326:	e7fd      	b.n	8009324 <MemManage_Handler+0x4>

08009328 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800932c:	bf00      	nop
 800932e:	e7fd      	b.n	800932c <BusFault_Handler+0x4>

08009330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009334:	bf00      	nop
 8009336:	e7fd      	b.n	8009334 <UsageFault_Handler+0x4>

08009338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800933c:	bf00      	nop
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr

08009344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009344:	b480      	push	{r7}
 8009346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009348:	bf00      	nop
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr

08009350 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009350:	b480      	push	{r7}
 8009352:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009354:	bf00      	nop
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009360:	f000 f8be 	bl	80094e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009364:	bf00      	nop
 8009366:	bd80      	pop	{r7, pc}

08009368 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800936c:	4802      	ldr	r0, [pc, #8]	@ (8009378 <TIM1_UP_IRQHandler+0x10>)
 800936e:	f002 fdcd 	bl	800bf0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009372:	bf00      	nop
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20001994 	.word	0x20001994

0800937c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009380:	4802      	ldr	r0, [pc, #8]	@ (800938c <USART1_IRQHandler+0x10>)
 8009382:	f003 f9cb 	bl	800c71c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009386:	bf00      	nop
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	200019dc 	.word	0x200019dc

08009390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009398:	4a14      	ldr	r2, [pc, #80]	@ (80093ec <_sbrk+0x5c>)
 800939a:	4b15      	ldr	r3, [pc, #84]	@ (80093f0 <_sbrk+0x60>)
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80093a4:	4b13      	ldr	r3, [pc, #76]	@ (80093f4 <_sbrk+0x64>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80093ac:	4b11      	ldr	r3, [pc, #68]	@ (80093f4 <_sbrk+0x64>)
 80093ae:	4a12      	ldr	r2, [pc, #72]	@ (80093f8 <_sbrk+0x68>)
 80093b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80093b2:	4b10      	ldr	r3, [pc, #64]	@ (80093f4 <_sbrk+0x64>)
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4413      	add	r3, r2
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d207      	bcs.n	80093d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80093c0:	f003 fffa 	bl	800d3b8 <__errno>
 80093c4:	4603      	mov	r3, r0
 80093c6:	220c      	movs	r2, #12
 80093c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80093ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093ce:	e009      	b.n	80093e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80093d0:	4b08      	ldr	r3, [pc, #32]	@ (80093f4 <_sbrk+0x64>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80093d6:	4b07      	ldr	r3, [pc, #28]	@ (80093f4 <_sbrk+0x64>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4413      	add	r3, r2
 80093de:	4a05      	ldr	r2, [pc, #20]	@ (80093f4 <_sbrk+0x64>)
 80093e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80093e2:	68fb      	ldr	r3, [r7, #12]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	2000c000 	.word	0x2000c000
 80093f0:	00000400 	.word	0x00000400
 80093f4:	20001a24 	.word	0x20001a24
 80093f8:	20001b78 	.word	0x20001b78

080093fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009400:	bf00      	nop
 8009402:	46bd      	mov	sp, r7
 8009404:	bc80      	pop	{r7}
 8009406:	4770      	bx	lr

08009408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009408:	480c      	ldr	r0, [pc, #48]	@ (800943c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800940a:	490d      	ldr	r1, [pc, #52]	@ (8009440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800940c:	4a0d      	ldr	r2, [pc, #52]	@ (8009444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800940e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009410:	e002      	b.n	8009418 <LoopCopyDataInit>

08009412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009416:	3304      	adds	r3, #4

08009418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800941a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800941c:	d3f9      	bcc.n	8009412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800941e:	4a0a      	ldr	r2, [pc, #40]	@ (8009448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009420:	4c0a      	ldr	r4, [pc, #40]	@ (800944c <LoopFillZerobss+0x22>)
  movs r3, #0
 8009422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009424:	e001      	b.n	800942a <LoopFillZerobss>

08009426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009428:	3204      	adds	r2, #4

0800942a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800942a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800942c:	d3fb      	bcc.n	8009426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800942e:	f7ff ffe5 	bl	80093fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009432:	f003 ffc7 	bl	800d3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009436:	f7ff fb99 	bl	8008b6c <main>
  bx lr
 800943a:	4770      	bx	lr
  ldr r0, =_sdata
 800943c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009440:	20000fd4 	.word	0x20000fd4
  ldr r2, =_sidata
 8009444:	0800df00 	.word	0x0800df00
  ldr r2, =_sbss
 8009448:	20000fd4 	.word	0x20000fd4
  ldr r4, =_ebss
 800944c:	20001b74 	.word	0x20001b74

08009450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009450:	e7fe      	b.n	8009450 <ADC1_2_IRQHandler>
	...

08009454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009458:	4b08      	ldr	r3, [pc, #32]	@ (800947c <HAL_Init+0x28>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a07      	ldr	r2, [pc, #28]	@ (800947c <HAL_Init+0x28>)
 800945e:	f043 0310 	orr.w	r3, r3, #16
 8009462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009464:	2003      	movs	r0, #3
 8009466:	f000 fa43 	bl	80098f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800946a:	200f      	movs	r0, #15
 800946c:	f000 f808 	bl	8009480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009470:	f7ff fdf6 	bl	8009060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	40022000 	.word	0x40022000

08009480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009488:	4b12      	ldr	r3, [pc, #72]	@ (80094d4 <HAL_InitTick+0x54>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	4b12      	ldr	r3, [pc, #72]	@ (80094d8 <HAL_InitTick+0x58>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	4619      	mov	r1, r3
 8009492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009496:	fbb3 f3f1 	udiv	r3, r3, r1
 800949a:	fbb2 f3f3 	udiv	r3, r2, r3
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fa5b 	bl	800995a <HAL_SYSTICK_Config>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e00e      	b.n	80094cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b0f      	cmp	r3, #15
 80094b2:	d80a      	bhi.n	80094ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80094b4:	2200      	movs	r2, #0
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094bc:	f000 fa23 	bl	8009906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80094c0:	4a06      	ldr	r2, [pc, #24]	@ (80094dc <HAL_InitTick+0x5c>)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	e000      	b.n	80094cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20000f78 	.word	0x20000f78
 80094d8:	20000f80 	.word	0x20000f80
 80094dc:	20000f7c 	.word	0x20000f7c

080094e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80094e4:	4b05      	ldr	r3, [pc, #20]	@ (80094fc <HAL_IncTick+0x1c>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	4b05      	ldr	r3, [pc, #20]	@ (8009500 <HAL_IncTick+0x20>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4413      	add	r3, r2
 80094f0:	4a03      	ldr	r2, [pc, #12]	@ (8009500 <HAL_IncTick+0x20>)
 80094f2:	6013      	str	r3, [r2, #0]
}
 80094f4:	bf00      	nop
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bc80      	pop	{r7}
 80094fa:	4770      	bx	lr
 80094fc:	20000f80 	.word	0x20000f80
 8009500:	20001a28 	.word	0x20001a28

08009504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  return uwTick;
 8009508:	4b02      	ldr	r3, [pc, #8]	@ (8009514 <HAL_GetTick+0x10>)
 800950a:	681b      	ldr	r3, [r3, #0]
}
 800950c:	4618      	mov	r0, r3
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr
 8009514:	20001a28 	.word	0x20001a28

08009518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009520:	f7ff fff0 	bl	8009504 <HAL_GetTick>
 8009524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009530:	d005      	beq.n	800953e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009532:	4b0a      	ldr	r3, [pc, #40]	@ (800955c <HAL_Delay+0x44>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4413      	add	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800953e:	bf00      	nop
 8009540:	f7ff ffe0 	bl	8009504 <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	429a      	cmp	r2, r3
 800954e:	d8f7      	bhi.n	8009540 <HAL_Delay+0x28>
  {
  }
}
 8009550:	bf00      	nop
 8009552:	bf00      	nop
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000f80 	.word	0x20000f80

08009560 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e0ed      	b.n	800974e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d102      	bne.n	8009584 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fda0 	bl	80090c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f042 0201 	orr.w	r2, r2, #1
 8009592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009594:	f7ff ffb6 	bl	8009504 <HAL_GetTick>
 8009598:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800959a:	e012      	b.n	80095c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800959c:	f7ff ffb2 	bl	8009504 <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b0a      	cmp	r3, #10
 80095a8:	d90b      	bls.n	80095c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2205      	movs	r2, #5
 80095ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e0c5      	b.n	800974e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d0e5      	beq.n	800959c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0202 	bic.w	r2, r2, #2
 80095de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095e0:	f7ff ff90 	bl	8009504 <HAL_GetTick>
 80095e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80095e6:	e012      	b.n	800960e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80095e8:	f7ff ff8c 	bl	8009504 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b0a      	cmp	r3, #10
 80095f4:	d90b      	bls.n	800960e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2205      	movs	r2, #5
 8009606:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e09f      	b.n	800974e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e5      	bne.n	80095e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7e1b      	ldrb	r3, [r3, #24]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d108      	bne.n	8009636 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	e007      	b.n	8009646 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009644:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	7e5b      	ldrb	r3, [r3, #25]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d108      	bne.n	8009660 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	e007      	b.n	8009670 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800966e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7e9b      	ldrb	r3, [r3, #26]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d108      	bne.n	800968a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f042 0220 	orr.w	r2, r2, #32
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	e007      	b.n	800969a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f022 0220 	bic.w	r2, r2, #32
 8009698:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	7edb      	ldrb	r3, [r3, #27]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d108      	bne.n	80096b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0210 	bic.w	r2, r2, #16
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	e007      	b.n	80096c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0210 	orr.w	r2, r2, #16
 80096c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	7f1b      	ldrb	r3, [r3, #28]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d108      	bne.n	80096de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0208 	orr.w	r2, r2, #8
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	e007      	b.n	80096ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0208 	bic.w	r2, r2, #8
 80096ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	7f5b      	ldrb	r3, [r3, #29]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d108      	bne.n	8009708 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f042 0204 	orr.w	r2, r2, #4
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	e007      	b.n	8009718 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0204 	bic.w	r2, r2, #4
 8009716:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	431a      	orrs	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	431a      	orrs	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	ea42 0103 	orr.w	r1, r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	1e5a      	subs	r2, r3, #1
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <__NVIC_SetPriorityGrouping>:
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009768:	4b0c      	ldr	r3, [pc, #48]	@ (800979c <__NVIC_SetPriorityGrouping+0x44>)
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009774:	4013      	ands	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800978a:	4a04      	ldr	r2, [pc, #16]	@ (800979c <__NVIC_SetPriorityGrouping+0x44>)
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	60d3      	str	r3, [r2, #12]
}
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	e000ed00 	.word	0xe000ed00

080097a0 <__NVIC_GetPriorityGrouping>:
{
 80097a0:	b480      	push	{r7}
 80097a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097a4:	4b04      	ldr	r3, [pc, #16]	@ (80097b8 <__NVIC_GetPriorityGrouping+0x18>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	0a1b      	lsrs	r3, r3, #8
 80097aa:	f003 0307 	and.w	r3, r3, #7
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bc80      	pop	{r7}
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	e000ed00 	.word	0xe000ed00

080097bc <__NVIC_EnableIRQ>:
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	db0b      	blt.n	80097e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	f003 021f 	and.w	r2, r3, #31
 80097d4:	4906      	ldr	r1, [pc, #24]	@ (80097f0 <__NVIC_EnableIRQ+0x34>)
 80097d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097da:	095b      	lsrs	r3, r3, #5
 80097dc:	2001      	movs	r0, #1
 80097de:	fa00 f202 	lsl.w	r2, r0, r2
 80097e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bc80      	pop	{r7}
 80097ee:	4770      	bx	lr
 80097f0:	e000e100 	.word	0xe000e100

080097f4 <__NVIC_SetPriority>:
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009804:	2b00      	cmp	r3, #0
 8009806:	db0a      	blt.n	800981e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	b2da      	uxtb	r2, r3
 800980c:	490c      	ldr	r1, [pc, #48]	@ (8009840 <__NVIC_SetPriority+0x4c>)
 800980e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009812:	0112      	lsls	r2, r2, #4
 8009814:	b2d2      	uxtb	r2, r2
 8009816:	440b      	add	r3, r1
 8009818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800981c:	e00a      	b.n	8009834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	b2da      	uxtb	r2, r3
 8009822:	4908      	ldr	r1, [pc, #32]	@ (8009844 <__NVIC_SetPriority+0x50>)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	f003 030f 	and.w	r3, r3, #15
 800982a:	3b04      	subs	r3, #4
 800982c:	0112      	lsls	r2, r2, #4
 800982e:	b2d2      	uxtb	r2, r2
 8009830:	440b      	add	r3, r1
 8009832:	761a      	strb	r2, [r3, #24]
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	bc80      	pop	{r7}
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	e000e100 	.word	0xe000e100
 8009844:	e000ed00 	.word	0xe000ed00

08009848 <NVIC_EncodePriority>:
{
 8009848:	b480      	push	{r7}
 800984a:	b089      	sub	sp, #36	@ 0x24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	f1c3 0307 	rsb	r3, r3, #7
 8009862:	2b04      	cmp	r3, #4
 8009864:	bf28      	it	cs
 8009866:	2304      	movcs	r3, #4
 8009868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	3304      	adds	r3, #4
 800986e:	2b06      	cmp	r3, #6
 8009870:	d902      	bls.n	8009878 <NVIC_EncodePriority+0x30>
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	3b03      	subs	r3, #3
 8009876:	e000      	b.n	800987a <NVIC_EncodePriority+0x32>
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800987c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	fa02 f303 	lsl.w	r3, r2, r3
 8009886:	43da      	mvns	r2, r3
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	401a      	ands	r2, r3
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009890:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	fa01 f303 	lsl.w	r3, r1, r3
 800989a:	43d9      	mvns	r1, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098a0:	4313      	orrs	r3, r2
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3724      	adds	r7, #36	@ 0x24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bc80      	pop	{r7}
 80098aa:	4770      	bx	lr

080098ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098bc:	d301      	bcc.n	80098c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80098be:	2301      	movs	r3, #1
 80098c0:	e00f      	b.n	80098e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80098c2:	4a0a      	ldr	r2, [pc, #40]	@ (80098ec <SysTick_Config+0x40>)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80098ca:	210f      	movs	r1, #15
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098d0:	f7ff ff90 	bl	80097f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80098d4:	4b05      	ldr	r3, [pc, #20]	@ (80098ec <SysTick_Config+0x40>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80098da:	4b04      	ldr	r3, [pc, #16]	@ (80098ec <SysTick_Config+0x40>)
 80098dc:	2207      	movs	r2, #7
 80098de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	e000e010 	.word	0xe000e010

080098f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff ff2d 	bl	8009758 <__NVIC_SetPriorityGrouping>
}
 80098fe:	bf00      	nop
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009906:	b580      	push	{r7, lr}
 8009908:	b086      	sub	sp, #24
 800990a:	af00      	add	r7, sp, #0
 800990c:	4603      	mov	r3, r0
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009914:	2300      	movs	r3, #0
 8009916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009918:	f7ff ff42 	bl	80097a0 <__NVIC_GetPriorityGrouping>
 800991c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	68b9      	ldr	r1, [r7, #8]
 8009922:	6978      	ldr	r0, [r7, #20]
 8009924:	f7ff ff90 	bl	8009848 <NVIC_EncodePriority>
 8009928:	4602      	mov	r2, r0
 800992a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800992e:	4611      	mov	r1, r2
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff ff5f 	bl	80097f4 <__NVIC_SetPriority>
}
 8009936:	bf00      	nop
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	4603      	mov	r3, r0
 8009946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff ff35 	bl	80097bc <__NVIC_EnableIRQ>
}
 8009952:	bf00      	nop
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff ffa2 	bl	80098ac <SysTick_Config>
 8009968:	4603      	mov	r3, r0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b02      	cmp	r3, #2
 8009988:	d008      	beq.n	800999c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2204      	movs	r2, #4
 800998e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e020      	b.n	80099de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f022 020e 	bic.w	r2, r2, #14
 80099aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0201 	bic.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099c4:	2101      	movs	r1, #1
 80099c6:	fa01 f202 	lsl.w	r2, r1, r2
 80099ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bc80      	pop	{r7}
 80099e6:	4770      	bx	lr

080099e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d005      	beq.n	8009a0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2204      	movs	r2, #4
 8009a04:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	73fb      	strb	r3, [r7, #15]
 8009a0a:	e0d6      	b.n	8009bba <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 020e 	bic.w	r2, r2, #14
 8009a1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 0201 	bic.w	r2, r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	4b64      	ldr	r3, [pc, #400]	@ (8009bc4 <HAL_DMA_Abort_IT+0x1dc>)
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d958      	bls.n	8009aea <HAL_DMA_Abort_IT+0x102>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a62      	ldr	r2, [pc, #392]	@ (8009bc8 <HAL_DMA_Abort_IT+0x1e0>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d04f      	beq.n	8009ae2 <HAL_DMA_Abort_IT+0xfa>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a61      	ldr	r2, [pc, #388]	@ (8009bcc <HAL_DMA_Abort_IT+0x1e4>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d048      	beq.n	8009ade <HAL_DMA_Abort_IT+0xf6>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a5f      	ldr	r2, [pc, #380]	@ (8009bd0 <HAL_DMA_Abort_IT+0x1e8>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d040      	beq.n	8009ad8 <HAL_DMA_Abort_IT+0xf0>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8009bd4 <HAL_DMA_Abort_IT+0x1ec>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d038      	beq.n	8009ad2 <HAL_DMA_Abort_IT+0xea>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a5c      	ldr	r2, [pc, #368]	@ (8009bd8 <HAL_DMA_Abort_IT+0x1f0>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d030      	beq.n	8009acc <HAL_DMA_Abort_IT+0xe4>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8009bdc <HAL_DMA_Abort_IT+0x1f4>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d028      	beq.n	8009ac6 <HAL_DMA_Abort_IT+0xde>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a52      	ldr	r2, [pc, #328]	@ (8009bc4 <HAL_DMA_Abort_IT+0x1dc>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d020      	beq.n	8009ac0 <HAL_DMA_Abort_IT+0xd8>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a57      	ldr	r2, [pc, #348]	@ (8009be0 <HAL_DMA_Abort_IT+0x1f8>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d019      	beq.n	8009abc <HAL_DMA_Abort_IT+0xd4>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a55      	ldr	r2, [pc, #340]	@ (8009be4 <HAL_DMA_Abort_IT+0x1fc>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d012      	beq.n	8009ab8 <HAL_DMA_Abort_IT+0xd0>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a54      	ldr	r2, [pc, #336]	@ (8009be8 <HAL_DMA_Abort_IT+0x200>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d00a      	beq.n	8009ab2 <HAL_DMA_Abort_IT+0xca>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a52      	ldr	r2, [pc, #328]	@ (8009bec <HAL_DMA_Abort_IT+0x204>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d102      	bne.n	8009aac <HAL_DMA_Abort_IT+0xc4>
 8009aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009aaa:	e01b      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009aac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009ab0:	e018      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009ab2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ab6:	e015      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009ab8:	2310      	movs	r3, #16
 8009aba:	e013      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e011      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009ac0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ac4:	e00e      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009ac6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009aca:	e00b      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009acc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009ad0:	e008      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ad6:	e005      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009adc:	e002      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009ade:	2310      	movs	r3, #16
 8009ae0:	e000      	b.n	8009ae4 <HAL_DMA_Abort_IT+0xfc>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4a42      	ldr	r2, [pc, #264]	@ (8009bf0 <HAL_DMA_Abort_IT+0x208>)
 8009ae6:	6053      	str	r3, [r2, #4]
 8009ae8:	e057      	b.n	8009b9a <HAL_DMA_Abort_IT+0x1b2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a36      	ldr	r2, [pc, #216]	@ (8009bc8 <HAL_DMA_Abort_IT+0x1e0>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d04f      	beq.n	8009b94 <HAL_DMA_Abort_IT+0x1ac>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a34      	ldr	r2, [pc, #208]	@ (8009bcc <HAL_DMA_Abort_IT+0x1e4>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d048      	beq.n	8009b90 <HAL_DMA_Abort_IT+0x1a8>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a33      	ldr	r2, [pc, #204]	@ (8009bd0 <HAL_DMA_Abort_IT+0x1e8>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d040      	beq.n	8009b8a <HAL_DMA_Abort_IT+0x1a2>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a31      	ldr	r2, [pc, #196]	@ (8009bd4 <HAL_DMA_Abort_IT+0x1ec>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d038      	beq.n	8009b84 <HAL_DMA_Abort_IT+0x19c>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a30      	ldr	r2, [pc, #192]	@ (8009bd8 <HAL_DMA_Abort_IT+0x1f0>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d030      	beq.n	8009b7e <HAL_DMA_Abort_IT+0x196>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a2e      	ldr	r2, [pc, #184]	@ (8009bdc <HAL_DMA_Abort_IT+0x1f4>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d028      	beq.n	8009b78 <HAL_DMA_Abort_IT+0x190>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a26      	ldr	r2, [pc, #152]	@ (8009bc4 <HAL_DMA_Abort_IT+0x1dc>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d020      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x18a>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a2a      	ldr	r2, [pc, #168]	@ (8009be0 <HAL_DMA_Abort_IT+0x1f8>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d019      	beq.n	8009b6e <HAL_DMA_Abort_IT+0x186>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a29      	ldr	r2, [pc, #164]	@ (8009be4 <HAL_DMA_Abort_IT+0x1fc>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d012      	beq.n	8009b6a <HAL_DMA_Abort_IT+0x182>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a27      	ldr	r2, [pc, #156]	@ (8009be8 <HAL_DMA_Abort_IT+0x200>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d00a      	beq.n	8009b64 <HAL_DMA_Abort_IT+0x17c>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a26      	ldr	r2, [pc, #152]	@ (8009bec <HAL_DMA_Abort_IT+0x204>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d102      	bne.n	8009b5e <HAL_DMA_Abort_IT+0x176>
 8009b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b5c:	e01b      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009b62:	e018      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b68:	e015      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b6a:	2310      	movs	r3, #16
 8009b6c:	e013      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e011      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b76:	e00e      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b78:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009b7c:	e00b      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009b82:	e008      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b88:	e005      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b8e:	e002      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b90:	2310      	movs	r3, #16
 8009b92:	e000      	b.n	8009b96 <HAL_DMA_Abort_IT+0x1ae>
 8009b94:	2301      	movs	r3, #1
 8009b96:	4a17      	ldr	r2, [pc, #92]	@ (8009bf4 <HAL_DMA_Abort_IT+0x20c>)
 8009b98:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
    } 
  }
  return status;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	40020080 	.word	0x40020080
 8009bc8:	40020008 	.word	0x40020008
 8009bcc:	4002001c 	.word	0x4002001c
 8009bd0:	40020030 	.word	0x40020030
 8009bd4:	40020044 	.word	0x40020044
 8009bd8:	40020058 	.word	0x40020058
 8009bdc:	4002006c 	.word	0x4002006c
 8009be0:	40020408 	.word	0x40020408
 8009be4:	4002041c 	.word	0x4002041c
 8009be8:	40020430 	.word	0x40020430
 8009bec:	40020444 	.word	0x40020444
 8009bf0:	40020400 	.word	0x40020400
 8009bf4:	40020000 	.word	0x40020000

08009bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b08b      	sub	sp, #44	@ 0x2c
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c02:	2300      	movs	r3, #0
 8009c04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009c06:	2300      	movs	r3, #0
 8009c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c0a:	e179      	b.n	8009f00 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	fa02 f303 	lsl.w	r3, r2, r3
 8009c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	69fa      	ldr	r2, [r7, #28]
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	f040 8168 	bne.w	8009efa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	4a96      	ldr	r2, [pc, #600]	@ (8009e88 <HAL_GPIO_Init+0x290>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d05e      	beq.n	8009cf2 <HAL_GPIO_Init+0xfa>
 8009c34:	4a94      	ldr	r2, [pc, #592]	@ (8009e88 <HAL_GPIO_Init+0x290>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d875      	bhi.n	8009d26 <HAL_GPIO_Init+0x12e>
 8009c3a:	4a94      	ldr	r2, [pc, #592]	@ (8009e8c <HAL_GPIO_Init+0x294>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d058      	beq.n	8009cf2 <HAL_GPIO_Init+0xfa>
 8009c40:	4a92      	ldr	r2, [pc, #584]	@ (8009e8c <HAL_GPIO_Init+0x294>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d86f      	bhi.n	8009d26 <HAL_GPIO_Init+0x12e>
 8009c46:	4a92      	ldr	r2, [pc, #584]	@ (8009e90 <HAL_GPIO_Init+0x298>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d052      	beq.n	8009cf2 <HAL_GPIO_Init+0xfa>
 8009c4c:	4a90      	ldr	r2, [pc, #576]	@ (8009e90 <HAL_GPIO_Init+0x298>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d869      	bhi.n	8009d26 <HAL_GPIO_Init+0x12e>
 8009c52:	4a90      	ldr	r2, [pc, #576]	@ (8009e94 <HAL_GPIO_Init+0x29c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d04c      	beq.n	8009cf2 <HAL_GPIO_Init+0xfa>
 8009c58:	4a8e      	ldr	r2, [pc, #568]	@ (8009e94 <HAL_GPIO_Init+0x29c>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d863      	bhi.n	8009d26 <HAL_GPIO_Init+0x12e>
 8009c5e:	4a8e      	ldr	r2, [pc, #568]	@ (8009e98 <HAL_GPIO_Init+0x2a0>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d046      	beq.n	8009cf2 <HAL_GPIO_Init+0xfa>
 8009c64:	4a8c      	ldr	r2, [pc, #560]	@ (8009e98 <HAL_GPIO_Init+0x2a0>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d85d      	bhi.n	8009d26 <HAL_GPIO_Init+0x12e>
 8009c6a:	2b12      	cmp	r3, #18
 8009c6c:	d82a      	bhi.n	8009cc4 <HAL_GPIO_Init+0xcc>
 8009c6e:	2b12      	cmp	r3, #18
 8009c70:	d859      	bhi.n	8009d26 <HAL_GPIO_Init+0x12e>
 8009c72:	a201      	add	r2, pc, #4	@ (adr r2, 8009c78 <HAL_GPIO_Init+0x80>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009cf3 	.word	0x08009cf3
 8009c7c:	08009ccd 	.word	0x08009ccd
 8009c80:	08009cdf 	.word	0x08009cdf
 8009c84:	08009d21 	.word	0x08009d21
 8009c88:	08009d27 	.word	0x08009d27
 8009c8c:	08009d27 	.word	0x08009d27
 8009c90:	08009d27 	.word	0x08009d27
 8009c94:	08009d27 	.word	0x08009d27
 8009c98:	08009d27 	.word	0x08009d27
 8009c9c:	08009d27 	.word	0x08009d27
 8009ca0:	08009d27 	.word	0x08009d27
 8009ca4:	08009d27 	.word	0x08009d27
 8009ca8:	08009d27 	.word	0x08009d27
 8009cac:	08009d27 	.word	0x08009d27
 8009cb0:	08009d27 	.word	0x08009d27
 8009cb4:	08009d27 	.word	0x08009d27
 8009cb8:	08009d27 	.word	0x08009d27
 8009cbc:	08009cd5 	.word	0x08009cd5
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	4a75      	ldr	r2, [pc, #468]	@ (8009e9c <HAL_GPIO_Init+0x2a4>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d013      	beq.n	8009cf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009cca:	e02c      	b.n	8009d26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	623b      	str	r3, [r7, #32]
          break;
 8009cd2:	e029      	b.n	8009d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	623b      	str	r3, [r7, #32]
          break;
 8009cdc:	e024      	b.n	8009d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	623b      	str	r3, [r7, #32]
          break;
 8009ce6:	e01f      	b.n	8009d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	330c      	adds	r3, #12
 8009cee:	623b      	str	r3, [r7, #32]
          break;
 8009cf0:	e01a      	b.n	8009d28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009cfa:	2304      	movs	r3, #4
 8009cfc:	623b      	str	r3, [r7, #32]
          break;
 8009cfe:	e013      	b.n	8009d28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d105      	bne.n	8009d14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009d08:	2308      	movs	r3, #8
 8009d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	69fa      	ldr	r2, [r7, #28]
 8009d10:	611a      	str	r2, [r3, #16]
          break;
 8009d12:	e009      	b.n	8009d28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009d14:	2308      	movs	r3, #8
 8009d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	69fa      	ldr	r2, [r7, #28]
 8009d1c:	615a      	str	r2, [r3, #20]
          break;
 8009d1e:	e003      	b.n	8009d28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009d20:	2300      	movs	r3, #0
 8009d22:	623b      	str	r3, [r7, #32]
          break;
 8009d24:	e000      	b.n	8009d28 <HAL_GPIO_Init+0x130>
          break;
 8009d26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	2bff      	cmp	r3, #255	@ 0xff
 8009d2c:	d801      	bhi.n	8009d32 <HAL_GPIO_Init+0x13a>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	e001      	b.n	8009d36 <HAL_GPIO_Init+0x13e>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3304      	adds	r3, #4
 8009d36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	2bff      	cmp	r3, #255	@ 0xff
 8009d3c:	d802      	bhi.n	8009d44 <HAL_GPIO_Init+0x14c>
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	e002      	b.n	8009d4a <HAL_GPIO_Init+0x152>
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	3b08      	subs	r3, #8
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	210f      	movs	r1, #15
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	fa01 f303 	lsl.w	r3, r1, r3
 8009d58:	43db      	mvns	r3, r3
 8009d5a:	401a      	ands	r2, r3
 8009d5c:	6a39      	ldr	r1, [r7, #32]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	fa01 f303 	lsl.w	r3, r1, r3
 8009d64:	431a      	orrs	r2, r3
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f000 80c1 	beq.w	8009efa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009d78:	4b49      	ldr	r3, [pc, #292]	@ (8009ea0 <HAL_GPIO_Init+0x2a8>)
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	4a48      	ldr	r2, [pc, #288]	@ (8009ea0 <HAL_GPIO_Init+0x2a8>)
 8009d7e:	f043 0301 	orr.w	r3, r3, #1
 8009d82:	6193      	str	r3, [r2, #24]
 8009d84:	4b46      	ldr	r3, [pc, #280]	@ (8009ea0 <HAL_GPIO_Init+0x2a8>)
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	60bb      	str	r3, [r7, #8]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009d90:	4a44      	ldr	r2, [pc, #272]	@ (8009ea4 <HAL_GPIO_Init+0x2ac>)
 8009d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d94:	089b      	lsrs	r3, r3, #2
 8009d96:	3302      	adds	r3, #2
 8009d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da0:	f003 0303 	and.w	r3, r3, #3
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	220f      	movs	r2, #15
 8009da8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dac:	43db      	mvns	r3, r3
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4013      	ands	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a3c      	ldr	r2, [pc, #240]	@ (8009ea8 <HAL_GPIO_Init+0x2b0>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d01f      	beq.n	8009dfc <HAL_GPIO_Init+0x204>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a3b      	ldr	r2, [pc, #236]	@ (8009eac <HAL_GPIO_Init+0x2b4>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d019      	beq.n	8009df8 <HAL_GPIO_Init+0x200>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8009eb0 <HAL_GPIO_Init+0x2b8>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d013      	beq.n	8009df4 <HAL_GPIO_Init+0x1fc>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a39      	ldr	r2, [pc, #228]	@ (8009eb4 <HAL_GPIO_Init+0x2bc>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d00d      	beq.n	8009df0 <HAL_GPIO_Init+0x1f8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a38      	ldr	r2, [pc, #224]	@ (8009eb8 <HAL_GPIO_Init+0x2c0>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d007      	beq.n	8009dec <HAL_GPIO_Init+0x1f4>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a37      	ldr	r2, [pc, #220]	@ (8009ebc <HAL_GPIO_Init+0x2c4>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d101      	bne.n	8009de8 <HAL_GPIO_Init+0x1f0>
 8009de4:	2305      	movs	r3, #5
 8009de6:	e00a      	b.n	8009dfe <HAL_GPIO_Init+0x206>
 8009de8:	2306      	movs	r3, #6
 8009dea:	e008      	b.n	8009dfe <HAL_GPIO_Init+0x206>
 8009dec:	2304      	movs	r3, #4
 8009dee:	e006      	b.n	8009dfe <HAL_GPIO_Init+0x206>
 8009df0:	2303      	movs	r3, #3
 8009df2:	e004      	b.n	8009dfe <HAL_GPIO_Init+0x206>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e002      	b.n	8009dfe <HAL_GPIO_Init+0x206>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e000      	b.n	8009dfe <HAL_GPIO_Init+0x206>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e00:	f002 0203 	and.w	r2, r2, #3
 8009e04:	0092      	lsls	r2, r2, #2
 8009e06:	4093      	lsls	r3, r2
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009e0e:	4925      	ldr	r1, [pc, #148]	@ (8009ea4 <HAL_GPIO_Init+0x2ac>)
 8009e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e12:	089b      	lsrs	r3, r3, #2
 8009e14:	3302      	adds	r3, #2
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d006      	beq.n	8009e36 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009e28:	4b25      	ldr	r3, [pc, #148]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e2a:	689a      	ldr	r2, [r3, #8]
 8009e2c:	4924      	ldr	r1, [pc, #144]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	608b      	str	r3, [r1, #8]
 8009e34:	e006      	b.n	8009e44 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009e36:	4b22      	ldr	r3, [pc, #136]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e38:	689a      	ldr	r2, [r3, #8]
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	43db      	mvns	r3, r3
 8009e3e:	4920      	ldr	r1, [pc, #128]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d006      	beq.n	8009e5e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009e50:	4b1b      	ldr	r3, [pc, #108]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	491a      	ldr	r1, [pc, #104]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	60cb      	str	r3, [r1, #12]
 8009e5c:	e006      	b.n	8009e6c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009e5e:	4b18      	ldr	r3, [pc, #96]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	43db      	mvns	r3, r3
 8009e66:	4916      	ldr	r1, [pc, #88]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e68:	4013      	ands	r3, r2
 8009e6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d025      	beq.n	8009ec4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009e78:	4b11      	ldr	r3, [pc, #68]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4910      	ldr	r1, [pc, #64]	@ (8009ec0 <HAL_GPIO_Init+0x2c8>)
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	604b      	str	r3, [r1, #4]
 8009e84:	e025      	b.n	8009ed2 <HAL_GPIO_Init+0x2da>
 8009e86:	bf00      	nop
 8009e88:	10320000 	.word	0x10320000
 8009e8c:	10310000 	.word	0x10310000
 8009e90:	10220000 	.word	0x10220000
 8009e94:	10210000 	.word	0x10210000
 8009e98:	10120000 	.word	0x10120000
 8009e9c:	10110000 	.word	0x10110000
 8009ea0:	40021000 	.word	0x40021000
 8009ea4:	40010000 	.word	0x40010000
 8009ea8:	40010800 	.word	0x40010800
 8009eac:	40010c00 	.word	0x40010c00
 8009eb0:	40011000 	.word	0x40011000
 8009eb4:	40011400 	.word	0x40011400
 8009eb8:	40011800 	.word	0x40011800
 8009ebc:	40011c00 	.word	0x40011c00
 8009ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009ec4:	4b15      	ldr	r3, [pc, #84]	@ (8009f1c <HAL_GPIO_Init+0x324>)
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	43db      	mvns	r3, r3
 8009ecc:	4913      	ldr	r1, [pc, #76]	@ (8009f1c <HAL_GPIO_Init+0x324>)
 8009ece:	4013      	ands	r3, r2
 8009ed0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d006      	beq.n	8009eec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009ede:	4b0f      	ldr	r3, [pc, #60]	@ (8009f1c <HAL_GPIO_Init+0x324>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	490e      	ldr	r1, [pc, #56]	@ (8009f1c <HAL_GPIO_Init+0x324>)
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	600b      	str	r3, [r1, #0]
 8009eea:	e006      	b.n	8009efa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009eec:	4b0b      	ldr	r3, [pc, #44]	@ (8009f1c <HAL_GPIO_Init+0x324>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	43db      	mvns	r3, r3
 8009ef4:	4909      	ldr	r1, [pc, #36]	@ (8009f1c <HAL_GPIO_Init+0x324>)
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efc:	3301      	adds	r3, #1
 8009efe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f06:	fa22 f303 	lsr.w	r3, r2, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f47f ae7e 	bne.w	8009c0c <HAL_GPIO_Init+0x14>
  }
}
 8009f10:	bf00      	nop
 8009f12:	bf00      	nop
 8009f14:	372c      	adds	r7, #44	@ 0x2c
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr
 8009f1c:	40010400 	.word	0x40010400

08009f20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b089      	sub	sp, #36	@ 0x24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009f2e:	e0a6      	b.n	800a07e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009f30:	2201      	movs	r2, #1
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	fa02 f303 	lsl.w	r3, r2, r3
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 8099 	beq.w	800a078 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009f46:	4a54      	ldr	r2, [pc, #336]	@ (800a098 <HAL_GPIO_DeInit+0x178>)
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	089b      	lsrs	r3, r3, #2
 8009f4c:	3302      	adds	r3, #2
 8009f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f52:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	220f      	movs	r2, #15
 8009f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	4013      	ands	r3, r2
 8009f66:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800a09c <HAL_GPIO_DeInit+0x17c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d01f      	beq.n	8009fb0 <HAL_GPIO_DeInit+0x90>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a4b      	ldr	r2, [pc, #300]	@ (800a0a0 <HAL_GPIO_DeInit+0x180>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d019      	beq.n	8009fac <HAL_GPIO_DeInit+0x8c>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a4a      	ldr	r2, [pc, #296]	@ (800a0a4 <HAL_GPIO_DeInit+0x184>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d013      	beq.n	8009fa8 <HAL_GPIO_DeInit+0x88>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a49      	ldr	r2, [pc, #292]	@ (800a0a8 <HAL_GPIO_DeInit+0x188>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d00d      	beq.n	8009fa4 <HAL_GPIO_DeInit+0x84>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a48      	ldr	r2, [pc, #288]	@ (800a0ac <HAL_GPIO_DeInit+0x18c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d007      	beq.n	8009fa0 <HAL_GPIO_DeInit+0x80>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a47      	ldr	r2, [pc, #284]	@ (800a0b0 <HAL_GPIO_DeInit+0x190>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d101      	bne.n	8009f9c <HAL_GPIO_DeInit+0x7c>
 8009f98:	2305      	movs	r3, #5
 8009f9a:	e00a      	b.n	8009fb2 <HAL_GPIO_DeInit+0x92>
 8009f9c:	2306      	movs	r3, #6
 8009f9e:	e008      	b.n	8009fb2 <HAL_GPIO_DeInit+0x92>
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	e006      	b.n	8009fb2 <HAL_GPIO_DeInit+0x92>
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e004      	b.n	8009fb2 <HAL_GPIO_DeInit+0x92>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	e002      	b.n	8009fb2 <HAL_GPIO_DeInit+0x92>
 8009fac:	2301      	movs	r3, #1
 8009fae:	e000      	b.n	8009fb2 <HAL_GPIO_DeInit+0x92>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	f002 0203 	and.w	r2, r2, #3
 8009fb8:	0092      	lsls	r2, r2, #2
 8009fba:	4093      	lsls	r3, r2
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d132      	bne.n	800a028 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009fc2:	4b3c      	ldr	r3, [pc, #240]	@ (800a0b4 <HAL_GPIO_DeInit+0x194>)
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	43db      	mvns	r3, r3
 8009fca:	493a      	ldr	r1, [pc, #232]	@ (800a0b4 <HAL_GPIO_DeInit+0x194>)
 8009fcc:	4013      	ands	r3, r2
 8009fce:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009fd0:	4b38      	ldr	r3, [pc, #224]	@ (800a0b4 <HAL_GPIO_DeInit+0x194>)
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	43db      	mvns	r3, r3
 8009fd8:	4936      	ldr	r1, [pc, #216]	@ (800a0b4 <HAL_GPIO_DeInit+0x194>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009fde:	4b35      	ldr	r3, [pc, #212]	@ (800a0b4 <HAL_GPIO_DeInit+0x194>)
 8009fe0:	68da      	ldr	r2, [r3, #12]
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	43db      	mvns	r3, r3
 8009fe6:	4933      	ldr	r1, [pc, #204]	@ (800a0b4 <HAL_GPIO_DeInit+0x194>)
 8009fe8:	4013      	ands	r3, r2
 8009fea:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009fec:	4b31      	ldr	r3, [pc, #196]	@ (800a0b4 <HAL_GPIO_DeInit+0x194>)
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	43db      	mvns	r3, r3
 8009ff4:	492f      	ldr	r1, [pc, #188]	@ (800a0b4 <HAL_GPIO_DeInit+0x194>)
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	f003 0303 	and.w	r3, r3, #3
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	220f      	movs	r2, #15
 800a004:	fa02 f303 	lsl.w	r3, r2, r3
 800a008:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a00a:	4a23      	ldr	r2, [pc, #140]	@ (800a098 <HAL_GPIO_DeInit+0x178>)
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	089b      	lsrs	r3, r3, #2
 800a010:	3302      	adds	r3, #2
 800a012:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	43da      	mvns	r2, r3
 800a01a:	481f      	ldr	r0, [pc, #124]	@ (800a098 <HAL_GPIO_DeInit+0x178>)
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	089b      	lsrs	r3, r3, #2
 800a020:	400a      	ands	r2, r1
 800a022:	3302      	adds	r3, #2
 800a024:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	2bff      	cmp	r3, #255	@ 0xff
 800a02c:	d801      	bhi.n	800a032 <HAL_GPIO_DeInit+0x112>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	e001      	b.n	800a036 <HAL_GPIO_DeInit+0x116>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3304      	adds	r3, #4
 800a036:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2bff      	cmp	r3, #255	@ 0xff
 800a03c:	d802      	bhi.n	800a044 <HAL_GPIO_DeInit+0x124>
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	e002      	b.n	800a04a <HAL_GPIO_DeInit+0x12a>
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	3b08      	subs	r3, #8
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	210f      	movs	r1, #15
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	fa01 f303 	lsl.w	r3, r1, r3
 800a058:	43db      	mvns	r3, r3
 800a05a:	401a      	ands	r2, r3
 800a05c:	2104      	movs	r1, #4
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	fa01 f303 	lsl.w	r3, r1, r3
 800a064:	431a      	orrs	r2, r3
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	43db      	mvns	r3, r3
 800a072:	401a      	ands	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	3301      	adds	r3, #1
 800a07c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	fa22 f303 	lsr.w	r3, r2, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	f47f af52 	bne.w	8009f30 <HAL_GPIO_DeInit+0x10>
  }
}
 800a08c:	bf00      	nop
 800a08e:	bf00      	nop
 800a090:	3724      	adds	r7, #36	@ 0x24
 800a092:	46bd      	mov	sp, r7
 800a094:	bc80      	pop	{r7}
 800a096:	4770      	bx	lr
 800a098:	40010000 	.word	0x40010000
 800a09c:	40010800 	.word	0x40010800
 800a0a0:	40010c00 	.word	0x40010c00
 800a0a4:	40011000 	.word	0x40011000
 800a0a8:	40011400 	.word	0x40011400
 800a0ac:	40011800 	.word	0x40011800
 800a0b0:	40011c00 	.word	0x40011c00
 800a0b4:	40010400 	.word	0x40010400

0800a0b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	689a      	ldr	r2, [r3, #8]
 800a0c8:	887b      	ldrh	r3, [r7, #2]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	73fb      	strb	r3, [r7, #15]
 800a0d4:	e001      	b.n	800a0da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bc80      	pop	{r7}
 800a0e4:	4770      	bx	lr

0800a0e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	807b      	strh	r3, [r7, #2]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a0f6:	787b      	ldrb	r3, [r7, #1]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a0fc:	887a      	ldrh	r2, [r7, #2]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a102:	e003      	b.n	800a10c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a104:	887b      	ldrh	r3, [r7, #2]
 800a106:	041a      	lsls	r2, r3, #16
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	611a      	str	r2, [r3, #16]
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	bc80      	pop	{r7}
 800a114:	4770      	bx	lr

0800a116 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a116:	b480      	push	{r7}
 800a118:	b085      	sub	sp, #20
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a128:	887a      	ldrh	r2, [r7, #2]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	4013      	ands	r3, r2
 800a12e:	041a      	lsls	r2, r3, #16
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	43d9      	mvns	r1, r3
 800a134:	887b      	ldrh	r3, [r7, #2]
 800a136:	400b      	ands	r3, r1
 800a138:	431a      	orrs	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	611a      	str	r2, [r3, #16]
}
 800a13e:	bf00      	nop
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	bc80      	pop	{r7}
 800a146:	4770      	bx	lr

0800a148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e12b      	b.n	800a3b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7fe fff4 	bl	800915c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2224      	movs	r2, #36	@ 0x24
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0201 	bic.w	r2, r2, #1
 800a18a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a19a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a1aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a1ac:	f001 fdb8 	bl	800bd20 <HAL_RCC_GetPCLK1Freq>
 800a1b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	4a81      	ldr	r2, [pc, #516]	@ (800a3bc <HAL_I2C_Init+0x274>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d807      	bhi.n	800a1cc <HAL_I2C_Init+0x84>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4a80      	ldr	r2, [pc, #512]	@ (800a3c0 <HAL_I2C_Init+0x278>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	bf94      	ite	ls
 800a1c4:	2301      	movls	r3, #1
 800a1c6:	2300      	movhi	r3, #0
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	e006      	b.n	800a1da <HAL_I2C_Init+0x92>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4a7d      	ldr	r2, [pc, #500]	@ (800a3c4 <HAL_I2C_Init+0x27c>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	bf94      	ite	ls
 800a1d4:	2301      	movls	r3, #1
 800a1d6:	2300      	movhi	r3, #0
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e0e7      	b.n	800a3b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4a78      	ldr	r2, [pc, #480]	@ (800a3c8 <HAL_I2C_Init+0x280>)
 800a1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ea:	0c9b      	lsrs	r3, r3, #18
 800a1ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	430a      	orrs	r2, r1
 800a200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	4a6a      	ldr	r2, [pc, #424]	@ (800a3bc <HAL_I2C_Init+0x274>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d802      	bhi.n	800a21c <HAL_I2C_Init+0xd4>
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	3301      	adds	r3, #1
 800a21a:	e009      	b.n	800a230 <HAL_I2C_Init+0xe8>
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	4a69      	ldr	r2, [pc, #420]	@ (800a3cc <HAL_I2C_Init+0x284>)
 800a228:	fba2 2303 	umull	r2, r3, r2, r3
 800a22c:	099b      	lsrs	r3, r3, #6
 800a22e:	3301      	adds	r3, #1
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	6812      	ldr	r2, [r2, #0]
 800a234:	430b      	orrs	r3, r1
 800a236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a242:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	495c      	ldr	r1, [pc, #368]	@ (800a3bc <HAL_I2C_Init+0x274>)
 800a24c:	428b      	cmp	r3, r1
 800a24e:	d819      	bhi.n	800a284 <HAL_I2C_Init+0x13c>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	1e59      	subs	r1, r3, #1
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a25e:	1c59      	adds	r1, r3, #1
 800a260:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a264:	400b      	ands	r3, r1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00a      	beq.n	800a280 <HAL_I2C_Init+0x138>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	1e59      	subs	r1, r3, #1
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	fbb1 f3f3 	udiv	r3, r1, r3
 800a278:	3301      	adds	r3, #1
 800a27a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a27e:	e051      	b.n	800a324 <HAL_I2C_Init+0x1dc>
 800a280:	2304      	movs	r3, #4
 800a282:	e04f      	b.n	800a324 <HAL_I2C_Init+0x1dc>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d111      	bne.n	800a2b0 <HAL_I2C_Init+0x168>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	1e58      	subs	r0, r3, #1
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6859      	ldr	r1, [r3, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	440b      	add	r3, r1
 800a29a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a29e:	3301      	adds	r3, #1
 800a2a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bf0c      	ite	eq
 800a2a8:	2301      	moveq	r3, #1
 800a2aa:	2300      	movne	r3, #0
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	e012      	b.n	800a2d6 <HAL_I2C_Init+0x18e>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	1e58      	subs	r0, r3, #1
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6859      	ldr	r1, [r3, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	0099      	lsls	r1, r3, #2
 800a2c0:	440b      	add	r3, r1
 800a2c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bf0c      	ite	eq
 800a2d0:	2301      	moveq	r3, #1
 800a2d2:	2300      	movne	r3, #0
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <HAL_I2C_Init+0x196>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e022      	b.n	800a324 <HAL_I2C_Init+0x1dc>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10e      	bne.n	800a304 <HAL_I2C_Init+0x1bc>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	1e58      	subs	r0, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6859      	ldr	r1, [r3, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	440b      	add	r3, r1
 800a2f4:	fbb0 f3f3 	udiv	r3, r0, r3
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a302:	e00f      	b.n	800a324 <HAL_I2C_Init+0x1dc>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	1e58      	subs	r0, r3, #1
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6859      	ldr	r1, [r3, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	440b      	add	r3, r1
 800a312:	0099      	lsls	r1, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	fbb0 f3f3 	udiv	r3, r0, r3
 800a31a:	3301      	adds	r3, #1
 800a31c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a324:	6879      	ldr	r1, [r7, #4]
 800a326:	6809      	ldr	r1, [r1, #0]
 800a328:	4313      	orrs	r3, r2
 800a32a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	69da      	ldr	r2, [r3, #28]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a352:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6911      	ldr	r1, [r2, #16]
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	68d2      	ldr	r2, [r2, #12]
 800a35e:	4311      	orrs	r1, r2
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6812      	ldr	r2, [r2, #0]
 800a364:	430b      	orrs	r3, r1
 800a366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	695a      	ldr	r2, [r3, #20]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	431a      	orrs	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	430a      	orrs	r2, r1
 800a382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f042 0201 	orr.w	r2, r2, #1
 800a392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2220      	movs	r2, #32
 800a39e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	000186a0 	.word	0x000186a0
 800a3c0:	001e847f 	.word	0x001e847f
 800a3c4:	003d08ff 	.word	0x003d08ff
 800a3c8:	431bde83 	.word	0x431bde83
 800a3cc:	10624dd3 	.word	0x10624dd3

0800a3d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e021      	b.n	800a426 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2224      	movs	r2, #36	@ 0x24
 800a3e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f022 0201 	bic.w	r2, r2, #1
 800a3f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7fe feec 	bl	80091d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af02      	add	r7, sp, #8
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	607a      	str	r2, [r7, #4]
 800a43a:	461a      	mov	r2, r3
 800a43c:	460b      	mov	r3, r1
 800a43e:	817b      	strh	r3, [r7, #10]
 800a440:	4613      	mov	r3, r2
 800a442:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a444:	f7ff f85e 	bl	8009504 <HAL_GetTick>
 800a448:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b20      	cmp	r3, #32
 800a454:	f040 80e0 	bne.w	800a618 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	2319      	movs	r3, #25
 800a45e:	2201      	movs	r2, #1
 800a460:	4970      	ldr	r1, [pc, #448]	@ (800a624 <HAL_I2C_Master_Transmit+0x1f4>)
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fe5c 	bl	800b120 <I2C_WaitOnFlagUntilTimeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a46e:	2302      	movs	r3, #2
 800a470:	e0d3      	b.n	800a61a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d101      	bne.n	800a480 <HAL_I2C_Master_Transmit+0x50>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e0cc      	b.n	800a61a <HAL_I2C_Master_Transmit+0x1ea>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b01      	cmp	r3, #1
 800a494:	d007      	beq.n	800a4a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f042 0201 	orr.w	r2, r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a4b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2221      	movs	r2, #33	@ 0x21
 800a4ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2210      	movs	r2, #16
 800a4c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	893a      	ldrh	r2, [r7, #8]
 800a4d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4a50      	ldr	r2, [pc, #320]	@ (800a628 <HAL_I2C_Master_Transmit+0x1f8>)
 800a4e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a4e8:	8979      	ldrh	r1, [r7, #10]
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	6a3a      	ldr	r2, [r7, #32]
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 fc16 	bl	800ad20 <I2C_MasterRequestWrite>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e08d      	b.n	800a61a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4fe:	2300      	movs	r3, #0
 800a500:	613b      	str	r3, [r7, #16]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	613b      	str	r3, [r7, #16]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	613b      	str	r3, [r7, #16]
 800a512:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a514:	e066      	b.n	800a5e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	6a39      	ldr	r1, [r7, #32]
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 ff1a 	bl	800b354 <I2C_WaitOnTXEFlagUntilTimeout>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00d      	beq.n	800a542 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a52a:	2b04      	cmp	r3, #4
 800a52c:	d107      	bne.n	800a53e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a53c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e06b      	b.n	800a61a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a546:	781a      	ldrb	r2, [r3, #0]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	3b01      	subs	r3, #1
 800a560:	b29a      	uxth	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a56a:	3b01      	subs	r3, #1
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	695b      	ldr	r3, [r3, #20]
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	d11b      	bne.n	800a5b8 <HAL_I2C_Master_Transmit+0x188>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a584:	2b00      	cmp	r3, #0
 800a586:	d017      	beq.n	800a5b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58c:	781a      	ldrb	r2, [r3, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	6a39      	ldr	r1, [r7, #32]
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f000 ff11 	bl	800b3e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00d      	beq.n	800a5e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	d107      	bne.n	800a5e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e01a      	b.n	800a61a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d194      	bne.n	800a516 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	e000      	b.n	800a61a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a618:	2302      	movs	r3, #2
  }
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	00100002 	.word	0x00100002
 800a628:	ffff0000 	.word	0xffff0000

0800a62c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af02      	add	r7, sp, #8
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	4608      	mov	r0, r1
 800a636:	4611      	mov	r1, r2
 800a638:	461a      	mov	r2, r3
 800a63a:	4603      	mov	r3, r0
 800a63c:	817b      	strh	r3, [r7, #10]
 800a63e:	460b      	mov	r3, r1
 800a640:	813b      	strh	r3, [r7, #8]
 800a642:	4613      	mov	r3, r2
 800a644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a646:	f7fe ff5d 	bl	8009504 <HAL_GetTick>
 800a64a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b20      	cmp	r3, #32
 800a656:	f040 80d9 	bne.w	800a80c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	2319      	movs	r3, #25
 800a660:	2201      	movs	r2, #1
 800a662:	496d      	ldr	r1, [pc, #436]	@ (800a818 <HAL_I2C_Mem_Write+0x1ec>)
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 fd5b 	bl	800b120 <I2C_WaitOnFlagUntilTimeout>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a670:	2302      	movs	r3, #2
 800a672:	e0cc      	b.n	800a80e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d101      	bne.n	800a682 <HAL_I2C_Mem_Write+0x56>
 800a67e:	2302      	movs	r3, #2
 800a680:	e0c5      	b.n	800a80e <HAL_I2C_Mem_Write+0x1e2>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	2b01      	cmp	r3, #1
 800a696:	d007      	beq.n	800a6a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 0201 	orr.w	r2, r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a6b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2221      	movs	r2, #33	@ 0x21
 800a6bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2240      	movs	r2, #64	@ 0x40
 800a6c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a3a      	ldr	r2, [r7, #32]
 800a6d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a6d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4a4d      	ldr	r2, [pc, #308]	@ (800a81c <HAL_I2C_Mem_Write+0x1f0>)
 800a6e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a6ea:	88f8      	ldrh	r0, [r7, #6]
 800a6ec:	893a      	ldrh	r2, [r7, #8]
 800a6ee:	8979      	ldrh	r1, [r7, #10]
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 fb92 	bl	800ae24 <I2C_RequestMemoryWrite>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d052      	beq.n	800a7ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e081      	b.n	800a80e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 fe20 	bl	800b354 <I2C_WaitOnTXEFlagUntilTimeout>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00d      	beq.n	800a736 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a71e:	2b04      	cmp	r3, #4
 800a720:	d107      	bne.n	800a732 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e06b      	b.n	800a80e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73a:	781a      	ldrb	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a750:	3b01      	subs	r3, #1
 800a752:	b29a      	uxth	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	3b01      	subs	r3, #1
 800a760:	b29a      	uxth	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	f003 0304 	and.w	r3, r3, #4
 800a770:	2b04      	cmp	r3, #4
 800a772:	d11b      	bne.n	800a7ac <HAL_I2C_Mem_Write+0x180>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d017      	beq.n	800a7ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a780:	781a      	ldrb	r2, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78c:	1c5a      	adds	r2, r3, #1
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a796:	3b01      	subs	r3, #1
 800a798:	b29a      	uxth	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1aa      	bne.n	800a70a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 fe13 	bl	800b3e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00d      	beq.n	800a7e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d107      	bne.n	800a7dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e016      	b.n	800a80e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	e000      	b.n	800a80e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a80c:	2302      	movs	r3, #2
  }
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	00100002 	.word	0x00100002
 800a81c:	ffff0000 	.word	0xffff0000

0800a820 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b08c      	sub	sp, #48	@ 0x30
 800a824:	af02      	add	r7, sp, #8
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	4608      	mov	r0, r1
 800a82a:	4611      	mov	r1, r2
 800a82c:	461a      	mov	r2, r3
 800a82e:	4603      	mov	r3, r0
 800a830:	817b      	strh	r3, [r7, #10]
 800a832:	460b      	mov	r3, r1
 800a834:	813b      	strh	r3, [r7, #8]
 800a836:	4613      	mov	r3, r2
 800a838:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a83e:	f7fe fe61 	bl	8009504 <HAL_GetTick>
 800a842:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b20      	cmp	r3, #32
 800a84e:	f040 8244 	bne.w	800acda <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	2319      	movs	r3, #25
 800a858:	2201      	movs	r2, #1
 800a85a:	4982      	ldr	r1, [pc, #520]	@ (800aa64 <HAL_I2C_Mem_Read+0x244>)
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 fc5f 	bl	800b120 <I2C_WaitOnFlagUntilTimeout>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a868:	2302      	movs	r3, #2
 800a86a:	e237      	b.n	800acdc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_I2C_Mem_Read+0x5a>
 800a876:	2302      	movs	r3, #2
 800a878:	e230      	b.n	800acdc <HAL_I2C_Mem_Read+0x4bc>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0301 	and.w	r3, r3, #1
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d007      	beq.n	800a8a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f042 0201 	orr.w	r2, r2, #1
 800a89e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a8ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2222      	movs	r2, #34	@ 0x22
 800a8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2240      	movs	r2, #64	@ 0x40
 800a8bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a8d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4a62      	ldr	r2, [pc, #392]	@ (800aa68 <HAL_I2C_Mem_Read+0x248>)
 800a8e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8e2:	88f8      	ldrh	r0, [r7, #6]
 800a8e4:	893a      	ldrh	r2, [r7, #8]
 800a8e6:	8979      	ldrh	r1, [r7, #10]
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	9301      	str	r3, [sp, #4]
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 fb2c 	bl	800af50 <I2C_RequestMemoryRead>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e1ec      	b.n	800acdc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a906:	2b00      	cmp	r3, #0
 800a908:	d113      	bne.n	800a932 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a90a:	2300      	movs	r3, #0
 800a90c:	61fb      	str	r3, [r7, #28]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	61fb      	str	r3, [r7, #28]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	61fb      	str	r3, [r7, #28]
 800a91e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	e1c0      	b.n	800acb4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a936:	2b01      	cmp	r3, #1
 800a938:	d11e      	bne.n	800a978 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a948:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a94a:	b672      	cpsid	i
}
 800a94c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a94e:	2300      	movs	r3, #0
 800a950:	61bb      	str	r3, [r7, #24]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	61bb      	str	r3, [r7, #24]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	61bb      	str	r3, [r7, #24]
 800a962:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a972:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a974:	b662      	cpsie	i
}
 800a976:	e035      	b.n	800a9e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d11e      	bne.n	800a9be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a98e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a990:	b672      	cpsid	i
}
 800a992:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a994:	2300      	movs	r3, #0
 800a996:	617b      	str	r3, [r7, #20]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a9ba:	b662      	cpsie	i
}
 800a9bc:	e012      	b.n	800a9e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a9cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	613b      	str	r3, [r7, #16]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	613b      	str	r3, [r7, #16]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	613b      	str	r3, [r7, #16]
 800a9e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a9e4:	e166      	b.n	800acb4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	f200 811f 	bhi.w	800ac2e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d123      	bne.n	800aa40 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f000 fd39 	bl	800b474 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e167      	b.n	800acdc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	691a      	ldr	r2, [r3, #16]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa16:	b2d2      	uxtb	r2, r2
 800aa18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	3b01      	subs	r3, #1
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa3e:	e139      	b.n	800acb4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d152      	bne.n	800aaee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4e:	2200      	movs	r2, #0
 800aa50:	4906      	ldr	r1, [pc, #24]	@ (800aa6c <HAL_I2C_Mem_Read+0x24c>)
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f000 fb64 	bl	800b120 <I2C_WaitOnFlagUntilTimeout>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d008      	beq.n	800aa70 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e13c      	b.n	800acdc <HAL_I2C_Mem_Read+0x4bc>
 800aa62:	bf00      	nop
 800aa64:	00100002 	.word	0x00100002
 800aa68:	ffff0000 	.word	0xffff0000
 800aa6c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800aa70:	b672      	cpsid	i
}
 800aa72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	691a      	ldr	r2, [r3, #16]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8e:	b2d2      	uxtb	r2, r2
 800aa90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa96:	1c5a      	adds	r2, r3, #1
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	3b01      	subs	r3, #1
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800aab6:	b662      	cpsie	i
}
 800aab8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	691a      	ldr	r2, [r3, #16]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac4:	b2d2      	uxtb	r2, r2
 800aac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aad6:	3b01      	subs	r3, #1
 800aad8:	b29a      	uxth	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	3b01      	subs	r3, #1
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aaec:	e0e2      	b.n	800acb4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	497b      	ldr	r1, [pc, #492]	@ (800ace4 <HAL_I2C_Mem_Read+0x4c4>)
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 fb11 	bl	800b120 <I2C_WaitOnFlagUntilTimeout>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e0e9      	b.n	800acdc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab18:	b672      	cpsid	i
}
 800ab1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	691a      	ldr	r2, [r3, #16]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	b2d2      	uxtb	r2, r2
 800ab28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2e:	1c5a      	adds	r2, r3, #1
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	3b01      	subs	r3, #1
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ab4e:	4b66      	ldr	r3, [pc, #408]	@ (800ace8 <HAL_I2C_Mem_Read+0x4c8>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	08db      	lsrs	r3, r3, #3
 800ab54:	4a65      	ldr	r2, [pc, #404]	@ (800acec <HAL_I2C_Mem_Read+0x4cc>)
 800ab56:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5a:	0a1a      	lsrs	r2, r3, #8
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	00da      	lsls	r2, r3, #3
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d118      	bne.n	800aba6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab8e:	f043 0220 	orr.w	r2, r3, #32
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800ab96:	b662      	cpsie	i
}
 800ab98:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e09a      	b.n	800acdc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	f003 0304 	and.w	r3, r3, #4
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d1d9      	bne.n	800ab68 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	691a      	ldr	r2, [r3, #16]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd6:	1c5a      	adds	r2, r3, #1
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abe0:	3b01      	subs	r3, #1
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abec:	b29b      	uxth	r3, r3
 800abee:	3b01      	subs	r3, #1
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800abf6:	b662      	cpsie	i
}
 800abf8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac04:	b2d2      	uxtb	r2, r2
 800ac06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0c:	1c5a      	adds	r2, r3, #1
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac16:	3b01      	subs	r3, #1
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	3b01      	subs	r3, #1
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ac2c:	e042      	b.n	800acb4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 fc1e 	bl	800b474 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e04c      	b.n	800acdc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	691a      	ldr	r2, [r3, #16]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4c:	b2d2      	uxtb	r2, r2
 800ac4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d118      	bne.n	800acb4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	691a      	ldr	r2, [r3, #16]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac8c:	b2d2      	uxtb	r2, r2
 800ac8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac94:	1c5a      	adds	r2, r3, #1
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acaa:	b29b      	uxth	r3, r3
 800acac:	3b01      	subs	r3, #1
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f47f ae94 	bne.w	800a9e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2220      	movs	r2, #32
 800acc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	e000      	b.n	800acdc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800acda:	2302      	movs	r3, #2
  }
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3728      	adds	r7, #40	@ 0x28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	00010004 	.word	0x00010004
 800ace8:	20000f78 	.word	0x20000f78
 800acec:	14f8b589 	.word	0x14f8b589

0800acf0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acfe:	b2db      	uxtb	r3, r3
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bc80      	pop	{r7}
 800ad08:	4770      	bx	lr

0800ad0a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bc80      	pop	{r7}
 800ad1e:	4770      	bx	lr

0800ad20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af02      	add	r7, sp, #8
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	607a      	str	r2, [r7, #4]
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b08      	cmp	r3, #8
 800ad3a:	d006      	beq.n	800ad4a <I2C_MasterRequestWrite+0x2a>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d003      	beq.n	800ad4a <I2C_MasterRequestWrite+0x2a>
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ad48:	d108      	bne.n	800ad5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	e00b      	b.n	800ad74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad60:	2b12      	cmp	r3, #18
 800ad62:	d107      	bne.n	800ad74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f9cd 	bl	800b120 <I2C_WaitOnFlagUntilTimeout>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00d      	beq.n	800ada8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad9a:	d103      	bne.n	800ada4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ada2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e035      	b.n	800ae14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adb0:	d108      	bne.n	800adc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800adb2:	897b      	ldrh	r3, [r7, #10]
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	461a      	mov	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800adc0:	611a      	str	r2, [r3, #16]
 800adc2:	e01b      	b.n	800adfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800adc4:	897b      	ldrh	r3, [r7, #10]
 800adc6:	11db      	asrs	r3, r3, #7
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	f003 0306 	and.w	r3, r3, #6
 800adce:	b2db      	uxtb	r3, r3
 800add0:	f063 030f 	orn	r3, r3, #15
 800add4:	b2da      	uxtb	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	490e      	ldr	r1, [pc, #56]	@ (800ae1c <I2C_MasterRequestWrite+0xfc>)
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f000 fa16 	bl	800b214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e010      	b.n	800ae14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800adf2:	897b      	ldrh	r3, [r7, #10]
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	4907      	ldr	r1, [pc, #28]	@ (800ae20 <I2C_MasterRequestWrite+0x100>)
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 fa06 	bl	800b214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	00010008 	.word	0x00010008
 800ae20:	00010002 	.word	0x00010002

0800ae24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	4611      	mov	r1, r2
 800ae30:	461a      	mov	r2, r3
 800ae32:	4603      	mov	r3, r0
 800ae34:	817b      	strh	r3, [r7, #10]
 800ae36:	460b      	mov	r3, r1
 800ae38:	813b      	strh	r3, [r7, #8]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 f960 	bl	800b120 <I2C_WaitOnFlagUntilTimeout>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00d      	beq.n	800ae82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae74:	d103      	bne.n	800ae7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e05f      	b.n	800af42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae82:	897b      	ldrh	r3, [r7, #10]
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	461a      	mov	r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ae90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae94:	6a3a      	ldr	r2, [r7, #32]
 800ae96:	492d      	ldr	r1, [pc, #180]	@ (800af4c <I2C_RequestMemoryWrite+0x128>)
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 f9bb 	bl	800b214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e04c      	b.n	800af42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aea8:	2300      	movs	r3, #0
 800aeaa:	617b      	str	r3, [r7, #20]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	617b      	str	r3, [r7, #20]
 800aebc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aec0:	6a39      	ldr	r1, [r7, #32]
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fa46 	bl	800b354 <I2C_WaitOnTXEFlagUntilTimeout>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00d      	beq.n	800aeea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d107      	bne.n	800aee6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aee4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e02b      	b.n	800af42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aeea:	88fb      	ldrh	r3, [r7, #6]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d105      	bne.n	800aefc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aef0:	893b      	ldrh	r3, [r7, #8]
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	611a      	str	r2, [r3, #16]
 800aefa:	e021      	b.n	800af40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aefc:	893b      	ldrh	r3, [r7, #8]
 800aefe:	0a1b      	lsrs	r3, r3, #8
 800af00:	b29b      	uxth	r3, r3
 800af02:	b2da      	uxtb	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af0c:	6a39      	ldr	r1, [r7, #32]
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f000 fa20 	bl	800b354 <I2C_WaitOnTXEFlagUntilTimeout>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00d      	beq.n	800af36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d107      	bne.n	800af32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e005      	b.n	800af42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af36:	893b      	ldrh	r3, [r7, #8]
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	00010002 	.word	0x00010002

0800af50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b088      	sub	sp, #32
 800af54:	af02      	add	r7, sp, #8
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	4608      	mov	r0, r1
 800af5a:	4611      	mov	r1, r2
 800af5c:	461a      	mov	r2, r3
 800af5e:	4603      	mov	r3, r0
 800af60:	817b      	strh	r3, [r7, #10]
 800af62:	460b      	mov	r3, r1
 800af64:	813b      	strh	r3, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	6a3b      	ldr	r3, [r7, #32]
 800af90:	2200      	movs	r2, #0
 800af92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 f8c2 	bl	800b120 <I2C_WaitOnFlagUntilTimeout>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00d      	beq.n	800afbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afb0:	d103      	bne.n	800afba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e0aa      	b.n	800b114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800afbe:	897b      	ldrh	r3, [r7, #10]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	461a      	mov	r2, r3
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800afcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800afce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd0:	6a3a      	ldr	r2, [r7, #32]
 800afd2:	4952      	ldr	r1, [pc, #328]	@ (800b11c <I2C_RequestMemoryRead+0x1cc>)
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 f91d 	bl	800b214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e097      	b.n	800b114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afe4:	2300      	movs	r3, #0
 800afe6:	617b      	str	r3, [r7, #20]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	617b      	str	r3, [r7, #20]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	617b      	str	r3, [r7, #20]
 800aff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800affa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800affc:	6a39      	ldr	r1, [r7, #32]
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f000 f9a8 	bl	800b354 <I2C_WaitOnTXEFlagUntilTimeout>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00d      	beq.n	800b026 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00e:	2b04      	cmp	r3, #4
 800b010:	d107      	bne.n	800b022 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e076      	b.n	800b114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b026:	88fb      	ldrh	r3, [r7, #6]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d105      	bne.n	800b038 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b02c:	893b      	ldrh	r3, [r7, #8]
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	611a      	str	r2, [r3, #16]
 800b036:	e021      	b.n	800b07c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b038:	893b      	ldrh	r3, [r7, #8]
 800b03a:	0a1b      	lsrs	r3, r3, #8
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b048:	6a39      	ldr	r1, [r7, #32]
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f000 f982 	bl	800b354 <I2C_WaitOnTXEFlagUntilTimeout>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00d      	beq.n	800b072 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b05a:	2b04      	cmp	r3, #4
 800b05c:	d107      	bne.n	800b06e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b06c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e050      	b.n	800b114 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b072:	893b      	ldrh	r3, [r7, #8]
 800b074:	b2da      	uxtb	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b07c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b07e:	6a39      	ldr	r1, [r7, #32]
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f000 f967 	bl	800b354 <I2C_WaitOnTXEFlagUntilTimeout>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00d      	beq.n	800b0a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b090:	2b04      	cmp	r3, #4
 800b092:	d107      	bne.n	800b0a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e035      	b.n	800b114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b0b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f000 f82b 	bl	800b120 <I2C_WaitOnFlagUntilTimeout>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00d      	beq.n	800b0ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0de:	d103      	bne.n	800b0e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e013      	b.n	800b114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b0ec:	897b      	ldrh	r3, [r7, #10]
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	f043 0301 	orr.w	r3, r3, #1
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fe:	6a3a      	ldr	r2, [r7, #32]
 800b100:	4906      	ldr	r1, [pc, #24]	@ (800b11c <I2C_RequestMemoryRead+0x1cc>)
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f000 f886 	bl	800b214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	00010002 	.word	0x00010002

0800b120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	603b      	str	r3, [r7, #0]
 800b12c:	4613      	mov	r3, r2
 800b12e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b130:	e048      	b.n	800b1c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b138:	d044      	beq.n	800b1c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b13a:	f7fe f9e3 	bl	8009504 <HAL_GetTick>
 800b13e:	4602      	mov	r2, r0
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	683a      	ldr	r2, [r7, #0]
 800b146:	429a      	cmp	r2, r3
 800b148:	d302      	bcc.n	800b150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d139      	bne.n	800b1c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	0c1b      	lsrs	r3, r3, #16
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b01      	cmp	r3, #1
 800b158:	d10d      	bne.n	800b176 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	43da      	mvns	r2, r3
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	4013      	ands	r3, r2
 800b166:	b29b      	uxth	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bf0c      	ite	eq
 800b16c:	2301      	moveq	r3, #1
 800b16e:	2300      	movne	r3, #0
 800b170:	b2db      	uxtb	r3, r3
 800b172:	461a      	mov	r2, r3
 800b174:	e00c      	b.n	800b190 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	43da      	mvns	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	4013      	ands	r3, r2
 800b182:	b29b      	uxth	r3, r3
 800b184:	2b00      	cmp	r3, #0
 800b186:	bf0c      	ite	eq
 800b188:	2301      	moveq	r3, #1
 800b18a:	2300      	movne	r3, #0
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	461a      	mov	r2, r3
 800b190:	79fb      	ldrb	r3, [r7, #7]
 800b192:	429a      	cmp	r2, r3
 800b194:	d116      	bne.n	800b1c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2220      	movs	r2, #32
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b0:	f043 0220 	orr.w	r2, r3, #32
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e023      	b.n	800b20c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	0c1b      	lsrs	r3, r3, #16
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d10d      	bne.n	800b1ea <I2C_WaitOnFlagUntilTimeout+0xca>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	43da      	mvns	r2, r3
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	4013      	ands	r3, r2
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	bf0c      	ite	eq
 800b1e0:	2301      	moveq	r3, #1
 800b1e2:	2300      	movne	r3, #0
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	e00c      	b.n	800b204 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	43da      	mvns	r2, r3
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bf0c      	ite	eq
 800b1fc:	2301      	moveq	r3, #1
 800b1fe:	2300      	movne	r3, #0
 800b200:	b2db      	uxtb	r3, r3
 800b202:	461a      	mov	r2, r3
 800b204:	79fb      	ldrb	r3, [r7, #7]
 800b206:	429a      	cmp	r2, r3
 800b208:	d093      	beq.n	800b132 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b222:	e071      	b.n	800b308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b22e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b232:	d123      	bne.n	800b27c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b242:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b24c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2220      	movs	r2, #32
 800b258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b268:	f043 0204 	orr.w	r2, r3, #4
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	e067      	b.n	800b34c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b282:	d041      	beq.n	800b308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b284:	f7fe f93e 	bl	8009504 <HAL_GetTick>
 800b288:	4602      	mov	r2, r0
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	429a      	cmp	r2, r3
 800b292:	d302      	bcc.n	800b29a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d136      	bne.n	800b308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	0c1b      	lsrs	r3, r3, #16
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d10c      	bne.n	800b2be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	43da      	mvns	r2, r3
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	bf14      	ite	ne
 800b2b6:	2301      	movne	r3, #1
 800b2b8:	2300      	moveq	r3, #0
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	e00b      	b.n	800b2d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	43da      	mvns	r2, r3
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	bf14      	ite	ne
 800b2d0:	2301      	movne	r3, #1
 800b2d2:	2300      	moveq	r3, #0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d016      	beq.n	800b308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f4:	f043 0220 	orr.w	r2, r3, #32
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	e021      	b.n	800b34c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	0c1b      	lsrs	r3, r3, #16
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d10c      	bne.n	800b32c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	43da      	mvns	r2, r3
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	4013      	ands	r3, r2
 800b31e:	b29b      	uxth	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	bf14      	ite	ne
 800b324:	2301      	movne	r3, #1
 800b326:	2300      	moveq	r3, #0
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	e00b      	b.n	800b344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	43da      	mvns	r2, r3
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	4013      	ands	r3, r2
 800b338:	b29b      	uxth	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	bf14      	ite	ne
 800b33e:	2301      	movne	r3, #1
 800b340:	2300      	moveq	r3, #0
 800b342:	b2db      	uxtb	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	f47f af6d 	bne.w	800b224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b360:	e034      	b.n	800b3cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f000 f8e3 	bl	800b52e <I2C_IsAcknowledgeFailed>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	e034      	b.n	800b3dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b378:	d028      	beq.n	800b3cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b37a:	f7fe f8c3 	bl	8009504 <HAL_GetTick>
 800b37e:	4602      	mov	r2, r0
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	429a      	cmp	r2, r3
 800b388:	d302      	bcc.n	800b390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d11d      	bne.n	800b3cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b39a:	2b80      	cmp	r3, #128	@ 0x80
 800b39c:	d016      	beq.n	800b3cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2220      	movs	r2, #32
 800b3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3b8:	f043 0220 	orr.w	r2, r3, #32
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e007      	b.n	800b3dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3d6:	2b80      	cmp	r3, #128	@ 0x80
 800b3d8:	d1c3      	bne.n	800b362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b3f0:	e034      	b.n	800b45c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f000 f89b 	bl	800b52e <I2C_IsAcknowledgeFailed>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e034      	b.n	800b46c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b408:	d028      	beq.n	800b45c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b40a:	f7fe f87b 	bl	8009504 <HAL_GetTick>
 800b40e:	4602      	mov	r2, r0
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	429a      	cmp	r2, r3
 800b418:	d302      	bcc.n	800b420 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d11d      	bne.n	800b45c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	f003 0304 	and.w	r3, r3, #4
 800b42a:	2b04      	cmp	r3, #4
 800b42c:	d016      	beq.n	800b45c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2220      	movs	r2, #32
 800b438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b448:	f043 0220 	orr.w	r2, r3, #32
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e007      	b.n	800b46c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	f003 0304 	and.w	r3, r3, #4
 800b466:	2b04      	cmp	r3, #4
 800b468:	d1c3      	bne.n	800b3f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b480:	e049      	b.n	800b516 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	f003 0310 	and.w	r3, r3, #16
 800b48c:	2b10      	cmp	r3, #16
 800b48e:	d119      	bne.n	800b4c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f06f 0210 	mvn.w	r2, #16
 800b498:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2220      	movs	r2, #32
 800b4a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e030      	b.n	800b526 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4c4:	f7fe f81e 	bl	8009504 <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d302      	bcc.n	800b4da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d11d      	bne.n	800b516 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4e4:	2b40      	cmp	r3, #64	@ 0x40
 800b4e6:	d016      	beq.n	800b516 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b502:	f043 0220 	orr.w	r2, r3, #32
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e007      	b.n	800b526 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b520:	2b40      	cmp	r3, #64	@ 0x40
 800b522:	d1ae      	bne.n	800b482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b52e:	b480      	push	{r7}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	695b      	ldr	r3, [r3, #20]
 800b53c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b544:	d11b      	bne.n	800b57e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b54e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2220      	movs	r2, #32
 800b55a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b56a:	f043 0204 	orr.w	r2, r3, #4
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e000      	b.n	800b580 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	bc80      	pop	{r7}
 800b588:	4770      	bx	lr
	...

0800b58c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e272      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 8087 	beq.w	800b6ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b5ac:	4b92      	ldr	r3, [pc, #584]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	f003 030c 	and.w	r3, r3, #12
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	d00c      	beq.n	800b5d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b5b8:	4b8f      	ldr	r3, [pc, #572]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f003 030c 	and.w	r3, r3, #12
 800b5c0:	2b08      	cmp	r3, #8
 800b5c2:	d112      	bne.n	800b5ea <HAL_RCC_OscConfig+0x5e>
 800b5c4:	4b8c      	ldr	r3, [pc, #560]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b5cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5d0:	d10b      	bne.n	800b5ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5d2:	4b89      	ldr	r3, [pc, #548]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d06c      	beq.n	800b6b8 <HAL_RCC_OscConfig+0x12c>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d168      	bne.n	800b6b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e24c      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5f2:	d106      	bne.n	800b602 <HAL_RCC_OscConfig+0x76>
 800b5f4:	4b80      	ldr	r3, [pc, #512]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a7f      	ldr	r2, [pc, #508]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b5fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	e02e      	b.n	800b660 <HAL_RCC_OscConfig+0xd4>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10c      	bne.n	800b624 <HAL_RCC_OscConfig+0x98>
 800b60a:	4b7b      	ldr	r3, [pc, #492]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a7a      	ldr	r2, [pc, #488]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b614:	6013      	str	r3, [r2, #0]
 800b616:	4b78      	ldr	r3, [pc, #480]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a77      	ldr	r2, [pc, #476]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b61c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	e01d      	b.n	800b660 <HAL_RCC_OscConfig+0xd4>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b62c:	d10c      	bne.n	800b648 <HAL_RCC_OscConfig+0xbc>
 800b62e:	4b72      	ldr	r3, [pc, #456]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a71      	ldr	r2, [pc, #452]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b638:	6013      	str	r3, [r2, #0]
 800b63a:	4b6f      	ldr	r3, [pc, #444]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a6e      	ldr	r2, [pc, #440]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	e00b      	b.n	800b660 <HAL_RCC_OscConfig+0xd4>
 800b648:	4b6b      	ldr	r3, [pc, #428]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a6a      	ldr	r2, [pc, #424]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b64e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b652:	6013      	str	r3, [r2, #0]
 800b654:	4b68      	ldr	r3, [pc, #416]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a67      	ldr	r2, [pc, #412]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b65a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b65e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d013      	beq.n	800b690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b668:	f7fd ff4c 	bl	8009504 <HAL_GetTick>
 800b66c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b66e:	e008      	b.n	800b682 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b670:	f7fd ff48 	bl	8009504 <HAL_GetTick>
 800b674:	4602      	mov	r2, r0
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	2b64      	cmp	r3, #100	@ 0x64
 800b67c:	d901      	bls.n	800b682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	e200      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b682:	4b5d      	ldr	r3, [pc, #372]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d0f0      	beq.n	800b670 <HAL_RCC_OscConfig+0xe4>
 800b68e:	e014      	b.n	800b6ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b690:	f7fd ff38 	bl	8009504 <HAL_GetTick>
 800b694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b696:	e008      	b.n	800b6aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b698:	f7fd ff34 	bl	8009504 <HAL_GetTick>
 800b69c:	4602      	mov	r2, r0
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	2b64      	cmp	r3, #100	@ 0x64
 800b6a4:	d901      	bls.n	800b6aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e1ec      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b6aa:	4b53      	ldr	r3, [pc, #332]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1f0      	bne.n	800b698 <HAL_RCC_OscConfig+0x10c>
 800b6b6:	e000      	b.n	800b6ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 0302 	and.w	r3, r3, #2
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d063      	beq.n	800b78e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b6c6:	4b4c      	ldr	r3, [pc, #304]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	f003 030c 	and.w	r3, r3, #12
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00b      	beq.n	800b6ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b6d2:	4b49      	ldr	r3, [pc, #292]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f003 030c 	and.w	r3, r3, #12
 800b6da:	2b08      	cmp	r3, #8
 800b6dc:	d11c      	bne.n	800b718 <HAL_RCC_OscConfig+0x18c>
 800b6de:	4b46      	ldr	r3, [pc, #280]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d116      	bne.n	800b718 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6ea:	4b43      	ldr	r3, [pc, #268]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0302 	and.w	r3, r3, #2
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d005      	beq.n	800b702 <HAL_RCC_OscConfig+0x176>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d001      	beq.n	800b702 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e1c0      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b702:	4b3d      	ldr	r3, [pc, #244]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	4939      	ldr	r1, [pc, #228]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b712:	4313      	orrs	r3, r2
 800b714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b716:	e03a      	b.n	800b78e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d020      	beq.n	800b762 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b720:	4b36      	ldr	r3, [pc, #216]	@ (800b7fc <HAL_RCC_OscConfig+0x270>)
 800b722:	2201      	movs	r2, #1
 800b724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b726:	f7fd feed 	bl	8009504 <HAL_GetTick>
 800b72a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b72c:	e008      	b.n	800b740 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b72e:	f7fd fee9 	bl	8009504 <HAL_GetTick>
 800b732:	4602      	mov	r2, r0
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d901      	bls.n	800b740 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e1a1      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b740:	4b2d      	ldr	r3, [pc, #180]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 0302 	and.w	r3, r3, #2
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0f0      	beq.n	800b72e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b74c:	4b2a      	ldr	r3, [pc, #168]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	00db      	lsls	r3, r3, #3
 800b75a:	4927      	ldr	r1, [pc, #156]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b75c:	4313      	orrs	r3, r2
 800b75e:	600b      	str	r3, [r1, #0]
 800b760:	e015      	b.n	800b78e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b762:	4b26      	ldr	r3, [pc, #152]	@ (800b7fc <HAL_RCC_OscConfig+0x270>)
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b768:	f7fd fecc 	bl	8009504 <HAL_GetTick>
 800b76c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b76e:	e008      	b.n	800b782 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b770:	f7fd fec8 	bl	8009504 <HAL_GetTick>
 800b774:	4602      	mov	r2, r0
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d901      	bls.n	800b782 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e180      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b782:	4b1d      	ldr	r3, [pc, #116]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f003 0302 	and.w	r3, r3, #2
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1f0      	bne.n	800b770 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 0308 	and.w	r3, r3, #8
 800b796:	2b00      	cmp	r3, #0
 800b798:	d03a      	beq.n	800b810 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d019      	beq.n	800b7d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b7a2:	4b17      	ldr	r3, [pc, #92]	@ (800b800 <HAL_RCC_OscConfig+0x274>)
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b7a8:	f7fd feac 	bl	8009504 <HAL_GetTick>
 800b7ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b7ae:	e008      	b.n	800b7c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7b0:	f7fd fea8 	bl	8009504 <HAL_GetTick>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d901      	bls.n	800b7c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	e160      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f8 <HAL_RCC_OscConfig+0x26c>)
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7c6:	f003 0302 	and.w	r3, r3, #2
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0f0      	beq.n	800b7b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b7ce:	2001      	movs	r0, #1
 800b7d0:	f000 face 	bl	800bd70 <RCC_Delay>
 800b7d4:	e01c      	b.n	800b810 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b7d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b800 <HAL_RCC_OscConfig+0x274>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b7dc:	f7fd fe92 	bl	8009504 <HAL_GetTick>
 800b7e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7e2:	e00f      	b.n	800b804 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7e4:	f7fd fe8e 	bl	8009504 <HAL_GetTick>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	d908      	bls.n	800b804 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	e146      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
 800b7f6:	bf00      	nop
 800b7f8:	40021000 	.word	0x40021000
 800b7fc:	42420000 	.word	0x42420000
 800b800:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b804:	4b92      	ldr	r3, [pc, #584]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b808:	f003 0302 	and.w	r3, r3, #2
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1e9      	bne.n	800b7e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 80a6 	beq.w	800b96a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b822:	4b8b      	ldr	r3, [pc, #556]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b824:	69db      	ldr	r3, [r3, #28]
 800b826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10d      	bne.n	800b84a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b82e:	4b88      	ldr	r3, [pc, #544]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	4a87      	ldr	r2, [pc, #540]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b838:	61d3      	str	r3, [r2, #28]
 800b83a:	4b85      	ldr	r3, [pc, #532]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b83c:	69db      	ldr	r3, [r3, #28]
 800b83e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b842:	60bb      	str	r3, [r7, #8]
 800b844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b846:	2301      	movs	r3, #1
 800b848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b84a:	4b82      	ldr	r3, [pc, #520]	@ (800ba54 <HAL_RCC_OscConfig+0x4c8>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b852:	2b00      	cmp	r3, #0
 800b854:	d118      	bne.n	800b888 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b856:	4b7f      	ldr	r3, [pc, #508]	@ (800ba54 <HAL_RCC_OscConfig+0x4c8>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a7e      	ldr	r2, [pc, #504]	@ (800ba54 <HAL_RCC_OscConfig+0x4c8>)
 800b85c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b862:	f7fd fe4f 	bl	8009504 <HAL_GetTick>
 800b866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b868:	e008      	b.n	800b87c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b86a:	f7fd fe4b 	bl	8009504 <HAL_GetTick>
 800b86e:	4602      	mov	r2, r0
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	2b64      	cmp	r3, #100	@ 0x64
 800b876:	d901      	bls.n	800b87c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b878:	2303      	movs	r3, #3
 800b87a:	e103      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b87c:	4b75      	ldr	r3, [pc, #468]	@ (800ba54 <HAL_RCC_OscConfig+0x4c8>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b884:	2b00      	cmp	r3, #0
 800b886:	d0f0      	beq.n	800b86a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d106      	bne.n	800b89e <HAL_RCC_OscConfig+0x312>
 800b890:	4b6f      	ldr	r3, [pc, #444]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b892:	6a1b      	ldr	r3, [r3, #32]
 800b894:	4a6e      	ldr	r2, [pc, #440]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	6213      	str	r3, [r2, #32]
 800b89c:	e02d      	b.n	800b8fa <HAL_RCC_OscConfig+0x36e>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10c      	bne.n	800b8c0 <HAL_RCC_OscConfig+0x334>
 800b8a6:	4b6a      	ldr	r3, [pc, #424]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	4a69      	ldr	r2, [pc, #420]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8ac:	f023 0301 	bic.w	r3, r3, #1
 800b8b0:	6213      	str	r3, [r2, #32]
 800b8b2:	4b67      	ldr	r3, [pc, #412]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	4a66      	ldr	r2, [pc, #408]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8b8:	f023 0304 	bic.w	r3, r3, #4
 800b8bc:	6213      	str	r3, [r2, #32]
 800b8be:	e01c      	b.n	800b8fa <HAL_RCC_OscConfig+0x36e>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	2b05      	cmp	r3, #5
 800b8c6:	d10c      	bne.n	800b8e2 <HAL_RCC_OscConfig+0x356>
 800b8c8:	4b61      	ldr	r3, [pc, #388]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8ca:	6a1b      	ldr	r3, [r3, #32]
 800b8cc:	4a60      	ldr	r2, [pc, #384]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8ce:	f043 0304 	orr.w	r3, r3, #4
 800b8d2:	6213      	str	r3, [r2, #32]
 800b8d4:	4b5e      	ldr	r3, [pc, #376]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	4a5d      	ldr	r2, [pc, #372]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8da:	f043 0301 	orr.w	r3, r3, #1
 800b8de:	6213      	str	r3, [r2, #32]
 800b8e0:	e00b      	b.n	800b8fa <HAL_RCC_OscConfig+0x36e>
 800b8e2:	4b5b      	ldr	r3, [pc, #364]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	4a5a      	ldr	r2, [pc, #360]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8e8:	f023 0301 	bic.w	r3, r3, #1
 800b8ec:	6213      	str	r3, [r2, #32]
 800b8ee:	4b58      	ldr	r3, [pc, #352]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	4a57      	ldr	r2, [pc, #348]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b8f4:	f023 0304 	bic.w	r3, r3, #4
 800b8f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d015      	beq.n	800b92e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b902:	f7fd fdff 	bl	8009504 <HAL_GetTick>
 800b906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b908:	e00a      	b.n	800b920 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b90a:	f7fd fdfb 	bl	8009504 <HAL_GetTick>
 800b90e:	4602      	mov	r2, r0
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b918:	4293      	cmp	r3, r2
 800b91a:	d901      	bls.n	800b920 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b91c:	2303      	movs	r3, #3
 800b91e:	e0b1      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b920:	4b4b      	ldr	r3, [pc, #300]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	f003 0302 	and.w	r3, r3, #2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d0ee      	beq.n	800b90a <HAL_RCC_OscConfig+0x37e>
 800b92c:	e014      	b.n	800b958 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b92e:	f7fd fde9 	bl	8009504 <HAL_GetTick>
 800b932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b934:	e00a      	b.n	800b94c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b936:	f7fd fde5 	bl	8009504 <HAL_GetTick>
 800b93a:	4602      	mov	r2, r0
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b944:	4293      	cmp	r3, r2
 800b946:	d901      	bls.n	800b94c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b948:	2303      	movs	r3, #3
 800b94a:	e09b      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b94c:	4b40      	ldr	r3, [pc, #256]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	f003 0302 	and.w	r3, r3, #2
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1ee      	bne.n	800b936 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b958:	7dfb      	ldrb	r3, [r7, #23]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d105      	bne.n	800b96a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b95e:	4b3c      	ldr	r3, [pc, #240]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b960:	69db      	ldr	r3, [r3, #28]
 800b962:	4a3b      	ldr	r2, [pc, #236]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b968:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	69db      	ldr	r3, [r3, #28]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 8087 	beq.w	800ba82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b974:	4b36      	ldr	r3, [pc, #216]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	f003 030c 	and.w	r3, r3, #12
 800b97c:	2b08      	cmp	r3, #8
 800b97e:	d061      	beq.n	800ba44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d146      	bne.n	800ba16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b988:	4b33      	ldr	r3, [pc, #204]	@ (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b98e:	f7fd fdb9 	bl	8009504 <HAL_GetTick>
 800b992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b994:	e008      	b.n	800b9a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b996:	f7fd fdb5 	bl	8009504 <HAL_GetTick>
 800b99a:	4602      	mov	r2, r0
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d901      	bls.n	800b9a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e06d      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b9a8:	4b29      	ldr	r3, [pc, #164]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1f0      	bne.n	800b996 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9bc:	d108      	bne.n	800b9d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b9be:	4b24      	ldr	r3, [pc, #144]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	4921      	ldr	r1, [pc, #132]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b9d0:	4b1f      	ldr	r3, [pc, #124]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a19      	ldr	r1, [r3, #32]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e0:	430b      	orrs	r3, r1
 800b9e2:	491b      	ldr	r1, [pc, #108]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b9e8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9ee:	f7fd fd89 	bl	8009504 <HAL_GetTick>
 800b9f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b9f4:	e008      	b.n	800ba08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9f6:	f7fd fd85 	bl	8009504 <HAL_GetTick>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d901      	bls.n	800ba08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e03d      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ba08:	4b11      	ldr	r3, [pc, #68]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0f0      	beq.n	800b9f6 <HAL_RCC_OscConfig+0x46a>
 800ba14:	e035      	b.n	800ba82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba16:	4b10      	ldr	r3, [pc, #64]	@ (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba1c:	f7fd fd72 	bl	8009504 <HAL_GetTick>
 800ba20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ba22:	e008      	b.n	800ba36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba24:	f7fd fd6e 	bl	8009504 <HAL_GetTick>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d901      	bls.n	800ba36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e026      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ba36:	4b06      	ldr	r3, [pc, #24]	@ (800ba50 <HAL_RCC_OscConfig+0x4c4>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f0      	bne.n	800ba24 <HAL_RCC_OscConfig+0x498>
 800ba42:	e01e      	b.n	800ba82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	69db      	ldr	r3, [r3, #28]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d107      	bne.n	800ba5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e019      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
 800ba50:	40021000 	.word	0x40021000
 800ba54:	40007000 	.word	0x40007000
 800ba58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ba5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba8c <HAL_RCC_OscConfig+0x500>)
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a1b      	ldr	r3, [r3, #32]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d106      	bne.n	800ba7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d001      	beq.n	800ba82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e000      	b.n	800ba84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	40021000 	.word	0x40021000

0800ba90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e0d0      	b.n	800bc46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800baa4:	4b6a      	ldr	r3, [pc, #424]	@ (800bc50 <HAL_RCC_ClockConfig+0x1c0>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f003 0307 	and.w	r3, r3, #7
 800baac:	683a      	ldr	r2, [r7, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d910      	bls.n	800bad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bab2:	4b67      	ldr	r3, [pc, #412]	@ (800bc50 <HAL_RCC_ClockConfig+0x1c0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f023 0207 	bic.w	r2, r3, #7
 800baba:	4965      	ldr	r1, [pc, #404]	@ (800bc50 <HAL_RCC_ClockConfig+0x1c0>)
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	4313      	orrs	r3, r2
 800bac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bac2:	4b63      	ldr	r3, [pc, #396]	@ (800bc50 <HAL_RCC_ClockConfig+0x1c0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0307 	and.w	r3, r3, #7
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d001      	beq.n	800bad4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e0b8      	b.n	800bc46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b00      	cmp	r3, #0
 800bade:	d020      	beq.n	800bb22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 0304 	and.w	r3, r3, #4
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800baec:	4b59      	ldr	r3, [pc, #356]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	4a58      	ldr	r2, [pc, #352]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800baf2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800baf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 0308 	and.w	r3, r3, #8
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d005      	beq.n	800bb10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bb04:	4b53      	ldr	r3, [pc, #332]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	4a52      	ldr	r2, [pc, #328]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bb0a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800bb0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb10:	4b50      	ldr	r3, [pc, #320]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	494d      	ldr	r1, [pc, #308]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d040      	beq.n	800bbb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d107      	bne.n	800bb46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb36:	4b47      	ldr	r3, [pc, #284]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d115      	bne.n	800bb6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e07f      	b.n	800bc46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d107      	bne.n	800bb5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb4e:	4b41      	ldr	r3, [pc, #260]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d109      	bne.n	800bb6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e073      	b.n	800bc46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb5e:	4b3d      	ldr	r3, [pc, #244]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 0302 	and.w	r3, r3, #2
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e06b      	b.n	800bc46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb6e:	4b39      	ldr	r3, [pc, #228]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f023 0203 	bic.w	r2, r3, #3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	4936      	ldr	r1, [pc, #216]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bb80:	f7fd fcc0 	bl	8009504 <HAL_GetTick>
 800bb84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb86:	e00a      	b.n	800bb9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb88:	f7fd fcbc 	bl	8009504 <HAL_GetTick>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d901      	bls.n	800bb9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e053      	b.n	800bc46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb9e:	4b2d      	ldr	r3, [pc, #180]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	f003 020c 	and.w	r2, r3, #12
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d1eb      	bne.n	800bb88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bbb0:	4b27      	ldr	r3, [pc, #156]	@ (800bc50 <HAL_RCC_ClockConfig+0x1c0>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 0307 	and.w	r3, r3, #7
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d210      	bcs.n	800bbe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbbe:	4b24      	ldr	r3, [pc, #144]	@ (800bc50 <HAL_RCC_ClockConfig+0x1c0>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f023 0207 	bic.w	r2, r3, #7
 800bbc6:	4922      	ldr	r1, [pc, #136]	@ (800bc50 <HAL_RCC_ClockConfig+0x1c0>)
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbce:	4b20      	ldr	r3, [pc, #128]	@ (800bc50 <HAL_RCC_ClockConfig+0x1c0>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f003 0307 	and.w	r3, r3, #7
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d001      	beq.n	800bbe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e032      	b.n	800bc46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d008      	beq.n	800bbfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bbec:	4b19      	ldr	r3, [pc, #100]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	4916      	ldr	r1, [pc, #88]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f003 0308 	and.w	r3, r3, #8
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d009      	beq.n	800bc1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bc0a:	4b12      	ldr	r3, [pc, #72]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	00db      	lsls	r3, r3, #3
 800bc18:	490e      	ldr	r1, [pc, #56]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bc1e:	f000 f821 	bl	800bc64 <HAL_RCC_GetSysClockFreq>
 800bc22:	4602      	mov	r2, r0
 800bc24:	4b0b      	ldr	r3, [pc, #44]	@ (800bc54 <HAL_RCC_ClockConfig+0x1c4>)
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	091b      	lsrs	r3, r3, #4
 800bc2a:	f003 030f 	and.w	r3, r3, #15
 800bc2e:	490a      	ldr	r1, [pc, #40]	@ (800bc58 <HAL_RCC_ClockConfig+0x1c8>)
 800bc30:	5ccb      	ldrb	r3, [r1, r3]
 800bc32:	fa22 f303 	lsr.w	r3, r2, r3
 800bc36:	4a09      	ldr	r2, [pc, #36]	@ (800bc5c <HAL_RCC_ClockConfig+0x1cc>)
 800bc38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bc3a:	4b09      	ldr	r3, [pc, #36]	@ (800bc60 <HAL_RCC_ClockConfig+0x1d0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fd fc1e 	bl	8009480 <HAL_InitTick>

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	40022000 	.word	0x40022000
 800bc54:	40021000 	.word	0x40021000
 800bc58:	0800de6c 	.word	0x0800de6c
 800bc5c:	20000f78 	.word	0x20000f78
 800bc60:	20000f7c 	.word	0x20000f7c

0800bc64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60fb      	str	r3, [r7, #12]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60bb      	str	r3, [r7, #8]
 800bc72:	2300      	movs	r3, #0
 800bc74:	617b      	str	r3, [r7, #20]
 800bc76:	2300      	movs	r3, #0
 800bc78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bc7e:	4b1e      	ldr	r3, [pc, #120]	@ (800bcf8 <HAL_RCC_GetSysClockFreq+0x94>)
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f003 030c 	and.w	r3, r3, #12
 800bc8a:	2b04      	cmp	r3, #4
 800bc8c:	d002      	beq.n	800bc94 <HAL_RCC_GetSysClockFreq+0x30>
 800bc8e:	2b08      	cmp	r3, #8
 800bc90:	d003      	beq.n	800bc9a <HAL_RCC_GetSysClockFreq+0x36>
 800bc92:	e027      	b.n	800bce4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bc94:	4b19      	ldr	r3, [pc, #100]	@ (800bcfc <HAL_RCC_GetSysClockFreq+0x98>)
 800bc96:	613b      	str	r3, [r7, #16]
      break;
 800bc98:	e027      	b.n	800bcea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	0c9b      	lsrs	r3, r3, #18
 800bc9e:	f003 030f 	and.w	r3, r3, #15
 800bca2:	4a17      	ldr	r2, [pc, #92]	@ (800bd00 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bca4:	5cd3      	ldrb	r3, [r2, r3]
 800bca6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d010      	beq.n	800bcd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bcb2:	4b11      	ldr	r3, [pc, #68]	@ (800bcf8 <HAL_RCC_GetSysClockFreq+0x94>)
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	0c5b      	lsrs	r3, r3, #17
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	4a11      	ldr	r2, [pc, #68]	@ (800bd04 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bcbe:	5cd3      	ldrb	r3, [r2, r3]
 800bcc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a0d      	ldr	r2, [pc, #52]	@ (800bcfc <HAL_RCC_GetSysClockFreq+0x98>)
 800bcc6:	fb03 f202 	mul.w	r2, r3, r2
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd0:	617b      	str	r3, [r7, #20]
 800bcd2:	e004      	b.n	800bcde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a0c      	ldr	r2, [pc, #48]	@ (800bd08 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bcd8:	fb02 f303 	mul.w	r3, r2, r3
 800bcdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	613b      	str	r3, [r7, #16]
      break;
 800bce2:	e002      	b.n	800bcea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bce4:	4b05      	ldr	r3, [pc, #20]	@ (800bcfc <HAL_RCC_GetSysClockFreq+0x98>)
 800bce6:	613b      	str	r3, [r7, #16]
      break;
 800bce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bcea:	693b      	ldr	r3, [r7, #16]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	371c      	adds	r7, #28
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bc80      	pop	{r7}
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	40021000 	.word	0x40021000
 800bcfc:	007a1200 	.word	0x007a1200
 800bd00:	0800de84 	.word	0x0800de84
 800bd04:	0800de94 	.word	0x0800de94
 800bd08:	003d0900 	.word	0x003d0900

0800bd0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bd10:	4b02      	ldr	r3, [pc, #8]	@ (800bd1c <HAL_RCC_GetHCLKFreq+0x10>)
 800bd12:	681b      	ldr	r3, [r3, #0]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bc80      	pop	{r7}
 800bd1a:	4770      	bx	lr
 800bd1c:	20000f78 	.word	0x20000f78

0800bd20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bd24:	f7ff fff2 	bl	800bd0c <HAL_RCC_GetHCLKFreq>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	4b05      	ldr	r3, [pc, #20]	@ (800bd40 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	0a1b      	lsrs	r3, r3, #8
 800bd30:	f003 0307 	and.w	r3, r3, #7
 800bd34:	4903      	ldr	r1, [pc, #12]	@ (800bd44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd36:	5ccb      	ldrb	r3, [r1, r3]
 800bd38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	40021000 	.word	0x40021000
 800bd44:	0800de7c 	.word	0x0800de7c

0800bd48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bd4c:	f7ff ffde 	bl	800bd0c <HAL_RCC_GetHCLKFreq>
 800bd50:	4602      	mov	r2, r0
 800bd52:	4b05      	ldr	r3, [pc, #20]	@ (800bd68 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	0adb      	lsrs	r3, r3, #11
 800bd58:	f003 0307 	and.w	r3, r3, #7
 800bd5c:	4903      	ldr	r1, [pc, #12]	@ (800bd6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800bd5e:	5ccb      	ldrb	r3, [r1, r3]
 800bd60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	40021000 	.word	0x40021000
 800bd6c:	0800de7c 	.word	0x0800de7c

0800bd70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bd78:	4b0a      	ldr	r3, [pc, #40]	@ (800bda4 <RCC_Delay+0x34>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a0a      	ldr	r2, [pc, #40]	@ (800bda8 <RCC_Delay+0x38>)
 800bd7e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd82:	0a5b      	lsrs	r3, r3, #9
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	fb02 f303 	mul.w	r3, r2, r3
 800bd8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bd8c:	bf00      	nop
  }
  while (Delay --);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	1e5a      	subs	r2, r3, #1
 800bd92:	60fa      	str	r2, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1f9      	bne.n	800bd8c <RCC_Delay+0x1c>
}
 800bd98:	bf00      	nop
 800bd9a:	bf00      	nop
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bc80      	pop	{r7}
 800bda2:	4770      	bx	lr
 800bda4:	20000f78 	.word	0x20000f78
 800bda8:	10624dd3 	.word	0x10624dd3

0800bdac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e041      	b.n	800be42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d106      	bne.n	800bdd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7fd fa22 	bl	800921c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2202      	movs	r2, #2
 800bddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f000 fa82 	bl	800c2f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
	...

0800be4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d001      	beq.n	800be64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	e044      	b.n	800beee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2202      	movs	r2, #2
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68da      	ldr	r2, [r3, #12]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f042 0201 	orr.w	r2, r2, #1
 800be7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a1d      	ldr	r2, [pc, #116]	@ (800bef8 <HAL_TIM_Base_Start_IT+0xac>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d018      	beq.n	800beb8 <HAL_TIM_Base_Start_IT+0x6c>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a1c      	ldr	r2, [pc, #112]	@ (800befc <HAL_TIM_Base_Start_IT+0xb0>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d013      	beq.n	800beb8 <HAL_TIM_Base_Start_IT+0x6c>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be98:	d00e      	beq.n	800beb8 <HAL_TIM_Base_Start_IT+0x6c>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a18      	ldr	r2, [pc, #96]	@ (800bf00 <HAL_TIM_Base_Start_IT+0xb4>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d009      	beq.n	800beb8 <HAL_TIM_Base_Start_IT+0x6c>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a16      	ldr	r2, [pc, #88]	@ (800bf04 <HAL_TIM_Base_Start_IT+0xb8>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d004      	beq.n	800beb8 <HAL_TIM_Base_Start_IT+0x6c>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a15      	ldr	r2, [pc, #84]	@ (800bf08 <HAL_TIM_Base_Start_IT+0xbc>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d111      	bne.n	800bedc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f003 0307 	and.w	r3, r3, #7
 800bec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b06      	cmp	r3, #6
 800bec8:	d010      	beq.n	800beec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f042 0201 	orr.w	r2, r2, #1
 800bed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beda:	e007      	b.n	800beec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f042 0201 	orr.w	r2, r2, #1
 800beea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bc80      	pop	{r7}
 800bef6:	4770      	bx	lr
 800bef8:	40012c00 	.word	0x40012c00
 800befc:	40013400 	.word	0x40013400
 800bf00:	40000400 	.word	0x40000400
 800bf04:	40000800 	.word	0x40000800
 800bf08:	40000c00 	.word	0x40000c00

0800bf0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d122      	bne.n	800bf68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d11b      	bne.n	800bf68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f06f 0202 	mvn.w	r2, #2
 800bf38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	f003 0303 	and.w	r3, r3, #3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d003      	beq.n	800bf56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f9b4 	bl	800c2bc <HAL_TIM_IC_CaptureCallback>
 800bf54:	e005      	b.n	800bf62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f9a7 	bl	800c2aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 f9b6 	bl	800c2ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	f003 0304 	and.w	r3, r3, #4
 800bf72:	2b04      	cmp	r3, #4
 800bf74:	d122      	bne.n	800bfbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	f003 0304 	and.w	r3, r3, #4
 800bf80:	2b04      	cmp	r3, #4
 800bf82:	d11b      	bne.n	800bfbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f06f 0204 	mvn.w	r2, #4
 800bf8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2202      	movs	r2, #2
 800bf92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d003      	beq.n	800bfaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f98a 	bl	800c2bc <HAL_TIM_IC_CaptureCallback>
 800bfa8:	e005      	b.n	800bfb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f97d 	bl	800c2aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f98c 	bl	800c2ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	f003 0308 	and.w	r3, r3, #8
 800bfc6:	2b08      	cmp	r3, #8
 800bfc8:	d122      	bne.n	800c010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f003 0308 	and.w	r3, r3, #8
 800bfd4:	2b08      	cmp	r3, #8
 800bfd6:	d11b      	bne.n	800c010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f06f 0208 	mvn.w	r2, #8
 800bfe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2204      	movs	r2, #4
 800bfe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	f003 0303 	and.w	r3, r3, #3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f960 	bl	800c2bc <HAL_TIM_IC_CaptureCallback>
 800bffc:	e005      	b.n	800c00a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f953 	bl	800c2aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f962 	bl	800c2ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	f003 0310 	and.w	r3, r3, #16
 800c01a:	2b10      	cmp	r3, #16
 800c01c:	d122      	bne.n	800c064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f003 0310 	and.w	r3, r3, #16
 800c028:	2b10      	cmp	r3, #16
 800c02a:	d11b      	bne.n	800c064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f06f 0210 	mvn.w	r2, #16
 800c034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2208      	movs	r2, #8
 800c03a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	69db      	ldr	r3, [r3, #28]
 800c042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f936 	bl	800c2bc <HAL_TIM_IC_CaptureCallback>
 800c050:	e005      	b.n	800c05e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f929 	bl	800c2aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f938 	bl	800c2ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d10e      	bne.n	800c090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d107      	bne.n	800c090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f06f 0201 	mvn.w	r2, #1
 800c088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7fc fd5e 	bl	8008b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c09a:	2b80      	cmp	r3, #128	@ 0x80
 800c09c:	d10e      	bne.n	800c0bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0a8:	2b80      	cmp	r3, #128	@ 0x80
 800c0aa:	d107      	bne.n	800c0bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c0b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 faa1 	bl	800c5fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0c6:	2b40      	cmp	r3, #64	@ 0x40
 800c0c8:	d10e      	bne.n	800c0e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0d4:	2b40      	cmp	r3, #64	@ 0x40
 800c0d6:	d107      	bne.n	800c0e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c0e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f8fc 	bl	800c2e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	f003 0320 	and.w	r3, r3, #32
 800c0f2:	2b20      	cmp	r3, #32
 800c0f4:	d10e      	bne.n	800c114 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	f003 0320 	and.w	r3, r3, #32
 800c100:	2b20      	cmp	r3, #32
 800c102:	d107      	bne.n	800c114 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f06f 0220 	mvn.w	r2, #32
 800c10c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fa6c 	bl	800c5ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c130:	2b01      	cmp	r3, #1
 800c132:	d101      	bne.n	800c138 <HAL_TIM_ConfigClockSource+0x1c>
 800c134:	2302      	movs	r3, #2
 800c136:	e0b4      	b.n	800c2a2 <HAL_TIM_ConfigClockSource+0x186>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2202      	movs	r2, #2
 800c144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c15e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c170:	d03e      	beq.n	800c1f0 <HAL_TIM_ConfigClockSource+0xd4>
 800c172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c176:	f200 8087 	bhi.w	800c288 <HAL_TIM_ConfigClockSource+0x16c>
 800c17a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c17e:	f000 8086 	beq.w	800c28e <HAL_TIM_ConfigClockSource+0x172>
 800c182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c186:	d87f      	bhi.n	800c288 <HAL_TIM_ConfigClockSource+0x16c>
 800c188:	2b70      	cmp	r3, #112	@ 0x70
 800c18a:	d01a      	beq.n	800c1c2 <HAL_TIM_ConfigClockSource+0xa6>
 800c18c:	2b70      	cmp	r3, #112	@ 0x70
 800c18e:	d87b      	bhi.n	800c288 <HAL_TIM_ConfigClockSource+0x16c>
 800c190:	2b60      	cmp	r3, #96	@ 0x60
 800c192:	d050      	beq.n	800c236 <HAL_TIM_ConfigClockSource+0x11a>
 800c194:	2b60      	cmp	r3, #96	@ 0x60
 800c196:	d877      	bhi.n	800c288 <HAL_TIM_ConfigClockSource+0x16c>
 800c198:	2b50      	cmp	r3, #80	@ 0x50
 800c19a:	d03c      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0xfa>
 800c19c:	2b50      	cmp	r3, #80	@ 0x50
 800c19e:	d873      	bhi.n	800c288 <HAL_TIM_ConfigClockSource+0x16c>
 800c1a0:	2b40      	cmp	r3, #64	@ 0x40
 800c1a2:	d058      	beq.n	800c256 <HAL_TIM_ConfigClockSource+0x13a>
 800c1a4:	2b40      	cmp	r3, #64	@ 0x40
 800c1a6:	d86f      	bhi.n	800c288 <HAL_TIM_ConfigClockSource+0x16c>
 800c1a8:	2b30      	cmp	r3, #48	@ 0x30
 800c1aa:	d064      	beq.n	800c276 <HAL_TIM_ConfigClockSource+0x15a>
 800c1ac:	2b30      	cmp	r3, #48	@ 0x30
 800c1ae:	d86b      	bhi.n	800c288 <HAL_TIM_ConfigClockSource+0x16c>
 800c1b0:	2b20      	cmp	r3, #32
 800c1b2:	d060      	beq.n	800c276 <HAL_TIM_ConfigClockSource+0x15a>
 800c1b4:	2b20      	cmp	r3, #32
 800c1b6:	d867      	bhi.n	800c288 <HAL_TIM_ConfigClockSource+0x16c>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d05c      	beq.n	800c276 <HAL_TIM_ConfigClockSource+0x15a>
 800c1bc:	2b10      	cmp	r3, #16
 800c1be:	d05a      	beq.n	800c276 <HAL_TIM_ConfigClockSource+0x15a>
 800c1c0:	e062      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c1d2:	f000 f980 	bl	800c4d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c1e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	609a      	str	r2, [r3, #8]
      break;
 800c1ee:	e04f      	b.n	800c290 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c200:	f000 f969 	bl	800c4d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689a      	ldr	r2, [r3, #8]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c212:	609a      	str	r2, [r3, #8]
      break;
 800c214:	e03c      	b.n	800c290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c222:	461a      	mov	r2, r3
 800c224:	f000 f8e0 	bl	800c3e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2150      	movs	r1, #80	@ 0x50
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 f937 	bl	800c4a2 <TIM_ITRx_SetConfig>
      break;
 800c234:	e02c      	b.n	800c290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c242:	461a      	mov	r2, r3
 800c244:	f000 f8fe 	bl	800c444 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2160      	movs	r1, #96	@ 0x60
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 f927 	bl	800c4a2 <TIM_ITRx_SetConfig>
      break;
 800c254:	e01c      	b.n	800c290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c262:	461a      	mov	r2, r3
 800c264:	f000 f8c0 	bl	800c3e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2140      	movs	r1, #64	@ 0x40
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 f917 	bl	800c4a2 <TIM_ITRx_SetConfig>
      break;
 800c274:	e00c      	b.n	800c290 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4619      	mov	r1, r3
 800c280:	4610      	mov	r0, r2
 800c282:	f000 f90e 	bl	800c4a2 <TIM_ITRx_SetConfig>
      break;
 800c286:	e003      	b.n	800c290 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	73fb      	strb	r3, [r7, #15]
      break;
 800c28c:	e000      	b.n	800c290 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c28e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2aa:	b480      	push	{r7}
 800c2ac:	b083      	sub	sp, #12
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2b2:	bf00      	nop
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bc80      	pop	{r7}
 800c2ba:	4770      	bx	lr

0800c2bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bc80      	pop	{r7}
 800c2cc:	4770      	bx	lr

0800c2ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b083      	sub	sp, #12
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c2d6:	bf00      	nop
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bc80      	pop	{r7}
 800c2de:	4770      	bx	lr

0800c2e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bc80      	pop	{r7}
 800c2f0:	4770      	bx	lr
	...

0800c2f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a33      	ldr	r2, [pc, #204]	@ (800c3d4 <TIM_Base_SetConfig+0xe0>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d013      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a32      	ldr	r2, [pc, #200]	@ (800c3d8 <TIM_Base_SetConfig+0xe4>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d00f      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c31a:	d00b      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a2f      	ldr	r2, [pc, #188]	@ (800c3dc <TIM_Base_SetConfig+0xe8>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d007      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a2e      	ldr	r2, [pc, #184]	@ (800c3e0 <TIM_Base_SetConfig+0xec>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d003      	beq.n	800c334 <TIM_Base_SetConfig+0x40>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a2d      	ldr	r2, [pc, #180]	@ (800c3e4 <TIM_Base_SetConfig+0xf0>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d108      	bne.n	800c346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c33a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	4313      	orrs	r3, r2
 800c344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a22      	ldr	r2, [pc, #136]	@ (800c3d4 <TIM_Base_SetConfig+0xe0>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d013      	beq.n	800c376 <TIM_Base_SetConfig+0x82>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a21      	ldr	r2, [pc, #132]	@ (800c3d8 <TIM_Base_SetConfig+0xe4>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d00f      	beq.n	800c376 <TIM_Base_SetConfig+0x82>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c35c:	d00b      	beq.n	800c376 <TIM_Base_SetConfig+0x82>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a1e      	ldr	r2, [pc, #120]	@ (800c3dc <TIM_Base_SetConfig+0xe8>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d007      	beq.n	800c376 <TIM_Base_SetConfig+0x82>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a1d      	ldr	r2, [pc, #116]	@ (800c3e0 <TIM_Base_SetConfig+0xec>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d003      	beq.n	800c376 <TIM_Base_SetConfig+0x82>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a1c      	ldr	r2, [pc, #112]	@ (800c3e4 <TIM_Base_SetConfig+0xf0>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d108      	bne.n	800c388 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c37c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	4313      	orrs	r3, r2
 800c386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	695b      	ldr	r3, [r3, #20]
 800c392:	4313      	orrs	r3, r2
 800c394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	689a      	ldr	r2, [r3, #8]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a09      	ldr	r2, [pc, #36]	@ (800c3d4 <TIM_Base_SetConfig+0xe0>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d003      	beq.n	800c3bc <TIM_Base_SetConfig+0xc8>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a08      	ldr	r2, [pc, #32]	@ (800c3d8 <TIM_Base_SetConfig+0xe4>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d103      	bne.n	800c3c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	691a      	ldr	r2, [r3, #16]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	615a      	str	r2, [r3, #20]
}
 800c3ca:	bf00      	nop
 800c3cc:	3714      	adds	r7, #20
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bc80      	pop	{r7}
 800c3d2:	4770      	bx	lr
 800c3d4:	40012c00 	.word	0x40012c00
 800c3d8:	40013400 	.word	0x40013400
 800c3dc:	40000400 	.word	0x40000400
 800c3e0:	40000800 	.word	0x40000800
 800c3e4:	40000c00 	.word	0x40000c00

0800c3e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b087      	sub	sp, #28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6a1b      	ldr	r3, [r3, #32]
 800c3f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	f023 0201 	bic.w	r2, r3, #1
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	011b      	lsls	r3, r3, #4
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f023 030a 	bic.w	r3, r3, #10
 800c424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	621a      	str	r2, [r3, #32]
}
 800c43a:	bf00      	nop
 800c43c:	371c      	adds	r7, #28
 800c43e:	46bd      	mov	sp, r7
 800c440:	bc80      	pop	{r7}
 800c442:	4770      	bx	lr

0800c444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6a1b      	ldr	r3, [r3, #32]
 800c454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	f023 0210 	bic.w	r2, r3, #16
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c46e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	031b      	lsls	r3, r3, #12
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	4313      	orrs	r3, r2
 800c478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c480:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	011b      	lsls	r3, r3, #4
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	4313      	orrs	r3, r2
 800c48a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	693a      	ldr	r2, [r7, #16]
 800c490:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	697a      	ldr	r2, [r7, #20]
 800c496:	621a      	str	r2, [r3, #32]
}
 800c498:	bf00      	nop
 800c49a:	371c      	adds	r7, #28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bc80      	pop	{r7}
 800c4a0:	4770      	bx	lr

0800c4a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b085      	sub	sp, #20
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	f043 0307 	orr.w	r3, r3, #7
 800c4c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	609a      	str	r2, [r3, #8]
}
 800c4cc:	bf00      	nop
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bc80      	pop	{r7}
 800c4d4:	4770      	bx	lr

0800c4d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4d6:	b480      	push	{r7}
 800c4d8:	b087      	sub	sp, #28
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
 800c4e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c4f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	021a      	lsls	r2, r3, #8
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	4313      	orrs	r3, r2
 800c502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	697a      	ldr	r2, [r7, #20]
 800c508:	609a      	str	r2, [r3, #8]
}
 800c50a:	bf00      	nop
 800c50c:	371c      	adds	r7, #28
 800c50e:	46bd      	mov	sp, r7
 800c510:	bc80      	pop	{r7}
 800c512:	4770      	bx	lr

0800c514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c524:	2b01      	cmp	r3, #1
 800c526:	d101      	bne.n	800c52c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c528:	2302      	movs	r3, #2
 800c52a:	e050      	b.n	800c5ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2202      	movs	r2, #2
 800c538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a1b      	ldr	r2, [pc, #108]	@ (800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d018      	beq.n	800c5a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a19      	ldr	r2, [pc, #100]	@ (800c5dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d013      	beq.n	800c5a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c582:	d00e      	beq.n	800c5a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a15      	ldr	r2, [pc, #84]	@ (800c5e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d009      	beq.n	800c5a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a14      	ldr	r2, [pc, #80]	@ (800c5e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d004      	beq.n	800c5a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a12      	ldr	r2, [pc, #72]	@ (800c5e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d10c      	bne.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3714      	adds	r7, #20
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bc80      	pop	{r7}
 800c5d6:	4770      	bx	lr
 800c5d8:	40012c00 	.word	0x40012c00
 800c5dc:	40013400 	.word	0x40013400
 800c5e0:	40000400 	.word	0x40000400
 800c5e4:	40000800 	.word	0x40000800
 800c5e8:	40000c00 	.word	0x40000c00

0800c5ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bc80      	pop	{r7}
 800c5fc:	4770      	bx	lr

0800c5fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b083      	sub	sp, #12
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bc80      	pop	{r7}
 800c60e:	4770      	bx	lr

0800c610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e042      	b.n	800c6a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d106      	bne.n	800c63c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7fc fe16 	bl	8009268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2224      	movs	r2, #36	@ 0x24
 800c640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68da      	ldr	r2, [r3, #12]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fcb5 	bl	800cfc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	691a      	ldr	r2, [r3, #16]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	695a      	ldr	r2, [r3, #20]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68da      	ldr	r2, [r3, #12]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2220      	movs	r2, #32
 800c694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2220      	movs	r2, #32
 800c69c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b20      	cmp	r3, #32
 800c6c8:	d121      	bne.n	800c70e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <HAL_UART_Transmit_IT+0x26>
 800c6d0:	88fb      	ldrh	r3, [r7, #6]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e01a      	b.n	800c710 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	88fa      	ldrh	r2, [r7, #6]
 800c6e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	88fa      	ldrh	r2, [r7, #6]
 800c6ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2221      	movs	r2, #33	@ 0x21
 800c6f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	68da      	ldr	r2, [r3, #12]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c708:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	e000      	b.n	800c710 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c70e:	2302      	movs	r3, #2
  }
}
 800c710:	4618      	mov	r0, r3
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	bc80      	pop	{r7}
 800c718:	4770      	bx	lr
	...

0800c71c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b0ba      	sub	sp, #232	@ 0xe8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	695b      	ldr	r3, [r3, #20]
 800c73e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c742:	2300      	movs	r3, #0
 800c744:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c748:	2300      	movs	r3, #0
 800c74a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c752:	f003 030f 	and.w	r3, r3, #15
 800c756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c75a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10f      	bne.n	800c782 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c766:	f003 0320 	and.w	r3, r3, #32
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d009      	beq.n	800c782 <HAL_UART_IRQHandler+0x66>
 800c76e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c772:	f003 0320 	and.w	r3, r3, #32
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fb63 	bl	800ce46 <UART_Receive_IT>
      return;
 800c780:	e25b      	b.n	800cc3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 80de 	beq.w	800c948 <HAL_UART_IRQHandler+0x22c>
 800c78c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	2b00      	cmp	r3, #0
 800c796:	d106      	bne.n	800c7a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c79c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f000 80d1 	beq.w	800c948 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00b      	beq.n	800c7ca <HAL_UART_IRQHandler+0xae>
 800c7b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d005      	beq.n	800c7ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7c2:	f043 0201 	orr.w	r2, r3, #1
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ce:	f003 0304 	and.w	r3, r3, #4
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00b      	beq.n	800c7ee <HAL_UART_IRQHandler+0xd2>
 800c7d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7da:	f003 0301 	and.w	r3, r3, #1
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d005      	beq.n	800c7ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7e6:	f043 0202 	orr.w	r2, r3, #2
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7f2:	f003 0302 	and.w	r3, r3, #2
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00b      	beq.n	800c812 <HAL_UART_IRQHandler+0xf6>
 800c7fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	d005      	beq.n	800c812 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c80a:	f043 0204 	orr.w	r2, r3, #4
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c816:	f003 0308 	and.w	r3, r3, #8
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d011      	beq.n	800c842 <HAL_UART_IRQHandler+0x126>
 800c81e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c822:	f003 0320 	and.w	r3, r3, #32
 800c826:	2b00      	cmp	r3, #0
 800c828:	d105      	bne.n	800c836 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c82a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c82e:	f003 0301 	and.w	r3, r3, #1
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c83a:	f043 0208 	orr.w	r2, r3, #8
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c846:	2b00      	cmp	r3, #0
 800c848:	f000 81f2 	beq.w	800cc30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c850:	f003 0320 	and.w	r3, r3, #32
 800c854:	2b00      	cmp	r3, #0
 800c856:	d008      	beq.n	800c86a <HAL_UART_IRQHandler+0x14e>
 800c858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c85c:	f003 0320 	and.w	r3, r3, #32
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 faee 	bl	800ce46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	695b      	ldr	r3, [r3, #20]
 800c870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c874:	2b00      	cmp	r3, #0
 800c876:	bf14      	ite	ne
 800c878:	2301      	movne	r3, #1
 800c87a:	2300      	moveq	r3, #0
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c886:	f003 0308 	and.w	r3, r3, #8
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d103      	bne.n	800c896 <HAL_UART_IRQHandler+0x17a>
 800c88e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c892:	2b00      	cmp	r3, #0
 800c894:	d04f      	beq.n	800c936 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f9f8 	bl	800cc8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d041      	beq.n	800c92e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3314      	adds	r3, #20
 800c8b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c8b8:	e853 3f00 	ldrex	r3, [r3]
 800c8bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c8c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	3314      	adds	r3, #20
 800c8d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c8d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c8da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c8e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c8e6:	e841 2300 	strex	r3, r2, [r1]
 800c8ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c8ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1d9      	bne.n	800c8aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d013      	beq.n	800c926 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c902:	4a7e      	ldr	r2, [pc, #504]	@ (800cafc <HAL_UART_IRQHandler+0x3e0>)
 800c904:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fd f86c 	bl	80099e8 <HAL_DMA_Abort_IT>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d016      	beq.n	800c944 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c91a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c920:	4610      	mov	r0, r2
 800c922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c924:	e00e      	b.n	800c944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f99c 	bl	800cc64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c92c:	e00a      	b.n	800c944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 f998 	bl	800cc64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c934:	e006      	b.n	800c944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f994 	bl	800cc64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c942:	e175      	b.n	800cc30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c944:	bf00      	nop
    return;
 800c946:	e173      	b.n	800cc30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	f040 814f 	bne.w	800cbf0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c956:	f003 0310 	and.w	r3, r3, #16
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f000 8148 	beq.w	800cbf0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c964:	f003 0310 	and.w	r3, r3, #16
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f000 8141 	beq.w	800cbf0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c96e:	2300      	movs	r3, #0
 800c970:	60bb      	str	r3, [r7, #8]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	60bb      	str	r3, [r7, #8]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	60bb      	str	r3, [r7, #8]
 800c982:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f000 80b6 	beq.w	800cb00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c9a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f000 8145 	beq.w	800cc34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c9ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	f080 813e 	bcs.w	800cc34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c9be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	2b20      	cmp	r3, #32
 800c9c8:	f000 8088 	beq.w	800cadc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	330c      	adds	r3, #12
 800c9d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c9da:	e853 3f00 	ldrex	r3, [r3]
 800c9de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c9e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c9e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	330c      	adds	r3, #12
 800c9f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c9f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c9fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ca04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ca08:	e841 2300 	strex	r3, r2, [r1]
 800ca0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ca10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1d9      	bne.n	800c9cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3314      	adds	r3, #20
 800ca1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca22:	e853 3f00 	ldrex	r3, [r3]
 800ca26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ca28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca2a:	f023 0301 	bic.w	r3, r3, #1
 800ca2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	3314      	adds	r3, #20
 800ca38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ca40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ca44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ca48:	e841 2300 	strex	r3, r2, [r1]
 800ca4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ca4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1e1      	bne.n	800ca18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	3314      	adds	r3, #20
 800ca5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca5e:	e853 3f00 	ldrex	r3, [r3]
 800ca62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ca64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	3314      	adds	r3, #20
 800ca74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ca78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca80:	e841 2300 	strex	r3, r2, [r1]
 800ca84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ca86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1e3      	bne.n	800ca54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2220      	movs	r2, #32
 800ca90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	330c      	adds	r3, #12
 800caa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caa4:	e853 3f00 	ldrex	r3, [r3]
 800caa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800caaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800caac:	f023 0310 	bic.w	r3, r3, #16
 800cab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	330c      	adds	r3, #12
 800caba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cabe:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cac0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cac4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cac6:	e841 2300 	strex	r3, r2, [r1]
 800caca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cacc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1e3      	bne.n	800ca9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fc ff4b 	bl	8009972 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2202      	movs	r2, #2
 800cae0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800caea:	b29b      	uxth	r3, r3
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	b29b      	uxth	r3, r3
 800caf0:	4619      	mov	r1, r3
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f8bf 	bl	800cc76 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800caf8:	e09c      	b.n	800cc34 <HAL_UART_IRQHandler+0x518>
 800cafa:	bf00      	nop
 800cafc:	0800cd51 	.word	0x0800cd51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 808e 	beq.w	800cc38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cb1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 8089 	beq.w	800cc38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	330c      	adds	r3, #12
 800cb2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb30:	e853 3f00 	ldrex	r3, [r3]
 800cb34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	330c      	adds	r3, #12
 800cb46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800cb4a:	647a      	str	r2, [r7, #68]	@ 0x44
 800cb4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb52:	e841 2300 	strex	r3, r2, [r1]
 800cb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1e3      	bne.n	800cb26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3314      	adds	r3, #20
 800cb64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb68:	e853 3f00 	ldrex	r3, [r3]
 800cb6c:	623b      	str	r3, [r7, #32]
   return(result);
 800cb6e:	6a3b      	ldr	r3, [r7, #32]
 800cb70:	f023 0301 	bic.w	r3, r3, #1
 800cb74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	3314      	adds	r3, #20
 800cb7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cb82:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb8a:	e841 2300 	strex	r3, r2, [r1]
 800cb8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1e3      	bne.n	800cb5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2220      	movs	r2, #32
 800cb9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	330c      	adds	r3, #12
 800cbaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	e853 3f00 	ldrex	r3, [r3]
 800cbb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f023 0310 	bic.w	r3, r3, #16
 800cbba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	330c      	adds	r3, #12
 800cbc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800cbc8:	61fa      	str	r2, [r7, #28]
 800cbca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbcc:	69b9      	ldr	r1, [r7, #24]
 800cbce:	69fa      	ldr	r2, [r7, #28]
 800cbd0:	e841 2300 	strex	r3, r2, [r1]
 800cbd4:	617b      	str	r3, [r7, #20]
   return(result);
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1e3      	bne.n	800cba4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2202      	movs	r2, #2
 800cbe0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cbe2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 f844 	bl	800cc76 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cbee:	e023      	b.n	800cc38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d009      	beq.n	800cc10 <HAL_UART_IRQHandler+0x4f4>
 800cbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d003      	beq.n	800cc10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f8b5 	bl	800cd78 <UART_Transmit_IT>
    return;
 800cc0e:	e014      	b.n	800cc3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cc10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00e      	beq.n	800cc3a <HAL_UART_IRQHandler+0x51e>
 800cc1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d008      	beq.n	800cc3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f8f4 	bl	800ce16 <UART_EndTransmit_IT>
    return;
 800cc2e:	e004      	b.n	800cc3a <HAL_UART_IRQHandler+0x51e>
    return;
 800cc30:	bf00      	nop
 800cc32:	e002      	b.n	800cc3a <HAL_UART_IRQHandler+0x51e>
      return;
 800cc34:	bf00      	nop
 800cc36:	e000      	b.n	800cc3a <HAL_UART_IRQHandler+0x51e>
      return;
 800cc38:	bf00      	nop
  }
}
 800cc3a:	37e8      	adds	r7, #232	@ 0xe8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cc48:	bf00      	nop
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bc80      	pop	{r7}
 800cc50:	4770      	bx	lr

0800cc52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc52:	b480      	push	{r7}
 800cc54:	b083      	sub	sp, #12
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cc5a:	bf00      	nop
 800cc5c:	370c      	adds	r7, #12
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bc80      	pop	{r7}
 800cc62:	4770      	bx	lr

0800cc64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bc80      	pop	{r7}
 800cc74:	4770      	bx	lr

0800cc76 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b083      	sub	sp, #12
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc82:	bf00      	nop
 800cc84:	370c      	adds	r7, #12
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bc80      	pop	{r7}
 800cc8a:	4770      	bx	lr

0800cc8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b095      	sub	sp, #84	@ 0x54
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	330c      	adds	r3, #12
 800cc9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	330c      	adds	r3, #12
 800ccb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ccb4:	643a      	str	r2, [r7, #64]	@ 0x40
 800ccb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ccba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ccbc:	e841 2300 	strex	r3, r2, [r1]
 800ccc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e5      	bne.n	800cc94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	3314      	adds	r3, #20
 800ccce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd0:	6a3b      	ldr	r3, [r7, #32]
 800ccd2:	e853 3f00 	ldrex	r3, [r3]
 800ccd6:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	f023 0301 	bic.w	r3, r3, #1
 800ccde:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	3314      	adds	r3, #20
 800cce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccf0:	e841 2300 	strex	r3, r2, [r1]
 800ccf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1e5      	bne.n	800ccc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d119      	bne.n	800cd38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	330c      	adds	r3, #12
 800cd0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	e853 3f00 	ldrex	r3, [r3]
 800cd12:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	f023 0310 	bic.w	r3, r3, #16
 800cd1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	330c      	adds	r3, #12
 800cd22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd24:	61ba      	str	r2, [r7, #24]
 800cd26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd28:	6979      	ldr	r1, [r7, #20]
 800cd2a:	69ba      	ldr	r2, [r7, #24]
 800cd2c:	e841 2300 	strex	r3, r2, [r1]
 800cd30:	613b      	str	r3, [r7, #16]
   return(result);
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1e5      	bne.n	800cd04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2220      	movs	r2, #32
 800cd3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cd46:	bf00      	nop
 800cd48:	3754      	adds	r7, #84	@ 0x54
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bc80      	pop	{r7}
 800cd4e:	4770      	bx	lr

0800cd50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2200      	movs	r2, #0
 800cd68:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f7ff ff7a 	bl	800cc64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd70:	bf00      	nop
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	2b21      	cmp	r3, #33	@ 0x21
 800cd8a:	d13e      	bne.n	800ce0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd94:	d114      	bne.n	800cdc0 <UART_Transmit_IT+0x48>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	691b      	ldr	r3, [r3, #16]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d110      	bne.n	800cdc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cdb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6a1b      	ldr	r3, [r3, #32]
 800cdb8:	1c9a      	adds	r2, r3, #2
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	621a      	str	r2, [r3, #32]
 800cdbe:	e008      	b.n	800cdd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6a1b      	ldr	r3, [r3, #32]
 800cdc4:	1c59      	adds	r1, r3, #1
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	6211      	str	r1, [r2, #32]
 800cdca:	781a      	ldrb	r2, [r3, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4619      	mov	r1, r3
 800cde0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10f      	bne.n	800ce06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68da      	ldr	r2, [r3, #12]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cdf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	68da      	ldr	r2, [r3, #12]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ce04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	e000      	b.n	800ce0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ce0a:	2302      	movs	r3, #2
  }
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3714      	adds	r7, #20
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bc80      	pop	{r7}
 800ce14:	4770      	bx	lr

0800ce16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68da      	ldr	r2, [r3, #12]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2220      	movs	r2, #32
 800ce32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f7ff ff02 	bl	800cc40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b08c      	sub	sp, #48	@ 0x30
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b22      	cmp	r3, #34	@ 0x22
 800ce58:	f040 80ae 	bne.w	800cfb8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce64:	d117      	bne.n	800ce96 <UART_Receive_IT+0x50>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d113      	bne.n	800ce96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce76:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce8e:	1c9a      	adds	r2, r3, #2
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	629a      	str	r2, [r3, #40]	@ 0x28
 800ce94:	e026      	b.n	800cee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cea8:	d007      	beq.n	800ceba <UART_Receive_IT+0x74>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d10a      	bne.n	800cec8 <UART_Receive_IT+0x82>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d106      	bne.n	800cec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	e008      	b.n	800ceda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cede:	1c5a      	adds	r2, r3, #1
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	3b01      	subs	r3, #1
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	4619      	mov	r1, r3
 800cef2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d15d      	bne.n	800cfb4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	68da      	ldr	r2, [r3, #12]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f022 0220 	bic.w	r2, r2, #32
 800cf06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68da      	ldr	r2, [r3, #12]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cf16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	695a      	ldr	r2, [r3, #20]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f022 0201 	bic.w	r2, r2, #1
 800cf26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2220      	movs	r2, #32
 800cf2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d135      	bne.n	800cfaa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	330c      	adds	r3, #12
 800cf4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	e853 3f00 	ldrex	r3, [r3]
 800cf52:	613b      	str	r3, [r7, #16]
   return(result);
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	f023 0310 	bic.w	r3, r3, #16
 800cf5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	330c      	adds	r3, #12
 800cf62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf64:	623a      	str	r2, [r7, #32]
 800cf66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf68:	69f9      	ldr	r1, [r7, #28]
 800cf6a:	6a3a      	ldr	r2, [r7, #32]
 800cf6c:	e841 2300 	strex	r3, r2, [r1]
 800cf70:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1e5      	bne.n	800cf44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 0310 	and.w	r3, r3, #16
 800cf82:	2b10      	cmp	r3, #16
 800cf84:	d10a      	bne.n	800cf9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cf86:	2300      	movs	r3, #0
 800cf88:	60fb      	str	r3, [r7, #12]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	60fb      	str	r3, [r7, #12]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7ff fe67 	bl	800cc76 <HAL_UARTEx_RxEventCallback>
 800cfa8:	e002      	b.n	800cfb0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7ff fe51 	bl	800cc52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	e002      	b.n	800cfba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	e000      	b.n	800cfba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cfb8:	2302      	movs	r3, #2
  }
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3730      	adds	r7, #48	@ 0x30
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
	...

0800cfc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68da      	ldr	r2, [r3, #12]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	430a      	orrs	r2, r1
 800cfe0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	689a      	ldr	r2, [r3, #8]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	431a      	orrs	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	695b      	ldr	r3, [r3, #20]
 800cff0:	4313      	orrs	r3, r2
 800cff2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800cffe:	f023 030c 	bic.w	r3, r3, #12
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	6812      	ldr	r2, [r2, #0]
 800d006:	68b9      	ldr	r1, [r7, #8]
 800d008:	430b      	orrs	r3, r1
 800d00a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	695b      	ldr	r3, [r3, #20]
 800d012:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	699a      	ldr	r2, [r3, #24]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	430a      	orrs	r2, r1
 800d020:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a2c      	ldr	r2, [pc, #176]	@ (800d0d8 <UART_SetConfig+0x114>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d103      	bne.n	800d034 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d02c:	f7fe fe8c 	bl	800bd48 <HAL_RCC_GetPCLK2Freq>
 800d030:	60f8      	str	r0, [r7, #12]
 800d032:	e002      	b.n	800d03a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d034:	f7fe fe74 	bl	800bd20 <HAL_RCC_GetPCLK1Freq>
 800d038:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	4613      	mov	r3, r2
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4413      	add	r3, r2
 800d042:	009a      	lsls	r2, r3, #2
 800d044:	441a      	add	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d050:	4a22      	ldr	r2, [pc, #136]	@ (800d0dc <UART_SetConfig+0x118>)
 800d052:	fba2 2303 	umull	r2, r3, r2, r3
 800d056:	095b      	lsrs	r3, r3, #5
 800d058:	0119      	lsls	r1, r3, #4
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	4613      	mov	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4413      	add	r3, r2
 800d062:	009a      	lsls	r2, r3, #2
 800d064:	441a      	add	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d070:	4b1a      	ldr	r3, [pc, #104]	@ (800d0dc <UART_SetConfig+0x118>)
 800d072:	fba3 0302 	umull	r0, r3, r3, r2
 800d076:	095b      	lsrs	r3, r3, #5
 800d078:	2064      	movs	r0, #100	@ 0x64
 800d07a:	fb00 f303 	mul.w	r3, r0, r3
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	011b      	lsls	r3, r3, #4
 800d082:	3332      	adds	r3, #50	@ 0x32
 800d084:	4a15      	ldr	r2, [pc, #84]	@ (800d0dc <UART_SetConfig+0x118>)
 800d086:	fba2 2303 	umull	r2, r3, r2, r3
 800d08a:	095b      	lsrs	r3, r3, #5
 800d08c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d090:	4419      	add	r1, r3
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	4613      	mov	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	4413      	add	r3, r2
 800d09a:	009a      	lsls	r2, r3, #2
 800d09c:	441a      	add	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d0a8:	4b0c      	ldr	r3, [pc, #48]	@ (800d0dc <UART_SetConfig+0x118>)
 800d0aa:	fba3 0302 	umull	r0, r3, r3, r2
 800d0ae:	095b      	lsrs	r3, r3, #5
 800d0b0:	2064      	movs	r0, #100	@ 0x64
 800d0b2:	fb00 f303 	mul.w	r3, r0, r3
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	011b      	lsls	r3, r3, #4
 800d0ba:	3332      	adds	r3, #50	@ 0x32
 800d0bc:	4a07      	ldr	r2, [pc, #28]	@ (800d0dc <UART_SetConfig+0x118>)
 800d0be:	fba2 2303 	umull	r2, r3, r2, r3
 800d0c2:	095b      	lsrs	r3, r3, #5
 800d0c4:	f003 020f 	and.w	r2, r3, #15
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	440a      	add	r2, r1
 800d0ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d0d0:	bf00      	nop
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	40013800 	.word	0x40013800
 800d0dc:	51eb851f 	.word	0x51eb851f

0800d0e0 <__itoa>:
 800d0e0:	1e93      	subs	r3, r2, #2
 800d0e2:	2b22      	cmp	r3, #34	@ 0x22
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	d904      	bls.n	800d0f4 <__itoa+0x14>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	461c      	mov	r4, r3
 800d0ee:	700b      	strb	r3, [r1, #0]
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	bd10      	pop	{r4, pc}
 800d0f4:	2a0a      	cmp	r2, #10
 800d0f6:	d109      	bne.n	800d10c <__itoa+0x2c>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	da07      	bge.n	800d10c <__itoa+0x2c>
 800d0fc:	232d      	movs	r3, #45	@ 0x2d
 800d0fe:	700b      	strb	r3, [r1, #0]
 800d100:	2101      	movs	r1, #1
 800d102:	4240      	negs	r0, r0
 800d104:	4421      	add	r1, r4
 800d106:	f000 f8db 	bl	800d2c0 <__utoa>
 800d10a:	e7f1      	b.n	800d0f0 <__itoa+0x10>
 800d10c:	2100      	movs	r1, #0
 800d10e:	e7f9      	b.n	800d104 <__itoa+0x24>

0800d110 <itoa>:
 800d110:	f7ff bfe6 	b.w	800d0e0 <__itoa>

0800d114 <malloc>:
 800d114:	4b02      	ldr	r3, [pc, #8]	@ (800d120 <malloc+0xc>)
 800d116:	4601      	mov	r1, r0
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	f000 b825 	b.w	800d168 <_malloc_r>
 800d11e:	bf00      	nop
 800d120:	20000f84 	.word	0x20000f84

0800d124 <sbrk_aligned>:
 800d124:	b570      	push	{r4, r5, r6, lr}
 800d126:	4e0f      	ldr	r6, [pc, #60]	@ (800d164 <sbrk_aligned+0x40>)
 800d128:	460c      	mov	r4, r1
 800d12a:	6831      	ldr	r1, [r6, #0]
 800d12c:	4605      	mov	r5, r0
 800d12e:	b911      	cbnz	r1, 800d136 <sbrk_aligned+0x12>
 800d130:	f000 f932 	bl	800d398 <_sbrk_r>
 800d134:	6030      	str	r0, [r6, #0]
 800d136:	4621      	mov	r1, r4
 800d138:	4628      	mov	r0, r5
 800d13a:	f000 f92d 	bl	800d398 <_sbrk_r>
 800d13e:	1c43      	adds	r3, r0, #1
 800d140:	d103      	bne.n	800d14a <sbrk_aligned+0x26>
 800d142:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d146:	4620      	mov	r0, r4
 800d148:	bd70      	pop	{r4, r5, r6, pc}
 800d14a:	1cc4      	adds	r4, r0, #3
 800d14c:	f024 0403 	bic.w	r4, r4, #3
 800d150:	42a0      	cmp	r0, r4
 800d152:	d0f8      	beq.n	800d146 <sbrk_aligned+0x22>
 800d154:	1a21      	subs	r1, r4, r0
 800d156:	4628      	mov	r0, r5
 800d158:	f000 f91e 	bl	800d398 <_sbrk_r>
 800d15c:	3001      	adds	r0, #1
 800d15e:	d1f2      	bne.n	800d146 <sbrk_aligned+0x22>
 800d160:	e7ef      	b.n	800d142 <sbrk_aligned+0x1e>
 800d162:	bf00      	nop
 800d164:	20001a2c 	.word	0x20001a2c

0800d168 <_malloc_r>:
 800d168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d16c:	1ccd      	adds	r5, r1, #3
 800d16e:	f025 0503 	bic.w	r5, r5, #3
 800d172:	3508      	adds	r5, #8
 800d174:	2d0c      	cmp	r5, #12
 800d176:	bf38      	it	cc
 800d178:	250c      	movcc	r5, #12
 800d17a:	2d00      	cmp	r5, #0
 800d17c:	4606      	mov	r6, r0
 800d17e:	db01      	blt.n	800d184 <_malloc_r+0x1c>
 800d180:	42a9      	cmp	r1, r5
 800d182:	d904      	bls.n	800d18e <_malloc_r+0x26>
 800d184:	230c      	movs	r3, #12
 800d186:	6033      	str	r3, [r6, #0]
 800d188:	2000      	movs	r0, #0
 800d18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d18e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d264 <_malloc_r+0xfc>
 800d192:	f000 f869 	bl	800d268 <__malloc_lock>
 800d196:	f8d8 3000 	ldr.w	r3, [r8]
 800d19a:	461c      	mov	r4, r3
 800d19c:	bb44      	cbnz	r4, 800d1f0 <_malloc_r+0x88>
 800d19e:	4629      	mov	r1, r5
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	f7ff ffbf 	bl	800d124 <sbrk_aligned>
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	d158      	bne.n	800d25e <_malloc_r+0xf6>
 800d1ac:	f8d8 4000 	ldr.w	r4, [r8]
 800d1b0:	4627      	mov	r7, r4
 800d1b2:	2f00      	cmp	r7, #0
 800d1b4:	d143      	bne.n	800d23e <_malloc_r+0xd6>
 800d1b6:	2c00      	cmp	r4, #0
 800d1b8:	d04b      	beq.n	800d252 <_malloc_r+0xea>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	4639      	mov	r1, r7
 800d1be:	4630      	mov	r0, r6
 800d1c0:	eb04 0903 	add.w	r9, r4, r3
 800d1c4:	f000 f8e8 	bl	800d398 <_sbrk_r>
 800d1c8:	4581      	cmp	r9, r0
 800d1ca:	d142      	bne.n	800d252 <_malloc_r+0xea>
 800d1cc:	6821      	ldr	r1, [r4, #0]
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	1a6d      	subs	r5, r5, r1
 800d1d2:	4629      	mov	r1, r5
 800d1d4:	f7ff ffa6 	bl	800d124 <sbrk_aligned>
 800d1d8:	3001      	adds	r0, #1
 800d1da:	d03a      	beq.n	800d252 <_malloc_r+0xea>
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	442b      	add	r3, r5
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	f8d8 3000 	ldr.w	r3, [r8]
 800d1e6:	685a      	ldr	r2, [r3, #4]
 800d1e8:	bb62      	cbnz	r2, 800d244 <_malloc_r+0xdc>
 800d1ea:	f8c8 7000 	str.w	r7, [r8]
 800d1ee:	e00f      	b.n	800d210 <_malloc_r+0xa8>
 800d1f0:	6822      	ldr	r2, [r4, #0]
 800d1f2:	1b52      	subs	r2, r2, r5
 800d1f4:	d420      	bmi.n	800d238 <_malloc_r+0xd0>
 800d1f6:	2a0b      	cmp	r2, #11
 800d1f8:	d917      	bls.n	800d22a <_malloc_r+0xc2>
 800d1fa:	1961      	adds	r1, r4, r5
 800d1fc:	42a3      	cmp	r3, r4
 800d1fe:	6025      	str	r5, [r4, #0]
 800d200:	bf18      	it	ne
 800d202:	6059      	strne	r1, [r3, #4]
 800d204:	6863      	ldr	r3, [r4, #4]
 800d206:	bf08      	it	eq
 800d208:	f8c8 1000 	streq.w	r1, [r8]
 800d20c:	5162      	str	r2, [r4, r5]
 800d20e:	604b      	str	r3, [r1, #4]
 800d210:	4630      	mov	r0, r6
 800d212:	f000 f82f 	bl	800d274 <__malloc_unlock>
 800d216:	f104 000b 	add.w	r0, r4, #11
 800d21a:	1d23      	adds	r3, r4, #4
 800d21c:	f020 0007 	bic.w	r0, r0, #7
 800d220:	1ac2      	subs	r2, r0, r3
 800d222:	bf1c      	itt	ne
 800d224:	1a1b      	subne	r3, r3, r0
 800d226:	50a3      	strne	r3, [r4, r2]
 800d228:	e7af      	b.n	800d18a <_malloc_r+0x22>
 800d22a:	6862      	ldr	r2, [r4, #4]
 800d22c:	42a3      	cmp	r3, r4
 800d22e:	bf0c      	ite	eq
 800d230:	f8c8 2000 	streq.w	r2, [r8]
 800d234:	605a      	strne	r2, [r3, #4]
 800d236:	e7eb      	b.n	800d210 <_malloc_r+0xa8>
 800d238:	4623      	mov	r3, r4
 800d23a:	6864      	ldr	r4, [r4, #4]
 800d23c:	e7ae      	b.n	800d19c <_malloc_r+0x34>
 800d23e:	463c      	mov	r4, r7
 800d240:	687f      	ldr	r7, [r7, #4]
 800d242:	e7b6      	b.n	800d1b2 <_malloc_r+0x4a>
 800d244:	461a      	mov	r2, r3
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	42a3      	cmp	r3, r4
 800d24a:	d1fb      	bne.n	800d244 <_malloc_r+0xdc>
 800d24c:	2300      	movs	r3, #0
 800d24e:	6053      	str	r3, [r2, #4]
 800d250:	e7de      	b.n	800d210 <_malloc_r+0xa8>
 800d252:	230c      	movs	r3, #12
 800d254:	4630      	mov	r0, r6
 800d256:	6033      	str	r3, [r6, #0]
 800d258:	f000 f80c 	bl	800d274 <__malloc_unlock>
 800d25c:	e794      	b.n	800d188 <_malloc_r+0x20>
 800d25e:	6005      	str	r5, [r0, #0]
 800d260:	e7d6      	b.n	800d210 <_malloc_r+0xa8>
 800d262:	bf00      	nop
 800d264:	20001a30 	.word	0x20001a30

0800d268 <__malloc_lock>:
 800d268:	4801      	ldr	r0, [pc, #4]	@ (800d270 <__malloc_lock+0x8>)
 800d26a:	f000 b8cf 	b.w	800d40c <__retarget_lock_acquire_recursive>
 800d26e:	bf00      	nop
 800d270:	20001b6c 	.word	0x20001b6c

0800d274 <__malloc_unlock>:
 800d274:	4801      	ldr	r0, [pc, #4]	@ (800d27c <__malloc_unlock+0x8>)
 800d276:	f000 b8ca 	b.w	800d40e <__retarget_lock_release_recursive>
 800d27a:	bf00      	nop
 800d27c:	20001b6c 	.word	0x20001b6c

0800d280 <siprintf>:
 800d280:	b40e      	push	{r1, r2, r3}
 800d282:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d286:	b500      	push	{lr}
 800d288:	b09c      	sub	sp, #112	@ 0x70
 800d28a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d28c:	9002      	str	r0, [sp, #8]
 800d28e:	9006      	str	r0, [sp, #24]
 800d290:	9107      	str	r1, [sp, #28]
 800d292:	9104      	str	r1, [sp, #16]
 800d294:	4808      	ldr	r0, [pc, #32]	@ (800d2b8 <siprintf+0x38>)
 800d296:	4909      	ldr	r1, [pc, #36]	@ (800d2bc <siprintf+0x3c>)
 800d298:	f853 2b04 	ldr.w	r2, [r3], #4
 800d29c:	9105      	str	r1, [sp, #20]
 800d29e:	6800      	ldr	r0, [r0, #0]
 800d2a0:	a902      	add	r1, sp, #8
 800d2a2:	9301      	str	r3, [sp, #4]
 800d2a4:	f000 f960 	bl	800d568 <_svfiprintf_r>
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	9b02      	ldr	r3, [sp, #8]
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	b01c      	add	sp, #112	@ 0x70
 800d2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2b4:	b003      	add	sp, #12
 800d2b6:	4770      	bx	lr
 800d2b8:	20000f84 	.word	0x20000f84
 800d2bc:	ffff0208 	.word	0xffff0208

0800d2c0 <__utoa>:
 800d2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c2:	b08b      	sub	sp, #44	@ 0x2c
 800d2c4:	4605      	mov	r5, r0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	466e      	mov	r6, sp
 800d2ca:	4c1d      	ldr	r4, [pc, #116]	@ (800d340 <__utoa+0x80>)
 800d2cc:	f104 0c20 	add.w	ip, r4, #32
 800d2d0:	4637      	mov	r7, r6
 800d2d2:	6820      	ldr	r0, [r4, #0]
 800d2d4:	6861      	ldr	r1, [r4, #4]
 800d2d6:	3408      	adds	r4, #8
 800d2d8:	c703      	stmia	r7!, {r0, r1}
 800d2da:	4564      	cmp	r4, ip
 800d2dc:	463e      	mov	r6, r7
 800d2de:	d1f7      	bne.n	800d2d0 <__utoa+0x10>
 800d2e0:	7921      	ldrb	r1, [r4, #4]
 800d2e2:	6820      	ldr	r0, [r4, #0]
 800d2e4:	7139      	strb	r1, [r7, #4]
 800d2e6:	1e91      	subs	r1, r2, #2
 800d2e8:	2922      	cmp	r1, #34	@ 0x22
 800d2ea:	6038      	str	r0, [r7, #0]
 800d2ec:	f04f 0100 	mov.w	r1, #0
 800d2f0:	d904      	bls.n	800d2fc <__utoa+0x3c>
 800d2f2:	7019      	strb	r1, [r3, #0]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	b00b      	add	sp, #44	@ 0x2c
 800d2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2fc:	1e58      	subs	r0, r3, #1
 800d2fe:	4684      	mov	ip, r0
 800d300:	fbb5 f7f2 	udiv	r7, r5, r2
 800d304:	fb02 5617 	mls	r6, r2, r7, r5
 800d308:	3628      	adds	r6, #40	@ 0x28
 800d30a:	446e      	add	r6, sp
 800d30c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d310:	460c      	mov	r4, r1
 800d312:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d316:	462e      	mov	r6, r5
 800d318:	42b2      	cmp	r2, r6
 800d31a:	463d      	mov	r5, r7
 800d31c:	f101 0101 	add.w	r1, r1, #1
 800d320:	d9ee      	bls.n	800d300 <__utoa+0x40>
 800d322:	2200      	movs	r2, #0
 800d324:	545a      	strb	r2, [r3, r1]
 800d326:	1919      	adds	r1, r3, r4
 800d328:	1aa5      	subs	r5, r4, r2
 800d32a:	42aa      	cmp	r2, r5
 800d32c:	dae3      	bge.n	800d2f6 <__utoa+0x36>
 800d32e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d332:	780e      	ldrb	r6, [r1, #0]
 800d334:	3201      	adds	r2, #1
 800d336:	7006      	strb	r6, [r0, #0]
 800d338:	f801 5901 	strb.w	r5, [r1], #-1
 800d33c:	e7f4      	b.n	800d328 <__utoa+0x68>
 800d33e:	bf00      	nop
 800d340:	0800de96 	.word	0x0800de96

0800d344 <strcat>:
 800d344:	4602      	mov	r2, r0
 800d346:	b510      	push	{r4, lr}
 800d348:	7814      	ldrb	r4, [r2, #0]
 800d34a:	4613      	mov	r3, r2
 800d34c:	3201      	adds	r2, #1
 800d34e:	2c00      	cmp	r4, #0
 800d350:	d1fa      	bne.n	800d348 <strcat+0x4>
 800d352:	3b01      	subs	r3, #1
 800d354:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d358:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	d1f9      	bne.n	800d354 <strcat+0x10>
 800d360:	bd10      	pop	{r4, pc}

0800d362 <strncpy>:
 800d362:	4603      	mov	r3, r0
 800d364:	b510      	push	{r4, lr}
 800d366:	3901      	subs	r1, #1
 800d368:	b132      	cbz	r2, 800d378 <strncpy+0x16>
 800d36a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d36e:	3a01      	subs	r2, #1
 800d370:	f803 4b01 	strb.w	r4, [r3], #1
 800d374:	2c00      	cmp	r4, #0
 800d376:	d1f7      	bne.n	800d368 <strncpy+0x6>
 800d378:	2100      	movs	r1, #0
 800d37a:	441a      	add	r2, r3
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d100      	bne.n	800d382 <strncpy+0x20>
 800d380:	bd10      	pop	{r4, pc}
 800d382:	f803 1b01 	strb.w	r1, [r3], #1
 800d386:	e7f9      	b.n	800d37c <strncpy+0x1a>

0800d388 <memset>:
 800d388:	4603      	mov	r3, r0
 800d38a:	4402      	add	r2, r0
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d100      	bne.n	800d392 <memset+0xa>
 800d390:	4770      	bx	lr
 800d392:	f803 1b01 	strb.w	r1, [r3], #1
 800d396:	e7f9      	b.n	800d38c <memset+0x4>

0800d398 <_sbrk_r>:
 800d398:	b538      	push	{r3, r4, r5, lr}
 800d39a:	2300      	movs	r3, #0
 800d39c:	4d05      	ldr	r5, [pc, #20]	@ (800d3b4 <_sbrk_r+0x1c>)
 800d39e:	4604      	mov	r4, r0
 800d3a0:	4608      	mov	r0, r1
 800d3a2:	602b      	str	r3, [r5, #0]
 800d3a4:	f7fb fff4 	bl	8009390 <_sbrk>
 800d3a8:	1c43      	adds	r3, r0, #1
 800d3aa:	d102      	bne.n	800d3b2 <_sbrk_r+0x1a>
 800d3ac:	682b      	ldr	r3, [r5, #0]
 800d3ae:	b103      	cbz	r3, 800d3b2 <_sbrk_r+0x1a>
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	bd38      	pop	{r3, r4, r5, pc}
 800d3b4:	20001b70 	.word	0x20001b70

0800d3b8 <__errno>:
 800d3b8:	4b01      	ldr	r3, [pc, #4]	@ (800d3c0 <__errno+0x8>)
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	20000f84 	.word	0x20000f84

0800d3c4 <__libc_init_array>:
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	2600      	movs	r6, #0
 800d3c8:	4d0c      	ldr	r5, [pc, #48]	@ (800d3fc <__libc_init_array+0x38>)
 800d3ca:	4c0d      	ldr	r4, [pc, #52]	@ (800d400 <__libc_init_array+0x3c>)
 800d3cc:	1b64      	subs	r4, r4, r5
 800d3ce:	10a4      	asrs	r4, r4, #2
 800d3d0:	42a6      	cmp	r6, r4
 800d3d2:	d109      	bne.n	800d3e8 <__libc_init_array+0x24>
 800d3d4:	f000 fbc2 	bl	800db5c <_init>
 800d3d8:	2600      	movs	r6, #0
 800d3da:	4d0a      	ldr	r5, [pc, #40]	@ (800d404 <__libc_init_array+0x40>)
 800d3dc:	4c0a      	ldr	r4, [pc, #40]	@ (800d408 <__libc_init_array+0x44>)
 800d3de:	1b64      	subs	r4, r4, r5
 800d3e0:	10a4      	asrs	r4, r4, #2
 800d3e2:	42a6      	cmp	r6, r4
 800d3e4:	d105      	bne.n	800d3f2 <__libc_init_array+0x2e>
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ec:	4798      	blx	r3
 800d3ee:	3601      	adds	r6, #1
 800d3f0:	e7ee      	b.n	800d3d0 <__libc_init_array+0xc>
 800d3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3f6:	4798      	blx	r3
 800d3f8:	3601      	adds	r6, #1
 800d3fa:	e7f2      	b.n	800d3e2 <__libc_init_array+0x1e>
 800d3fc:	0800def8 	.word	0x0800def8
 800d400:	0800def8 	.word	0x0800def8
 800d404:	0800def8 	.word	0x0800def8
 800d408:	0800defc 	.word	0x0800defc

0800d40c <__retarget_lock_acquire_recursive>:
 800d40c:	4770      	bx	lr

0800d40e <__retarget_lock_release_recursive>:
 800d40e:	4770      	bx	lr

0800d410 <strcpy>:
 800d410:	4603      	mov	r3, r0
 800d412:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d416:	f803 2b01 	strb.w	r2, [r3], #1
 800d41a:	2a00      	cmp	r2, #0
 800d41c:	d1f9      	bne.n	800d412 <strcpy+0x2>
 800d41e:	4770      	bx	lr

0800d420 <_free_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4605      	mov	r5, r0
 800d424:	2900      	cmp	r1, #0
 800d426:	d040      	beq.n	800d4aa <_free_r+0x8a>
 800d428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d42c:	1f0c      	subs	r4, r1, #4
 800d42e:	2b00      	cmp	r3, #0
 800d430:	bfb8      	it	lt
 800d432:	18e4      	addlt	r4, r4, r3
 800d434:	f7ff ff18 	bl	800d268 <__malloc_lock>
 800d438:	4a1c      	ldr	r2, [pc, #112]	@ (800d4ac <_free_r+0x8c>)
 800d43a:	6813      	ldr	r3, [r2, #0]
 800d43c:	b933      	cbnz	r3, 800d44c <_free_r+0x2c>
 800d43e:	6063      	str	r3, [r4, #4]
 800d440:	6014      	str	r4, [r2, #0]
 800d442:	4628      	mov	r0, r5
 800d444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d448:	f7ff bf14 	b.w	800d274 <__malloc_unlock>
 800d44c:	42a3      	cmp	r3, r4
 800d44e:	d908      	bls.n	800d462 <_free_r+0x42>
 800d450:	6820      	ldr	r0, [r4, #0]
 800d452:	1821      	adds	r1, r4, r0
 800d454:	428b      	cmp	r3, r1
 800d456:	bf01      	itttt	eq
 800d458:	6819      	ldreq	r1, [r3, #0]
 800d45a:	685b      	ldreq	r3, [r3, #4]
 800d45c:	1809      	addeq	r1, r1, r0
 800d45e:	6021      	streq	r1, [r4, #0]
 800d460:	e7ed      	b.n	800d43e <_free_r+0x1e>
 800d462:	461a      	mov	r2, r3
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	b10b      	cbz	r3, 800d46c <_free_r+0x4c>
 800d468:	42a3      	cmp	r3, r4
 800d46a:	d9fa      	bls.n	800d462 <_free_r+0x42>
 800d46c:	6811      	ldr	r1, [r2, #0]
 800d46e:	1850      	adds	r0, r2, r1
 800d470:	42a0      	cmp	r0, r4
 800d472:	d10b      	bne.n	800d48c <_free_r+0x6c>
 800d474:	6820      	ldr	r0, [r4, #0]
 800d476:	4401      	add	r1, r0
 800d478:	1850      	adds	r0, r2, r1
 800d47a:	4283      	cmp	r3, r0
 800d47c:	6011      	str	r1, [r2, #0]
 800d47e:	d1e0      	bne.n	800d442 <_free_r+0x22>
 800d480:	6818      	ldr	r0, [r3, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	4408      	add	r0, r1
 800d486:	6010      	str	r0, [r2, #0]
 800d488:	6053      	str	r3, [r2, #4]
 800d48a:	e7da      	b.n	800d442 <_free_r+0x22>
 800d48c:	d902      	bls.n	800d494 <_free_r+0x74>
 800d48e:	230c      	movs	r3, #12
 800d490:	602b      	str	r3, [r5, #0]
 800d492:	e7d6      	b.n	800d442 <_free_r+0x22>
 800d494:	6820      	ldr	r0, [r4, #0]
 800d496:	1821      	adds	r1, r4, r0
 800d498:	428b      	cmp	r3, r1
 800d49a:	bf01      	itttt	eq
 800d49c:	6819      	ldreq	r1, [r3, #0]
 800d49e:	685b      	ldreq	r3, [r3, #4]
 800d4a0:	1809      	addeq	r1, r1, r0
 800d4a2:	6021      	streq	r1, [r4, #0]
 800d4a4:	6063      	str	r3, [r4, #4]
 800d4a6:	6054      	str	r4, [r2, #4]
 800d4a8:	e7cb      	b.n	800d442 <_free_r+0x22>
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	20001a30 	.word	0x20001a30

0800d4b0 <__ssputs_r>:
 800d4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b4:	461f      	mov	r7, r3
 800d4b6:	688e      	ldr	r6, [r1, #8]
 800d4b8:	4682      	mov	sl, r0
 800d4ba:	42be      	cmp	r6, r7
 800d4bc:	460c      	mov	r4, r1
 800d4be:	4690      	mov	r8, r2
 800d4c0:	680b      	ldr	r3, [r1, #0]
 800d4c2:	d82d      	bhi.n	800d520 <__ssputs_r+0x70>
 800d4c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4cc:	d026      	beq.n	800d51c <__ssputs_r+0x6c>
 800d4ce:	6965      	ldr	r5, [r4, #20]
 800d4d0:	6909      	ldr	r1, [r1, #16]
 800d4d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4d6:	eba3 0901 	sub.w	r9, r3, r1
 800d4da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4de:	1c7b      	adds	r3, r7, #1
 800d4e0:	444b      	add	r3, r9
 800d4e2:	106d      	asrs	r5, r5, #1
 800d4e4:	429d      	cmp	r5, r3
 800d4e6:	bf38      	it	cc
 800d4e8:	461d      	movcc	r5, r3
 800d4ea:	0553      	lsls	r3, r2, #21
 800d4ec:	d527      	bpl.n	800d53e <__ssputs_r+0x8e>
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f7ff fe3a 	bl	800d168 <_malloc_r>
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	b360      	cbz	r0, 800d552 <__ssputs_r+0xa2>
 800d4f8:	464a      	mov	r2, r9
 800d4fa:	6921      	ldr	r1, [r4, #16]
 800d4fc:	f000 fb18 	bl	800db30 <memcpy>
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d50a:	81a3      	strh	r3, [r4, #12]
 800d50c:	6126      	str	r6, [r4, #16]
 800d50e:	444e      	add	r6, r9
 800d510:	6026      	str	r6, [r4, #0]
 800d512:	463e      	mov	r6, r7
 800d514:	6165      	str	r5, [r4, #20]
 800d516:	eba5 0509 	sub.w	r5, r5, r9
 800d51a:	60a5      	str	r5, [r4, #8]
 800d51c:	42be      	cmp	r6, r7
 800d51e:	d900      	bls.n	800d522 <__ssputs_r+0x72>
 800d520:	463e      	mov	r6, r7
 800d522:	4632      	mov	r2, r6
 800d524:	4641      	mov	r1, r8
 800d526:	6820      	ldr	r0, [r4, #0]
 800d528:	f000 fada 	bl	800dae0 <memmove>
 800d52c:	2000      	movs	r0, #0
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	1b9b      	subs	r3, r3, r6
 800d532:	60a3      	str	r3, [r4, #8]
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	4433      	add	r3, r6
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d53e:	462a      	mov	r2, r5
 800d540:	f000 faa0 	bl	800da84 <_realloc_r>
 800d544:	4606      	mov	r6, r0
 800d546:	2800      	cmp	r0, #0
 800d548:	d1e0      	bne.n	800d50c <__ssputs_r+0x5c>
 800d54a:	4650      	mov	r0, sl
 800d54c:	6921      	ldr	r1, [r4, #16]
 800d54e:	f7ff ff67 	bl	800d420 <_free_r>
 800d552:	230c      	movs	r3, #12
 800d554:	f8ca 3000 	str.w	r3, [sl]
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	e7e9      	b.n	800d53a <__ssputs_r+0x8a>
	...

0800d568 <_svfiprintf_r>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	4698      	mov	r8, r3
 800d56e:	898b      	ldrh	r3, [r1, #12]
 800d570:	4607      	mov	r7, r0
 800d572:	061b      	lsls	r3, r3, #24
 800d574:	460d      	mov	r5, r1
 800d576:	4614      	mov	r4, r2
 800d578:	b09d      	sub	sp, #116	@ 0x74
 800d57a:	d510      	bpl.n	800d59e <_svfiprintf_r+0x36>
 800d57c:	690b      	ldr	r3, [r1, #16]
 800d57e:	b973      	cbnz	r3, 800d59e <_svfiprintf_r+0x36>
 800d580:	2140      	movs	r1, #64	@ 0x40
 800d582:	f7ff fdf1 	bl	800d168 <_malloc_r>
 800d586:	6028      	str	r0, [r5, #0]
 800d588:	6128      	str	r0, [r5, #16]
 800d58a:	b930      	cbnz	r0, 800d59a <_svfiprintf_r+0x32>
 800d58c:	230c      	movs	r3, #12
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d594:	b01d      	add	sp, #116	@ 0x74
 800d596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59a:	2340      	movs	r3, #64	@ 0x40
 800d59c:	616b      	str	r3, [r5, #20]
 800d59e:	2300      	movs	r3, #0
 800d5a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5a2:	2320      	movs	r3, #32
 800d5a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5a8:	2330      	movs	r3, #48	@ 0x30
 800d5aa:	f04f 0901 	mov.w	r9, #1
 800d5ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5b2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d74c <_svfiprintf_r+0x1e4>
 800d5b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ba:	4623      	mov	r3, r4
 800d5bc:	469a      	mov	sl, r3
 800d5be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c2:	b10a      	cbz	r2, 800d5c8 <_svfiprintf_r+0x60>
 800d5c4:	2a25      	cmp	r2, #37	@ 0x25
 800d5c6:	d1f9      	bne.n	800d5bc <_svfiprintf_r+0x54>
 800d5c8:	ebba 0b04 	subs.w	fp, sl, r4
 800d5cc:	d00b      	beq.n	800d5e6 <_svfiprintf_r+0x7e>
 800d5ce:	465b      	mov	r3, fp
 800d5d0:	4622      	mov	r2, r4
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	f7ff ff6b 	bl	800d4b0 <__ssputs_r>
 800d5da:	3001      	adds	r0, #1
 800d5dc:	f000 80a7 	beq.w	800d72e <_svfiprintf_r+0x1c6>
 800d5e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5e2:	445a      	add	r2, fp
 800d5e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 809f 	beq.w	800d72e <_svfiprintf_r+0x1c6>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d5f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5fa:	f10a 0a01 	add.w	sl, sl, #1
 800d5fe:	9304      	str	r3, [sp, #16]
 800d600:	9307      	str	r3, [sp, #28]
 800d602:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d606:	931a      	str	r3, [sp, #104]	@ 0x68
 800d608:	4654      	mov	r4, sl
 800d60a:	2205      	movs	r2, #5
 800d60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d610:	484e      	ldr	r0, [pc, #312]	@ (800d74c <_svfiprintf_r+0x1e4>)
 800d612:	f000 fa7f 	bl	800db14 <memchr>
 800d616:	9a04      	ldr	r2, [sp, #16]
 800d618:	b9d8      	cbnz	r0, 800d652 <_svfiprintf_r+0xea>
 800d61a:	06d0      	lsls	r0, r2, #27
 800d61c:	bf44      	itt	mi
 800d61e:	2320      	movmi	r3, #32
 800d620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d624:	0711      	lsls	r1, r2, #28
 800d626:	bf44      	itt	mi
 800d628:	232b      	movmi	r3, #43	@ 0x2b
 800d62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d62e:	f89a 3000 	ldrb.w	r3, [sl]
 800d632:	2b2a      	cmp	r3, #42	@ 0x2a
 800d634:	d015      	beq.n	800d662 <_svfiprintf_r+0xfa>
 800d636:	4654      	mov	r4, sl
 800d638:	2000      	movs	r0, #0
 800d63a:	f04f 0c0a 	mov.w	ip, #10
 800d63e:	9a07      	ldr	r2, [sp, #28]
 800d640:	4621      	mov	r1, r4
 800d642:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d646:	3b30      	subs	r3, #48	@ 0x30
 800d648:	2b09      	cmp	r3, #9
 800d64a:	d94b      	bls.n	800d6e4 <_svfiprintf_r+0x17c>
 800d64c:	b1b0      	cbz	r0, 800d67c <_svfiprintf_r+0x114>
 800d64e:	9207      	str	r2, [sp, #28]
 800d650:	e014      	b.n	800d67c <_svfiprintf_r+0x114>
 800d652:	eba0 0308 	sub.w	r3, r0, r8
 800d656:	fa09 f303 	lsl.w	r3, r9, r3
 800d65a:	4313      	orrs	r3, r2
 800d65c:	46a2      	mov	sl, r4
 800d65e:	9304      	str	r3, [sp, #16]
 800d660:	e7d2      	b.n	800d608 <_svfiprintf_r+0xa0>
 800d662:	9b03      	ldr	r3, [sp, #12]
 800d664:	1d19      	adds	r1, r3, #4
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	9103      	str	r1, [sp, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	bfbb      	ittet	lt
 800d66e:	425b      	neglt	r3, r3
 800d670:	f042 0202 	orrlt.w	r2, r2, #2
 800d674:	9307      	strge	r3, [sp, #28]
 800d676:	9307      	strlt	r3, [sp, #28]
 800d678:	bfb8      	it	lt
 800d67a:	9204      	strlt	r2, [sp, #16]
 800d67c:	7823      	ldrb	r3, [r4, #0]
 800d67e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d680:	d10a      	bne.n	800d698 <_svfiprintf_r+0x130>
 800d682:	7863      	ldrb	r3, [r4, #1]
 800d684:	2b2a      	cmp	r3, #42	@ 0x2a
 800d686:	d132      	bne.n	800d6ee <_svfiprintf_r+0x186>
 800d688:	9b03      	ldr	r3, [sp, #12]
 800d68a:	3402      	adds	r4, #2
 800d68c:	1d1a      	adds	r2, r3, #4
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	9203      	str	r2, [sp, #12]
 800d692:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d696:	9305      	str	r3, [sp, #20]
 800d698:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d750 <_svfiprintf_r+0x1e8>
 800d69c:	2203      	movs	r2, #3
 800d69e:	4650      	mov	r0, sl
 800d6a0:	7821      	ldrb	r1, [r4, #0]
 800d6a2:	f000 fa37 	bl	800db14 <memchr>
 800d6a6:	b138      	cbz	r0, 800d6b8 <_svfiprintf_r+0x150>
 800d6a8:	2240      	movs	r2, #64	@ 0x40
 800d6aa:	9b04      	ldr	r3, [sp, #16]
 800d6ac:	eba0 000a 	sub.w	r0, r0, sl
 800d6b0:	4082      	lsls	r2, r0
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	3401      	adds	r4, #1
 800d6b6:	9304      	str	r3, [sp, #16]
 800d6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6bc:	2206      	movs	r2, #6
 800d6be:	4825      	ldr	r0, [pc, #148]	@ (800d754 <_svfiprintf_r+0x1ec>)
 800d6c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6c4:	f000 fa26 	bl	800db14 <memchr>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d036      	beq.n	800d73a <_svfiprintf_r+0x1d2>
 800d6cc:	4b22      	ldr	r3, [pc, #136]	@ (800d758 <_svfiprintf_r+0x1f0>)
 800d6ce:	bb1b      	cbnz	r3, 800d718 <_svfiprintf_r+0x1b0>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	3307      	adds	r3, #7
 800d6d4:	f023 0307 	bic.w	r3, r3, #7
 800d6d8:	3308      	adds	r3, #8
 800d6da:	9303      	str	r3, [sp, #12]
 800d6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6de:	4433      	add	r3, r6
 800d6e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6e2:	e76a      	b.n	800d5ba <_svfiprintf_r+0x52>
 800d6e4:	460c      	mov	r4, r1
 800d6e6:	2001      	movs	r0, #1
 800d6e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ec:	e7a8      	b.n	800d640 <_svfiprintf_r+0xd8>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	f04f 0c0a 	mov.w	ip, #10
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	3401      	adds	r4, #1
 800d6f8:	9305      	str	r3, [sp, #20]
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d700:	3a30      	subs	r2, #48	@ 0x30
 800d702:	2a09      	cmp	r2, #9
 800d704:	d903      	bls.n	800d70e <_svfiprintf_r+0x1a6>
 800d706:	2b00      	cmp	r3, #0
 800d708:	d0c6      	beq.n	800d698 <_svfiprintf_r+0x130>
 800d70a:	9105      	str	r1, [sp, #20]
 800d70c:	e7c4      	b.n	800d698 <_svfiprintf_r+0x130>
 800d70e:	4604      	mov	r4, r0
 800d710:	2301      	movs	r3, #1
 800d712:	fb0c 2101 	mla	r1, ip, r1, r2
 800d716:	e7f0      	b.n	800d6fa <_svfiprintf_r+0x192>
 800d718:	ab03      	add	r3, sp, #12
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	462a      	mov	r2, r5
 800d71e:	4638      	mov	r0, r7
 800d720:	4b0e      	ldr	r3, [pc, #56]	@ (800d75c <_svfiprintf_r+0x1f4>)
 800d722:	a904      	add	r1, sp, #16
 800d724:	f3af 8000 	nop.w
 800d728:	1c42      	adds	r2, r0, #1
 800d72a:	4606      	mov	r6, r0
 800d72c:	d1d6      	bne.n	800d6dc <_svfiprintf_r+0x174>
 800d72e:	89ab      	ldrh	r3, [r5, #12]
 800d730:	065b      	lsls	r3, r3, #25
 800d732:	f53f af2d 	bmi.w	800d590 <_svfiprintf_r+0x28>
 800d736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d738:	e72c      	b.n	800d594 <_svfiprintf_r+0x2c>
 800d73a:	ab03      	add	r3, sp, #12
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	462a      	mov	r2, r5
 800d740:	4638      	mov	r0, r7
 800d742:	4b06      	ldr	r3, [pc, #24]	@ (800d75c <_svfiprintf_r+0x1f4>)
 800d744:	a904      	add	r1, sp, #16
 800d746:	f000 f87d 	bl	800d844 <_printf_i>
 800d74a:	e7ed      	b.n	800d728 <_svfiprintf_r+0x1c0>
 800d74c:	0800debb 	.word	0x0800debb
 800d750:	0800dec1 	.word	0x0800dec1
 800d754:	0800dec5 	.word	0x0800dec5
 800d758:	00000000 	.word	0x00000000
 800d75c:	0800d4b1 	.word	0x0800d4b1

0800d760 <_printf_common>:
 800d760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d764:	4616      	mov	r6, r2
 800d766:	4698      	mov	r8, r3
 800d768:	688a      	ldr	r2, [r1, #8]
 800d76a:	690b      	ldr	r3, [r1, #16]
 800d76c:	4607      	mov	r7, r0
 800d76e:	4293      	cmp	r3, r2
 800d770:	bfb8      	it	lt
 800d772:	4613      	movlt	r3, r2
 800d774:	6033      	str	r3, [r6, #0]
 800d776:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d77a:	460c      	mov	r4, r1
 800d77c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d780:	b10a      	cbz	r2, 800d786 <_printf_common+0x26>
 800d782:	3301      	adds	r3, #1
 800d784:	6033      	str	r3, [r6, #0]
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	0699      	lsls	r1, r3, #26
 800d78a:	bf42      	ittt	mi
 800d78c:	6833      	ldrmi	r3, [r6, #0]
 800d78e:	3302      	addmi	r3, #2
 800d790:	6033      	strmi	r3, [r6, #0]
 800d792:	6825      	ldr	r5, [r4, #0]
 800d794:	f015 0506 	ands.w	r5, r5, #6
 800d798:	d106      	bne.n	800d7a8 <_printf_common+0x48>
 800d79a:	f104 0a19 	add.w	sl, r4, #25
 800d79e:	68e3      	ldr	r3, [r4, #12]
 800d7a0:	6832      	ldr	r2, [r6, #0]
 800d7a2:	1a9b      	subs	r3, r3, r2
 800d7a4:	42ab      	cmp	r3, r5
 800d7a6:	dc2b      	bgt.n	800d800 <_printf_common+0xa0>
 800d7a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d7ac:	6822      	ldr	r2, [r4, #0]
 800d7ae:	3b00      	subs	r3, #0
 800d7b0:	bf18      	it	ne
 800d7b2:	2301      	movne	r3, #1
 800d7b4:	0692      	lsls	r2, r2, #26
 800d7b6:	d430      	bmi.n	800d81a <_printf_common+0xba>
 800d7b8:	4641      	mov	r1, r8
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d7c0:	47c8      	blx	r9
 800d7c2:	3001      	adds	r0, #1
 800d7c4:	d023      	beq.n	800d80e <_printf_common+0xae>
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	6922      	ldr	r2, [r4, #16]
 800d7ca:	f003 0306 	and.w	r3, r3, #6
 800d7ce:	2b04      	cmp	r3, #4
 800d7d0:	bf14      	ite	ne
 800d7d2:	2500      	movne	r5, #0
 800d7d4:	6833      	ldreq	r3, [r6, #0]
 800d7d6:	f04f 0600 	mov.w	r6, #0
 800d7da:	bf08      	it	eq
 800d7dc:	68e5      	ldreq	r5, [r4, #12]
 800d7de:	f104 041a 	add.w	r4, r4, #26
 800d7e2:	bf08      	it	eq
 800d7e4:	1aed      	subeq	r5, r5, r3
 800d7e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d7ea:	bf08      	it	eq
 800d7ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	bfc4      	itt	gt
 800d7f4:	1a9b      	subgt	r3, r3, r2
 800d7f6:	18ed      	addgt	r5, r5, r3
 800d7f8:	42b5      	cmp	r5, r6
 800d7fa:	d11a      	bne.n	800d832 <_printf_common+0xd2>
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	e008      	b.n	800d812 <_printf_common+0xb2>
 800d800:	2301      	movs	r3, #1
 800d802:	4652      	mov	r2, sl
 800d804:	4641      	mov	r1, r8
 800d806:	4638      	mov	r0, r7
 800d808:	47c8      	blx	r9
 800d80a:	3001      	adds	r0, #1
 800d80c:	d103      	bne.n	800d816 <_printf_common+0xb6>
 800d80e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d816:	3501      	adds	r5, #1
 800d818:	e7c1      	b.n	800d79e <_printf_common+0x3e>
 800d81a:	2030      	movs	r0, #48	@ 0x30
 800d81c:	18e1      	adds	r1, r4, r3
 800d81e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d822:	1c5a      	adds	r2, r3, #1
 800d824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d828:	4422      	add	r2, r4
 800d82a:	3302      	adds	r3, #2
 800d82c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d830:	e7c2      	b.n	800d7b8 <_printf_common+0x58>
 800d832:	2301      	movs	r3, #1
 800d834:	4622      	mov	r2, r4
 800d836:	4641      	mov	r1, r8
 800d838:	4638      	mov	r0, r7
 800d83a:	47c8      	blx	r9
 800d83c:	3001      	adds	r0, #1
 800d83e:	d0e6      	beq.n	800d80e <_printf_common+0xae>
 800d840:	3601      	adds	r6, #1
 800d842:	e7d9      	b.n	800d7f8 <_printf_common+0x98>

0800d844 <_printf_i>:
 800d844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d848:	7e0f      	ldrb	r7, [r1, #24]
 800d84a:	4691      	mov	r9, r2
 800d84c:	2f78      	cmp	r7, #120	@ 0x78
 800d84e:	4680      	mov	r8, r0
 800d850:	460c      	mov	r4, r1
 800d852:	469a      	mov	sl, r3
 800d854:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d85a:	d807      	bhi.n	800d86c <_printf_i+0x28>
 800d85c:	2f62      	cmp	r7, #98	@ 0x62
 800d85e:	d80a      	bhi.n	800d876 <_printf_i+0x32>
 800d860:	2f00      	cmp	r7, #0
 800d862:	f000 80d3 	beq.w	800da0c <_printf_i+0x1c8>
 800d866:	2f58      	cmp	r7, #88	@ 0x58
 800d868:	f000 80ba 	beq.w	800d9e0 <_printf_i+0x19c>
 800d86c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d874:	e03a      	b.n	800d8ec <_printf_i+0xa8>
 800d876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d87a:	2b15      	cmp	r3, #21
 800d87c:	d8f6      	bhi.n	800d86c <_printf_i+0x28>
 800d87e:	a101      	add	r1, pc, #4	@ (adr r1, 800d884 <_printf_i+0x40>)
 800d880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d884:	0800d8dd 	.word	0x0800d8dd
 800d888:	0800d8f1 	.word	0x0800d8f1
 800d88c:	0800d86d 	.word	0x0800d86d
 800d890:	0800d86d 	.word	0x0800d86d
 800d894:	0800d86d 	.word	0x0800d86d
 800d898:	0800d86d 	.word	0x0800d86d
 800d89c:	0800d8f1 	.word	0x0800d8f1
 800d8a0:	0800d86d 	.word	0x0800d86d
 800d8a4:	0800d86d 	.word	0x0800d86d
 800d8a8:	0800d86d 	.word	0x0800d86d
 800d8ac:	0800d86d 	.word	0x0800d86d
 800d8b0:	0800d9f3 	.word	0x0800d9f3
 800d8b4:	0800d91b 	.word	0x0800d91b
 800d8b8:	0800d9ad 	.word	0x0800d9ad
 800d8bc:	0800d86d 	.word	0x0800d86d
 800d8c0:	0800d86d 	.word	0x0800d86d
 800d8c4:	0800da15 	.word	0x0800da15
 800d8c8:	0800d86d 	.word	0x0800d86d
 800d8cc:	0800d91b 	.word	0x0800d91b
 800d8d0:	0800d86d 	.word	0x0800d86d
 800d8d4:	0800d86d 	.word	0x0800d86d
 800d8d8:	0800d9b5 	.word	0x0800d9b5
 800d8dc:	6833      	ldr	r3, [r6, #0]
 800d8de:	1d1a      	adds	r2, r3, #4
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6032      	str	r2, [r6, #0]
 800d8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e09e      	b.n	800da2e <_printf_i+0x1ea>
 800d8f0:	6833      	ldr	r3, [r6, #0]
 800d8f2:	6820      	ldr	r0, [r4, #0]
 800d8f4:	1d19      	adds	r1, r3, #4
 800d8f6:	6031      	str	r1, [r6, #0]
 800d8f8:	0606      	lsls	r6, r0, #24
 800d8fa:	d501      	bpl.n	800d900 <_printf_i+0xbc>
 800d8fc:	681d      	ldr	r5, [r3, #0]
 800d8fe:	e003      	b.n	800d908 <_printf_i+0xc4>
 800d900:	0645      	lsls	r5, r0, #25
 800d902:	d5fb      	bpl.n	800d8fc <_printf_i+0xb8>
 800d904:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d908:	2d00      	cmp	r5, #0
 800d90a:	da03      	bge.n	800d914 <_printf_i+0xd0>
 800d90c:	232d      	movs	r3, #45	@ 0x2d
 800d90e:	426d      	negs	r5, r5
 800d910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d914:	230a      	movs	r3, #10
 800d916:	4859      	ldr	r0, [pc, #356]	@ (800da7c <_printf_i+0x238>)
 800d918:	e011      	b.n	800d93e <_printf_i+0xfa>
 800d91a:	6821      	ldr	r1, [r4, #0]
 800d91c:	6833      	ldr	r3, [r6, #0]
 800d91e:	0608      	lsls	r0, r1, #24
 800d920:	f853 5b04 	ldr.w	r5, [r3], #4
 800d924:	d402      	bmi.n	800d92c <_printf_i+0xe8>
 800d926:	0649      	lsls	r1, r1, #25
 800d928:	bf48      	it	mi
 800d92a:	b2ad      	uxthmi	r5, r5
 800d92c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d92e:	6033      	str	r3, [r6, #0]
 800d930:	bf14      	ite	ne
 800d932:	230a      	movne	r3, #10
 800d934:	2308      	moveq	r3, #8
 800d936:	4851      	ldr	r0, [pc, #324]	@ (800da7c <_printf_i+0x238>)
 800d938:	2100      	movs	r1, #0
 800d93a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d93e:	6866      	ldr	r6, [r4, #4]
 800d940:	2e00      	cmp	r6, #0
 800d942:	bfa8      	it	ge
 800d944:	6821      	ldrge	r1, [r4, #0]
 800d946:	60a6      	str	r6, [r4, #8]
 800d948:	bfa4      	itt	ge
 800d94a:	f021 0104 	bicge.w	r1, r1, #4
 800d94e:	6021      	strge	r1, [r4, #0]
 800d950:	b90d      	cbnz	r5, 800d956 <_printf_i+0x112>
 800d952:	2e00      	cmp	r6, #0
 800d954:	d04b      	beq.n	800d9ee <_printf_i+0x1aa>
 800d956:	4616      	mov	r6, r2
 800d958:	fbb5 f1f3 	udiv	r1, r5, r3
 800d95c:	fb03 5711 	mls	r7, r3, r1, r5
 800d960:	5dc7      	ldrb	r7, [r0, r7]
 800d962:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d966:	462f      	mov	r7, r5
 800d968:	42bb      	cmp	r3, r7
 800d96a:	460d      	mov	r5, r1
 800d96c:	d9f4      	bls.n	800d958 <_printf_i+0x114>
 800d96e:	2b08      	cmp	r3, #8
 800d970:	d10b      	bne.n	800d98a <_printf_i+0x146>
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	07df      	lsls	r7, r3, #31
 800d976:	d508      	bpl.n	800d98a <_printf_i+0x146>
 800d978:	6923      	ldr	r3, [r4, #16]
 800d97a:	6861      	ldr	r1, [r4, #4]
 800d97c:	4299      	cmp	r1, r3
 800d97e:	bfde      	ittt	le
 800d980:	2330      	movle	r3, #48	@ 0x30
 800d982:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d986:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d98a:	1b92      	subs	r2, r2, r6
 800d98c:	6122      	str	r2, [r4, #16]
 800d98e:	464b      	mov	r3, r9
 800d990:	4621      	mov	r1, r4
 800d992:	4640      	mov	r0, r8
 800d994:	f8cd a000 	str.w	sl, [sp]
 800d998:	aa03      	add	r2, sp, #12
 800d99a:	f7ff fee1 	bl	800d760 <_printf_common>
 800d99e:	3001      	adds	r0, #1
 800d9a0:	d14a      	bne.n	800da38 <_printf_i+0x1f4>
 800d9a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9a6:	b004      	add	sp, #16
 800d9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ac:	6823      	ldr	r3, [r4, #0]
 800d9ae:	f043 0320 	orr.w	r3, r3, #32
 800d9b2:	6023      	str	r3, [r4, #0]
 800d9b4:	2778      	movs	r7, #120	@ 0x78
 800d9b6:	4832      	ldr	r0, [pc, #200]	@ (800da80 <_printf_i+0x23c>)
 800d9b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	6831      	ldr	r1, [r6, #0]
 800d9c0:	061f      	lsls	r7, r3, #24
 800d9c2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d9c6:	d402      	bmi.n	800d9ce <_printf_i+0x18a>
 800d9c8:	065f      	lsls	r7, r3, #25
 800d9ca:	bf48      	it	mi
 800d9cc:	b2ad      	uxthmi	r5, r5
 800d9ce:	6031      	str	r1, [r6, #0]
 800d9d0:	07d9      	lsls	r1, r3, #31
 800d9d2:	bf44      	itt	mi
 800d9d4:	f043 0320 	orrmi.w	r3, r3, #32
 800d9d8:	6023      	strmi	r3, [r4, #0]
 800d9da:	b11d      	cbz	r5, 800d9e4 <_printf_i+0x1a0>
 800d9dc:	2310      	movs	r3, #16
 800d9de:	e7ab      	b.n	800d938 <_printf_i+0xf4>
 800d9e0:	4826      	ldr	r0, [pc, #152]	@ (800da7c <_printf_i+0x238>)
 800d9e2:	e7e9      	b.n	800d9b8 <_printf_i+0x174>
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	f023 0320 	bic.w	r3, r3, #32
 800d9ea:	6023      	str	r3, [r4, #0]
 800d9ec:	e7f6      	b.n	800d9dc <_printf_i+0x198>
 800d9ee:	4616      	mov	r6, r2
 800d9f0:	e7bd      	b.n	800d96e <_printf_i+0x12a>
 800d9f2:	6833      	ldr	r3, [r6, #0]
 800d9f4:	6825      	ldr	r5, [r4, #0]
 800d9f6:	1d18      	adds	r0, r3, #4
 800d9f8:	6961      	ldr	r1, [r4, #20]
 800d9fa:	6030      	str	r0, [r6, #0]
 800d9fc:	062e      	lsls	r6, r5, #24
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	d501      	bpl.n	800da06 <_printf_i+0x1c2>
 800da02:	6019      	str	r1, [r3, #0]
 800da04:	e002      	b.n	800da0c <_printf_i+0x1c8>
 800da06:	0668      	lsls	r0, r5, #25
 800da08:	d5fb      	bpl.n	800da02 <_printf_i+0x1be>
 800da0a:	8019      	strh	r1, [r3, #0]
 800da0c:	2300      	movs	r3, #0
 800da0e:	4616      	mov	r6, r2
 800da10:	6123      	str	r3, [r4, #16]
 800da12:	e7bc      	b.n	800d98e <_printf_i+0x14a>
 800da14:	6833      	ldr	r3, [r6, #0]
 800da16:	2100      	movs	r1, #0
 800da18:	1d1a      	adds	r2, r3, #4
 800da1a:	6032      	str	r2, [r6, #0]
 800da1c:	681e      	ldr	r6, [r3, #0]
 800da1e:	6862      	ldr	r2, [r4, #4]
 800da20:	4630      	mov	r0, r6
 800da22:	f000 f877 	bl	800db14 <memchr>
 800da26:	b108      	cbz	r0, 800da2c <_printf_i+0x1e8>
 800da28:	1b80      	subs	r0, r0, r6
 800da2a:	6060      	str	r0, [r4, #4]
 800da2c:	6863      	ldr	r3, [r4, #4]
 800da2e:	6123      	str	r3, [r4, #16]
 800da30:	2300      	movs	r3, #0
 800da32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da36:	e7aa      	b.n	800d98e <_printf_i+0x14a>
 800da38:	4632      	mov	r2, r6
 800da3a:	4649      	mov	r1, r9
 800da3c:	4640      	mov	r0, r8
 800da3e:	6923      	ldr	r3, [r4, #16]
 800da40:	47d0      	blx	sl
 800da42:	3001      	adds	r0, #1
 800da44:	d0ad      	beq.n	800d9a2 <_printf_i+0x15e>
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	079b      	lsls	r3, r3, #30
 800da4a:	d413      	bmi.n	800da74 <_printf_i+0x230>
 800da4c:	68e0      	ldr	r0, [r4, #12]
 800da4e:	9b03      	ldr	r3, [sp, #12]
 800da50:	4298      	cmp	r0, r3
 800da52:	bfb8      	it	lt
 800da54:	4618      	movlt	r0, r3
 800da56:	e7a6      	b.n	800d9a6 <_printf_i+0x162>
 800da58:	2301      	movs	r3, #1
 800da5a:	4632      	mov	r2, r6
 800da5c:	4649      	mov	r1, r9
 800da5e:	4640      	mov	r0, r8
 800da60:	47d0      	blx	sl
 800da62:	3001      	adds	r0, #1
 800da64:	d09d      	beq.n	800d9a2 <_printf_i+0x15e>
 800da66:	3501      	adds	r5, #1
 800da68:	68e3      	ldr	r3, [r4, #12]
 800da6a:	9903      	ldr	r1, [sp, #12]
 800da6c:	1a5b      	subs	r3, r3, r1
 800da6e:	42ab      	cmp	r3, r5
 800da70:	dcf2      	bgt.n	800da58 <_printf_i+0x214>
 800da72:	e7eb      	b.n	800da4c <_printf_i+0x208>
 800da74:	2500      	movs	r5, #0
 800da76:	f104 0619 	add.w	r6, r4, #25
 800da7a:	e7f5      	b.n	800da68 <_printf_i+0x224>
 800da7c:	0800decc 	.word	0x0800decc
 800da80:	0800dedd 	.word	0x0800dedd

0800da84 <_realloc_r>:
 800da84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da88:	4680      	mov	r8, r0
 800da8a:	4615      	mov	r5, r2
 800da8c:	460c      	mov	r4, r1
 800da8e:	b921      	cbnz	r1, 800da9a <_realloc_r+0x16>
 800da90:	4611      	mov	r1, r2
 800da92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da96:	f7ff bb67 	b.w	800d168 <_malloc_r>
 800da9a:	b92a      	cbnz	r2, 800daa8 <_realloc_r+0x24>
 800da9c:	f7ff fcc0 	bl	800d420 <_free_r>
 800daa0:	2400      	movs	r4, #0
 800daa2:	4620      	mov	r0, r4
 800daa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa8:	f000 f850 	bl	800db4c <_malloc_usable_size_r>
 800daac:	4285      	cmp	r5, r0
 800daae:	4606      	mov	r6, r0
 800dab0:	d802      	bhi.n	800dab8 <_realloc_r+0x34>
 800dab2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dab6:	d8f4      	bhi.n	800daa2 <_realloc_r+0x1e>
 800dab8:	4629      	mov	r1, r5
 800daba:	4640      	mov	r0, r8
 800dabc:	f7ff fb54 	bl	800d168 <_malloc_r>
 800dac0:	4607      	mov	r7, r0
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d0ec      	beq.n	800daa0 <_realloc_r+0x1c>
 800dac6:	42b5      	cmp	r5, r6
 800dac8:	462a      	mov	r2, r5
 800daca:	4621      	mov	r1, r4
 800dacc:	bf28      	it	cs
 800dace:	4632      	movcs	r2, r6
 800dad0:	f000 f82e 	bl	800db30 <memcpy>
 800dad4:	4621      	mov	r1, r4
 800dad6:	4640      	mov	r0, r8
 800dad8:	f7ff fca2 	bl	800d420 <_free_r>
 800dadc:	463c      	mov	r4, r7
 800dade:	e7e0      	b.n	800daa2 <_realloc_r+0x1e>

0800dae0 <memmove>:
 800dae0:	4288      	cmp	r0, r1
 800dae2:	b510      	push	{r4, lr}
 800dae4:	eb01 0402 	add.w	r4, r1, r2
 800dae8:	d902      	bls.n	800daf0 <memmove+0x10>
 800daea:	4284      	cmp	r4, r0
 800daec:	4623      	mov	r3, r4
 800daee:	d807      	bhi.n	800db00 <memmove+0x20>
 800daf0:	1e43      	subs	r3, r0, #1
 800daf2:	42a1      	cmp	r1, r4
 800daf4:	d008      	beq.n	800db08 <memmove+0x28>
 800daf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dafa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dafe:	e7f8      	b.n	800daf2 <memmove+0x12>
 800db00:	4601      	mov	r1, r0
 800db02:	4402      	add	r2, r0
 800db04:	428a      	cmp	r2, r1
 800db06:	d100      	bne.n	800db0a <memmove+0x2a>
 800db08:	bd10      	pop	{r4, pc}
 800db0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db12:	e7f7      	b.n	800db04 <memmove+0x24>

0800db14 <memchr>:
 800db14:	4603      	mov	r3, r0
 800db16:	b510      	push	{r4, lr}
 800db18:	b2c9      	uxtb	r1, r1
 800db1a:	4402      	add	r2, r0
 800db1c:	4293      	cmp	r3, r2
 800db1e:	4618      	mov	r0, r3
 800db20:	d101      	bne.n	800db26 <memchr+0x12>
 800db22:	2000      	movs	r0, #0
 800db24:	e003      	b.n	800db2e <memchr+0x1a>
 800db26:	7804      	ldrb	r4, [r0, #0]
 800db28:	3301      	adds	r3, #1
 800db2a:	428c      	cmp	r4, r1
 800db2c:	d1f6      	bne.n	800db1c <memchr+0x8>
 800db2e:	bd10      	pop	{r4, pc}

0800db30 <memcpy>:
 800db30:	440a      	add	r2, r1
 800db32:	4291      	cmp	r1, r2
 800db34:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800db38:	d100      	bne.n	800db3c <memcpy+0xc>
 800db3a:	4770      	bx	lr
 800db3c:	b510      	push	{r4, lr}
 800db3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db42:	4291      	cmp	r1, r2
 800db44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db48:	d1f9      	bne.n	800db3e <memcpy+0xe>
 800db4a:	bd10      	pop	{r4, pc}

0800db4c <_malloc_usable_size_r>:
 800db4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db50:	1f18      	subs	r0, r3, #4
 800db52:	2b00      	cmp	r3, #0
 800db54:	bfbc      	itt	lt
 800db56:	580b      	ldrlt	r3, [r1, r0]
 800db58:	18c0      	addlt	r0, r0, r3
 800db5a:	4770      	bx	lr

0800db5c <_init>:
 800db5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5e:	bf00      	nop
 800db60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db62:	bc08      	pop	{r3}
 800db64:	469e      	mov	lr, r3
 800db66:	4770      	bx	lr

0800db68 <_fini>:
 800db68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db6a:	bf00      	nop
 800db6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db6e:	bc08      	pop	{r3}
 800db70:	469e      	mov	lr, r3
 800db72:	4770      	bx	lr
