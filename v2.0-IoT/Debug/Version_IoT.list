
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd70  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000103c  0800cf54  0800cf54  0001cf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df90  0800df90  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800df90  0800df90  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df90  0800df90  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df90  0800df90  0001df90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df94  0800df94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800df98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000010c  0800e0a4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800e0a4  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016863  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003551  00000000  00000000  000369db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  0003b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c67d  00000000  00000000  0003c014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c110  00000000  00000000  00058691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee67  00000000  00000000  000747a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000521c  00000000  00000000  00113608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cf3c 	.word	0x0800cf3c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800cf3c 	.word	0x0800cf3c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fce6 	bl	8009c20 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fb5e 	bl	8008918 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000128 	.word	0x20000128
 80004bc:	200003ac 	.word	0x200003ac
 80004c0:	200001fd 	.word	0x200001fd
 80004c4:	20000225 	.word	0x20000225
 80004c8:	20000228 	.word	0x20000228
 80004cc:	20000229 	.word	0x20000229
 80004d0:	2000022a 	.word	0x2000022a
 80004d4:	2000022b 	.word	0x2000022b
 80004d8:	2000022c 	.word	0x2000022c
 80004dc:	2000022d 	.word	0x2000022d
 80004e0:	2000023d 	.word	0x2000023d
 80004e4:	2000022e 	.word	0x2000022e
 80004e8:	2000023e 	.word	0x2000023e
 80004ec:	2000022f 	.word	0x2000022f
 80004f0:	2000023f 	.word	0x2000023f
 80004f4:	20000232 	.word	0x20000232
 80004f8:	20000233 	.word	0x20000233
 80004fc:	20000234 	.word	0x20000234
 8000500:	20000235 	.word	0x20000235
 8000504:	20000236 	.word	0x20000236
 8000508:	20000237 	.word	0x20000237
 800050c:	20000238 	.word	0x20000238
 8000510:	20000239 	.word	0x20000239
 8000514:	2000023a 	.word	0x2000023a
 8000518:	2000023b 	.word	0x2000023b
 800051c:	2000023c 	.word	0x2000023c
 8000520:	20000240 	.word	0x20000240
 8000524:	20000242 	.word	0x20000242
 8000528:	20000220 	.word	0x20000220
 800052c:	20000221 	.word	0x20000221
 8000530:	20000222 	.word	0x20000222
 8000534:	20000008 	.word	0x20000008
 8000538:	20000009 	.word	0x20000009
 800053c:	20000223 	.word	0x20000223
 8000540:	20000245 	.word	0x20000245
 8000544:	20000243 	.word	0x20000243
 8000548:	20000231 	.word	0x20000231
 800054c:	20000244 	.word	0x20000244
 8000550:	20000230 	.word	0x20000230
 8000554:	20000246 	.word	0x20000246
 8000558:	20000247 	.word	0x20000247
 800055c:	20000248 	.word	0x20000248
 8000560:	20000249 	.word	0x20000249
 8000564:	2000024a 	.word	0x2000024a
 8000568:	2000024b 	.word	0x2000024b
 800056c:	2000024c 	.word	0x2000024c
 8000570:	2000024d 	.word	0x2000024d
 8000574:	2000024e 	.word	0x2000024e
 8000578:	2000024f 	.word	0x2000024f
 800057c:	200001fc 	.word	0x200001fc
	}

	if(kapi1AcSure>5) {
 8000580:	4b6f      	ldr	r3, [pc, #444]	; (8000740 <eepromKontrol+0x50c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b6d      	ldr	r3, [pc, #436]	; (8000740 <eepromKontrol+0x50c>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b6d      	ldr	r3, [pc, #436]	; (8000744 <eepromKontrol+0x510>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b6b      	ldr	r3, [pc, #428]	; (8000744 <eepromKontrol+0x510>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b6a      	ldr	r3, [pc, #424]	; (8000748 <eepromKontrol+0x514>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b68      	ldr	r3, [pc, #416]	; (8000748 <eepromKontrol+0x514>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b68      	ldr	r3, [pc, #416]	; (800074c <eepromKontrol+0x518>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b66      	ldr	r3, [pc, #408]	; (800074c <eepromKontrol+0x518>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b65      	ldr	r3, [pc, #404]	; (8000750 <eepromKontrol+0x51c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b63      	ldr	r3, [pc, #396]	; (8000750 <eepromKontrol+0x51c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b63      	ldr	r3, [pc, #396]	; (8000754 <eepromKontrol+0x520>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b61      	ldr	r3, [pc, #388]	; (8000754 <eepromKontrol+0x520>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b60      	ldr	r3, [pc, #384]	; (8000758 <eepromKontrol+0x524>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5e      	ldr	r3, [pc, #376]	; (8000758 <eepromKontrol+0x524>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5e      	ldr	r3, [pc, #376]	; (800075c <eepromKontrol+0x528>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b5c      	ldr	r3, [pc, #368]	; (800075c <eepromKontrol+0x528>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <eepromKontrol+0x52c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <eepromKontrol+0x52c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b59      	ldr	r3, [pc, #356]	; (8000764 <eepromKontrol+0x530>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b57      	ldr	r3, [pc, #348]	; (8000764 <eepromKontrol+0x530>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b56      	ldr	r3, [pc, #344]	; (8000768 <eepromKontrol+0x534>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b54      	ldr	r3, [pc, #336]	; (8000768 <eepromKontrol+0x534>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b54      	ldr	r3, [pc, #336]	; (800076c <eepromKontrol+0x538>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b52      	ldr	r3, [pc, #328]	; (800076c <eepromKontrol+0x538>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b51      	ldr	r3, [pc, #324]	; (8000770 <eepromKontrol+0x53c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <eepromKontrol+0x53c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <eepromKontrol+0x540>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <eepromKontrol+0x540>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b4c      	ldr	r3, [pc, #304]	; (8000778 <eepromKontrol+0x544>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b4a      	ldr	r3, [pc, #296]	; (8000778 <eepromKontrol+0x544>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b4a      	ldr	r3, [pc, #296]	; (800077c <eepromKontrol+0x548>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b48      	ldr	r3, [pc, #288]	; (800077c <eepromKontrol+0x548>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b47      	ldr	r3, [pc, #284]	; (8000780 <eepromKontrol+0x54c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b45      	ldr	r3, [pc, #276]	; (8000780 <eepromKontrol+0x54c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b45      	ldr	r3, [pc, #276]	; (8000784 <eepromKontrol+0x550>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b43      	ldr	r3, [pc, #268]	; (8000784 <eepromKontrol+0x550>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b42      	ldr	r3, [pc, #264]	; (8000788 <eepromKontrol+0x554>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b40      	ldr	r3, [pc, #256]	; (8000788 <eepromKontrol+0x554>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b40      	ldr	r3, [pc, #256]	; (800078c <eepromKontrol+0x558>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3e      	ldr	r3, [pc, #248]	; (800078c <eepromKontrol+0x558>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <eepromKontrol+0x55c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <eepromKontrol+0x55c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <eepromKontrol+0x560>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b39      	ldr	r3, [pc, #228]	; (8000794 <eepromKontrol+0x560>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b38      	ldr	r3, [pc, #224]	; (8000798 <eepromKontrol+0x564>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a38      	ldr	r2, [pc, #224]	; (800079c <eepromKontrol+0x568>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <eepromKontrol+0x56c>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f008 f923 	bl	8008918 <HAL_Delay>
	memcpy(wifiSSIDLoc, &eepromData[ssidStartPos], wifiCharacterLimit);
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <eepromKontrol+0x570>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a31      	ldr	r2, [pc, #196]	; (800079c <eepromKontrol+0x568>)
 80006d8:	441a      	add	r2, r3
 80006da:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <eepromKontrol+0x574>)
 80006dc:	6811      	ldr	r1, [r2, #0]
 80006de:	6855      	ldr	r5, [r2, #4]
 80006e0:	6894      	ldr	r4, [r2, #8]
 80006e2:	68d0      	ldr	r0, [r2, #12]
 80006e4:	6019      	str	r1, [r3, #0]
 80006e6:	605d      	str	r5, [r3, #4]
 80006e8:	609c      	str	r4, [r3, #8]
 80006ea:	60d8      	str	r0, [r3, #12]
 80006ec:	6911      	ldr	r1, [r2, #16]
 80006ee:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f008 f910 	bl	8008918 <HAL_Delay>
	memcpy(wifiPassLocArr, &eepromData[passStartPos], wifiCharacterLimit);
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <eepromKontrol+0x578>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a27      	ldr	r2, [pc, #156]	; (800079c <eepromKontrol+0x568>)
 80006fe:	441a      	add	r2, r3
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <eepromKontrol+0x57c>)
 8000702:	6811      	ldr	r1, [r2, #0]
 8000704:	6855      	ldr	r5, [r2, #4]
 8000706:	6894      	ldr	r4, [r2, #8]
 8000708:	68d0      	ldr	r0, [r2, #12]
 800070a:	6019      	str	r1, [r3, #0]
 800070c:	605d      	str	r5, [r3, #4]
 800070e:	609c      	str	r4, [r3, #8]
 8000710:	60d8      	str	r0, [r3, #12]
 8000712:	6911      	ldr	r1, [r2, #16]
 8000714:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f008 f8fd 	bl	8008918 <HAL_Delay>
	readFromEEPROM(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f000 f858 	bl	80007d4 <readFromEEPROM>
	HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f008 f8f6 	bl	8008918 <HAL_Delay>
	readFromEEPROM(2);
 800072c:	2002      	movs	r0, #2
 800072e:	f000 f851 	bl	80007d4 <readFromEEPROM>
	HAL_Delay(1000);
 8000732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000736:	f008 f8ef 	bl	8008918 <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bdb0      	pop	{r4, r5, r7, pc}
 8000740:	2000023d 	.word	0x2000023d
 8000744:	2000022e 	.word	0x2000022e
 8000748:	2000023e 	.word	0x2000023e
 800074c:	2000022f 	.word	0x2000022f
 8000750:	20000231 	.word	0x20000231
 8000754:	2000023f 	.word	0x2000023f
 8000758:	20000232 	.word	0x20000232
 800075c:	20000233 	.word	0x20000233
 8000760:	20000234 	.word	0x20000234
 8000764:	20000235 	.word	0x20000235
 8000768:	20000236 	.word	0x20000236
 800076c:	20000237 	.word	0x20000237
 8000770:	20000238 	.word	0x20000238
 8000774:	20000239 	.word	0x20000239
 8000778:	2000023a 	.word	0x2000023a
 800077c:	2000023b 	.word	0x2000023b
 8000780:	2000023c 	.word	0x2000023c
 8000784:	20000240 	.word	0x20000240
 8000788:	20000242 	.word	0x20000242
 800078c:	20000244 	.word	0x20000244
 8000790:	20000245 	.word	0x20000245
 8000794:	20000243 	.word	0x20000243
 8000798:	2000000c 	.word	0x2000000c
 800079c:	20000128 	.word	0x20000128
 80007a0:	200001a0 	.word	0x200001a0
 80007a4:	20000010 	.word	0x20000010
 80007a8:	200001d4 	.word	0x200001d4
 80007ac:	20000014 	.word	0x20000014
 80007b0:	200001e8 	.word	0x200001e8

080007b4 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <getCharFromCursorPosition+0x1c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d11c      	bne.n	800081c <readFromEEPROM+0x48>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <readFromEEPROM+0x88>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	e012      	b.n	8000814 <readFromEEPROM+0x40>
			wifiSSID[i] = getCharFromCursorPosition(wifiSSIDLoc[tempSSIDStartPos]);
 80007ee:	7dfb      	ldrb	r3, [r7, #23]
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <readFromEEPROM+0x8c>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffdd 	bl	80007b4 <getCharFromCursorPosition>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <readFromEEPROM+0x90>)
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	4413      	add	r3, r2
 8000804:	460a      	mov	r2, r1
 8000806:	701a      	strb	r2, [r3, #0]

			tempSSIDStartPos++;
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	3301      	adds	r3, #1
 800080c:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	3301      	adds	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	2b13      	cmp	r3, #19
 8000818:	dde9      	ble.n	80007ee <readFromEEPROM+0x1a>
			wifiPass[i] = getCharFromCursorPosition(wifiPassLocArr[tempPassStartPos]);

			tempPassStartPos++;
		}
	}
}
 800081a:	e01b      	b.n	8000854 <readFromEEPROM+0x80>
		uint8_t tempPassStartPos = passStartPos;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <readFromEEPROM+0x94>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e012      	b.n	800084e <readFromEEPROM+0x7a>
			wifiPass[i] = getCharFromCursorPosition(wifiPassLocArr[tempPassStartPos]);
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <readFromEEPROM+0x98>)
 800082c:	5cd3      	ldrb	r3, [r2, r3]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffc0 	bl	80007b4 <getCharFromCursorPosition>
 8000834:	4603      	mov	r3, r0
 8000836:	4619      	mov	r1, r3
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <readFromEEPROM+0x9c>)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	3301      	adds	r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b13      	cmp	r3, #19
 8000852:	dde9      	ble.n	8000828 <readFromEEPROM+0x54>
}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000010 	.word	0x20000010
 8000860:	200001d4 	.word	0x200001d4
 8000864:	200001ac 	.word	0x200001ac
 8000868:	20000014 	.word	0x20000014
 800086c:	200001e8 	.word	0x200001e8
 8000870:	200001c0 	.word	0x200001c0

08000874 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b09f      	sub	sp, #124	; 0x7c
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000880:	4948      	ldr	r1, [pc, #288]	; (80009a4 <ESP8266_Init+0x130>)
 8000882:	4849      	ldr	r0, [pc, #292]	; (80009a8 <ESP8266_Init+0x134>)
 8000884:	f00b fefa 	bl	800c67c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000888:	4847      	ldr	r0, [pc, #284]	; (80009a8 <ESP8266_Init+0x134>)
 800088a:	f7ff fccb 	bl	8000224 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29b      	uxth	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4944      	ldr	r1, [pc, #272]	; (80009a8 <ESP8266_Init+0x134>)
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f00b f90a 	bl	800bab0 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f008 f83a 	bl	8008918 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80008a4:	4941      	ldr	r1, [pc, #260]	; (80009ac <ESP8266_Init+0x138>)
 80008a6:	4840      	ldr	r0, [pc, #256]	; (80009a8 <ESP8266_Init+0x134>)
 80008a8:	f00b fee8 	bl	800c67c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008ac:	483e      	ldr	r0, [pc, #248]	; (80009a8 <ESP8266_Init+0x134>)
 80008ae:	f7ff fcb9 	bl	8000224 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	493b      	ldr	r1, [pc, #236]	; (80009a8 <ESP8266_Init+0x134>)
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f00b f8f8 	bl	800bab0 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80008c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c4:	f008 f828 	bl	8008918 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 80008c8:	4939      	ldr	r1, [pc, #228]	; (80009b0 <ESP8266_Init+0x13c>)
 80008ca:	4837      	ldr	r0, [pc, #220]	; (80009a8 <ESP8266_Init+0x134>)
 80008cc:	f00b fed6 	bl	800c67c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008d0:	4835      	ldr	r0, [pc, #212]	; (80009a8 <ESP8266_Init+0x134>)
 80008d2:	f7ff fca7 	bl	8000224 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29b      	uxth	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	4932      	ldr	r1, [pc, #200]	; (80009a8 <ESP8266_Init+0x134>)
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f00b f8e6 	bl	800bab0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e8:	f008 f816 	bl	8008918 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008ec:	4931      	ldr	r1, [pc, #196]	; (80009b4 <ESP8266_Init+0x140>)
 80008ee:	482e      	ldr	r0, [pc, #184]	; (80009a8 <ESP8266_Init+0x134>)
 80008f0:	f00b fec4 	bl	800c67c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008f4:	482c      	ldr	r0, [pc, #176]	; (80009a8 <ESP8266_Init+0x134>)
 80008f6:	f7ff fc95 	bl	8000224 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	4929      	ldr	r1, [pc, #164]	; (80009a8 <ESP8266_Init+0x134>)
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f00b f8d4 	bl	800bab0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000908:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800090c:	f008 f804 	bl	8008918 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <ESP8266_Init+0x144>)
 8000916:	461c      	mov	r4, r3
 8000918:	4613      	mov	r3, r2
 800091a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800091c:	c407      	stmia	r4!, {r0, r1, r2}
 800091e:	8023      	strh	r3, [r4, #0]
 8000920:	3402      	adds	r4, #2
 8000922:	0c1b      	lsrs	r3, r3, #16
 8000924:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	4618      	mov	r0, r3
 800092e:	f00b ff07 	bl	800c740 <strcat>
	strcat(str, "\",\"");
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc74 	bl	8000224 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4413      	add	r3, r2
 8000946:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <ESP8266_Init+0x148>)
 8000948:	6810      	ldr	r0, [r2, #0]
 800094a:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	4618      	mov	r0, r3
 8000954:	f00b fef4 	bl	800c740 <strcat>
	strcat(str, "\"\r\n");
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc61 	bl	8000224 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4413      	add	r3, r2
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <ESP8266_Init+0x14c>)
 800096e:	6810      	ldr	r0, [r2, #0]
 8000970:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	461a      	mov	r2, r3
 8000978:	4912      	ldr	r1, [pc, #72]	; (80009c4 <ESP8266_Init+0x150>)
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <ESP8266_Init+0x134>)
 800097c:	f00b fe7e 	bl	800c67c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <ESP8266_Init+0x134>)
 8000982:	f7ff fc4f 	bl	8000224 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29b      	uxth	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	4906      	ldr	r1, [pc, #24]	; (80009a8 <ESP8266_Init+0x134>)
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f00b f88e 	bl	800bab0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000998:	f007 ffbe 	bl	8008918 <HAL_Delay>
}
 800099c:	bf00      	nop
 800099e:	377c      	adds	r7, #124	; 0x7c
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	0800cf54 	.word	0x0800cf54
 80009a8:	20000288 	.word	0x20000288
 80009ac:	0800cf64 	.word	0x0800cf64
 80009b0:	0800cf70 	.word	0x0800cf70
 80009b4:	0800cf78 	.word	0x0800cf78
 80009b8:	0800cf88 	.word	0x0800cf88
 80009bc:	0800cf98 	.word	0x0800cf98
 80009c0:	0800cf9c 	.word	0x0800cf9c
 80009c4:	0800cfa0 	.word	0x0800cfa0

080009c8 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0c6      	sub	sp, #280	; 0x118
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009d6:	6018      	str	r0, [r3, #0]
 80009d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009e0:	6019      	str	r1, [r3, #0]
 80009e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009ea:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009ec:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <sendMachineData+0xec>)
 80009ee:	4932      	ldr	r1, [pc, #200]	; (8000ab8 <sendMachineData+0xf0>)
 80009f0:	4832      	ldr	r0, [pc, #200]	; (8000abc <sendMachineData+0xf4>)
 80009f2:	f00b fe43 	bl	800c67c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f6:	4831      	ldr	r0, [pc, #196]	; (8000abc <sendMachineData+0xf4>)
 80009f8:	f7ff fc14 	bl	8000224 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a08:	492c      	ldr	r1, [pc, #176]	; (8000abc <sendMachineData+0xf4>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	f00b f850 	bl	800bab0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a14:	f007 ff80 	bl	8008918 <HAL_Delay>

	sprintf(local_txA,
 8000a18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a20:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a24:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000a28:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000a2c:	4924      	ldr	r1, [pc, #144]	; (8000ac0 <sendMachineData+0xf8>)
 8000a2e:	9100      	str	r1, [sp, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	4923      	ldr	r1, [pc, #140]	; (8000ac4 <sendMachineData+0xfc>)
 8000a36:	f00b fe21 	bl	800c67c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fbf0 	bl	8000224 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000a52:	491d      	ldr	r1, [pc, #116]	; (8000ac8 <sendMachineData+0x100>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00b fe11 	bl	800c67c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fbe0 	bl	8000224 <strlen>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f107 0110 	add.w	r1, r7, #16
 8000a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f00b f81b 	bl	800bab0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a7e:	f007 ff4b 	bl	8008918 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fbcc 	bl	8000224 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f00b f807 	bl	800bab0 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000aa2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aa6:	f007 ff37 	bl	8008918 <HAL_Delay>
}
 8000aaa:	bf00      	nop
 8000aac:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	0800cfa4 	.word	0x0800cfa4
 8000ab8:	0800cfb4 	.word	0x0800cfb4
 8000abc:	20000288 	.word	0x20000288
 8000ac0:	0800d030 	.word	0x0800d030
 8000ac4:	0800cfd4 	.word	0x0800cfd4
 8000ac8:	0800d044 	.word	0x0800d044

08000acc <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <hata2EEPROM+0xa4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <hata2EEPROM+0xa8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <hata2EEPROM+0xac>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000aea:	f000 f92b 	bl	8000d44 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000aee:	e000      	b.n	8000af2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000af0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e012      	b.n	8000b1e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <hata2EEPROM+0xa8>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <hata2EEPROM+0xac>)
 8000b02:	5cd3      	ldrb	r3, [r2, r3]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4919      	ldr	r1, [pc, #100]	; (8000b78 <hata2EEPROM+0xac>)
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	54ca      	strb	r2, [r1, r3]
					break;
 8000b16:	e007      	b.n	8000b28 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbe7      	blt.n	8000af8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	b298      	uxth	r0, r3
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <hata2EEPROM+0xac>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	b292      	uxth	r2, r2
 8000b42:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b46:	9402      	str	r4, [sp, #8]
 8000b48:	9201      	str	r2, [sp, #4]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	460a      	mov	r2, r1
 8000b50:	21a0      	movs	r1, #160	; 0xa0
 8000b52:	480a      	ldr	r0, [pc, #40]	; (8000b7c <hata2EEPROM+0xb0>)
 8000b54:	f008 ff6a 	bl	8009a2c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f007 fedc 	bl	8008918 <HAL_Delay>
	eepromKontrol(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fb67 	bl	8000234 <eepromKontrol>
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd90      	pop	{r4, r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000a8 	.word	0x200000a8
 8000b74:	200000ac 	.word	0x200000ac
 8000b78:	20000128 	.word	0x20000128
 8000b7c:	200003ac 	.word	0x200003ac

08000b80 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d11d      	bne.n	8000bcc <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b90:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b98:	4a61      	ldr	r2, [pc, #388]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f007 f965 	bl	8007e6c <lcd_print>
 8000ba2:	e008      	b.n	8000bb6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000ba4:	4b5d      	ldr	r3, [pc, #372]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000bac:	4a5d      	ldr	r2, [pc, #372]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f007 f95b 	bl	8007e6c <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000bb6:	4a5c      	ldr	r2, [pc, #368]	; (8000d28 <hataKoduLcdGoster+0x1a8>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f007 f956 	bl	8007e6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bc0:	4a5a      	ldr	r2, [pc, #360]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000bc2:	2107      	movs	r1, #7
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f007 f951 	bl	8007e6c <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bca:	e0a3      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d11d      	bne.n	8000c0e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000bd2:	4b52      	ldr	r3, [pc, #328]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000bda:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2001      	movs	r0, #1
 8000be0:	f007 f944 	bl	8007e6c <lcd_print>
 8000be4:	e008      	b.n	8000bf8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000be6:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d104      	bne.n	8000bf8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000bee:	4a4d      	ldr	r2, [pc, #308]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f007 f93a 	bl	8007e6c <lcd_print>
		lcd_print(2, 2, "2");
 8000bf8:	4a4d      	ldr	r2, [pc, #308]	; (8000d30 <hataKoduLcdGoster+0x1b0>)
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f007 f935 	bl	8007e6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c02:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c04:	2107      	movs	r1, #7
 8000c06:	2002      	movs	r0, #2
 8000c08:	f007 f930 	bl	8007e6c <lcd_print>
}
 8000c0c:	e082      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d11d      	bne.n	8000c50 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d105      	bne.n	8000c28 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000c1c:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	2001      	movs	r0, #1
 8000c22:	f007 f923 	bl	8007e6c <lcd_print>
 8000c26:	e008      	b.n	8000c3a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000c28:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d104      	bne.n	8000c3a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000c30:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000c32:	2101      	movs	r1, #1
 8000c34:	2001      	movs	r0, #1
 8000c36:	f007 f919 	bl	8007e6c <lcd_print>
		lcd_print(2, 3, "3");
 8000c3a:	4a3e      	ldr	r2, [pc, #248]	; (8000d34 <hataKoduLcdGoster+0x1b4>)
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f007 f914 	bl	8007e6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c46:	2107      	movs	r1, #7
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f007 f90f 	bl	8007e6c <lcd_print>
}
 8000c4e:	e061      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d11d      	bne.n	8000c92 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d105      	bne.n	8000c6a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c5e:	4a30      	ldr	r2, [pc, #192]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	2001      	movs	r0, #1
 8000c64:	f007 f902 	bl	8007e6c <lcd_print>
 8000c68:	e008      	b.n	8000c7c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d104      	bne.n	8000c7c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	2001      	movs	r0, #1
 8000c78:	f007 f8f8 	bl	8007e6c <lcd_print>
		lcd_print(2, 4, "4");
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	; (8000d38 <hataKoduLcdGoster+0x1b8>)
 8000c7e:	2104      	movs	r1, #4
 8000c80:	2002      	movs	r0, #2
 8000c82:	f007 f8f3 	bl	8007e6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c86:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c88:	2107      	movs	r1, #7
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f007 f8ee 	bl	8007e6c <lcd_print>
}
 8000c90:	e040      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d11d      	bne.n	8000cd4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f007 f8e1 	bl	8007e6c <lcd_print>
 8000caa:	e008      	b.n	8000cbe <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f007 f8d7 	bl	8007e6c <lcd_print>
		lcd_print(2, 5, "5");
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <hataKoduLcdGoster+0x1bc>)
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f007 f8d2 	bl	8007e6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000cca:	2107      	movs	r1, #7
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f007 f8cd 	bl	8007e6c <lcd_print>
}
 8000cd2:	e01f      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d11c      	bne.n	8000d14 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f007 f8c0 	bl	8007e6c <lcd_print>
 8000cec:	e008      	b.n	8000d00 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d104      	bne.n	8000d00 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f007 f8b6 	bl	8007e6c <lcd_print>
		lcd_print(2, 6, "6");
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <hataKoduLcdGoster+0x1c0>)
 8000d02:	2106      	movs	r1, #6
 8000d04:	2002      	movs	r0, #2
 8000d06:	f007 f8b1 	bl	8007e6c <lcd_print>
		lcd_print(2, 7, "          ");
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f007 f8ac 	bl	8007e6c <lcd_print>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000245 	.word	0x20000245
 8000d20:	0800d0d0 	.word	0x0800d0d0
 8000d24:	0800d0e0 	.word	0x0800d0e0
 8000d28:	0800d0f0 	.word	0x0800d0f0
 8000d2c:	0800d0f4 	.word	0x0800d0f4
 8000d30:	0800d100 	.word	0x0800d100
 8000d34:	0800d104 	.word	0x0800d104
 8000d38:	0800d108 	.word	0x0800d108
 8000d3c:	0800d10c 	.word	0x0800d10c
 8000d40:	0800d110 	.word	0x0800d110

08000d44 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	e009      	b.n	8000d64 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <eepromDataFillWithEmpty+0x38>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <eepromDataFillWithEmpty+0x3c>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3301      	adds	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <eepromDataFillWithEmpty+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	dbf0      	blt.n	8000d50 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000080 	.word	0x20000080
 8000d80:	20000128 	.word	0x20000128
 8000d84:	200000a8 	.word	0x200000a8

08000d88 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <i2cTest+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <i2cTest+0x154>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0201 	bic.w	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000daa:	484c      	ldr	r0, [pc, #304]	; (8000edc <i2cTest+0x154>)
 8000dac:	f008 fd10 	bl	80097d0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db0:	23c0      	movs	r3, #192	; 0xc0
 8000db2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000db4:	2311      	movs	r3, #17
 8000db6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4846      	ldr	r0, [pc, #280]	; (8000ee0 <i2cTest+0x158>)
 8000dc6:	f008 f917 	bl	8008ff8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4844      	ldr	r0, [pc, #272]	; (8000ee0 <i2cTest+0x158>)
 8000dd0:	f008 fb89 	bl	80094e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	4841      	ldr	r0, [pc, #260]	; (8000ee0 <i2cTest+0x158>)
 8000dda:	f008 fb84 	bl	80094e6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000dde:	200a      	movs	r0, #10
 8000de0:	f007 fd9a 	bl	8008918 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000de4:	bf00      	nop
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	483d      	ldr	r0, [pc, #244]	; (8000ee0 <i2cTest+0x158>)
 8000dea:	f008 fb65 	bl	80094b8 <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d006      	beq.n	8000e02 <i2cTest+0x7a>
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	483a      	ldr	r0, [pc, #232]	; (8000ee0 <i2cTest+0x158>)
 8000df8:	f008 fb5e 	bl	80094b8 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1f1      	bne.n	8000de6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <i2cTest+0x158>)
 8000e08:	f008 fb6d 	bl	80094e6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f007 fd83 	bl	8008918 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e12:	bf00      	nop
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	4832      	ldr	r0, [pc, #200]	; (8000ee0 <i2cTest+0x158>)
 8000e18:	f008 fb4e 	bl	80094b8 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d0f8      	beq.n	8000e14 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	482e      	ldr	r0, [pc, #184]	; (8000ee0 <i2cTest+0x158>)
 8000e28:	f008 fb5d 	bl	80094e6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f007 fd73 	bl	8008918 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000e32:	bf00      	nop
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	482a      	ldr	r0, [pc, #168]	; (8000ee0 <i2cTest+0x158>)
 8000e38:	f008 fb3e 	bl	80094b8 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d0f8      	beq.n	8000e34 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2140      	movs	r1, #64	; 0x40
 8000e46:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <i2cTest+0x158>)
 8000e48:	f008 fb4d 	bl	80094e6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f007 fd63 	bl	8008918 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e52:	bf00      	nop
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	4822      	ldr	r0, [pc, #136]	; (8000ee0 <i2cTest+0x158>)
 8000e58:	f008 fb2e 	bl	80094b8 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d1f8      	bne.n	8000e54 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <i2cTest+0x158>)
 8000e68:	f008 fb3d 	bl	80094e6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f007 fd53 	bl	8008918 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e72:	bf00      	nop
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <i2cTest+0x158>)
 8000e78:	f008 fb1e 	bl	80094b8 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d1f8      	bne.n	8000e74 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <i2cTest+0x158>)
 8000e98:	f008 f8ae 	bl	8008ff8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <i2cTest+0x154>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <i2cTest+0x154>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eaa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <i2cTest+0x154>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <i2cTest+0x154>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eba:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <i2cTest+0x154>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <i2cTest+0x154>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <i2cTest+0x154>)
 8000ece:	f008 fb3b 	bl	8009548 <HAL_I2C_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200003ac 	.word	0x200003ac
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000eee:	20c8      	movs	r0, #200	; 0xc8
 8000ef0:	f007 fd12 	bl	8008918 <HAL_Delay>
	lcd_clear();
 8000ef4:	f006 ffe6 	bl	8007ec4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d143      	bne.n	8000f86 <printTemplate+0xa2>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d140      	bne.n	8000f86 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000f04:	4a9d      	ldr	r2, [pc, #628]	; (800117c <printTemplate+0x298>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f006 ffaf 	bl	8007e6c <lcd_print>
		lcd_print(2, 3, "0");
 8000f0e:	4a9c      	ldr	r2, [pc, #624]	; (8001180 <printTemplate+0x29c>)
 8000f10:	2103      	movs	r1, #3
 8000f12:	2002      	movs	r0, #2
 8000f14:	f006 ffaa 	bl	8007e6c <lcd_print>
		lcd_print(2, 4, "1");
 8000f18:	4a9a      	ldr	r2, [pc, #616]	; (8001184 <printTemplate+0x2a0>)
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f006 ffa5 	bl	8007e6c <lcd_print>
		lcd_print(2, 5, "2");
 8000f22:	4a99      	ldr	r2, [pc, #612]	; (8001188 <printTemplate+0x2a4>)
 8000f24:	2105      	movs	r1, #5
 8000f26:	2002      	movs	r0, #2
 8000f28:	f006 ffa0 	bl	8007e6c <lcd_print>
		lcd_print(2, 6, "3");
 8000f2c:	4a97      	ldr	r2, [pc, #604]	; (800118c <printTemplate+0x2a8>)
 8000f2e:	2106      	movs	r1, #6
 8000f30:	2002      	movs	r0, #2
 8000f32:	f006 ff9b 	bl	8007e6c <lcd_print>
		lcd_print(2, 7, "4");
 8000f36:	4a96      	ldr	r2, [pc, #600]	; (8001190 <printTemplate+0x2ac>)
 8000f38:	2107      	movs	r1, #7
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f006 ff96 	bl	8007e6c <lcd_print>
		lcd_print(2, 10, "5");
 8000f40:	4a94      	ldr	r2, [pc, #592]	; (8001194 <printTemplate+0x2b0>)
 8000f42:	210a      	movs	r1, #10
 8000f44:	2002      	movs	r0, #2
 8000f46:	f006 ff91 	bl	8007e6c <lcd_print>
		lcd_print(2, 11, "6");
 8000f4a:	4a93      	ldr	r2, [pc, #588]	; (8001198 <printTemplate+0x2b4>)
 8000f4c:	210b      	movs	r1, #11
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f006 ff8c 	bl	8007e6c <lcd_print>
		lcd_print(2, 12, "7");
 8000f54:	4a91      	ldr	r2, [pc, #580]	; (800119c <printTemplate+0x2b8>)
 8000f56:	210c      	movs	r1, #12
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f006 ff87 	bl	8007e6c <lcd_print>
		lcd_print(2, 13, "8");
 8000f5e:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <printTemplate+0x2bc>)
 8000f60:	210d      	movs	r1, #13
 8000f62:	2002      	movs	r0, #2
 8000f64:	f006 ff82 	bl	8007e6c <lcd_print>
		lcd_print(2, 14, "9");
 8000f68:	4a8e      	ldr	r2, [pc, #568]	; (80011a4 <printTemplate+0x2c0>)
 8000f6a:	210e      	movs	r1, #14
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f006 ff7d 	bl	8007e6c <lcd_print>
		lcd_print(1, 5, machineID);
 8000f72:	4a8d      	ldr	r2, [pc, #564]	; (80011a8 <printTemplate+0x2c4>)
 8000f74:	2105      	movs	r1, #5
 8000f76:	2001      	movs	r0, #1
 8000f78:	f006 ff78 	bl	8007e6c <lcd_print>
		lcd_gotoxy(2, 3);
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f006 ff55 	bl	8007e2e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f84:	e0f5      	b.n	8001172 <printTemplate+0x28e>
	} else if(type == 2) {
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d178      	bne.n	800107e <printTemplate+0x19a>
		if(page == 1) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d114      	bne.n	8000fbc <printTemplate+0xd8>
			lcd_clear();
 8000f92:	f006 ff97 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f007 fcbe 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f9c:	4a83      	ldr	r2, [pc, #524]	; (80011ac <printTemplate+0x2c8>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 ff63 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fa6:	4a82      	ldr	r2, [pc, #520]	; (80011b0 <printTemplate+0x2cc>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2001      	movs	r0, #1
 8000fac:	f006 ff5e 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000fb0:	4a80      	ldr	r2, [pc, #512]	; (80011b4 <printTemplate+0x2d0>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f006 ff59 	bl	8007e6c <lcd_print>
}
 8000fba:	e0da      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 2) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d114      	bne.n	8000fec <printTemplate+0x108>
			lcd_clear();
 8000fc2:	f006 ff7f 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f007 fca6 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fcc:	4a77      	ldr	r2, [pc, #476]	; (80011ac <printTemplate+0x2c8>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f006 ff4b 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fd6:	4a76      	ldr	r2, [pc, #472]	; (80011b0 <printTemplate+0x2cc>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f006 ff46 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fe0:	4a75      	ldr	r2, [pc, #468]	; (80011b8 <printTemplate+0x2d4>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f006 ff41 	bl	8007e6c <lcd_print>
}
 8000fea:	e0c2      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 3) {
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d114      	bne.n	800101c <printTemplate+0x138>
			lcd_clear();
 8000ff2:	f006 ff67 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f007 fc8e 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ffc:	4a6b      	ldr	r2, [pc, #428]	; (80011ac <printTemplate+0x2c8>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2001      	movs	r0, #1
 8001002:	f006 ff33 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001006:	4a6a      	ldr	r2, [pc, #424]	; (80011b0 <printTemplate+0x2cc>)
 8001008:	2107      	movs	r1, #7
 800100a:	2001      	movs	r0, #1
 800100c:	f006 ff2e 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001010:	4a6a      	ldr	r2, [pc, #424]	; (80011bc <printTemplate+0x2d8>)
 8001012:	2101      	movs	r1, #1
 8001014:	2002      	movs	r0, #2
 8001016:	f006 ff29 	bl	8007e6c <lcd_print>
}
 800101a:	e0aa      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 4) {
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d114      	bne.n	800104c <printTemplate+0x168>
			lcd_clear();
 8001022:	f006 ff4f 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f007 fc76 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800102c:	4a5f      	ldr	r2, [pc, #380]	; (80011ac <printTemplate+0x2c8>)
 800102e:	2101      	movs	r1, #1
 8001030:	2001      	movs	r0, #1
 8001032:	f006 ff1b 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001036:	4a5e      	ldr	r2, [pc, #376]	; (80011b0 <printTemplate+0x2cc>)
 8001038:	2107      	movs	r1, #7
 800103a:	2001      	movs	r0, #1
 800103c:	f006 ff16 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001040:	4a5f      	ldr	r2, [pc, #380]	; (80011c0 <printTemplate+0x2dc>)
 8001042:	2101      	movs	r1, #1
 8001044:	2002      	movs	r0, #2
 8001046:	f006 ff11 	bl	8007e6c <lcd_print>
}
 800104a:	e092      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 5) {
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b05      	cmp	r3, #5
 8001050:	f040 808f 	bne.w	8001172 <printTemplate+0x28e>
			lcd_clear();
 8001054:	f006 ff36 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 8001058:	2064      	movs	r0, #100	; 0x64
 800105a:	f007 fc5d 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800105e:	4a53      	ldr	r2, [pc, #332]	; (80011ac <printTemplate+0x2c8>)
 8001060:	2101      	movs	r1, #1
 8001062:	2001      	movs	r0, #1
 8001064:	f006 ff02 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <printTemplate+0x2cc>)
 800106a:	2107      	movs	r1, #7
 800106c:	2001      	movs	r0, #1
 800106e:	f006 fefd 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001072:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <printTemplate+0x2e0>)
 8001074:	2101      	movs	r1, #1
 8001076:	2002      	movs	r0, #2
 8001078:	f006 fef8 	bl	8007e6c <lcd_print>
}
 800107c:	e079      	b.n	8001172 <printTemplate+0x28e>
	} else if(type == 3) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b03      	cmp	r3, #3
 8001082:	d176      	bne.n	8001172 <printTemplate+0x28e>
		if(page == 1) {
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d114      	bne.n	80010b4 <printTemplate+0x1d0>
			lcd_clear();
 800108a:	f006 ff1b 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f007 fc42 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <printTemplate+0x2e4>)
 8001096:	2101      	movs	r1, #1
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fee7 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800109e:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <printTemplate+0x2e8>)
 80010a0:	2107      	movs	r1, #7
 80010a2:	2001      	movs	r0, #1
 80010a4:	f006 fee2 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <printTemplate+0x2d0>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	2002      	movs	r0, #2
 80010ae:	f006 fedd 	bl	8007e6c <lcd_print>
}
 80010b2:	e05e      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 2) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d114      	bne.n	80010e4 <printTemplate+0x200>
			lcd_clear();
 80010ba:	f006 ff03 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f007 fc2a 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c4:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <printTemplate+0x2e4>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	2001      	movs	r0, #1
 80010ca:	f006 fecf 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010ce:	4a3f      	ldr	r2, [pc, #252]	; (80011cc <printTemplate+0x2e8>)
 80010d0:	2107      	movs	r1, #7
 80010d2:	2001      	movs	r0, #1
 80010d4:	f006 feca 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010d8:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <printTemplate+0x2d4>)
 80010da:	2101      	movs	r1, #1
 80010dc:	2002      	movs	r0, #2
 80010de:	f006 fec5 	bl	8007e6c <lcd_print>
}
 80010e2:	e046      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 3) {
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d114      	bne.n	8001114 <printTemplate+0x230>
			lcd_clear();
 80010ea:	f006 feeb 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f007 fc12 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010f4:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <printTemplate+0x2e4>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	2001      	movs	r0, #1
 80010fa:	f006 feb7 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <printTemplate+0x2e8>)
 8001100:	2107      	movs	r1, #7
 8001102:	2001      	movs	r0, #1
 8001104:	f006 feb2 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001108:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <printTemplate+0x2d8>)
 800110a:	2101      	movs	r1, #1
 800110c:	2002      	movs	r0, #2
 800110e:	f006 fead 	bl	8007e6c <lcd_print>
}
 8001112:	e02e      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 4) {
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b04      	cmp	r3, #4
 8001118:	d114      	bne.n	8001144 <printTemplate+0x260>
			lcd_clear();
 800111a:	f006 fed3 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 800111e:	2064      	movs	r0, #100	; 0x64
 8001120:	f007 fbfa 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <printTemplate+0x2e4>)
 8001126:	2101      	movs	r1, #1
 8001128:	2001      	movs	r0, #1
 800112a:	f006 fe9f 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800112e:	4a27      	ldr	r2, [pc, #156]	; (80011cc <printTemplate+0x2e8>)
 8001130:	2107      	movs	r1, #7
 8001132:	2001      	movs	r0, #1
 8001134:	f006 fe9a 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <printTemplate+0x2dc>)
 800113a:	2101      	movs	r1, #1
 800113c:	2002      	movs	r0, #2
 800113e:	f006 fe95 	bl	8007e6c <lcd_print>
}
 8001142:	e016      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 5) {
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d113      	bne.n	8001172 <printTemplate+0x28e>
			lcd_clear();
 800114a:	f006 febb 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	; 0x64
 8001150:	f007 fbe2 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001154:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <printTemplate+0x2e4>)
 8001156:	2101      	movs	r1, #1
 8001158:	2001      	movs	r0, #1
 800115a:	f006 fe87 	bl	8007e6c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <printTemplate+0x2e8>)
 8001160:	2107      	movs	r1, #7
 8001162:	2001      	movs	r0, #1
 8001164:	f006 fe82 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <printTemplate+0x2e0>)
 800116a:	2101      	movs	r1, #1
 800116c:	2002      	movs	r0, #2
 800116e:	f006 fe7d 	bl	8007e6c <lcd_print>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	0800d114 	.word	0x0800d114
 8001180:	0800d11c 	.word	0x0800d11c
 8001184:	0800d120 	.word	0x0800d120
 8001188:	0800d124 	.word	0x0800d124
 800118c:	0800d128 	.word	0x0800d128
 8001190:	0800d12c 	.word	0x0800d12c
 8001194:	0800d130 	.word	0x0800d130
 8001198:	0800d134 	.word	0x0800d134
 800119c:	0800d138 	.word	0x0800d138
 80011a0:	0800d13c 	.word	0x0800d13c
 80011a4:	0800d140 	.word	0x0800d140
 80011a8:	200001a0 	.word	0x200001a0
 80011ac:	0800d144 	.word	0x0800d144
 80011b0:	200001ac 	.word	0x200001ac
 80011b4:	0800d14c 	.word	0x0800d14c
 80011b8:	0800d160 	.word	0x0800d160
 80011bc:	0800d174 	.word	0x0800d174
 80011c0:	0800d188 	.word	0x0800d188
 80011c4:	0800d19c 	.word	0x0800d19c
 80011c8:	0800d1b0 	.word	0x0800d1b0
 80011cc:	200001c0 	.word	0x200001c0

080011d0 <checkSlideVal>:

int checkSlideVal(int state) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d111      	bne.n	8001202 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011de:	2101      	movs	r1, #1
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <checkSlideVal+0x60>)
 80011e2:	f008 f969 	bl	80094b8 <HAL_GPIO_ReadPin>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <checkSlideVal+0x20>
			return 34;
 80011ec:	2322      	movs	r3, #34	; 0x22
 80011ee:	e01b      	b.n	8001228 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011f0:	2108      	movs	r1, #8
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <checkSlideVal+0x64>)
 80011f4:	f008 f960 	bl	80094b8 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d113      	bne.n	8001226 <checkSlideVal+0x56>
			return 32;
 80011fe:	2320      	movs	r3, #32
 8001200:	e012      	b.n	8001228 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001202:	2101      	movs	r1, #1
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <checkSlideVal+0x60>)
 8001206:	f008 f957 	bl	80094b8 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <checkSlideVal+0x44>
			return 35;
 8001210:	2323      	movs	r3, #35	; 0x23
 8001212:	e009      	b.n	8001228 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001214:	2108      	movs	r1, #8
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <checkSlideVal+0x64>)
 8001218:	f008 f94e 	bl	80094b8 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <checkSlideVal+0x56>
			return 33;
 8001222:	2321      	movs	r3, #33	; 0x21
 8001224:	e000      	b.n	8001228 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40010800 	.word	0x40010800
 8001234:	40011000 	.word	0x40011000

08001238 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7fe ffec 	bl	8000224 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001254:	e08a      	b.n	800136c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f7ff ffba 	bl	80011d0 <checkSlideVal>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	dd07      	ble.n	8001272 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f7ff ffb4 	bl	80011d0 <checkSlideVal>
 8001268:	4603      	mov	r3, r0
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b44      	ldr	r3, [pc, #272]	; (8001380 <slideText+0x148>)
 800126e:	701a      	strb	r2, [r3, #0]
			break;
 8001270:	e081      	b.n	8001376 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	e075      	b.n	8001364 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f7ff ffa9 	bl	80011d0 <checkSlideVal>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	dd09      	ble.n	8001298 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001284:	6838      	ldr	r0, [r7, #0]
 8001286:	f7ff ffa3 	bl	80011d0 <checkSlideVal>
 800128a:	4603      	mov	r3, r0
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <slideText+0x148>)
 8001290:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001296:	e069      	b.n	800136c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	4413      	add	r3, r2
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e029      	b.n	80012f6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f7ff ff94 	bl	80011d0 <checkSlideVal>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dd0b      	ble.n	80012c6 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7ff ff8e 	bl	80011d0 <checkSlideVal>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <slideText+0x148>)
 80012ba:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80012c4:	e01d      	b.n	8001302 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b2d9      	uxtb	r1, r3
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	f006 fdd6 	bl	8007e96 <lcd_print_char>
				HAL_Delay(30);
 80012ea:	201e      	movs	r0, #30
 80012ec:	f007 fb14 	bl	8008918 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3301      	adds	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	7dfa      	ldrb	r2, [r7, #23]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4413      	add	r3, r2
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbcf      	blt.n	80012a2 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	3b01      	subs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e023      	b.n	8001352 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f7ff ff60 	bl	80011d0 <checkSlideVal>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	dd0b      	ble.n	800132e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f7ff ff5a 	bl	80011d0 <checkSlideVal>
 800131c:	4603      	mov	r3, r0
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <slideText+0x148>)
 8001322:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800132c:	e017      	b.n	800135e <slideText+0x126>
				}
			     if(j >= startPos) {
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	429a      	cmp	r2, r3
 8001334:	db0a      	blt.n	800134c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	b2d1      	uxtb	r1, r2
 800133e:	2220      	movs	r2, #32
 8001340:	4618      	mov	r0, r3
 8001342:	f006 fda8 	bl	8007e96 <lcd_print_char>
			    	 HAL_Delay(30);
 8001346:	201e      	movs	r0, #30
 8001348:	f007 fae6 	bl	8008918 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3b01      	subs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	7dfa      	ldrb	r2, [r7, #23]
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	429a      	cmp	r2, r3
 800135c:	dad5      	bge.n	800130a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	3301      	adds	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	6a3a      	ldr	r2, [r7, #32]
 8001368:	429a      	cmp	r2, r3
 800136a:	db85      	blt.n	8001278 <slideText+0x40>
	while(mainLoopVal == 1) {
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	2b01      	cmp	r3, #1
 8001370:	f43f af71 	beq.w	8001256 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000224 	.word	0x20000224

08001384 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001388:	f3bf 8f4f 	dsb	sy
}
 800138c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <__NVIC_SystemReset+0x24>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001396:	4904      	ldr	r1, [pc, #16]	; (80013a8 <__NVIC_SystemReset+0x24>)
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_SystemReset+0x28>)
 800139a:	4313      	orrs	r3, r2
 800139c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800139e:	f3bf 8f4f 	dsb	sy
}
 80013a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <__NVIC_SystemReset+0x20>
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	05fa0004 	.word	0x05fa0004

080013b0 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013b6:	2101      	movs	r1, #1
 80013b8:	488e      	ldr	r0, [pc, #568]	; (80015f4 <menu+0x244>)
 80013ba:	f008 f87d 	bl	80094b8 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	f040 808e 	bne.w	80014e2 <menu+0x132>
 80013c6:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <menu+0x248>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8086 	beq.w	80014e2 <menu+0x132>
		menuSayac = menuSayac+1;
 80013d6:	4b89      	ldr	r3, [pc, #548]	; (80015fc <menu+0x24c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b87      	ldr	r3, [pc, #540]	; (80015fc <menu+0x24c>)
 80013e0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80013e2:	4b86      	ldr	r3, [pc, #536]	; (80015fc <menu+0x24c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b24      	cmp	r3, #36	; 0x24
 80013e8:	d102      	bne.n	80013f0 <menu+0x40>
			menuSayac = 1;
 80013ea:	4b84      	ldr	r3, [pc, #528]	; (80015fc <menu+0x24c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80013f0:	4b82      	ldr	r3, [pc, #520]	; (80015fc <menu+0x24c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b12      	cmp	r3, #18
 80013f6:	d106      	bne.n	8001406 <menu+0x56>
 80013f8:	4b81      	ldr	r3, [pc, #516]	; (8001600 <menu+0x250>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <menu+0x56>
			menuSayac = 21;
 8001400:	4b7e      	ldr	r3, [pc, #504]	; (80015fc <menu+0x24c>)
 8001402:	2215      	movs	r2, #21
 8001404:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <menu+0x24c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b08      	cmp	r3, #8
 800140c:	d106      	bne.n	800141c <menu+0x6c>
 800140e:	4b7d      	ldr	r3, [pc, #500]	; (8001604 <menu+0x254>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <menu+0x6c>
			menuSayac = 16;
 8001416:	4b79      	ldr	r3, [pc, #484]	; (80015fc <menu+0x24c>)
 8001418:	2210      	movs	r2, #16
 800141a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800141c:	4b77      	ldr	r3, [pc, #476]	; (80015fc <menu+0x24c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b0d      	cmp	r3, #13
 8001422:	d106      	bne.n	8001432 <menu+0x82>
 8001424:	4b77      	ldr	r3, [pc, #476]	; (8001604 <menu+0x254>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d102      	bne.n	8001432 <menu+0x82>
			menuSayac = 16;
 800142c:	4b73      	ldr	r3, [pc, #460]	; (80015fc <menu+0x24c>)
 800142e:	2210      	movs	r2, #16
 8001430:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001432:	4b72      	ldr	r3, [pc, #456]	; (80015fc <menu+0x24c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b09      	cmp	r3, #9
 8001438:	d106      	bne.n	8001448 <menu+0x98>
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <menu+0x254>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d102      	bne.n	8001448 <menu+0x98>
			menuSayac = 13;
 8001442:	4b6e      	ldr	r3, [pc, #440]	; (80015fc <menu+0x24c>)
 8001444:	220d      	movs	r2, #13
 8001446:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001448:	4b6c      	ldr	r3, [pc, #432]	; (80015fc <menu+0x24c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b0a      	cmp	r3, #10
 800144e:	d10a      	bne.n	8001466 <menu+0xb6>
 8001450:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <menu+0x258>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d003      	beq.n	8001460 <menu+0xb0>
 8001458:	4b6b      	ldr	r3, [pc, #428]	; (8001608 <menu+0x258>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d102      	bne.n	8001466 <menu+0xb6>
			menuSayac = 11;
 8001460:	4b66      	ldr	r3, [pc, #408]	; (80015fc <menu+0x24c>)
 8001462:	220b      	movs	r2, #11
 8001464:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001466:	4b65      	ldr	r3, [pc, #404]	; (80015fc <menu+0x24c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d10e      	bne.n	800148c <menu+0xdc>
 800146e:	4b67      	ldr	r3, [pc, #412]	; (800160c <menu+0x25c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d003      	beq.n	800147e <menu+0xce>
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <menu+0x25c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d106      	bne.n	800148c <menu+0xdc>
 800147e:	4b61      	ldr	r3, [pc, #388]	; (8001604 <menu+0x254>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d102      	bne.n	800148c <menu+0xdc>
			menuSayac = 16;
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <menu+0x24c>)
 8001488:	2210      	movs	r2, #16
 800148a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800148c:	4b5b      	ldr	r3, [pc, #364]	; (80015fc <menu+0x24c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b0c      	cmp	r3, #12
 8001492:	d10e      	bne.n	80014b2 <menu+0x102>
 8001494:	4b5d      	ldr	r3, [pc, #372]	; (800160c <menu+0x25c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d003      	beq.n	80014a4 <menu+0xf4>
 800149c:	4b5b      	ldr	r3, [pc, #364]	; (800160c <menu+0x25c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d106      	bne.n	80014b2 <menu+0x102>
 80014a4:	4b57      	ldr	r3, [pc, #348]	; (8001604 <menu+0x254>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d102      	bne.n	80014b2 <menu+0x102>
			menuSayac = 13;
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <menu+0x24c>)
 80014ae:	220d      	movs	r2, #13
 80014b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014b2:	4b52      	ldr	r3, [pc, #328]	; (80015fc <menu+0x24c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	d106      	bne.n	80014c8 <menu+0x118>
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <menu+0x260>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d102      	bne.n	80014c8 <menu+0x118>
			menuSayac = 16;
 80014c2:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <menu+0x24c>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80014c8:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <menu+0x24c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b18      	cmp	r3, #24
 80014ce:	d106      	bne.n	80014de <menu+0x12e>
 80014d0:	4b4b      	ldr	r3, [pc, #300]	; (8001600 <menu+0x250>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <menu+0x12e>
			menuSayac = 26;
 80014d8:	4b48      	ldr	r3, [pc, #288]	; (80015fc <menu+0x24c>)
 80014da:	221a      	movs	r2, #26
 80014dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014de:	f003 fb65 	bl	8004bac <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014e2:	2108      	movs	r1, #8
 80014e4:	484b      	ldr	r0, [pc, #300]	; (8001614 <menu+0x264>)
 80014e6:	f007 ffe7 	bl	80094b8 <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d175      	bne.n	80015dc <menu+0x22c>
 80014f0:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <menu+0x248>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d06e      	beq.n	80015dc <menu+0x22c>
		if (menuSayac <= 1) {
 80014fe:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <menu+0x24c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d802      	bhi.n	800150c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <menu+0x24c>)
 8001508:	2224      	movs	r2, #36	; 0x24
 800150a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800150c:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <menu+0x24c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <menu+0x24c>)
 8001516:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <menu+0x24c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b14      	cmp	r3, #20
 800151e:	d106      	bne.n	800152e <menu+0x17e>
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <menu+0x250>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <menu+0x17e>
			menuSayac = 17;
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <menu+0x24c>)
 800152a:	2211      	movs	r2, #17
 800152c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <menu+0x24c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	d106      	bne.n	8001544 <menu+0x194>
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <menu+0x254>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <menu+0x194>
			menuSayac = 7;
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <menu+0x24c>)
 8001540:	2207      	movs	r2, #7
 8001542:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <menu+0x24c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d106      	bne.n	800155a <menu+0x1aa>
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <menu+0x254>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d102      	bne.n	800155a <menu+0x1aa>
			menuSayac = 12;
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <menu+0x24c>)
 8001556:	220c      	movs	r2, #12
 8001558:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800155a:	4b28      	ldr	r3, [pc, #160]	; (80015fc <menu+0x24c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d106      	bne.n	8001570 <menu+0x1c0>
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <menu+0x254>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d102      	bne.n	8001570 <menu+0x1c0>
			menuSayac = 8;
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <menu+0x24c>)
 800156c:	2208      	movs	r2, #8
 800156e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <menu+0x24c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b0a      	cmp	r3, #10
 8001576:	d10a      	bne.n	800158e <menu+0x1de>
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <menu+0x258>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d003      	beq.n	8001588 <menu+0x1d8>
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <menu+0x258>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d102      	bne.n	800158e <menu+0x1de>
			menuSayac = 9;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <menu+0x24c>)
 800158a:	2209      	movs	r2, #9
 800158c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <menu+0x24c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d10a      	bne.n	80015ac <menu+0x1fc>
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <menu+0x25c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d003      	beq.n	80015a6 <menu+0x1f6>
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <menu+0x25c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d102      	bne.n	80015ac <menu+0x1fc>
			menuSayac = 11;
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <menu+0x24c>)
 80015a8:	220b      	movs	r2, #11
 80015aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <menu+0x24c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d106      	bne.n	80015c2 <menu+0x212>
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <menu+0x260>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d102      	bne.n	80015c2 <menu+0x212>
			menuSayac = 14;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <menu+0x24c>)
 80015be:	220e      	movs	r2, #14
 80015c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <menu+0x24c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b19      	cmp	r3, #25
 80015c8:	d106      	bne.n	80015d8 <menu+0x228>
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <menu+0x250>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <menu+0x228>
			menuSayac = 23;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <menu+0x24c>)
 80015d4:	2217      	movs	r2, #23
 80015d6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015d8:	f003 fae8 	bl	8004bac <bekle>
	}

	if (menuSayac == 0) {
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <menu+0x24c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d133      	bne.n	800164c <menu+0x29c>
		if(dilSecim == 0) {
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <menu+0x268>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d121      	bne.n	8001630 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <menu+0x26c>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	2001      	movs	r0, #1
 80015f2:	e015      	b.n	8001620 <menu+0x270>
 80015f4:	40010800 	.word	0x40010800
 80015f8:	20000253 	.word	0x20000253
 80015fc:	20000224 	.word	0x20000224
 8001600:	20000233 	.word	0x20000233
 8001604:	2000022c 	.word	0x2000022c
 8001608:	2000022d 	.word	0x2000022d
 800160c:	2000022e 	.word	0x2000022e
 8001610:	2000022f 	.word	0x2000022f
 8001614:	40011000 	.word	0x40011000
 8001618:	20000245 	.word	0x20000245
 800161c:	0800d1b8 	.word	0x0800d1b8
 8001620:	f006 fc24 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001624:	4a94      	ldr	r2, [pc, #592]	; (8001878 <menu+0x4c8>)
 8001626:	2101      	movs	r1, #1
 8001628:	2002      	movs	r0, #2
 800162a:	f006 fc1f 	bl	8007e6c <lcd_print>
 800162e:	e00d      	b.n	800164c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001630:	4b92      	ldr	r3, [pc, #584]	; (800187c <menu+0x4cc>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d109      	bne.n	800164c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001638:	4a91      	ldr	r2, [pc, #580]	; (8001880 <menu+0x4d0>)
 800163a:	2101      	movs	r1, #1
 800163c:	2001      	movs	r0, #1
 800163e:	f006 fc15 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001642:	4a90      	ldr	r2, [pc, #576]	; (8001884 <menu+0x4d4>)
 8001644:	2101      	movs	r1, #1
 8001646:	2002      	movs	r0, #2
 8001648:	f006 fc10 	bl	8007e6c <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800164c:	4b8e      	ldr	r3, [pc, #568]	; (8001888 <menu+0x4d8>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	f040 82b5 	bne.w	8001bc0 <menu+0x810>
		if(dilSecim == 0) {
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <menu+0x4cc>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800165e:	4a8b      	ldr	r2, [pc, #556]	; (800188c <menu+0x4dc>)
 8001660:	2101      	movs	r1, #1
 8001662:	2001      	movs	r0, #1
 8001664:	f006 fc02 	bl	8007e6c <lcd_print>
 8001668:	e008      	b.n	800167c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800166a:	4b84      	ldr	r3, [pc, #528]	; (800187c <menu+0x4cc>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d104      	bne.n	800167c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001672:	4a87      	ldr	r2, [pc, #540]	; (8001890 <menu+0x4e0>)
 8001674:	2101      	movs	r1, #1
 8001676:	2001      	movs	r0, #1
 8001678:	f006 fbf8 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800167c:	4b85      	ldr	r3, [pc, #532]	; (8001894 <menu+0x4e4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d123      	bne.n	80016cc <menu+0x31c>
			if(dilSecim == 0) {
 8001684:	4b7d      	ldr	r3, [pc, #500]	; (800187c <menu+0x4cc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800168c:	4a82      	ldr	r2, [pc, #520]	; (8001898 <menu+0x4e8>)
 800168e:	2101      	movs	r1, #1
 8001690:	2002      	movs	r0, #2
 8001692:	f006 fbeb 	bl	8007e6c <lcd_print>
 8001696:	e008      	b.n	80016aa <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001698:	4b78      	ldr	r3, [pc, #480]	; (800187c <menu+0x4cc>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d104      	bne.n	80016aa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80016a0:	4a7e      	ldr	r2, [pc, #504]	; (800189c <menu+0x4ec>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	2002      	movs	r0, #2
 80016a6:	f006 fbe1 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80016aa:	4a7d      	ldr	r2, [pc, #500]	; (80018a0 <menu+0x4f0>)
 80016ac:	210f      	movs	r1, #15
 80016ae:	2002      	movs	r0, #2
 80016b0:	f006 fbdc 	bl	8007e6c <lcd_print>
			itoa(hataKayit1, snum, 10);
 80016b4:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <menu+0x4f4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	220a      	movs	r2, #10
 80016ba:	497b      	ldr	r1, [pc, #492]	; (80018a8 <menu+0x4f8>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f00a ff27 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 80016c2:	4a79      	ldr	r2, [pc, #484]	; (80018a8 <menu+0x4f8>)
 80016c4:	210e      	movs	r1, #14
 80016c6:	2002      	movs	r0, #2
 80016c8:	f006 fbd0 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80016cc:	4b71      	ldr	r3, [pc, #452]	; (8001894 <menu+0x4e4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d123      	bne.n	800171c <menu+0x36c>
			if(dilSecim == 0) {
 80016d4:	4b69      	ldr	r3, [pc, #420]	; (800187c <menu+0x4cc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80016dc:	4a73      	ldr	r2, [pc, #460]	; (80018ac <menu+0x4fc>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2002      	movs	r0, #2
 80016e2:	f006 fbc3 	bl	8007e6c <lcd_print>
 80016e6:	e008      	b.n	80016fa <menu+0x34a>
			} else if(dilSecim == 1) {
 80016e8:	4b64      	ldr	r3, [pc, #400]	; (800187c <menu+0x4cc>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d104      	bne.n	80016fa <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80016f0:	4a6f      	ldr	r2, [pc, #444]	; (80018b0 <menu+0x500>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	2002      	movs	r0, #2
 80016f6:	f006 fbb9 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016fa:	4a6e      	ldr	r2, [pc, #440]	; (80018b4 <menu+0x504>)
 80016fc:	210f      	movs	r1, #15
 80016fe:	2002      	movs	r0, #2
 8001700:	f006 fbb4 	bl	8007e6c <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001704:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <menu+0x508>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	220a      	movs	r2, #10
 800170a:	4967      	ldr	r1, [pc, #412]	; (80018a8 <menu+0x4f8>)
 800170c:	4618      	mov	r0, r3
 800170e:	f00a feff 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 8001712:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <menu+0x4f8>)
 8001714:	210e      	movs	r1, #14
 8001716:	2002      	movs	r0, #2
 8001718:	f006 fba8 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800171c:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <menu+0x4e4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <menu+0x3bc>
			if(dilSecim == 0) {
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <menu+0x4cc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800172c:	4a63      	ldr	r2, [pc, #396]	; (80018bc <menu+0x50c>)
 800172e:	2101      	movs	r1, #1
 8001730:	2002      	movs	r0, #2
 8001732:	f006 fb9b 	bl	8007e6c <lcd_print>
 8001736:	e008      	b.n	800174a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <menu+0x4cc>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d104      	bne.n	800174a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001740:	4a5f      	ldr	r2, [pc, #380]	; (80018c0 <menu+0x510>)
 8001742:	2101      	movs	r1, #1
 8001744:	2002      	movs	r0, #2
 8001746:	f006 fb91 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <menu+0x504>)
 800174c:	210f      	movs	r1, #15
 800174e:	2002      	movs	r0, #2
 8001750:	f006 fb8c 	bl	8007e6c <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001754:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <menu+0x514>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	220a      	movs	r2, #10
 800175a:	4953      	ldr	r1, [pc, #332]	; (80018a8 <menu+0x4f8>)
 800175c:	4618      	mov	r0, r3
 800175e:	f00a fed7 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 8001762:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <menu+0x4f8>)
 8001764:	210e      	movs	r1, #14
 8001766:	2002      	movs	r0, #2
 8001768:	f006 fb80 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <menu+0x4e4>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d123      	bne.n	80017bc <menu+0x40c>
			if(dilSecim == 0) {
 8001774:	4b41      	ldr	r3, [pc, #260]	; (800187c <menu+0x4cc>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <menu+0x518>)
 800177e:	2101      	movs	r1, #1
 8001780:	2002      	movs	r0, #2
 8001782:	f006 fb73 	bl	8007e6c <lcd_print>
 8001786:	e008      	b.n	800179a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001788:	4b3c      	ldr	r3, [pc, #240]	; (800187c <menu+0x4cc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d104      	bne.n	800179a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <menu+0x51c>)
 8001792:	2101      	movs	r1, #1
 8001794:	2002      	movs	r0, #2
 8001796:	f006 fb69 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800179a:	4a46      	ldr	r2, [pc, #280]	; (80018b4 <menu+0x504>)
 800179c:	210f      	movs	r1, #15
 800179e:	2002      	movs	r0, #2
 80017a0:	f006 fb64 	bl	8007e6c <lcd_print>
			itoa(hataKayit4, snum, 10);
 80017a4:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <menu+0x520>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	220a      	movs	r2, #10
 80017aa:	493f      	ldr	r1, [pc, #252]	; (80018a8 <menu+0x4f8>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00a feaf 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 80017b2:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <menu+0x4f8>)
 80017b4:	210e      	movs	r1, #14
 80017b6:	2002      	movs	r0, #2
 80017b8:	f006 fb58 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80017bc:	4b35      	ldr	r3, [pc, #212]	; (8001894 <menu+0x4e4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d123      	bne.n	800180c <menu+0x45c>
			if(dilSecim == 0) {
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <menu+0x4cc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80017cc:	4a41      	ldr	r2, [pc, #260]	; (80018d4 <menu+0x524>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	2002      	movs	r0, #2
 80017d2:	f006 fb4b 	bl	8007e6c <lcd_print>
 80017d6:	e008      	b.n	80017ea <menu+0x43a>
			} else if(dilSecim == 1) {
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <menu+0x4cc>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d104      	bne.n	80017ea <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80017e0:	4a3d      	ldr	r2, [pc, #244]	; (80018d8 <menu+0x528>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f006 fb41 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ea:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <menu+0x504>)
 80017ec:	210f      	movs	r1, #15
 80017ee:	2002      	movs	r0, #2
 80017f0:	f006 fb3c 	bl	8007e6c <lcd_print>
			itoa(hataKayit5, snum, 10);
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <menu+0x52c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	220a      	movs	r2, #10
 80017fa:	492b      	ldr	r1, [pc, #172]	; (80018a8 <menu+0x4f8>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00a fe87 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 8001802:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <menu+0x4f8>)
 8001804:	210e      	movs	r1, #14
 8001806:	2002      	movs	r0, #2
 8001808:	f006 fb30 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <menu+0x4e4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d123      	bne.n	800185c <menu+0x4ac>
			if(dilSecim == 0) {
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <menu+0x4cc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800181c:	4a30      	ldr	r2, [pc, #192]	; (80018e0 <menu+0x530>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f006 fb23 	bl	8007e6c <lcd_print>
 8001826:	e008      	b.n	800183a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <menu+0x4cc>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d104      	bne.n	800183a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001830:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <menu+0x534>)
 8001832:	2101      	movs	r1, #1
 8001834:	2002      	movs	r0, #2
 8001836:	f006 fb19 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <menu+0x504>)
 800183c:	210f      	movs	r1, #15
 800183e:	2002      	movs	r0, #2
 8001840:	f006 fb14 	bl	8007e6c <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <menu+0x538>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	220a      	movs	r2, #10
 800184a:	4917      	ldr	r1, [pc, #92]	; (80018a8 <menu+0x4f8>)
 800184c:	4618      	mov	r0, r3
 800184e:	f00a fe5f 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <menu+0x4f8>)
 8001854:	210e      	movs	r1, #14
 8001856:	2002      	movs	r0, #2
 8001858:	f006 fb08 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <menu+0x4e4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b06      	cmp	r3, #6
 8001862:	d15f      	bne.n	8001924 <menu+0x574>
			if(dilSecim == 0) {
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <menu+0x4cc>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d141      	bne.n	80018f0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800186c:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <menu+0x53c>)
 800186e:	2101      	movs	r1, #1
 8001870:	2002      	movs	r0, #2
 8001872:	f006 fafb 	bl	8007e6c <lcd_print>
 8001876:	e044      	b.n	8001902 <menu+0x552>
 8001878:	0800d1cc 	.word	0x0800d1cc
 800187c:	20000245 	.word	0x20000245
 8001880:	0800d1e0 	.word	0x0800d1e0
 8001884:	0800d1f4 	.word	0x0800d1f4
 8001888:	20000224 	.word	0x20000224
 800188c:	0800d208 	.word	0x0800d208
 8001890:	0800d21c 	.word	0x0800d21c
 8001894:	20000226 	.word	0x20000226
 8001898:	0800d230 	.word	0x0800d230
 800189c:	0800d240 	.word	0x0800d240
 80018a0:	0800d250 	.word	0x0800d250
 80018a4:	20000246 	.word	0x20000246
 80018a8:	20000198 	.word	0x20000198
 80018ac:	0800d254 	.word	0x0800d254
 80018b0:	0800d264 	.word	0x0800d264
 80018b4:	0800d274 	.word	0x0800d274
 80018b8:	20000247 	.word	0x20000247
 80018bc:	0800d278 	.word	0x0800d278
 80018c0:	0800d288 	.word	0x0800d288
 80018c4:	20000248 	.word	0x20000248
 80018c8:	0800d298 	.word	0x0800d298
 80018cc:	0800d2a8 	.word	0x0800d2a8
 80018d0:	20000249 	.word	0x20000249
 80018d4:	0800d2b8 	.word	0x0800d2b8
 80018d8:	0800d2c8 	.word	0x0800d2c8
 80018dc:	2000024a 	.word	0x2000024a
 80018e0:	0800d2d8 	.word	0x0800d2d8
 80018e4:	0800d2e8 	.word	0x0800d2e8
 80018e8:	2000024b 	.word	0x2000024b
 80018ec:	0800d2f8 	.word	0x0800d2f8
			} else if(dilSecim == 1) {
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <menu+0x680>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d104      	bne.n	8001902 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80018f8:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <menu+0x684>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	2002      	movs	r0, #2
 80018fe:	f006 fab5 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001902:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <menu+0x688>)
 8001904:	210f      	movs	r1, #15
 8001906:	2002      	movs	r0, #2
 8001908:	f006 fab0 	bl	8007e6c <lcd_print>
			itoa(hataKayit7, snum, 10);
 800190c:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <menu+0x68c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	220a      	movs	r2, #10
 8001912:	494b      	ldr	r1, [pc, #300]	; (8001a40 <menu+0x690>)
 8001914:	4618      	mov	r0, r3
 8001916:	f00a fdfb 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 800191a:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <menu+0x690>)
 800191c:	210e      	movs	r1, #14
 800191e:	2002      	movs	r0, #2
 8001920:	f006 faa4 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <menu+0x694>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b07      	cmp	r3, #7
 800192a:	d123      	bne.n	8001974 <menu+0x5c4>
			if(dilSecim == 0) {
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <menu+0x680>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <menu+0x698>)
 8001936:	2101      	movs	r1, #1
 8001938:	2002      	movs	r0, #2
 800193a:	f006 fa97 	bl	8007e6c <lcd_print>
 800193e:	e008      	b.n	8001952 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <menu+0x680>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d104      	bne.n	8001952 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001948:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <menu+0x69c>)
 800194a:	2101      	movs	r1, #1
 800194c:	2002      	movs	r0, #2
 800194e:	f006 fa8d 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001952:	4a39      	ldr	r2, [pc, #228]	; (8001a38 <menu+0x688>)
 8001954:	210f      	movs	r1, #15
 8001956:	2002      	movs	r0, #2
 8001958:	f006 fa88 	bl	8007e6c <lcd_print>
			itoa(hataKayit8, snum, 10);
 800195c:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <menu+0x6a0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	220a      	movs	r2, #10
 8001962:	4937      	ldr	r1, [pc, #220]	; (8001a40 <menu+0x690>)
 8001964:	4618      	mov	r0, r3
 8001966:	f00a fdd3 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 800196a:	4a35      	ldr	r2, [pc, #212]	; (8001a40 <menu+0x690>)
 800196c:	210e      	movs	r1, #14
 800196e:	2002      	movs	r0, #2
 8001970:	f006 fa7c 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <menu+0x694>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d123      	bne.n	80019c4 <menu+0x614>
			if(dilSecim == 0) {
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <menu+0x680>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001984:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <menu+0x6a4>)
 8001986:	2101      	movs	r1, #1
 8001988:	2002      	movs	r0, #2
 800198a:	f006 fa6f 	bl	8007e6c <lcd_print>
 800198e:	e008      	b.n	80019a2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <menu+0x680>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d104      	bne.n	80019a2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001998:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <menu+0x6a8>)
 800199a:	2101      	movs	r1, #1
 800199c:	2002      	movs	r0, #2
 800199e:	f006 fa65 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019a2:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <menu+0x688>)
 80019a4:	210f      	movs	r1, #15
 80019a6:	2002      	movs	r0, #2
 80019a8:	f006 fa60 	bl	8007e6c <lcd_print>
			itoa(hataKayit9, snum, 10);
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <menu+0x6ac>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	220a      	movs	r2, #10
 80019b2:	4923      	ldr	r1, [pc, #140]	; (8001a40 <menu+0x690>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00a fdab 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <menu+0x690>)
 80019bc:	210e      	movs	r1, #14
 80019be:	2002      	movs	r0, #2
 80019c0:	f006 fa54 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <menu+0x694>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	d123      	bne.n	8001a14 <menu+0x664>
			if(dilSecim == 0) {
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <menu+0x680>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80019d4:	4a22      	ldr	r2, [pc, #136]	; (8001a60 <menu+0x6b0>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f006 fa47 	bl	8007e6c <lcd_print>
 80019de:	e008      	b.n	80019f2 <menu+0x642>
			} else if(dilSecim == 1) {
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <menu+0x680>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d104      	bne.n	80019f2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80019e8:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <menu+0x6b4>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f006 fa3d 	bl	8007e6c <lcd_print>
			}
			lcd_print(2, 16, " ");
 80019f2:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <menu+0x6b8>)
 80019f4:	2110      	movs	r1, #16
 80019f6:	2002      	movs	r0, #2
 80019f8:	f006 fa38 	bl	8007e6c <lcd_print>
			itoa(hataKayit10, snum, 10);
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <menu+0x6bc>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	220a      	movs	r2, #10
 8001a02:	490f      	ldr	r1, [pc, #60]	; (8001a40 <menu+0x690>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00a fd83 	bl	800c510 <itoa>
			lcd_print(2, 15, snum);
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <menu+0x690>)
 8001a0c:	210f      	movs	r1, #15
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f006 fa2c 	bl	8007e6c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <menu+0x694>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b0a      	cmp	r3, #10
 8001a1a:	d134      	bne.n	8001a86 <menu+0x6d6>
			if(dilSecim == 0) {
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <menu+0x680>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d127      	bne.n	8001a74 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <menu+0x6c0>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f006 fa1f 	bl	8007e6c <lcd_print>
 8001a2e:	e02a      	b.n	8001a86 <menu+0x6d6>
 8001a30:	20000245 	.word	0x20000245
 8001a34:	0800d308 	.word	0x0800d308
 8001a38:	0800d274 	.word	0x0800d274
 8001a3c:	2000024c 	.word	0x2000024c
 8001a40:	20000198 	.word	0x20000198
 8001a44:	20000226 	.word	0x20000226
 8001a48:	0800d318 	.word	0x0800d318
 8001a4c:	0800d328 	.word	0x0800d328
 8001a50:	2000024d 	.word	0x2000024d
 8001a54:	0800d338 	.word	0x0800d338
 8001a58:	0800d348 	.word	0x0800d348
 8001a5c:	2000024e 	.word	0x2000024e
 8001a60:	0800d358 	.word	0x0800d358
 8001a64:	0800d368 	.word	0x0800d368
 8001a68:	0800d378 	.word	0x0800d378
 8001a6c:	2000024f 	.word	0x2000024f
 8001a70:	0800d37c 	.word	0x0800d37c
			} else if(dilSecim == 1) {
 8001a74:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <menu+0x8d0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d104      	bne.n	8001a86 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001a7c:	4a81      	ldr	r2, [pc, #516]	; (8001c84 <menu+0x8d4>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2002      	movs	r0, #2
 8001a82:	f006 f9f3 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a86:	2102      	movs	r1, #2
 8001a88:	487f      	ldr	r0, [pc, #508]	; (8001c88 <menu+0x8d8>)
 8001a8a:	f007 fd15 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d119      	bne.n	8001ac8 <menu+0x718>
 8001a94:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <menu+0x8dc>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f083 0301 	eor.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d012      	beq.n	8001ac8 <menu+0x718>
 8001aa2:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <menu+0x8e0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10e      	bne.n	8001ac8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001aaa:	4b7a      	ldr	r3, [pc, #488]	; (8001c94 <menu+0x8e4>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <menu+0x8e4>)
 8001ab4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001ab6:	4b77      	ldr	r3, [pc, #476]	; (8001c94 <menu+0x8e4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b0a      	cmp	r3, #10
 8001abc:	d902      	bls.n	8001ac4 <menu+0x714>
				hataGostermeSirasi = 0;
 8001abe:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <menu+0x8e4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ac4:	f003 f872 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ac8:	2104      	movs	r1, #4
 8001aca:	486f      	ldr	r0, [pc, #444]	; (8001c88 <menu+0x8d8>)
 8001acc:	f007 fcf4 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d119      	bne.n	8001b0a <menu+0x75a>
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <menu+0x8dc>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f083 0301 	eor.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <menu+0x75a>
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <menu+0x8e0>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10e      	bne.n	8001b0a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <menu+0x8e4>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <menu+0x8e4>)
 8001af6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001af8:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <menu+0x8e4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b0b      	cmp	r3, #11
 8001afe:	d902      	bls.n	8001b06 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001b00:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <menu+0x8e4>)
 8001b02:	220a      	movs	r2, #10
 8001b04:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b06:	f003 f851 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	485e      	ldr	r0, [pc, #376]	; (8001c88 <menu+0x8d8>)
 8001b0e:	f007 fcd3 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d153      	bne.n	8001bc0 <menu+0x810>
 8001b18:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <menu+0x8dc>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d04c      	beq.n	8001bc0 <menu+0x810>
 8001b26:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <menu+0x8e4>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b0a      	cmp	r3, #10
 8001b2c:	d148      	bne.n	8001bc0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <menu+0x8e8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <menu+0x8ec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b3c:	4b58      	ldr	r3, [pc, #352]	; (8001ca0 <menu+0x8f0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <menu+0x8ec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <menu+0x8f4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <menu+0x8ec>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <menu+0x8f8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	4b4f      	ldr	r3, [pc, #316]	; (8001c9c <menu+0x8ec>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <menu+0x8fc>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <menu+0x8ec>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001b74:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <menu+0x900>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <menu+0x8ec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001b82:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <menu+0x904>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <menu+0x8ec>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <menu+0x908>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <menu+0x8ec>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b9e:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <menu+0x90c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <menu+0x8ec>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <menu+0x910>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <menu+0x8ec>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <menu+0x914>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <menu+0x918>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	f040 80fc 	bne.w	8001dc2 <menu+0xa12>
		if(dilSecim == 0) {
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <menu+0x8d0>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001bd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ccc <menu+0x91c>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f006 f948 	bl	8007e6c <lcd_print>
 8001bdc:	e008      	b.n	8001bf0 <menu+0x840>
		} else if(dilSecim == 1) {
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <menu+0x8d0>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d104      	bne.n	8001bf0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001be6:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <menu+0x920>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	2001      	movs	r0, #1
 8001bec:	f006 f93e 	bl	8007e6c <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <menu+0x8e0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d003      	beq.n	8001c00 <menu+0x850>
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <menu+0x8e0>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d112      	bne.n	8001c26 <menu+0x876>
			if(dilSecim == 0) {
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <menu+0x8d0>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001c08:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <menu+0x924>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f006 f92d 	bl	8007e6c <lcd_print>
 8001c12:	e008      	b.n	8001c26 <menu+0x876>
			} else if(dilSecim == 1) {
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <menu+0x8d0>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d104      	bne.n	8001c26 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001c1c:	4a2e      	ldr	r2, [pc, #184]	; (8001cd8 <menu+0x928>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	2002      	movs	r0, #2
 8001c22:	f006 f923 	bl	8007e6c <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <menu+0x92c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d116      	bne.n	8001c5c <menu+0x8ac>
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <menu+0x8e0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d112      	bne.n	8001c5c <menu+0x8ac>
			if(dilSecim == 0) {
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <menu+0x8d0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001c3e:	4a28      	ldr	r2, [pc, #160]	; (8001ce0 <menu+0x930>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	2002      	movs	r0, #2
 8001c44:	f006 f912 	bl	8007e6c <lcd_print>
 8001c48:	e008      	b.n	8001c5c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <menu+0x8d0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d104      	bne.n	8001c5c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <menu+0x934>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	2002      	movs	r0, #2
 8001c58:	f006 f908 	bl	8007e6c <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <menu+0x92c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d14c      	bne.n	8001cfe <menu+0x94e>
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <menu+0x8e0>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d148      	bne.n	8001cfe <menu+0x94e>
			if(dilSecim == 0) {
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <menu+0x8d0>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d13b      	bne.n	8001cec <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001c74:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <menu+0x938>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f006 f8f7 	bl	8007e6c <lcd_print>
 8001c7e:	e03e      	b.n	8001cfe <menu+0x94e>
 8001c80:	20000245 	.word	0x20000245
 8001c84:	0800d390 	.word	0x0800d390
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	20000253 	.word	0x20000253
 8001c90:	20000233 	.word	0x20000233
 8001c94:	20000226 	.word	0x20000226
 8001c98:	20000246 	.word	0x20000246
 8001c9c:	20000128 	.word	0x20000128
 8001ca0:	20000247 	.word	0x20000247
 8001ca4:	20000248 	.word	0x20000248
 8001ca8:	20000249 	.word	0x20000249
 8001cac:	2000024a 	.word	0x2000024a
 8001cb0:	2000024b 	.word	0x2000024b
 8001cb4:	2000024c 	.word	0x2000024c
 8001cb8:	2000024d 	.word	0x2000024d
 8001cbc:	2000024e 	.word	0x2000024e
 8001cc0:	2000024f 	.word	0x2000024f
 8001cc4:	20000250 	.word	0x20000250
 8001cc8:	20000224 	.word	0x20000224
 8001ccc:	0800d3a4 	.word	0x0800d3a4
 8001cd0:	0800d3b8 	.word	0x0800d3b8
 8001cd4:	0800d3cc 	.word	0x0800d3cc
 8001cd8:	0800d3e0 	.word	0x0800d3e0
 8001cdc:	20000225 	.word	0x20000225
 8001ce0:	0800d3f4 	.word	0x0800d3f4
 8001ce4:	0800d404 	.word	0x0800d404
 8001ce8:	0800d414 	.word	0x0800d414
			} else if(dilSecim == 1) {
 8001cec:	4b98      	ldr	r3, [pc, #608]	; (8001f50 <menu+0xba0>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d104      	bne.n	8001cfe <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001cf4:	4a97      	ldr	r2, [pc, #604]	; (8001f54 <menu+0xba4>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f006 f8b7 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cfe:	2102      	movs	r1, #2
 8001d00:	4895      	ldr	r0, [pc, #596]	; (8001f58 <menu+0xba8>)
 8001d02:	f007 fbd9 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d119      	bne.n	8001d40 <menu+0x990>
 8001d0c:	4b93      	ldr	r3, [pc, #588]	; (8001f5c <menu+0xbac>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <menu+0x990>
 8001d1a:	4b91      	ldr	r3, [pc, #580]	; (8001f60 <menu+0xbb0>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001d22:	4b90      	ldr	r3, [pc, #576]	; (8001f64 <menu+0xbb4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <menu+0xbb4>)
 8001d2c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001d2e:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <menu+0xbb4>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d902      	bls.n	8001d3c <menu+0x98c>
				calismaSekli = 0;
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <menu+0xbb4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d3c:	f002 ff36 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d40:	2104      	movs	r1, #4
 8001d42:	4885      	ldr	r0, [pc, #532]	; (8001f58 <menu+0xba8>)
 8001d44:	f007 fbb8 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d119      	bne.n	8001d82 <menu+0x9d2>
 8001d4e:	4b83      	ldr	r3, [pc, #524]	; (8001f5c <menu+0xbac>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d012      	beq.n	8001d82 <menu+0x9d2>
 8001d5c:	4b80      	ldr	r3, [pc, #512]	; (8001f60 <menu+0xbb0>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10e      	bne.n	8001d82 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001d64:	4b7f      	ldr	r3, [pc, #508]	; (8001f64 <menu+0xbb4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <menu+0xbb4>)
 8001d6e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d70:	4b7c      	ldr	r3, [pc, #496]	; (8001f64 <menu+0xbb4>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <menu+0x9ce>
	    		calismaSekli = 1;
 8001d78:	4b7a      	ldr	r3, [pc, #488]	; (8001f64 <menu+0xbb4>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d7e:	f002 ff15 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d82:	2108      	movs	r1, #8
 8001d84:	4874      	ldr	r0, [pc, #464]	; (8001f58 <menu+0xba8>)
 8001d86:	f007 fb97 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d118      	bne.n	8001dc2 <menu+0xa12>
 8001d90:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <menu+0xbac>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	f083 0301 	eor.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d011      	beq.n	8001dc2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d9e:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <menu+0xbb4>)
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <menu+0xbb8>)
 8001da4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <menu+0xbb4>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d106      	bne.n	8001dbc <menu+0xa0c>
				altLimit = 1;
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <menu+0xbbc>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001db4:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <menu+0xbbc>)
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	4b6b      	ldr	r3, [pc, #428]	; (8001f68 <menu+0xbb8>)
 8001dba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <menu+0xbc0>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001dc2:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <menu+0xbc4>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	f040 8083 	bne.w	8001ed2 <menu+0xb22>
		if(dilSecim == 0) {
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <menu+0xba0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001dd4:	4a68      	ldr	r2, [pc, #416]	; (8001f78 <menu+0xbc8>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f006 f847 	bl	8007e6c <lcd_print>
 8001dde:	e008      	b.n	8001df2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001de0:	4b5b      	ldr	r3, [pc, #364]	; (8001f50 <menu+0xba0>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d104      	bne.n	8001df2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001de8:	4a64      	ldr	r2, [pc, #400]	; (8001f7c <menu+0xbcc>)
 8001dea:	2101      	movs	r1, #1
 8001dec:	2001      	movs	r0, #1
 8001dee:	f006 f83d 	bl	8007e6c <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <menu+0xbd0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d113      	bne.n	8001e22 <menu+0xa72>
			if(dilSecim == 0) {
 8001dfa:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <menu+0xba0>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001e02:	4a60      	ldr	r2, [pc, #384]	; (8001f84 <menu+0xbd4>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	2002      	movs	r0, #2
 8001e08:	f006 f830 	bl	8007e6c <lcd_print>
 8001e0c:	e012      	b.n	8001e34 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <menu+0xba0>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10e      	bne.n	8001e34 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001e16:	4a5c      	ldr	r2, [pc, #368]	; (8001f88 <menu+0xbd8>)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f006 f826 	bl	8007e6c <lcd_print>
 8001e20:	e008      	b.n	8001e34 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001e22:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <menu+0xbd0>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d104      	bne.n	8001e34 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001e2a:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <menu+0xbdc>)
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f006 f81c 	bl	8007e6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e34:	2102      	movs	r1, #2
 8001e36:	4848      	ldr	r0, [pc, #288]	; (8001f58 <menu+0xba8>)
 8001e38:	f007 fb3e 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d115      	bne.n	8001e6e <menu+0xabe>
 8001e42:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <menu+0xbac>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	f083 0301 	eor.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e50:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <menu+0xbd0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <menu+0xbd0>)
 8001e5a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e5c:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <menu+0xbd0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d902      	bls.n	8001e6a <menu+0xaba>
				emniyetCercevesi = 0;
 8001e64:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <menu+0xbd0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e6a:	f002 fe9f 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e6e:	2104      	movs	r1, #4
 8001e70:	4839      	ldr	r0, [pc, #228]	; (8001f58 <menu+0xba8>)
 8001e72:	f007 fb21 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d115      	bne.n	8001ea8 <menu+0xaf8>
 8001e7c:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <menu+0xbac>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f083 0301 	eor.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00e      	beq.n	8001ea8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <menu+0xbd0>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <menu+0xbd0>)
 8001e94:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <menu+0xbd0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <menu+0xbd0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ea4:	f002 fe82 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001ea8:	2108      	movs	r1, #8
 8001eaa:	482b      	ldr	r0, [pc, #172]	; (8001f58 <menu+0xba8>)
 8001eac:	f007 fb04 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <menu+0xb22>
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <menu+0xbac>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <menu+0xbd0>)
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <menu+0xbb8>)
 8001eca:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <menu+0xbc0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <menu+0xbc4>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	f040 80ba 	bne.w	8002050 <menu+0xca0>
		if(dilSecim == 0) {
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <menu+0xba0>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <menu+0xbe0>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f005 ffbf 	bl	8007e6c <lcd_print>
 8001eee:	e008      	b.n	8001f02 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <menu+0xba0>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d104      	bne.n	8001f02 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001ef8:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <menu+0xbe4>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	2001      	movs	r0, #1
 8001efe:	f005 ffb5 	bl	8007e6c <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <menu+0xbe8>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d113      	bne.n	8001f32 <menu+0xb82>
			if(dilSecim == 0) {
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <menu+0xba0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001f12:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <menu+0xbd4>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	2002      	movs	r0, #2
 8001f18:	f005 ffa8 	bl	8007e6c <lcd_print>
 8001f1c:	e049      	b.n	8001fb2 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <menu+0xba0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d145      	bne.n	8001fb2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <menu+0xbd8>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f005 ff9e 	bl	8007e6c <lcd_print>
 8001f30:	e03f      	b.n	8001fb2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <menu+0xbe8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d13b      	bne.n	8001fb2 <menu+0xc02>
			if(dilSecim == 0) {
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <menu+0xba0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d12e      	bne.n	8001fa0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <menu+0xbec>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	2002      	movs	r0, #2
 8001f48:	f005 ff90 	bl	8007e6c <lcd_print>
 8001f4c:	e031      	b.n	8001fb2 <menu+0xc02>
 8001f4e:	bf00      	nop
 8001f50:	20000245 	.word	0x20000245
 8001f54:	0800d424 	.word	0x0800d424
 8001f58:	40010800 	.word	0x40010800
 8001f5c:	20000253 	.word	0x20000253
 8001f60:	20000233 	.word	0x20000233
 8001f64:	20000225 	.word	0x20000225
 8001f68:	20000128 	.word	0x20000128
 8001f6c:	2000022a 	.word	0x2000022a
 8001f70:	20000250 	.word	0x20000250
 8001f74:	20000224 	.word	0x20000224
 8001f78:	0800d434 	.word	0x0800d434
 8001f7c:	0800d448 	.word	0x0800d448
 8001f80:	20000228 	.word	0x20000228
 8001f84:	0800d45c 	.word	0x0800d45c
 8001f88:	0800d470 	.word	0x0800d470
 8001f8c:	0800d484 	.word	0x0800d484
 8001f90:	0800d494 	.word	0x0800d494
 8001f94:	0800d4a8 	.word	0x0800d4a8
 8001f98:	20000229 	.word	0x20000229
 8001f9c:	0800d4bc 	.word	0x0800d4bc
			} else if(dilSecim == 1) {
 8001fa0:	4b92      	ldr	r3, [pc, #584]	; (80021ec <menu+0xe3c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d104      	bne.n	8001fb2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001fa8:	4a91      	ldr	r2, [pc, #580]	; (80021f0 <menu+0xe40>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	2002      	movs	r0, #2
 8001fae:	f005 ff5d 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	488f      	ldr	r0, [pc, #572]	; (80021f4 <menu+0xe44>)
 8001fb6:	f007 fa7f 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d115      	bne.n	8001fec <menu+0xc3c>
 8001fc0:	4b8d      	ldr	r3, [pc, #564]	; (80021f8 <menu+0xe48>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00e      	beq.n	8001fec <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <menu+0xe4c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b89      	ldr	r3, [pc, #548]	; (80021fc <menu+0xe4c>)
 8001fd8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001fda:	4b88      	ldr	r3, [pc, #544]	; (80021fc <menu+0xe4c>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d902      	bls.n	8001fe8 <menu+0xc38>
				yavaslamaLimit = 0;
 8001fe2:	4b86      	ldr	r3, [pc, #536]	; (80021fc <menu+0xe4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fe8:	f002 fde0 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fec:	2104      	movs	r1, #4
 8001fee:	4881      	ldr	r0, [pc, #516]	; (80021f4 <menu+0xe44>)
 8001ff0:	f007 fa62 	bl	80094b8 <HAL_GPIO_ReadPin>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d115      	bne.n	8002026 <menu+0xc76>
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	; (80021f8 <menu+0xe48>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002008:	4b7c      	ldr	r3, [pc, #496]	; (80021fc <menu+0xe4c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b7a      	ldr	r3, [pc, #488]	; (80021fc <menu+0xe4c>)
 8002012:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002014:	4b79      	ldr	r3, [pc, #484]	; (80021fc <menu+0xe4c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800201c:	4b77      	ldr	r3, [pc, #476]	; (80021fc <menu+0xe4c>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002022:	f002 fdc3 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002026:	2108      	movs	r1, #8
 8002028:	4872      	ldr	r0, [pc, #456]	; (80021f4 <menu+0xe44>)
 800202a:	f007 fa45 	bl	80094b8 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10d      	bne.n	8002050 <menu+0xca0>
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <menu+0xe48>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002042:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <menu+0xe4c>)
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b6e      	ldr	r3, [pc, #440]	; (8002200 <menu+0xe50>)
 8002048:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <menu+0xe54>)
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002050:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <menu+0xe58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b05      	cmp	r3, #5
 8002056:	f040 80b9 	bne.w	80021cc <menu+0xe1c>
		if(dilSecim == 0) {
 800205a:	4b64      	ldr	r3, [pc, #400]	; (80021ec <menu+0xe3c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002062:	4a6a      	ldr	r2, [pc, #424]	; (800220c <menu+0xe5c>)
 8002064:	2101      	movs	r1, #1
 8002066:	2001      	movs	r0, #1
 8002068:	f005 ff00 	bl	8007e6c <lcd_print>
 800206c:	e008      	b.n	8002080 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800206e:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <menu+0xe3c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d104      	bne.n	8002080 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002076:	4a66      	ldr	r2, [pc, #408]	; (8002210 <menu+0xe60>)
 8002078:	2101      	movs	r1, #1
 800207a:	2001      	movs	r0, #1
 800207c:	f005 fef6 	bl	8007e6c <lcd_print>
		}

		if(altLimit == 0) {
 8002080:	4b64      	ldr	r3, [pc, #400]	; (8002214 <menu+0xe64>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d113      	bne.n	80020b0 <menu+0xd00>
			if(dilSecim == 0) {
 8002088:	4b58      	ldr	r3, [pc, #352]	; (80021ec <menu+0xe3c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002090:	4a61      	ldr	r2, [pc, #388]	; (8002218 <menu+0xe68>)
 8002092:	2101      	movs	r1, #1
 8002094:	2002      	movs	r0, #2
 8002096:	f005 fee9 	bl	8007e6c <lcd_print>
 800209a:	e020      	b.n	80020de <menu+0xd2e>
			} else if(dilSecim == 1) {
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <menu+0xe3c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d11c      	bne.n	80020de <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80020a4:	4a5d      	ldr	r2, [pc, #372]	; (800221c <menu+0xe6c>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	2002      	movs	r0, #2
 80020aa:	f005 fedf 	bl	8007e6c <lcd_print>
 80020ae:	e016      	b.n	80020de <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80020b0:	4b58      	ldr	r3, [pc, #352]	; (8002214 <menu+0xe64>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d112      	bne.n	80020de <menu+0xd2e>
			if(dilSecim == 0){
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <menu+0xe3c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80020c0:	4a57      	ldr	r2, [pc, #348]	; (8002220 <menu+0xe70>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	2002      	movs	r0, #2
 80020c6:	f005 fed1 	bl	8007e6c <lcd_print>
 80020ca:	e008      	b.n	80020de <menu+0xd2e>
			} else if(dilSecim == 1){
 80020cc:	4b47      	ldr	r3, [pc, #284]	; (80021ec <menu+0xe3c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d104      	bne.n	80020de <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80020d4:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <menu+0xe40>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	2002      	movs	r0, #2
 80020da:	f005 fec7 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80020de:	2102      	movs	r1, #2
 80020e0:	4844      	ldr	r0, [pc, #272]	; (80021f4 <menu+0xe44>)
 80020e2:	f007 f9e9 	bl	80094b8 <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d119      	bne.n	8002120 <menu+0xd70>
 80020ec:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <menu+0xe48>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f083 0301 	eor.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <menu+0xd70>
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <menu+0xe74>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <menu+0xd70>
			altLimit = altLimit + 1;
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <menu+0xe64>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <menu+0xe64>)
 800210c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <menu+0xe64>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d902      	bls.n	800211c <menu+0xd6c>
				altLimit = 0;
 8002116:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <menu+0xe64>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800211c:	f002 fd46 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002120:	2104      	movs	r1, #4
 8002122:	4834      	ldr	r0, [pc, #208]	; (80021f4 <menu+0xe44>)
 8002124:	f007 f9c8 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d119      	bne.n	8002162 <menu+0xdb2>
 800212e:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <menu+0xe48>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f083 0301 	eor.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d012      	beq.n	8002162 <menu+0xdb2>
 800213c:	4b39      	ldr	r3, [pc, #228]	; (8002224 <menu+0xe74>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10e      	bne.n	8002162 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <menu+0xe64>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	3b01      	subs	r3, #1
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <menu+0xe64>)
 800214e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <menu+0xe64>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <menu+0xdae>
		   		altLimit = 1;
 8002158:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <menu+0xe64>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800215e:	f002 fd25 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002162:	2108      	movs	r1, #8
 8002164:	4823      	ldr	r0, [pc, #140]	; (80021f4 <menu+0xe44>)
 8002166:	f007 f9a7 	bl	80094b8 <HAL_GPIO_ReadPin>
 800216a:	4603      	mov	r3, r0
 800216c:	2b01      	cmp	r3, #1
 800216e:	d12d      	bne.n	80021cc <menu+0xe1c>
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <menu+0xe48>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f083 0301 	eor.w	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d026      	beq.n	80021cc <menu+0xe1c>
			eepromData[5] = altLimit;
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <menu+0xe64>)
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <menu+0xe50>)
 8002184:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <menu+0xe64>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d110      	bne.n	80021b0 <menu+0xe00>
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <menu+0xe78>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <menu+0xdee>
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <menu+0xe78>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d108      	bne.n	80021b0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <menu+0xe78>)
 80021a0:	2203      	movs	r2, #3
 80021a2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <menu+0xe78>)
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <menu+0xe50>)
 80021aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80021ae:	e00a      	b.n	80021c6 <menu+0xe16>
			} else if(altLimit == 0) {
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <menu+0xe64>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <menu+0xe16>
				platformSilindirTipi = 0;
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <menu+0xe7c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <menu+0xe7c>)
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <menu+0xe50>)
 80021c4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <menu+0xe54>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <menu+0xe58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b06      	cmp	r3, #6
 80021d2:	f040 80b6 	bne.w	8002342 <menu+0xf92>
		if(dilSecim == 0) {
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <menu+0xe3c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d12a      	bne.n	8002234 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80021de:	4a14      	ldr	r2, [pc, #80]	; (8002230 <menu+0xe80>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2001      	movs	r0, #1
 80021e4:	f005 fe42 	bl	8007e6c <lcd_print>
 80021e8:	e02d      	b.n	8002246 <menu+0xe96>
 80021ea:	bf00      	nop
 80021ec:	20000245 	.word	0x20000245
 80021f0:	0800d4d0 	.word	0x0800d4d0
 80021f4:	40010800 	.word	0x40010800
 80021f8:	20000253 	.word	0x20000253
 80021fc:	20000229 	.word	0x20000229
 8002200:	20000128 	.word	0x20000128
 8002204:	20000250 	.word	0x20000250
 8002208:	20000224 	.word	0x20000224
 800220c:	0800d4e4 	.word	0x0800d4e4
 8002210:	0800d4f8 	.word	0x0800d4f8
 8002214:	2000022a 	.word	0x2000022a
 8002218:	0800d45c 	.word	0x0800d45c
 800221c:	0800d470 	.word	0x0800d470
 8002220:	0800d4bc 	.word	0x0800d4bc
 8002224:	20000225 	.word	0x20000225
 8002228:	20000231 	.word	0x20000231
 800222c:	20000237 	.word	0x20000237
 8002230:	0800d50c 	.word	0x0800d50c
		} else if(dilSecim == 1){
 8002234:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <menu+0x1070>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d104      	bne.n	8002246 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800223c:	4a79      	ldr	r2, [pc, #484]	; (8002424 <menu+0x1074>)
 800223e:	2101      	movs	r1, #1
 8002240:	2001      	movs	r0, #1
 8002242:	f005 fe13 	bl	8007e6c <lcd_print>
		}
		if(basincSalteri == 0){
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <menu+0x1078>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d113      	bne.n	8002276 <menu+0xec6>
			if(dilSecim == 0) {
 800224e:	4b74      	ldr	r3, [pc, #464]	; (8002420 <menu+0x1070>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002256:	4a75      	ldr	r2, [pc, #468]	; (800242c <menu+0x107c>)
 8002258:	2101      	movs	r1, #1
 800225a:	2002      	movs	r0, #2
 800225c:	f005 fe06 	bl	8007e6c <lcd_print>
 8002260:	e020      	b.n	80022a4 <menu+0xef4>
			} else if(dilSecim == 1){
 8002262:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <menu+0x1070>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d11c      	bne.n	80022a4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800226a:	4a71      	ldr	r2, [pc, #452]	; (8002430 <menu+0x1080>)
 800226c:	2101      	movs	r1, #1
 800226e:	2002      	movs	r0, #2
 8002270:	f005 fdfc 	bl	8007e6c <lcd_print>
 8002274:	e016      	b.n	80022a4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <menu+0x1078>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d112      	bne.n	80022a4 <menu+0xef4>
			if(dilSecim == 0) {
 800227e:	4b68      	ldr	r3, [pc, #416]	; (8002420 <menu+0x1070>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002286:	4a6b      	ldr	r2, [pc, #428]	; (8002434 <menu+0x1084>)
 8002288:	2101      	movs	r1, #1
 800228a:	2002      	movs	r0, #2
 800228c:	f005 fdee 	bl	8007e6c <lcd_print>
 8002290:	e008      	b.n	80022a4 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <menu+0x1070>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d104      	bne.n	80022a4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800229a:	4a67      	ldr	r2, [pc, #412]	; (8002438 <menu+0x1088>)
 800229c:	2101      	movs	r1, #1
 800229e:	2002      	movs	r0, #2
 80022a0:	f005 fde4 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a4:	2102      	movs	r1, #2
 80022a6:	4865      	ldr	r0, [pc, #404]	; (800243c <menu+0x108c>)
 80022a8:	f007 f906 	bl	80094b8 <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d115      	bne.n	80022de <menu+0xf2e>
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <menu+0x1090>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80022c0:	4b59      	ldr	r3, [pc, #356]	; (8002428 <menu+0x1078>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b57      	ldr	r3, [pc, #348]	; (8002428 <menu+0x1078>)
 80022ca:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80022cc:	4b56      	ldr	r3, [pc, #344]	; (8002428 <menu+0x1078>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d902      	bls.n	80022da <menu+0xf2a>
				basincSalteri = 0;
 80022d4:	4b54      	ldr	r3, [pc, #336]	; (8002428 <menu+0x1078>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022da:	f002 fc67 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022de:	2104      	movs	r1, #4
 80022e0:	4856      	ldr	r0, [pc, #344]	; (800243c <menu+0x108c>)
 80022e2:	f007 f8e9 	bl	80094b8 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d115      	bne.n	8002318 <menu+0xf68>
 80022ec:	4b54      	ldr	r3, [pc, #336]	; (8002440 <menu+0x1090>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00e      	beq.n	8002318 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80022fa:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <menu+0x1078>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	3b01      	subs	r3, #1
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <menu+0x1078>)
 8002304:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002306:	4b48      	ldr	r3, [pc, #288]	; (8002428 <menu+0x1078>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <menu+0xf64>
		   		basincSalteri = 1;
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <menu+0x1078>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002314:	f002 fc4a 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002318:	2108      	movs	r1, #8
 800231a:	4848      	ldr	r0, [pc, #288]	; (800243c <menu+0x108c>)
 800231c:	f007 f8cc 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002320:	4603      	mov	r3, r0
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10d      	bne.n	8002342 <menu+0xf92>
 8002326:	4b46      	ldr	r3, [pc, #280]	; (8002440 <menu+0x1090>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	f083 0301 	eor.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <menu+0x1078>)
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <menu+0x1094>)
 800233a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <menu+0x1098>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <menu+0x109c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b07      	cmp	r3, #7
 8002348:	f040 80f5 	bne.w	8002536 <menu+0x1186>
		if(dilSecim == 0) {
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <menu+0x1070>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002354:	4a3e      	ldr	r2, [pc, #248]	; (8002450 <menu+0x10a0>)
 8002356:	2101      	movs	r1, #1
 8002358:	2001      	movs	r0, #1
 800235a:	f005 fd87 	bl	8007e6c <lcd_print>
 800235e:	e008      	b.n	8002372 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002360:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <menu+0x1070>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d104      	bne.n	8002372 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002368:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <menu+0x10a4>)
 800236a:	2101      	movs	r1, #1
 800236c:	2001      	movs	r0, #1
 800236e:	f005 fd7d 	bl	8007e6c <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <menu+0x10a8>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d113      	bne.n	80023a2 <menu+0xff2>
			if(dilSecim == 0) {
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <menu+0x1070>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002382:	4a2a      	ldr	r2, [pc, #168]	; (800242c <menu+0x107c>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f005 fd70 	bl	8007e6c <lcd_print>
 800238c:	e079      	b.n	8002482 <menu+0x10d2>
			} else if(dilSecim == 1){
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <menu+0x1070>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d175      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002396:	4a26      	ldr	r2, [pc, #152]	; (8002430 <menu+0x1080>)
 8002398:	2101      	movs	r1, #1
 800239a:	2002      	movs	r0, #2
 800239c:	f005 fd66 	bl	8007e6c <lcd_print>
 80023a0:	e06f      	b.n	8002482 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80023a2:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <menu+0x10a8>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d113      	bne.n	80023d2 <menu+0x1022>
			if(dilSecim == 0) {
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <menu+0x1070>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80023b2:	4a2a      	ldr	r2, [pc, #168]	; (800245c <menu+0x10ac>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	2002      	movs	r0, #2
 80023b8:	f005 fd58 	bl	8007e6c <lcd_print>
 80023bc:	e061      	b.n	8002482 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <menu+0x1070>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d15d      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80023c6:	4a26      	ldr	r2, [pc, #152]	; (8002460 <menu+0x10b0>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	2002      	movs	r0, #2
 80023cc:	f005 fd4e 	bl	8007e6c <lcd_print>
 80023d0:	e057      	b.n	8002482 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <menu+0x10a8>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d113      	bne.n	8002402 <menu+0x1052>
			if(dilSecim == 0) {
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <menu+0x1070>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80023e2:	4a20      	ldr	r2, [pc, #128]	; (8002464 <menu+0x10b4>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2002      	movs	r0, #2
 80023e8:	f005 fd40 	bl	8007e6c <lcd_print>
 80023ec:	e049      	b.n	8002482 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <menu+0x1070>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d145      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <menu+0x10b8>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	2002      	movs	r0, #2
 80023fc:	f005 fd36 	bl	8007e6c <lcd_print>
 8002400:	e03f      	b.n	8002482 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <menu+0x10a8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d13b      	bne.n	8002482 <menu+0x10d2>
			if(dilSecim == 0) {
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <menu+0x1070>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d12e      	bne.n	8002470 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <menu+0x10bc>)
 8002414:	2101      	movs	r1, #1
 8002416:	2002      	movs	r0, #2
 8002418:	f005 fd28 	bl	8007e6c <lcd_print>
 800241c:	e031      	b.n	8002482 <menu+0x10d2>
 800241e:	bf00      	nop
 8002420:	20000245 	.word	0x20000245
 8002424:	0800d51c 	.word	0x0800d51c
 8002428:	2000022b 	.word	0x2000022b
 800242c:	0800d45c 	.word	0x0800d45c
 8002430:	0800d470 	.word	0x0800d470
 8002434:	0800d4bc 	.word	0x0800d4bc
 8002438:	0800d4d0 	.word	0x0800d4d0
 800243c:	40010800 	.word	0x40010800
 8002440:	20000253 	.word	0x20000253
 8002444:	20000128 	.word	0x20000128
 8002448:	20000250 	.word	0x20000250
 800244c:	20000224 	.word	0x20000224
 8002450:	0800d52c 	.word	0x0800d52c
 8002454:	0800d540 	.word	0x0800d540
 8002458:	2000022c 	.word	0x2000022c
 800245c:	0800d554 	.word	0x0800d554
 8002460:	0800d568 	.word	0x0800d568
 8002464:	0800d57c 	.word	0x0800d57c
 8002468:	0800d590 	.word	0x0800d590
 800246c:	0800d5a4 	.word	0x0800d5a4
			} else if(dilSecim == 1){
 8002470:	4b99      	ldr	r3, [pc, #612]	; (80026d8 <menu+0x1328>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d104      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002478:	4a98      	ldr	r2, [pc, #608]	; (80026dc <menu+0x132c>)
 800247a:	2101      	movs	r1, #1
 800247c:	2002      	movs	r0, #2
 800247e:	f005 fcf5 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002482:	2102      	movs	r1, #2
 8002484:	4896      	ldr	r0, [pc, #600]	; (80026e0 <menu+0x1330>)
 8002486:	f007 f817 	bl	80094b8 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d115      	bne.n	80024bc <menu+0x110c>
 8002490:	4b94      	ldr	r3, [pc, #592]	; (80026e4 <menu+0x1334>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	f083 0301 	eor.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00e      	beq.n	80024bc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800249e:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <menu+0x1338>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <menu+0x1338>)
 80024a8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80024aa:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <menu+0x1338>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d902      	bls.n	80024b8 <menu+0x1108>
				kapiSecimleri = 0;
 80024b2:	4b8d      	ldr	r3, [pc, #564]	; (80026e8 <menu+0x1338>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024b8:	f002 fb78 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024bc:	2104      	movs	r1, #4
 80024be:	4888      	ldr	r0, [pc, #544]	; (80026e0 <menu+0x1330>)
 80024c0:	f006 fffa 	bl	80094b8 <HAL_GPIO_ReadPin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d115      	bne.n	80024f6 <menu+0x1146>
 80024ca:	4b86      	ldr	r3, [pc, #536]	; (80026e4 <menu+0x1334>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80024d8:	4b83      	ldr	r3, [pc, #524]	; (80026e8 <menu+0x1338>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b81      	ldr	r3, [pc, #516]	; (80026e8 <menu+0x1338>)
 80024e2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80024e4:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <menu+0x1338>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d902      	bls.n	80024f2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <menu+0x1338>)
 80024ee:	2203      	movs	r2, #3
 80024f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024f2:	f002 fb5b 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f6:	2108      	movs	r1, #8
 80024f8:	4879      	ldr	r0, [pc, #484]	; (80026e0 <menu+0x1330>)
 80024fa:	f006 ffdd 	bl	80094b8 <HAL_GPIO_ReadPin>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d118      	bne.n	8002536 <menu+0x1186>
 8002504:	4b77      	ldr	r3, [pc, #476]	; (80026e4 <menu+0x1334>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d011      	beq.n	8002536 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002512:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <menu+0x1338>)
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b75      	ldr	r3, [pc, #468]	; (80026ec <menu+0x133c>)
 8002518:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800251a:	4b73      	ldr	r3, [pc, #460]	; (80026e8 <menu+0x1338>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <menu+0x1180>
				altLimit = 1;
 8002522:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <menu+0x1340>)
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002528:	4b71      	ldr	r3, [pc, #452]	; (80026f0 <menu+0x1340>)
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <menu+0x133c>)
 800252e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002530:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <menu+0x1344>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002536:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <menu+0x1348>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b08      	cmp	r3, #8
 800253c:	f040 8092 	bne.w	8002664 <menu+0x12b4>
		if(dilSecim == 0) {
 8002540:	4b65      	ldr	r3, [pc, #404]	; (80026d8 <menu+0x1328>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002548:	4a6c      	ldr	r2, [pc, #432]	; (80026fc <menu+0x134c>)
 800254a:	2101      	movs	r1, #1
 800254c:	2001      	movs	r0, #1
 800254e:	f005 fc8d 	bl	8007e6c <lcd_print>
 8002552:	e008      	b.n	8002566 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002554:	4b60      	ldr	r3, [pc, #384]	; (80026d8 <menu+0x1328>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d104      	bne.n	8002566 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800255c:	4a68      	ldr	r2, [pc, #416]	; (8002700 <menu+0x1350>)
 800255e:	2101      	movs	r1, #1
 8002560:	2001      	movs	r0, #1
 8002562:	f005 fc83 	bl	8007e6c <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <menu+0x1354>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d113      	bne.n	8002596 <menu+0x11e6>
			if(dilSecim == 0) {
 800256e:	4b5a      	ldr	r3, [pc, #360]	; (80026d8 <menu+0x1328>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002576:	4a64      	ldr	r2, [pc, #400]	; (8002708 <menu+0x1358>)
 8002578:	2101      	movs	r1, #1
 800257a:	2002      	movs	r0, #2
 800257c:	f005 fc76 	bl	8007e6c <lcd_print>
 8002580:	e020      	b.n	80025c4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002582:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <menu+0x1328>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d11c      	bne.n	80025c4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800258a:	4a60      	ldr	r2, [pc, #384]	; (800270c <menu+0x135c>)
 800258c:	2101      	movs	r1, #1
 800258e:	2002      	movs	r0, #2
 8002590:	f005 fc6c 	bl	8007e6c <lcd_print>
 8002594:	e016      	b.n	80025c4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002596:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <menu+0x1354>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d112      	bne.n	80025c4 <menu+0x1214>
			if(dilSecim == 0){
 800259e:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <menu+0x1328>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80025a6:	4a5a      	ldr	r2, [pc, #360]	; (8002710 <menu+0x1360>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	2002      	movs	r0, #2
 80025ac:	f005 fc5e 	bl	8007e6c <lcd_print>
 80025b0:	e008      	b.n	80025c4 <menu+0x1214>
			} else if(dilSecim == 1){
 80025b2:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <menu+0x1328>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d104      	bne.n	80025c4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80025ba:	4a56      	ldr	r2, [pc, #344]	; (8002714 <menu+0x1364>)
 80025bc:	2101      	movs	r1, #1
 80025be:	2002      	movs	r0, #2
 80025c0:	f005 fc54 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c4:	2102      	movs	r1, #2
 80025c6:	4846      	ldr	r0, [pc, #280]	; (80026e0 <menu+0x1330>)
 80025c8:	f006 ff76 	bl	80094b8 <HAL_GPIO_ReadPin>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d115      	bne.n	80025fe <menu+0x124e>
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <menu+0x1334>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80025e0:	4b48      	ldr	r3, [pc, #288]	; (8002704 <menu+0x1354>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b46      	ldr	r3, [pc, #280]	; (8002704 <menu+0x1354>)
 80025ea:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80025ec:	4b45      	ldr	r3, [pc, #276]	; (8002704 <menu+0x1354>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d902      	bls.n	80025fa <menu+0x124a>
				kapiAcTipi = 0;
 80025f4:	4b43      	ldr	r3, [pc, #268]	; (8002704 <menu+0x1354>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025fa:	f002 fad7 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fe:	2104      	movs	r1, #4
 8002600:	4837      	ldr	r0, [pc, #220]	; (80026e0 <menu+0x1330>)
 8002602:	f006 ff59 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	2b01      	cmp	r3, #1
 800260a:	d115      	bne.n	8002638 <menu+0x1288>
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <menu+0x1334>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <menu+0x1354>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	3b01      	subs	r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b38      	ldr	r3, [pc, #224]	; (8002704 <menu+0x1354>)
 8002624:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <menu+0x1354>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <menu+0x1284>
		   		kapiAcTipi = 1;
 800262e:	4b35      	ldr	r3, [pc, #212]	; (8002704 <menu+0x1354>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002634:	f002 faba 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002638:	2108      	movs	r1, #8
 800263a:	4829      	ldr	r0, [pc, #164]	; (80026e0 <menu+0x1330>)
 800263c:	f006 ff3c 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10e      	bne.n	8002664 <menu+0x12b4>
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <menu+0x1334>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <menu+0x1354>)
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <menu+0x133c>)
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <menu+0x1344>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <menu+0x1348>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b09      	cmp	r3, #9
 800266a:	f040 80b9 	bne.w	80027e0 <menu+0x1430>
		if(dilSecim == 0){
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <menu+0x1328>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002676:	4a28      	ldr	r2, [pc, #160]	; (8002718 <menu+0x1368>)
 8002678:	2101      	movs	r1, #1
 800267a:	2001      	movs	r0, #1
 800267c:	f005 fbf6 	bl	8007e6c <lcd_print>
 8002680:	e008      	b.n	8002694 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <menu+0x1328>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d104      	bne.n	8002694 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800268a:	4a24      	ldr	r2, [pc, #144]	; (800271c <menu+0x136c>)
 800268c:	2101      	movs	r1, #1
 800268e:	2001      	movs	r0, #1
 8002690:	f005 fbec 	bl	8007e6c <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <menu+0x1370>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <menu+0x1374>)
 800269e:	2101      	movs	r1, #1
 80026a0:	2002      	movs	r0, #2
 80026a2:	f005 fbe3 	bl	8007e6c <lcd_print>
 80026a6:	e04c      	b.n	8002742 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <menu+0x1370>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d13f      	bne.n	8002730 <menu+0x1380>
			if(dilSecim == 0){
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <menu+0x1328>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <menu+0x1378>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	2002      	movs	r0, #2
 80026be:	f005 fbd5 	bl	8007e6c <lcd_print>
 80026c2:	e03e      	b.n	8002742 <menu+0x1392>
			} else if(dilSecim == 1) {
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <menu+0x1328>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d13a      	bne.n	8002742 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <menu+0x137c>)
 80026ce:	2101      	movs	r1, #1
 80026d0:	2002      	movs	r0, #2
 80026d2:	f005 fbcb 	bl	8007e6c <lcd_print>
 80026d6:	e034      	b.n	8002742 <menu+0x1392>
 80026d8:	20000245 	.word	0x20000245
 80026dc:	0800d5b8 	.word	0x0800d5b8
 80026e0:	40010800 	.word	0x40010800
 80026e4:	20000253 	.word	0x20000253
 80026e8:	2000022c 	.word	0x2000022c
 80026ec:	20000128 	.word	0x20000128
 80026f0:	2000022a 	.word	0x2000022a
 80026f4:	20000250 	.word	0x20000250
 80026f8:	20000224 	.word	0x20000224
 80026fc:	0800d5cc 	.word	0x0800d5cc
 8002700:	0800d5e0 	.word	0x0800d5e0
 8002704:	20000230 	.word	0x20000230
 8002708:	0800d5f4 	.word	0x0800d5f4
 800270c:	0800d604 	.word	0x0800d604
 8002710:	0800d614 	.word	0x0800d614
 8002714:	0800d628 	.word	0x0800d628
 8002718:	0800d63c 	.word	0x0800d63c
 800271c:	0800d650 	.word	0x0800d650
 8002720:	2000022d 	.word	0x2000022d
 8002724:	0800d664 	.word	0x0800d664
 8002728:	0800d678 	.word	0x0800d678
 800272c:	0800d688 	.word	0x0800d688
			}
		} else if(kapi1Tip == 2) {
 8002730:	4b8a      	ldr	r3, [pc, #552]	; (800295c <menu+0x15ac>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d104      	bne.n	8002742 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002738:	4a89      	ldr	r2, [pc, #548]	; (8002960 <menu+0x15b0>)
 800273a:	2101      	movs	r1, #1
 800273c:	2002      	movs	r0, #2
 800273e:	f005 fb95 	bl	8007e6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002742:	2102      	movs	r1, #2
 8002744:	4887      	ldr	r0, [pc, #540]	; (8002964 <menu+0x15b4>)
 8002746:	f006 feb7 	bl	80094b8 <HAL_GPIO_ReadPin>
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d115      	bne.n	800277c <menu+0x13cc>
 8002750:	4b85      	ldr	r3, [pc, #532]	; (8002968 <menu+0x15b8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	f083 0301 	eor.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00e      	beq.n	800277c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800275e:	4b7f      	ldr	r3, [pc, #508]	; (800295c <menu+0x15ac>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b7d      	ldr	r3, [pc, #500]	; (800295c <menu+0x15ac>)
 8002768:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800276a:	4b7c      	ldr	r3, [pc, #496]	; (800295c <menu+0x15ac>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <menu+0x13c8>
				kapi1Tip = 0;
 8002772:	4b7a      	ldr	r3, [pc, #488]	; (800295c <menu+0x15ac>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002778:	f002 fa18 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800277c:	2104      	movs	r1, #4
 800277e:	4879      	ldr	r0, [pc, #484]	; (8002964 <menu+0x15b4>)
 8002780:	f006 fe9a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002784:	4603      	mov	r3, r0
 8002786:	2b01      	cmp	r3, #1
 8002788:	d115      	bne.n	80027b6 <menu+0x1406>
 800278a:	4b77      	ldr	r3, [pc, #476]	; (8002968 <menu+0x15b8>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	f083 0301 	eor.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002798:	4b70      	ldr	r3, [pc, #448]	; (800295c <menu+0x15ac>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	3b01      	subs	r3, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b6e      	ldr	r3, [pc, #440]	; (800295c <menu+0x15ac>)
 80027a2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80027a4:	4b6d      	ldr	r3, [pc, #436]	; (800295c <menu+0x15ac>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d902      	bls.n	80027b2 <menu+0x1402>
		   		kapi1Tip = 2;
 80027ac:	4b6b      	ldr	r3, [pc, #428]	; (800295c <menu+0x15ac>)
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027b2:	f002 f9fb 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b6:	2108      	movs	r1, #8
 80027b8:	486a      	ldr	r0, [pc, #424]	; (8002964 <menu+0x15b4>)
 80027ba:	f006 fe7d 	bl	80094b8 <HAL_GPIO_ReadPin>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10d      	bne.n	80027e0 <menu+0x1430>
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <menu+0x15b8>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f083 0301 	eor.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80027d2:	4b62      	ldr	r3, [pc, #392]	; (800295c <menu+0x15ac>)
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <menu+0x15bc>)
 80027d8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <menu+0x15c0>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <menu+0x15c4>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b0a      	cmp	r3, #10
 80027e6:	d17f      	bne.n	80028e8 <menu+0x1538>
		if(dilSecim == 0) {
 80027e8:	4b63      	ldr	r3, [pc, #396]	; (8002978 <menu+0x15c8>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80027f0:	4a62      	ldr	r2, [pc, #392]	; (800297c <menu+0x15cc>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	2001      	movs	r0, #1
 80027f6:	f005 fb39 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027fa:	4a61      	ldr	r2, [pc, #388]	; (8002980 <menu+0x15d0>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	2002      	movs	r0, #2
 8002800:	f005 fb34 	bl	8007e6c <lcd_print>
 8002804:	e00d      	b.n	8002822 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002806:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <menu+0x15c8>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d109      	bne.n	8002822 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800280e:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <menu+0x15d4>)
 8002810:	2101      	movs	r1, #1
 8002812:	2001      	movs	r0, #1
 8002814:	f005 fb2a 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002818:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <menu+0x15d8>)
 800281a:	2101      	movs	r1, #1
 800281c:	2002      	movs	r0, #2
 800281e:	f005 fb25 	bl	8007e6c <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002822:	4b5a      	ldr	r3, [pc, #360]	; (800298c <menu+0x15dc>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	220a      	movs	r2, #10
 8002828:	4959      	ldr	r1, [pc, #356]	; (8002990 <menu+0x15e0>)
 800282a:	4618      	mov	r0, r3
 800282c:	f009 fe70 	bl	800c510 <itoa>
		lcd_print(2,16,snum);
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <menu+0x15e0>)
 8002832:	2110      	movs	r1, #16
 8002834:	2002      	movs	r0, #2
 8002836:	f005 fb19 	bl	8007e6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800283a:	2102      	movs	r1, #2
 800283c:	4849      	ldr	r0, [pc, #292]	; (8002964 <menu+0x15b4>)
 800283e:	f006 fe3b 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002842:	4603      	mov	r3, r0
 8002844:	2b01      	cmp	r3, #1
 8002846:	d119      	bne.n	800287c <menu+0x14cc>
 8002848:	4b47      	ldr	r3, [pc, #284]	; (8002968 <menu+0x15b8>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <menu+0x14cc>
 8002856:	4b41      	ldr	r3, [pc, #260]	; (800295c <menu+0x15ac>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10e      	bne.n	800287c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800285e:	4b4b      	ldr	r3, [pc, #300]	; (800298c <menu+0x15dc>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <menu+0x15dc>)
 8002868:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800286a:	4b48      	ldr	r3, [pc, #288]	; (800298c <menu+0x15dc>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d902      	bls.n	8002878 <menu+0x14c8>
				kapi1AcSure = 0;
 8002872:	4b46      	ldr	r3, [pc, #280]	; (800298c <menu+0x15dc>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002878:	f002 f998 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800287c:	2104      	movs	r1, #4
 800287e:	4839      	ldr	r0, [pc, #228]	; (8002964 <menu+0x15b4>)
 8002880:	f006 fe1a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d119      	bne.n	80028be <menu+0x150e>
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <menu+0x15b8>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <menu+0x150e>
 8002898:	4b30      	ldr	r3, [pc, #192]	; (800295c <menu+0x15ac>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10e      	bne.n	80028be <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <menu+0x15dc>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b38      	ldr	r3, [pc, #224]	; (800298c <menu+0x15dc>)
 80028aa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <menu+0x15dc>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d902      	bls.n	80028ba <menu+0x150a>
		   		kapi1AcSure = 5;
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <menu+0x15dc>)
 80028b6:	2205      	movs	r2, #5
 80028b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028ba:	f002 f977 	bl	8004bac <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028be:	2108      	movs	r1, #8
 80028c0:	4828      	ldr	r0, [pc, #160]	; (8002964 <menu+0x15b4>)
 80028c2:	f006 fdf9 	bl	80094b8 <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10d      	bne.n	80028e8 <menu+0x1538>
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <menu+0x15b8>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <menu+0x15dc>)
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <menu+0x15bc>)
 80028e0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <menu+0x15c0>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80028e8:	4b22      	ldr	r3, [pc, #136]	; (8002974 <menu+0x15c4>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b0b      	cmp	r3, #11
 80028ee:	f040 80b5 	bne.w	8002a5c <menu+0x16ac>
		if(dilSecim == 0) {
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <menu+0x15c8>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <menu+0x15e4>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	2001      	movs	r0, #1
 8002900:	f005 fab4 	bl	8007e6c <lcd_print>
 8002904:	e008      	b.n	8002918 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <menu+0x15c8>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d104      	bne.n	8002918 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <menu+0x15e8>)
 8002910:	2101      	movs	r1, #1
 8002912:	2001      	movs	r0, #1
 8002914:	f005 faaa 	bl	8007e6c <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <menu+0x15ec>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002920:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <menu+0x15f0>)
 8002922:	2101      	movs	r1, #1
 8002924:	2002      	movs	r0, #2
 8002926:	f005 faa1 	bl	8007e6c <lcd_print>
 800292a:	e048      	b.n	80029be <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <menu+0x15ec>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d13b      	bne.n	80029ac <menu+0x15fc>
			if(dilSecim == 0) {
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <menu+0x15c8>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <menu+0x15f4>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f005 fa93 	bl	8007e6c <lcd_print>
 8002946:	e03a      	b.n	80029be <menu+0x160e>
			} else if(dilSecim == 1) {
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <menu+0x15c8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d136      	bne.n	80029be <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <menu+0x15f8>)
 8002952:	2101      	movs	r1, #1
 8002954:	2002      	movs	r0, #2
 8002956:	f005 fa89 	bl	8007e6c <lcd_print>
 800295a:	e030      	b.n	80029be <menu+0x160e>
 800295c:	2000022d 	.word	0x2000022d
 8002960:	0800d69c 	.word	0x0800d69c
 8002964:	40010800 	.word	0x40010800
 8002968:	20000253 	.word	0x20000253
 800296c:	20000128 	.word	0x20000128
 8002970:	20000250 	.word	0x20000250
 8002974:	20000224 	.word	0x20000224
 8002978:	20000245 	.word	0x20000245
 800297c:	0800d6ac 	.word	0x0800d6ac
 8002980:	0800d6c0 	.word	0x0800d6c0
 8002984:	0800d6d0 	.word	0x0800d6d0
 8002988:	0800d6e4 	.word	0x0800d6e4
 800298c:	2000023d 	.word	0x2000023d
 8002990:	20000198 	.word	0x20000198
 8002994:	0800d6f4 	.word	0x0800d6f4
 8002998:	0800d708 	.word	0x0800d708
 800299c:	2000022e 	.word	0x2000022e
 80029a0:	0800d664 	.word	0x0800d664
 80029a4:	0800d678 	.word	0x0800d678
 80029a8:	0800d688 	.word	0x0800d688
			}
		} else if(kapi2Tip == 2) {
 80029ac:	4b8a      	ldr	r3, [pc, #552]	; (8002bd8 <menu+0x1828>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d104      	bne.n	80029be <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80029b4:	4a89      	ldr	r2, [pc, #548]	; (8002bdc <menu+0x182c>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	2002      	movs	r0, #2
 80029ba:	f005 fa57 	bl	8007e6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029be:	2102      	movs	r1, #2
 80029c0:	4887      	ldr	r0, [pc, #540]	; (8002be0 <menu+0x1830>)
 80029c2:	f006 fd79 	bl	80094b8 <HAL_GPIO_ReadPin>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d115      	bne.n	80029f8 <menu+0x1648>
 80029cc:	4b85      	ldr	r3, [pc, #532]	; (8002be4 <menu+0x1834>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f083 0301 	eor.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00e      	beq.n	80029f8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80029da:	4b7f      	ldr	r3, [pc, #508]	; (8002bd8 <menu+0x1828>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b7d      	ldr	r3, [pc, #500]	; (8002bd8 <menu+0x1828>)
 80029e4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <menu+0x1828>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <menu+0x1644>
				kapi2Tip = 0;
 80029ee:	4b7a      	ldr	r3, [pc, #488]	; (8002bd8 <menu+0x1828>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f4:	f002 f8da 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f8:	2104      	movs	r1, #4
 80029fa:	4879      	ldr	r0, [pc, #484]	; (8002be0 <menu+0x1830>)
 80029fc:	f006 fd5c 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d115      	bne.n	8002a32 <menu+0x1682>
 8002a06:	4b77      	ldr	r3, [pc, #476]	; (8002be4 <menu+0x1834>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002a14:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <menu+0x1828>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <menu+0x1828>)
 8002a1e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002a20:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <menu+0x1828>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d902      	bls.n	8002a2e <menu+0x167e>
		   		kapi2Tip = 2;
 8002a28:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <menu+0x1828>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a2e:	f002 f8bd 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a32:	2108      	movs	r1, #8
 8002a34:	486a      	ldr	r0, [pc, #424]	; (8002be0 <menu+0x1830>)
 8002a36:	f006 fd3f 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d10d      	bne.n	8002a5c <menu+0x16ac>
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <menu+0x1834>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002a4e:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <menu+0x1828>)
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <menu+0x1838>)
 8002a54:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <menu+0x183c>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002a5c:	4b64      	ldr	r3, [pc, #400]	; (8002bf0 <menu+0x1840>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d17f      	bne.n	8002b64 <menu+0x17b4>
		if(dilSecim == 0) {
 8002a64:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <menu+0x1844>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002a6c:	4a62      	ldr	r2, [pc, #392]	; (8002bf8 <menu+0x1848>)
 8002a6e:	2101      	movs	r1, #1
 8002a70:	2001      	movs	r0, #1
 8002a72:	f005 f9fb 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a76:	4a61      	ldr	r2, [pc, #388]	; (8002bfc <menu+0x184c>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f005 f9f6 	bl	8007e6c <lcd_print>
 8002a80:	e00d      	b.n	8002a9e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002a82:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <menu+0x1844>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d109      	bne.n	8002a9e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002a8a:	4a5d      	ldr	r2, [pc, #372]	; (8002c00 <menu+0x1850>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f005 f9ec 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a94:	4a5b      	ldr	r2, [pc, #364]	; (8002c04 <menu+0x1854>)
 8002a96:	2101      	movs	r1, #1
 8002a98:	2002      	movs	r0, #2
 8002a9a:	f005 f9e7 	bl	8007e6c <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a9e:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <menu+0x1858>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	220a      	movs	r2, #10
 8002aa4:	4959      	ldr	r1, [pc, #356]	; (8002c0c <menu+0x185c>)
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f009 fd32 	bl	800c510 <itoa>
		lcd_print(2,16,snum);
 8002aac:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <menu+0x185c>)
 8002aae:	2110      	movs	r1, #16
 8002ab0:	2002      	movs	r0, #2
 8002ab2:	f005 f9db 	bl	8007e6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4849      	ldr	r0, [pc, #292]	; (8002be0 <menu+0x1830>)
 8002aba:	f006 fcfd 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d119      	bne.n	8002af8 <menu+0x1748>
 8002ac4:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <menu+0x1834>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d012      	beq.n	8002af8 <menu+0x1748>
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <menu+0x1828>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002ada:	4b4b      	ldr	r3, [pc, #300]	; (8002c08 <menu+0x1858>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b49      	ldr	r3, [pc, #292]	; (8002c08 <menu+0x1858>)
 8002ae4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002ae6:	4b48      	ldr	r3, [pc, #288]	; (8002c08 <menu+0x1858>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d902      	bls.n	8002af4 <menu+0x1744>
				kapi2AcSure = 0;
 8002aee:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <menu+0x1858>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002af4:	f002 f85a 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002af8:	2104      	movs	r1, #4
 8002afa:	4839      	ldr	r0, [pc, #228]	; (8002be0 <menu+0x1830>)
 8002afc:	f006 fcdc 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d119      	bne.n	8002b3a <menu+0x178a>
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <menu+0x1834>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <menu+0x178a>
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <menu+0x1828>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10e      	bne.n	8002b3a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002b1c:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <menu+0x1858>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <menu+0x1858>)
 8002b26:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002b28:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <menu+0x1858>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d902      	bls.n	8002b36 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <menu+0x1858>)
 8002b32:	2205      	movs	r2, #5
 8002b34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b36:	f002 f839 	bl	8004bac <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3a:	2108      	movs	r1, #8
 8002b3c:	4828      	ldr	r0, [pc, #160]	; (8002be0 <menu+0x1830>)
 8002b3e:	f006 fcbb 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10d      	bne.n	8002b64 <menu+0x17b4>
 8002b48:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <menu+0x1834>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f083 0301 	eor.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <menu+0x1858>)
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <menu+0x1838>)
 8002b5c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <menu+0x183c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <menu+0x1840>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b0d      	cmp	r3, #13
 8002b6a:	f040 80b5 	bne.w	8002cd8 <menu+0x1928>
		if(dilSecim == 0) {
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <menu+0x1844>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002b76:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <menu+0x1860>)
 8002b78:	2101      	movs	r1, #1
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f005 f976 	bl	8007e6c <lcd_print>
 8002b80:	e008      	b.n	8002b94 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <menu+0x1844>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d104      	bne.n	8002b94 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002b8a:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <menu+0x1864>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f005 f96c 	bl	8007e6c <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b94:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <menu+0x1868>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b9c:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <menu+0x186c>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f005 f963 	bl	8007e6c <lcd_print>
 8002ba6:	e048      	b.n	8002c3a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <menu+0x1868>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d13b      	bne.n	8002c28 <menu+0x1878>
			if(dilSecim == 0) {
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <menu+0x1844>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <menu+0x1870>)
 8002bba:	2101      	movs	r1, #1
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	f005 f955 	bl	8007e6c <lcd_print>
 8002bc2:	e03a      	b.n	8002c3a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <menu+0x1844>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d136      	bne.n	8002c3a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <menu+0x1874>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f005 f94b 	bl	8007e6c <lcd_print>
 8002bd6:	e030      	b.n	8002c3a <menu+0x188a>
 8002bd8:	2000022e 	.word	0x2000022e
 8002bdc:	0800d69c 	.word	0x0800d69c
 8002be0:	40010800 	.word	0x40010800
 8002be4:	20000253 	.word	0x20000253
 8002be8:	20000128 	.word	0x20000128
 8002bec:	20000250 	.word	0x20000250
 8002bf0:	20000224 	.word	0x20000224
 8002bf4:	20000245 	.word	0x20000245
 8002bf8:	0800d71c 	.word	0x0800d71c
 8002bfc:	0800d6c0 	.word	0x0800d6c0
 8002c00:	0800d730 	.word	0x0800d730
 8002c04:	0800d6e4 	.word	0x0800d6e4
 8002c08:	2000023e 	.word	0x2000023e
 8002c0c:	20000198 	.word	0x20000198
 8002c10:	0800d744 	.word	0x0800d744
 8002c14:	0800d758 	.word	0x0800d758
 8002c18:	2000022f 	.word	0x2000022f
 8002c1c:	0800d664 	.word	0x0800d664
 8002c20:	0800d678 	.word	0x0800d678
 8002c24:	0800d688 	.word	0x0800d688
			}
		} else if(kapitablaTip == 2) {
 8002c28:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <menu+0x19e8>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d104      	bne.n	8002c3a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002c30:	4a5a      	ldr	r2, [pc, #360]	; (8002d9c <menu+0x19ec>)
 8002c32:	2101      	movs	r1, #1
 8002c34:	2002      	movs	r0, #2
 8002c36:	f005 f919 	bl	8007e6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4858      	ldr	r0, [pc, #352]	; (8002da0 <menu+0x19f0>)
 8002c3e:	f006 fc3b 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d115      	bne.n	8002c74 <menu+0x18c4>
 8002c48:	4b56      	ldr	r3, [pc, #344]	; (8002da4 <menu+0x19f4>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f083 0301 	eor.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002c56:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <menu+0x19e8>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <menu+0x19e8>)
 8002c60:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002c62:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <menu+0x19e8>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <menu+0x18c0>
				kapitablaTip = 0;
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <menu+0x19e8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c70:	f001 ff9c 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c74:	2104      	movs	r1, #4
 8002c76:	484a      	ldr	r0, [pc, #296]	; (8002da0 <menu+0x19f0>)
 8002c78:	f006 fc1e 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d115      	bne.n	8002cae <menu+0x18fe>
 8002c82:	4b48      	ldr	r3, [pc, #288]	; (8002da4 <menu+0x19f4>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	f083 0301 	eor.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00e      	beq.n	8002cae <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c90:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <menu+0x19e8>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <menu+0x19e8>)
 8002c9a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c9c:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <menu+0x19e8>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d902      	bls.n	8002caa <menu+0x18fa>
		   		kapitablaTip = 2;
 8002ca4:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <menu+0x19e8>)
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002caa:	f001 ff7f 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cae:	2108      	movs	r1, #8
 8002cb0:	483b      	ldr	r0, [pc, #236]	; (8002da0 <menu+0x19f0>)
 8002cb2:	f006 fc01 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10d      	bne.n	8002cd8 <menu+0x1928>
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <menu+0x19f4>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	f083 0301 	eor.w	r3, r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002cca:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <menu+0x19e8>)
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <menu+0x19f8>)
 8002cd0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <menu+0x19fc>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <menu+0x1a00>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b0e      	cmp	r3, #14
 8002cde:	f040 80f2 	bne.w	8002ec6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <menu+0x1a04>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <menu+0x1a08>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f005 f8bc 	bl	8007e6c <lcd_print>
 8002cf4:	e008      	b.n	8002d08 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <menu+0x1a04>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d104      	bne.n	8002d08 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <menu+0x1a0c>)
 8002d00:	2101      	movs	r1, #1
 8002d02:	2001      	movs	r0, #1
 8002d04:	f005 f8b2 	bl	8007e6c <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <menu+0x1a10>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d113      	bne.n	8002d38 <menu+0x1988>
			if(dilSecim == 0){
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <menu+0x1a04>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002d18:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <menu+0x1a14>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f005 f8a5 	bl	8007e6c <lcd_print>
 8002d22:	e071      	b.n	8002e08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <menu+0x1a04>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d16d      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <menu+0x1a18>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	2002      	movs	r0, #2
 8002d32:	f005 f89b 	bl	8007e6c <lcd_print>
 8002d36:	e067      	b.n	8002e08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <menu+0x1a10>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d112      	bne.n	8002d66 <menu+0x19b6>
			if(dilSecim == 0){
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <menu+0x1a04>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002d48:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <menu+0x1a1c>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	f005 f88d 	bl	8007e6c <lcd_print>
			}
			if(dilSecim == 1){
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <menu+0x1a04>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d156      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <menu+0x1a20>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2002      	movs	r0, #2
 8002d60:	f005 f884 	bl	8007e6c <lcd_print>
 8002d64:	e050      	b.n	8002e08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <menu+0x1a10>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d136      	bne.n	8002ddc <menu+0x1a2c>
			if(dilSecim == 0){
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <menu+0x1a04>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <menu+0x1a24>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f005 f876 	bl	8007e6c <lcd_print>
 8002d80:	e042      	b.n	8002e08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <menu+0x1a04>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d13e      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <menu+0x1a28>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2002      	movs	r0, #2
 8002d90:	f005 f86c 	bl	8007e6c <lcd_print>
 8002d94:	e038      	b.n	8002e08 <menu+0x1a58>
 8002d96:	bf00      	nop
 8002d98:	2000022f 	.word	0x2000022f
 8002d9c:	0800d69c 	.word	0x0800d69c
 8002da0:	40010800 	.word	0x40010800
 8002da4:	20000253 	.word	0x20000253
 8002da8:	20000128 	.word	0x20000128
 8002dac:	20000250 	.word	0x20000250
 8002db0:	20000224 	.word	0x20000224
 8002db4:	20000245 	.word	0x20000245
 8002db8:	0800d76c 	.word	0x0800d76c
 8002dbc:	0800d780 	.word	0x0800d780
 8002dc0:	20000231 	.word	0x20000231
 8002dc4:	0800d794 	.word	0x0800d794
 8002dc8:	0800d7a4 	.word	0x0800d7a4
 8002dcc:	0800d7b4 	.word	0x0800d7b4
 8002dd0:	0800d7c4 	.word	0x0800d7c4
 8002dd4:	0800d7d4 	.word	0x0800d7d4
 8002dd8:	0800d7e8 	.word	0x0800d7e8
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ddc:	4b9b      	ldr	r3, [pc, #620]	; (800304c <menu+0x1c9c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d111      	bne.n	8002e08 <menu+0x1a58>
			if(dilSecim == 0) {
 8002de4:	4b9a      	ldr	r3, [pc, #616]	; (8003050 <menu+0x1ca0>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002dec:	4a99      	ldr	r2, [pc, #612]	; (8003054 <menu+0x1ca4>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	2002      	movs	r0, #2
 8002df2:	f005 f83b 	bl	8007e6c <lcd_print>
			}
			if(dilSecim == 1) {
 8002df6:	4b96      	ldr	r3, [pc, #600]	; (8003050 <menu+0x1ca0>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d104      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002dfe:	4a96      	ldr	r2, [pc, #600]	; (8003058 <menu+0x1ca8>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	2002      	movs	r0, #2
 8002e04:	f005 f832 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4894      	ldr	r0, [pc, #592]	; (800305c <menu+0x1cac>)
 8002e0c:	f006 fb54 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d115      	bne.n	8002e42 <menu+0x1a92>
 8002e16:	4b92      	ldr	r3, [pc, #584]	; (8003060 <menu+0x1cb0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f083 0301 	eor.w	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002e24:	4b89      	ldr	r3, [pc, #548]	; (800304c <menu+0x1c9c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b87      	ldr	r3, [pc, #540]	; (800304c <menu+0x1c9c>)
 8002e2e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002e30:	4b86      	ldr	r3, [pc, #536]	; (800304c <menu+0x1c9c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d902      	bls.n	8002e3e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002e38:	4b84      	ldr	r3, [pc, #528]	; (800304c <menu+0x1c9c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e3e:	f001 feb5 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e42:	2104      	movs	r1, #4
 8002e44:	4885      	ldr	r0, [pc, #532]	; (800305c <menu+0x1cac>)
 8002e46:	f006 fb37 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d115      	bne.n	8002e7c <menu+0x1acc>
 8002e50:	4b83      	ldr	r3, [pc, #524]	; (8003060 <menu+0x1cb0>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	f083 0301 	eor.w	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002e5e:	4b7b      	ldr	r3, [pc, #492]	; (800304c <menu+0x1c9c>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b79      	ldr	r3, [pc, #484]	; (800304c <menu+0x1c9c>)
 8002e68:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002e6a:	4b78      	ldr	r3, [pc, #480]	; (800304c <menu+0x1c9c>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d902      	bls.n	8002e78 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <menu+0x1c9c>)
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e78:	f001 fe98 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e7c:	2108      	movs	r1, #8
 8002e7e:	4877      	ldr	r0, [pc, #476]	; (800305c <menu+0x1cac>)
 8002e80:	f006 fb1a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d11d      	bne.n	8002ec6 <menu+0x1b16>
 8002e8a:	4b75      	ldr	r3, [pc, #468]	; (8003060 <menu+0x1cb0>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	f083 0301 	eor.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d016      	beq.n	8002ec6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e98:	4b6c      	ldr	r3, [pc, #432]	; (800304c <menu+0x1c9c>)
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	4b71      	ldr	r3, [pc, #452]	; (8003064 <menu+0x1cb4>)
 8002e9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002ea2:	4b6a      	ldr	r3, [pc, #424]	; (800304c <menu+0x1c9c>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <menu+0x1b02>
 8002eaa:	4b68      	ldr	r3, [pc, #416]	; (800304c <menu+0x1c9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d106      	bne.n	8002ec0 <menu+0x1b10>
				altLimit = 1;
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <menu+0x1cb8>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002eb8:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <menu+0x1cb8>)
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	4b69      	ldr	r3, [pc, #420]	; (8003064 <menu+0x1cb4>)
 8002ebe:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002ec0:	4b6a      	ldr	r3, [pc, #424]	; (800306c <menu+0x1cbc>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <menu+0x1cc0>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	d17f      	bne.n	8002fce <menu+0x1c1e>
		if(dilSecim == 0) {
 8002ece:	4b60      	ldr	r3, [pc, #384]	; (8003050 <menu+0x1ca0>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10a      	bne.n	8002eec <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002ed6:	4a67      	ldr	r2, [pc, #412]	; (8003074 <menu+0x1cc4>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2001      	movs	r0, #1
 8002edc:	f004 ffc6 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ee0:	4a65      	ldr	r2, [pc, #404]	; (8003078 <menu+0x1cc8>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	2002      	movs	r0, #2
 8002ee6:	f004 ffc1 	bl	8007e6c <lcd_print>
 8002eea:	e00d      	b.n	8002f08 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002eec:	4b58      	ldr	r3, [pc, #352]	; (8003050 <menu+0x1ca0>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d109      	bne.n	8002f08 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002ef4:	4a61      	ldr	r2, [pc, #388]	; (800307c <menu+0x1ccc>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f004 ffb7 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002efe:	4a60      	ldr	r2, [pc, #384]	; (8003080 <menu+0x1cd0>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	2002      	movs	r0, #2
 8002f04:	f004 ffb2 	bl	8007e6c <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002f08:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <menu+0x1cd4>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	495e      	ldr	r1, [pc, #376]	; (8003088 <menu+0x1cd8>)
 8002f10:	4618      	mov	r0, r3
 8002f12:	f009 fafd 	bl	800c510 <itoa>
		lcd_print(2,16,snum);
 8002f16:	4a5c      	ldr	r2, [pc, #368]	; (8003088 <menu+0x1cd8>)
 8002f18:	2110      	movs	r1, #16
 8002f1a:	2002      	movs	r0, #2
 8002f1c:	f004 ffa6 	bl	8007e6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f20:	2102      	movs	r1, #2
 8002f22:	484e      	ldr	r0, [pc, #312]	; (800305c <menu+0x1cac>)
 8002f24:	f006 fac8 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d119      	bne.n	8002f62 <menu+0x1bb2>
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <menu+0x1cb0>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <menu+0x1bb2>
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <menu+0x1cdc>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10e      	bne.n	8002f62 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002f44:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <menu+0x1cd4>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <menu+0x1cd4>)
 8002f4e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002f50:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <menu+0x1cd4>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d902      	bls.n	8002f5e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002f58:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <menu+0x1cd4>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f5e:	f001 fe25 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f62:	2104      	movs	r1, #4
 8002f64:	483d      	ldr	r0, [pc, #244]	; (800305c <menu+0x1cac>)
 8002f66:	f006 faa7 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d119      	bne.n	8002fa4 <menu+0x1bf4>
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <menu+0x1cb0>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	f083 0301 	eor.w	r3, r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d012      	beq.n	8002fa4 <menu+0x1bf4>
 8002f7e:	4b43      	ldr	r3, [pc, #268]	; (800308c <menu+0x1cdc>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10e      	bne.n	8002fa4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <menu+0x1cd4>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <menu+0x1cd4>)
 8002f90:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <menu+0x1cd4>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <menu+0x1cd4>)
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002fa0:	f001 fe04 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	482d      	ldr	r0, [pc, #180]	; (800305c <menu+0x1cac>)
 8002fa8:	f006 fa86 	bl	80094b8 <HAL_GPIO_ReadPin>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10d      	bne.n	8002fce <menu+0x1c1e>
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <menu+0x1cb0>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002fc0:	4b30      	ldr	r3, [pc, #192]	; (8003084 <menu+0x1cd4>)
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	4b27      	ldr	r3, [pc, #156]	; (8003064 <menu+0x1cb4>)
 8002fc6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <menu+0x1cbc>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <menu+0x1cc0>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	f040 80bc 	bne.w	8003150 <menu+0x1da0>
		if(dilSecim == 0) {
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <menu+0x1ca0>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002fe0:	4a2b      	ldr	r2, [pc, #172]	; (8003090 <menu+0x1ce0>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f004 ff41 	bl	8007e6c <lcd_print>
 8002fea:	e008      	b.n	8002ffe <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002fec:	4b18      	ldr	r3, [pc, #96]	; (8003050 <menu+0x1ca0>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d104      	bne.n	8002ffe <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <menu+0x1ce4>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f004 ff37 	bl	8007e6c <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <menu+0x1ce8>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d113      	bne.n	800302e <menu+0x1c7e>
			if(dilSecim == 0) {
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <menu+0x1ca0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800300e:	4a11      	ldr	r2, [pc, #68]	; (8003054 <menu+0x1ca4>)
 8003010:	2101      	movs	r1, #1
 8003012:	2002      	movs	r0, #2
 8003014:	f004 ff2a 	bl	8007e6c <lcd_print>
 8003018:	e04b      	b.n	80030b2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <menu+0x1ca0>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d147      	bne.n	80030b2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003022:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <menu+0x1ca8>)
 8003024:	2101      	movs	r1, #1
 8003026:	2002      	movs	r0, #2
 8003028:	f004 ff20 	bl	8007e6c <lcd_print>
 800302c:	e041      	b.n	80030b2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <menu+0x1ce8>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d13d      	bne.n	80030b2 <menu+0x1d02>
			if(dilSecim == 0) {
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <menu+0x1ca0>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d130      	bne.n	80030a0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <menu+0x1cec>)
 8003040:	2101      	movs	r1, #1
 8003042:	2002      	movs	r0, #2
 8003044:	f004 ff12 	bl	8007e6c <lcd_print>
 8003048:	e033      	b.n	80030b2 <menu+0x1d02>
 800304a:	bf00      	nop
 800304c:	20000231 	.word	0x20000231
 8003050:	20000245 	.word	0x20000245
 8003054:	0800d45c 	.word	0x0800d45c
 8003058:	0800d470 	.word	0x0800d470
 800305c:	40010800 	.word	0x40010800
 8003060:	20000253 	.word	0x20000253
 8003064:	20000128 	.word	0x20000128
 8003068:	2000022a 	.word	0x2000022a
 800306c:	20000250 	.word	0x20000250
 8003070:	20000224 	.word	0x20000224
 8003074:	0800d7fc 	.word	0x0800d7fc
 8003078:	0800d6c0 	.word	0x0800d6c0
 800307c:	0800d810 	.word	0x0800d810
 8003080:	0800d6e4 	.word	0x0800d6e4
 8003084:	2000023f 	.word	0x2000023f
 8003088:	20000198 	.word	0x20000198
 800308c:	2000022f 	.word	0x2000022f
 8003090:	0800d824 	.word	0x0800d824
 8003094:	0800d838 	.word	0x0800d838
 8003098:	20000232 	.word	0x20000232
 800309c:	0800d4bc 	.word	0x0800d4bc
			} else if(dilSecim == 1) {
 80030a0:	4b99      	ldr	r3, [pc, #612]	; (8003308 <menu+0x1f58>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d104      	bne.n	80030b2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80030a8:	4a98      	ldr	r2, [pc, #608]	; (800330c <menu+0x1f5c>)
 80030aa:	2101      	movs	r1, #1
 80030ac:	2002      	movs	r0, #2
 80030ae:	f004 fedd 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b2:	2102      	movs	r1, #2
 80030b4:	4896      	ldr	r0, [pc, #600]	; (8003310 <menu+0x1f60>)
 80030b6:	f006 f9ff 	bl	80094b8 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d115      	bne.n	80030ec <menu+0x1d3c>
 80030c0:	4b94      	ldr	r3, [pc, #592]	; (8003314 <menu+0x1f64>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80030ce:	4b92      	ldr	r3, [pc, #584]	; (8003318 <menu+0x1f68>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b90      	ldr	r3, [pc, #576]	; (8003318 <menu+0x1f68>)
 80030d8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80030da:	4b8f      	ldr	r3, [pc, #572]	; (8003318 <menu+0x1f68>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d902      	bls.n	80030e8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80030e2:	4b8d      	ldr	r3, [pc, #564]	; (8003318 <menu+0x1f68>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030e8:	f001 fd60 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ec:	2104      	movs	r1, #4
 80030ee:	4888      	ldr	r0, [pc, #544]	; (8003310 <menu+0x1f60>)
 80030f0:	f006 f9e2 	bl	80094b8 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d115      	bne.n	8003126 <menu+0x1d76>
 80030fa:	4b86      	ldr	r3, [pc, #536]	; (8003314 <menu+0x1f64>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003108:	4b83      	ldr	r3, [pc, #524]	; (8003318 <menu+0x1f68>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b81      	ldr	r3, [pc, #516]	; (8003318 <menu+0x1f68>)
 8003112:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003114:	4b80      	ldr	r3, [pc, #512]	; (8003318 <menu+0x1f68>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800311c:	4b7e      	ldr	r3, [pc, #504]	; (8003318 <menu+0x1f68>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003122:	f001 fd43 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003126:	2108      	movs	r1, #8
 8003128:	4879      	ldr	r0, [pc, #484]	; (8003310 <menu+0x1f60>)
 800312a:	f006 f9c5 	bl	80094b8 <HAL_GPIO_ReadPin>
 800312e:	4603      	mov	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10d      	bne.n	8003150 <menu+0x1da0>
 8003134:	4b77      	ldr	r3, [pc, #476]	; (8003314 <menu+0x1f64>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003142:	4b75      	ldr	r3, [pc, #468]	; (8003318 <menu+0x1f68>)
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	4b75      	ldr	r3, [pc, #468]	; (800331c <menu+0x1f6c>)
 8003148:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800314a:	4b75      	ldr	r3, [pc, #468]	; (8003320 <menu+0x1f70>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003150:	4b74      	ldr	r3, [pc, #464]	; (8003324 <menu+0x1f74>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b11      	cmp	r3, #17
 8003156:	f040 80c3 	bne.w	80032e0 <menu+0x1f30>
		if(dilSecim == 0) {
 800315a:	4b6b      	ldr	r3, [pc, #428]	; (8003308 <menu+0x1f58>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003162:	4a71      	ldr	r2, [pc, #452]	; (8003328 <menu+0x1f78>)
 8003164:	2101      	movs	r1, #1
 8003166:	2001      	movs	r0, #1
 8003168:	f004 fe80 	bl	8007e6c <lcd_print>
 800316c:	e008      	b.n	8003180 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800316e:	4b66      	ldr	r3, [pc, #408]	; (8003308 <menu+0x1f58>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d104      	bne.n	8003180 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003176:	4a6d      	ldr	r2, [pc, #436]	; (800332c <menu+0x1f7c>)
 8003178:	2101      	movs	r1, #1
 800317a:	2001      	movs	r0, #1
 800317c:	f004 fe76 	bl	8007e6c <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003180:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <menu+0x1f80>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d113      	bne.n	80031b0 <menu+0x1e00>
			if(dilSecim == 0){
 8003188:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <menu+0x1f58>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003190:	4a68      	ldr	r2, [pc, #416]	; (8003334 <menu+0x1f84>)
 8003192:	2101      	movs	r1, #1
 8003194:	2002      	movs	r0, #2
 8003196:	f004 fe69 	bl	8007e6c <lcd_print>
 800319a:	e038      	b.n	800320e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800319c:	4b5a      	ldr	r3, [pc, #360]	; (8003308 <menu+0x1f58>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d134      	bne.n	800320e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80031a4:	4a64      	ldr	r2, [pc, #400]	; (8003338 <menu+0x1f88>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2002      	movs	r0, #2
 80031aa:	f004 fe5f 	bl	8007e6c <lcd_print>
 80031ae:	e02e      	b.n	800320e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031b0:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <menu+0x1f80>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d113      	bne.n	80031e0 <menu+0x1e30>
			if(dilSecim == 0){
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <menu+0x1f58>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80031c0:	4a5e      	ldr	r2, [pc, #376]	; (800333c <menu+0x1f8c>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2002      	movs	r0, #2
 80031c6:	f004 fe51 	bl	8007e6c <lcd_print>
 80031ca:	e020      	b.n	800320e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031cc:	4b4e      	ldr	r3, [pc, #312]	; (8003308 <menu+0x1f58>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d11c      	bne.n	800320e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80031d4:	4a5a      	ldr	r2, [pc, #360]	; (8003340 <menu+0x1f90>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	2002      	movs	r0, #2
 80031da:	f004 fe47 	bl	8007e6c <lcd_print>
 80031de:	e016      	b.n	800320e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80031e0:	4b53      	ldr	r3, [pc, #332]	; (8003330 <menu+0x1f80>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d112      	bne.n	800320e <menu+0x1e5e>
			if(dilSecim == 0) {
 80031e8:	4b47      	ldr	r3, [pc, #284]	; (8003308 <menu+0x1f58>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80031f0:	4a54      	ldr	r2, [pc, #336]	; (8003344 <menu+0x1f94>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	2002      	movs	r0, #2
 80031f6:	f004 fe39 	bl	8007e6c <lcd_print>
 80031fa:	e008      	b.n	800320e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031fc:	4b42      	ldr	r3, [pc, #264]	; (8003308 <menu+0x1f58>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d104      	bne.n	800320e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003204:	4a50      	ldr	r2, [pc, #320]	; (8003348 <menu+0x1f98>)
 8003206:	2101      	movs	r1, #1
 8003208:	2002      	movs	r0, #2
 800320a:	f004 fe2f 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800320e:	2102      	movs	r1, #2
 8003210:	483f      	ldr	r0, [pc, #252]	; (8003310 <menu+0x1f60>)
 8003212:	f006 f951 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003216:	4603      	mov	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	d115      	bne.n	8003248 <menu+0x1e98>
 800321c:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <menu+0x1f64>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	f083 0301 	eor.w	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00e      	beq.n	8003248 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800322a:	4b41      	ldr	r3, [pc, #260]	; (8003330 <menu+0x1f80>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <menu+0x1f80>)
 8003234:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003236:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <menu+0x1f80>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800323e:	4b3c      	ldr	r3, [pc, #240]	; (8003330 <menu+0x1f80>)
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003244:	f001 fcb2 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003248:	2104      	movs	r1, #4
 800324a:	4831      	ldr	r0, [pc, #196]	; (8003310 <menu+0x1f60>)
 800324c:	f006 f934 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d115      	bne.n	8003282 <menu+0x1ed2>
 8003256:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <menu+0x1f64>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	f083 0301 	eor.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <menu+0x1f80>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	3b01      	subs	r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <menu+0x1f80>)
 800326e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003270:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <menu+0x1f80>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d902      	bls.n	800327e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <menu+0x1f80>)
 800327a:	2202      	movs	r2, #2
 800327c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800327e:	f001 fc95 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003282:	2108      	movs	r1, #8
 8003284:	4822      	ldr	r0, [pc, #136]	; (8003310 <menu+0x1f60>)
 8003286:	f006 f917 	bl	80094b8 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b01      	cmp	r3, #1
 800328e:	d127      	bne.n	80032e0 <menu+0x1f30>
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <menu+0x1f64>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d020      	beq.n	80032e0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <menu+0x1f80>)
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <menu+0x1f6c>)
 80032a4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <menu+0x1f80>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <menu+0x1f06>
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <menu+0x1f80>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d106      	bne.n	80032c4 <menu+0x1f14>
				calismaSekli = 0;
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <menu+0x1f9c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80032bc:	4b23      	ldr	r3, [pc, #140]	; (800334c <menu+0x1f9c>)
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <menu+0x1f6c>)
 80032c2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <menu+0x1f80>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <menu+0x1fa0>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <menu+0x1fa0>)
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <menu+0x1f6c>)
 80032d8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <menu+0x1f70>)
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <menu+0x1f74>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b12      	cmp	r3, #18
 80032e6:	f040 80d5 	bne.w	8003494 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <menu+0x1f80>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d13c      	bne.n	800336c <menu+0x1fbc>
			if(dilSecim == 0) {
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <menu+0x1f58>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d12e      	bne.n	8003358 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80032fa:	4a16      	ldr	r2, [pc, #88]	; (8003354 <menu+0x1fa4>)
 80032fc:	2101      	movs	r1, #1
 80032fe:	2001      	movs	r0, #1
 8003300:	f004 fdb4 	bl	8007e6c <lcd_print>
 8003304:	e048      	b.n	8003398 <menu+0x1fe8>
 8003306:	bf00      	nop
 8003308:	20000245 	.word	0x20000245
 800330c:	0800d4d0 	.word	0x0800d4d0
 8003310:	40010800 	.word	0x40010800
 8003314:	20000253 	.word	0x20000253
 8003318:	20000232 	.word	0x20000232
 800331c:	20000128 	.word	0x20000128
 8003320:	20000250 	.word	0x20000250
 8003324:	20000224 	.word	0x20000224
 8003328:	0800d84c 	.word	0x0800d84c
 800332c:	0800d860 	.word	0x0800d860
 8003330:	20000233 	.word	0x20000233
 8003334:	0800d874 	.word	0x0800d874
 8003338:	0800d884 	.word	0x0800d884
 800333c:	0800d894 	.word	0x0800d894
 8003340:	0800d8a4 	.word	0x0800d8a4
 8003344:	0800d45c 	.word	0x0800d45c
 8003348:	0800d470 	.word	0x0800d470
 800334c:	20000225 	.word	0x20000225
 8003350:	20000236 	.word	0x20000236
 8003354:	0800d8b4 	.word	0x0800d8b4
			} else if(dilSecim == 1) {
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <menu+0x2198>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d11b      	bne.n	8003398 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003360:	4a7a      	ldr	r2, [pc, #488]	; (800354c <menu+0x219c>)
 8003362:	2101      	movs	r1, #1
 8003364:	2001      	movs	r0, #1
 8003366:	f004 fd81 	bl	8007e6c <lcd_print>
 800336a:	e015      	b.n	8003398 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800336c:	4b78      	ldr	r3, [pc, #480]	; (8003550 <menu+0x21a0>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d111      	bne.n	8003398 <menu+0x1fe8>
			if(dilSecim == 0){
 8003374:	4b74      	ldr	r3, [pc, #464]	; (8003548 <menu+0x2198>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800337c:	4a75      	ldr	r2, [pc, #468]	; (8003554 <menu+0x21a4>)
 800337e:	2101      	movs	r1, #1
 8003380:	2001      	movs	r0, #1
 8003382:	f004 fd73 	bl	8007e6c <lcd_print>
			}
			if(dilSecim == 1){
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <menu+0x2198>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d104      	bne.n	8003398 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800338e:	4a72      	ldr	r2, [pc, #456]	; (8003558 <menu+0x21a8>)
 8003390:	2101      	movs	r1, #1
 8003392:	2001      	movs	r0, #1
 8003394:	f004 fd6a 	bl	8007e6c <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003398:	4b70      	ldr	r3, [pc, #448]	; (800355c <menu+0x21ac>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d113      	bne.n	80033c8 <menu+0x2018>
			if(dilSecim == 0) {
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <menu+0x2198>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80033a8:	4a6d      	ldr	r2, [pc, #436]	; (8003560 <menu+0x21b0>)
 80033aa:	2101      	movs	r1, #1
 80033ac:	2002      	movs	r0, #2
 80033ae:	f004 fd5d 	bl	8007e6c <lcd_print>
 80033b2:	e020      	b.n	80033f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80033b4:	4b64      	ldr	r3, [pc, #400]	; (8003548 <menu+0x2198>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d11c      	bne.n	80033f6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80033bc:	4a69      	ldr	r2, [pc, #420]	; (8003564 <menu+0x21b4>)
 80033be:	2101      	movs	r1, #1
 80033c0:	2002      	movs	r0, #2
 80033c2:	f004 fd53 	bl	8007e6c <lcd_print>
 80033c6:	e016      	b.n	80033f6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80033c8:	4b64      	ldr	r3, [pc, #400]	; (800355c <menu+0x21ac>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d112      	bne.n	80033f6 <menu+0x2046>
			if(dilSecim == 0){
 80033d0:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <menu+0x2198>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80033d8:	4a63      	ldr	r2, [pc, #396]	; (8003568 <menu+0x21b8>)
 80033da:	2101      	movs	r1, #1
 80033dc:	2002      	movs	r0, #2
 80033de:	f004 fd45 	bl	8007e6c <lcd_print>
 80033e2:	e008      	b.n	80033f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80033e4:	4b58      	ldr	r3, [pc, #352]	; (8003548 <menu+0x2198>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d104      	bne.n	80033f6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80033ec:	4a5f      	ldr	r2, [pc, #380]	; (800356c <menu+0x21bc>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	2002      	movs	r0, #2
 80033f2:	f004 fd3b 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f6:	2102      	movs	r1, #2
 80033f8:	485d      	ldr	r0, [pc, #372]	; (8003570 <menu+0x21c0>)
 80033fa:	f006 f85d 	bl	80094b8 <HAL_GPIO_ReadPin>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b01      	cmp	r3, #1
 8003402:	d115      	bne.n	8003430 <menu+0x2080>
 8003404:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <menu+0x21c4>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	f083 0301 	eor.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00e      	beq.n	8003430 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003412:	4b52      	ldr	r3, [pc, #328]	; (800355c <menu+0x21ac>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <menu+0x21ac>)
 800341c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800341e:	4b4f      	ldr	r3, [pc, #316]	; (800355c <menu+0x21ac>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d902      	bls.n	800342c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003426:	4b4d      	ldr	r3, [pc, #308]	; (800355c <menu+0x21ac>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800342c:	f001 fbbe 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003430:	2104      	movs	r1, #4
 8003432:	484f      	ldr	r0, [pc, #316]	; (8003570 <menu+0x21c0>)
 8003434:	f006 f840 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d115      	bne.n	800346a <menu+0x20ba>
 800343e:	4b4d      	ldr	r3, [pc, #308]	; (8003574 <menu+0x21c4>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	f083 0301 	eor.w	r3, r3, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00e      	beq.n	800346a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <menu+0x21ac>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	b2da      	uxtb	r2, r3
 8003454:	4b41      	ldr	r3, [pc, #260]	; (800355c <menu+0x21ac>)
 8003456:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <menu+0x21ac>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003460:	4b3e      	ldr	r3, [pc, #248]	; (800355c <menu+0x21ac>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003466:	f001 fba1 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800346a:	2108      	movs	r1, #8
 800346c:	4840      	ldr	r0, [pc, #256]	; (8003570 <menu+0x21c0>)
 800346e:	f006 f823 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10d      	bne.n	8003494 <menu+0x20e4>
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <menu+0x21c4>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f083 0301 	eor.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003486:	4b35      	ldr	r3, [pc, #212]	; (800355c <menu+0x21ac>)
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <menu+0x21c8>)
 800348c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <menu+0x21cc>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <menu+0x21d0>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b13      	cmp	r3, #19
 800349a:	f040 80d5 	bne.w	8003648 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <menu+0x21a0>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d113      	bne.n	80034ce <menu+0x211e>
			if(dilSecim == 0) {
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <menu+0x2198>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80034ae:	4a35      	ldr	r2, [pc, #212]	; (8003584 <menu+0x21d4>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	2001      	movs	r0, #1
 80034b4:	f004 fcda 	bl	8007e6c <lcd_print>
 80034b8:	e01f      	b.n	80034fa <menu+0x214a>
			} else if(dilSecim == 1) {
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <menu+0x2198>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d11b      	bne.n	80034fa <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <menu+0x21d8>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	2001      	movs	r0, #1
 80034c8:	f004 fcd0 	bl	8007e6c <lcd_print>
 80034cc:	e015      	b.n	80034fa <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <menu+0x21a0>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d111      	bne.n	80034fa <menu+0x214a>
			if(dilSecim == 0) {
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <menu+0x2198>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <menu+0x21dc>)
 80034e0:	2101      	movs	r1, #1
 80034e2:	2001      	movs	r0, #1
 80034e4:	f004 fcc2 	bl	8007e6c <lcd_print>
			}
			if(dilSecim == 1) {
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <menu+0x2198>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d104      	bne.n	80034fa <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80034f0:	4a27      	ldr	r2, [pc, #156]	; (8003590 <menu+0x21e0>)
 80034f2:	2101      	movs	r1, #1
 80034f4:	2001      	movs	r0, #1
 80034f6:	f004 fcb9 	bl	8007e6c <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <menu+0x21e4>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d113      	bne.n	800352a <menu+0x217a>
			if(dilSecim == 0) {
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <menu+0x2198>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <menu+0x21b0>)
 800350c:	2101      	movs	r1, #1
 800350e:	2002      	movs	r0, #2
 8003510:	f004 fcac 	bl	8007e6c <lcd_print>
 8003514:	e049      	b.n	80035aa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <menu+0x2198>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d145      	bne.n	80035aa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <menu+0x21b4>)
 8003520:	2101      	movs	r1, #1
 8003522:	2002      	movs	r0, #2
 8003524:	f004 fca2 	bl	8007e6c <lcd_print>
 8003528:	e03f      	b.n	80035aa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <menu+0x21e4>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d13b      	bne.n	80035aa <menu+0x21fa>
			if(dilSecim == 0) {
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <menu+0x2198>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d12e      	bne.n	8003598 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <menu+0x21b8>)
 800353c:	2101      	movs	r1, #1
 800353e:	2002      	movs	r0, #2
 8003540:	f004 fc94 	bl	8007e6c <lcd_print>
 8003544:	e031      	b.n	80035aa <menu+0x21fa>
 8003546:	bf00      	nop
 8003548:	20000245 	.word	0x20000245
 800354c:	0800d8c8 	.word	0x0800d8c8
 8003550:	20000233 	.word	0x20000233
 8003554:	0800d8d8 	.word	0x0800d8d8
 8003558:	0800d8ec 	.word	0x0800d8ec
 800355c:	20000234 	.word	0x20000234
 8003560:	0800d45c 	.word	0x0800d45c
 8003564:	0800d470 	.word	0x0800d470
 8003568:	0800d4bc 	.word	0x0800d4bc
 800356c:	0800d4d0 	.word	0x0800d4d0
 8003570:	40010800 	.word	0x40010800
 8003574:	20000253 	.word	0x20000253
 8003578:	20000128 	.word	0x20000128
 800357c:	20000250 	.word	0x20000250
 8003580:	20000224 	.word	0x20000224
 8003584:	0800d900 	.word	0x0800d900
 8003588:	0800d914 	.word	0x0800d914
 800358c:	0800d928 	.word	0x0800d928
 8003590:	0800d93c 	.word	0x0800d93c
 8003594:	20000235 	.word	0x20000235
			} else if(dilSecim == 1) {
 8003598:	4b90      	ldr	r3, [pc, #576]	; (80037dc <menu+0x242c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d104      	bne.n	80035aa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80035a0:	4a8f      	ldr	r2, [pc, #572]	; (80037e0 <menu+0x2430>)
 80035a2:	2101      	movs	r1, #1
 80035a4:	2002      	movs	r0, #2
 80035a6:	f004 fc61 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035aa:	2102      	movs	r1, #2
 80035ac:	488d      	ldr	r0, [pc, #564]	; (80037e4 <menu+0x2434>)
 80035ae:	f005 ff83 	bl	80094b8 <HAL_GPIO_ReadPin>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d115      	bne.n	80035e4 <menu+0x2234>
 80035b8:	4b8b      	ldr	r3, [pc, #556]	; (80037e8 <menu+0x2438>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	f083 0301 	eor.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <menu+0x243c>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b87      	ldr	r3, [pc, #540]	; (80037ec <menu+0x243c>)
 80035d0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80035d2:	4b86      	ldr	r3, [pc, #536]	; (80037ec <menu+0x243c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d902      	bls.n	80035e0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80035da:	4b84      	ldr	r3, [pc, #528]	; (80037ec <menu+0x243c>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035e0:	f001 fae4 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e4:	2104      	movs	r1, #4
 80035e6:	487f      	ldr	r0, [pc, #508]	; (80037e4 <menu+0x2434>)
 80035e8:	f005 ff66 	bl	80094b8 <HAL_GPIO_ReadPin>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d115      	bne.n	800361e <menu+0x226e>
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <menu+0x2438>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	f083 0301 	eor.w	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003600:	4b7a      	ldr	r3, [pc, #488]	; (80037ec <menu+0x243c>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	3b01      	subs	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b78      	ldr	r3, [pc, #480]	; (80037ec <menu+0x243c>)
 800360a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800360c:	4b77      	ldr	r3, [pc, #476]	; (80037ec <menu+0x243c>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003614:	4b75      	ldr	r3, [pc, #468]	; (80037ec <menu+0x243c>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800361a:	f001 fac7 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800361e:	2108      	movs	r1, #8
 8003620:	4870      	ldr	r0, [pc, #448]	; (80037e4 <menu+0x2434>)
 8003622:	f005 ff49 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003626:	4603      	mov	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10d      	bne.n	8003648 <menu+0x2298>
 800362c:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <menu+0x2438>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d006      	beq.n	8003648 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800363a:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <menu+0x243c>)
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <menu+0x2440>)
 8003640:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003642:	4b6c      	ldr	r3, [pc, #432]	; (80037f4 <menu+0x2444>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003648:	4b6b      	ldr	r3, [pc, #428]	; (80037f8 <menu+0x2448>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b14      	cmp	r3, #20
 800364e:	f040 80b5 	bne.w	80037bc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003652:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <menu+0x244c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d113      	bne.n	8003682 <menu+0x22d2>
			if(dilSecim == 0) {
 800365a:	4b60      	ldr	r3, [pc, #384]	; (80037dc <menu+0x242c>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003662:	4a67      	ldr	r2, [pc, #412]	; (8003800 <menu+0x2450>)
 8003664:	2101      	movs	r1, #1
 8003666:	2001      	movs	r0, #1
 8003668:	f004 fc00 	bl	8007e6c <lcd_print>
 800366c:	e020      	b.n	80036b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800366e:	4b5b      	ldr	r3, [pc, #364]	; (80037dc <menu+0x242c>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d11c      	bne.n	80036b0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003676:	4a63      	ldr	r2, [pc, #396]	; (8003804 <menu+0x2454>)
 8003678:	2101      	movs	r1, #1
 800367a:	2001      	movs	r0, #1
 800367c:	f004 fbf6 	bl	8007e6c <lcd_print>
 8003680:	e016      	b.n	80036b0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003682:	4b5e      	ldr	r3, [pc, #376]	; (80037fc <menu+0x244c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d112      	bne.n	80036b0 <menu+0x2300>
			if(dilSecim == 0) {
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <menu+0x242c>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003692:	4a5d      	ldr	r2, [pc, #372]	; (8003808 <menu+0x2458>)
 8003694:	2101      	movs	r1, #1
 8003696:	2001      	movs	r0, #1
 8003698:	f004 fbe8 	bl	8007e6c <lcd_print>
 800369c:	e008      	b.n	80036b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800369e:	4b4f      	ldr	r3, [pc, #316]	; (80037dc <menu+0x242c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d104      	bne.n	80036b0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80036a6:	4a59      	ldr	r2, [pc, #356]	; (800380c <menu+0x245c>)
 80036a8:	2101      	movs	r1, #1
 80036aa:	2001      	movs	r0, #1
 80036ac:	f004 fbde 	bl	8007e6c <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80036b0:	4b57      	ldr	r3, [pc, #348]	; (8003810 <menu+0x2460>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d113      	bne.n	80036e0 <menu+0x2330>
			if(dilSecim == 0) {
 80036b8:	4b48      	ldr	r3, [pc, #288]	; (80037dc <menu+0x242c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80036c0:	4a54      	ldr	r2, [pc, #336]	; (8003814 <menu+0x2464>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	2002      	movs	r0, #2
 80036c6:	f004 fbd1 	bl	8007e6c <lcd_print>
 80036ca:	e020      	b.n	800370e <menu+0x235e>
			} else if(dilSecim == 1) {
 80036cc:	4b43      	ldr	r3, [pc, #268]	; (80037dc <menu+0x242c>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d11c      	bne.n	800370e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80036d4:	4a50      	ldr	r2, [pc, #320]	; (8003818 <menu+0x2468>)
 80036d6:	2101      	movs	r1, #1
 80036d8:	2002      	movs	r0, #2
 80036da:	f004 fbc7 	bl	8007e6c <lcd_print>
 80036de:	e016      	b.n	800370e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80036e0:	4b4b      	ldr	r3, [pc, #300]	; (8003810 <menu+0x2460>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d112      	bne.n	800370e <menu+0x235e>
			if(dilSecim == 0) {
 80036e8:	4b3c      	ldr	r3, [pc, #240]	; (80037dc <menu+0x242c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80036f0:	4a4a      	ldr	r2, [pc, #296]	; (800381c <menu+0x246c>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	2002      	movs	r0, #2
 80036f6:	f004 fbb9 	bl	8007e6c <lcd_print>
 80036fa:	e008      	b.n	800370e <menu+0x235e>
			} else if(dilSecim == 1) {
 80036fc:	4b37      	ldr	r3, [pc, #220]	; (80037dc <menu+0x242c>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d104      	bne.n	800370e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003704:	4a46      	ldr	r2, [pc, #280]	; (8003820 <menu+0x2470>)
 8003706:	2101      	movs	r1, #1
 8003708:	2002      	movs	r0, #2
 800370a:	f004 fbaf 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800370e:	2102      	movs	r1, #2
 8003710:	4834      	ldr	r0, [pc, #208]	; (80037e4 <menu+0x2434>)
 8003712:	f005 fed1 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d119      	bne.n	8003750 <menu+0x23a0>
 800371c:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <menu+0x2438>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <menu+0x23a0>
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <menu+0x244c>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d10e      	bne.n	8003750 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <menu+0x2460>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	3301      	adds	r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4b35      	ldr	r3, [pc, #212]	; (8003810 <menu+0x2460>)
 800373c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800373e:	4b34      	ldr	r3, [pc, #208]	; (8003810 <menu+0x2460>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d902      	bls.n	800374c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003746:	4b32      	ldr	r3, [pc, #200]	; (8003810 <menu+0x2460>)
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800374c:	f001 fa2e 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003750:	2104      	movs	r1, #4
 8003752:	4824      	ldr	r0, [pc, #144]	; (80037e4 <menu+0x2434>)
 8003754:	f005 feb0 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d119      	bne.n	8003792 <menu+0x23e2>
 800375e:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <menu+0x2438>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	f083 0301 	eor.w	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <menu+0x23e2>
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <menu+0x244c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d10e      	bne.n	8003792 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <menu+0x2460>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	3b01      	subs	r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <menu+0x2460>)
 800377e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003780:	4b23      	ldr	r3, [pc, #140]	; (8003810 <menu+0x2460>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <menu+0x2460>)
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800378e:	f001 fa0d 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003792:	2108      	movs	r1, #8
 8003794:	4813      	ldr	r0, [pc, #76]	; (80037e4 <menu+0x2434>)
 8003796:	f005 fe8f 	bl	80094b8 <HAL_GPIO_ReadPin>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d10d      	bne.n	80037bc <menu+0x240c>
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <menu+0x2438>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <menu+0x2460>)
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <menu+0x2440>)
 80037b4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <menu+0x2444>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <menu+0x2448>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b15      	cmp	r3, #21
 80037c2:	f040 80c2 	bne.w	800394a <menu+0x259a>
		if(dilSecim == 0) {
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <menu+0x242c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d12c      	bne.n	8003828 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <menu+0x2474>)
 80037d0:	2101      	movs	r1, #1
 80037d2:	2001      	movs	r0, #1
 80037d4:	f004 fb4a 	bl	8007e6c <lcd_print>
 80037d8:	e02f      	b.n	800383a <menu+0x248a>
 80037da:	bf00      	nop
 80037dc:	20000245 	.word	0x20000245
 80037e0:	0800d4d0 	.word	0x0800d4d0
 80037e4:	40010800 	.word	0x40010800
 80037e8:	20000253 	.word	0x20000253
 80037ec:	20000235 	.word	0x20000235
 80037f0:	20000128 	.word	0x20000128
 80037f4:	20000250 	.word	0x20000250
 80037f8:	20000224 	.word	0x20000224
 80037fc:	20000233 	.word	0x20000233
 8003800:	0800d950 	.word	0x0800d950
 8003804:	0800d964 	.word	0x0800d964
 8003808:	0800d978 	.word	0x0800d978
 800380c:	0800d98c 	.word	0x0800d98c
 8003810:	20000236 	.word	0x20000236
 8003814:	0800d9a0 	.word	0x0800d9a0
 8003818:	0800d9b4 	.word	0x0800d9b4
 800381c:	0800d9c4 	.word	0x0800d9c4
 8003820:	0800d9d8 	.word	0x0800d9d8
 8003824:	0800d9e8 	.word	0x0800d9e8
		} else if(dilSecim == 1) {
 8003828:	4b9c      	ldr	r3, [pc, #624]	; (8003a9c <menu+0x26ec>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d104      	bne.n	800383a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003830:	4a9b      	ldr	r2, [pc, #620]	; (8003aa0 <menu+0x26f0>)
 8003832:	2101      	movs	r1, #1
 8003834:	2001      	movs	r0, #1
 8003836:	f004 fb19 	bl	8007e6c <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800383a:	4b9a      	ldr	r3, [pc, #616]	; (8003aa4 <menu+0x26f4>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d112      	bne.n	8003868 <menu+0x24b8>
			if(dilSecim == 0) {
 8003842:	4b96      	ldr	r3, [pc, #600]	; (8003a9c <menu+0x26ec>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800384a:	4a97      	ldr	r2, [pc, #604]	; (8003aa8 <menu+0x26f8>)
 800384c:	2101      	movs	r1, #1
 800384e:	2002      	movs	r0, #2
 8003850:	f004 fb0c 	bl	8007e6c <lcd_print>
			}
			if(dilSecim == 1) {
 8003854:	4b91      	ldr	r3, [pc, #580]	; (8003a9c <menu+0x26ec>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d11c      	bne.n	8003896 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800385c:	4a93      	ldr	r2, [pc, #588]	; (8003aac <menu+0x26fc>)
 800385e:	2101      	movs	r1, #1
 8003860:	2002      	movs	r0, #2
 8003862:	f004 fb03 	bl	8007e6c <lcd_print>
 8003866:	e016      	b.n	8003896 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003868:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <menu+0x26f4>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d112      	bne.n	8003896 <menu+0x24e6>
			if(dilSecim == 0) {
 8003870:	4b8a      	ldr	r3, [pc, #552]	; (8003a9c <menu+0x26ec>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003878:	4a8d      	ldr	r2, [pc, #564]	; (8003ab0 <menu+0x2700>)
 800387a:	2101      	movs	r1, #1
 800387c:	2002      	movs	r0, #2
 800387e:	f004 faf5 	bl	8007e6c <lcd_print>
 8003882:	e008      	b.n	8003896 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003884:	4b85      	ldr	r3, [pc, #532]	; (8003a9c <menu+0x26ec>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d104      	bne.n	8003896 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800388c:	4a89      	ldr	r2, [pc, #548]	; (8003ab4 <menu+0x2704>)
 800388e:	2101      	movs	r1, #1
 8003890:	2002      	movs	r0, #2
 8003892:	f004 faeb 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003896:	2102      	movs	r1, #2
 8003898:	4887      	ldr	r0, [pc, #540]	; (8003ab8 <menu+0x2708>)
 800389a:	f005 fe0d 	bl	80094b8 <HAL_GPIO_ReadPin>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d115      	bne.n	80038d0 <menu+0x2520>
 80038a4:	4b85      	ldr	r3, [pc, #532]	; (8003abc <menu+0x270c>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	f083 0301 	eor.w	r3, r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00e      	beq.n	80038d0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80038b2:	4b7c      	ldr	r3, [pc, #496]	; (8003aa4 <menu+0x26f4>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4b7a      	ldr	r3, [pc, #488]	; (8003aa4 <menu+0x26f4>)
 80038bc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80038be:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <menu+0x26f4>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d902      	bls.n	80038cc <menu+0x251c>
				platformSilindirTipi = 0;
 80038c6:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <menu+0x26f4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038cc:	f001 f96e 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d0:	2104      	movs	r1, #4
 80038d2:	4879      	ldr	r0, [pc, #484]	; (8003ab8 <menu+0x2708>)
 80038d4:	f005 fdf0 	bl	80094b8 <HAL_GPIO_ReadPin>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d115      	bne.n	800390a <menu+0x255a>
 80038de:	4b77      	ldr	r3, [pc, #476]	; (8003abc <menu+0x270c>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f083 0301 	eor.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00e      	beq.n	800390a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80038ec:	4b6d      	ldr	r3, [pc, #436]	; (8003aa4 <menu+0x26f4>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b6b      	ldr	r3, [pc, #428]	; (8003aa4 <menu+0x26f4>)
 80038f6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <menu+0x26f4>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <menu+0x26f4>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003906:	f001 f951 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800390a:	2108      	movs	r1, #8
 800390c:	486a      	ldr	r0, [pc, #424]	; (8003ab8 <menu+0x2708>)
 800390e:	f005 fdd3 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003912:	4603      	mov	r3, r0
 8003914:	2b01      	cmp	r3, #1
 8003916:	d118      	bne.n	800394a <menu+0x259a>
 8003918:	4b68      	ldr	r3, [pc, #416]	; (8003abc <menu+0x270c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	f083 0301 	eor.w	r3, r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d011      	beq.n	800394a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003926:	4b5f      	ldr	r3, [pc, #380]	; (8003aa4 <menu+0x26f4>)
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <menu+0x2710>)
 800392c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800392e:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <menu+0x26f4>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d106      	bne.n	8003944 <menu+0x2594>
				altLimit = 1;
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <menu+0x2714>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800393c:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <menu+0x2714>)
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	4b5f      	ldr	r3, [pc, #380]	; (8003ac0 <menu+0x2710>)
 8003942:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003944:	4b60      	ldr	r3, [pc, #384]	; (8003ac8 <menu+0x2718>)
 8003946:	2201      	movs	r2, #1
 8003948:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800394a:	4b60      	ldr	r3, [pc, #384]	; (8003acc <menu+0x271c>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b16      	cmp	r3, #22
 8003950:	f040 8081 	bne.w	8003a56 <menu+0x26a6>
		if(dilSecim == 0) {
 8003954:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <menu+0x26ec>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 800395c:	4a5c      	ldr	r2, [pc, #368]	; (8003ad0 <menu+0x2720>)
 800395e:	2101      	movs	r1, #1
 8003960:	2001      	movs	r0, #1
 8003962:	f004 fa83 	bl	8007e6c <lcd_print>
 8003966:	e008      	b.n	800397a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003968:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <menu+0x26ec>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d104      	bne.n	800397a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <menu+0x2724>)
 8003972:	2101      	movs	r1, #1
 8003974:	2001      	movs	r0, #1
 8003976:	f004 fa79 	bl	8007e6c <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800397a:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <menu+0x26ec>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003982:	4a55      	ldr	r2, [pc, #340]	; (8003ad8 <menu+0x2728>)
 8003984:	2101      	movs	r1, #1
 8003986:	2002      	movs	r0, #2
 8003988:	f004 fa70 	bl	8007e6c <lcd_print>
 800398c:	e008      	b.n	80039a0 <menu+0x25f0>
			} else if(dilSecim == 1){
 800398e:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <menu+0x26ec>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d104      	bne.n	80039a0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003996:	4a51      	ldr	r2, [pc, #324]	; (8003adc <menu+0x272c>)
 8003998:	2101      	movs	r1, #1
 800399a:	2002      	movs	r0, #2
 800399c:	f004 fa66 	bl	8007e6c <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <menu+0x2730>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	220a      	movs	r2, #10
 80039a6:	494f      	ldr	r1, [pc, #316]	; (8003ae4 <menu+0x2734>)
 80039a8:	4618      	mov	r0, r3
 80039aa:	f008 fdb1 	bl	800c510 <itoa>
		lcd_print(2,16,snum);
 80039ae:	4a4d      	ldr	r2, [pc, #308]	; (8003ae4 <menu+0x2734>)
 80039b0:	2110      	movs	r1, #16
 80039b2:	2002      	movs	r0, #2
 80039b4:	f004 fa5a 	bl	8007e6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039b8:	2102      	movs	r1, #2
 80039ba:	483f      	ldr	r0, [pc, #252]	; (8003ab8 <menu+0x2708>)
 80039bc:	f005 fd7c 	bl	80094b8 <HAL_GPIO_ReadPin>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d115      	bne.n	80039f2 <menu+0x2642>
 80039c6:	4b3d      	ldr	r3, [pc, #244]	; (8003abc <menu+0x270c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	f083 0301 	eor.w	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80039d4:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <menu+0x2730>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b40      	ldr	r3, [pc, #256]	; (8003ae0 <menu+0x2730>)
 80039de:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80039e0:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <menu+0x2730>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d902      	bls.n	80039ee <menu+0x263e>
				yukariValfTmr = 0;
 80039e8:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <menu+0x2730>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039ee:	f001 f8dd 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f2:	2104      	movs	r1, #4
 80039f4:	4830      	ldr	r0, [pc, #192]	; (8003ab8 <menu+0x2708>)
 80039f6:	f005 fd5f 	bl	80094b8 <HAL_GPIO_ReadPin>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d115      	bne.n	8003a2c <menu+0x267c>
 8003a00:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <menu+0x270c>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	f083 0301 	eor.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00e      	beq.n	8003a2c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <menu+0x2730>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <menu+0x2730>)
 8003a18:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003a1a:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <menu+0x2730>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <menu+0x2730>)
 8003a24:	2205      	movs	r2, #5
 8003a26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a28:	f001 f8c0 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a2c:	2108      	movs	r1, #8
 8003a2e:	4822      	ldr	r0, [pc, #136]	; (8003ab8 <menu+0x2708>)
 8003a30:	f005 fd42 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10d      	bne.n	8003a56 <menu+0x26a6>
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <menu+0x270c>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	f083 0301 	eor.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <menu+0x2730>)
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <menu+0x2710>)
 8003a4e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003a50:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <menu+0x2718>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <menu+0x271c>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b17      	cmp	r3, #23
 8003a5c:	f040 80ac 	bne.w	8003bb8 <menu+0x2808>
		if(dilSecim == 0) {
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <menu+0x26ec>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <menu+0x2738>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f004 f9fd 	bl	8007e6c <lcd_print>
 8003a72:	e008      	b.n	8003a86 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <menu+0x26ec>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d104      	bne.n	8003a86 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <menu+0x273c>)
 8003a7e:	2101      	movs	r1, #1
 8003a80:	2001      	movs	r0, #1
 8003a82:	f004 f9f3 	bl	8007e6c <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <menu+0x26ec>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d130      	bne.n	8003af0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <menu+0x2728>)
 8003a90:	2101      	movs	r1, #1
 8003a92:	2002      	movs	r0, #2
 8003a94:	f004 f9ea 	bl	8007e6c <lcd_print>
 8003a98:	e033      	b.n	8003b02 <menu+0x2752>
 8003a9a:	bf00      	nop
 8003a9c:	20000245 	.word	0x20000245
 8003aa0:	0800d9fc 	.word	0x0800d9fc
 8003aa4:	20000237 	.word	0x20000237
 8003aa8:	0800d9a0 	.word	0x0800d9a0
 8003aac:	0800d9b4 	.word	0x0800d9b4
 8003ab0:	0800d9c4 	.word	0x0800d9c4
 8003ab4:	0800d9d8 	.word	0x0800d9d8
 8003ab8:	40010800 	.word	0x40010800
 8003abc:	20000253 	.word	0x20000253
 8003ac0:	20000128 	.word	0x20000128
 8003ac4:	2000022a 	.word	0x2000022a
 8003ac8:	20000250 	.word	0x20000250
 8003acc:	20000224 	.word	0x20000224
 8003ad0:	0800da0c 	.word	0x0800da0c
 8003ad4:	0800da20 	.word	0x0800da20
 8003ad8:	0800d6c0 	.word	0x0800d6c0
 8003adc:	0800da34 	.word	0x0800da34
 8003ae0:	20000238 	.word	0x20000238
 8003ae4:	20000198 	.word	0x20000198
 8003ae8:	0800da44 	.word	0x0800da44
 8003aec:	0800da58 	.word	0x0800da58
			} else if(dilSecim == 1) {
 8003af0:	4b98      	ldr	r3, [pc, #608]	; (8003d54 <menu+0x29a4>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d104      	bne.n	8003b02 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003af8:	4a97      	ldr	r2, [pc, #604]	; (8003d58 <menu+0x29a8>)
 8003afa:	2101      	movs	r1, #1
 8003afc:	2002      	movs	r0, #2
 8003afe:	f004 f9b5 	bl	8007e6c <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003b02:	4b96      	ldr	r3, [pc, #600]	; (8003d5c <menu+0x29ac>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	220a      	movs	r2, #10
 8003b08:	4995      	ldr	r1, [pc, #596]	; (8003d60 <menu+0x29b0>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f008 fd00 	bl	800c510 <itoa>
		lcd_print(2,16,snum);
 8003b10:	4a93      	ldr	r2, [pc, #588]	; (8003d60 <menu+0x29b0>)
 8003b12:	2110      	movs	r1, #16
 8003b14:	2002      	movs	r0, #2
 8003b16:	f004 f9a9 	bl	8007e6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	4891      	ldr	r0, [pc, #580]	; (8003d64 <menu+0x29b4>)
 8003b1e:	f005 fccb 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d115      	bne.n	8003b54 <menu+0x27a4>
 8003b28:	4b8f      	ldr	r3, [pc, #572]	; (8003d68 <menu+0x29b8>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	f083 0301 	eor.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003b36:	4b89      	ldr	r3, [pc, #548]	; (8003d5c <menu+0x29ac>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b87      	ldr	r3, [pc, #540]	; (8003d5c <menu+0x29ac>)
 8003b40:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003b42:	4b86      	ldr	r3, [pc, #536]	; (8003d5c <menu+0x29ac>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d902      	bls.n	8003b50 <menu+0x27a0>
				asagiValfTmr = 0;
 8003b4a:	4b84      	ldr	r3, [pc, #528]	; (8003d5c <menu+0x29ac>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b50:	f001 f82c 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b54:	2104      	movs	r1, #4
 8003b56:	4883      	ldr	r0, [pc, #524]	; (8003d64 <menu+0x29b4>)
 8003b58:	f005 fcae 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d115      	bne.n	8003b8e <menu+0x27de>
 8003b62:	4b81      	ldr	r3, [pc, #516]	; (8003d68 <menu+0x29b8>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	f083 0301 	eor.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003b70:	4b7a      	ldr	r3, [pc, #488]	; (8003d5c <menu+0x29ac>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	4b78      	ldr	r3, [pc, #480]	; (8003d5c <menu+0x29ac>)
 8003b7a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003b7c:	4b77      	ldr	r3, [pc, #476]	; (8003d5c <menu+0x29ac>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d902      	bls.n	8003b8a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003b84:	4b75      	ldr	r3, [pc, #468]	; (8003d5c <menu+0x29ac>)
 8003b86:	2205      	movs	r2, #5
 8003b88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b8a:	f001 f80f 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b8e:	2108      	movs	r1, #8
 8003b90:	4874      	ldr	r0, [pc, #464]	; (8003d64 <menu+0x29b4>)
 8003b92:	f005 fc91 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10d      	bne.n	8003bb8 <menu+0x2808>
 8003b9c:	4b72      	ldr	r3, [pc, #456]	; (8003d68 <menu+0x29b8>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	f083 0301 	eor.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d006      	beq.n	8003bb8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003baa:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <menu+0x29ac>)
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <menu+0x29bc>)
 8003bb0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003bb2:	4b6f      	ldr	r3, [pc, #444]	; (8003d70 <menu+0x29c0>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003bb8:	4b6e      	ldr	r3, [pc, #440]	; (8003d74 <menu+0x29c4>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b18      	cmp	r3, #24
 8003bbe:	f040 809d 	bne.w	8003cfc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003bc2:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <menu+0x29c8>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d113      	bne.n	8003bf2 <menu+0x2842>
			if(dilSecim == 0) {
 8003bca:	4b62      	ldr	r3, [pc, #392]	; (8003d54 <menu+0x29a4>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d105      	bne.n	8003bde <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003bd2:	4a6a      	ldr	r2, [pc, #424]	; (8003d7c <menu+0x29cc>)
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f004 f948 	bl	8007e6c <lcd_print>
 8003bdc:	e020      	b.n	8003c20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003bde:	4b5d      	ldr	r3, [pc, #372]	; (8003d54 <menu+0x29a4>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d11c      	bne.n	8003c20 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003be6:	4a66      	ldr	r2, [pc, #408]	; (8003d80 <menu+0x29d0>)
 8003be8:	2101      	movs	r1, #1
 8003bea:	2001      	movs	r0, #1
 8003bec:	f004 f93e 	bl	8007e6c <lcd_print>
 8003bf0:	e016      	b.n	8003c20 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003bf2:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <menu+0x29c8>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d112      	bne.n	8003c20 <menu+0x2870>
			if(dilSecim == 0) {
 8003bfa:	4b56      	ldr	r3, [pc, #344]	; (8003d54 <menu+0x29a4>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d105      	bne.n	8003c0e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003c02:	4a60      	ldr	r2, [pc, #384]	; (8003d84 <menu+0x29d4>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	2001      	movs	r0, #1
 8003c08:	f004 f930 	bl	8007e6c <lcd_print>
 8003c0c:	e008      	b.n	8003c20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c0e:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <menu+0x29a4>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d104      	bne.n	8003c20 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003c16:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <menu+0x29d8>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f004 f926 	bl	8007e6c <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <menu+0x29a4>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c28:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <menu+0x29dc>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	f004 f91d 	bl	8007e6c <lcd_print>
 8003c32:	e008      	b.n	8003c46 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003c34:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <menu+0x29a4>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d104      	bne.n	8003c46 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003c3c:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <menu+0x29a8>)
 8003c3e:	2101      	movs	r1, #1
 8003c40:	2002      	movs	r0, #2
 8003c42:	f004 f913 	bl	8007e6c <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003c46:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <menu+0x29e0>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	4944      	ldr	r1, [pc, #272]	; (8003d60 <menu+0x29b0>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f008 fc5e 	bl	800c510 <itoa>
		lcd_print(2, 16, snum);
 8003c54:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <menu+0x29b0>)
 8003c56:	2110      	movs	r1, #16
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f004 f907 	bl	8007e6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4840      	ldr	r0, [pc, #256]	; (8003d64 <menu+0x29b4>)
 8003c62:	f005 fc29 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d115      	bne.n	8003c98 <menu+0x28e8>
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <menu+0x29b8>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	f083 0301 	eor.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003c7a:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <menu+0x29e0>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <menu+0x29e0>)
 8003c84:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003c86:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <menu+0x29e0>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d902      	bls.n	8003c94 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003c8e:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <menu+0x29e0>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c94:	f000 ff8a 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c98:	2104      	movs	r1, #4
 8003c9a:	4832      	ldr	r0, [pc, #200]	; (8003d64 <menu+0x29b4>)
 8003c9c:	f005 fc0c 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d115      	bne.n	8003cd2 <menu+0x2922>
 8003ca6:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <menu+0x29b8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	f083 0301 	eor.w	r3, r3, #1
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003cb4:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <menu+0x29e0>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <menu+0x29e0>)
 8003cbe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003cc0:	4b33      	ldr	r3, [pc, #204]	; (8003d90 <menu+0x29e0>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d902      	bls.n	8003cce <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003cc8:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <menu+0x29e0>)
 8003cca:	2205      	movs	r2, #5
 8003ccc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cce:	f000 ff6d 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd2:	2108      	movs	r1, #8
 8003cd4:	4823      	ldr	r0, [pc, #140]	; (8003d64 <menu+0x29b4>)
 8003cd6:	f005 fbef 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10d      	bne.n	8003cfc <menu+0x294c>
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <menu+0x29b8>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f083 0301 	eor.w	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d006      	beq.n	8003cfc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003cee:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <menu+0x29e0>)
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <menu+0x29bc>)
 8003cf4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <menu+0x29c0>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <menu+0x29c4>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b19      	cmp	r3, #25
 8003d02:	f040 80c4 	bne.w	8003e8e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <menu+0x29c8>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d113      	bne.n	8003d36 <menu+0x2986>
			if(dilSecim == 0) {
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <menu+0x29a4>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <menu+0x29e4>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f004 f8a6 	bl	8007e6c <lcd_print>
 8003d20:	e047      	b.n	8003db2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <menu+0x29a4>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d143      	bne.n	8003db2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <menu+0x29e8>)
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f004 f89c 	bl	8007e6c <lcd_print>
 8003d34:	e03d      	b.n	8003db2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <menu+0x29c8>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d139      	bne.n	8003db2 <menu+0x2a02>
			if(dilSecim == 0) {
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <menu+0x29a4>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12c      	bne.n	8003da0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <menu+0x29ec>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f004 f88e 	bl	8007e6c <lcd_print>
 8003d50:	e02f      	b.n	8003db2 <menu+0x2a02>
 8003d52:	bf00      	nop
 8003d54:	20000245 	.word	0x20000245
 8003d58:	0800da34 	.word	0x0800da34
 8003d5c:	20000239 	.word	0x20000239
 8003d60:	20000198 	.word	0x20000198
 8003d64:	40010800 	.word	0x40010800
 8003d68:	20000253 	.word	0x20000253
 8003d6c:	20000128 	.word	0x20000128
 8003d70:	20000250 	.word	0x20000250
 8003d74:	20000224 	.word	0x20000224
 8003d78:	20000233 	.word	0x20000233
 8003d7c:	0800da6c 	.word	0x0800da6c
 8003d80:	0800da80 	.word	0x0800da80
 8003d84:	0800da94 	.word	0x0800da94
 8003d88:	0800daa8 	.word	0x0800daa8
 8003d8c:	0800d6c0 	.word	0x0800d6c0
 8003d90:	2000023a 	.word	0x2000023a
 8003d94:	0800dabc 	.word	0x0800dabc
 8003d98:	0800dad0 	.word	0x0800dad0
 8003d9c:	0800dae4 	.word	0x0800dae4
			} else if(dilSecim == 1) {
 8003da0:	4b73      	ldr	r3, [pc, #460]	; (8003f70 <menu+0x2bc0>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d104      	bne.n	8003db2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003da8:	4a72      	ldr	r2, [pc, #456]	; (8003f74 <menu+0x2bc4>)
 8003daa:	2101      	movs	r1, #1
 8003dac:	2001      	movs	r0, #1
 8003dae:	f004 f85d 	bl	8007e6c <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003db2:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <menu+0x2bc0>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003dba:	4a6f      	ldr	r2, [pc, #444]	; (8003f78 <menu+0x2bc8>)
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f004 f854 	bl	8007e6c <lcd_print>
 8003dc4:	e008      	b.n	8003dd8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <menu+0x2bc0>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d104      	bne.n	8003dd8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003dce:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <menu+0x2bcc>)
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	2002      	movs	r0, #2
 8003dd4:	f004 f84a 	bl	8007e6c <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003dd8:	4b69      	ldr	r3, [pc, #420]	; (8003f80 <menu+0x2bd0>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	220a      	movs	r2, #10
 8003dde:	4969      	ldr	r1, [pc, #420]	; (8003f84 <menu+0x2bd4>)
 8003de0:	4618      	mov	r0, r3
 8003de2:	f008 fb95 	bl	800c510 <itoa>
		lcd_print(2,16,snum);
 8003de6:	4a67      	ldr	r2, [pc, #412]	; (8003f84 <menu+0x2bd4>)
 8003de8:	2110      	movs	r1, #16
 8003dea:	2002      	movs	r0, #2
 8003dec:	f004 f83e 	bl	8007e6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df0:	2102      	movs	r1, #2
 8003df2:	4865      	ldr	r0, [pc, #404]	; (8003f88 <menu+0x2bd8>)
 8003df4:	f005 fb60 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d115      	bne.n	8003e2a <menu+0x2a7a>
 8003dfe:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <menu+0x2bdc>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003e0c:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <menu+0x2bd0>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <menu+0x2bd0>)
 8003e16:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <menu+0x2bd0>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d902      	bls.n	8003e26 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003e20:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <menu+0x2bd0>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e26:	f000 fec1 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	4856      	ldr	r0, [pc, #344]	; (8003f88 <menu+0x2bd8>)
 8003e2e:	f005 fb43 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d115      	bne.n	8003e64 <menu+0x2ab4>
 8003e38:	4b54      	ldr	r3, [pc, #336]	; (8003f8c <menu+0x2bdc>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f083 0301 	eor.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00e      	beq.n	8003e64 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003e46:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <menu+0x2bd0>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <menu+0x2bd0>)
 8003e50:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003e52:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <menu+0x2bd0>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <menu+0x2bd0>)
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e60:	f000 fea4 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e64:	2108      	movs	r1, #8
 8003e66:	4848      	ldr	r0, [pc, #288]	; (8003f88 <menu+0x2bd8>)
 8003e68:	f005 fb26 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10d      	bne.n	8003e8e <menu+0x2ade>
 8003e72:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <menu+0x2bdc>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	f083 0301 	eor.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003e80:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <menu+0x2bd0>)
 8003e82:	781a      	ldrb	r2, [r3, #0]
 8003e84:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <menu+0x2be0>)
 8003e86:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <menu+0x2be4>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003e8e:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <menu+0x2be8>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b1a      	cmp	r3, #26
 8003e94:	f040 80ec 	bne.w	8004070 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e98:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <menu+0x2bc0>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003ea0:	4a3e      	ldr	r2, [pc, #248]	; (8003f9c <menu+0x2bec>)
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f003 ffe1 	bl	8007e6c <lcd_print>
 8003eaa:	e008      	b.n	8003ebe <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003eac:	4b30      	ldr	r3, [pc, #192]	; (8003f70 <menu+0x2bc0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d104      	bne.n	8003ebe <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003eb4:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <menu+0x2bf0>)
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f003 ffd7 	bl	8007e6c <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <menu+0x2bf4>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b63      	cmp	r3, #99	; 0x63
 8003ec4:	d91e      	bls.n	8003f04 <menu+0x2b54>
			if(dilSecim == 0) {
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <menu+0x2bc0>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d104      	bne.n	8003ed8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ece:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <menu+0x2bc8>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	2002      	movs	r0, #2
 8003ed4:	f003 ffca 	bl	8007e6c <lcd_print>
			}
			if(dilSecim == 1) {
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <menu+0x2bc0>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d104      	bne.n	8003eea <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <menu+0x2bcc>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f003 ffc1 	bl	8007e6c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003eea:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <menu+0x2bf4>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	220a      	movs	r2, #10
 8003ef0:	4924      	ldr	r1, [pc, #144]	; (8003f84 <menu+0x2bd4>)
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f008 fb0c 	bl	800c510 <itoa>
			lcd_print(2,14,snum);
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <menu+0x2bd4>)
 8003efa:	210e      	movs	r1, #14
 8003efc:	2002      	movs	r0, #2
 8003efe:	f003 ffb5 	bl	8007e6c <lcd_print>
 8003f02:	e066      	b.n	8003fd2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <menu+0x2bf4>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b09      	cmp	r3, #9
 8003f0a:	d923      	bls.n	8003f54 <menu+0x2ba4>
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <menu+0x2bf4>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b63      	cmp	r3, #99	; 0x63
 8003f12:	d81f      	bhi.n	8003f54 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <menu+0x2bc0>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f1c:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <menu+0x2bc8>)
 8003f1e:	2101      	movs	r1, #1
 8003f20:	2002      	movs	r0, #2
 8003f22:	f003 ffa3 	bl	8007e6c <lcd_print>
 8003f26:	e008      	b.n	8003f3a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <menu+0x2bc0>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d104      	bne.n	8003f3a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003f30:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <menu+0x2bcc>)
 8003f32:	2101      	movs	r1, #1
 8003f34:	2002      	movs	r0, #2
 8003f36:	f003 ff99 	bl	8007e6c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <menu+0x2bf4>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	220a      	movs	r2, #10
 8003f40:	4910      	ldr	r1, [pc, #64]	; (8003f84 <menu+0x2bd4>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	f008 fae4 	bl	800c510 <itoa>
			lcd_print(2, 15, snum);
 8003f48:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <menu+0x2bd4>)
 8003f4a:	210f      	movs	r1, #15
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	f003 ff8d 	bl	8007e6c <lcd_print>
 8003f52:	e03e      	b.n	8003fd2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <menu+0x2bf4>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b09      	cmp	r3, #9
 8003f5a:	d83a      	bhi.n	8003fd2 <menu+0x2c22>
			if(dilSecim == 0) {
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <menu+0x2bc0>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d121      	bne.n	8003fa8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f64:	4a04      	ldr	r2, [pc, #16]	; (8003f78 <menu+0x2bc8>)
 8003f66:	2101      	movs	r1, #1
 8003f68:	2002      	movs	r0, #2
 8003f6a:	f003 ff7f 	bl	8007e6c <lcd_print>
 8003f6e:	e024      	b.n	8003fba <menu+0x2c0a>
 8003f70:	20000245 	.word	0x20000245
 8003f74:	0800daf8 	.word	0x0800daf8
 8003f78:	0800d6c0 	.word	0x0800d6c0
 8003f7c:	0800da34 	.word	0x0800da34
 8003f80:	2000023b 	.word	0x2000023b
 8003f84:	20000198 	.word	0x20000198
 8003f88:	40010800 	.word	0x40010800
 8003f8c:	20000253 	.word	0x20000253
 8003f90:	20000128 	.word	0x20000128
 8003f94:	20000250 	.word	0x20000250
 8003f98:	20000224 	.word	0x20000224
 8003f9c:	0800db0c 	.word	0x0800db0c
 8003fa0:	0800db20 	.word	0x0800db20
 8003fa4:	2000023c 	.word	0x2000023c
			} else if(dilSecim == 1) {
 8003fa8:	4b8f      	ldr	r3, [pc, #572]	; (80041e8 <menu+0x2e38>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d104      	bne.n	8003fba <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003fb0:	4a8e      	ldr	r2, [pc, #568]	; (80041ec <menu+0x2e3c>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	2002      	movs	r0, #2
 8003fb6:	f003 ff59 	bl	8007e6c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fba:	4b8d      	ldr	r3, [pc, #564]	; (80041f0 <menu+0x2e40>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	498c      	ldr	r1, [pc, #560]	; (80041f4 <menu+0x2e44>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f008 faa4 	bl	800c510 <itoa>
			lcd_print(2, 16, snum);
 8003fc8:	4a8a      	ldr	r2, [pc, #552]	; (80041f4 <menu+0x2e44>)
 8003fca:	2110      	movs	r1, #16
 8003fcc:	2002      	movs	r0, #2
 8003fce:	f003 ff4d 	bl	8007e6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4888      	ldr	r0, [pc, #544]	; (80041f8 <menu+0x2e48>)
 8003fd6:	f005 fa6f 	bl	80094b8 <HAL_GPIO_ReadPin>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d115      	bne.n	800400c <menu+0x2c5c>
 8003fe0:	4b86      	ldr	r3, [pc, #536]	; (80041fc <menu+0x2e4c>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f083 0301 	eor.w	r3, r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00e      	beq.n	800400c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003fee:	4b80      	ldr	r3, [pc, #512]	; (80041f0 <menu+0x2e40>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b7e      	ldr	r3, [pc, #504]	; (80041f0 <menu+0x2e40>)
 8003ff8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	; (80041f0 <menu+0x2e40>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2bb4      	cmp	r3, #180	; 0xb4
 8004000:	d902      	bls.n	8004008 <menu+0x2c58>
				makineCalismaTmr = 0;
 8004002:	4b7b      	ldr	r3, [pc, #492]	; (80041f0 <menu+0x2e40>)
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004008:	f000 fdd0 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800400c:	2104      	movs	r1, #4
 800400e:	487a      	ldr	r0, [pc, #488]	; (80041f8 <menu+0x2e48>)
 8004010:	f005 fa52 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004014:	4603      	mov	r3, r0
 8004016:	2b01      	cmp	r3, #1
 8004018:	d115      	bne.n	8004046 <menu+0x2c96>
 800401a:	4b78      	ldr	r3, [pc, #480]	; (80041fc <menu+0x2e4c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	f083 0301 	eor.w	r3, r3, #1
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004028:	4b71      	ldr	r3, [pc, #452]	; (80041f0 <menu+0x2e40>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	b2da      	uxtb	r2, r3
 8004030:	4b6f      	ldr	r3, [pc, #444]	; (80041f0 <menu+0x2e40>)
 8004032:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004034:	4b6e      	ldr	r3, [pc, #440]	; (80041f0 <menu+0x2e40>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2bb5      	cmp	r3, #181	; 0xb5
 800403a:	d902      	bls.n	8004042 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800403c:	4b6c      	ldr	r3, [pc, #432]	; (80041f0 <menu+0x2e40>)
 800403e:	22b4      	movs	r2, #180	; 0xb4
 8004040:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004042:	f000 fdb3 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004046:	2108      	movs	r1, #8
 8004048:	486b      	ldr	r0, [pc, #428]	; (80041f8 <menu+0x2e48>)
 800404a:	f005 fa35 	bl	80094b8 <HAL_GPIO_ReadPin>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10d      	bne.n	8004070 <menu+0x2cc0>
 8004054:	4b69      	ldr	r3, [pc, #420]	; (80041fc <menu+0x2e4c>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	f083 0301 	eor.w	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004062:	4b63      	ldr	r3, [pc, #396]	; (80041f0 <menu+0x2e40>)
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	4b66      	ldr	r3, [pc, #408]	; (8004200 <menu+0x2e50>)
 8004068:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800406a:	4b66      	ldr	r3, [pc, #408]	; (8004204 <menu+0x2e54>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004070:	4b65      	ldr	r3, [pc, #404]	; (8004208 <menu+0x2e58>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b1b      	cmp	r3, #27
 8004076:	f040 8083 	bne.w	8004180 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800407a:	4a64      	ldr	r2, [pc, #400]	; (800420c <menu+0x2e5c>)
 800407c:	2101      	movs	r1, #1
 800407e:	2001      	movs	r0, #1
 8004080:	f003 fef4 	bl	8007e6c <lcd_print>

		if(buzzer == 0) {
 8004084:	4b62      	ldr	r3, [pc, #392]	; (8004210 <menu+0x2e60>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d113      	bne.n	80040b4 <menu+0x2d04>
			if(dilSecim == 0) {
 800408c:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <menu+0x2e38>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004094:	4a5f      	ldr	r2, [pc, #380]	; (8004214 <menu+0x2e64>)
 8004096:	2101      	movs	r1, #1
 8004098:	2002      	movs	r0, #2
 800409a:	f003 fee7 	bl	8007e6c <lcd_print>
 800409e:	e020      	b.n	80040e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040a0:	4b51      	ldr	r3, [pc, #324]	; (80041e8 <menu+0x2e38>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d11c      	bne.n	80040e2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80040a8:	4a5b      	ldr	r2, [pc, #364]	; (8004218 <menu+0x2e68>)
 80040aa:	2101      	movs	r1, #1
 80040ac:	2002      	movs	r0, #2
 80040ae:	f003 fedd 	bl	8007e6c <lcd_print>
 80040b2:	e016      	b.n	80040e2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80040b4:	4b56      	ldr	r3, [pc, #344]	; (8004210 <menu+0x2e60>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d112      	bne.n	80040e2 <menu+0x2d32>
			if(dilSecim == 0) {
 80040bc:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <menu+0x2e38>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80040c4:	4a55      	ldr	r2, [pc, #340]	; (800421c <menu+0x2e6c>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	2002      	movs	r0, #2
 80040ca:	f003 fecf 	bl	8007e6c <lcd_print>
 80040ce:	e008      	b.n	80040e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040d0:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <menu+0x2e38>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d104      	bne.n	80040e2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80040d8:	4a51      	ldr	r2, [pc, #324]	; (8004220 <menu+0x2e70>)
 80040da:	2101      	movs	r1, #1
 80040dc:	2002      	movs	r0, #2
 80040de:	f003 fec5 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e2:	2102      	movs	r1, #2
 80040e4:	4844      	ldr	r0, [pc, #272]	; (80041f8 <menu+0x2e48>)
 80040e6:	f005 f9e7 	bl	80094b8 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d115      	bne.n	800411c <menu+0x2d6c>
 80040f0:	4b42      	ldr	r3, [pc, #264]	; (80041fc <menu+0x2e4c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f083 0301 	eor.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00e      	beq.n	800411c <menu+0x2d6c>
			buzzer = buzzer + 1;
 80040fe:	4b44      	ldr	r3, [pc, #272]	; (8004210 <menu+0x2e60>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b42      	ldr	r3, [pc, #264]	; (8004210 <menu+0x2e60>)
 8004108:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800410a:	4b41      	ldr	r3, [pc, #260]	; (8004210 <menu+0x2e60>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d902      	bls.n	8004118 <menu+0x2d68>
				buzzer = 0;
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <menu+0x2e60>)
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004118:	f000 fd48 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800411c:	2104      	movs	r1, #4
 800411e:	4836      	ldr	r0, [pc, #216]	; (80041f8 <menu+0x2e48>)
 8004120:	f005 f9ca 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d115      	bne.n	8004156 <menu+0x2da6>
 800412a:	4b34      	ldr	r3, [pc, #208]	; (80041fc <menu+0x2e4c>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	f083 0301 	eor.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <menu+0x2e60>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	4b33      	ldr	r3, [pc, #204]	; (8004210 <menu+0x2e60>)
 8004142:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004144:	4b32      	ldr	r3, [pc, #200]	; (8004210 <menu+0x2e60>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <menu+0x2da2>
		   		buzzer = 1;
 800414c:	4b30      	ldr	r3, [pc, #192]	; (8004210 <menu+0x2e60>)
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004152:	f000 fd2b 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004156:	2108      	movs	r1, #8
 8004158:	4827      	ldr	r0, [pc, #156]	; (80041f8 <menu+0x2e48>)
 800415a:	f005 f9ad 	bl	80094b8 <HAL_GPIO_ReadPin>
 800415e:	4603      	mov	r3, r0
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10d      	bne.n	8004180 <menu+0x2dd0>
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <menu+0x2e4c>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f083 0301 	eor.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <menu+0x2e60>)
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	4b22      	ldr	r3, [pc, #136]	; (8004200 <menu+0x2e50>)
 8004178:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <menu+0x2e54>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <menu+0x2e58>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b1c      	cmp	r3, #28
 8004186:	f040 80ab 	bne.w	80042e0 <menu+0x2f30>
		calismaSayModu = 0;
 800418a:	4b26      	ldr	r3, [pc, #152]	; (8004224 <menu+0x2e74>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004190:	4a25      	ldr	r2, [pc, #148]	; (8004228 <menu+0x2e78>)
 8004192:	2101      	movs	r1, #1
 8004194:	2001      	movs	r0, #1
 8004196:	f003 fe69 	bl	8007e6c <lcd_print>

		if(demoMode == 0) {
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <menu+0x2e7c>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <menu+0x2e1a>
			if(dilSecim == 0) {
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <menu+0x2e38>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d105      	bne.n	80041b6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80041aa:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <menu+0x2e64>)
 80041ac:	2101      	movs	r1, #1
 80041ae:	2002      	movs	r0, #2
 80041b0:	f003 fe5c 	bl	8007e6c <lcd_print>
 80041b4:	e045      	b.n	8004242 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <menu+0x2e38>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d141      	bne.n	8004242 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80041be:	4a16      	ldr	r2, [pc, #88]	; (8004218 <menu+0x2e68>)
 80041c0:	2101      	movs	r1, #1
 80041c2:	2002      	movs	r0, #2
 80041c4:	f003 fe52 	bl	8007e6c <lcd_print>
 80041c8:	e03b      	b.n	8004242 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80041ca:	4b18      	ldr	r3, [pc, #96]	; (800422c <menu+0x2e7c>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d137      	bne.n	8004242 <menu+0x2e92>
			if(dilSecim == 0){
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <menu+0x2e38>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12a      	bne.n	8004230 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80041da:	4a10      	ldr	r2, [pc, #64]	; (800421c <menu+0x2e6c>)
 80041dc:	2101      	movs	r1, #1
 80041de:	2002      	movs	r0, #2
 80041e0:	f003 fe44 	bl	8007e6c <lcd_print>
 80041e4:	e02d      	b.n	8004242 <menu+0x2e92>
 80041e6:	bf00      	nop
 80041e8:	20000245 	.word	0x20000245
 80041ec:	0800da34 	.word	0x0800da34
 80041f0:	2000023c 	.word	0x2000023c
 80041f4:	20000198 	.word	0x20000198
 80041f8:	40010800 	.word	0x40010800
 80041fc:	20000253 	.word	0x20000253
 8004200:	20000128 	.word	0x20000128
 8004204:	20000250 	.word	0x20000250
 8004208:	20000224 	.word	0x20000224
 800420c:	0800db34 	.word	0x0800db34
 8004210:	20000240 	.word	0x20000240
 8004214:	0800d45c 	.word	0x0800d45c
 8004218:	0800d470 	.word	0x0800d470
 800421c:	0800d4bc 	.word	0x0800d4bc
 8004220:	0800d4d0 	.word	0x0800d4d0
 8004224:	20000244 	.word	0x20000244
 8004228:	0800db48 	.word	0x0800db48
 800422c:	20000242 	.word	0x20000242
			} else if(dilSecim == 1) {
 8004230:	4b71      	ldr	r3, [pc, #452]	; (80043f8 <menu+0x3048>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d104      	bne.n	8004242 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004238:	4a70      	ldr	r2, [pc, #448]	; (80043fc <menu+0x304c>)
 800423a:	2101      	movs	r1, #1
 800423c:	2002      	movs	r0, #2
 800423e:	f003 fe15 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004242:	2102      	movs	r1, #2
 8004244:	486e      	ldr	r0, [pc, #440]	; (8004400 <menu+0x3050>)
 8004246:	f005 f937 	bl	80094b8 <HAL_GPIO_ReadPin>
 800424a:	4603      	mov	r3, r0
 800424c:	2b01      	cmp	r3, #1
 800424e:	d115      	bne.n	800427c <menu+0x2ecc>
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <menu+0x3054>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	f083 0301 	eor.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00e      	beq.n	800427c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800425e:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <menu+0x3058>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	b2da      	uxtb	r2, r3
 8004266:	4b68      	ldr	r3, [pc, #416]	; (8004408 <menu+0x3058>)
 8004268:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800426a:	4b67      	ldr	r3, [pc, #412]	; (8004408 <menu+0x3058>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d902      	bls.n	8004278 <menu+0x2ec8>
				demoMode = 0;
 8004272:	4b65      	ldr	r3, [pc, #404]	; (8004408 <menu+0x3058>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004278:	f000 fc98 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800427c:	2104      	movs	r1, #4
 800427e:	4860      	ldr	r0, [pc, #384]	; (8004400 <menu+0x3050>)
 8004280:	f005 f91a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d115      	bne.n	80042b6 <menu+0x2f06>
 800428a:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <menu+0x3054>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	f083 0301 	eor.w	r3, r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004298:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <menu+0x3058>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	3b01      	subs	r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	4b59      	ldr	r3, [pc, #356]	; (8004408 <menu+0x3058>)
 80042a2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80042a4:	4b58      	ldr	r3, [pc, #352]	; (8004408 <menu+0x3058>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <menu+0x2f02>
		   		demoMode = 1;
 80042ac:	4b56      	ldr	r3, [pc, #344]	; (8004408 <menu+0x3058>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042b2:	f000 fc7b 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042b6:	2108      	movs	r1, #8
 80042b8:	4851      	ldr	r0, [pc, #324]	; (8004400 <menu+0x3050>)
 80042ba:	f005 f8fd 	bl	80094b8 <HAL_GPIO_ReadPin>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10d      	bne.n	80042e0 <menu+0x2f30>
 80042c4:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <menu+0x3054>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f083 0301 	eor.w	r3, r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d006      	beq.n	80042e0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80042d2:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <menu+0x3058>)
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	4b4d      	ldr	r3, [pc, #308]	; (800440c <menu+0x305c>)
 80042d8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80042da:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <menu+0x3060>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <menu+0x3064>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b1d      	cmp	r3, #29
 80042e6:	f040 8132 	bne.w	800454e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80042ea:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <menu+0x3068>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d113      	bne.n	800431a <menu+0x2f6a>
 80042f2:	4b4a      	ldr	r3, [pc, #296]	; (800441c <menu+0x306c>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10f      	bne.n	800431a <menu+0x2f6a>
 80042fa:	4b49      	ldr	r3, [pc, #292]	; (8004420 <menu+0x3070>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <menu+0x2f6a>
 8004302:	4b48      	ldr	r3, [pc, #288]	; (8004424 <menu+0x3074>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d107      	bne.n	800431a <menu+0x2f6a>
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <menu+0x3078>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004312:	4b46      	ldr	r3, [pc, #280]	; (800442c <menu+0x307c>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e002      	b.n	8004320 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800431a:	4b44      	ldr	r3, [pc, #272]	; (800442c <menu+0x307c>)
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004320:	4b43      	ldr	r3, [pc, #268]	; (8004430 <menu+0x3080>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d154      	bne.n	80043d2 <menu+0x3022>
			if(dilSecim == 0) {
 8004328:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <menu+0x3048>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004330:	4a40      	ldr	r2, [pc, #256]	; (8004434 <menu+0x3084>)
 8004332:	2101      	movs	r1, #1
 8004334:	2001      	movs	r0, #1
 8004336:	f003 fd99 	bl	8007e6c <lcd_print>
 800433a:	e008      	b.n	800434e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800433c:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <menu+0x3048>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d104      	bne.n	800434e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004344:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <menu+0x3088>)
 8004346:	2101      	movs	r1, #1
 8004348:	2001      	movs	r0, #1
 800434a:	f003 fd8f 	bl	8007e6c <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <menu+0x3078>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	220a      	movs	r2, #10
 8004354:	4939      	ldr	r1, [pc, #228]	; (800443c <menu+0x308c>)
 8004356:	4618      	mov	r0, r3
 8004358:	f008 f8da 	bl	800c510 <itoa>
			lcd_print(2, 12, snum);
 800435c:	4a37      	ldr	r2, [pc, #220]	; (800443c <menu+0x308c>)
 800435e:	210c      	movs	r1, #12
 8004360:	2002      	movs	r0, #2
 8004362:	f003 fd83 	bl	8007e6c <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004366:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <menu+0x3074>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	220a      	movs	r2, #10
 800436c:	4933      	ldr	r1, [pc, #204]	; (800443c <menu+0x308c>)
 800436e:	4618      	mov	r0, r3
 8004370:	f008 f8ce 	bl	800c510 <itoa>
			lcd_print(2, 13, snum);
 8004374:	4a31      	ldr	r2, [pc, #196]	; (800443c <menu+0x308c>)
 8004376:	210d      	movs	r1, #13
 8004378:	2002      	movs	r0, #2
 800437a:	f003 fd77 	bl	8007e6c <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800437e:	4b28      	ldr	r3, [pc, #160]	; (8004420 <menu+0x3070>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	220a      	movs	r2, #10
 8004384:	492d      	ldr	r1, [pc, #180]	; (800443c <menu+0x308c>)
 8004386:	4618      	mov	r0, r3
 8004388:	f008 f8c2 	bl	800c510 <itoa>
			lcd_print(2, 14, snum);
 800438c:	4a2b      	ldr	r2, [pc, #172]	; (800443c <menu+0x308c>)
 800438e:	210e      	movs	r1, #14
 8004390:	2002      	movs	r0, #2
 8004392:	f003 fd6b 	bl	8007e6c <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <menu+0x306c>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	220a      	movs	r2, #10
 800439c:	4927      	ldr	r1, [pc, #156]	; (800443c <menu+0x308c>)
 800439e:	4618      	mov	r0, r3
 80043a0:	f008 f8b6 	bl	800c510 <itoa>
			lcd_print(2, 15, snum);
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <menu+0x308c>)
 80043a6:	210f      	movs	r1, #15
 80043a8:	2002      	movs	r0, #2
 80043aa:	f003 fd5f 	bl	8007e6c <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <menu+0x3068>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	220a      	movs	r2, #10
 80043b4:	4921      	ldr	r1, [pc, #132]	; (800443c <menu+0x308c>)
 80043b6:	4618      	mov	r0, r3
 80043b8:	f008 f8aa 	bl	800c510 <itoa>
			lcd_print(2, 16, snum);
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <menu+0x308c>)
 80043be:	2110      	movs	r1, #16
 80043c0:	2002      	movs	r0, #2
 80043c2:	f003 fd53 	bl	8007e6c <lcd_print>

			lcd_print(2, 1, "           ");
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <menu+0x3090>)
 80043c8:	2101      	movs	r1, #1
 80043ca:	2002      	movs	r0, #2
 80043cc:	f003 fd4e 	bl	8007e6c <lcd_print>
 80043d0:	e048      	b.n	8004464 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <menu+0x3080>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d144      	bne.n	8004464 <menu+0x30b4>
			if(dilSecim == 0) {
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <menu+0x3048>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d132      	bne.n	8004448 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043e2:	4a14      	ldr	r2, [pc, #80]	; (8004434 <menu+0x3084>)
 80043e4:	2101      	movs	r1, #1
 80043e6:	2001      	movs	r0, #1
 80043e8:	f003 fd40 	bl	8007e6c <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <menu+0x3094>)
 80043ee:	2101      	movs	r1, #1
 80043f0:	2002      	movs	r0, #2
 80043f2:	f003 fd3b 	bl	8007e6c <lcd_print>
 80043f6:	e035      	b.n	8004464 <menu+0x30b4>
 80043f8:	20000245 	.word	0x20000245
 80043fc:	0800d4d0 	.word	0x0800d4d0
 8004400:	40010800 	.word	0x40010800
 8004404:	20000253 	.word	0x20000253
 8004408:	20000242 	.word	0x20000242
 800440c:	20000128 	.word	0x20000128
 8004410:	20000250 	.word	0x20000250
 8004414:	20000224 	.word	0x20000224
 8004418:	20000221 	.word	0x20000221
 800441c:	20000222 	.word	0x20000222
 8004420:	20000008 	.word	0x20000008
 8004424:	20000009 	.word	0x20000009
 8004428:	20000223 	.word	0x20000223
 800442c:	20000265 	.word	0x20000265
 8004430:	20000244 	.word	0x20000244
 8004434:	0800db58 	.word	0x0800db58
 8004438:	0800db6c 	.word	0x0800db6c
 800443c:	20000198 	.word	0x20000198
 8004440:	0800db80 	.word	0x0800db80
 8004444:	0800db8c 	.word	0x0800db8c
			} else if(dilSecim == 1) {
 8004448:	4b94      	ldr	r3, [pc, #592]	; (800469c <menu+0x32ec>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d109      	bne.n	8004464 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004450:	4a93      	ldr	r2, [pc, #588]	; (80046a0 <menu+0x32f0>)
 8004452:	2101      	movs	r1, #1
 8004454:	2001      	movs	r0, #1
 8004456:	f003 fd09 	bl	8007e6c <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800445a:	4a92      	ldr	r2, [pc, #584]	; (80046a4 <menu+0x32f4>)
 800445c:	2101      	movs	r1, #1
 800445e:	2002      	movs	r0, #2
 8004460:	f003 fd04 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004464:	2102      	movs	r1, #2
 8004466:	4890      	ldr	r0, [pc, #576]	; (80046a8 <menu+0x32f8>)
 8004468:	f005 f826 	bl	80094b8 <HAL_GPIO_ReadPin>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d119      	bne.n	80044a6 <menu+0x30f6>
 8004472:	4b8e      	ldr	r3, [pc, #568]	; (80046ac <menu+0x32fc>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	f083 0301 	eor.w	r3, r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <menu+0x30f6>
 8004480:	4b8b      	ldr	r3, [pc, #556]	; (80046b0 <menu+0x3300>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004488:	4b8a      	ldr	r3, [pc, #552]	; (80046b4 <menu+0x3304>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	4b88      	ldr	r3, [pc, #544]	; (80046b4 <menu+0x3304>)
 8004492:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004494:	4b87      	ldr	r3, [pc, #540]	; (80046b4 <menu+0x3304>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d902      	bls.n	80044a2 <menu+0x30f2>
				calismaSayModu = 0;
 800449c:	4b85      	ldr	r3, [pc, #532]	; (80046b4 <menu+0x3304>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80044a2:	f000 fb83 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80044a6:	2104      	movs	r1, #4
 80044a8:	487f      	ldr	r0, [pc, #508]	; (80046a8 <menu+0x32f8>)
 80044aa:	f005 f805 	bl	80094b8 <HAL_GPIO_ReadPin>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d119      	bne.n	80044e8 <menu+0x3138>
 80044b4:	4b7d      	ldr	r3, [pc, #500]	; (80046ac <menu+0x32fc>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f083 0301 	eor.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d012      	beq.n	80044e8 <menu+0x3138>
 80044c2:	4b7b      	ldr	r3, [pc, #492]	; (80046b0 <menu+0x3300>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00e      	beq.n	80044e8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80044ca:	4b7a      	ldr	r3, [pc, #488]	; (80046b4 <menu+0x3304>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4b78      	ldr	r3, [pc, #480]	; (80046b4 <menu+0x3304>)
 80044d4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80044d6:	4b77      	ldr	r3, [pc, #476]	; (80046b4 <menu+0x3304>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <menu+0x3134>
		   		calismaSayModu = 1;
 80044de:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <menu+0x3304>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044e4:	f000 fb62 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044e8:	2108      	movs	r1, #8
 80044ea:	486f      	ldr	r0, [pc, #444]	; (80046a8 <menu+0x32f8>)
 80044ec:	f004 ffe4 	bl	80094b8 <HAL_GPIO_ReadPin>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d12b      	bne.n	800454e <menu+0x319e>
 80044f6:	4b6d      	ldr	r3, [pc, #436]	; (80046ac <menu+0x32fc>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d024      	beq.n	800454e <menu+0x319e>
			eepromData[32] = 0;
 8004504:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <menu+0x3308>)
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800450c:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <menu+0x3308>)
 800450e:	2200      	movs	r2, #0
 8004510:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004512:	4b69      	ldr	r3, [pc, #420]	; (80046b8 <menu+0x3308>)
 8004514:	2200      	movs	r2, #0
 8004516:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004518:	4b67      	ldr	r3, [pc, #412]	; (80046b8 <menu+0x3308>)
 800451a:	2200      	movs	r2, #0
 800451c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800451e:	4b66      	ldr	r3, [pc, #408]	; (80046b8 <menu+0x3308>)
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004524:	4b65      	ldr	r3, [pc, #404]	; (80046bc <menu+0x330c>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800452a:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <menu+0x3310>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004530:	4b64      	ldr	r3, [pc, #400]	; (80046c4 <menu+0x3314>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004536:	4b64      	ldr	r3, [pc, #400]	; (80046c8 <menu+0x3318>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800453c:	4b63      	ldr	r3, [pc, #396]	; (80046cc <menu+0x331c>)
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004542:	4b5c      	ldr	r3, [pc, #368]	; (80046b4 <menu+0x3304>)
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004548:	4b61      	ldr	r3, [pc, #388]	; (80046d0 <menu+0x3320>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800454e:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <menu+0x3324>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b1e      	cmp	r3, #30
 8004554:	d16f      	bne.n	8004636 <menu+0x3286>
		calismaSayModu = 0;
 8004556:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <menu+0x3304>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <menu+0x32ec>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004564:	4a5c      	ldr	r2, [pc, #368]	; (80046d8 <menu+0x3328>)
 8004566:	2101      	movs	r1, #1
 8004568:	2001      	movs	r0, #1
 800456a:	f003 fc7f 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800456e:	4a5b      	ldr	r2, [pc, #364]	; (80046dc <menu+0x332c>)
 8004570:	2101      	movs	r1, #1
 8004572:	2002      	movs	r0, #2
 8004574:	f003 fc7a 	bl	8007e6c <lcd_print>
 8004578:	e00d      	b.n	8004596 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800457a:	4b48      	ldr	r3, [pc, #288]	; (800469c <menu+0x32ec>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d109      	bne.n	8004596 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004582:	4a57      	ldr	r2, [pc, #348]	; (80046e0 <menu+0x3330>)
 8004584:	2101      	movs	r1, #1
 8004586:	2001      	movs	r0, #1
 8004588:	f003 fc70 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800458c:	4a55      	ldr	r2, [pc, #340]	; (80046e4 <menu+0x3334>)
 800458e:	2101      	movs	r1, #1
 8004590:	2002      	movs	r0, #2
 8004592:	f003 fc6b 	bl	8007e6c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004596:	2102      	movs	r1, #2
 8004598:	4843      	ldr	r0, [pc, #268]	; (80046a8 <menu+0x32f8>)
 800459a:	f004 ff8d 	bl	80094b8 <HAL_GPIO_ReadPin>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d115      	bne.n	80045d0 <menu+0x3220>
 80045a4:	4b41      	ldr	r3, [pc, #260]	; (80046ac <menu+0x32fc>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f083 0301 	eor.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00e      	beq.n	80045d0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80045b2:	4b3a      	ldr	r3, [pc, #232]	; (800469c <menu+0x32ec>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4b38      	ldr	r3, [pc, #224]	; (800469c <menu+0x32ec>)
 80045bc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80045be:	4b37      	ldr	r3, [pc, #220]	; (800469c <menu+0x32ec>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d902      	bls.n	80045cc <menu+0x321c>
				dilSecim = 0;
 80045c6:	4b35      	ldr	r3, [pc, #212]	; (800469c <menu+0x32ec>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80045cc:	f000 faee 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d0:	2104      	movs	r1, #4
 80045d2:	4835      	ldr	r0, [pc, #212]	; (80046a8 <menu+0x32f8>)
 80045d4:	f004 ff70 	bl	80094b8 <HAL_GPIO_ReadPin>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d115      	bne.n	800460a <menu+0x325a>
 80045de:	4b33      	ldr	r3, [pc, #204]	; (80046ac <menu+0x32fc>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f083 0301 	eor.w	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <menu+0x325a>
			dilSecim = dilSecim - 1;
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <menu+0x32ec>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b29      	ldr	r3, [pc, #164]	; (800469c <menu+0x32ec>)
 80045f6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80045f8:	4b28      	ldr	r3, [pc, #160]	; (800469c <menu+0x32ec>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <menu+0x3256>
		   		dilSecim = 1;
 8004600:	4b26      	ldr	r3, [pc, #152]	; (800469c <menu+0x32ec>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004606:	f000 fad1 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800460a:	2108      	movs	r1, #8
 800460c:	4826      	ldr	r0, [pc, #152]	; (80046a8 <menu+0x32f8>)
 800460e:	f004 ff53 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10e      	bne.n	8004636 <menu+0x3286>
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <menu+0x32fc>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f083 0301 	eor.w	r3, r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <menu+0x32ec>)
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <menu+0x3308>)
 800462c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <menu+0x3320>)
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004636:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <menu+0x3324>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b1f      	cmp	r3, #31
 800463c:	f040 80b7 	bne.w	80047ae <menu+0x33fe>
		calismaSayModu = 0;
 8004640:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <menu+0x3304>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004646:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <menu+0x3338>)
 8004648:	2101      	movs	r1, #1
 800464a:	2001      	movs	r0, #1
 800464c:	f003 fc0e 	bl	8007e6c <lcd_print>

		if(iotMode == 0) {
 8004650:	4b26      	ldr	r3, [pc, #152]	; (80046ec <menu+0x333c>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d113      	bne.n	8004680 <menu+0x32d0>
			if(dilSecim == 0) {
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <menu+0x32ec>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d105      	bne.n	800466c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004660:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <menu+0x3340>)
 8004662:	2101      	movs	r1, #1
 8004664:	2002      	movs	r0, #2
 8004666:	f003 fc01 	bl	8007e6c <lcd_print>
 800466a:	e050      	b.n	800470e <menu+0x335e>
			} else if(dilSecim == 1) {
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <menu+0x32ec>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d14c      	bne.n	800470e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <menu+0x3344>)
 8004676:	2101      	movs	r1, #1
 8004678:	2002      	movs	r0, #2
 800467a:	f003 fbf7 	bl	8007e6c <lcd_print>
 800467e:	e046      	b.n	800470e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <menu+0x333c>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d142      	bne.n	800470e <menu+0x335e>
			if(dilSecim == 0) {
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <menu+0x32ec>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d135      	bne.n	80046fc <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <menu+0x3348>)
 8004692:	2101      	movs	r1, #1
 8004694:	2002      	movs	r0, #2
 8004696:	f003 fbe9 	bl	8007e6c <lcd_print>
 800469a:	e038      	b.n	800470e <menu+0x335e>
 800469c:	20000245 	.word	0x20000245
 80046a0:	0800db6c 	.word	0x0800db6c
 80046a4:	0800dba0 	.word	0x0800dba0
 80046a8:	40010800 	.word	0x40010800
 80046ac:	20000253 	.word	0x20000253
 80046b0:	20000265 	.word	0x20000265
 80046b4:	20000244 	.word	0x20000244
 80046b8:	20000128 	.word	0x20000128
 80046bc:	20000223 	.word	0x20000223
 80046c0:	20000009 	.word	0x20000009
 80046c4:	20000008 	.word	0x20000008
 80046c8:	20000222 	.word	0x20000222
 80046cc:	20000221 	.word	0x20000221
 80046d0:	20000250 	.word	0x20000250
 80046d4:	20000224 	.word	0x20000224
 80046d8:	0800dbb4 	.word	0x0800dbb4
 80046dc:	0800dbc8 	.word	0x0800dbc8
 80046e0:	0800dbdc 	.word	0x0800dbdc
 80046e4:	0800dbf0 	.word	0x0800dbf0
 80046e8:	0800dc04 	.word	0x0800dc04
 80046ec:	20000243 	.word	0x20000243
 80046f0:	0800d45c 	.word	0x0800d45c
 80046f4:	0800d470 	.word	0x0800d470
 80046f8:	0800d4bc 	.word	0x0800d4bc
			} else if(dilSecim == 1) {
 80046fc:	4b97      	ldr	r3, [pc, #604]	; (800495c <menu+0x35ac>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d104      	bne.n	800470e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004704:	4a96      	ldr	r2, [pc, #600]	; (8004960 <menu+0x35b0>)
 8004706:	2101      	movs	r1, #1
 8004708:	2002      	movs	r0, #2
 800470a:	f003 fbaf 	bl	8007e6c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800470e:	2102      	movs	r1, #2
 8004710:	4894      	ldr	r0, [pc, #592]	; (8004964 <menu+0x35b4>)
 8004712:	f004 fed1 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004716:	4603      	mov	r3, r0
 8004718:	2b01      	cmp	r3, #1
 800471a:	d115      	bne.n	8004748 <menu+0x3398>
 800471c:	4b92      	ldr	r3, [pc, #584]	; (8004968 <menu+0x35b8>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	f083 0301 	eor.w	r3, r3, #1
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00e      	beq.n	8004748 <menu+0x3398>
			iotMode = iotMode + 1;
 800472a:	4b90      	ldr	r3, [pc, #576]	; (800496c <menu+0x35bc>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4b8e      	ldr	r3, [pc, #568]	; (800496c <menu+0x35bc>)
 8004734:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004736:	4b8d      	ldr	r3, [pc, #564]	; (800496c <menu+0x35bc>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d902      	bls.n	8004744 <menu+0x3394>
				iotMode = 0;
 800473e:	4b8b      	ldr	r3, [pc, #556]	; (800496c <menu+0x35bc>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004744:	f000 fa32 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004748:	2104      	movs	r1, #4
 800474a:	4886      	ldr	r0, [pc, #536]	; (8004964 <menu+0x35b4>)
 800474c:	f004 feb4 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d115      	bne.n	8004782 <menu+0x33d2>
 8004756:	4b84      	ldr	r3, [pc, #528]	; (8004968 <menu+0x35b8>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	f083 0301 	eor.w	r3, r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00e      	beq.n	8004782 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004764:	4b81      	ldr	r3, [pc, #516]	; (800496c <menu+0x35bc>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	3b01      	subs	r3, #1
 800476a:	b2da      	uxtb	r2, r3
 800476c:	4b7f      	ldr	r3, [pc, #508]	; (800496c <menu+0x35bc>)
 800476e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004770:	4b7e      	ldr	r3, [pc, #504]	; (800496c <menu+0x35bc>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <menu+0x33ce>
		   		iotMode = 1;
 8004778:	4b7c      	ldr	r3, [pc, #496]	; (800496c <menu+0x35bc>)
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800477e:	f000 fa15 	bl	8004bac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004782:	2108      	movs	r1, #8
 8004784:	4877      	ldr	r0, [pc, #476]	; (8004964 <menu+0x35b4>)
 8004786:	f004 fe97 	bl	80094b8 <HAL_GPIO_ReadPin>
 800478a:	4603      	mov	r3, r0
 800478c:	2b01      	cmp	r3, #1
 800478e:	d10e      	bne.n	80047ae <menu+0x33fe>
 8004790:	4b75      	ldr	r3, [pc, #468]	; (8004968 <menu+0x35b8>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f083 0301 	eor.w	r3, r3, #1
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <menu+0x33fe>
			eepromData[48] = iotMode;
 800479e:	4b73      	ldr	r3, [pc, #460]	; (800496c <menu+0x35bc>)
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	4b73      	ldr	r3, [pc, #460]	; (8004970 <menu+0x35c0>)
 80047a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80047a8:	4b72      	ldr	r3, [pc, #456]	; (8004974 <menu+0x35c4>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80047ae:	4b72      	ldr	r3, [pc, #456]	; (8004978 <menu+0x35c8>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d141      	bne.n	800483a <menu+0x348a>
		calismaSayModu = 0;
 80047b6:	4b71      	ldr	r3, [pc, #452]	; (800497c <menu+0x35cc>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80047bc:	4b67      	ldr	r3, [pc, #412]	; (800495c <menu+0x35ac>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80047c4:	4a6e      	ldr	r2, [pc, #440]	; (8004980 <menu+0x35d0>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	2001      	movs	r0, #1
 80047ca:	f003 fb4f 	bl	8007e6c <lcd_print>
 80047ce:	e004      	b.n	80047da <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80047d0:	4a6c      	ldr	r2, [pc, #432]	; (8004984 <menu+0x35d4>)
 80047d2:	2101      	movs	r1, #1
 80047d4:	2001      	movs	r0, #1
 80047d6:	f003 fb49 	bl	8007e6c <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80047da:	4a6b      	ldr	r2, [pc, #428]	; (8004988 <menu+0x35d8>)
 80047dc:	2101      	movs	r1, #1
 80047de:	2002      	movs	r0, #2
 80047e0:	f003 fb44 	bl	8007e6c <lcd_print>
		lcd_print(2, 13, "    ");
 80047e4:	4a69      	ldr	r2, [pc, #420]	; (800498c <menu+0x35dc>)
 80047e6:	210d      	movs	r1, #13
 80047e8:	2002      	movs	r0, #2
 80047ea:	f003 fb3f 	bl	8007e6c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ee:	2102      	movs	r1, #2
 80047f0:	485c      	ldr	r0, [pc, #368]	; (8004964 <menu+0x35b4>)
 80047f2:	f004 fe61 	bl	80094b8 <HAL_GPIO_ReadPin>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d11e      	bne.n	800483a <menu+0x348a>
 80047fc:	2104      	movs	r1, #4
 80047fe:	4859      	ldr	r0, [pc, #356]	; (8004964 <menu+0x35b4>)
 8004800:	f004 fe5a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d117      	bne.n	800483a <menu+0x348a>
 800480a:	4b57      	ldr	r3, [pc, #348]	; (8004968 <menu+0x35b8>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	f083 0301 	eor.w	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d010      	beq.n	800483a <menu+0x348a>
			takeMachineID();
 8004818:	f002 fad4 	bl	8006dc4 <takeMachineID>

			HAL_Delay(50);
 800481c:	2032      	movs	r0, #50	; 0x32
 800481e:	f004 f87b 	bl	8008918 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004822:	4a59      	ldr	r2, [pc, #356]	; (8004988 <menu+0x35d8>)
 8004824:	2101      	movs	r1, #1
 8004826:	2002      	movs	r0, #2
 8004828:	f003 fb20 	bl	8007e6c <lcd_print>
			lcd_print(2, 13, "    ");
 800482c:	4a57      	ldr	r2, [pc, #348]	; (800498c <menu+0x35dc>)
 800482e:	210d      	movs	r1, #13
 8004830:	2002      	movs	r0, #2
 8004832:	f003 fb1b 	bl	8007e6c <lcd_print>

			bekle();
 8004836:	f000 f9b9 	bl	8004bac <bekle>
		}
	}

	if (menuSayac == 33) {
 800483a:	4b4f      	ldr	r3, [pc, #316]	; (8004978 <menu+0x35c8>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b21      	cmp	r3, #33	; 0x21
 8004840:	d161      	bne.n	8004906 <menu+0x3556>
		calismaSayModu = 0;
 8004842:	4b4e      	ldr	r3, [pc, #312]	; (800497c <menu+0x35cc>)
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8004848:	f003 fb3c 	bl	8007ec4 <lcd_clear>
		HAL_Delay(500);
 800484c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004850:	f004 f862 	bl	8008918 <HAL_Delay>

		int ssidLength = strlen(wifiSSID);
 8004854:	484e      	ldr	r0, [pc, #312]	; (8004990 <menu+0x35e0>)
 8004856:	f7fb fce5 	bl	8000224 <strlen>
 800485a:	4603      	mov	r3, r0
 800485c:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 800485e:	4a4d      	ldr	r2, [pc, #308]	; (8004994 <menu+0x35e4>)
 8004860:	2101      	movs	r1, #1
 8004862:	2001      	movs	r0, #1
 8004864:	f003 fb02 	bl	8007e6c <lcd_print>
		if(ssidLength <=16) {
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b10      	cmp	r3, #16
 800486c:	dc0e      	bgt.n	800488c <menu+0x34dc>
			lcd_print(2, 1, wifiSSID);
 800486e:	4a48      	ldr	r2, [pc, #288]	; (8004990 <menu+0x35e0>)
 8004870:	2101      	movs	r1, #1
 8004872:	2002      	movs	r0, #2
 8004874:	f003 fafa 	bl	8007e6c <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	3301      	adds	r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	4a45      	ldr	r2, [pc, #276]	; (8004998 <menu+0x35e8>)
 8004882:	4619      	mov	r1, r3
 8004884:	2002      	movs	r0, #2
 8004886:	f003 faf1 	bl	8007e6c <lcd_print>
 800488a:	e00f      	b.n	80048ac <menu+0x34fc>
		} else {
			lcd_clear();
 800488c:	f003 fb1a 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 8004890:	2064      	movs	r0, #100	; 0x64
 8004892:	f004 f841 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "WIFI SSID       ");
 8004896:	4a3f      	ldr	r2, [pc, #252]	; (8004994 <menu+0x35e4>)
 8004898:	2101      	movs	r1, #1
 800489a:	2001      	movs	r0, #1
 800489c:	f003 fae6 	bl	8007e6c <lcd_print>
			slideText(wifiSSID, 1, 2, 0);
 80048a0:	2300      	movs	r3, #0
 80048a2:	2202      	movs	r2, #2
 80048a4:	2101      	movs	r1, #1
 80048a6:	483a      	ldr	r0, [pc, #232]	; (8004990 <menu+0x35e0>)
 80048a8:	f7fc fcc6 	bl	8001238 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048ac:	2102      	movs	r1, #2
 80048ae:	482d      	ldr	r0, [pc, #180]	; (8004964 <menu+0x35b4>)
 80048b0:	f004 fe02 	bl	80094b8 <HAL_GPIO_ReadPin>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d125      	bne.n	8004906 <menu+0x3556>
 80048ba:	2104      	movs	r1, #4
 80048bc:	4829      	ldr	r0, [pc, #164]	; (8004964 <menu+0x35b4>)
 80048be:	f004 fdfb 	bl	80094b8 <HAL_GPIO_ReadPin>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d11e      	bne.n	8004906 <menu+0x3556>
 80048c8:	4b27      	ldr	r3, [pc, #156]	; (8004968 <menu+0x35b8>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f083 0301 	eor.w	r3, r3, #1
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d017      	beq.n	8004906 <menu+0x3556>
			takeWifiSSID();
 80048d6:	f002 fbdd 	bl	8007094 <takeWifiSSID>

			HAL_Delay(100);
 80048da:	2064      	movs	r0, #100	; 0x64
 80048dc:	f004 f81c 	bl	8008918 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <menu+0x35e0>)
 80048e2:	2101      	movs	r1, #1
 80048e4:	2002      	movs	r0, #2
 80048e6:	f003 fac1 	bl	8007e6c <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80048ea:	4829      	ldr	r0, [pc, #164]	; (8004990 <menu+0x35e0>)
 80048ec:	f7fb fc9a 	bl	8000224 <strlen>
 80048f0:	4603      	mov	r3, r0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	4a27      	ldr	r2, [pc, #156]	; (8004998 <menu+0x35e8>)
 80048fa:	4619      	mov	r1, r3
 80048fc:	2002      	movs	r0, #2
 80048fe:	f003 fab5 	bl	8007e6c <lcd_print>

			bekle();
 8004902:	f000 f953 	bl	8004bac <bekle>
		}
	}

	if (menuSayac == 34) {
 8004906:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <menu+0x35c8>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b22      	cmp	r3, #34	; 0x22
 800490c:	f040 8087 	bne.w	8004a1e <menu+0x366e>
		calismaSayModu = 0;
 8004910:	4b1a      	ldr	r3, [pc, #104]	; (800497c <menu+0x35cc>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]

		lcd_clear();
 8004916:	f003 fad5 	bl	8007ec4 <lcd_clear>
		HAL_Delay(500);
 800491a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800491e:	f003 fffb 	bl	8008918 <HAL_Delay>

		int passLength = strlen(wifiPass);
 8004922:	481e      	ldr	r0, [pc, #120]	; (800499c <menu+0x35ec>)
 8004924:	f7fb fc7e 	bl	8000224 <strlen>
 8004928:	4603      	mov	r3, r0
 800492a:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 800492c:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <menu+0x35f0>)
 800492e:	2101      	movs	r1, #1
 8004930:	2001      	movs	r0, #1
 8004932:	f003 fa9b 	bl	8007e6c <lcd_print>
		if(passLength <= 16) {
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b10      	cmp	r3, #16
 800493a:	dc33      	bgt.n	80049a4 <menu+0x35f4>
			lcd_print(2, 1, wifiPass);
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <menu+0x35ec>)
 800493e:	2101      	movs	r1, #1
 8004940:	2002      	movs	r0, #2
 8004942:	f003 fa93 	bl	8007e6c <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	3301      	adds	r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	4a12      	ldr	r2, [pc, #72]	; (8004998 <menu+0x35e8>)
 8004950:	4619      	mov	r1, r3
 8004952:	2002      	movs	r0, #2
 8004954:	f003 fa8a 	bl	8007e6c <lcd_print>
 8004958:	e034      	b.n	80049c4 <menu+0x3614>
 800495a:	bf00      	nop
 800495c:	20000245 	.word	0x20000245
 8004960:	0800d4d0 	.word	0x0800d4d0
 8004964:	40010800 	.word	0x40010800
 8004968:	20000253 	.word	0x20000253
 800496c:	20000243 	.word	0x20000243
 8004970:	20000128 	.word	0x20000128
 8004974:	20000250 	.word	0x20000250
 8004978:	20000224 	.word	0x20000224
 800497c:	20000244 	.word	0x20000244
 8004980:	0800dc18 	.word	0x0800dc18
 8004984:	0800dc2c 	.word	0x0800dc2c
 8004988:	200001a0 	.word	0x200001a0
 800498c:	0800dc40 	.word	0x0800dc40
 8004990:	200001ac 	.word	0x200001ac
 8004994:	0800dc48 	.word	0x0800dc48
 8004998:	20000018 	.word	0x20000018
 800499c:	200001c0 	.word	0x200001c0
 80049a0:	0800dc5c 	.word	0x0800dc5c
		} else {
			lcd_clear();
 80049a4:	f003 fa8e 	bl	8007ec4 <lcd_clear>
			HAL_Delay(100);
 80049a8:	2064      	movs	r0, #100	; 0x64
 80049aa:	f003 ffb5 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "WIFI PASS       ");
 80049ae:	4a47      	ldr	r2, [pc, #284]	; (8004acc <menu+0x371c>)
 80049b0:	2101      	movs	r1, #1
 80049b2:	2001      	movs	r0, #1
 80049b4:	f003 fa5a 	bl	8007e6c <lcd_print>
			slideText(wifiPass, 1, 2, 1);
 80049b8:	2301      	movs	r3, #1
 80049ba:	2202      	movs	r2, #2
 80049bc:	2101      	movs	r1, #1
 80049be:	4844      	ldr	r0, [pc, #272]	; (8004ad0 <menu+0x3720>)
 80049c0:	f7fc fc3a 	bl	8001238 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049c4:	2102      	movs	r1, #2
 80049c6:	4843      	ldr	r0, [pc, #268]	; (8004ad4 <menu+0x3724>)
 80049c8:	f004 fd76 	bl	80094b8 <HAL_GPIO_ReadPin>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d125      	bne.n	8004a1e <menu+0x366e>
 80049d2:	2104      	movs	r1, #4
 80049d4:	483f      	ldr	r0, [pc, #252]	; (8004ad4 <menu+0x3724>)
 80049d6:	f004 fd6f 	bl	80094b8 <HAL_GPIO_ReadPin>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d11e      	bne.n	8004a1e <menu+0x366e>
 80049e0:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <menu+0x3728>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	f083 0301 	eor.w	r3, r3, #1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d017      	beq.n	8004a1e <menu+0x366e>
			takeWifiPass();
 80049ee:	f002 fd27 	bl	8007440 <takeWifiPass>

			HAL_Delay(50);
 80049f2:	2032      	movs	r0, #50	; 0x32
 80049f4:	f003 ff90 	bl	8008918 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 80049f8:	4a35      	ldr	r2, [pc, #212]	; (8004ad0 <menu+0x3720>)
 80049fa:	2101      	movs	r1, #1
 80049fc:	2002      	movs	r0, #2
 80049fe:	f003 fa35 	bl	8007e6c <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a02:	4833      	ldr	r0, [pc, #204]	; (8004ad0 <menu+0x3720>)
 8004a04:	f7fb fc0e 	bl	8000224 <strlen>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	4a32      	ldr	r2, [pc, #200]	; (8004adc <menu+0x372c>)
 8004a12:	4619      	mov	r1, r3
 8004a14:	2002      	movs	r0, #2
 8004a16:	f003 fa29 	bl	8007e6c <lcd_print>

			bekle();
 8004a1a:	f000 f8c7 	bl	8004bac <bekle>
		}
	}

	if (menuSayac == 35) {
 8004a1e:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <menu+0x3730>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b23      	cmp	r3, #35	; 0x23
 8004a24:	d14d      	bne.n	8004ac2 <menu+0x3712>
		if(dilSecim == 0) {
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <menu+0x3734>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <menu+0x3694>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004a2e:	4a2e      	ldr	r2, [pc, #184]	; (8004ae8 <menu+0x3738>)
 8004a30:	2101      	movs	r1, #1
 8004a32:	2001      	movs	r0, #1
 8004a34:	f003 fa1a 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004a38:	4a2c      	ldr	r2, [pc, #176]	; (8004aec <menu+0x373c>)
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	2002      	movs	r0, #2
 8004a3e:	f003 fa15 	bl	8007e6c <lcd_print>
 8004a42:	e00d      	b.n	8004a60 <menu+0x36b0>
		} else if(dilSecim == 1) {
 8004a44:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <menu+0x3734>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d109      	bne.n	8004a60 <menu+0x36b0>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004a4c:	4a28      	ldr	r2, [pc, #160]	; (8004af0 <menu+0x3740>)
 8004a4e:	2101      	movs	r1, #1
 8004a50:	2001      	movs	r0, #1
 8004a52:	f003 fa0b 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004a56:	4a27      	ldr	r2, [pc, #156]	; (8004af4 <menu+0x3744>)
 8004a58:	2101      	movs	r1, #1
 8004a5a:	2002      	movs	r0, #2
 8004a5c:	f003 fa06 	bl	8007e6c <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004a60:	2108      	movs	r1, #8
 8004a62:	481c      	ldr	r0, [pc, #112]	; (8004ad4 <menu+0x3724>)
 8004a64:	f004 fd28 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d129      	bne.n	8004ac2 <menu+0x3712>
			menuGiris = 0;
 8004a6e:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <menu+0x3748>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004a74:	bf00      	nop
 8004a76:	4821      	ldr	r0, [pc, #132]	; (8004afc <menu+0x374c>)
 8004a78:	f005 fb47 	bl	800a10a <HAL_I2C_GetError>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d0f9      	beq.n	8004a76 <menu+0x36c6>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004a82:	bf00      	nop
 8004a84:	481d      	ldr	r0, [pc, #116]	; (8004afc <menu+0x374c>)
 8004a86:	f005 fb33 	bl	800a0f0 <HAL_I2C_GetState>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d1f9      	bne.n	8004a84 <menu+0x36d4>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004a90:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004a94:	9302      	str	r3, [sp, #8]
 8004a96:	236e      	movs	r3, #110	; 0x6e
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <menu+0x3750>)
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	236e      	movs	r3, #110	; 0x6e
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	21a0      	movs	r1, #160	; 0xa0
 8004aa4:	4815      	ldr	r0, [pc, #84]	; (8004afc <menu+0x374c>)
 8004aa6:	f004 ffc1 	bl	8009a2c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004aaa:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004aae:	f003 ff33 	bl	8008918 <HAL_Delay>

			lcd_clear();
 8004ab2:	f003 fa07 	bl	8007ec4 <lcd_clear>
			HAL_Delay(500);
 8004ab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004aba:	f003 ff2d 	bl	8008918 <HAL_Delay>
			NVIC_SystemReset();
 8004abe:	f7fc fc61 	bl	8001384 <__NVIC_SystemReset>
		}
	}
}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	0800dc5c 	.word	0x0800dc5c
 8004ad0:	200001c0 	.word	0x200001c0
 8004ad4:	40010800 	.word	0x40010800
 8004ad8:	20000253 	.word	0x20000253
 8004adc:	20000018 	.word	0x20000018
 8004ae0:	20000224 	.word	0x20000224
 8004ae4:	20000245 	.word	0x20000245
 8004ae8:	0800dc70 	.word	0x0800dc70
 8004aec:	0800dc84 	.word	0x0800dc84
 8004af0:	0800dc98 	.word	0x0800dc98
 8004af4:	0800dcac 	.word	0x0800dcac
 8004af8:	20000241 	.word	0x20000241
 8004afc:	200003ac 	.word	0x200003ac
 8004b00:	20000128 	.word	0x20000128

08004b04 <lcdUpdate>:
#include "main.h"
#include "Process.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void lcdUpdate(uint8_t y) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d105      	bne.n	8004b20 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004b14:	4a22      	ldr	r2, [pc, #136]	; (8004ba0 <lcdUpdate+0x9c>)
 8004b16:	2101      	movs	r1, #1
 8004b18:	2002      	movs	r0, #2
 8004b1a:	f003 f9a7 	bl	8007e6c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004b1e:	e03b      	b.n	8004b98 <lcdUpdate+0x94>
	} else if(y==2) {
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d105      	bne.n	8004b32 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004b26:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <lcdUpdate+0x9c>)
 8004b28:	2102      	movs	r1, #2
 8004b2a:	2002      	movs	r0, #2
 8004b2c:	f003 f99e 	bl	8007e6c <lcd_print>
}
 8004b30:	e032      	b.n	8004b98 <lcdUpdate+0x94>
	} else if(y==3) {
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d105      	bne.n	8004b44 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004b38:	4a19      	ldr	r2, [pc, #100]	; (8004ba0 <lcdUpdate+0x9c>)
 8004b3a:	2103      	movs	r1, #3
 8004b3c:	2002      	movs	r0, #2
 8004b3e:	f003 f995 	bl	8007e6c <lcd_print>
}
 8004b42:	e029      	b.n	8004b98 <lcdUpdate+0x94>
	} else if(y==4) {
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d105      	bne.n	8004b56 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004b4a:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <lcdUpdate+0x9c>)
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	2002      	movs	r0, #2
 8004b50:	f003 f98c 	bl	8007e6c <lcd_print>
}
 8004b54:	e020      	b.n	8004b98 <lcdUpdate+0x94>
	} else if(y==5) {
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2b05      	cmp	r3, #5
 8004b5a:	d105      	bne.n	8004b68 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004b5c:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <lcdUpdate+0x9c>)
 8004b5e:	2105      	movs	r1, #5
 8004b60:	2002      	movs	r0, #2
 8004b62:	f003 f983 	bl	8007e6c <lcd_print>
}
 8004b66:	e017      	b.n	8004b98 <lcdUpdate+0x94>
	} else if(y==6) {
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	2b06      	cmp	r3, #6
 8004b6c:	d105      	bne.n	8004b7a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <lcdUpdate+0x9c>)
 8004b70:	2106      	movs	r1, #6
 8004b72:	2002      	movs	r0, #2
 8004b74:	f003 f97a 	bl	8007e6c <lcd_print>
}
 8004b78:	e00e      	b.n	8004b98 <lcdUpdate+0x94>
	} else if (y==7) {
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	d10b      	bne.n	8004b98 <lcdUpdate+0x94>
		lcd_clear();
 8004b80:	f003 f9a0 	bl	8007ec4 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004b84:	4a07      	ldr	r2, [pc, #28]	; (8004ba4 <lcdUpdate+0xa0>)
 8004b86:	2104      	movs	r1, #4
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f003 f96f 	bl	8007e6c <lcd_print>
		lcd_print(2, 6, "RUN");
 8004b8e:	4a06      	ldr	r2, [pc, #24]	; (8004ba8 <lcdUpdate+0xa4>)
 8004b90:	2106      	movs	r1, #6
 8004b92:	2002      	movs	r0, #2
 8004b94:	f003 f96a 	bl	8007e6c <lcd_print>
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	0800dcc0 	.word	0x0800dcc0
 8004ba4:	0800dcc4 	.word	0x0800dcc4
 8004ba8:	0800dccc 	.word	0x0800dccc

08004bac <bekle>:

void bekle() {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
	timer1=millis;
 8004bb0:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <bekle+0x124>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a47      	ldr	r2, [pc, #284]	; (8004cd4 <bekle+0x128>)
 8004bb6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bb8:	e002      	b.n	8004bc0 <bekle+0x14>
    	butonKontrol = 1;
 8004bba:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <bekle+0x12c>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	4846      	ldr	r0, [pc, #280]	; (8004cdc <bekle+0x130>)
 8004bc4:	f004 fc78 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d109      	bne.n	8004be2 <bekle+0x36>
 8004bce:	4b40      	ldr	r3, [pc, #256]	; (8004cd0 <bekle+0x124>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <bekle+0x128>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d0ef      	beq.n	8004bba <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bda:	e002      	b.n	8004be2 <bekle+0x36>
    	butonKontrol = 1;
 8004bdc:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <bekle+0x12c>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004be2:	2108      	movs	r1, #8
 8004be4:	483e      	ldr	r0, [pc, #248]	; (8004ce0 <bekle+0x134>)
 8004be6:	f004 fc67 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d109      	bne.n	8004c04 <bekle+0x58>
 8004bf0:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <bekle+0x124>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <bekle+0x128>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d0ef      	beq.n	8004bdc <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bfc:	e002      	b.n	8004c04 <bekle+0x58>
    	butonKontrol = 1;
 8004bfe:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <bekle+0x12c>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c04:	2102      	movs	r1, #2
 8004c06:	4835      	ldr	r0, [pc, #212]	; (8004cdc <bekle+0x130>)
 8004c08:	f004 fc56 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d109      	bne.n	8004c26 <bekle+0x7a>
 8004c12:	4b2f      	ldr	r3, [pc, #188]	; (8004cd0 <bekle+0x124>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b2f      	ldr	r3, [pc, #188]	; (8004cd4 <bekle+0x128>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d0ef      	beq.n	8004bfe <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c1e:	e002      	b.n	8004c26 <bekle+0x7a>
    	butonKontrol = 1;
 8004c20:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <bekle+0x12c>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c26:	2104      	movs	r1, #4
 8004c28:	482c      	ldr	r0, [pc, #176]	; (8004cdc <bekle+0x130>)
 8004c2a:	f004 fc45 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d109      	bne.n	8004c48 <bekle+0x9c>
 8004c34:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <bekle+0x124>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <bekle+0x128>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d0ef      	beq.n	8004c20 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c40:	e002      	b.n	8004c48 <bekle+0x9c>
    	butonKontrol = 1;
 8004c42:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <bekle+0x12c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c48:	2108      	movs	r1, #8
 8004c4a:	4824      	ldr	r0, [pc, #144]	; (8004cdc <bekle+0x130>)
 8004c4c:	f004 fc34 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d109      	bne.n	8004c6a <bekle+0xbe>
 8004c56:	4b1e      	ldr	r3, [pc, #120]	; (8004cd0 <bekle+0x124>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <bekle+0x128>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d0ef      	beq.n	8004c42 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c62:	e002      	b.n	8004c6a <bekle+0xbe>
    	butonKontrol = 1;
 8004c64:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <bekle+0x12c>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c6a:	2180      	movs	r1, #128	; 0x80
 8004c6c:	481c      	ldr	r0, [pc, #112]	; (8004ce0 <bekle+0x134>)
 8004c6e:	f004 fc23 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <bekle+0xe0>
 8004c78:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <bekle+0x124>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <bekle+0x128>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d0ef      	beq.n	8004c64 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c84:	e002      	b.n	8004c8c <bekle+0xe0>
    	butonKontrol = 1;
 8004c86:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <bekle+0x12c>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c90:	4813      	ldr	r0, [pc, #76]	; (8004ce0 <bekle+0x134>)
 8004c92:	f004 fc11 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d109      	bne.n	8004cb0 <bekle+0x104>
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <bekle+0x124>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <bekle+0x128>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d0ee      	beq.n	8004c86 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ca8:	e002      	b.n	8004cb0 <bekle+0x104>
    	butonKontrol = 1;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <bekle+0x12c>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cb4:	480a      	ldr	r0, [pc, #40]	; (8004ce0 <bekle+0x134>)
 8004cb6:	f004 fbff 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <bekle+0x120>
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <bekle+0x124>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <bekle+0x128>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0ee      	beq.n	8004caa <bekle+0xfe>
    }

}
 8004ccc:	bf00      	nop
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000200 	.word	0x20000200
 8004cd4:	20000208 	.word	0x20000208
 8004cd8:	20000253 	.word	0x20000253
 8004cdc:	40010800 	.word	0x40010800
 8004ce0:	40011000 	.word	0x40011000

08004ce4 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004ce8:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <checkLCDBacklight+0x24>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <checkLCDBacklight+0x28>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b3b      	cmp	r3, #59	; 0x3b
 8004cf4:	d903      	bls.n	8004cfe <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f003 f904 	bl	8007f04 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004cfc:	e002      	b.n	8004d04 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004cfe:	2001      	movs	r0, #1
 8004d00:	f003 f900 	bl	8007f04 <lcd_backlight>
}
 8004d04:	bf00      	nop
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000200 	.word	0x20000200
 8004d0c:	2000021c 	.word	0x2000021c

08004d10 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <checkBasincSalteri+0x54>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <checkBasincSalteri+0x12>
		basincVar=1;
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <checkBasincSalteri+0x58>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <checkBasincSalteri+0x54>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d119      	bne.n	8004d5e <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d2e:	480f      	ldr	r0, [pc, #60]	; (8004d6c <checkBasincSalteri+0x5c>)
 8004d30:	f004 fbc2 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <checkBasincSalteri+0x60>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <checkBasincSalteri+0x64>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d90a      	bls.n	8004d5e <checkBasincSalteri+0x4e>
				basincVar=1;
 8004d48:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <checkBasincSalteri+0x58>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004d4e:	e006      	b.n	8004d5e <checkBasincSalteri+0x4e>
			timer5=millis;
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <checkBasincSalteri+0x60>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <checkBasincSalteri+0x64>)
 8004d56:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004d58:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <checkBasincSalteri+0x58>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	2000022b 	.word	0x2000022b
 8004d68:	20000227 	.word	0x20000227
 8004d6c:	40011000 	.word	0x40011000
 8004d70:	20000200 	.word	0x20000200
 8004d74:	20000218 	.word	0x20000218

08004d78 <checkBasGonder>:

void checkBasGonder() {
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <checkBasGonder+0x74>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d10b      	bne.n	8004d9c <checkBasGonder+0x24>
 8004d84:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <checkBasGonder+0x78>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <checkBasGonder+0x24>
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <checkBasGonder+0x7c>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d103      	bne.n	8004d9c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004d94:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <checkBasGonder+0x80>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e009      	b.n	8004db0 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <checkBasGonder+0x78>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	f083 0301 	eor.w	r3, r3, #1
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <checkBasGonder+0x80>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004db0:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <checkBasGonder+0x74>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10b      	bne.n	8004dd0 <checkBasGonder+0x58>
 8004db8:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <checkBasGonder+0x84>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <checkBasGonder+0x58>
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <checkBasGonder+0x7c>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d103      	bne.n	8004dd0 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <checkBasGonder+0x88>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004dce:	e009      	b.n	8004de4 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <checkBasGonder+0x84>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f083 0301 	eor.w	r3, r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004dde:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <checkBasGonder+0x88>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr
 8004dec:	20000225 	.word	0x20000225
 8004df0:	20000259 	.word	0x20000259
 8004df4:	20000233 	.word	0x20000233
 8004df8:	20000260 	.word	0x20000260
 8004dfc:	2000025c 	.word	0x2000025c
 8004e00:	20000261 	.word	0x20000261

08004e04 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004e08:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <checkKapiSecimleri+0x98>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004e10:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <checkKapiSecimleri+0x9c>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004e16:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <checkKapiSecimleri+0x98>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d10e      	bne.n	8004e3c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e22:	4820      	ldr	r0, [pc, #128]	; (8004ea4 <checkKapiSecimleri+0xa0>)
 8004e24:	f004 fb48 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004e2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <checkKapiSecimleri+0x9c>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e002      	b.n	8004e3c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <checkKapiSecimleri+0x9c>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004e3c:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <checkKapiSecimleri+0x98>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d10e      	bne.n	8004e62 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e48:	4816      	ldr	r0, [pc, #88]	; (8004ea4 <checkKapiSecimleri+0xa0>)
 8004e4a:	f004 fb35 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d103      	bne.n	8004e5c <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004e54:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <checkKapiSecimleri+0x9c>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	e002      	b.n	8004e62 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004e5c:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <checkKapiSecimleri+0x9c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004e62:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <checkKapiSecimleri+0x98>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d116      	bne.n	8004e98 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e6e:	480d      	ldr	r0, [pc, #52]	; (8004ea4 <checkKapiSecimleri+0xa0>)
 8004e70:	f004 fb22 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <checkKapiSecimleri+0x8e>
 8004e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e7e:	4809      	ldr	r0, [pc, #36]	; (8004ea4 <checkKapiSecimleri+0xa0>)
 8004e80:	f004 fb1a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <checkKapiSecimleri+0x9c>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004e90:	e002      	b.n	8004e98 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004e92:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <checkKapiSecimleri+0x9c>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	2000022c 	.word	0x2000022c
 8004ea0:	20000277 	.word	0x20000277
 8004ea4:	40010800 	.word	0x40010800

08004ea8 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004eac:	4b62      	ldr	r3, [pc, #392]	; (8005038 <checkAktifCalisma+0x190>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f041 833e 	bne.w	8006532 <checkAktifCalisma+0x168a>
 8004eb6:	4b61      	ldr	r3, [pc, #388]	; (800503c <checkAktifCalisma+0x194>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f041 8339 	bne.w	8006532 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004ec0:	4b5f      	ldr	r3, [pc, #380]	; (8005040 <checkAktifCalisma+0x198>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d11a      	bne.n	8004efe <checkAktifCalisma+0x56>
 8004ec8:	4b5e      	ldr	r3, [pc, #376]	; (8005044 <checkAktifCalisma+0x19c>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d116      	bne.n	8004efe <checkAktifCalisma+0x56>
 8004ed0:	4b5d      	ldr	r3, [pc, #372]	; (8005048 <checkAktifCalisma+0x1a0>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <checkAktifCalisma+0x46>
 8004ed8:	4b5c      	ldr	r3, [pc, #368]	; (800504c <checkAktifCalisma+0x1a4>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f083 0301 	eor.w	r3, r3, #1
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <checkAktifCalisma+0x46>
 8004ee6:	4b5a      	ldr	r3, [pc, #360]	; (8005050 <checkAktifCalisma+0x1a8>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d007      	beq.n	8004efe <checkAktifCalisma+0x56>
 8004eee:	4b59      	ldr	r3, [pc, #356]	; (8005054 <checkAktifCalisma+0x1ac>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <checkAktifCalisma+0x80>
 8004ef6:	4b58      	ldr	r3, [pc, #352]	; (8005058 <checkAktifCalisma+0x1b0>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d114      	bne.n	8004f28 <checkAktifCalisma+0x80>
 8004efe:	4b57      	ldr	r3, [pc, #348]	; (800505c <checkAktifCalisma+0x1b4>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <checkAktifCalisma+0x80>
 8004f06:	4b56      	ldr	r3, [pc, #344]	; (8005060 <checkAktifCalisma+0x1b8>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f14:	4853      	ldr	r0, [pc, #332]	; (8005064 <checkAktifCalisma+0x1bc>)
 8004f16:	f004 fae6 	bl	80094e6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004f1a:	4b53      	ldr	r3, [pc, #332]	; (8005068 <checkAktifCalisma+0x1c0>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004f20:	4b52      	ldr	r3, [pc, #328]	; (800506c <checkAktifCalisma+0x1c4>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e008      	b.n	8004f3a <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f2e:	484d      	ldr	r0, [pc, #308]	; (8005064 <checkAktifCalisma+0x1bc>)
 8004f30:	f004 fad9 	bl	80094e6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004f34:	4b4c      	ldr	r3, [pc, #304]	; (8005068 <checkAktifCalisma+0x1c0>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004f3a:	4b40      	ldr	r3, [pc, #256]	; (800503c <checkAktifCalisma+0x194>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d160      	bne.n	8005004 <checkAktifCalisma+0x15c>
 8004f42:	4b46      	ldr	r3, [pc, #280]	; (800505c <checkAktifCalisma+0x1b4>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d05c      	beq.n	8005004 <checkAktifCalisma+0x15c>
 8004f4a:	4b45      	ldr	r3, [pc, #276]	; (8005060 <checkAktifCalisma+0x1b8>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d058      	beq.n	8005004 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f56:	4843      	ldr	r0, [pc, #268]	; (8005064 <checkAktifCalisma+0x1bc>)
 8004f58:	f004 faae 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <checkAktifCalisma+0xc2>
 8004f62:	4b43      	ldr	r3, [pc, #268]	; (8005070 <checkAktifCalisma+0x1c8>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d04c      	beq.n	8005004 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	4841      	ldr	r0, [pc, #260]	; (8005074 <checkAktifCalisma+0x1cc>)
 8004f6e:	f004 faa3 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d145      	bne.n	8005004 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004f78:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <checkAktifCalisma+0x1d0>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d041      	beq.n	8005004 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f84:	4837      	ldr	r0, [pc, #220]	; (8005064 <checkAktifCalisma+0x1bc>)
 8004f86:	f004 fa97 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10e      	bne.n	8004fae <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f94:	4833      	ldr	r0, [pc, #204]	; (8005064 <checkAktifCalisma+0x1bc>)
 8004f96:	f004 fa8f 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d106      	bne.n	8004fae <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004fa0:	2140      	movs	r1, #64	; 0x40
 8004fa2:	4834      	ldr	r0, [pc, #208]	; (8005074 <checkAktifCalisma+0x1cc>)
 8004fa4:	f004 fa88 	bl	80094b8 <HAL_GPIO_ReadPin>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d003      	beq.n	8004fb6 <checkAktifCalisma+0x10e>
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <checkAktifCalisma+0x198>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d026      	beq.n	8005004 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <checkAktifCalisma+0x1a0>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f083 0301 	eor.w	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01f      	beq.n	8005004 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004fc4:	4b1f      	ldr	r3, [pc, #124]	; (8005044 <checkAktifCalisma+0x19c>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	f083 0301 	eor.w	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d018      	beq.n	8005004 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004fd2:	4b20      	ldr	r3, [pc, #128]	; (8005054 <checkAktifCalisma+0x1ac>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	f083 0301 	eor.w	r3, r3, #1
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d011      	beq.n	8005004 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004fe0:	4b26      	ldr	r3, [pc, #152]	; (800507c <checkAktifCalisma+0x1d4>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	f083 0301 	eor.w	r3, r3, #1
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004fee:	4b24      	ldr	r3, [pc, #144]	; (8005080 <checkAktifCalisma+0x1d8>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	f083 0301 	eor.w	r3, r3, #1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <checkAktifCalisma+0x198>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	e002      	b.n	800500a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <checkAktifCalisma+0x198>)
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800500a:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <checkAktifCalisma+0x198>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d03a      	beq.n	8005088 <checkAktifCalisma+0x1e0>
 8005012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005016:	4817      	ldr	r0, [pc, #92]	; (8005074 <checkAktifCalisma+0x1cc>)
 8005018:	f004 fa4e 	bl	80094b8 <HAL_GPIO_ReadPin>
 800501c:	4603      	mov	r3, r0
 800501e:	2b01      	cmp	r3, #1
 8005020:	d132      	bne.n	8005088 <checkAktifCalisma+0x1e0>
 8005022:	4b18      	ldr	r3, [pc, #96]	; (8005084 <checkAktifCalisma+0x1dc>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d02e      	beq.n	8005088 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800502a:	2201      	movs	r2, #1
 800502c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005030:	480c      	ldr	r0, [pc, #48]	; (8005064 <checkAktifCalisma+0x1bc>)
 8005032:	f004 fa58 	bl	80094e6 <HAL_GPIO_WritePin>
 8005036:	e02d      	b.n	8005094 <checkAktifCalisma+0x1ec>
 8005038:	20000242 	.word	0x20000242
 800503c:	20000241 	.word	0x20000241
 8005040:	20000259 	.word	0x20000259
 8005044:	2000025a 	.word	0x2000025a
 8005048:	2000025c 	.word	0x2000025c
 800504c:	20000254 	.word	0x20000254
 8005050:	20000237 	.word	0x20000237
 8005054:	2000025b 	.word	0x2000025b
 8005058:	20000236 	.word	0x20000236
 800505c:	20000276 	.word	0x20000276
 8005060:	20000277 	.word	0x20000277
 8005064:	40010c00 	.word	0x40010c00
 8005068:	20000278 	.word	0x20000278
 800506c:	20000263 	.word	0x20000263
 8005070:	20000260 	.word	0x20000260
 8005074:	40011000 	.word	0x40011000
 8005078:	20000227 	.word	0x20000227
 800507c:	2000025e 	.word	0x2000025e
 8005080:	2000025f 	.word	0x2000025f
 8005084:	20000232 	.word	0x20000232
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005088:	2200      	movs	r2, #0
 800508a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800508e:	4860      	ldr	r0, [pc, #384]	; (8005210 <checkAktifCalisma+0x368>)
 8005090:	f004 fa29 	bl	80094e6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005094:	4b5f      	ldr	r3, [pc, #380]	; (8005214 <checkAktifCalisma+0x36c>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d013      	beq.n	80050c4 <checkAktifCalisma+0x21c>
 800509c:	4b5e      	ldr	r3, [pc, #376]	; (8005218 <checkAktifCalisma+0x370>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d007      	beq.n	80050b4 <checkAktifCalisma+0x20c>
 80050a4:	4b5c      	ldr	r3, [pc, #368]	; (8005218 <checkAktifCalisma+0x370>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d003      	beq.n	80050b4 <checkAktifCalisma+0x20c>
 80050ac:	4b5b      	ldr	r3, [pc, #364]	; (800521c <checkAktifCalisma+0x374>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d107      	bne.n	80050c4 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80050b4:	2201      	movs	r2, #1
 80050b6:	2104      	movs	r1, #4
 80050b8:	4855      	ldr	r0, [pc, #340]	; (8005210 <checkAktifCalisma+0x368>)
 80050ba:	f004 fa14 	bl	80094e6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80050be:	4b58      	ldr	r3, [pc, #352]	; (8005220 <checkAktifCalisma+0x378>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80050c4:	4b56      	ldr	r3, [pc, #344]	; (8005220 <checkAktifCalisma+0x378>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d02f      	beq.n	800512c <checkAktifCalisma+0x284>
 80050cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050d0:	484f      	ldr	r0, [pc, #316]	; (8005210 <checkAktifCalisma+0x368>)
 80050d2:	f004 f9f1 	bl	80094b8 <HAL_GPIO_ReadPin>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d106      	bne.n	80050ea <checkAktifCalisma+0x242>
 80050dc:	4b51      	ldr	r3, [pc, #324]	; (8005224 <checkAktifCalisma+0x37c>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f083 0301 	eor.w	r3, r3, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <checkAktifCalisma+0x250>
 80050ea:	2102      	movs	r1, #2
 80050ec:	484e      	ldr	r0, [pc, #312]	; (8005228 <checkAktifCalisma+0x380>)
 80050ee:	f004 f9e3 	bl	80094b8 <HAL_GPIO_ReadPin>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d119      	bne.n	800512c <checkAktifCalisma+0x284>
 80050f8:	4b4c      	ldr	r3, [pc, #304]	; (800522c <checkAktifCalisma+0x384>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <checkAktifCalisma+0x284>
 8005100:	4b4b      	ldr	r3, [pc, #300]	; (8005230 <checkAktifCalisma+0x388>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d011      	beq.n	800512c <checkAktifCalisma+0x284>
 8005108:	4b4a      	ldr	r3, [pc, #296]	; (8005234 <checkAktifCalisma+0x38c>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00d      	beq.n	800512c <checkAktifCalisma+0x284>
 8005110:	4b49      	ldr	r3, [pc, #292]	; (8005238 <checkAktifCalisma+0x390>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f083 0301 	eor.w	r3, r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d006      	beq.n	800512c <checkAktifCalisma+0x284>
			timer2=millis;
 800511e:	4b47      	ldr	r3, [pc, #284]	; (800523c <checkAktifCalisma+0x394>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a47      	ldr	r2, [pc, #284]	; (8005240 <checkAktifCalisma+0x398>)
 8005124:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005126:	4b44      	ldr	r3, [pc, #272]	; (8005238 <checkAktifCalisma+0x390>)
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 800512c:	4b43      	ldr	r3, [pc, #268]	; (800523c <checkAktifCalisma+0x394>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b43      	ldr	r3, [pc, #268]	; (8005240 <checkAktifCalisma+0x398>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	4a43      	ldr	r2, [pc, #268]	; (8005244 <checkAktifCalisma+0x39c>)
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	4293      	cmp	r3, r2
 800513c:	d303      	bcc.n	8005146 <checkAktifCalisma+0x29e>
 800513e:	4b3e      	ldr	r3, [pc, #248]	; (8005238 <checkAktifCalisma+0x390>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d111      	bne.n	800516a <checkAktifCalisma+0x2c2>
 8005146:	4b39      	ldr	r3, [pc, #228]	; (800522c <checkAktifCalisma+0x384>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	f083 0301 	eor.w	r3, r3, #1
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <checkAktifCalisma+0x2c2>
 8005154:	4b36      	ldr	r3, [pc, #216]	; (8005230 <checkAktifCalisma+0x388>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f083 0301 	eor.w	r3, r3, #1
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <checkAktifCalisma+0x2c2>
 8005162:	4b34      	ldr	r3, [pc, #208]	; (8005234 <checkAktifCalisma+0x38c>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800516a:	2200      	movs	r2, #0
 800516c:	2104      	movs	r1, #4
 800516e:	4828      	ldr	r0, [pc, #160]	; (8005210 <checkAktifCalisma+0x368>)
 8005170:	f004 f9b9 	bl	80094e6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005174:	4b2a      	ldr	r3, [pc, #168]	; (8005220 <checkAktifCalisma+0x378>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800517a:	4b2f      	ldr	r3, [pc, #188]	; (8005238 <checkAktifCalisma+0x390>)
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <checkAktifCalisma+0x3a0>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d102      	bne.n	800518e <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005188:	4b30      	ldr	r3, [pc, #192]	; (800524c <checkAktifCalisma+0x3a4>)
 800518a:	2201      	movs	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800518e:	4b2e      	ldr	r3, [pc, #184]	; (8005248 <checkAktifCalisma+0x3a0>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d116      	bne.n	80051c4 <checkAktifCalisma+0x31c>
 8005196:	4b2e      	ldr	r3, [pc, #184]	; (8005250 <checkAktifCalisma+0x3a8>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d112      	bne.n	80051c4 <checkAktifCalisma+0x31c>
 800519e:	2101      	movs	r1, #1
 80051a0:	4821      	ldr	r0, [pc, #132]	; (8005228 <checkAktifCalisma+0x380>)
 80051a2:	f004 f989 	bl	80094b8 <HAL_GPIO_ReadPin>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10b      	bne.n	80051c4 <checkAktifCalisma+0x31c>
 80051ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051b0:	4817      	ldr	r0, [pc, #92]	; (8005210 <checkAktifCalisma+0x368>)
 80051b2:	f004 f981 	bl	80094b8 <HAL_GPIO_ReadPin>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80051bc:	4b23      	ldr	r3, [pc, #140]	; (800524c <checkAktifCalisma+0x3a4>)
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e011      	b.n	80051e8 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80051c4:	4b20      	ldr	r3, [pc, #128]	; (8005248 <checkAktifCalisma+0x3a0>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d10d      	bne.n	80051e8 <checkAktifCalisma+0x340>
 80051cc:	2101      	movs	r1, #1
 80051ce:	4816      	ldr	r0, [pc, #88]	; (8005228 <checkAktifCalisma+0x380>)
 80051d0:	f004 f972 	bl	80094b8 <HAL_GPIO_ReadPin>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d106      	bne.n	80051e8 <checkAktifCalisma+0x340>
 80051da:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <checkAktifCalisma+0x3a8>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80051e2:	4b1a      	ldr	r3, [pc, #104]	; (800524c <checkAktifCalisma+0x3a4>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <checkAktifCalisma+0x3a0>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d134      	bne.n	800525a <checkAktifCalisma+0x3b2>
 80051f0:	4b17      	ldr	r3, [pc, #92]	; (8005250 <checkAktifCalisma+0x3a8>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d130      	bne.n	800525a <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80051f8:	2101      	movs	r1, #1
 80051fa:	480b      	ldr	r0, [pc, #44]	; (8005228 <checkAktifCalisma+0x380>)
 80051fc:	f004 f95c 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d126      	bne.n	8005254 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005206:	4b11      	ldr	r3, [pc, #68]	; (800524c <checkAktifCalisma+0x3a4>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e025      	b.n	800525a <checkAktifCalisma+0x3b2>
 800520e:	bf00      	nop
 8005210:	40010c00 	.word	0x40010c00
 8005214:	20000259 	.word	0x20000259
 8005218:	20000233 	.word	0x20000233
 800521c:	20000237 	.word	0x20000237
 8005220:	2000025d 	.word	0x2000025d
 8005224:	20000260 	.word	0x20000260
 8005228:	40011000 	.word	0x40011000
 800522c:	20000276 	.word	0x20000276
 8005230:	20000277 	.word	0x20000277
 8005234:	20000227 	.word	0x20000227
 8005238:	20000255 	.word	0x20000255
 800523c:	20000200 	.word	0x20000200
 8005240:	2000020c 	.word	0x2000020c
 8005244:	20000238 	.word	0x20000238
 8005248:	20000228 	.word	0x20000228
 800524c:	2000027b 	.word	0x2000027b
 8005250:	20000225 	.word	0x20000225
			} else {
				cerceveVar=0;
 8005254:	4b7f      	ldr	r3, [pc, #508]	; (8005454 <checkAktifCalisma+0x5ac>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800525a:	4b7f      	ldr	r3, [pc, #508]	; (8005458 <checkAktifCalisma+0x5b0>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d17c      	bne.n	800535c <checkAktifCalisma+0x4b4>
 8005262:	4b7e      	ldr	r3, [pc, #504]	; (800545c <checkAktifCalisma+0x5b4>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d078      	beq.n	800535c <checkAktifCalisma+0x4b4>
 800526a:	4b7d      	ldr	r3, [pc, #500]	; (8005460 <checkAktifCalisma+0x5b8>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d074      	beq.n	800535c <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005276:	487b      	ldr	r0, [pc, #492]	; (8005464 <checkAktifCalisma+0x5bc>)
 8005278:	f004 f91e 	bl	80094b8 <HAL_GPIO_ReadPin>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <checkAktifCalisma+0x3e2>
 8005282:	4b79      	ldr	r3, [pc, #484]	; (8005468 <checkAktifCalisma+0x5c0>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d068      	beq.n	800535c <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800528a:	4b72      	ldr	r3, [pc, #456]	; (8005454 <checkAktifCalisma+0x5ac>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d064      	beq.n	800535c <checkAktifCalisma+0x4b4>
 8005292:	4b76      	ldr	r3, [pc, #472]	; (800546c <checkAktifCalisma+0x5c4>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	f083 0301 	eor.w	r3, r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05d      	beq.n	800535c <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80052a0:	2104      	movs	r1, #4
 80052a2:	4873      	ldr	r0, [pc, #460]	; (8005470 <checkAktifCalisma+0x5c8>)
 80052a4:	f004 f908 	bl	80094b8 <HAL_GPIO_ReadPin>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <checkAktifCalisma+0x40e>
 80052ae:	4b71      	ldr	r3, [pc, #452]	; (8005474 <checkAktifCalisma+0x5cc>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d152      	bne.n	800535c <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80052b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052ba:	486a      	ldr	r0, [pc, #424]	; (8005464 <checkAktifCalisma+0x5bc>)
 80052bc:	f004 f8fc 	bl	80094b8 <HAL_GPIO_ReadPin>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10e      	bne.n	80052e4 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80052c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052ca:	4866      	ldr	r0, [pc, #408]	; (8005464 <checkAktifCalisma+0x5bc>)
 80052cc:	f004 f8f4 	bl	80094b8 <HAL_GPIO_ReadPin>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d106      	bne.n	80052e4 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80052d6:	2140      	movs	r1, #64	; 0x40
 80052d8:	4865      	ldr	r0, [pc, #404]	; (8005470 <checkAktifCalisma+0x5c8>)
 80052da:	f004 f8ed 	bl	80094b8 <HAL_GPIO_ReadPin>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d003      	beq.n	80052ec <checkAktifCalisma+0x444>
 80052e4:	4b64      	ldr	r3, [pc, #400]	; (8005478 <checkAktifCalisma+0x5d0>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d037      	beq.n	800535c <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80052ec:	4b63      	ldr	r3, [pc, #396]	; (800547c <checkAktifCalisma+0x5d4>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	f083 0301 	eor.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d030      	beq.n	800535c <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80052fa:	4b61      	ldr	r3, [pc, #388]	; (8005480 <checkAktifCalisma+0x5d8>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	f083 0301 	eor.w	r3, r3, #1
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d029      	beq.n	800535c <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005308:	4b5e      	ldr	r3, [pc, #376]	; (8005484 <checkAktifCalisma+0x5dc>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	f083 0301 	eor.w	r3, r3, #1
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d022      	beq.n	800535c <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005316:	4b5c      	ldr	r3, [pc, #368]	; (8005488 <checkAktifCalisma+0x5e0>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	f083 0301 	eor.w	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01b      	beq.n	800535c <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005324:	4b59      	ldr	r3, [pc, #356]	; (800548c <checkAktifCalisma+0x5e4>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	f083 0301 	eor.w	r3, r3, #1
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d014      	beq.n	800535c <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005332:	4b57      	ldr	r3, [pc, #348]	; (8005490 <checkAktifCalisma+0x5e8>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	f083 0301 	eor.w	r3, r3, #1
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005340:	2201      	movs	r2, #1
 8005342:	2102      	movs	r1, #2
 8005344:	4847      	ldr	r0, [pc, #284]	; (8005464 <checkAktifCalisma+0x5bc>)
 8005346:	f004 f8ce 	bl	80094e6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800534a:	4b4b      	ldr	r3, [pc, #300]	; (8005478 <checkAktifCalisma+0x5d0>)
 800534c:	2201      	movs	r2, #1
 800534e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005350:	4b50      	ldr	r3, [pc, #320]	; (8005494 <checkAktifCalisma+0x5ec>)
 8005352:	2201      	movs	r2, #1
 8005354:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005356:	4b50      	ldr	r3, [pc, #320]	; (8005498 <checkAktifCalisma+0x5f0>)
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 800535c:	4b46      	ldr	r3, [pc, #280]	; (8005478 <checkAktifCalisma+0x5d0>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d033      	beq.n	80053cc <checkAktifCalisma+0x524>
 8005364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005368:	483e      	ldr	r0, [pc, #248]	; (8005464 <checkAktifCalisma+0x5bc>)
 800536a:	f004 f8a5 	bl	80094b8 <HAL_GPIO_ReadPin>
 800536e:	4603      	mov	r3, r0
 8005370:	2b01      	cmp	r3, #1
 8005372:	d106      	bne.n	8005382 <checkAktifCalisma+0x4da>
 8005374:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <checkAktifCalisma+0x5c0>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f083 0301 	eor.w	r3, r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <checkAktifCalisma+0x4f0>
 8005382:	2104      	movs	r1, #4
 8005384:	483a      	ldr	r0, [pc, #232]	; (8005470 <checkAktifCalisma+0x5c8>)
 8005386:	f004 f897 	bl	80094b8 <HAL_GPIO_ReadPin>
 800538a:	4603      	mov	r3, r0
 800538c:	2b01      	cmp	r3, #1
 800538e:	d11d      	bne.n	80053cc <checkAktifCalisma+0x524>
 8005390:	4b38      	ldr	r3, [pc, #224]	; (8005474 <checkAktifCalisma+0x5cc>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d019      	beq.n	80053cc <checkAktifCalisma+0x524>
 8005398:	4b30      	ldr	r3, [pc, #192]	; (800545c <checkAktifCalisma+0x5b4>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d015      	beq.n	80053cc <checkAktifCalisma+0x524>
 80053a0:	4b2f      	ldr	r3, [pc, #188]	; (8005460 <checkAktifCalisma+0x5b8>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d011      	beq.n	80053cc <checkAktifCalisma+0x524>
 80053a8:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <checkAktifCalisma+0x5ac>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00d      	beq.n	80053cc <checkAktifCalisma+0x524>
 80053b0:	4b3a      	ldr	r3, [pc, #232]	; (800549c <checkAktifCalisma+0x5f4>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f083 0301 	eor.w	r3, r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d006      	beq.n	80053cc <checkAktifCalisma+0x524>
			timer2=millis;
 80053be:	4b38      	ldr	r3, [pc, #224]	; (80054a0 <checkAktifCalisma+0x5f8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a38      	ldr	r2, [pc, #224]	; (80054a4 <checkAktifCalisma+0x5fc>)
 80053c4:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80053c6:	4b35      	ldr	r3, [pc, #212]	; (800549c <checkAktifCalisma+0x5f4>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80053cc:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <checkAktifCalisma+0x5f8>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4b34      	ldr	r3, [pc, #208]	; (80054a4 <checkAktifCalisma+0x5fc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	4a34      	ldr	r2, [pc, #208]	; (80054a8 <checkAktifCalisma+0x600>)
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	4293      	cmp	r3, r2
 80053dc:	d303      	bcc.n	80053e6 <checkAktifCalisma+0x53e>
 80053de:	4b2f      	ldr	r3, [pc, #188]	; (800549c <checkAktifCalisma+0x5f4>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d114      	bne.n	8005410 <checkAktifCalisma+0x568>
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <checkAktifCalisma+0x5b4>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f083 0301 	eor.w	r3, r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <checkAktifCalisma+0x568>
 80053f4:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <checkAktifCalisma+0x5b8>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f083 0301 	eor.w	r3, r3, #1
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <checkAktifCalisma+0x568>
 8005402:	4b14      	ldr	r3, [pc, #80]	; (8005454 <checkAktifCalisma+0x5ac>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	f083 0301 	eor.w	r3, r3, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005410:	2200      	movs	r2, #0
 8005412:	2102      	movs	r1, #2
 8005414:	4813      	ldr	r0, [pc, #76]	; (8005464 <checkAktifCalisma+0x5bc>)
 8005416:	f004 f866 	bl	80094e6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800541a:	4b17      	ldr	r3, [pc, #92]	; (8005478 <checkAktifCalisma+0x5d0>)
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005420:	4b1e      	ldr	r3, [pc, #120]	; (800549c <checkAktifCalisma+0x5f4>)
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <checkAktifCalisma+0x5d0>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d040      	beq.n	80054b0 <checkAktifCalisma+0x608>
 800542e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005432:	480f      	ldr	r0, [pc, #60]	; (8005470 <checkAktifCalisma+0x5c8>)
 8005434:	f004 f840 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d138      	bne.n	80054b0 <checkAktifCalisma+0x608>
 800543e:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <checkAktifCalisma+0x604>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d034      	beq.n	80054b0 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005446:	2201      	movs	r2, #1
 8005448:	2101      	movs	r1, #1
 800544a:	4806      	ldr	r0, [pc, #24]	; (8005464 <checkAktifCalisma+0x5bc>)
 800544c:	f004 f84b 	bl	80094e6 <HAL_GPIO_WritePin>
 8005450:	e033      	b.n	80054ba <checkAktifCalisma+0x612>
 8005452:	bf00      	nop
 8005454:	2000027b 	.word	0x2000027b
 8005458:	20000241 	.word	0x20000241
 800545c:	20000276 	.word	0x20000276
 8005460:	20000277 	.word	0x20000277
 8005464:	40010c00 	.word	0x40010c00
 8005468:	20000261 	.word	0x20000261
 800546c:	20000275 	.word	0x20000275
 8005470:	40011000 	.word	0x40011000
 8005474:	2000022a 	.word	0x2000022a
 8005478:	2000025c 	.word	0x2000025c
 800547c:	20000259 	.word	0x20000259
 8005480:	2000025d 	.word	0x2000025d
 8005484:	2000025a 	.word	0x2000025a
 8005488:	2000025b 	.word	0x2000025b
 800548c:	2000025e 	.word	0x2000025e
 8005490:	2000025f 	.word	0x2000025f
 8005494:	20000264 	.word	0x20000264
 8005498:	20000285 	.word	0x20000285
 800549c:	20000254 	.word	0x20000254
 80054a0:	20000200 	.word	0x20000200
 80054a4:	2000020c 	.word	0x2000020c
 80054a8:	20000239 	.word	0x20000239
 80054ac:	20000229 	.word	0x20000229
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2101      	movs	r1, #1
 80054b4:	4836      	ldr	r0, [pc, #216]	; (8005590 <checkAktifCalisma+0x6e8>)
 80054b6:	f004 f816 	bl	80094e6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80054ba:	4b36      	ldr	r3, [pc, #216]	; (8005594 <checkAktifCalisma+0x6ec>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 8080 	bne.w	80055c4 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80054c4:	4b34      	ldr	r3, [pc, #208]	; (8005598 <checkAktifCalisma+0x6f0>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d003      	beq.n	80054d4 <checkAktifCalisma+0x62c>
 80054cc:	4b32      	ldr	r3, [pc, #200]	; (8005598 <checkAktifCalisma+0x6f0>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d177      	bne.n	80055c4 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80054d4:	4b31      	ldr	r3, [pc, #196]	; (800559c <checkAktifCalisma+0x6f4>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d073      	beq.n	80055c4 <checkAktifCalisma+0x71c>
 80054dc:	4b30      	ldr	r3, [pc, #192]	; (80055a0 <checkAktifCalisma+0x6f8>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d06f      	beq.n	80055c4 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80054e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054e8:	4829      	ldr	r0, [pc, #164]	; (8005590 <checkAktifCalisma+0x6e8>)
 80054ea:	f003 ffe5 	bl	80094b8 <HAL_GPIO_ReadPin>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d167      	bne.n	80055c4 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80054f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054f8:	482a      	ldr	r0, [pc, #168]	; (80055a4 <checkAktifCalisma+0x6fc>)
 80054fa:	f003 ffdd 	bl	80094b8 <HAL_GPIO_ReadPin>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <checkAktifCalisma+0x664>
 8005504:	4b28      	ldr	r3, [pc, #160]	; (80055a8 <checkAktifCalisma+0x700>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d15b      	bne.n	80055c4 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800550c:	2140      	movs	r1, #64	; 0x40
 800550e:	4825      	ldr	r0, [pc, #148]	; (80055a4 <checkAktifCalisma+0x6fc>)
 8005510:	f003 ffd2 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005514:	4603      	mov	r3, r0
 8005516:	2b01      	cmp	r3, #1
 8005518:	d10f      	bne.n	800553a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800551a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800551e:	481c      	ldr	r0, [pc, #112]	; (8005590 <checkAktifCalisma+0x6e8>)
 8005520:	f003 ffca 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d107      	bne.n	800553a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800552a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800552e:	4818      	ldr	r0, [pc, #96]	; (8005590 <checkAktifCalisma+0x6e8>)
 8005530:	f003 ffc2 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005534:	4603      	mov	r3, r0
 8005536:	2b01      	cmp	r3, #1
 8005538:	d003      	beq.n	8005542 <checkAktifCalisma+0x69a>
 800553a:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <checkAktifCalisma+0x704>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d040      	beq.n	80055c4 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005542:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <checkAktifCalisma+0x708>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	f083 0301 	eor.w	r3, r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d039      	beq.n	80055c4 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005550:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <checkAktifCalisma+0x70c>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f083 0301 	eor.w	r3, r3, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d032      	beq.n	80055c4 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800555e:	4b16      	ldr	r3, [pc, #88]	; (80055b8 <checkAktifCalisma+0x710>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	f083 0301 	eor.w	r3, r3, #1
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d02b      	beq.n	80055c4 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 800556c:	4b13      	ldr	r3, [pc, #76]	; (80055bc <checkAktifCalisma+0x714>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f083 0301 	eor.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d024      	beq.n	80055c4 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <checkAktifCalisma+0x718>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f083 0301 	eor.w	r3, r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01d      	beq.n	80055c4 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <checkAktifCalisma+0x704>)
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e01c      	b.n	80055ca <checkAktifCalisma+0x722>
 8005590:	40010c00 	.word	0x40010c00
 8005594:	20000241 	.word	0x20000241
 8005598:	20000233 	.word	0x20000233
 800559c:	20000276 	.word	0x20000276
 80055a0:	20000277 	.word	0x20000277
 80055a4:	40011000 	.word	0x40011000
 80055a8:	20000234 	.word	0x20000234
 80055ac:	2000025a 	.word	0x2000025a
 80055b0:	20000259 	.word	0x20000259
 80055b4:	2000025d 	.word	0x2000025d
 80055b8:	2000025c 	.word	0x2000025c
 80055bc:	2000025b 	.word	0x2000025b
 80055c0:	2000025f 	.word	0x2000025f
		} else {
			devmotoryukaricalisiyor=0;
 80055c4:	4b64      	ldr	r3, [pc, #400]	; (8005758 <checkAktifCalisma+0x8b0>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80055ca:	4b63      	ldr	r3, [pc, #396]	; (8005758 <checkAktifCalisma+0x8b0>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80055d2:	2201      	movs	r2, #1
 80055d4:	2120      	movs	r1, #32
 80055d6:	4861      	ldr	r0, [pc, #388]	; (800575c <checkAktifCalisma+0x8b4>)
 80055d8:	f003 ff85 	bl	80094e6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80055dc:	4b60      	ldr	r3, [pc, #384]	; (8005760 <checkAktifCalisma+0x8b8>)
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80055e2:	4b5f      	ldr	r3, [pc, #380]	; (8005760 <checkAktifCalisma+0x8b8>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d025      	beq.n	8005636 <checkAktifCalisma+0x78e>
 80055ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055ee:	485d      	ldr	r0, [pc, #372]	; (8005764 <checkAktifCalisma+0x8bc>)
 80055f0:	f003 ff62 	bl	80094b8 <HAL_GPIO_ReadPin>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d007      	beq.n	800560a <checkAktifCalisma+0x762>
 80055fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055fe:	4857      	ldr	r0, [pc, #348]	; (800575c <checkAktifCalisma+0x8b4>)
 8005600:	f003 ff5a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d115      	bne.n	8005636 <checkAktifCalisma+0x78e>
 800560a:	4b57      	ldr	r3, [pc, #348]	; (8005768 <checkAktifCalisma+0x8c0>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d011      	beq.n	8005636 <checkAktifCalisma+0x78e>
 8005612:	4b56      	ldr	r3, [pc, #344]	; (800576c <checkAktifCalisma+0x8c4>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <checkAktifCalisma+0x78e>
 800561a:	4b55      	ldr	r3, [pc, #340]	; (8005770 <checkAktifCalisma+0x8c8>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f083 0301 	eor.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005628:	4b52      	ldr	r3, [pc, #328]	; (8005774 <checkAktifCalisma+0x8cc>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a52      	ldr	r2, [pc, #328]	; (8005778 <checkAktifCalisma+0x8d0>)
 800562e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005630:	4b4f      	ldr	r3, [pc, #316]	; (8005770 <checkAktifCalisma+0x8c8>)
 8005632:	2201      	movs	r2, #1
 8005634:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005636:	4b4f      	ldr	r3, [pc, #316]	; (8005774 <checkAktifCalisma+0x8cc>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b4f      	ldr	r3, [pc, #316]	; (8005778 <checkAktifCalisma+0x8d0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	4a4e      	ldr	r2, [pc, #312]	; (800577c <checkAktifCalisma+0x8d4>)
 8005642:	7812      	ldrb	r2, [r2, #0]
 8005644:	4293      	cmp	r3, r2
 8005646:	d303      	bcc.n	8005650 <checkAktifCalisma+0x7a8>
 8005648:	4b49      	ldr	r3, [pc, #292]	; (8005770 <checkAktifCalisma+0x8c8>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10d      	bne.n	800566c <checkAktifCalisma+0x7c4>
 8005650:	4b45      	ldr	r3, [pc, #276]	; (8005768 <checkAktifCalisma+0x8c0>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	f083 0301 	eor.w	r3, r3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <checkAktifCalisma+0x7c4>
 800565e:	4b43      	ldr	r3, [pc, #268]	; (800576c <checkAktifCalisma+0x8c4>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	f083 0301 	eor.w	r3, r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800566c:	2200      	movs	r2, #0
 800566e:	2120      	movs	r1, #32
 8005670:	483a      	ldr	r0, [pc, #232]	; (800575c <checkAktifCalisma+0x8b4>)
 8005672:	f003 ff38 	bl	80094e6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005676:	4b3a      	ldr	r3, [pc, #232]	; (8005760 <checkAktifCalisma+0x8b8>)
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 800567c:	4b3c      	ldr	r3, [pc, #240]	; (8005770 <checkAktifCalisma+0x8c8>)
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005682:	4b3f      	ldr	r3, [pc, #252]	; (8005780 <checkAktifCalisma+0x8d8>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f040 8088 	bne.w	800579c <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800568c:	4b3d      	ldr	r3, [pc, #244]	; (8005784 <checkAktifCalisma+0x8dc>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d003      	beq.n	800569c <checkAktifCalisma+0x7f4>
 8005694:	4b3b      	ldr	r3, [pc, #236]	; (8005784 <checkAktifCalisma+0x8dc>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d17f      	bne.n	800579c <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 800569c:	4b32      	ldr	r3, [pc, #200]	; (8005768 <checkAktifCalisma+0x8c0>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d07b      	beq.n	800579c <checkAktifCalisma+0x8f4>
 80056a4:	4b31      	ldr	r3, [pc, #196]	; (800576c <checkAktifCalisma+0x8c4>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d077      	beq.n	800579c <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80056ac:	2140      	movs	r1, #64	; 0x40
 80056ae:	482b      	ldr	r0, [pc, #172]	; (800575c <checkAktifCalisma+0x8b4>)
 80056b0:	f003 ff02 	bl	80094b8 <HAL_GPIO_ReadPin>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d170      	bne.n	800579c <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80056ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056be:	4827      	ldr	r0, [pc, #156]	; (800575c <checkAktifCalisma+0x8b4>)
 80056c0:	f003 fefa 	bl	80094b8 <HAL_GPIO_ReadPin>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <checkAktifCalisma+0x82a>
 80056ca:	4b2f      	ldr	r3, [pc, #188]	; (8005788 <checkAktifCalisma+0x8e0>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d164      	bne.n	800579c <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80056d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056d6:	4823      	ldr	r0, [pc, #140]	; (8005764 <checkAktifCalisma+0x8bc>)
 80056d8:	f003 feee 	bl	80094b8 <HAL_GPIO_ReadPin>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d10f      	bne.n	8005702 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80056e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056e6:	481f      	ldr	r0, [pc, #124]	; (8005764 <checkAktifCalisma+0x8bc>)
 80056e8:	f003 fee6 	bl	80094b8 <HAL_GPIO_ReadPin>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d107      	bne.n	8005702 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80056f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056f6:	481b      	ldr	r0, [pc, #108]	; (8005764 <checkAktifCalisma+0x8bc>)
 80056f8:	f003 fede 	bl	80094b8 <HAL_GPIO_ReadPin>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d003      	beq.n	800570a <checkAktifCalisma+0x862>
 8005702:	4b22      	ldr	r3, [pc, #136]	; (800578c <checkAktifCalisma+0x8e4>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d048      	beq.n	800579c <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800570a:	4b21      	ldr	r3, [pc, #132]	; (8005790 <checkAktifCalisma+0x8e8>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f083 0301 	eor.w	r3, r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d041      	beq.n	800579c <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005718:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <checkAktifCalisma+0x8ec>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f083 0301 	eor.w	r3, r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d03a      	beq.n	800579c <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005726:	4b1c      	ldr	r3, [pc, #112]	; (8005798 <checkAktifCalisma+0x8f0>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f083 0301 	eor.w	r3, r3, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d033      	beq.n	800579c <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005734:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <checkAktifCalisma+0x8b8>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f083 0301 	eor.w	r3, r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d02c      	beq.n	800579c <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <checkAktifCalisma+0x8b0>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	f083 0301 	eor.w	r3, r3, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d025      	beq.n	800579c <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <checkAktifCalisma+0x8e4>)
 8005752:	2201      	movs	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e024      	b.n	80057a2 <checkAktifCalisma+0x8fa>
 8005758:	2000025a 	.word	0x2000025a
 800575c:	40011000 	.word	0x40011000
 8005760:	2000025e 	.word	0x2000025e
 8005764:	40010c00 	.word	0x40010c00
 8005768:	20000276 	.word	0x20000276
 800576c:	20000277 	.word	0x20000277
 8005770:	20000256 	.word	0x20000256
 8005774:	20000200 	.word	0x20000200
 8005778:	2000020c 	.word	0x2000020c
 800577c:	2000023a 	.word	0x2000023a
 8005780:	20000241 	.word	0x20000241
 8005784:	20000233 	.word	0x20000233
 8005788:	20000235 	.word	0x20000235
 800578c:	2000025b 	.word	0x2000025b
 8005790:	20000259 	.word	0x20000259
 8005794:	2000025d 	.word	0x2000025d
 8005798:	2000025c 	.word	0x2000025c
		} else {
			devmotorasagicalisiyor=0;
 800579c:	4b96      	ldr	r3, [pc, #600]	; (80059f8 <checkAktifCalisma+0xb50>)
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80057a2:	4b95      	ldr	r3, [pc, #596]	; (80059f8 <checkAktifCalisma+0xb50>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80057aa:	2201      	movs	r2, #1
 80057ac:	2110      	movs	r1, #16
 80057ae:	4893      	ldr	r0, [pc, #588]	; (80059fc <checkAktifCalisma+0xb54>)
 80057b0:	f003 fe99 	bl	80094e6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80057b4:	4b92      	ldr	r3, [pc, #584]	; (8005a00 <checkAktifCalisma+0xb58>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80057ba:	4b91      	ldr	r3, [pc, #580]	; (8005a00 <checkAktifCalisma+0xb58>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d024      	beq.n	800580c <checkAktifCalisma+0x964>
 80057c2:	2140      	movs	r1, #64	; 0x40
 80057c4:	488d      	ldr	r0, [pc, #564]	; (80059fc <checkAktifCalisma+0xb54>)
 80057c6:	f003 fe77 	bl	80094b8 <HAL_GPIO_ReadPin>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d007      	beq.n	80057e0 <checkAktifCalisma+0x938>
 80057d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057d4:	4889      	ldr	r0, [pc, #548]	; (80059fc <checkAktifCalisma+0xb54>)
 80057d6:	f003 fe6f 	bl	80094b8 <HAL_GPIO_ReadPin>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d115      	bne.n	800580c <checkAktifCalisma+0x964>
 80057e0:	4b88      	ldr	r3, [pc, #544]	; (8005a04 <checkAktifCalisma+0xb5c>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d011      	beq.n	800580c <checkAktifCalisma+0x964>
 80057e8:	4b87      	ldr	r3, [pc, #540]	; (8005a08 <checkAktifCalisma+0xb60>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00d      	beq.n	800580c <checkAktifCalisma+0x964>
 80057f0:	4b86      	ldr	r3, [pc, #536]	; (8005a0c <checkAktifCalisma+0xb64>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f083 0301 	eor.w	r3, r3, #1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d006      	beq.n	800580c <checkAktifCalisma+0x964>
			timer2=millis;
 80057fe:	4b84      	ldr	r3, [pc, #528]	; (8005a10 <checkAktifCalisma+0xb68>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a84      	ldr	r2, [pc, #528]	; (8005a14 <checkAktifCalisma+0xb6c>)
 8005804:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005806:	4b81      	ldr	r3, [pc, #516]	; (8005a0c <checkAktifCalisma+0xb64>)
 8005808:	2201      	movs	r2, #1
 800580a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800580c:	4b80      	ldr	r3, [pc, #512]	; (8005a10 <checkAktifCalisma+0xb68>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4b80      	ldr	r3, [pc, #512]	; (8005a14 <checkAktifCalisma+0xb6c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	4a80      	ldr	r2, [pc, #512]	; (8005a18 <checkAktifCalisma+0xb70>)
 8005818:	7812      	ldrb	r2, [r2, #0]
 800581a:	4293      	cmp	r3, r2
 800581c:	d303      	bcc.n	8005826 <checkAktifCalisma+0x97e>
 800581e:	4b7b      	ldr	r3, [pc, #492]	; (8005a0c <checkAktifCalisma+0xb64>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10d      	bne.n	8005842 <checkAktifCalisma+0x99a>
 8005826:	4b77      	ldr	r3, [pc, #476]	; (8005a04 <checkAktifCalisma+0xb5c>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	f083 0301 	eor.w	r3, r3, #1
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <checkAktifCalisma+0x99a>
 8005834:	4b74      	ldr	r3, [pc, #464]	; (8005a08 <checkAktifCalisma+0xb60>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f083 0301 	eor.w	r3, r3, #1
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005842:	2200      	movs	r2, #0
 8005844:	2110      	movs	r1, #16
 8005846:	486d      	ldr	r0, [pc, #436]	; (80059fc <checkAktifCalisma+0xb54>)
 8005848:	f003 fe4d 	bl	80094e6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 800584c:	4b6c      	ldr	r3, [pc, #432]	; (8005a00 <checkAktifCalisma+0xb58>)
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005852:	4b6e      	ldr	r3, [pc, #440]	; (8005a0c <checkAktifCalisma+0xb64>)
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800585c:	486f      	ldr	r0, [pc, #444]	; (8005a1c <checkAktifCalisma+0xb74>)
 800585e:	f003 fe2b 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d120      	bne.n	80058aa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800586c:	486b      	ldr	r0, [pc, #428]	; (8005a1c <checkAktifCalisma+0xb74>)
 800586e:	f003 fe23 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d118      	bne.n	80058aa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005878:	2104      	movs	r1, #4
 800587a:	4868      	ldr	r0, [pc, #416]	; (8005a1c <checkAktifCalisma+0xb74>)
 800587c:	f003 fe1c 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d111      	bne.n	80058aa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005886:	2102      	movs	r1, #2
 8005888:	4864      	ldr	r0, [pc, #400]	; (8005a1c <checkAktifCalisma+0xb74>)
 800588a:	f003 fe15 	bl	80094b8 <HAL_GPIO_ReadPin>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005894:	2101      	movs	r1, #1
 8005896:	4861      	ldr	r0, [pc, #388]	; (8005a1c <checkAktifCalisma+0xb74>)
 8005898:	f003 fe0e 	bl	80094b8 <HAL_GPIO_ReadPin>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <checkAktifCalisma+0xa02>
			makineStop=1;
 80058a2:	4b5f      	ldr	r3, [pc, #380]	; (8005a20 <checkAktifCalisma+0xb78>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e002      	b.n	80058b0 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80058aa:	4b5d      	ldr	r3, [pc, #372]	; (8005a20 <checkAktifCalisma+0xb78>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058b0:	4b5c      	ldr	r3, [pc, #368]	; (8005a24 <checkAktifCalisma+0xb7c>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d144      	bne.n	8005942 <checkAktifCalisma+0xa9a>
 80058b8:	4b5b      	ldr	r3, [pc, #364]	; (8005a28 <checkAktifCalisma+0xb80>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d003      	beq.n	80058c8 <checkAktifCalisma+0xa20>
 80058c0:	4b59      	ldr	r3, [pc, #356]	; (8005a28 <checkAktifCalisma+0xb80>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d13c      	bne.n	8005942 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058c8:	2180      	movs	r1, #128	; 0x80
 80058ca:	484c      	ldr	r0, [pc, #304]	; (80059fc <checkAktifCalisma+0xb54>)
 80058cc:	f003 fdf4 	bl	80094b8 <HAL_GPIO_ReadPin>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d103      	bne.n	80058de <checkAktifCalisma+0xa36>
 80058d6:	4b55      	ldr	r3, [pc, #340]	; (8005a2c <checkAktifCalisma+0xb84>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <checkAktifCalisma+0xa4e>
 80058de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058e2:	484e      	ldr	r0, [pc, #312]	; (8005a1c <checkAktifCalisma+0xb74>)
 80058e4:	f003 fde8 	bl	80094b8 <HAL_GPIO_ReadPin>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d129      	bne.n	8005942 <checkAktifCalisma+0xa9a>
 80058ee:	4b4f      	ldr	r3, [pc, #316]	; (8005a2c <checkAktifCalisma+0xb84>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d125      	bne.n	8005942 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058f6:	2104      	movs	r1, #4
 80058f8:	4840      	ldr	r0, [pc, #256]	; (80059fc <checkAktifCalisma+0xb54>)
 80058fa:	f003 fddd 	bl	80094b8 <HAL_GPIO_ReadPin>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b01      	cmp	r3, #1
 8005902:	d003      	beq.n	800590c <checkAktifCalisma+0xa64>
 8005904:	4b4a      	ldr	r3, [pc, #296]	; (8005a30 <checkAktifCalisma+0xb88>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11a      	bne.n	8005942 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800590c:	2102      	movs	r1, #2
 800590e:	483b      	ldr	r0, [pc, #236]	; (80059fc <checkAktifCalisma+0xb54>)
 8005910:	f003 fdd2 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d113      	bne.n	8005942 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800591a:	4b46      	ldr	r3, [pc, #280]	; (8005a34 <checkAktifCalisma+0xb8c>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f083 0301 	eor.w	r3, r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005928:	4b3d      	ldr	r3, [pc, #244]	; (8005a20 <checkAktifCalisma+0xb78>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005930:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <checkAktifCalisma+0xb90>)
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005936:	4b36      	ldr	r3, [pc, #216]	; (8005a10 <checkAktifCalisma+0xb68>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a40      	ldr	r2, [pc, #256]	; (8005a3c <checkAktifCalisma+0xb94>)
 800593c:	6013      	str	r3, [r2, #0]
			bekle();
 800593e:	f7ff f935 	bl	8004bac <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005942:	4b33      	ldr	r3, [pc, #204]	; (8005a10 <checkAktifCalisma+0xb68>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4b3d      	ldr	r3, [pc, #244]	; (8005a3c <checkAktifCalisma+0xb94>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	4a3c      	ldr	r2, [pc, #240]	; (8005a40 <checkAktifCalisma+0xb98>)
 800594e:	7812      	ldrb	r2, [r2, #0]
 8005950:	4293      	cmp	r3, r2
 8005952:	d211      	bcs.n	8005978 <checkAktifCalisma+0xad0>
 8005954:	2104      	movs	r1, #4
 8005956:	4829      	ldr	r0, [pc, #164]	; (80059fc <checkAktifCalisma+0xb54>)
 8005958:	f003 fdae 	bl	80094b8 <HAL_GPIO_ReadPin>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <checkAktifCalisma+0xad0>
 8005962:	4b33      	ldr	r3, [pc, #204]	; (8005a30 <checkAktifCalisma+0xb88>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d006      	beq.n	8005978 <checkAktifCalisma+0xad0>
 800596a:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <checkAktifCalisma+0xb78>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	f083 0301 	eor.w	r3, r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005978:	4b2f      	ldr	r3, [pc, #188]	; (8005a38 <checkAktifCalisma+0xb90>)
 800597a:	2200      	movs	r2, #0
 800597c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800597e:	4b29      	ldr	r3, [pc, #164]	; (8005a24 <checkAktifCalisma+0xb7c>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d160      	bne.n	8005a48 <checkAktifCalisma+0xba0>
 8005986:	4b28      	ldr	r3, [pc, #160]	; (8005a28 <checkAktifCalisma+0xb80>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d003      	beq.n	8005996 <checkAktifCalisma+0xaee>
 800598e:	4b26      	ldr	r3, [pc, #152]	; (8005a28 <checkAktifCalisma+0xb80>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b03      	cmp	r3, #3
 8005994:	d158      	bne.n	8005a48 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005996:	2104      	movs	r1, #4
 8005998:	4818      	ldr	r0, [pc, #96]	; (80059fc <checkAktifCalisma+0xb54>)
 800599a:	f003 fd8d 	bl	80094b8 <HAL_GPIO_ReadPin>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d003      	beq.n	80059ac <checkAktifCalisma+0xb04>
 80059a4:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <checkAktifCalisma+0xb88>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d14d      	bne.n	8005a48 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059ac:	2102      	movs	r1, #2
 80059ae:	4813      	ldr	r0, [pc, #76]	; (80059fc <checkAktifCalisma+0xb54>)
 80059b0:	f003 fd82 	bl	80094b8 <HAL_GPIO_ReadPin>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d146      	bne.n	8005a48 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059ba:	2180      	movs	r1, #128	; 0x80
 80059bc:	480f      	ldr	r0, [pc, #60]	; (80059fc <checkAktifCalisma+0xb54>)
 80059be:	f003 fd7b 	bl	80094b8 <HAL_GPIO_ReadPin>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <checkAktifCalisma+0xb28>
 80059c8:	4b18      	ldr	r3, [pc, #96]	; (8005a2c <checkAktifCalisma+0xb84>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <checkAktifCalisma+0xb40>
 80059d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059d4:	4811      	ldr	r0, [pc, #68]	; (8005a1c <checkAktifCalisma+0xb74>)
 80059d6:	f003 fd6f 	bl	80094b8 <HAL_GPIO_ReadPin>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d133      	bne.n	8005a48 <checkAktifCalisma+0xba0>
 80059e0:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <checkAktifCalisma+0xb84>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d12f      	bne.n	8005a48 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80059e8:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <checkAktifCalisma+0xb78>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02b      	beq.n	8005a48 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80059f0:	4b14      	ldr	r3, [pc, #80]	; (8005a44 <checkAktifCalisma+0xb9c>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e02a      	b.n	8005a4e <checkAktifCalisma+0xba6>
 80059f8:	2000025b 	.word	0x2000025b
 80059fc:	40011000 	.word	0x40011000
 8005a00:	2000025f 	.word	0x2000025f
 8005a04:	20000276 	.word	0x20000276
 8005a08:	20000277 	.word	0x20000277
 8005a0c:	20000257 	.word	0x20000257
 8005a10:	20000200 	.word	0x20000200
 8005a14:	2000020c 	.word	0x2000020c
 8005a18:	2000023a 	.word	0x2000023a
 8005a1c:	40010c00 	.word	0x40010c00
 8005a20:	20000266 	.word	0x20000266
 8005a24:	2000022d 	.word	0x2000022d
 8005a28:	2000022c 	.word	0x2000022c
 8005a2c:	20000230 	.word	0x20000230
 8005a30:	2000022a 	.word	0x2000022a
 8005a34:	20000253 	.word	0x20000253
 8005a38:	20000267 	.word	0x20000267
 8005a3c:	20000204 	.word	0x20000204
 8005a40:	2000023d 	.word	0x2000023d
 8005a44:	20000268 	.word	0x20000268
		} else {
			kapi1butonkontrol=0;
 8005a48:	4b8b      	ldr	r3, [pc, #556]	; (8005c78 <checkAktifCalisma+0xdd0>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a4e:	4b8b      	ldr	r3, [pc, #556]	; (8005c7c <checkAktifCalisma+0xdd4>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d121      	bne.n	8005a9a <checkAktifCalisma+0xbf2>
 8005a56:	4b8a      	ldr	r3, [pc, #552]	; (8005c80 <checkAktifCalisma+0xdd8>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d003      	beq.n	8005a66 <checkAktifCalisma+0xbbe>
 8005a5e:	4b88      	ldr	r3, [pc, #544]	; (8005c80 <checkAktifCalisma+0xdd8>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d119      	bne.n	8005a9a <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a66:	2104      	movs	r1, #4
 8005a68:	4886      	ldr	r0, [pc, #536]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005a6a:	f003 fd25 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d003      	beq.n	8005a7c <checkAktifCalisma+0xbd4>
 8005a74:	4b84      	ldr	r3, [pc, #528]	; (8005c88 <checkAktifCalisma+0xde0>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10e      	bne.n	8005a9a <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	4881      	ldr	r0, [pc, #516]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005a80:	f003 fd1a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d107      	bne.n	8005a9a <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005a8a:	4b80      	ldr	r3, [pc, #512]	; (8005c8c <checkAktifCalisma+0xde4>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005a92:	4b7f      	ldr	r3, [pc, #508]	; (8005c90 <checkAktifCalisma+0xde8>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	e002      	b.n	8005aa0 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005a9a:	4b7d      	ldr	r3, [pc, #500]	; (8005c90 <checkAktifCalisma+0xde8>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005aa0:	4b75      	ldr	r3, [pc, #468]	; (8005c78 <checkAktifCalisma+0xdd0>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d107      	bne.n	8005ab8 <checkAktifCalisma+0xc10>
 8005aa8:	4b79      	ldr	r3, [pc, #484]	; (8005c90 <checkAktifCalisma+0xde8>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d103      	bne.n	8005ab8 <checkAktifCalisma+0xc10>
 8005ab0:	4b78      	ldr	r3, [pc, #480]	; (8005c94 <checkAktifCalisma+0xdec>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005ab8:	2201      	movs	r2, #1
 8005aba:	2180      	movs	r1, #128	; 0x80
 8005abc:	4876      	ldr	r0, [pc, #472]	; (8005c98 <checkAktifCalisma+0xdf0>)
 8005abe:	f003 fd12 	bl	80094e6 <HAL_GPIO_WritePin>
 8005ac2:	e004      	b.n	8005ace <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2180      	movs	r1, #128	; 0x80
 8005ac8:	4873      	ldr	r0, [pc, #460]	; (8005c98 <checkAktifCalisma+0xdf0>)
 8005aca:	f003 fd0c 	bl	80094e6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ace:	4b73      	ldr	r3, [pc, #460]	; (8005c9c <checkAktifCalisma+0xdf4>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d141      	bne.n	8005b5a <checkAktifCalisma+0xcb2>
 8005ad6:	4b6a      	ldr	r3, [pc, #424]	; (8005c80 <checkAktifCalisma+0xdd8>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d003      	beq.n	8005ae6 <checkAktifCalisma+0xc3e>
 8005ade:	4b68      	ldr	r3, [pc, #416]	; (8005c80 <checkAktifCalisma+0xdd8>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d139      	bne.n	8005b5a <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005aea:	4866      	ldr	r0, [pc, #408]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005aec:	f003 fce4 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <checkAktifCalisma+0xc56>
 8005af6:	4b6a      	ldr	r3, [pc, #424]	; (8005ca0 <checkAktifCalisma+0xdf8>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <checkAktifCalisma+0xc6e>
 8005afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b02:	4868      	ldr	r0, [pc, #416]	; (8005ca4 <checkAktifCalisma+0xdfc>)
 8005b04:	f003 fcd8 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d125      	bne.n	8005b5a <checkAktifCalisma+0xcb2>
 8005b0e:	4b64      	ldr	r3, [pc, #400]	; (8005ca0 <checkAktifCalisma+0xdf8>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d121      	bne.n	8005b5a <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b16:	2102      	movs	r1, #2
 8005b18:	485a      	ldr	r0, [pc, #360]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005b1a:	f003 fccd 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d11a      	bne.n	8005b5a <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b24:	2104      	movs	r1, #4
 8005b26:	4857      	ldr	r0, [pc, #348]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005b28:	f003 fcc6 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d113      	bne.n	8005b5a <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005b32:	4b56      	ldr	r3, [pc, #344]	; (8005c8c <checkAktifCalisma+0xde4>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00f      	beq.n	8005b5a <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005b3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <checkAktifCalisma+0xe00>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f083 0301 	eor.w	r3, r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005b48:	4b58      	ldr	r3, [pc, #352]	; (8005cac <checkAktifCalisma+0xe04>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005b4e:	4b58      	ldr	r3, [pc, #352]	; (8005cb0 <checkAktifCalisma+0xe08>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a58      	ldr	r2, [pc, #352]	; (8005cb4 <checkAktifCalisma+0xe0c>)
 8005b54:	6013      	str	r3, [r2, #0]
			bekle();
 8005b56:	f7ff f829 	bl	8004bac <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005b5a:	4b55      	ldr	r3, [pc, #340]	; (8005cb0 <checkAktifCalisma+0xe08>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b55      	ldr	r3, [pc, #340]	; (8005cb4 <checkAktifCalisma+0xe0c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	4a54      	ldr	r2, [pc, #336]	; (8005cb8 <checkAktifCalisma+0xe10>)
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d20d      	bcs.n	8005b88 <checkAktifCalisma+0xce0>
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	4845      	ldr	r0, [pc, #276]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005b70:	f003 fca2 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d006      	beq.n	8005b88 <checkAktifCalisma+0xce0>
 8005b7a:	4b44      	ldr	r3, [pc, #272]	; (8005c8c <checkAktifCalisma+0xde4>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f083 0301 	eor.w	r3, r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005b88:	4b48      	ldr	r3, [pc, #288]	; (8005cac <checkAktifCalisma+0xe04>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b8e:	4b43      	ldr	r3, [pc, #268]	; (8005c9c <checkAktifCalisma+0xdf4>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d135      	bne.n	8005c02 <checkAktifCalisma+0xd5a>
 8005b96:	4b3a      	ldr	r3, [pc, #232]	; (8005c80 <checkAktifCalisma+0xdd8>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d003      	beq.n	8005ba6 <checkAktifCalisma+0xcfe>
 8005b9e:	4b38      	ldr	r3, [pc, #224]	; (8005c80 <checkAktifCalisma+0xdd8>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d12d      	bne.n	8005c02 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005baa:	4836      	ldr	r0, [pc, #216]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005bac:	f003 fc84 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <checkAktifCalisma+0xd16>
 8005bb6:	4b3a      	ldr	r3, [pc, #232]	; (8005ca0 <checkAktifCalisma+0xdf8>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00b      	beq.n	8005bd6 <checkAktifCalisma+0xd2e>
 8005bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bc2:	4838      	ldr	r0, [pc, #224]	; (8005ca4 <checkAktifCalisma+0xdfc>)
 8005bc4:	f003 fc78 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d119      	bne.n	8005c02 <checkAktifCalisma+0xd5a>
 8005bce:	4b34      	ldr	r3, [pc, #208]	; (8005ca0 <checkAktifCalisma+0xdf8>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d115      	bne.n	8005c02 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	482a      	ldr	r0, [pc, #168]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005bda:	f003 fc6d 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d10e      	bne.n	8005c02 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005be4:	2104      	movs	r1, #4
 8005be6:	4827      	ldr	r0, [pc, #156]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005be8:	f003 fc66 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d107      	bne.n	8005c02 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005bf2:	4b26      	ldr	r3, [pc, #152]	; (8005c8c <checkAktifCalisma+0xde4>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005bfa:	4b30      	ldr	r3, [pc, #192]	; (8005cbc <checkAktifCalisma+0xe14>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	e002      	b.n	8005c08 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005c02:	4b2e      	ldr	r3, [pc, #184]	; (8005cbc <checkAktifCalisma+0xe14>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <checkAktifCalisma+0xdf4>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d11d      	bne.n	8005c4c <checkAktifCalisma+0xda4>
 8005c10:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <checkAktifCalisma+0xdd8>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d003      	beq.n	8005c20 <checkAktifCalisma+0xd78>
 8005c18:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <checkAktifCalisma+0xdd8>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d115      	bne.n	8005c4c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c20:	2102      	movs	r1, #2
 8005c22:	4818      	ldr	r0, [pc, #96]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005c24:	f003 fc48 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d10e      	bne.n	8005c4c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c2e:	2104      	movs	r1, #4
 8005c30:	4814      	ldr	r0, [pc, #80]	; (8005c84 <checkAktifCalisma+0xddc>)
 8005c32:	f003 fc41 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d107      	bne.n	8005c4c <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005c3c:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <checkAktifCalisma+0xde4>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005c44:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <checkAktifCalisma+0xe18>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <checkAktifCalisma+0xe18>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005c52:	4b1a      	ldr	r3, [pc, #104]	; (8005cbc <checkAktifCalisma+0xe14>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d107      	bne.n	8005c6a <checkAktifCalisma+0xdc2>
 8005c5a:	4b19      	ldr	r3, [pc, #100]	; (8005cc0 <checkAktifCalisma+0xe18>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <checkAktifCalisma+0xdc2>
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <checkAktifCalisma+0xe04>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d02c      	beq.n	8005cc4 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	2140      	movs	r1, #64	; 0x40
 8005c6e:	480a      	ldr	r0, [pc, #40]	; (8005c98 <checkAktifCalisma+0xdf0>)
 8005c70:	f003 fc39 	bl	80094e6 <HAL_GPIO_WritePin>
 8005c74:	e02b      	b.n	8005cce <checkAktifCalisma+0xe26>
 8005c76:	bf00      	nop
 8005c78:	20000268 	.word	0x20000268
 8005c7c:	2000022d 	.word	0x2000022d
 8005c80:	2000022c 	.word	0x2000022c
 8005c84:	40011000 	.word	0x40011000
 8005c88:	2000022a 	.word	0x2000022a
 8005c8c:	20000266 	.word	0x20000266
 8005c90:	20000269 	.word	0x20000269
 8005c94:	20000267 	.word	0x20000267
 8005c98:	40010800 	.word	0x40010800
 8005c9c:	2000022e 	.word	0x2000022e
 8005ca0:	20000230 	.word	0x20000230
 8005ca4:	40010c00 	.word	0x40010c00
 8005ca8:	20000253 	.word	0x20000253
 8005cac:	2000026a 	.word	0x2000026a
 8005cb0:	20000200 	.word	0x20000200
 8005cb4:	20000204 	.word	0x20000204
 8005cb8:	2000023e 	.word	0x2000023e
 8005cbc:	2000026b 	.word	0x2000026b
 8005cc0:	2000026c 	.word	0x2000026c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2140      	movs	r1, #64	; 0x40
 8005cc8:	488d      	ldr	r0, [pc, #564]	; (8005f00 <checkAktifCalisma+0x1058>)
 8005cca:	f003 fc0c 	bl	80094e6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005cce:	4b8d      	ldr	r3, [pc, #564]	; (8005f04 <checkAktifCalisma+0x105c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <checkAktifCalisma+0xe36>
 8005cd6:	4b8b      	ldr	r3, [pc, #556]	; (8005f04 <checkAktifCalisma+0x105c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d115      	bne.n	8005d0a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005cde:	2104      	movs	r1, #4
 8005ce0:	4889      	ldr	r0, [pc, #548]	; (8005f08 <checkAktifCalisma+0x1060>)
 8005ce2:	f003 fbe9 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d003      	beq.n	8005cf4 <checkAktifCalisma+0xe4c>
 8005cec:	4b87      	ldr	r3, [pc, #540]	; (8005f0c <checkAktifCalisma+0x1064>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	4884      	ldr	r0, [pc, #528]	; (8005f08 <checkAktifCalisma+0x1060>)
 8005cf8:	f003 fbde 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005d02:	4b83      	ldr	r3, [pc, #524]	; (8005f10 <checkAktifCalisma+0x1068>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	e002      	b.n	8005d10 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005d0a:	4b81      	ldr	r3, [pc, #516]	; (8005f10 <checkAktifCalisma+0x1068>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005d10:	4b7c      	ldr	r3, [pc, #496]	; (8005f04 <checkAktifCalisma+0x105c>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d003      	beq.n	8005d20 <checkAktifCalisma+0xe78>
 8005d18:	4b7a      	ldr	r3, [pc, #488]	; (8005f04 <checkAktifCalisma+0x105c>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d111      	bne.n	8005d44 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005d20:	2102      	movs	r1, #2
 8005d22:	4879      	ldr	r0, [pc, #484]	; (8005f08 <checkAktifCalisma+0x1060>)
 8005d24:	f003 fbc8 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d10a      	bne.n	8005d44 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005d2e:	2104      	movs	r1, #4
 8005d30:	4875      	ldr	r0, [pc, #468]	; (8005f08 <checkAktifCalisma+0x1060>)
 8005d32:	f003 fbc1 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005d3c:	4b75      	ldr	r3, [pc, #468]	; (8005f14 <checkAktifCalisma+0x106c>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005d44:	4b73      	ldr	r3, [pc, #460]	; (8005f14 <checkAktifCalisma+0x106c>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005d4a:	4b71      	ldr	r3, [pc, #452]	; (8005f10 <checkAktifCalisma+0x1068>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00f      	beq.n	8005d72 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005d52:	4b71      	ldr	r3, [pc, #452]	; (8005f18 <checkAktifCalisma+0x1070>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d10b      	bne.n	8005d72 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d5e:	486f      	ldr	r0, [pc, #444]	; (8005f1c <checkAktifCalisma+0x1074>)
 8005d60:	f003 fbaa 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005d6a:	4b6d      	ldr	r3, [pc, #436]	; (8005f20 <checkAktifCalisma+0x1078>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	e002      	b.n	8005d78 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005d72:	4b6b      	ldr	r3, [pc, #428]	; (8005f20 <checkAktifCalisma+0x1078>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005d78:	4b66      	ldr	r3, [pc, #408]	; (8005f14 <checkAktifCalisma+0x106c>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00f      	beq.n	8005da0 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005d80:	4b65      	ldr	r3, [pc, #404]	; (8005f18 <checkAktifCalisma+0x1070>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d10b      	bne.n	8005da0 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d8c:	4863      	ldr	r0, [pc, #396]	; (8005f1c <checkAktifCalisma+0x1074>)
 8005d8e:	f003 fb93 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005d98:	4b62      	ldr	r3, [pc, #392]	; (8005f24 <checkAktifCalisma+0x107c>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e002      	b.n	8005da6 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005da0:	4b60      	ldr	r3, [pc, #384]	; (8005f24 <checkAktifCalisma+0x107c>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005da6:	4b60      	ldr	r3, [pc, #384]	; (8005f28 <checkAktifCalisma+0x1080>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d137      	bne.n	8005e1e <checkAktifCalisma+0xf76>
 8005dae:	4b5f      	ldr	r3, [pc, #380]	; (8005f2c <checkAktifCalisma+0x1084>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d003      	beq.n	8005dbe <checkAktifCalisma+0xf16>
 8005db6:	4b5d      	ldr	r3, [pc, #372]	; (8005f2c <checkAktifCalisma+0x1084>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d12f      	bne.n	8005e1e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005dbe:	4b54      	ldr	r3, [pc, #336]	; (8005f10 <checkAktifCalisma+0x1068>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d103      	bne.n	8005dce <checkAktifCalisma+0xf26>
 8005dc6:	4b53      	ldr	r3, [pc, #332]	; (8005f14 <checkAktifCalisma+0x106c>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d027      	beq.n	8005e1e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dd2:	484d      	ldr	r0, [pc, #308]	; (8005f08 <checkAktifCalisma+0x1060>)
 8005dd4:	f003 fb70 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d103      	bne.n	8005de6 <checkAktifCalisma+0xf3e>
 8005dde:	4b4e      	ldr	r3, [pc, #312]	; (8005f18 <checkAktifCalisma+0x1070>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005de6:	4b4e      	ldr	r3, [pc, #312]	; (8005f20 <checkAktifCalisma+0x1078>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <checkAktifCalisma+0xf4e>
 8005dee:	4b4d      	ldr	r3, [pc, #308]	; (8005f24 <checkAktifCalisma+0x107c>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d013      	beq.n	8005e1e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005df6:	4b4e      	ldr	r3, [pc, #312]	; (8005f30 <checkAktifCalisma+0x1088>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00f      	beq.n	8005e1e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005dfe:	4b4d      	ldr	r3, [pc, #308]	; (8005f34 <checkAktifCalisma+0x108c>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f083 0301 	eor.w	r3, r3, #1
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005e0c:	4b4a      	ldr	r3, [pc, #296]	; (8005f38 <checkAktifCalisma+0x1090>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005e12:	4b4a      	ldr	r3, [pc, #296]	; (8005f3c <checkAktifCalisma+0x1094>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a4a      	ldr	r2, [pc, #296]	; (8005f40 <checkAktifCalisma+0x1098>)
 8005e18:	6013      	str	r3, [r2, #0]
			bekle();
 8005e1a:	f7fe fec7 	bl	8004bac <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005e1e:	4b47      	ldr	r3, [pc, #284]	; (8005f3c <checkAktifCalisma+0x1094>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b47      	ldr	r3, [pc, #284]	; (8005f40 <checkAktifCalisma+0x1098>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	4a46      	ldr	r2, [pc, #280]	; (8005f44 <checkAktifCalisma+0x109c>)
 8005e2a:	7812      	ldrb	r2, [r2, #0]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d214      	bcs.n	8005e5a <checkAktifCalisma+0xfb2>
 8005e30:	4b37      	ldr	r3, [pc, #220]	; (8005f10 <checkAktifCalisma+0x1068>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	f083 0301 	eor.w	r3, r3, #1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d006      	beq.n	8005e4c <checkAktifCalisma+0xfa4>
 8005e3e:	4b35      	ldr	r3, [pc, #212]	; (8005f14 <checkAktifCalisma+0x106c>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	f083 0301 	eor.w	r3, r3, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <checkAktifCalisma+0xfb2>
 8005e4c:	4b38      	ldr	r3, [pc, #224]	; (8005f30 <checkAktifCalisma+0x1088>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	f083 0301 	eor.w	r3, r3, #1
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005e5a:	4b37      	ldr	r3, [pc, #220]	; (8005f38 <checkAktifCalisma+0x1090>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e60:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <checkAktifCalisma+0x1080>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d12b      	bne.n	8005ec0 <checkAktifCalisma+0x1018>
 8005e68:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <checkAktifCalisma+0x1084>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d003      	beq.n	8005e78 <checkAktifCalisma+0xfd0>
 8005e70:	4b2e      	ldr	r3, [pc, #184]	; (8005f2c <checkAktifCalisma+0x1084>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d123      	bne.n	8005ec0 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e78:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <checkAktifCalisma+0x1068>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d103      	bne.n	8005e88 <checkAktifCalisma+0xfe0>
 8005e80:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <checkAktifCalisma+0x106c>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e8c:	481e      	ldr	r0, [pc, #120]	; (8005f08 <checkAktifCalisma+0x1060>)
 8005e8e:	f003 fb13 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d103      	bne.n	8005ea0 <checkAktifCalisma+0xff8>
 8005e98:	4b1f      	ldr	r3, [pc, #124]	; (8005f18 <checkAktifCalisma+0x1070>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005ea0:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <checkAktifCalisma+0x1078>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <checkAktifCalisma+0x1008>
 8005ea8:	4b1e      	ldr	r3, [pc, #120]	; (8005f24 <checkAktifCalisma+0x107c>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005eb0:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <checkAktifCalisma+0x1088>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005eb8:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <checkAktifCalisma+0x10a0>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	e002      	b.n	8005ec6 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005ec0:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <checkAktifCalisma+0x10a0>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005ec6:	4b18      	ldr	r3, [pc, #96]	; (8005f28 <checkAktifCalisma+0x1080>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d140      	bne.n	8005f50 <checkAktifCalisma+0x10a8>
 8005ece:	4b17      	ldr	r3, [pc, #92]	; (8005f2c <checkAktifCalisma+0x1084>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d003      	beq.n	8005ede <checkAktifCalisma+0x1036>
 8005ed6:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <checkAktifCalisma+0x1084>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d138      	bne.n	8005f50 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ede:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <checkAktifCalisma+0x1068>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d103      	bne.n	8005eee <checkAktifCalisma+0x1046>
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <checkAktifCalisma+0x106c>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d030      	beq.n	8005f50 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005eee:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <checkAktifCalisma+0x1088>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d02c      	beq.n	8005f50 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005ef6:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <checkAktifCalisma+0x10a4>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e02b      	b.n	8005f56 <checkAktifCalisma+0x10ae>
 8005efe:	bf00      	nop
 8005f00:	40010800 	.word	0x40010800
 8005f04:	20000231 	.word	0x20000231
 8005f08:	40011000 	.word	0x40011000
 8005f0c:	2000022a 	.word	0x2000022a
 8005f10:	20000270 	.word	0x20000270
 8005f14:	20000271 	.word	0x20000271
 8005f18:	20000230 	.word	0x20000230
 8005f1c:	40010c00 	.word	0x40010c00
 8005f20:	20000280 	.word	0x20000280
 8005f24:	20000281 	.word	0x20000281
 8005f28:	2000022f 	.word	0x2000022f
 8005f2c:	2000022c 	.word	0x2000022c
 8005f30:	20000266 	.word	0x20000266
 8005f34:	20000253 	.word	0x20000253
 8005f38:	2000026d 	.word	0x2000026d
 8005f3c:	20000200 	.word	0x20000200
 8005f40:	20000204 	.word	0x20000204
 8005f44:	2000023f 	.word	0x2000023f
 8005f48:	2000026e 	.word	0x2000026e
 8005f4c:	2000026f 	.word	0x2000026f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005f50:	4b8b      	ldr	r3, [pc, #556]	; (8006180 <checkAktifCalisma+0x12d8>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005f56:	4b8b      	ldr	r3, [pc, #556]	; (8006184 <checkAktifCalisma+0x12dc>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <checkAktifCalisma+0x10c6>
 8005f5e:	4b8a      	ldr	r3, [pc, #552]	; (8006188 <checkAktifCalisma+0x12e0>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d103      	bne.n	8005f6e <checkAktifCalisma+0x10c6>
 8005f66:	4b86      	ldr	r3, [pc, #536]	; (8006180 <checkAktifCalisma+0x12d8>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005f6e:	2201      	movs	r2, #1
 8005f70:	2120      	movs	r1, #32
 8005f72:	4886      	ldr	r0, [pc, #536]	; (800618c <checkAktifCalisma+0x12e4>)
 8005f74:	f003 fab7 	bl	80094e6 <HAL_GPIO_WritePin>
 8005f78:	e004      	b.n	8005f84 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2120      	movs	r1, #32
 8005f7e:	4883      	ldr	r0, [pc, #524]	; (800618c <checkAktifCalisma+0x12e4>)
 8005f80:	f003 fab1 	bl	80094e6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005f84:	4b82      	ldr	r3, [pc, #520]	; (8006190 <checkAktifCalisma+0x12e8>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00e      	beq.n	8005faa <checkAktifCalisma+0x1102>
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	4881      	ldr	r0, [pc, #516]	; (8006194 <checkAktifCalisma+0x12ec>)
 8005f90:	f003 fa92 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d107      	bne.n	8005faa <checkAktifCalisma+0x1102>
 8005f9a:	4b7f      	ldr	r3, [pc, #508]	; (8006198 <checkAktifCalisma+0x12f0>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <checkAktifCalisma+0x1102>
 8005fa2:	4b7e      	ldr	r3, [pc, #504]	; (800619c <checkAktifCalisma+0x12f4>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d112      	bne.n	8005fd0 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005faa:	4b7d      	ldr	r3, [pc, #500]	; (80061a0 <checkAktifCalisma+0x12f8>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d066      	beq.n	8006080 <checkAktifCalisma+0x11d8>
 8005fb2:	2104      	movs	r1, #4
 8005fb4:	4877      	ldr	r0, [pc, #476]	; (8006194 <checkAktifCalisma+0x12ec>)
 8005fb6:	f003 fa7f 	bl	80094b8 <HAL_GPIO_ReadPin>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d15f      	bne.n	8006080 <checkAktifCalisma+0x11d8>
 8005fc0:	4b75      	ldr	r3, [pc, #468]	; (8006198 <checkAktifCalisma+0x12f0>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05b      	beq.n	8006080 <checkAktifCalisma+0x11d8>
 8005fc8:	4b74      	ldr	r3, [pc, #464]	; (800619c <checkAktifCalisma+0x12f4>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d057      	beq.n	8006080 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005fd0:	4b74      	ldr	r3, [pc, #464]	; (80061a4 <checkAktifCalisma+0x12fc>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	4b72      	ldr	r3, [pc, #456]	; (80061a4 <checkAktifCalisma+0x12fc>)
 8005fda:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005fdc:	4b71      	ldr	r3, [pc, #452]	; (80061a4 <checkAktifCalisma+0x12fc>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b09      	cmp	r3, #9
 8005fe2:	d908      	bls.n	8005ff6 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005fe4:	4b6f      	ldr	r3, [pc, #444]	; (80061a4 <checkAktifCalisma+0x12fc>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005fea:	4b6f      	ldr	r3, [pc, #444]	; (80061a8 <checkAktifCalisma+0x1300>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	4b6d      	ldr	r3, [pc, #436]	; (80061a8 <checkAktifCalisma+0x1300>)
 8005ff4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005ff6:	4b6c      	ldr	r3, [pc, #432]	; (80061a8 <checkAktifCalisma+0x1300>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b09      	cmp	r3, #9
 8005ffc:	d908      	bls.n	8006010 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005ffe:	4b6a      	ldr	r3, [pc, #424]	; (80061a8 <checkAktifCalisma+0x1300>)
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006004:	4b69      	ldr	r3, [pc, #420]	; (80061ac <checkAktifCalisma+0x1304>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	b2da      	uxtb	r2, r3
 800600c:	4b67      	ldr	r3, [pc, #412]	; (80061ac <checkAktifCalisma+0x1304>)
 800600e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006010:	4b66      	ldr	r3, [pc, #408]	; (80061ac <checkAktifCalisma+0x1304>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b09      	cmp	r3, #9
 8006016:	d908      	bls.n	800602a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006018:	4b64      	ldr	r3, [pc, #400]	; (80061ac <checkAktifCalisma+0x1304>)
 800601a:	2200      	movs	r2, #0
 800601c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800601e:	4b64      	ldr	r3, [pc, #400]	; (80061b0 <checkAktifCalisma+0x1308>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	3301      	adds	r3, #1
 8006024:	b2da      	uxtb	r2, r3
 8006026:	4b62      	ldr	r3, [pc, #392]	; (80061b0 <checkAktifCalisma+0x1308>)
 8006028:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 800602a:	4b61      	ldr	r3, [pc, #388]	; (80061b0 <checkAktifCalisma+0x1308>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b09      	cmp	r3, #9
 8006030:	d908      	bls.n	8006044 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8006032:	4b5f      	ldr	r3, [pc, #380]	; (80061b0 <checkAktifCalisma+0x1308>)
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006038:	4b5e      	ldr	r3, [pc, #376]	; (80061b4 <checkAktifCalisma+0x130c>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	4b5c      	ldr	r3, [pc, #368]	; (80061b4 <checkAktifCalisma+0x130c>)
 8006042:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006044:	4b5b      	ldr	r3, [pc, #364]	; (80061b4 <checkAktifCalisma+0x130c>)
 8006046:	781a      	ldrb	r2, [r3, #0]
 8006048:	4b5b      	ldr	r3, [pc, #364]	; (80061b8 <checkAktifCalisma+0x1310>)
 800604a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800604e:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <checkAktifCalisma+0x1308>)
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	4b59      	ldr	r3, [pc, #356]	; (80061b8 <checkAktifCalisma+0x1310>)
 8006054:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006056:	4b55      	ldr	r3, [pc, #340]	; (80061ac <checkAktifCalisma+0x1304>)
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	4b57      	ldr	r3, [pc, #348]	; (80061b8 <checkAktifCalisma+0x1310>)
 800605c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800605e:	4b52      	ldr	r3, [pc, #328]	; (80061a8 <checkAktifCalisma+0x1300>)
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	4b55      	ldr	r3, [pc, #340]	; (80061b8 <checkAktifCalisma+0x1310>)
 8006064:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006066:	4b4f      	ldr	r3, [pc, #316]	; (80061a4 <checkAktifCalisma+0x12fc>)
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	4b53      	ldr	r3, [pc, #332]	; (80061b8 <checkAktifCalisma+0x1310>)
 800606c:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800606e:	4b53      	ldr	r3, [pc, #332]	; (80061bc <checkAktifCalisma+0x1314>)
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006074:	4b46      	ldr	r3, [pc, #280]	; (8006190 <checkAktifCalisma+0x12e8>)
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800607a:	4b49      	ldr	r3, [pc, #292]	; (80061a0 <checkAktifCalisma+0x12f8>)
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006084:	484e      	ldr	r0, [pc, #312]	; (80061c0 <checkAktifCalisma+0x1318>)
 8006086:	f003 fa17 	bl	80094b8 <HAL_GPIO_ReadPin>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d016      	beq.n	80060be <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006090:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006094:	484a      	ldr	r0, [pc, #296]	; (80061c0 <checkAktifCalisma+0x1318>)
 8006096:	f003 fa0f 	bl	80094b8 <HAL_GPIO_ReadPin>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00e      	beq.n	80060be <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80060a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060a4:	4846      	ldr	r0, [pc, #280]	; (80061c0 <checkAktifCalisma+0x1318>)
 80060a6:	f003 fa07 	bl	80094b8 <HAL_GPIO_ReadPin>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d006      	beq.n	80060be <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80060b0:	2140      	movs	r1, #64	; 0x40
 80060b2:	4838      	ldr	r0, [pc, #224]	; (8006194 <checkAktifCalisma+0x12ec>)
 80060b4:	f003 fa00 	bl	80094b8 <HAL_GPIO_ReadPin>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <checkAktifCalisma+0x121e>
			startBasili=1;
 80060be:	4b41      	ldr	r3, [pc, #260]	; (80061c4 <checkAktifCalisma+0x131c>)
 80060c0:	2201      	movs	r2, #1
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e002      	b.n	80060cc <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80060c6:	4b3f      	ldr	r3, [pc, #252]	; (80061c4 <checkAktifCalisma+0x131c>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80060cc:	4b3d      	ldr	r3, [pc, #244]	; (80061c4 <checkAktifCalisma+0x131c>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d016      	beq.n	8006102 <checkAktifCalisma+0x125a>
 80060d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060d8:	4839      	ldr	r0, [pc, #228]	; (80061c0 <checkAktifCalisma+0x1318>)
 80060da:	f003 f9ed 	bl	80094b8 <HAL_GPIO_ReadPin>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d10e      	bne.n	8006102 <checkAktifCalisma+0x125a>
			hataVar=1;
 80060e4:	4b38      	ldr	r3, [pc, #224]	; (80061c8 <checkAktifCalisma+0x1320>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80060ea:	2001      	movs	r0, #1
 80060ec:	f7fa fd48 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80060f0:	2001      	movs	r0, #1
 80060f2:	f7fa fceb 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 80060f6:	f001 fc9b 	bl	8007a30 <convertAndSendData>
			acilstophatasi=1;
 80060fa:	4b34      	ldr	r3, [pc, #208]	; (80061cc <checkAktifCalisma+0x1324>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	701a      	strb	r2, [r3, #0]
		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006100:	e018      	b.n	8006134 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006102:	4b32      	ldr	r3, [pc, #200]	; (80061cc <checkAktifCalisma+0x1324>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d014      	beq.n	8006134 <checkAktifCalisma+0x128c>
 800610a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800610e:	482c      	ldr	r0, [pc, #176]	; (80061c0 <checkAktifCalisma+0x1318>)
 8006110:	f003 f9d2 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10c      	bne.n	8006134 <checkAktifCalisma+0x128c>
 800611a:	4b2a      	ldr	r3, [pc, #168]	; (80061c4 <checkAktifCalisma+0x131c>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f083 0301 	eor.w	r3, r3, #1
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006128:	4b28      	ldr	r3, [pc, #160]	; (80061cc <checkAktifCalisma+0x1324>)
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800612e:	2001      	movs	r0, #1
 8006130:	f7fe fce8 	bl	8004b04 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006134:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <checkAktifCalisma+0x1328>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	f083 0301 	eor.w	r3, r3, #1
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d04e      	beq.n	80061e0 <checkAktifCalisma+0x1338>
 8006142:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006146:	481e      	ldr	r0, [pc, #120]	; (80061c0 <checkAktifCalisma+0x1318>)
 8006148:	f003 f9b6 	bl	80094b8 <HAL_GPIO_ReadPin>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <checkAktifCalisma+0x12b2>
 8006152:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <checkAktifCalisma+0x132c>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d042      	beq.n	80061e0 <checkAktifCalisma+0x1338>
 800615a:	4b1f      	ldr	r3, [pc, #124]	; (80061d8 <checkAktifCalisma+0x1330>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d13e      	bne.n	80061e0 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006162:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <checkAktifCalisma+0x1320>)
 8006164:	2201      	movs	r2, #1
 8006166:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006168:	2002      	movs	r0, #2
 800616a:	f7fa fd09 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(2);
 800616e:	2002      	movs	r0, #2
 8006170:	f7fa fcac 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 8006174:	f001 fc5c 	bl	8007a30 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006178:	4b18      	ldr	r3, [pc, #96]	; (80061dc <checkAktifCalisma+0x1334>)
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800617e:	e047      	b.n	8006210 <checkAktifCalisma+0x1368>
 8006180:	2000026f 	.word	0x2000026f
 8006184:	2000026e 	.word	0x2000026e
 8006188:	2000026d 	.word	0x2000026d
 800618c:	40010800 	.word	0x40010800
 8006190:	20000263 	.word	0x20000263
 8006194:	40011000 	.word	0x40011000
 8006198:	2000022a 	.word	0x2000022a
 800619c:	20000266 	.word	0x20000266
 80061a0:	20000264 	.word	0x20000264
 80061a4:	20000221 	.word	0x20000221
 80061a8:	20000222 	.word	0x20000222
 80061ac:	20000008 	.word	0x20000008
 80061b0:	20000009 	.word	0x20000009
 80061b4:	20000223 	.word	0x20000223
 80061b8:	20000128 	.word	0x20000128
 80061bc:	20000250 	.word	0x20000250
 80061c0:	40010c00 	.word	0x40010c00
 80061c4:	20000272 	.word	0x20000272
 80061c8:	20000279 	.word	0x20000279
 80061cc:	20000274 	.word	0x20000274
 80061d0:	2000027b 	.word	0x2000027b
 80061d4:	20000285 	.word	0x20000285
 80061d8:	20000228 	.word	0x20000228
 80061dc:	20000275 	.word	0x20000275
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80061e0:	4b9b      	ldr	r3, [pc, #620]	; (8006450 <checkAktifCalisma+0x15a8>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d013      	beq.n	8006210 <checkAktifCalisma+0x1368>
 80061e8:	4b9a      	ldr	r3, [pc, #616]	; (8006454 <checkAktifCalisma+0x15ac>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00f      	beq.n	8006210 <checkAktifCalisma+0x1368>
 80061f0:	4b99      	ldr	r3, [pc, #612]	; (8006458 <checkAktifCalisma+0x15b0>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f083 0301 	eor.w	r3, r3, #1
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80061fe:	4b94      	ldr	r3, [pc, #592]	; (8006450 <checkAktifCalisma+0x15a8>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006204:	4b95      	ldr	r3, [pc, #596]	; (800645c <checkAktifCalisma+0x15b4>)
 8006206:	2200      	movs	r2, #0
 8006208:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800620a:	2002      	movs	r0, #2
 800620c:	f7fe fc7a 	bl	8004b04 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006210:	4b93      	ldr	r3, [pc, #588]	; (8006460 <checkAktifCalisma+0x15b8>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d11e      	bne.n	8006256 <checkAktifCalisma+0x13ae>
 8006218:	4b92      	ldr	r3, [pc, #584]	; (8006464 <checkAktifCalisma+0x15bc>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d11a      	bne.n	8006256 <checkAktifCalisma+0x13ae>
 8006220:	4b91      	ldr	r3, [pc, #580]	; (8006468 <checkAktifCalisma+0x15c0>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d016      	beq.n	8006256 <checkAktifCalisma+0x13ae>
 8006228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800622c:	488f      	ldr	r0, [pc, #572]	; (800646c <checkAktifCalisma+0x15c4>)
 800622e:	f003 f943 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006232:	4603      	mov	r3, r0
 8006234:	2b01      	cmp	r3, #1
 8006236:	d10e      	bne.n	8006256 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006238:	4b8d      	ldr	r3, [pc, #564]	; (8006470 <checkAktifCalisma+0x15c8>)
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800623e:	2003      	movs	r0, #3
 8006240:	f7fa fc9e 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006244:	2003      	movs	r0, #3
 8006246:	f7fa fc41 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 800624a:	f001 fbf1 	bl	8007a30 <convertAndSendData>
			basinchatasi=1;
 800624e:	4b89      	ldr	r3, [pc, #548]	; (8006474 <checkAktifCalisma+0x15cc>)
 8006250:	2201      	movs	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006254:	e015      	b.n	8006282 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006256:	4b87      	ldr	r3, [pc, #540]	; (8006474 <checkAktifCalisma+0x15cc>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d011      	beq.n	8006282 <checkAktifCalisma+0x13da>
 800625e:	4b80      	ldr	r3, [pc, #512]	; (8006460 <checkAktifCalisma+0x15b8>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d10d      	bne.n	8006282 <checkAktifCalisma+0x13da>
 8006266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800626a:	4883      	ldr	r0, [pc, #524]	; (8006478 <checkAktifCalisma+0x15d0>)
 800626c:	f003 f924 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006270:	4603      	mov	r3, r0
 8006272:	2b01      	cmp	r3, #1
 8006274:	d105      	bne.n	8006282 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006276:	4b7f      	ldr	r3, [pc, #508]	; (8006474 <checkAktifCalisma+0x15cc>)
 8006278:	2200      	movs	r2, #0
 800627a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800627c:	2003      	movs	r0, #3
 800627e:	f7fe fc41 	bl	8004b04 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006282:	4b7e      	ldr	r3, [pc, #504]	; (800647c <checkAktifCalisma+0x15d4>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <checkAktifCalisma+0x13ea>
 800628a:	4b7d      	ldr	r3, [pc, #500]	; (8006480 <checkAktifCalisma+0x15d8>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01e      	beq.n	80062d0 <checkAktifCalisma+0x1428>
 8006292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006296:	487b      	ldr	r0, [pc, #492]	; (8006484 <checkAktifCalisma+0x15dc>)
 8006298:	f003 f90e 	bl	80094b8 <HAL_GPIO_ReadPin>
 800629c:	4603      	mov	r3, r0
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d116      	bne.n	80062d0 <checkAktifCalisma+0x1428>
 80062a2:	4b79      	ldr	r3, [pc, #484]	; (8006488 <checkAktifCalisma+0x15e0>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d003      	beq.n	80062b2 <checkAktifCalisma+0x140a>
 80062aa:	4b77      	ldr	r3, [pc, #476]	; (8006488 <checkAktifCalisma+0x15e0>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d10e      	bne.n	80062d0 <checkAktifCalisma+0x1428>
			hataVar=1;
 80062b2:	4b6f      	ldr	r3, [pc, #444]	; (8006470 <checkAktifCalisma+0x15c8>)
 80062b4:	2201      	movs	r2, #1
 80062b6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80062b8:	2004      	movs	r0, #4
 80062ba:	f7fa fc61 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80062be:	2004      	movs	r0, #4
 80062c0:	f7fa fc04 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 80062c4:	f001 fbb4 	bl	8007a30 <convertAndSendData>
			katkapisivicihatasi=1;
 80062c8:	4b70      	ldr	r3, [pc, #448]	; (800648c <checkAktifCalisma+0x15e4>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80062ce:	e01f      	b.n	8006310 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80062d0:	4b6e      	ldr	r3, [pc, #440]	; (800648c <checkAktifCalisma+0x15e4>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01b      	beq.n	8006310 <checkAktifCalisma+0x1468>
 80062d8:	4b6d      	ldr	r3, [pc, #436]	; (8006490 <checkAktifCalisma+0x15e8>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d017      	beq.n	8006310 <checkAktifCalisma+0x1468>
 80062e0:	4b66      	ldr	r3, [pc, #408]	; (800647c <checkAktifCalisma+0x15d4>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f083 0301 	eor.w	r3, r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d010      	beq.n	8006310 <checkAktifCalisma+0x1468>
 80062ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062f2:	4864      	ldr	r0, [pc, #400]	; (8006484 <checkAktifCalisma+0x15dc>)
 80062f4:	f003 f8e0 	bl	80094b8 <HAL_GPIO_ReadPin>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d108      	bne.n	8006310 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80062fe:	4b63      	ldr	r3, [pc, #396]	; (800648c <checkAktifCalisma+0x15e4>)
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006304:	4b5e      	ldr	r3, [pc, #376]	; (8006480 <checkAktifCalisma+0x15d8>)
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800630a:	2004      	movs	r0, #4
 800630c:	f7fe fbfa 	bl	8004b04 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006310:	4b5a      	ldr	r3, [pc, #360]	; (800647c <checkAktifCalisma+0x15d4>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <checkAktifCalisma+0x1478>
 8006318:	4b5e      	ldr	r3, [pc, #376]	; (8006494 <checkAktifCalisma+0x15ec>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01e      	beq.n	800635e <checkAktifCalisma+0x14b6>
 8006320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006324:	4857      	ldr	r0, [pc, #348]	; (8006484 <checkAktifCalisma+0x15dc>)
 8006326:	f003 f8c7 	bl	80094b8 <HAL_GPIO_ReadPin>
 800632a:	4603      	mov	r3, r0
 800632c:	2b01      	cmp	r3, #1
 800632e:	d116      	bne.n	800635e <checkAktifCalisma+0x14b6>
 8006330:	4b55      	ldr	r3, [pc, #340]	; (8006488 <checkAktifCalisma+0x15e0>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d003      	beq.n	8006340 <checkAktifCalisma+0x1498>
 8006338:	4b53      	ldr	r3, [pc, #332]	; (8006488 <checkAktifCalisma+0x15e0>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b03      	cmp	r3, #3
 800633e:	d10e      	bne.n	800635e <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006340:	4b4b      	ldr	r3, [pc, #300]	; (8006470 <checkAktifCalisma+0x15c8>)
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006346:	2005      	movs	r0, #5
 8006348:	f7fa fc1a 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(5);
 800634c:	2005      	movs	r0, #5
 800634e:	f7fa fbbd 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 8006352:	f001 fb6d 	bl	8007a30 <convertAndSendData>
			tablakapisivicihatasi=1;
 8006356:	4b50      	ldr	r3, [pc, #320]	; (8006498 <checkAktifCalisma+0x15f0>)
 8006358:	2201      	movs	r2, #1
 800635a:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800635c:	e023      	b.n	80063a6 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800635e:	4b4e      	ldr	r3, [pc, #312]	; (8006498 <checkAktifCalisma+0x15f0>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01f      	beq.n	80063a6 <checkAktifCalisma+0x14fe>
 8006366:	4b4a      	ldr	r3, [pc, #296]	; (8006490 <checkAktifCalisma+0x15e8>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01b      	beq.n	80063a6 <checkAktifCalisma+0x14fe>
 800636e:	4b43      	ldr	r3, [pc, #268]	; (800647c <checkAktifCalisma+0x15d4>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	f083 0301 	eor.w	r3, r3, #1
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d014      	beq.n	80063a6 <checkAktifCalisma+0x14fe>
 800637c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006380:	4840      	ldr	r0, [pc, #256]	; (8006484 <checkAktifCalisma+0x15dc>)
 8006382:	f003 f899 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10c      	bne.n	80063a6 <checkAktifCalisma+0x14fe>
 800638c:	4b40      	ldr	r3, [pc, #256]	; (8006490 <checkAktifCalisma+0x15e8>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006394:	4b40      	ldr	r3, [pc, #256]	; (8006498 <checkAktifCalisma+0x15f0>)
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800639a:	4b3e      	ldr	r3, [pc, #248]	; (8006494 <checkAktifCalisma+0x15ec>)
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80063a0:	2005      	movs	r0, #5
 80063a2:	f7fe fbaf 	bl	8004b04 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80063a6:	4b30      	ldr	r3, [pc, #192]	; (8006468 <checkAktifCalisma+0x15c0>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d107      	bne.n	80063be <checkAktifCalisma+0x1516>
 80063ae:	4b2a      	ldr	r3, [pc, #168]	; (8006458 <checkAktifCalisma+0x15b0>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <checkAktifCalisma+0x1516>
 80063b6:	4b39      	ldr	r3, [pc, #228]	; (800649c <checkAktifCalisma+0x15f4>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80063be:	4b38      	ldr	r3, [pc, #224]	; (80064a0 <checkAktifCalisma+0x15f8>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b38      	ldr	r3, [pc, #224]	; (80064a4 <checkAktifCalisma+0x15fc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	4a37      	ldr	r2, [pc, #220]	; (80064a8 <checkAktifCalisma+0x1600>)
 80063ca:	7812      	ldrb	r2, [r2, #0]
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d30d      	bcc.n	80063ec <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <checkAktifCalisma+0x15c8>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80063d6:	2006      	movs	r0, #6
 80063d8:	f7fa fbd2 	bl	8000b80 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80063dc:	2006      	movs	r0, #6
 80063de:	f7fa fb75 	bl	8000acc <hata2EEPROM>
			  	convertAndSendData();
 80063e2:	f001 fb25 	bl	8007a30 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80063e6:	4b31      	ldr	r3, [pc, #196]	; (80064ac <checkAktifCalisma+0x1604>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80063ec:	4b2f      	ldr	r3, [pc, #188]	; (80064ac <checkAktifCalisma+0x1604>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d013      	beq.n	800641c <checkAktifCalisma+0x1574>
 80063f4:	2108      	movs	r1, #8
 80063f6:	4823      	ldr	r0, [pc, #140]	; (8006484 <checkAktifCalisma+0x15dc>)
 80063f8:	f003 f85e 	bl	80094b8 <HAL_GPIO_ReadPin>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00c      	beq.n	800641c <checkAktifCalisma+0x1574>
 8006402:	4b1e      	ldr	r3, [pc, #120]	; (800647c <checkAktifCalisma+0x15d4>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f083 0301 	eor.w	r3, r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006410:	4b26      	ldr	r3, [pc, #152]	; (80064ac <checkAktifCalisma+0x1604>)
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006416:	2006      	movs	r0, #6
 8006418:	f7fe fb74 	bl	8004b04 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800641c:	4b24      	ldr	r3, [pc, #144]	; (80064b0 <checkAktifCalisma+0x1608>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <checkAktifCalisma+0x1594>
 8006424:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <checkAktifCalisma+0x15b0>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d107      	bne.n	800643c <checkAktifCalisma+0x1594>
 800642c:	4b21      	ldr	r3, [pc, #132]	; (80064b4 <checkAktifCalisma+0x160c>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d103      	bne.n	800643c <checkAktifCalisma+0x1594>
 8006434:	4b19      	ldr	r3, [pc, #100]	; (800649c <checkAktifCalisma+0x15f4>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d03f      	beq.n	80064bc <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <checkAktifCalisma+0x1610>)
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006442:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <checkAktifCalisma+0x15d8>)
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006448:	4b12      	ldr	r3, [pc, #72]	; (8006494 <checkAktifCalisma+0x15ec>)
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e03c      	b.n	80064ca <checkAktifCalisma+0x1622>
 8006450:	20000275 	.word	0x20000275
 8006454:	2000027b 	.word	0x2000027b
 8006458:	2000025c 	.word	0x2000025c
 800645c:	20000285 	.word	0x20000285
 8006460:	20000227 	.word	0x20000227
 8006464:	2000022b 	.word	0x2000022b
 8006468:	20000278 	.word	0x20000278
 800646c:	40011000 	.word	0x40011000
 8006470:	20000279 	.word	0x20000279
 8006474:	20000282 	.word	0x20000282
 8006478:	40010c00 	.word	0x40010c00
 800647c:	20000272 	.word	0x20000272
 8006480:	20000286 	.word	0x20000286
 8006484:	40010800 	.word	0x40010800
 8006488:	2000022c 	.word	0x2000022c
 800648c:	20000283 	.word	0x20000283
 8006490:	20000266 	.word	0x20000266
 8006494:	20000287 	.word	0x20000287
 8006498:	20000284 	.word	0x20000284
 800649c:	2000025b 	.word	0x2000025b
 80064a0:	20000200 	.word	0x20000200
 80064a4:	20000214 	.word	0x20000214
 80064a8:	2000023c 	.word	0x2000023c
 80064ac:	20000273 	.word	0x20000273
 80064b0:	20000259 	.word	0x20000259
 80064b4:	2000025a 	.word	0x2000025a
 80064b8:	2000027a 	.word	0x2000027a
		} else {
			makineCalisiyor=1;
 80064bc:	4b1e      	ldr	r3, [pc, #120]	; (8006538 <checkAktifCalisma+0x1690>)
 80064be:	2201      	movs	r2, #1
 80064c0:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80064c2:	4b1e      	ldr	r3, [pc, #120]	; (800653c <checkAktifCalisma+0x1694>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <checkAktifCalisma+0x1698>)
 80064c8:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80064ca:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <checkAktifCalisma+0x169c>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d02f      	beq.n	8006532 <checkAktifCalisma+0x168a>
 80064d2:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <checkAktifCalisma+0x16a0>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	f083 0301 	eor.w	r3, r3, #1
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d028      	beq.n	8006532 <checkAktifCalisma+0x168a>
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <checkAktifCalisma+0x16a4>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f083 0301 	eor.w	r3, r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d021      	beq.n	8006532 <checkAktifCalisma+0x168a>
 80064ee:	4b18      	ldr	r3, [pc, #96]	; (8006550 <checkAktifCalisma+0x16a8>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f083 0301 	eor.w	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01a      	beq.n	8006532 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80064fc:	4b15      	ldr	r3, [pc, #84]	; (8006554 <checkAktifCalisma+0x16ac>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	f083 0301 	eor.w	r3, r3, #1
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d013      	beq.n	8006532 <checkAktifCalisma+0x168a>
 800650a:	4b13      	ldr	r3, [pc, #76]	; (8006558 <checkAktifCalisma+0x16b0>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f083 0301 	eor.w	r3, r3, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <checkAktifCalisma+0x168a>
 8006518:	4b10      	ldr	r3, [pc, #64]	; (800655c <checkAktifCalisma+0x16b4>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	f083 0301 	eor.w	r3, r3, #1
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <checkAktifCalisma+0x168a>
			hataVar=0;
 8006526:	4b07      	ldr	r3, [pc, #28]	; (8006544 <checkAktifCalisma+0x169c>)
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 800652c:	2007      	movs	r0, #7
 800652e:	f7fe fae9 	bl	8004b04 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	2000027a 	.word	0x2000027a
 800653c:	20000200 	.word	0x20000200
 8006540:	20000214 	.word	0x20000214
 8006544:	20000279 	.word	0x20000279
 8006548:	20000274 	.word	0x20000274
 800654c:	20000275 	.word	0x20000275
 8006550:	20000282 	.word	0x20000282
 8006554:	20000283 	.word	0x20000283
 8006558:	20000284 	.word	0x20000284
 800655c:	20000273 	.word	0x20000273

08006560 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006564:	4b8b      	ldr	r3, [pc, #556]	; (8006794 <checkDemoModCalisma+0x234>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	f040 8229 	bne.w	80069c0 <checkDemoModCalisma+0x460>
 800656e:	4b8a      	ldr	r3, [pc, #552]	; (8006798 <checkDemoModCalisma+0x238>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8224 	beq.w	80069c0 <checkDemoModCalisma+0x460>
 8006578:	4b88      	ldr	r3, [pc, #544]	; (800679c <checkDemoModCalisma+0x23c>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 821f 	bne.w	80069c0 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006582:	2102      	movs	r1, #2
 8006584:	4886      	ldr	r0, [pc, #536]	; (80067a0 <checkDemoModCalisma+0x240>)
 8006586:	f002 ff97 	bl	80094b8 <HAL_GPIO_ReadPin>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d11d      	bne.n	80065cc <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006590:	4b84      	ldr	r3, [pc, #528]	; (80067a4 <checkDemoModCalisma+0x244>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f083 0301 	eor.w	r3, r3, #1
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d016      	beq.n	80065cc <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800659e:	4b82      	ldr	r3, [pc, #520]	; (80067a8 <checkDemoModCalisma+0x248>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	f083 0301 	eor.w	r3, r3, #1
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00f      	beq.n	80065cc <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80065ac:	4b7f      	ldr	r3, [pc, #508]	; (80067ac <checkDemoModCalisma+0x24c>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f083 0301 	eor.w	r3, r3, #1
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d008      	beq.n	80065cc <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80065ba:	2201      	movs	r2, #1
 80065bc:	2104      	movs	r1, #4
 80065be:	487c      	ldr	r0, [pc, #496]	; (80067b0 <checkDemoModCalisma+0x250>)
 80065c0:	f002 ff91 	bl	80094e6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80065c4:	4b7b      	ldr	r3, [pc, #492]	; (80067b4 <checkDemoModCalisma+0x254>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e00e      	b.n	80065ea <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80065cc:	2102      	movs	r1, #2
 80065ce:	4874      	ldr	r0, [pc, #464]	; (80067a0 <checkDemoModCalisma+0x240>)
 80065d0:	f002 ff72 	bl	80094b8 <HAL_GPIO_ReadPin>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d107      	bne.n	80065ea <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80065da:	2200      	movs	r2, #0
 80065dc:	2104      	movs	r1, #4
 80065de:	4874      	ldr	r0, [pc, #464]	; (80067b0 <checkDemoModCalisma+0x250>)
 80065e0:	f002 ff81 	bl	80094e6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80065e4:	4b73      	ldr	r3, [pc, #460]	; (80067b4 <checkDemoModCalisma+0x254>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80065ea:	4b72      	ldr	r3, [pc, #456]	; (80067b4 <checkDemoModCalisma+0x254>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10b      	bne.n	800660a <checkDemoModCalisma+0xaa>
 80065f2:	4b6d      	ldr	r3, [pc, #436]	; (80067a8 <checkDemoModCalisma+0x248>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d107      	bne.n	800660a <checkDemoModCalisma+0xaa>
 80065fa:	4b6c      	ldr	r3, [pc, #432]	; (80067ac <checkDemoModCalisma+0x24c>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <checkDemoModCalisma+0xaa>
 8006602:	4b68      	ldr	r3, [pc, #416]	; (80067a4 <checkDemoModCalisma+0x244>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800660a:	2201      	movs	r2, #1
 800660c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006610:	4867      	ldr	r0, [pc, #412]	; (80067b0 <checkDemoModCalisma+0x250>)
 8006612:	f002 ff68 	bl	80094e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006616:	2201      	movs	r2, #1
 8006618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800661c:	4864      	ldr	r0, [pc, #400]	; (80067b0 <checkDemoModCalisma+0x250>)
 800661e:	f002 ff62 	bl	80094e6 <HAL_GPIO_WritePin>
 8006622:	e00b      	b.n	800663c <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006624:	2200      	movs	r2, #0
 8006626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800662a:	4861      	ldr	r0, [pc, #388]	; (80067b0 <checkDemoModCalisma+0x250>)
 800662c:	f002 ff5b 	bl	80094e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006630:	2200      	movs	r2, #0
 8006632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006636:	485e      	ldr	r0, [pc, #376]	; (80067b0 <checkDemoModCalisma+0x250>)
 8006638:	f002 ff55 	bl	80094e6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800663c:	2102      	movs	r1, #2
 800663e:	4858      	ldr	r0, [pc, #352]	; (80067a0 <checkDemoModCalisma+0x240>)
 8006640:	f002 ff3a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006644:	4603      	mov	r3, r0
 8006646:	2b01      	cmp	r3, #1
 8006648:	d10d      	bne.n	8006666 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800664a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800664e:	4854      	ldr	r0, [pc, #336]	; (80067a0 <checkDemoModCalisma+0x240>)
 8006650:	f002 ff32 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800665a:	4b56      	ldr	r3, [pc, #344]	; (80067b4 <checkDemoModCalisma+0x254>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f083 0301 	eor.w	r3, r3, #1
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006666:	2102      	movs	r1, #2
 8006668:	484d      	ldr	r0, [pc, #308]	; (80067a0 <checkDemoModCalisma+0x240>)
 800666a:	f002 ff25 	bl	80094b8 <HAL_GPIO_ReadPin>
 800666e:	4603      	mov	r3, r0
 8006670:	2b01      	cmp	r3, #1
 8006672:	d125      	bne.n	80066c0 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006678:	4849      	ldr	r0, [pc, #292]	; (80067a0 <checkDemoModCalisma+0x240>)
 800667a:	f002 ff1d 	bl	80094b8 <HAL_GPIO_ReadPin>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11d      	bne.n	80066c0 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006684:	4b4b      	ldr	r3, [pc, #300]	; (80067b4 <checkDemoModCalisma+0x254>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f083 0301 	eor.w	r3, r3, #1
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d016      	beq.n	80066c0 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006692:	4b44      	ldr	r3, [pc, #272]	; (80067a4 <checkDemoModCalisma+0x244>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f083 0301 	eor.w	r3, r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00f      	beq.n	80066c0 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80066a0:	4b42      	ldr	r3, [pc, #264]	; (80067ac <checkDemoModCalisma+0x24c>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	f083 0301 	eor.w	r3, r3, #1
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d008      	beq.n	80066c0 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80066ae:	2201      	movs	r2, #1
 80066b0:	2120      	movs	r1, #32
 80066b2:	483b      	ldr	r0, [pc, #236]	; (80067a0 <checkDemoModCalisma+0x240>)
 80066b4:	f002 ff17 	bl	80094e6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80066b8:	4b3b      	ldr	r3, [pc, #236]	; (80067a8 <checkDemoModCalisma+0x248>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e007      	b.n	80066d0 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80066c0:	2200      	movs	r2, #0
 80066c2:	2120      	movs	r1, #32
 80066c4:	4836      	ldr	r0, [pc, #216]	; (80067a0 <checkDemoModCalisma+0x240>)
 80066c6:	f002 ff0e 	bl	80094e6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80066ca:	4b37      	ldr	r3, [pc, #220]	; (80067a8 <checkDemoModCalisma+0x248>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80066d0:	2102      	movs	r1, #2
 80066d2:	4833      	ldr	r0, [pc, #204]	; (80067a0 <checkDemoModCalisma+0x240>)
 80066d4:	f002 fef0 	bl	80094b8 <HAL_GPIO_ReadPin>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d125      	bne.n	800672a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80066de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066e2:	482f      	ldr	r0, [pc, #188]	; (80067a0 <checkDemoModCalisma+0x240>)
 80066e4:	f002 fee8 	bl	80094b8 <HAL_GPIO_ReadPin>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d11d      	bne.n	800672a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80066ee:	4b31      	ldr	r3, [pc, #196]	; (80067b4 <checkDemoModCalisma+0x254>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	f083 0301 	eor.w	r3, r3, #1
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d016      	beq.n	800672a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80066fc:	4b2a      	ldr	r3, [pc, #168]	; (80067a8 <checkDemoModCalisma+0x248>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f083 0301 	eor.w	r3, r3, #1
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00f      	beq.n	800672a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800670a:	4b26      	ldr	r3, [pc, #152]	; (80067a4 <checkDemoModCalisma+0x244>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	f083 0301 	eor.w	r3, r3, #1
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d008      	beq.n	800672a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006718:	2201      	movs	r2, #1
 800671a:	2110      	movs	r1, #16
 800671c:	4820      	ldr	r0, [pc, #128]	; (80067a0 <checkDemoModCalisma+0x240>)
 800671e:	f002 fee2 	bl	80094e6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006722:	4b22      	ldr	r3, [pc, #136]	; (80067ac <checkDemoModCalisma+0x24c>)
 8006724:	2201      	movs	r2, #1
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	e007      	b.n	800673a <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800672a:	2200      	movs	r2, #0
 800672c:	2110      	movs	r1, #16
 800672e:	481c      	ldr	r0, [pc, #112]	; (80067a0 <checkDemoModCalisma+0x240>)
 8006730:	f002 fed9 	bl	80094e6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006734:	4b1d      	ldr	r3, [pc, #116]	; (80067ac <checkDemoModCalisma+0x24c>)
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800673a:	2104      	movs	r1, #4
 800673c:	4818      	ldr	r0, [pc, #96]	; (80067a0 <checkDemoModCalisma+0x240>)
 800673e:	f002 febb 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d139      	bne.n	80067bc <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006748:	4b1a      	ldr	r3, [pc, #104]	; (80067b4 <checkDemoModCalisma+0x254>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f083 0301 	eor.w	r3, r3, #1
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d032      	beq.n	80067bc <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006756:	4b15      	ldr	r3, [pc, #84]	; (80067ac <checkDemoModCalisma+0x24c>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	f083 0301 	eor.w	r3, r3, #1
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d02b      	beq.n	80067bc <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006764:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <checkDemoModCalisma+0x248>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	f083 0301 	eor.w	r3, r3, #1
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d024      	beq.n	80067bc <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006772:	2201      	movs	r2, #1
 8006774:	2102      	movs	r1, #2
 8006776:	480e      	ldr	r0, [pc, #56]	; (80067b0 <checkDemoModCalisma+0x250>)
 8006778:	f002 feb5 	bl	80094e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800677c:	2201      	movs	r2, #1
 800677e:	2101      	movs	r1, #1
 8006780:	480b      	ldr	r0, [pc, #44]	; (80067b0 <checkDemoModCalisma+0x250>)
 8006782:	f002 feb0 	bl	80094e6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006786:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <checkDemoModCalisma+0x244>)
 8006788:	2201      	movs	r2, #1
 800678a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 800678c:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <checkDemoModCalisma+0x258>)
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	e027      	b.n	80067e4 <checkDemoModCalisma+0x284>
 8006794:	20000242 	.word	0x20000242
 8006798:	20000276 	.word	0x20000276
 800679c:	20000241 	.word	0x20000241
 80067a0:	40011000 	.word	0x40011000
 80067a4:	2000027d 	.word	0x2000027d
 80067a8:	2000027e 	.word	0x2000027e
 80067ac:	2000027f 	.word	0x2000027f
 80067b0:	40010c00 	.word	0x40010c00
 80067b4:	2000027c 	.word	0x2000027c
 80067b8:	20000262 	.word	0x20000262
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80067bc:	2104      	movs	r1, #4
 80067be:	48a0      	ldr	r0, [pc, #640]	; (8006a40 <checkDemoModCalisma+0x4e0>)
 80067c0:	f002 fe7a 	bl	80094b8 <HAL_GPIO_ReadPin>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d10c      	bne.n	80067e4 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80067ca:	2200      	movs	r2, #0
 80067cc:	2102      	movs	r1, #2
 80067ce:	489d      	ldr	r0, [pc, #628]	; (8006a44 <checkDemoModCalisma+0x4e4>)
 80067d0:	f002 fe89 	bl	80094e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80067d4:	2200      	movs	r2, #0
 80067d6:	2101      	movs	r1, #1
 80067d8:	489a      	ldr	r0, [pc, #616]	; (8006a44 <checkDemoModCalisma+0x4e4>)
 80067da:	f002 fe84 	bl	80094e6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80067de:	4b9a      	ldr	r3, [pc, #616]	; (8006a48 <checkDemoModCalisma+0x4e8>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80067e4:	2104      	movs	r1, #4
 80067e6:	4896      	ldr	r0, [pc, #600]	; (8006a40 <checkDemoModCalisma+0x4e0>)
 80067e8:	f002 fe66 	bl	80094b8 <HAL_GPIO_ReadPin>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d10d      	bne.n	800680e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80067f2:	2201      	movs	r2, #1
 80067f4:	2180      	movs	r1, #128	; 0x80
 80067f6:	4895      	ldr	r0, [pc, #596]	; (8006a4c <checkDemoModCalisma+0x4ec>)
 80067f8:	f002 fe75 	bl	80094e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80067fc:	2201      	movs	r2, #1
 80067fe:	2120      	movs	r1, #32
 8006800:	4892      	ldr	r0, [pc, #584]	; (8006a4c <checkDemoModCalisma+0x4ec>)
 8006802:	f002 fe70 	bl	80094e6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006806:	4b92      	ldr	r3, [pc, #584]	; (8006a50 <checkDemoModCalisma+0x4f0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a92      	ldr	r2, [pc, #584]	; (8006a54 <checkDemoModCalisma+0x4f4>)
 800680c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800680e:	4b90      	ldr	r3, [pc, #576]	; (8006a50 <checkDemoModCalisma+0x4f0>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b90      	ldr	r3, [pc, #576]	; (8006a54 <checkDemoModCalisma+0x4f4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	2b04      	cmp	r3, #4
 800681a:	d909      	bls.n	8006830 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800681c:	2200      	movs	r2, #0
 800681e:	2180      	movs	r1, #128	; 0x80
 8006820:	488a      	ldr	r0, [pc, #552]	; (8006a4c <checkDemoModCalisma+0x4ec>)
 8006822:	f002 fe60 	bl	80094e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006826:	2200      	movs	r2, #0
 8006828:	2120      	movs	r1, #32
 800682a:	4888      	ldr	r0, [pc, #544]	; (8006a4c <checkDemoModCalisma+0x4ec>)
 800682c:	f002 fe5b 	bl	80094e6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006830:	2102      	movs	r1, #2
 8006832:	4883      	ldr	r0, [pc, #524]	; (8006a40 <checkDemoModCalisma+0x4e0>)
 8006834:	f002 fe40 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006838:	4603      	mov	r3, r0
 800683a:	2b01      	cmp	r3, #1
 800683c:	d108      	bne.n	8006850 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800683e:	2201      	movs	r2, #1
 8006840:	2140      	movs	r1, #64	; 0x40
 8006842:	4882      	ldr	r0, [pc, #520]	; (8006a4c <checkDemoModCalisma+0x4ec>)
 8006844:	f002 fe4f 	bl	80094e6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006848:	4b81      	ldr	r3, [pc, #516]	; (8006a50 <checkDemoModCalisma+0x4f0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a81      	ldr	r2, [pc, #516]	; (8006a54 <checkDemoModCalisma+0x4f4>)
 800684e:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006850:	4b7f      	ldr	r3, [pc, #508]	; (8006a50 <checkDemoModCalisma+0x4f0>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	4b7f      	ldr	r3, [pc, #508]	; (8006a54 <checkDemoModCalisma+0x4f4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b04      	cmp	r3, #4
 800685c:	d904      	bls.n	8006868 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800685e:	2200      	movs	r2, #0
 8006860:	2140      	movs	r1, #64	; 0x40
 8006862:	487a      	ldr	r0, [pc, #488]	; (8006a4c <checkDemoModCalisma+0x4ec>)
 8006864:	f002 fe3f 	bl	80094e6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006868:	4b7b      	ldr	r3, [pc, #492]	; (8006a58 <checkDemoModCalisma+0x4f8>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d058      	beq.n	8006922 <checkDemoModCalisma+0x3c2>
 8006870:	4b7a      	ldr	r3, [pc, #488]	; (8006a5c <checkDemoModCalisma+0x4fc>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d054      	beq.n	8006922 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006878:	4b79      	ldr	r3, [pc, #484]	; (8006a60 <checkDemoModCalisma+0x500>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	3301      	adds	r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	4b77      	ldr	r3, [pc, #476]	; (8006a60 <checkDemoModCalisma+0x500>)
 8006882:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006884:	4b76      	ldr	r3, [pc, #472]	; (8006a60 <checkDemoModCalisma+0x500>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b09      	cmp	r3, #9
 800688a:	d908      	bls.n	800689e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 800688c:	4b74      	ldr	r3, [pc, #464]	; (8006a60 <checkDemoModCalisma+0x500>)
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006892:	4b74      	ldr	r3, [pc, #464]	; (8006a64 <checkDemoModCalisma+0x504>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	3301      	adds	r3, #1
 8006898:	b2da      	uxtb	r2, r3
 800689a:	4b72      	ldr	r3, [pc, #456]	; (8006a64 <checkDemoModCalisma+0x504>)
 800689c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800689e:	4b71      	ldr	r3, [pc, #452]	; (8006a64 <checkDemoModCalisma+0x504>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b09      	cmp	r3, #9
 80068a4:	d908      	bls.n	80068b8 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80068a6:	4b6f      	ldr	r3, [pc, #444]	; (8006a64 <checkDemoModCalisma+0x504>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80068ac:	4b6e      	ldr	r3, [pc, #440]	; (8006a68 <checkDemoModCalisma+0x508>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	3301      	adds	r3, #1
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	4b6c      	ldr	r3, [pc, #432]	; (8006a68 <checkDemoModCalisma+0x508>)
 80068b6:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80068b8:	4b6b      	ldr	r3, [pc, #428]	; (8006a68 <checkDemoModCalisma+0x508>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b09      	cmp	r3, #9
 80068be:	d908      	bls.n	80068d2 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80068c0:	4b69      	ldr	r3, [pc, #420]	; (8006a68 <checkDemoModCalisma+0x508>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80068c6:	4b69      	ldr	r3, [pc, #420]	; (8006a6c <checkDemoModCalisma+0x50c>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	3301      	adds	r3, #1
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	4b67      	ldr	r3, [pc, #412]	; (8006a6c <checkDemoModCalisma+0x50c>)
 80068d0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80068d2:	4b66      	ldr	r3, [pc, #408]	; (8006a6c <checkDemoModCalisma+0x50c>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b09      	cmp	r3, #9
 80068d8:	d908      	bls.n	80068ec <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80068da:	4b64      	ldr	r3, [pc, #400]	; (8006a6c <checkDemoModCalisma+0x50c>)
 80068dc:	2200      	movs	r2, #0
 80068de:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80068e0:	4b63      	ldr	r3, [pc, #396]	; (8006a70 <checkDemoModCalisma+0x510>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	4b61      	ldr	r3, [pc, #388]	; (8006a70 <checkDemoModCalisma+0x510>)
 80068ea:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80068ec:	4b60      	ldr	r3, [pc, #384]	; (8006a70 <checkDemoModCalisma+0x510>)
 80068ee:	781a      	ldrb	r2, [r3, #0]
 80068f0:	4b60      	ldr	r3, [pc, #384]	; (8006a74 <checkDemoModCalisma+0x514>)
 80068f2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80068f6:	4b5d      	ldr	r3, [pc, #372]	; (8006a6c <checkDemoModCalisma+0x50c>)
 80068f8:	781a      	ldrb	r2, [r3, #0]
 80068fa:	4b5e      	ldr	r3, [pc, #376]	; (8006a74 <checkDemoModCalisma+0x514>)
 80068fc:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80068fe:	4b5a      	ldr	r3, [pc, #360]	; (8006a68 <checkDemoModCalisma+0x508>)
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	4b5c      	ldr	r3, [pc, #368]	; (8006a74 <checkDemoModCalisma+0x514>)
 8006904:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006906:	4b57      	ldr	r3, [pc, #348]	; (8006a64 <checkDemoModCalisma+0x504>)
 8006908:	781a      	ldrb	r2, [r3, #0]
 800690a:	4b5a      	ldr	r3, [pc, #360]	; (8006a74 <checkDemoModCalisma+0x514>)
 800690c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800690e:	4b54      	ldr	r3, [pc, #336]	; (8006a60 <checkDemoModCalisma+0x500>)
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	4b58      	ldr	r3, [pc, #352]	; (8006a74 <checkDemoModCalisma+0x514>)
 8006914:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006916:	4b58      	ldr	r3, [pc, #352]	; (8006a78 <checkDemoModCalisma+0x518>)
 8006918:	2201      	movs	r2, #1
 800691a:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 800691c:	4b4f      	ldr	r3, [pc, #316]	; (8006a5c <checkDemoModCalisma+0x4fc>)
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006922:	4b56      	ldr	r3, [pc, #344]	; (8006a7c <checkDemoModCalisma+0x51c>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f040 8087 	bne.w	8006a3a <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 800692c:	4a54      	ldr	r2, [pc, #336]	; (8006a80 <checkDemoModCalisma+0x520>)
 800692e:	2101      	movs	r1, #1
 8006930:	2002      	movs	r0, #2
 8006932:	f001 fa9b 	bl	8007e6c <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006936:	4a53      	ldr	r2, [pc, #332]	; (8006a84 <checkDemoModCalisma+0x524>)
 8006938:	2101      	movs	r1, #1
 800693a:	2001      	movs	r0, #1
 800693c:	f001 fa96 	bl	8007e6c <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006940:	4b4b      	ldr	r3, [pc, #300]	; (8006a70 <checkDemoModCalisma+0x510>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	220a      	movs	r2, #10
 8006946:	4950      	ldr	r1, [pc, #320]	; (8006a88 <checkDemoModCalisma+0x528>)
 8006948:	4618      	mov	r0, r3
 800694a:	f005 fde1 	bl	800c510 <itoa>
			lcd_print(2,12,snum);
 800694e:	4a4e      	ldr	r2, [pc, #312]	; (8006a88 <checkDemoModCalisma+0x528>)
 8006950:	210c      	movs	r1, #12
 8006952:	2002      	movs	r0, #2
 8006954:	f001 fa8a 	bl	8007e6c <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006958:	4b44      	ldr	r3, [pc, #272]	; (8006a6c <checkDemoModCalisma+0x50c>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	220a      	movs	r2, #10
 800695e:	494a      	ldr	r1, [pc, #296]	; (8006a88 <checkDemoModCalisma+0x528>)
 8006960:	4618      	mov	r0, r3
 8006962:	f005 fdd5 	bl	800c510 <itoa>
			lcd_print(2,13,snum);
 8006966:	4a48      	ldr	r2, [pc, #288]	; (8006a88 <checkDemoModCalisma+0x528>)
 8006968:	210d      	movs	r1, #13
 800696a:	2002      	movs	r0, #2
 800696c:	f001 fa7e 	bl	8007e6c <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006970:	4b3d      	ldr	r3, [pc, #244]	; (8006a68 <checkDemoModCalisma+0x508>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	220a      	movs	r2, #10
 8006976:	4944      	ldr	r1, [pc, #272]	; (8006a88 <checkDemoModCalisma+0x528>)
 8006978:	4618      	mov	r0, r3
 800697a:	f005 fdc9 	bl	800c510 <itoa>
			lcd_print(2,14,snum);
 800697e:	4a42      	ldr	r2, [pc, #264]	; (8006a88 <checkDemoModCalisma+0x528>)
 8006980:	210e      	movs	r1, #14
 8006982:	2002      	movs	r0, #2
 8006984:	f001 fa72 	bl	8007e6c <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006988:	4b36      	ldr	r3, [pc, #216]	; (8006a64 <checkDemoModCalisma+0x504>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	220a      	movs	r2, #10
 800698e:	493e      	ldr	r1, [pc, #248]	; (8006a88 <checkDemoModCalisma+0x528>)
 8006990:	4618      	mov	r0, r3
 8006992:	f005 fdbd 	bl	800c510 <itoa>
			lcd_print(2,15,snum);
 8006996:	4a3c      	ldr	r2, [pc, #240]	; (8006a88 <checkDemoModCalisma+0x528>)
 8006998:	210f      	movs	r1, #15
 800699a:	2002      	movs	r0, #2
 800699c:	f001 fa66 	bl	8007e6c <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80069a0:	4b2f      	ldr	r3, [pc, #188]	; (8006a60 <checkDemoModCalisma+0x500>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	220a      	movs	r2, #10
 80069a6:	4938      	ldr	r1, [pc, #224]	; (8006a88 <checkDemoModCalisma+0x528>)
 80069a8:	4618      	mov	r0, r3
 80069aa:	f005 fdb1 	bl	800c510 <itoa>
			lcd_print(2,16,snum);
 80069ae:	4a36      	ldr	r2, [pc, #216]	; (8006a88 <checkDemoModCalisma+0x528>)
 80069b0:	2110      	movs	r1, #16
 80069b2:	2002      	movs	r0, #2
 80069b4:	f001 fa5a 	bl	8007e6c <lcd_print>
			mesajYazildi=1;
 80069b8:	4b34      	ldr	r3, [pc, #208]	; (8006a8c <checkDemoModCalisma+0x52c>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80069be:	e03c      	b.n	8006a3a <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80069c0:	4b33      	ldr	r3, [pc, #204]	; (8006a90 <checkDemoModCalisma+0x530>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d003      	beq.n	80069d0 <checkDemoModCalisma+0x470>
 80069c8:	4b2c      	ldr	r3, [pc, #176]	; (8006a7c <checkDemoModCalisma+0x51c>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d134      	bne.n	8006a3a <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80069d0:	2200      	movs	r2, #0
 80069d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069d6:	481b      	ldr	r0, [pc, #108]	; (8006a44 <checkDemoModCalisma+0x4e4>)
 80069d8:	f002 fd85 	bl	80094e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80069dc:	2200      	movs	r2, #0
 80069de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069e2:	4818      	ldr	r0, [pc, #96]	; (8006a44 <checkDemoModCalisma+0x4e4>)
 80069e4:	f002 fd7f 	bl	80094e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80069e8:	2200      	movs	r2, #0
 80069ea:	2104      	movs	r1, #4
 80069ec:	4815      	ldr	r0, [pc, #84]	; (8006a44 <checkDemoModCalisma+0x4e4>)
 80069ee:	f002 fd7a 	bl	80094e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80069f2:	2200      	movs	r2, #0
 80069f4:	2102      	movs	r1, #2
 80069f6:	4813      	ldr	r0, [pc, #76]	; (8006a44 <checkDemoModCalisma+0x4e4>)
 80069f8:	f002 fd75 	bl	80094e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80069fc:	2200      	movs	r2, #0
 80069fe:	2101      	movs	r1, #1
 8006a00:	4810      	ldr	r0, [pc, #64]	; (8006a44 <checkDemoModCalisma+0x4e4>)
 8006a02:	f002 fd70 	bl	80094e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006a06:	2200      	movs	r2, #0
 8006a08:	2120      	movs	r1, #32
 8006a0a:	480d      	ldr	r0, [pc, #52]	; (8006a40 <checkDemoModCalisma+0x4e0>)
 8006a0c:	f002 fd6b 	bl	80094e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006a10:	2200      	movs	r2, #0
 8006a12:	2110      	movs	r1, #16
 8006a14:	480a      	ldr	r0, [pc, #40]	; (8006a40 <checkDemoModCalisma+0x4e0>)
 8006a16:	f002 fd66 	bl	80094e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2180      	movs	r1, #128	; 0x80
 8006a1e:	480b      	ldr	r0, [pc, #44]	; (8006a4c <checkDemoModCalisma+0x4ec>)
 8006a20:	f002 fd61 	bl	80094e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006a24:	2200      	movs	r2, #0
 8006a26:	2140      	movs	r1, #64	; 0x40
 8006a28:	4808      	ldr	r0, [pc, #32]	; (8006a4c <checkDemoModCalisma+0x4ec>)
 8006a2a:	f002 fd5c 	bl	80094e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2120      	movs	r1, #32
 8006a32:	4806      	ldr	r0, [pc, #24]	; (8006a4c <checkDemoModCalisma+0x4ec>)
 8006a34:	f002 fd57 	bl	80094e6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006a38:	e7ff      	b.n	8006a3a <checkDemoModCalisma+0x4da>
 8006a3a:	bf00      	nop
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40011000 	.word	0x40011000
 8006a44:	40010c00 	.word	0x40010c00
 8006a48:	2000027d 	.word	0x2000027d
 8006a4c:	40010800 	.word	0x40010800
 8006a50:	20000200 	.word	0x20000200
 8006a54:	20000210 	.word	0x20000210
 8006a58:	2000027c 	.word	0x2000027c
 8006a5c:	20000262 	.word	0x20000262
 8006a60:	20000221 	.word	0x20000221
 8006a64:	20000222 	.word	0x20000222
 8006a68:	20000008 	.word	0x20000008
 8006a6c:	20000009 	.word	0x20000009
 8006a70:	20000223 	.word	0x20000223
 8006a74:	20000128 	.word	0x20000128
 8006a78:	20000250 	.word	0x20000250
 8006a7c:	20000241 	.word	0x20000241
 8006a80:	0800dcd0 	.word	0x0800dcd0
 8006a84:	0800dcdc 	.word	0x0800dcdc
 8006a88:	20000198 	.word	0x20000198
 8006a8c:	20000258 	.word	0x20000258
 8006a90:	20000242 	.word	0x20000242

08006a94 <mainLoop>:

void mainLoop() {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006a9a:	f7fe f923 	bl	8004ce4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	48ac      	ldr	r0, [pc, #688]	; (8006d54 <mainLoop+0x2c0>)
 8006aa2:	f002 fd09 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d136      	bne.n	8006b1a <mainLoop+0x86>
 8006aac:	2108      	movs	r1, #8
 8006aae:	48aa      	ldr	r0, [pc, #680]	; (8006d58 <mainLoop+0x2c4>)
 8006ab0:	f002 fd02 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d12f      	bne.n	8006b1a <mainLoop+0x86>
 8006aba:	2102      	movs	r1, #2
 8006abc:	48a5      	ldr	r0, [pc, #660]	; (8006d54 <mainLoop+0x2c0>)
 8006abe:	f002 fcfb 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d128      	bne.n	8006b1a <mainLoop+0x86>
 8006ac8:	2104      	movs	r1, #4
 8006aca:	48a2      	ldr	r0, [pc, #648]	; (8006d54 <mainLoop+0x2c0>)
 8006acc:	f002 fcf4 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d121      	bne.n	8006b1a <mainLoop+0x86>
 8006ad6:	2108      	movs	r1, #8
 8006ad8:	489e      	ldr	r0, [pc, #632]	; (8006d54 <mainLoop+0x2c0>)
 8006ada:	f002 fced 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11a      	bne.n	8006b1a <mainLoop+0x86>
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	489c      	ldr	r0, [pc, #624]	; (8006d58 <mainLoop+0x2c4>)
 8006ae8:	f002 fce6 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d113      	bne.n	8006b1a <mainLoop+0x86>
 8006af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006af6:	4898      	ldr	r0, [pc, #608]	; (8006d58 <mainLoop+0x2c4>)
 8006af8:	f002 fcde 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d10b      	bne.n	8006b1a <mainLoop+0x86>
 8006b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b06:	4894      	ldr	r0, [pc, #592]	; (8006d58 <mainLoop+0x2c4>)
 8006b08:	f002 fcd6 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d103      	bne.n	8006b1a <mainLoop+0x86>
			butonKontrol=0;
 8006b12:	4b92      	ldr	r3, [pc, #584]	; (8006d5c <mainLoop+0x2c8>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e003      	b.n	8006b22 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006b1a:	4b91      	ldr	r3, [pc, #580]	; (8006d60 <mainLoop+0x2cc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a91      	ldr	r2, [pc, #580]	; (8006d64 <mainLoop+0x2d0>)
 8006b20:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006b22:	4b91      	ldr	r3, [pc, #580]	; (8006d68 <mainLoop+0x2d4>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d03a      	beq.n	8006ba0 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b2a:	bf00      	nop
 8006b2c:	488f      	ldr	r0, [pc, #572]	; (8006d6c <mainLoop+0x2d8>)
 8006b2e:	f003 faec 	bl	800a10a <HAL_I2C_GetError>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d0f9      	beq.n	8006b2c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006b38:	bf00      	nop
 8006b3a:	488c      	ldr	r0, [pc, #560]	; (8006d6c <mainLoop+0x2d8>)
 8006b3c:	f003 fad8 	bl	800a0f0 <HAL_I2C_GetState>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d1f9      	bne.n	8006b3a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006b46:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	236e      	movs	r3, #110	; 0x6e
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	4b87      	ldr	r3, [pc, #540]	; (8006d70 <mainLoop+0x2dc>)
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	236e      	movs	r3, #110	; 0x6e
 8006b56:	2200      	movs	r2, #0
 8006b58:	21a0      	movs	r1, #160	; 0xa0
 8006b5a:	4884      	ldr	r0, [pc, #528]	; (8006d6c <mainLoop+0x2d8>)
 8006b5c:	f002 ff66 	bl	8009a2c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006b60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b64:	f001 fed8 	bl	8008918 <HAL_Delay>

		  hafizaYaz=0;
 8006b68:	4b7f      	ldr	r3, [pc, #508]	; (8006d68 <mainLoop+0x2d4>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006b6e:	4b81      	ldr	r3, [pc, #516]	; (8006d74 <mainLoop+0x2e0>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d105      	bne.n	8006b82 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006b76:	4a80      	ldr	r2, [pc, #512]	; (8006d78 <mainLoop+0x2e4>)
 8006b78:	2101      	movs	r1, #1
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f001 f976 	bl	8007e6c <lcd_print>
 8006b80:	e008      	b.n	8006b94 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006b82:	4b7c      	ldr	r3, [pc, #496]	; (8006d74 <mainLoop+0x2e0>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d104      	bne.n	8006b94 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006b8a:	4a7c      	ldr	r2, [pc, #496]	; (8006d7c <mainLoop+0x2e8>)
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	2002      	movs	r0, #2
 8006b90:	f001 f96c 	bl	8007e6c <lcd_print>
		  }

		  HAL_Delay(1000);
 8006b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b98:	f001 febe 	bl	8008918 <HAL_Delay>
		  lcd_clear();
 8006b9c:	f001 f992 	bl	8007ec4 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006ba0:	4b77      	ldr	r3, [pc, #476]	; (8006d80 <mainLoop+0x2ec>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f083 0301 	eor.w	r3, r3, #1
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d06e      	beq.n	8006c8c <mainLoop+0x1f8>
 8006bae:	486f      	ldr	r0, [pc, #444]	; (8006d6c <mainLoop+0x2d8>)
 8006bb0:	f003 fa9e 	bl	800a0f0 <HAL_I2C_GetState>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b20      	cmp	r3, #32
 8006bb8:	d168      	bne.n	8006c8c <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8006bba:	4b72      	ldr	r3, [pc, #456]	; (8006d84 <mainLoop+0x2f0>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	f083 0301 	eor.w	r3, r3, #1
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d044      	beq.n	8006c52 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006bc8:	4a6f      	ldr	r2, [pc, #444]	; (8006d88 <mainLoop+0x2f4>)
 8006bca:	2101      	movs	r1, #1
 8006bcc:	2001      	movs	r0, #1
 8006bce:	f001 f94d 	bl	8007e6c <lcd_print>
			  if(dilSecim==0) {
 8006bd2:	4b68      	ldr	r3, [pc, #416]	; (8006d74 <mainLoop+0x2e0>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d105      	bne.n	8006be6 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006bda:	4a6c      	ldr	r2, [pc, #432]	; (8006d8c <mainLoop+0x2f8>)
 8006bdc:	2101      	movs	r1, #1
 8006bde:	2002      	movs	r0, #2
 8006be0:	f001 f944 	bl	8007e6c <lcd_print>
 8006be4:	e008      	b.n	8006bf8 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006be6:	4b63      	ldr	r3, [pc, #396]	; (8006d74 <mainLoop+0x2e0>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d104      	bne.n	8006bf8 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006bee:	4a68      	ldr	r2, [pc, #416]	; (8006d90 <mainLoop+0x2fc>)
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	2002      	movs	r0, #2
 8006bf4:	f001 f93a 	bl	8007e6c <lcd_print>
			  }
			  HAL_Delay(1000);
 8006bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bfc:	f001 fe8c 	bl	8008918 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006c00:	bf00      	nop
 8006c02:	485a      	ldr	r0, [pc, #360]	; (8006d6c <mainLoop+0x2d8>)
 8006c04:	f003 fa81 	bl	800a10a <HAL_I2C_GetError>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d0f9      	beq.n	8006c02 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006c0e:	e003      	b.n	8006c18 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c14:	f001 fe80 	bl	8008918 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006c18:	4854      	ldr	r0, [pc, #336]	; (8006d6c <mainLoop+0x2d8>)
 8006c1a:	f003 fa69 	bl	800a0f0 <HAL_I2C_GetState>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d1f5      	bne.n	8006c10 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006c24:	4b53      	ldr	r3, [pc, #332]	; (8006d74 <mainLoop+0x2e0>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006c2c:	4a59      	ldr	r2, [pc, #356]	; (8006d94 <mainLoop+0x300>)
 8006c2e:	2101      	movs	r1, #1
 8006c30:	2002      	movs	r0, #2
 8006c32:	f001 f91b 	bl	8007e6c <lcd_print>
 8006c36:	e008      	b.n	8006c4a <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006c38:	4b4e      	ldr	r3, [pc, #312]	; (8006d74 <mainLoop+0x2e0>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d104      	bne.n	8006c4a <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006c40:	4a55      	ldr	r2, [pc, #340]	; (8006d98 <mainLoop+0x304>)
 8006c42:	2101      	movs	r1, #1
 8006c44:	2002      	movs	r0, #2
 8006c46:	f001 f911 	bl	8007e6c <lcd_print>
			  }

			  ilkOkuma=1;
 8006c4a:	4b4e      	ldr	r3, [pc, #312]	; (8006d84 <mainLoop+0x2f0>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e014      	b.n	8006c7c <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006c52:	4b48      	ldr	r3, [pc, #288]	; (8006d74 <mainLoop+0x2e0>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d105      	bne.n	8006c66 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006c5a:	4a50      	ldr	r2, [pc, #320]	; (8006d9c <mainLoop+0x308>)
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	2002      	movs	r0, #2
 8006c60:	f001 f904 	bl	8007e6c <lcd_print>
 8006c64:	e008      	b.n	8006c78 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006c66:	4b43      	ldr	r3, [pc, #268]	; (8006d74 <mainLoop+0x2e0>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d104      	bne.n	8006c78 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006c6e:	4a4c      	ldr	r2, [pc, #304]	; (8006da0 <mainLoop+0x30c>)
 8006c70:	2101      	movs	r1, #1
 8006c72:	2002      	movs	r0, #2
 8006c74:	f001 f8fa 	bl	8007e6c <lcd_print>
			  }
			  lcd_clear();
 8006c78:	f001 f924 	bl	8007ec4 <lcd_clear>
		  }

		  lcd_clear();
 8006c7c:	f001 f922 	bl	8007ec4 <lcd_clear>

		  eepromKontrol(1);
 8006c80:	2001      	movs	r0, #1
 8006c82:	f7f9 fad7 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006c86:	4b3e      	ldr	r3, [pc, #248]	; (8006d80 <mainLoop+0x2ec>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006c8c:	4b45      	ldr	r3, [pc, #276]	; (8006da4 <mainLoop+0x310>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11c      	bne.n	8006cce <mainLoop+0x23a>
 8006c94:	4b44      	ldr	r3, [pc, #272]	; (8006da8 <mainLoop+0x314>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f083 0301 	eor.w	r3, r3, #1
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d015      	beq.n	8006cce <mainLoop+0x23a>
 8006ca2:	4b42      	ldr	r3, [pc, #264]	; (8006dac <mainLoop+0x318>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d111      	bne.n	8006cce <mainLoop+0x23a>
			lcd_clear();
 8006caa:	f001 f90b 	bl	8007ec4 <lcd_clear>
			HAL_Delay(10);
 8006cae:	200a      	movs	r0, #10
 8006cb0:	f001 fe32 	bl	8008918 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006cb4:	4a3e      	ldr	r2, [pc, #248]	; (8006db0 <mainLoop+0x31c>)
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	2001      	movs	r0, #1
 8006cba:	f001 f8d7 	bl	8007e6c <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006cbe:	4a3d      	ldr	r2, [pc, #244]	; (8006db4 <mainLoop+0x320>)
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	2002      	movs	r0, #2
 8006cc4:	f001 f8d2 	bl	8007e6c <lcd_print>
			mesajYazildi=1;
 8006cc8:	4b37      	ldr	r3, [pc, #220]	; (8006da8 <mainLoop+0x314>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006cce:	4b35      	ldr	r3, [pc, #212]	; (8006da4 <mainLoop+0x310>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d112      	bne.n	8006cfc <mainLoop+0x268>
 8006cd6:	2102      	movs	r1, #2
 8006cd8:	481e      	ldr	r0, [pc, #120]	; (8006d54 <mainLoop+0x2c0>)
 8006cda:	f002 fbed 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d10b      	bne.n	8006cfc <mainLoop+0x268>
 8006ce4:	2104      	movs	r1, #4
 8006ce6:	481b      	ldr	r0, [pc, #108]	; (8006d54 <mainLoop+0x2c0>)
 8006ce8:	f002 fbe6 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d104      	bne.n	8006cfc <mainLoop+0x268>
			menuGiris=1;
 8006cf2:	4b2c      	ldr	r3, [pc, #176]	; (8006da4 <mainLoop+0x310>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006cf8:	f001 f8e4 	bl	8007ec4 <lcd_clear>
		}

		if(menuGiris==1) {
 8006cfc:	4b29      	ldr	r3, [pc, #164]	; (8006da4 <mainLoop+0x310>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <mainLoop+0x274>
			menu();
 8006d04:	f7fa fb54 	bl	80013b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d0c:	4812      	ldr	r0, [pc, #72]	; (8006d58 <mainLoop+0x2c4>)
 8006d0e:	f002 fc02 	bl	8009516 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d16:	4828      	ldr	r0, [pc, #160]	; (8006db8 <mainLoop+0x324>)
 8006d18:	f002 fbce 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <mainLoop+0x2a4>
 8006d22:	4b26      	ldr	r3, [pc, #152]	; (8006dbc <mainLoop+0x328>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f083 0301 	eor.w	r3, r3, #1
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <mainLoop+0x2a4>
			stopVar=1;
 8006d30:	4b23      	ldr	r3, [pc, #140]	; (8006dc0 <mainLoop+0x32c>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	e002      	b.n	8006d3e <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8006d38:	4b21      	ldr	r3, [pc, #132]	; (8006dc0 <mainLoop+0x32c>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006d3e:	f7fd ffe7 	bl	8004d10 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006d42:	f7fe f819 	bl	8004d78 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006d46:	f7fe f85d 	bl	8004e04 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006d4a:	f7fe f8ad 	bl	8004ea8 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006d4e:	f7ff fc07 	bl	8006560 <checkDemoModCalisma>
		checkLCDBacklight();
 8006d52:	e6a2      	b.n	8006a9a <mainLoop+0x6>
 8006d54:	40010800 	.word	0x40010800
 8006d58:	40011000 	.word	0x40011000
 8006d5c:	20000253 	.word	0x20000253
 8006d60:	20000200 	.word	0x20000200
 8006d64:	2000021c 	.word	0x2000021c
 8006d68:	20000250 	.word	0x20000250
 8006d6c:	200003ac 	.word	0x200003ac
 8006d70:	20000128 	.word	0x20000128
 8006d74:	20000245 	.word	0x20000245
 8006d78:	0800dcf0 	.word	0x0800dcf0
 8006d7c:	0800dd04 	.word	0x0800dd04
 8006d80:	20000251 	.word	0x20000251
 8006d84:	20000252 	.word	0x20000252
 8006d88:	0800dd18 	.word	0x0800dd18
 8006d8c:	0800dd2c 	.word	0x0800dd2c
 8006d90:	0800dd40 	.word	0x0800dd40
 8006d94:	0800dd54 	.word	0x0800dd54
 8006d98:	0800dd68 	.word	0x0800dd68
 8006d9c:	0800dd7c 	.word	0x0800dd7c
 8006da0:	0800dd90 	.word	0x0800dd90
 8006da4:	20000241 	.word	0x20000241
 8006da8:	20000258 	.word	0x20000258
 8006dac:	20000242 	.word	0x20000242
 8006db0:	0800dda4 	.word	0x0800dda4
 8006db4:	0800ddb8 	.word	0x0800ddb8
 8006db8:	40010c00 	.word	0x40010c00
 8006dbc:	20000279 	.word	0x20000279
 8006dc0:	20000276 	.word	0x20000276

08006dc4 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006dca:	2001      	movs	r0, #1
 8006dcc:	f001 f8ac 	bl	8007f28 <lcd_cursor>

    memset(machineID, 0, sizeof(machineID));
 8006dd0:	220c      	movs	r2, #12
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	48a4      	ldr	r0, [pc, #656]	; (8007068 <takeMachineID+0x2a4>)
 8006dd6:	f005 fcc2 	bl	800c75e <memset>
    HAL_Delay(500);
 8006dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006dde:	f001 fd9b 	bl	8008918 <HAL_Delay>

    int cursorPosition = 3;
 8006de2:	2303      	movs	r3, #3
 8006de4:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006dea:	2305      	movs	r3, #5
 8006dec:	607b      	str	r3, [r7, #4]

    printTemplate(1, 0);
 8006dee:	2100      	movs	r1, #0
 8006df0:	2001      	movs	r0, #1
 8006df2:	f7fa f877 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006df6:	2108      	movs	r1, #8
 8006df8:	489c      	ldr	r0, [pc, #624]	; (800706c <takeMachineID+0x2a8>)
 8006dfa:	f002 fb5d 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d146      	bne.n	8006e92 <takeMachineID+0xce>
        	lcd_cursor(0);
 8006e04:	2000      	movs	r0, #0
 8006e06:	f001 f88f 	bl	8007f28 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006e0a:	4b97      	ldr	r3, [pc, #604]	; (8007068 <takeMachineID+0x2a4>)
 8006e0c:	7adb      	ldrb	r3, [r3, #11]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d11f      	bne.n	8006e52 <takeMachineID+0x8e>
        		lcd_clear();
 8006e12:	f001 f857 	bl	8007ec4 <lcd_clear>
        		if(dilSecim == 0) {
 8006e16:	4b96      	ldr	r3, [pc, #600]	; (8007070 <takeMachineID+0x2ac>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <takeMachineID+0x70>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8006e1e:	4a95      	ldr	r2, [pc, #596]	; (8007074 <takeMachineID+0x2b0>)
 8006e20:	2101      	movs	r1, #1
 8006e22:	2001      	movs	r0, #1
 8006e24:	f001 f822 	bl	8007e6c <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006e28:	4a93      	ldr	r2, [pc, #588]	; (8007078 <takeMachineID+0x2b4>)
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	2002      	movs	r0, #2
 8006e2e:	f001 f81d 	bl	8007e6c <lcd_print>
 8006e32:	e009      	b.n	8006e48 <takeMachineID+0x84>
        		} else {
        			lcd_print(1, 1, "MACHINE ID MUST");
 8006e34:	4a91      	ldr	r2, [pc, #580]	; (800707c <takeMachineID+0x2b8>)
 8006e36:	2101      	movs	r1, #1
 8006e38:	2001      	movs	r0, #1
 8006e3a:	f001 f817 	bl	8007e6c <lcd_print>
        			lcd_print(2, 1, "BE 12 CHARACTERS");
 8006e3e:	4a90      	ldr	r2, [pc, #576]	; (8007080 <takeMachineID+0x2bc>)
 8006e40:	2101      	movs	r1, #1
 8006e42:	2002      	movs	r0, #2
 8006e44:	f001 f812 	bl	8007e6c <lcd_print>
        		}
        		HAL_Delay(1200);
 8006e48:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e4c:	f001 fd64 	bl	8008918 <HAL_Delay>
        		goto mainSection;
 8006e50:	e7bb      	b.n	8006dca <takeMachineID+0x6>
        		} else {
        			setupCompleted = 1;
        		}
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, machineIDCharacterLimit);
 8006e52:	4b8c      	ldr	r3, [pc, #560]	; (8007084 <takeMachineID+0x2c0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a8c      	ldr	r2, [pc, #560]	; (8007088 <takeMachineID+0x2c4>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	4a83      	ldr	r2, [pc, #524]	; (8007068 <takeMachineID+0x2a4>)
 8006e5c:	6810      	ldr	r0, [r2, #0]
 8006e5e:	6851      	ldr	r1, [r2, #4]
 8006e60:	6892      	ldr	r2, [r2, #8]
 8006e62:	6018      	str	r0, [r3, #0]
 8006e64:	6059      	str	r1, [r3, #4]
 8006e66:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006e68:	20c8      	movs	r0, #200	; 0xc8
 8006e6a:	f001 fd55 	bl	8008918 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e6e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e72:	9302      	str	r3, [sp, #8]
 8006e74:	236e      	movs	r3, #110	; 0x6e
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	4b83      	ldr	r3, [pc, #524]	; (8007088 <takeMachineID+0x2c4>)
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	236e      	movs	r3, #110	; 0x6e
 8006e7e:	2200      	movs	r2, #0
 8006e80:	21a0      	movs	r1, #160	; 0xa0
 8006e82:	4882      	ldr	r0, [pc, #520]	; (800708c <takeMachineID+0x2c8>)
 8006e84:	f002 fdd2 	bl	8009a2c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006e88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e8c:	f001 fd44 	bl	8008918 <HAL_Delay>

            break;
 8006e90:	e0e5      	b.n	800705e <takeMachineID+0x29a>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006e92:	2101      	movs	r1, #1
 8006e94:	4875      	ldr	r0, [pc, #468]	; (800706c <takeMachineID+0x2a8>)
 8006e96:	f002 fb0f 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d112      	bne.n	8006ec6 <takeMachineID+0x102>
        	if(cursorPosition == 7) {
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b07      	cmp	r3, #7
 8006ea4:	d102      	bne.n	8006eac <takeMachineID+0xe8>
        		cursorPosition = 10;
 8006ea6:	230a      	movs	r3, #10
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	e008      	b.n	8006ebe <takeMachineID+0xfa>
        	} else if (cursorPosition == 14) {
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b0e      	cmp	r3, #14
 8006eb0:	d102      	bne.n	8006eb8 <takeMachineID+0xf4>
                cursorPosition = 3;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	e002      	b.n	8006ebe <takeMachineID+0xfa>
            } else {
            	cursorPosition++;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(350);
 8006ebe:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006ec2:	f001 fd29 	bl	8008918 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006ec6:	2108      	movs	r1, #8
 8006ec8:	4871      	ldr	r0, [pc, #452]	; (8007090 <takeMachineID+0x2cc>)
 8006eca:	f002 faf5 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d112      	bne.n	8006efa <takeMachineID+0x136>
            if (cursorPosition == 3) {
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d102      	bne.n	8006ee0 <takeMachineID+0x11c>
                cursorPosition = 14;
 8006eda:	230e      	movs	r3, #14
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e008      	b.n	8006ef2 <takeMachineID+0x12e>
            } else if(cursorPosition == 10) {
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b0a      	cmp	r3, #10
 8006ee4:	d102      	bne.n	8006eec <takeMachineID+0x128>
            	cursorPosition = 7;
 8006ee6:	2307      	movs	r3, #7
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e002      	b.n	8006ef2 <takeMachineID+0x12e>
            } else {
            	cursorPosition--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(350);
 8006ef2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006ef6:	f001 fd0f 	bl	8008918 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006efa:	2102      	movs	r1, #2
 8006efc:	485b      	ldr	r0, [pc, #364]	; (800706c <takeMachineID+0x2a8>)
 8006efe:	f002 fadb 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d16c      	bne.n	8006fe2 <takeMachineID+0x21e>
        	if(cursorPosition == 3) {
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d105      	bne.n	8006f1a <takeMachineID+0x156>
        		machineID[machineIDLoc] = '0';
 8006f0e:	4a56      	ldr	r2, [pc, #344]	; (8007068 <takeMachineID+0x2a4>)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4413      	add	r3, r2
 8006f14:	2230      	movs	r2, #48	; 0x30
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	e04f      	b.n	8006fba <takeMachineID+0x1f6>
        	} else if(cursorPosition == 4) {
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d105      	bne.n	8006f2c <takeMachineID+0x168>
        		machineID[machineIDLoc] = '1';
 8006f20:	4a51      	ldr	r2, [pc, #324]	; (8007068 <takeMachineID+0x2a4>)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4413      	add	r3, r2
 8006f26:	2231      	movs	r2, #49	; 0x31
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	e046      	b.n	8006fba <takeMachineID+0x1f6>
        	} else if(cursorPosition == 5) {
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b05      	cmp	r3, #5
 8006f30:	d105      	bne.n	8006f3e <takeMachineID+0x17a>
        		machineID[machineIDLoc] = '2';
 8006f32:	4a4d      	ldr	r2, [pc, #308]	; (8007068 <takeMachineID+0x2a4>)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4413      	add	r3, r2
 8006f38:	2232      	movs	r2, #50	; 0x32
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	e03d      	b.n	8006fba <takeMachineID+0x1f6>
        	} else if(cursorPosition == 6) {
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b06      	cmp	r3, #6
 8006f42:	d105      	bne.n	8006f50 <takeMachineID+0x18c>
        		machineID[machineIDLoc] = '3';
 8006f44:	4a48      	ldr	r2, [pc, #288]	; (8007068 <takeMachineID+0x2a4>)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	4413      	add	r3, r2
 8006f4a:	2233      	movs	r2, #51	; 0x33
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	e034      	b.n	8006fba <takeMachineID+0x1f6>
        	} else if(cursorPosition == 7) {
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b07      	cmp	r3, #7
 8006f54:	d105      	bne.n	8006f62 <takeMachineID+0x19e>
        		machineID[machineIDLoc] = '4';
 8006f56:	4a44      	ldr	r2, [pc, #272]	; (8007068 <takeMachineID+0x2a4>)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	2234      	movs	r2, #52	; 0x34
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e02b      	b.n	8006fba <takeMachineID+0x1f6>
        	} else if(cursorPosition == 10) {
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b0a      	cmp	r3, #10
 8006f66:	d105      	bne.n	8006f74 <takeMachineID+0x1b0>
        		machineID[machineIDLoc] = '5';
 8006f68:	4a3f      	ldr	r2, [pc, #252]	; (8007068 <takeMachineID+0x2a4>)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	2235      	movs	r2, #53	; 0x35
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	e022      	b.n	8006fba <takeMachineID+0x1f6>
        	} else if(cursorPosition == 11) {
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b0b      	cmp	r3, #11
 8006f78:	d105      	bne.n	8006f86 <takeMachineID+0x1c2>
        		machineID[machineIDLoc] = '6';
 8006f7a:	4a3b      	ldr	r2, [pc, #236]	; (8007068 <takeMachineID+0x2a4>)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4413      	add	r3, r2
 8006f80:	2236      	movs	r2, #54	; 0x36
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	e019      	b.n	8006fba <takeMachineID+0x1f6>
        	} else if(cursorPosition == 12) {
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b0c      	cmp	r3, #12
 8006f8a:	d105      	bne.n	8006f98 <takeMachineID+0x1d4>
        		machineID[machineIDLoc] = '7';
 8006f8c:	4a36      	ldr	r2, [pc, #216]	; (8007068 <takeMachineID+0x2a4>)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4413      	add	r3, r2
 8006f92:	2237      	movs	r2, #55	; 0x37
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	e010      	b.n	8006fba <takeMachineID+0x1f6>
        	} else if(cursorPosition == 13) {
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b0d      	cmp	r3, #13
 8006f9c:	d105      	bne.n	8006faa <takeMachineID+0x1e6>
        		machineID[machineIDLoc] = '8';
 8006f9e:	4a32      	ldr	r2, [pc, #200]	; (8007068 <takeMachineID+0x2a4>)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	2238      	movs	r2, #56	; 0x38
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e007      	b.n	8006fba <takeMachineID+0x1f6>
        	} else if(cursorPosition == 14) {
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b0e      	cmp	r3, #14
 8006fae:	d104      	bne.n	8006fba <takeMachineID+0x1f6>
        		machineID[machineIDLoc] = '9';
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <takeMachineID+0x2a4>)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	2239      	movs	r2, #57	; 0x39
 8006fb8:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	b2d9      	uxtb	r1, r3
 8006fbe:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <takeMachineID+0x2a4>)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	2001      	movs	r0, #1
 8006fca:	f000 ff64 	bl	8007e96 <lcd_print_char>

        	writeLoc++;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(450);
 8006fda:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8006fde:	f001 fc9b 	bl	8008918 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006fe2:	2104      	movs	r1, #4
 8006fe4:	4821      	ldr	r0, [pc, #132]	; (800706c <takeMachineID+0x2a8>)
 8006fe6:	f002 fa67 	bl	80094b8 <HAL_GPIO_ReadPin>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d12f      	bne.n	8007050 <takeMachineID+0x28c>
            if(strlen(machineID) >= 1) {
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <takeMachineID+0x2a4>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d027      	beq.n	8007048 <takeMachineID+0x284>

                machineID[machineIDLoc] = '\0';
 8006ff8:	4a1b      	ldr	r2, [pc, #108]	; (8007068 <takeMachineID+0x2a4>)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	3304      	adds	r3, #4
 8007008:	b2db      	uxtb	r3, r3
 800700a:	4619      	mov	r1, r3
 800700c:	2001      	movs	r0, #1
 800700e:	f000 ff63 	bl	8007ed8 <lcd_delete_char>
                HAL_Delay(50);
 8007012:	2032      	movs	r0, #50	; 0x32
 8007014:	f001 fc80 	bl	8008918 <HAL_Delay>

                if(writeLoc > 5) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b05      	cmp	r3, #5
 800701c:	dd03      	ble.n	8007026 <takeMachineID+0x262>
                	writeLoc--;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3b01      	subs	r3, #1
 8007022:	607b      	str	r3, [r7, #4]
 8007024:	e004      	b.n	8007030 <takeMachineID+0x26c>
                } else if(writeLoc < 5) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b04      	cmp	r3, #4
 800702a:	dc01      	bgt.n	8007030 <takeMachineID+0x26c>
                	writeLoc = 5;
 800702c:	2305      	movs	r3, #5
 800702e:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	dd03      	ble.n	800703e <takeMachineID+0x27a>
                	machineIDLoc--;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	3b01      	subs	r3, #1
 800703a:	60bb      	str	r3, [r7, #8]
 800703c:	e004      	b.n	8007048 <takeMachineID+0x284>
                } else if(machineIDLoc < 0) {
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	da01      	bge.n	8007048 <takeMachineID+0x284>
                	machineIDLoc = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(350);
 8007048:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800704c:	f001 fc64 	bl	8008918 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	4619      	mov	r1, r3
 8007056:	2002      	movs	r0, #2
 8007058:	f000 fee9 	bl	8007e2e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800705c:	e6cb      	b.n	8006df6 <takeMachineID+0x32>
    }
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	200001a0 	.word	0x200001a0
 800706c:	40010800 	.word	0x40010800
 8007070:	20000245 	.word	0x20000245
 8007074:	0800ddcc 	.word	0x0800ddcc
 8007078:	0800dde0 	.word	0x0800dde0
 800707c:	0800ddf4 	.word	0x0800ddf4
 8007080:	0800de04 	.word	0x0800de04
 8007084:	2000000c 	.word	0x2000000c
 8007088:	20000128 	.word	0x20000128
 800708c:	200003ac 	.word	0x200003ac
 8007090:	40011000 	.word	0x40011000

08007094 <takeWifiSSID>:

void takeWifiSSID() {
 8007094:	b5b0      	push	{r4, r5, r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
	mainSSIDSection:
    lcd_cursor(1);
 800709a:	2001      	movs	r0, #1
 800709c:	f000 ff44 	bl	8007f28 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 80070a0:	2214      	movs	r2, #20
 80070a2:	2100      	movs	r1, #0
 80070a4:	4894      	ldr	r0, [pc, #592]	; (80072f8 <takeWifiSSID+0x264>)
 80070a6:	f005 fb5a 	bl	800c75e <memset>
    HAL_Delay(500);
 80070aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80070ae:	f001 fc33 	bl	8008918 <HAL_Delay>

    int realCharPos = 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 80070b6:	4b91      	ldr	r3, [pc, #580]	; (80072fc <takeWifiSSID+0x268>)
 80070b8:	2201      	movs	r2, #1
 80070ba:	601a      	str	r2, [r3, #0]
    page = 1;
 80070bc:	4b90      	ldr	r3, [pc, #576]	; (8007300 <takeWifiSSID+0x26c>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 80070c6:	2307      	movs	r3, #7
 80070c8:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80070ca:	2101      	movs	r1, #1
 80070cc:	2002      	movs	r0, #2
 80070ce:	f7f9 ff09 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80070d2:	2108      	movs	r1, #8
 80070d4:	488b      	ldr	r0, [pc, #556]	; (8007304 <takeWifiSSID+0x270>)
 80070d6:	f002 f9ef 	bl	80094b8 <HAL_GPIO_ReadPin>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d13f      	bne.n	8007160 <takeWifiSSID+0xcc>
            lcd_cursor(0);
 80070e0:	2000      	movs	r0, #0
 80070e2:	f000 ff21 	bl	8007f28 <lcd_cursor>

            if(strlen(wifiSSID) > wifiCharacterLimit) {
 80070e6:	4884      	ldr	r0, [pc, #528]	; (80072f8 <takeWifiSSID+0x264>)
 80070e8:	f7f9 f89c 	bl	8000224 <strlen>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b14      	cmp	r3, #20
 80070f0:	d91f      	bls.n	8007132 <takeWifiSSID+0x9e>
                lcd_clear();
 80070f2:	f000 fee7 	bl	8007ec4 <lcd_clear>
                if(dilSecim == 0) {
 80070f6:	4b84      	ldr	r3, [pc, #528]	; (8007308 <takeWifiSSID+0x274>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <takeWifiSSID+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80070fe:	4a83      	ldr	r2, [pc, #524]	; (800730c <takeWifiSSID+0x278>)
 8007100:	2101      	movs	r1, #1
 8007102:	2001      	movs	r0, #1
 8007104:	f000 feb2 	bl	8007e6c <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007108:	4a81      	ldr	r2, [pc, #516]	; (8007310 <takeWifiSSID+0x27c>)
 800710a:	2101      	movs	r1, #1
 800710c:	2002      	movs	r0, #2
 800710e:	f000 fead 	bl	8007e6c <lcd_print>
 8007112:	e009      	b.n	8007128 <takeWifiSSID+0x94>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 8007114:	4a7f      	ldr	r2, [pc, #508]	; (8007314 <takeWifiSSID+0x280>)
 8007116:	2101      	movs	r1, #1
 8007118:	2001      	movs	r0, #1
 800711a:	f000 fea7 	bl	8007e6c <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 800711e:	4a7e      	ldr	r2, [pc, #504]	; (8007318 <takeWifiSSID+0x284>)
 8007120:	2101      	movs	r1, #1
 8007122:	2002      	movs	r0, #2
 8007124:	f000 fea2 	bl	8007e6c <lcd_print>
                }
                HAL_Delay(1200);
 8007128:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800712c:	f001 fbf4 	bl	8008918 <HAL_Delay>
                goto mainSSIDSection;
 8007130:	e7b3      	b.n	800709a <takeWifiSSID+0x6>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, wifiCharacterLimit);
 8007132:	4b7a      	ldr	r3, [pc, #488]	; (800731c <takeWifiSSID+0x288>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a7a      	ldr	r2, [pc, #488]	; (8007320 <takeWifiSSID+0x28c>)
 8007138:	4413      	add	r3, r2
 800713a:	4a7a      	ldr	r2, [pc, #488]	; (8007324 <takeWifiSSID+0x290>)
 800713c:	6811      	ldr	r1, [r2, #0]
 800713e:	6855      	ldr	r5, [r2, #4]
 8007140:	6894      	ldr	r4, [r2, #8]
 8007142:	68d0      	ldr	r0, [r2, #12]
 8007144:	6019      	str	r1, [r3, #0]
 8007146:	605d      	str	r5, [r3, #4]
 8007148:	609c      	str	r4, [r3, #8]
 800714a:	60d8      	str	r0, [r3, #12]
 800714c:	6911      	ldr	r1, [r2, #16]
 800714e:	6119      	str	r1, [r3, #16]
            HAL_Delay(750);
 8007150:	f240 20ee 	movw	r0, #750	; 0x2ee
 8007154:	f001 fbe0 	bl	8008918 <HAL_Delay>

            hafizaYaz = 1;
 8007158:	4b73      	ldr	r3, [pc, #460]	; (8007328 <takeWifiSSID+0x294>)
 800715a:	2201      	movs	r2, #1
 800715c:	701a      	strb	r2, [r3, #0]

            //HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
            //HAL_Delay(1000);

            break;
 800715e:	e163      	b.n	8007428 <takeWifiSSID+0x394>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007160:	2101      	movs	r1, #1
 8007162:	4868      	ldr	r0, [pc, #416]	; (8007304 <takeWifiSSID+0x270>)
 8007164:	f002 f9a8 	bl	80094b8 <HAL_GPIO_ReadPin>
 8007168:	4603      	mov	r3, r0
 800716a:	2b01      	cmp	r3, #1
 800716c:	d166      	bne.n	800723c <takeWifiSSID+0x1a8>
        	realCharPos++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b50      	cmp	r3, #80	; 0x50
 8007178:	dd01      	ble.n	800717e <takeWifiSSID+0xea>
        		realCharPos = 1;
 800717a:	2301      	movs	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 800717e:	4b5f      	ldr	r3, [pc, #380]	; (80072fc <takeWifiSSID+0x268>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b10      	cmp	r3, #16
 8007184:	d152      	bne.n	800722c <takeWifiSSID+0x198>
            	if(page == 1) {
 8007186:	4b5e      	ldr	r3, [pc, #376]	; (8007300 <takeWifiSSID+0x26c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d10c      	bne.n	80071a8 <takeWifiSSID+0x114>
            		cursorPosition = 1;
 800718e:	4b5b      	ldr	r3, [pc, #364]	; (80072fc <takeWifiSSID+0x268>)
 8007190:	2201      	movs	r2, #1
 8007192:	601a      	str	r2, [r3, #0]
            		page++;
 8007194:	4b5a      	ldr	r3, [pc, #360]	; (8007300 <takeWifiSSID+0x26c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3301      	adds	r3, #1
 800719a:	4a59      	ldr	r2, [pc, #356]	; (8007300 <takeWifiSSID+0x26c>)
 800719c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 800719e:	2102      	movs	r1, #2
 80071a0:	2002      	movs	r0, #2
 80071a2:	f7f9 fe9f 	bl	8000ee4 <printTemplate>
 80071a6:	e046      	b.n	8007236 <takeWifiSSID+0x1a2>
            	} else if(page == 2) {
 80071a8:	4b55      	ldr	r3, [pc, #340]	; (8007300 <takeWifiSSID+0x26c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d10c      	bne.n	80071ca <takeWifiSSID+0x136>
            		cursorPosition = 1;
 80071b0:	4b52      	ldr	r3, [pc, #328]	; (80072fc <takeWifiSSID+0x268>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	601a      	str	r2, [r3, #0]
            		page++;
 80071b6:	4b52      	ldr	r3, [pc, #328]	; (8007300 <takeWifiSSID+0x26c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3301      	adds	r3, #1
 80071bc:	4a50      	ldr	r2, [pc, #320]	; (8007300 <takeWifiSSID+0x26c>)
 80071be:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 80071c0:	2103      	movs	r1, #3
 80071c2:	2002      	movs	r0, #2
 80071c4:	f7f9 fe8e 	bl	8000ee4 <printTemplate>
 80071c8:	e035      	b.n	8007236 <takeWifiSSID+0x1a2>
            	} else if(page == 3) {
 80071ca:	4b4d      	ldr	r3, [pc, #308]	; (8007300 <takeWifiSSID+0x26c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d10c      	bne.n	80071ec <takeWifiSSID+0x158>
            		cursorPosition = 1;
 80071d2:	4b4a      	ldr	r3, [pc, #296]	; (80072fc <takeWifiSSID+0x268>)
 80071d4:	2201      	movs	r2, #1
 80071d6:	601a      	str	r2, [r3, #0]
            		page++;
 80071d8:	4b49      	ldr	r3, [pc, #292]	; (8007300 <takeWifiSSID+0x26c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	4a48      	ldr	r2, [pc, #288]	; (8007300 <takeWifiSSID+0x26c>)
 80071e0:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80071e2:	2104      	movs	r1, #4
 80071e4:	2002      	movs	r0, #2
 80071e6:	f7f9 fe7d 	bl	8000ee4 <printTemplate>
 80071ea:	e024      	b.n	8007236 <takeWifiSSID+0x1a2>
            	} else if(page == 4) {
 80071ec:	4b44      	ldr	r3, [pc, #272]	; (8007300 <takeWifiSSID+0x26c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d10c      	bne.n	800720e <takeWifiSSID+0x17a>
            		cursorPosition = 1;
 80071f4:	4b41      	ldr	r3, [pc, #260]	; (80072fc <takeWifiSSID+0x268>)
 80071f6:	2201      	movs	r2, #1
 80071f8:	601a      	str	r2, [r3, #0]
            		page++;
 80071fa:	4b41      	ldr	r3, [pc, #260]	; (8007300 <takeWifiSSID+0x26c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3301      	adds	r3, #1
 8007200:	4a3f      	ldr	r2, [pc, #252]	; (8007300 <takeWifiSSID+0x26c>)
 8007202:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8007204:	2105      	movs	r1, #5
 8007206:	2002      	movs	r0, #2
 8007208:	f7f9 fe6c 	bl	8000ee4 <printTemplate>
 800720c:	e013      	b.n	8007236 <takeWifiSSID+0x1a2>
            	} else if(page == 5) {
 800720e:	4b3c      	ldr	r3, [pc, #240]	; (8007300 <takeWifiSSID+0x26c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b05      	cmp	r3, #5
 8007214:	d10f      	bne.n	8007236 <takeWifiSSID+0x1a2>
            		cursorPosition = 1;
 8007216:	4b39      	ldr	r3, [pc, #228]	; (80072fc <takeWifiSSID+0x268>)
 8007218:	2201      	movs	r2, #1
 800721a:	601a      	str	r2, [r3, #0]
            		page = 1;
 800721c:	4b38      	ldr	r3, [pc, #224]	; (8007300 <takeWifiSSID+0x26c>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8007222:	2101      	movs	r1, #1
 8007224:	2002      	movs	r0, #2
 8007226:	f7f9 fe5d 	bl	8000ee4 <printTemplate>
 800722a:	e004      	b.n	8007236 <takeWifiSSID+0x1a2>
            	}
            } else {
            	cursorPosition++;
 800722c:	4b33      	ldr	r3, [pc, #204]	; (80072fc <takeWifiSSID+0x268>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	4a32      	ldr	r2, [pc, #200]	; (80072fc <takeWifiSSID+0x268>)
 8007234:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007236:	20fa      	movs	r0, #250	; 0xfa
 8007238:	f001 fb6e 	bl	8008918 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800723c:	2108      	movs	r1, #8
 800723e:	483b      	ldr	r0, [pc, #236]	; (800732c <takeWifiSSID+0x298>)
 8007240:	f002 f93a 	bl	80094b8 <HAL_GPIO_ReadPin>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d17a      	bne.n	8007340 <takeWifiSSID+0x2ac>
        	realCharPos--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3b01      	subs	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	dc01      	bgt.n	800725a <takeWifiSSID+0x1c6>
        		realCharPos = 80;
 8007256:	2350      	movs	r3, #80	; 0x50
 8007258:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 800725a:	4b28      	ldr	r3, [pc, #160]	; (80072fc <takeWifiSSID+0x268>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d166      	bne.n	8007330 <takeWifiSSID+0x29c>
            	if(page == 1) {
 8007262:	4b27      	ldr	r3, [pc, #156]	; (8007300 <takeWifiSSID+0x26c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d10a      	bne.n	8007280 <takeWifiSSID+0x1ec>
            		cursorPosition = 16;
 800726a:	4b24      	ldr	r3, [pc, #144]	; (80072fc <takeWifiSSID+0x268>)
 800726c:	2210      	movs	r2, #16
 800726e:	601a      	str	r2, [r3, #0]
            		page = 5;
 8007270:	4b23      	ldr	r3, [pc, #140]	; (8007300 <takeWifiSSID+0x26c>)
 8007272:	2205      	movs	r2, #5
 8007274:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8007276:	2105      	movs	r1, #5
 8007278:	2002      	movs	r0, #2
 800727a:	f7f9 fe33 	bl	8000ee4 <printTemplate>
 800727e:	e05c      	b.n	800733a <takeWifiSSID+0x2a6>
            	} else if(page == 2) {
 8007280:	4b1f      	ldr	r3, [pc, #124]	; (8007300 <takeWifiSSID+0x26c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d10a      	bne.n	800729e <takeWifiSSID+0x20a>
            		cursorPosition = 16;
 8007288:	4b1c      	ldr	r3, [pc, #112]	; (80072fc <takeWifiSSID+0x268>)
 800728a:	2210      	movs	r2, #16
 800728c:	601a      	str	r2, [r3, #0]
            		page = 1;
 800728e:	4b1c      	ldr	r3, [pc, #112]	; (8007300 <takeWifiSSID+0x26c>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8007294:	2101      	movs	r1, #1
 8007296:	2002      	movs	r0, #2
 8007298:	f7f9 fe24 	bl	8000ee4 <printTemplate>
 800729c:	e04d      	b.n	800733a <takeWifiSSID+0x2a6>
            	} else if(page == 3) {
 800729e:	4b18      	ldr	r3, [pc, #96]	; (8007300 <takeWifiSSID+0x26c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d10a      	bne.n	80072bc <takeWifiSSID+0x228>
            		cursorPosition = 16;
 80072a6:	4b15      	ldr	r3, [pc, #84]	; (80072fc <takeWifiSSID+0x268>)
 80072a8:	2210      	movs	r2, #16
 80072aa:	601a      	str	r2, [r3, #0]
            		page = 2;
 80072ac:	4b14      	ldr	r3, [pc, #80]	; (8007300 <takeWifiSSID+0x26c>)
 80072ae:	2202      	movs	r2, #2
 80072b0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 80072b2:	2102      	movs	r1, #2
 80072b4:	2002      	movs	r0, #2
 80072b6:	f7f9 fe15 	bl	8000ee4 <printTemplate>
 80072ba:	e03e      	b.n	800733a <takeWifiSSID+0x2a6>
            	} else if(page == 4) {
 80072bc:	4b10      	ldr	r3, [pc, #64]	; (8007300 <takeWifiSSID+0x26c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	d10a      	bne.n	80072da <takeWifiSSID+0x246>
            		cursorPosition = 16;
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <takeWifiSSID+0x268>)
 80072c6:	2210      	movs	r2, #16
 80072c8:	601a      	str	r2, [r3, #0]
            		page = 3;
 80072ca:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <takeWifiSSID+0x26c>)
 80072cc:	2203      	movs	r2, #3
 80072ce:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80072d0:	2103      	movs	r1, #3
 80072d2:	2002      	movs	r0, #2
 80072d4:	f7f9 fe06 	bl	8000ee4 <printTemplate>
 80072d8:	e02f      	b.n	800733a <takeWifiSSID+0x2a6>
            	} else if(page == 5) {
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <takeWifiSSID+0x26c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b05      	cmp	r3, #5
 80072e0:	d12b      	bne.n	800733a <takeWifiSSID+0x2a6>
            		cursorPosition = 16;
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <takeWifiSSID+0x268>)
 80072e4:	2210      	movs	r2, #16
 80072e6:	601a      	str	r2, [r3, #0]
            		page = 4;
 80072e8:	4b05      	ldr	r3, [pc, #20]	; (8007300 <takeWifiSSID+0x26c>)
 80072ea:	2204      	movs	r2, #4
 80072ec:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 80072ee:	2104      	movs	r1, #4
 80072f0:	2002      	movs	r0, #2
 80072f2:	f7f9 fdf7 	bl	8000ee4 <printTemplate>
 80072f6:	e020      	b.n	800733a <takeWifiSSID+0x2a6>
 80072f8:	200001ac 	.word	0x200001ac
 80072fc:	20000000 	.word	0x20000000
 8007300:	20000004 	.word	0x20000004
 8007304:	40010800 	.word	0x40010800
 8007308:	20000245 	.word	0x20000245
 800730c:	0800de18 	.word	0x0800de18
 8007310:	0800de2c 	.word	0x0800de2c
 8007314:	0800de40 	.word	0x0800de40
 8007318:	0800de54 	.word	0x0800de54
 800731c:	20000010 	.word	0x20000010
 8007320:	20000128 	.word	0x20000128
 8007324:	200001d4 	.word	0x200001d4
 8007328:	20000250 	.word	0x20000250
 800732c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007330:	4b3f      	ldr	r3, [pc, #252]	; (8007430 <takeWifiSSID+0x39c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3b01      	subs	r3, #1
 8007336:	4a3e      	ldr	r2, [pc, #248]	; (8007430 <takeWifiSSID+0x39c>)
 8007338:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800733a:	20fa      	movs	r0, #250	; 0xfa
 800733c:	f001 faec 	bl	8008918 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007340:	2102      	movs	r1, #2
 8007342:	483c      	ldr	r0, [pc, #240]	; (8007434 <takeWifiSSID+0x3a0>)
 8007344:	f002 f8b8 	bl	80094b8 <HAL_GPIO_ReadPin>
 8007348:	4603      	mov	r3, r0
 800734a:	2b01      	cmp	r3, #1
 800734c:	d127      	bne.n	800739e <takeWifiSSID+0x30a>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3b01      	subs	r3, #1
 8007352:	4618      	mov	r0, r3
 8007354:	f7f9 fa2e 	bl	80007b4 <getCharFromCursorPosition>
 8007358:	4603      	mov	r3, r0
 800735a:	4619      	mov	r1, r3
 800735c:	4a36      	ldr	r2, [pc, #216]	; (8007438 <takeWifiSSID+0x3a4>)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	4413      	add	r3, r2
 8007362:	460a      	mov	r2, r1
 8007364:	701a      	strb	r2, [r3, #0]
            wifiSSIDLoc[wifiNameLoc] = realCharPos - 1;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b2d9      	uxtb	r1, r3
 800736e:	4a33      	ldr	r2, [pc, #204]	; (800743c <takeWifiSSID+0x3a8>)
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	4413      	add	r3, r2
 8007374:	460a      	mov	r2, r1
 8007376:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	b2d9      	uxtb	r1, r3
 800737c:	4a2e      	ldr	r2, [pc, #184]	; (8007438 <takeWifiSSID+0x3a4>)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	4413      	add	r3, r2
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	2001      	movs	r0, #1
 8007388:	f000 fd85 	bl	8007e96 <lcd_print_char>

            writeLoc++;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3301      	adds	r3, #1
 8007390:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	3301      	adds	r3, #1
 8007396:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 8007398:	20fa      	movs	r0, #250	; 0xfa
 800739a:	f001 fabd 	bl	8008918 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800739e:	2104      	movs	r1, #4
 80073a0:	4824      	ldr	r0, [pc, #144]	; (8007434 <takeWifiSSID+0x3a0>)
 80073a2:	f002 f889 	bl	80094b8 <HAL_GPIO_ReadPin>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d133      	bne.n	8007414 <takeWifiSSID+0x380>
        	if(strlen(wifiSSID) >= 1) {
 80073ac:	4b22      	ldr	r3, [pc, #136]	; (8007438 <takeWifiSSID+0x3a4>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d02c      	beq.n	800740e <takeWifiSSID+0x37a>
        		wifiSSID[wifiNameLoc] = '\0';
 80073b4:	4a20      	ldr	r2, [pc, #128]	; (8007438 <takeWifiSSID+0x3a4>)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4413      	add	r3, r2
 80073ba:	2200      	movs	r2, #0
 80073bc:	701a      	strb	r2, [r3, #0]
        		wifiSSIDLoc[wifiNameLoc] = '\0';
 80073be:	4a1f      	ldr	r2, [pc, #124]	; (800743c <takeWifiSSID+0x3a8>)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4413      	add	r3, r2
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	3306      	adds	r3, #6
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	4619      	mov	r1, r3
 80073d2:	2001      	movs	r0, #1
 80073d4:	f000 fd80 	bl	8007ed8 <lcd_delete_char>
        		HAL_Delay(50);
 80073d8:	2032      	movs	r0, #50	; 0x32
 80073da:	f001 fa9d 	bl	8008918 <HAL_Delay>
        		if(writeLoc > 7) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b07      	cmp	r3, #7
 80073e2:	dd03      	ble.n	80073ec <takeWifiSSID+0x358>
        			writeLoc--;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	e004      	b.n	80073f6 <takeWifiSSID+0x362>
        		} else if(writeLoc < 7) {
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b06      	cmp	r3, #6
 80073f0:	dc01      	bgt.n	80073f6 <takeWifiSSID+0x362>
        			writeLoc = 7;
 80073f2:	2307      	movs	r3, #7
 80073f4:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	dd03      	ble.n	8007404 <takeWifiSSID+0x370>
        			wifiNameLoc--;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3b01      	subs	r3, #1
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	e004      	b.n	800740e <takeWifiSSID+0x37a>
        		} else if(wifiNameLoc < 0) {
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	da01      	bge.n	800740e <takeWifiSSID+0x37a>
        			wifiNameLoc = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(250);
 800740e:	20fa      	movs	r0, #250	; 0xfa
 8007410:	f001 fa82 	bl	8008918 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <takeWifiSSID+0x39c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	4619      	mov	r1, r3
 800741c:	2002      	movs	r0, #2
 800741e:	f000 fd06 	bl	8007e2e <lcd_gotoxy>
        bekle();
 8007422:	f7fd fbc3 	bl	8004bac <bekle>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007426:	e654      	b.n	80070d2 <takeWifiSSID+0x3e>
    }
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bdb0      	pop	{r4, r5, r7, pc}
 8007430:	20000000 	.word	0x20000000
 8007434:	40010800 	.word	0x40010800
 8007438:	200001ac 	.word	0x200001ac
 800743c:	200001d4 	.word	0x200001d4

08007440 <takeWifiPass>:

void takeWifiPass() {
 8007440:	b5b0      	push	{r4, r5, r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
	mainPASSSection:
    lcd_cursor(1);
 8007446:	2001      	movs	r0, #1
 8007448:	f000 fd6e 	bl	8007f28 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 800744c:	2214      	movs	r2, #20
 800744e:	2100      	movs	r1, #0
 8007450:	4894      	ldr	r0, [pc, #592]	; (80076a4 <takeWifiPass+0x264>)
 8007452:	f005 f984 	bl	800c75e <memset>
    HAL_Delay(500);
 8007456:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800745a:	f001 fa5d 	bl	8008918 <HAL_Delay>

    int realCharPos = 1;
 800745e:	2301      	movs	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8007462:	4b91      	ldr	r3, [pc, #580]	; (80076a8 <takeWifiPass+0x268>)
 8007464:	2201      	movs	r2, #1
 8007466:	601a      	str	r2, [r3, #0]
    page = 1;
 8007468:	4b90      	ldr	r3, [pc, #576]	; (80076ac <takeWifiPass+0x26c>)
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007472:	2307      	movs	r3, #7
 8007474:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007476:	2101      	movs	r1, #1
 8007478:	2003      	movs	r0, #3
 800747a:	f7f9 fd33 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800747e:	2108      	movs	r1, #8
 8007480:	488b      	ldr	r0, [pc, #556]	; (80076b0 <takeWifiPass+0x270>)
 8007482:	f002 f819 	bl	80094b8 <HAL_GPIO_ReadPin>
 8007486:	4603      	mov	r3, r0
 8007488:	2b01      	cmp	r3, #1
 800748a:	d13f      	bne.n	800750c <takeWifiPass+0xcc>
            lcd_cursor(0);
 800748c:	2000      	movs	r0, #0
 800748e:	f000 fd4b 	bl	8007f28 <lcd_cursor>

            if(strlen(wifiPass) > wifiCharacterLimit) {
 8007492:	4884      	ldr	r0, [pc, #528]	; (80076a4 <takeWifiPass+0x264>)
 8007494:	f7f8 fec6 	bl	8000224 <strlen>
 8007498:	4603      	mov	r3, r0
 800749a:	2b14      	cmp	r3, #20
 800749c:	d91f      	bls.n	80074de <takeWifiPass+0x9e>
                lcd_clear();
 800749e:	f000 fd11 	bl	8007ec4 <lcd_clear>
                if(dilSecim == 0) {
 80074a2:	4b84      	ldr	r3, [pc, #528]	; (80076b4 <takeWifiPass+0x274>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <takeWifiPass+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80074aa:	4a83      	ldr	r2, [pc, #524]	; (80076b8 <takeWifiPass+0x278>)
 80074ac:	2101      	movs	r1, #1
 80074ae:	2001      	movs	r0, #1
 80074b0:	f000 fcdc 	bl	8007e6c <lcd_print>
                	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80074b4:	4a81      	ldr	r2, [pc, #516]	; (80076bc <takeWifiPass+0x27c>)
 80074b6:	2101      	movs	r1, #1
 80074b8:	2002      	movs	r0, #2
 80074ba:	f000 fcd7 	bl	8007e6c <lcd_print>
 80074be:	e009      	b.n	80074d4 <takeWifiPass+0x94>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 80074c0:	4a7f      	ldr	r2, [pc, #508]	; (80076c0 <takeWifiPass+0x280>)
 80074c2:	2101      	movs	r1, #1
 80074c4:	2001      	movs	r0, #1
 80074c6:	f000 fcd1 	bl	8007e6c <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80074ca:	4a7e      	ldr	r2, [pc, #504]	; (80076c4 <takeWifiPass+0x284>)
 80074cc:	2101      	movs	r1, #1
 80074ce:	2002      	movs	r0, #2
 80074d0:	f000 fccc 	bl	8007e6c <lcd_print>
                }
                HAL_Delay(1200);
 80074d4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80074d8:	f001 fa1e 	bl	8008918 <HAL_Delay>
                goto mainPASSSection;
 80074dc:	e7b3      	b.n	8007446 <takeWifiPass+0x6>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, wifiCharacterLimit);
 80074de:	4b7a      	ldr	r3, [pc, #488]	; (80076c8 <takeWifiPass+0x288>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a7a      	ldr	r2, [pc, #488]	; (80076cc <takeWifiPass+0x28c>)
 80074e4:	4413      	add	r3, r2
 80074e6:	4a7a      	ldr	r2, [pc, #488]	; (80076d0 <takeWifiPass+0x290>)
 80074e8:	6811      	ldr	r1, [r2, #0]
 80074ea:	6855      	ldr	r5, [r2, #4]
 80074ec:	6894      	ldr	r4, [r2, #8]
 80074ee:	68d0      	ldr	r0, [r2, #12]
 80074f0:	6019      	str	r1, [r3, #0]
 80074f2:	605d      	str	r5, [r3, #4]
 80074f4:	609c      	str	r4, [r3, #8]
 80074f6:	60d8      	str	r0, [r3, #12]
 80074f8:	6911      	ldr	r1, [r2, #16]
 80074fa:	6119      	str	r1, [r3, #16]
            HAL_Delay(750);
 80074fc:	f240 20ee 	movw	r0, #750	; 0x2ee
 8007500:	f001 fa0a 	bl	8008918 <HAL_Delay>

            hafizaYaz = 1;
 8007504:	4b73      	ldr	r3, [pc, #460]	; (80076d4 <takeWifiPass+0x294>)
 8007506:	2201      	movs	r2, #1
 8007508:	701a      	strb	r2, [r3, #0]

            //HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
            //HAL_Delay(1000);

            break;
 800750a:	e163      	b.n	80077d4 <takeWifiPass+0x394>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800750c:	2101      	movs	r1, #1
 800750e:	4868      	ldr	r0, [pc, #416]	; (80076b0 <takeWifiPass+0x270>)
 8007510:	f001 ffd2 	bl	80094b8 <HAL_GPIO_ReadPin>
 8007514:	4603      	mov	r3, r0
 8007516:	2b01      	cmp	r3, #1
 8007518:	d166      	bne.n	80075e8 <takeWifiPass+0x1a8>
        	realCharPos++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b50      	cmp	r3, #80	; 0x50
 8007524:	dd01      	ble.n	800752a <takeWifiPass+0xea>
        	    realCharPos = 1;
 8007526:	2301      	movs	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 800752a:	4b5f      	ldr	r3, [pc, #380]	; (80076a8 <takeWifiPass+0x268>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b10      	cmp	r3, #16
 8007530:	d152      	bne.n	80075d8 <takeWifiPass+0x198>
            	if(page == 1) {
 8007532:	4b5e      	ldr	r3, [pc, #376]	; (80076ac <takeWifiPass+0x26c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10c      	bne.n	8007554 <takeWifiPass+0x114>
            		cursorPosition = 1;
 800753a:	4b5b      	ldr	r3, [pc, #364]	; (80076a8 <takeWifiPass+0x268>)
 800753c:	2201      	movs	r2, #1
 800753e:	601a      	str	r2, [r3, #0]
            		page++;
 8007540:	4b5a      	ldr	r3, [pc, #360]	; (80076ac <takeWifiPass+0x26c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3301      	adds	r3, #1
 8007546:	4a59      	ldr	r2, [pc, #356]	; (80076ac <takeWifiPass+0x26c>)
 8007548:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 800754a:	2102      	movs	r1, #2
 800754c:	2003      	movs	r0, #3
 800754e:	f7f9 fcc9 	bl	8000ee4 <printTemplate>
 8007552:	e046      	b.n	80075e2 <takeWifiPass+0x1a2>
            	} else if(page == 2) {
 8007554:	4b55      	ldr	r3, [pc, #340]	; (80076ac <takeWifiPass+0x26c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b02      	cmp	r3, #2
 800755a:	d10c      	bne.n	8007576 <takeWifiPass+0x136>
            		cursorPosition = 1;
 800755c:	4b52      	ldr	r3, [pc, #328]	; (80076a8 <takeWifiPass+0x268>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
            		page++;
 8007562:	4b52      	ldr	r3, [pc, #328]	; (80076ac <takeWifiPass+0x26c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	4a50      	ldr	r2, [pc, #320]	; (80076ac <takeWifiPass+0x26c>)
 800756a:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 800756c:	2103      	movs	r1, #3
 800756e:	2003      	movs	r0, #3
 8007570:	f7f9 fcb8 	bl	8000ee4 <printTemplate>
 8007574:	e035      	b.n	80075e2 <takeWifiPass+0x1a2>
            	} else if(page == 3) {
 8007576:	4b4d      	ldr	r3, [pc, #308]	; (80076ac <takeWifiPass+0x26c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d10c      	bne.n	8007598 <takeWifiPass+0x158>
            		cursorPosition = 1;
 800757e:	4b4a      	ldr	r3, [pc, #296]	; (80076a8 <takeWifiPass+0x268>)
 8007580:	2201      	movs	r2, #1
 8007582:	601a      	str	r2, [r3, #0]
            		page++;
 8007584:	4b49      	ldr	r3, [pc, #292]	; (80076ac <takeWifiPass+0x26c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	4a48      	ldr	r2, [pc, #288]	; (80076ac <takeWifiPass+0x26c>)
 800758c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 800758e:	2104      	movs	r1, #4
 8007590:	2003      	movs	r0, #3
 8007592:	f7f9 fca7 	bl	8000ee4 <printTemplate>
 8007596:	e024      	b.n	80075e2 <takeWifiPass+0x1a2>
            	} else if(page == 4) {
 8007598:	4b44      	ldr	r3, [pc, #272]	; (80076ac <takeWifiPass+0x26c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b04      	cmp	r3, #4
 800759e:	d10c      	bne.n	80075ba <takeWifiPass+0x17a>
            		cursorPosition = 1;
 80075a0:	4b41      	ldr	r3, [pc, #260]	; (80076a8 <takeWifiPass+0x268>)
 80075a2:	2201      	movs	r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
            		page++;
 80075a6:	4b41      	ldr	r3, [pc, #260]	; (80076ac <takeWifiPass+0x26c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	4a3f      	ldr	r2, [pc, #252]	; (80076ac <takeWifiPass+0x26c>)
 80075ae:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80075b0:	2105      	movs	r1, #5
 80075b2:	2003      	movs	r0, #3
 80075b4:	f7f9 fc96 	bl	8000ee4 <printTemplate>
 80075b8:	e013      	b.n	80075e2 <takeWifiPass+0x1a2>
            	} else if(page == 5) {
 80075ba:	4b3c      	ldr	r3, [pc, #240]	; (80076ac <takeWifiPass+0x26c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d10f      	bne.n	80075e2 <takeWifiPass+0x1a2>
            		cursorPosition = 1;
 80075c2:	4b39      	ldr	r3, [pc, #228]	; (80076a8 <takeWifiPass+0x268>)
 80075c4:	2201      	movs	r2, #1
 80075c6:	601a      	str	r2, [r3, #0]
            		page = 1;
 80075c8:	4b38      	ldr	r3, [pc, #224]	; (80076ac <takeWifiPass+0x26c>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80075ce:	2101      	movs	r1, #1
 80075d0:	2003      	movs	r0, #3
 80075d2:	f7f9 fc87 	bl	8000ee4 <printTemplate>
 80075d6:	e004      	b.n	80075e2 <takeWifiPass+0x1a2>
            	}
            } else {
            	cursorPosition++;
 80075d8:	4b33      	ldr	r3, [pc, #204]	; (80076a8 <takeWifiPass+0x268>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	4a32      	ldr	r2, [pc, #200]	; (80076a8 <takeWifiPass+0x268>)
 80075e0:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80075e2:	20fa      	movs	r0, #250	; 0xfa
 80075e4:	f001 f998 	bl	8008918 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80075e8:	2108      	movs	r1, #8
 80075ea:	483b      	ldr	r0, [pc, #236]	; (80076d8 <takeWifiPass+0x298>)
 80075ec:	f001 ff64 	bl	80094b8 <HAL_GPIO_ReadPin>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d17a      	bne.n	80076ec <takeWifiPass+0x2ac>
        	realCharPos--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	dc01      	bgt.n	8007606 <takeWifiPass+0x1c6>
        	    realCharPos = 80;
 8007602:	2350      	movs	r3, #80	; 0x50
 8007604:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 8007606:	4b28      	ldr	r3, [pc, #160]	; (80076a8 <takeWifiPass+0x268>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d166      	bne.n	80076dc <takeWifiPass+0x29c>
            	if(page == 1) {
 800760e:	4b27      	ldr	r3, [pc, #156]	; (80076ac <takeWifiPass+0x26c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d10a      	bne.n	800762c <takeWifiPass+0x1ec>
            		cursorPosition = 16;
 8007616:	4b24      	ldr	r3, [pc, #144]	; (80076a8 <takeWifiPass+0x268>)
 8007618:	2210      	movs	r2, #16
 800761a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800761c:	4b23      	ldr	r3, [pc, #140]	; (80076ac <takeWifiPass+0x26c>)
 800761e:	2205      	movs	r2, #5
 8007620:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8007622:	2105      	movs	r1, #5
 8007624:	2003      	movs	r0, #3
 8007626:	f7f9 fc5d 	bl	8000ee4 <printTemplate>
 800762a:	e05c      	b.n	80076e6 <takeWifiPass+0x2a6>
            	} else if(page == 2) {
 800762c:	4b1f      	ldr	r3, [pc, #124]	; (80076ac <takeWifiPass+0x26c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d10a      	bne.n	800764a <takeWifiPass+0x20a>
            		cursorPosition = 16;
 8007634:	4b1c      	ldr	r3, [pc, #112]	; (80076a8 <takeWifiPass+0x268>)
 8007636:	2210      	movs	r2, #16
 8007638:	601a      	str	r2, [r3, #0]
            		page = 1;
 800763a:	4b1c      	ldr	r3, [pc, #112]	; (80076ac <takeWifiPass+0x26c>)
 800763c:	2201      	movs	r2, #1
 800763e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8007640:	2101      	movs	r1, #1
 8007642:	2003      	movs	r0, #3
 8007644:	f7f9 fc4e 	bl	8000ee4 <printTemplate>
 8007648:	e04d      	b.n	80076e6 <takeWifiPass+0x2a6>
            	} else if(page == 3) {
 800764a:	4b18      	ldr	r3, [pc, #96]	; (80076ac <takeWifiPass+0x26c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d10a      	bne.n	8007668 <takeWifiPass+0x228>
            		cursorPosition = 16;
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <takeWifiPass+0x268>)
 8007654:	2210      	movs	r2, #16
 8007656:	601a      	str	r2, [r3, #0]
            		page = 2;
 8007658:	4b14      	ldr	r3, [pc, #80]	; (80076ac <takeWifiPass+0x26c>)
 800765a:	2202      	movs	r2, #2
 800765c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 800765e:	2102      	movs	r1, #2
 8007660:	2003      	movs	r0, #3
 8007662:	f7f9 fc3f 	bl	8000ee4 <printTemplate>
 8007666:	e03e      	b.n	80076e6 <takeWifiPass+0x2a6>
            	} else if(page == 4) {
 8007668:	4b10      	ldr	r3, [pc, #64]	; (80076ac <takeWifiPass+0x26c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b04      	cmp	r3, #4
 800766e:	d10a      	bne.n	8007686 <takeWifiPass+0x246>
            		cursorPosition = 16;
 8007670:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <takeWifiPass+0x268>)
 8007672:	2210      	movs	r2, #16
 8007674:	601a      	str	r2, [r3, #0]
            		page = 3;
 8007676:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <takeWifiPass+0x26c>)
 8007678:	2203      	movs	r2, #3
 800767a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 800767c:	2103      	movs	r1, #3
 800767e:	2003      	movs	r0, #3
 8007680:	f7f9 fc30 	bl	8000ee4 <printTemplate>
 8007684:	e02f      	b.n	80076e6 <takeWifiPass+0x2a6>
            	} else if(page == 5) {
 8007686:	4b09      	ldr	r3, [pc, #36]	; (80076ac <takeWifiPass+0x26c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b05      	cmp	r3, #5
 800768c:	d12b      	bne.n	80076e6 <takeWifiPass+0x2a6>
            		cursorPosition = 16;
 800768e:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <takeWifiPass+0x268>)
 8007690:	2210      	movs	r2, #16
 8007692:	601a      	str	r2, [r3, #0]
            		page = 4;
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <takeWifiPass+0x26c>)
 8007696:	2204      	movs	r2, #4
 8007698:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800769a:	2104      	movs	r1, #4
 800769c:	2003      	movs	r0, #3
 800769e:	f7f9 fc21 	bl	8000ee4 <printTemplate>
 80076a2:	e020      	b.n	80076e6 <takeWifiPass+0x2a6>
 80076a4:	200001c0 	.word	0x200001c0
 80076a8:	20000000 	.word	0x20000000
 80076ac:	20000004 	.word	0x20000004
 80076b0:	40010800 	.word	0x40010800
 80076b4:	20000245 	.word	0x20000245
 80076b8:	0800de18 	.word	0x0800de18
 80076bc:	0800de68 	.word	0x0800de68
 80076c0:	0800de7c 	.word	0x0800de7c
 80076c4:	0800de54 	.word	0x0800de54
 80076c8:	20000014 	.word	0x20000014
 80076cc:	20000128 	.word	0x20000128
 80076d0:	200001e8 	.word	0x200001e8
 80076d4:	20000250 	.word	0x20000250
 80076d8:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80076dc:	4b3f      	ldr	r3, [pc, #252]	; (80077dc <takeWifiPass+0x39c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	4a3e      	ldr	r2, [pc, #248]	; (80077dc <takeWifiPass+0x39c>)
 80076e4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80076e6:	20fa      	movs	r0, #250	; 0xfa
 80076e8:	f001 f916 	bl	8008918 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80076ec:	2102      	movs	r1, #2
 80076ee:	483c      	ldr	r0, [pc, #240]	; (80077e0 <takeWifiPass+0x3a0>)
 80076f0:	f001 fee2 	bl	80094b8 <HAL_GPIO_ReadPin>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d127      	bne.n	800774a <takeWifiPass+0x30a>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	4618      	mov	r0, r3
 8007700:	f7f9 f858 	bl	80007b4 <getCharFromCursorPosition>
 8007704:	4603      	mov	r3, r0
 8007706:	4619      	mov	r1, r3
 8007708:	4a36      	ldr	r2, [pc, #216]	; (80077e4 <takeWifiPass+0x3a4>)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4413      	add	r3, r2
 800770e:	460a      	mov	r2, r1
 8007710:	701a      	strb	r2, [r3, #0]
        	wifiPassLocArr[wifiPassLoc] = realCharPos - 1;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b2d9      	uxtb	r1, r3
 800771a:	4a33      	ldr	r2, [pc, #204]	; (80077e8 <takeWifiPass+0x3a8>)
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4413      	add	r3, r2
 8007720:	460a      	mov	r2, r1
 8007722:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	b2d9      	uxtb	r1, r3
 8007728:	4a2e      	ldr	r2, [pc, #184]	; (80077e4 <takeWifiPass+0x3a4>)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	2001      	movs	r0, #1
 8007734:	f000 fbaf 	bl	8007e96 <lcd_print_char>

            writeLoc++;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3301      	adds	r3, #1
 800773c:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	3301      	adds	r3, #1
 8007742:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 8007744:	20fa      	movs	r0, #250	; 0xfa
 8007746:	f001 f8e7 	bl	8008918 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800774a:	2104      	movs	r1, #4
 800774c:	4824      	ldr	r0, [pc, #144]	; (80077e0 <takeWifiPass+0x3a0>)
 800774e:	f001 feb3 	bl	80094b8 <HAL_GPIO_ReadPin>
 8007752:	4603      	mov	r3, r0
 8007754:	2b01      	cmp	r3, #1
 8007756:	d133      	bne.n	80077c0 <takeWifiPass+0x380>
            if(strlen(wifiPass) >= 1) {
 8007758:	4b22      	ldr	r3, [pc, #136]	; (80077e4 <takeWifiPass+0x3a4>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d02c      	beq.n	80077ba <takeWifiPass+0x37a>
            	wifiPass[wifiPassLoc] = '\0';
 8007760:	4a20      	ldr	r2, [pc, #128]	; (80077e4 <takeWifiPass+0x3a4>)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4413      	add	r3, r2
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
            	wifiPassLocArr[wifiPassLoc] = '\0';
 800776a:	4a1f      	ldr	r2, [pc, #124]	; (80077e8 <takeWifiPass+0x3a8>)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4413      	add	r3, r2
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	3306      	adds	r3, #6
 800777a:	b2db      	uxtb	r3, r3
 800777c:	4619      	mov	r1, r3
 800777e:	2001      	movs	r0, #1
 8007780:	f000 fbaa 	bl	8007ed8 <lcd_delete_char>
            	HAL_Delay(50);
 8007784:	2032      	movs	r0, #50	; 0x32
 8007786:	f001 f8c7 	bl	8008918 <HAL_Delay>

            	if(writeLoc > 7) {
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b07      	cmp	r3, #7
 800778e:	dd03      	ble.n	8007798 <takeWifiPass+0x358>
            		writeLoc--;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3b01      	subs	r3, #1
 8007794:	607b      	str	r3, [r7, #4]
 8007796:	e004      	b.n	80077a2 <takeWifiPass+0x362>
            	} else if(writeLoc < 7) {
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b06      	cmp	r3, #6
 800779c:	dc01      	bgt.n	80077a2 <takeWifiPass+0x362>
            		writeLoc = 7;
 800779e:	2307      	movs	r3, #7
 80077a0:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	dd03      	ble.n	80077b0 <takeWifiPass+0x370>
            		wifiPassLoc--;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	e004      	b.n	80077ba <takeWifiPass+0x37a>
            	} else if(wifiPassLoc < 0) {
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	da01      	bge.n	80077ba <takeWifiPass+0x37a>
            		wifiPassLoc = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(250);
 80077ba:	20fa      	movs	r0, #250	; 0xfa
 80077bc:	f001 f8ac 	bl	8008918 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80077c0:	4b06      	ldr	r3, [pc, #24]	; (80077dc <takeWifiPass+0x39c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	4619      	mov	r1, r3
 80077c8:	2002      	movs	r0, #2
 80077ca:	f000 fb30 	bl	8007e2e <lcd_gotoxy>
        bekle();
 80077ce:	f7fd f9ed 	bl	8004bac <bekle>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80077d2:	e654      	b.n	800747e <takeWifiPass+0x3e>
    }
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bdb0      	pop	{r4, r5, r7, pc}
 80077dc:	20000000 	.word	0x20000000
 80077e0:	40010800 	.word	0x40010800
 80077e4:	200001c0 	.word	0x200001c0
 80077e8:	200001e8 	.word	0x200001e8

080077ec <mergeData>:

char* mergeData() {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b09c      	sub	sp, #112	; 0x70
 80077f0:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80077f2:	2300      	movs	r3, #0
 80077f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077fa:	2228      	movs	r2, #40	; 0x28
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f004 ffad 	bl	800c75e <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007804:	4b67      	ldr	r3, [pc, #412]	; (80079a4 <mergeData+0x1b8>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	713b      	strb	r3, [r7, #4]
 800780a:	4b67      	ldr	r3, [pc, #412]	; (80079a8 <mergeData+0x1bc>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	717b      	strb	r3, [r7, #5]
 8007810:	4b66      	ldr	r3, [pc, #408]	; (80079ac <mergeData+0x1c0>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	71bb      	strb	r3, [r7, #6]
 8007816:	4b66      	ldr	r3, [pc, #408]	; (80079b0 <mergeData+0x1c4>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	71fb      	strb	r3, [r7, #7]
 800781c:	4b65      	ldr	r3, [pc, #404]	; (80079b4 <mergeData+0x1c8>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	723b      	strb	r3, [r7, #8]
 8007822:	4b65      	ldr	r3, [pc, #404]	; (80079b8 <mergeData+0x1cc>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	727b      	strb	r3, [r7, #9]
 8007828:	4b64      	ldr	r3, [pc, #400]	; (80079bc <mergeData+0x1d0>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	72bb      	strb	r3, [r7, #10]
 800782e:	4b64      	ldr	r3, [pc, #400]	; (80079c0 <mergeData+0x1d4>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	72fb      	strb	r3, [r7, #11]
 8007834:	4b63      	ldr	r3, [pc, #396]	; (80079c4 <mergeData+0x1d8>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	733b      	strb	r3, [r7, #12]
 800783a:	4b63      	ldr	r3, [pc, #396]	; (80079c8 <mergeData+0x1dc>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	737b      	strb	r3, [r7, #13]
 8007840:	4b62      	ldr	r3, [pc, #392]	; (80079cc <mergeData+0x1e0>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	73bb      	strb	r3, [r7, #14]
 8007846:	4b62      	ldr	r3, [pc, #392]	; (80079d0 <mergeData+0x1e4>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	73fb      	strb	r3, [r7, #15]
 800784c:	4b61      	ldr	r3, [pc, #388]	; (80079d4 <mergeData+0x1e8>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	743b      	strb	r3, [r7, #16]
 8007852:	4b61      	ldr	r3, [pc, #388]	; (80079d8 <mergeData+0x1ec>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	747b      	strb	r3, [r7, #17]
 8007858:	4b60      	ldr	r3, [pc, #384]	; (80079dc <mergeData+0x1f0>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	74bb      	strb	r3, [r7, #18]
 800785e:	4b60      	ldr	r3, [pc, #384]	; (80079e0 <mergeData+0x1f4>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	74fb      	strb	r3, [r7, #19]
 8007864:	4b5f      	ldr	r3, [pc, #380]	; (80079e4 <mergeData+0x1f8>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	753b      	strb	r3, [r7, #20]
 800786a:	4b5f      	ldr	r3, [pc, #380]	; (80079e8 <mergeData+0x1fc>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	757b      	strb	r3, [r7, #21]
 8007870:	4b5e      	ldr	r3, [pc, #376]	; (80079ec <mergeData+0x200>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	75bb      	strb	r3, [r7, #22]
 8007876:	4b5e      	ldr	r3, [pc, #376]	; (80079f0 <mergeData+0x204>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	75fb      	strb	r3, [r7, #23]
 800787c:	4b5d      	ldr	r3, [pc, #372]	; (80079f4 <mergeData+0x208>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	763b      	strb	r3, [r7, #24]
 8007882:	4b5d      	ldr	r3, [pc, #372]	; (80079f8 <mergeData+0x20c>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	767b      	strb	r3, [r7, #25]
 8007888:	4b5c      	ldr	r3, [pc, #368]	; (80079fc <mergeData+0x210>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	76bb      	strb	r3, [r7, #26]
 800788e:	4b5c      	ldr	r3, [pc, #368]	; (8007a00 <mergeData+0x214>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	76fb      	strb	r3, [r7, #27]
 8007894:	4b5b      	ldr	r3, [pc, #364]	; (8007a04 <mergeData+0x218>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	773b      	strb	r3, [r7, #28]
 800789a:	4b5b      	ldr	r3, [pc, #364]	; (8007a08 <mergeData+0x21c>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	777b      	strb	r3, [r7, #29]
 80078a0:	4b5a      	ldr	r3, [pc, #360]	; (8007a0c <mergeData+0x220>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	77bb      	strb	r3, [r7, #30]
 80078a6:	4b5a      	ldr	r3, [pc, #360]	; (8007a10 <mergeData+0x224>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	4b59      	ldr	r3, [pc, #356]	; (8007a14 <mergeData+0x228>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	f887 3020 	strb.w	r3, [r7, #32]
 80078b4:	4b58      	ldr	r3, [pc, #352]	; (8007a18 <mergeData+0x22c>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80078bc:	4b57      	ldr	r3, [pc, #348]	; (8007a1c <mergeData+0x230>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078c4:	4b56      	ldr	r3, [pc, #344]	; (8007a20 <mergeData+0x234>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078cc:	4b55      	ldr	r3, [pc, #340]	; (8007a24 <mergeData+0x238>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80078d4:	4b54      	ldr	r3, [pc, #336]	; (8007a28 <mergeData+0x23c>)
 80078d6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80078da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80078de:	4b52      	ldr	r3, [pc, #328]	; (8007a28 <mergeData+0x23c>)
 80078e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80078e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80078e8:	4b4f      	ldr	r3, [pc, #316]	; (8007a28 <mergeData+0x23c>)
 80078ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80078ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80078f2:	4b4d      	ldr	r3, [pc, #308]	; (8007a28 <mergeData+0x23c>)
 80078f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80078f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80078fc:	4b4a      	ldr	r3, [pc, #296]	; (8007a28 <mergeData+0x23c>)
 80078fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007902:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007906:	4b48      	ldr	r3, [pc, #288]	; (8007a28 <mergeData+0x23c>)
 8007908:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800790c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007910:	4b45      	ldr	r3, [pc, #276]	; (8007a28 <mergeData+0x23c>)
 8007912:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800791a:	4b43      	ldr	r3, [pc, #268]	; (8007a28 <mergeData+0x23c>)
 800791c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007920:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007924:	4b40      	ldr	r3, [pc, #256]	; (8007a28 <mergeData+0x23c>)
 8007926:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800792a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 800792e:	4b3e      	ldr	r3, [pc, #248]	; (8007a28 <mergeData+0x23c>)
 8007930:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007934:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007938:	2306      	movs	r3, #6
 800793a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800793e:	2300      	movs	r3, #0
 8007940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007942:	e015      	b.n	8007970 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007944:	1d3a      	adds	r2, r7, #4
 8007946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007948:	4413      	add	r3, r2
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007952:	4936      	ldr	r1, [pc, #216]	; (8007a2c <mergeData+0x240>)
 8007954:	4618      	mov	r0, r3
 8007956:	f004 fe91 	bl	800c67c <siprintf>
	    strcat(combinedString, temp);
 800795a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800795e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f004 feeb 	bl	800c740 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800796a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800796c:	3301      	adds	r3, #1
 800796e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007972:	2b2b      	cmp	r3, #43	; 0x2b
 8007974:	d9e6      	bls.n	8007944 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007976:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800797a:	4618      	mov	r0, r3
 800797c:	f7f8 fc52 	bl	8000224 <strlen>
 8007980:	4603      	mov	r3, r0
 8007982:	3301      	adds	r3, #1
 8007984:	4618      	mov	r0, r3
 8007986:	f004 fdc5 	bl	800c514 <malloc>
 800798a:	4603      	mov	r3, r0
 800798c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800798e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007992:	4619      	mov	r1, r3
 8007994:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007996:	f004 ff27 	bl	800c7e8 <strcpy>
	return result;
 800799a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800799c:	4618      	mov	r0, r3
 800799e:	3770      	adds	r7, #112	; 0x70
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000233 	.word	0x20000233
 80079a8:	20000225 	.word	0x20000225
 80079ac:	20000228 	.word	0x20000228
 80079b0:	20000229 	.word	0x20000229
 80079b4:	2000022a 	.word	0x2000022a
 80079b8:	20000231 	.word	0x20000231
 80079bc:	2000022b 	.word	0x2000022b
 80079c0:	2000022c 	.word	0x2000022c
 80079c4:	20000230 	.word	0x20000230
 80079c8:	2000022d 	.word	0x2000022d
 80079cc:	2000023d 	.word	0x2000023d
 80079d0:	2000022e 	.word	0x2000022e
 80079d4:	2000023e 	.word	0x2000023e
 80079d8:	2000022f 	.word	0x2000022f
 80079dc:	2000023f 	.word	0x2000023f
 80079e0:	20000232 	.word	0x20000232
 80079e4:	20000234 	.word	0x20000234
 80079e8:	20000235 	.word	0x20000235
 80079ec:	20000236 	.word	0x20000236
 80079f0:	20000237 	.word	0x20000237
 80079f4:	20000238 	.word	0x20000238
 80079f8:	20000239 	.word	0x20000239
 80079fc:	2000023a 	.word	0x2000023a
 8007a00:	2000023b 	.word	0x2000023b
 8007a04:	2000023c 	.word	0x2000023c
 8007a08:	20000240 	.word	0x20000240
 8007a0c:	20000242 	.word	0x20000242
 8007a10:	20000221 	.word	0x20000221
 8007a14:	20000222 	.word	0x20000222
 8007a18:	20000008 	.word	0x20000008
 8007a1c:	20000009 	.word	0x20000009
 8007a20:	20000223 	.word	0x20000223
 8007a24:	20000245 	.word	0x20000245
 8007a28:	20000128 	.word	0x20000128
 8007a2c:	0800de90 	.word	0x0800de90

08007a30 <convertAndSendData>:

void convertAndSendData() {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 8007a36:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <convertAndSendData+0x78>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007a3e:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <convertAndSendData+0x7c>)
 8007a40:	2101      	movs	r1, #1
 8007a42:	2001      	movs	r0, #1
 8007a44:	f000 fa12 	bl	8007e6c <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007a48:	4a19      	ldr	r2, [pc, #100]	; (8007ab0 <convertAndSendData+0x80>)
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	2002      	movs	r0, #2
 8007a4e:	f000 fa0d 	bl	8007e6c <lcd_print>
 8007a52:	e009      	b.n	8007a68 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007a54:	4a17      	ldr	r2, [pc, #92]	; (8007ab4 <convertAndSendData+0x84>)
 8007a56:	2101      	movs	r1, #1
 8007a58:	2001      	movs	r0, #1
 8007a5a:	f000 fa07 	bl	8007e6c <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007a5e:	4a16      	ldr	r2, [pc, #88]	; (8007ab8 <convertAndSendData+0x88>)
 8007a60:	2101      	movs	r1, #1
 8007a62:	2002      	movs	r0, #2
 8007a64:	f000 fa02 	bl	8007e6c <lcd_print>
	}
	for(int i=0; i<2; i++) {
 8007a68:	2300      	movs	r3, #0
 8007a6a:	607b      	str	r3, [r7, #4]
 8007a6c:	e00a      	b.n	8007a84 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 8007a6e:	f7ff febd 	bl	80077ec <mergeData>
 8007a72:	4603      	mov	r3, r0
 8007a74:	461a      	mov	r2, r3
 8007a76:	4911      	ldr	r1, [pc, #68]	; (8007abc <convertAndSendData+0x8c>)
 8007a78:	4811      	ldr	r0, [pc, #68]	; (8007ac0 <convertAndSendData+0x90>)
 8007a7a:	f7f8 ffa5 	bl	80009c8 <sendMachineData>
	for(int i=0; i<2; i++) {
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3301      	adds	r3, #1
 8007a82:	607b      	str	r3, [r7, #4]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	ddf1      	ble.n	8007a6e <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 8007a8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a8e:	f000 ff43 	bl	8008918 <HAL_Delay>
	lcd_clear();
 8007a92:	f000 fa17 	bl	8007ec4 <lcd_clear>
	HAL_Delay(500);
 8007a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a9a:	f000 ff3d 	bl	8008918 <HAL_Delay>
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000245 	.word	0x20000245
 8007aac:	0800de94 	.word	0x0800de94
 8007ab0:	0800dea8 	.word	0x0800dea8
 8007ab4:	0800debc 	.word	0x0800debc
 8007ab8:	0800ded0 	.word	0x0800ded0
 8007abc:	200001a0 	.word	0x200001a0
 8007ac0:	20000448 	.word	0x20000448

08007ac4 <iotSetup>:

void iotSetup() {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007ac8:	4b17      	ldr	r3, [pc, #92]	; (8007b28 <iotSetup+0x64>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01d      	beq.n	8007b0c <iotSetup+0x48>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 8007ad0:	4b16      	ldr	r3, [pc, #88]	; (8007b2c <iotSetup+0x68>)
 8007ad2:	7adb      	ldrb	r3, [r3, #11]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <iotSetup+0x18>
			takeMachineID();
 8007ad8:	f7ff f974 	bl	8006dc4 <takeMachineID>
		}
		HAL_Delay(500);
 8007adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ae0:	f000 ff1a 	bl	8008918 <HAL_Delay>

		if(wifiSSID[0] != '\0') {
 8007ae4:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <iotSetup+0x6c>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <iotSetup+0x2c>
			takeWifiSSID();
 8007aec:	f7ff fad2 	bl	8007094 <takeWifiSSID>
		}
		HAL_Delay(500);
 8007af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007af4:	f000 ff10 	bl	8008918 <HAL_Delay>

		if(wifiPass[0] != '\0') {
 8007af8:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <iotSetup+0x70>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <iotSetup+0x40>
			takeWifiPass();
 8007b00:	f7ff fc9e 	bl	8007440 <takeWifiPass>
		}
		HAL_Delay(500);
 8007b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b08:	f000 ff06 	bl	8008918 <HAL_Delay>
	}

	//ESP8266_Init(&huart1, "iPhone", "ipek123456");
	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007b0c:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <iotSetup+0x70>)
 8007b0e:	4908      	ldr	r1, [pc, #32]	; (8007b30 <iotSetup+0x6c>)
 8007b10:	4809      	ldr	r0, [pc, #36]	; (8007b38 <iotSetup+0x74>)
 8007b12:	f7f8 feaf 	bl	8000874 <ESP8266_Init>
	HAL_Delay(500);
 8007b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b1a:	f000 fefd 	bl	8008918 <HAL_Delay>
	convertAndSendData();
 8007b1e:	f7ff ff87 	bl	8007a30 <convertAndSendData>
}
 8007b22:	bf00      	nop
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000243 	.word	0x20000243
 8007b2c:	200001a0 	.word	0x200001a0
 8007b30:	200001ac 	.word	0x200001ac
 8007b34:	200001c0 	.word	0x200001c0
 8007b38:	20000448 	.word	0x20000448

08007b3c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	f023 030f 	bic.w	r3, r3, #15
 8007b4c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007b54:	7b7b      	ldrb	r3, [r7, #13]
 8007b56:	f043 030c 	orr.w	r3, r3, #12
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007b5e:	7b7b      	ldrb	r3, [r7, #13]
 8007b60:	f043 0308 	orr.w	r3, r3, #8
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007b68:	7b3b      	ldrb	r3, [r7, #12]
 8007b6a:	f043 030c 	orr.w	r3, r3, #12
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007b72:	7b3b      	ldrb	r3, [r7, #12]
 8007b74:	f043 0308 	orr.w	r3, r3, #8
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b7c:	bf00      	nop
 8007b7e:	4825      	ldr	r0, [pc, #148]	; (8007c14 <lcd_send_cmd+0xd8>)
 8007b80:	f002 fac3 	bl	800a10a <HAL_I2C_GetError>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d0f9      	beq.n	8007b7e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b8a:	bf00      	nop
 8007b8c:	4821      	ldr	r0, [pc, #132]	; (8007c14 <lcd_send_cmd+0xd8>)
 8007b8e:	f002 faaf 	bl	800a0f0 <HAL_I2C_GetState>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b20      	cmp	r3, #32
 8007b96:	d1f9      	bne.n	8007b8c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b98:	4b1f      	ldr	r3, [pc, #124]	; (8007c18 <lcd_send_cmd+0xdc>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d116      	bne.n	8007bce <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
 8007ba4:	e00f      	b.n	8007bc6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	3310      	adds	r3, #16
 8007baa:	443b      	add	r3, r7
 8007bac:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	f022 0208 	bic.w	r2, r2, #8
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	3310      	adds	r3, #16
 8007bba:	443b      	add	r3, r7
 8007bbc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d9ec      	bls.n	8007ba6 <lcd_send_cmd+0x6a>
 8007bcc:	e015      	b.n	8007bfa <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73bb      	strb	r3, [r7, #14]
 8007bd2:	e00f      	b.n	8007bf4 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	3310      	adds	r3, #16
 8007bd8:	443b      	add	r3, r7
 8007bda:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	f042 0208 	orr.w	r2, r2, #8
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	3310      	adds	r3, #16
 8007be8:	443b      	add	r3, r7
 8007bea:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	73bb      	strb	r3, [r7, #14]
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d9ec      	bls.n	8007bd4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007bfa:	f107 0208 	add.w	r2, r7, #8
 8007bfe:	2364      	movs	r3, #100	; 0x64
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	2304      	movs	r3, #4
 8007c04:	214e      	movs	r1, #78	; 0x4e
 8007c06:	4803      	ldr	r0, [pc, #12]	; (8007c14 <lcd_send_cmd+0xd8>)
 8007c08:	f001 fe12 	bl	8009830 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007c0c:	bf00      	nop
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	200003ac 	.word	0x200003ac
 8007c18:	20000382 	.word	0x20000382

08007c1c <lcd_send_data>:

void lcd_send_data (char data) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	4603      	mov	r3, r0
 8007c24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	f023 030f 	bic.w	r3, r3, #15
 8007c2c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007c34:	7b7b      	ldrb	r3, [r7, #13]
 8007c36:	f043 030d 	orr.w	r3, r3, #13
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007c3e:	7b7b      	ldrb	r3, [r7, #13]
 8007c40:	f043 0309 	orr.w	r3, r3, #9
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007c48:	7b3b      	ldrb	r3, [r7, #12]
 8007c4a:	f043 030d 	orr.w	r3, r3, #13
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007c52:	7b3b      	ldrb	r3, [r7, #12]
 8007c54:	f043 0309 	orr.w	r3, r3, #9
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c5c:	bf00      	nop
 8007c5e:	4825      	ldr	r0, [pc, #148]	; (8007cf4 <lcd_send_data+0xd8>)
 8007c60:	f002 fa53 	bl	800a10a <HAL_I2C_GetError>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d0f9      	beq.n	8007c5e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c6a:	bf00      	nop
 8007c6c:	4821      	ldr	r0, [pc, #132]	; (8007cf4 <lcd_send_data+0xd8>)
 8007c6e:	f002 fa3f 	bl	800a0f0 <HAL_I2C_GetState>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d1f9      	bne.n	8007c6c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007c78:	4b1f      	ldr	r3, [pc, #124]	; (8007cf8 <lcd_send_data+0xdc>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d116      	bne.n	8007cae <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]
 8007c84:	e00f      	b.n	8007ca6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	3310      	adds	r3, #16
 8007c8a:	443b      	add	r3, r7
 8007c8c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	f022 0208 	bic.w	r2, r2, #8
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	3310      	adds	r3, #16
 8007c9a:	443b      	add	r3, r7
 8007c9c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	73fb      	strb	r3, [r7, #15]
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d9ec      	bls.n	8007c86 <lcd_send_data+0x6a>
 8007cac:	e015      	b.n	8007cda <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73bb      	strb	r3, [r7, #14]
 8007cb2:	e00f      	b.n	8007cd4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	3310      	adds	r3, #16
 8007cb8:	443b      	add	r3, r7
 8007cba:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	f042 0208 	orr.w	r2, r2, #8
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	3310      	adds	r3, #16
 8007cc8:	443b      	add	r3, r7
 8007cca:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	73bb      	strb	r3, [r7, #14]
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d9ec      	bls.n	8007cb4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007cda:	f107 0208 	add.w	r2, r7, #8
 8007cde:	2364      	movs	r3, #100	; 0x64
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	2304      	movs	r3, #4
 8007ce4:	214e      	movs	r1, #78	; 0x4e
 8007ce6:	4803      	ldr	r0, [pc, #12]	; (8007cf4 <lcd_send_data+0xd8>)
 8007ce8:	f001 fda2 	bl	8009830 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007cec:	bf00      	nop
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	200003ac 	.word	0x200003ac
 8007cf8:	20000382 	.word	0x20000382

08007cfc <lcd_send_string>:

void lcd_send_string (char *str) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007d04:	e006      	b.n	8007d14 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff ff84 	bl	8007c1c <lcd_send_data>
	while (*str) {
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f4      	bne.n	8007d06 <lcd_send_string+0xa>
	}
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	4603      	mov	r3, r0
 8007d30:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	f023 030f 	bic.w	r3, r3, #15
 8007d38:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007d40:	7b7b      	ldrb	r3, [r7, #13]
 8007d42:	f043 030d 	orr.w	r3, r3, #13
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007d4a:	7b7b      	ldrb	r3, [r7, #13]
 8007d4c:	f043 0309 	orr.w	r3, r3, #9
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007d54:	7b3b      	ldrb	r3, [r7, #12]
 8007d56:	f043 030d 	orr.w	r3, r3, #13
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007d5e:	7b3b      	ldrb	r3, [r7, #12]
 8007d60:	f043 0309 	orr.w	r3, r3, #9
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007d68:	bf00      	nop
 8007d6a:	4825      	ldr	r0, [pc, #148]	; (8007e00 <lcd_send_char+0xd8>)
 8007d6c:	f002 f9cd 	bl	800a10a <HAL_I2C_GetError>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d0f9      	beq.n	8007d6a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007d76:	bf00      	nop
 8007d78:	4821      	ldr	r0, [pc, #132]	; (8007e00 <lcd_send_char+0xd8>)
 8007d7a:	f002 f9b9 	bl	800a0f0 <HAL_I2C_GetState>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	d1f9      	bne.n	8007d78 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007d84:	4b1f      	ldr	r3, [pc, #124]	; (8007e04 <lcd_send_char+0xdc>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d116      	bne.n	8007dba <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
 8007d90:	e00f      	b.n	8007db2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	3310      	adds	r3, #16
 8007d96:	443b      	add	r3, r7
 8007d98:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	f022 0208 	bic.w	r2, r2, #8
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	3310      	adds	r3, #16
 8007da6:	443b      	add	r3, r7
 8007da8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	3301      	adds	r3, #1
 8007db0:	73fb      	strb	r3, [r7, #15]
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d9ec      	bls.n	8007d92 <lcd_send_char+0x6a>
 8007db8:	e015      	b.n	8007de6 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73bb      	strb	r3, [r7, #14]
 8007dbe:	e00f      	b.n	8007de0 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	3310      	adds	r3, #16
 8007dc4:	443b      	add	r3, r7
 8007dc6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	f042 0208 	orr.w	r2, r2, #8
 8007dd0:	b2d2      	uxtb	r2, r2
 8007dd2:	3310      	adds	r3, #16
 8007dd4:	443b      	add	r3, r7
 8007dd6:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	73bb      	strb	r3, [r7, #14]
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d9ec      	bls.n	8007dc0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007de6:	f107 0208 	add.w	r2, r7, #8
 8007dea:	2364      	movs	r3, #100	; 0x64
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	2304      	movs	r3, #4
 8007df0:	214e      	movs	r1, #78	; 0x4e
 8007df2:	4803      	ldr	r0, [pc, #12]	; (8007e00 <lcd_send_char+0xd8>)
 8007df4:	f001 fd1c 	bl	8009830 <HAL_I2C_Master_Transmit>
}
 8007df8:	bf00      	nop
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	200003ac 	.word	0x200003ac
 8007e04:	20000382 	.word	0x20000382

08007e08 <lcd_init>:

void lcd_init (void) {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007e0c:	2002      	movs	r0, #2
 8007e0e:	f7ff fe95 	bl	8007b3c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007e12:	2028      	movs	r0, #40	; 0x28
 8007e14:	f7ff fe92 	bl	8007b3c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007e18:	200c      	movs	r0, #12
 8007e1a:	f7ff fe8f 	bl	8007b3c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007e1e:	2080      	movs	r0, #128	; 0x80
 8007e20:	f7ff fe8c 	bl	8007b3c <lcd_send_cmd>
	lcd_backlight(1);
 8007e24:	2001      	movs	r0, #1
 8007e26:	f000 f86d 	bl	8007f04 <lcd_backlight>
}
 8007e2a:	bf00      	nop
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	4603      	mov	r3, r0
 8007e36:	460a      	mov	r2, r1
 8007e38:	71fb      	strb	r3, [r7, #7]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d106      	bne.n	8007e52 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007e44:	79bb      	ldrb	r3, [r7, #6]
 8007e46:	337f      	adds	r3, #127	; 0x7f
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fe76 	bl	8007b3c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007e50:	e008      	b.n	8007e64 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d105      	bne.n	8007e64 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007e58:	79bb      	ldrb	r3, [r7, #6]
 8007e5a:	3b41      	subs	r3, #65	; 0x41
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fe6c 	bl	8007b3c <lcd_send_cmd>
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	603a      	str	r2, [r7, #0]
 8007e76:	71fb      	strb	r3, [r7, #7]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007e7c:	79ba      	ldrb	r2, [r7, #6]
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	4611      	mov	r1, r2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff ffd3 	bl	8007e2e <lcd_gotoxy>
	lcd_send_string(str);
 8007e88:	6838      	ldr	r0, [r7, #0]
 8007e8a:	f7ff ff37 	bl	8007cfc <lcd_send_string>
}
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	71fb      	strb	r3, [r7, #7]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	71bb      	strb	r3, [r7, #6]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007ea8:	79ba      	ldrb	r2, [r7, #6]
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff ffbd 	bl	8007e2e <lcd_gotoxy>
    lcd_send_char(ch);
 8007eb4:	797b      	ldrb	r3, [r7, #5]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff ff36 	bl	8007d28 <lcd_send_char>
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <lcd_clear>:

void lcd_clear(void) {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f7ff fe37 	bl	8007b3c <lcd_send_cmd>
    HAL_Delay(2);
 8007ece:	2002      	movs	r0, #2
 8007ed0:	f000 fd22 	bl	8008918 <HAL_Delay>
}
 8007ed4:	bf00      	nop
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	460a      	mov	r2, r1
 8007ee2:	71fb      	strb	r3, [r7, #7]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007ee8:	79ba      	ldrb	r2, [r7, #6]
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	4611      	mov	r1, r2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7ff ff9d 	bl	8007e2e <lcd_gotoxy>

    lcd_send_char(' ');
 8007ef4:	2020      	movs	r0, #32
 8007ef6:	f7ff ff17 	bl	8007d28 <lcd_send_char>
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007f0e:	4a05      	ldr	r2, [pc, #20]	; (8007f24 <lcd_backlight+0x20>)
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007f14:	2000      	movs	r0, #0
 8007f16:	f7ff fe11 	bl	8007b3c <lcd_send_cmd>
}
 8007f1a:	bf00      	nop
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000382 	.word	0x20000382

08007f28 <lcd_cursor>:

void lcd_cursor(int state) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d106      	bne.n	8007f44 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007f36:	200e      	movs	r0, #14
 8007f38:	f7ff fe00 	bl	8007b3c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007f3c:	200f      	movs	r0, #15
 8007f3e:	f7ff fdfd 	bl	8007b3c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007f42:	e002      	b.n	8007f4a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007f44:	200c      	movs	r0, #12
 8007f46:	f7ff fdf9 	bl	8007b3c <lcd_send_cmd>
}
 8007f4a:	bf00      	nop
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007f5c:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3301      	adds	r3, #1
 8007f62:	4a03      	ldr	r2, [pc, #12]	; (8007f70 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007f64:	6013      	str	r3, [r2, #0]
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr
 8007f70:	20000200 	.word	0x20000200

08007f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f78:	f000 fc6c 	bl	8008854 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007f7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f80:	f000 fcca 	bl	8008918 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f84:	f000 f89c 	bl	80080c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f88:	f000 f9be 	bl	8008308 <MX_GPIO_Init>
  MX_CAN_Init();
 8007f8c:	f000 f8de 	bl	800814c <MX_CAN_Init>
  MX_I2C1_Init();
 8007f90:	f000 f910 	bl	80081b4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007f94:	f000 f93c 	bl	8008210 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007f98:	f000 f98c 	bl	80082b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	2140      	movs	r1, #64	; 0x40
 8007fa0:	483e      	ldr	r0, [pc, #248]	; (800809c <main+0x128>)
 8007fa2:	f001 faa0 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	2180      	movs	r1, #128	; 0x80
 8007faa:	483c      	ldr	r0, [pc, #240]	; (800809c <main+0x128>)
 8007fac:	f001 fa9b 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007fb0:	200a      	movs	r0, #10
 8007fb2:	f000 fcb1 	bl	8008918 <HAL_Delay>
  lcd_init();
 8007fb6:	f7ff ff27 	bl	8007e08 <lcd_init>
  HAL_Delay(10);
 8007fba:	200a      	movs	r0, #10
 8007fbc:	f000 fcac 	bl	8008918 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007fc0:	4837      	ldr	r0, [pc, #220]	; (80080a0 <main+0x12c>)
 8007fc2:	f003 f943 	bl	800b24c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007fc6:	bf00      	nop
 8007fc8:	4836      	ldr	r0, [pc, #216]	; (80080a4 <main+0x130>)
 8007fca:	f002 f89e 	bl	800a10a <HAL_I2C_GetError>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d0f9      	beq.n	8007fc8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007fd4:	bf00      	nop
 8007fd6:	4833      	ldr	r0, [pc, #204]	; (80080a4 <main+0x130>)
 8007fd8:	f002 f88a 	bl	800a0f0 <HAL_I2C_GetState>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d1f9      	bne.n	8007fd6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007fe8:	482c      	ldr	r0, [pc, #176]	; (800809c <main+0x128>)
 8007fea:	f001 fa7c 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ff4:	4829      	ldr	r0, [pc, #164]	; (800809c <main+0x128>)
 8007ff6:	f001 fa76 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2104      	movs	r1, #4
 8007ffe:	4827      	ldr	r0, [pc, #156]	; (800809c <main+0x128>)
 8008000:	f001 fa71 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008004:	2200      	movs	r2, #0
 8008006:	2102      	movs	r1, #2
 8008008:	4824      	ldr	r0, [pc, #144]	; (800809c <main+0x128>)
 800800a:	f001 fa6c 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800800e:	2200      	movs	r2, #0
 8008010:	2101      	movs	r1, #1
 8008012:	4822      	ldr	r0, [pc, #136]	; (800809c <main+0x128>)
 8008014:	f001 fa67 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008018:	2200      	movs	r2, #0
 800801a:	2120      	movs	r1, #32
 800801c:	4822      	ldr	r0, [pc, #136]	; (80080a8 <main+0x134>)
 800801e:	f001 fa62 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008022:	2200      	movs	r2, #0
 8008024:	2110      	movs	r1, #16
 8008026:	4820      	ldr	r0, [pc, #128]	; (80080a8 <main+0x134>)
 8008028:	f001 fa5d 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800802c:	2200      	movs	r2, #0
 800802e:	2180      	movs	r1, #128	; 0x80
 8008030:	481e      	ldr	r0, [pc, #120]	; (80080ac <main+0x138>)
 8008032:	f001 fa58 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008036:	2200      	movs	r2, #0
 8008038:	2140      	movs	r1, #64	; 0x40
 800803a:	481c      	ldr	r0, [pc, #112]	; (80080ac <main+0x138>)
 800803c:	f001 fa53 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008040:	2200      	movs	r2, #0
 8008042:	2120      	movs	r1, #32
 8008044:	4819      	ldr	r0, [pc, #100]	; (80080ac <main+0x138>)
 8008046:	f001 fa4e 	bl	80094e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800804a:	2200      	movs	r2, #0
 800804c:	2110      	movs	r1, #16
 800804e:	4817      	ldr	r0, [pc, #92]	; (80080ac <main+0x138>)
 8008050:	f001 fa49 	bl	80094e6 <HAL_GPIO_WritePin>

  i2cTest();
 8008054:	f7f8 fe98 	bl	8000d88 <i2cTest>
  HAL_Delay(100);
 8008058:	2064      	movs	r0, #100	; 0x64
 800805a:	f000 fc5d 	bl	8008918 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 800805e:	4a14      	ldr	r2, [pc, #80]	; (80080b0 <main+0x13c>)
 8008060:	2101      	movs	r1, #1
 8008062:	2001      	movs	r0, #1
 8008064:	f7ff ff02 	bl	8007e6c <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008068:	4a12      	ldr	r2, [pc, #72]	; (80080b4 <main+0x140>)
 800806a:	2101      	movs	r1, #1
 800806c:	2002      	movs	r0, #2
 800806e:	f7ff fefd 	bl	8007e6c <lcd_print>
  HAL_Delay(1000);
 8008072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008076:	f000 fc4f 	bl	8008918 <HAL_Delay>
  lcd_clear();
 800807a:	f7ff ff23 	bl	8007ec4 <lcd_clear>

  eepromKontrol();
 800807e:	f7f8 f8d9 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008086:	f000 fc47 	bl	8008918 <HAL_Delay>

  backLightTimer = millis;
 800808a:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <main+0x144>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a0b      	ldr	r2, [pc, #44]	; (80080bc <main+0x148>)
 8008090:	6013      	str	r3, [r2, #0]

  iotSetup();
 8008092:	f7ff fd17 	bl	8007ac4 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008096:	f7fe fcfd 	bl	8006a94 <mainLoop>
 800809a:	e7fc      	b.n	8008096 <main+0x122>
 800809c:	40010c00 	.word	0x40010c00
 80080a0:	20000400 	.word	0x20000400
 80080a4:	200003ac 	.word	0x200003ac
 80080a8:	40011000 	.word	0x40011000
 80080ac:	40010800 	.word	0x40010800
 80080b0:	0800dee4 	.word	0x0800dee4
 80080b4:	0800def8 	.word	0x0800def8
 80080b8:	20000200 	.word	0x20000200
 80080bc:	2000021c 	.word	0x2000021c

080080c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b090      	sub	sp, #64	; 0x40
 80080c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80080c6:	f107 0318 	add.w	r3, r7, #24
 80080ca:	2228      	movs	r2, #40	; 0x28
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f004 fb45 	bl	800c75e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080d4:	1d3b      	adds	r3, r7, #4
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	605a      	str	r2, [r3, #4]
 80080dc:	609a      	str	r2, [r3, #8]
 80080de:	60da      	str	r2, [r3, #12]
 80080e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80080e2:	2301      	movs	r3, #1
 80080e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80080e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80080ec:	2300      	movs	r3, #0
 80080ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080f0:	2301      	movs	r3, #1
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080f4:	2302      	movs	r3, #2
 80080f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80080f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80080fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008104:	f107 0318 	add.w	r3, r7, #24
 8008108:	4618      	mov	r0, r3
 800810a:	f002 fc3f 	bl	800a98c <HAL_RCC_OscConfig>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008114:	f000 f9a2 	bl	800845c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008118:	230f      	movs	r3, #15
 800811a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800811c:	2302      	movs	r3, #2
 800811e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008128:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800812a:	2300      	movs	r3, #0
 800812c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800812e:	1d3b      	adds	r3, r7, #4
 8008130:	2102      	movs	r1, #2
 8008132:	4618      	mov	r0, r3
 8008134:	f002 feac 	bl	800ae90 <HAL_RCC_ClockConfig>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800813e:	f000 f98d 	bl	800845c <Error_Handler>
  }
}
 8008142:	bf00      	nop
 8008144:	3740      	adds	r7, #64	; 0x40
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008150:	4b16      	ldr	r3, [pc, #88]	; (80081ac <MX_CAN_Init+0x60>)
 8008152:	4a17      	ldr	r2, [pc, #92]	; (80081b0 <MX_CAN_Init+0x64>)
 8008154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008156:	4b15      	ldr	r3, [pc, #84]	; (80081ac <MX_CAN_Init+0x60>)
 8008158:	2210      	movs	r2, #16
 800815a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800815c:	4b13      	ldr	r3, [pc, #76]	; (80081ac <MX_CAN_Init+0x60>)
 800815e:	2200      	movs	r2, #0
 8008160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <MX_CAN_Init+0x60>)
 8008164:	2200      	movs	r2, #0
 8008166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008168:	4b10      	ldr	r3, [pc, #64]	; (80081ac <MX_CAN_Init+0x60>)
 800816a:	2200      	movs	r2, #0
 800816c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <MX_CAN_Init+0x60>)
 8008170:	2200      	movs	r2, #0
 8008172:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008174:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <MX_CAN_Init+0x60>)
 8008176:	2200      	movs	r2, #0
 8008178:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800817a:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <MX_CAN_Init+0x60>)
 800817c:	2200      	movs	r2, #0
 800817e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008180:	4b0a      	ldr	r3, [pc, #40]	; (80081ac <MX_CAN_Init+0x60>)
 8008182:	2200      	movs	r2, #0
 8008184:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <MX_CAN_Init+0x60>)
 8008188:	2200      	movs	r2, #0
 800818a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800818c:	4b07      	ldr	r3, [pc, #28]	; (80081ac <MX_CAN_Init+0x60>)
 800818e:	2200      	movs	r2, #0
 8008190:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008192:	4b06      	ldr	r3, [pc, #24]	; (80081ac <MX_CAN_Init+0x60>)
 8008194:	2200      	movs	r2, #0
 8008196:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008198:	4804      	ldr	r0, [pc, #16]	; (80081ac <MX_CAN_Init+0x60>)
 800819a:	f000 fbe1 	bl	8008960 <HAL_CAN_Init>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80081a4:	f000 f95a 	bl	800845c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80081a8:	bf00      	nop
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	20000384 	.word	0x20000384
 80081b0:	40006400 	.word	0x40006400

080081b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80081b8:	4b12      	ldr	r3, [pc, #72]	; (8008204 <MX_I2C1_Init+0x50>)
 80081ba:	4a13      	ldr	r2, [pc, #76]	; (8008208 <MX_I2C1_Init+0x54>)
 80081bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80081be:	4b11      	ldr	r3, [pc, #68]	; (8008204 <MX_I2C1_Init+0x50>)
 80081c0:	4a12      	ldr	r2, [pc, #72]	; (800820c <MX_I2C1_Init+0x58>)
 80081c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80081c4:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <MX_I2C1_Init+0x50>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80081ca:	4b0e      	ldr	r3, [pc, #56]	; (8008204 <MX_I2C1_Init+0x50>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80081d0:	4b0c      	ldr	r3, [pc, #48]	; (8008204 <MX_I2C1_Init+0x50>)
 80081d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80081d8:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <MX_I2C1_Init+0x50>)
 80081da:	2200      	movs	r2, #0
 80081dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80081de:	4b09      	ldr	r3, [pc, #36]	; (8008204 <MX_I2C1_Init+0x50>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80081e4:	4b07      	ldr	r3, [pc, #28]	; (8008204 <MX_I2C1_Init+0x50>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80081ea:	4b06      	ldr	r3, [pc, #24]	; (8008204 <MX_I2C1_Init+0x50>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80081f0:	4804      	ldr	r0, [pc, #16]	; (8008204 <MX_I2C1_Init+0x50>)
 80081f2:	f001 f9a9 	bl	8009548 <HAL_I2C_Init>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80081fc:	f000 f92e 	bl	800845c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008200:	bf00      	nop
 8008202:	bd80      	pop	{r7, pc}
 8008204:	200003ac 	.word	0x200003ac
 8008208:	40005400 	.word	0x40005400
 800820c:	00061a80 	.word	0x00061a80

08008210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008216:	f107 0308 	add.w	r3, r7, #8
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	605a      	str	r2, [r3, #4]
 8008220:	609a      	str	r2, [r3, #8]
 8008222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008224:	463b      	mov	r3, r7
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800822c:	4b1f      	ldr	r3, [pc, #124]	; (80082ac <MX_TIM1_Init+0x9c>)
 800822e:	4a20      	ldr	r2, [pc, #128]	; (80082b0 <MX_TIM1_Init+0xa0>)
 8008230:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008232:	4b1e      	ldr	r3, [pc, #120]	; (80082ac <MX_TIM1_Init+0x9c>)
 8008234:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008238:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800823a:	4b1c      	ldr	r3, [pc, #112]	; (80082ac <MX_TIM1_Init+0x9c>)
 800823c:	2200      	movs	r2, #0
 800823e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008240:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <MX_TIM1_Init+0x9c>)
 8008242:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008246:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008248:	4b18      	ldr	r3, [pc, #96]	; (80082ac <MX_TIM1_Init+0x9c>)
 800824a:	2200      	movs	r2, #0
 800824c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800824e:	4b17      	ldr	r3, [pc, #92]	; (80082ac <MX_TIM1_Init+0x9c>)
 8008250:	2200      	movs	r2, #0
 8008252:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008254:	4b15      	ldr	r3, [pc, #84]	; (80082ac <MX_TIM1_Init+0x9c>)
 8008256:	2200      	movs	r2, #0
 8008258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800825a:	4814      	ldr	r0, [pc, #80]	; (80082ac <MX_TIM1_Init+0x9c>)
 800825c:	f002 ffa6 	bl	800b1ac <HAL_TIM_Base_Init>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008266:	f000 f8f9 	bl	800845c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800826a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800826e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008270:	f107 0308 	add.w	r3, r7, #8
 8008274:	4619      	mov	r1, r3
 8008276:	480d      	ldr	r0, [pc, #52]	; (80082ac <MX_TIM1_Init+0x9c>)
 8008278:	f003 f950 	bl	800b51c <HAL_TIM_ConfigClockSource>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008282:	f000 f8eb 	bl	800845c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008286:	2300      	movs	r3, #0
 8008288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800828a:	2300      	movs	r3, #0
 800828c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800828e:	463b      	mov	r3, r7
 8008290:	4619      	mov	r1, r3
 8008292:	4806      	ldr	r0, [pc, #24]	; (80082ac <MX_TIM1_Init+0x9c>)
 8008294:	f003 fb3e 	bl	800b914 <HAL_TIMEx_MasterConfigSynchronization>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800829e:	f000 f8dd 	bl	800845c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80082a2:	bf00      	nop
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20000400 	.word	0x20000400
 80082b0:	40012c00 	.word	0x40012c00

080082b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80082b8:	4b11      	ldr	r3, [pc, #68]	; (8008300 <MX_USART1_UART_Init+0x4c>)
 80082ba:	4a12      	ldr	r2, [pc, #72]	; (8008304 <MX_USART1_UART_Init+0x50>)
 80082bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80082be:	4b10      	ldr	r3, [pc, #64]	; (8008300 <MX_USART1_UART_Init+0x4c>)
 80082c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80082c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80082c6:	4b0e      	ldr	r3, [pc, #56]	; (8008300 <MX_USART1_UART_Init+0x4c>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <MX_USART1_UART_Init+0x4c>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80082d2:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <MX_USART1_UART_Init+0x4c>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80082d8:	4b09      	ldr	r3, [pc, #36]	; (8008300 <MX_USART1_UART_Init+0x4c>)
 80082da:	220c      	movs	r2, #12
 80082dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80082de:	4b08      	ldr	r3, [pc, #32]	; (8008300 <MX_USART1_UART_Init+0x4c>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80082e4:	4b06      	ldr	r3, [pc, #24]	; (8008300 <MX_USART1_UART_Init+0x4c>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80082ea:	4805      	ldr	r0, [pc, #20]	; (8008300 <MX_USART1_UART_Init+0x4c>)
 80082ec:	f003 fb90 	bl	800ba10 <HAL_UART_Init>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80082f6:	f000 f8b1 	bl	800845c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80082fa:	bf00      	nop
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000448 	.word	0x20000448
 8008304:	40013800 	.word	0x40013800

08008308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800830e:	f107 0310 	add.w	r3, r7, #16
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	605a      	str	r2, [r3, #4]
 8008318:	609a      	str	r2, [r3, #8]
 800831a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800831c:	4b4b      	ldr	r3, [pc, #300]	; (800844c <MX_GPIO_Init+0x144>)
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	4a4a      	ldr	r2, [pc, #296]	; (800844c <MX_GPIO_Init+0x144>)
 8008322:	f043 0310 	orr.w	r3, r3, #16
 8008326:	6193      	str	r3, [r2, #24]
 8008328:	4b48      	ldr	r3, [pc, #288]	; (800844c <MX_GPIO_Init+0x144>)
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f003 0310 	and.w	r3, r3, #16
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008334:	4b45      	ldr	r3, [pc, #276]	; (800844c <MX_GPIO_Init+0x144>)
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	4a44      	ldr	r2, [pc, #272]	; (800844c <MX_GPIO_Init+0x144>)
 800833a:	f043 0320 	orr.w	r3, r3, #32
 800833e:	6193      	str	r3, [r2, #24]
 8008340:	4b42      	ldr	r3, [pc, #264]	; (800844c <MX_GPIO_Init+0x144>)
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800834c:	4b3f      	ldr	r3, [pc, #252]	; (800844c <MX_GPIO_Init+0x144>)
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	4a3e      	ldr	r2, [pc, #248]	; (800844c <MX_GPIO_Init+0x144>)
 8008352:	f043 0304 	orr.w	r3, r3, #4
 8008356:	6193      	str	r3, [r2, #24]
 8008358:	4b3c      	ldr	r3, [pc, #240]	; (800844c <MX_GPIO_Init+0x144>)
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	607b      	str	r3, [r7, #4]
 8008362:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008364:	4b39      	ldr	r3, [pc, #228]	; (800844c <MX_GPIO_Init+0x144>)
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	4a38      	ldr	r2, [pc, #224]	; (800844c <MX_GPIO_Init+0x144>)
 800836a:	f043 0308 	orr.w	r3, r3, #8
 800836e:	6193      	str	r3, [r2, #24]
 8008370:	4b36      	ldr	r3, [pc, #216]	; (800844c <MX_GPIO_Init+0x144>)
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	f003 0308 	and.w	r3, r3, #8
 8008378:	603b      	str	r3, [r7, #0]
 800837a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800837c:	2200      	movs	r2, #0
 800837e:	21f0      	movs	r1, #240	; 0xf0
 8008380:	4833      	ldr	r0, [pc, #204]	; (8008450 <MX_GPIO_Init+0x148>)
 8008382:	f001 f8b0 	bl	80094e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008386:	2200      	movs	r2, #0
 8008388:	f241 0130 	movw	r1, #4144	; 0x1030
 800838c:	4831      	ldr	r0, [pc, #196]	; (8008454 <MX_GPIO_Init+0x14c>)
 800838e:	f001 f8aa 	bl	80094e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008392:	2200      	movs	r2, #0
 8008394:	f640 4107 	movw	r1, #3079	; 0xc07
 8008398:	482f      	ldr	r0, [pc, #188]	; (8008458 <MX_GPIO_Init+0x150>)
 800839a:	f001 f8a4 	bl	80094e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800839e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80083a2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083ac:	f107 0310 	add.w	r3, r7, #16
 80083b0:	4619      	mov	r1, r3
 80083b2:	4828      	ldr	r0, [pc, #160]	; (8008454 <MX_GPIO_Init+0x14c>)
 80083b4:	f000 fe20 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80083b8:	f248 130f 	movw	r3, #33039	; 0x810f
 80083bc:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083c6:	f107 0310 	add.w	r3, r7, #16
 80083ca:	4619      	mov	r1, r3
 80083cc:	4820      	ldr	r0, [pc, #128]	; (8008450 <MX_GPIO_Init+0x148>)
 80083ce:	f000 fe13 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80083d2:	23f0      	movs	r3, #240	; 0xf0
 80083d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083d6:	2301      	movs	r3, #1
 80083d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083de:	2302      	movs	r3, #2
 80083e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083e2:	f107 0310 	add.w	r3, r7, #16
 80083e6:	4619      	mov	r1, r3
 80083e8:	4819      	ldr	r0, [pc, #100]	; (8008450 <MX_GPIO_Init+0x148>)
 80083ea:	f000 fe05 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80083ee:	f241 0330 	movw	r3, #4144	; 0x1030
 80083f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083fc:	2302      	movs	r3, #2
 80083fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008400:	f107 0310 	add.w	r3, r7, #16
 8008404:	4619      	mov	r1, r3
 8008406:	4813      	ldr	r0, [pc, #76]	; (8008454 <MX_GPIO_Init+0x14c>)
 8008408:	f000 fdf6 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800840c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008410:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008412:	2301      	movs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008416:	2300      	movs	r3, #0
 8008418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800841a:	2302      	movs	r3, #2
 800841c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800841e:	f107 0310 	add.w	r3, r7, #16
 8008422:	4619      	mov	r1, r3
 8008424:	480c      	ldr	r0, [pc, #48]	; (8008458 <MX_GPIO_Init+0x150>)
 8008426:	f000 fde7 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800842a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800842e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008430:	2300      	movs	r3, #0
 8008432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008434:	2300      	movs	r3, #0
 8008436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008438:	f107 0310 	add.w	r3, r7, #16
 800843c:	4619      	mov	r1, r3
 800843e:	4806      	ldr	r0, [pc, #24]	; (8008458 <MX_GPIO_Init+0x150>)
 8008440:	f000 fdda 	bl	8008ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008444:	bf00      	nop
 8008446:	3720      	adds	r7, #32
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40021000 	.word	0x40021000
 8008450:	40010800 	.word	0x40010800
 8008454:	40011000 	.word	0x40011000
 8008458:	40010c00 	.word	0x40010c00

0800845c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008460:	bf00      	nop
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr

08008468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <HAL_MspInit+0x5c>)
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	4a14      	ldr	r2, [pc, #80]	; (80084c4 <HAL_MspInit+0x5c>)
 8008474:	f043 0301 	orr.w	r3, r3, #1
 8008478:	6193      	str	r3, [r2, #24]
 800847a:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <HAL_MspInit+0x5c>)
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	60bb      	str	r3, [r7, #8]
 8008484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008486:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <HAL_MspInit+0x5c>)
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	4a0e      	ldr	r2, [pc, #56]	; (80084c4 <HAL_MspInit+0x5c>)
 800848c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008490:	61d3      	str	r3, [r2, #28]
 8008492:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <HAL_MspInit+0x5c>)
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800849e:	4b0a      	ldr	r3, [pc, #40]	; (80084c8 <HAL_MspInit+0x60>)
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	4a04      	ldr	r2, [pc, #16]	; (80084c8 <HAL_MspInit+0x60>)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr
 80084c4:	40021000 	.word	0x40021000
 80084c8:	40010000 	.word	0x40010000

080084cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d4:	f107 0310 	add.w	r3, r7, #16
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <HAL_CAN_MspInit+0x8c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d131      	bne.n	8008550 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <HAL_CAN_MspInit+0x90>)
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	4a1a      	ldr	r2, [pc, #104]	; (800855c <HAL_CAN_MspInit+0x90>)
 80084f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80084f6:	61d3      	str	r3, [r2, #28]
 80084f8:	4b18      	ldr	r3, [pc, #96]	; (800855c <HAL_CAN_MspInit+0x90>)
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008504:	4b15      	ldr	r3, [pc, #84]	; (800855c <HAL_CAN_MspInit+0x90>)
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	4a14      	ldr	r2, [pc, #80]	; (800855c <HAL_CAN_MspInit+0x90>)
 800850a:	f043 0304 	orr.w	r3, r3, #4
 800850e:	6193      	str	r3, [r2, #24]
 8008510:	4b12      	ldr	r3, [pc, #72]	; (800855c <HAL_CAN_MspInit+0x90>)
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800851c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008522:	2300      	movs	r3, #0
 8008524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008526:	2300      	movs	r3, #0
 8008528:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800852a:	f107 0310 	add.w	r3, r7, #16
 800852e:	4619      	mov	r1, r3
 8008530:	480b      	ldr	r0, [pc, #44]	; (8008560 <HAL_CAN_MspInit+0x94>)
 8008532:	f000 fd61 	bl	8008ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800853a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800853c:	2302      	movs	r3, #2
 800853e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008540:	2303      	movs	r3, #3
 8008542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008544:	f107 0310 	add.w	r3, r7, #16
 8008548:	4619      	mov	r1, r3
 800854a:	4805      	ldr	r0, [pc, #20]	; (8008560 <HAL_CAN_MspInit+0x94>)
 800854c:	f000 fd54 	bl	8008ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008550:	bf00      	nop
 8008552:	3720      	adds	r7, #32
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40006400 	.word	0x40006400
 800855c:	40021000 	.word	0x40021000
 8008560:	40010800 	.word	0x40010800

08008564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800856c:	f107 0310 	add.w	r3, r7, #16
 8008570:	2200      	movs	r2, #0
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	609a      	str	r2, [r3, #8]
 8008578:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <HAL_I2C_MspInit+0x70>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d123      	bne.n	80085cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008584:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <HAL_I2C_MspInit+0x74>)
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <HAL_I2C_MspInit+0x74>)
 800858a:	f043 0308 	orr.w	r3, r3, #8
 800858e:	6193      	str	r3, [r2, #24]
 8008590:	4b11      	ldr	r3, [pc, #68]	; (80085d8 <HAL_I2C_MspInit+0x74>)
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800859c:	23c0      	movs	r3, #192	; 0xc0
 800859e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80085a0:	2312      	movs	r3, #18
 80085a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085a4:	2303      	movs	r3, #3
 80085a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085a8:	f107 0310 	add.w	r3, r7, #16
 80085ac:	4619      	mov	r1, r3
 80085ae:	480b      	ldr	r0, [pc, #44]	; (80085dc <HAL_I2C_MspInit+0x78>)
 80085b0:	f000 fd22 	bl	8008ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80085b4:	4b08      	ldr	r3, [pc, #32]	; (80085d8 <HAL_I2C_MspInit+0x74>)
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	4a07      	ldr	r2, [pc, #28]	; (80085d8 <HAL_I2C_MspInit+0x74>)
 80085ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085be:	61d3      	str	r3, [r2, #28]
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <HAL_I2C_MspInit+0x74>)
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085c8:	60bb      	str	r3, [r7, #8]
 80085ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80085cc:	bf00      	nop
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40005400 	.word	0x40005400
 80085d8:	40021000 	.word	0x40021000
 80085dc:	40010c00 	.word	0x40010c00

080085e0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a0a      	ldr	r2, [pc, #40]	; (8008618 <HAL_I2C_MspDeInit+0x38>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d10d      	bne.n	800860e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80085f2:	4b0a      	ldr	r3, [pc, #40]	; (800861c <HAL_I2C_MspDeInit+0x3c>)
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	4a09      	ldr	r2, [pc, #36]	; (800861c <HAL_I2C_MspDeInit+0x3c>)
 80085f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085fc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80085fe:	2140      	movs	r1, #64	; 0x40
 8008600:	4807      	ldr	r0, [pc, #28]	; (8008620 <HAL_I2C_MspDeInit+0x40>)
 8008602:	f000 fe8d 	bl	8009320 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008606:	2180      	movs	r1, #128	; 0x80
 8008608:	4805      	ldr	r0, [pc, #20]	; (8008620 <HAL_I2C_MspDeInit+0x40>)
 800860a:	f000 fe89 	bl	8009320 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	40005400 	.word	0x40005400
 800861c:	40021000 	.word	0x40021000
 8008620:	40010c00 	.word	0x40010c00

08008624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a0d      	ldr	r2, [pc, #52]	; (8008668 <HAL_TIM_Base_MspInit+0x44>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d113      	bne.n	800865e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008636:	4b0d      	ldr	r3, [pc, #52]	; (800866c <HAL_TIM_Base_MspInit+0x48>)
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	4a0c      	ldr	r2, [pc, #48]	; (800866c <HAL_TIM_Base_MspInit+0x48>)
 800863c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008640:	6193      	str	r3, [r2, #24]
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <HAL_TIM_Base_MspInit+0x48>)
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800864e:	2200      	movs	r2, #0
 8008650:	2100      	movs	r1, #0
 8008652:	2019      	movs	r0, #25
 8008654:	f000 fb57 	bl	8008d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008658:	2019      	movs	r0, #25
 800865a:	f000 fb70 	bl	8008d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	40012c00 	.word	0x40012c00
 800866c:	40021000 	.word	0x40021000

08008670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008678:	f107 0310 	add.w	r3, r7, #16
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	605a      	str	r2, [r3, #4]
 8008682:	609a      	str	r2, [r3, #8]
 8008684:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a20      	ldr	r2, [pc, #128]	; (800870c <HAL_UART_MspInit+0x9c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d139      	bne.n	8008704 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008690:	4b1f      	ldr	r3, [pc, #124]	; (8008710 <HAL_UART_MspInit+0xa0>)
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	4a1e      	ldr	r2, [pc, #120]	; (8008710 <HAL_UART_MspInit+0xa0>)
 8008696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800869a:	6193      	str	r3, [r2, #24]
 800869c:	4b1c      	ldr	r3, [pc, #112]	; (8008710 <HAL_UART_MspInit+0xa0>)
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086a8:	4b19      	ldr	r3, [pc, #100]	; (8008710 <HAL_UART_MspInit+0xa0>)
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	4a18      	ldr	r2, [pc, #96]	; (8008710 <HAL_UART_MspInit+0xa0>)
 80086ae:	f043 0304 	orr.w	r3, r3, #4
 80086b2:	6193      	str	r3, [r2, #24]
 80086b4:	4b16      	ldr	r3, [pc, #88]	; (8008710 <HAL_UART_MspInit+0xa0>)
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	60bb      	str	r3, [r7, #8]
 80086be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80086c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c6:	2302      	movs	r3, #2
 80086c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086ca:	2303      	movs	r3, #3
 80086cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086ce:	f107 0310 	add.w	r3, r7, #16
 80086d2:	4619      	mov	r1, r3
 80086d4:	480f      	ldr	r0, [pc, #60]	; (8008714 <HAL_UART_MspInit+0xa4>)
 80086d6:	f000 fc8f 	bl	8008ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80086da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086e0:	2300      	movs	r3, #0
 80086e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086e8:	f107 0310 	add.w	r3, r7, #16
 80086ec:	4619      	mov	r1, r3
 80086ee:	4809      	ldr	r0, [pc, #36]	; (8008714 <HAL_UART_MspInit+0xa4>)
 80086f0:	f000 fc82 	bl	8008ff8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80086f4:	2200      	movs	r2, #0
 80086f6:	2100      	movs	r1, #0
 80086f8:	2025      	movs	r0, #37	; 0x25
 80086fa:	f000 fb04 	bl	8008d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80086fe:	2025      	movs	r0, #37	; 0x25
 8008700:	f000 fb1d 	bl	8008d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008704:	bf00      	nop
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	40013800 	.word	0x40013800
 8008710:	40021000 	.word	0x40021000
 8008714:	40010800 	.word	0x40010800

08008718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800871c:	e7fe      	b.n	800871c <NMI_Handler+0x4>

0800871e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800871e:	b480      	push	{r7}
 8008720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008722:	e7fe      	b.n	8008722 <HardFault_Handler+0x4>

08008724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008728:	e7fe      	b.n	8008728 <MemManage_Handler+0x4>

0800872a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800872a:	b480      	push	{r7}
 800872c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800872e:	e7fe      	b.n	800872e <BusFault_Handler+0x4>

08008730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008734:	e7fe      	b.n	8008734 <UsageFault_Handler+0x4>

08008736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008736:	b480      	push	{r7}
 8008738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800873a:	bf00      	nop
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008742:	b480      	push	{r7}
 8008744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008746:	bf00      	nop
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr

0800874e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800874e:	b480      	push	{r7}
 8008750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008752:	bf00      	nop
 8008754:	46bd      	mov	sp, r7
 8008756:	bc80      	pop	{r7}
 8008758:	4770      	bx	lr

0800875a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800875e:	f000 f8bf 	bl	80088e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008762:	bf00      	nop
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800876c:	4802      	ldr	r0, [pc, #8]	; (8008778 <TIM1_UP_IRQHandler+0x10>)
 800876e:	f002 fdcd 	bl	800b30c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008772:	bf00      	nop
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000400 	.word	0x20000400

0800877c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008780:	4802      	ldr	r0, [pc, #8]	; (800878c <USART1_IRQHandler+0x10>)
 8008782:	f003 f9cb 	bl	800bb1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008786:	bf00      	nop
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000448 	.word	0x20000448

08008790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008798:	4a14      	ldr	r2, [pc, #80]	; (80087ec <_sbrk+0x5c>)
 800879a:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <_sbrk+0x60>)
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80087a4:	4b13      	ldr	r3, [pc, #76]	; (80087f4 <_sbrk+0x64>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80087ac:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <_sbrk+0x64>)
 80087ae:	4a12      	ldr	r2, [pc, #72]	; (80087f8 <_sbrk+0x68>)
 80087b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80087b2:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <_sbrk+0x64>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4413      	add	r3, r2
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d207      	bcs.n	80087d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80087c0:	f003 ffe6 	bl	800c790 <__errno>
 80087c4:	4603      	mov	r3, r0
 80087c6:	220c      	movs	r2, #12
 80087c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80087ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ce:	e009      	b.n	80087e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80087d0:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <_sbrk+0x64>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80087d6:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <_sbrk+0x64>)
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	4a05      	ldr	r2, [pc, #20]	; (80087f4 <_sbrk+0x64>)
 80087e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80087e2:	68fb      	ldr	r3, [r7, #12]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	2000c000 	.word	0x2000c000
 80087f0:	00000400 	.word	0x00000400
 80087f4:	20000490 	.word	0x20000490
 80087f8:	200005e0 	.word	0x200005e0

080087fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008800:	bf00      	nop
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008808:	480c      	ldr	r0, [pc, #48]	; (800883c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800880a:	490d      	ldr	r1, [pc, #52]	; (8008840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800880c:	4a0d      	ldr	r2, [pc, #52]	; (8008844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800880e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008810:	e002      	b.n	8008818 <LoopCopyDataInit>

08008812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008816:	3304      	adds	r3, #4

08008818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800881a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800881c:	d3f9      	bcc.n	8008812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800881e:	4a0a      	ldr	r2, [pc, #40]	; (8008848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008820:	4c0a      	ldr	r4, [pc, #40]	; (800884c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008824:	e001      	b.n	800882a <LoopFillZerobss>

08008826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008828:	3204      	adds	r2, #4

0800882a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800882a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800882c:	d3fb      	bcc.n	8008826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800882e:	f7ff ffe5 	bl	80087fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008832:	f003 ffb3 	bl	800c79c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008836:	f7ff fb9d 	bl	8007f74 <main>
  bx lr
 800883a:	4770      	bx	lr
  ldr r0, =_sdata
 800883c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008840:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8008844:	0800df98 	.word	0x0800df98
  ldr r2, =_sbss
 8008848:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 800884c:	200005e0 	.word	0x200005e0

08008850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008850:	e7fe      	b.n	8008850 <ADC1_2_IRQHandler>
	...

08008854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008858:	4b08      	ldr	r3, [pc, #32]	; (800887c <HAL_Init+0x28>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a07      	ldr	r2, [pc, #28]	; (800887c <HAL_Init+0x28>)
 800885e:	f043 0310 	orr.w	r3, r3, #16
 8008862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008864:	2003      	movs	r0, #3
 8008866:	f000 fa43 	bl	8008cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800886a:	200f      	movs	r0, #15
 800886c:	f000 f808 	bl	8008880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008870:	f7ff fdfa 	bl	8008468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40022000 	.word	0x40022000

08008880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008888:	4b12      	ldr	r3, [pc, #72]	; (80088d4 <HAL_InitTick+0x54>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <HAL_InitTick+0x58>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	4619      	mov	r1, r3
 8008892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008896:	fbb3 f3f1 	udiv	r3, r3, r1
 800889a:	fbb2 f3f3 	udiv	r3, r2, r3
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fa5b 	bl	8008d5a <HAL_SYSTICK_Config>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e00e      	b.n	80088cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b0f      	cmp	r3, #15
 80088b2:	d80a      	bhi.n	80088ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088b4:	2200      	movs	r2, #0
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088bc:	f000 fa23 	bl	8008d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80088c0:	4a06      	ldr	r2, [pc, #24]	; (80088dc <HAL_InitTick+0x5c>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	e000      	b.n	80088cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	200000b0 	.word	0x200000b0
 80088d8:	200000b8 	.word	0x200000b8
 80088dc:	200000b4 	.word	0x200000b4

080088e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <HAL_IncTick+0x1c>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	4b05      	ldr	r3, [pc, #20]	; (8008900 <HAL_IncTick+0x20>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4413      	add	r3, r2
 80088f0:	4a03      	ldr	r2, [pc, #12]	; (8008900 <HAL_IncTick+0x20>)
 80088f2:	6013      	str	r3, [r2, #0]
}
 80088f4:	bf00      	nop
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bc80      	pop	{r7}
 80088fa:	4770      	bx	lr
 80088fc:	200000b8 	.word	0x200000b8
 8008900:	20000494 	.word	0x20000494

08008904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008904:	b480      	push	{r7}
 8008906:	af00      	add	r7, sp, #0
  return uwTick;
 8008908:	4b02      	ldr	r3, [pc, #8]	; (8008914 <HAL_GetTick+0x10>)
 800890a:	681b      	ldr	r3, [r3, #0]
}
 800890c:	4618      	mov	r0, r3
 800890e:	46bd      	mov	sp, r7
 8008910:	bc80      	pop	{r7}
 8008912:	4770      	bx	lr
 8008914:	20000494 	.word	0x20000494

08008918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008920:	f7ff fff0 	bl	8008904 <HAL_GetTick>
 8008924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008930:	d005      	beq.n	800893e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008932:	4b0a      	ldr	r3, [pc, #40]	; (800895c <HAL_Delay+0x44>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4413      	add	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800893e:	bf00      	nop
 8008940:	f7ff ffe0 	bl	8008904 <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	429a      	cmp	r2, r3
 800894e:	d8f7      	bhi.n	8008940 <HAL_Delay+0x28>
  {
  }
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	200000b8 	.word	0x200000b8

08008960 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e0ed      	b.n	8008b4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fda4 	bl	80084cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0201 	orr.w	r2, r2, #1
 8008992:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008994:	f7ff ffb6 	bl	8008904 <HAL_GetTick>
 8008998:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800899a:	e012      	b.n	80089c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800899c:	f7ff ffb2 	bl	8008904 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b0a      	cmp	r3, #10
 80089a8:	d90b      	bls.n	80089c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2205      	movs	r2, #5
 80089ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e0c5      	b.n	8008b4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0e5      	beq.n	800899c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0202 	bic.w	r2, r2, #2
 80089de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089e0:	f7ff ff90 	bl	8008904 <HAL_GetTick>
 80089e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80089e6:	e012      	b.n	8008a0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80089e8:	f7ff ff8c 	bl	8008904 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b0a      	cmp	r3, #10
 80089f4:	d90b      	bls.n	8008a0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2205      	movs	r2, #5
 8008a06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e09f      	b.n	8008b4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e5      	bne.n	80089e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7e1b      	ldrb	r3, [r3, #24]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d108      	bne.n	8008a36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	e007      	b.n	8008a46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	7e5b      	ldrb	r3, [r3, #25]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d108      	bne.n	8008a60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e007      	b.n	8008a70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	7e9b      	ldrb	r3, [r3, #26]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d108      	bne.n	8008a8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0220 	orr.w	r2, r2, #32
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	e007      	b.n	8008a9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f022 0220 	bic.w	r2, r2, #32
 8008a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7edb      	ldrb	r3, [r3, #27]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d108      	bne.n	8008ab4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f022 0210 	bic.w	r2, r2, #16
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e007      	b.n	8008ac4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0210 	orr.w	r2, r2, #16
 8008ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7f1b      	ldrb	r3, [r3, #28]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d108      	bne.n	8008ade <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0208 	orr.w	r2, r2, #8
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	e007      	b.n	8008aee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0208 	bic.w	r2, r2, #8
 8008aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	7f5b      	ldrb	r3, [r3, #29]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d108      	bne.n	8008b08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f042 0204 	orr.w	r2, r2, #4
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e007      	b.n	8008b18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0204 	bic.w	r2, r2, #4
 8008b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	ea42 0103 	orr.w	r1, r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	1e5a      	subs	r2, r3, #1
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <__NVIC_SetPriorityGrouping>:
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b68:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <__NVIC_SetPriorityGrouping+0x44>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b74:	4013      	ands	r3, r2
 8008b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b8a:	4a04      	ldr	r2, [pc, #16]	; (8008b9c <__NVIC_SetPriorityGrouping+0x44>)
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	60d3      	str	r3, [r2, #12]
}
 8008b90:	bf00      	nop
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bc80      	pop	{r7}
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	e000ed00 	.word	0xe000ed00

08008ba0 <__NVIC_GetPriorityGrouping>:
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ba4:	4b04      	ldr	r3, [pc, #16]	; (8008bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	0a1b      	lsrs	r3, r3, #8
 8008baa:	f003 0307 	and.w	r3, r3, #7
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	e000ed00 	.word	0xe000ed00

08008bbc <__NVIC_EnableIRQ>:
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	db0b      	blt.n	8008be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	f003 021f 	and.w	r2, r3, #31
 8008bd4:	4906      	ldr	r1, [pc, #24]	; (8008bf0 <__NVIC_EnableIRQ+0x34>)
 8008bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bda:	095b      	lsrs	r3, r3, #5
 8008bdc:	2001      	movs	r0, #1
 8008bde:	fa00 f202 	lsl.w	r2, r0, r2
 8008be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr
 8008bf0:	e000e100 	.word	0xe000e100

08008bf4 <__NVIC_SetPriority>:
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	6039      	str	r1, [r7, #0]
 8008bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	db0a      	blt.n	8008c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	490c      	ldr	r1, [pc, #48]	; (8008c40 <__NVIC_SetPriority+0x4c>)
 8008c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c12:	0112      	lsls	r2, r2, #4
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	440b      	add	r3, r1
 8008c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c1c:	e00a      	b.n	8008c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	4908      	ldr	r1, [pc, #32]	; (8008c44 <__NVIC_SetPriority+0x50>)
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	3b04      	subs	r3, #4
 8008c2c:	0112      	lsls	r2, r2, #4
 8008c2e:	b2d2      	uxtb	r2, r2
 8008c30:	440b      	add	r3, r1
 8008c32:	761a      	strb	r2, [r3, #24]
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	e000e100 	.word	0xe000e100
 8008c44:	e000ed00 	.word	0xe000ed00

08008c48 <NVIC_EncodePriority>:
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b089      	sub	sp, #36	; 0x24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f1c3 0307 	rsb	r3, r3, #7
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	bf28      	it	cs
 8008c66:	2304      	movcs	r3, #4
 8008c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	2b06      	cmp	r3, #6
 8008c70:	d902      	bls.n	8008c78 <NVIC_EncodePriority+0x30>
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	3b03      	subs	r3, #3
 8008c76:	e000      	b.n	8008c7a <NVIC_EncodePriority+0x32>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	fa02 f303 	lsl.w	r3, r2, r3
 8008c86:	43da      	mvns	r2, r3
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	401a      	ands	r2, r3
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9a:	43d9      	mvns	r1, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ca0:	4313      	orrs	r3, r2
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3724      	adds	r7, #36	; 0x24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr

08008cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cbc:	d301      	bcc.n	8008cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e00f      	b.n	8008ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008cc2:	4a0a      	ldr	r2, [pc, #40]	; (8008cec <SysTick_Config+0x40>)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008cca:	210f      	movs	r1, #15
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cd0:	f7ff ff90 	bl	8008bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008cd4:	4b05      	ldr	r3, [pc, #20]	; (8008cec <SysTick_Config+0x40>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008cda:	4b04      	ldr	r3, [pc, #16]	; (8008cec <SysTick_Config+0x40>)
 8008cdc:	2207      	movs	r2, #7
 8008cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	e000e010 	.word	0xe000e010

08008cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7ff ff2d 	bl	8008b58 <__NVIC_SetPriorityGrouping>
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b086      	sub	sp, #24
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
 8008d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008d18:	f7ff ff42 	bl	8008ba0 <__NVIC_GetPriorityGrouping>
 8008d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	6978      	ldr	r0, [r7, #20]
 8008d24:	f7ff ff90 	bl	8008c48 <NVIC_EncodePriority>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff ff5f 	bl	8008bf4 <__NVIC_SetPriority>
}
 8008d36:	bf00      	nop
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	4603      	mov	r3, r0
 8008d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff ff35 	bl	8008bbc <__NVIC_EnableIRQ>
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ffa2 	bl	8008cac <SysTick_Config>
 8008d68:	4603      	mov	r3, r0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d008      	beq.n	8008d9c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2204      	movs	r2, #4
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e020      	b.n	8008dde <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 020e 	bic.w	r2, r2, #14
 8008daa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8008dca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bc80      	pop	{r7}
 8008de6:	4770      	bx	lr

08008de8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d005      	beq.n	8008e0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2204      	movs	r2, #4
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	73fb      	strb	r3, [r7, #15]
 8008e0a:	e0d6      	b.n	8008fba <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 020e 	bic.w	r2, r2, #14
 8008e1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 0201 	bic.w	r2, r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	461a      	mov	r2, r3
 8008e32:	4b64      	ldr	r3, [pc, #400]	; (8008fc4 <HAL_DMA_Abort_IT+0x1dc>)
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d958      	bls.n	8008eea <HAL_DMA_Abort_IT+0x102>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a62      	ldr	r2, [pc, #392]	; (8008fc8 <HAL_DMA_Abort_IT+0x1e0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d04f      	beq.n	8008ee2 <HAL_DMA_Abort_IT+0xfa>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a61      	ldr	r2, [pc, #388]	; (8008fcc <HAL_DMA_Abort_IT+0x1e4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d048      	beq.n	8008ede <HAL_DMA_Abort_IT+0xf6>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a5f      	ldr	r2, [pc, #380]	; (8008fd0 <HAL_DMA_Abort_IT+0x1e8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d040      	beq.n	8008ed8 <HAL_DMA_Abort_IT+0xf0>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a5e      	ldr	r2, [pc, #376]	; (8008fd4 <HAL_DMA_Abort_IT+0x1ec>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d038      	beq.n	8008ed2 <HAL_DMA_Abort_IT+0xea>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a5c      	ldr	r2, [pc, #368]	; (8008fd8 <HAL_DMA_Abort_IT+0x1f0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d030      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xe4>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a5b      	ldr	r2, [pc, #364]	; (8008fdc <HAL_DMA_Abort_IT+0x1f4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d028      	beq.n	8008ec6 <HAL_DMA_Abort_IT+0xde>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a52      	ldr	r2, [pc, #328]	; (8008fc4 <HAL_DMA_Abort_IT+0x1dc>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d020      	beq.n	8008ec0 <HAL_DMA_Abort_IT+0xd8>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a57      	ldr	r2, [pc, #348]	; (8008fe0 <HAL_DMA_Abort_IT+0x1f8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d019      	beq.n	8008ebc <HAL_DMA_Abort_IT+0xd4>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a55      	ldr	r2, [pc, #340]	; (8008fe4 <HAL_DMA_Abort_IT+0x1fc>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d012      	beq.n	8008eb8 <HAL_DMA_Abort_IT+0xd0>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a54      	ldr	r2, [pc, #336]	; (8008fe8 <HAL_DMA_Abort_IT+0x200>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00a      	beq.n	8008eb2 <HAL_DMA_Abort_IT+0xca>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a52      	ldr	r2, [pc, #328]	; (8008fec <HAL_DMA_Abort_IT+0x204>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d102      	bne.n	8008eac <HAL_DMA_Abort_IT+0xc4>
 8008ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eaa:	e01b      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008eb0:	e018      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eb6:	e015      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	e013      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e011      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ec4:	e00e      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008ec6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008eca:	e00b      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ed0:	e008      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ed6:	e005      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008edc:	e002      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008ede:	2310      	movs	r3, #16
 8008ee0:	e000      	b.n	8008ee4 <HAL_DMA_Abort_IT+0xfc>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	4a42      	ldr	r2, [pc, #264]	; (8008ff0 <HAL_DMA_Abort_IT+0x208>)
 8008ee6:	6053      	str	r3, [r2, #4]
 8008ee8:	e057      	b.n	8008f9a <HAL_DMA_Abort_IT+0x1b2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a36      	ldr	r2, [pc, #216]	; (8008fc8 <HAL_DMA_Abort_IT+0x1e0>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d04f      	beq.n	8008f94 <HAL_DMA_Abort_IT+0x1ac>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a34      	ldr	r2, [pc, #208]	; (8008fcc <HAL_DMA_Abort_IT+0x1e4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d048      	beq.n	8008f90 <HAL_DMA_Abort_IT+0x1a8>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a33      	ldr	r2, [pc, #204]	; (8008fd0 <HAL_DMA_Abort_IT+0x1e8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d040      	beq.n	8008f8a <HAL_DMA_Abort_IT+0x1a2>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a31      	ldr	r2, [pc, #196]	; (8008fd4 <HAL_DMA_Abort_IT+0x1ec>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d038      	beq.n	8008f84 <HAL_DMA_Abort_IT+0x19c>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a30      	ldr	r2, [pc, #192]	; (8008fd8 <HAL_DMA_Abort_IT+0x1f0>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d030      	beq.n	8008f7e <HAL_DMA_Abort_IT+0x196>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a2e      	ldr	r2, [pc, #184]	; (8008fdc <HAL_DMA_Abort_IT+0x1f4>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d028      	beq.n	8008f78 <HAL_DMA_Abort_IT+0x190>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a26      	ldr	r2, [pc, #152]	; (8008fc4 <HAL_DMA_Abort_IT+0x1dc>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d020      	beq.n	8008f72 <HAL_DMA_Abort_IT+0x18a>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a2a      	ldr	r2, [pc, #168]	; (8008fe0 <HAL_DMA_Abort_IT+0x1f8>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d019      	beq.n	8008f6e <HAL_DMA_Abort_IT+0x186>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a29      	ldr	r2, [pc, #164]	; (8008fe4 <HAL_DMA_Abort_IT+0x1fc>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d012      	beq.n	8008f6a <HAL_DMA_Abort_IT+0x182>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a27      	ldr	r2, [pc, #156]	; (8008fe8 <HAL_DMA_Abort_IT+0x200>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00a      	beq.n	8008f64 <HAL_DMA_Abort_IT+0x17c>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a26      	ldr	r2, [pc, #152]	; (8008fec <HAL_DMA_Abort_IT+0x204>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d102      	bne.n	8008f5e <HAL_DMA_Abort_IT+0x176>
 8008f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f5c:	e01b      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f62:	e018      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f68:	e015      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f6a:	2310      	movs	r3, #16
 8008f6c:	e013      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e011      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f76:	e00e      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f7c:	e00b      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f82:	e008      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f88:	e005      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f8e:	e002      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f90:	2310      	movs	r3, #16
 8008f92:	e000      	b.n	8008f96 <HAL_DMA_Abort_IT+0x1ae>
 8008f94:	2301      	movs	r3, #1
 8008f96:	4a17      	ldr	r2, [pc, #92]	; (8008ff4 <HAL_DMA_Abort_IT+0x20c>)
 8008f98:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
    } 
  }
  return status;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	40020080 	.word	0x40020080
 8008fc8:	40020008 	.word	0x40020008
 8008fcc:	4002001c 	.word	0x4002001c
 8008fd0:	40020030 	.word	0x40020030
 8008fd4:	40020044 	.word	0x40020044
 8008fd8:	40020058 	.word	0x40020058
 8008fdc:	4002006c 	.word	0x4002006c
 8008fe0:	40020408 	.word	0x40020408
 8008fe4:	4002041c 	.word	0x4002041c
 8008fe8:	40020430 	.word	0x40020430
 8008fec:	40020444 	.word	0x40020444
 8008ff0:	40020400 	.word	0x40020400
 8008ff4:	40020000 	.word	0x40020000

08008ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b08b      	sub	sp, #44	; 0x2c
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009002:	2300      	movs	r3, #0
 8009004:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009006:	2300      	movs	r3, #0
 8009008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800900a:	e179      	b.n	8009300 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800900c:	2201      	movs	r2, #1
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	4013      	ands	r3, r2
 800901e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	429a      	cmp	r2, r3
 8009026:	f040 8168 	bne.w	80092fa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	4a96      	ldr	r2, [pc, #600]	; (8009288 <HAL_GPIO_Init+0x290>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d05e      	beq.n	80090f2 <HAL_GPIO_Init+0xfa>
 8009034:	4a94      	ldr	r2, [pc, #592]	; (8009288 <HAL_GPIO_Init+0x290>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d875      	bhi.n	8009126 <HAL_GPIO_Init+0x12e>
 800903a:	4a94      	ldr	r2, [pc, #592]	; (800928c <HAL_GPIO_Init+0x294>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d058      	beq.n	80090f2 <HAL_GPIO_Init+0xfa>
 8009040:	4a92      	ldr	r2, [pc, #584]	; (800928c <HAL_GPIO_Init+0x294>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d86f      	bhi.n	8009126 <HAL_GPIO_Init+0x12e>
 8009046:	4a92      	ldr	r2, [pc, #584]	; (8009290 <HAL_GPIO_Init+0x298>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d052      	beq.n	80090f2 <HAL_GPIO_Init+0xfa>
 800904c:	4a90      	ldr	r2, [pc, #576]	; (8009290 <HAL_GPIO_Init+0x298>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d869      	bhi.n	8009126 <HAL_GPIO_Init+0x12e>
 8009052:	4a90      	ldr	r2, [pc, #576]	; (8009294 <HAL_GPIO_Init+0x29c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d04c      	beq.n	80090f2 <HAL_GPIO_Init+0xfa>
 8009058:	4a8e      	ldr	r2, [pc, #568]	; (8009294 <HAL_GPIO_Init+0x29c>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d863      	bhi.n	8009126 <HAL_GPIO_Init+0x12e>
 800905e:	4a8e      	ldr	r2, [pc, #568]	; (8009298 <HAL_GPIO_Init+0x2a0>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d046      	beq.n	80090f2 <HAL_GPIO_Init+0xfa>
 8009064:	4a8c      	ldr	r2, [pc, #560]	; (8009298 <HAL_GPIO_Init+0x2a0>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d85d      	bhi.n	8009126 <HAL_GPIO_Init+0x12e>
 800906a:	2b12      	cmp	r3, #18
 800906c:	d82a      	bhi.n	80090c4 <HAL_GPIO_Init+0xcc>
 800906e:	2b12      	cmp	r3, #18
 8009070:	d859      	bhi.n	8009126 <HAL_GPIO_Init+0x12e>
 8009072:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <HAL_GPIO_Init+0x80>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	080090f3 	.word	0x080090f3
 800907c:	080090cd 	.word	0x080090cd
 8009080:	080090df 	.word	0x080090df
 8009084:	08009121 	.word	0x08009121
 8009088:	08009127 	.word	0x08009127
 800908c:	08009127 	.word	0x08009127
 8009090:	08009127 	.word	0x08009127
 8009094:	08009127 	.word	0x08009127
 8009098:	08009127 	.word	0x08009127
 800909c:	08009127 	.word	0x08009127
 80090a0:	08009127 	.word	0x08009127
 80090a4:	08009127 	.word	0x08009127
 80090a8:	08009127 	.word	0x08009127
 80090ac:	08009127 	.word	0x08009127
 80090b0:	08009127 	.word	0x08009127
 80090b4:	08009127 	.word	0x08009127
 80090b8:	08009127 	.word	0x08009127
 80090bc:	080090d5 	.word	0x080090d5
 80090c0:	080090e9 	.word	0x080090e9
 80090c4:	4a75      	ldr	r2, [pc, #468]	; (800929c <HAL_GPIO_Init+0x2a4>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d013      	beq.n	80090f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80090ca:	e02c      	b.n	8009126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	623b      	str	r3, [r7, #32]
          break;
 80090d2:	e029      	b.n	8009128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	3304      	adds	r3, #4
 80090da:	623b      	str	r3, [r7, #32]
          break;
 80090dc:	e024      	b.n	8009128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	3308      	adds	r3, #8
 80090e4:	623b      	str	r3, [r7, #32]
          break;
 80090e6:	e01f      	b.n	8009128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	330c      	adds	r3, #12
 80090ee:	623b      	str	r3, [r7, #32]
          break;
 80090f0:	e01a      	b.n	8009128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80090fa:	2304      	movs	r3, #4
 80090fc:	623b      	str	r3, [r7, #32]
          break;
 80090fe:	e013      	b.n	8009128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d105      	bne.n	8009114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009108:	2308      	movs	r3, #8
 800910a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	611a      	str	r2, [r3, #16]
          break;
 8009112:	e009      	b.n	8009128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009114:	2308      	movs	r3, #8
 8009116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	615a      	str	r2, [r3, #20]
          break;
 800911e:	e003      	b.n	8009128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009120:	2300      	movs	r3, #0
 8009122:	623b      	str	r3, [r7, #32]
          break;
 8009124:	e000      	b.n	8009128 <HAL_GPIO_Init+0x130>
          break;
 8009126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	2bff      	cmp	r3, #255	; 0xff
 800912c:	d801      	bhi.n	8009132 <HAL_GPIO_Init+0x13a>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	e001      	b.n	8009136 <HAL_GPIO_Init+0x13e>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3304      	adds	r3, #4
 8009136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	2bff      	cmp	r3, #255	; 0xff
 800913c:	d802      	bhi.n	8009144 <HAL_GPIO_Init+0x14c>
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	e002      	b.n	800914a <HAL_GPIO_Init+0x152>
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	3b08      	subs	r3, #8
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	210f      	movs	r1, #15
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	fa01 f303 	lsl.w	r3, r1, r3
 8009158:	43db      	mvns	r3, r3
 800915a:	401a      	ands	r2, r3
 800915c:	6a39      	ldr	r1, [r7, #32]
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	fa01 f303 	lsl.w	r3, r1, r3
 8009164:	431a      	orrs	r2, r3
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 80c1 	beq.w	80092fa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009178:	4b49      	ldr	r3, [pc, #292]	; (80092a0 <HAL_GPIO_Init+0x2a8>)
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	4a48      	ldr	r2, [pc, #288]	; (80092a0 <HAL_GPIO_Init+0x2a8>)
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	6193      	str	r3, [r2, #24]
 8009184:	4b46      	ldr	r3, [pc, #280]	; (80092a0 <HAL_GPIO_Init+0x2a8>)
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	60bb      	str	r3, [r7, #8]
 800918e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009190:	4a44      	ldr	r2, [pc, #272]	; (80092a4 <HAL_GPIO_Init+0x2ac>)
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	089b      	lsrs	r3, r3, #2
 8009196:	3302      	adds	r3, #2
 8009198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800919c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	f003 0303 	and.w	r3, r3, #3
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	220f      	movs	r2, #15
 80091a8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ac:	43db      	mvns	r3, r3
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4013      	ands	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a3c      	ldr	r2, [pc, #240]	; (80092a8 <HAL_GPIO_Init+0x2b0>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d01f      	beq.n	80091fc <HAL_GPIO_Init+0x204>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a3b      	ldr	r2, [pc, #236]	; (80092ac <HAL_GPIO_Init+0x2b4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d019      	beq.n	80091f8 <HAL_GPIO_Init+0x200>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a3a      	ldr	r2, [pc, #232]	; (80092b0 <HAL_GPIO_Init+0x2b8>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d013      	beq.n	80091f4 <HAL_GPIO_Init+0x1fc>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a39      	ldr	r2, [pc, #228]	; (80092b4 <HAL_GPIO_Init+0x2bc>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d00d      	beq.n	80091f0 <HAL_GPIO_Init+0x1f8>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a38      	ldr	r2, [pc, #224]	; (80092b8 <HAL_GPIO_Init+0x2c0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d007      	beq.n	80091ec <HAL_GPIO_Init+0x1f4>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a37      	ldr	r2, [pc, #220]	; (80092bc <HAL_GPIO_Init+0x2c4>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d101      	bne.n	80091e8 <HAL_GPIO_Init+0x1f0>
 80091e4:	2305      	movs	r3, #5
 80091e6:	e00a      	b.n	80091fe <HAL_GPIO_Init+0x206>
 80091e8:	2306      	movs	r3, #6
 80091ea:	e008      	b.n	80091fe <HAL_GPIO_Init+0x206>
 80091ec:	2304      	movs	r3, #4
 80091ee:	e006      	b.n	80091fe <HAL_GPIO_Init+0x206>
 80091f0:	2303      	movs	r3, #3
 80091f2:	e004      	b.n	80091fe <HAL_GPIO_Init+0x206>
 80091f4:	2302      	movs	r3, #2
 80091f6:	e002      	b.n	80091fe <HAL_GPIO_Init+0x206>
 80091f8:	2301      	movs	r3, #1
 80091fa:	e000      	b.n	80091fe <HAL_GPIO_Init+0x206>
 80091fc:	2300      	movs	r3, #0
 80091fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009200:	f002 0203 	and.w	r2, r2, #3
 8009204:	0092      	lsls	r2, r2, #2
 8009206:	4093      	lsls	r3, r2
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4313      	orrs	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800920e:	4925      	ldr	r1, [pc, #148]	; (80092a4 <HAL_GPIO_Init+0x2ac>)
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	089b      	lsrs	r3, r3, #2
 8009214:	3302      	adds	r3, #2
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d006      	beq.n	8009236 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009228:	4b25      	ldr	r3, [pc, #148]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	4924      	ldr	r1, [pc, #144]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	4313      	orrs	r3, r2
 8009232:	608b      	str	r3, [r1, #8]
 8009234:	e006      	b.n	8009244 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009236:	4b22      	ldr	r3, [pc, #136]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	43db      	mvns	r3, r3
 800923e:	4920      	ldr	r1, [pc, #128]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 8009240:	4013      	ands	r3, r2
 8009242:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d006      	beq.n	800925e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009250:	4b1b      	ldr	r3, [pc, #108]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	491a      	ldr	r1, [pc, #104]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	4313      	orrs	r3, r2
 800925a:	60cb      	str	r3, [r1, #12]
 800925c:	e006      	b.n	800926c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800925e:	4b18      	ldr	r3, [pc, #96]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	43db      	mvns	r3, r3
 8009266:	4916      	ldr	r1, [pc, #88]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 8009268:	4013      	ands	r3, r2
 800926a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d025      	beq.n	80092c4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009278:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	4910      	ldr	r1, [pc, #64]	; (80092c0 <HAL_GPIO_Init+0x2c8>)
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	4313      	orrs	r3, r2
 8009282:	604b      	str	r3, [r1, #4]
 8009284:	e025      	b.n	80092d2 <HAL_GPIO_Init+0x2da>
 8009286:	bf00      	nop
 8009288:	10320000 	.word	0x10320000
 800928c:	10310000 	.word	0x10310000
 8009290:	10220000 	.word	0x10220000
 8009294:	10210000 	.word	0x10210000
 8009298:	10120000 	.word	0x10120000
 800929c:	10110000 	.word	0x10110000
 80092a0:	40021000 	.word	0x40021000
 80092a4:	40010000 	.word	0x40010000
 80092a8:	40010800 	.word	0x40010800
 80092ac:	40010c00 	.word	0x40010c00
 80092b0:	40011000 	.word	0x40011000
 80092b4:	40011400 	.word	0x40011400
 80092b8:	40011800 	.word	0x40011800
 80092bc:	40011c00 	.word	0x40011c00
 80092c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80092c4:	4b15      	ldr	r3, [pc, #84]	; (800931c <HAL_GPIO_Init+0x324>)
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	43db      	mvns	r3, r3
 80092cc:	4913      	ldr	r1, [pc, #76]	; (800931c <HAL_GPIO_Init+0x324>)
 80092ce:	4013      	ands	r3, r2
 80092d0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d006      	beq.n	80092ec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80092de:	4b0f      	ldr	r3, [pc, #60]	; (800931c <HAL_GPIO_Init+0x324>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	490e      	ldr	r1, [pc, #56]	; (800931c <HAL_GPIO_Init+0x324>)
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	600b      	str	r3, [r1, #0]
 80092ea:	e006      	b.n	80092fa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80092ec:	4b0b      	ldr	r3, [pc, #44]	; (800931c <HAL_GPIO_Init+0x324>)
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	43db      	mvns	r3, r3
 80092f4:	4909      	ldr	r1, [pc, #36]	; (800931c <HAL_GPIO_Init+0x324>)
 80092f6:	4013      	ands	r3, r2
 80092f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	3301      	adds	r3, #1
 80092fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	fa22 f303 	lsr.w	r3, r2, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	f47f ae7e 	bne.w	800900c <HAL_GPIO_Init+0x14>
  }
}
 8009310:	bf00      	nop
 8009312:	bf00      	nop
 8009314:	372c      	adds	r7, #44	; 0x2c
 8009316:	46bd      	mov	sp, r7
 8009318:	bc80      	pop	{r7}
 800931a:	4770      	bx	lr
 800931c:	40010400 	.word	0x40010400

08009320 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009320:	b480      	push	{r7}
 8009322:	b089      	sub	sp, #36	; 0x24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800932a:	2300      	movs	r3, #0
 800932c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800932e:	e0a6      	b.n	800947e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009330:	2201      	movs	r2, #1
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	fa02 f303 	lsl.w	r3, r2, r3
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	4013      	ands	r3, r2
 800933c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8099 	beq.w	8009478 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009346:	4a54      	ldr	r2, [pc, #336]	; (8009498 <HAL_GPIO_DeInit+0x178>)
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	089b      	lsrs	r3, r3, #2
 800934c:	3302      	adds	r3, #2
 800934e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009352:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	f003 0303 	and.w	r3, r3, #3
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	220f      	movs	r2, #15
 800935e:	fa02 f303 	lsl.w	r3, r2, r3
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4013      	ands	r3, r2
 8009366:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a4c      	ldr	r2, [pc, #304]	; (800949c <HAL_GPIO_DeInit+0x17c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d01f      	beq.n	80093b0 <HAL_GPIO_DeInit+0x90>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a4b      	ldr	r2, [pc, #300]	; (80094a0 <HAL_GPIO_DeInit+0x180>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d019      	beq.n	80093ac <HAL_GPIO_DeInit+0x8c>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a4a      	ldr	r2, [pc, #296]	; (80094a4 <HAL_GPIO_DeInit+0x184>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d013      	beq.n	80093a8 <HAL_GPIO_DeInit+0x88>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a49      	ldr	r2, [pc, #292]	; (80094a8 <HAL_GPIO_DeInit+0x188>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d00d      	beq.n	80093a4 <HAL_GPIO_DeInit+0x84>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a48      	ldr	r2, [pc, #288]	; (80094ac <HAL_GPIO_DeInit+0x18c>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d007      	beq.n	80093a0 <HAL_GPIO_DeInit+0x80>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a47      	ldr	r2, [pc, #284]	; (80094b0 <HAL_GPIO_DeInit+0x190>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d101      	bne.n	800939c <HAL_GPIO_DeInit+0x7c>
 8009398:	2305      	movs	r3, #5
 800939a:	e00a      	b.n	80093b2 <HAL_GPIO_DeInit+0x92>
 800939c:	2306      	movs	r3, #6
 800939e:	e008      	b.n	80093b2 <HAL_GPIO_DeInit+0x92>
 80093a0:	2304      	movs	r3, #4
 80093a2:	e006      	b.n	80093b2 <HAL_GPIO_DeInit+0x92>
 80093a4:	2303      	movs	r3, #3
 80093a6:	e004      	b.n	80093b2 <HAL_GPIO_DeInit+0x92>
 80093a8:	2302      	movs	r3, #2
 80093aa:	e002      	b.n	80093b2 <HAL_GPIO_DeInit+0x92>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e000      	b.n	80093b2 <HAL_GPIO_DeInit+0x92>
 80093b0:	2300      	movs	r3, #0
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	f002 0203 	and.w	r2, r2, #3
 80093b8:	0092      	lsls	r2, r2, #2
 80093ba:	4093      	lsls	r3, r2
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d132      	bne.n	8009428 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80093c2:	4b3c      	ldr	r3, [pc, #240]	; (80094b4 <HAL_GPIO_DeInit+0x194>)
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	43db      	mvns	r3, r3
 80093ca:	493a      	ldr	r1, [pc, #232]	; (80094b4 <HAL_GPIO_DeInit+0x194>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80093d0:	4b38      	ldr	r3, [pc, #224]	; (80094b4 <HAL_GPIO_DeInit+0x194>)
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	43db      	mvns	r3, r3
 80093d8:	4936      	ldr	r1, [pc, #216]	; (80094b4 <HAL_GPIO_DeInit+0x194>)
 80093da:	4013      	ands	r3, r2
 80093dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80093de:	4b35      	ldr	r3, [pc, #212]	; (80094b4 <HAL_GPIO_DeInit+0x194>)
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	43db      	mvns	r3, r3
 80093e6:	4933      	ldr	r1, [pc, #204]	; (80094b4 <HAL_GPIO_DeInit+0x194>)
 80093e8:	4013      	ands	r3, r2
 80093ea:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80093ec:	4b31      	ldr	r3, [pc, #196]	; (80094b4 <HAL_GPIO_DeInit+0x194>)
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	43db      	mvns	r3, r3
 80093f4:	492f      	ldr	r1, [pc, #188]	; (80094b4 <HAL_GPIO_DeInit+0x194>)
 80093f6:	4013      	ands	r3, r2
 80093f8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	f003 0303 	and.w	r3, r3, #3
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	220f      	movs	r2, #15
 8009404:	fa02 f303 	lsl.w	r3, r2, r3
 8009408:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800940a:	4a23      	ldr	r2, [pc, #140]	; (8009498 <HAL_GPIO_DeInit+0x178>)
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	089b      	lsrs	r3, r3, #2
 8009410:	3302      	adds	r3, #2
 8009412:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	43da      	mvns	r2, r3
 800941a:	481f      	ldr	r0, [pc, #124]	; (8009498 <HAL_GPIO_DeInit+0x178>)
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	089b      	lsrs	r3, r3, #2
 8009420:	400a      	ands	r2, r1
 8009422:	3302      	adds	r3, #2
 8009424:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	2bff      	cmp	r3, #255	; 0xff
 800942c:	d801      	bhi.n	8009432 <HAL_GPIO_DeInit+0x112>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	e001      	b.n	8009436 <HAL_GPIO_DeInit+0x116>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3304      	adds	r3, #4
 8009436:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	2bff      	cmp	r3, #255	; 0xff
 800943c:	d802      	bhi.n	8009444 <HAL_GPIO_DeInit+0x124>
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	e002      	b.n	800944a <HAL_GPIO_DeInit+0x12a>
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	3b08      	subs	r3, #8
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	210f      	movs	r1, #15
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	fa01 f303 	lsl.w	r3, r1, r3
 8009458:	43db      	mvns	r3, r3
 800945a:	401a      	ands	r2, r3
 800945c:	2104      	movs	r1, #4
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	fa01 f303 	lsl.w	r3, r1, r3
 8009464:	431a      	orrs	r2, r3
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68da      	ldr	r2, [r3, #12]
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	43db      	mvns	r3, r3
 8009472:	401a      	ands	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	3301      	adds	r3, #1
 800947c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	fa22 f303 	lsr.w	r3, r2, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	f47f af52 	bne.w	8009330 <HAL_GPIO_DeInit+0x10>
  }
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	3724      	adds	r7, #36	; 0x24
 8009492:	46bd      	mov	sp, r7
 8009494:	bc80      	pop	{r7}
 8009496:	4770      	bx	lr
 8009498:	40010000 	.word	0x40010000
 800949c:	40010800 	.word	0x40010800
 80094a0:	40010c00 	.word	0x40010c00
 80094a4:	40011000 	.word	0x40011000
 80094a8:	40011400 	.word	0x40011400
 80094ac:	40011800 	.word	0x40011800
 80094b0:	40011c00 	.word	0x40011c00
 80094b4:	40010400 	.word	0x40010400

080094b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	887b      	ldrh	r3, [r7, #2]
 80094ca:	4013      	ands	r3, r2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80094d0:	2301      	movs	r3, #1
 80094d2:	73fb      	strb	r3, [r7, #15]
 80094d4:	e001      	b.n	80094da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80094da:	7bfb      	ldrb	r3, [r7, #15]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr

080094e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	460b      	mov	r3, r1
 80094f0:	807b      	strh	r3, [r7, #2]
 80094f2:	4613      	mov	r3, r2
 80094f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80094f6:	787b      	ldrb	r3, [r7, #1]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80094fc:	887a      	ldrh	r2, [r7, #2]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009502:	e003      	b.n	800950c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009504:	887b      	ldrh	r3, [r7, #2]
 8009506:	041a      	lsls	r2, r3, #16
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	611a      	str	r2, [r3, #16]
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr

08009516 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009516:	b480      	push	{r7}
 8009518:	b085      	sub	sp, #20
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009528:	887a      	ldrh	r2, [r7, #2]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	4013      	ands	r3, r2
 800952e:	041a      	lsls	r2, r3, #16
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	43d9      	mvns	r1, r3
 8009534:	887b      	ldrh	r3, [r7, #2]
 8009536:	400b      	ands	r3, r1
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	611a      	str	r2, [r3, #16]
}
 800953e:	bf00      	nop
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	bc80      	pop	{r7}
 8009546:	4770      	bx	lr

08009548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e12b      	b.n	80097b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7fe fff8 	bl	8008564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2224      	movs	r2, #36	; 0x24
 8009578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0201 	bic.w	r2, r2, #1
 800958a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800959a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80095aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80095ac:	f001 fdb8 	bl	800b120 <HAL_RCC_GetPCLK1Freq>
 80095b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	4a81      	ldr	r2, [pc, #516]	; (80097bc <HAL_I2C_Init+0x274>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d807      	bhi.n	80095cc <HAL_I2C_Init+0x84>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4a80      	ldr	r2, [pc, #512]	; (80097c0 <HAL_I2C_Init+0x278>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	bf94      	ite	ls
 80095c4:	2301      	movls	r3, #1
 80095c6:	2300      	movhi	r3, #0
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	e006      	b.n	80095da <HAL_I2C_Init+0x92>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4a7d      	ldr	r2, [pc, #500]	; (80097c4 <HAL_I2C_Init+0x27c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	bf94      	ite	ls
 80095d4:	2301      	movls	r3, #1
 80095d6:	2300      	movhi	r3, #0
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e0e7      	b.n	80097b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	4a78      	ldr	r2, [pc, #480]	; (80097c8 <HAL_I2C_Init+0x280>)
 80095e6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ea:	0c9b      	lsrs	r3, r3, #18
 80095ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	430a      	orrs	r2, r1
 8009600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	4a6a      	ldr	r2, [pc, #424]	; (80097bc <HAL_I2C_Init+0x274>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d802      	bhi.n	800961c <HAL_I2C_Init+0xd4>
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	3301      	adds	r3, #1
 800961a:	e009      	b.n	8009630 <HAL_I2C_Init+0xe8>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009622:	fb02 f303 	mul.w	r3, r2, r3
 8009626:	4a69      	ldr	r2, [pc, #420]	; (80097cc <HAL_I2C_Init+0x284>)
 8009628:	fba2 2303 	umull	r2, r3, r2, r3
 800962c:	099b      	lsrs	r3, r3, #6
 800962e:	3301      	adds	r3, #1
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	430b      	orrs	r3, r1
 8009636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009642:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	495c      	ldr	r1, [pc, #368]	; (80097bc <HAL_I2C_Init+0x274>)
 800964c:	428b      	cmp	r3, r1
 800964e:	d819      	bhi.n	8009684 <HAL_I2C_Init+0x13c>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	1e59      	subs	r1, r3, #1
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	fbb1 f3f3 	udiv	r3, r1, r3
 800965e:	1c59      	adds	r1, r3, #1
 8009660:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009664:	400b      	ands	r3, r1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <HAL_I2C_Init+0x138>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	1e59      	subs	r1, r3, #1
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	005b      	lsls	r3, r3, #1
 8009674:	fbb1 f3f3 	udiv	r3, r1, r3
 8009678:	3301      	adds	r3, #1
 800967a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800967e:	e051      	b.n	8009724 <HAL_I2C_Init+0x1dc>
 8009680:	2304      	movs	r3, #4
 8009682:	e04f      	b.n	8009724 <HAL_I2C_Init+0x1dc>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d111      	bne.n	80096b0 <HAL_I2C_Init+0x168>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	1e58      	subs	r0, r3, #1
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6859      	ldr	r1, [r3, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	440b      	add	r3, r1
 800969a:	fbb0 f3f3 	udiv	r3, r0, r3
 800969e:	3301      	adds	r3, #1
 80096a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	bf0c      	ite	eq
 80096a8:	2301      	moveq	r3, #1
 80096aa:	2300      	movne	r3, #0
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	e012      	b.n	80096d6 <HAL_I2C_Init+0x18e>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	1e58      	subs	r0, r3, #1
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6859      	ldr	r1, [r3, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	0099      	lsls	r1, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80096c6:	3301      	adds	r3, #1
 80096c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bf0c      	ite	eq
 80096d0:	2301      	moveq	r3, #1
 80096d2:	2300      	movne	r3, #0
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <HAL_I2C_Init+0x196>
 80096da:	2301      	movs	r3, #1
 80096dc:	e022      	b.n	8009724 <HAL_I2C_Init+0x1dc>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10e      	bne.n	8009704 <HAL_I2C_Init+0x1bc>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	1e58      	subs	r0, r3, #1
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6859      	ldr	r1, [r3, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	005b      	lsls	r3, r3, #1
 80096f2:	440b      	add	r3, r1
 80096f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80096f8:	3301      	adds	r3, #1
 80096fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009702:	e00f      	b.n	8009724 <HAL_I2C_Init+0x1dc>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	1e58      	subs	r0, r3, #1
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6859      	ldr	r1, [r3, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	440b      	add	r3, r1
 8009712:	0099      	lsls	r1, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	fbb0 f3f3 	udiv	r3, r0, r3
 800971a:	3301      	adds	r3, #1
 800971c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	6809      	ldr	r1, [r1, #0]
 8009728:	4313      	orrs	r3, r2
 800972a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	69da      	ldr	r2, [r3, #28]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	431a      	orrs	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	6911      	ldr	r1, [r2, #16]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	68d2      	ldr	r2, [r2, #12]
 800975e:	4311      	orrs	r1, r2
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	6812      	ldr	r2, [r2, #0]
 8009764:	430b      	orrs	r3, r1
 8009766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695a      	ldr	r2, [r3, #20]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0201 	orr.w	r2, r2, #1
 8009792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2220      	movs	r2, #32
 800979e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	000186a0 	.word	0x000186a0
 80097c0:	001e847f 	.word	0x001e847f
 80097c4:	003d08ff 	.word	0x003d08ff
 80097c8:	431bde83 	.word	0x431bde83
 80097cc:	10624dd3 	.word	0x10624dd3

080097d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e021      	b.n	8009826 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2224      	movs	r2, #36	; 0x24
 80097e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0201 	bic.w	r2, r2, #1
 80097f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7fe fef0 	bl	80085e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af02      	add	r7, sp, #8
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	461a      	mov	r2, r3
 800983c:	460b      	mov	r3, r1
 800983e:	817b      	strh	r3, [r7, #10]
 8009840:	4613      	mov	r3, r2
 8009842:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009844:	f7ff f85e 	bl	8008904 <HAL_GetTick>
 8009848:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b20      	cmp	r3, #32
 8009854:	f040 80e0 	bne.w	8009a18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	2319      	movs	r3, #25
 800985e:	2201      	movs	r2, #1
 8009860:	4970      	ldr	r1, [pc, #448]	; (8009a24 <HAL_I2C_Master_Transmit+0x1f4>)
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 fe5c 	bl	800a520 <I2C_WaitOnFlagUntilTimeout>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800986e:	2302      	movs	r3, #2
 8009870:	e0d3      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009878:	2b01      	cmp	r3, #1
 800987a:	d101      	bne.n	8009880 <HAL_I2C_Master_Transmit+0x50>
 800987c:	2302      	movs	r3, #2
 800987e:	e0cc      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x1ea>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b01      	cmp	r3, #1
 8009894:	d007      	beq.n	80098a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f042 0201 	orr.w	r2, r2, #1
 80098a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2221      	movs	r2, #33	; 0x21
 80098ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2210      	movs	r2, #16
 80098c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	893a      	ldrh	r2, [r7, #8]
 80098d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098dc:	b29a      	uxth	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4a50      	ldr	r2, [pc, #320]	; (8009a28 <HAL_I2C_Master_Transmit+0x1f8>)
 80098e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80098e8:	8979      	ldrh	r1, [r7, #10]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	6a3a      	ldr	r2, [r7, #32]
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 fc16 	bl	800a120 <I2C_MasterRequestWrite>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e08d      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098fe:	2300      	movs	r3, #0
 8009900:	613b      	str	r3, [r7, #16]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	613b      	str	r3, [r7, #16]
 8009912:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009914:	e066      	b.n	80099e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	6a39      	ldr	r1, [r7, #32]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 ff1a 	bl	800a754 <I2C_WaitOnTXEFlagUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00d      	beq.n	8009942 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992a:	2b04      	cmp	r3, #4
 800992c:	d107      	bne.n	800993e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800993c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e06b      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995c:	b29b      	uxth	r3, r3
 800995e:	3b01      	subs	r3, #1
 8009960:	b29a      	uxth	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800996a:	3b01      	subs	r3, #1
 800996c:	b29a      	uxth	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	f003 0304 	and.w	r3, r3, #4
 800997c:	2b04      	cmp	r3, #4
 800997e:	d11b      	bne.n	80099b8 <HAL_I2C_Master_Transmit+0x188>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009984:	2b00      	cmp	r3, #0
 8009986:	d017      	beq.n	80099b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	781a      	ldrb	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	6a39      	ldr	r1, [r7, #32]
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 ff11 	bl	800a7e4 <I2C_WaitOnBTFFlagUntilTimeout>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00d      	beq.n	80099e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d107      	bne.n	80099e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e01a      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d194      	bne.n	8009916 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	e000      	b.n	8009a1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009a18:	2302      	movs	r3, #2
  }
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	00100002 	.word	0x00100002
 8009a28:	ffff0000 	.word	0xffff0000

08009a2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	4608      	mov	r0, r1
 8009a36:	4611      	mov	r1, r2
 8009a38:	461a      	mov	r2, r3
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	817b      	strh	r3, [r7, #10]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	813b      	strh	r3, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a46:	f7fe ff5d 	bl	8008904 <HAL_GetTick>
 8009a4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	f040 80d9 	bne.w	8009c0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	2319      	movs	r3, #25
 8009a60:	2201      	movs	r2, #1
 8009a62:	496d      	ldr	r1, [pc, #436]	; (8009c18 <HAL_I2C_Mem_Write+0x1ec>)
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 fd5b 	bl	800a520 <I2C_WaitOnFlagUntilTimeout>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009a70:	2302      	movs	r3, #2
 8009a72:	e0cc      	b.n	8009c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d101      	bne.n	8009a82 <HAL_I2C_Mem_Write+0x56>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	e0c5      	b.n	8009c0e <HAL_I2C_Mem_Write+0x1e2>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d007      	beq.n	8009aa8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f042 0201 	orr.w	r2, r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ab6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2221      	movs	r2, #33	; 0x21
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2240      	movs	r2, #64	; 0x40
 8009ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6a3a      	ldr	r2, [r7, #32]
 8009ad2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4a4d      	ldr	r2, [pc, #308]	; (8009c1c <HAL_I2C_Mem_Write+0x1f0>)
 8009ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009aea:	88f8      	ldrh	r0, [r7, #6]
 8009aec:	893a      	ldrh	r2, [r7, #8]
 8009aee:	8979      	ldrh	r1, [r7, #10]
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	9301      	str	r3, [sp, #4]
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	4603      	mov	r3, r0
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fb92 	bl	800a224 <I2C_RequestMemoryWrite>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d052      	beq.n	8009bac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e081      	b.n	8009c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 fe20 	bl	800a754 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00d      	beq.n	8009b36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d107      	bne.n	8009b32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e06b      	b.n	8009c0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	781a      	ldrb	r2, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b50:	3b01      	subs	r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	d11b      	bne.n	8009bac <HAL_I2C_Mem_Write+0x180>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d017      	beq.n	8009bac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	781a      	ldrb	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1aa      	bne.n	8009b0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 fe13 	bl	800a7e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00d      	beq.n	8009be0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d107      	bne.n	8009bdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e016      	b.n	8009c0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e000      	b.n	8009c0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009c0c:	2302      	movs	r3, #2
  }
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	00100002 	.word	0x00100002
 8009c1c:	ffff0000 	.word	0xffff0000

08009c20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08c      	sub	sp, #48	; 0x30
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	4608      	mov	r0, r1
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4603      	mov	r3, r0
 8009c30:	817b      	strh	r3, [r7, #10]
 8009c32:	460b      	mov	r3, r1
 8009c34:	813b      	strh	r3, [r7, #8]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c3e:	f7fe fe61 	bl	8008904 <HAL_GetTick>
 8009c42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b20      	cmp	r3, #32
 8009c4e:	f040 8244 	bne.w	800a0da <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	2319      	movs	r3, #25
 8009c58:	2201      	movs	r2, #1
 8009c5a:	4982      	ldr	r1, [pc, #520]	; (8009e64 <HAL_I2C_Mem_Read+0x244>)
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 fc5f 	bl	800a520 <I2C_WaitOnFlagUntilTimeout>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	e237      	b.n	800a0dc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d101      	bne.n	8009c7a <HAL_I2C_Mem_Read+0x5a>
 8009c76:	2302      	movs	r3, #2
 8009c78:	e230      	b.n	800a0dc <HAL_I2C_Mem_Read+0x4bc>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d007      	beq.n	8009ca0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0201 	orr.w	r2, r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2222      	movs	r2, #34	; 0x22
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2240      	movs	r2, #64	; 0x40
 8009cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4a62      	ldr	r2, [pc, #392]	; (8009e68 <HAL_I2C_Mem_Read+0x248>)
 8009ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ce2:	88f8      	ldrh	r0, [r7, #6]
 8009ce4:	893a      	ldrh	r2, [r7, #8]
 8009ce6:	8979      	ldrh	r1, [r7, #10]
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	9301      	str	r3, [sp, #4]
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 fb2c 	bl	800a350 <I2C_RequestMemoryRead>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e1ec      	b.n	800a0dc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d113      	bne.n	8009d32 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61fb      	str	r3, [r7, #28]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	61fb      	str	r3, [r7, #28]
 8009d1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	e1c0      	b.n	800a0b4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d11e      	bne.n	8009d78 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d4a:	b672      	cpsid	i
}
 8009d4c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d4e:	2300      	movs	r3, #0
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	61bb      	str	r3, [r7, #24]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009d74:	b662      	cpsie	i
}
 8009d76:	e035      	b.n	8009de4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d11e      	bne.n	8009dbe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d90:	b672      	cpsid	i
}
 8009d92:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d94:	2300      	movs	r3, #0
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	617b      	str	r3, [r7, #20]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009db8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009dba:	b662      	cpsie	i
}
 8009dbc:	e012      	b.n	8009de4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009dcc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dce:	2300      	movs	r3, #0
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	695b      	ldr	r3, [r3, #20]
 8009dd8:	613b      	str	r3, [r7, #16]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	613b      	str	r3, [r7, #16]
 8009de2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009de4:	e166      	b.n	800a0b4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	f200 811f 	bhi.w	800a02e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d123      	bne.n	8009e40 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 fd39 	bl	800a874 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e167      	b.n	800a0dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	691a      	ldr	r2, [r3, #16]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e16:	b2d2      	uxtb	r2, r2
 8009e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	3b01      	subs	r3, #1
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e3e:	e139      	b.n	800a0b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d152      	bne.n	8009eee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	2200      	movs	r2, #0
 8009e50:	4906      	ldr	r1, [pc, #24]	; (8009e6c <HAL_I2C_Mem_Read+0x24c>)
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 fb64 	bl	800a520 <I2C_WaitOnFlagUntilTimeout>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d008      	beq.n	8009e70 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e13c      	b.n	800a0dc <HAL_I2C_Mem_Read+0x4bc>
 8009e62:	bf00      	nop
 8009e64:	00100002 	.word	0x00100002
 8009e68:	ffff0000 	.word	0xffff0000
 8009e6c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009e70:	b672      	cpsid	i
}
 8009e72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	691a      	ldr	r2, [r3, #16]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	b2d2      	uxtb	r2, r2
 8009e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009eb6:	b662      	cpsie	i
}
 8009eb8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009eec:	e0e2      	b.n	800a0b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	497b      	ldr	r1, [pc, #492]	; (800a0e4 <HAL_I2C_Mem_Read+0x4c4>)
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 fb11 	bl	800a520 <I2C_WaitOnFlagUntilTimeout>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e0e9      	b.n	800a0dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f18:	b672      	cpsid	i
}
 8009f1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	691a      	ldr	r2, [r3, #16]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009f4e:	4b66      	ldr	r3, [pc, #408]	; (800a0e8 <HAL_I2C_Mem_Read+0x4c8>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	08db      	lsrs	r3, r3, #3
 8009f54:	4a65      	ldr	r2, [pc, #404]	; (800a0ec <HAL_I2C_Mem_Read+0x4cc>)
 8009f56:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5a:	0a1a      	lsrs	r2, r3, #8
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	00da      	lsls	r2, r3, #3
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d118      	bne.n	8009fa6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	f043 0220 	orr.w	r2, r3, #32
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009f96:	b662      	cpsie	i
}
 8009f98:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e09a      	b.n	800a0dc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	695b      	ldr	r3, [r3, #20]
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b04      	cmp	r3, #4
 8009fb2:	d1d9      	bne.n	8009f68 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691a      	ldr	r2, [r3, #16]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009ff6:	b662      	cpsie	i
}
 8009ff8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	691a      	ldr	r2, [r3, #16]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	b2d2      	uxtb	r2, r2
 800a006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	1c5a      	adds	r2, r3, #1
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a016:	3b01      	subs	r3, #1
 800a018:	b29a      	uxth	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a022:	b29b      	uxth	r3, r3
 800a024:	3b01      	subs	r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a02c:	e042      	b.n	800a0b4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a030:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fc1e 	bl	800a874 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e04c      	b.n	800a0dc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	691a      	ldr	r2, [r3, #16]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	b2d2      	uxtb	r2, r2
 800a04e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a05e:	3b01      	subs	r3, #1
 800a060:	b29a      	uxth	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	3b01      	subs	r3, #1
 800a06e:	b29a      	uxth	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d118      	bne.n	800a0b4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	691a      	ldr	r2, [r3, #16]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	b2d2      	uxtb	r2, r2
 800a08e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f47f ae94 	bne.w	8009de6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e000      	b.n	800a0dc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a0da:	2302      	movs	r3, #2
  }
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3728      	adds	r7, #40	; 0x28
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	00010004 	.word	0x00010004
 800a0e8:	200000b0 	.word	0x200000b0
 800a0ec:	14f8b589 	.word	0x14f8b589

0800a0f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0fe:	b2db      	uxtb	r3, r3
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	bc80      	pop	{r7}
 800a108:	4770      	bx	lr

0800a10a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a116:	4618      	mov	r0, r3
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bc80      	pop	{r7}
 800a11e:	4770      	bx	lr

0800a120 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af02      	add	r7, sp, #8
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	607a      	str	r2, [r7, #4]
 800a12a:	603b      	str	r3, [r7, #0]
 800a12c:	460b      	mov	r3, r1
 800a12e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2b08      	cmp	r3, #8
 800a13a:	d006      	beq.n	800a14a <I2C_MasterRequestWrite+0x2a>
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d003      	beq.n	800a14a <I2C_MasterRequestWrite+0x2a>
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a148:	d108      	bne.n	800a15c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	e00b      	b.n	800a174 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a160:	2b12      	cmp	r3, #18
 800a162:	d107      	bne.n	800a174 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a172:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 f9cd 	bl	800a520 <I2C_WaitOnFlagUntilTimeout>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00d      	beq.n	800a1a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a19a:	d103      	bne.n	800a1a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e035      	b.n	800a214 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1b0:	d108      	bne.n	800a1c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1b2:	897b      	ldrh	r3, [r7, #10]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1c0:	611a      	str	r2, [r3, #16]
 800a1c2:	e01b      	b.n	800a1fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a1c4:	897b      	ldrh	r3, [r7, #10]
 800a1c6:	11db      	asrs	r3, r3, #7
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	f003 0306 	and.w	r3, r3, #6
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	f063 030f 	orn	r3, r3, #15
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	490e      	ldr	r1, [pc, #56]	; (800a21c <I2C_MasterRequestWrite+0xfc>)
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 fa16 	bl	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e010      	b.n	800a214 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a1f2:	897b      	ldrh	r3, [r7, #10]
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	4907      	ldr	r1, [pc, #28]	; (800a220 <I2C_MasterRequestWrite+0x100>)
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 fa06 	bl	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	00010008 	.word	0x00010008
 800a220:	00010002 	.word	0x00010002

0800a224 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af02      	add	r7, sp, #8
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	461a      	mov	r2, r3
 800a232:	4603      	mov	r3, r0
 800a234:	817b      	strh	r3, [r7, #10]
 800a236:	460b      	mov	r3, r1
 800a238:	813b      	strh	r3, [r7, #8]
 800a23a:	4613      	mov	r3, r2
 800a23c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a24c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	6a3b      	ldr	r3, [r7, #32]
 800a254:	2200      	movs	r2, #0
 800a256:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 f960 	bl	800a520 <I2C_WaitOnFlagUntilTimeout>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00d      	beq.n	800a282 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a274:	d103      	bne.n	800a27e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a27c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e05f      	b.n	800a342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a282:	897b      	ldrh	r3, [r7, #10]
 800a284:	b2db      	uxtb	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a290:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	6a3a      	ldr	r2, [r7, #32]
 800a296:	492d      	ldr	r1, [pc, #180]	; (800a34c <I2C_RequestMemoryWrite+0x128>)
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 f9bb 	bl	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e04c      	b.n	800a342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c0:	6a39      	ldr	r1, [r7, #32]
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 fa46 	bl	800a754 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00d      	beq.n	800a2ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d107      	bne.n	800a2e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e02b      	b.n	800a342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2ea:	88fb      	ldrh	r3, [r7, #6]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d105      	bne.n	800a2fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2f0:	893b      	ldrh	r3, [r7, #8]
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	611a      	str	r2, [r3, #16]
 800a2fa:	e021      	b.n	800a340 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2fc:	893b      	ldrh	r3, [r7, #8]
 800a2fe:	0a1b      	lsrs	r3, r3, #8
 800a300:	b29b      	uxth	r3, r3
 800a302:	b2da      	uxtb	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a30a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30c:	6a39      	ldr	r1, [r7, #32]
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f000 fa20 	bl	800a754 <I2C_WaitOnTXEFlagUntilTimeout>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00d      	beq.n	800a336 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	2b04      	cmp	r3, #4
 800a320:	d107      	bne.n	800a332 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a330:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e005      	b.n	800a342 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a336:	893b      	ldrh	r3, [r7, #8]
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	00010002 	.word	0x00010002

0800a350 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af02      	add	r7, sp, #8
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	4608      	mov	r0, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	461a      	mov	r2, r3
 800a35e:	4603      	mov	r3, r0
 800a360:	817b      	strh	r3, [r7, #10]
 800a362:	460b      	mov	r3, r1
 800a364:	813b      	strh	r3, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a378:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a388:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	2200      	movs	r2, #0
 800a392:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 f8c2 	bl	800a520 <I2C_WaitOnFlagUntilTimeout>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00d      	beq.n	800a3be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3b0:	d103      	bne.n	800a3ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e0aa      	b.n	800a514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a3be:	897b      	ldrh	r3, [r7, #10]
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a3cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	6a3a      	ldr	r2, [r7, #32]
 800a3d2:	4952      	ldr	r1, [pc, #328]	; (800a51c <I2C_RequestMemoryRead+0x1cc>)
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 f91d 	bl	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e097      	b.n	800a514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	617b      	str	r3, [r7, #20]
 800a3f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3fc:	6a39      	ldr	r1, [r7, #32]
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f000 f9a8 	bl	800a754 <I2C_WaitOnTXEFlagUntilTimeout>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00d      	beq.n	800a426 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d107      	bne.n	800a422 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a420:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e076      	b.n	800a514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a426:	88fb      	ldrh	r3, [r7, #6]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d105      	bne.n	800a438 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a42c:	893b      	ldrh	r3, [r7, #8]
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	611a      	str	r2, [r3, #16]
 800a436:	e021      	b.n	800a47c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a438:	893b      	ldrh	r3, [r7, #8]
 800a43a:	0a1b      	lsrs	r3, r3, #8
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a448:	6a39      	ldr	r1, [r7, #32]
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 f982 	bl	800a754 <I2C_WaitOnTXEFlagUntilTimeout>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00d      	beq.n	800a472 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d107      	bne.n	800a46e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a46c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e050      	b.n	800a514 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a472:	893b      	ldrh	r3, [r7, #8]
 800a474:	b2da      	uxtb	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47e:	6a39      	ldr	r1, [r7, #32]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 f967 	bl	800a754 <I2C_WaitOnTXEFlagUntilTimeout>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00d      	beq.n	800a4a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a490:	2b04      	cmp	r3, #4
 800a492:	d107      	bne.n	800a4a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e035      	b.n	800a514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f82b 	bl	800a520 <I2C_WaitOnFlagUntilTimeout>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00d      	beq.n	800a4ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4de:	d103      	bne.n	800a4e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e013      	b.n	800a514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a4ec:	897b      	ldrh	r3, [r7, #10]
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	f043 0301 	orr.w	r3, r3, #1
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	6a3a      	ldr	r2, [r7, #32]
 800a500:	4906      	ldr	r1, [pc, #24]	; (800a51c <I2C_RequestMemoryRead+0x1cc>)
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 f886 	bl	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	00010002 	.word	0x00010002

0800a520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	603b      	str	r3, [r7, #0]
 800a52c:	4613      	mov	r3, r2
 800a52e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a530:	e048      	b.n	800a5c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a538:	d044      	beq.n	800a5c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a53a:	f7fe f9e3 	bl	8008904 <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	429a      	cmp	r2, r3
 800a548:	d302      	bcc.n	800a550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d139      	bne.n	800a5c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	0c1b      	lsrs	r3, r3, #16
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b01      	cmp	r3, #1
 800a558:	d10d      	bne.n	800a576 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	43da      	mvns	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	4013      	ands	r3, r2
 800a566:	b29b      	uxth	r3, r3
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bf0c      	ite	eq
 800a56c:	2301      	moveq	r3, #1
 800a56e:	2300      	movne	r3, #0
 800a570:	b2db      	uxtb	r3, r3
 800a572:	461a      	mov	r2, r3
 800a574:	e00c      	b.n	800a590 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	43da      	mvns	r2, r3
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	4013      	ands	r3, r2
 800a582:	b29b      	uxth	r3, r3
 800a584:	2b00      	cmp	r3, #0
 800a586:	bf0c      	ite	eq
 800a588:	2301      	moveq	r3, #1
 800a58a:	2300      	movne	r3, #0
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	461a      	mov	r2, r3
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	429a      	cmp	r2, r3
 800a594:	d116      	bne.n	800a5c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b0:	f043 0220 	orr.w	r2, r3, #32
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e023      	b.n	800a60c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	0c1b      	lsrs	r3, r3, #16
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d10d      	bne.n	800a5ea <I2C_WaitOnFlagUntilTimeout+0xca>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	695b      	ldr	r3, [r3, #20]
 800a5d4:	43da      	mvns	r2, r3
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	4013      	ands	r3, r2
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	bf0c      	ite	eq
 800a5e0:	2301      	moveq	r3, #1
 800a5e2:	2300      	movne	r3, #0
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	e00c      	b.n	800a604 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	43da      	mvns	r2, r3
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	bf0c      	ite	eq
 800a5fc:	2301      	moveq	r3, #1
 800a5fe:	2300      	movne	r3, #0
 800a600:	b2db      	uxtb	r3, r3
 800a602:	461a      	mov	r2, r3
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	429a      	cmp	r2, r3
 800a608:	d093      	beq.n	800a532 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a622:	e071      	b.n	800a708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a62e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a632:	d123      	bne.n	800a67c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a642:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a64c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2220      	movs	r2, #32
 800a658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a668:	f043 0204 	orr.w	r2, r3, #4
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e067      	b.n	800a74c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a682:	d041      	beq.n	800a708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a684:	f7fe f93e 	bl	8008904 <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d302      	bcc.n	800a69a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d136      	bne.n	800a708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	0c1b      	lsrs	r3, r3, #16
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d10c      	bne.n	800a6be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	43da      	mvns	r2, r3
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bf14      	ite	ne
 800a6b6:	2301      	movne	r3, #1
 800a6b8:	2300      	moveq	r3, #0
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	e00b      	b.n	800a6d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	43da      	mvns	r2, r3
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	bf14      	ite	ne
 800a6d0:	2301      	movne	r3, #1
 800a6d2:	2300      	moveq	r3, #0
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d016      	beq.n	800a708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f4:	f043 0220 	orr.w	r2, r3, #32
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e021      	b.n	800a74c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	0c1b      	lsrs	r3, r3, #16
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d10c      	bne.n	800a72c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	43da      	mvns	r2, r3
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	4013      	ands	r3, r2
 800a71e:	b29b      	uxth	r3, r3
 800a720:	2b00      	cmp	r3, #0
 800a722:	bf14      	ite	ne
 800a724:	2301      	movne	r3, #1
 800a726:	2300      	moveq	r3, #0
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	e00b      	b.n	800a744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	43da      	mvns	r2, r3
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4013      	ands	r3, r2
 800a738:	b29b      	uxth	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	bf14      	ite	ne
 800a73e:	2301      	movne	r3, #1
 800a740:	2300      	moveq	r3, #0
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b00      	cmp	r3, #0
 800a746:	f47f af6d 	bne.w	800a624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a760:	e034      	b.n	800a7cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 f8e3 	bl	800a92e <I2C_IsAcknowledgeFailed>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e034      	b.n	800a7dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a778:	d028      	beq.n	800a7cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a77a:	f7fe f8c3 	bl	8008904 <HAL_GetTick>
 800a77e:	4602      	mov	r2, r0
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	429a      	cmp	r2, r3
 800a788:	d302      	bcc.n	800a790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d11d      	bne.n	800a7cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a79a:	2b80      	cmp	r3, #128	; 0x80
 800a79c:	d016      	beq.n	800a7cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2220      	movs	r2, #32
 800a7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b8:	f043 0220 	orr.w	r2, r3, #32
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e007      	b.n	800a7dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d6:	2b80      	cmp	r3, #128	; 0x80
 800a7d8:	d1c3      	bne.n	800a762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a7f0:	e034      	b.n	800a85c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 f89b 	bl	800a92e <I2C_IsAcknowledgeFailed>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e034      	b.n	800a86c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a808:	d028      	beq.n	800a85c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a80a:	f7fe f87b 	bl	8008904 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	429a      	cmp	r2, r3
 800a818:	d302      	bcc.n	800a820 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11d      	bne.n	800a85c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	f003 0304 	and.w	r3, r3, #4
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d016      	beq.n	800a85c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2220      	movs	r2, #32
 800a838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a848:	f043 0220 	orr.w	r2, r3, #32
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e007      	b.n	800a86c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	f003 0304 	and.w	r3, r3, #4
 800a866:	2b04      	cmp	r3, #4
 800a868:	d1c3      	bne.n	800a7f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a880:	e049      	b.n	800a916 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	f003 0310 	and.w	r3, r3, #16
 800a88c:	2b10      	cmp	r3, #16
 800a88e:	d119      	bne.n	800a8c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f06f 0210 	mvn.w	r2, #16
 800a898:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e030      	b.n	800a926 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8c4:	f7fe f81e 	bl	8008904 <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d302      	bcc.n	800a8da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d11d      	bne.n	800a916 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	695b      	ldr	r3, [r3, #20]
 800a8e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e4:	2b40      	cmp	r3, #64	; 0x40
 800a8e6:	d016      	beq.n	800a916 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	f043 0220 	orr.w	r2, r3, #32
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e007      	b.n	800a926 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	695b      	ldr	r3, [r3, #20]
 800a91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a920:	2b40      	cmp	r3, #64	; 0x40
 800a922:	d1ae      	bne.n	800a882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a92e:	b480      	push	{r7}
 800a930:	b083      	sub	sp, #12
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a944:	d11b      	bne.n	800a97e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a94e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2220      	movs	r2, #32
 800a95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96a:	f043 0204 	orr.w	r2, r3, #4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	bc80      	pop	{r7}
 800a988:	4770      	bx	lr
	...

0800a98c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e272      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 8087 	beq.w	800aaba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a9ac:	4b92      	ldr	r3, [pc, #584]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	f003 030c 	and.w	r3, r3, #12
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	d00c      	beq.n	800a9d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a9b8:	4b8f      	ldr	r3, [pc, #572]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f003 030c 	and.w	r3, r3, #12
 800a9c0:	2b08      	cmp	r3, #8
 800a9c2:	d112      	bne.n	800a9ea <HAL_RCC_OscConfig+0x5e>
 800a9c4:	4b8c      	ldr	r3, [pc, #560]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9d0:	d10b      	bne.n	800a9ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9d2:	4b89      	ldr	r3, [pc, #548]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d06c      	beq.n	800aab8 <HAL_RCC_OscConfig+0x12c>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d168      	bne.n	800aab8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e24c      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f2:	d106      	bne.n	800aa02 <HAL_RCC_OscConfig+0x76>
 800a9f4:	4b80      	ldr	r3, [pc, #512]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a7f      	ldr	r2, [pc, #508]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800a9fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	e02e      	b.n	800aa60 <HAL_RCC_OscConfig+0xd4>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10c      	bne.n	800aa24 <HAL_RCC_OscConfig+0x98>
 800aa0a:	4b7b      	ldr	r3, [pc, #492]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a7a      	ldr	r2, [pc, #488]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	4b78      	ldr	r3, [pc, #480]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a77      	ldr	r2, [pc, #476]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa20:	6013      	str	r3, [r2, #0]
 800aa22:	e01d      	b.n	800aa60 <HAL_RCC_OscConfig+0xd4>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa2c:	d10c      	bne.n	800aa48 <HAL_RCC_OscConfig+0xbc>
 800aa2e:	4b72      	ldr	r3, [pc, #456]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a71      	ldr	r2, [pc, #452]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	4b6f      	ldr	r3, [pc, #444]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a6e      	ldr	r2, [pc, #440]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	e00b      	b.n	800aa60 <HAL_RCC_OscConfig+0xd4>
 800aa48:	4b6b      	ldr	r3, [pc, #428]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a6a      	ldr	r2, [pc, #424]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	4b68      	ldr	r3, [pc, #416]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a67      	ldr	r2, [pc, #412]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d013      	beq.n	800aa90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa68:	f7fd ff4c 	bl	8008904 <HAL_GetTick>
 800aa6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa6e:	e008      	b.n	800aa82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa70:	f7fd ff48 	bl	8008904 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b64      	cmp	r3, #100	; 0x64
 800aa7c:	d901      	bls.n	800aa82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e200      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa82:	4b5d      	ldr	r3, [pc, #372]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0f0      	beq.n	800aa70 <HAL_RCC_OscConfig+0xe4>
 800aa8e:	e014      	b.n	800aaba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa90:	f7fd ff38 	bl	8008904 <HAL_GetTick>
 800aa94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa96:	e008      	b.n	800aaaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa98:	f7fd ff34 	bl	8008904 <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	2b64      	cmp	r3, #100	; 0x64
 800aaa4:	d901      	bls.n	800aaaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e1ec      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aaaa:	4b53      	ldr	r3, [pc, #332]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1f0      	bne.n	800aa98 <HAL_RCC_OscConfig+0x10c>
 800aab6:	e000      	b.n	800aaba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0302 	and.w	r3, r3, #2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d063      	beq.n	800ab8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aac6:	4b4c      	ldr	r3, [pc, #304]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	f003 030c 	and.w	r3, r3, #12
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00b      	beq.n	800aaea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aad2:	4b49      	ldr	r3, [pc, #292]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f003 030c 	and.w	r3, r3, #12
 800aada:	2b08      	cmp	r3, #8
 800aadc:	d11c      	bne.n	800ab18 <HAL_RCC_OscConfig+0x18c>
 800aade:	4b46      	ldr	r3, [pc, #280]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d116      	bne.n	800ab18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aaea:	4b43      	ldr	r3, [pc, #268]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d005      	beq.n	800ab02 <HAL_RCC_OscConfig+0x176>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d001      	beq.n	800ab02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e1c0      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab02:	4b3d      	ldr	r3, [pc, #244]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	4939      	ldr	r1, [pc, #228]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab16:	e03a      	b.n	800ab8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d020      	beq.n	800ab62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab20:	4b36      	ldr	r3, [pc, #216]	; (800abfc <HAL_RCC_OscConfig+0x270>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab26:	f7fd feed 	bl	8008904 <HAL_GetTick>
 800ab2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab2c:	e008      	b.n	800ab40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab2e:	f7fd fee9 	bl	8008904 <HAL_GetTick>
 800ab32:	4602      	mov	r2, r0
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d901      	bls.n	800ab40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e1a1      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab40:	4b2d      	ldr	r3, [pc, #180]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d0f0      	beq.n	800ab2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab4c:	4b2a      	ldr	r3, [pc, #168]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	00db      	lsls	r3, r3, #3
 800ab5a:	4927      	ldr	r1, [pc, #156]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	600b      	str	r3, [r1, #0]
 800ab60:	e015      	b.n	800ab8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab62:	4b26      	ldr	r3, [pc, #152]	; (800abfc <HAL_RCC_OscConfig+0x270>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab68:	f7fd fecc 	bl	8008904 <HAL_GetTick>
 800ab6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab6e:	e008      	b.n	800ab82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab70:	f7fd fec8 	bl	8008904 <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d901      	bls.n	800ab82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e180      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab82:	4b1d      	ldr	r3, [pc, #116]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1f0      	bne.n	800ab70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 0308 	and.w	r3, r3, #8
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d03a      	beq.n	800ac10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d019      	beq.n	800abd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aba2:	4b17      	ldr	r3, [pc, #92]	; (800ac00 <HAL_RCC_OscConfig+0x274>)
 800aba4:	2201      	movs	r2, #1
 800aba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aba8:	f7fd feac 	bl	8008904 <HAL_GetTick>
 800abac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abae:	e008      	b.n	800abc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abb0:	f7fd fea8 	bl	8008904 <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d901      	bls.n	800abc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e160      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abc2:	4b0d      	ldr	r3, [pc, #52]	; (800abf8 <HAL_RCC_OscConfig+0x26c>)
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d0f0      	beq.n	800abb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800abce:	2001      	movs	r0, #1
 800abd0:	f000 face 	bl	800b170 <RCC_Delay>
 800abd4:	e01c      	b.n	800ac10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800abd6:	4b0a      	ldr	r3, [pc, #40]	; (800ac00 <HAL_RCC_OscConfig+0x274>)
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abdc:	f7fd fe92 	bl	8008904 <HAL_GetTick>
 800abe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800abe2:	e00f      	b.n	800ac04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abe4:	f7fd fe8e 	bl	8008904 <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d908      	bls.n	800ac04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e146      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
 800abf6:	bf00      	nop
 800abf8:	40021000 	.word	0x40021000
 800abfc:	42420000 	.word	0x42420000
 800ac00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac04:	4b92      	ldr	r3, [pc, #584]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1e9      	bne.n	800abe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0304 	and.w	r3, r3, #4
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 80a6 	beq.w	800ad6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac22:	4b8b      	ldr	r3, [pc, #556]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10d      	bne.n	800ac4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac2e:	4b88      	ldr	r3, [pc, #544]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ac30:	69db      	ldr	r3, [r3, #28]
 800ac32:	4a87      	ldr	r2, [pc, #540]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ac34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac38:	61d3      	str	r3, [r2, #28]
 800ac3a:	4b85      	ldr	r3, [pc, #532]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac42:	60bb      	str	r3, [r7, #8]
 800ac44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac46:	2301      	movs	r3, #1
 800ac48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac4a:	4b82      	ldr	r3, [pc, #520]	; (800ae54 <HAL_RCC_OscConfig+0x4c8>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d118      	bne.n	800ac88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ac56:	4b7f      	ldr	r3, [pc, #508]	; (800ae54 <HAL_RCC_OscConfig+0x4c8>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a7e      	ldr	r2, [pc, #504]	; (800ae54 <HAL_RCC_OscConfig+0x4c8>)
 800ac5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac62:	f7fd fe4f 	bl	8008904 <HAL_GetTick>
 800ac66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac68:	e008      	b.n	800ac7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac6a:	f7fd fe4b 	bl	8008904 <HAL_GetTick>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	2b64      	cmp	r3, #100	; 0x64
 800ac76:	d901      	bls.n	800ac7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e103      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac7c:	4b75      	ldr	r3, [pc, #468]	; (800ae54 <HAL_RCC_OscConfig+0x4c8>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d0f0      	beq.n	800ac6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d106      	bne.n	800ac9e <HAL_RCC_OscConfig+0x312>
 800ac90:	4b6f      	ldr	r3, [pc, #444]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	4a6e      	ldr	r2, [pc, #440]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ac96:	f043 0301 	orr.w	r3, r3, #1
 800ac9a:	6213      	str	r3, [r2, #32]
 800ac9c:	e02d      	b.n	800acfa <HAL_RCC_OscConfig+0x36e>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10c      	bne.n	800acc0 <HAL_RCC_OscConfig+0x334>
 800aca6:	4b6a      	ldr	r3, [pc, #424]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	4a69      	ldr	r2, [pc, #420]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800acac:	f023 0301 	bic.w	r3, r3, #1
 800acb0:	6213      	str	r3, [r2, #32]
 800acb2:	4b67      	ldr	r3, [pc, #412]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	4a66      	ldr	r2, [pc, #408]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800acb8:	f023 0304 	bic.w	r3, r3, #4
 800acbc:	6213      	str	r3, [r2, #32]
 800acbe:	e01c      	b.n	800acfa <HAL_RCC_OscConfig+0x36e>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	2b05      	cmp	r3, #5
 800acc6:	d10c      	bne.n	800ace2 <HAL_RCC_OscConfig+0x356>
 800acc8:	4b61      	ldr	r3, [pc, #388]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800acca:	6a1b      	ldr	r3, [r3, #32]
 800accc:	4a60      	ldr	r2, [pc, #384]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800acce:	f043 0304 	orr.w	r3, r3, #4
 800acd2:	6213      	str	r3, [r2, #32]
 800acd4:	4b5e      	ldr	r3, [pc, #376]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	4a5d      	ldr	r2, [pc, #372]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800acda:	f043 0301 	orr.w	r3, r3, #1
 800acde:	6213      	str	r3, [r2, #32]
 800ace0:	e00b      	b.n	800acfa <HAL_RCC_OscConfig+0x36e>
 800ace2:	4b5b      	ldr	r3, [pc, #364]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	4a5a      	ldr	r2, [pc, #360]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ace8:	f023 0301 	bic.w	r3, r3, #1
 800acec:	6213      	str	r3, [r2, #32]
 800acee:	4b58      	ldr	r3, [pc, #352]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	4a57      	ldr	r2, [pc, #348]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800acf4:	f023 0304 	bic.w	r3, r3, #4
 800acf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d015      	beq.n	800ad2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad02:	f7fd fdff 	bl	8008904 <HAL_GetTick>
 800ad06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad08:	e00a      	b.n	800ad20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad0a:	f7fd fdfb 	bl	8008904 <HAL_GetTick>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d901      	bls.n	800ad20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	e0b1      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad20:	4b4b      	ldr	r3, [pc, #300]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	f003 0302 	and.w	r3, r3, #2
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d0ee      	beq.n	800ad0a <HAL_RCC_OscConfig+0x37e>
 800ad2c:	e014      	b.n	800ad58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad2e:	f7fd fde9 	bl	8008904 <HAL_GetTick>
 800ad32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad34:	e00a      	b.n	800ad4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad36:	f7fd fde5 	bl	8008904 <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d901      	bls.n	800ad4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e09b      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad4c:	4b40      	ldr	r3, [pc, #256]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	f003 0302 	and.w	r3, r3, #2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1ee      	bne.n	800ad36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d105      	bne.n	800ad6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad5e:	4b3c      	ldr	r3, [pc, #240]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	4a3b      	ldr	r2, [pc, #236]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ad64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 8087 	beq.w	800ae82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad74:	4b36      	ldr	r3, [pc, #216]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	f003 030c 	and.w	r3, r3, #12
 800ad7c:	2b08      	cmp	r3, #8
 800ad7e:	d061      	beq.n	800ae44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d146      	bne.n	800ae16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad88:	4b33      	ldr	r3, [pc, #204]	; (800ae58 <HAL_RCC_OscConfig+0x4cc>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad8e:	f7fd fdb9 	bl	8008904 <HAL_GetTick>
 800ad92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad94:	e008      	b.n	800ada8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad96:	f7fd fdb5 	bl	8008904 <HAL_GetTick>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d901      	bls.n	800ada8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e06d      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ada8:	4b29      	ldr	r3, [pc, #164]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1f0      	bne.n	800ad96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adbc:	d108      	bne.n	800add0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800adbe:	4b24      	ldr	r3, [pc, #144]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	4921      	ldr	r1, [pc, #132]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800adcc:	4313      	orrs	r3, r2
 800adce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800add0:	4b1f      	ldr	r3, [pc, #124]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a19      	ldr	r1, [r3, #32]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	430b      	orrs	r3, r1
 800ade2:	491b      	ldr	r1, [pc, #108]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ade8:	4b1b      	ldr	r3, [pc, #108]	; (800ae58 <HAL_RCC_OscConfig+0x4cc>)
 800adea:	2201      	movs	r2, #1
 800adec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adee:	f7fd fd89 	bl	8008904 <HAL_GetTick>
 800adf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800adf4:	e008      	b.n	800ae08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adf6:	f7fd fd85 	bl	8008904 <HAL_GetTick>
 800adfa:	4602      	mov	r2, r0
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d901      	bls.n	800ae08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e03d      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ae08:	4b11      	ldr	r3, [pc, #68]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0f0      	beq.n	800adf6 <HAL_RCC_OscConfig+0x46a>
 800ae14:	e035      	b.n	800ae82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae16:	4b10      	ldr	r3, [pc, #64]	; (800ae58 <HAL_RCC_OscConfig+0x4cc>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae1c:	f7fd fd72 	bl	8008904 <HAL_GetTick>
 800ae20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae22:	e008      	b.n	800ae36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae24:	f7fd fd6e 	bl	8008904 <HAL_GetTick>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d901      	bls.n	800ae36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e026      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae36:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <HAL_RCC_OscConfig+0x4c4>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1f0      	bne.n	800ae24 <HAL_RCC_OscConfig+0x498>
 800ae42:	e01e      	b.n	800ae82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	69db      	ldr	r3, [r3, #28]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d107      	bne.n	800ae5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e019      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
 800ae50:	40021000 	.word	0x40021000
 800ae54:	40007000 	.word	0x40007000
 800ae58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ae5c:	4b0b      	ldr	r3, [pc, #44]	; (800ae8c <HAL_RCC_OscConfig+0x500>)
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d106      	bne.n	800ae7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d001      	beq.n	800ae82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e000      	b.n	800ae84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3718      	adds	r7, #24
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	40021000 	.word	0x40021000

0800ae90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e0d0      	b.n	800b046 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aea4:	4b6a      	ldr	r3, [pc, #424]	; (800b050 <HAL_RCC_ClockConfig+0x1c0>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 0307 	and.w	r3, r3, #7
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d910      	bls.n	800aed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeb2:	4b67      	ldr	r3, [pc, #412]	; (800b050 <HAL_RCC_ClockConfig+0x1c0>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f023 0207 	bic.w	r2, r3, #7
 800aeba:	4965      	ldr	r1, [pc, #404]	; (800b050 <HAL_RCC_ClockConfig+0x1c0>)
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aec2:	4b63      	ldr	r3, [pc, #396]	; (800b050 <HAL_RCC_ClockConfig+0x1c0>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 0307 	and.w	r3, r3, #7
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d001      	beq.n	800aed4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e0b8      	b.n	800b046 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0302 	and.w	r3, r3, #2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d020      	beq.n	800af22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aeec:	4b59      	ldr	r3, [pc, #356]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	4a58      	ldr	r2, [pc, #352]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800aef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aef6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0308 	and.w	r3, r3, #8
 800af00:	2b00      	cmp	r3, #0
 800af02:	d005      	beq.n	800af10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af04:	4b53      	ldr	r3, [pc, #332]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	4a52      	ldr	r2, [pc, #328]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800af0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800af0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af10:	4b50      	ldr	r3, [pc, #320]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	494d      	ldr	r1, [pc, #308]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800af1e:	4313      	orrs	r3, r2
 800af20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d040      	beq.n	800afb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d107      	bne.n	800af46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af36:	4b47      	ldr	r3, [pc, #284]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d115      	bne.n	800af6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e07f      	b.n	800b046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d107      	bne.n	800af5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af4e:	4b41      	ldr	r3, [pc, #260]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d109      	bne.n	800af6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	e073      	b.n	800b046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af5e:	4b3d      	ldr	r3, [pc, #244]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	e06b      	b.n	800b046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af6e:	4b39      	ldr	r3, [pc, #228]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f023 0203 	bic.w	r2, r3, #3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	4936      	ldr	r1, [pc, #216]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800af7c:	4313      	orrs	r3, r2
 800af7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800af80:	f7fd fcc0 	bl	8008904 <HAL_GetTick>
 800af84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af86:	e00a      	b.n	800af9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af88:	f7fd fcbc 	bl	8008904 <HAL_GetTick>
 800af8c:	4602      	mov	r2, r0
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	f241 3288 	movw	r2, #5000	; 0x1388
 800af96:	4293      	cmp	r3, r2
 800af98:	d901      	bls.n	800af9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e053      	b.n	800b046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af9e:	4b2d      	ldr	r3, [pc, #180]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f003 020c 	and.w	r2, r3, #12
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	429a      	cmp	r2, r3
 800afae:	d1eb      	bne.n	800af88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800afb0:	4b27      	ldr	r3, [pc, #156]	; (800b050 <HAL_RCC_ClockConfig+0x1c0>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 0307 	and.w	r3, r3, #7
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d210      	bcs.n	800afe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afbe:	4b24      	ldr	r3, [pc, #144]	; (800b050 <HAL_RCC_ClockConfig+0x1c0>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f023 0207 	bic.w	r2, r3, #7
 800afc6:	4922      	ldr	r1, [pc, #136]	; (800b050 <HAL_RCC_ClockConfig+0x1c0>)
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	4313      	orrs	r3, r2
 800afcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afce:	4b20      	ldr	r3, [pc, #128]	; (800b050 <HAL_RCC_ClockConfig+0x1c0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d001      	beq.n	800afe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e032      	b.n	800b046 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d008      	beq.n	800affe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800afec:	4b19      	ldr	r3, [pc, #100]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	4916      	ldr	r1, [pc, #88]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800affa:	4313      	orrs	r3, r2
 800affc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 0308 	and.w	r3, r3, #8
 800b006:	2b00      	cmp	r3, #0
 800b008:	d009      	beq.n	800b01e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b00a:	4b12      	ldr	r3, [pc, #72]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	490e      	ldr	r1, [pc, #56]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b01e:	f000 f821 	bl	800b064 <HAL_RCC_GetSysClockFreq>
 800b022:	4602      	mov	r2, r0
 800b024:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	091b      	lsrs	r3, r3, #4
 800b02a:	f003 030f 	and.w	r3, r3, #15
 800b02e:	490a      	ldr	r1, [pc, #40]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800b030:	5ccb      	ldrb	r3, [r1, r3]
 800b032:	fa22 f303 	lsr.w	r3, r2, r3
 800b036:	4a09      	ldr	r2, [pc, #36]	; (800b05c <HAL_RCC_ClockConfig+0x1cc>)
 800b038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b03a:	4b09      	ldr	r3, [pc, #36]	; (800b060 <HAL_RCC_ClockConfig+0x1d0>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fd fc1e 	bl	8008880 <HAL_InitTick>

  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	40022000 	.word	0x40022000
 800b054:	40021000 	.word	0x40021000
 800b058:	0800df0c 	.word	0x0800df0c
 800b05c:	200000b0 	.word	0x200000b0
 800b060:	200000b4 	.word	0x200000b4

0800b064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b064:	b480      	push	{r7}
 800b066:	b087      	sub	sp, #28
 800b068:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	2300      	movs	r3, #0
 800b070:	60bb      	str	r3, [r7, #8]
 800b072:	2300      	movs	r3, #0
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	2300      	movs	r3, #0
 800b078:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b07a:	2300      	movs	r3, #0
 800b07c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b07e:	4b1e      	ldr	r3, [pc, #120]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f003 030c 	and.w	r3, r3, #12
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	d002      	beq.n	800b094 <HAL_RCC_GetSysClockFreq+0x30>
 800b08e:	2b08      	cmp	r3, #8
 800b090:	d003      	beq.n	800b09a <HAL_RCC_GetSysClockFreq+0x36>
 800b092:	e027      	b.n	800b0e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b094:	4b19      	ldr	r3, [pc, #100]	; (800b0fc <HAL_RCC_GetSysClockFreq+0x98>)
 800b096:	613b      	str	r3, [r7, #16]
      break;
 800b098:	e027      	b.n	800b0ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	0c9b      	lsrs	r3, r3, #18
 800b09e:	f003 030f 	and.w	r3, r3, #15
 800b0a2:	4a17      	ldr	r2, [pc, #92]	; (800b100 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b0a4:	5cd3      	ldrb	r3, [r2, r3]
 800b0a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d010      	beq.n	800b0d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b0b2:	4b11      	ldr	r3, [pc, #68]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	0c5b      	lsrs	r3, r3, #17
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	4a11      	ldr	r2, [pc, #68]	; (800b104 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b0be:	5cd3      	ldrb	r3, [r2, r3]
 800b0c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a0d      	ldr	r2, [pc, #52]	; (800b0fc <HAL_RCC_GetSysClockFreq+0x98>)
 800b0c6:	fb03 f202 	mul.w	r2, r3, r2
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d0:	617b      	str	r3, [r7, #20]
 800b0d2:	e004      	b.n	800b0de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a0c      	ldr	r2, [pc, #48]	; (800b108 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b0d8:	fb02 f303 	mul.w	r3, r2, r3
 800b0dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	613b      	str	r3, [r7, #16]
      break;
 800b0e2:	e002      	b.n	800b0ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b0e4:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <HAL_RCC_GetSysClockFreq+0x98>)
 800b0e6:	613b      	str	r3, [r7, #16]
      break;
 800b0e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b0ea:	693b      	ldr	r3, [r7, #16]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	371c      	adds	r7, #28
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bc80      	pop	{r7}
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	40021000 	.word	0x40021000
 800b0fc:	007a1200 	.word	0x007a1200
 800b100:	0800df24 	.word	0x0800df24
 800b104:	0800df34 	.word	0x0800df34
 800b108:	003d0900 	.word	0x003d0900

0800b10c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b10c:	b480      	push	{r7}
 800b10e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b110:	4b02      	ldr	r3, [pc, #8]	; (800b11c <HAL_RCC_GetHCLKFreq+0x10>)
 800b112:	681b      	ldr	r3, [r3, #0]
}
 800b114:	4618      	mov	r0, r3
 800b116:	46bd      	mov	sp, r7
 800b118:	bc80      	pop	{r7}
 800b11a:	4770      	bx	lr
 800b11c:	200000b0 	.word	0x200000b0

0800b120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b124:	f7ff fff2 	bl	800b10c <HAL_RCC_GetHCLKFreq>
 800b128:	4602      	mov	r2, r0
 800b12a:	4b05      	ldr	r3, [pc, #20]	; (800b140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	0a1b      	lsrs	r3, r3, #8
 800b130:	f003 0307 	and.w	r3, r3, #7
 800b134:	4903      	ldr	r1, [pc, #12]	; (800b144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b136:	5ccb      	ldrb	r3, [r1, r3]
 800b138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	40021000 	.word	0x40021000
 800b144:	0800df1c 	.word	0x0800df1c

0800b148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b14c:	f7ff ffde 	bl	800b10c <HAL_RCC_GetHCLKFreq>
 800b150:	4602      	mov	r2, r0
 800b152:	4b05      	ldr	r3, [pc, #20]	; (800b168 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	0adb      	lsrs	r3, r3, #11
 800b158:	f003 0307 	and.w	r3, r3, #7
 800b15c:	4903      	ldr	r1, [pc, #12]	; (800b16c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b15e:	5ccb      	ldrb	r3, [r1, r3]
 800b160:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b164:	4618      	mov	r0, r3
 800b166:	bd80      	pop	{r7, pc}
 800b168:	40021000 	.word	0x40021000
 800b16c:	0800df1c 	.word	0x0800df1c

0800b170 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b178:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <RCC_Delay+0x34>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a0a      	ldr	r2, [pc, #40]	; (800b1a8 <RCC_Delay+0x38>)
 800b17e:	fba2 2303 	umull	r2, r3, r2, r3
 800b182:	0a5b      	lsrs	r3, r3, #9
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	fb02 f303 	mul.w	r3, r2, r3
 800b18a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b18c:	bf00      	nop
  }
  while (Delay --);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	1e5a      	subs	r2, r3, #1
 800b192:	60fa      	str	r2, [r7, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1f9      	bne.n	800b18c <RCC_Delay+0x1c>
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bc80      	pop	{r7}
 800b1a2:	4770      	bx	lr
 800b1a4:	200000b0 	.word	0x200000b0
 800b1a8:	10624dd3 	.word	0x10624dd3

0800b1ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e041      	b.n	800b242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d106      	bne.n	800b1d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7fd fa26 	bl	8008624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2202      	movs	r2, #2
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	f000 fa82 	bl	800b6f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
	...

0800b24c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d001      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e044      	b.n	800b2ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2202      	movs	r2, #2
 800b268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68da      	ldr	r2, [r3, #12]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f042 0201 	orr.w	r2, r2, #1
 800b27a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a1d      	ldr	r2, [pc, #116]	; (800b2f8 <HAL_TIM_Base_Start_IT+0xac>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d018      	beq.n	800b2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a1c      	ldr	r2, [pc, #112]	; (800b2fc <HAL_TIM_Base_Start_IT+0xb0>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d013      	beq.n	800b2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b298:	d00e      	beq.n	800b2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a18      	ldr	r2, [pc, #96]	; (800b300 <HAL_TIM_Base_Start_IT+0xb4>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d009      	beq.n	800b2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a16      	ldr	r2, [pc, #88]	; (800b304 <HAL_TIM_Base_Start_IT+0xb8>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d004      	beq.n	800b2b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a15      	ldr	r2, [pc, #84]	; (800b308 <HAL_TIM_Base_Start_IT+0xbc>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d111      	bne.n	800b2dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b06      	cmp	r3, #6
 800b2c8:	d010      	beq.n	800b2ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f042 0201 	orr.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2da:	e007      	b.n	800b2ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f042 0201 	orr.w	r2, r2, #1
 800b2ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bc80      	pop	{r7}
 800b2f6:	4770      	bx	lr
 800b2f8:	40012c00 	.word	0x40012c00
 800b2fc:	40013400 	.word	0x40013400
 800b300:	40000400 	.word	0x40000400
 800b304:	40000800 	.word	0x40000800
 800b308:	40000c00 	.word	0x40000c00

0800b30c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	f003 0302 	and.w	r3, r3, #2
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d122      	bne.n	800b368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f003 0302 	and.w	r3, r3, #2
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d11b      	bne.n	800b368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f06f 0202 	mvn.w	r2, #2
 800b338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	f003 0303 	and.w	r3, r3, #3
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d003      	beq.n	800b356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f9b4 	bl	800b6bc <HAL_TIM_IC_CaptureCallback>
 800b354:	e005      	b.n	800b362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f9a7 	bl	800b6aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f9b6 	bl	800b6ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	f003 0304 	and.w	r3, r3, #4
 800b372:	2b04      	cmp	r3, #4
 800b374:	d122      	bne.n	800b3bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b04      	cmp	r3, #4
 800b382:	d11b      	bne.n	800b3bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f06f 0204 	mvn.w	r2, #4
 800b38c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2202      	movs	r2, #2
 800b392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f98a 	bl	800b6bc <HAL_TIM_IC_CaptureCallback>
 800b3a8:	e005      	b.n	800b3b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f97d 	bl	800b6aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f98c 	bl	800b6ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	f003 0308 	and.w	r3, r3, #8
 800b3c6:	2b08      	cmp	r3, #8
 800b3c8:	d122      	bne.n	800b410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	f003 0308 	and.w	r3, r3, #8
 800b3d4:	2b08      	cmp	r3, #8
 800b3d6:	d11b      	bne.n	800b410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f06f 0208 	mvn.w	r2, #8
 800b3e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2204      	movs	r2, #4
 800b3e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	f003 0303 	and.w	r3, r3, #3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d003      	beq.n	800b3fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f960 	bl	800b6bc <HAL_TIM_IC_CaptureCallback>
 800b3fc:	e005      	b.n	800b40a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f953 	bl	800b6aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f962 	bl	800b6ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	f003 0310 	and.w	r3, r3, #16
 800b41a:	2b10      	cmp	r3, #16
 800b41c:	d122      	bne.n	800b464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	f003 0310 	and.w	r3, r3, #16
 800b428:	2b10      	cmp	r3, #16
 800b42a:	d11b      	bne.n	800b464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f06f 0210 	mvn.w	r2, #16
 800b434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2208      	movs	r2, #8
 800b43a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b446:	2b00      	cmp	r3, #0
 800b448:	d003      	beq.n	800b452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f936 	bl	800b6bc <HAL_TIM_IC_CaptureCallback>
 800b450:	e005      	b.n	800b45e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f929 	bl	800b6aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f938 	bl	800b6ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	f003 0301 	and.w	r3, r3, #1
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d10e      	bne.n	800b490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d107      	bne.n	800b490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f06f 0201 	mvn.w	r2, #1
 800b488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7fc fd62 	bl	8007f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b49a:	2b80      	cmp	r3, #128	; 0x80
 800b49c:	d10e      	bne.n	800b4bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4a8:	2b80      	cmp	r3, #128	; 0x80
 800b4aa:	d107      	bne.n	800b4bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 faa1 	bl	800b9fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c6:	2b40      	cmp	r3, #64	; 0x40
 800b4c8:	d10e      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d4:	2b40      	cmp	r3, #64	; 0x40
 800b4d6:	d107      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f8fc 	bl	800b6e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	f003 0320 	and.w	r3, r3, #32
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	d10e      	bne.n	800b514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	f003 0320 	and.w	r3, r3, #32
 800b500:	2b20      	cmp	r3, #32
 800b502:	d107      	bne.n	800b514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f06f 0220 	mvn.w	r2, #32
 800b50c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fa6c 	bl	800b9ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b530:	2b01      	cmp	r3, #1
 800b532:	d101      	bne.n	800b538 <HAL_TIM_ConfigClockSource+0x1c>
 800b534:	2302      	movs	r3, #2
 800b536:	e0b4      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x186>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2202      	movs	r2, #2
 800b544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b55e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b570:	d03e      	beq.n	800b5f0 <HAL_TIM_ConfigClockSource+0xd4>
 800b572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b576:	f200 8087 	bhi.w	800b688 <HAL_TIM_ConfigClockSource+0x16c>
 800b57a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b57e:	f000 8086 	beq.w	800b68e <HAL_TIM_ConfigClockSource+0x172>
 800b582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b586:	d87f      	bhi.n	800b688 <HAL_TIM_ConfigClockSource+0x16c>
 800b588:	2b70      	cmp	r3, #112	; 0x70
 800b58a:	d01a      	beq.n	800b5c2 <HAL_TIM_ConfigClockSource+0xa6>
 800b58c:	2b70      	cmp	r3, #112	; 0x70
 800b58e:	d87b      	bhi.n	800b688 <HAL_TIM_ConfigClockSource+0x16c>
 800b590:	2b60      	cmp	r3, #96	; 0x60
 800b592:	d050      	beq.n	800b636 <HAL_TIM_ConfigClockSource+0x11a>
 800b594:	2b60      	cmp	r3, #96	; 0x60
 800b596:	d877      	bhi.n	800b688 <HAL_TIM_ConfigClockSource+0x16c>
 800b598:	2b50      	cmp	r3, #80	; 0x50
 800b59a:	d03c      	beq.n	800b616 <HAL_TIM_ConfigClockSource+0xfa>
 800b59c:	2b50      	cmp	r3, #80	; 0x50
 800b59e:	d873      	bhi.n	800b688 <HAL_TIM_ConfigClockSource+0x16c>
 800b5a0:	2b40      	cmp	r3, #64	; 0x40
 800b5a2:	d058      	beq.n	800b656 <HAL_TIM_ConfigClockSource+0x13a>
 800b5a4:	2b40      	cmp	r3, #64	; 0x40
 800b5a6:	d86f      	bhi.n	800b688 <HAL_TIM_ConfigClockSource+0x16c>
 800b5a8:	2b30      	cmp	r3, #48	; 0x30
 800b5aa:	d064      	beq.n	800b676 <HAL_TIM_ConfigClockSource+0x15a>
 800b5ac:	2b30      	cmp	r3, #48	; 0x30
 800b5ae:	d86b      	bhi.n	800b688 <HAL_TIM_ConfigClockSource+0x16c>
 800b5b0:	2b20      	cmp	r3, #32
 800b5b2:	d060      	beq.n	800b676 <HAL_TIM_ConfigClockSource+0x15a>
 800b5b4:	2b20      	cmp	r3, #32
 800b5b6:	d867      	bhi.n	800b688 <HAL_TIM_ConfigClockSource+0x16c>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d05c      	beq.n	800b676 <HAL_TIM_ConfigClockSource+0x15a>
 800b5bc:	2b10      	cmp	r3, #16
 800b5be:	d05a      	beq.n	800b676 <HAL_TIM_ConfigClockSource+0x15a>
 800b5c0:	e062      	b.n	800b688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b5d2:	f000 f980 	bl	800b8d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	609a      	str	r2, [r3, #8]
      break;
 800b5ee:	e04f      	b.n	800b690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b600:	f000 f969 	bl	800b8d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	689a      	ldr	r2, [r3, #8]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b612:	609a      	str	r2, [r3, #8]
      break;
 800b614:	e03c      	b.n	800b690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b622:	461a      	mov	r2, r3
 800b624:	f000 f8e0 	bl	800b7e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2150      	movs	r1, #80	; 0x50
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 f937 	bl	800b8a2 <TIM_ITRx_SetConfig>
      break;
 800b634:	e02c      	b.n	800b690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b642:	461a      	mov	r2, r3
 800b644:	f000 f8fe 	bl	800b844 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2160      	movs	r1, #96	; 0x60
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 f927 	bl	800b8a2 <TIM_ITRx_SetConfig>
      break;
 800b654:	e01c      	b.n	800b690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b662:	461a      	mov	r2, r3
 800b664:	f000 f8c0 	bl	800b7e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2140      	movs	r1, #64	; 0x40
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 f917 	bl	800b8a2 <TIM_ITRx_SetConfig>
      break;
 800b674:	e00c      	b.n	800b690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4619      	mov	r1, r3
 800b680:	4610      	mov	r0, r2
 800b682:	f000 f90e 	bl	800b8a2 <TIM_ITRx_SetConfig>
      break;
 800b686:	e003      	b.n	800b690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	73fb      	strb	r3, [r7, #15]
      break;
 800b68c:	e000      	b.n	800b690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b68e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6b2:	bf00      	nop
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bc80      	pop	{r7}
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bc80      	pop	{r7}
 800b6cc:	4770      	bx	lr

0800b6ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b083      	sub	sp, #12
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bc80      	pop	{r7}
 800b6de:	4770      	bx	lr

0800b6e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bc80      	pop	{r7}
 800b6f0:	4770      	bx	lr
	...

0800b6f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a33      	ldr	r2, [pc, #204]	; (800b7d4 <TIM_Base_SetConfig+0xe0>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d013      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a32      	ldr	r2, [pc, #200]	; (800b7d8 <TIM_Base_SetConfig+0xe4>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d00f      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b71a:	d00b      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a2f      	ldr	r2, [pc, #188]	; (800b7dc <TIM_Base_SetConfig+0xe8>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d007      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a2e      	ldr	r2, [pc, #184]	; (800b7e0 <TIM_Base_SetConfig+0xec>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d003      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a2d      	ldr	r2, [pc, #180]	; (800b7e4 <TIM_Base_SetConfig+0xf0>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d108      	bne.n	800b746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b73a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	4313      	orrs	r3, r2
 800b744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a22      	ldr	r2, [pc, #136]	; (800b7d4 <TIM_Base_SetConfig+0xe0>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d013      	beq.n	800b776 <TIM_Base_SetConfig+0x82>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a21      	ldr	r2, [pc, #132]	; (800b7d8 <TIM_Base_SetConfig+0xe4>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d00f      	beq.n	800b776 <TIM_Base_SetConfig+0x82>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b75c:	d00b      	beq.n	800b776 <TIM_Base_SetConfig+0x82>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a1e      	ldr	r2, [pc, #120]	; (800b7dc <TIM_Base_SetConfig+0xe8>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d007      	beq.n	800b776 <TIM_Base_SetConfig+0x82>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a1d      	ldr	r2, [pc, #116]	; (800b7e0 <TIM_Base_SetConfig+0xec>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d003      	beq.n	800b776 <TIM_Base_SetConfig+0x82>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a1c      	ldr	r2, [pc, #112]	; (800b7e4 <TIM_Base_SetConfig+0xf0>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d108      	bne.n	800b788 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b77c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	4313      	orrs	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	4313      	orrs	r3, r2
 800b794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	689a      	ldr	r2, [r3, #8]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a09      	ldr	r2, [pc, #36]	; (800b7d4 <TIM_Base_SetConfig+0xe0>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d003      	beq.n	800b7bc <TIM_Base_SetConfig+0xc8>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a08      	ldr	r2, [pc, #32]	; (800b7d8 <TIM_Base_SetConfig+0xe4>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d103      	bne.n	800b7c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	691a      	ldr	r2, [r3, #16]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	615a      	str	r2, [r3, #20]
}
 800b7ca:	bf00      	nop
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bc80      	pop	{r7}
 800b7d2:	4770      	bx	lr
 800b7d4:	40012c00 	.word	0x40012c00
 800b7d8:	40013400 	.word	0x40013400
 800b7dc:	40000400 	.word	0x40000400
 800b7e0:	40000800 	.word	0x40000800
 800b7e4:	40000c00 	.word	0x40000c00

0800b7e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	f023 0201 	bic.w	r2, r3, #1
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	011b      	lsls	r3, r3, #4
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f023 030a 	bic.w	r3, r3, #10
 800b824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	621a      	str	r2, [r3, #32]
}
 800b83a:	bf00      	nop
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	bc80      	pop	{r7}
 800b842:	4770      	bx	lr

0800b844 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b844:	b480      	push	{r7}
 800b846:	b087      	sub	sp, #28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	f023 0210 	bic.w	r2, r3, #16
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b86e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	031b      	lsls	r3, r3, #12
 800b874:	693a      	ldr	r2, [r7, #16]
 800b876:	4313      	orrs	r3, r2
 800b878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b880:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	011b      	lsls	r3, r3, #4
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	4313      	orrs	r3, r2
 800b88a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	621a      	str	r2, [r3, #32]
}
 800b898:	bf00      	nop
 800b89a:	371c      	adds	r7, #28
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bc80      	pop	{r7}
 800b8a0:	4770      	bx	lr

0800b8a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	f043 0307 	orr.w	r3, r3, #7
 800b8c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	609a      	str	r2, [r3, #8]
}
 800b8cc:	bf00      	nop
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bc80      	pop	{r7}
 800b8d4:	4770      	bx	lr

0800b8d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b087      	sub	sp, #28
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	60b9      	str	r1, [r7, #8]
 800b8e0:	607a      	str	r2, [r7, #4]
 800b8e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	021a      	lsls	r2, r3, #8
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	431a      	orrs	r2, r3
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	4313      	orrs	r3, r2
 800b902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	609a      	str	r2, [r3, #8]
}
 800b90a:	bf00      	nop
 800b90c:	371c      	adds	r7, #28
 800b90e:	46bd      	mov	sp, r7
 800b910:	bc80      	pop	{r7}
 800b912:	4770      	bx	lr

0800b914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b924:	2b01      	cmp	r3, #1
 800b926:	d101      	bne.n	800b92c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b928:	2302      	movs	r3, #2
 800b92a:	e050      	b.n	800b9ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a1b      	ldr	r2, [pc, #108]	; (800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d018      	beq.n	800b9a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a19      	ldr	r2, [pc, #100]	; (800b9dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d013      	beq.n	800b9a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b982:	d00e      	beq.n	800b9a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a15      	ldr	r2, [pc, #84]	; (800b9e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d009      	beq.n	800b9a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a14      	ldr	r2, [pc, #80]	; (800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d004      	beq.n	800b9a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a12      	ldr	r2, [pc, #72]	; (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d10c      	bne.n	800b9bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bc80      	pop	{r7}
 800b9d6:	4770      	bx	lr
 800b9d8:	40012c00 	.word	0x40012c00
 800b9dc:	40013400 	.word	0x40013400
 800b9e0:	40000400 	.word	0x40000400
 800b9e4:	40000800 	.word	0x40000800
 800b9e8:	40000c00 	.word	0x40000c00

0800b9ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bc80      	pop	{r7}
 800b9fc:	4770      	bx	lr

0800b9fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b083      	sub	sp, #12
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba06:	bf00      	nop
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bc80      	pop	{r7}
 800ba0e:	4770      	bx	lr

0800ba10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e042      	b.n	800baa8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d106      	bne.n	800ba3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7fc fe1a 	bl	8008670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2224      	movs	r2, #36	; 0x24
 800ba40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fcb5 	bl	800c3c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	691a      	ldr	r2, [r3, #16]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	695a      	ldr	r2, [r3, #20]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2220      	movs	r2, #32
 800ba94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	4613      	mov	r3, r2
 800babc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b20      	cmp	r3, #32
 800bac8:	d121      	bne.n	800bb0e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <HAL_UART_Transmit_IT+0x26>
 800bad0:	88fb      	ldrh	r3, [r7, #6]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e01a      	b.n	800bb10 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	88fa      	ldrh	r2, [r7, #6]
 800bae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	88fa      	ldrh	r2, [r7, #6]
 800baea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2221      	movs	r2, #33	; 0x21
 800baf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68da      	ldr	r2, [r3, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	e000      	b.n	800bb10 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800bb0e:	2302      	movs	r3, #2
  }
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bc80      	pop	{r7}
 800bb18:	4770      	bx	lr
	...

0800bb1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b0ba      	sub	sp, #232	; 0xe8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bb42:	2300      	movs	r3, #0
 800bb44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bb4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb52:	f003 030f 	and.w	r3, r3, #15
 800bb56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bb5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10f      	bne.n	800bb82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb66:	f003 0320 	and.w	r3, r3, #32
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d009      	beq.n	800bb82 <HAL_UART_IRQHandler+0x66>
 800bb6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb72:	f003 0320 	and.w	r3, r3, #32
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d003      	beq.n	800bb82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fb63 	bl	800c246 <UART_Receive_IT>
      return;
 800bb80:	e25b      	b.n	800c03a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bb82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 80de 	beq.w	800bd48 <HAL_UART_IRQHandler+0x22c>
 800bb8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d106      	bne.n	800bba6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 80d1 	beq.w	800bd48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbaa:	f003 0301 	and.w	r3, r3, #1
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00b      	beq.n	800bbca <HAL_UART_IRQHandler+0xae>
 800bbb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d005      	beq.n	800bbca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc2:	f043 0201 	orr.w	r2, r3, #1
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00b      	beq.n	800bbee <HAL_UART_IRQHandler+0xd2>
 800bbd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d005      	beq.n	800bbee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbe6:	f043 0202 	orr.w	r2, r3, #2
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf2:	f003 0302 	and.w	r3, r3, #2
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00b      	beq.n	800bc12 <HAL_UART_IRQHandler+0xf6>
 800bbfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d005      	beq.n	800bc12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc0a:	f043 0204 	orr.w	r2, r3, #4
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bc12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc16:	f003 0308 	and.w	r3, r3, #8
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d011      	beq.n	800bc42 <HAL_UART_IRQHandler+0x126>
 800bc1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc22:	f003 0320 	and.w	r3, r3, #32
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d105      	bne.n	800bc36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bc2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d005      	beq.n	800bc42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3a:	f043 0208 	orr.w	r2, r3, #8
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 81f2 	beq.w	800c030 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc50:	f003 0320 	and.w	r3, r3, #32
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d008      	beq.n	800bc6a <HAL_UART_IRQHandler+0x14e>
 800bc58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc5c:	f003 0320 	and.w	r3, r3, #32
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 faee 	bl	800c246 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	bf14      	ite	ne
 800bc78:	2301      	movne	r3, #1
 800bc7a:	2300      	moveq	r3, #0
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d103      	bne.n	800bc96 <HAL_UART_IRQHandler+0x17a>
 800bc8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d04f      	beq.n	800bd36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f9f8 	bl	800c08c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d041      	beq.n	800bd2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3314      	adds	r3, #20
 800bcb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bcc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bcc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3314      	adds	r3, #20
 800bcd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bcd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bcda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bce6:	e841 2300 	strex	r3, r2, [r1]
 800bcea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bcee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1d9      	bne.n	800bcaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d013      	beq.n	800bd26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd02:	4a7e      	ldr	r2, [pc, #504]	; (800befc <HAL_UART_IRQHandler+0x3e0>)
 800bd04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fd f86c 	bl	8008de8 <HAL_DMA_Abort_IT>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d016      	beq.n	800bd44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bd20:	4610      	mov	r0, r2
 800bd22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd24:	e00e      	b.n	800bd44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f99c 	bl	800c064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd2c:	e00a      	b.n	800bd44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f998 	bl	800c064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd34:	e006      	b.n	800bd44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f994 	bl	800c064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bd42:	e175      	b.n	800c030 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd44:	bf00      	nop
    return;
 800bd46:	e173      	b.n	800c030 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	f040 814f 	bne.w	800bff0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd56:	f003 0310 	and.w	r3, r3, #16
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f000 8148 	beq.w	800bff0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bd60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd64:	f003 0310 	and.w	r3, r3, #16
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f000 8141 	beq.w	800bff0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	60bb      	str	r3, [r7, #8]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	60bb      	str	r3, [r7, #8]
 800bd82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 80b6 	beq.w	800bf00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bda0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 8145 	beq.w	800c034 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bdae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	f080 813e 	bcs.w	800c034 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc4:	699b      	ldr	r3, [r3, #24]
 800bdc6:	2b20      	cmp	r3, #32
 800bdc8:	f000 8088 	beq.w	800bedc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	330c      	adds	r3, #12
 800bdd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdda:	e853 3f00 	ldrex	r3, [r3]
 800bdde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bde2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bde6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	330c      	adds	r3, #12
 800bdf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bdf8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bdfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800be04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800be08:	e841 2300 	strex	r3, r2, [r1]
 800be0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1d9      	bne.n	800bdcc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3314      	adds	r3, #20
 800be1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be22:	e853 3f00 	ldrex	r3, [r3]
 800be26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be2a:	f023 0301 	bic.w	r3, r3, #1
 800be2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	3314      	adds	r3, #20
 800be38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be48:	e841 2300 	strex	r3, r2, [r1]
 800be4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1e1      	bne.n	800be18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3314      	adds	r3, #20
 800be5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be5e:	e853 3f00 	ldrex	r3, [r3]
 800be62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	3314      	adds	r3, #20
 800be74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be78:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be80:	e841 2300 	strex	r3, r2, [r1]
 800be84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1e3      	bne.n	800be54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2220      	movs	r2, #32
 800be90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	330c      	adds	r3, #12
 800bea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea4:	e853 3f00 	ldrex	r3, [r3]
 800bea8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800beaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beac:	f023 0310 	bic.w	r3, r3, #16
 800beb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	330c      	adds	r3, #12
 800beba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bebe:	65ba      	str	r2, [r7, #88]	; 0x58
 800bec0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bec6:	e841 2300 	strex	r3, r2, [r1]
 800beca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800becc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e3      	bne.n	800be9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fc ff4b 	bl	8008d72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2202      	movs	r2, #2
 800bee0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800beea:	b29b      	uxth	r3, r3
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	b29b      	uxth	r3, r3
 800bef0:	4619      	mov	r1, r3
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f8bf 	bl	800c076 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bef8:	e09c      	b.n	800c034 <HAL_UART_IRQHandler+0x518>
 800befa:	bf00      	nop
 800befc:	0800c151 	.word	0x0800c151
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 808e 	beq.w	800c038 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bf1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 8089 	beq.w	800c038 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	330c      	adds	r3, #12
 800bf2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	e853 3f00 	ldrex	r3, [r3]
 800bf34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	330c      	adds	r3, #12
 800bf46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bf4a:	647a      	str	r2, [r7, #68]	; 0x44
 800bf4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf52:	e841 2300 	strex	r3, r2, [r1]
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e3      	bne.n	800bf26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3314      	adds	r3, #20
 800bf64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	623b      	str	r3, [r7, #32]
   return(result);
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	f023 0301 	bic.w	r3, r3, #1
 800bf74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3314      	adds	r3, #20
 800bf7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf82:	633a      	str	r2, [r7, #48]	; 0x30
 800bf84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8a:	e841 2300 	strex	r3, r2, [r1]
 800bf8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1e3      	bne.n	800bf5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	330c      	adds	r3, #12
 800bfaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f023 0310 	bic.w	r3, r3, #16
 800bfba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	330c      	adds	r3, #12
 800bfc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bfc8:	61fa      	str	r2, [r7, #28]
 800bfca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfcc:	69b9      	ldr	r1, [r7, #24]
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	e841 2300 	strex	r3, r2, [r1]
 800bfd4:	617b      	str	r3, [r7, #20]
   return(result);
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e3      	bne.n	800bfa4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2202      	movs	r2, #2
 800bfe0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfe2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f844 	bl	800c076 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfee:	e023      	b.n	800c038 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d009      	beq.n	800c010 <HAL_UART_IRQHandler+0x4f4>
 800bffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c004:	2b00      	cmp	r3, #0
 800c006:	d003      	beq.n	800c010 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f8b5 	bl	800c178 <UART_Transmit_IT>
    return;
 800c00e:	e014      	b.n	800c03a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00e      	beq.n	800c03a <HAL_UART_IRQHandler+0x51e>
 800c01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c024:	2b00      	cmp	r3, #0
 800c026:	d008      	beq.n	800c03a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f8f4 	bl	800c216 <UART_EndTransmit_IT>
    return;
 800c02e:	e004      	b.n	800c03a <HAL_UART_IRQHandler+0x51e>
    return;
 800c030:	bf00      	nop
 800c032:	e002      	b.n	800c03a <HAL_UART_IRQHandler+0x51e>
      return;
 800c034:	bf00      	nop
 800c036:	e000      	b.n	800c03a <HAL_UART_IRQHandler+0x51e>
      return;
 800c038:	bf00      	nop
  }
}
 800c03a:	37e8      	adds	r7, #232	; 0xe8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bc80      	pop	{r7}
 800c050:	4770      	bx	lr

0800c052 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c05a:	bf00      	nop
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	bc80      	pop	{r7}
 800c062:	4770      	bx	lr

0800c064 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	bc80      	pop	{r7}
 800c074:	4770      	bx	lr

0800c076 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c076:	b480      	push	{r7}
 800c078:	b083      	sub	sp, #12
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	460b      	mov	r3, r1
 800c080:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c082:	bf00      	nop
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	bc80      	pop	{r7}
 800c08a:	4770      	bx	lr

0800c08c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b095      	sub	sp, #84	; 0x54
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	330c      	adds	r3, #12
 800c09a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09e:	e853 3f00 	ldrex	r3, [r3]
 800c0a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	330c      	adds	r3, #12
 800c0b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0b4:	643a      	str	r2, [r7, #64]	; 0x40
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0bc:	e841 2300 	strex	r3, r2, [r1]
 800c0c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1e5      	bne.n	800c094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3314      	adds	r3, #20
 800c0ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	e853 3f00 	ldrex	r3, [r3]
 800c0d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	f023 0301 	bic.w	r3, r3, #1
 800c0de:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	3314      	adds	r3, #20
 800c0e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0f0:	e841 2300 	strex	r3, r2, [r1]
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1e5      	bne.n	800c0c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c100:	2b01      	cmp	r3, #1
 800c102:	d119      	bne.n	800c138 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	330c      	adds	r3, #12
 800c10a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	e853 3f00 	ldrex	r3, [r3]
 800c112:	60bb      	str	r3, [r7, #8]
   return(result);
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f023 0310 	bic.w	r3, r3, #16
 800c11a:	647b      	str	r3, [r7, #68]	; 0x44
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	330c      	adds	r3, #12
 800c122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c124:	61ba      	str	r2, [r7, #24]
 800c126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c128:	6979      	ldr	r1, [r7, #20]
 800c12a:	69ba      	ldr	r2, [r7, #24]
 800c12c:	e841 2300 	strex	r3, r2, [r1]
 800c130:	613b      	str	r3, [r7, #16]
   return(result);
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e5      	bne.n	800c104 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2220      	movs	r2, #32
 800c13c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c146:	bf00      	nop
 800c148:	3754      	adds	r7, #84	; 0x54
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bc80      	pop	{r7}
 800c14e:	4770      	bx	lr

0800c150 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c16a:	68f8      	ldr	r0, [r7, #12]
 800c16c:	f7ff ff7a 	bl	800c064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c170:	bf00      	nop
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b21      	cmp	r3, #33	; 0x21
 800c18a:	d13e      	bne.n	800c20a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c194:	d114      	bne.n	800c1c0 <UART_Transmit_IT+0x48>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d110      	bne.n	800c1c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	881b      	ldrh	r3, [r3, #0]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	1c9a      	adds	r2, r3, #2
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	621a      	str	r2, [r3, #32]
 800c1be:	e008      	b.n	800c1d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a1b      	ldr	r3, [r3, #32]
 800c1c4:	1c59      	adds	r1, r3, #1
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	6211      	str	r1, [r2, #32]
 800c1ca:	781a      	ldrb	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10f      	bne.n	800c206 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68da      	ldr	r2, [r3, #12]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68da      	ldr	r2, [r3, #12]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c204:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	e000      	b.n	800c20c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c20a:	2302      	movs	r3, #2
  }
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3714      	adds	r7, #20
 800c210:	46bd      	mov	sp, r7
 800c212:	bc80      	pop	{r7}
 800c214:	4770      	bx	lr

0800c216 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68da      	ldr	r2, [r3, #12]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c22c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2220      	movs	r2, #32
 800c232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7ff ff02 	bl	800c040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b08c      	sub	sp, #48	; 0x30
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b22      	cmp	r3, #34	; 0x22
 800c258:	f040 80ae 	bne.w	800c3b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c264:	d117      	bne.n	800c296 <UART_Receive_IT+0x50>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d113      	bne.n	800c296 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c26e:	2300      	movs	r3, #0
 800c270:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c276:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	b29b      	uxth	r3, r3
 800c280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c284:	b29a      	uxth	r2, r3
 800c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c288:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28e:	1c9a      	adds	r2, r3, #2
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	629a      	str	r2, [r3, #40]	; 0x28
 800c294:	e026      	b.n	800c2e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c29a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c29c:	2300      	movs	r3, #0
 800c29e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2a8:	d007      	beq.n	800c2ba <UART_Receive_IT+0x74>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10a      	bne.n	800c2c8 <UART_Receive_IT+0x82>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d106      	bne.n	800c2c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	e008      	b.n	800c2da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2de:	1c5a      	adds	r2, r3, #1
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d15d      	bne.n	800c3b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68da      	ldr	r2, [r3, #12]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f022 0220 	bic.w	r2, r2, #32
 800c306:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68da      	ldr	r2, [r3, #12]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	695a      	ldr	r2, [r3, #20]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f022 0201 	bic.w	r2, r2, #1
 800c326:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2220      	movs	r2, #32
 800c32c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d135      	bne.n	800c3aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	330c      	adds	r3, #12
 800c34a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	e853 3f00 	ldrex	r3, [r3]
 800c352:	613b      	str	r3, [r7, #16]
   return(result);
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	f023 0310 	bic.w	r3, r3, #16
 800c35a:	627b      	str	r3, [r7, #36]	; 0x24
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	330c      	adds	r3, #12
 800c362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c364:	623a      	str	r2, [r7, #32]
 800c366:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c368:	69f9      	ldr	r1, [r7, #28]
 800c36a:	6a3a      	ldr	r2, [r7, #32]
 800c36c:	e841 2300 	strex	r3, r2, [r1]
 800c370:	61bb      	str	r3, [r7, #24]
   return(result);
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1e5      	bne.n	800c344 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f003 0310 	and.w	r3, r3, #16
 800c382:	2b10      	cmp	r3, #16
 800c384:	d10a      	bne.n	800c39c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	60fb      	str	r3, [r7, #12]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7ff fe67 	bl	800c076 <HAL_UARTEx_RxEventCallback>
 800c3a8:	e002      	b.n	800c3b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7ff fe51 	bl	800c052 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e002      	b.n	800c3ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e000      	b.n	800c3ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c3b8:	2302      	movs	r3, #2
  }
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3730      	adds	r7, #48	; 0x30
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68da      	ldr	r2, [r3, #12]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	430a      	orrs	r2, r1
 800c3e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	689a      	ldr	r2, [r3, #8]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	431a      	orrs	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c3fe:	f023 030c 	bic.w	r3, r3, #12
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	6812      	ldr	r2, [r2, #0]
 800c406:	68b9      	ldr	r1, [r7, #8]
 800c408:	430b      	orrs	r3, r1
 800c40a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	699a      	ldr	r2, [r3, #24]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	430a      	orrs	r2, r1
 800c420:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a2c      	ldr	r2, [pc, #176]	; (800c4d8 <UART_SetConfig+0x114>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d103      	bne.n	800c434 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c42c:	f7fe fe8c 	bl	800b148 <HAL_RCC_GetPCLK2Freq>
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	e002      	b.n	800c43a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c434:	f7fe fe74 	bl	800b120 <HAL_RCC_GetPCLK1Freq>
 800c438:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	4613      	mov	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4413      	add	r3, r2
 800c442:	009a      	lsls	r2, r3, #2
 800c444:	441a      	add	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c450:	4a22      	ldr	r2, [pc, #136]	; (800c4dc <UART_SetConfig+0x118>)
 800c452:	fba2 2303 	umull	r2, r3, r2, r3
 800c456:	095b      	lsrs	r3, r3, #5
 800c458:	0119      	lsls	r1, r3, #4
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	4613      	mov	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	009a      	lsls	r2, r3, #2
 800c464:	441a      	add	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c470:	4b1a      	ldr	r3, [pc, #104]	; (800c4dc <UART_SetConfig+0x118>)
 800c472:	fba3 0302 	umull	r0, r3, r3, r2
 800c476:	095b      	lsrs	r3, r3, #5
 800c478:	2064      	movs	r0, #100	; 0x64
 800c47a:	fb00 f303 	mul.w	r3, r0, r3
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	011b      	lsls	r3, r3, #4
 800c482:	3332      	adds	r3, #50	; 0x32
 800c484:	4a15      	ldr	r2, [pc, #84]	; (800c4dc <UART_SetConfig+0x118>)
 800c486:	fba2 2303 	umull	r2, r3, r2, r3
 800c48a:	095b      	lsrs	r3, r3, #5
 800c48c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c490:	4419      	add	r1, r3
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	4613      	mov	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	009a      	lsls	r2, r3, #2
 800c49c:	441a      	add	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c4a8:	4b0c      	ldr	r3, [pc, #48]	; (800c4dc <UART_SetConfig+0x118>)
 800c4aa:	fba3 0302 	umull	r0, r3, r3, r2
 800c4ae:	095b      	lsrs	r3, r3, #5
 800c4b0:	2064      	movs	r0, #100	; 0x64
 800c4b2:	fb00 f303 	mul.w	r3, r0, r3
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	011b      	lsls	r3, r3, #4
 800c4ba:	3332      	adds	r3, #50	; 0x32
 800c4bc:	4a07      	ldr	r2, [pc, #28]	; (800c4dc <UART_SetConfig+0x118>)
 800c4be:	fba2 2303 	umull	r2, r3, r2, r3
 800c4c2:	095b      	lsrs	r3, r3, #5
 800c4c4:	f003 020f 	and.w	r2, r3, #15
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	440a      	add	r2, r1
 800c4ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	40013800 	.word	0x40013800
 800c4dc:	51eb851f 	.word	0x51eb851f

0800c4e0 <__itoa>:
 800c4e0:	1e93      	subs	r3, r2, #2
 800c4e2:	2b22      	cmp	r3, #34	; 0x22
 800c4e4:	b510      	push	{r4, lr}
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	d904      	bls.n	800c4f4 <__itoa+0x14>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	461c      	mov	r4, r3
 800c4ee:	700b      	strb	r3, [r1, #0]
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	bd10      	pop	{r4, pc}
 800c4f4:	2a0a      	cmp	r2, #10
 800c4f6:	d109      	bne.n	800c50c <__itoa+0x2c>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	da07      	bge.n	800c50c <__itoa+0x2c>
 800c4fc:	232d      	movs	r3, #45	; 0x2d
 800c4fe:	700b      	strb	r3, [r1, #0]
 800c500:	2101      	movs	r1, #1
 800c502:	4240      	negs	r0, r0
 800c504:	4421      	add	r1, r4
 800c506:	f000 f8d9 	bl	800c6bc <__utoa>
 800c50a:	e7f1      	b.n	800c4f0 <__itoa+0x10>
 800c50c:	2100      	movs	r1, #0
 800c50e:	e7f9      	b.n	800c504 <__itoa+0x24>

0800c510 <itoa>:
 800c510:	f7ff bfe6 	b.w	800c4e0 <__itoa>

0800c514 <malloc>:
 800c514:	4b02      	ldr	r3, [pc, #8]	; (800c520 <malloc+0xc>)
 800c516:	4601      	mov	r1, r0
 800c518:	6818      	ldr	r0, [r3, #0]
 800c51a:	f000 b823 	b.w	800c564 <_malloc_r>
 800c51e:	bf00      	nop
 800c520:	20000108 	.word	0x20000108

0800c524 <sbrk_aligned>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4e0e      	ldr	r6, [pc, #56]	; (800c560 <sbrk_aligned+0x3c>)
 800c528:	460c      	mov	r4, r1
 800c52a:	6831      	ldr	r1, [r6, #0]
 800c52c:	4605      	mov	r5, r0
 800c52e:	b911      	cbnz	r1, 800c536 <sbrk_aligned+0x12>
 800c530:	f000 f91e 	bl	800c770 <_sbrk_r>
 800c534:	6030      	str	r0, [r6, #0]
 800c536:	4621      	mov	r1, r4
 800c538:	4628      	mov	r0, r5
 800c53a:	f000 f919 	bl	800c770 <_sbrk_r>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d00a      	beq.n	800c558 <sbrk_aligned+0x34>
 800c542:	1cc4      	adds	r4, r0, #3
 800c544:	f024 0403 	bic.w	r4, r4, #3
 800c548:	42a0      	cmp	r0, r4
 800c54a:	d007      	beq.n	800c55c <sbrk_aligned+0x38>
 800c54c:	1a21      	subs	r1, r4, r0
 800c54e:	4628      	mov	r0, r5
 800c550:	f000 f90e 	bl	800c770 <_sbrk_r>
 800c554:	3001      	adds	r0, #1
 800c556:	d101      	bne.n	800c55c <sbrk_aligned+0x38>
 800c558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c55c:	4620      	mov	r0, r4
 800c55e:	bd70      	pop	{r4, r5, r6, pc}
 800c560:	2000049c 	.word	0x2000049c

0800c564 <_malloc_r>:
 800c564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c568:	1ccd      	adds	r5, r1, #3
 800c56a:	f025 0503 	bic.w	r5, r5, #3
 800c56e:	3508      	adds	r5, #8
 800c570:	2d0c      	cmp	r5, #12
 800c572:	bf38      	it	cc
 800c574:	250c      	movcc	r5, #12
 800c576:	2d00      	cmp	r5, #0
 800c578:	4607      	mov	r7, r0
 800c57a:	db01      	blt.n	800c580 <_malloc_r+0x1c>
 800c57c:	42a9      	cmp	r1, r5
 800c57e:	d905      	bls.n	800c58c <_malloc_r+0x28>
 800c580:	230c      	movs	r3, #12
 800c582:	2600      	movs	r6, #0
 800c584:	603b      	str	r3, [r7, #0]
 800c586:	4630      	mov	r0, r6
 800c588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c58c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c660 <_malloc_r+0xfc>
 800c590:	f000 f868 	bl	800c664 <__malloc_lock>
 800c594:	f8d8 3000 	ldr.w	r3, [r8]
 800c598:	461c      	mov	r4, r3
 800c59a:	bb5c      	cbnz	r4, 800c5f4 <_malloc_r+0x90>
 800c59c:	4629      	mov	r1, r5
 800c59e:	4638      	mov	r0, r7
 800c5a0:	f7ff ffc0 	bl	800c524 <sbrk_aligned>
 800c5a4:	1c43      	adds	r3, r0, #1
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	d155      	bne.n	800c656 <_malloc_r+0xf2>
 800c5aa:	f8d8 4000 	ldr.w	r4, [r8]
 800c5ae:	4626      	mov	r6, r4
 800c5b0:	2e00      	cmp	r6, #0
 800c5b2:	d145      	bne.n	800c640 <_malloc_r+0xdc>
 800c5b4:	2c00      	cmp	r4, #0
 800c5b6:	d048      	beq.n	800c64a <_malloc_r+0xe6>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4638      	mov	r0, r7
 800c5be:	eb04 0903 	add.w	r9, r4, r3
 800c5c2:	f000 f8d5 	bl	800c770 <_sbrk_r>
 800c5c6:	4581      	cmp	r9, r0
 800c5c8:	d13f      	bne.n	800c64a <_malloc_r+0xe6>
 800c5ca:	6821      	ldr	r1, [r4, #0]
 800c5cc:	4638      	mov	r0, r7
 800c5ce:	1a6d      	subs	r5, r5, r1
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	f7ff ffa7 	bl	800c524 <sbrk_aligned>
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	d037      	beq.n	800c64a <_malloc_r+0xe6>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	442b      	add	r3, r5
 800c5de:	6023      	str	r3, [r4, #0]
 800c5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d038      	beq.n	800c65a <_malloc_r+0xf6>
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	42a2      	cmp	r2, r4
 800c5ec:	d12b      	bne.n	800c646 <_malloc_r+0xe2>
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	605a      	str	r2, [r3, #4]
 800c5f2:	e00f      	b.n	800c614 <_malloc_r+0xb0>
 800c5f4:	6822      	ldr	r2, [r4, #0]
 800c5f6:	1b52      	subs	r2, r2, r5
 800c5f8:	d41f      	bmi.n	800c63a <_malloc_r+0xd6>
 800c5fa:	2a0b      	cmp	r2, #11
 800c5fc:	d917      	bls.n	800c62e <_malloc_r+0xca>
 800c5fe:	1961      	adds	r1, r4, r5
 800c600:	42a3      	cmp	r3, r4
 800c602:	6025      	str	r5, [r4, #0]
 800c604:	bf18      	it	ne
 800c606:	6059      	strne	r1, [r3, #4]
 800c608:	6863      	ldr	r3, [r4, #4]
 800c60a:	bf08      	it	eq
 800c60c:	f8c8 1000 	streq.w	r1, [r8]
 800c610:	5162      	str	r2, [r4, r5]
 800c612:	604b      	str	r3, [r1, #4]
 800c614:	4638      	mov	r0, r7
 800c616:	f104 060b 	add.w	r6, r4, #11
 800c61a:	f000 f829 	bl	800c670 <__malloc_unlock>
 800c61e:	f026 0607 	bic.w	r6, r6, #7
 800c622:	1d23      	adds	r3, r4, #4
 800c624:	1af2      	subs	r2, r6, r3
 800c626:	d0ae      	beq.n	800c586 <_malloc_r+0x22>
 800c628:	1b9b      	subs	r3, r3, r6
 800c62a:	50a3      	str	r3, [r4, r2]
 800c62c:	e7ab      	b.n	800c586 <_malloc_r+0x22>
 800c62e:	42a3      	cmp	r3, r4
 800c630:	6862      	ldr	r2, [r4, #4]
 800c632:	d1dd      	bne.n	800c5f0 <_malloc_r+0x8c>
 800c634:	f8c8 2000 	str.w	r2, [r8]
 800c638:	e7ec      	b.n	800c614 <_malloc_r+0xb0>
 800c63a:	4623      	mov	r3, r4
 800c63c:	6864      	ldr	r4, [r4, #4]
 800c63e:	e7ac      	b.n	800c59a <_malloc_r+0x36>
 800c640:	4634      	mov	r4, r6
 800c642:	6876      	ldr	r6, [r6, #4]
 800c644:	e7b4      	b.n	800c5b0 <_malloc_r+0x4c>
 800c646:	4613      	mov	r3, r2
 800c648:	e7cc      	b.n	800c5e4 <_malloc_r+0x80>
 800c64a:	230c      	movs	r3, #12
 800c64c:	4638      	mov	r0, r7
 800c64e:	603b      	str	r3, [r7, #0]
 800c650:	f000 f80e 	bl	800c670 <__malloc_unlock>
 800c654:	e797      	b.n	800c586 <_malloc_r+0x22>
 800c656:	6025      	str	r5, [r4, #0]
 800c658:	e7dc      	b.n	800c614 <_malloc_r+0xb0>
 800c65a:	605b      	str	r3, [r3, #4]
 800c65c:	deff      	udf	#255	; 0xff
 800c65e:	bf00      	nop
 800c660:	20000498 	.word	0x20000498

0800c664 <__malloc_lock>:
 800c664:	4801      	ldr	r0, [pc, #4]	; (800c66c <__malloc_lock+0x8>)
 800c666:	f000 b8bd 	b.w	800c7e4 <__retarget_lock_acquire_recursive>
 800c66a:	bf00      	nop
 800c66c:	200005d8 	.word	0x200005d8

0800c670 <__malloc_unlock>:
 800c670:	4801      	ldr	r0, [pc, #4]	; (800c678 <__malloc_unlock+0x8>)
 800c672:	f000 b8b8 	b.w	800c7e6 <__retarget_lock_release_recursive>
 800c676:	bf00      	nop
 800c678:	200005d8 	.word	0x200005d8

0800c67c <siprintf>:
 800c67c:	b40e      	push	{r1, r2, r3}
 800c67e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c682:	b500      	push	{lr}
 800c684:	b09c      	sub	sp, #112	; 0x70
 800c686:	ab1d      	add	r3, sp, #116	; 0x74
 800c688:	9002      	str	r0, [sp, #8]
 800c68a:	9006      	str	r0, [sp, #24]
 800c68c:	9107      	str	r1, [sp, #28]
 800c68e:	9104      	str	r1, [sp, #16]
 800c690:	4808      	ldr	r0, [pc, #32]	; (800c6b4 <siprintf+0x38>)
 800c692:	4909      	ldr	r1, [pc, #36]	; (800c6b8 <siprintf+0x3c>)
 800c694:	f853 2b04 	ldr.w	r2, [r3], #4
 800c698:	9105      	str	r1, [sp, #20]
 800c69a:	6800      	ldr	r0, [r0, #0]
 800c69c:	a902      	add	r1, sp, #8
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	f000 f94c 	bl	800c93c <_svfiprintf_r>
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	9b02      	ldr	r3, [sp, #8]
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	b01c      	add	sp, #112	; 0x70
 800c6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6b0:	b003      	add	sp, #12
 800c6b2:	4770      	bx	lr
 800c6b4:	20000108 	.word	0x20000108
 800c6b8:	ffff0208 	.word	0xffff0208

0800c6bc <__utoa>:
 800c6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6be:	b08b      	sub	sp, #44	; 0x2c
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	466e      	mov	r6, sp
 800c6c6:	4c1d      	ldr	r4, [pc, #116]	; (800c73c <__utoa+0x80>)
 800c6c8:	f104 0c20 	add.w	ip, r4, #32
 800c6cc:	4637      	mov	r7, r6
 800c6ce:	6820      	ldr	r0, [r4, #0]
 800c6d0:	6861      	ldr	r1, [r4, #4]
 800c6d2:	3408      	adds	r4, #8
 800c6d4:	c703      	stmia	r7!, {r0, r1}
 800c6d6:	4564      	cmp	r4, ip
 800c6d8:	463e      	mov	r6, r7
 800c6da:	d1f7      	bne.n	800c6cc <__utoa+0x10>
 800c6dc:	7921      	ldrb	r1, [r4, #4]
 800c6de:	6820      	ldr	r0, [r4, #0]
 800c6e0:	7139      	strb	r1, [r7, #4]
 800c6e2:	1e91      	subs	r1, r2, #2
 800c6e4:	2922      	cmp	r1, #34	; 0x22
 800c6e6:	6038      	str	r0, [r7, #0]
 800c6e8:	f04f 0100 	mov.w	r1, #0
 800c6ec:	d904      	bls.n	800c6f8 <__utoa+0x3c>
 800c6ee:	7019      	strb	r1, [r3, #0]
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	b00b      	add	sp, #44	; 0x2c
 800c6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f8:	1e58      	subs	r0, r3, #1
 800c6fa:	4684      	mov	ip, r0
 800c6fc:	fbb5 f7f2 	udiv	r7, r5, r2
 800c700:	fb02 5617 	mls	r6, r2, r7, r5
 800c704:	3628      	adds	r6, #40	; 0x28
 800c706:	446e      	add	r6, sp
 800c708:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c70c:	460c      	mov	r4, r1
 800c70e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c712:	462e      	mov	r6, r5
 800c714:	42b2      	cmp	r2, r6
 800c716:	463d      	mov	r5, r7
 800c718:	f101 0101 	add.w	r1, r1, #1
 800c71c:	d9ee      	bls.n	800c6fc <__utoa+0x40>
 800c71e:	2200      	movs	r2, #0
 800c720:	545a      	strb	r2, [r3, r1]
 800c722:	1919      	adds	r1, r3, r4
 800c724:	1aa5      	subs	r5, r4, r2
 800c726:	42aa      	cmp	r2, r5
 800c728:	dae3      	bge.n	800c6f2 <__utoa+0x36>
 800c72a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c72e:	780e      	ldrb	r6, [r1, #0]
 800c730:	3201      	adds	r2, #1
 800c732:	7006      	strb	r6, [r0, #0]
 800c734:	f801 5901 	strb.w	r5, [r1], #-1
 800c738:	e7f4      	b.n	800c724 <__utoa+0x68>
 800c73a:	bf00      	nop
 800c73c:	0800df36 	.word	0x0800df36

0800c740 <strcat>:
 800c740:	4602      	mov	r2, r0
 800c742:	b510      	push	{r4, lr}
 800c744:	7814      	ldrb	r4, [r2, #0]
 800c746:	4613      	mov	r3, r2
 800c748:	3201      	adds	r2, #1
 800c74a:	2c00      	cmp	r4, #0
 800c74c:	d1fa      	bne.n	800c744 <strcat+0x4>
 800c74e:	3b01      	subs	r3, #1
 800c750:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c754:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c758:	2a00      	cmp	r2, #0
 800c75a:	d1f9      	bne.n	800c750 <strcat+0x10>
 800c75c:	bd10      	pop	{r4, pc}

0800c75e <memset>:
 800c75e:	4603      	mov	r3, r0
 800c760:	4402      	add	r2, r0
 800c762:	4293      	cmp	r3, r2
 800c764:	d100      	bne.n	800c768 <memset+0xa>
 800c766:	4770      	bx	lr
 800c768:	f803 1b01 	strb.w	r1, [r3], #1
 800c76c:	e7f9      	b.n	800c762 <memset+0x4>
	...

0800c770 <_sbrk_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	2300      	movs	r3, #0
 800c774:	4d05      	ldr	r5, [pc, #20]	; (800c78c <_sbrk_r+0x1c>)
 800c776:	4604      	mov	r4, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	602b      	str	r3, [r5, #0]
 800c77c:	f7fc f808 	bl	8008790 <_sbrk>
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	d102      	bne.n	800c78a <_sbrk_r+0x1a>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	b103      	cbz	r3, 800c78a <_sbrk_r+0x1a>
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	200005dc 	.word	0x200005dc

0800c790 <__errno>:
 800c790:	4b01      	ldr	r3, [pc, #4]	; (800c798 <__errno+0x8>)
 800c792:	6818      	ldr	r0, [r3, #0]
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	20000108 	.word	0x20000108

0800c79c <__libc_init_array>:
 800c79c:	b570      	push	{r4, r5, r6, lr}
 800c79e:	2600      	movs	r6, #0
 800c7a0:	4d0c      	ldr	r5, [pc, #48]	; (800c7d4 <__libc_init_array+0x38>)
 800c7a2:	4c0d      	ldr	r4, [pc, #52]	; (800c7d8 <__libc_init_array+0x3c>)
 800c7a4:	1b64      	subs	r4, r4, r5
 800c7a6:	10a4      	asrs	r4, r4, #2
 800c7a8:	42a6      	cmp	r6, r4
 800c7aa:	d109      	bne.n	800c7c0 <__libc_init_array+0x24>
 800c7ac:	f000 fbc6 	bl	800cf3c <_init>
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	4d0a      	ldr	r5, [pc, #40]	; (800c7dc <__libc_init_array+0x40>)
 800c7b4:	4c0a      	ldr	r4, [pc, #40]	; (800c7e0 <__libc_init_array+0x44>)
 800c7b6:	1b64      	subs	r4, r4, r5
 800c7b8:	10a4      	asrs	r4, r4, #2
 800c7ba:	42a6      	cmp	r6, r4
 800c7bc:	d105      	bne.n	800c7ca <__libc_init_array+0x2e>
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c4:	4798      	blx	r3
 800c7c6:	3601      	adds	r6, #1
 800c7c8:	e7ee      	b.n	800c7a8 <__libc_init_array+0xc>
 800c7ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ce:	4798      	blx	r3
 800c7d0:	3601      	adds	r6, #1
 800c7d2:	e7f2      	b.n	800c7ba <__libc_init_array+0x1e>
 800c7d4:	0800df90 	.word	0x0800df90
 800c7d8:	0800df90 	.word	0x0800df90
 800c7dc:	0800df90 	.word	0x0800df90
 800c7e0:	0800df94 	.word	0x0800df94

0800c7e4 <__retarget_lock_acquire_recursive>:
 800c7e4:	4770      	bx	lr

0800c7e6 <__retarget_lock_release_recursive>:
 800c7e6:	4770      	bx	lr

0800c7e8 <strcpy>:
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7ee:	f803 2b01 	strb.w	r2, [r3], #1
 800c7f2:	2a00      	cmp	r2, #0
 800c7f4:	d1f9      	bne.n	800c7ea <strcpy+0x2>
 800c7f6:	4770      	bx	lr

0800c7f8 <_free_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4605      	mov	r5, r0
 800c7fc:	2900      	cmp	r1, #0
 800c7fe:	d040      	beq.n	800c882 <_free_r+0x8a>
 800c800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c804:	1f0c      	subs	r4, r1, #4
 800c806:	2b00      	cmp	r3, #0
 800c808:	bfb8      	it	lt
 800c80a:	18e4      	addlt	r4, r4, r3
 800c80c:	f7ff ff2a 	bl	800c664 <__malloc_lock>
 800c810:	4a1c      	ldr	r2, [pc, #112]	; (800c884 <_free_r+0x8c>)
 800c812:	6813      	ldr	r3, [r2, #0]
 800c814:	b933      	cbnz	r3, 800c824 <_free_r+0x2c>
 800c816:	6063      	str	r3, [r4, #4]
 800c818:	6014      	str	r4, [r2, #0]
 800c81a:	4628      	mov	r0, r5
 800c81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c820:	f7ff bf26 	b.w	800c670 <__malloc_unlock>
 800c824:	42a3      	cmp	r3, r4
 800c826:	d908      	bls.n	800c83a <_free_r+0x42>
 800c828:	6820      	ldr	r0, [r4, #0]
 800c82a:	1821      	adds	r1, r4, r0
 800c82c:	428b      	cmp	r3, r1
 800c82e:	bf01      	itttt	eq
 800c830:	6819      	ldreq	r1, [r3, #0]
 800c832:	685b      	ldreq	r3, [r3, #4]
 800c834:	1809      	addeq	r1, r1, r0
 800c836:	6021      	streq	r1, [r4, #0]
 800c838:	e7ed      	b.n	800c816 <_free_r+0x1e>
 800c83a:	461a      	mov	r2, r3
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	b10b      	cbz	r3, 800c844 <_free_r+0x4c>
 800c840:	42a3      	cmp	r3, r4
 800c842:	d9fa      	bls.n	800c83a <_free_r+0x42>
 800c844:	6811      	ldr	r1, [r2, #0]
 800c846:	1850      	adds	r0, r2, r1
 800c848:	42a0      	cmp	r0, r4
 800c84a:	d10b      	bne.n	800c864 <_free_r+0x6c>
 800c84c:	6820      	ldr	r0, [r4, #0]
 800c84e:	4401      	add	r1, r0
 800c850:	1850      	adds	r0, r2, r1
 800c852:	4283      	cmp	r3, r0
 800c854:	6011      	str	r1, [r2, #0]
 800c856:	d1e0      	bne.n	800c81a <_free_r+0x22>
 800c858:	6818      	ldr	r0, [r3, #0]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	4408      	add	r0, r1
 800c85e:	6010      	str	r0, [r2, #0]
 800c860:	6053      	str	r3, [r2, #4]
 800c862:	e7da      	b.n	800c81a <_free_r+0x22>
 800c864:	d902      	bls.n	800c86c <_free_r+0x74>
 800c866:	230c      	movs	r3, #12
 800c868:	602b      	str	r3, [r5, #0]
 800c86a:	e7d6      	b.n	800c81a <_free_r+0x22>
 800c86c:	6820      	ldr	r0, [r4, #0]
 800c86e:	1821      	adds	r1, r4, r0
 800c870:	428b      	cmp	r3, r1
 800c872:	bf01      	itttt	eq
 800c874:	6819      	ldreq	r1, [r3, #0]
 800c876:	685b      	ldreq	r3, [r3, #4]
 800c878:	1809      	addeq	r1, r1, r0
 800c87a:	6021      	streq	r1, [r4, #0]
 800c87c:	6063      	str	r3, [r4, #4]
 800c87e:	6054      	str	r4, [r2, #4]
 800c880:	e7cb      	b.n	800c81a <_free_r+0x22>
 800c882:	bd38      	pop	{r3, r4, r5, pc}
 800c884:	20000498 	.word	0x20000498

0800c888 <__ssputs_r>:
 800c888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c88c:	461f      	mov	r7, r3
 800c88e:	688e      	ldr	r6, [r1, #8]
 800c890:	4682      	mov	sl, r0
 800c892:	42be      	cmp	r6, r7
 800c894:	460c      	mov	r4, r1
 800c896:	4690      	mov	r8, r2
 800c898:	680b      	ldr	r3, [r1, #0]
 800c89a:	d82c      	bhi.n	800c8f6 <__ssputs_r+0x6e>
 800c89c:	898a      	ldrh	r2, [r1, #12]
 800c89e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8a2:	d026      	beq.n	800c8f2 <__ssputs_r+0x6a>
 800c8a4:	6965      	ldr	r5, [r4, #20]
 800c8a6:	6909      	ldr	r1, [r1, #16]
 800c8a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8ac:	eba3 0901 	sub.w	r9, r3, r1
 800c8b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8b4:	1c7b      	adds	r3, r7, #1
 800c8b6:	444b      	add	r3, r9
 800c8b8:	106d      	asrs	r5, r5, #1
 800c8ba:	429d      	cmp	r5, r3
 800c8bc:	bf38      	it	cc
 800c8be:	461d      	movcc	r5, r3
 800c8c0:	0553      	lsls	r3, r2, #21
 800c8c2:	d527      	bpl.n	800c914 <__ssputs_r+0x8c>
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7ff fe4d 	bl	800c564 <_malloc_r>
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	b360      	cbz	r0, 800c928 <__ssputs_r+0xa0>
 800c8ce:	464a      	mov	r2, r9
 800c8d0:	6921      	ldr	r1, [r4, #16]
 800c8d2:	f000 fb1c 	bl	800cf0e <memcpy>
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8e0:	81a3      	strh	r3, [r4, #12]
 800c8e2:	6126      	str	r6, [r4, #16]
 800c8e4:	444e      	add	r6, r9
 800c8e6:	6026      	str	r6, [r4, #0]
 800c8e8:	463e      	mov	r6, r7
 800c8ea:	6165      	str	r5, [r4, #20]
 800c8ec:	eba5 0509 	sub.w	r5, r5, r9
 800c8f0:	60a5      	str	r5, [r4, #8]
 800c8f2:	42be      	cmp	r6, r7
 800c8f4:	d900      	bls.n	800c8f8 <__ssputs_r+0x70>
 800c8f6:	463e      	mov	r6, r7
 800c8f8:	4632      	mov	r2, r6
 800c8fa:	4641      	mov	r1, r8
 800c8fc:	6820      	ldr	r0, [r4, #0]
 800c8fe:	f000 fade 	bl	800cebe <memmove>
 800c902:	2000      	movs	r0, #0
 800c904:	68a3      	ldr	r3, [r4, #8]
 800c906:	1b9b      	subs	r3, r3, r6
 800c908:	60a3      	str	r3, [r4, #8]
 800c90a:	6823      	ldr	r3, [r4, #0]
 800c90c:	4433      	add	r3, r6
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c914:	462a      	mov	r2, r5
 800c916:	f000 faa3 	bl	800ce60 <_realloc_r>
 800c91a:	4606      	mov	r6, r0
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d1e0      	bne.n	800c8e2 <__ssputs_r+0x5a>
 800c920:	4650      	mov	r0, sl
 800c922:	6921      	ldr	r1, [r4, #16]
 800c924:	f7ff ff68 	bl	800c7f8 <_free_r>
 800c928:	230c      	movs	r3, #12
 800c92a:	f8ca 3000 	str.w	r3, [sl]
 800c92e:	89a3      	ldrh	r3, [r4, #12]
 800c930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	e7e9      	b.n	800c910 <__ssputs_r+0x88>

0800c93c <_svfiprintf_r>:
 800c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c940:	4698      	mov	r8, r3
 800c942:	898b      	ldrh	r3, [r1, #12]
 800c944:	4607      	mov	r7, r0
 800c946:	061b      	lsls	r3, r3, #24
 800c948:	460d      	mov	r5, r1
 800c94a:	4614      	mov	r4, r2
 800c94c:	b09d      	sub	sp, #116	; 0x74
 800c94e:	d50e      	bpl.n	800c96e <_svfiprintf_r+0x32>
 800c950:	690b      	ldr	r3, [r1, #16]
 800c952:	b963      	cbnz	r3, 800c96e <_svfiprintf_r+0x32>
 800c954:	2140      	movs	r1, #64	; 0x40
 800c956:	f7ff fe05 	bl	800c564 <_malloc_r>
 800c95a:	6028      	str	r0, [r5, #0]
 800c95c:	6128      	str	r0, [r5, #16]
 800c95e:	b920      	cbnz	r0, 800c96a <_svfiprintf_r+0x2e>
 800c960:	230c      	movs	r3, #12
 800c962:	603b      	str	r3, [r7, #0]
 800c964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c968:	e0d0      	b.n	800cb0c <_svfiprintf_r+0x1d0>
 800c96a:	2340      	movs	r3, #64	; 0x40
 800c96c:	616b      	str	r3, [r5, #20]
 800c96e:	2300      	movs	r3, #0
 800c970:	9309      	str	r3, [sp, #36]	; 0x24
 800c972:	2320      	movs	r3, #32
 800c974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c978:	2330      	movs	r3, #48	; 0x30
 800c97a:	f04f 0901 	mov.w	r9, #1
 800c97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c982:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cb24 <_svfiprintf_r+0x1e8>
 800c986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c98a:	4623      	mov	r3, r4
 800c98c:	469a      	mov	sl, r3
 800c98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c992:	b10a      	cbz	r2, 800c998 <_svfiprintf_r+0x5c>
 800c994:	2a25      	cmp	r2, #37	; 0x25
 800c996:	d1f9      	bne.n	800c98c <_svfiprintf_r+0x50>
 800c998:	ebba 0b04 	subs.w	fp, sl, r4
 800c99c:	d00b      	beq.n	800c9b6 <_svfiprintf_r+0x7a>
 800c99e:	465b      	mov	r3, fp
 800c9a0:	4622      	mov	r2, r4
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f7ff ff6f 	bl	800c888 <__ssputs_r>
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	f000 80a9 	beq.w	800cb02 <_svfiprintf_r+0x1c6>
 800c9b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9b2:	445a      	add	r2, fp
 800c9b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 80a1 	beq.w	800cb02 <_svfiprintf_r+0x1c6>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9ca:	f10a 0a01 	add.w	sl, sl, #1
 800c9ce:	9304      	str	r3, [sp, #16]
 800c9d0:	9307      	str	r3, [sp, #28]
 800c9d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9d6:	931a      	str	r3, [sp, #104]	; 0x68
 800c9d8:	4654      	mov	r4, sl
 800c9da:	2205      	movs	r2, #5
 800c9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e0:	4850      	ldr	r0, [pc, #320]	; (800cb24 <_svfiprintf_r+0x1e8>)
 800c9e2:	f000 fa86 	bl	800cef2 <memchr>
 800c9e6:	9a04      	ldr	r2, [sp, #16]
 800c9e8:	b9d8      	cbnz	r0, 800ca22 <_svfiprintf_r+0xe6>
 800c9ea:	06d0      	lsls	r0, r2, #27
 800c9ec:	bf44      	itt	mi
 800c9ee:	2320      	movmi	r3, #32
 800c9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9f4:	0711      	lsls	r1, r2, #28
 800c9f6:	bf44      	itt	mi
 800c9f8:	232b      	movmi	r3, #43	; 0x2b
 800c9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9fe:	f89a 3000 	ldrb.w	r3, [sl]
 800ca02:	2b2a      	cmp	r3, #42	; 0x2a
 800ca04:	d015      	beq.n	800ca32 <_svfiprintf_r+0xf6>
 800ca06:	4654      	mov	r4, sl
 800ca08:	2000      	movs	r0, #0
 800ca0a:	f04f 0c0a 	mov.w	ip, #10
 800ca0e:	9a07      	ldr	r2, [sp, #28]
 800ca10:	4621      	mov	r1, r4
 800ca12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca16:	3b30      	subs	r3, #48	; 0x30
 800ca18:	2b09      	cmp	r3, #9
 800ca1a:	d94d      	bls.n	800cab8 <_svfiprintf_r+0x17c>
 800ca1c:	b1b0      	cbz	r0, 800ca4c <_svfiprintf_r+0x110>
 800ca1e:	9207      	str	r2, [sp, #28]
 800ca20:	e014      	b.n	800ca4c <_svfiprintf_r+0x110>
 800ca22:	eba0 0308 	sub.w	r3, r0, r8
 800ca26:	fa09 f303 	lsl.w	r3, r9, r3
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	46a2      	mov	sl, r4
 800ca2e:	9304      	str	r3, [sp, #16]
 800ca30:	e7d2      	b.n	800c9d8 <_svfiprintf_r+0x9c>
 800ca32:	9b03      	ldr	r3, [sp, #12]
 800ca34:	1d19      	adds	r1, r3, #4
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	9103      	str	r1, [sp, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	bfbb      	ittet	lt
 800ca3e:	425b      	neglt	r3, r3
 800ca40:	f042 0202 	orrlt.w	r2, r2, #2
 800ca44:	9307      	strge	r3, [sp, #28]
 800ca46:	9307      	strlt	r3, [sp, #28]
 800ca48:	bfb8      	it	lt
 800ca4a:	9204      	strlt	r2, [sp, #16]
 800ca4c:	7823      	ldrb	r3, [r4, #0]
 800ca4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ca50:	d10c      	bne.n	800ca6c <_svfiprintf_r+0x130>
 800ca52:	7863      	ldrb	r3, [r4, #1]
 800ca54:	2b2a      	cmp	r3, #42	; 0x2a
 800ca56:	d134      	bne.n	800cac2 <_svfiprintf_r+0x186>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	3402      	adds	r4, #2
 800ca5c:	1d1a      	adds	r2, r3, #4
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	9203      	str	r2, [sp, #12]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	bfb8      	it	lt
 800ca66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca6a:	9305      	str	r3, [sp, #20]
 800ca6c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cb28 <_svfiprintf_r+0x1ec>
 800ca70:	2203      	movs	r2, #3
 800ca72:	4650      	mov	r0, sl
 800ca74:	7821      	ldrb	r1, [r4, #0]
 800ca76:	f000 fa3c 	bl	800cef2 <memchr>
 800ca7a:	b138      	cbz	r0, 800ca8c <_svfiprintf_r+0x150>
 800ca7c:	2240      	movs	r2, #64	; 0x40
 800ca7e:	9b04      	ldr	r3, [sp, #16]
 800ca80:	eba0 000a 	sub.w	r0, r0, sl
 800ca84:	4082      	lsls	r2, r0
 800ca86:	4313      	orrs	r3, r2
 800ca88:	3401      	adds	r4, #1
 800ca8a:	9304      	str	r3, [sp, #16]
 800ca8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca90:	2206      	movs	r2, #6
 800ca92:	4826      	ldr	r0, [pc, #152]	; (800cb2c <_svfiprintf_r+0x1f0>)
 800ca94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca98:	f000 fa2b 	bl	800cef2 <memchr>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d038      	beq.n	800cb12 <_svfiprintf_r+0x1d6>
 800caa0:	4b23      	ldr	r3, [pc, #140]	; (800cb30 <_svfiprintf_r+0x1f4>)
 800caa2:	bb1b      	cbnz	r3, 800caec <_svfiprintf_r+0x1b0>
 800caa4:	9b03      	ldr	r3, [sp, #12]
 800caa6:	3307      	adds	r3, #7
 800caa8:	f023 0307 	bic.w	r3, r3, #7
 800caac:	3308      	adds	r3, #8
 800caae:	9303      	str	r3, [sp, #12]
 800cab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab2:	4433      	add	r3, r6
 800cab4:	9309      	str	r3, [sp, #36]	; 0x24
 800cab6:	e768      	b.n	800c98a <_svfiprintf_r+0x4e>
 800cab8:	460c      	mov	r4, r1
 800caba:	2001      	movs	r0, #1
 800cabc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cac0:	e7a6      	b.n	800ca10 <_svfiprintf_r+0xd4>
 800cac2:	2300      	movs	r3, #0
 800cac4:	f04f 0c0a 	mov.w	ip, #10
 800cac8:	4619      	mov	r1, r3
 800caca:	3401      	adds	r4, #1
 800cacc:	9305      	str	r3, [sp, #20]
 800cace:	4620      	mov	r0, r4
 800cad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cad4:	3a30      	subs	r2, #48	; 0x30
 800cad6:	2a09      	cmp	r2, #9
 800cad8:	d903      	bls.n	800cae2 <_svfiprintf_r+0x1a6>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d0c6      	beq.n	800ca6c <_svfiprintf_r+0x130>
 800cade:	9105      	str	r1, [sp, #20]
 800cae0:	e7c4      	b.n	800ca6c <_svfiprintf_r+0x130>
 800cae2:	4604      	mov	r4, r0
 800cae4:	2301      	movs	r3, #1
 800cae6:	fb0c 2101 	mla	r1, ip, r1, r2
 800caea:	e7f0      	b.n	800cace <_svfiprintf_r+0x192>
 800caec:	ab03      	add	r3, sp, #12
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	462a      	mov	r2, r5
 800caf2:	4638      	mov	r0, r7
 800caf4:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <_svfiprintf_r+0x1f8>)
 800caf6:	a904      	add	r1, sp, #16
 800caf8:	f3af 8000 	nop.w
 800cafc:	1c42      	adds	r2, r0, #1
 800cafe:	4606      	mov	r6, r0
 800cb00:	d1d6      	bne.n	800cab0 <_svfiprintf_r+0x174>
 800cb02:	89ab      	ldrh	r3, [r5, #12]
 800cb04:	065b      	lsls	r3, r3, #25
 800cb06:	f53f af2d 	bmi.w	800c964 <_svfiprintf_r+0x28>
 800cb0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb0c:	b01d      	add	sp, #116	; 0x74
 800cb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb12:	ab03      	add	r3, sp, #12
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	462a      	mov	r2, r5
 800cb18:	4638      	mov	r0, r7
 800cb1a:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <_svfiprintf_r+0x1f8>)
 800cb1c:	a904      	add	r1, sp, #16
 800cb1e:	f000 f87d 	bl	800cc1c <_printf_i>
 800cb22:	e7eb      	b.n	800cafc <_svfiprintf_r+0x1c0>
 800cb24:	0800df5b 	.word	0x0800df5b
 800cb28:	0800df61 	.word	0x0800df61
 800cb2c:	0800df65 	.word	0x0800df65
 800cb30:	00000000 	.word	0x00000000
 800cb34:	0800c889 	.word	0x0800c889

0800cb38 <_printf_common>:
 800cb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb3c:	4616      	mov	r6, r2
 800cb3e:	4699      	mov	r9, r3
 800cb40:	688a      	ldr	r2, [r1, #8]
 800cb42:	690b      	ldr	r3, [r1, #16]
 800cb44:	4607      	mov	r7, r0
 800cb46:	4293      	cmp	r3, r2
 800cb48:	bfb8      	it	lt
 800cb4a:	4613      	movlt	r3, r2
 800cb4c:	6033      	str	r3, [r6, #0]
 800cb4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb52:	460c      	mov	r4, r1
 800cb54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb58:	b10a      	cbz	r2, 800cb5e <_printf_common+0x26>
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	6033      	str	r3, [r6, #0]
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	0699      	lsls	r1, r3, #26
 800cb62:	bf42      	ittt	mi
 800cb64:	6833      	ldrmi	r3, [r6, #0]
 800cb66:	3302      	addmi	r3, #2
 800cb68:	6033      	strmi	r3, [r6, #0]
 800cb6a:	6825      	ldr	r5, [r4, #0]
 800cb6c:	f015 0506 	ands.w	r5, r5, #6
 800cb70:	d106      	bne.n	800cb80 <_printf_common+0x48>
 800cb72:	f104 0a19 	add.w	sl, r4, #25
 800cb76:	68e3      	ldr	r3, [r4, #12]
 800cb78:	6832      	ldr	r2, [r6, #0]
 800cb7a:	1a9b      	subs	r3, r3, r2
 800cb7c:	42ab      	cmp	r3, r5
 800cb7e:	dc2b      	bgt.n	800cbd8 <_printf_common+0xa0>
 800cb80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb84:	1e13      	subs	r3, r2, #0
 800cb86:	6822      	ldr	r2, [r4, #0]
 800cb88:	bf18      	it	ne
 800cb8a:	2301      	movne	r3, #1
 800cb8c:	0692      	lsls	r2, r2, #26
 800cb8e:	d430      	bmi.n	800cbf2 <_printf_common+0xba>
 800cb90:	4649      	mov	r1, r9
 800cb92:	4638      	mov	r0, r7
 800cb94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb98:	47c0      	blx	r8
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	d023      	beq.n	800cbe6 <_printf_common+0xae>
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	6922      	ldr	r2, [r4, #16]
 800cba2:	f003 0306 	and.w	r3, r3, #6
 800cba6:	2b04      	cmp	r3, #4
 800cba8:	bf14      	ite	ne
 800cbaa:	2500      	movne	r5, #0
 800cbac:	6833      	ldreq	r3, [r6, #0]
 800cbae:	f04f 0600 	mov.w	r6, #0
 800cbb2:	bf08      	it	eq
 800cbb4:	68e5      	ldreq	r5, [r4, #12]
 800cbb6:	f104 041a 	add.w	r4, r4, #26
 800cbba:	bf08      	it	eq
 800cbbc:	1aed      	subeq	r5, r5, r3
 800cbbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cbc2:	bf08      	it	eq
 800cbc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	bfc4      	itt	gt
 800cbcc:	1a9b      	subgt	r3, r3, r2
 800cbce:	18ed      	addgt	r5, r5, r3
 800cbd0:	42b5      	cmp	r5, r6
 800cbd2:	d11a      	bne.n	800cc0a <_printf_common+0xd2>
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	e008      	b.n	800cbea <_printf_common+0xb2>
 800cbd8:	2301      	movs	r3, #1
 800cbda:	4652      	mov	r2, sl
 800cbdc:	4649      	mov	r1, r9
 800cbde:	4638      	mov	r0, r7
 800cbe0:	47c0      	blx	r8
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	d103      	bne.n	800cbee <_printf_common+0xb6>
 800cbe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbee:	3501      	adds	r5, #1
 800cbf0:	e7c1      	b.n	800cb76 <_printf_common+0x3e>
 800cbf2:	2030      	movs	r0, #48	; 0x30
 800cbf4:	18e1      	adds	r1, r4, r3
 800cbf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc00:	4422      	add	r2, r4
 800cc02:	3302      	adds	r3, #2
 800cc04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc08:	e7c2      	b.n	800cb90 <_printf_common+0x58>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	4649      	mov	r1, r9
 800cc10:	4638      	mov	r0, r7
 800cc12:	47c0      	blx	r8
 800cc14:	3001      	adds	r0, #1
 800cc16:	d0e6      	beq.n	800cbe6 <_printf_common+0xae>
 800cc18:	3601      	adds	r6, #1
 800cc1a:	e7d9      	b.n	800cbd0 <_printf_common+0x98>

0800cc1c <_printf_i>:
 800cc1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc20:	7e0f      	ldrb	r7, [r1, #24]
 800cc22:	4691      	mov	r9, r2
 800cc24:	2f78      	cmp	r7, #120	; 0x78
 800cc26:	4680      	mov	r8, r0
 800cc28:	460c      	mov	r4, r1
 800cc2a:	469a      	mov	sl, r3
 800cc2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc32:	d807      	bhi.n	800cc44 <_printf_i+0x28>
 800cc34:	2f62      	cmp	r7, #98	; 0x62
 800cc36:	d80a      	bhi.n	800cc4e <_printf_i+0x32>
 800cc38:	2f00      	cmp	r7, #0
 800cc3a:	f000 80d5 	beq.w	800cde8 <_printf_i+0x1cc>
 800cc3e:	2f58      	cmp	r7, #88	; 0x58
 800cc40:	f000 80c1 	beq.w	800cdc6 <_printf_i+0x1aa>
 800cc44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc4c:	e03a      	b.n	800ccc4 <_printf_i+0xa8>
 800cc4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc52:	2b15      	cmp	r3, #21
 800cc54:	d8f6      	bhi.n	800cc44 <_printf_i+0x28>
 800cc56:	a101      	add	r1, pc, #4	; (adr r1, 800cc5c <_printf_i+0x40>)
 800cc58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc5c:	0800ccb5 	.word	0x0800ccb5
 800cc60:	0800ccc9 	.word	0x0800ccc9
 800cc64:	0800cc45 	.word	0x0800cc45
 800cc68:	0800cc45 	.word	0x0800cc45
 800cc6c:	0800cc45 	.word	0x0800cc45
 800cc70:	0800cc45 	.word	0x0800cc45
 800cc74:	0800ccc9 	.word	0x0800ccc9
 800cc78:	0800cc45 	.word	0x0800cc45
 800cc7c:	0800cc45 	.word	0x0800cc45
 800cc80:	0800cc45 	.word	0x0800cc45
 800cc84:	0800cc45 	.word	0x0800cc45
 800cc88:	0800cdcf 	.word	0x0800cdcf
 800cc8c:	0800ccf5 	.word	0x0800ccf5
 800cc90:	0800cd89 	.word	0x0800cd89
 800cc94:	0800cc45 	.word	0x0800cc45
 800cc98:	0800cc45 	.word	0x0800cc45
 800cc9c:	0800cdf1 	.word	0x0800cdf1
 800cca0:	0800cc45 	.word	0x0800cc45
 800cca4:	0800ccf5 	.word	0x0800ccf5
 800cca8:	0800cc45 	.word	0x0800cc45
 800ccac:	0800cc45 	.word	0x0800cc45
 800ccb0:	0800cd91 	.word	0x0800cd91
 800ccb4:	682b      	ldr	r3, [r5, #0]
 800ccb6:	1d1a      	adds	r2, r3, #4
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	602a      	str	r2, [r5, #0]
 800ccbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e0a0      	b.n	800ce0a <_printf_i+0x1ee>
 800ccc8:	6820      	ldr	r0, [r4, #0]
 800ccca:	682b      	ldr	r3, [r5, #0]
 800cccc:	0607      	lsls	r7, r0, #24
 800ccce:	f103 0104 	add.w	r1, r3, #4
 800ccd2:	6029      	str	r1, [r5, #0]
 800ccd4:	d501      	bpl.n	800ccda <_printf_i+0xbe>
 800ccd6:	681e      	ldr	r6, [r3, #0]
 800ccd8:	e003      	b.n	800cce2 <_printf_i+0xc6>
 800ccda:	0646      	lsls	r6, r0, #25
 800ccdc:	d5fb      	bpl.n	800ccd6 <_printf_i+0xba>
 800ccde:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cce2:	2e00      	cmp	r6, #0
 800cce4:	da03      	bge.n	800ccee <_printf_i+0xd2>
 800cce6:	232d      	movs	r3, #45	; 0x2d
 800cce8:	4276      	negs	r6, r6
 800ccea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccee:	230a      	movs	r3, #10
 800ccf0:	4859      	ldr	r0, [pc, #356]	; (800ce58 <_printf_i+0x23c>)
 800ccf2:	e012      	b.n	800cd1a <_printf_i+0xfe>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	6820      	ldr	r0, [r4, #0]
 800ccf8:	1d19      	adds	r1, r3, #4
 800ccfa:	6029      	str	r1, [r5, #0]
 800ccfc:	0605      	lsls	r5, r0, #24
 800ccfe:	d501      	bpl.n	800cd04 <_printf_i+0xe8>
 800cd00:	681e      	ldr	r6, [r3, #0]
 800cd02:	e002      	b.n	800cd0a <_printf_i+0xee>
 800cd04:	0641      	lsls	r1, r0, #25
 800cd06:	d5fb      	bpl.n	800cd00 <_printf_i+0xe4>
 800cd08:	881e      	ldrh	r6, [r3, #0]
 800cd0a:	2f6f      	cmp	r7, #111	; 0x6f
 800cd0c:	bf0c      	ite	eq
 800cd0e:	2308      	moveq	r3, #8
 800cd10:	230a      	movne	r3, #10
 800cd12:	4851      	ldr	r0, [pc, #324]	; (800ce58 <_printf_i+0x23c>)
 800cd14:	2100      	movs	r1, #0
 800cd16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd1a:	6865      	ldr	r5, [r4, #4]
 800cd1c:	2d00      	cmp	r5, #0
 800cd1e:	bfa8      	it	ge
 800cd20:	6821      	ldrge	r1, [r4, #0]
 800cd22:	60a5      	str	r5, [r4, #8]
 800cd24:	bfa4      	itt	ge
 800cd26:	f021 0104 	bicge.w	r1, r1, #4
 800cd2a:	6021      	strge	r1, [r4, #0]
 800cd2c:	b90e      	cbnz	r6, 800cd32 <_printf_i+0x116>
 800cd2e:	2d00      	cmp	r5, #0
 800cd30:	d04b      	beq.n	800cdca <_printf_i+0x1ae>
 800cd32:	4615      	mov	r5, r2
 800cd34:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd38:	fb03 6711 	mls	r7, r3, r1, r6
 800cd3c:	5dc7      	ldrb	r7, [r0, r7]
 800cd3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd42:	4637      	mov	r7, r6
 800cd44:	42bb      	cmp	r3, r7
 800cd46:	460e      	mov	r6, r1
 800cd48:	d9f4      	bls.n	800cd34 <_printf_i+0x118>
 800cd4a:	2b08      	cmp	r3, #8
 800cd4c:	d10b      	bne.n	800cd66 <_printf_i+0x14a>
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	07de      	lsls	r6, r3, #31
 800cd52:	d508      	bpl.n	800cd66 <_printf_i+0x14a>
 800cd54:	6923      	ldr	r3, [r4, #16]
 800cd56:	6861      	ldr	r1, [r4, #4]
 800cd58:	4299      	cmp	r1, r3
 800cd5a:	bfde      	ittt	le
 800cd5c:	2330      	movle	r3, #48	; 0x30
 800cd5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd62:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cd66:	1b52      	subs	r2, r2, r5
 800cd68:	6122      	str	r2, [r4, #16]
 800cd6a:	464b      	mov	r3, r9
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	4640      	mov	r0, r8
 800cd70:	f8cd a000 	str.w	sl, [sp]
 800cd74:	aa03      	add	r2, sp, #12
 800cd76:	f7ff fedf 	bl	800cb38 <_printf_common>
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	d14a      	bne.n	800ce14 <_printf_i+0x1f8>
 800cd7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd82:	b004      	add	sp, #16
 800cd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	f043 0320 	orr.w	r3, r3, #32
 800cd8e:	6023      	str	r3, [r4, #0]
 800cd90:	2778      	movs	r7, #120	; 0x78
 800cd92:	4832      	ldr	r0, [pc, #200]	; (800ce5c <_printf_i+0x240>)
 800cd94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd98:	6823      	ldr	r3, [r4, #0]
 800cd9a:	6829      	ldr	r1, [r5, #0]
 800cd9c:	061f      	lsls	r7, r3, #24
 800cd9e:	f851 6b04 	ldr.w	r6, [r1], #4
 800cda2:	d402      	bmi.n	800cdaa <_printf_i+0x18e>
 800cda4:	065f      	lsls	r7, r3, #25
 800cda6:	bf48      	it	mi
 800cda8:	b2b6      	uxthmi	r6, r6
 800cdaa:	07df      	lsls	r7, r3, #31
 800cdac:	bf48      	it	mi
 800cdae:	f043 0320 	orrmi.w	r3, r3, #32
 800cdb2:	6029      	str	r1, [r5, #0]
 800cdb4:	bf48      	it	mi
 800cdb6:	6023      	strmi	r3, [r4, #0]
 800cdb8:	b91e      	cbnz	r6, 800cdc2 <_printf_i+0x1a6>
 800cdba:	6823      	ldr	r3, [r4, #0]
 800cdbc:	f023 0320 	bic.w	r3, r3, #32
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	2310      	movs	r3, #16
 800cdc4:	e7a6      	b.n	800cd14 <_printf_i+0xf8>
 800cdc6:	4824      	ldr	r0, [pc, #144]	; (800ce58 <_printf_i+0x23c>)
 800cdc8:	e7e4      	b.n	800cd94 <_printf_i+0x178>
 800cdca:	4615      	mov	r5, r2
 800cdcc:	e7bd      	b.n	800cd4a <_printf_i+0x12e>
 800cdce:	682b      	ldr	r3, [r5, #0]
 800cdd0:	6826      	ldr	r6, [r4, #0]
 800cdd2:	1d18      	adds	r0, r3, #4
 800cdd4:	6961      	ldr	r1, [r4, #20]
 800cdd6:	6028      	str	r0, [r5, #0]
 800cdd8:	0635      	lsls	r5, r6, #24
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	d501      	bpl.n	800cde2 <_printf_i+0x1c6>
 800cdde:	6019      	str	r1, [r3, #0]
 800cde0:	e002      	b.n	800cde8 <_printf_i+0x1cc>
 800cde2:	0670      	lsls	r0, r6, #25
 800cde4:	d5fb      	bpl.n	800cdde <_printf_i+0x1c2>
 800cde6:	8019      	strh	r1, [r3, #0]
 800cde8:	2300      	movs	r3, #0
 800cdea:	4615      	mov	r5, r2
 800cdec:	6123      	str	r3, [r4, #16]
 800cdee:	e7bc      	b.n	800cd6a <_printf_i+0x14e>
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	1d1a      	adds	r2, r3, #4
 800cdf6:	602a      	str	r2, [r5, #0]
 800cdf8:	681d      	ldr	r5, [r3, #0]
 800cdfa:	6862      	ldr	r2, [r4, #4]
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	f000 f878 	bl	800cef2 <memchr>
 800ce02:	b108      	cbz	r0, 800ce08 <_printf_i+0x1ec>
 800ce04:	1b40      	subs	r0, r0, r5
 800ce06:	6060      	str	r0, [r4, #4]
 800ce08:	6863      	ldr	r3, [r4, #4]
 800ce0a:	6123      	str	r3, [r4, #16]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce12:	e7aa      	b.n	800cd6a <_printf_i+0x14e>
 800ce14:	462a      	mov	r2, r5
 800ce16:	4649      	mov	r1, r9
 800ce18:	4640      	mov	r0, r8
 800ce1a:	6923      	ldr	r3, [r4, #16]
 800ce1c:	47d0      	blx	sl
 800ce1e:	3001      	adds	r0, #1
 800ce20:	d0ad      	beq.n	800cd7e <_printf_i+0x162>
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	079b      	lsls	r3, r3, #30
 800ce26:	d413      	bmi.n	800ce50 <_printf_i+0x234>
 800ce28:	68e0      	ldr	r0, [r4, #12]
 800ce2a:	9b03      	ldr	r3, [sp, #12]
 800ce2c:	4298      	cmp	r0, r3
 800ce2e:	bfb8      	it	lt
 800ce30:	4618      	movlt	r0, r3
 800ce32:	e7a6      	b.n	800cd82 <_printf_i+0x166>
 800ce34:	2301      	movs	r3, #1
 800ce36:	4632      	mov	r2, r6
 800ce38:	4649      	mov	r1, r9
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	47d0      	blx	sl
 800ce3e:	3001      	adds	r0, #1
 800ce40:	d09d      	beq.n	800cd7e <_printf_i+0x162>
 800ce42:	3501      	adds	r5, #1
 800ce44:	68e3      	ldr	r3, [r4, #12]
 800ce46:	9903      	ldr	r1, [sp, #12]
 800ce48:	1a5b      	subs	r3, r3, r1
 800ce4a:	42ab      	cmp	r3, r5
 800ce4c:	dcf2      	bgt.n	800ce34 <_printf_i+0x218>
 800ce4e:	e7eb      	b.n	800ce28 <_printf_i+0x20c>
 800ce50:	2500      	movs	r5, #0
 800ce52:	f104 0619 	add.w	r6, r4, #25
 800ce56:	e7f5      	b.n	800ce44 <_printf_i+0x228>
 800ce58:	0800df6c 	.word	0x0800df6c
 800ce5c:	0800df7d 	.word	0x0800df7d

0800ce60 <_realloc_r>:
 800ce60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce64:	4680      	mov	r8, r0
 800ce66:	4614      	mov	r4, r2
 800ce68:	460e      	mov	r6, r1
 800ce6a:	b921      	cbnz	r1, 800ce76 <_realloc_r+0x16>
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce72:	f7ff bb77 	b.w	800c564 <_malloc_r>
 800ce76:	b92a      	cbnz	r2, 800ce84 <_realloc_r+0x24>
 800ce78:	f7ff fcbe 	bl	800c7f8 <_free_r>
 800ce7c:	4625      	mov	r5, r4
 800ce7e:	4628      	mov	r0, r5
 800ce80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce84:	f000 f851 	bl	800cf2a <_malloc_usable_size_r>
 800ce88:	4284      	cmp	r4, r0
 800ce8a:	4607      	mov	r7, r0
 800ce8c:	d802      	bhi.n	800ce94 <_realloc_r+0x34>
 800ce8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce92:	d812      	bhi.n	800ceba <_realloc_r+0x5a>
 800ce94:	4621      	mov	r1, r4
 800ce96:	4640      	mov	r0, r8
 800ce98:	f7ff fb64 	bl	800c564 <_malloc_r>
 800ce9c:	4605      	mov	r5, r0
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d0ed      	beq.n	800ce7e <_realloc_r+0x1e>
 800cea2:	42bc      	cmp	r4, r7
 800cea4:	4622      	mov	r2, r4
 800cea6:	4631      	mov	r1, r6
 800cea8:	bf28      	it	cs
 800ceaa:	463a      	movcs	r2, r7
 800ceac:	f000 f82f 	bl	800cf0e <memcpy>
 800ceb0:	4631      	mov	r1, r6
 800ceb2:	4640      	mov	r0, r8
 800ceb4:	f7ff fca0 	bl	800c7f8 <_free_r>
 800ceb8:	e7e1      	b.n	800ce7e <_realloc_r+0x1e>
 800ceba:	4635      	mov	r5, r6
 800cebc:	e7df      	b.n	800ce7e <_realloc_r+0x1e>

0800cebe <memmove>:
 800cebe:	4288      	cmp	r0, r1
 800cec0:	b510      	push	{r4, lr}
 800cec2:	eb01 0402 	add.w	r4, r1, r2
 800cec6:	d902      	bls.n	800cece <memmove+0x10>
 800cec8:	4284      	cmp	r4, r0
 800ceca:	4623      	mov	r3, r4
 800cecc:	d807      	bhi.n	800cede <memmove+0x20>
 800cece:	1e43      	subs	r3, r0, #1
 800ced0:	42a1      	cmp	r1, r4
 800ced2:	d008      	beq.n	800cee6 <memmove+0x28>
 800ced4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ced8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cedc:	e7f8      	b.n	800ced0 <memmove+0x12>
 800cede:	4601      	mov	r1, r0
 800cee0:	4402      	add	r2, r0
 800cee2:	428a      	cmp	r2, r1
 800cee4:	d100      	bne.n	800cee8 <memmove+0x2a>
 800cee6:	bd10      	pop	{r4, pc}
 800cee8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cef0:	e7f7      	b.n	800cee2 <memmove+0x24>

0800cef2 <memchr>:
 800cef2:	4603      	mov	r3, r0
 800cef4:	b510      	push	{r4, lr}
 800cef6:	b2c9      	uxtb	r1, r1
 800cef8:	4402      	add	r2, r0
 800cefa:	4293      	cmp	r3, r2
 800cefc:	4618      	mov	r0, r3
 800cefe:	d101      	bne.n	800cf04 <memchr+0x12>
 800cf00:	2000      	movs	r0, #0
 800cf02:	e003      	b.n	800cf0c <memchr+0x1a>
 800cf04:	7804      	ldrb	r4, [r0, #0]
 800cf06:	3301      	adds	r3, #1
 800cf08:	428c      	cmp	r4, r1
 800cf0a:	d1f6      	bne.n	800cefa <memchr+0x8>
 800cf0c:	bd10      	pop	{r4, pc}

0800cf0e <memcpy>:
 800cf0e:	440a      	add	r2, r1
 800cf10:	4291      	cmp	r1, r2
 800cf12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf16:	d100      	bne.n	800cf1a <memcpy+0xc>
 800cf18:	4770      	bx	lr
 800cf1a:	b510      	push	{r4, lr}
 800cf1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf20:	4291      	cmp	r1, r2
 800cf22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf26:	d1f9      	bne.n	800cf1c <memcpy+0xe>
 800cf28:	bd10      	pop	{r4, pc}

0800cf2a <_malloc_usable_size_r>:
 800cf2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf2e:	1f18      	subs	r0, r3, #4
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	bfbc      	itt	lt
 800cf34:	580b      	ldrlt	r3, [r1, r0]
 800cf36:	18c0      	addlt	r0, r0, r3
 800cf38:	4770      	bx	lr
	...

0800cf3c <_init>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	bf00      	nop
 800cf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf42:	bc08      	pop	{r3}
 800cf44:	469e      	mov	lr, r3
 800cf46:	4770      	bx	lr

0800cf48 <_fini>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	bf00      	nop
 800cf4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4e:	bc08      	pop	{r3}
 800cf50:	469e      	mov	lr, r3
 800cf52:	4770      	bx	lr
