
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4bc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  0800c6a0  0800c6a0  0001c6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d528  0800d528  000209a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d528  0800d528  000209a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d528  0800d528  000209a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d528  0800d528  0001d528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d52c  0800d52c  0001d52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a8  20000000  0800d530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200009a8  0800ded8  000209a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f1c  0800ded8  00020f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fb1  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026a8  00000000  00000000  000339c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00036070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db2  00000000  00000000  000371c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  00037f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180b2  00000000  00000000  00052e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fbaf  00000000  00000000  0006af26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fdc  00000000  00000000  0010aad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010fab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009a8 	.word	0x200009a8
 8000200:	00000000 	.word	0x00000000
 8000204:	0800c688 	.word	0x0800c688

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200009ac 	.word	0x200009ac
 8000220:	0800c688 	.word	0x0800c688

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"


void ESP8266_Init(UART_HandleTypeDef *huart1) {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b09c      	sub	sp, #112	; 0x70
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 800023c:	4954      	ldr	r1, [pc, #336]	; (8000390 <ESP8266_Init+0x15c>)
 800023e:	4855      	ldr	r0, [pc, #340]	; (8000394 <ESP8266_Init+0x160>)
 8000240:	f00b fe04 	bl	800be4c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000244:	4853      	ldr	r0, [pc, #332]	; (8000394 <ESP8266_Init+0x160>)
 8000246:	f7ff ffed 	bl	8000224 <strlen>
 800024a:	4603      	mov	r3, r0
 800024c:	b29b      	uxth	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	4950      	ldr	r1, [pc, #320]	; (8000394 <ESP8266_Init+0x160>)
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f00a ffd2 	bl	800b1fc <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000258:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800025c:	f007 ff02 	bl	8008064 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000260:	494d      	ldr	r1, [pc, #308]	; (8000398 <ESP8266_Init+0x164>)
 8000262:	484c      	ldr	r0, [pc, #304]	; (8000394 <ESP8266_Init+0x160>)
 8000264:	f00b fdf2 	bl	800be4c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000268:	484a      	ldr	r0, [pc, #296]	; (8000394 <ESP8266_Init+0x160>)
 800026a:	f7ff ffdb 	bl	8000224 <strlen>
 800026e:	4603      	mov	r3, r0
 8000270:	b29b      	uxth	r3, r3
 8000272:	461a      	mov	r2, r3
 8000274:	4947      	ldr	r1, [pc, #284]	; (8000394 <ESP8266_Init+0x160>)
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f00a ffc0 	bl	800b1fc <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 800027c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000280:	f007 fef0 	bl	8008064 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000284:	4945      	ldr	r1, [pc, #276]	; (800039c <ESP8266_Init+0x168>)
 8000286:	4843      	ldr	r0, [pc, #268]	; (8000394 <ESP8266_Init+0x160>)
 8000288:	f00b fde0 	bl	800be4c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800028c:	4841      	ldr	r0, [pc, #260]	; (8000394 <ESP8266_Init+0x160>)
 800028e:	f7ff ffc9 	bl	8000224 <strlen>
 8000292:	4603      	mov	r3, r0
 8000294:	b29b      	uxth	r3, r3
 8000296:	461a      	mov	r2, r3
 8000298:	493e      	ldr	r1, [pc, #248]	; (8000394 <ESP8266_Init+0x160>)
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f00a ffae 	bl	800b1fc <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 80002a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80002a4:	f007 fede 	bl	8008064 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002a8:	493d      	ldr	r1, [pc, #244]	; (80003a0 <ESP8266_Init+0x16c>)
 80002aa:	483a      	ldr	r0, [pc, #232]	; (8000394 <ESP8266_Init+0x160>)
 80002ac:	f00b fdce 	bl	800be4c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b0:	4838      	ldr	r0, [pc, #224]	; (8000394 <ESP8266_Init+0x160>)
 80002b2:	f7ff ffb7 	bl	8000224 <strlen>
 80002b6:	4603      	mov	r3, r0
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	4935      	ldr	r1, [pc, #212]	; (8000394 <ESP8266_Init+0x160>)
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f00a ff9c 	bl	800b1fc <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 80002c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80002c8:	f007 fecc 	bl	8008064 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4a34      	ldr	r2, [pc, #208]	; (80003a4 <ESP8266_Init+0x170>)
 80002d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d4:	c303      	stmia	r3!, {r0, r1}
 80002d6:	801a      	strh	r2, [r3, #0]
 80002d8:	3302      	adds	r3, #2
 80002da:	0c12      	lsrs	r2, r2, #16
 80002dc:	701a      	strb	r2, [r3, #0]
	strcat(str, Wifi_name);
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ff9e 	bl	8000224 <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	f107 030c 	add.w	r3, r7, #12
 80002f0:	4413      	add	r3, r2
 80002f2:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <ESP8266_Init+0x174>)
 80002f4:	6810      	ldr	r0, [r2, #0]
 80002f6:	6018      	str	r0, [r3, #0]
 80002f8:	8892      	ldrh	r2, [r2, #4]
 80002fa:	809a      	strh	r2, [r3, #4]
	strcat(str, "\",\"");
 80002fc:	f107 030c 	add.w	r3, r7, #12
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff8f 	bl	8000224 <strlen>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	4413      	add	r3, r2
 8000310:	4a26      	ldr	r2, [pc, #152]	; (80003ac <ESP8266_Init+0x178>)
 8000312:	6810      	ldr	r0, [r2, #0]
 8000314:	6018      	str	r0, [r3, #0]
	strcat(str, Wifi_pass);
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff82 	bl	8000224 <strlen>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	4413      	add	r3, r2
 800032a:	4a21      	ldr	r2, [pc, #132]	; (80003b0 <ESP8266_Init+0x17c>)
 800032c:	461d      	mov	r5, r3
 800032e:	4614      	mov	r4, r2
 8000330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000332:	6028      	str	r0, [r5, #0]
 8000334:	6069      	str	r1, [r5, #4]
 8000336:	60aa      	str	r2, [r5, #8]
 8000338:	60eb      	str	r3, [r5, #12]
 800033a:	6820      	ldr	r0, [r4, #0]
 800033c:	6128      	str	r0, [r5, #16]
 800033e:	7923      	ldrb	r3, [r4, #4]
 8000340:	752b      	strb	r3, [r5, #20]
	strcat(str, "\"\r\n");
 8000342:	f107 030c 	add.w	r3, r7, #12
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff6c 	bl	8000224 <strlen>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	f107 030c 	add.w	r3, r7, #12
 8000354:	4413      	add	r3, r2
 8000356:	4a17      	ldr	r2, [pc, #92]	; (80003b4 <ESP8266_Init+0x180>)
 8000358:	6810      	ldr	r0, [r2, #0]
 800035a:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800035c:	f107 030c 	add.w	r3, r7, #12
 8000360:	461a      	mov	r2, r3
 8000362:	4915      	ldr	r1, [pc, #84]	; (80003b8 <ESP8266_Init+0x184>)
 8000364:	480b      	ldr	r0, [pc, #44]	; (8000394 <ESP8266_Init+0x160>)
 8000366:	f00b fd71 	bl	800be4c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800036a:	480a      	ldr	r0, [pc, #40]	; (8000394 <ESP8266_Init+0x160>)
 800036c:	f7ff ff5a 	bl	8000224 <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	b29b      	uxth	r3, r3
 8000374:	461a      	mov	r2, r3
 8000376:	4907      	ldr	r1, [pc, #28]	; (8000394 <ESP8266_Init+0x160>)
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f00a ff3f 	bl	800b1fc <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 800037e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000382:	f007 fe6f 	bl	8008064 <HAL_Delay>
}
 8000386:	bf00      	nop
 8000388:	3770      	adds	r7, #112	; 0x70
 800038a:	46bd      	mov	sp, r7
 800038c:	bdb0      	pop	{r4, r5, r7, pc}
 800038e:	bf00      	nop
 8000390:	0800c6a0 	.word	0x0800c6a0
 8000394:	200009c4 	.word	0x200009c4
 8000398:	0800c6b0 	.word	0x0800c6b0
 800039c:	0800c6bc 	.word	0x0800c6bc
 80003a0:	0800c6c4 	.word	0x0800c6c4
 80003a4:	0800c6d4 	.word	0x0800c6d4
 80003a8:	0800c6e0 	.word	0x0800c6e0
 80003ac:	0800c6e8 	.word	0x0800c6e8
 80003b0:	0800c6ec 	.word	0x0800c6ec
 80003b4:	0800c704 	.word	0x0800c704
 80003b8:	0800c708 	.word	0x0800c708

080003bc <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b0c6      	sub	sp, #280	; 0x118
 80003c0:	af02      	add	r7, sp, #8
 80003c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003ca:	6018      	str	r0, [r3, #0]
 80003cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80003d4:	6019      	str	r1, [r3, #0]
 80003d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003de:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003e0:	4a31      	ldr	r2, [pc, #196]	; (80004a8 <sendMachineData+0xec>)
 80003e2:	4932      	ldr	r1, [pc, #200]	; (80004ac <sendMachineData+0xf0>)
 80003e4:	4832      	ldr	r0, [pc, #200]	; (80004b0 <sendMachineData+0xf4>)
 80003e6:	f00b fd31 	bl	800be4c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003ea:	4831      	ldr	r0, [pc, #196]	; (80004b0 <sendMachineData+0xf4>)
 80003ec:	f7ff ff1a 	bl	8000224 <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003fc:	492c      	ldr	r1, [pc, #176]	; (80004b0 <sendMachineData+0xf4>)
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	f00a fefc 	bl	800b1fc <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 8000404:	f241 7070 	movw	r0, #6000	; 0x1770
 8000408:	f007 fe2c 	bl	8008064 <HAL_Delay>

	sprintf(local_txA,
 800040c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000410:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000414:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000418:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800041c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000420:	4924      	ldr	r1, [pc, #144]	; (80004b4 <sendMachineData+0xf8>)
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	6812      	ldr	r2, [r2, #0]
 8000428:	4923      	ldr	r1, [pc, #140]	; (80004b8 <sendMachineData+0xfc>)
 800042a:	f00b fd0f 	bl	800be4c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 800042e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff fef6 	bl	8000224 <strlen>
 8000438:	4603      	mov	r3, r0
 800043a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000446:	491d      	ldr	r1, [pc, #116]	; (80004bc <sendMachineData+0x100>)
 8000448:	4618      	mov	r0, r3
 800044a:	f00b fcff 	bl	800be4c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff fee6 	bl	8000224 <strlen>
 8000458:	4603      	mov	r3, r0
 800045a:	b29a      	uxth	r2, r3
 800045c:	f107 0110 	add.w	r1, r7, #16
 8000460:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000468:	6818      	ldr	r0, [r3, #0]
 800046a:	f00a fec7 	bl	800b1fc <HAL_UART_Transmit_IT>
	HAL_Delay(7000);
 800046e:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000472:	f007 fdf7 	bl	8008064 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000476:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fed2 	bl	8000224 <strlen>
 8000480:	4603      	mov	r3, r0
 8000482:	b29a      	uxth	r2, r3
 8000484:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000488:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800048c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	f00a feb3 	bl	800b1fc <HAL_UART_Transmit_IT>
	HAL_Delay(10000);
 8000496:	f242 7010 	movw	r0, #10000	; 0x2710
 800049a:	f007 fde3 	bl	8008064 <HAL_Delay>
}
 800049e:	bf00      	nop
 80004a0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	0800c70c 	.word	0x0800c70c
 80004ac:	0800c71c 	.word	0x0800c71c
 80004b0:	200009c4 	.word	0x200009c4
 80004b4:	0800c798 	.word	0x0800c798
 80004b8:	0800c73c 	.word	0x0800c73c
 80004bc:	0800c7ac 	.word	0x0800c7ac

080004c0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f023 030f 	bic.w	r3, r3, #15
 80004d0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	011b      	lsls	r3, r3, #4
 80004d6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004d8:	7b7b      	ldrb	r3, [r7, #13]
 80004da:	f043 030c 	orr.w	r3, r3, #12
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004e2:	7b7b      	ldrb	r3, [r7, #13]
 80004e4:	f043 0308 	orr.w	r3, r3, #8
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004ec:	7b3b      	ldrb	r3, [r7, #12]
 80004ee:	f043 030c 	orr.w	r3, r3, #12
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004f6:	7b3b      	ldrb	r3, [r7, #12]
 80004f8:	f043 0308 	orr.w	r3, r3, #8
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000500:	bf00      	nop
 8000502:	4825      	ldr	r0, [pc, #148]	; (8000598 <lcd_send_cmd+0xd8>)
 8000504:	f009 f9a7 	bl	8009856 <HAL_I2C_GetError>
 8000508:	4603      	mov	r3, r0
 800050a:	2b04      	cmp	r3, #4
 800050c:	d0f9      	beq.n	8000502 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800050e:	bf00      	nop
 8000510:	4821      	ldr	r0, [pc, #132]	; (8000598 <lcd_send_cmd+0xd8>)
 8000512:	f009 f993 	bl	800983c <HAL_I2C_GetState>
 8000516:	4603      	mov	r3, r0
 8000518:	2b20      	cmp	r3, #32
 800051a:	d1f9      	bne.n	8000510 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <lcd_send_cmd+0xdc>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d116      	bne.n	8000552 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e00f      	b.n	800054a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	3310      	adds	r3, #16
 800052e:	443b      	add	r3, r7
 8000530:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	f022 0208 	bic.w	r2, r2, #8
 800053a:	b2d2      	uxtb	r2, r2
 800053c:	3310      	adds	r3, #16
 800053e:	443b      	add	r3, r7
 8000540:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	3301      	adds	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	2b03      	cmp	r3, #3
 800054e:	d9ec      	bls.n	800052a <lcd_send_cmd+0x6a>
 8000550:	e015      	b.n	800057e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000552:	2300      	movs	r3, #0
 8000554:	73bb      	strb	r3, [r7, #14]
 8000556:	e00f      	b.n	8000578 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	3310      	adds	r3, #16
 800055c:	443b      	add	r3, r7
 800055e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	f042 0208 	orr.w	r2, r2, #8
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	3310      	adds	r3, #16
 800056c:	443b      	add	r3, r7
 800056e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000572:	7bbb      	ldrb	r3, [r7, #14]
 8000574:	3301      	adds	r3, #1
 8000576:	73bb      	strb	r3, [r7, #14]
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	2b03      	cmp	r3, #3
 800057c:	d9ec      	bls.n	8000558 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800057e:	f107 0208 	add.w	r2, r7, #8
 8000582:	2364      	movs	r3, #100	; 0x64
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2304      	movs	r3, #4
 8000588:	214e      	movs	r1, #78	; 0x4e
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <lcd_send_cmd+0xd8>)
 800058c:	f008 fcf6 	bl	8008f7c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000ce8 	.word	0x20000ce8
 800059c:	20000abe 	.word	0x20000abe

080005a0 <lcd_send_data>:

void lcd_send_data (char data) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	f023 030f 	bic.w	r3, r3, #15
 80005b0:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005b8:	7b7b      	ldrb	r3, [r7, #13]
 80005ba:	f043 030d 	orr.w	r3, r3, #13
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005c2:	7b7b      	ldrb	r3, [r7, #13]
 80005c4:	f043 0309 	orr.w	r3, r3, #9
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005cc:	7b3b      	ldrb	r3, [r7, #12]
 80005ce:	f043 030d 	orr.w	r3, r3, #13
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005d6:	7b3b      	ldrb	r3, [r7, #12]
 80005d8:	f043 0309 	orr.w	r3, r3, #9
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005e0:	bf00      	nop
 80005e2:	4825      	ldr	r0, [pc, #148]	; (8000678 <lcd_send_data+0xd8>)
 80005e4:	f009 f937 	bl	8009856 <HAL_I2C_GetError>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d0f9      	beq.n	80005e2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005ee:	bf00      	nop
 80005f0:	4821      	ldr	r0, [pc, #132]	; (8000678 <lcd_send_data+0xd8>)
 80005f2:	f009 f923 	bl	800983c <HAL_I2C_GetState>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d1f9      	bne.n	80005f0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <lcd_send_data+0xdc>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d116      	bne.n	8000632 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e00f      	b.n	800062a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	3310      	adds	r3, #16
 800060e:	443b      	add	r3, r7
 8000610:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	f022 0208 	bic.w	r2, r2, #8
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	3310      	adds	r3, #16
 800061e:	443b      	add	r3, r7
 8000620:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	3301      	adds	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d9ec      	bls.n	800060a <lcd_send_data+0x6a>
 8000630:	e015      	b.n	800065e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	73bb      	strb	r3, [r7, #14]
 8000636:	e00f      	b.n	8000658 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	3310      	adds	r3, #16
 800063c:	443b      	add	r3, r7
 800063e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	f042 0208 	orr.w	r2, r2, #8
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	3310      	adds	r3, #16
 800064c:	443b      	add	r3, r7
 800064e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	3301      	adds	r3, #1
 8000656:	73bb      	strb	r3, [r7, #14]
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	2b03      	cmp	r3, #3
 800065c:	d9ec      	bls.n	8000638 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800065e:	f107 0208 	add.w	r2, r7, #8
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2304      	movs	r3, #4
 8000668:	214e      	movs	r1, #78	; 0x4e
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <lcd_send_data+0xd8>)
 800066c:	f008 fc86 	bl	8008f7c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000ce8 	.word	0x20000ce8
 800067c:	20000abe 	.word	0x20000abe

08000680 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000688:	e006      	b.n	8000698 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	607a      	str	r2, [r7, #4]
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff84 	bl	80005a0 <lcd_send_data>
	while (*str) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f4      	bne.n	800068a <lcd_send_string+0xa>
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <lcd_init>:

void lcd_init (void) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80006ae:	2002      	movs	r0, #2
 80006b0:	f7ff ff06 	bl	80004c0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80006b4:	2028      	movs	r0, #40	; 0x28
 80006b6:	f7ff ff03 	bl	80004c0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80006ba:	200c      	movs	r0, #12
 80006bc:	f7ff ff00 	bl	80004c0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80006c0:	2080      	movs	r0, #128	; 0x80
 80006c2:	f7ff fefd 	bl	80004c0 <lcd_send_cmd>
	lcd_backlight(1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 f840 	bl	800074c <lcd_backlight>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d106      	bne.n	80006f4 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	337f      	adds	r3, #127	; 0x7f
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fee7 	bl	80004c0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80006f2:	e008      	b.n	8000706 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d105      	bne.n	8000706 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80006fa:	79bb      	ldrb	r3, [r7, #6]
 80006fc:	3b41      	subs	r3, #65	; 0x41
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fedd 	bl	80004c0 <lcd_send_cmd>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	603a      	str	r2, [r7, #0]
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	460b      	mov	r3, r1
 800071c:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800071e:	79ba      	ldrb	r2, [r7, #6]
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffd3 	bl	80006d0 <lcd_gotoxy>
	lcd_send_string(str);
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f7ff ffa8 	bl	8000680 <lcd_send_string>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcd_clear>:

void lcd_clear(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff febf 	bl	80004c0 <lcd_send_cmd>
    HAL_Delay(2);
 8000742:	2002      	movs	r0, #2
 8000744:	f007 fc8e 	bl	8008064 <HAL_Delay>

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <lcd_backlight+0x20>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff feaf 	bl	80004c0 <lcd_send_cmd>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000abe 	.word	0x20000abe

08000770 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000774:	f3bf 8f4f 	dsb	sy
}
 8000778:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <__NVIC_SystemReset+0x24>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000782:	4904      	ldr	r1, [pc, #16]	; (8000794 <__NVIC_SystemReset+0x24>)
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_SystemReset+0x28>)
 8000786:	4313      	orrs	r3, r2
 8000788:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800078a:	f3bf 8f4f 	dsb	sy
}
 800078e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <__NVIC_SystemReset+0x20>
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	05fa0004 	.word	0x05fa0004

0800079c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fd3d 	bl	8000224 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	3301      	adds	r3, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00b fa56 	bl	800bc60 <malloc>
 80007b4:	4603      	mov	r3, r0
 80007b6:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d003      	beq.n	80007c6 <copyText+0x2a>
        strcpy(result, text);
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f00b fbb7 	bl	800bf34 <strcpy>
    }
    return result;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <menu>:
        }
    }
    return result;
}

void menu(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80007d4:	2101      	movs	r1, #1
 80007d6:	488f      	ldr	r0, [pc, #572]	; (8000a14 <menu+0x244>)
 80007d8:	f008 fa14 	bl	8008c04 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	f040 808e 	bne.w	8000900 <menu+0x130>
 80007e4:	4b8c      	ldr	r3, [pc, #560]	; (8000a18 <menu+0x248>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f000 8086 	beq.w	8000900 <menu+0x130>
		menuSayac = menuSayac+1;
 80007f4:	4b89      	ldr	r3, [pc, #548]	; (8000a1c <menu+0x24c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b87      	ldr	r3, [pc, #540]	; (8000a1c <menu+0x24c>)
 80007fe:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 33) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000800:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <menu+0x24c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b21      	cmp	r3, #33	; 0x21
 8000806:	d102      	bne.n	800080e <menu+0x3e>
			menuSayac = 1;
 8000808:	4b84      	ldr	r3, [pc, #528]	; (8000a1c <menu+0x24c>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800080e:	4b83      	ldr	r3, [pc, #524]	; (8000a1c <menu+0x24c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b12      	cmp	r3, #18
 8000814:	d106      	bne.n	8000824 <menu+0x54>
 8000816:	4b82      	ldr	r3, [pc, #520]	; (8000a20 <menu+0x250>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d102      	bne.n	8000824 <menu+0x54>
			menuSayac = 21;
 800081e:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <menu+0x24c>)
 8000820:	2215      	movs	r2, #21
 8000822:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000824:	4b7d      	ldr	r3, [pc, #500]	; (8000a1c <menu+0x24c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b08      	cmp	r3, #8
 800082a:	d106      	bne.n	800083a <menu+0x6a>
 800082c:	4b7d      	ldr	r3, [pc, #500]	; (8000a24 <menu+0x254>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <menu+0x6a>
			menuSayac = 16;
 8000834:	4b79      	ldr	r3, [pc, #484]	; (8000a1c <menu+0x24c>)
 8000836:	2210      	movs	r2, #16
 8000838:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800083a:	4b78      	ldr	r3, [pc, #480]	; (8000a1c <menu+0x24c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b0d      	cmp	r3, #13
 8000840:	d106      	bne.n	8000850 <menu+0x80>
 8000842:	4b78      	ldr	r3, [pc, #480]	; (8000a24 <menu+0x254>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d102      	bne.n	8000850 <menu+0x80>
			menuSayac = 16;
 800084a:	4b74      	ldr	r3, [pc, #464]	; (8000a1c <menu+0x24c>)
 800084c:	2210      	movs	r2, #16
 800084e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000850:	4b72      	ldr	r3, [pc, #456]	; (8000a1c <menu+0x24c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b09      	cmp	r3, #9
 8000856:	d106      	bne.n	8000866 <menu+0x96>
 8000858:	4b72      	ldr	r3, [pc, #456]	; (8000a24 <menu+0x254>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d102      	bne.n	8000866 <menu+0x96>
			menuSayac = 13;
 8000860:	4b6e      	ldr	r3, [pc, #440]	; (8000a1c <menu+0x24c>)
 8000862:	220d      	movs	r2, #13
 8000864:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000866:	4b6d      	ldr	r3, [pc, #436]	; (8000a1c <menu+0x24c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b0a      	cmp	r3, #10
 800086c:	d10a      	bne.n	8000884 <menu+0xb4>
 800086e:	4b6e      	ldr	r3, [pc, #440]	; (8000a28 <menu+0x258>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d003      	beq.n	800087e <menu+0xae>
 8000876:	4b6c      	ldr	r3, [pc, #432]	; (8000a28 <menu+0x258>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d102      	bne.n	8000884 <menu+0xb4>
			menuSayac = 11;
 800087e:	4b67      	ldr	r3, [pc, #412]	; (8000a1c <menu+0x24c>)
 8000880:	220b      	movs	r2, #11
 8000882:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000884:	4b65      	ldr	r3, [pc, #404]	; (8000a1c <menu+0x24c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b0c      	cmp	r3, #12
 800088a:	d10e      	bne.n	80008aa <menu+0xda>
 800088c:	4b67      	ldr	r3, [pc, #412]	; (8000a2c <menu+0x25c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d003      	beq.n	800089c <menu+0xcc>
 8000894:	4b65      	ldr	r3, [pc, #404]	; (8000a2c <menu+0x25c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d106      	bne.n	80008aa <menu+0xda>
 800089c:	4b61      	ldr	r3, [pc, #388]	; (8000a24 <menu+0x254>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d102      	bne.n	80008aa <menu+0xda>
			menuSayac = 16;
 80008a4:	4b5d      	ldr	r3, [pc, #372]	; (8000a1c <menu+0x24c>)
 80008a6:	2210      	movs	r2, #16
 80008a8:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80008aa:	4b5c      	ldr	r3, [pc, #368]	; (8000a1c <menu+0x24c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b0c      	cmp	r3, #12
 80008b0:	d10e      	bne.n	80008d0 <menu+0x100>
 80008b2:	4b5e      	ldr	r3, [pc, #376]	; (8000a2c <menu+0x25c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d003      	beq.n	80008c2 <menu+0xf2>
 80008ba:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <menu+0x25c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d106      	bne.n	80008d0 <menu+0x100>
 80008c2:	4b58      	ldr	r3, [pc, #352]	; (8000a24 <menu+0x254>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d102      	bne.n	80008d0 <menu+0x100>
			menuSayac = 13;
 80008ca:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <menu+0x24c>)
 80008cc:	220d      	movs	r2, #13
 80008ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80008d0:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <menu+0x24c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d106      	bne.n	80008e6 <menu+0x116>
 80008d8:	4b55      	ldr	r3, [pc, #340]	; (8000a30 <menu+0x260>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d102      	bne.n	80008e6 <menu+0x116>
			menuSayac = 16;
 80008e0:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <menu+0x24c>)
 80008e2:	2210      	movs	r2, #16
 80008e4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80008e6:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <menu+0x24c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b18      	cmp	r3, #24
 80008ec:	d106      	bne.n	80008fc <menu+0x12c>
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <menu+0x250>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <menu+0x12c>
			menuSayac = 26;
 80008f6:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <menu+0x24c>)
 80008f8:	221a      	movs	r2, #26
 80008fa:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80008fc:	f004 fbd4 	bl	80050a8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000900:	2108      	movs	r1, #8
 8000902:	484c      	ldr	r0, [pc, #304]	; (8000a34 <menu+0x264>)
 8000904:	f008 f97e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d175      	bne.n	80009fa <menu+0x22a>
 800090e:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <menu+0x248>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	f083 0301 	eor.w	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d06e      	beq.n	80009fa <menu+0x22a>
		if (menuSayac <= 1) {
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <menu+0x24c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d802      	bhi.n	800092a <menu+0x15a>
			menuSayac = 33;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <menu+0x24c>)
 8000926:	2221      	movs	r2, #33	; 0x21
 8000928:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <menu+0x24c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	3b01      	subs	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <menu+0x24c>)
 8000934:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <menu+0x24c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b14      	cmp	r3, #20
 800093c:	d106      	bne.n	800094c <menu+0x17c>
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <menu+0x250>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d102      	bne.n	800094c <menu+0x17c>
			menuSayac = 17;
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <menu+0x24c>)
 8000948:	2211      	movs	r2, #17
 800094a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800094c:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <menu+0x24c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d106      	bne.n	8000962 <menu+0x192>
 8000954:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <menu+0x254>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <menu+0x192>
			menuSayac = 7;
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <menu+0x24c>)
 800095e:	2207      	movs	r2, #7
 8000960:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <menu+0x24c>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b0f      	cmp	r3, #15
 8000968:	d106      	bne.n	8000978 <menu+0x1a8>
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <menu+0x254>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d102      	bne.n	8000978 <menu+0x1a8>
			menuSayac = 12;
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <menu+0x24c>)
 8000974:	220c      	movs	r2, #12
 8000976:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <menu+0x24c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b0c      	cmp	r3, #12
 800097e:	d106      	bne.n	800098e <menu+0x1be>
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <menu+0x254>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d102      	bne.n	800098e <menu+0x1be>
			menuSayac = 8;
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <menu+0x24c>)
 800098a:	2208      	movs	r2, #8
 800098c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <menu+0x24c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b0a      	cmp	r3, #10
 8000994:	d10a      	bne.n	80009ac <menu+0x1dc>
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <menu+0x258>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d003      	beq.n	80009a6 <menu+0x1d6>
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <menu+0x258>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d102      	bne.n	80009ac <menu+0x1dc>
			menuSayac = 9;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <menu+0x24c>)
 80009a8:	2209      	movs	r2, #9
 80009aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <menu+0x24c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b0c      	cmp	r3, #12
 80009b2:	d10a      	bne.n	80009ca <menu+0x1fa>
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <menu+0x25c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d003      	beq.n	80009c4 <menu+0x1f4>
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <menu+0x25c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d102      	bne.n	80009ca <menu+0x1fa>
			menuSayac = 11;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <menu+0x24c>)
 80009c6:	220b      	movs	r2, #11
 80009c8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <menu+0x24c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d106      	bne.n	80009e0 <menu+0x210>
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <menu+0x260>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d102      	bne.n	80009e0 <menu+0x210>
			menuSayac = 14;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <menu+0x24c>)
 80009dc:	220e      	movs	r2, #14
 80009de:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <menu+0x24c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	d106      	bne.n	80009f6 <menu+0x226>
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <menu+0x250>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <menu+0x226>
			menuSayac = 23;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <menu+0x24c>)
 80009f2:	2217      	movs	r2, #23
 80009f4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80009f6:	f004 fb57 	bl	80050a8 <bekle>
	}

	if (menuSayac == 0) {
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <menu+0x24c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d134      	bne.n	8000a6c <menu+0x29c>
		if(dilSecim == 0) {
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <menu+0x268>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d122      	bne.n	8000a50 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <menu+0x26c>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2001      	movs	r0, #1
 8000a10:	e016      	b.n	8000a40 <menu+0x270>
 8000a12:	bf00      	nop
 8000a14:	40010800 	.word	0x40010800
 8000a18:	20000b5b 	.word	0x20000b5b
 8000a1c:	20000b2c 	.word	0x20000b2c
 8000a20:	20000b3b 	.word	0x20000b3b
 8000a24:	20000b34 	.word	0x20000b34
 8000a28:	20000b35 	.word	0x20000b35
 8000a2c:	20000b36 	.word	0x20000b36
 8000a30:	20000b37 	.word	0x20000b37
 8000a34:	40011000 	.word	0x40011000
 8000a38:	20000b4d 	.word	0x20000b4d
 8000a3c:	0800c840 	.word	0x0800c840
 8000a40:	f7ff fe65 	bl	800070e <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8000a44:	4a94      	ldr	r2, [pc, #592]	; (8000c98 <menu+0x4c8>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f7ff fe60 	bl	800070e <lcd_print>
 8000a4e:	e00d      	b.n	8000a6c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000a50:	4b92      	ldr	r3, [pc, #584]	; (8000c9c <menu+0x4cc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d109      	bne.n	8000a6c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000a58:	4a91      	ldr	r2, [pc, #580]	; (8000ca0 <menu+0x4d0>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff fe56 	bl	800070e <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000a62:	4a90      	ldr	r2, [pc, #576]	; (8000ca4 <menu+0x4d4>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff fe51 	bl	800070e <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8000a6c:	4b8e      	ldr	r3, [pc, #568]	; (8000ca8 <menu+0x4d8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	f040 82b5 	bne.w	8000fe0 <menu+0x810>
		if(dilSecim == 0) {
 8000a76:	4b89      	ldr	r3, [pc, #548]	; (8000c9c <menu+0x4cc>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d105      	bne.n	8000a8a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8000a7e:	4a8b      	ldr	r2, [pc, #556]	; (8000cac <menu+0x4dc>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff fe43 	bl	800070e <lcd_print>
 8000a88:	e008      	b.n	8000a9c <menu+0x2cc>
		} else if(dilSecim == 1) {
 8000a8a:	4b84      	ldr	r3, [pc, #528]	; (8000c9c <menu+0x4cc>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d104      	bne.n	8000a9c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000a92:	4a87      	ldr	r2, [pc, #540]	; (8000cb0 <menu+0x4e0>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fe39 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8000a9c:	4b85      	ldr	r3, [pc, #532]	; (8000cb4 <menu+0x4e4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d123      	bne.n	8000aec <menu+0x31c>
			if(dilSecim == 0) {
 8000aa4:	4b7d      	ldr	r3, [pc, #500]	; (8000c9c <menu+0x4cc>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8000aac:	4a82      	ldr	r2, [pc, #520]	; (8000cb8 <menu+0x4e8>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff fe2c 	bl	800070e <lcd_print>
 8000ab6:	e008      	b.n	8000aca <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000ab8:	4b78      	ldr	r3, [pc, #480]	; (8000c9c <menu+0x4cc>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d104      	bne.n	8000aca <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000ac0:	4a7e      	ldr	r2, [pc, #504]	; (8000cbc <menu+0x4ec>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff fe22 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8000aca:	4a7d      	ldr	r2, [pc, #500]	; (8000cc0 <menu+0x4f0>)
 8000acc:	210f      	movs	r1, #15
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f7ff fe1d 	bl	800070e <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000ad4:	4b7b      	ldr	r3, [pc, #492]	; (8000cc4 <menu+0x4f4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	220a      	movs	r2, #10
 8000ada:	497b      	ldr	r1, [pc, #492]	; (8000cc8 <menu+0x4f8>)
 8000adc:	4618      	mov	r0, r3
 8000ade:	f00b f8bd 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 8000ae2:	4a79      	ldr	r2, [pc, #484]	; (8000cc8 <menu+0x4f8>)
 8000ae4:	210e      	movs	r1, #14
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f7ff fe11 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000aec:	4b71      	ldr	r3, [pc, #452]	; (8000cb4 <menu+0x4e4>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d123      	bne.n	8000b3c <menu+0x36c>
			if(dilSecim == 0) {
 8000af4:	4b69      	ldr	r3, [pc, #420]	; (8000c9c <menu+0x4cc>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d105      	bne.n	8000b08 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8000afc:	4a73      	ldr	r2, [pc, #460]	; (8000ccc <menu+0x4fc>)
 8000afe:	2101      	movs	r1, #1
 8000b00:	2002      	movs	r0, #2
 8000b02:	f7ff fe04 	bl	800070e <lcd_print>
 8000b06:	e008      	b.n	8000b1a <menu+0x34a>
			} else if(dilSecim == 1) {
 8000b08:	4b64      	ldr	r3, [pc, #400]	; (8000c9c <menu+0x4cc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d104      	bne.n	8000b1a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8000b10:	4a6f      	ldr	r2, [pc, #444]	; (8000cd0 <menu+0x500>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff fdfa 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b1a:	4a6e      	ldr	r2, [pc, #440]	; (8000cd4 <menu+0x504>)
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff fdf5 	bl	800070e <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000b24:	4b6c      	ldr	r3, [pc, #432]	; (8000cd8 <menu+0x508>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	220a      	movs	r2, #10
 8000b2a:	4967      	ldr	r1, [pc, #412]	; (8000cc8 <menu+0x4f8>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f00b f895 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 8000b32:	4a65      	ldr	r2, [pc, #404]	; (8000cc8 <menu+0x4f8>)
 8000b34:	210e      	movs	r1, #14
 8000b36:	2002      	movs	r0, #2
 8000b38:	f7ff fde9 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8000b3c:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <menu+0x4e4>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d123      	bne.n	8000b8c <menu+0x3bc>
			if(dilSecim == 0) {
 8000b44:	4b55      	ldr	r3, [pc, #340]	; (8000c9c <menu+0x4cc>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8000b4c:	4a63      	ldr	r2, [pc, #396]	; (8000cdc <menu+0x50c>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff fddc 	bl	800070e <lcd_print>
 8000b56:	e008      	b.n	8000b6a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000b58:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <menu+0x4cc>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d104      	bne.n	8000b6a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000b60:	4a5f      	ldr	r2, [pc, #380]	; (8000ce0 <menu+0x510>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff fdd2 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b6a:	4a5a      	ldr	r2, [pc, #360]	; (8000cd4 <menu+0x504>)
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f7ff fdcd 	bl	800070e <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000b74:	4b5b      	ldr	r3, [pc, #364]	; (8000ce4 <menu+0x514>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	220a      	movs	r2, #10
 8000b7a:	4953      	ldr	r1, [pc, #332]	; (8000cc8 <menu+0x4f8>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f00b f86d 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 8000b82:	4a51      	ldr	r2, [pc, #324]	; (8000cc8 <menu+0x4f8>)
 8000b84:	210e      	movs	r1, #14
 8000b86:	2002      	movs	r0, #2
 8000b88:	f7ff fdc1 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000b8c:	4b49      	ldr	r3, [pc, #292]	; (8000cb4 <menu+0x4e4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d123      	bne.n	8000bdc <menu+0x40c>
			if(dilSecim == 0) {
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <menu+0x4cc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d105      	bne.n	8000ba8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8000b9c:	4a52      	ldr	r2, [pc, #328]	; (8000ce8 <menu+0x518>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff fdb4 	bl	800070e <lcd_print>
 8000ba6:	e008      	b.n	8000bba <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <menu+0x4cc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d104      	bne.n	8000bba <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000bb0:	4a4e      	ldr	r2, [pc, #312]	; (8000cec <menu+0x51c>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f7ff fdaa 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <menu+0x504>)
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff fda5 	bl	800070e <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000bc4:	4b4a      	ldr	r3, [pc, #296]	; (8000cf0 <menu+0x520>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	220a      	movs	r2, #10
 8000bca:	493f      	ldr	r1, [pc, #252]	; (8000cc8 <menu+0x4f8>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00b f845 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 8000bd2:	4a3d      	ldr	r2, [pc, #244]	; (8000cc8 <menu+0x4f8>)
 8000bd4:	210e      	movs	r1, #14
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f7ff fd99 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <menu+0x4e4>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d123      	bne.n	8000c2c <menu+0x45c>
			if(dilSecim == 0) {
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <menu+0x4cc>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d105      	bne.n	8000bf8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8000bec:	4a41      	ldr	r2, [pc, #260]	; (8000cf4 <menu+0x524>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f7ff fd8c 	bl	800070e <lcd_print>
 8000bf6:	e008      	b.n	8000c0a <menu+0x43a>
			} else if(dilSecim == 1) {
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <menu+0x4cc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d104      	bne.n	8000c0a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8000c00:	4a3d      	ldr	r2, [pc, #244]	; (8000cf8 <menu+0x528>)
 8000c02:	2101      	movs	r1, #1
 8000c04:	2002      	movs	r0, #2
 8000c06:	f7ff fd82 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000c0a:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <menu+0x504>)
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f7ff fd7d 	bl	800070e <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000c14:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <menu+0x52c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	220a      	movs	r2, #10
 8000c1a:	492b      	ldr	r1, [pc, #172]	; (8000cc8 <menu+0x4f8>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00b f81d 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <menu+0x4f8>)
 8000c24:	210e      	movs	r1, #14
 8000c26:	2002      	movs	r0, #2
 8000c28:	f7ff fd71 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <menu+0x4e4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b05      	cmp	r3, #5
 8000c32:	d123      	bne.n	8000c7c <menu+0x4ac>
			if(dilSecim == 0) {
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <menu+0x4cc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d105      	bne.n	8000c48 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8000c3c:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <menu+0x530>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2002      	movs	r0, #2
 8000c42:	f7ff fd64 	bl	800070e <lcd_print>
 8000c46:	e008      	b.n	8000c5a <menu+0x48a>
			} else if(dilSecim == 1) {
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <menu+0x4cc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d104      	bne.n	8000c5a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000c50:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <menu+0x534>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	2002      	movs	r0, #2
 8000c56:	f7ff fd5a 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <menu+0x504>)
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fd55 	bl	800070e <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <menu+0x538>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	220a      	movs	r2, #10
 8000c6a:	4917      	ldr	r1, [pc, #92]	; (8000cc8 <menu+0x4f8>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f00a fff5 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 8000c72:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <menu+0x4f8>)
 8000c74:	210e      	movs	r1, #14
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff fd49 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <menu+0x4e4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b06      	cmp	r3, #6
 8000c82:	d15f      	bne.n	8000d44 <menu+0x574>
			if(dilSecim == 0) {
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <menu+0x4cc>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d141      	bne.n	8000d10 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <menu+0x53c>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2002      	movs	r0, #2
 8000c92:	f7ff fd3c 	bl	800070e <lcd_print>
 8000c96:	e044      	b.n	8000d22 <menu+0x552>
 8000c98:	0800c854 	.word	0x0800c854
 8000c9c:	20000b4d 	.word	0x20000b4d
 8000ca0:	0800c868 	.word	0x0800c868
 8000ca4:	0800c87c 	.word	0x0800c87c
 8000ca8:	20000b2c 	.word	0x20000b2c
 8000cac:	0800c890 	.word	0x0800c890
 8000cb0:	0800c8a4 	.word	0x0800c8a4
 8000cb4:	20000b2e 	.word	0x20000b2e
 8000cb8:	0800c8b8 	.word	0x0800c8b8
 8000cbc:	0800c8c8 	.word	0x0800c8c8
 8000cc0:	0800c8d8 	.word	0x0800c8d8
 8000cc4:	20000b4e 	.word	0x20000b4e
 8000cc8:	20000b00 	.word	0x20000b00
 8000ccc:	0800c8dc 	.word	0x0800c8dc
 8000cd0:	0800c8ec 	.word	0x0800c8ec
 8000cd4:	0800c8fc 	.word	0x0800c8fc
 8000cd8:	20000b4f 	.word	0x20000b4f
 8000cdc:	0800c900 	.word	0x0800c900
 8000ce0:	0800c910 	.word	0x0800c910
 8000ce4:	20000b50 	.word	0x20000b50
 8000ce8:	0800c920 	.word	0x0800c920
 8000cec:	0800c930 	.word	0x0800c930
 8000cf0:	20000b51 	.word	0x20000b51
 8000cf4:	0800c940 	.word	0x0800c940
 8000cf8:	0800c950 	.word	0x0800c950
 8000cfc:	20000b52 	.word	0x20000b52
 8000d00:	0800c960 	.word	0x0800c960
 8000d04:	0800c970 	.word	0x0800c970
 8000d08:	20000b53 	.word	0x20000b53
 8000d0c:	0800c980 	.word	0x0800c980
			} else if(dilSecim == 1) {
 8000d10:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <menu+0x680>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d104      	bne.n	8000d22 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000d18:	4a4e      	ldr	r2, [pc, #312]	; (8000e54 <menu+0x684>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fcf6 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d22:	4a4d      	ldr	r2, [pc, #308]	; (8000e58 <menu+0x688>)
 8000d24:	210f      	movs	r1, #15
 8000d26:	2002      	movs	r0, #2
 8000d28:	f7ff fcf1 	bl	800070e <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000d2c:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <menu+0x68c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	220a      	movs	r2, #10
 8000d32:	494b      	ldr	r1, [pc, #300]	; (8000e60 <menu+0x690>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f00a ff91 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 8000d3a:	4a49      	ldr	r2, [pc, #292]	; (8000e60 <menu+0x690>)
 8000d3c:	210e      	movs	r1, #14
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fce5 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000d44:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <menu+0x694>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b07      	cmp	r3, #7
 8000d4a:	d123      	bne.n	8000d94 <menu+0x5c4>
			if(dilSecim == 0) {
 8000d4c:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <menu+0x680>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000d54:	4a44      	ldr	r2, [pc, #272]	; (8000e68 <menu+0x698>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fcd8 	bl	800070e <lcd_print>
 8000d5e:	e008      	b.n	8000d72 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000d60:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <menu+0x680>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d104      	bne.n	8000d72 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000d68:	4a40      	ldr	r2, [pc, #256]	; (8000e6c <menu+0x69c>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f7ff fcce 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d72:	4a39      	ldr	r2, [pc, #228]	; (8000e58 <menu+0x688>)
 8000d74:	210f      	movs	r1, #15
 8000d76:	2002      	movs	r0, #2
 8000d78:	f7ff fcc9 	bl	800070e <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000d7c:	4b3c      	ldr	r3, [pc, #240]	; (8000e70 <menu+0x6a0>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	220a      	movs	r2, #10
 8000d82:	4937      	ldr	r1, [pc, #220]	; (8000e60 <menu+0x690>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00a ff69 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 8000d8a:	4a35      	ldr	r2, [pc, #212]	; (8000e60 <menu+0x690>)
 8000d8c:	210e      	movs	r1, #14
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f7ff fcbd 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000d94:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <menu+0x694>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d123      	bne.n	8000de4 <menu+0x614>
			if(dilSecim == 0) {
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <menu+0x680>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000da4:	4a33      	ldr	r2, [pc, #204]	; (8000e74 <menu+0x6a4>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	2002      	movs	r0, #2
 8000daa:	f7ff fcb0 	bl	800070e <lcd_print>
 8000dae:	e008      	b.n	8000dc2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <menu+0x680>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d104      	bne.n	8000dc2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000db8:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <menu+0x6a8>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f7ff fca6 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000dc2:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <menu+0x688>)
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f7ff fca1 	bl	800070e <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <menu+0x6ac>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	4923      	ldr	r1, [pc, #140]	; (8000e60 <menu+0x690>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f00a ff41 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 8000dda:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <menu+0x690>)
 8000ddc:	210e      	movs	r1, #14
 8000dde:	2002      	movs	r0, #2
 8000de0:	f7ff fc95 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <menu+0x694>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b09      	cmp	r3, #9
 8000dea:	d123      	bne.n	8000e34 <menu+0x664>
			if(dilSecim == 0) {
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <menu+0x680>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d105      	bne.n	8000e00 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000df4:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <menu+0x6b0>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f7ff fc88 	bl	800070e <lcd_print>
 8000dfe:	e008      	b.n	8000e12 <menu+0x642>
			} else if(dilSecim == 1) {
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <menu+0x680>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d104      	bne.n	8000e12 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <menu+0x6b4>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fc7e 	bl	800070e <lcd_print>
			}
			lcd_print(2, 16, " ");
 8000e12:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <menu+0x6b8>)
 8000e14:	2110      	movs	r1, #16
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff fc79 	bl	800070e <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <menu+0x6bc>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	220a      	movs	r2, #10
 8000e22:	490f      	ldr	r1, [pc, #60]	; (8000e60 <menu+0x690>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00a ff19 	bl	800bc5c <itoa>
			lcd_print(2, 15, snum);
 8000e2a:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <menu+0x690>)
 8000e2c:	210f      	movs	r1, #15
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f7ff fc6d 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <menu+0x694>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d134      	bne.n	8000ea6 <menu+0x6d6>
			if(dilSecim == 0) {
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <menu+0x680>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d127      	bne.n	8000e94 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <menu+0x6c0>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff fc60 	bl	800070e <lcd_print>
 8000e4e:	e02a      	b.n	8000ea6 <menu+0x6d6>
 8000e50:	20000b4d 	.word	0x20000b4d
 8000e54:	0800c990 	.word	0x0800c990
 8000e58:	0800c8fc 	.word	0x0800c8fc
 8000e5c:	20000b54 	.word	0x20000b54
 8000e60:	20000b00 	.word	0x20000b00
 8000e64:	20000b2e 	.word	0x20000b2e
 8000e68:	0800c9a0 	.word	0x0800c9a0
 8000e6c:	0800c9b0 	.word	0x0800c9b0
 8000e70:	20000b55 	.word	0x20000b55
 8000e74:	0800c9c0 	.word	0x0800c9c0
 8000e78:	0800c9d0 	.word	0x0800c9d0
 8000e7c:	20000b56 	.word	0x20000b56
 8000e80:	0800c9e0 	.word	0x0800c9e0
 8000e84:	0800c9f0 	.word	0x0800c9f0
 8000e88:	0800ca00 	.word	0x0800ca00
 8000e8c:	20000b57 	.word	0x20000b57
 8000e90:	0800ca04 	.word	0x0800ca04
			} else if(dilSecim == 1) {
 8000e94:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <menu+0x8d0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d104      	bne.n	8000ea6 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000e9c:	4a81      	ldr	r2, [pc, #516]	; (80010a4 <menu+0x8d4>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f7ff fc34 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	487f      	ldr	r0, [pc, #508]	; (80010a8 <menu+0x8d8>)
 8000eaa:	f007 feab 	bl	8008c04 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d119      	bne.n	8000ee8 <menu+0x718>
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <menu+0x8dc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f083 0301 	eor.w	r3, r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d012      	beq.n	8000ee8 <menu+0x718>
 8000ec2:	4b7b      	ldr	r3, [pc, #492]	; (80010b0 <menu+0x8e0>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10e      	bne.n	8000ee8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000eca:	4b7a      	ldr	r3, [pc, #488]	; (80010b4 <menu+0x8e4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b78      	ldr	r3, [pc, #480]	; (80010b4 <menu+0x8e4>)
 8000ed4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000ed6:	4b77      	ldr	r3, [pc, #476]	; (80010b4 <menu+0x8e4>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	d902      	bls.n	8000ee4 <menu+0x714>
				hataGostermeSirasi = 0;
 8000ede:	4b75      	ldr	r3, [pc, #468]	; (80010b4 <menu+0x8e4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000ee4:	f004 f8e0 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ee8:	2104      	movs	r1, #4
 8000eea:	486f      	ldr	r0, [pc, #444]	; (80010a8 <menu+0x8d8>)
 8000eec:	f007 fe8a 	bl	8008c04 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d119      	bne.n	8000f2a <menu+0x75a>
 8000ef6:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <menu+0x8dc>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	f083 0301 	eor.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d012      	beq.n	8000f2a <menu+0x75a>
 8000f04:	4b6a      	ldr	r3, [pc, #424]	; (80010b0 <menu+0x8e0>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10e      	bne.n	8000f2a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000f0c:	4b69      	ldr	r3, [pc, #420]	; (80010b4 <menu+0x8e4>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <menu+0x8e4>)
 8000f16:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000f18:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <menu+0x8e4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b0b      	cmp	r3, #11
 8000f1e:	d902      	bls.n	8000f26 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8000f20:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <menu+0x8e4>)
 8000f22:	220a      	movs	r2, #10
 8000f24:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000f26:	f004 f8bf 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	485e      	ldr	r0, [pc, #376]	; (80010a8 <menu+0x8d8>)
 8000f2e:	f007 fe69 	bl	8008c04 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d153      	bne.n	8000fe0 <menu+0x810>
 8000f38:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <menu+0x8dc>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	f083 0301 	eor.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d04c      	beq.n	8000fe0 <menu+0x810>
 8000f46:	4b5b      	ldr	r3, [pc, #364]	; (80010b4 <menu+0x8e4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d148      	bne.n	8000fe0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8000f4e:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <menu+0x8e8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	4b59      	ldr	r3, [pc, #356]	; (80010bc <menu+0x8ec>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000f5c:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <menu+0x8f0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	4b56      	ldr	r3, [pc, #344]	; (80010bc <menu+0x8ec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000f6a:	4b56      	ldr	r3, [pc, #344]	; (80010c4 <menu+0x8f4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	4b52      	ldr	r3, [pc, #328]	; (80010bc <menu+0x8ec>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000f78:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <menu+0x8f8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <menu+0x8ec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000f86:	4b51      	ldr	r3, [pc, #324]	; (80010cc <menu+0x8fc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <menu+0x8ec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000f94:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <menu+0x900>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	4b48      	ldr	r3, [pc, #288]	; (80010bc <menu+0x8ec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <menu+0x904>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	4b44      	ldr	r3, [pc, #272]	; (80010bc <menu+0x8ec>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <menu+0x908>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <menu+0x8ec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000fbe:	4b47      	ldr	r3, [pc, #284]	; (80010dc <menu+0x90c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <menu+0x8ec>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000fcc:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <menu+0x910>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <menu+0x8ec>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000fda:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <menu+0x914>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000fe0:	4b41      	ldr	r3, [pc, #260]	; (80010e8 <menu+0x918>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	f040 80fc 	bne.w	80011e2 <menu+0xa12>
		if(dilSecim == 0) {
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <menu+0x8d0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000ff2:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <menu+0x91c>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff fb89 	bl	800070e <lcd_print>
 8000ffc:	e008      	b.n	8001010 <menu+0x840>
		} else if(dilSecim == 1) {
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <menu+0x8d0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d104      	bne.n	8001010 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001006:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <menu+0x920>)
 8001008:	2101      	movs	r1, #1
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff fb7f 	bl	800070e <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <menu+0x8e0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d003      	beq.n	8001020 <menu+0x850>
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <menu+0x8e0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d112      	bne.n	8001046 <menu+0x876>
			if(dilSecim == 0) {
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <menu+0x8d0>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001028:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <menu+0x924>)
 800102a:	2101      	movs	r1, #1
 800102c:	2002      	movs	r0, #2
 800102e:	f7ff fb6e 	bl	800070e <lcd_print>
 8001032:	e008      	b.n	8001046 <menu+0x876>
			} else if(dilSecim == 1) {
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <menu+0x8d0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d104      	bne.n	8001046 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 800103c:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <menu+0x928>)
 800103e:	2101      	movs	r1, #1
 8001040:	2002      	movs	r0, #2
 8001042:	f7ff fb64 	bl	800070e <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <menu+0x92c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d116      	bne.n	800107c <menu+0x8ac>
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <menu+0x8e0>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d112      	bne.n	800107c <menu+0x8ac>
			if(dilSecim == 0) {
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <menu+0x8d0>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d105      	bne.n	800106a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <menu+0x930>)
 8001060:	2101      	movs	r1, #1
 8001062:	2002      	movs	r0, #2
 8001064:	f7ff fb53 	bl	800070e <lcd_print>
 8001068:	e008      	b.n	800107c <menu+0x8ac>
			} else if(dilSecim == 1) {
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <menu+0x8d0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d104      	bne.n	800107c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001072:	4a24      	ldr	r2, [pc, #144]	; (8001104 <menu+0x934>)
 8001074:	2101      	movs	r1, #1
 8001076:	2002      	movs	r0, #2
 8001078:	f7ff fb49 	bl	800070e <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <menu+0x92c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d14c      	bne.n	800111e <menu+0x94e>
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <menu+0x8e0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d148      	bne.n	800111e <menu+0x94e>
			if(dilSecim == 0) {
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <menu+0x8d0>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d13b      	bne.n	800110c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <menu+0x938>)
 8001096:	2101      	movs	r1, #1
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff fb38 	bl	800070e <lcd_print>
 800109e:	e03e      	b.n	800111e <menu+0x94e>
 80010a0:	20000b4d 	.word	0x20000b4d
 80010a4:	0800ca18 	.word	0x0800ca18
 80010a8:	40010800 	.word	0x40010800
 80010ac:	20000b5b 	.word	0x20000b5b
 80010b0:	20000b3b 	.word	0x20000b3b
 80010b4:	20000b2e 	.word	0x20000b2e
 80010b8:	20000b4e 	.word	0x20000b4e
 80010bc:	20000ac0 	.word	0x20000ac0
 80010c0:	20000b4f 	.word	0x20000b4f
 80010c4:	20000b50 	.word	0x20000b50
 80010c8:	20000b51 	.word	0x20000b51
 80010cc:	20000b52 	.word	0x20000b52
 80010d0:	20000b53 	.word	0x20000b53
 80010d4:	20000b54 	.word	0x20000b54
 80010d8:	20000b55 	.word	0x20000b55
 80010dc:	20000b56 	.word	0x20000b56
 80010e0:	20000b57 	.word	0x20000b57
 80010e4:	20000b58 	.word	0x20000b58
 80010e8:	20000b2c 	.word	0x20000b2c
 80010ec:	0800ca2c 	.word	0x0800ca2c
 80010f0:	0800ca40 	.word	0x0800ca40
 80010f4:	0800ca54 	.word	0x0800ca54
 80010f8:	0800ca68 	.word	0x0800ca68
 80010fc:	20000b2d 	.word	0x20000b2d
 8001100:	0800ca7c 	.word	0x0800ca7c
 8001104:	0800ca8c 	.word	0x0800ca8c
 8001108:	0800ca9c 	.word	0x0800ca9c
			} else if(dilSecim == 1) {
 800110c:	4b98      	ldr	r3, [pc, #608]	; (8001370 <menu+0xba0>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d104      	bne.n	800111e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001114:	4a97      	ldr	r2, [pc, #604]	; (8001374 <menu+0xba4>)
 8001116:	2101      	movs	r1, #1
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff faf8 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800111e:	2102      	movs	r1, #2
 8001120:	4895      	ldr	r0, [pc, #596]	; (8001378 <menu+0xba8>)
 8001122:	f007 fd6f 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d119      	bne.n	8001160 <menu+0x990>
 800112c:	4b93      	ldr	r3, [pc, #588]	; (800137c <menu+0xbac>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d012      	beq.n	8001160 <menu+0x990>
 800113a:	4b91      	ldr	r3, [pc, #580]	; (8001380 <menu+0xbb0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10e      	bne.n	8001160 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001142:	4b90      	ldr	r3, [pc, #576]	; (8001384 <menu+0xbb4>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b8e      	ldr	r3, [pc, #568]	; (8001384 <menu+0xbb4>)
 800114c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 800114e:	4b8d      	ldr	r3, [pc, #564]	; (8001384 <menu+0xbb4>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d902      	bls.n	800115c <menu+0x98c>
				calismaSekli = 0;
 8001156:	4b8b      	ldr	r3, [pc, #556]	; (8001384 <menu+0xbb4>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800115c:	f003 ffa4 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001160:	2104      	movs	r1, #4
 8001162:	4885      	ldr	r0, [pc, #532]	; (8001378 <menu+0xba8>)
 8001164:	f007 fd4e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d119      	bne.n	80011a2 <menu+0x9d2>
 800116e:	4b83      	ldr	r3, [pc, #524]	; (800137c <menu+0xbac>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f083 0301 	eor.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d012      	beq.n	80011a2 <menu+0x9d2>
 800117c:	4b80      	ldr	r3, [pc, #512]	; (8001380 <menu+0xbb0>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10e      	bne.n	80011a2 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001184:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <menu+0xbb4>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <menu+0xbb4>)
 800118e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001190:	4b7c      	ldr	r3, [pc, #496]	; (8001384 <menu+0xbb4>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <menu+0x9ce>
	    		calismaSekli = 1;
 8001198:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <menu+0xbb4>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800119e:	f003 ff83 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80011a2:	2108      	movs	r1, #8
 80011a4:	4874      	ldr	r0, [pc, #464]	; (8001378 <menu+0xba8>)
 80011a6:	f007 fd2d 	bl	8008c04 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d118      	bne.n	80011e2 <menu+0xa12>
 80011b0:	4b72      	ldr	r3, [pc, #456]	; (800137c <menu+0xbac>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d011      	beq.n	80011e2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 80011be:	4b71      	ldr	r3, [pc, #452]	; (8001384 <menu+0xbb4>)
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	4b71      	ldr	r3, [pc, #452]	; (8001388 <menu+0xbb8>)
 80011c4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80011c6:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <menu+0xbb4>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d106      	bne.n	80011dc <menu+0xa0c>
				altLimit = 1;
 80011ce:	4b6f      	ldr	r3, [pc, #444]	; (800138c <menu+0xbbc>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80011d4:	4b6d      	ldr	r3, [pc, #436]	; (800138c <menu+0xbbc>)
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <menu+0xbb8>)
 80011da:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80011dc:	4b6c      	ldr	r3, [pc, #432]	; (8001390 <menu+0xbc0>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 80011e2:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <menu+0xbc4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	f040 8083 	bne.w	80012f2 <menu+0xb22>
		if(dilSecim == 0) {
 80011ec:	4b60      	ldr	r3, [pc, #384]	; (8001370 <menu+0xba0>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d105      	bne.n	8001200 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 80011f4:	4a68      	ldr	r2, [pc, #416]	; (8001398 <menu+0xbc8>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff fa88 	bl	800070e <lcd_print>
 80011fe:	e008      	b.n	8001212 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <menu+0xba0>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d104      	bne.n	8001212 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001208:	4a64      	ldr	r2, [pc, #400]	; (800139c <menu+0xbcc>)
 800120a:	2101      	movs	r1, #1
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fa7e 	bl	800070e <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001212:	4b63      	ldr	r3, [pc, #396]	; (80013a0 <menu+0xbd0>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d113      	bne.n	8001242 <menu+0xa72>
			if(dilSecim == 0) {
 800121a:	4b55      	ldr	r3, [pc, #340]	; (8001370 <menu+0xba0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d105      	bne.n	800122e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001222:	4a60      	ldr	r2, [pc, #384]	; (80013a4 <menu+0xbd4>)
 8001224:	2101      	movs	r1, #1
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff fa71 	bl	800070e <lcd_print>
 800122c:	e012      	b.n	8001254 <menu+0xa84>
			} else if(dilSecim == 1) {
 800122e:	4b50      	ldr	r3, [pc, #320]	; (8001370 <menu+0xba0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10e      	bne.n	8001254 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001236:	4a5c      	ldr	r2, [pc, #368]	; (80013a8 <menu+0xbd8>)
 8001238:	2101      	movs	r1, #1
 800123a:	2002      	movs	r0, #2
 800123c:	f7ff fa67 	bl	800070e <lcd_print>
 8001240:	e008      	b.n	8001254 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001242:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <menu+0xbd0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d104      	bne.n	8001254 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 800124a:	4a58      	ldr	r2, [pc, #352]	; (80013ac <menu+0xbdc>)
 800124c:	2101      	movs	r1, #1
 800124e:	2002      	movs	r0, #2
 8001250:	f7ff fa5d 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001254:	2102      	movs	r1, #2
 8001256:	4848      	ldr	r0, [pc, #288]	; (8001378 <menu+0xba8>)
 8001258:	f007 fcd4 	bl	8008c04 <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	2b01      	cmp	r3, #1
 8001260:	d115      	bne.n	800128e <menu+0xabe>
 8001262:	4b46      	ldr	r3, [pc, #280]	; (800137c <menu+0xbac>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f083 0301 	eor.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00e      	beq.n	800128e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001270:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <menu+0xbd0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <menu+0xbd0>)
 800127a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800127c:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <menu+0xbd0>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d902      	bls.n	800128a <menu+0xaba>
				emniyetCercevesi = 0;
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <menu+0xbd0>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800128a:	f003 ff0d 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800128e:	2104      	movs	r1, #4
 8001290:	4839      	ldr	r0, [pc, #228]	; (8001378 <menu+0xba8>)
 8001292:	f007 fcb7 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d115      	bne.n	80012c8 <menu+0xaf8>
 800129c:	4b37      	ldr	r3, [pc, #220]	; (800137c <menu+0xbac>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f083 0301 	eor.w	r3, r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <menu+0xbd0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <menu+0xbd0>)
 80012b4:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <menu+0xbd0>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <menu+0xbd0>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80012c4:	f003 fef0 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80012c8:	2108      	movs	r1, #8
 80012ca:	482b      	ldr	r0, [pc, #172]	; (8001378 <menu+0xba8>)
 80012cc:	f007 fc9a 	bl	8008c04 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d10d      	bne.n	80012f2 <menu+0xb22>
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <menu+0xbac>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	f083 0301 	eor.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <menu+0xbd0>)
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <menu+0xbb8>)
 80012ea:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <menu+0xbc0>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <menu+0xbc4>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	f040 80ba 	bne.w	8001470 <menu+0xca0>
		if(dilSecim == 0) {
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <menu+0xba0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001304:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <menu+0xbe0>)
 8001306:	2101      	movs	r1, #1
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff fa00 	bl	800070e <lcd_print>
 800130e:	e008      	b.n	8001322 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <menu+0xba0>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d104      	bne.n	8001322 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001318:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <menu+0xbe4>)
 800131a:	2101      	movs	r1, #1
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff f9f6 	bl	800070e <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <menu+0xbe8>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d113      	bne.n	8001352 <menu+0xb82>
			if(dilSecim == 0) {
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <menu+0xba0>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d105      	bne.n	800133e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001332:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <menu+0xbd4>)
 8001334:	2101      	movs	r1, #1
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff f9e9 	bl	800070e <lcd_print>
 800133c:	e049      	b.n	80013d2 <menu+0xc02>
			} else if(dilSecim == 1) {
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <menu+0xba0>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d145      	bne.n	80013d2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <menu+0xbd8>)
 8001348:	2101      	movs	r1, #1
 800134a:	2002      	movs	r0, #2
 800134c:	f7ff f9df 	bl	800070e <lcd_print>
 8001350:	e03f      	b.n	80013d2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <menu+0xbe8>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d13b      	bne.n	80013d2 <menu+0xc02>
			if(dilSecim == 0) {
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <menu+0xba0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12e      	bne.n	80013c0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <menu+0xbec>)
 8001364:	2101      	movs	r1, #1
 8001366:	2002      	movs	r0, #2
 8001368:	f7ff f9d1 	bl	800070e <lcd_print>
 800136c:	e031      	b.n	80013d2 <menu+0xc02>
 800136e:	bf00      	nop
 8001370:	20000b4d 	.word	0x20000b4d
 8001374:	0800caac 	.word	0x0800caac
 8001378:	40010800 	.word	0x40010800
 800137c:	20000b5b 	.word	0x20000b5b
 8001380:	20000b3b 	.word	0x20000b3b
 8001384:	20000b2d 	.word	0x20000b2d
 8001388:	20000ac0 	.word	0x20000ac0
 800138c:	20000b32 	.word	0x20000b32
 8001390:	20000b58 	.word	0x20000b58
 8001394:	20000b2c 	.word	0x20000b2c
 8001398:	0800cabc 	.word	0x0800cabc
 800139c:	0800cad0 	.word	0x0800cad0
 80013a0:	20000b30 	.word	0x20000b30
 80013a4:	0800cae4 	.word	0x0800cae4
 80013a8:	0800caf8 	.word	0x0800caf8
 80013ac:	0800cb0c 	.word	0x0800cb0c
 80013b0:	0800cb1c 	.word	0x0800cb1c
 80013b4:	0800cb30 	.word	0x0800cb30
 80013b8:	20000b31 	.word	0x20000b31
 80013bc:	0800cb44 	.word	0x0800cb44
			} else if(dilSecim == 1) {
 80013c0:	4b92      	ldr	r3, [pc, #584]	; (800160c <menu+0xe3c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d104      	bne.n	80013d2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80013c8:	4a91      	ldr	r2, [pc, #580]	; (8001610 <menu+0xe40>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	2002      	movs	r0, #2
 80013ce:	f7ff f99e 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80013d2:	2102      	movs	r1, #2
 80013d4:	488f      	ldr	r0, [pc, #572]	; (8001614 <menu+0xe44>)
 80013d6:	f007 fc15 	bl	8008c04 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d115      	bne.n	800140c <menu+0xc3c>
 80013e0:	4b8d      	ldr	r3, [pc, #564]	; (8001618 <menu+0xe48>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00e      	beq.n	800140c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80013ee:	4b8b      	ldr	r3, [pc, #556]	; (800161c <menu+0xe4c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b89      	ldr	r3, [pc, #548]	; (800161c <menu+0xe4c>)
 80013f8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80013fa:	4b88      	ldr	r3, [pc, #544]	; (800161c <menu+0xe4c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d902      	bls.n	8001408 <menu+0xc38>
				yavaslamaLimit = 0;
 8001402:	4b86      	ldr	r3, [pc, #536]	; (800161c <menu+0xe4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001408:	f003 fe4e 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800140c:	2104      	movs	r1, #4
 800140e:	4881      	ldr	r0, [pc, #516]	; (8001614 <menu+0xe44>)
 8001410:	f007 fbf8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d115      	bne.n	8001446 <menu+0xc76>
 800141a:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <menu+0xe48>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	f083 0301 	eor.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00e      	beq.n	8001446 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001428:	4b7c      	ldr	r3, [pc, #496]	; (800161c <menu+0xe4c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b7a      	ldr	r3, [pc, #488]	; (800161c <menu+0xe4c>)
 8001432:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001434:	4b79      	ldr	r3, [pc, #484]	; (800161c <menu+0xe4c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800143c:	4b77      	ldr	r3, [pc, #476]	; (800161c <menu+0xe4c>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001442:	f003 fe31 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001446:	2108      	movs	r1, #8
 8001448:	4872      	ldr	r0, [pc, #456]	; (8001614 <menu+0xe44>)
 800144a:	f007 fbdb 	bl	8008c04 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10d      	bne.n	8001470 <menu+0xca0>
 8001454:	4b70      	ldr	r3, [pc, #448]	; (8001618 <menu+0xe48>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	f083 0301 	eor.w	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001462:	4b6e      	ldr	r3, [pc, #440]	; (800161c <menu+0xe4c>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b6e      	ldr	r3, [pc, #440]	; (8001620 <menu+0xe50>)
 8001468:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800146a:	4b6e      	ldr	r3, [pc, #440]	; (8001624 <menu+0xe54>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001470:	4b6d      	ldr	r3, [pc, #436]	; (8001628 <menu+0xe58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b05      	cmp	r3, #5
 8001476:	f040 80b9 	bne.w	80015ec <menu+0xe1c>
		if(dilSecim == 0) {
 800147a:	4b64      	ldr	r3, [pc, #400]	; (800160c <menu+0xe3c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001482:	4a6a      	ldr	r2, [pc, #424]	; (800162c <menu+0xe5c>)
 8001484:	2101      	movs	r1, #1
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff f941 	bl	800070e <lcd_print>
 800148c:	e008      	b.n	80014a0 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <menu+0xe3c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d104      	bne.n	80014a0 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001496:	4a66      	ldr	r2, [pc, #408]	; (8001630 <menu+0xe60>)
 8001498:	2101      	movs	r1, #1
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff f937 	bl	800070e <lcd_print>
		}

		if(altLimit == 0) {
 80014a0:	4b64      	ldr	r3, [pc, #400]	; (8001634 <menu+0xe64>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d113      	bne.n	80014d0 <menu+0xd00>
			if(dilSecim == 0) {
 80014a8:	4b58      	ldr	r3, [pc, #352]	; (800160c <menu+0xe3c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80014b0:	4a61      	ldr	r2, [pc, #388]	; (8001638 <menu+0xe68>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	2002      	movs	r0, #2
 80014b6:	f7ff f92a 	bl	800070e <lcd_print>
 80014ba:	e020      	b.n	80014fe <menu+0xd2e>
			} else if(dilSecim == 1) {
 80014bc:	4b53      	ldr	r3, [pc, #332]	; (800160c <menu+0xe3c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d11c      	bne.n	80014fe <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80014c4:	4a5d      	ldr	r2, [pc, #372]	; (800163c <menu+0xe6c>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff f920 	bl	800070e <lcd_print>
 80014ce:	e016      	b.n	80014fe <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80014d0:	4b58      	ldr	r3, [pc, #352]	; (8001634 <menu+0xe64>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d112      	bne.n	80014fe <menu+0xd2e>
			if(dilSecim == 0){
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <menu+0xe3c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80014e0:	4a57      	ldr	r2, [pc, #348]	; (8001640 <menu+0xe70>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f7ff f912 	bl	800070e <lcd_print>
 80014ea:	e008      	b.n	80014fe <menu+0xd2e>
			} else if(dilSecim == 1){
 80014ec:	4b47      	ldr	r3, [pc, #284]	; (800160c <menu+0xe3c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d104      	bne.n	80014fe <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80014f4:	4a46      	ldr	r2, [pc, #280]	; (8001610 <menu+0xe40>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	2002      	movs	r0, #2
 80014fa:	f7ff f908 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80014fe:	2102      	movs	r1, #2
 8001500:	4844      	ldr	r0, [pc, #272]	; (8001614 <menu+0xe44>)
 8001502:	f007 fb7f 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d119      	bne.n	8001540 <menu+0xd70>
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <menu+0xe48>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f083 0301 	eor.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d012      	beq.n	8001540 <menu+0xd70>
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <menu+0xe74>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10e      	bne.n	8001540 <menu+0xd70>
			altLimit = altLimit + 1;
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <menu+0xe64>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b42      	ldr	r3, [pc, #264]	; (8001634 <menu+0xe64>)
 800152c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <menu+0xe64>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d902      	bls.n	800153c <menu+0xd6c>
				altLimit = 0;
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <menu+0xe64>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800153c:	f003 fdb4 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001540:	2104      	movs	r1, #4
 8001542:	4834      	ldr	r0, [pc, #208]	; (8001614 <menu+0xe44>)
 8001544:	f007 fb5e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d119      	bne.n	8001582 <menu+0xdb2>
 800154e:	4b32      	ldr	r3, [pc, #200]	; (8001618 <menu+0xe48>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	f083 0301 	eor.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d012      	beq.n	8001582 <menu+0xdb2>
 800155c:	4b39      	ldr	r3, [pc, #228]	; (8001644 <menu+0xe74>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10e      	bne.n	8001582 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001564:	4b33      	ldr	r3, [pc, #204]	; (8001634 <menu+0xe64>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b31      	ldr	r3, [pc, #196]	; (8001634 <menu+0xe64>)
 800156e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <menu+0xe64>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <menu+0xdae>
		   		altLimit = 1;
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <menu+0xe64>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800157e:	f003 fd93 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001582:	2108      	movs	r1, #8
 8001584:	4823      	ldr	r0, [pc, #140]	; (8001614 <menu+0xe44>)
 8001586:	f007 fb3d 	bl	8008c04 <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d12d      	bne.n	80015ec <menu+0xe1c>
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <menu+0xe48>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	f083 0301 	eor.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d026      	beq.n	80015ec <menu+0xe1c>
			eepromData[5] = altLimit;
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <menu+0xe64>)
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <menu+0xe50>)
 80015a4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <menu+0xe64>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d110      	bne.n	80015d0 <menu+0xe00>
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <menu+0xe78>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <menu+0xdee>
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <menu+0xe78>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d108      	bne.n	80015d0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <menu+0xe78>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <menu+0xe78>)
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <menu+0xe50>)
 80015ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80015ce:	e00a      	b.n	80015e6 <menu+0xe16>
			} else if(altLimit == 0) {
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <menu+0xe64>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d106      	bne.n	80015e6 <menu+0xe16>
				platformSilindirTipi = 0;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <menu+0xe7c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <menu+0xe7c>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <menu+0xe50>)
 80015e4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <menu+0xe54>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <menu+0xe58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b06      	cmp	r3, #6
 80015f2:	f040 80b6 	bne.w	8001762 <menu+0xf92>
		if(dilSecim == 0) {
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <menu+0xe3c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d12a      	bne.n	8001654 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <menu+0xe80>)
 8001600:	2101      	movs	r1, #1
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff f883 	bl	800070e <lcd_print>
 8001608:	e02d      	b.n	8001666 <menu+0xe96>
 800160a:	bf00      	nop
 800160c:	20000b4d 	.word	0x20000b4d
 8001610:	0800cb58 	.word	0x0800cb58
 8001614:	40010800 	.word	0x40010800
 8001618:	20000b5b 	.word	0x20000b5b
 800161c:	20000b31 	.word	0x20000b31
 8001620:	20000ac0 	.word	0x20000ac0
 8001624:	20000b58 	.word	0x20000b58
 8001628:	20000b2c 	.word	0x20000b2c
 800162c:	0800cb6c 	.word	0x0800cb6c
 8001630:	0800cb80 	.word	0x0800cb80
 8001634:	20000b32 	.word	0x20000b32
 8001638:	0800cae4 	.word	0x0800cae4
 800163c:	0800caf8 	.word	0x0800caf8
 8001640:	0800cb44 	.word	0x0800cb44
 8001644:	20000b2d 	.word	0x20000b2d
 8001648:	20000b39 	.word	0x20000b39
 800164c:	20000b3f 	.word	0x20000b3f
 8001650:	0800cb94 	.word	0x0800cb94
		} else if(dilSecim == 1){
 8001654:	4b7a      	ldr	r3, [pc, #488]	; (8001840 <menu+0x1070>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d104      	bne.n	8001666 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800165c:	4a79      	ldr	r2, [pc, #484]	; (8001844 <menu+0x1074>)
 800165e:	2101      	movs	r1, #1
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff f854 	bl	800070e <lcd_print>
		}
		if(basincSalteri == 0){
 8001666:	4b78      	ldr	r3, [pc, #480]	; (8001848 <menu+0x1078>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d113      	bne.n	8001696 <menu+0xec6>
			if(dilSecim == 0) {
 800166e:	4b74      	ldr	r3, [pc, #464]	; (8001840 <menu+0x1070>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d105      	bne.n	8001682 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001676:	4a75      	ldr	r2, [pc, #468]	; (800184c <menu+0x107c>)
 8001678:	2101      	movs	r1, #1
 800167a:	2002      	movs	r0, #2
 800167c:	f7ff f847 	bl	800070e <lcd_print>
 8001680:	e020      	b.n	80016c4 <menu+0xef4>
			} else if(dilSecim == 1){
 8001682:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <menu+0x1070>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d11c      	bne.n	80016c4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800168a:	4a71      	ldr	r2, [pc, #452]	; (8001850 <menu+0x1080>)
 800168c:	2101      	movs	r1, #1
 800168e:	2002      	movs	r0, #2
 8001690:	f7ff f83d 	bl	800070e <lcd_print>
 8001694:	e016      	b.n	80016c4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001696:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <menu+0x1078>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d112      	bne.n	80016c4 <menu+0xef4>
			if(dilSecim == 0) {
 800169e:	4b68      	ldr	r3, [pc, #416]	; (8001840 <menu+0x1070>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80016a6:	4a6b      	ldr	r2, [pc, #428]	; (8001854 <menu+0x1084>)
 80016a8:	2101      	movs	r1, #1
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff f82f 	bl	800070e <lcd_print>
 80016b0:	e008      	b.n	80016c4 <menu+0xef4>
			} else if(dilSecim == 1) {
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <menu+0x1070>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d104      	bne.n	80016c4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80016ba:	4a67      	ldr	r2, [pc, #412]	; (8001858 <menu+0x1088>)
 80016bc:	2101      	movs	r1, #1
 80016be:	2002      	movs	r0, #2
 80016c0:	f7ff f825 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80016c4:	2102      	movs	r1, #2
 80016c6:	4865      	ldr	r0, [pc, #404]	; (800185c <menu+0x108c>)
 80016c8:	f007 fa9c 	bl	8008c04 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d115      	bne.n	80016fe <menu+0xf2e>
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <menu+0x1090>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	f083 0301 	eor.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00e      	beq.n	80016fe <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <menu+0x1078>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b57      	ldr	r3, [pc, #348]	; (8001848 <menu+0x1078>)
 80016ea:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80016ec:	4b56      	ldr	r3, [pc, #344]	; (8001848 <menu+0x1078>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d902      	bls.n	80016fa <menu+0xf2a>
				basincSalteri = 0;
 80016f4:	4b54      	ldr	r3, [pc, #336]	; (8001848 <menu+0x1078>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80016fa:	f003 fcd5 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80016fe:	2104      	movs	r1, #4
 8001700:	4856      	ldr	r0, [pc, #344]	; (800185c <menu+0x108c>)
 8001702:	f007 fa7f 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001706:	4603      	mov	r3, r0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d115      	bne.n	8001738 <menu+0xf68>
 800170c:	4b54      	ldr	r3, [pc, #336]	; (8001860 <menu+0x1090>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	f083 0301 	eor.w	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00e      	beq.n	8001738 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800171a:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <menu+0x1078>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b49      	ldr	r3, [pc, #292]	; (8001848 <menu+0x1078>)
 8001724:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001726:	4b48      	ldr	r3, [pc, #288]	; (8001848 <menu+0x1078>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <menu+0xf64>
		   		basincSalteri = 1;
 800172e:	4b46      	ldr	r3, [pc, #280]	; (8001848 <menu+0x1078>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001734:	f003 fcb8 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001738:	2108      	movs	r1, #8
 800173a:	4848      	ldr	r0, [pc, #288]	; (800185c <menu+0x108c>)
 800173c:	f007 fa62 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001740:	4603      	mov	r3, r0
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10d      	bne.n	8001762 <menu+0xf92>
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <menu+0x1090>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f083 0301 	eor.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8001754:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <menu+0x1078>)
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	4b42      	ldr	r3, [pc, #264]	; (8001864 <menu+0x1094>)
 800175a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <menu+0x1098>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <menu+0x109c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b07      	cmp	r3, #7
 8001768:	f040 80f5 	bne.w	8001956 <menu+0x1186>
		if(dilSecim == 0) {
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <menu+0x1070>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d105      	bne.n	8001780 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8001774:	4a3e      	ldr	r2, [pc, #248]	; (8001870 <menu+0x10a0>)
 8001776:	2101      	movs	r1, #1
 8001778:	2001      	movs	r0, #1
 800177a:	f7fe ffc8 	bl	800070e <lcd_print>
 800177e:	e008      	b.n	8001792 <menu+0xfc2>
		} else if(dilSecim == 1){
 8001780:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <menu+0x1070>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d104      	bne.n	8001792 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8001788:	4a3a      	ldr	r2, [pc, #232]	; (8001874 <menu+0x10a4>)
 800178a:	2101      	movs	r1, #1
 800178c:	2001      	movs	r0, #1
 800178e:	f7fe ffbe 	bl	800070e <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <menu+0x10a8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d113      	bne.n	80017c2 <menu+0xff2>
			if(dilSecim == 0) {
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <menu+0x1070>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d105      	bne.n	80017ae <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80017a2:	4a2a      	ldr	r2, [pc, #168]	; (800184c <menu+0x107c>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	2002      	movs	r0, #2
 80017a8:	f7fe ffb1 	bl	800070e <lcd_print>
 80017ac:	e079      	b.n	80018a2 <menu+0x10d2>
			} else if(dilSecim == 1){
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <menu+0x1070>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d175      	bne.n	80018a2 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <menu+0x1080>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7fe ffa7 	bl	800070e <lcd_print>
 80017c0:	e06f      	b.n	80018a2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <menu+0x10a8>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d113      	bne.n	80017f2 <menu+0x1022>
			if(dilSecim == 0) {
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <menu+0x1070>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80017d2:	4a2a      	ldr	r2, [pc, #168]	; (800187c <menu+0x10ac>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7fe ff99 	bl	800070e <lcd_print>
 80017dc:	e061      	b.n	80018a2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <menu+0x1070>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d15d      	bne.n	80018a2 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80017e6:	4a26      	ldr	r2, [pc, #152]	; (8001880 <menu+0x10b0>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	2002      	movs	r0, #2
 80017ec:	f7fe ff8f 	bl	800070e <lcd_print>
 80017f0:	e057      	b.n	80018a2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <menu+0x10a8>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d113      	bne.n	8001822 <menu+0x1052>
			if(dilSecim == 0) {
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <menu+0x1070>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8001802:	4a20      	ldr	r2, [pc, #128]	; (8001884 <menu+0x10b4>)
 8001804:	2101      	movs	r1, #1
 8001806:	2002      	movs	r0, #2
 8001808:	f7fe ff81 	bl	800070e <lcd_print>
 800180c:	e049      	b.n	80018a2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <menu+0x1070>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d145      	bne.n	80018a2 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <menu+0x10b8>)
 8001818:	2101      	movs	r1, #1
 800181a:	2002      	movs	r0, #2
 800181c:	f7fe ff77 	bl	800070e <lcd_print>
 8001820:	e03f      	b.n	80018a2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <menu+0x10a8>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d13b      	bne.n	80018a2 <menu+0x10d2>
			if(dilSecim == 0) {
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <menu+0x1070>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d12e      	bne.n	8001890 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8001832:	4a16      	ldr	r2, [pc, #88]	; (800188c <menu+0x10bc>)
 8001834:	2101      	movs	r1, #1
 8001836:	2002      	movs	r0, #2
 8001838:	f7fe ff69 	bl	800070e <lcd_print>
 800183c:	e031      	b.n	80018a2 <menu+0x10d2>
 800183e:	bf00      	nop
 8001840:	20000b4d 	.word	0x20000b4d
 8001844:	0800cba4 	.word	0x0800cba4
 8001848:	20000b33 	.word	0x20000b33
 800184c:	0800cae4 	.word	0x0800cae4
 8001850:	0800caf8 	.word	0x0800caf8
 8001854:	0800cb44 	.word	0x0800cb44
 8001858:	0800cb58 	.word	0x0800cb58
 800185c:	40010800 	.word	0x40010800
 8001860:	20000b5b 	.word	0x20000b5b
 8001864:	20000ac0 	.word	0x20000ac0
 8001868:	20000b58 	.word	0x20000b58
 800186c:	20000b2c 	.word	0x20000b2c
 8001870:	0800cbb4 	.word	0x0800cbb4
 8001874:	0800cbc8 	.word	0x0800cbc8
 8001878:	20000b34 	.word	0x20000b34
 800187c:	0800cbdc 	.word	0x0800cbdc
 8001880:	0800cbf0 	.word	0x0800cbf0
 8001884:	0800cc04 	.word	0x0800cc04
 8001888:	0800cc18 	.word	0x0800cc18
 800188c:	0800cc2c 	.word	0x0800cc2c
			} else if(dilSecim == 1){
 8001890:	4b99      	ldr	r3, [pc, #612]	; (8001af8 <menu+0x1328>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d104      	bne.n	80018a2 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8001898:	4a98      	ldr	r2, [pc, #608]	; (8001afc <menu+0x132c>)
 800189a:	2101      	movs	r1, #1
 800189c:	2002      	movs	r0, #2
 800189e:	f7fe ff36 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80018a2:	2102      	movs	r1, #2
 80018a4:	4896      	ldr	r0, [pc, #600]	; (8001b00 <menu+0x1330>)
 80018a6:	f007 f9ad 	bl	8008c04 <HAL_GPIO_ReadPin>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d115      	bne.n	80018dc <menu+0x110c>
 80018b0:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <menu+0x1334>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00e      	beq.n	80018dc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80018be:	4b92      	ldr	r3, [pc, #584]	; (8001b08 <menu+0x1338>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b90      	ldr	r3, [pc, #576]	; (8001b08 <menu+0x1338>)
 80018c8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80018ca:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <menu+0x1338>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d902      	bls.n	80018d8 <menu+0x1108>
				kapiSecimleri = 0;
 80018d2:	4b8d      	ldr	r3, [pc, #564]	; (8001b08 <menu+0x1338>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018d8:	f003 fbe6 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80018dc:	2104      	movs	r1, #4
 80018de:	4888      	ldr	r0, [pc, #544]	; (8001b00 <menu+0x1330>)
 80018e0:	f007 f990 	bl	8008c04 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d115      	bne.n	8001916 <menu+0x1146>
 80018ea:	4b86      	ldr	r3, [pc, #536]	; (8001b04 <menu+0x1334>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	f083 0301 	eor.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00e      	beq.n	8001916 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80018f8:	4b83      	ldr	r3, [pc, #524]	; (8001b08 <menu+0x1338>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <menu+0x1338>)
 8001902:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001904:	4b80      	ldr	r3, [pc, #512]	; (8001b08 <menu+0x1338>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d902      	bls.n	8001912 <menu+0x1142>
		   		kapiSecimleri = 3;
 800190c:	4b7e      	ldr	r3, [pc, #504]	; (8001b08 <menu+0x1338>)
 800190e:	2203      	movs	r2, #3
 8001910:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001912:	f003 fbc9 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001916:	2108      	movs	r1, #8
 8001918:	4879      	ldr	r0, [pc, #484]	; (8001b00 <menu+0x1330>)
 800191a:	f007 f973 	bl	8008c04 <HAL_GPIO_ReadPin>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d118      	bne.n	8001956 <menu+0x1186>
 8001924:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <menu+0x1334>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f083 0301 	eor.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d011      	beq.n	8001956 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8001932:	4b75      	ldr	r3, [pc, #468]	; (8001b08 <menu+0x1338>)
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	4b75      	ldr	r3, [pc, #468]	; (8001b0c <menu+0x133c>)
 8001938:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800193a:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <menu+0x1338>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <menu+0x1180>
				altLimit = 1;
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <menu+0x1340>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001948:	4b71      	ldr	r3, [pc, #452]	; (8001b10 <menu+0x1340>)
 800194a:	781a      	ldrb	r2, [r3, #0]
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <menu+0x133c>)
 800194e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001950:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <menu+0x1344>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001956:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <menu+0x1348>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b08      	cmp	r3, #8
 800195c:	f040 8092 	bne.w	8001a84 <menu+0x12b4>
		if(dilSecim == 0) {
 8001960:	4b65      	ldr	r3, [pc, #404]	; (8001af8 <menu+0x1328>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001968:	4a6c      	ldr	r2, [pc, #432]	; (8001b1c <menu+0x134c>)
 800196a:	2101      	movs	r1, #1
 800196c:	2001      	movs	r0, #1
 800196e:	f7fe fece 	bl	800070e <lcd_print>
 8001972:	e008      	b.n	8001986 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <menu+0x1328>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d104      	bne.n	8001986 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800197c:	4a68      	ldr	r2, [pc, #416]	; (8001b20 <menu+0x1350>)
 800197e:	2101      	movs	r1, #1
 8001980:	2001      	movs	r0, #1
 8001982:	f7fe fec4 	bl	800070e <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001986:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <menu+0x1354>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d113      	bne.n	80019b6 <menu+0x11e6>
			if(dilSecim == 0) {
 800198e:	4b5a      	ldr	r3, [pc, #360]	; (8001af8 <menu+0x1328>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d105      	bne.n	80019a2 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001996:	4a64      	ldr	r2, [pc, #400]	; (8001b28 <menu+0x1358>)
 8001998:	2101      	movs	r1, #1
 800199a:	2002      	movs	r0, #2
 800199c:	f7fe feb7 	bl	800070e <lcd_print>
 80019a0:	e020      	b.n	80019e4 <menu+0x1214>
			} else if(dilSecim == 1) {
 80019a2:	4b55      	ldr	r3, [pc, #340]	; (8001af8 <menu+0x1328>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d11c      	bne.n	80019e4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80019aa:	4a60      	ldr	r2, [pc, #384]	; (8001b2c <menu+0x135c>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	2002      	movs	r0, #2
 80019b0:	f7fe fead 	bl	800070e <lcd_print>
 80019b4:	e016      	b.n	80019e4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80019b6:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <menu+0x1354>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d112      	bne.n	80019e4 <menu+0x1214>
			if(dilSecim == 0){
 80019be:	4b4e      	ldr	r3, [pc, #312]	; (8001af8 <menu+0x1328>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80019c6:	4a5a      	ldr	r2, [pc, #360]	; (8001b30 <menu+0x1360>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	2002      	movs	r0, #2
 80019cc:	f7fe fe9f 	bl	800070e <lcd_print>
 80019d0:	e008      	b.n	80019e4 <menu+0x1214>
			} else if(dilSecim == 1){
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <menu+0x1328>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d104      	bne.n	80019e4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80019da:	4a56      	ldr	r2, [pc, #344]	; (8001b34 <menu+0x1364>)
 80019dc:	2101      	movs	r1, #1
 80019de:	2002      	movs	r0, #2
 80019e0:	f7fe fe95 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80019e4:	2102      	movs	r1, #2
 80019e6:	4846      	ldr	r0, [pc, #280]	; (8001b00 <menu+0x1330>)
 80019e8:	f007 f90c 	bl	8008c04 <HAL_GPIO_ReadPin>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d115      	bne.n	8001a1e <menu+0x124e>
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <menu+0x1334>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00e      	beq.n	8001a1e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8001a00:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <menu+0x1354>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <menu+0x1354>)
 8001a0a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001a0c:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <menu+0x1354>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d902      	bls.n	8001a1a <menu+0x124a>
				kapiAcTipi = 0;
 8001a14:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <menu+0x1354>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a1a:	f003 fb45 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a1e:	2104      	movs	r1, #4
 8001a20:	4837      	ldr	r0, [pc, #220]	; (8001b00 <menu+0x1330>)
 8001a22:	f007 f8ef 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d115      	bne.n	8001a58 <menu+0x1288>
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <menu+0x1334>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00e      	beq.n	8001a58 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <menu+0x1354>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <menu+0x1354>)
 8001a44:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <menu+0x1354>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <menu+0x1284>
		   		kapiAcTipi = 1;
 8001a4e:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <menu+0x1354>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a54:	f003 fb28 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a58:	2108      	movs	r1, #8
 8001a5a:	4829      	ldr	r0, [pc, #164]	; (8001b00 <menu+0x1330>)
 8001a5c:	f007 f8d2 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d10e      	bne.n	8001a84 <menu+0x12b4>
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <menu+0x1334>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <menu+0x1354>)
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <menu+0x133c>)
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <menu+0x1344>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <menu+0x1348>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	f040 80b9 	bne.w	8001c00 <menu+0x1430>
		if(dilSecim == 0){
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <menu+0x1328>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001a96:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <menu+0x1368>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f7fe fe37 	bl	800070e <lcd_print>
 8001aa0:	e008      	b.n	8001ab4 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <menu+0x1328>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d104      	bne.n	8001ab4 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8001aaa:	4a24      	ldr	r2, [pc, #144]	; (8001b3c <menu+0x136c>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7fe fe2d 	bl	800070e <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <menu+0x1370>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <menu+0x1374>)
 8001abe:	2101      	movs	r1, #1
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f7fe fe24 	bl	800070e <lcd_print>
 8001ac6:	e04c      	b.n	8001b62 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <menu+0x1370>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d13f      	bne.n	8001b50 <menu+0x1380>
			if(dilSecim == 0){
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <menu+0x1328>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <menu+0x1378>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	2002      	movs	r0, #2
 8001ade:	f7fe fe16 	bl	800070e <lcd_print>
 8001ae2:	e03e      	b.n	8001b62 <menu+0x1392>
			} else if(dilSecim == 1) {
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <menu+0x1328>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d13a      	bne.n	8001b62 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8001aec:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <menu+0x137c>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	2002      	movs	r0, #2
 8001af2:	f7fe fe0c 	bl	800070e <lcd_print>
 8001af6:	e034      	b.n	8001b62 <menu+0x1392>
 8001af8:	20000b4d 	.word	0x20000b4d
 8001afc:	0800cc40 	.word	0x0800cc40
 8001b00:	40010800 	.word	0x40010800
 8001b04:	20000b5b 	.word	0x20000b5b
 8001b08:	20000b34 	.word	0x20000b34
 8001b0c:	20000ac0 	.word	0x20000ac0
 8001b10:	20000b32 	.word	0x20000b32
 8001b14:	20000b58 	.word	0x20000b58
 8001b18:	20000b2c 	.word	0x20000b2c
 8001b1c:	0800cc54 	.word	0x0800cc54
 8001b20:	0800cc68 	.word	0x0800cc68
 8001b24:	20000b38 	.word	0x20000b38
 8001b28:	0800cc7c 	.word	0x0800cc7c
 8001b2c:	0800cc8c 	.word	0x0800cc8c
 8001b30:	0800cc9c 	.word	0x0800cc9c
 8001b34:	0800ccb0 	.word	0x0800ccb0
 8001b38:	0800ccc4 	.word	0x0800ccc4
 8001b3c:	0800ccd8 	.word	0x0800ccd8
 8001b40:	20000b35 	.word	0x20000b35
 8001b44:	0800ccec 	.word	0x0800ccec
 8001b48:	0800cd00 	.word	0x0800cd00
 8001b4c:	0800cd10 	.word	0x0800cd10
			}
		} else if(kapi1Tip == 2) {
 8001b50:	4b8a      	ldr	r3, [pc, #552]	; (8001d7c <menu+0x15ac>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d104      	bne.n	8001b62 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001b58:	4a89      	ldr	r2, [pc, #548]	; (8001d80 <menu+0x15b0>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f7fe fdd6 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b62:	2102      	movs	r1, #2
 8001b64:	4887      	ldr	r0, [pc, #540]	; (8001d84 <menu+0x15b4>)
 8001b66:	f007 f84d 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d115      	bne.n	8001b9c <menu+0x13cc>
 8001b70:	4b85      	ldr	r3, [pc, #532]	; (8001d88 <menu+0x15b8>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00e      	beq.n	8001b9c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <menu+0x15ac>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b7d      	ldr	r3, [pc, #500]	; (8001d7c <menu+0x15ac>)
 8001b88:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001b8a:	4b7c      	ldr	r3, [pc, #496]	; (8001d7c <menu+0x15ac>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d902      	bls.n	8001b98 <menu+0x13c8>
				kapi1Tip = 0;
 8001b92:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <menu+0x15ac>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b98:	f003 fa86 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	4879      	ldr	r0, [pc, #484]	; (8001d84 <menu+0x15b4>)
 8001ba0:	f007 f830 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d115      	bne.n	8001bd6 <menu+0x1406>
 8001baa:	4b77      	ldr	r3, [pc, #476]	; (8001d88 <menu+0x15b8>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	f083 0301 	eor.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00e      	beq.n	8001bd6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001bb8:	4b70      	ldr	r3, [pc, #448]	; (8001d7c <menu+0x15ac>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b6e      	ldr	r3, [pc, #440]	; (8001d7c <menu+0x15ac>)
 8001bc2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001bc4:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <menu+0x15ac>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d902      	bls.n	8001bd2 <menu+0x1402>
		   		kapi1Tip = 2;
 8001bcc:	4b6b      	ldr	r3, [pc, #428]	; (8001d7c <menu+0x15ac>)
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bd2:	f003 fa69 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	486a      	ldr	r0, [pc, #424]	; (8001d84 <menu+0x15b4>)
 8001bda:	f007 f813 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10d      	bne.n	8001c00 <menu+0x1430>
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <menu+0x15b8>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d006      	beq.n	8001c00 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8001bf2:	4b62      	ldr	r3, [pc, #392]	; (8001d7c <menu+0x15ac>)
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <menu+0x15bc>)
 8001bf8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <menu+0x15c0>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001c00:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <menu+0x15c4>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b0a      	cmp	r3, #10
 8001c06:	d17f      	bne.n	8001d08 <menu+0x1538>
		if(dilSecim == 0) {
 8001c08:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <menu+0x15c8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10a      	bne.n	8001c26 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001c10:	4a62      	ldr	r2, [pc, #392]	; (8001d9c <menu+0x15cc>)
 8001c12:	2101      	movs	r1, #1
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7fe fd7a 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001c1a:	4a61      	ldr	r2, [pc, #388]	; (8001da0 <menu+0x15d0>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f7fe fd75 	bl	800070e <lcd_print>
 8001c24:	e00d      	b.n	8001c42 <menu+0x1472>
		} else if(dilSecim == 1) {
 8001c26:	4b5c      	ldr	r3, [pc, #368]	; (8001d98 <menu+0x15c8>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d109      	bne.n	8001c42 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8001c2e:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <menu+0x15d4>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7fe fd6b 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001c38:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <menu+0x15d8>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7fe fd66 	bl	800070e <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <menu+0x15dc>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	220a      	movs	r2, #10
 8001c48:	4959      	ldr	r1, [pc, #356]	; (8001db0 <menu+0x15e0>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00a f806 	bl	800bc5c <itoa>
		lcd_print(2,16,snum);
 8001c50:	4a57      	ldr	r2, [pc, #348]	; (8001db0 <menu+0x15e0>)
 8001c52:	2110      	movs	r1, #16
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7fe fd5a 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4849      	ldr	r0, [pc, #292]	; (8001d84 <menu+0x15b4>)
 8001c5e:	f006 ffd1 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d119      	bne.n	8001c9c <menu+0x14cc>
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <menu+0x15b8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <menu+0x14cc>
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <menu+0x15ac>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10e      	bne.n	8001c9c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <menu+0x15dc>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <menu+0x15dc>)
 8001c88:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <menu+0x15dc>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d902      	bls.n	8001c98 <menu+0x14c8>
				kapi1AcSure = 0;
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <menu+0x15dc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c98:	f003 fa06 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <menu+0x15b4>)
 8001ca0:	f006 ffb0 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d119      	bne.n	8001cde <menu+0x150e>
 8001caa:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <menu+0x15b8>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f083 0301 	eor.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d012      	beq.n	8001cde <menu+0x150e>
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <menu+0x15ac>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10e      	bne.n	8001cde <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <menu+0x15dc>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <menu+0x15dc>)
 8001cca:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001ccc:	4b37      	ldr	r3, [pc, #220]	; (8001dac <menu+0x15dc>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b06      	cmp	r3, #6
 8001cd2:	d902      	bls.n	8001cda <menu+0x150a>
		   		kapi1AcSure = 5;
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <menu+0x15dc>)
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cda:	f003 f9e5 	bl	80050a8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cde:	2108      	movs	r1, #8
 8001ce0:	4828      	ldr	r0, [pc, #160]	; (8001d84 <menu+0x15b4>)
 8001ce2:	f006 ff8f 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10d      	bne.n	8001d08 <menu+0x1538>
 8001cec:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <menu+0x15b8>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <menu+0x15dc>)
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <menu+0x15bc>)
 8001d00:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <menu+0x15c0>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <menu+0x15c4>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b0b      	cmp	r3, #11
 8001d0e:	f040 80b5 	bne.w	8001e7c <menu+0x16ac>
		if(dilSecim == 0) {
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <menu+0x15c8>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001d1a:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <menu+0x15e4>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7fe fcf5 	bl	800070e <lcd_print>
 8001d24:	e008      	b.n	8001d38 <menu+0x1568>
		} else if(dilSecim == 1) {
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <menu+0x15c8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d104      	bne.n	8001d38 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001d2e:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <menu+0x15e8>)
 8001d30:	2101      	movs	r1, #1
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7fe fceb 	bl	800070e <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001d38:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <menu+0x15ec>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001d40:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <menu+0x15f0>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	2002      	movs	r0, #2
 8001d46:	f7fe fce2 	bl	800070e <lcd_print>
 8001d4a:	e048      	b.n	8001dde <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <menu+0x15ec>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d13b      	bne.n	8001dcc <menu+0x15fc>
			if(dilSecim == 0) {
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <menu+0x15c8>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <menu+0x15f4>)
 8001d5e:	2101      	movs	r1, #1
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7fe fcd4 	bl	800070e <lcd_print>
 8001d66:	e03a      	b.n	8001dde <menu+0x160e>
			} else if(dilSecim == 1) {
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <menu+0x15c8>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d136      	bne.n	8001dde <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001d70:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <menu+0x15f8>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	2002      	movs	r0, #2
 8001d76:	f7fe fcca 	bl	800070e <lcd_print>
 8001d7a:	e030      	b.n	8001dde <menu+0x160e>
 8001d7c:	20000b35 	.word	0x20000b35
 8001d80:	0800cd24 	.word	0x0800cd24
 8001d84:	40010800 	.word	0x40010800
 8001d88:	20000b5b 	.word	0x20000b5b
 8001d8c:	20000ac0 	.word	0x20000ac0
 8001d90:	20000b58 	.word	0x20000b58
 8001d94:	20000b2c 	.word	0x20000b2c
 8001d98:	20000b4d 	.word	0x20000b4d
 8001d9c:	0800cd34 	.word	0x0800cd34
 8001da0:	0800cd48 	.word	0x0800cd48
 8001da4:	0800cd58 	.word	0x0800cd58
 8001da8:	0800cd6c 	.word	0x0800cd6c
 8001dac:	20000b45 	.word	0x20000b45
 8001db0:	20000b00 	.word	0x20000b00
 8001db4:	0800cd7c 	.word	0x0800cd7c
 8001db8:	0800cd90 	.word	0x0800cd90
 8001dbc:	20000b36 	.word	0x20000b36
 8001dc0:	0800ccec 	.word	0x0800ccec
 8001dc4:	0800cd00 	.word	0x0800cd00
 8001dc8:	0800cd10 	.word	0x0800cd10
			}
		} else if(kapi2Tip == 2) {
 8001dcc:	4b8a      	ldr	r3, [pc, #552]	; (8001ff8 <menu+0x1828>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d104      	bne.n	8001dde <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001dd4:	4a89      	ldr	r2, [pc, #548]	; (8001ffc <menu+0x182c>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f7fe fc98 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dde:	2102      	movs	r1, #2
 8001de0:	4887      	ldr	r0, [pc, #540]	; (8002000 <menu+0x1830>)
 8001de2:	f006 ff0f 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d115      	bne.n	8001e18 <menu+0x1648>
 8001dec:	4b85      	ldr	r3, [pc, #532]	; (8002004 <menu+0x1834>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	f083 0301 	eor.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00e      	beq.n	8001e18 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001dfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ff8 <menu+0x1828>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b7d      	ldr	r3, [pc, #500]	; (8001ff8 <menu+0x1828>)
 8001e04:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001e06:	4b7c      	ldr	r3, [pc, #496]	; (8001ff8 <menu+0x1828>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d902      	bls.n	8001e14 <menu+0x1644>
				kapi2Tip = 0;
 8001e0e:	4b7a      	ldr	r3, [pc, #488]	; (8001ff8 <menu+0x1828>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e14:	f003 f948 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4879      	ldr	r0, [pc, #484]	; (8002000 <menu+0x1830>)
 8001e1c:	f006 fef2 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d115      	bne.n	8001e52 <menu+0x1682>
 8001e26:	4b77      	ldr	r3, [pc, #476]	; (8002004 <menu+0x1834>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f083 0301 	eor.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001e34:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <menu+0x1828>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b6e      	ldr	r3, [pc, #440]	; (8001ff8 <menu+0x1828>)
 8001e3e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001e40:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <menu+0x1828>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d902      	bls.n	8001e4e <menu+0x167e>
		   		kapi2Tip = 2;
 8001e48:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <menu+0x1828>)
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e4e:	f003 f92b 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e52:	2108      	movs	r1, #8
 8001e54:	486a      	ldr	r0, [pc, #424]	; (8002000 <menu+0x1830>)
 8001e56:	f006 fed5 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10d      	bne.n	8001e7c <menu+0x16ac>
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <menu+0x1834>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	f083 0301 	eor.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001e6e:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <menu+0x1828>)
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <menu+0x1838>)
 8001e74:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <menu+0x183c>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001e7c:	4b64      	ldr	r3, [pc, #400]	; (8002010 <menu+0x1840>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d17f      	bne.n	8001f84 <menu+0x17b4>
		if(dilSecim == 0) {
 8001e84:	4b63      	ldr	r3, [pc, #396]	; (8002014 <menu+0x1844>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001e8c:	4a62      	ldr	r2, [pc, #392]	; (8002018 <menu+0x1848>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7fe fc3c 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001e96:	4a61      	ldr	r2, [pc, #388]	; (800201c <menu+0x184c>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f7fe fc37 	bl	800070e <lcd_print>
 8001ea0:	e00d      	b.n	8001ebe <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001ea2:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <menu+0x1844>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d109      	bne.n	8001ebe <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001eaa:	4a5d      	ldr	r2, [pc, #372]	; (8002020 <menu+0x1850>)
 8001eac:	2101      	movs	r1, #1
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7fe fc2d 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001eb4:	4a5b      	ldr	r2, [pc, #364]	; (8002024 <menu+0x1854>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f7fe fc28 	bl	800070e <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	; (8002028 <menu+0x1858>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	220a      	movs	r2, #10
 8001ec4:	4959      	ldr	r1, [pc, #356]	; (800202c <menu+0x185c>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f009 fec8 	bl	800bc5c <itoa>
		lcd_print(2,16,snum);
 8001ecc:	4a57      	ldr	r2, [pc, #348]	; (800202c <menu+0x185c>)
 8001ece:	2110      	movs	r1, #16
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f7fe fc1c 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	4849      	ldr	r0, [pc, #292]	; (8002000 <menu+0x1830>)
 8001eda:	f006 fe93 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d119      	bne.n	8001f18 <menu+0x1748>
 8001ee4:	4b47      	ldr	r3, [pc, #284]	; (8002004 <menu+0x1834>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f083 0301 	eor.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d012      	beq.n	8001f18 <menu+0x1748>
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <menu+0x1828>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10e      	bne.n	8001f18 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <menu+0x1858>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <menu+0x1858>)
 8001f04:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <menu+0x1858>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d902      	bls.n	8001f14 <menu+0x1744>
				kapi2AcSure = 0;
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <menu+0x1858>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f14:	f003 f8c8 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4839      	ldr	r0, [pc, #228]	; (8002000 <menu+0x1830>)
 8001f1c:	f006 fe72 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d119      	bne.n	8001f5a <menu+0x178a>
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <menu+0x1834>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	f083 0301 	eor.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d012      	beq.n	8001f5a <menu+0x178a>
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <menu+0x1828>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10e      	bne.n	8001f5a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <menu+0x1858>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <menu+0x1858>)
 8001f46:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <menu+0x1858>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d902      	bls.n	8001f56 <menu+0x1786>
		   		kapi2AcSure = 5;
 8001f50:	4b35      	ldr	r3, [pc, #212]	; (8002028 <menu+0x1858>)
 8001f52:	2205      	movs	r2, #5
 8001f54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f56:	f003 f8a7 	bl	80050a8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5a:	2108      	movs	r1, #8
 8001f5c:	4828      	ldr	r0, [pc, #160]	; (8002000 <menu+0x1830>)
 8001f5e:	f006 fe51 	bl	8008c04 <HAL_GPIO_ReadPin>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d10d      	bne.n	8001f84 <menu+0x17b4>
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <menu+0x1834>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f083 0301 	eor.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <menu+0x1858>)
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <menu+0x1838>)
 8001f7c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001f7e:	4b23      	ldr	r3, [pc, #140]	; (800200c <menu+0x183c>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <menu+0x1840>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b0d      	cmp	r3, #13
 8001f8a:	f040 80b5 	bne.w	80020f8 <menu+0x1928>
		if(dilSecim == 0) {
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <menu+0x1844>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001f96:	4a26      	ldr	r2, [pc, #152]	; (8002030 <menu+0x1860>)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7fe fbb7 	bl	800070e <lcd_print>
 8001fa0:	e008      	b.n	8001fb4 <menu+0x17e4>
		} else if(dilSecim == 1){
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <menu+0x1844>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d104      	bne.n	8001fb4 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001faa:	4a22      	ldr	r2, [pc, #136]	; (8002034 <menu+0x1864>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7fe fbad 	bl	800070e <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <menu+0x1868>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <menu+0x186c>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f7fe fba4 	bl	800070e <lcd_print>
 8001fc6:	e048      	b.n	800205a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <menu+0x1868>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d13b      	bne.n	8002048 <menu+0x1878>
			if(dilSecim == 0) {
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <menu+0x1844>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <menu+0x1870>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f7fe fb96 	bl	800070e <lcd_print>
 8001fe2:	e03a      	b.n	800205a <menu+0x188a>
			} else if(dilSecim == 1) {
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <menu+0x1844>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d136      	bne.n	800205a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <menu+0x1874>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	f7fe fb8c 	bl	800070e <lcd_print>
 8001ff6:	e030      	b.n	800205a <menu+0x188a>
 8001ff8:	20000b36 	.word	0x20000b36
 8001ffc:	0800cd24 	.word	0x0800cd24
 8002000:	40010800 	.word	0x40010800
 8002004:	20000b5b 	.word	0x20000b5b
 8002008:	20000ac0 	.word	0x20000ac0
 800200c:	20000b58 	.word	0x20000b58
 8002010:	20000b2c 	.word	0x20000b2c
 8002014:	20000b4d 	.word	0x20000b4d
 8002018:	0800cda4 	.word	0x0800cda4
 800201c:	0800cd48 	.word	0x0800cd48
 8002020:	0800cdb8 	.word	0x0800cdb8
 8002024:	0800cd6c 	.word	0x0800cd6c
 8002028:	20000b46 	.word	0x20000b46
 800202c:	20000b00 	.word	0x20000b00
 8002030:	0800cdcc 	.word	0x0800cdcc
 8002034:	0800cde0 	.word	0x0800cde0
 8002038:	20000b37 	.word	0x20000b37
 800203c:	0800ccec 	.word	0x0800ccec
 8002040:	0800cd00 	.word	0x0800cd00
 8002044:	0800cd10 	.word	0x0800cd10
			}
		} else if(kapitablaTip == 2) {
 8002048:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <menu+0x19e8>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d104      	bne.n	800205a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002050:	4a5a      	ldr	r2, [pc, #360]	; (80021bc <menu+0x19ec>)
 8002052:	2101      	movs	r1, #1
 8002054:	2002      	movs	r0, #2
 8002056:	f7fe fb5a 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800205a:	2102      	movs	r1, #2
 800205c:	4858      	ldr	r0, [pc, #352]	; (80021c0 <menu+0x19f0>)
 800205e:	f006 fdd1 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d115      	bne.n	8002094 <menu+0x18c4>
 8002068:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <menu+0x19f4>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	f083 0301 	eor.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00e      	beq.n	8002094 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002076:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <menu+0x19e8>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <menu+0x19e8>)
 8002080:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002082:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <menu+0x19e8>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d902      	bls.n	8002090 <menu+0x18c0>
				kapitablaTip = 0;
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <menu+0x19e8>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002090:	f003 f80a 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002094:	2104      	movs	r1, #4
 8002096:	484a      	ldr	r0, [pc, #296]	; (80021c0 <menu+0x19f0>)
 8002098:	f006 fdb4 	bl	8008c04 <HAL_GPIO_ReadPin>
 800209c:	4603      	mov	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d115      	bne.n	80020ce <menu+0x18fe>
 80020a2:	4b48      	ldr	r3, [pc, #288]	; (80021c4 <menu+0x19f4>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00e      	beq.n	80020ce <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 80020b0:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <menu+0x19e8>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <menu+0x19e8>)
 80020ba:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80020bc:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <menu+0x19e8>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d902      	bls.n	80020ca <menu+0x18fa>
		   		kapitablaTip = 2;
 80020c4:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <menu+0x19e8>)
 80020c6:	2202      	movs	r2, #2
 80020c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020ca:	f002 ffed 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ce:	2108      	movs	r1, #8
 80020d0:	483b      	ldr	r0, [pc, #236]	; (80021c0 <menu+0x19f0>)
 80020d2:	f006 fd97 	bl	8008c04 <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10d      	bne.n	80020f8 <menu+0x1928>
 80020dc:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <menu+0x19f4>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	f083 0301 	eor.w	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <menu+0x19e8>)
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <menu+0x19f8>)
 80020f0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80020f2:	4b36      	ldr	r3, [pc, #216]	; (80021cc <menu+0x19fc>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80020f8:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <menu+0x1a00>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b0e      	cmp	r3, #14
 80020fe:	f040 80f2 	bne.w	80022e6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <menu+0x1a04>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 800210a:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <menu+0x1a08>)
 800210c:	2101      	movs	r1, #1
 800210e:	2001      	movs	r0, #1
 8002110:	f7fe fafd 	bl	800070e <lcd_print>
 8002114:	e008      	b.n	8002128 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002116:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <menu+0x1a04>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d104      	bne.n	8002128 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 800211e:	4a2f      	ldr	r2, [pc, #188]	; (80021dc <menu+0x1a0c>)
 8002120:	2101      	movs	r1, #1
 8002122:	2001      	movs	r0, #1
 8002124:	f7fe faf3 	bl	800070e <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <menu+0x1a10>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d113      	bne.n	8002158 <menu+0x1988>
			if(dilSecim == 0){
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <menu+0x1a04>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002138:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <menu+0x1a14>)
 800213a:	2101      	movs	r1, #1
 800213c:	2002      	movs	r0, #2
 800213e:	f7fe fae6 	bl	800070e <lcd_print>
 8002142:	e071      	b.n	8002228 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <menu+0x1a04>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d16d      	bne.n	8002228 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 800214c:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <menu+0x1a18>)
 800214e:	2101      	movs	r1, #1
 8002150:	2002      	movs	r0, #2
 8002152:	f7fe fadc 	bl	800070e <lcd_print>
 8002156:	e067      	b.n	8002228 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <menu+0x1a10>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d112      	bne.n	8002186 <menu+0x19b6>
			if(dilSecim == 0){
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <menu+0x1a04>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <menu+0x1a1c>)
 800216a:	2101      	movs	r1, #1
 800216c:	2002      	movs	r0, #2
 800216e:	f7fe face 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1){
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <menu+0x1a04>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d156      	bne.n	8002228 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <menu+0x1a20>)
 800217c:	2101      	movs	r1, #1
 800217e:	2002      	movs	r0, #2
 8002180:	f7fe fac5 	bl	800070e <lcd_print>
 8002184:	e050      	b.n	8002228 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <menu+0x1a10>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d136      	bne.n	80021fc <menu+0x1a2c>
			if(dilSecim == 0){
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <menu+0x1a04>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <menu+0x1a24>)
 8002198:	2101      	movs	r1, #1
 800219a:	2002      	movs	r0, #2
 800219c:	f7fe fab7 	bl	800070e <lcd_print>
 80021a0:	e042      	b.n	8002228 <menu+0x1a58>
			} else if(dilSecim == 1) {
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <menu+0x1a04>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d13e      	bne.n	8002228 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <menu+0x1a28>)
 80021ac:	2101      	movs	r1, #1
 80021ae:	2002      	movs	r0, #2
 80021b0:	f7fe faad 	bl	800070e <lcd_print>
 80021b4:	e038      	b.n	8002228 <menu+0x1a58>
 80021b6:	bf00      	nop
 80021b8:	20000b37 	.word	0x20000b37
 80021bc:	0800cd24 	.word	0x0800cd24
 80021c0:	40010800 	.word	0x40010800
 80021c4:	20000b5b 	.word	0x20000b5b
 80021c8:	20000ac0 	.word	0x20000ac0
 80021cc:	20000b58 	.word	0x20000b58
 80021d0:	20000b2c 	.word	0x20000b2c
 80021d4:	20000b4d 	.word	0x20000b4d
 80021d8:	0800cdf4 	.word	0x0800cdf4
 80021dc:	0800ce08 	.word	0x0800ce08
 80021e0:	20000b39 	.word	0x20000b39
 80021e4:	0800ce1c 	.word	0x0800ce1c
 80021e8:	0800ce2c 	.word	0x0800ce2c
 80021ec:	0800ce3c 	.word	0x0800ce3c
 80021f0:	0800ce4c 	.word	0x0800ce4c
 80021f4:	0800ce5c 	.word	0x0800ce5c
 80021f8:	0800ce70 	.word	0x0800ce70
			}
		} else if(kapiTablaAcKonum == 3) {
 80021fc:	4b9b      	ldr	r3, [pc, #620]	; (800246c <menu+0x1c9c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d111      	bne.n	8002228 <menu+0x1a58>
			if(dilSecim == 0) {
 8002204:	4b9a      	ldr	r3, [pc, #616]	; (8002470 <menu+0x1ca0>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d104      	bne.n	8002216 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 800220c:	4a99      	ldr	r2, [pc, #612]	; (8002474 <menu+0x1ca4>)
 800220e:	2101      	movs	r1, #1
 8002210:	2002      	movs	r0, #2
 8002212:	f7fe fa7c 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1) {
 8002216:	4b96      	ldr	r3, [pc, #600]	; (8002470 <menu+0x1ca0>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d104      	bne.n	8002228 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 800221e:	4a96      	ldr	r2, [pc, #600]	; (8002478 <menu+0x1ca8>)
 8002220:	2101      	movs	r1, #1
 8002222:	2002      	movs	r0, #2
 8002224:	f7fe fa73 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002228:	2102      	movs	r1, #2
 800222a:	4894      	ldr	r0, [pc, #592]	; (800247c <menu+0x1cac>)
 800222c:	f006 fcea 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d115      	bne.n	8002262 <menu+0x1a92>
 8002236:	4b92      	ldr	r3, [pc, #584]	; (8002480 <menu+0x1cb0>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	f083 0301 	eor.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002244:	4b89      	ldr	r3, [pc, #548]	; (800246c <menu+0x1c9c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b87      	ldr	r3, [pc, #540]	; (800246c <menu+0x1c9c>)
 800224e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002250:	4b86      	ldr	r3, [pc, #536]	; (800246c <menu+0x1c9c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d902      	bls.n	800225e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002258:	4b84      	ldr	r3, [pc, #528]	; (800246c <menu+0x1c9c>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800225e:	f002 ff23 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002262:	2104      	movs	r1, #4
 8002264:	4885      	ldr	r0, [pc, #532]	; (800247c <menu+0x1cac>)
 8002266:	f006 fccd 	bl	8008c04 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d115      	bne.n	800229c <menu+0x1acc>
 8002270:	4b83      	ldr	r3, [pc, #524]	; (8002480 <menu+0x1cb0>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00e      	beq.n	800229c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800227e:	4b7b      	ldr	r3, [pc, #492]	; (800246c <menu+0x1c9c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b79      	ldr	r3, [pc, #484]	; (800246c <menu+0x1c9c>)
 8002288:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800228a:	4b78      	ldr	r3, [pc, #480]	; (800246c <menu+0x1c9c>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d902      	bls.n	8002298 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002292:	4b76      	ldr	r3, [pc, #472]	; (800246c <menu+0x1c9c>)
 8002294:	2202      	movs	r2, #2
 8002296:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002298:	f002 ff06 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800229c:	2108      	movs	r1, #8
 800229e:	4877      	ldr	r0, [pc, #476]	; (800247c <menu+0x1cac>)
 80022a0:	f006 fcb0 	bl	8008c04 <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d11d      	bne.n	80022e6 <menu+0x1b16>
 80022aa:	4b75      	ldr	r3, [pc, #468]	; (8002480 <menu+0x1cb0>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d016      	beq.n	80022e6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 80022b8:	4b6c      	ldr	r3, [pc, #432]	; (800246c <menu+0x1c9c>)
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	4b71      	ldr	r3, [pc, #452]	; (8002484 <menu+0x1cb4>)
 80022be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80022c2:	4b6a      	ldr	r3, [pc, #424]	; (800246c <menu+0x1c9c>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <menu+0x1b02>
 80022ca:	4b68      	ldr	r3, [pc, #416]	; (800246c <menu+0x1c9c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d106      	bne.n	80022e0 <menu+0x1b10>
				altLimit = 1;
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <menu+0x1cb8>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80022d8:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <menu+0x1cb8>)
 80022da:	781a      	ldrb	r2, [r3, #0]
 80022dc:	4b69      	ldr	r3, [pc, #420]	; (8002484 <menu+0x1cb4>)
 80022de:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <menu+0x1cbc>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80022e6:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <menu+0x1cc0>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	d17f      	bne.n	80023ee <menu+0x1c1e>
		if(dilSecim == 0) {
 80022ee:	4b60      	ldr	r3, [pc, #384]	; (8002470 <menu+0x1ca0>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80022f6:	4a67      	ldr	r2, [pc, #412]	; (8002494 <menu+0x1cc4>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7fe fa07 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002300:	4a65      	ldr	r2, [pc, #404]	; (8002498 <menu+0x1cc8>)
 8002302:	2101      	movs	r1, #1
 8002304:	2002      	movs	r0, #2
 8002306:	f7fe fa02 	bl	800070e <lcd_print>
 800230a:	e00d      	b.n	8002328 <menu+0x1b58>
		} else if(dilSecim == 1) {
 800230c:	4b58      	ldr	r3, [pc, #352]	; (8002470 <menu+0x1ca0>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d109      	bne.n	8002328 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002314:	4a61      	ldr	r2, [pc, #388]	; (800249c <menu+0x1ccc>)
 8002316:	2101      	movs	r1, #1
 8002318:	2001      	movs	r0, #1
 800231a:	f7fe f9f8 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800231e:	4a60      	ldr	r2, [pc, #384]	; (80024a0 <menu+0x1cd0>)
 8002320:	2101      	movs	r1, #1
 8002322:	2002      	movs	r0, #2
 8002324:	f7fe f9f3 	bl	800070e <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002328:	4b5e      	ldr	r3, [pc, #376]	; (80024a4 <menu+0x1cd4>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	220a      	movs	r2, #10
 800232e:	495e      	ldr	r1, [pc, #376]	; (80024a8 <menu+0x1cd8>)
 8002330:	4618      	mov	r0, r3
 8002332:	f009 fc93 	bl	800bc5c <itoa>
		lcd_print(2,16,snum);
 8002336:	4a5c      	ldr	r2, [pc, #368]	; (80024a8 <menu+0x1cd8>)
 8002338:	2110      	movs	r1, #16
 800233a:	2002      	movs	r0, #2
 800233c:	f7fe f9e7 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002340:	2102      	movs	r1, #2
 8002342:	484e      	ldr	r0, [pc, #312]	; (800247c <menu+0x1cac>)
 8002344:	f006 fc5e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d119      	bne.n	8002382 <menu+0x1bb2>
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <menu+0x1cb0>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f083 0301 	eor.w	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d012      	beq.n	8002382 <menu+0x1bb2>
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <menu+0x1cdc>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10e      	bne.n	8002382 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002364:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <menu+0x1cd4>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <menu+0x1cd4>)
 800236e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002370:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <menu+0x1cd4>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d902      	bls.n	800237e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002378:	4b4a      	ldr	r3, [pc, #296]	; (80024a4 <menu+0x1cd4>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800237e:	f002 fe93 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002382:	2104      	movs	r1, #4
 8002384:	483d      	ldr	r0, [pc, #244]	; (800247c <menu+0x1cac>)
 8002386:	f006 fc3d 	bl	8008c04 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d119      	bne.n	80023c4 <menu+0x1bf4>
 8002390:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <menu+0x1cb0>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d012      	beq.n	80023c4 <menu+0x1bf4>
 800239e:	4b43      	ldr	r3, [pc, #268]	; (80024ac <menu+0x1cdc>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <menu+0x1cd4>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <menu+0x1cd4>)
 80023b0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80023b2:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <menu+0x1cd4>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <menu+0x1cd4>)
 80023bc:	2205      	movs	r2, #5
 80023be:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80023c0:	f002 fe72 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023c4:	2108      	movs	r1, #8
 80023c6:	482d      	ldr	r0, [pc, #180]	; (800247c <menu+0x1cac>)
 80023c8:	f006 fc1c 	bl	8008c04 <HAL_GPIO_ReadPin>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10d      	bne.n	80023ee <menu+0x1c1e>
 80023d2:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <menu+0x1cb0>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	f083 0301 	eor.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <menu+0x1cd4>)
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <menu+0x1cb4>)
 80023e6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <menu+0x1cbc>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <menu+0x1cc0>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	f040 80bc 	bne.w	8002570 <menu+0x1da0>
		if(dilSecim == 0) {
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <menu+0x1ca0>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002400:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <menu+0x1ce0>)
 8002402:	2101      	movs	r1, #1
 8002404:	2001      	movs	r0, #1
 8002406:	f7fe f982 	bl	800070e <lcd_print>
 800240a:	e008      	b.n	800241e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <menu+0x1ca0>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d104      	bne.n	800241e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002414:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <menu+0x1ce4>)
 8002416:	2101      	movs	r1, #1
 8002418:	2001      	movs	r0, #1
 800241a:	f7fe f978 	bl	800070e <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <menu+0x1ce8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d113      	bne.n	800244e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <menu+0x1ca0>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800242e:	4a11      	ldr	r2, [pc, #68]	; (8002474 <menu+0x1ca4>)
 8002430:	2101      	movs	r1, #1
 8002432:	2002      	movs	r0, #2
 8002434:	f7fe f96b 	bl	800070e <lcd_print>
 8002438:	e04b      	b.n	80024d2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <menu+0x1ca0>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d147      	bne.n	80024d2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002442:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <menu+0x1ca8>)
 8002444:	2101      	movs	r1, #1
 8002446:	2002      	movs	r0, #2
 8002448:	f7fe f961 	bl	800070e <lcd_print>
 800244c:	e041      	b.n	80024d2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <menu+0x1ce8>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d13d      	bne.n	80024d2 <menu+0x1d02>
			if(dilSecim == 0) {
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <menu+0x1ca0>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d130      	bne.n	80024c0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <menu+0x1cec>)
 8002460:	2101      	movs	r1, #1
 8002462:	2002      	movs	r0, #2
 8002464:	f7fe f953 	bl	800070e <lcd_print>
 8002468:	e033      	b.n	80024d2 <menu+0x1d02>
 800246a:	bf00      	nop
 800246c:	20000b39 	.word	0x20000b39
 8002470:	20000b4d 	.word	0x20000b4d
 8002474:	0800cae4 	.word	0x0800cae4
 8002478:	0800caf8 	.word	0x0800caf8
 800247c:	40010800 	.word	0x40010800
 8002480:	20000b5b 	.word	0x20000b5b
 8002484:	20000ac0 	.word	0x20000ac0
 8002488:	20000b32 	.word	0x20000b32
 800248c:	20000b58 	.word	0x20000b58
 8002490:	20000b2c 	.word	0x20000b2c
 8002494:	0800ce84 	.word	0x0800ce84
 8002498:	0800cd48 	.word	0x0800cd48
 800249c:	0800ce98 	.word	0x0800ce98
 80024a0:	0800cd6c 	.word	0x0800cd6c
 80024a4:	20000b47 	.word	0x20000b47
 80024a8:	20000b00 	.word	0x20000b00
 80024ac:	20000b37 	.word	0x20000b37
 80024b0:	0800ceac 	.word	0x0800ceac
 80024b4:	0800cec0 	.word	0x0800cec0
 80024b8:	20000b3a 	.word	0x20000b3a
 80024bc:	0800cb44 	.word	0x0800cb44
			} else if(dilSecim == 1) {
 80024c0:	4b99      	ldr	r3, [pc, #612]	; (8002728 <menu+0x1f58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d104      	bne.n	80024d2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80024c8:	4a98      	ldr	r2, [pc, #608]	; (800272c <menu+0x1f5c>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	2002      	movs	r0, #2
 80024ce:	f7fe f91e 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d2:	2102      	movs	r1, #2
 80024d4:	4896      	ldr	r0, [pc, #600]	; (8002730 <menu+0x1f60>)
 80024d6:	f006 fb95 	bl	8008c04 <HAL_GPIO_ReadPin>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d115      	bne.n	800250c <menu+0x1d3c>
 80024e0:	4b94      	ldr	r3, [pc, #592]	; (8002734 <menu+0x1f64>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	f083 0301 	eor.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00e      	beq.n	800250c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80024ee:	4b92      	ldr	r3, [pc, #584]	; (8002738 <menu+0x1f68>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	3301      	adds	r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b90      	ldr	r3, [pc, #576]	; (8002738 <menu+0x1f68>)
 80024f8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80024fa:	4b8f      	ldr	r3, [pc, #572]	; (8002738 <menu+0x1f68>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d902      	bls.n	8002508 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002502:	4b8d      	ldr	r3, [pc, #564]	; (8002738 <menu+0x1f68>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002508:	f002 fdce 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800250c:	2104      	movs	r1, #4
 800250e:	4888      	ldr	r0, [pc, #544]	; (8002730 <menu+0x1f60>)
 8002510:	f006 fb78 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d115      	bne.n	8002546 <menu+0x1d76>
 800251a:	4b86      	ldr	r3, [pc, #536]	; (8002734 <menu+0x1f64>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f083 0301 	eor.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002528:	4b83      	ldr	r3, [pc, #524]	; (8002738 <menu+0x1f68>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b81      	ldr	r3, [pc, #516]	; (8002738 <menu+0x1f68>)
 8002532:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002534:	4b80      	ldr	r3, [pc, #512]	; (8002738 <menu+0x1f68>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <menu+0x1f68>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002542:	f002 fdb1 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002546:	2108      	movs	r1, #8
 8002548:	4879      	ldr	r0, [pc, #484]	; (8002730 <menu+0x1f60>)
 800254a:	f006 fb5b 	bl	8008c04 <HAL_GPIO_ReadPin>
 800254e:	4603      	mov	r3, r0
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10d      	bne.n	8002570 <menu+0x1da0>
 8002554:	4b77      	ldr	r3, [pc, #476]	; (8002734 <menu+0x1f64>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	f083 0301 	eor.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002562:	4b75      	ldr	r3, [pc, #468]	; (8002738 <menu+0x1f68>)
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b75      	ldr	r3, [pc, #468]	; (800273c <menu+0x1f6c>)
 8002568:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800256a:	4b75      	ldr	r3, [pc, #468]	; (8002740 <menu+0x1f70>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002570:	4b74      	ldr	r3, [pc, #464]	; (8002744 <menu+0x1f74>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b11      	cmp	r3, #17
 8002576:	f040 80c3 	bne.w	8002700 <menu+0x1f30>
		if(dilSecim == 0) {
 800257a:	4b6b      	ldr	r3, [pc, #428]	; (8002728 <menu+0x1f58>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002582:	4a71      	ldr	r2, [pc, #452]	; (8002748 <menu+0x1f78>)
 8002584:	2101      	movs	r1, #1
 8002586:	2001      	movs	r0, #1
 8002588:	f7fe f8c1 	bl	800070e <lcd_print>
 800258c:	e008      	b.n	80025a0 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800258e:	4b66      	ldr	r3, [pc, #408]	; (8002728 <menu+0x1f58>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d104      	bne.n	80025a0 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002596:	4a6d      	ldr	r2, [pc, #436]	; (800274c <menu+0x1f7c>)
 8002598:	2101      	movs	r1, #1
 800259a:	2001      	movs	r0, #1
 800259c:	f7fe f8b7 	bl	800070e <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80025a0:	4b6b      	ldr	r3, [pc, #428]	; (8002750 <menu+0x1f80>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d113      	bne.n	80025d0 <menu+0x1e00>
			if(dilSecim == 0){
 80025a8:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <menu+0x1f58>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80025b0:	4a68      	ldr	r2, [pc, #416]	; (8002754 <menu+0x1f84>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	2002      	movs	r0, #2
 80025b6:	f7fe f8aa 	bl	800070e <lcd_print>
 80025ba:	e038      	b.n	800262e <menu+0x1e5e>
			} else if(dilSecim == 1){
 80025bc:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <menu+0x1f58>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d134      	bne.n	800262e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80025c4:	4a64      	ldr	r2, [pc, #400]	; (8002758 <menu+0x1f88>)
 80025c6:	2101      	movs	r1, #1
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7fe f8a0 	bl	800070e <lcd_print>
 80025ce:	e02e      	b.n	800262e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80025d0:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <menu+0x1f80>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d113      	bne.n	8002600 <menu+0x1e30>
			if(dilSecim == 0){
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <menu+0x1f58>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80025e0:	4a5e      	ldr	r2, [pc, #376]	; (800275c <menu+0x1f8c>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	2002      	movs	r0, #2
 80025e6:	f7fe f892 	bl	800070e <lcd_print>
 80025ea:	e020      	b.n	800262e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80025ec:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <menu+0x1f58>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d11c      	bne.n	800262e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80025f4:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <menu+0x1f90>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	2002      	movs	r0, #2
 80025fa:	f7fe f888 	bl	800070e <lcd_print>
 80025fe:	e016      	b.n	800262e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <menu+0x1f80>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d112      	bne.n	800262e <menu+0x1e5e>
			if(dilSecim == 0) {
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <menu+0x1f58>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002610:	4a54      	ldr	r2, [pc, #336]	; (8002764 <menu+0x1f94>)
 8002612:	2101      	movs	r1, #1
 8002614:	2002      	movs	r0, #2
 8002616:	f7fe f87a 	bl	800070e <lcd_print>
 800261a:	e008      	b.n	800262e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800261c:	4b42      	ldr	r3, [pc, #264]	; (8002728 <menu+0x1f58>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d104      	bne.n	800262e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002624:	4a50      	ldr	r2, [pc, #320]	; (8002768 <menu+0x1f98>)
 8002626:	2101      	movs	r1, #1
 8002628:	2002      	movs	r0, #2
 800262a:	f7fe f870 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800262e:	2102      	movs	r1, #2
 8002630:	483f      	ldr	r0, [pc, #252]	; (8002730 <menu+0x1f60>)
 8002632:	f006 fae7 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d115      	bne.n	8002668 <menu+0x1e98>
 800263c:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <menu+0x1f64>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	f083 0301 	eor.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00e      	beq.n	8002668 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <menu+0x1f80>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <menu+0x1f80>)
 8002654:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <menu+0x1f80>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d902      	bls.n	8002664 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <menu+0x1f80>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002664:	f002 fd20 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002668:	2104      	movs	r1, #4
 800266a:	4831      	ldr	r0, [pc, #196]	; (8002730 <menu+0x1f60>)
 800266c:	f006 faca 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	d115      	bne.n	80026a2 <menu+0x1ed2>
 8002676:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <menu+0x1f64>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002684:	4b32      	ldr	r3, [pc, #200]	; (8002750 <menu+0x1f80>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3b01      	subs	r3, #1
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <menu+0x1f80>)
 800268e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <menu+0x1f80>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d902      	bls.n	800269e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <menu+0x1f80>)
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800269e:	f002 fd03 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a2:	2108      	movs	r1, #8
 80026a4:	4822      	ldr	r0, [pc, #136]	; (8002730 <menu+0x1f60>)
 80026a6:	f006 faad 	bl	8008c04 <HAL_GPIO_ReadPin>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d127      	bne.n	8002700 <menu+0x1f30>
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <menu+0x1f64>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d020      	beq.n	8002700 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <menu+0x1f80>)
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <menu+0x1f6c>)
 80026c4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <menu+0x1f80>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d003      	beq.n	80026d6 <menu+0x1f06>
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <menu+0x1f80>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d106      	bne.n	80026e4 <menu+0x1f14>
				calismaSekli = 0;
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <menu+0x1f9c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <menu+0x1f9c>)
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <menu+0x1f6c>)
 80026e2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <menu+0x1f80>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <menu+0x1fa0>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <menu+0x1fa0>)
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <menu+0x1f6c>)
 80026f8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <menu+0x1f70>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <menu+0x1f74>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b12      	cmp	r3, #18
 8002706:	f040 80d5 	bne.w	80028b4 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <menu+0x1f80>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d13c      	bne.n	800278c <menu+0x1fbc>
			if(dilSecim == 0) {
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <menu+0x1f58>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d12e      	bne.n	8002778 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <menu+0x1fa4>)
 800271c:	2101      	movs	r1, #1
 800271e:	2001      	movs	r0, #1
 8002720:	f7fd fff5 	bl	800070e <lcd_print>
 8002724:	e048      	b.n	80027b8 <menu+0x1fe8>
 8002726:	bf00      	nop
 8002728:	20000b4d 	.word	0x20000b4d
 800272c:	0800cb58 	.word	0x0800cb58
 8002730:	40010800 	.word	0x40010800
 8002734:	20000b5b 	.word	0x20000b5b
 8002738:	20000b3a 	.word	0x20000b3a
 800273c:	20000ac0 	.word	0x20000ac0
 8002740:	20000b58 	.word	0x20000b58
 8002744:	20000b2c 	.word	0x20000b2c
 8002748:	0800ced4 	.word	0x0800ced4
 800274c:	0800cee8 	.word	0x0800cee8
 8002750:	20000b3b 	.word	0x20000b3b
 8002754:	0800cefc 	.word	0x0800cefc
 8002758:	0800cf0c 	.word	0x0800cf0c
 800275c:	0800cf1c 	.word	0x0800cf1c
 8002760:	0800cf2c 	.word	0x0800cf2c
 8002764:	0800cae4 	.word	0x0800cae4
 8002768:	0800caf8 	.word	0x0800caf8
 800276c:	20000b2d 	.word	0x20000b2d
 8002770:	20000b3e 	.word	0x20000b3e
 8002774:	0800cf3c 	.word	0x0800cf3c
			} else if(dilSecim == 1) {
 8002778:	4b7b      	ldr	r3, [pc, #492]	; (8002968 <menu+0x2198>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d11b      	bne.n	80027b8 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8002780:	4a7a      	ldr	r2, [pc, #488]	; (800296c <menu+0x219c>)
 8002782:	2101      	movs	r1, #1
 8002784:	2001      	movs	r0, #1
 8002786:	f7fd ffc2 	bl	800070e <lcd_print>
 800278a:	e015      	b.n	80027b8 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800278c:	4b78      	ldr	r3, [pc, #480]	; (8002970 <menu+0x21a0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d111      	bne.n	80027b8 <menu+0x1fe8>
			if(dilSecim == 0){
 8002794:	4b74      	ldr	r3, [pc, #464]	; (8002968 <menu+0x2198>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800279c:	4a75      	ldr	r2, [pc, #468]	; (8002974 <menu+0x21a4>)
 800279e:	2101      	movs	r1, #1
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7fd ffb4 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1){
 80027a6:	4b70      	ldr	r3, [pc, #448]	; (8002968 <menu+0x2198>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d104      	bne.n	80027b8 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80027ae:	4a72      	ldr	r2, [pc, #456]	; (8002978 <menu+0x21a8>)
 80027b0:	2101      	movs	r1, #1
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7fd ffab 	bl	800070e <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80027b8:	4b70      	ldr	r3, [pc, #448]	; (800297c <menu+0x21ac>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d113      	bne.n	80027e8 <menu+0x2018>
			if(dilSecim == 0) {
 80027c0:	4b69      	ldr	r3, [pc, #420]	; (8002968 <menu+0x2198>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80027c8:	4a6d      	ldr	r2, [pc, #436]	; (8002980 <menu+0x21b0>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	2002      	movs	r0, #2
 80027ce:	f7fd ff9e 	bl	800070e <lcd_print>
 80027d2:	e020      	b.n	8002816 <menu+0x2046>
			} else if(dilSecim == 1){
 80027d4:	4b64      	ldr	r3, [pc, #400]	; (8002968 <menu+0x2198>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d11c      	bne.n	8002816 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80027dc:	4a69      	ldr	r2, [pc, #420]	; (8002984 <menu+0x21b4>)
 80027de:	2101      	movs	r1, #1
 80027e0:	2002      	movs	r0, #2
 80027e2:	f7fd ff94 	bl	800070e <lcd_print>
 80027e6:	e016      	b.n	8002816 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80027e8:	4b64      	ldr	r3, [pc, #400]	; (800297c <menu+0x21ac>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d112      	bne.n	8002816 <menu+0x2046>
			if(dilSecim == 0){
 80027f0:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <menu+0x2198>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80027f8:	4a63      	ldr	r2, [pc, #396]	; (8002988 <menu+0x21b8>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	2002      	movs	r0, #2
 80027fe:	f7fd ff86 	bl	800070e <lcd_print>
 8002802:	e008      	b.n	8002816 <menu+0x2046>
			} else if(dilSecim == 1){
 8002804:	4b58      	ldr	r3, [pc, #352]	; (8002968 <menu+0x2198>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d104      	bne.n	8002816 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800280c:	4a5f      	ldr	r2, [pc, #380]	; (800298c <menu+0x21bc>)
 800280e:	2101      	movs	r1, #1
 8002810:	2002      	movs	r0, #2
 8002812:	f7fd ff7c 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002816:	2102      	movs	r1, #2
 8002818:	485d      	ldr	r0, [pc, #372]	; (8002990 <menu+0x21c0>)
 800281a:	f006 f9f3 	bl	8008c04 <HAL_GPIO_ReadPin>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	d115      	bne.n	8002850 <menu+0x2080>
 8002824:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <menu+0x21c4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	f083 0301 	eor.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00e      	beq.n	8002850 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002832:	4b52      	ldr	r3, [pc, #328]	; (800297c <menu+0x21ac>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b50      	ldr	r3, [pc, #320]	; (800297c <menu+0x21ac>)
 800283c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800283e:	4b4f      	ldr	r3, [pc, #316]	; (800297c <menu+0x21ac>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d902      	bls.n	800284c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8002846:	4b4d      	ldr	r3, [pc, #308]	; (800297c <menu+0x21ac>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800284c:	f002 fc2c 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002850:	2104      	movs	r1, #4
 8002852:	484f      	ldr	r0, [pc, #316]	; (8002990 <menu+0x21c0>)
 8002854:	f006 f9d6 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d115      	bne.n	800288a <menu+0x20ba>
 800285e:	4b4d      	ldr	r3, [pc, #308]	; (8002994 <menu+0x21c4>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	f083 0301 	eor.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00e      	beq.n	800288a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800286c:	4b43      	ldr	r3, [pc, #268]	; (800297c <menu+0x21ac>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	3b01      	subs	r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b41      	ldr	r3, [pc, #260]	; (800297c <menu+0x21ac>)
 8002876:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002878:	4b40      	ldr	r3, [pc, #256]	; (800297c <menu+0x21ac>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8002880:	4b3e      	ldr	r3, [pc, #248]	; (800297c <menu+0x21ac>)
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002886:	f002 fc0f 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800288a:	2108      	movs	r1, #8
 800288c:	4840      	ldr	r0, [pc, #256]	; (8002990 <menu+0x21c0>)
 800288e:	f006 f9b9 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002892:	4603      	mov	r3, r0
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10d      	bne.n	80028b4 <menu+0x20e4>
 8002898:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <menu+0x21c4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80028a6:	4b35      	ldr	r3, [pc, #212]	; (800297c <menu+0x21ac>)
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <menu+0x21c8>)
 80028ac:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <menu+0x21cc>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <menu+0x21d0>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b13      	cmp	r3, #19
 80028ba:	f040 80d5 	bne.w	8002a68 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <menu+0x21a0>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d113      	bne.n	80028ee <menu+0x211e>
			if(dilSecim == 0) {
 80028c6:	4b28      	ldr	r3, [pc, #160]	; (8002968 <menu+0x2198>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80028ce:	4a35      	ldr	r2, [pc, #212]	; (80029a4 <menu+0x21d4>)
 80028d0:	2101      	movs	r1, #1
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7fd ff1b 	bl	800070e <lcd_print>
 80028d8:	e01f      	b.n	800291a <menu+0x214a>
			} else if(dilSecim == 1) {
 80028da:	4b23      	ldr	r3, [pc, #140]	; (8002968 <menu+0x2198>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d11b      	bne.n	800291a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80028e2:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <menu+0x21d8>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7fd ff11 	bl	800070e <lcd_print>
 80028ec:	e015      	b.n	800291a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <menu+0x21a0>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d111      	bne.n	800291a <menu+0x214a>
			if(dilSecim == 0) {
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <menu+0x2198>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80028fe:	4a2b      	ldr	r2, [pc, #172]	; (80029ac <menu+0x21dc>)
 8002900:	2101      	movs	r1, #1
 8002902:	2001      	movs	r0, #1
 8002904:	f7fd ff03 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1) {
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <menu+0x2198>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d104      	bne.n	800291a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <menu+0x21e0>)
 8002912:	2101      	movs	r1, #1
 8002914:	2001      	movs	r0, #1
 8002916:	f7fd fefa 	bl	800070e <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <menu+0x21e4>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d113      	bne.n	800294a <menu+0x217a>
			if(dilSecim == 0) {
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <menu+0x2198>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <menu+0x21b0>)
 800292c:	2101      	movs	r1, #1
 800292e:	2002      	movs	r0, #2
 8002930:	f7fd feed 	bl	800070e <lcd_print>
 8002934:	e049      	b.n	80029ca <menu+0x21fa>
			} else if(dilSecim == 1) {
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <menu+0x2198>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d145      	bne.n	80029ca <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800293e:	4a11      	ldr	r2, [pc, #68]	; (8002984 <menu+0x21b4>)
 8002940:	2101      	movs	r1, #1
 8002942:	2002      	movs	r0, #2
 8002944:	f7fd fee3 	bl	800070e <lcd_print>
 8002948:	e03f      	b.n	80029ca <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <menu+0x21e4>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d13b      	bne.n	80029ca <menu+0x21fa>
			if(dilSecim == 0) {
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <menu+0x2198>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12e      	bne.n	80029b8 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <menu+0x21b8>)
 800295c:	2101      	movs	r1, #1
 800295e:	2002      	movs	r0, #2
 8002960:	f7fd fed5 	bl	800070e <lcd_print>
 8002964:	e031      	b.n	80029ca <menu+0x21fa>
 8002966:	bf00      	nop
 8002968:	20000b4d 	.word	0x20000b4d
 800296c:	0800cf50 	.word	0x0800cf50
 8002970:	20000b3b 	.word	0x20000b3b
 8002974:	0800cf60 	.word	0x0800cf60
 8002978:	0800cf74 	.word	0x0800cf74
 800297c:	20000b3c 	.word	0x20000b3c
 8002980:	0800cae4 	.word	0x0800cae4
 8002984:	0800caf8 	.word	0x0800caf8
 8002988:	0800cb44 	.word	0x0800cb44
 800298c:	0800cb58 	.word	0x0800cb58
 8002990:	40010800 	.word	0x40010800
 8002994:	20000b5b 	.word	0x20000b5b
 8002998:	20000ac0 	.word	0x20000ac0
 800299c:	20000b58 	.word	0x20000b58
 80029a0:	20000b2c 	.word	0x20000b2c
 80029a4:	0800cf88 	.word	0x0800cf88
 80029a8:	0800cf9c 	.word	0x0800cf9c
 80029ac:	0800cfb0 	.word	0x0800cfb0
 80029b0:	0800cfc4 	.word	0x0800cfc4
 80029b4:	20000b3d 	.word	0x20000b3d
			} else if(dilSecim == 1) {
 80029b8:	4b90      	ldr	r3, [pc, #576]	; (8002bfc <menu+0x242c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d104      	bne.n	80029ca <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80029c0:	4a8f      	ldr	r2, [pc, #572]	; (8002c00 <menu+0x2430>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	2002      	movs	r0, #2
 80029c6:	f7fd fea2 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ca:	2102      	movs	r1, #2
 80029cc:	488d      	ldr	r0, [pc, #564]	; (8002c04 <menu+0x2434>)
 80029ce:	f006 f919 	bl	8008c04 <HAL_GPIO_ReadPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d115      	bne.n	8002a04 <menu+0x2234>
 80029d8:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <menu+0x2438>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00e      	beq.n	8002a04 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80029e6:	4b89      	ldr	r3, [pc, #548]	; (8002c0c <menu+0x243c>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b87      	ldr	r3, [pc, #540]	; (8002c0c <menu+0x243c>)
 80029f0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80029f2:	4b86      	ldr	r3, [pc, #536]	; (8002c0c <menu+0x243c>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d902      	bls.n	8002a00 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80029fa:	4b84      	ldr	r3, [pc, #528]	; (8002c0c <menu+0x243c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a00:	f002 fb52 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a04:	2104      	movs	r1, #4
 8002a06:	487f      	ldr	r0, [pc, #508]	; (8002c04 <menu+0x2434>)
 8002a08:	f006 f8fc 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d115      	bne.n	8002a3e <menu+0x226e>
 8002a12:	4b7d      	ldr	r3, [pc, #500]	; (8002c08 <menu+0x2438>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	f083 0301 	eor.w	r3, r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002a20:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <menu+0x243c>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b78      	ldr	r3, [pc, #480]	; (8002c0c <menu+0x243c>)
 8002a2a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002a2c:	4b77      	ldr	r3, [pc, #476]	; (8002c0c <menu+0x243c>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8002a34:	4b75      	ldr	r3, [pc, #468]	; (8002c0c <menu+0x243c>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a3a:	f002 fb35 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a3e:	2108      	movs	r1, #8
 8002a40:	4870      	ldr	r0, [pc, #448]	; (8002c04 <menu+0x2434>)
 8002a42:	f006 f8df 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10d      	bne.n	8002a68 <menu+0x2298>
 8002a4c:	4b6e      	ldr	r3, [pc, #440]	; (8002c08 <menu+0x2438>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	f083 0301 	eor.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002a5a:	4b6c      	ldr	r3, [pc, #432]	; (8002c0c <menu+0x243c>)
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <menu+0x2440>)
 8002a60:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <menu+0x2444>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002a68:	4b6b      	ldr	r3, [pc, #428]	; (8002c18 <menu+0x2448>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b14      	cmp	r3, #20
 8002a6e:	f040 80b5 	bne.w	8002bdc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002a72:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <menu+0x244c>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d113      	bne.n	8002aa2 <menu+0x22d2>
			if(dilSecim == 0) {
 8002a7a:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <menu+0x242c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d105      	bne.n	8002a8e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002a82:	4a67      	ldr	r2, [pc, #412]	; (8002c20 <menu+0x2450>)
 8002a84:	2101      	movs	r1, #1
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7fd fe41 	bl	800070e <lcd_print>
 8002a8c:	e020      	b.n	8002ad0 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <menu+0x242c>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d11c      	bne.n	8002ad0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002a96:	4a63      	ldr	r2, [pc, #396]	; (8002c24 <menu+0x2454>)
 8002a98:	2101      	movs	r1, #1
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f7fd fe37 	bl	800070e <lcd_print>
 8002aa0:	e016      	b.n	8002ad0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002aa2:	4b5e      	ldr	r3, [pc, #376]	; (8002c1c <menu+0x244c>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d112      	bne.n	8002ad0 <menu+0x2300>
			if(dilSecim == 0) {
 8002aaa:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <menu+0x242c>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <menu+0x2458>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7fd fe29 	bl	800070e <lcd_print>
 8002abc:	e008      	b.n	8002ad0 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002abe:	4b4f      	ldr	r3, [pc, #316]	; (8002bfc <menu+0x242c>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d104      	bne.n	8002ad0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002ac6:	4a59      	ldr	r2, [pc, #356]	; (8002c2c <menu+0x245c>)
 8002ac8:	2101      	movs	r1, #1
 8002aca:	2001      	movs	r0, #1
 8002acc:	f7fd fe1f 	bl	800070e <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002ad0:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <menu+0x2460>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d113      	bne.n	8002b00 <menu+0x2330>
			if(dilSecim == 0) {
 8002ad8:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <menu+0x242c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8002ae0:	4a54      	ldr	r2, [pc, #336]	; (8002c34 <menu+0x2464>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	f7fd fe12 	bl	800070e <lcd_print>
 8002aea:	e020      	b.n	8002b2e <menu+0x235e>
			} else if(dilSecim == 1) {
 8002aec:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <menu+0x242c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d11c      	bne.n	8002b2e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8002af4:	4a50      	ldr	r2, [pc, #320]	; (8002c38 <menu+0x2468>)
 8002af6:	2101      	movs	r1, #1
 8002af8:	2002      	movs	r0, #2
 8002afa:	f7fd fe08 	bl	800070e <lcd_print>
 8002afe:	e016      	b.n	8002b2e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <menu+0x2460>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d112      	bne.n	8002b2e <menu+0x235e>
			if(dilSecim == 0) {
 8002b08:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <menu+0x242c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8002b10:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <menu+0x246c>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	2002      	movs	r0, #2
 8002b16:	f7fd fdfa 	bl	800070e <lcd_print>
 8002b1a:	e008      	b.n	8002b2e <menu+0x235e>
			} else if(dilSecim == 1) {
 8002b1c:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <menu+0x242c>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d104      	bne.n	8002b2e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8002b24:	4a46      	ldr	r2, [pc, #280]	; (8002c40 <menu+0x2470>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7fd fdf0 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4834      	ldr	r0, [pc, #208]	; (8002c04 <menu+0x2434>)
 8002b32:	f006 f867 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d119      	bne.n	8002b70 <menu+0x23a0>
 8002b3c:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <menu+0x2438>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d012      	beq.n	8002b70 <menu+0x23a0>
 8002b4a:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <menu+0x244c>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d10e      	bne.n	8002b70 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002b52:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <menu+0x2460>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <menu+0x2460>)
 8002b5c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <menu+0x2460>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d902      	bls.n	8002b6c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002b66:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <menu+0x2460>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b6c:	f002 fa9c 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002b70:	2104      	movs	r1, #4
 8002b72:	4824      	ldr	r0, [pc, #144]	; (8002c04 <menu+0x2434>)
 8002b74:	f006 f846 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d119      	bne.n	8002bb2 <menu+0x23e2>
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <menu+0x2438>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	f083 0301 	eor.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <menu+0x23e2>
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <menu+0x244c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d10e      	bne.n	8002bb2 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <menu+0x2460>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <menu+0x2460>)
 8002b9e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <menu+0x2460>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <menu+0x2460>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bae:	f002 fa7b 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb2:	2108      	movs	r1, #8
 8002bb4:	4813      	ldr	r0, [pc, #76]	; (8002c04 <menu+0x2434>)
 8002bb6:	f006 f825 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10d      	bne.n	8002bdc <menu+0x240c>
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <menu+0x2438>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	f083 0301 	eor.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <menu+0x2460>)
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <menu+0x2440>)
 8002bd4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <menu+0x2444>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <menu+0x2448>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b15      	cmp	r3, #21
 8002be2:	f040 80c2 	bne.w	8002d6a <menu+0x259a>
		if(dilSecim == 0) {
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <menu+0x242c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d12c      	bne.n	8002c48 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <menu+0x2474>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7fd fd8b 	bl	800070e <lcd_print>
 8002bf8:	e02f      	b.n	8002c5a <menu+0x248a>
 8002bfa:	bf00      	nop
 8002bfc:	20000b4d 	.word	0x20000b4d
 8002c00:	0800cb58 	.word	0x0800cb58
 8002c04:	40010800 	.word	0x40010800
 8002c08:	20000b5b 	.word	0x20000b5b
 8002c0c:	20000b3d 	.word	0x20000b3d
 8002c10:	20000ac0 	.word	0x20000ac0
 8002c14:	20000b58 	.word	0x20000b58
 8002c18:	20000b2c 	.word	0x20000b2c
 8002c1c:	20000b3b 	.word	0x20000b3b
 8002c20:	0800cfd8 	.word	0x0800cfd8
 8002c24:	0800cfec 	.word	0x0800cfec
 8002c28:	0800d000 	.word	0x0800d000
 8002c2c:	0800d014 	.word	0x0800d014
 8002c30:	20000b3e 	.word	0x20000b3e
 8002c34:	0800d028 	.word	0x0800d028
 8002c38:	0800d03c 	.word	0x0800d03c
 8002c3c:	0800d04c 	.word	0x0800d04c
 8002c40:	0800d060 	.word	0x0800d060
 8002c44:	0800d070 	.word	0x0800d070
		} else if(dilSecim == 1) {
 8002c48:	4b9c      	ldr	r3, [pc, #624]	; (8002ebc <menu+0x26ec>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d104      	bne.n	8002c5a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002c50:	4a9b      	ldr	r2, [pc, #620]	; (8002ec0 <menu+0x26f0>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7fd fd5a 	bl	800070e <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002c5a:	4b9a      	ldr	r3, [pc, #616]	; (8002ec4 <menu+0x26f4>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d112      	bne.n	8002c88 <menu+0x24b8>
			if(dilSecim == 0) {
 8002c62:	4b96      	ldr	r3, [pc, #600]	; (8002ebc <menu+0x26ec>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d104      	bne.n	8002c74 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8002c6a:	4a97      	ldr	r2, [pc, #604]	; (8002ec8 <menu+0x26f8>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f7fd fd4d 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1) {
 8002c74:	4b91      	ldr	r3, [pc, #580]	; (8002ebc <menu+0x26ec>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d11c      	bne.n	8002cb6 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8002c7c:	4a93      	ldr	r2, [pc, #588]	; (8002ecc <menu+0x26fc>)
 8002c7e:	2101      	movs	r1, #1
 8002c80:	2002      	movs	r0, #2
 8002c82:	f7fd fd44 	bl	800070e <lcd_print>
 8002c86:	e016      	b.n	8002cb6 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002c88:	4b8e      	ldr	r3, [pc, #568]	; (8002ec4 <menu+0x26f4>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d112      	bne.n	8002cb6 <menu+0x24e6>
			if(dilSecim == 0) {
 8002c90:	4b8a      	ldr	r3, [pc, #552]	; (8002ebc <menu+0x26ec>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002c98:	4a8d      	ldr	r2, [pc, #564]	; (8002ed0 <menu+0x2700>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f7fd fd36 	bl	800070e <lcd_print>
 8002ca2:	e008      	b.n	8002cb6 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002ca4:	4b85      	ldr	r3, [pc, #532]	; (8002ebc <menu+0x26ec>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d104      	bne.n	8002cb6 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8002cac:	4a89      	ldr	r2, [pc, #548]	; (8002ed4 <menu+0x2704>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7fd fd2c 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4887      	ldr	r0, [pc, #540]	; (8002ed8 <menu+0x2708>)
 8002cba:	f005 ffa3 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d115      	bne.n	8002cf0 <menu+0x2520>
 8002cc4:	4b85      	ldr	r3, [pc, #532]	; (8002edc <menu+0x270c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f083 0301 	eor.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002cd2:	4b7c      	ldr	r3, [pc, #496]	; (8002ec4 <menu+0x26f4>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4b7a      	ldr	r3, [pc, #488]	; (8002ec4 <menu+0x26f4>)
 8002cdc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002cde:	4b79      	ldr	r3, [pc, #484]	; (8002ec4 <menu+0x26f4>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d902      	bls.n	8002cec <menu+0x251c>
				platformSilindirTipi = 0;
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <menu+0x26f4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cec:	f002 f9dc 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	4879      	ldr	r0, [pc, #484]	; (8002ed8 <menu+0x2708>)
 8002cf4:	f005 ff86 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d115      	bne.n	8002d2a <menu+0x255a>
 8002cfe:	4b77      	ldr	r3, [pc, #476]	; (8002edc <menu+0x270c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	f083 0301 	eor.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002d0c:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <menu+0x26f4>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <menu+0x26f4>)
 8002d16:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <menu+0x26f4>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <menu+0x26f4>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d26:	f002 f9bf 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d2a:	2108      	movs	r1, #8
 8002d2c:	486a      	ldr	r0, [pc, #424]	; (8002ed8 <menu+0x2708>)
 8002d2e:	f005 ff69 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d118      	bne.n	8002d6a <menu+0x259a>
 8002d38:	4b68      	ldr	r3, [pc, #416]	; (8002edc <menu+0x270c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	f083 0301 	eor.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d011      	beq.n	8002d6a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002d46:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <menu+0x26f4>)
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	4b65      	ldr	r3, [pc, #404]	; (8002ee0 <menu+0x2710>)
 8002d4c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002d4e:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <menu+0x26f4>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d106      	bne.n	8002d64 <menu+0x2594>
				altLimit = 1;
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <menu+0x2714>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d5c:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <menu+0x2714>)
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <menu+0x2710>)
 8002d62:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002d64:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <menu+0x2718>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002d6a:	4b60      	ldr	r3, [pc, #384]	; (8002eec <menu+0x271c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b16      	cmp	r3, #22
 8002d70:	f040 8081 	bne.w	8002e76 <menu+0x26a6>
		if(dilSecim == 0) {
 8002d74:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <menu+0x26ec>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002d7c:	4a5c      	ldr	r2, [pc, #368]	; (8002ef0 <menu+0x2720>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7fd fcc4 	bl	800070e <lcd_print>
 8002d86:	e008      	b.n	8002d9a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002d88:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <menu+0x26ec>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d104      	bne.n	8002d9a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002d90:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <menu+0x2724>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	2001      	movs	r0, #1
 8002d96:	f7fd fcba 	bl	800070e <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002d9a:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <menu+0x26ec>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002da2:	4a55      	ldr	r2, [pc, #340]	; (8002ef8 <menu+0x2728>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7fd fcb1 	bl	800070e <lcd_print>
 8002dac:	e008      	b.n	8002dc0 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <menu+0x26ec>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d104      	bne.n	8002dc0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002db6:	4a51      	ldr	r2, [pc, #324]	; (8002efc <menu+0x272c>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2002      	movs	r0, #2
 8002dbc:	f7fd fca7 	bl	800070e <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <menu+0x2730>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	220a      	movs	r2, #10
 8002dc6:	494f      	ldr	r1, [pc, #316]	; (8002f04 <menu+0x2734>)
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f008 ff47 	bl	800bc5c <itoa>
		lcd_print(2,16,snum);
 8002dce:	4a4d      	ldr	r2, [pc, #308]	; (8002f04 <menu+0x2734>)
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f7fd fc9b 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dd8:	2102      	movs	r1, #2
 8002dda:	483f      	ldr	r0, [pc, #252]	; (8002ed8 <menu+0x2708>)
 8002ddc:	f005 ff12 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d115      	bne.n	8002e12 <menu+0x2642>
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <menu+0x270c>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	f083 0301 	eor.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00e      	beq.n	8002e12 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002df4:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <menu+0x2730>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <menu+0x2730>)
 8002dfe:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002e00:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <menu+0x2730>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d902      	bls.n	8002e0e <menu+0x263e>
				yukariValfTmr = 0;
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <menu+0x2730>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e0e:	f002 f94b 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e12:	2104      	movs	r1, #4
 8002e14:	4830      	ldr	r0, [pc, #192]	; (8002ed8 <menu+0x2708>)
 8002e16:	f005 fef5 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d115      	bne.n	8002e4c <menu+0x267c>
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <menu+0x270c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f083 0301 	eor.w	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00e      	beq.n	8002e4c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <menu+0x2730>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <menu+0x2730>)
 8002e38:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002e3a:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <menu+0x2730>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <menu+0x2730>)
 8002e44:	2205      	movs	r2, #5
 8002e46:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e48:	f002 f92e 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e4c:	2108      	movs	r1, #8
 8002e4e:	4822      	ldr	r0, [pc, #136]	; (8002ed8 <menu+0x2708>)
 8002e50:	f005 fed8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10d      	bne.n	8002e76 <menu+0x26a6>
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <menu+0x270c>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	f083 0301 	eor.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <menu+0x2730>)
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <menu+0x2710>)
 8002e6e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <menu+0x2718>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <menu+0x271c>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b17      	cmp	r3, #23
 8002e7c:	f040 80ac 	bne.w	8002fd8 <menu+0x2808>
		if(dilSecim == 0) {
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <menu+0x26ec>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002e88:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <menu+0x2738>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fd fc3e 	bl	800070e <lcd_print>
 8002e92:	e008      	b.n	8002ea6 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <menu+0x26ec>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d104      	bne.n	8002ea6 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002e9c:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <menu+0x273c>)
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f7fd fc34 	bl	800070e <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <menu+0x26ec>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d130      	bne.n	8002f10 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <menu+0x2728>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	f7fd fc2b 	bl	800070e <lcd_print>
 8002eb8:	e033      	b.n	8002f22 <menu+0x2752>
 8002eba:	bf00      	nop
 8002ebc:	20000b4d 	.word	0x20000b4d
 8002ec0:	0800d084 	.word	0x0800d084
 8002ec4:	20000b3f 	.word	0x20000b3f
 8002ec8:	0800d028 	.word	0x0800d028
 8002ecc:	0800d03c 	.word	0x0800d03c
 8002ed0:	0800d04c 	.word	0x0800d04c
 8002ed4:	0800d060 	.word	0x0800d060
 8002ed8:	40010800 	.word	0x40010800
 8002edc:	20000b5b 	.word	0x20000b5b
 8002ee0:	20000ac0 	.word	0x20000ac0
 8002ee4:	20000b32 	.word	0x20000b32
 8002ee8:	20000b58 	.word	0x20000b58
 8002eec:	20000b2c 	.word	0x20000b2c
 8002ef0:	0800d094 	.word	0x0800d094
 8002ef4:	0800d0a8 	.word	0x0800d0a8
 8002ef8:	0800cd48 	.word	0x0800cd48
 8002efc:	0800d0bc 	.word	0x0800d0bc
 8002f00:	20000b40 	.word	0x20000b40
 8002f04:	20000b00 	.word	0x20000b00
 8002f08:	0800d0cc 	.word	0x0800d0cc
 8002f0c:	0800d0e0 	.word	0x0800d0e0
			} else if(dilSecim == 1) {
 8002f10:	4b98      	ldr	r3, [pc, #608]	; (8003174 <menu+0x29a4>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d104      	bne.n	8002f22 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8002f18:	4a97      	ldr	r2, [pc, #604]	; (8003178 <menu+0x29a8>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	2002      	movs	r0, #2
 8002f1e:	f7fd fbf6 	bl	800070e <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002f22:	4b96      	ldr	r3, [pc, #600]	; (800317c <menu+0x29ac>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	220a      	movs	r2, #10
 8002f28:	4995      	ldr	r1, [pc, #596]	; (8003180 <menu+0x29b0>)
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f008 fe96 	bl	800bc5c <itoa>
		lcd_print(2,16,snum);
 8002f30:	4a93      	ldr	r2, [pc, #588]	; (8003180 <menu+0x29b0>)
 8002f32:	2110      	movs	r1, #16
 8002f34:	2002      	movs	r0, #2
 8002f36:	f7fd fbea 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	4891      	ldr	r0, [pc, #580]	; (8003184 <menu+0x29b4>)
 8002f3e:	f005 fe61 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d115      	bne.n	8002f74 <menu+0x27a4>
 8002f48:	4b8f      	ldr	r3, [pc, #572]	; (8003188 <menu+0x29b8>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00e      	beq.n	8002f74 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8002f56:	4b89      	ldr	r3, [pc, #548]	; (800317c <menu+0x29ac>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4b87      	ldr	r3, [pc, #540]	; (800317c <menu+0x29ac>)
 8002f60:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002f62:	4b86      	ldr	r3, [pc, #536]	; (800317c <menu+0x29ac>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d902      	bls.n	8002f70 <menu+0x27a0>
				asagiValfTmr = 0;
 8002f6a:	4b84      	ldr	r3, [pc, #528]	; (800317c <menu+0x29ac>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f70:	f002 f89a 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f74:	2104      	movs	r1, #4
 8002f76:	4883      	ldr	r0, [pc, #524]	; (8003184 <menu+0x29b4>)
 8002f78:	f005 fe44 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d115      	bne.n	8002fae <menu+0x27de>
 8002f82:	4b81      	ldr	r3, [pc, #516]	; (8003188 <menu+0x29b8>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8002f90:	4b7a      	ldr	r3, [pc, #488]	; (800317c <menu+0x29ac>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b78      	ldr	r3, [pc, #480]	; (800317c <menu+0x29ac>)
 8002f9a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002f9c:	4b77      	ldr	r3, [pc, #476]	; (800317c <menu+0x29ac>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b06      	cmp	r3, #6
 8002fa2:	d902      	bls.n	8002faa <menu+0x27da>
		   		asagiValfTmr = 5;
 8002fa4:	4b75      	ldr	r3, [pc, #468]	; (800317c <menu+0x29ac>)
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002faa:	f002 f87d 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fae:	2108      	movs	r1, #8
 8002fb0:	4874      	ldr	r0, [pc, #464]	; (8003184 <menu+0x29b4>)
 8002fb2:	f005 fe27 	bl	8008c04 <HAL_GPIO_ReadPin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10d      	bne.n	8002fd8 <menu+0x2808>
 8002fbc:	4b72      	ldr	r3, [pc, #456]	; (8003188 <menu+0x29b8>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	f083 0301 	eor.w	r3, r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8002fca:	4b6c      	ldr	r3, [pc, #432]	; (800317c <menu+0x29ac>)
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	4b6f      	ldr	r3, [pc, #444]	; (800318c <menu+0x29bc>)
 8002fd0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002fd2:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <menu+0x29c0>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002fd8:	4b6e      	ldr	r3, [pc, #440]	; (8003194 <menu+0x29c4>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b18      	cmp	r3, #24
 8002fde:	f040 809d 	bne.w	800311c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <menu+0x29c8>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d113      	bne.n	8003012 <menu+0x2842>
			if(dilSecim == 0) {
 8002fea:	4b62      	ldr	r3, [pc, #392]	; (8003174 <menu+0x29a4>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d105      	bne.n	8002ffe <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002ff2:	4a6a      	ldr	r2, [pc, #424]	; (800319c <menu+0x29cc>)
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7fd fb89 	bl	800070e <lcd_print>
 8002ffc:	e020      	b.n	8003040 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <menu+0x29a4>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d11c      	bne.n	8003040 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003006:	4a66      	ldr	r2, [pc, #408]	; (80031a0 <menu+0x29d0>)
 8003008:	2101      	movs	r1, #1
 800300a:	2001      	movs	r0, #1
 800300c:	f7fd fb7f 	bl	800070e <lcd_print>
 8003010:	e016      	b.n	8003040 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003012:	4b61      	ldr	r3, [pc, #388]	; (8003198 <menu+0x29c8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d112      	bne.n	8003040 <menu+0x2870>
			if(dilSecim == 0) {
 800301a:	4b56      	ldr	r3, [pc, #344]	; (8003174 <menu+0x29a4>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003022:	4a60      	ldr	r2, [pc, #384]	; (80031a4 <menu+0x29d4>)
 8003024:	2101      	movs	r1, #1
 8003026:	2001      	movs	r0, #1
 8003028:	f7fd fb71 	bl	800070e <lcd_print>
 800302c:	e008      	b.n	8003040 <menu+0x2870>
			} else if(dilSecim == 1) {
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <menu+0x29a4>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d104      	bne.n	8003040 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <menu+0x29d8>)
 8003038:	2101      	movs	r1, #1
 800303a:	2001      	movs	r0, #1
 800303c:	f7fd fb67 	bl	800070e <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003040:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <menu+0x29a4>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003048:	4a58      	ldr	r2, [pc, #352]	; (80031ac <menu+0x29dc>)
 800304a:	2101      	movs	r1, #1
 800304c:	2002      	movs	r0, #2
 800304e:	f7fd fb5e 	bl	800070e <lcd_print>
 8003052:	e008      	b.n	8003066 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003054:	4b47      	ldr	r3, [pc, #284]	; (8003174 <menu+0x29a4>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d104      	bne.n	8003066 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 800305c:	4a46      	ldr	r2, [pc, #280]	; (8003178 <menu+0x29a8>)
 800305e:	2101      	movs	r1, #1
 8003060:	2002      	movs	r0, #2
 8003062:	f7fd fb54 	bl	800070e <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <menu+0x29e0>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	220a      	movs	r2, #10
 800306c:	4944      	ldr	r1, [pc, #272]	; (8003180 <menu+0x29b0>)
 800306e:	4618      	mov	r0, r3
 8003070:	f008 fdf4 	bl	800bc5c <itoa>
		lcd_print(2, 16, snum);
 8003074:	4a42      	ldr	r2, [pc, #264]	; (8003180 <menu+0x29b0>)
 8003076:	2110      	movs	r1, #16
 8003078:	2002      	movs	r0, #2
 800307a:	f7fd fb48 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800307e:	2102      	movs	r1, #2
 8003080:	4840      	ldr	r0, [pc, #256]	; (8003184 <menu+0x29b4>)
 8003082:	f005 fdbf 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003086:	4603      	mov	r3, r0
 8003088:	2b01      	cmp	r3, #1
 800308a:	d115      	bne.n	80030b8 <menu+0x28e8>
 800308c:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <menu+0x29b8>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	f083 0301 	eor.w	r3, r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800309a:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <menu+0x29e0>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <menu+0x29e0>)
 80030a4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80030a6:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <menu+0x29e0>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d902      	bls.n	80030b4 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 80030ae:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <menu+0x29e0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030b4:	f001 fff8 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b8:	2104      	movs	r1, #4
 80030ba:	4832      	ldr	r0, [pc, #200]	; (8003184 <menu+0x29b4>)
 80030bc:	f005 fda2 	bl	8008c04 <HAL_GPIO_ReadPin>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d115      	bne.n	80030f2 <menu+0x2922>
 80030c6:	4b30      	ldr	r3, [pc, #192]	; (8003188 <menu+0x29b8>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	f083 0301 	eor.w	r3, r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00e      	beq.n	80030f2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <menu+0x29e0>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	3b01      	subs	r3, #1
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <menu+0x29e0>)
 80030de:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80030e0:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <menu+0x29e0>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b06      	cmp	r3, #6
 80030e6:	d902      	bls.n	80030ee <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 80030e8:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <menu+0x29e0>)
 80030ea:	2205      	movs	r2, #5
 80030ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ee:	f001 ffdb 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030f2:	2108      	movs	r1, #8
 80030f4:	4823      	ldr	r0, [pc, #140]	; (8003184 <menu+0x29b4>)
 80030f6:	f005 fd85 	bl	8008c04 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10d      	bne.n	800311c <menu+0x294c>
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <menu+0x29b8>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d006      	beq.n	800311c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 800310e:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <menu+0x29e0>)
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <menu+0x29bc>)
 8003114:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <menu+0x29c0>)
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <menu+0x29c4>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b19      	cmp	r3, #25
 8003122:	f040 80c4 	bne.w	80032ae <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <menu+0x29c8>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d113      	bne.n	8003156 <menu+0x2986>
			if(dilSecim == 0) {
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <menu+0x29a4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003136:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <menu+0x29e4>)
 8003138:	2101      	movs	r1, #1
 800313a:	2001      	movs	r0, #1
 800313c:	f7fd fae7 	bl	800070e <lcd_print>
 8003140:	e047      	b.n	80031d2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <menu+0x29a4>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d143      	bne.n	80031d2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 800314a:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <menu+0x29e8>)
 800314c:	2101      	movs	r1, #1
 800314e:	2001      	movs	r0, #1
 8003150:	f7fd fadd 	bl	800070e <lcd_print>
 8003154:	e03d      	b.n	80031d2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <menu+0x29c8>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d139      	bne.n	80031d2 <menu+0x2a02>
			if(dilSecim == 0) {
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <menu+0x29a4>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d12c      	bne.n	80031c0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <menu+0x29ec>)
 8003168:	2101      	movs	r1, #1
 800316a:	2001      	movs	r0, #1
 800316c:	f7fd facf 	bl	800070e <lcd_print>
 8003170:	e02f      	b.n	80031d2 <menu+0x2a02>
 8003172:	bf00      	nop
 8003174:	20000b4d 	.word	0x20000b4d
 8003178:	0800d0bc 	.word	0x0800d0bc
 800317c:	20000b41 	.word	0x20000b41
 8003180:	20000b00 	.word	0x20000b00
 8003184:	40010800 	.word	0x40010800
 8003188:	20000b5b 	.word	0x20000b5b
 800318c:	20000ac0 	.word	0x20000ac0
 8003190:	20000b58 	.word	0x20000b58
 8003194:	20000b2c 	.word	0x20000b2c
 8003198:	20000b3b 	.word	0x20000b3b
 800319c:	0800d0f4 	.word	0x0800d0f4
 80031a0:	0800d108 	.word	0x0800d108
 80031a4:	0800d11c 	.word	0x0800d11c
 80031a8:	0800d130 	.word	0x0800d130
 80031ac:	0800cd48 	.word	0x0800cd48
 80031b0:	20000b42 	.word	0x20000b42
 80031b4:	0800d144 	.word	0x0800d144
 80031b8:	0800d158 	.word	0x0800d158
 80031bc:	0800d16c 	.word	0x0800d16c
			} else if(dilSecim == 1) {
 80031c0:	4b73      	ldr	r3, [pc, #460]	; (8003390 <menu+0x2bc0>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d104      	bne.n	80031d2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 80031c8:	4a72      	ldr	r2, [pc, #456]	; (8003394 <menu+0x2bc4>)
 80031ca:	2101      	movs	r1, #1
 80031cc:	2001      	movs	r0, #1
 80031ce:	f7fd fa9e 	bl	800070e <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 80031d2:	4b6f      	ldr	r3, [pc, #444]	; (8003390 <menu+0x2bc0>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 80031da:	4a6f      	ldr	r2, [pc, #444]	; (8003398 <menu+0x2bc8>)
 80031dc:	2101      	movs	r1, #1
 80031de:	2002      	movs	r0, #2
 80031e0:	f7fd fa95 	bl	800070e <lcd_print>
 80031e4:	e008      	b.n	80031f8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 80031e6:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <menu+0x2bc0>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d104      	bne.n	80031f8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 80031ee:	4a6b      	ldr	r2, [pc, #428]	; (800339c <menu+0x2bcc>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	2002      	movs	r0, #2
 80031f4:	f7fd fa8b 	bl	800070e <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80031f8:	4b69      	ldr	r3, [pc, #420]	; (80033a0 <menu+0x2bd0>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	220a      	movs	r2, #10
 80031fe:	4969      	ldr	r1, [pc, #420]	; (80033a4 <menu+0x2bd4>)
 8003200:	4618      	mov	r0, r3
 8003202:	f008 fd2b 	bl	800bc5c <itoa>
		lcd_print(2,16,snum);
 8003206:	4a67      	ldr	r2, [pc, #412]	; (80033a4 <menu+0x2bd4>)
 8003208:	2110      	movs	r1, #16
 800320a:	2002      	movs	r0, #2
 800320c:	f7fd fa7f 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003210:	2102      	movs	r1, #2
 8003212:	4865      	ldr	r0, [pc, #404]	; (80033a8 <menu+0x2bd8>)
 8003214:	f005 fcf6 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d115      	bne.n	800324a <menu+0x2a7a>
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <menu+0x2bdc>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	f083 0301 	eor.w	r3, r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <menu+0x2bd0>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <menu+0x2bd0>)
 8003236:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <menu+0x2bd0>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d902      	bls.n	8003246 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003240:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <menu+0x2bd0>)
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003246:	f001 ff2f 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800324a:	2104      	movs	r1, #4
 800324c:	4856      	ldr	r0, [pc, #344]	; (80033a8 <menu+0x2bd8>)
 800324e:	f005 fcd9 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d115      	bne.n	8003284 <menu+0x2ab4>
 8003258:	4b54      	ldr	r3, [pc, #336]	; (80033ac <menu+0x2bdc>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f083 0301 	eor.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003266:	4b4e      	ldr	r3, [pc, #312]	; (80033a0 <menu+0x2bd0>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	3b01      	subs	r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <menu+0x2bd0>)
 8003270:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003272:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <menu+0x2bd0>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b06      	cmp	r3, #6
 8003278:	d902      	bls.n	8003280 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 800327a:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <menu+0x2bd0>)
 800327c:	2205      	movs	r2, #5
 800327e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003280:	f001 ff12 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003284:	2108      	movs	r1, #8
 8003286:	4848      	ldr	r0, [pc, #288]	; (80033a8 <menu+0x2bd8>)
 8003288:	f005 fcbc 	bl	8008c04 <HAL_GPIO_ReadPin>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d10d      	bne.n	80032ae <menu+0x2ade>
 8003292:	4b46      	ldr	r3, [pc, #280]	; (80033ac <menu+0x2bdc>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	f083 0301 	eor.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d006      	beq.n	80032ae <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 80032a0:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <menu+0x2bd0>)
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	4b42      	ldr	r3, [pc, #264]	; (80033b0 <menu+0x2be0>)
 80032a6:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80032a8:	4b42      	ldr	r3, [pc, #264]	; (80033b4 <menu+0x2be4>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80032ae:	4b42      	ldr	r3, [pc, #264]	; (80033b8 <menu+0x2be8>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b1a      	cmp	r3, #26
 80032b4:	f040 80ec 	bne.w	8003490 <menu+0x2cc0>
		if(dilSecim == 0) {
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <menu+0x2bc0>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80032c0:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <menu+0x2bec>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	2001      	movs	r0, #1
 80032c6:	f7fd fa22 	bl	800070e <lcd_print>
 80032ca:	e008      	b.n	80032de <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80032cc:	4b30      	ldr	r3, [pc, #192]	; (8003390 <menu+0x2bc0>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d104      	bne.n	80032de <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80032d4:	4a3a      	ldr	r2, [pc, #232]	; (80033c0 <menu+0x2bf0>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	2001      	movs	r0, #1
 80032da:	f7fd fa18 	bl	800070e <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <menu+0x2bf4>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b63      	cmp	r3, #99	; 0x63
 80032e4:	d91e      	bls.n	8003324 <menu+0x2b54>
			if(dilSecim == 0) {
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <menu+0x2bc0>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80032ee:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <menu+0x2bc8>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	2002      	movs	r0, #2
 80032f4:	f7fd fa0b 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1) {
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <menu+0x2bc0>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d104      	bne.n	800330a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <menu+0x2bcc>)
 8003302:	2101      	movs	r1, #1
 8003304:	2002      	movs	r0, #2
 8003306:	f7fd fa02 	bl	800070e <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <menu+0x2bf4>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	220a      	movs	r2, #10
 8003310:	4924      	ldr	r1, [pc, #144]	; (80033a4 <menu+0x2bd4>)
 8003312:	4618      	mov	r0, r3
 8003314:	f008 fca2 	bl	800bc5c <itoa>
			lcd_print(2,14,snum);
 8003318:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <menu+0x2bd4>)
 800331a:	210e      	movs	r1, #14
 800331c:	2002      	movs	r0, #2
 800331e:	f7fd f9f6 	bl	800070e <lcd_print>
 8003322:	e066      	b.n	80033f2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003324:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <menu+0x2bf4>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b09      	cmp	r3, #9
 800332a:	d923      	bls.n	8003374 <menu+0x2ba4>
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <menu+0x2bf4>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b63      	cmp	r3, #99	; 0x63
 8003332:	d81f      	bhi.n	8003374 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <menu+0x2bc0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 800333c:	4a16      	ldr	r2, [pc, #88]	; (8003398 <menu+0x2bc8>)
 800333e:	2101      	movs	r1, #1
 8003340:	2002      	movs	r0, #2
 8003342:	f7fd f9e4 	bl	800070e <lcd_print>
 8003346:	e008      	b.n	800335a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <menu+0x2bc0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d104      	bne.n	800335a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003350:	4a12      	ldr	r2, [pc, #72]	; (800339c <menu+0x2bcc>)
 8003352:	2101      	movs	r1, #1
 8003354:	2002      	movs	r0, #2
 8003356:	f7fd f9da 	bl	800070e <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <menu+0x2bf4>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	220a      	movs	r2, #10
 8003360:	4910      	ldr	r1, [pc, #64]	; (80033a4 <menu+0x2bd4>)
 8003362:	4618      	mov	r0, r3
 8003364:	f008 fc7a 	bl	800bc5c <itoa>
			lcd_print(2, 15, snum);
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <menu+0x2bd4>)
 800336a:	210f      	movs	r1, #15
 800336c:	2002      	movs	r0, #2
 800336e:	f7fd f9ce 	bl	800070e <lcd_print>
 8003372:	e03e      	b.n	80033f2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <menu+0x2bf4>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b09      	cmp	r3, #9
 800337a:	d83a      	bhi.n	80033f2 <menu+0x2c22>
			if(dilSecim == 0) {
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <menu+0x2bc0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d121      	bne.n	80033c8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <menu+0x2bc8>)
 8003386:	2101      	movs	r1, #1
 8003388:	2002      	movs	r0, #2
 800338a:	f7fd f9c0 	bl	800070e <lcd_print>
 800338e:	e024      	b.n	80033da <menu+0x2c0a>
 8003390:	20000b4d 	.word	0x20000b4d
 8003394:	0800d180 	.word	0x0800d180
 8003398:	0800cd48 	.word	0x0800cd48
 800339c:	0800d0bc 	.word	0x0800d0bc
 80033a0:	20000b43 	.word	0x20000b43
 80033a4:	20000b00 	.word	0x20000b00
 80033a8:	40010800 	.word	0x40010800
 80033ac:	20000b5b 	.word	0x20000b5b
 80033b0:	20000ac0 	.word	0x20000ac0
 80033b4:	20000b58 	.word	0x20000b58
 80033b8:	20000b2c 	.word	0x20000b2c
 80033bc:	0800d194 	.word	0x0800d194
 80033c0:	0800d1a8 	.word	0x0800d1a8
 80033c4:	20000b44 	.word	0x20000b44
			} else if(dilSecim == 1) {
 80033c8:	4b8f      	ldr	r3, [pc, #572]	; (8003608 <menu+0x2e38>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d104      	bne.n	80033da <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80033d0:	4a8e      	ldr	r2, [pc, #568]	; (800360c <menu+0x2e3c>)
 80033d2:	2101      	movs	r1, #1
 80033d4:	2002      	movs	r0, #2
 80033d6:	f7fd f99a 	bl	800070e <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80033da:	4b8d      	ldr	r3, [pc, #564]	; (8003610 <menu+0x2e40>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	220a      	movs	r2, #10
 80033e0:	498c      	ldr	r1, [pc, #560]	; (8003614 <menu+0x2e44>)
 80033e2:	4618      	mov	r0, r3
 80033e4:	f008 fc3a 	bl	800bc5c <itoa>
			lcd_print(2, 16, snum);
 80033e8:	4a8a      	ldr	r2, [pc, #552]	; (8003614 <menu+0x2e44>)
 80033ea:	2110      	movs	r1, #16
 80033ec:	2002      	movs	r0, #2
 80033ee:	f7fd f98e 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f2:	2102      	movs	r1, #2
 80033f4:	4888      	ldr	r0, [pc, #544]	; (8003618 <menu+0x2e48>)
 80033f6:	f005 fc05 	bl	8008c04 <HAL_GPIO_ReadPin>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d115      	bne.n	800342c <menu+0x2c5c>
 8003400:	4b86      	ldr	r3, [pc, #536]	; (800361c <menu+0x2e4c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	f083 0301 	eor.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00e      	beq.n	800342c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 800340e:	4b80      	ldr	r3, [pc, #512]	; (8003610 <menu+0x2e40>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	3301      	adds	r3, #1
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b7e      	ldr	r3, [pc, #504]	; (8003610 <menu+0x2e40>)
 8003418:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800341a:	4b7d      	ldr	r3, [pc, #500]	; (8003610 <menu+0x2e40>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2bb4      	cmp	r3, #180	; 0xb4
 8003420:	d902      	bls.n	8003428 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003422:	4b7b      	ldr	r3, [pc, #492]	; (8003610 <menu+0x2e40>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003428:	f001 fe3e 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800342c:	2104      	movs	r1, #4
 800342e:	487a      	ldr	r0, [pc, #488]	; (8003618 <menu+0x2e48>)
 8003430:	f005 fbe8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003434:	4603      	mov	r3, r0
 8003436:	2b01      	cmp	r3, #1
 8003438:	d115      	bne.n	8003466 <menu+0x2c96>
 800343a:	4b78      	ldr	r3, [pc, #480]	; (800361c <menu+0x2e4c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	f083 0301 	eor.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00e      	beq.n	8003466 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003448:	4b71      	ldr	r3, [pc, #452]	; (8003610 <menu+0x2e40>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <menu+0x2e40>)
 8003452:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003454:	4b6e      	ldr	r3, [pc, #440]	; (8003610 <menu+0x2e40>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2bb5      	cmp	r3, #181	; 0xb5
 800345a:	d902      	bls.n	8003462 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800345c:	4b6c      	ldr	r3, [pc, #432]	; (8003610 <menu+0x2e40>)
 800345e:	22b4      	movs	r2, #180	; 0xb4
 8003460:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003462:	f001 fe21 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003466:	2108      	movs	r1, #8
 8003468:	486b      	ldr	r0, [pc, #428]	; (8003618 <menu+0x2e48>)
 800346a:	f005 fbcb 	bl	8008c04 <HAL_GPIO_ReadPin>
 800346e:	4603      	mov	r3, r0
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10d      	bne.n	8003490 <menu+0x2cc0>
 8003474:	4b69      	ldr	r3, [pc, #420]	; (800361c <menu+0x2e4c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	f083 0301 	eor.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003482:	4b63      	ldr	r3, [pc, #396]	; (8003610 <menu+0x2e40>)
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	4b66      	ldr	r3, [pc, #408]	; (8003620 <menu+0x2e50>)
 8003488:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800348a:	4b66      	ldr	r3, [pc, #408]	; (8003624 <menu+0x2e54>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003490:	4b65      	ldr	r3, [pc, #404]	; (8003628 <menu+0x2e58>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b1b      	cmp	r3, #27
 8003496:	f040 8083 	bne.w	80035a0 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800349a:	4a64      	ldr	r2, [pc, #400]	; (800362c <menu+0x2e5c>)
 800349c:	2101      	movs	r1, #1
 800349e:	2001      	movs	r0, #1
 80034a0:	f7fd f935 	bl	800070e <lcd_print>

		if(buzzer == 0) {
 80034a4:	4b62      	ldr	r3, [pc, #392]	; (8003630 <menu+0x2e60>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d113      	bne.n	80034d4 <menu+0x2d04>
			if(dilSecim == 0) {
 80034ac:	4b56      	ldr	r3, [pc, #344]	; (8003608 <menu+0x2e38>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80034b4:	4a5f      	ldr	r2, [pc, #380]	; (8003634 <menu+0x2e64>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	2002      	movs	r0, #2
 80034ba:	f7fd f928 	bl	800070e <lcd_print>
 80034be:	e020      	b.n	8003502 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80034c0:	4b51      	ldr	r3, [pc, #324]	; (8003608 <menu+0x2e38>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d11c      	bne.n	8003502 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80034c8:	4a5b      	ldr	r2, [pc, #364]	; (8003638 <menu+0x2e68>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	2002      	movs	r0, #2
 80034ce:	f7fd f91e 	bl	800070e <lcd_print>
 80034d2:	e016      	b.n	8003502 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80034d4:	4b56      	ldr	r3, [pc, #344]	; (8003630 <menu+0x2e60>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d112      	bne.n	8003502 <menu+0x2d32>
			if(dilSecim == 0) {
 80034dc:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <menu+0x2e38>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80034e4:	4a55      	ldr	r2, [pc, #340]	; (800363c <menu+0x2e6c>)
 80034e6:	2101      	movs	r1, #1
 80034e8:	2002      	movs	r0, #2
 80034ea:	f7fd f910 	bl	800070e <lcd_print>
 80034ee:	e008      	b.n	8003502 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80034f0:	4b45      	ldr	r3, [pc, #276]	; (8003608 <menu+0x2e38>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d104      	bne.n	8003502 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80034f8:	4a51      	ldr	r2, [pc, #324]	; (8003640 <menu+0x2e70>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	2002      	movs	r0, #2
 80034fe:	f7fd f906 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003502:	2102      	movs	r1, #2
 8003504:	4844      	ldr	r0, [pc, #272]	; (8003618 <menu+0x2e48>)
 8003506:	f005 fb7d 	bl	8008c04 <HAL_GPIO_ReadPin>
 800350a:	4603      	mov	r3, r0
 800350c:	2b01      	cmp	r3, #1
 800350e:	d115      	bne.n	800353c <menu+0x2d6c>
 8003510:	4b42      	ldr	r3, [pc, #264]	; (800361c <menu+0x2e4c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	f083 0301 	eor.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <menu+0x2d6c>
			buzzer = buzzer + 1;
 800351e:	4b44      	ldr	r3, [pc, #272]	; (8003630 <menu+0x2e60>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4b42      	ldr	r3, [pc, #264]	; (8003630 <menu+0x2e60>)
 8003528:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <menu+0x2e60>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d902      	bls.n	8003538 <menu+0x2d68>
				buzzer = 0;
 8003532:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <menu+0x2e60>)
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003538:	f001 fdb6 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800353c:	2104      	movs	r1, #4
 800353e:	4836      	ldr	r0, [pc, #216]	; (8003618 <menu+0x2e48>)
 8003540:	f005 fb60 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	d115      	bne.n	8003576 <menu+0x2da6>
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <menu+0x2e4c>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	f083 0301 	eor.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003558:	4b35      	ldr	r3, [pc, #212]	; (8003630 <menu+0x2e60>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	3b01      	subs	r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b33      	ldr	r3, [pc, #204]	; (8003630 <menu+0x2e60>)
 8003562:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003564:	4b32      	ldr	r3, [pc, #200]	; (8003630 <menu+0x2e60>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <menu+0x2da2>
		   		buzzer = 1;
 800356c:	4b30      	ldr	r3, [pc, #192]	; (8003630 <menu+0x2e60>)
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003572:	f001 fd99 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003576:	2108      	movs	r1, #8
 8003578:	4827      	ldr	r0, [pc, #156]	; (8003618 <menu+0x2e48>)
 800357a:	f005 fb43 	bl	8008c04 <HAL_GPIO_ReadPin>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	d10d      	bne.n	80035a0 <menu+0x2dd0>
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <menu+0x2e4c>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003592:	4b27      	ldr	r3, [pc, #156]	; (8003630 <menu+0x2e60>)
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <menu+0x2e50>)
 8003598:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <menu+0x2e54>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80035a0:	4b21      	ldr	r3, [pc, #132]	; (8003628 <menu+0x2e58>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b1c      	cmp	r3, #28
 80035a6:	f040 80ab 	bne.w	8003700 <menu+0x2f30>
		calismaSayModu = 0;
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <menu+0x2e74>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80035b0:	4a25      	ldr	r2, [pc, #148]	; (8003648 <menu+0x2e78>)
 80035b2:	2101      	movs	r1, #1
 80035b4:	2001      	movs	r0, #1
 80035b6:	f7fd f8aa 	bl	800070e <lcd_print>

		if(demoMode == 0) {
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <menu+0x2e7c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <menu+0x2e1a>
			if(dilSecim == 0) {
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <menu+0x2e38>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <menu+0x2e64>)
 80035cc:	2101      	movs	r1, #1
 80035ce:	2002      	movs	r0, #2
 80035d0:	f7fd f89d 	bl	800070e <lcd_print>
 80035d4:	e045      	b.n	8003662 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <menu+0x2e38>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d141      	bne.n	8003662 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80035de:	4a16      	ldr	r2, [pc, #88]	; (8003638 <menu+0x2e68>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	2002      	movs	r0, #2
 80035e4:	f7fd f893 	bl	800070e <lcd_print>
 80035e8:	e03b      	b.n	8003662 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <menu+0x2e7c>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d137      	bne.n	8003662 <menu+0x2e92>
			if(dilSecim == 0){
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <menu+0x2e38>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d12a      	bne.n	8003650 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <menu+0x2e6c>)
 80035fc:	2101      	movs	r1, #1
 80035fe:	2002      	movs	r0, #2
 8003600:	f7fd f885 	bl	800070e <lcd_print>
 8003604:	e02d      	b.n	8003662 <menu+0x2e92>
 8003606:	bf00      	nop
 8003608:	20000b4d 	.word	0x20000b4d
 800360c:	0800d0bc 	.word	0x0800d0bc
 8003610:	20000b44 	.word	0x20000b44
 8003614:	20000b00 	.word	0x20000b00
 8003618:	40010800 	.word	0x40010800
 800361c:	20000b5b 	.word	0x20000b5b
 8003620:	20000ac0 	.word	0x20000ac0
 8003624:	20000b58 	.word	0x20000b58
 8003628:	20000b2c 	.word	0x20000b2c
 800362c:	0800d1bc 	.word	0x0800d1bc
 8003630:	20000b48 	.word	0x20000b48
 8003634:	0800cae4 	.word	0x0800cae4
 8003638:	0800caf8 	.word	0x0800caf8
 800363c:	0800cb44 	.word	0x0800cb44
 8003640:	0800cb58 	.word	0x0800cb58
 8003644:	20000b4c 	.word	0x20000b4c
 8003648:	0800d1d0 	.word	0x0800d1d0
 800364c:	20000b4a 	.word	0x20000b4a
			} else if(dilSecim == 1) {
 8003650:	4b71      	ldr	r3, [pc, #452]	; (8003818 <menu+0x3048>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d104      	bne.n	8003662 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003658:	4a70      	ldr	r2, [pc, #448]	; (800381c <menu+0x304c>)
 800365a:	2101      	movs	r1, #1
 800365c:	2002      	movs	r0, #2
 800365e:	f7fd f856 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003662:	2102      	movs	r1, #2
 8003664:	486e      	ldr	r0, [pc, #440]	; (8003820 <menu+0x3050>)
 8003666:	f005 facd 	bl	8008c04 <HAL_GPIO_ReadPin>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d115      	bne.n	800369c <menu+0x2ecc>
 8003670:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <menu+0x3054>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	f083 0301 	eor.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00e      	beq.n	800369c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800367e:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <menu+0x3058>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4b68      	ldr	r3, [pc, #416]	; (8003828 <menu+0x3058>)
 8003688:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800368a:	4b67      	ldr	r3, [pc, #412]	; (8003828 <menu+0x3058>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d902      	bls.n	8003698 <menu+0x2ec8>
				demoMode = 0;
 8003692:	4b65      	ldr	r3, [pc, #404]	; (8003828 <menu+0x3058>)
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003698:	f001 fd06 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800369c:	2104      	movs	r1, #4
 800369e:	4860      	ldr	r0, [pc, #384]	; (8003820 <menu+0x3050>)
 80036a0:	f005 fab0 	bl	8008c04 <HAL_GPIO_ReadPin>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d115      	bne.n	80036d6 <menu+0x2f06>
 80036aa:	4b5e      	ldr	r3, [pc, #376]	; (8003824 <menu+0x3054>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	f083 0301 	eor.w	r3, r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00e      	beq.n	80036d6 <menu+0x2f06>
			demoMode = demoMode - 1;
 80036b8:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <menu+0x3058>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	3b01      	subs	r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b59      	ldr	r3, [pc, #356]	; (8003828 <menu+0x3058>)
 80036c2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80036c4:	4b58      	ldr	r3, [pc, #352]	; (8003828 <menu+0x3058>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <menu+0x2f02>
		   		demoMode = 1;
 80036cc:	4b56      	ldr	r3, [pc, #344]	; (8003828 <menu+0x3058>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036d2:	f001 fce9 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036d6:	2108      	movs	r1, #8
 80036d8:	4851      	ldr	r0, [pc, #324]	; (8003820 <menu+0x3050>)
 80036da:	f005 fa93 	bl	8008c04 <HAL_GPIO_ReadPin>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d10d      	bne.n	8003700 <menu+0x2f30>
 80036e4:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <menu+0x3054>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	f083 0301 	eor.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <menu+0x2f30>
			eepromData[26] = demoMode;
 80036f2:	4b4d      	ldr	r3, [pc, #308]	; (8003828 <menu+0x3058>)
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	4b4d      	ldr	r3, [pc, #308]	; (800382c <menu+0x305c>)
 80036f8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80036fa:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <menu+0x3060>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <menu+0x3064>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b1d      	cmp	r3, #29
 8003706:	f040 8132 	bne.w	800396e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800370a:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <menu+0x3068>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d113      	bne.n	800373a <menu+0x2f6a>
 8003712:	4b4a      	ldr	r3, [pc, #296]	; (800383c <menu+0x306c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10f      	bne.n	800373a <menu+0x2f6a>
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <menu+0x3070>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <menu+0x2f6a>
 8003722:	4b48      	ldr	r3, [pc, #288]	; (8003844 <menu+0x3074>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d107      	bne.n	800373a <menu+0x2f6a>
 800372a:	4b47      	ldr	r3, [pc, #284]	; (8003848 <menu+0x3078>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8003732:	4b46      	ldr	r3, [pc, #280]	; (800384c <menu+0x307c>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e002      	b.n	8003740 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800373a:	4b44      	ldr	r3, [pc, #272]	; (800384c <menu+0x307c>)
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003740:	4b43      	ldr	r3, [pc, #268]	; (8003850 <menu+0x3080>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d154      	bne.n	80037f2 <menu+0x3022>
			if(dilSecim == 0) {
 8003748:	4b33      	ldr	r3, [pc, #204]	; (8003818 <menu+0x3048>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003750:	4a40      	ldr	r2, [pc, #256]	; (8003854 <menu+0x3084>)
 8003752:	2101      	movs	r1, #1
 8003754:	2001      	movs	r0, #1
 8003756:	f7fc ffda 	bl	800070e <lcd_print>
 800375a:	e008      	b.n	800376e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <menu+0x3048>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d104      	bne.n	800376e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8003764:	4a3c      	ldr	r2, [pc, #240]	; (8003858 <menu+0x3088>)
 8003766:	2101      	movs	r1, #1
 8003768:	2001      	movs	r0, #1
 800376a:	f7fc ffd0 	bl	800070e <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <menu+0x3078>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	220a      	movs	r2, #10
 8003774:	4939      	ldr	r1, [pc, #228]	; (800385c <menu+0x308c>)
 8003776:	4618      	mov	r0, r3
 8003778:	f008 fa70 	bl	800bc5c <itoa>
			lcd_print(2, 12, snum);
 800377c:	4a37      	ldr	r2, [pc, #220]	; (800385c <menu+0x308c>)
 800377e:	210c      	movs	r1, #12
 8003780:	2002      	movs	r0, #2
 8003782:	f7fc ffc4 	bl	800070e <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <menu+0x3074>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	220a      	movs	r2, #10
 800378c:	4933      	ldr	r1, [pc, #204]	; (800385c <menu+0x308c>)
 800378e:	4618      	mov	r0, r3
 8003790:	f008 fa64 	bl	800bc5c <itoa>
			lcd_print(2, 13, snum);
 8003794:	4a31      	ldr	r2, [pc, #196]	; (800385c <menu+0x308c>)
 8003796:	210d      	movs	r1, #13
 8003798:	2002      	movs	r0, #2
 800379a:	f7fc ffb8 	bl	800070e <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800379e:	4b28      	ldr	r3, [pc, #160]	; (8003840 <menu+0x3070>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	220a      	movs	r2, #10
 80037a4:	492d      	ldr	r1, [pc, #180]	; (800385c <menu+0x308c>)
 80037a6:	4618      	mov	r0, r3
 80037a8:	f008 fa58 	bl	800bc5c <itoa>
			lcd_print(2, 14, snum);
 80037ac:	4a2b      	ldr	r2, [pc, #172]	; (800385c <menu+0x308c>)
 80037ae:	210e      	movs	r1, #14
 80037b0:	2002      	movs	r0, #2
 80037b2:	f7fc ffac 	bl	800070e <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80037b6:	4b21      	ldr	r3, [pc, #132]	; (800383c <menu+0x306c>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	220a      	movs	r2, #10
 80037bc:	4927      	ldr	r1, [pc, #156]	; (800385c <menu+0x308c>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f008 fa4c 	bl	800bc5c <itoa>
			lcd_print(2, 15, snum);
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <menu+0x308c>)
 80037c6:	210f      	movs	r1, #15
 80037c8:	2002      	movs	r0, #2
 80037ca:	f7fc ffa0 	bl	800070e <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <menu+0x3068>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	220a      	movs	r2, #10
 80037d4:	4921      	ldr	r1, [pc, #132]	; (800385c <menu+0x308c>)
 80037d6:	4618      	mov	r0, r3
 80037d8:	f008 fa40 	bl	800bc5c <itoa>
			lcd_print(2, 16, snum);
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <menu+0x308c>)
 80037de:	2110      	movs	r1, #16
 80037e0:	2002      	movs	r0, #2
 80037e2:	f7fc ff94 	bl	800070e <lcd_print>

			lcd_print(2, 1, "           ");
 80037e6:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <menu+0x3090>)
 80037e8:	2101      	movs	r1, #1
 80037ea:	2002      	movs	r0, #2
 80037ec:	f7fc ff8f 	bl	800070e <lcd_print>
 80037f0:	e048      	b.n	8003884 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80037f2:	4b17      	ldr	r3, [pc, #92]	; (8003850 <menu+0x3080>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d144      	bne.n	8003884 <menu+0x30b4>
			if(dilSecim == 0) {
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <menu+0x3048>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d132      	bne.n	8003868 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003802:	4a14      	ldr	r2, [pc, #80]	; (8003854 <menu+0x3084>)
 8003804:	2101      	movs	r1, #1
 8003806:	2001      	movs	r0, #1
 8003808:	f7fc ff81 	bl	800070e <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <menu+0x3094>)
 800380e:	2101      	movs	r1, #1
 8003810:	2002      	movs	r0, #2
 8003812:	f7fc ff7c 	bl	800070e <lcd_print>
 8003816:	e035      	b.n	8003884 <menu+0x30b4>
 8003818:	20000b4d 	.word	0x20000b4d
 800381c:	0800cb58 	.word	0x0800cb58
 8003820:	40010800 	.word	0x40010800
 8003824:	20000b5b 	.word	0x20000b5b
 8003828:	20000b4a 	.word	0x20000b4a
 800382c:	20000ac0 	.word	0x20000ac0
 8003830:	20000b58 	.word	0x20000b58
 8003834:	20000b2c 	.word	0x20000b2c
 8003838:	20000b29 	.word	0x20000b29
 800383c:	20000b2a 	.word	0x20000b2a
 8003840:	20000947 	.word	0x20000947
 8003844:	20000948 	.word	0x20000948
 8003848:	20000b2b 	.word	0x20000b2b
 800384c:	20000b6d 	.word	0x20000b6d
 8003850:	20000b4c 	.word	0x20000b4c
 8003854:	0800d1e0 	.word	0x0800d1e0
 8003858:	0800d1f4 	.word	0x0800d1f4
 800385c:	20000b00 	.word	0x20000b00
 8003860:	0800d208 	.word	0x0800d208
 8003864:	0800d214 	.word	0x0800d214
			} else if(dilSecim == 1) {
 8003868:	4b94      	ldr	r3, [pc, #592]	; (8003abc <menu+0x32ec>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d109      	bne.n	8003884 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8003870:	4a93      	ldr	r2, [pc, #588]	; (8003ac0 <menu+0x32f0>)
 8003872:	2101      	movs	r1, #1
 8003874:	2001      	movs	r0, #1
 8003876:	f7fc ff4a 	bl	800070e <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800387a:	4a92      	ldr	r2, [pc, #584]	; (8003ac4 <menu+0x32f4>)
 800387c:	2101      	movs	r1, #1
 800387e:	2002      	movs	r0, #2
 8003880:	f7fc ff45 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003884:	2102      	movs	r1, #2
 8003886:	4890      	ldr	r0, [pc, #576]	; (8003ac8 <menu+0x32f8>)
 8003888:	f005 f9bc 	bl	8008c04 <HAL_GPIO_ReadPin>
 800388c:	4603      	mov	r3, r0
 800388e:	2b01      	cmp	r3, #1
 8003890:	d119      	bne.n	80038c6 <menu+0x30f6>
 8003892:	4b8e      	ldr	r3, [pc, #568]	; (8003acc <menu+0x32fc>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	f083 0301 	eor.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <menu+0x30f6>
 80038a0:	4b8b      	ldr	r3, [pc, #556]	; (8003ad0 <menu+0x3300>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80038a8:	4b8a      	ldr	r3, [pc, #552]	; (8003ad4 <menu+0x3304>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <menu+0x3304>)
 80038b2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80038b4:	4b87      	ldr	r3, [pc, #540]	; (8003ad4 <menu+0x3304>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d902      	bls.n	80038c2 <menu+0x30f2>
				calismaSayModu = 0;
 80038bc:	4b85      	ldr	r3, [pc, #532]	; (8003ad4 <menu+0x3304>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c2:	f001 fbf1 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80038c6:	2104      	movs	r1, #4
 80038c8:	487f      	ldr	r0, [pc, #508]	; (8003ac8 <menu+0x32f8>)
 80038ca:	f005 f99b 	bl	8008c04 <HAL_GPIO_ReadPin>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d119      	bne.n	8003908 <menu+0x3138>
 80038d4:	4b7d      	ldr	r3, [pc, #500]	; (8003acc <menu+0x32fc>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	f083 0301 	eor.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d012      	beq.n	8003908 <menu+0x3138>
 80038e2:	4b7b      	ldr	r3, [pc, #492]	; (8003ad0 <menu+0x3300>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80038ea:	4b7a      	ldr	r3, [pc, #488]	; (8003ad4 <menu+0x3304>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4b78      	ldr	r3, [pc, #480]	; (8003ad4 <menu+0x3304>)
 80038f4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80038f6:	4b77      	ldr	r3, [pc, #476]	; (8003ad4 <menu+0x3304>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <menu+0x3134>
		   		calismaSayModu = 1;
 80038fe:	4b75      	ldr	r3, [pc, #468]	; (8003ad4 <menu+0x3304>)
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003904:	f001 fbd0 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003908:	2108      	movs	r1, #8
 800390a:	486f      	ldr	r0, [pc, #444]	; (8003ac8 <menu+0x32f8>)
 800390c:	f005 f97a 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003910:	4603      	mov	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d12b      	bne.n	800396e <menu+0x319e>
 8003916:	4b6d      	ldr	r3, [pc, #436]	; (8003acc <menu+0x32fc>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	f083 0301 	eor.w	r3, r3, #1
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d024      	beq.n	800396e <menu+0x319e>
			eepromData[32] = 0;
 8003924:	4b6c      	ldr	r3, [pc, #432]	; (8003ad8 <menu+0x3308>)
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800392c:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <menu+0x3308>)
 800392e:	2200      	movs	r2, #0
 8003930:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8003932:	4b69      	ldr	r3, [pc, #420]	; (8003ad8 <menu+0x3308>)
 8003934:	2200      	movs	r2, #0
 8003936:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003938:	4b67      	ldr	r3, [pc, #412]	; (8003ad8 <menu+0x3308>)
 800393a:	2200      	movs	r2, #0
 800393c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800393e:	4b66      	ldr	r3, [pc, #408]	; (8003ad8 <menu+0x3308>)
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003944:	4b65      	ldr	r3, [pc, #404]	; (8003adc <menu+0x330c>)
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800394a:	4b65      	ldr	r3, [pc, #404]	; (8003ae0 <menu+0x3310>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003950:	4b64      	ldr	r3, [pc, #400]	; (8003ae4 <menu+0x3314>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003956:	4b64      	ldr	r3, [pc, #400]	; (8003ae8 <menu+0x3318>)
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800395c:	4b63      	ldr	r3, [pc, #396]	; (8003aec <menu+0x331c>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003962:	4b5c      	ldr	r3, [pc, #368]	; (8003ad4 <menu+0x3304>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003968:	4b61      	ldr	r3, [pc, #388]	; (8003af0 <menu+0x3320>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800396e:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <menu+0x3324>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b1e      	cmp	r3, #30
 8003974:	d16f      	bne.n	8003a56 <menu+0x3286>
		calismaSayModu = 0;
 8003976:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <menu+0x3304>)
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800397c:	4b4f      	ldr	r3, [pc, #316]	; (8003abc <menu+0x32ec>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003984:	4a5c      	ldr	r2, [pc, #368]	; (8003af8 <menu+0x3328>)
 8003986:	2101      	movs	r1, #1
 8003988:	2001      	movs	r0, #1
 800398a:	f7fc fec0 	bl	800070e <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800398e:	4a5b      	ldr	r2, [pc, #364]	; (8003afc <menu+0x332c>)
 8003990:	2101      	movs	r1, #1
 8003992:	2002      	movs	r0, #2
 8003994:	f7fc febb 	bl	800070e <lcd_print>
 8003998:	e00d      	b.n	80039b6 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800399a:	4b48      	ldr	r3, [pc, #288]	; (8003abc <menu+0x32ec>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d109      	bne.n	80039b6 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80039a2:	4a57      	ldr	r2, [pc, #348]	; (8003b00 <menu+0x3330>)
 80039a4:	2101      	movs	r1, #1
 80039a6:	2001      	movs	r0, #1
 80039a8:	f7fc feb1 	bl	800070e <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80039ac:	4a55      	ldr	r2, [pc, #340]	; (8003b04 <menu+0x3334>)
 80039ae:	2101      	movs	r1, #1
 80039b0:	2002      	movs	r0, #2
 80039b2:	f7fc feac 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039b6:	2102      	movs	r1, #2
 80039b8:	4843      	ldr	r0, [pc, #268]	; (8003ac8 <menu+0x32f8>)
 80039ba:	f005 f923 	bl	8008c04 <HAL_GPIO_ReadPin>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d115      	bne.n	80039f0 <menu+0x3220>
 80039c4:	4b41      	ldr	r3, [pc, #260]	; (8003acc <menu+0x32fc>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	f083 0301 	eor.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00e      	beq.n	80039f0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80039d2:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <menu+0x32ec>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4b38      	ldr	r3, [pc, #224]	; (8003abc <menu+0x32ec>)
 80039dc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80039de:	4b37      	ldr	r3, [pc, #220]	; (8003abc <menu+0x32ec>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d902      	bls.n	80039ec <menu+0x321c>
				dilSecim = 0;
 80039e6:	4b35      	ldr	r3, [pc, #212]	; (8003abc <menu+0x32ec>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80039ec:	f001 fb5c 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f0:	2104      	movs	r1, #4
 80039f2:	4835      	ldr	r0, [pc, #212]	; (8003ac8 <menu+0x32f8>)
 80039f4:	f005 f906 	bl	8008c04 <HAL_GPIO_ReadPin>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d115      	bne.n	8003a2a <menu+0x325a>
 80039fe:	4b33      	ldr	r3, [pc, #204]	; (8003acc <menu+0x32fc>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	f083 0301 	eor.w	r3, r3, #1
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00e      	beq.n	8003a2a <menu+0x325a>
			dilSecim = dilSecim - 1;
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <menu+0x32ec>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b29      	ldr	r3, [pc, #164]	; (8003abc <menu+0x32ec>)
 8003a16:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003a18:	4b28      	ldr	r3, [pc, #160]	; (8003abc <menu+0x32ec>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <menu+0x3256>
		   		dilSecim = 1;
 8003a20:	4b26      	ldr	r3, [pc, #152]	; (8003abc <menu+0x32ec>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003a26:	f001 fb3f 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a2a:	2108      	movs	r1, #8
 8003a2c:	4826      	ldr	r0, [pc, #152]	; (8003ac8 <menu+0x32f8>)
 8003a2e:	f005 f8e9 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10e      	bne.n	8003a56 <menu+0x3286>
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <menu+0x32fc>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	f083 0301 	eor.w	r3, r3, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <menu+0x3286>
			eepromData[33] = dilSecim;
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <menu+0x32ec>)
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <menu+0x3308>)
 8003a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003a50:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <menu+0x3320>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <menu+0x3324>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b1f      	cmp	r3, #31
 8003a5c:	f040 80b7 	bne.w	8003bce <menu+0x33fe>
		calismaSayModu = 0;
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <menu+0x3304>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8003a66:	4a28      	ldr	r2, [pc, #160]	; (8003b08 <menu+0x3338>)
 8003a68:	2101      	movs	r1, #1
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f7fc fe4f 	bl	800070e <lcd_print>

		if(iotMode == 0) {
 8003a70:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <menu+0x333c>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d113      	bne.n	8003aa0 <menu+0x32d0>
			if(dilSecim == 0) {
 8003a78:	4b10      	ldr	r3, [pc, #64]	; (8003abc <menu+0x32ec>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8003a80:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <menu+0x3340>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	2002      	movs	r0, #2
 8003a86:	f7fc fe42 	bl	800070e <lcd_print>
 8003a8a:	e050      	b.n	8003b2e <menu+0x335e>
			} else if(dilSecim == 1) {
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <menu+0x32ec>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d14c      	bne.n	8003b2e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8003a94:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <menu+0x3344>)
 8003a96:	2101      	movs	r1, #1
 8003a98:	2002      	movs	r0, #2
 8003a9a:	f7fc fe38 	bl	800070e <lcd_print>
 8003a9e:	e046      	b.n	8003b2e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <menu+0x333c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d142      	bne.n	8003b2e <menu+0x335e>
			if(dilSecim == 0){
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <menu+0x32ec>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d135      	bne.n	8003b1c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <menu+0x3348>)
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f7fc fe2a 	bl	800070e <lcd_print>
 8003aba:	e038      	b.n	8003b2e <menu+0x335e>
 8003abc:	20000b4d 	.word	0x20000b4d
 8003ac0:	0800d1f4 	.word	0x0800d1f4
 8003ac4:	0800d228 	.word	0x0800d228
 8003ac8:	40010800 	.word	0x40010800
 8003acc:	20000b5b 	.word	0x20000b5b
 8003ad0:	20000b6d 	.word	0x20000b6d
 8003ad4:	20000b4c 	.word	0x20000b4c
 8003ad8:	20000ac0 	.word	0x20000ac0
 8003adc:	20000b2b 	.word	0x20000b2b
 8003ae0:	20000948 	.word	0x20000948
 8003ae4:	20000947 	.word	0x20000947
 8003ae8:	20000b2a 	.word	0x20000b2a
 8003aec:	20000b29 	.word	0x20000b29
 8003af0:	20000b58 	.word	0x20000b58
 8003af4:	20000b2c 	.word	0x20000b2c
 8003af8:	0800d23c 	.word	0x0800d23c
 8003afc:	0800d250 	.word	0x0800d250
 8003b00:	0800d264 	.word	0x0800d264
 8003b04:	0800d278 	.word	0x0800d278
 8003b08:	0800d28c 	.word	0x0800d28c
 8003b0c:	20000b4b 	.word	0x20000b4b
 8003b10:	0800cae4 	.word	0x0800cae4
 8003b14:	0800caf8 	.word	0x0800caf8
 8003b18:	0800cb44 	.word	0x0800cb44
			} else if(dilSecim == 1) {
 8003b1c:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <menu+0x3468>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d104      	bne.n	8003b2e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8003b24:	4a45      	ldr	r2, [pc, #276]	; (8003c3c <menu+0x346c>)
 8003b26:	2101      	movs	r1, #1
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f7fc fdf0 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b2e:	2102      	movs	r1, #2
 8003b30:	4843      	ldr	r0, [pc, #268]	; (8003c40 <menu+0x3470>)
 8003b32:	f005 f867 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d115      	bne.n	8003b68 <menu+0x3398>
 8003b3c:	4b41      	ldr	r3, [pc, #260]	; (8003c44 <menu+0x3474>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	f083 0301 	eor.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00e      	beq.n	8003b68 <menu+0x3398>
			iotMode = iotMode + 1;
 8003b4a:	4b3f      	ldr	r3, [pc, #252]	; (8003c48 <menu+0x3478>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b3d      	ldr	r3, [pc, #244]	; (8003c48 <menu+0x3478>)
 8003b54:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003b56:	4b3c      	ldr	r3, [pc, #240]	; (8003c48 <menu+0x3478>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d902      	bls.n	8003b64 <menu+0x3394>
				iotMode = 0;
 8003b5e:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <menu+0x3478>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003b64:	f001 faa0 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b68:	2104      	movs	r1, #4
 8003b6a:	4835      	ldr	r0, [pc, #212]	; (8003c40 <menu+0x3470>)
 8003b6c:	f005 f84a 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d115      	bne.n	8003ba2 <menu+0x33d2>
 8003b76:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <menu+0x3474>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00e      	beq.n	8003ba2 <menu+0x33d2>
			iotMode = iotMode - 1;
 8003b84:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <menu+0x3478>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	; (8003c48 <menu+0x3478>)
 8003b8e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003b90:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <menu+0x3478>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <menu+0x33ce>
		   		iotMode = 1;
 8003b98:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <menu+0x3478>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003b9e:	f001 fa83 	bl	80050a8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ba2:	2108      	movs	r1, #8
 8003ba4:	4826      	ldr	r0, [pc, #152]	; (8003c40 <menu+0x3470>)
 8003ba6:	f005 f82d 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d10e      	bne.n	8003bce <menu+0x33fe>
 8003bb0:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <menu+0x3474>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	f083 0301 	eor.w	r3, r3, #1
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <menu+0x33fe>
			eepromData[37] = iotMode;
 8003bbe:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <menu+0x3478>)
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <menu+0x347c>)
 8003bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8003bc8:	4b21      	ldr	r3, [pc, #132]	; (8003c50 <menu+0x3480>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003bce:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <menu+0x3484>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d12e      	bne.n	8003c34 <menu+0x3464>
		if(dilSecim == 0) {
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <menu+0x3468>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <menu+0x3424>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003bde:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <menu+0x3488>)
 8003be0:	2101      	movs	r1, #1
 8003be2:	2001      	movs	r0, #1
 8003be4:	f7fc fd93 	bl	800070e <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003be8:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <menu+0x348c>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	2002      	movs	r0, #2
 8003bee:	f7fc fd8e 	bl	800070e <lcd_print>
 8003bf2:	e00d      	b.n	8003c10 <menu+0x3440>
		} else if(dilSecim == 1) {
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <menu+0x3468>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d109      	bne.n	8003c10 <menu+0x3440>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003bfc:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <menu+0x3490>)
 8003bfe:	2101      	movs	r1, #1
 8003c00:	2001      	movs	r0, #1
 8003c02:	f7fc fd84 	bl	800070e <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8003c06:	4a17      	ldr	r2, [pc, #92]	; (8003c64 <menu+0x3494>)
 8003c08:	2101      	movs	r1, #1
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	f7fc fd7f 	bl	800070e <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003c10:	2108      	movs	r1, #8
 8003c12:	480b      	ldr	r0, [pc, #44]	; (8003c40 <menu+0x3470>)
 8003c14:	f004 fff6 	bl	8008c04 <HAL_GPIO_ReadPin>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10a      	bne.n	8003c34 <menu+0x3464>
			menuGiris = 0;
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <menu+0x3498>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003c24:	f7fc fd88 	bl	8000738 <lcd_clear>
			HAL_Delay(500);
 8003c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c2c:	f004 fa1a 	bl	8008064 <HAL_Delay>
			NVIC_SystemReset();
 8003c30:	f7fc fd9e 	bl	8000770 <__NVIC_SystemReset>
		}
	}
}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000b4d 	.word	0x20000b4d
 8003c3c:	0800cb58 	.word	0x0800cb58
 8003c40:	40010800 	.word	0x40010800
 8003c44:	20000b5b 	.word	0x20000b5b
 8003c48:	20000b4b 	.word	0x20000b4b
 8003c4c:	20000ac0 	.word	0x20000ac0
 8003c50:	20000b58 	.word	0x20000b58
 8003c54:	20000b2c 	.word	0x20000b2c
 8003c58:	0800d2a0 	.word	0x0800d2a0
 8003c5c:	0800d2b4 	.word	0x0800d2b4
 8003c60:	0800d2c8 	.word	0x0800d2c8
 8003c64:	0800d2dc 	.word	0x0800d2dc
 8003c68:	20000b49 	.word	0x20000b49

08003c6c <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8003c76:	48a9      	ldr	r0, [pc, #676]	; (8003f1c <loadMenuTexts+0x2b0>)
 8003c78:	f7fc fd90 	bl	800079c <copyText>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4aa8      	ldr	r2, [pc, #672]	; (8003f20 <loadMenuTexts+0x2b4>)
 8003c80:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8003c82:	48a8      	ldr	r0, [pc, #672]	; (8003f24 <loadMenuTexts+0x2b8>)
 8003c84:	f7fc fd8a 	bl	800079c <copyText>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4aa7      	ldr	r2, [pc, #668]	; (8003f28 <loadMenuTexts+0x2bc>)
 8003c8c:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8003c8e:	48a7      	ldr	r0, [pc, #668]	; (8003f2c <loadMenuTexts+0x2c0>)
 8003c90:	f7fc fd84 	bl	800079c <copyText>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4aa6      	ldr	r2, [pc, #664]	; (8003f30 <loadMenuTexts+0x2c4>)
 8003c98:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8003c9a:	48a6      	ldr	r0, [pc, #664]	; (8003f34 <loadMenuTexts+0x2c8>)
 8003c9c:	f7fc fd7e 	bl	800079c <copyText>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4aa5      	ldr	r2, [pc, #660]	; (8003f38 <loadMenuTexts+0x2cc>)
 8003ca4:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8003ca6:	48a5      	ldr	r0, [pc, #660]	; (8003f3c <loadMenuTexts+0x2d0>)
 8003ca8:	f7fc fd78 	bl	800079c <copyText>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4aa4      	ldr	r2, [pc, #656]	; (8003f40 <loadMenuTexts+0x2d4>)
 8003cb0:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003cb2:	48a4      	ldr	r0, [pc, #656]	; (8003f44 <loadMenuTexts+0x2d8>)
 8003cb4:	f7fc fd72 	bl	800079c <copyText>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	4aa3      	ldr	r2, [pc, #652]	; (8003f48 <loadMenuTexts+0x2dc>)
 8003cbc:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003cbe:	48a3      	ldr	r0, [pc, #652]	; (8003f4c <loadMenuTexts+0x2e0>)
 8003cc0:	f7fc fd6c 	bl	800079c <copyText>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4aa2      	ldr	r2, [pc, #648]	; (8003f50 <loadMenuTexts+0x2e4>)
 8003cc8:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 82d1 	bne.w	8004274 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003cd2:	48a0      	ldr	r0, [pc, #640]	; (8003f54 <loadMenuTexts+0x2e8>)
 8003cd4:	f7fc fd62 	bl	800079c <copyText>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4a9f      	ldr	r2, [pc, #636]	; (8003f58 <loadMenuTexts+0x2ec>)
 8003cdc:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003cde:	489f      	ldr	r0, [pc, #636]	; (8003f5c <loadMenuTexts+0x2f0>)
 8003ce0:	f7fc fd5c 	bl	800079c <copyText>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4a9e      	ldr	r2, [pc, #632]	; (8003f60 <loadMenuTexts+0x2f4>)
 8003ce8:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8003cea:	489e      	ldr	r0, [pc, #632]	; (8003f64 <loadMenuTexts+0x2f8>)
 8003cec:	f7fc fd56 	bl	800079c <copyText>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a9d      	ldr	r2, [pc, #628]	; (8003f68 <loadMenuTexts+0x2fc>)
 8003cf4:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8003cf6:	489d      	ldr	r0, [pc, #628]	; (8003f6c <loadMenuTexts+0x300>)
 8003cf8:	f7fc fd50 	bl	800079c <copyText>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4a9c      	ldr	r2, [pc, #624]	; (8003f70 <loadMenuTexts+0x304>)
 8003d00:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003d02:	489c      	ldr	r0, [pc, #624]	; (8003f74 <loadMenuTexts+0x308>)
 8003d04:	f7fc fd4a 	bl	800079c <copyText>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4a9b      	ldr	r2, [pc, #620]	; (8003f78 <loadMenuTexts+0x30c>)
 8003d0c:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003d0e:	489b      	ldr	r0, [pc, #620]	; (8003f7c <loadMenuTexts+0x310>)
 8003d10:	f7fc fd44 	bl	800079c <copyText>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4a9a      	ldr	r2, [pc, #616]	; (8003f80 <loadMenuTexts+0x314>)
 8003d18:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8003d1a:	489a      	ldr	r0, [pc, #616]	; (8003f84 <loadMenuTexts+0x318>)
 8003d1c:	f7fc fd3e 	bl	800079c <copyText>
 8003d20:	4603      	mov	r3, r0
 8003d22:	4a99      	ldr	r2, [pc, #612]	; (8003f88 <loadMenuTexts+0x31c>)
 8003d24:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8003d26:	4899      	ldr	r0, [pc, #612]	; (8003f8c <loadMenuTexts+0x320>)
 8003d28:	f7fc fd38 	bl	800079c <copyText>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4a98      	ldr	r2, [pc, #608]	; (8003f90 <loadMenuTexts+0x324>)
 8003d30:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003d32:	4898      	ldr	r0, [pc, #608]	; (8003f94 <loadMenuTexts+0x328>)
 8003d34:	f7fc fd32 	bl	800079c <copyText>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4a97      	ldr	r2, [pc, #604]	; (8003f98 <loadMenuTexts+0x32c>)
 8003d3c:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8003d3e:	4897      	ldr	r0, [pc, #604]	; (8003f9c <loadMenuTexts+0x330>)
 8003d40:	f7fc fd2c 	bl	800079c <copyText>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4a96      	ldr	r2, [pc, #600]	; (8003fa0 <loadMenuTexts+0x334>)
 8003d48:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8003d4a:	4896      	ldr	r0, [pc, #600]	; (8003fa4 <loadMenuTexts+0x338>)
 8003d4c:	f7fc fd26 	bl	800079c <copyText>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4a95      	ldr	r2, [pc, #596]	; (8003fa8 <loadMenuTexts+0x33c>)
 8003d54:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8003d56:	4895      	ldr	r0, [pc, #596]	; (8003fac <loadMenuTexts+0x340>)
 8003d58:	f7fc fd20 	bl	800079c <copyText>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4a94      	ldr	r2, [pc, #592]	; (8003fb0 <loadMenuTexts+0x344>)
 8003d60:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8003d62:	4894      	ldr	r0, [pc, #592]	; (8003fb4 <loadMenuTexts+0x348>)
 8003d64:	f7fc fd1a 	bl	800079c <copyText>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a93      	ldr	r2, [pc, #588]	; (8003fb8 <loadMenuTexts+0x34c>)
 8003d6c:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8003d6e:	4893      	ldr	r0, [pc, #588]	; (8003fbc <loadMenuTexts+0x350>)
 8003d70:	f7fc fd14 	bl	800079c <copyText>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4a92      	ldr	r2, [pc, #584]	; (8003fc0 <loadMenuTexts+0x354>)
 8003d78:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8003d7a:	4892      	ldr	r0, [pc, #584]	; (8003fc4 <loadMenuTexts+0x358>)
 8003d7c:	f7fc fd0e 	bl	800079c <copyText>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4a91      	ldr	r2, [pc, #580]	; (8003fc8 <loadMenuTexts+0x35c>)
 8003d84:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8003d86:	4891      	ldr	r0, [pc, #580]	; (8003fcc <loadMenuTexts+0x360>)
 8003d88:	f7fc fd08 	bl	800079c <copyText>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4a90      	ldr	r2, [pc, #576]	; (8003fd0 <loadMenuTexts+0x364>)
 8003d90:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8003d92:	4890      	ldr	r0, [pc, #576]	; (8003fd4 <loadMenuTexts+0x368>)
 8003d94:	f7fc fd02 	bl	800079c <copyText>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4a8f      	ldr	r2, [pc, #572]	; (8003fd8 <loadMenuTexts+0x36c>)
 8003d9c:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003d9e:	488f      	ldr	r0, [pc, #572]	; (8003fdc <loadMenuTexts+0x370>)
 8003da0:	f7fc fcfc 	bl	800079c <copyText>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4a8e      	ldr	r2, [pc, #568]	; (8003fe0 <loadMenuTexts+0x374>)
 8003da8:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8003daa:	488e      	ldr	r0, [pc, #568]	; (8003fe4 <loadMenuTexts+0x378>)
 8003dac:	f7fc fcf6 	bl	800079c <copyText>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a8d      	ldr	r2, [pc, #564]	; (8003fe8 <loadMenuTexts+0x37c>)
 8003db4:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003db6:	488d      	ldr	r0, [pc, #564]	; (8003fec <loadMenuTexts+0x380>)
 8003db8:	f7fc fcf0 	bl	800079c <copyText>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4a8c      	ldr	r2, [pc, #560]	; (8003ff0 <loadMenuTexts+0x384>)
 8003dc0:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003dc2:	488c      	ldr	r0, [pc, #560]	; (8003ff4 <loadMenuTexts+0x388>)
 8003dc4:	f7fc fcea 	bl	800079c <copyText>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4a8b      	ldr	r2, [pc, #556]	; (8003ff8 <loadMenuTexts+0x38c>)
 8003dcc:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003dce:	488b      	ldr	r0, [pc, #556]	; (8003ffc <loadMenuTexts+0x390>)
 8003dd0:	f7fc fce4 	bl	800079c <copyText>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4a8a      	ldr	r2, [pc, #552]	; (8004000 <loadMenuTexts+0x394>)
 8003dd8:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003dda:	488a      	ldr	r0, [pc, #552]	; (8004004 <loadMenuTexts+0x398>)
 8003ddc:	f7fc fcde 	bl	800079c <copyText>
 8003de0:	4603      	mov	r3, r0
 8003de2:	4a89      	ldr	r2, [pc, #548]	; (8004008 <loadMenuTexts+0x39c>)
 8003de4:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003de6:	4889      	ldr	r0, [pc, #548]	; (800400c <loadMenuTexts+0x3a0>)
 8003de8:	f7fc fcd8 	bl	800079c <copyText>
 8003dec:	4603      	mov	r3, r0
 8003dee:	4a88      	ldr	r2, [pc, #544]	; (8004010 <loadMenuTexts+0x3a4>)
 8003df0:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003df2:	4888      	ldr	r0, [pc, #544]	; (8004014 <loadMenuTexts+0x3a8>)
 8003df4:	f7fc fcd2 	bl	800079c <copyText>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4a87      	ldr	r2, [pc, #540]	; (8004018 <loadMenuTexts+0x3ac>)
 8003dfc:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003dfe:	4887      	ldr	r0, [pc, #540]	; (800401c <loadMenuTexts+0x3b0>)
 8003e00:	f7fc fccc 	bl	800079c <copyText>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4a86      	ldr	r2, [pc, #536]	; (8004020 <loadMenuTexts+0x3b4>)
 8003e08:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003e0a:	4886      	ldr	r0, [pc, #536]	; (8004024 <loadMenuTexts+0x3b8>)
 8003e0c:	f7fc fcc6 	bl	800079c <copyText>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4a85      	ldr	r2, [pc, #532]	; (8004028 <loadMenuTexts+0x3bc>)
 8003e14:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003e16:	4885      	ldr	r0, [pc, #532]	; (800402c <loadMenuTexts+0x3c0>)
 8003e18:	f7fc fcc0 	bl	800079c <copyText>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4a84      	ldr	r2, [pc, #528]	; (8004030 <loadMenuTexts+0x3c4>)
 8003e20:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003e22:	4884      	ldr	r0, [pc, #528]	; (8004034 <loadMenuTexts+0x3c8>)
 8003e24:	f7fc fcba 	bl	800079c <copyText>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4a83      	ldr	r2, [pc, #524]	; (8004038 <loadMenuTexts+0x3cc>)
 8003e2c:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003e2e:	4883      	ldr	r0, [pc, #524]	; (800403c <loadMenuTexts+0x3d0>)
 8003e30:	f7fc fcb4 	bl	800079c <copyText>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4a82      	ldr	r2, [pc, #520]	; (8004040 <loadMenuTexts+0x3d4>)
 8003e38:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003e3a:	4882      	ldr	r0, [pc, #520]	; (8004044 <loadMenuTexts+0x3d8>)
 8003e3c:	f7fc fcae 	bl	800079c <copyText>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4a81      	ldr	r2, [pc, #516]	; (8004048 <loadMenuTexts+0x3dc>)
 8003e44:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003e46:	4881      	ldr	r0, [pc, #516]	; (800404c <loadMenuTexts+0x3e0>)
 8003e48:	f7fc fca8 	bl	800079c <copyText>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4a80      	ldr	r2, [pc, #512]	; (8004050 <loadMenuTexts+0x3e4>)
 8003e50:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003e52:	4880      	ldr	r0, [pc, #512]	; (8004054 <loadMenuTexts+0x3e8>)
 8003e54:	f7fc fca2 	bl	800079c <copyText>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4a7f      	ldr	r2, [pc, #508]	; (8004058 <loadMenuTexts+0x3ec>)
 8003e5c:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003e5e:	487f      	ldr	r0, [pc, #508]	; (800405c <loadMenuTexts+0x3f0>)
 8003e60:	f7fc fc9c 	bl	800079c <copyText>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4a7e      	ldr	r2, [pc, #504]	; (8004060 <loadMenuTexts+0x3f4>)
 8003e68:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003e6a:	487e      	ldr	r0, [pc, #504]	; (8004064 <loadMenuTexts+0x3f8>)
 8003e6c:	f7fc fc96 	bl	800079c <copyText>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4a7d      	ldr	r2, [pc, #500]	; (8004068 <loadMenuTexts+0x3fc>)
 8003e74:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003e76:	487d      	ldr	r0, [pc, #500]	; (800406c <loadMenuTexts+0x400>)
 8003e78:	f7fc fc90 	bl	800079c <copyText>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4a7c      	ldr	r2, [pc, #496]	; (8004070 <loadMenuTexts+0x404>)
 8003e80:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003e82:	487c      	ldr	r0, [pc, #496]	; (8004074 <loadMenuTexts+0x408>)
 8003e84:	f7fc fc8a 	bl	800079c <copyText>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4a7b      	ldr	r2, [pc, #492]	; (8004078 <loadMenuTexts+0x40c>)
 8003e8c:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003e8e:	487b      	ldr	r0, [pc, #492]	; (800407c <loadMenuTexts+0x410>)
 8003e90:	f7fc fc84 	bl	800079c <copyText>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4a7a      	ldr	r2, [pc, #488]	; (8004080 <loadMenuTexts+0x414>)
 8003e98:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003e9a:	487a      	ldr	r0, [pc, #488]	; (8004084 <loadMenuTexts+0x418>)
 8003e9c:	f7fc fc7e 	bl	800079c <copyText>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4a79      	ldr	r2, [pc, #484]	; (8004088 <loadMenuTexts+0x41c>)
 8003ea4:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003ea6:	4879      	ldr	r0, [pc, #484]	; (800408c <loadMenuTexts+0x420>)
 8003ea8:	f7fc fc78 	bl	800079c <copyText>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4a78      	ldr	r2, [pc, #480]	; (8004090 <loadMenuTexts+0x424>)
 8003eb0:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003eb2:	4878      	ldr	r0, [pc, #480]	; (8004094 <loadMenuTexts+0x428>)
 8003eb4:	f7fc fc72 	bl	800079c <copyText>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4a77      	ldr	r2, [pc, #476]	; (8004098 <loadMenuTexts+0x42c>)
 8003ebc:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003ebe:	4877      	ldr	r0, [pc, #476]	; (800409c <loadMenuTexts+0x430>)
 8003ec0:	f7fc fc6c 	bl	800079c <copyText>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4a76      	ldr	r2, [pc, #472]	; (80040a0 <loadMenuTexts+0x434>)
 8003ec8:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003eca:	4876      	ldr	r0, [pc, #472]	; (80040a4 <loadMenuTexts+0x438>)
 8003ecc:	f7fc fc66 	bl	800079c <copyText>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4a75      	ldr	r2, [pc, #468]	; (80040a8 <loadMenuTexts+0x43c>)
 8003ed4:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003ed6:	4875      	ldr	r0, [pc, #468]	; (80040ac <loadMenuTexts+0x440>)
 8003ed8:	f7fc fc60 	bl	800079c <copyText>
 8003edc:	4603      	mov	r3, r0
 8003ede:	4a74      	ldr	r2, [pc, #464]	; (80040b0 <loadMenuTexts+0x444>)
 8003ee0:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003ee2:	4874      	ldr	r0, [pc, #464]	; (80040b4 <loadMenuTexts+0x448>)
 8003ee4:	f7fc fc5a 	bl	800079c <copyText>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4a73      	ldr	r2, [pc, #460]	; (80040b8 <loadMenuTexts+0x44c>)
 8003eec:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003eee:	4873      	ldr	r0, [pc, #460]	; (80040bc <loadMenuTexts+0x450>)
 8003ef0:	f7fc fc54 	bl	800079c <copyText>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4a72      	ldr	r2, [pc, #456]	; (80040c0 <loadMenuTexts+0x454>)
 8003ef8:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003efa:	4872      	ldr	r0, [pc, #456]	; (80040c4 <loadMenuTexts+0x458>)
 8003efc:	f7fc fc4e 	bl	800079c <copyText>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4a71      	ldr	r2, [pc, #452]	; (80040c8 <loadMenuTexts+0x45c>)
 8003f04:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003f06:	4871      	ldr	r0, [pc, #452]	; (80040cc <loadMenuTexts+0x460>)
 8003f08:	f7fc fc48 	bl	800079c <copyText>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4a70      	ldr	r2, [pc, #448]	; (80040d0 <loadMenuTexts+0x464>)
 8003f10:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003f12:	4870      	ldr	r0, [pc, #448]	; (80040d4 <loadMenuTexts+0x468>)
 8003f14:	f7fc fc42 	bl	800079c <copyText>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	e0dd      	b.n	80040d8 <loadMenuTexts+0x46c>
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	20000b90 	.word	0x20000b90
 8003f24:	20000010 	.word	0x20000010
 8003f28:	20000b94 	.word	0x20000b94
 8003f2c:	20000020 	.word	0x20000020
 8003f30:	20000bec 	.word	0x20000bec
 8003f34:	20000030 	.word	0x20000030
 8003f38:	20000c1c 	.word	0x20000c1c
 8003f3c:	20000040 	.word	0x20000040
 8003f40:	20000c24 	.word	0x20000c24
 8003f44:	20000050 	.word	0x20000050
 8003f48:	20000c9c 	.word	0x20000c9c
 8003f4c:	20000060 	.word	0x20000060
 8003f50:	20000ca0 	.word	0x20000ca0
 8003f54:	20000070 	.word	0x20000070
 8003f58:	20000b98 	.word	0x20000b98
 8003f5c:	20000080 	.word	0x20000080
 8003f60:	20000b9c 	.word	0x20000b9c
 8003f64:	20000090 	.word	0x20000090
 8003f68:	20000ba0 	.word	0x20000ba0
 8003f6c:	200000a0 	.word	0x200000a0
 8003f70:	20000ba4 	.word	0x20000ba4
 8003f74:	200000b0 	.word	0x200000b0
 8003f78:	20000ba8 	.word	0x20000ba8
 8003f7c:	200000c0 	.word	0x200000c0
 8003f80:	20000bac 	.word	0x20000bac
 8003f84:	200000d0 	.word	0x200000d0
 8003f88:	20000bb0 	.word	0x20000bb0
 8003f8c:	200000e0 	.word	0x200000e0
 8003f90:	20000bb4 	.word	0x20000bb4
 8003f94:	200000f0 	.word	0x200000f0
 8003f98:	20000bb8 	.word	0x20000bb8
 8003f9c:	20000100 	.word	0x20000100
 8003fa0:	20000bbc 	.word	0x20000bbc
 8003fa4:	20000110 	.word	0x20000110
 8003fa8:	20000bc0 	.word	0x20000bc0
 8003fac:	20000120 	.word	0x20000120
 8003fb0:	20000bc4 	.word	0x20000bc4
 8003fb4:	20000130 	.word	0x20000130
 8003fb8:	20000bc8 	.word	0x20000bc8
 8003fbc:	20000140 	.word	0x20000140
 8003fc0:	20000bcc 	.word	0x20000bcc
 8003fc4:	20000150 	.word	0x20000150
 8003fc8:	20000bd0 	.word	0x20000bd0
 8003fcc:	20000160 	.word	0x20000160
 8003fd0:	20000bd4 	.word	0x20000bd4
 8003fd4:	20000170 	.word	0x20000170
 8003fd8:	20000bd8 	.word	0x20000bd8
 8003fdc:	20000180 	.word	0x20000180
 8003fe0:	20000bdc 	.word	0x20000bdc
 8003fe4:	20000190 	.word	0x20000190
 8003fe8:	20000be0 	.word	0x20000be0
 8003fec:	200001a0 	.word	0x200001a0
 8003ff0:	20000be4 	.word	0x20000be4
 8003ff4:	200001b0 	.word	0x200001b0
 8003ff8:	20000be8 	.word	0x20000be8
 8003ffc:	200001c0 	.word	0x200001c0
 8004000:	20000bf0 	.word	0x20000bf0
 8004004:	200001d0 	.word	0x200001d0
 8004008:	20000bf4 	.word	0x20000bf4
 800400c:	200001e0 	.word	0x200001e0
 8004010:	20000bf8 	.word	0x20000bf8
 8004014:	200001f0 	.word	0x200001f0
 8004018:	20000bfc 	.word	0x20000bfc
 800401c:	20000200 	.word	0x20000200
 8004020:	20000c00 	.word	0x20000c00
 8004024:	20000210 	.word	0x20000210
 8004028:	20000c04 	.word	0x20000c04
 800402c:	20000220 	.word	0x20000220
 8004030:	20000c08 	.word	0x20000c08
 8004034:	20000230 	.word	0x20000230
 8004038:	20000c0c 	.word	0x20000c0c
 800403c:	20000240 	.word	0x20000240
 8004040:	20000c10 	.word	0x20000c10
 8004044:	20000250 	.word	0x20000250
 8004048:	20000c14 	.word	0x20000c14
 800404c:	20000260 	.word	0x20000260
 8004050:	20000c18 	.word	0x20000c18
 8004054:	20000270 	.word	0x20000270
 8004058:	20000c20 	.word	0x20000c20
 800405c:	20000280 	.word	0x20000280
 8004060:	20000c28 	.word	0x20000c28
 8004064:	20000290 	.word	0x20000290
 8004068:	20000c2c 	.word	0x20000c2c
 800406c:	200002a0 	.word	0x200002a0
 8004070:	20000c30 	.word	0x20000c30
 8004074:	200002b0 	.word	0x200002b0
 8004078:	20000c34 	.word	0x20000c34
 800407c:	200002c0 	.word	0x200002c0
 8004080:	20000c38 	.word	0x20000c38
 8004084:	200002d0 	.word	0x200002d0
 8004088:	20000c3c 	.word	0x20000c3c
 800408c:	200002e0 	.word	0x200002e0
 8004090:	20000c40 	.word	0x20000c40
 8004094:	200002f0 	.word	0x200002f0
 8004098:	20000c44 	.word	0x20000c44
 800409c:	20000300 	.word	0x20000300
 80040a0:	20000c48 	.word	0x20000c48
 80040a4:	20000310 	.word	0x20000310
 80040a8:	20000c4c 	.word	0x20000c4c
 80040ac:	20000320 	.word	0x20000320
 80040b0:	20000c50 	.word	0x20000c50
 80040b4:	20000330 	.word	0x20000330
 80040b8:	20000c54 	.word	0x20000c54
 80040bc:	20000340 	.word	0x20000340
 80040c0:	20000c58 	.word	0x20000c58
 80040c4:	20000350 	.word	0x20000350
 80040c8:	20000c5c 	.word	0x20000c5c
 80040cc:	20000360 	.word	0x20000360
 80040d0:	20000c60 	.word	0x20000c60
 80040d4:	20000370 	.word	0x20000370
 80040d8:	4a3d      	ldr	r2, [pc, #244]	; (80041d0 <loadMenuTexts+0x564>)
 80040da:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 80040dc:	483d      	ldr	r0, [pc, #244]	; (80041d4 <loadMenuTexts+0x568>)
 80040de:	f7fc fb5d 	bl	800079c <copyText>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <loadMenuTexts+0x56c>)
 80040e6:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 80040e8:	483c      	ldr	r0, [pc, #240]	; (80041dc <loadMenuTexts+0x570>)
 80040ea:	f7fc fb57 	bl	800079c <copyText>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4a3b      	ldr	r2, [pc, #236]	; (80041e0 <loadMenuTexts+0x574>)
 80040f2:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 80040f4:	483b      	ldr	r0, [pc, #236]	; (80041e4 <loadMenuTexts+0x578>)
 80040f6:	f7fc fb51 	bl	800079c <copyText>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a3a      	ldr	r2, [pc, #232]	; (80041e8 <loadMenuTexts+0x57c>)
 80040fe:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8004100:	483a      	ldr	r0, [pc, #232]	; (80041ec <loadMenuTexts+0x580>)
 8004102:	f7fc fb4b 	bl	800079c <copyText>
 8004106:	4603      	mov	r3, r0
 8004108:	4a39      	ldr	r2, [pc, #228]	; (80041f0 <loadMenuTexts+0x584>)
 800410a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 800410c:	4839      	ldr	r0, [pc, #228]	; (80041f4 <loadMenuTexts+0x588>)
 800410e:	f7fc fb45 	bl	800079c <copyText>
 8004112:	4603      	mov	r3, r0
 8004114:	4a38      	ldr	r2, [pc, #224]	; (80041f8 <loadMenuTexts+0x58c>)
 8004116:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8004118:	4838      	ldr	r0, [pc, #224]	; (80041fc <loadMenuTexts+0x590>)
 800411a:	f7fc fb3f 	bl	800079c <copyText>
 800411e:	4603      	mov	r3, r0
 8004120:	4a37      	ldr	r2, [pc, #220]	; (8004200 <loadMenuTexts+0x594>)
 8004122:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8004124:	4837      	ldr	r0, [pc, #220]	; (8004204 <loadMenuTexts+0x598>)
 8004126:	f7fc fb39 	bl	800079c <copyText>
 800412a:	4603      	mov	r3, r0
 800412c:	4a36      	ldr	r2, [pc, #216]	; (8004208 <loadMenuTexts+0x59c>)
 800412e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8004130:	4836      	ldr	r0, [pc, #216]	; (800420c <loadMenuTexts+0x5a0>)
 8004132:	f7fc fb33 	bl	800079c <copyText>
 8004136:	4603      	mov	r3, r0
 8004138:	4a35      	ldr	r2, [pc, #212]	; (8004210 <loadMenuTexts+0x5a4>)
 800413a:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 800413c:	4835      	ldr	r0, [pc, #212]	; (8004214 <loadMenuTexts+0x5a8>)
 800413e:	f7fc fb2d 	bl	800079c <copyText>
 8004142:	4603      	mov	r3, r0
 8004144:	4a34      	ldr	r2, [pc, #208]	; (8004218 <loadMenuTexts+0x5ac>)
 8004146:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8004148:	4834      	ldr	r0, [pc, #208]	; (800421c <loadMenuTexts+0x5b0>)
 800414a:	f7fc fb27 	bl	800079c <copyText>
 800414e:	4603      	mov	r3, r0
 8004150:	4a33      	ldr	r2, [pc, #204]	; (8004220 <loadMenuTexts+0x5b4>)
 8004152:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8004154:	4833      	ldr	r0, [pc, #204]	; (8004224 <loadMenuTexts+0x5b8>)
 8004156:	f7fc fb21 	bl	800079c <copyText>
 800415a:	4603      	mov	r3, r0
 800415c:	4a32      	ldr	r2, [pc, #200]	; (8004228 <loadMenuTexts+0x5bc>)
 800415e:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8004160:	4832      	ldr	r0, [pc, #200]	; (800422c <loadMenuTexts+0x5c0>)
 8004162:	f7fc fb1b 	bl	800079c <copyText>
 8004166:	4603      	mov	r3, r0
 8004168:	4a31      	ldr	r2, [pc, #196]	; (8004230 <loadMenuTexts+0x5c4>)
 800416a:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 800416c:	4831      	ldr	r0, [pc, #196]	; (8004234 <loadMenuTexts+0x5c8>)
 800416e:	f7fc fb15 	bl	800079c <copyText>
 8004172:	4603      	mov	r3, r0
 8004174:	4a30      	ldr	r2, [pc, #192]	; (8004238 <loadMenuTexts+0x5cc>)
 8004176:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8004178:	4830      	ldr	r0, [pc, #192]	; (800423c <loadMenuTexts+0x5d0>)
 800417a:	f7fc fb0f 	bl	800079c <copyText>
 800417e:	4603      	mov	r3, r0
 8004180:	4a2f      	ldr	r2, [pc, #188]	; (8004240 <loadMenuTexts+0x5d4>)
 8004182:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8004184:	482f      	ldr	r0, [pc, #188]	; (8004244 <loadMenuTexts+0x5d8>)
 8004186:	f7fc fb09 	bl	800079c <copyText>
 800418a:	4603      	mov	r3, r0
 800418c:	4a2e      	ldr	r2, [pc, #184]	; (8004248 <loadMenuTexts+0x5dc>)
 800418e:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8004190:	482e      	ldr	r0, [pc, #184]	; (800424c <loadMenuTexts+0x5e0>)
 8004192:	f7fc fb03 	bl	800079c <copyText>
 8004196:	4603      	mov	r3, r0
 8004198:	4a2d      	ldr	r2, [pc, #180]	; (8004250 <loadMenuTexts+0x5e4>)
 800419a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 800419c:	482d      	ldr	r0, [pc, #180]	; (8004254 <loadMenuTexts+0x5e8>)
 800419e:	f7fc fafd 	bl	800079c <copyText>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <loadMenuTexts+0x5ec>)
 80041a6:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80041a8:	482c      	ldr	r0, [pc, #176]	; (800425c <loadMenuTexts+0x5f0>)
 80041aa:	f7fc faf7 	bl	800079c <copyText>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <loadMenuTexts+0x5f4>)
 80041b2:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80041b4:	482b      	ldr	r0, [pc, #172]	; (8004264 <loadMenuTexts+0x5f8>)
 80041b6:	f7fc faf1 	bl	800079c <copyText>
 80041ba:	4603      	mov	r3, r0
 80041bc:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <loadMenuTexts+0x5fc>)
 80041be:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80041c0:	482a      	ldr	r0, [pc, #168]	; (800426c <loadMenuTexts+0x600>)
 80041c2:	f7fc faeb 	bl	800079c <copyText>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4a29      	ldr	r2, [pc, #164]	; (8004270 <loadMenuTexts+0x604>)
 80041ca:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80041cc:	e2d3      	b.n	8004776 <loadMenuTexts+0xb0a>
 80041ce:	bf00      	nop
 80041d0:	20000c64 	.word	0x20000c64
 80041d4:	20000380 	.word	0x20000380
 80041d8:	20000c68 	.word	0x20000c68
 80041dc:	20000390 	.word	0x20000390
 80041e0:	20000c6c 	.word	0x20000c6c
 80041e4:	200003a0 	.word	0x200003a0
 80041e8:	20000c70 	.word	0x20000c70
 80041ec:	200003b0 	.word	0x200003b0
 80041f0:	20000c74 	.word	0x20000c74
 80041f4:	200003c0 	.word	0x200003c0
 80041f8:	20000c78 	.word	0x20000c78
 80041fc:	200003d0 	.word	0x200003d0
 8004200:	20000c7c 	.word	0x20000c7c
 8004204:	200003e0 	.word	0x200003e0
 8004208:	20000c80 	.word	0x20000c80
 800420c:	200003f0 	.word	0x200003f0
 8004210:	20000c84 	.word	0x20000c84
 8004214:	20000400 	.word	0x20000400
 8004218:	20000c88 	.word	0x20000c88
 800421c:	20000410 	.word	0x20000410
 8004220:	20000c8c 	.word	0x20000c8c
 8004224:	20000420 	.word	0x20000420
 8004228:	20000c90 	.word	0x20000c90
 800422c:	20000430 	.word	0x20000430
 8004230:	20000c94 	.word	0x20000c94
 8004234:	20000440 	.word	0x20000440
 8004238:	20000c98 	.word	0x20000c98
 800423c:	20000450 	.word	0x20000450
 8004240:	20000ca4 	.word	0x20000ca4
 8004244:	20000460 	.word	0x20000460
 8004248:	20000ca8 	.word	0x20000ca8
 800424c:	20000470 	.word	0x20000470
 8004250:	20000cac 	.word	0x20000cac
 8004254:	20000480 	.word	0x20000480
 8004258:	20000cb0 	.word	0x20000cb0
 800425c:	20000490 	.word	0x20000490
 8004260:	20000cb4 	.word	0x20000cb4
 8004264:	200004a0 	.word	0x200004a0
 8004268:	20000cb8 	.word	0x20000cb8
 800426c:	200004b0 	.word	0x200004b0
 8004270:	20000cbc 	.word	0x20000cbc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8004274:	48a9      	ldr	r0, [pc, #676]	; (800451c <loadMenuTexts+0x8b0>)
 8004276:	f7fc fa91 	bl	800079c <copyText>
 800427a:	4603      	mov	r3, r0
 800427c:	4aa8      	ldr	r2, [pc, #672]	; (8004520 <loadMenuTexts+0x8b4>)
 800427e:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8004280:	48a8      	ldr	r0, [pc, #672]	; (8004524 <loadMenuTexts+0x8b8>)
 8004282:	f7fc fa8b 	bl	800079c <copyText>
 8004286:	4603      	mov	r3, r0
 8004288:	4aa7      	ldr	r2, [pc, #668]	; (8004528 <loadMenuTexts+0x8bc>)
 800428a:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 800428c:	48a7      	ldr	r0, [pc, #668]	; (800452c <loadMenuTexts+0x8c0>)
 800428e:	f7fc fa85 	bl	800079c <copyText>
 8004292:	4603      	mov	r3, r0
 8004294:	4aa6      	ldr	r2, [pc, #664]	; (8004530 <loadMenuTexts+0x8c4>)
 8004296:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8004298:	48a6      	ldr	r0, [pc, #664]	; (8004534 <loadMenuTexts+0x8c8>)
 800429a:	f7fc fa7f 	bl	800079c <copyText>
 800429e:	4603      	mov	r3, r0
 80042a0:	4aa5      	ldr	r2, [pc, #660]	; (8004538 <loadMenuTexts+0x8cc>)
 80042a2:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80042a4:	48a5      	ldr	r0, [pc, #660]	; (800453c <loadMenuTexts+0x8d0>)
 80042a6:	f7fc fa79 	bl	800079c <copyText>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4aa4      	ldr	r2, [pc, #656]	; (8004540 <loadMenuTexts+0x8d4>)
 80042ae:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80042b0:	48a4      	ldr	r0, [pc, #656]	; (8004544 <loadMenuTexts+0x8d8>)
 80042b2:	f7fc fa73 	bl	800079c <copyText>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4aa3      	ldr	r2, [pc, #652]	; (8004548 <loadMenuTexts+0x8dc>)
 80042ba:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80042bc:	48a3      	ldr	r0, [pc, #652]	; (800454c <loadMenuTexts+0x8e0>)
 80042be:	f7fc fa6d 	bl	800079c <copyText>
 80042c2:	4603      	mov	r3, r0
 80042c4:	4aa2      	ldr	r2, [pc, #648]	; (8004550 <loadMenuTexts+0x8e4>)
 80042c6:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80042c8:	48a2      	ldr	r0, [pc, #648]	; (8004554 <loadMenuTexts+0x8e8>)
 80042ca:	f7fc fa67 	bl	800079c <copyText>
 80042ce:	4603      	mov	r3, r0
 80042d0:	4aa1      	ldr	r2, [pc, #644]	; (8004558 <loadMenuTexts+0x8ec>)
 80042d2:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80042d4:	48a1      	ldr	r0, [pc, #644]	; (800455c <loadMenuTexts+0x8f0>)
 80042d6:	f7fc fa61 	bl	800079c <copyText>
 80042da:	4603      	mov	r3, r0
 80042dc:	4aa0      	ldr	r2, [pc, #640]	; (8004560 <loadMenuTexts+0x8f4>)
 80042de:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80042e0:	48a0      	ldr	r0, [pc, #640]	; (8004564 <loadMenuTexts+0x8f8>)
 80042e2:	f7fc fa5b 	bl	800079c <copyText>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4a9f      	ldr	r2, [pc, #636]	; (8004568 <loadMenuTexts+0x8fc>)
 80042ea:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80042ec:	489f      	ldr	r0, [pc, #636]	; (800456c <loadMenuTexts+0x900>)
 80042ee:	f7fc fa55 	bl	800079c <copyText>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4a9e      	ldr	r2, [pc, #632]	; (8004570 <loadMenuTexts+0x904>)
 80042f6:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80042f8:	489e      	ldr	r0, [pc, #632]	; (8004574 <loadMenuTexts+0x908>)
 80042fa:	f7fc fa4f 	bl	800079c <copyText>
 80042fe:	4603      	mov	r3, r0
 8004300:	4a9d      	ldr	r2, [pc, #628]	; (8004578 <loadMenuTexts+0x90c>)
 8004302:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8004304:	489d      	ldr	r0, [pc, #628]	; (800457c <loadMenuTexts+0x910>)
 8004306:	f7fc fa49 	bl	800079c <copyText>
 800430a:	4603      	mov	r3, r0
 800430c:	4a9c      	ldr	r2, [pc, #624]	; (8004580 <loadMenuTexts+0x914>)
 800430e:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8004310:	489c      	ldr	r0, [pc, #624]	; (8004584 <loadMenuTexts+0x918>)
 8004312:	f7fc fa43 	bl	800079c <copyText>
 8004316:	4603      	mov	r3, r0
 8004318:	4a9b      	ldr	r2, [pc, #620]	; (8004588 <loadMenuTexts+0x91c>)
 800431a:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 800431c:	489b      	ldr	r0, [pc, #620]	; (800458c <loadMenuTexts+0x920>)
 800431e:	f7fc fa3d 	bl	800079c <copyText>
 8004322:	4603      	mov	r3, r0
 8004324:	4a9a      	ldr	r2, [pc, #616]	; (8004590 <loadMenuTexts+0x924>)
 8004326:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8004328:	489a      	ldr	r0, [pc, #616]	; (8004594 <loadMenuTexts+0x928>)
 800432a:	f7fc fa37 	bl	800079c <copyText>
 800432e:	4603      	mov	r3, r0
 8004330:	4a99      	ldr	r2, [pc, #612]	; (8004598 <loadMenuTexts+0x92c>)
 8004332:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8004334:	4899      	ldr	r0, [pc, #612]	; (800459c <loadMenuTexts+0x930>)
 8004336:	f7fc fa31 	bl	800079c <copyText>
 800433a:	4603      	mov	r3, r0
 800433c:	4a98      	ldr	r2, [pc, #608]	; (80045a0 <loadMenuTexts+0x934>)
 800433e:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8004340:	4898      	ldr	r0, [pc, #608]	; (80045a4 <loadMenuTexts+0x938>)
 8004342:	f7fc fa2b 	bl	800079c <copyText>
 8004346:	4603      	mov	r3, r0
 8004348:	4a97      	ldr	r2, [pc, #604]	; (80045a8 <loadMenuTexts+0x93c>)
 800434a:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 800434c:	4897      	ldr	r0, [pc, #604]	; (80045ac <loadMenuTexts+0x940>)
 800434e:	f7fc fa25 	bl	800079c <copyText>
 8004352:	4603      	mov	r3, r0
 8004354:	4a96      	ldr	r2, [pc, #600]	; (80045b0 <loadMenuTexts+0x944>)
 8004356:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8004358:	4896      	ldr	r0, [pc, #600]	; (80045b4 <loadMenuTexts+0x948>)
 800435a:	f7fc fa1f 	bl	800079c <copyText>
 800435e:	4603      	mov	r3, r0
 8004360:	4a95      	ldr	r2, [pc, #596]	; (80045b8 <loadMenuTexts+0x94c>)
 8004362:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8004364:	4895      	ldr	r0, [pc, #596]	; (80045bc <loadMenuTexts+0x950>)
 8004366:	f7fc fa19 	bl	800079c <copyText>
 800436a:	4603      	mov	r3, r0
 800436c:	4a94      	ldr	r2, [pc, #592]	; (80045c0 <loadMenuTexts+0x954>)
 800436e:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8004370:	4894      	ldr	r0, [pc, #592]	; (80045c4 <loadMenuTexts+0x958>)
 8004372:	f7fc fa13 	bl	800079c <copyText>
 8004376:	4603      	mov	r3, r0
 8004378:	4a93      	ldr	r2, [pc, #588]	; (80045c8 <loadMenuTexts+0x95c>)
 800437a:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 800437c:	4893      	ldr	r0, [pc, #588]	; (80045cc <loadMenuTexts+0x960>)
 800437e:	f7fc fa0d 	bl	800079c <copyText>
 8004382:	4603      	mov	r3, r0
 8004384:	4a92      	ldr	r2, [pc, #584]	; (80045d0 <loadMenuTexts+0x964>)
 8004386:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8004388:	4892      	ldr	r0, [pc, #584]	; (80045d4 <loadMenuTexts+0x968>)
 800438a:	f7fc fa07 	bl	800079c <copyText>
 800438e:	4603      	mov	r3, r0
 8004390:	4a91      	ldr	r2, [pc, #580]	; (80045d8 <loadMenuTexts+0x96c>)
 8004392:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8004394:	4891      	ldr	r0, [pc, #580]	; (80045dc <loadMenuTexts+0x970>)
 8004396:	f7fc fa01 	bl	800079c <copyText>
 800439a:	4603      	mov	r3, r0
 800439c:	4a90      	ldr	r2, [pc, #576]	; (80045e0 <loadMenuTexts+0x974>)
 800439e:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80043a0:	4890      	ldr	r0, [pc, #576]	; (80045e4 <loadMenuTexts+0x978>)
 80043a2:	f7fc f9fb 	bl	800079c <copyText>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4a8f      	ldr	r2, [pc, #572]	; (80045e8 <loadMenuTexts+0x97c>)
 80043aa:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80043ac:	488f      	ldr	r0, [pc, #572]	; (80045ec <loadMenuTexts+0x980>)
 80043ae:	f7fc f9f5 	bl	800079c <copyText>
 80043b2:	4603      	mov	r3, r0
 80043b4:	4a8e      	ldr	r2, [pc, #568]	; (80045f0 <loadMenuTexts+0x984>)
 80043b6:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80043b8:	488e      	ldr	r0, [pc, #568]	; (80045f4 <loadMenuTexts+0x988>)
 80043ba:	f7fc f9ef 	bl	800079c <copyText>
 80043be:	4603      	mov	r3, r0
 80043c0:	4a8d      	ldr	r2, [pc, #564]	; (80045f8 <loadMenuTexts+0x98c>)
 80043c2:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80043c4:	488d      	ldr	r0, [pc, #564]	; (80045fc <loadMenuTexts+0x990>)
 80043c6:	f7fc f9e9 	bl	800079c <copyText>
 80043ca:	4603      	mov	r3, r0
 80043cc:	4a8c      	ldr	r2, [pc, #560]	; (8004600 <loadMenuTexts+0x994>)
 80043ce:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80043d0:	488c      	ldr	r0, [pc, #560]	; (8004604 <loadMenuTexts+0x998>)
 80043d2:	f7fc f9e3 	bl	800079c <copyText>
 80043d6:	4603      	mov	r3, r0
 80043d8:	4a8b      	ldr	r2, [pc, #556]	; (8004608 <loadMenuTexts+0x99c>)
 80043da:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80043dc:	488b      	ldr	r0, [pc, #556]	; (800460c <loadMenuTexts+0x9a0>)
 80043de:	f7fc f9dd 	bl	800079c <copyText>
 80043e2:	4603      	mov	r3, r0
 80043e4:	4a8a      	ldr	r2, [pc, #552]	; (8004610 <loadMenuTexts+0x9a4>)
 80043e6:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80043e8:	488a      	ldr	r0, [pc, #552]	; (8004614 <loadMenuTexts+0x9a8>)
 80043ea:	f7fc f9d7 	bl	800079c <copyText>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4a89      	ldr	r2, [pc, #548]	; (8004618 <loadMenuTexts+0x9ac>)
 80043f2:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80043f4:	4889      	ldr	r0, [pc, #548]	; (800461c <loadMenuTexts+0x9b0>)
 80043f6:	f7fc f9d1 	bl	800079c <copyText>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4a88      	ldr	r2, [pc, #544]	; (8004620 <loadMenuTexts+0x9b4>)
 80043fe:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8004400:	4888      	ldr	r0, [pc, #544]	; (8004624 <loadMenuTexts+0x9b8>)
 8004402:	f7fc f9cb 	bl	800079c <copyText>
 8004406:	4603      	mov	r3, r0
 8004408:	4a87      	ldr	r2, [pc, #540]	; (8004628 <loadMenuTexts+0x9bc>)
 800440a:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 800440c:	4887      	ldr	r0, [pc, #540]	; (800462c <loadMenuTexts+0x9c0>)
 800440e:	f7fc f9c5 	bl	800079c <copyText>
 8004412:	4603      	mov	r3, r0
 8004414:	4a86      	ldr	r2, [pc, #536]	; (8004630 <loadMenuTexts+0x9c4>)
 8004416:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8004418:	4886      	ldr	r0, [pc, #536]	; (8004634 <loadMenuTexts+0x9c8>)
 800441a:	f7fc f9bf 	bl	800079c <copyText>
 800441e:	4603      	mov	r3, r0
 8004420:	4a85      	ldr	r2, [pc, #532]	; (8004638 <loadMenuTexts+0x9cc>)
 8004422:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8004424:	4885      	ldr	r0, [pc, #532]	; (800463c <loadMenuTexts+0x9d0>)
 8004426:	f7fc f9b9 	bl	800079c <copyText>
 800442a:	4603      	mov	r3, r0
 800442c:	4a84      	ldr	r2, [pc, #528]	; (8004640 <loadMenuTexts+0x9d4>)
 800442e:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8004430:	4884      	ldr	r0, [pc, #528]	; (8004644 <loadMenuTexts+0x9d8>)
 8004432:	f7fc f9b3 	bl	800079c <copyText>
 8004436:	4603      	mov	r3, r0
 8004438:	4a83      	ldr	r2, [pc, #524]	; (8004648 <loadMenuTexts+0x9dc>)
 800443a:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 800443c:	4883      	ldr	r0, [pc, #524]	; (800464c <loadMenuTexts+0x9e0>)
 800443e:	f7fc f9ad 	bl	800079c <copyText>
 8004442:	4603      	mov	r3, r0
 8004444:	4a82      	ldr	r2, [pc, #520]	; (8004650 <loadMenuTexts+0x9e4>)
 8004446:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8004448:	4882      	ldr	r0, [pc, #520]	; (8004654 <loadMenuTexts+0x9e8>)
 800444a:	f7fc f9a7 	bl	800079c <copyText>
 800444e:	4603      	mov	r3, r0
 8004450:	4a81      	ldr	r2, [pc, #516]	; (8004658 <loadMenuTexts+0x9ec>)
 8004452:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8004454:	4881      	ldr	r0, [pc, #516]	; (800465c <loadMenuTexts+0x9f0>)
 8004456:	f7fc f9a1 	bl	800079c <copyText>
 800445a:	4603      	mov	r3, r0
 800445c:	4a80      	ldr	r2, [pc, #512]	; (8004660 <loadMenuTexts+0x9f4>)
 800445e:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8004460:	4880      	ldr	r0, [pc, #512]	; (8004664 <loadMenuTexts+0x9f8>)
 8004462:	f7fc f99b 	bl	800079c <copyText>
 8004466:	4603      	mov	r3, r0
 8004468:	4a7f      	ldr	r2, [pc, #508]	; (8004668 <loadMenuTexts+0x9fc>)
 800446a:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 800446c:	487f      	ldr	r0, [pc, #508]	; (800466c <loadMenuTexts+0xa00>)
 800446e:	f7fc f995 	bl	800079c <copyText>
 8004472:	4603      	mov	r3, r0
 8004474:	4a7e      	ldr	r2, [pc, #504]	; (8004670 <loadMenuTexts+0xa04>)
 8004476:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8004478:	487e      	ldr	r0, [pc, #504]	; (8004674 <loadMenuTexts+0xa08>)
 800447a:	f7fc f98f 	bl	800079c <copyText>
 800447e:	4603      	mov	r3, r0
 8004480:	4a7d      	ldr	r2, [pc, #500]	; (8004678 <loadMenuTexts+0xa0c>)
 8004482:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8004484:	487d      	ldr	r0, [pc, #500]	; (800467c <loadMenuTexts+0xa10>)
 8004486:	f7fc f989 	bl	800079c <copyText>
 800448a:	4603      	mov	r3, r0
 800448c:	4a7c      	ldr	r2, [pc, #496]	; (8004680 <loadMenuTexts+0xa14>)
 800448e:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8004490:	487c      	ldr	r0, [pc, #496]	; (8004684 <loadMenuTexts+0xa18>)
 8004492:	f7fc f983 	bl	800079c <copyText>
 8004496:	4603      	mov	r3, r0
 8004498:	4a7b      	ldr	r2, [pc, #492]	; (8004688 <loadMenuTexts+0xa1c>)
 800449a:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 800449c:	487b      	ldr	r0, [pc, #492]	; (800468c <loadMenuTexts+0xa20>)
 800449e:	f7fc f97d 	bl	800079c <copyText>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4a7a      	ldr	r2, [pc, #488]	; (8004690 <loadMenuTexts+0xa24>)
 80044a6:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80044a8:	487a      	ldr	r0, [pc, #488]	; (8004694 <loadMenuTexts+0xa28>)
 80044aa:	f7fc f977 	bl	800079c <copyText>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4a79      	ldr	r2, [pc, #484]	; (8004698 <loadMenuTexts+0xa2c>)
 80044b2:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80044b4:	4879      	ldr	r0, [pc, #484]	; (800469c <loadMenuTexts+0xa30>)
 80044b6:	f7fc f971 	bl	800079c <copyText>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4a78      	ldr	r2, [pc, #480]	; (80046a0 <loadMenuTexts+0xa34>)
 80044be:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80044c0:	4878      	ldr	r0, [pc, #480]	; (80046a4 <loadMenuTexts+0xa38>)
 80044c2:	f7fc f96b 	bl	800079c <copyText>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4a77      	ldr	r2, [pc, #476]	; (80046a8 <loadMenuTexts+0xa3c>)
 80044ca:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80044cc:	4877      	ldr	r0, [pc, #476]	; (80046ac <loadMenuTexts+0xa40>)
 80044ce:	f7fc f965 	bl	800079c <copyText>
 80044d2:	4603      	mov	r3, r0
 80044d4:	4a76      	ldr	r2, [pc, #472]	; (80046b0 <loadMenuTexts+0xa44>)
 80044d6:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80044d8:	4876      	ldr	r0, [pc, #472]	; (80046b4 <loadMenuTexts+0xa48>)
 80044da:	f7fc f95f 	bl	800079c <copyText>
 80044de:	4603      	mov	r3, r0
 80044e0:	4a75      	ldr	r2, [pc, #468]	; (80046b8 <loadMenuTexts+0xa4c>)
 80044e2:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80044e4:	4875      	ldr	r0, [pc, #468]	; (80046bc <loadMenuTexts+0xa50>)
 80044e6:	f7fc f959 	bl	800079c <copyText>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a74      	ldr	r2, [pc, #464]	; (80046c0 <loadMenuTexts+0xa54>)
 80044ee:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80044f0:	4874      	ldr	r0, [pc, #464]	; (80046c4 <loadMenuTexts+0xa58>)
 80044f2:	f7fc f953 	bl	800079c <copyText>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4a73      	ldr	r2, [pc, #460]	; (80046c8 <loadMenuTexts+0xa5c>)
 80044fa:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80044fc:	4873      	ldr	r0, [pc, #460]	; (80046cc <loadMenuTexts+0xa60>)
 80044fe:	f7fc f94d 	bl	800079c <copyText>
 8004502:	4603      	mov	r3, r0
 8004504:	4a72      	ldr	r2, [pc, #456]	; (80046d0 <loadMenuTexts+0xa64>)
 8004506:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8004508:	4872      	ldr	r0, [pc, #456]	; (80046d4 <loadMenuTexts+0xa68>)
 800450a:	f7fc f947 	bl	800079c <copyText>
 800450e:	4603      	mov	r3, r0
 8004510:	4a71      	ldr	r2, [pc, #452]	; (80046d8 <loadMenuTexts+0xa6c>)
 8004512:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8004514:	4871      	ldr	r0, [pc, #452]	; (80046dc <loadMenuTexts+0xa70>)
 8004516:	f7fc f941 	bl	800079c <copyText>
 800451a:	e0e1      	b.n	80046e0 <loadMenuTexts+0xa74>
 800451c:	200004c0 	.word	0x200004c0
 8004520:	20000b98 	.word	0x20000b98
 8004524:	200004d0 	.word	0x200004d0
 8004528:	20000b9c 	.word	0x20000b9c
 800452c:	200004e0 	.word	0x200004e0
 8004530:	20000ba0 	.word	0x20000ba0
 8004534:	200004f0 	.word	0x200004f0
 8004538:	20000ba4 	.word	0x20000ba4
 800453c:	20000500 	.word	0x20000500
 8004540:	20000ba8 	.word	0x20000ba8
 8004544:	20000510 	.word	0x20000510
 8004548:	20000bac 	.word	0x20000bac
 800454c:	20000520 	.word	0x20000520
 8004550:	20000bb0 	.word	0x20000bb0
 8004554:	20000530 	.word	0x20000530
 8004558:	20000bb4 	.word	0x20000bb4
 800455c:	20000540 	.word	0x20000540
 8004560:	20000bb8 	.word	0x20000bb8
 8004564:	20000550 	.word	0x20000550
 8004568:	20000bbc 	.word	0x20000bbc
 800456c:	20000560 	.word	0x20000560
 8004570:	20000bc0 	.word	0x20000bc0
 8004574:	20000570 	.word	0x20000570
 8004578:	20000bc4 	.word	0x20000bc4
 800457c:	20000580 	.word	0x20000580
 8004580:	20000bc8 	.word	0x20000bc8
 8004584:	20000590 	.word	0x20000590
 8004588:	20000bcc 	.word	0x20000bcc
 800458c:	200005a0 	.word	0x200005a0
 8004590:	20000bd0 	.word	0x20000bd0
 8004594:	200005b0 	.word	0x200005b0
 8004598:	20000bd4 	.word	0x20000bd4
 800459c:	200005c0 	.word	0x200005c0
 80045a0:	20000bd8 	.word	0x20000bd8
 80045a4:	200005d0 	.word	0x200005d0
 80045a8:	20000bdc 	.word	0x20000bdc
 80045ac:	200005e0 	.word	0x200005e0
 80045b0:	20000be0 	.word	0x20000be0
 80045b4:	200005f0 	.word	0x200005f0
 80045b8:	20000be4 	.word	0x20000be4
 80045bc:	20000600 	.word	0x20000600
 80045c0:	20000be8 	.word	0x20000be8
 80045c4:	20000610 	.word	0x20000610
 80045c8:	20000bf0 	.word	0x20000bf0
 80045cc:	20000620 	.word	0x20000620
 80045d0:	20000bf4 	.word	0x20000bf4
 80045d4:	20000630 	.word	0x20000630
 80045d8:	20000bf8 	.word	0x20000bf8
 80045dc:	20000640 	.word	0x20000640
 80045e0:	20000bfc 	.word	0x20000bfc
 80045e4:	20000650 	.word	0x20000650
 80045e8:	20000c00 	.word	0x20000c00
 80045ec:	20000660 	.word	0x20000660
 80045f0:	20000c04 	.word	0x20000c04
 80045f4:	20000670 	.word	0x20000670
 80045f8:	20000c08 	.word	0x20000c08
 80045fc:	20000680 	.word	0x20000680
 8004600:	20000c0c 	.word	0x20000c0c
 8004604:	20000690 	.word	0x20000690
 8004608:	20000c10 	.word	0x20000c10
 800460c:	200006a0 	.word	0x200006a0
 8004610:	20000c14 	.word	0x20000c14
 8004614:	200006b0 	.word	0x200006b0
 8004618:	20000c18 	.word	0x20000c18
 800461c:	200006c0 	.word	0x200006c0
 8004620:	20000c20 	.word	0x20000c20
 8004624:	200006d0 	.word	0x200006d0
 8004628:	20000c28 	.word	0x20000c28
 800462c:	200006e0 	.word	0x200006e0
 8004630:	20000c2c 	.word	0x20000c2c
 8004634:	200006f0 	.word	0x200006f0
 8004638:	20000c30 	.word	0x20000c30
 800463c:	20000700 	.word	0x20000700
 8004640:	20000c34 	.word	0x20000c34
 8004644:	20000710 	.word	0x20000710
 8004648:	20000c38 	.word	0x20000c38
 800464c:	20000720 	.word	0x20000720
 8004650:	20000c3c 	.word	0x20000c3c
 8004654:	20000730 	.word	0x20000730
 8004658:	20000c40 	.word	0x20000c40
 800465c:	20000740 	.word	0x20000740
 8004660:	20000c44 	.word	0x20000c44
 8004664:	20000750 	.word	0x20000750
 8004668:	20000c48 	.word	0x20000c48
 800466c:	20000760 	.word	0x20000760
 8004670:	20000c4c 	.word	0x20000c4c
 8004674:	20000770 	.word	0x20000770
 8004678:	20000c50 	.word	0x20000c50
 800467c:	20000780 	.word	0x20000780
 8004680:	20000c54 	.word	0x20000c54
 8004684:	20000790 	.word	0x20000790
 8004688:	20000c58 	.word	0x20000c58
 800468c:	200007a0 	.word	0x200007a0
 8004690:	20000c5c 	.word	0x20000c5c
 8004694:	200007b0 	.word	0x200007b0
 8004698:	20000c60 	.word	0x20000c60
 800469c:	200007c0 	.word	0x200007c0
 80046a0:	20000c64 	.word	0x20000c64
 80046a4:	200007d0 	.word	0x200007d0
 80046a8:	20000c68 	.word	0x20000c68
 80046ac:	200007e0 	.word	0x200007e0
 80046b0:	20000c6c 	.word	0x20000c6c
 80046b4:	200007f0 	.word	0x200007f0
 80046b8:	20000c70 	.word	0x20000c70
 80046bc:	20000800 	.word	0x20000800
 80046c0:	20000c74 	.word	0x20000c74
 80046c4:	20000810 	.word	0x20000810
 80046c8:	20000c78 	.word	0x20000c78
 80046cc:	20000820 	.word	0x20000820
 80046d0:	20000c7c 	.word	0x20000c7c
 80046d4:	20000830 	.word	0x20000830
 80046d8:	20000c80 	.word	0x20000c80
 80046dc:	20000840 	.word	0x20000840
 80046e0:	4603      	mov	r3, r0
 80046e2:	4a27      	ldr	r2, [pc, #156]	; (8004780 <loadMenuTexts+0xb14>)
 80046e4:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80046e6:	4827      	ldr	r0, [pc, #156]	; (8004784 <loadMenuTexts+0xb18>)
 80046e8:	f7fc f858 	bl	800079c <copyText>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4a26      	ldr	r2, [pc, #152]	; (8004788 <loadMenuTexts+0xb1c>)
 80046f0:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80046f2:	4826      	ldr	r0, [pc, #152]	; (800478c <loadMenuTexts+0xb20>)
 80046f4:	f7fc f852 	bl	800079c <copyText>
 80046f8:	4603      	mov	r3, r0
 80046fa:	4a25      	ldr	r2, [pc, #148]	; (8004790 <loadMenuTexts+0xb24>)
 80046fc:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80046fe:	4825      	ldr	r0, [pc, #148]	; (8004794 <loadMenuTexts+0xb28>)
 8004700:	f7fc f84c 	bl	800079c <copyText>
 8004704:	4603      	mov	r3, r0
 8004706:	4a24      	ldr	r2, [pc, #144]	; (8004798 <loadMenuTexts+0xb2c>)
 8004708:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800470a:	4824      	ldr	r0, [pc, #144]	; (800479c <loadMenuTexts+0xb30>)
 800470c:	f7fc f846 	bl	800079c <copyText>
 8004710:	4603      	mov	r3, r0
 8004712:	4a23      	ldr	r2, [pc, #140]	; (80047a0 <loadMenuTexts+0xb34>)
 8004714:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8004716:	4823      	ldr	r0, [pc, #140]	; (80047a4 <loadMenuTexts+0xb38>)
 8004718:	f7fc f840 	bl	800079c <copyText>
 800471c:	4603      	mov	r3, r0
 800471e:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <loadMenuTexts+0xb3c>)
 8004720:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8004722:	4822      	ldr	r0, [pc, #136]	; (80047ac <loadMenuTexts+0xb40>)
 8004724:	f7fc f83a 	bl	800079c <copyText>
 8004728:	4603      	mov	r3, r0
 800472a:	4a21      	ldr	r2, [pc, #132]	; (80047b0 <loadMenuTexts+0xb44>)
 800472c:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800472e:	4821      	ldr	r0, [pc, #132]	; (80047b4 <loadMenuTexts+0xb48>)
 8004730:	f7fc f834 	bl	800079c <copyText>
 8004734:	4603      	mov	r3, r0
 8004736:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <loadMenuTexts+0xb4c>)
 8004738:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800473a:	4820      	ldr	r0, [pc, #128]	; (80047bc <loadMenuTexts+0xb50>)
 800473c:	f7fc f82e 	bl	800079c <copyText>
 8004740:	4603      	mov	r3, r0
 8004742:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <loadMenuTexts+0xb54>)
 8004744:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8004746:	481f      	ldr	r0, [pc, #124]	; (80047c4 <loadMenuTexts+0xb58>)
 8004748:	f7fc f828 	bl	800079c <copyText>
 800474c:	4603      	mov	r3, r0
 800474e:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <loadMenuTexts+0xb5c>)
 8004750:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8004752:	481e      	ldr	r0, [pc, #120]	; (80047cc <loadMenuTexts+0xb60>)
 8004754:	f7fc f822 	bl	800079c <copyText>
 8004758:	4603      	mov	r3, r0
 800475a:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <loadMenuTexts+0xb64>)
 800475c:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800475e:	481d      	ldr	r0, [pc, #116]	; (80047d4 <loadMenuTexts+0xb68>)
 8004760:	f7fc f81c 	bl	800079c <copyText>
 8004764:	4603      	mov	r3, r0
 8004766:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <loadMenuTexts+0xb6c>)
 8004768:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 800476a:	481c      	ldr	r0, [pc, #112]	; (80047dc <loadMenuTexts+0xb70>)
 800476c:	f7fc f816 	bl	800079c <copyText>
 8004770:	4603      	mov	r3, r0
 8004772:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <loadMenuTexts+0xb74>)
 8004774:	6013      	str	r3, [r2, #0]
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000c84 	.word	0x20000c84
 8004784:	20000850 	.word	0x20000850
 8004788:	20000c88 	.word	0x20000c88
 800478c:	20000860 	.word	0x20000860
 8004790:	20000c8c 	.word	0x20000c8c
 8004794:	20000870 	.word	0x20000870
 8004798:	20000c90 	.word	0x20000c90
 800479c:	20000880 	.word	0x20000880
 80047a0:	20000c94 	.word	0x20000c94
 80047a4:	20000890 	.word	0x20000890
 80047a8:	20000c98 	.word	0x20000c98
 80047ac:	200008a0 	.word	0x200008a0
 80047b0:	20000ca4 	.word	0x20000ca4
 80047b4:	200008b0 	.word	0x200008b0
 80047b8:	20000ca8 	.word	0x20000ca8
 80047bc:	200008c0 	.word	0x200008c0
 80047c0:	20000cac 	.word	0x20000cac
 80047c4:	200008d0 	.word	0x200008d0
 80047c8:	20000cb0 	.word	0x20000cb0
 80047cc:	200008e0 	.word	0x200008e0
 80047d0:	20000cb4 	.word	0x20000cb4
 80047d4:	200008f0 	.word	0x200008f0
 80047d8:	20000cb8 	.word	0x20000cb8
 80047dc:	20000900 	.word	0x20000900
 80047e0:	20000cbc 	.word	0x20000cbc

080047e4 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80047f4:	4a22      	ldr	r2, [pc, #136]	; (8004880 <lcdUpdate+0x9c>)
 80047f6:	2101      	movs	r1, #1
 80047f8:	2002      	movs	r0, #2
 80047fa:	f7fb ff88 	bl	800070e <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80047fe:	e03b      	b.n	8004878 <lcdUpdate+0x94>
	} else if(y==2) {
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d105      	bne.n	8004812 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004806:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <lcdUpdate+0x9c>)
 8004808:	2102      	movs	r1, #2
 800480a:	2002      	movs	r0, #2
 800480c:	f7fb ff7f 	bl	800070e <lcd_print>
}
 8004810:	e032      	b.n	8004878 <lcdUpdate+0x94>
	} else if(y==3) {
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d105      	bne.n	8004824 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004818:	4a19      	ldr	r2, [pc, #100]	; (8004880 <lcdUpdate+0x9c>)
 800481a:	2103      	movs	r1, #3
 800481c:	2002      	movs	r0, #2
 800481e:	f7fb ff76 	bl	800070e <lcd_print>
}
 8004822:	e029      	b.n	8004878 <lcdUpdate+0x94>
	} else if(y==4) {
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	2b04      	cmp	r3, #4
 8004828:	d105      	bne.n	8004836 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800482a:	4a15      	ldr	r2, [pc, #84]	; (8004880 <lcdUpdate+0x9c>)
 800482c:	2104      	movs	r1, #4
 800482e:	2002      	movs	r0, #2
 8004830:	f7fb ff6d 	bl	800070e <lcd_print>
}
 8004834:	e020      	b.n	8004878 <lcdUpdate+0x94>
	} else if(y==5) {
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	2b05      	cmp	r3, #5
 800483a:	d105      	bne.n	8004848 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 800483c:	4a10      	ldr	r2, [pc, #64]	; (8004880 <lcdUpdate+0x9c>)
 800483e:	2105      	movs	r1, #5
 8004840:	2002      	movs	r0, #2
 8004842:	f7fb ff64 	bl	800070e <lcd_print>
}
 8004846:	e017      	b.n	8004878 <lcdUpdate+0x94>
	} else if(y==6) {
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	2b06      	cmp	r3, #6
 800484c:	d105      	bne.n	800485a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800484e:	4a0c      	ldr	r2, [pc, #48]	; (8004880 <lcdUpdate+0x9c>)
 8004850:	2106      	movs	r1, #6
 8004852:	2002      	movs	r0, #2
 8004854:	f7fb ff5b 	bl	800070e <lcd_print>
}
 8004858:	e00e      	b.n	8004878 <lcdUpdate+0x94>
	} else if (y==7) {
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	2b07      	cmp	r3, #7
 800485e:	d10b      	bne.n	8004878 <lcdUpdate+0x94>
		lcd_clear();
 8004860:	f7fb ff6a 	bl	8000738 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004864:	4a07      	ldr	r2, [pc, #28]	; (8004884 <lcdUpdate+0xa0>)
 8004866:	2101      	movs	r1, #1
 8004868:	2001      	movs	r0, #1
 800486a:	f7fb ff50 	bl	800070e <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800486e:	4a06      	ldr	r2, [pc, #24]	; (8004888 <lcdUpdate+0xa4>)
 8004870:	2101      	movs	r1, #1
 8004872:	2002      	movs	r0, #2
 8004874:	f7fb ff4b 	bl	800070e <lcd_print>
}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	0800ca00 	.word	0x0800ca00
 8004884:	0800d2f0 	.word	0x0800d2f0
 8004888:	0800d304 	.word	0x0800d304

0800488c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d11d      	bne.n	80048d8 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 800489c:	4b62      	ldr	r3, [pc, #392]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80048a4:	4a61      	ldr	r2, [pc, #388]	; (8004a2c <hataKoduLcdGoster+0x1a0>)
 80048a6:	2101      	movs	r1, #1
 80048a8:	2001      	movs	r0, #1
 80048aa:	f7fb ff30 	bl	800070e <lcd_print>
 80048ae:	e008      	b.n	80048c2 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80048b0:	4b5d      	ldr	r3, [pc, #372]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d104      	bne.n	80048c2 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80048b8:	4a5d      	ldr	r2, [pc, #372]	; (8004a30 <hataKoduLcdGoster+0x1a4>)
 80048ba:	2101      	movs	r1, #1
 80048bc:	2001      	movs	r0, #1
 80048be:	f7fb ff26 	bl	800070e <lcd_print>
		}
		lcd_print(2, 1, "1");
 80048c2:	4a5c      	ldr	r2, [pc, #368]	; (8004a34 <hataKoduLcdGoster+0x1a8>)
 80048c4:	2101      	movs	r1, #1
 80048c6:	2002      	movs	r0, #2
 80048c8:	f7fb ff21 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 80048cc:	4a5a      	ldr	r2, [pc, #360]	; (8004a38 <hataKoduLcdGoster+0x1ac>)
 80048ce:	2107      	movs	r1, #7
 80048d0:	2002      	movs	r0, #2
 80048d2:	f7fb ff1c 	bl	800070e <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80048d6:	e0a3      	b.n	8004a20 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d11d      	bne.n	800491a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80048de:	4b52      	ldr	r3, [pc, #328]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d105      	bne.n	80048f2 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 80048e6:	4a51      	ldr	r2, [pc, #324]	; (8004a2c <hataKoduLcdGoster+0x1a0>)
 80048e8:	2101      	movs	r1, #1
 80048ea:	2001      	movs	r0, #1
 80048ec:	f7fb ff0f 	bl	800070e <lcd_print>
 80048f0:	e008      	b.n	8004904 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80048f2:	4b4d      	ldr	r3, [pc, #308]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d104      	bne.n	8004904 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80048fa:	4a4d      	ldr	r2, [pc, #308]	; (8004a30 <hataKoduLcdGoster+0x1a4>)
 80048fc:	2101      	movs	r1, #1
 80048fe:	2001      	movs	r0, #1
 8004900:	f7fb ff05 	bl	800070e <lcd_print>
		lcd_print(2, 2, "2");
 8004904:	4a4d      	ldr	r2, [pc, #308]	; (8004a3c <hataKoduLcdGoster+0x1b0>)
 8004906:	2102      	movs	r1, #2
 8004908:	2002      	movs	r0, #2
 800490a:	f7fb ff00 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 800490e:	4a4a      	ldr	r2, [pc, #296]	; (8004a38 <hataKoduLcdGoster+0x1ac>)
 8004910:	2107      	movs	r1, #7
 8004912:	2002      	movs	r0, #2
 8004914:	f7fb fefb 	bl	800070e <lcd_print>
}
 8004918:	e082      	b.n	8004a20 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d11d      	bne.n	800495c <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8004920:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8004928:	4a40      	ldr	r2, [pc, #256]	; (8004a2c <hataKoduLcdGoster+0x1a0>)
 800492a:	2101      	movs	r1, #1
 800492c:	2001      	movs	r0, #1
 800492e:	f7fb feee 	bl	800070e <lcd_print>
 8004932:	e008      	b.n	8004946 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8004934:	4b3c      	ldr	r3, [pc, #240]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d104      	bne.n	8004946 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 800493c:	4a3c      	ldr	r2, [pc, #240]	; (8004a30 <hataKoduLcdGoster+0x1a4>)
 800493e:	2101      	movs	r1, #1
 8004940:	2001      	movs	r0, #1
 8004942:	f7fb fee4 	bl	800070e <lcd_print>
		lcd_print(2, 3, "3");
 8004946:	4a3e      	ldr	r2, [pc, #248]	; (8004a40 <hataKoduLcdGoster+0x1b4>)
 8004948:	2103      	movs	r1, #3
 800494a:	2002      	movs	r0, #2
 800494c:	f7fb fedf 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 8004950:	4a39      	ldr	r2, [pc, #228]	; (8004a38 <hataKoduLcdGoster+0x1ac>)
 8004952:	2107      	movs	r1, #7
 8004954:	2002      	movs	r0, #2
 8004956:	f7fb feda 	bl	800070e <lcd_print>
}
 800495a:	e061      	b.n	8004a20 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	2b04      	cmp	r3, #4
 8004960:	d11d      	bne.n	800499e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8004962:	4b31      	ldr	r3, [pc, #196]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 800496a:	4a30      	ldr	r2, [pc, #192]	; (8004a2c <hataKoduLcdGoster+0x1a0>)
 800496c:	2101      	movs	r1, #1
 800496e:	2001      	movs	r0, #1
 8004970:	f7fb fecd 	bl	800070e <lcd_print>
 8004974:	e008      	b.n	8004988 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004976:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d104      	bne.n	8004988 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 800497e:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <hataKoduLcdGoster+0x1a4>)
 8004980:	2101      	movs	r1, #1
 8004982:	2001      	movs	r0, #1
 8004984:	f7fb fec3 	bl	800070e <lcd_print>
		lcd_print(2, 4, "4");
 8004988:	4a2e      	ldr	r2, [pc, #184]	; (8004a44 <hataKoduLcdGoster+0x1b8>)
 800498a:	2104      	movs	r1, #4
 800498c:	2002      	movs	r0, #2
 800498e:	f7fb febe 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 8004992:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <hataKoduLcdGoster+0x1ac>)
 8004994:	2107      	movs	r1, #7
 8004996:	2002      	movs	r0, #2
 8004998:	f7fb feb9 	bl	800070e <lcd_print>
}
 800499c:	e040      	b.n	8004a20 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	2b05      	cmp	r3, #5
 80049a2:	d11d      	bne.n	80049e0 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80049a4:	4b20      	ldr	r3, [pc, #128]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80049ac:	4a1f      	ldr	r2, [pc, #124]	; (8004a2c <hataKoduLcdGoster+0x1a0>)
 80049ae:	2101      	movs	r1, #1
 80049b0:	2001      	movs	r0, #1
 80049b2:	f7fb feac 	bl	800070e <lcd_print>
 80049b6:	e008      	b.n	80049ca <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80049b8:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d104      	bne.n	80049ca <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80049c0:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <hataKoduLcdGoster+0x1a4>)
 80049c2:	2101      	movs	r1, #1
 80049c4:	2001      	movs	r0, #1
 80049c6:	f7fb fea2 	bl	800070e <lcd_print>
		lcd_print(2, 5, "5");
 80049ca:	4a1f      	ldr	r2, [pc, #124]	; (8004a48 <hataKoduLcdGoster+0x1bc>)
 80049cc:	2105      	movs	r1, #5
 80049ce:	2002      	movs	r0, #2
 80049d0:	f7fb fe9d 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 80049d4:	4a18      	ldr	r2, [pc, #96]	; (8004a38 <hataKoduLcdGoster+0x1ac>)
 80049d6:	2107      	movs	r1, #7
 80049d8:	2002      	movs	r0, #2
 80049da:	f7fb fe98 	bl	800070e <lcd_print>
}
 80049de:	e01f      	b.n	8004a20 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d11c      	bne.n	8004a20 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d105      	bne.n	80049fa <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80049ee:	4a0f      	ldr	r2, [pc, #60]	; (8004a2c <hataKoduLcdGoster+0x1a0>)
 80049f0:	2101      	movs	r1, #1
 80049f2:	2001      	movs	r0, #1
 80049f4:	f7fb fe8b 	bl	800070e <lcd_print>
 80049f8:	e008      	b.n	8004a0c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <hataKoduLcdGoster+0x19c>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d104      	bne.n	8004a0c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004a02:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <hataKoduLcdGoster+0x1a4>)
 8004a04:	2101      	movs	r1, #1
 8004a06:	2001      	movs	r0, #1
 8004a08:	f7fb fe81 	bl	800070e <lcd_print>
		lcd_print(2, 6, "6");
 8004a0c:	4a0f      	ldr	r2, [pc, #60]	; (8004a4c <hataKoduLcdGoster+0x1c0>)
 8004a0e:	2106      	movs	r1, #6
 8004a10:	2002      	movs	r0, #2
 8004a12:	f7fb fe7c 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 8004a16:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <hataKoduLcdGoster+0x1ac>)
 8004a18:	2107      	movs	r1, #7
 8004a1a:	2002      	movs	r0, #2
 8004a1c:	f7fb fe77 	bl	800070e <lcd_print>
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000b4d 	.word	0x20000b4d
 8004a2c:	0800d318 	.word	0x0800d318
 8004a30:	0800d32c 	.word	0x0800d32c
 8004a34:	0800d340 	.word	0x0800d340
 8004a38:	0800d344 	.word	0x0800d344
 8004a3c:	0800d350 	.word	0x0800d350
 8004a40:	0800d354 	.word	0x0800d354
 8004a44:	0800d358 	.word	0x0800d358
 8004a48:	0800d35c 	.word	0x0800d35c
 8004a4c:	0800d360 	.word	0x0800d360

08004a50 <convertAndSendData>:

void convertAndSendData() {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8004a56:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <convertAndSendData+0x58>)
 8004a58:	2101      	movs	r1, #1
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	f7fb fe57 	bl	800070e <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8004a60:	4a12      	ldr	r2, [pc, #72]	; (8004aac <convertAndSendData+0x5c>)
 8004a62:	2101      	movs	r1, #1
 8004a64:	2002      	movs	r0, #2
 8004a66:	f7fb fe52 	bl	800070e <lcd_print>
	for(int i=0; i<2; i++) {
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	e00a      	b.n	8004a86 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8004a70:	f002 fb3a 	bl	80070e8 <mergeData>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	490d      	ldr	r1, [pc, #52]	; (8004ab0 <convertAndSendData+0x60>)
 8004a7a:	480e      	ldr	r0, [pc, #56]	; (8004ab4 <convertAndSendData+0x64>)
 8004a7c:	f7fb fc9e 	bl	80003bc <sendMachineData>
	for(int i=0; i<2; i++) {
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3301      	adds	r3, #1
 8004a84:	607b      	str	r3, [r7, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	ddf1      	ble.n	8004a70 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8004a8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a90:	f003 fae8 	bl	8008064 <HAL_Delay>
	lcd_clear();
 8004a94:	f7fb fe50 	bl	8000738 <lcd_clear>
	HAL_Delay(500);
 8004a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a9c:	f003 fae2 	bl	8008064 <HAL_Delay>
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	0800d364 	.word	0x0800d364
 8004aac:	0800d370 	.word	0x0800d370
 8004ab0:	20000940 	.word	0x20000940
 8004ab4:	20000d84 	.word	0x20000d84

08004ab8 <eepromKontrol>:

void eepromKontrol(int type) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af04      	add	r7, sp, #16
 8004abe:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8004ac0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004ac4:	9302      	str	r3, [sp, #8]
 8004ac6:	233f      	movs	r3, #63	; 0x3f
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	4b9c      	ldr	r3, [pc, #624]	; (8004d3c <eepromKontrol+0x284>)
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	233f      	movs	r3, #63	; 0x3f
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	21a0      	movs	r1, #160	; 0xa0
 8004ad4:	489a      	ldr	r0, [pc, #616]	; (8004d40 <eepromKontrol+0x288>)
 8004ad6:	f004 fc49 	bl	800936c <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8004ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ade:	f003 fac1 	bl	8008064 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004ae2:	4b96      	ldr	r3, [pc, #600]	; (8004d3c <eepromKontrol+0x284>)
 8004ae4:	78da      	ldrb	r2, [r3, #3]
 8004ae6:	4b97      	ldr	r3, [pc, #604]	; (8004d44 <eepromKontrol+0x28c>)
 8004ae8:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8004aea:	4b94      	ldr	r3, [pc, #592]	; (8004d3c <eepromKontrol+0x284>)
 8004aec:	785a      	ldrb	r2, [r3, #1]
 8004aee:	4b96      	ldr	r3, [pc, #600]	; (8004d48 <eepromKontrol+0x290>)
 8004af0:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004af2:	4b92      	ldr	r3, [pc, #584]	; (8004d3c <eepromKontrol+0x284>)
 8004af4:	789a      	ldrb	r2, [r3, #2]
 8004af6:	4b95      	ldr	r3, [pc, #596]	; (8004d4c <eepromKontrol+0x294>)
 8004af8:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8004afa:	4b90      	ldr	r3, [pc, #576]	; (8004d3c <eepromKontrol+0x284>)
 8004afc:	791a      	ldrb	r2, [r3, #4]
 8004afe:	4b94      	ldr	r3, [pc, #592]	; (8004d50 <eepromKontrol+0x298>)
 8004b00:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004b02:	4b8e      	ldr	r3, [pc, #568]	; (8004d3c <eepromKontrol+0x284>)
 8004b04:	795a      	ldrb	r2, [r3, #5]
 8004b06:	4b93      	ldr	r3, [pc, #588]	; (8004d54 <eepromKontrol+0x29c>)
 8004b08:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8004b0a:	4b8c      	ldr	r3, [pc, #560]	; (8004d3c <eepromKontrol+0x284>)
 8004b0c:	799a      	ldrb	r2, [r3, #6]
 8004b0e:	4b92      	ldr	r3, [pc, #584]	; (8004d58 <eepromKontrol+0x2a0>)
 8004b10:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004b12:	4b8a      	ldr	r3, [pc, #552]	; (8004d3c <eepromKontrol+0x284>)
 8004b14:	79da      	ldrb	r2, [r3, #7]
 8004b16:	4b91      	ldr	r3, [pc, #580]	; (8004d5c <eepromKontrol+0x2a4>)
 8004b18:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8004b1a:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <eepromKontrol+0x284>)
 8004b1c:	7a1a      	ldrb	r2, [r3, #8]
 8004b1e:	4b90      	ldr	r3, [pc, #576]	; (8004d60 <eepromKontrol+0x2a8>)
 8004b20:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004b22:	4b86      	ldr	r3, [pc, #536]	; (8004d3c <eepromKontrol+0x284>)
 8004b24:	7a5a      	ldrb	r2, [r3, #9]
 8004b26:	4b8f      	ldr	r3, [pc, #572]	; (8004d64 <eepromKontrol+0x2ac>)
 8004b28:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8004b2a:	4b84      	ldr	r3, [pc, #528]	; (8004d3c <eepromKontrol+0x284>)
 8004b2c:	7a9a      	ldrb	r2, [r3, #10]
 8004b2e:	4b8e      	ldr	r3, [pc, #568]	; (8004d68 <eepromKontrol+0x2b0>)
 8004b30:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004b32:	4b82      	ldr	r3, [pc, #520]	; (8004d3c <eepromKontrol+0x284>)
 8004b34:	7ada      	ldrb	r2, [r3, #11]
 8004b36:	4b8d      	ldr	r3, [pc, #564]	; (8004d6c <eepromKontrol+0x2b4>)
 8004b38:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8004b3a:	4b80      	ldr	r3, [pc, #512]	; (8004d3c <eepromKontrol+0x284>)
 8004b3c:	7b1a      	ldrb	r2, [r3, #12]
 8004b3e:	4b8c      	ldr	r3, [pc, #560]	; (8004d70 <eepromKontrol+0x2b8>)
 8004b40:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004b42:	4b7e      	ldr	r3, [pc, #504]	; (8004d3c <eepromKontrol+0x284>)
 8004b44:	7b5a      	ldrb	r2, [r3, #13]
 8004b46:	4b8b      	ldr	r3, [pc, #556]	; (8004d74 <eepromKontrol+0x2bc>)
 8004b48:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004b4a:	4b7c      	ldr	r3, [pc, #496]	; (8004d3c <eepromKontrol+0x284>)
 8004b4c:	7b9a      	ldrb	r2, [r3, #14]
 8004b4e:	4b8a      	ldr	r3, [pc, #552]	; (8004d78 <eepromKontrol+0x2c0>)
 8004b50:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004b52:	4b7a      	ldr	r3, [pc, #488]	; (8004d3c <eepromKontrol+0x284>)
 8004b54:	7bda      	ldrb	r2, [r3, #15]
 8004b56:	4b89      	ldr	r3, [pc, #548]	; (8004d7c <eepromKontrol+0x2c4>)
 8004b58:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004b5a:	4b78      	ldr	r3, [pc, #480]	; (8004d3c <eepromKontrol+0x284>)
 8004b5c:	7c1a      	ldrb	r2, [r3, #16]
 8004b5e:	4b88      	ldr	r3, [pc, #544]	; (8004d80 <eepromKontrol+0x2c8>)
 8004b60:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004b62:	4b76      	ldr	r3, [pc, #472]	; (8004d3c <eepromKontrol+0x284>)
 8004b64:	7c5a      	ldrb	r2, [r3, #17]
 8004b66:	4b87      	ldr	r3, [pc, #540]	; (8004d84 <eepromKontrol+0x2cc>)
 8004b68:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004b6a:	4b74      	ldr	r3, [pc, #464]	; (8004d3c <eepromKontrol+0x284>)
 8004b6c:	7c9a      	ldrb	r2, [r3, #18]
 8004b6e:	4b86      	ldr	r3, [pc, #536]	; (8004d88 <eepromKontrol+0x2d0>)
 8004b70:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8004b72:	4b72      	ldr	r3, [pc, #456]	; (8004d3c <eepromKontrol+0x284>)
 8004b74:	7cda      	ldrb	r2, [r3, #19]
 8004b76:	4b85      	ldr	r3, [pc, #532]	; (8004d8c <eepromKontrol+0x2d4>)
 8004b78:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004b7a:	4b70      	ldr	r3, [pc, #448]	; (8004d3c <eepromKontrol+0x284>)
 8004b7c:	7d1a      	ldrb	r2, [r3, #20]
 8004b7e:	4b84      	ldr	r3, [pc, #528]	; (8004d90 <eepromKontrol+0x2d8>)
 8004b80:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8004b82:	4b6e      	ldr	r3, [pc, #440]	; (8004d3c <eepromKontrol+0x284>)
 8004b84:	7d5a      	ldrb	r2, [r3, #21]
 8004b86:	4b83      	ldr	r3, [pc, #524]	; (8004d94 <eepromKontrol+0x2dc>)
 8004b88:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004b8a:	4b6c      	ldr	r3, [pc, #432]	; (8004d3c <eepromKontrol+0x284>)
 8004b8c:	7d9a      	ldrb	r2, [r3, #22]
 8004b8e:	4b82      	ldr	r3, [pc, #520]	; (8004d98 <eepromKontrol+0x2e0>)
 8004b90:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8004b92:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <eepromKontrol+0x284>)
 8004b94:	7dda      	ldrb	r2, [r3, #23]
 8004b96:	4b81      	ldr	r3, [pc, #516]	; (8004d9c <eepromKontrol+0x2e4>)
 8004b98:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004b9a:	4b68      	ldr	r3, [pc, #416]	; (8004d3c <eepromKontrol+0x284>)
 8004b9c:	7e1a      	ldrb	r2, [r3, #24]
 8004b9e:	4b80      	ldr	r3, [pc, #512]	; (8004da0 <eepromKontrol+0x2e8>)
 8004ba0:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8004ba2:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <eepromKontrol+0x284>)
 8004ba4:	7e5a      	ldrb	r2, [r3, #25]
 8004ba6:	4b7f      	ldr	r3, [pc, #508]	; (8004da4 <eepromKontrol+0x2ec>)
 8004ba8:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8004baa:	4b64      	ldr	r3, [pc, #400]	; (8004d3c <eepromKontrol+0x284>)
 8004bac:	7e9a      	ldrb	r2, [r3, #26]
 8004bae:	4b7e      	ldr	r3, [pc, #504]	; (8004da8 <eepromKontrol+0x2f0>)
 8004bb0:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8004bb2:	4b62      	ldr	r3, [pc, #392]	; (8004d3c <eepromKontrol+0x284>)
 8004bb4:	7eda      	ldrb	r2, [r3, #27]
 8004bb6:	4b7d      	ldr	r3, [pc, #500]	; (8004dac <eepromKontrol+0x2f4>)
 8004bb8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8004bba:	4b60      	ldr	r3, [pc, #384]	; (8004d3c <eepromKontrol+0x284>)
 8004bbc:	7f1a      	ldrb	r2, [r3, #28]
 8004bbe:	4b7c      	ldr	r3, [pc, #496]	; (8004db0 <eepromKontrol+0x2f8>)
 8004bc0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004bc2:	4b5e      	ldr	r3, [pc, #376]	; (8004d3c <eepromKontrol+0x284>)
 8004bc4:	7f5a      	ldrb	r2, [r3, #29]
 8004bc6:	4b7b      	ldr	r3, [pc, #492]	; (8004db4 <eepromKontrol+0x2fc>)
 8004bc8:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004bca:	4b5c      	ldr	r3, [pc, #368]	; (8004d3c <eepromKontrol+0x284>)
 8004bcc:	7f9a      	ldrb	r2, [r3, #30]
 8004bce:	4b7a      	ldr	r3, [pc, #488]	; (8004db8 <eepromKontrol+0x300>)
 8004bd0:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004bd2:	4b5a      	ldr	r3, [pc, #360]	; (8004d3c <eepromKontrol+0x284>)
 8004bd4:	7fda      	ldrb	r2, [r3, #31]
 8004bd6:	4b79      	ldr	r3, [pc, #484]	; (8004dbc <eepromKontrol+0x304>)
 8004bd8:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004bda:	4b58      	ldr	r3, [pc, #352]	; (8004d3c <eepromKontrol+0x284>)
 8004bdc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004be0:	4b77      	ldr	r3, [pc, #476]	; (8004dc0 <eepromKontrol+0x308>)
 8004be2:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004be4:	4b55      	ldr	r3, [pc, #340]	; (8004d3c <eepromKontrol+0x284>)
 8004be6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004bea:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <eepromKontrol+0x30c>)
 8004bec:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8004bee:	4b53      	ldr	r3, [pc, #332]	; (8004d3c <eepromKontrol+0x284>)
 8004bf0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004bf4:	4b74      	ldr	r3, [pc, #464]	; (8004dc8 <eepromKontrol+0x310>)
 8004bf6:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004bf8:	4b50      	ldr	r3, [pc, #320]	; (8004d3c <eepromKontrol+0x284>)
 8004bfa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004bfe:	4b73      	ldr	r3, [pc, #460]	; (8004dcc <eepromKontrol+0x314>)
 8004c00:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004c02:	4b4e      	ldr	r3, [pc, #312]	; (8004d3c <eepromKontrol+0x284>)
 8004c04:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004c08:	4b71      	ldr	r3, [pc, #452]	; (8004dd0 <eepromKontrol+0x318>)
 8004c0a:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004c0c:	4b4b      	ldr	r3, [pc, #300]	; (8004d3c <eepromKontrol+0x284>)
 8004c0e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004c12:	4b70      	ldr	r3, [pc, #448]	; (8004dd4 <eepromKontrol+0x31c>)
 8004c14:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8004c16:	4b49      	ldr	r3, [pc, #292]	; (8004d3c <eepromKontrol+0x284>)
 8004c18:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004c1c:	4b6e      	ldr	r3, [pc, #440]	; (8004dd8 <eepromKontrol+0x320>)
 8004c1e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8004c20:	4b46      	ldr	r3, [pc, #280]	; (8004d3c <eepromKontrol+0x284>)
 8004c22:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004c26:	4b6d      	ldr	r3, [pc, #436]	; (8004ddc <eepromKontrol+0x324>)
 8004c28:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8004c2a:	4b44      	ldr	r3, [pc, #272]	; (8004d3c <eepromKontrol+0x284>)
 8004c2c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004c30:	4b6b      	ldr	r3, [pc, #428]	; (8004de0 <eepromKontrol+0x328>)
 8004c32:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8004c34:	4b41      	ldr	r3, [pc, #260]	; (8004d3c <eepromKontrol+0x284>)
 8004c36:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004c3a:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <eepromKontrol+0x32c>)
 8004c3c:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <eepromKontrol+0x284>)
 8004c40:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004c44:	4b68      	ldr	r3, [pc, #416]	; (8004de8 <eepromKontrol+0x330>)
 8004c46:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8004c48:	4b3c      	ldr	r3, [pc, #240]	; (8004d3c <eepromKontrol+0x284>)
 8004c4a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004c4e:	4b67      	ldr	r3, [pc, #412]	; (8004dec <eepromKontrol+0x334>)
 8004c50:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8004c52:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <eepromKontrol+0x284>)
 8004c54:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004c58:	4b65      	ldr	r3, [pc, #404]	; (8004df0 <eepromKontrol+0x338>)
 8004c5a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8004c5c:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <eepromKontrol+0x284>)
 8004c5e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004c62:	4b64      	ldr	r3, [pc, #400]	; (8004df4 <eepromKontrol+0x33c>)
 8004c64:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8004c66:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <eepromKontrol+0x284>)
 8004c68:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004c6c:	4b62      	ldr	r3, [pc, #392]	; (8004df8 <eepromKontrol+0x340>)
 8004c6e:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8004c70:	4b32      	ldr	r3, [pc, #200]	; (8004d3c <eepromKontrol+0x284>)
 8004c72:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004c76:	4b61      	ldr	r3, [pc, #388]	; (8004dfc <eepromKontrol+0x344>)
 8004c78:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8004c7a:	4b52      	ldr	r3, [pc, #328]	; (8004dc4 <eepromKontrol+0x30c>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fff4 	bl	8003c6c <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004c84:	4b4e      	ldr	r3, [pc, #312]	; (8004dc0 <eepromKontrol+0x308>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b09      	cmp	r3, #9
 8004c8a:	d902      	bls.n	8004c92 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8004c8c:	4b4c      	ldr	r3, [pc, #304]	; (8004dc0 <eepromKontrol+0x308>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004c92:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <eepromKontrol+0x304>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b09      	cmp	r3, #9
 8004c98:	d902      	bls.n	8004ca0 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8004c9a:	4b48      	ldr	r3, [pc, #288]	; (8004dbc <eepromKontrol+0x304>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004ca0:	4b45      	ldr	r3, [pc, #276]	; (8004db8 <eepromKontrol+0x300>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b09      	cmp	r3, #9
 8004ca6:	d902      	bls.n	8004cae <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8004ca8:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <eepromKontrol+0x300>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004cae:	4b41      	ldr	r3, [pc, #260]	; (8004db4 <eepromKontrol+0x2fc>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b09      	cmp	r3, #9
 8004cb4:	d902      	bls.n	8004cbc <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <eepromKontrol+0x2fc>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004cbc:	4b3c      	ldr	r3, [pc, #240]	; (8004db0 <eepromKontrol+0x2f8>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b09      	cmp	r3, #9
 8004cc2:	d902      	bls.n	8004cca <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8004cc4:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <eepromKontrol+0x2f8>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004cca:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <eepromKontrol+0x290>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d902      	bls.n	8004cd8 <eepromKontrol+0x220>
	    calismaSekli=0;
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <eepromKontrol+0x290>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004cd8:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <eepromKontrol+0x294>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d902      	bls.n	8004ce6 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8004ce0:	4b1a      	ldr	r3, [pc, #104]	; (8004d4c <eepromKontrol+0x294>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <eepromKontrol+0x298>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d902      	bls.n	8004cf4 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8004cee:	4b18      	ldr	r3, [pc, #96]	; (8004d50 <eepromKontrol+0x298>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004cf4:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <eepromKontrol+0x29c>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d902      	bls.n	8004d02 <eepromKontrol+0x24a>
	    altLimit=1;
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <eepromKontrol+0x29c>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <eepromKontrol+0x2a0>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d902      	bls.n	8004d10 <eepromKontrol+0x258>
	    basincSalteri=1;
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <eepromKontrol+0x2a0>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <eepromKontrol+0x2a4>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d902      	bls.n	8004d1e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <eepromKontrol+0x2a4>)
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004d1e:	4b2d      	ldr	r3, [pc, #180]	; (8004dd4 <eepromKontrol+0x31c>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d902      	bls.n	8004d2c <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8004d26:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <eepromKontrol+0x31c>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <eepromKontrol+0x2a8>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d965      	bls.n	8004e00 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <eepromKontrol+0x2a8>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e061      	b.n	8004e00 <eepromKontrol+0x348>
 8004d3c:	20000ac0 	.word	0x20000ac0
 8004d40:	20000ce8 	.word	0x20000ce8
 8004d44:	20000aff 	.word	0x20000aff
 8004d48:	20000b2d 	.word	0x20000b2d
 8004d4c:	20000b30 	.word	0x20000b30
 8004d50:	20000b31 	.word	0x20000b31
 8004d54:	20000b32 	.word	0x20000b32
 8004d58:	20000b33 	.word	0x20000b33
 8004d5c:	20000b34 	.word	0x20000b34
 8004d60:	20000b35 	.word	0x20000b35
 8004d64:	20000b45 	.word	0x20000b45
 8004d68:	20000b36 	.word	0x20000b36
 8004d6c:	20000b46 	.word	0x20000b46
 8004d70:	20000b37 	.word	0x20000b37
 8004d74:	20000b47 	.word	0x20000b47
 8004d78:	20000b3a 	.word	0x20000b3a
 8004d7c:	20000b3b 	.word	0x20000b3b
 8004d80:	20000b3c 	.word	0x20000b3c
 8004d84:	20000b3d 	.word	0x20000b3d
 8004d88:	20000b3e 	.word	0x20000b3e
 8004d8c:	20000b3f 	.word	0x20000b3f
 8004d90:	20000b40 	.word	0x20000b40
 8004d94:	20000b41 	.word	0x20000b41
 8004d98:	20000b42 	.word	0x20000b42
 8004d9c:	20000b43 	.word	0x20000b43
 8004da0:	20000b44 	.word	0x20000b44
 8004da4:	20000b48 	.word	0x20000b48
 8004da8:	20000b4a 	.word	0x20000b4a
 8004dac:	20000b28 	.word	0x20000b28
 8004db0:	20000b29 	.word	0x20000b29
 8004db4:	20000b2a 	.word	0x20000b2a
 8004db8:	20000947 	.word	0x20000947
 8004dbc:	20000948 	.word	0x20000948
 8004dc0:	20000b2b 	.word	0x20000b2b
 8004dc4:	20000b4d 	.word	0x20000b4d
 8004dc8:	20000b4b 	.word	0x20000b4b
 8004dcc:	20000b39 	.word	0x20000b39
 8004dd0:	20000b4c 	.word	0x20000b4c
 8004dd4:	20000b38 	.word	0x20000b38
 8004dd8:	20000b4e 	.word	0x20000b4e
 8004ddc:	20000b4f 	.word	0x20000b4f
 8004de0:	20000b50 	.word	0x20000b50
 8004de4:	20000b51 	.word	0x20000b51
 8004de8:	20000b52 	.word	0x20000b52
 8004dec:	20000b53 	.word	0x20000b53
 8004df0:	20000b54 	.word	0x20000b54
 8004df4:	20000b55 	.word	0x20000b55
 8004df8:	20000b56 	.word	0x20000b56
 8004dfc:	20000b57 	.word	0x20000b57
	}

	if(kapi1AcSure>5) {
 8004e00:	4b55      	ldr	r3, [pc, #340]	; (8004f58 <eepromKontrol+0x4a0>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b05      	cmp	r3, #5
 8004e06:	d902      	bls.n	8004e0e <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8004e08:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <eepromKontrol+0x4a0>)
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004e0e:	4b53      	ldr	r3, [pc, #332]	; (8004f5c <eepromKontrol+0x4a4>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d902      	bls.n	8004e1c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8004e16:	4b51      	ldr	r3, [pc, #324]	; (8004f5c <eepromKontrol+0x4a4>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004e1c:	4b50      	ldr	r3, [pc, #320]	; (8004f60 <eepromKontrol+0x4a8>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b05      	cmp	r3, #5
 8004e22:	d902      	bls.n	8004e2a <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8004e24:	4b4e      	ldr	r3, [pc, #312]	; (8004f60 <eepromKontrol+0x4a8>)
 8004e26:	2205      	movs	r2, #5
 8004e28:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004e2a:	4b4e      	ldr	r3, [pc, #312]	; (8004f64 <eepromKontrol+0x4ac>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d902      	bls.n	8004e38 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8004e32:	4b4c      	ldr	r3, [pc, #304]	; (8004f64 <eepromKontrol+0x4ac>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004e38:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <eepromKontrol+0x4b0>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d902      	bls.n	8004e46 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8004e40:	4b49      	ldr	r3, [pc, #292]	; (8004f68 <eepromKontrol+0x4b0>)
 8004e42:	2202      	movs	r2, #2
 8004e44:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004e46:	4b49      	ldr	r3, [pc, #292]	; (8004f6c <eepromKontrol+0x4b4>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	d902      	bls.n	8004e54 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8004e4e:	4b47      	ldr	r3, [pc, #284]	; (8004f6c <eepromKontrol+0x4b4>)
 8004e50:	2205      	movs	r2, #5
 8004e52:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004e54:	4b46      	ldr	r3, [pc, #280]	; (8004f70 <eepromKontrol+0x4b8>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d902      	bls.n	8004e62 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8004e5c:	4b44      	ldr	r3, [pc, #272]	; (8004f70 <eepromKontrol+0x4b8>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004e62:	4b44      	ldr	r3, [pc, #272]	; (8004f74 <eepromKontrol+0x4bc>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d902      	bls.n	8004e70 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8004e6a:	4b42      	ldr	r3, [pc, #264]	; (8004f74 <eepromKontrol+0x4bc>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004e70:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <eepromKontrol+0x4c0>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d902      	bls.n	8004e7e <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8004e78:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <eepromKontrol+0x4c0>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004e7e:	4b3f      	ldr	r3, [pc, #252]	; (8004f7c <eepromKontrol+0x4c4>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d902      	bls.n	8004e8c <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8004e86:	4b3d      	ldr	r3, [pc, #244]	; (8004f7c <eepromKontrol+0x4c4>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004e8c:	4b3c      	ldr	r3, [pc, #240]	; (8004f80 <eepromKontrol+0x4c8>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d902      	bls.n	8004e9a <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8004e94:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <eepromKontrol+0x4c8>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004e9a:	4b3a      	ldr	r3, [pc, #232]	; (8004f84 <eepromKontrol+0x4cc>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d902      	bls.n	8004ea8 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8004ea2:	4b38      	ldr	r3, [pc, #224]	; (8004f84 <eepromKontrol+0x4cc>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004ea8:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <eepromKontrol+0x4d0>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b05      	cmp	r3, #5
 8004eae:	d902      	bls.n	8004eb6 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8004eb0:	4b35      	ldr	r3, [pc, #212]	; (8004f88 <eepromKontrol+0x4d0>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004eb6:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <eepromKontrol+0x4d4>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d902      	bls.n	8004ec4 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8004ebe:	4b33      	ldr	r3, [pc, #204]	; (8004f8c <eepromKontrol+0x4d4>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004ec4:	4b32      	ldr	r3, [pc, #200]	; (8004f90 <eepromKontrol+0x4d8>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b05      	cmp	r3, #5
 8004eca:	d902      	bls.n	8004ed2 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8004ecc:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <eepromKontrol+0x4d8>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004ed2:	4b30      	ldr	r3, [pc, #192]	; (8004f94 <eepromKontrol+0x4dc>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b05      	cmp	r3, #5
 8004ed8:	d902      	bls.n	8004ee0 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8004eda:	4b2e      	ldr	r3, [pc, #184]	; (8004f94 <eepromKontrol+0x4dc>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004ee0:	4b2d      	ldr	r3, [pc, #180]	; (8004f98 <eepromKontrol+0x4e0>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2bb4      	cmp	r3, #180	; 0xb4
 8004ee6:	d902      	bls.n	8004eee <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <eepromKontrol+0x4e0>)
 8004eea:	223c      	movs	r2, #60	; 0x3c
 8004eec:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004eee:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <eepromKontrol+0x4e4>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d902      	bls.n	8004efc <eepromKontrol+0x444>
	    buzzer=0;
 8004ef6:	4b29      	ldr	r3, [pc, #164]	; (8004f9c <eepromKontrol+0x4e4>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004efc:	4b28      	ldr	r3, [pc, #160]	; (8004fa0 <eepromKontrol+0x4e8>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d902      	bls.n	8004f0a <eepromKontrol+0x452>
	    demoMode=0;
 8004f04:	4b26      	ldr	r3, [pc, #152]	; (8004fa0 <eepromKontrol+0x4e8>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004f0a:	4b26      	ldr	r3, [pc, #152]	; (8004fa4 <eepromKontrol+0x4ec>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d902      	bls.n	8004f18 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8004f12:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <eepromKontrol+0x4ec>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004f18:	4b23      	ldr	r3, [pc, #140]	; (8004fa8 <eepromKontrol+0x4f0>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d902      	bls.n	8004f26 <eepromKontrol+0x46e>
	    dilSecim=0;
 8004f20:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <eepromKontrol+0x4f0>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8004f26:	4b21      	ldr	r3, [pc, #132]	; (8004fac <eepromKontrol+0x4f4>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d902      	bls.n	8004f34 <eepromKontrol+0x47c>
		iotMode=0;
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <eepromKontrol+0x4f4>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f38:	f003 f894 	bl	8008064 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <eepromKontrol+0x4f4>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d104      	bne.n	8004f4e <eepromKontrol+0x496>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <eepromKontrol+0x496>
		convertAndSendData();
 8004f4a:	f7ff fd81 	bl	8004a50 <convertAndSendData>
	}
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000b45 	.word	0x20000b45
 8004f5c:	20000b36 	.word	0x20000b36
 8004f60:	20000b46 	.word	0x20000b46
 8004f64:	20000b37 	.word	0x20000b37
 8004f68:	20000b39 	.word	0x20000b39
 8004f6c:	20000b47 	.word	0x20000b47
 8004f70:	20000b3a 	.word	0x20000b3a
 8004f74:	20000b3b 	.word	0x20000b3b
 8004f78:	20000b3c 	.word	0x20000b3c
 8004f7c:	20000b3d 	.word	0x20000b3d
 8004f80:	20000b3e 	.word	0x20000b3e
 8004f84:	20000b3f 	.word	0x20000b3f
 8004f88:	20000b40 	.word	0x20000b40
 8004f8c:	20000b41 	.word	0x20000b41
 8004f90:	20000b42 	.word	0x20000b42
 8004f94:	20000b43 	.word	0x20000b43
 8004f98:	20000b44 	.word	0x20000b44
 8004f9c:	20000b48 	.word	0x20000b48
 8004fa0:	20000b4a 	.word	0x20000b4a
 8004fa4:	20000b4c 	.word	0x20000b4c
 8004fa8:	20000b4d 	.word	0x20000b4d
 8004fac:	20000b4b 	.word	0x20000b4b

08004fb0 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b089      	sub	sp, #36	; 0x24
 8004fb4:	af04      	add	r7, sp, #16
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004fba:	4b26      	ldr	r3, [pc, #152]	; (8005054 <hata2EEPROM+0xa4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	1e5a      	subs	r2, r3, #1
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <hata2EEPROM+0xa8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	4a25      	ldr	r2, [pc, #148]	; (800505c <hata2EEPROM+0xac>)
 8004fc8:	5cd3      	ldrb	r3, [r2, r3]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004fce:	f000 f849 	bl	8005064 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004fd2:	e000      	b.n	8004fd6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004fd4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e012      	b.n	8005002 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004fdc:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <hata2EEPROM+0xa8>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <hata2EEPROM+0xac>)
 8004fe6:	5cd3      	ldrb	r3, [r2, r3]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d107      	bne.n	8004ffc <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004fec:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <hata2EEPROM+0xa8>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	4919      	ldr	r1, [pc, #100]	; (800505c <hata2EEPROM+0xac>)
 8004ff6:	79fa      	ldrb	r2, [r7, #7]
 8004ff8:	54ca      	strb	r2, [r1, r3]
					break;
 8004ffa:	e007      	b.n	800500c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <hata2EEPROM+0xa4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	429a      	cmp	r2, r3
 800500a:	dbe7      	blt.n	8004fdc <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 800500c:	4b12      	ldr	r3, [pc, #72]	; (8005058 <hata2EEPROM+0xa8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	b299      	uxth	r1, r3
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <hata2EEPROM+0xa4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	b298      	uxth	r0, r3
 8005018:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <hata2EEPROM+0xa8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a0f      	ldr	r2, [pc, #60]	; (800505c <hata2EEPROM+0xac>)
 800501e:	4413      	add	r3, r2
 8005020:	4a0c      	ldr	r2, [pc, #48]	; (8005054 <hata2EEPROM+0xa4>)
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	b292      	uxth	r2, r2
 8005026:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800502a:	9402      	str	r4, [sp, #8]
 800502c:	9201      	str	r2, [sp, #4]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4603      	mov	r3, r0
 8005032:	460a      	mov	r2, r1
 8005034:	21a0      	movs	r1, #160	; 0xa0
 8005036:	480a      	ldr	r0, [pc, #40]	; (8005060 <hata2EEPROM+0xb0>)
 8005038:	f004 f89e 	bl	8009178 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800503c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005040:	f003 f810 	bl	8008064 <HAL_Delay>
	eepromKontrol(1);
 8005044:	2001      	movs	r0, #1
 8005046:	f7ff fd37 	bl	8004ab8 <eepromKontrol>
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bd90      	pop	{r4, r7, pc}
 8005052:	bf00      	nop
 8005054:	20000938 	.word	0x20000938
 8005058:	2000093c 	.word	0x2000093c
 800505c:	20000ac0 	.word	0x20000ac0
 8005060:	20000ce8 	.word	0x20000ce8

08005064 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	e009      	b.n	8005084 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <eepromDataFillWithEmpty+0x38>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005078:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <eepromDataFillWithEmpty+0x3c>)
 800507a:	2100      	movs	r1, #0
 800507c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3301      	adds	r3, #1
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <eepromDataFillWithEmpty+0x40>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	dbf0      	blt.n	8005070 <eepromDataFillWithEmpty+0xc>
	}
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000910 	.word	0x20000910
 80050a0:	20000ac0 	.word	0x20000ac0
 80050a4:	20000938 	.word	0x20000938

080050a8 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
	timer1=millis;
 80050ac:	4b47      	ldr	r3, [pc, #284]	; (80051cc <bekle+0x124>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a47      	ldr	r2, [pc, #284]	; (80051d0 <bekle+0x128>)
 80050b2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80050b4:	e002      	b.n	80050bc <bekle+0x14>
    	butonKontrol = 1;
 80050b6:	4b47      	ldr	r3, [pc, #284]	; (80051d4 <bekle+0x12c>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80050bc:	2101      	movs	r1, #1
 80050be:	4846      	ldr	r0, [pc, #280]	; (80051d8 <bekle+0x130>)
 80050c0:	f003 fda0 	bl	8008c04 <HAL_GPIO_ReadPin>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d109      	bne.n	80050de <bekle+0x36>
 80050ca:	4b40      	ldr	r3, [pc, #256]	; (80051cc <bekle+0x124>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b40      	ldr	r3, [pc, #256]	; (80051d0 <bekle+0x128>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d0ef      	beq.n	80050b6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80050d6:	e002      	b.n	80050de <bekle+0x36>
    	butonKontrol = 1;
 80050d8:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <bekle+0x12c>)
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80050de:	2108      	movs	r1, #8
 80050e0:	483e      	ldr	r0, [pc, #248]	; (80051dc <bekle+0x134>)
 80050e2:	f003 fd8f 	bl	8008c04 <HAL_GPIO_ReadPin>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d109      	bne.n	8005100 <bekle+0x58>
 80050ec:	4b37      	ldr	r3, [pc, #220]	; (80051cc <bekle+0x124>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b37      	ldr	r3, [pc, #220]	; (80051d0 <bekle+0x128>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d0ef      	beq.n	80050d8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80050f8:	e002      	b.n	8005100 <bekle+0x58>
    	butonKontrol = 1;
 80050fa:	4b36      	ldr	r3, [pc, #216]	; (80051d4 <bekle+0x12c>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005100:	2102      	movs	r1, #2
 8005102:	4835      	ldr	r0, [pc, #212]	; (80051d8 <bekle+0x130>)
 8005104:	f003 fd7e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d109      	bne.n	8005122 <bekle+0x7a>
 800510e:	4b2f      	ldr	r3, [pc, #188]	; (80051cc <bekle+0x124>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b2f      	ldr	r3, [pc, #188]	; (80051d0 <bekle+0x128>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d0ef      	beq.n	80050fa <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800511a:	e002      	b.n	8005122 <bekle+0x7a>
    	butonKontrol = 1;
 800511c:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <bekle+0x12c>)
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005122:	2104      	movs	r1, #4
 8005124:	482c      	ldr	r0, [pc, #176]	; (80051d8 <bekle+0x130>)
 8005126:	f003 fd6d 	bl	8008c04 <HAL_GPIO_ReadPin>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	d109      	bne.n	8005144 <bekle+0x9c>
 8005130:	4b26      	ldr	r3, [pc, #152]	; (80051cc <bekle+0x124>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <bekle+0x128>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d0ef      	beq.n	800511c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800513c:	e002      	b.n	8005144 <bekle+0x9c>
    	butonKontrol = 1;
 800513e:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <bekle+0x12c>)
 8005140:	2201      	movs	r2, #1
 8005142:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005144:	2108      	movs	r1, #8
 8005146:	4824      	ldr	r0, [pc, #144]	; (80051d8 <bekle+0x130>)
 8005148:	f003 fd5c 	bl	8008c04 <HAL_GPIO_ReadPin>
 800514c:	4603      	mov	r3, r0
 800514e:	2b01      	cmp	r3, #1
 8005150:	d109      	bne.n	8005166 <bekle+0xbe>
 8005152:	4b1e      	ldr	r3, [pc, #120]	; (80051cc <bekle+0x124>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <bekle+0x128>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d0ef      	beq.n	800513e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800515e:	e002      	b.n	8005166 <bekle+0xbe>
    	butonKontrol = 1;
 8005160:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <bekle+0x12c>)
 8005162:	2201      	movs	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005166:	2180      	movs	r1, #128	; 0x80
 8005168:	481c      	ldr	r0, [pc, #112]	; (80051dc <bekle+0x134>)
 800516a:	f003 fd4b 	bl	8008c04 <HAL_GPIO_ReadPin>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d109      	bne.n	8005188 <bekle+0xe0>
 8005174:	4b15      	ldr	r3, [pc, #84]	; (80051cc <bekle+0x124>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <bekle+0x128>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d0ef      	beq.n	8005160 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005180:	e002      	b.n	8005188 <bekle+0xe0>
    	butonKontrol = 1;
 8005182:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <bekle+0x12c>)
 8005184:	2201      	movs	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800518c:	4813      	ldr	r0, [pc, #76]	; (80051dc <bekle+0x134>)
 800518e:	f003 fd39 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d109      	bne.n	80051ac <bekle+0x104>
 8005198:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <bekle+0x124>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <bekle+0x128>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d0ee      	beq.n	8005182 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80051a4:	e002      	b.n	80051ac <bekle+0x104>
    	butonKontrol = 1;
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <bekle+0x12c>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80051ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051b0:	480a      	ldr	r0, [pc, #40]	; (80051dc <bekle+0x134>)
 80051b2:	f003 fd27 	bl	8008c04 <HAL_GPIO_ReadPin>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d105      	bne.n	80051c8 <bekle+0x120>
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <bekle+0x124>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <bekle+0x128>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d0ee      	beq.n	80051a6 <bekle+0xfe>
    }

}
 80051c8:	bf00      	nop
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000b08 	.word	0x20000b08
 80051d0:	20000b10 	.word	0x20000b10
 80051d4:	20000b5b 	.word	0x20000b5b
 80051d8:	40010800 	.word	0x40010800
 80051dc:	40011000 	.word	0x40011000

080051e0 <i2cTest>:

void i2cTest() {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80051e6:	463b      	mov	r3, r7
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80051f2:	4b50      	ldr	r3, [pc, #320]	; (8005334 <i2cTest+0x154>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b4e      	ldr	r3, [pc, #312]	; (8005334 <i2cTest+0x154>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8005202:	484c      	ldr	r0, [pc, #304]	; (8005334 <i2cTest+0x154>)
 8005204:	f003 fe8a 	bl	8008f1c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005208:	23c0      	movs	r3, #192	; 0xc0
 800520a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 800520c:	2311      	movs	r3, #17
 800520e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005210:	2301      	movs	r3, #1
 8005212:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005214:	2303      	movs	r3, #3
 8005216:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005218:	463b      	mov	r3, r7
 800521a:	4619      	mov	r1, r3
 800521c:	4846      	ldr	r0, [pc, #280]	; (8005338 <i2cTest+0x158>)
 800521e:	f003 fa91 	bl	8008744 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005222:	2201      	movs	r2, #1
 8005224:	2140      	movs	r1, #64	; 0x40
 8005226:	4844      	ldr	r0, [pc, #272]	; (8005338 <i2cTest+0x158>)
 8005228:	f003 fd03 	bl	8008c32 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800522c:	2201      	movs	r2, #1
 800522e:	2180      	movs	r1, #128	; 0x80
 8005230:	4841      	ldr	r0, [pc, #260]	; (8005338 <i2cTest+0x158>)
 8005232:	f003 fcfe 	bl	8008c32 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8005236:	200a      	movs	r0, #10
 8005238:	f002 ff14 	bl	8008064 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800523c:	bf00      	nop
 800523e:	2140      	movs	r1, #64	; 0x40
 8005240:	483d      	ldr	r0, [pc, #244]	; (8005338 <i2cTest+0x158>)
 8005242:	f003 fcdf 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005246:	4603      	mov	r3, r0
 8005248:	2b01      	cmp	r3, #1
 800524a:	d006      	beq.n	800525a <i2cTest+0x7a>
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	483a      	ldr	r0, [pc, #232]	; (8005338 <i2cTest+0x158>)
 8005250:	f003 fcd8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d1f1      	bne.n	800523e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800525a:	2200      	movs	r2, #0
 800525c:	2180      	movs	r1, #128	; 0x80
 800525e:	4836      	ldr	r0, [pc, #216]	; (8005338 <i2cTest+0x158>)
 8005260:	f003 fce7 	bl	8008c32 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8005264:	200a      	movs	r0, #10
 8005266:	f002 fefd 	bl	8008064 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800526a:	bf00      	nop
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	4832      	ldr	r0, [pc, #200]	; (8005338 <i2cTest+0x158>)
 8005270:	f003 fcc8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d0f8      	beq.n	800526c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800527a:	2200      	movs	r2, #0
 800527c:	2140      	movs	r1, #64	; 0x40
 800527e:	482e      	ldr	r0, [pc, #184]	; (8005338 <i2cTest+0x158>)
 8005280:	f003 fcd7 	bl	8008c32 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005284:	200a      	movs	r0, #10
 8005286:	f002 feed 	bl	8008064 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800528a:	bf00      	nop
 800528c:	2140      	movs	r1, #64	; 0x40
 800528e:	482a      	ldr	r0, [pc, #168]	; (8005338 <i2cTest+0x158>)
 8005290:	f003 fcb8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005294:	4603      	mov	r3, r0
 8005296:	2b01      	cmp	r3, #1
 8005298:	d0f8      	beq.n	800528c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800529a:	2201      	movs	r2, #1
 800529c:	2140      	movs	r1, #64	; 0x40
 800529e:	4826      	ldr	r0, [pc, #152]	; (8005338 <i2cTest+0x158>)
 80052a0:	f003 fcc7 	bl	8008c32 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80052a4:	200a      	movs	r0, #10
 80052a6:	f002 fedd 	bl	8008064 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80052aa:	bf00      	nop
 80052ac:	2140      	movs	r1, #64	; 0x40
 80052ae:	4822      	ldr	r0, [pc, #136]	; (8005338 <i2cTest+0x158>)
 80052b0:	f003 fca8 	bl	8008c04 <HAL_GPIO_ReadPin>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d1f8      	bne.n	80052ac <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80052ba:	2201      	movs	r2, #1
 80052bc:	2180      	movs	r1, #128	; 0x80
 80052be:	481e      	ldr	r0, [pc, #120]	; (8005338 <i2cTest+0x158>)
 80052c0:	f003 fcb7 	bl	8008c32 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80052c4:	200a      	movs	r0, #10
 80052c6:	f002 fecd 	bl	8008064 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80052ca:	bf00      	nop
 80052cc:	2180      	movs	r1, #128	; 0x80
 80052ce:	481a      	ldr	r0, [pc, #104]	; (8005338 <i2cTest+0x158>)
 80052d0:	f003 fc98 	bl	8008c04 <HAL_GPIO_ReadPin>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d1f8      	bne.n	80052cc <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052da:	23c0      	movs	r3, #192	; 0xc0
 80052dc:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80052de:	2312      	movs	r3, #18
 80052e0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80052e2:	2301      	movs	r3, #1
 80052e4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80052e6:	2303      	movs	r3, #3
 80052e8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80052ea:	463b      	mov	r3, r7
 80052ec:	4619      	mov	r1, r3
 80052ee:	4812      	ldr	r0, [pc, #72]	; (8005338 <i2cTest+0x158>)
 80052f0:	f003 fa28 	bl	8008744 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80052f4:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <i2cTest+0x154>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <i2cTest+0x154>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005302:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <i2cTest+0x154>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <i2cTest+0x154>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005312:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <i2cTest+0x154>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b06      	ldr	r3, [pc, #24]	; (8005334 <i2cTest+0x154>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8005324:	4803      	ldr	r0, [pc, #12]	; (8005334 <i2cTest+0x154>)
 8005326:	f003 fcb5 	bl	8008c94 <HAL_I2C_Init>
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000ce8 	.word	0x20000ce8
 8005338:	40010c00 	.word	0x40010c00

0800533c <checkLCDBacklight>:

void checkLCDBacklight() {
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <checkLCDBacklight+0x34>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <checkLCDBacklight+0x38>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	1ad2      	subs	r2, r2, r3
 800534a:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <checkLCDBacklight+0x3c>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	4619      	mov	r1, r3
 8005350:	460b      	mov	r3, r1
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	429a      	cmp	r2, r3
 800535a:	d303      	bcc.n	8005364 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 800535c:	2000      	movs	r0, #0
 800535e:	f7fb f9f5 	bl	800074c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8005362:	e002      	b.n	800536a <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8005364:	2001      	movs	r0, #1
 8005366:	f7fb f9f1 	bl	800074c <lcd_backlight>
}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20000b08 	.word	0x20000b08
 8005374:	20000b24 	.word	0x20000b24
 8005378:	20000946 	.word	0x20000946

0800537c <checkBasincSalteri>:

void checkBasincSalteri() {
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <checkBasincSalteri+0x54>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <checkBasincSalteri+0x12>
		basincVar=1;
 8005388:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <checkBasincSalteri+0x58>)
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800538e:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <checkBasincSalteri+0x54>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d119      	bne.n	80053ca <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8005396:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800539a:	480f      	ldr	r0, [pc, #60]	; (80053d8 <checkBasincSalteri+0x5c>)
 800539c:	f003 fc32 	bl	8008c04 <HAL_GPIO_ReadPin>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <checkBasincSalteri+0x60>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <checkBasincSalteri+0x64>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d90a      	bls.n	80053ca <checkBasincSalteri+0x4e>
				basincVar=1;
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <checkBasincSalteri+0x58>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80053ba:	e006      	b.n	80053ca <checkBasincSalteri+0x4e>
			timer5=millis;
 80053bc:	4b07      	ldr	r3, [pc, #28]	; (80053dc <checkBasincSalteri+0x60>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a07      	ldr	r2, [pc, #28]	; (80053e0 <checkBasincSalteri+0x64>)
 80053c2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <checkBasincSalteri+0x58>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000b33 	.word	0x20000b33
 80053d4:	20000b2f 	.word	0x20000b2f
 80053d8:	40011000 	.word	0x40011000
 80053dc:	20000b08 	.word	0x20000b08
 80053e0:	20000b20 	.word	0x20000b20

080053e4 <checkBasGonder>:

void checkBasGonder() {
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <checkBasGonder+0x74>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d10b      	bne.n	8005408 <checkBasGonder+0x24>
 80053f0:	4b1a      	ldr	r3, [pc, #104]	; (800545c <checkBasGonder+0x78>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <checkBasGonder+0x24>
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <checkBasGonder+0x7c>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d103      	bne.n	8005408 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8005400:	4b18      	ldr	r3, [pc, #96]	; (8005464 <checkBasGonder+0x80>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e009      	b.n	800541c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <checkBasGonder+0x78>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f083 0301 	eor.w	r3, r3, #1
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8005416:	4b13      	ldr	r3, [pc, #76]	; (8005464 <checkBasGonder+0x80>)
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <checkBasGonder+0x74>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10b      	bne.n	800543c <checkBasGonder+0x58>
 8005424:	4b10      	ldr	r3, [pc, #64]	; (8005468 <checkBasGonder+0x84>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <checkBasGonder+0x58>
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <checkBasGonder+0x7c>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8005434:	4b0d      	ldr	r3, [pc, #52]	; (800546c <checkBasGonder+0x88>)
 8005436:	2201      	movs	r2, #1
 8005438:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800543a:	e009      	b.n	8005450 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <checkBasGonder+0x84>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f083 0301 	eor.w	r3, r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <checkBasGonder+0x88>)
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	20000b2d 	.word	0x20000b2d
 800545c:	20000b61 	.word	0x20000b61
 8005460:	20000b3b 	.word	0x20000b3b
 8005464:	20000b68 	.word	0x20000b68
 8005468:	20000b64 	.word	0x20000b64
 800546c:	20000b69 	.word	0x20000b69

08005470 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005474:	4b24      	ldr	r3, [pc, #144]	; (8005508 <checkKapiSecimleri+0x98>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 800547c:	4b23      	ldr	r3, [pc, #140]	; (800550c <checkKapiSecimleri+0x9c>)
 800547e:	2201      	movs	r2, #1
 8005480:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8005482:	4b21      	ldr	r3, [pc, #132]	; (8005508 <checkKapiSecimleri+0x98>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d10e      	bne.n	80054a8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800548a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800548e:	4820      	ldr	r0, [pc, #128]	; (8005510 <checkKapiSecimleri+0xa0>)
 8005490:	f003 fbb8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800549a:	4b1c      	ldr	r3, [pc, #112]	; (800550c <checkKapiSecimleri+0x9c>)
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	e002      	b.n	80054a8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <checkKapiSecimleri+0x9c>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80054a8:	4b17      	ldr	r3, [pc, #92]	; (8005508 <checkKapiSecimleri+0x98>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d10e      	bne.n	80054ce <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80054b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054b4:	4816      	ldr	r0, [pc, #88]	; (8005510 <checkKapiSecimleri+0xa0>)
 80054b6:	f003 fba5 	bl	8008c04 <HAL_GPIO_ReadPin>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d103      	bne.n	80054c8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80054c0:	4b12      	ldr	r3, [pc, #72]	; (800550c <checkKapiSecimleri+0x9c>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	e002      	b.n	80054ce <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <checkKapiSecimleri+0x9c>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80054ce:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <checkKapiSecimleri+0x98>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d116      	bne.n	8005504 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80054d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054da:	480d      	ldr	r0, [pc, #52]	; (8005510 <checkKapiSecimleri+0xa0>)
 80054dc:	f003 fb92 	bl	8008c04 <HAL_GPIO_ReadPin>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <checkKapiSecimleri+0x8e>
 80054e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ea:	4809      	ldr	r0, [pc, #36]	; (8005510 <checkKapiSecimleri+0xa0>)
 80054ec:	f003 fb8a 	bl	8008c04 <HAL_GPIO_ReadPin>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <checkKapiSecimleri+0x9c>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80054fc:	e002      	b.n	8005504 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80054fe:	4b03      	ldr	r3, [pc, #12]	; (800550c <checkKapiSecimleri+0x9c>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20000b34 	.word	0x20000b34
 800550c:	20000b7f 	.word	0x20000b7f
 8005510:	40010800 	.word	0x40010800

08005514 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005518:	4b62      	ldr	r3, [pc, #392]	; (80056a4 <checkAktifCalisma+0x190>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f041 8332 	bne.w	8006b86 <checkAktifCalisma+0x1672>
 8005522:	4b61      	ldr	r3, [pc, #388]	; (80056a8 <checkAktifCalisma+0x194>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f041 832d 	bne.w	8006b86 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 800552c:	4b5f      	ldr	r3, [pc, #380]	; (80056ac <checkAktifCalisma+0x198>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d11a      	bne.n	800556a <checkAktifCalisma+0x56>
 8005534:	4b5e      	ldr	r3, [pc, #376]	; (80056b0 <checkAktifCalisma+0x19c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d116      	bne.n	800556a <checkAktifCalisma+0x56>
 800553c:	4b5d      	ldr	r3, [pc, #372]	; (80056b4 <checkAktifCalisma+0x1a0>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <checkAktifCalisma+0x46>
 8005544:	4b5c      	ldr	r3, [pc, #368]	; (80056b8 <checkAktifCalisma+0x1a4>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f083 0301 	eor.w	r3, r3, #1
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <checkAktifCalisma+0x46>
 8005552:	4b5a      	ldr	r3, [pc, #360]	; (80056bc <checkAktifCalisma+0x1a8>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d007      	beq.n	800556a <checkAktifCalisma+0x56>
 800555a:	4b59      	ldr	r3, [pc, #356]	; (80056c0 <checkAktifCalisma+0x1ac>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d018      	beq.n	8005594 <checkAktifCalisma+0x80>
 8005562:	4b58      	ldr	r3, [pc, #352]	; (80056c4 <checkAktifCalisma+0x1b0>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d114      	bne.n	8005594 <checkAktifCalisma+0x80>
 800556a:	4b57      	ldr	r3, [pc, #348]	; (80056c8 <checkAktifCalisma+0x1b4>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d010      	beq.n	8005594 <checkAktifCalisma+0x80>
 8005572:	4b56      	ldr	r3, [pc, #344]	; (80056cc <checkAktifCalisma+0x1b8>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800557a:	2201      	movs	r2, #1
 800557c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005580:	4853      	ldr	r0, [pc, #332]	; (80056d0 <checkAktifCalisma+0x1bc>)
 8005582:	f003 fb56 	bl	8008c32 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8005586:	4b53      	ldr	r3, [pc, #332]	; (80056d4 <checkAktifCalisma+0x1c0>)
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 800558c:	4b52      	ldr	r3, [pc, #328]	; (80056d8 <checkAktifCalisma+0x1c4>)
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	e008      	b.n	80055a6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005594:	2200      	movs	r2, #0
 8005596:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800559a:	484d      	ldr	r0, [pc, #308]	; (80056d0 <checkAktifCalisma+0x1bc>)
 800559c:	f003 fb49 	bl	8008c32 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80055a0:	4b4c      	ldr	r3, [pc, #304]	; (80056d4 <checkAktifCalisma+0x1c0>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80055a6:	4b40      	ldr	r3, [pc, #256]	; (80056a8 <checkAktifCalisma+0x194>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d160      	bne.n	8005670 <checkAktifCalisma+0x15c>
 80055ae:	4b46      	ldr	r3, [pc, #280]	; (80056c8 <checkAktifCalisma+0x1b4>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d05c      	beq.n	8005670 <checkAktifCalisma+0x15c>
 80055b6:	4b45      	ldr	r3, [pc, #276]	; (80056cc <checkAktifCalisma+0x1b8>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d058      	beq.n	8005670 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80055be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055c2:	4843      	ldr	r0, [pc, #268]	; (80056d0 <checkAktifCalisma+0x1bc>)
 80055c4:	f003 fb1e 	bl	8008c04 <HAL_GPIO_ReadPin>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <checkAktifCalisma+0xc2>
 80055ce:	4b43      	ldr	r3, [pc, #268]	; (80056dc <checkAktifCalisma+0x1c8>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d04c      	beq.n	8005670 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80055d6:	2102      	movs	r1, #2
 80055d8:	4841      	ldr	r0, [pc, #260]	; (80056e0 <checkAktifCalisma+0x1cc>)
 80055da:	f003 fb13 	bl	8008c04 <HAL_GPIO_ReadPin>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d145      	bne.n	8005670 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80055e4:	4b3f      	ldr	r3, [pc, #252]	; (80056e4 <checkAktifCalisma+0x1d0>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d041      	beq.n	8005670 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80055ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055f0:	4837      	ldr	r0, [pc, #220]	; (80056d0 <checkAktifCalisma+0x1bc>)
 80055f2:	f003 fb07 	bl	8008c04 <HAL_GPIO_ReadPin>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d10e      	bne.n	800561a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80055fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005600:	4833      	ldr	r0, [pc, #204]	; (80056d0 <checkAktifCalisma+0x1bc>)
 8005602:	f003 faff 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005606:	4603      	mov	r3, r0
 8005608:	2b01      	cmp	r3, #1
 800560a:	d106      	bne.n	800561a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800560c:	2140      	movs	r1, #64	; 0x40
 800560e:	4834      	ldr	r0, [pc, #208]	; (80056e0 <checkAktifCalisma+0x1cc>)
 8005610:	f003 faf8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005614:	4603      	mov	r3, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	d003      	beq.n	8005622 <checkAktifCalisma+0x10e>
 800561a:	4b24      	ldr	r3, [pc, #144]	; (80056ac <checkAktifCalisma+0x198>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d026      	beq.n	8005670 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005622:	4b24      	ldr	r3, [pc, #144]	; (80056b4 <checkAktifCalisma+0x1a0>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	f083 0301 	eor.w	r3, r3, #1
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01f      	beq.n	8005670 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005630:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <checkAktifCalisma+0x19c>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	f083 0301 	eor.w	r3, r3, #1
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d018      	beq.n	8005670 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800563e:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <checkAktifCalisma+0x1ac>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	f083 0301 	eor.w	r3, r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 800564c:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <checkAktifCalisma+0x1d4>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	f083 0301 	eor.w	r3, r3, #1
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800565a:	4b24      	ldr	r3, [pc, #144]	; (80056ec <checkAktifCalisma+0x1d8>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	f083 0301 	eor.w	r3, r3, #1
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005668:	4b10      	ldr	r3, [pc, #64]	; (80056ac <checkAktifCalisma+0x198>)
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e002      	b.n	8005676 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005670:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <checkAktifCalisma+0x198>)
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <checkAktifCalisma+0x198>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d03a      	beq.n	80056f4 <checkAktifCalisma+0x1e0>
 800567e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005682:	4817      	ldr	r0, [pc, #92]	; (80056e0 <checkAktifCalisma+0x1cc>)
 8005684:	f003 fabe 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005688:	4603      	mov	r3, r0
 800568a:	2b01      	cmp	r3, #1
 800568c:	d132      	bne.n	80056f4 <checkAktifCalisma+0x1e0>
 800568e:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <checkAktifCalisma+0x1dc>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d02e      	beq.n	80056f4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005696:	2201      	movs	r2, #1
 8005698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800569c:	480c      	ldr	r0, [pc, #48]	; (80056d0 <checkAktifCalisma+0x1bc>)
 800569e:	f003 fac8 	bl	8008c32 <HAL_GPIO_WritePin>
 80056a2:	e02d      	b.n	8005700 <checkAktifCalisma+0x1ec>
 80056a4:	20000b4a 	.word	0x20000b4a
 80056a8:	20000b49 	.word	0x20000b49
 80056ac:	20000b61 	.word	0x20000b61
 80056b0:	20000b62 	.word	0x20000b62
 80056b4:	20000b64 	.word	0x20000b64
 80056b8:	20000b5c 	.word	0x20000b5c
 80056bc:	20000b3f 	.word	0x20000b3f
 80056c0:	20000b63 	.word	0x20000b63
 80056c4:	20000b3e 	.word	0x20000b3e
 80056c8:	20000b7e 	.word	0x20000b7e
 80056cc:	20000b7f 	.word	0x20000b7f
 80056d0:	40010c00 	.word	0x40010c00
 80056d4:	20000b80 	.word	0x20000b80
 80056d8:	20000b6b 	.word	0x20000b6b
 80056dc:	20000b68 	.word	0x20000b68
 80056e0:	40011000 	.word	0x40011000
 80056e4:	20000b2f 	.word	0x20000b2f
 80056e8:	20000b66 	.word	0x20000b66
 80056ec:	20000b67 	.word	0x20000b67
 80056f0:	20000b3a 	.word	0x20000b3a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80056f4:	2200      	movs	r2, #0
 80056f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056fa:	4860      	ldr	r0, [pc, #384]	; (800587c <checkAktifCalisma+0x368>)
 80056fc:	f003 fa99 	bl	8008c32 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005700:	4b5f      	ldr	r3, [pc, #380]	; (8005880 <checkAktifCalisma+0x36c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d013      	beq.n	8005730 <checkAktifCalisma+0x21c>
 8005708:	4b5e      	ldr	r3, [pc, #376]	; (8005884 <checkAktifCalisma+0x370>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d007      	beq.n	8005720 <checkAktifCalisma+0x20c>
 8005710:	4b5c      	ldr	r3, [pc, #368]	; (8005884 <checkAktifCalisma+0x370>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d003      	beq.n	8005720 <checkAktifCalisma+0x20c>
 8005718:	4b5b      	ldr	r3, [pc, #364]	; (8005888 <checkAktifCalisma+0x374>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005720:	2201      	movs	r2, #1
 8005722:	2104      	movs	r1, #4
 8005724:	4855      	ldr	r0, [pc, #340]	; (800587c <checkAktifCalisma+0x368>)
 8005726:	f003 fa84 	bl	8008c32 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800572a:	4b58      	ldr	r3, [pc, #352]	; (800588c <checkAktifCalisma+0x378>)
 800572c:	2201      	movs	r2, #1
 800572e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005730:	4b56      	ldr	r3, [pc, #344]	; (800588c <checkAktifCalisma+0x378>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d02f      	beq.n	8005798 <checkAktifCalisma+0x284>
 8005738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800573c:	484f      	ldr	r0, [pc, #316]	; (800587c <checkAktifCalisma+0x368>)
 800573e:	f003 fa61 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005742:	4603      	mov	r3, r0
 8005744:	2b01      	cmp	r3, #1
 8005746:	d106      	bne.n	8005756 <checkAktifCalisma+0x242>
 8005748:	4b51      	ldr	r3, [pc, #324]	; (8005890 <checkAktifCalisma+0x37c>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f083 0301 	eor.w	r3, r3, #1
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <checkAktifCalisma+0x250>
 8005756:	2102      	movs	r1, #2
 8005758:	484e      	ldr	r0, [pc, #312]	; (8005894 <checkAktifCalisma+0x380>)
 800575a:	f003 fa53 	bl	8008c04 <HAL_GPIO_ReadPin>
 800575e:	4603      	mov	r3, r0
 8005760:	2b01      	cmp	r3, #1
 8005762:	d119      	bne.n	8005798 <checkAktifCalisma+0x284>
 8005764:	4b4c      	ldr	r3, [pc, #304]	; (8005898 <checkAktifCalisma+0x384>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d015      	beq.n	8005798 <checkAktifCalisma+0x284>
 800576c:	4b4b      	ldr	r3, [pc, #300]	; (800589c <checkAktifCalisma+0x388>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d011      	beq.n	8005798 <checkAktifCalisma+0x284>
 8005774:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <checkAktifCalisma+0x38c>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <checkAktifCalisma+0x284>
 800577c:	4b49      	ldr	r3, [pc, #292]	; (80058a4 <checkAktifCalisma+0x390>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f083 0301 	eor.w	r3, r3, #1
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d006      	beq.n	8005798 <checkAktifCalisma+0x284>
			timer2=millis;
 800578a:	4b47      	ldr	r3, [pc, #284]	; (80058a8 <checkAktifCalisma+0x394>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a47      	ldr	r2, [pc, #284]	; (80058ac <checkAktifCalisma+0x398>)
 8005790:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005792:	4b44      	ldr	r3, [pc, #272]	; (80058a4 <checkAktifCalisma+0x390>)
 8005794:	2201      	movs	r2, #1
 8005796:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005798:	4b43      	ldr	r3, [pc, #268]	; (80058a8 <checkAktifCalisma+0x394>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b43      	ldr	r3, [pc, #268]	; (80058ac <checkAktifCalisma+0x398>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	4a43      	ldr	r2, [pc, #268]	; (80058b0 <checkAktifCalisma+0x39c>)
 80057a4:	7812      	ldrb	r2, [r2, #0]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d303      	bcc.n	80057b2 <checkAktifCalisma+0x29e>
 80057aa:	4b3e      	ldr	r3, [pc, #248]	; (80058a4 <checkAktifCalisma+0x390>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d111      	bne.n	80057d6 <checkAktifCalisma+0x2c2>
 80057b2:	4b39      	ldr	r3, [pc, #228]	; (8005898 <checkAktifCalisma+0x384>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	f083 0301 	eor.w	r3, r3, #1
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <checkAktifCalisma+0x2c2>
 80057c0:	4b36      	ldr	r3, [pc, #216]	; (800589c <checkAktifCalisma+0x388>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f083 0301 	eor.w	r3, r3, #1
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <checkAktifCalisma+0x2c2>
 80057ce:	4b34      	ldr	r3, [pc, #208]	; (80058a0 <checkAktifCalisma+0x38c>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80057d6:	2200      	movs	r2, #0
 80057d8:	2104      	movs	r1, #4
 80057da:	4828      	ldr	r0, [pc, #160]	; (800587c <checkAktifCalisma+0x368>)
 80057dc:	f003 fa29 	bl	8008c32 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80057e0:	4b2a      	ldr	r3, [pc, #168]	; (800588c <checkAktifCalisma+0x378>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80057e6:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <checkAktifCalisma+0x390>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80057ec:	4b31      	ldr	r3, [pc, #196]	; (80058b4 <checkAktifCalisma+0x3a0>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80057f4:	4b30      	ldr	r3, [pc, #192]	; (80058b8 <checkAktifCalisma+0x3a4>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80057fa:	4b2e      	ldr	r3, [pc, #184]	; (80058b4 <checkAktifCalisma+0x3a0>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d116      	bne.n	8005830 <checkAktifCalisma+0x31c>
 8005802:	4b2e      	ldr	r3, [pc, #184]	; (80058bc <checkAktifCalisma+0x3a8>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d112      	bne.n	8005830 <checkAktifCalisma+0x31c>
 800580a:	2101      	movs	r1, #1
 800580c:	4821      	ldr	r0, [pc, #132]	; (8005894 <checkAktifCalisma+0x380>)
 800580e:	f003 f9f9 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10b      	bne.n	8005830 <checkAktifCalisma+0x31c>
 8005818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800581c:	4817      	ldr	r0, [pc, #92]	; (800587c <checkAktifCalisma+0x368>)
 800581e:	f003 f9f1 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005828:	4b23      	ldr	r3, [pc, #140]	; (80058b8 <checkAktifCalisma+0x3a4>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	e011      	b.n	8005854 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005830:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <checkAktifCalisma+0x3a0>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d10d      	bne.n	8005854 <checkAktifCalisma+0x340>
 8005838:	2101      	movs	r1, #1
 800583a:	4816      	ldr	r0, [pc, #88]	; (8005894 <checkAktifCalisma+0x380>)
 800583c:	f003 f9e2 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d106      	bne.n	8005854 <checkAktifCalisma+0x340>
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <checkAktifCalisma+0x3a8>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d102      	bne.n	8005854 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800584e:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <checkAktifCalisma+0x3a4>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005854:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <checkAktifCalisma+0x3a0>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d134      	bne.n	80058c6 <checkAktifCalisma+0x3b2>
 800585c:	4b17      	ldr	r3, [pc, #92]	; (80058bc <checkAktifCalisma+0x3a8>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d130      	bne.n	80058c6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005864:	2101      	movs	r1, #1
 8005866:	480b      	ldr	r0, [pc, #44]	; (8005894 <checkAktifCalisma+0x380>)
 8005868:	f003 f9cc 	bl	8008c04 <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d126      	bne.n	80058c0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005872:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <checkAktifCalisma+0x3a4>)
 8005874:	2201      	movs	r2, #1
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e025      	b.n	80058c6 <checkAktifCalisma+0x3b2>
 800587a:	bf00      	nop
 800587c:	40010c00 	.word	0x40010c00
 8005880:	20000b61 	.word	0x20000b61
 8005884:	20000b3b 	.word	0x20000b3b
 8005888:	20000b3f 	.word	0x20000b3f
 800588c:	20000b65 	.word	0x20000b65
 8005890:	20000b68 	.word	0x20000b68
 8005894:	40011000 	.word	0x40011000
 8005898:	20000b7e 	.word	0x20000b7e
 800589c:	20000b7f 	.word	0x20000b7f
 80058a0:	20000b2f 	.word	0x20000b2f
 80058a4:	20000b5d 	.word	0x20000b5d
 80058a8:	20000b08 	.word	0x20000b08
 80058ac:	20000b14 	.word	0x20000b14
 80058b0:	20000b40 	.word	0x20000b40
 80058b4:	20000b30 	.word	0x20000b30
 80058b8:	20000b83 	.word	0x20000b83
 80058bc:	20000b2d 	.word	0x20000b2d
			} else {
				cerceveVar=0;
 80058c0:	4b7f      	ldr	r3, [pc, #508]	; (8005ac0 <checkAktifCalisma+0x5ac>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80058c6:	4b7f      	ldr	r3, [pc, #508]	; (8005ac4 <checkAktifCalisma+0x5b0>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d17c      	bne.n	80059c8 <checkAktifCalisma+0x4b4>
 80058ce:	4b7e      	ldr	r3, [pc, #504]	; (8005ac8 <checkAktifCalisma+0x5b4>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d078      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
 80058d6:	4b7d      	ldr	r3, [pc, #500]	; (8005acc <checkAktifCalisma+0x5b8>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d074      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80058de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058e2:	487b      	ldr	r0, [pc, #492]	; (8005ad0 <checkAktifCalisma+0x5bc>)
 80058e4:	f003 f98e 	bl	8008c04 <HAL_GPIO_ReadPin>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <checkAktifCalisma+0x3e2>
 80058ee:	4b79      	ldr	r3, [pc, #484]	; (8005ad4 <checkAktifCalisma+0x5c0>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d068      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80058f6:	4b72      	ldr	r3, [pc, #456]	; (8005ac0 <checkAktifCalisma+0x5ac>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d064      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
 80058fe:	4b76      	ldr	r3, [pc, #472]	; (8005ad8 <checkAktifCalisma+0x5c4>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f083 0301 	eor.w	r3, r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d05d      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800590c:	2104      	movs	r1, #4
 800590e:	4873      	ldr	r0, [pc, #460]	; (8005adc <checkAktifCalisma+0x5c8>)
 8005910:	f003 f978 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <checkAktifCalisma+0x40e>
 800591a:	4b71      	ldr	r3, [pc, #452]	; (8005ae0 <checkAktifCalisma+0x5cc>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d152      	bne.n	80059c8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005926:	486a      	ldr	r0, [pc, #424]	; (8005ad0 <checkAktifCalisma+0x5bc>)
 8005928:	f003 f96c 	bl	8008c04 <HAL_GPIO_ReadPin>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d10e      	bne.n	8005950 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005936:	4866      	ldr	r0, [pc, #408]	; (8005ad0 <checkAktifCalisma+0x5bc>)
 8005938:	f003 f964 	bl	8008c04 <HAL_GPIO_ReadPin>
 800593c:	4603      	mov	r3, r0
 800593e:	2b01      	cmp	r3, #1
 8005940:	d106      	bne.n	8005950 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005942:	2140      	movs	r1, #64	; 0x40
 8005944:	4865      	ldr	r0, [pc, #404]	; (8005adc <checkAktifCalisma+0x5c8>)
 8005946:	f003 f95d 	bl	8008c04 <HAL_GPIO_ReadPin>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d003      	beq.n	8005958 <checkAktifCalisma+0x444>
 8005950:	4b64      	ldr	r3, [pc, #400]	; (8005ae4 <checkAktifCalisma+0x5d0>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d037      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005958:	4b63      	ldr	r3, [pc, #396]	; (8005ae8 <checkAktifCalisma+0x5d4>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f083 0301 	eor.w	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d030      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005966:	4b61      	ldr	r3, [pc, #388]	; (8005aec <checkAktifCalisma+0x5d8>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f083 0301 	eor.w	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d029      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005974:	4b5e      	ldr	r3, [pc, #376]	; (8005af0 <checkAktifCalisma+0x5dc>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f083 0301 	eor.w	r3, r3, #1
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d022      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005982:	4b5c      	ldr	r3, [pc, #368]	; (8005af4 <checkAktifCalisma+0x5e0>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	f083 0301 	eor.w	r3, r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01b      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005990:	4b59      	ldr	r3, [pc, #356]	; (8005af8 <checkAktifCalisma+0x5e4>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f083 0301 	eor.w	r3, r3, #1
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d014      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800599e:	4b57      	ldr	r3, [pc, #348]	; (8005afc <checkAktifCalisma+0x5e8>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	f083 0301 	eor.w	r3, r3, #1
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80059ac:	2201      	movs	r2, #1
 80059ae:	2102      	movs	r1, #2
 80059b0:	4847      	ldr	r0, [pc, #284]	; (8005ad0 <checkAktifCalisma+0x5bc>)
 80059b2:	f003 f93e 	bl	8008c32 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80059b6:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <checkAktifCalisma+0x5d0>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80059bc:	4b50      	ldr	r3, [pc, #320]	; (8005b00 <checkAktifCalisma+0x5ec>)
 80059be:	2201      	movs	r2, #1
 80059c0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80059c2:	4b50      	ldr	r3, [pc, #320]	; (8005b04 <checkAktifCalisma+0x5f0>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80059c8:	4b46      	ldr	r3, [pc, #280]	; (8005ae4 <checkAktifCalisma+0x5d0>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d033      	beq.n	8005a38 <checkAktifCalisma+0x524>
 80059d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059d4:	483e      	ldr	r0, [pc, #248]	; (8005ad0 <checkAktifCalisma+0x5bc>)
 80059d6:	f003 f915 	bl	8008c04 <HAL_GPIO_ReadPin>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d106      	bne.n	80059ee <checkAktifCalisma+0x4da>
 80059e0:	4b3c      	ldr	r3, [pc, #240]	; (8005ad4 <checkAktifCalisma+0x5c0>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f083 0301 	eor.w	r3, r3, #1
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <checkAktifCalisma+0x4f0>
 80059ee:	2104      	movs	r1, #4
 80059f0:	483a      	ldr	r0, [pc, #232]	; (8005adc <checkAktifCalisma+0x5c8>)
 80059f2:	f003 f907 	bl	8008c04 <HAL_GPIO_ReadPin>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d11d      	bne.n	8005a38 <checkAktifCalisma+0x524>
 80059fc:	4b38      	ldr	r3, [pc, #224]	; (8005ae0 <checkAktifCalisma+0x5cc>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d019      	beq.n	8005a38 <checkAktifCalisma+0x524>
 8005a04:	4b30      	ldr	r3, [pc, #192]	; (8005ac8 <checkAktifCalisma+0x5b4>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d015      	beq.n	8005a38 <checkAktifCalisma+0x524>
 8005a0c:	4b2f      	ldr	r3, [pc, #188]	; (8005acc <checkAktifCalisma+0x5b8>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d011      	beq.n	8005a38 <checkAktifCalisma+0x524>
 8005a14:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <checkAktifCalisma+0x5ac>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <checkAktifCalisma+0x524>
 8005a1c:	4b3a      	ldr	r3, [pc, #232]	; (8005b08 <checkAktifCalisma+0x5f4>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f083 0301 	eor.w	r3, r3, #1
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d006      	beq.n	8005a38 <checkAktifCalisma+0x524>
			timer2=millis;
 8005a2a:	4b38      	ldr	r3, [pc, #224]	; (8005b0c <checkAktifCalisma+0x5f8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a38      	ldr	r2, [pc, #224]	; (8005b10 <checkAktifCalisma+0x5fc>)
 8005a30:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005a32:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <checkAktifCalisma+0x5f4>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005a38:	4b34      	ldr	r3, [pc, #208]	; (8005b0c <checkAktifCalisma+0x5f8>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b34      	ldr	r3, [pc, #208]	; (8005b10 <checkAktifCalisma+0x5fc>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	4a34      	ldr	r2, [pc, #208]	; (8005b14 <checkAktifCalisma+0x600>)
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d303      	bcc.n	8005a52 <checkAktifCalisma+0x53e>
 8005a4a:	4b2f      	ldr	r3, [pc, #188]	; (8005b08 <checkAktifCalisma+0x5f4>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d114      	bne.n	8005a7c <checkAktifCalisma+0x568>
 8005a52:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <checkAktifCalisma+0x5b4>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	f083 0301 	eor.w	r3, r3, #1
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10d      	bne.n	8005a7c <checkAktifCalisma+0x568>
 8005a60:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <checkAktifCalisma+0x5b8>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f083 0301 	eor.w	r3, r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <checkAktifCalisma+0x568>
 8005a6e:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <checkAktifCalisma+0x5ac>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f083 0301 	eor.w	r3, r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2102      	movs	r1, #2
 8005a80:	4813      	ldr	r0, [pc, #76]	; (8005ad0 <checkAktifCalisma+0x5bc>)
 8005a82:	f003 f8d6 	bl	8008c32 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <checkAktifCalisma+0x5d0>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <checkAktifCalisma+0x5f4>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005a92:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <checkAktifCalisma+0x5d0>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d040      	beq.n	8005b1c <checkAktifCalisma+0x608>
 8005a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a9e:	480f      	ldr	r0, [pc, #60]	; (8005adc <checkAktifCalisma+0x5c8>)
 8005aa0:	f003 f8b0 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d138      	bne.n	8005b1c <checkAktifCalisma+0x608>
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <checkAktifCalisma+0x604>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d034      	beq.n	8005b1c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	4806      	ldr	r0, [pc, #24]	; (8005ad0 <checkAktifCalisma+0x5bc>)
 8005ab8:	f003 f8bb 	bl	8008c32 <HAL_GPIO_WritePin>
 8005abc:	e033      	b.n	8005b26 <checkAktifCalisma+0x612>
 8005abe:	bf00      	nop
 8005ac0:	20000b83 	.word	0x20000b83
 8005ac4:	20000b49 	.word	0x20000b49
 8005ac8:	20000b7e 	.word	0x20000b7e
 8005acc:	20000b7f 	.word	0x20000b7f
 8005ad0:	40010c00 	.word	0x40010c00
 8005ad4:	20000b69 	.word	0x20000b69
 8005ad8:	20000b7d 	.word	0x20000b7d
 8005adc:	40011000 	.word	0x40011000
 8005ae0:	20000b32 	.word	0x20000b32
 8005ae4:	20000b64 	.word	0x20000b64
 8005ae8:	20000b61 	.word	0x20000b61
 8005aec:	20000b65 	.word	0x20000b65
 8005af0:	20000b62 	.word	0x20000b62
 8005af4:	20000b63 	.word	0x20000b63
 8005af8:	20000b66 	.word	0x20000b66
 8005afc:	20000b67 	.word	0x20000b67
 8005b00:	20000b6c 	.word	0x20000b6c
 8005b04:	20000b8d 	.word	0x20000b8d
 8005b08:	20000b5c 	.word	0x20000b5c
 8005b0c:	20000b08 	.word	0x20000b08
 8005b10:	20000b14 	.word	0x20000b14
 8005b14:	20000b41 	.word	0x20000b41
 8005b18:	20000b31 	.word	0x20000b31
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4836      	ldr	r0, [pc, #216]	; (8005bfc <checkAktifCalisma+0x6e8>)
 8005b22:	f003 f886 	bl	8008c32 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005b26:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <checkAktifCalisma+0x6ec>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f040 8080 	bne.w	8005c30 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005b30:	4b34      	ldr	r3, [pc, #208]	; (8005c04 <checkAktifCalisma+0x6f0>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d003      	beq.n	8005b40 <checkAktifCalisma+0x62c>
 8005b38:	4b32      	ldr	r3, [pc, #200]	; (8005c04 <checkAktifCalisma+0x6f0>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d177      	bne.n	8005c30 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005b40:	4b31      	ldr	r3, [pc, #196]	; (8005c08 <checkAktifCalisma+0x6f4>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d073      	beq.n	8005c30 <checkAktifCalisma+0x71c>
 8005b48:	4b30      	ldr	r3, [pc, #192]	; (8005c0c <checkAktifCalisma+0x6f8>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d06f      	beq.n	8005c30 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b54:	4829      	ldr	r0, [pc, #164]	; (8005bfc <checkAktifCalisma+0x6e8>)
 8005b56:	f003 f855 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d167      	bne.n	8005c30 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b64:	482a      	ldr	r0, [pc, #168]	; (8005c10 <checkAktifCalisma+0x6fc>)
 8005b66:	f003 f84d 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <checkAktifCalisma+0x664>
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <checkAktifCalisma+0x700>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d15b      	bne.n	8005c30 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005b78:	2140      	movs	r1, #64	; 0x40
 8005b7a:	4825      	ldr	r0, [pc, #148]	; (8005c10 <checkAktifCalisma+0x6fc>)
 8005b7c:	f003 f842 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d10f      	bne.n	8005ba6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b8a:	481c      	ldr	r0, [pc, #112]	; (8005bfc <checkAktifCalisma+0x6e8>)
 8005b8c:	f003 f83a 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b9a:	4818      	ldr	r0, [pc, #96]	; (8005bfc <checkAktifCalisma+0x6e8>)
 8005b9c:	f003 f832 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d003      	beq.n	8005bae <checkAktifCalisma+0x69a>
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	; (8005c18 <checkAktifCalisma+0x704>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d040      	beq.n	8005c30 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005bae:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <checkAktifCalisma+0x708>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	f083 0301 	eor.w	r3, r3, #1
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d039      	beq.n	8005c30 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005bbc:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <checkAktifCalisma+0x70c>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f083 0301 	eor.w	r3, r3, #1
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d032      	beq.n	8005c30 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005bca:	4b16      	ldr	r3, [pc, #88]	; (8005c24 <checkAktifCalisma+0x710>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	f083 0301 	eor.w	r3, r3, #1
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02b      	beq.n	8005c30 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005bd8:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <checkAktifCalisma+0x714>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f083 0301 	eor.w	r3, r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d024      	beq.n	8005c30 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005be6:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <checkAktifCalisma+0x718>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f083 0301 	eor.w	r3, r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01d      	beq.n	8005c30 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005bf4:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <checkAktifCalisma+0x704>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	e01c      	b.n	8005c36 <checkAktifCalisma+0x722>
 8005bfc:	40010c00 	.word	0x40010c00
 8005c00:	20000b49 	.word	0x20000b49
 8005c04:	20000b3b 	.word	0x20000b3b
 8005c08:	20000b7e 	.word	0x20000b7e
 8005c0c:	20000b7f 	.word	0x20000b7f
 8005c10:	40011000 	.word	0x40011000
 8005c14:	20000b3c 	.word	0x20000b3c
 8005c18:	20000b62 	.word	0x20000b62
 8005c1c:	20000b61 	.word	0x20000b61
 8005c20:	20000b65 	.word	0x20000b65
 8005c24:	20000b64 	.word	0x20000b64
 8005c28:	20000b63 	.word	0x20000b63
 8005c2c:	20000b67 	.word	0x20000b67
		} else {
			devmotoryukaricalisiyor=0;
 8005c30:	4b64      	ldr	r3, [pc, #400]	; (8005dc4 <checkAktifCalisma+0x8b0>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005c36:	4b63      	ldr	r3, [pc, #396]	; (8005dc4 <checkAktifCalisma+0x8b0>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005c3e:	2201      	movs	r2, #1
 8005c40:	2120      	movs	r1, #32
 8005c42:	4861      	ldr	r0, [pc, #388]	; (8005dc8 <checkAktifCalisma+0x8b4>)
 8005c44:	f002 fff5 	bl	8008c32 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005c48:	4b60      	ldr	r3, [pc, #384]	; (8005dcc <checkAktifCalisma+0x8b8>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005c4e:	4b5f      	ldr	r3, [pc, #380]	; (8005dcc <checkAktifCalisma+0x8b8>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d025      	beq.n	8005ca2 <checkAktifCalisma+0x78e>
 8005c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c5a:	485d      	ldr	r0, [pc, #372]	; (8005dd0 <checkAktifCalisma+0x8bc>)
 8005c5c:	f002 ffd2 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d007      	beq.n	8005c76 <checkAktifCalisma+0x762>
 8005c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c6a:	4857      	ldr	r0, [pc, #348]	; (8005dc8 <checkAktifCalisma+0x8b4>)
 8005c6c:	f002 ffca 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d115      	bne.n	8005ca2 <checkAktifCalisma+0x78e>
 8005c76:	4b57      	ldr	r3, [pc, #348]	; (8005dd4 <checkAktifCalisma+0x8c0>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d011      	beq.n	8005ca2 <checkAktifCalisma+0x78e>
 8005c7e:	4b56      	ldr	r3, [pc, #344]	; (8005dd8 <checkAktifCalisma+0x8c4>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00d      	beq.n	8005ca2 <checkAktifCalisma+0x78e>
 8005c86:	4b55      	ldr	r3, [pc, #340]	; (8005ddc <checkAktifCalisma+0x8c8>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f083 0301 	eor.w	r3, r3, #1
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005c94:	4b52      	ldr	r3, [pc, #328]	; (8005de0 <checkAktifCalisma+0x8cc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a52      	ldr	r2, [pc, #328]	; (8005de4 <checkAktifCalisma+0x8d0>)
 8005c9a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005c9c:	4b4f      	ldr	r3, [pc, #316]	; (8005ddc <checkAktifCalisma+0x8c8>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005ca2:	4b4f      	ldr	r3, [pc, #316]	; (8005de0 <checkAktifCalisma+0x8cc>)
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b4f      	ldr	r3, [pc, #316]	; (8005de4 <checkAktifCalisma+0x8d0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	4a4e      	ldr	r2, [pc, #312]	; (8005de8 <checkAktifCalisma+0x8d4>)
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d303      	bcc.n	8005cbc <checkAktifCalisma+0x7a8>
 8005cb4:	4b49      	ldr	r3, [pc, #292]	; (8005ddc <checkAktifCalisma+0x8c8>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10d      	bne.n	8005cd8 <checkAktifCalisma+0x7c4>
 8005cbc:	4b45      	ldr	r3, [pc, #276]	; (8005dd4 <checkAktifCalisma+0x8c0>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	f083 0301 	eor.w	r3, r3, #1
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <checkAktifCalisma+0x7c4>
 8005cca:	4b43      	ldr	r3, [pc, #268]	; (8005dd8 <checkAktifCalisma+0x8c4>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	f083 0301 	eor.w	r3, r3, #1
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2120      	movs	r1, #32
 8005cdc:	483a      	ldr	r0, [pc, #232]	; (8005dc8 <checkAktifCalisma+0x8b4>)
 8005cde:	f002 ffa8 	bl	8008c32 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005ce2:	4b3a      	ldr	r3, [pc, #232]	; (8005dcc <checkAktifCalisma+0x8b8>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005ce8:	4b3c      	ldr	r3, [pc, #240]	; (8005ddc <checkAktifCalisma+0x8c8>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005cee:	4b3f      	ldr	r3, [pc, #252]	; (8005dec <checkAktifCalisma+0x8d8>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f040 8088 	bne.w	8005e08 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005cf8:	4b3d      	ldr	r3, [pc, #244]	; (8005df0 <checkAktifCalisma+0x8dc>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d003      	beq.n	8005d08 <checkAktifCalisma+0x7f4>
 8005d00:	4b3b      	ldr	r3, [pc, #236]	; (8005df0 <checkAktifCalisma+0x8dc>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d17f      	bne.n	8005e08 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005d08:	4b32      	ldr	r3, [pc, #200]	; (8005dd4 <checkAktifCalisma+0x8c0>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d07b      	beq.n	8005e08 <checkAktifCalisma+0x8f4>
 8005d10:	4b31      	ldr	r3, [pc, #196]	; (8005dd8 <checkAktifCalisma+0x8c4>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d077      	beq.n	8005e08 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005d18:	2140      	movs	r1, #64	; 0x40
 8005d1a:	482b      	ldr	r0, [pc, #172]	; (8005dc8 <checkAktifCalisma+0x8b4>)
 8005d1c:	f002 ff72 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d170      	bne.n	8005e08 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d2a:	4827      	ldr	r0, [pc, #156]	; (8005dc8 <checkAktifCalisma+0x8b4>)
 8005d2c:	f002 ff6a 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <checkAktifCalisma+0x82a>
 8005d36:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <checkAktifCalisma+0x8e0>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d164      	bne.n	8005e08 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d42:	4823      	ldr	r0, [pc, #140]	; (8005dd0 <checkAktifCalisma+0x8bc>)
 8005d44:	f002 ff5e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d10f      	bne.n	8005d6e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d52:	481f      	ldr	r0, [pc, #124]	; (8005dd0 <checkAktifCalisma+0x8bc>)
 8005d54:	f002 ff56 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d107      	bne.n	8005d6e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d62:	481b      	ldr	r0, [pc, #108]	; (8005dd0 <checkAktifCalisma+0x8bc>)
 8005d64:	f002 ff4e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d003      	beq.n	8005d76 <checkAktifCalisma+0x862>
 8005d6e:	4b22      	ldr	r3, [pc, #136]	; (8005df8 <checkAktifCalisma+0x8e4>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d048      	beq.n	8005e08 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005d76:	4b21      	ldr	r3, [pc, #132]	; (8005dfc <checkAktifCalisma+0x8e8>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	f083 0301 	eor.w	r3, r3, #1
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d041      	beq.n	8005e08 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005d84:	4b1e      	ldr	r3, [pc, #120]	; (8005e00 <checkAktifCalisma+0x8ec>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f083 0301 	eor.w	r3, r3, #1
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d03a      	beq.n	8005e08 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005d92:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <checkAktifCalisma+0x8f0>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	f083 0301 	eor.w	r3, r3, #1
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d033      	beq.n	8005e08 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <checkAktifCalisma+0x8b8>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f083 0301 	eor.w	r3, r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d02c      	beq.n	8005e08 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <checkAktifCalisma+0x8b0>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f083 0301 	eor.w	r3, r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d025      	beq.n	8005e08 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005dbc:	4b0e      	ldr	r3, [pc, #56]	; (8005df8 <checkAktifCalisma+0x8e4>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e024      	b.n	8005e0e <checkAktifCalisma+0x8fa>
 8005dc4:	20000b62 	.word	0x20000b62
 8005dc8:	40011000 	.word	0x40011000
 8005dcc:	20000b66 	.word	0x20000b66
 8005dd0:	40010c00 	.word	0x40010c00
 8005dd4:	20000b7e 	.word	0x20000b7e
 8005dd8:	20000b7f 	.word	0x20000b7f
 8005ddc:	20000b5e 	.word	0x20000b5e
 8005de0:	20000b08 	.word	0x20000b08
 8005de4:	20000b14 	.word	0x20000b14
 8005de8:	20000b42 	.word	0x20000b42
 8005dec:	20000b49 	.word	0x20000b49
 8005df0:	20000b3b 	.word	0x20000b3b
 8005df4:	20000b3d 	.word	0x20000b3d
 8005df8:	20000b63 	.word	0x20000b63
 8005dfc:	20000b61 	.word	0x20000b61
 8005e00:	20000b65 	.word	0x20000b65
 8005e04:	20000b64 	.word	0x20000b64
		} else {
			devmotorasagicalisiyor=0;
 8005e08:	4b96      	ldr	r3, [pc, #600]	; (8006064 <checkAktifCalisma+0xb50>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005e0e:	4b95      	ldr	r3, [pc, #596]	; (8006064 <checkAktifCalisma+0xb50>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005e16:	2201      	movs	r2, #1
 8005e18:	2110      	movs	r1, #16
 8005e1a:	4893      	ldr	r0, [pc, #588]	; (8006068 <checkAktifCalisma+0xb54>)
 8005e1c:	f002 ff09 	bl	8008c32 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005e20:	4b92      	ldr	r3, [pc, #584]	; (800606c <checkAktifCalisma+0xb58>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005e26:	4b91      	ldr	r3, [pc, #580]	; (800606c <checkAktifCalisma+0xb58>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d024      	beq.n	8005e78 <checkAktifCalisma+0x964>
 8005e2e:	2140      	movs	r1, #64	; 0x40
 8005e30:	488d      	ldr	r0, [pc, #564]	; (8006068 <checkAktifCalisma+0xb54>)
 8005e32:	f002 fee7 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d007      	beq.n	8005e4c <checkAktifCalisma+0x938>
 8005e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e40:	4889      	ldr	r0, [pc, #548]	; (8006068 <checkAktifCalisma+0xb54>)
 8005e42:	f002 fedf 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d115      	bne.n	8005e78 <checkAktifCalisma+0x964>
 8005e4c:	4b88      	ldr	r3, [pc, #544]	; (8006070 <checkAktifCalisma+0xb5c>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d011      	beq.n	8005e78 <checkAktifCalisma+0x964>
 8005e54:	4b87      	ldr	r3, [pc, #540]	; (8006074 <checkAktifCalisma+0xb60>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <checkAktifCalisma+0x964>
 8005e5c:	4b86      	ldr	r3, [pc, #536]	; (8006078 <checkAktifCalisma+0xb64>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f083 0301 	eor.w	r3, r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d006      	beq.n	8005e78 <checkAktifCalisma+0x964>
			timer2=millis;
 8005e6a:	4b84      	ldr	r3, [pc, #528]	; (800607c <checkAktifCalisma+0xb68>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a84      	ldr	r2, [pc, #528]	; (8006080 <checkAktifCalisma+0xb6c>)
 8005e70:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005e72:	4b81      	ldr	r3, [pc, #516]	; (8006078 <checkAktifCalisma+0xb64>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005e78:	4b80      	ldr	r3, [pc, #512]	; (800607c <checkAktifCalisma+0xb68>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4b80      	ldr	r3, [pc, #512]	; (8006080 <checkAktifCalisma+0xb6c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	4a80      	ldr	r2, [pc, #512]	; (8006084 <checkAktifCalisma+0xb70>)
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d303      	bcc.n	8005e92 <checkAktifCalisma+0x97e>
 8005e8a:	4b7b      	ldr	r3, [pc, #492]	; (8006078 <checkAktifCalisma+0xb64>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10d      	bne.n	8005eae <checkAktifCalisma+0x99a>
 8005e92:	4b77      	ldr	r3, [pc, #476]	; (8006070 <checkAktifCalisma+0xb5c>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f083 0301 	eor.w	r3, r3, #1
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <checkAktifCalisma+0x99a>
 8005ea0:	4b74      	ldr	r3, [pc, #464]	; (8006074 <checkAktifCalisma+0xb60>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	f083 0301 	eor.w	r3, r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2110      	movs	r1, #16
 8005eb2:	486d      	ldr	r0, [pc, #436]	; (8006068 <checkAktifCalisma+0xb54>)
 8005eb4:	f002 febd 	bl	8008c32 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005eb8:	4b6c      	ldr	r3, [pc, #432]	; (800606c <checkAktifCalisma+0xb58>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005ebe:	4b6e      	ldr	r3, [pc, #440]	; (8006078 <checkAktifCalisma+0xb64>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ec8:	486f      	ldr	r0, [pc, #444]	; (8006088 <checkAktifCalisma+0xb74>)
 8005eca:	f002 fe9b 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d120      	bne.n	8005f16 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005ed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ed8:	486b      	ldr	r0, [pc, #428]	; (8006088 <checkAktifCalisma+0xb74>)
 8005eda:	f002 fe93 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d118      	bne.n	8005f16 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005ee4:	2104      	movs	r1, #4
 8005ee6:	4868      	ldr	r0, [pc, #416]	; (8006088 <checkAktifCalisma+0xb74>)
 8005ee8:	f002 fe8c 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d111      	bne.n	8005f16 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005ef2:	2102      	movs	r1, #2
 8005ef4:	4864      	ldr	r0, [pc, #400]	; (8006088 <checkAktifCalisma+0xb74>)
 8005ef6:	f002 fe85 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005f00:	2101      	movs	r1, #1
 8005f02:	4861      	ldr	r0, [pc, #388]	; (8006088 <checkAktifCalisma+0xb74>)
 8005f04:	f002 fe7e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <checkAktifCalisma+0xa02>
			makineStop=1;
 8005f0e:	4b5f      	ldr	r3, [pc, #380]	; (800608c <checkAktifCalisma+0xb78>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	e002      	b.n	8005f1c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005f16:	4b5d      	ldr	r3, [pc, #372]	; (800608c <checkAktifCalisma+0xb78>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005f1c:	4b5c      	ldr	r3, [pc, #368]	; (8006090 <checkAktifCalisma+0xb7c>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d144      	bne.n	8005fae <checkAktifCalisma+0xa9a>
 8005f24:	4b5b      	ldr	r3, [pc, #364]	; (8006094 <checkAktifCalisma+0xb80>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d003      	beq.n	8005f34 <checkAktifCalisma+0xa20>
 8005f2c:	4b59      	ldr	r3, [pc, #356]	; (8006094 <checkAktifCalisma+0xb80>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d13c      	bne.n	8005fae <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f34:	2180      	movs	r1, #128	; 0x80
 8005f36:	484c      	ldr	r0, [pc, #304]	; (8006068 <checkAktifCalisma+0xb54>)
 8005f38:	f002 fe64 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <checkAktifCalisma+0xa36>
 8005f42:	4b55      	ldr	r3, [pc, #340]	; (8006098 <checkAktifCalisma+0xb84>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00b      	beq.n	8005f62 <checkAktifCalisma+0xa4e>
 8005f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f4e:	484e      	ldr	r0, [pc, #312]	; (8006088 <checkAktifCalisma+0xb74>)
 8005f50:	f002 fe58 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d129      	bne.n	8005fae <checkAktifCalisma+0xa9a>
 8005f5a:	4b4f      	ldr	r3, [pc, #316]	; (8006098 <checkAktifCalisma+0xb84>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d125      	bne.n	8005fae <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005f62:	2104      	movs	r1, #4
 8005f64:	4840      	ldr	r0, [pc, #256]	; (8006068 <checkAktifCalisma+0xb54>)
 8005f66:	f002 fe4d 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d003      	beq.n	8005f78 <checkAktifCalisma+0xa64>
 8005f70:	4b4a      	ldr	r3, [pc, #296]	; (800609c <checkAktifCalisma+0xb88>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d11a      	bne.n	8005fae <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f78:	2102      	movs	r1, #2
 8005f7a:	483b      	ldr	r0, [pc, #236]	; (8006068 <checkAktifCalisma+0xb54>)
 8005f7c:	f002 fe42 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d113      	bne.n	8005fae <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005f86:	4b46      	ldr	r3, [pc, #280]	; (80060a0 <checkAktifCalisma+0xb8c>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	f083 0301 	eor.w	r3, r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00c      	beq.n	8005fae <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005f94:	4b3d      	ldr	r3, [pc, #244]	; (800608c <checkAktifCalisma+0xb78>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d008      	beq.n	8005fae <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005f9c:	4b41      	ldr	r3, [pc, #260]	; (80060a4 <checkAktifCalisma+0xb90>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005fa2:	4b36      	ldr	r3, [pc, #216]	; (800607c <checkAktifCalisma+0xb68>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a40      	ldr	r2, [pc, #256]	; (80060a8 <checkAktifCalisma+0xb94>)
 8005fa8:	6013      	str	r3, [r2, #0]
			bekle();
 8005faa:	f7ff f87d 	bl	80050a8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005fae:	4b33      	ldr	r3, [pc, #204]	; (800607c <checkAktifCalisma+0xb68>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b3d      	ldr	r3, [pc, #244]	; (80060a8 <checkAktifCalisma+0xb94>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	4a3c      	ldr	r2, [pc, #240]	; (80060ac <checkAktifCalisma+0xb98>)
 8005fba:	7812      	ldrb	r2, [r2, #0]
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d211      	bcs.n	8005fe4 <checkAktifCalisma+0xad0>
 8005fc0:	2104      	movs	r1, #4
 8005fc2:	4829      	ldr	r0, [pc, #164]	; (8006068 <checkAktifCalisma+0xb54>)
 8005fc4:	f002 fe1e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <checkAktifCalisma+0xad0>
 8005fce:	4b33      	ldr	r3, [pc, #204]	; (800609c <checkAktifCalisma+0xb88>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <checkAktifCalisma+0xad0>
 8005fd6:	4b2d      	ldr	r3, [pc, #180]	; (800608c <checkAktifCalisma+0xb78>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	f083 0301 	eor.w	r3, r3, #1
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005fe4:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <checkAktifCalisma+0xb90>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005fea:	4b29      	ldr	r3, [pc, #164]	; (8006090 <checkAktifCalisma+0xb7c>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d160      	bne.n	80060b4 <checkAktifCalisma+0xba0>
 8005ff2:	4b28      	ldr	r3, [pc, #160]	; (8006094 <checkAktifCalisma+0xb80>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d003      	beq.n	8006002 <checkAktifCalisma+0xaee>
 8005ffa:	4b26      	ldr	r3, [pc, #152]	; (8006094 <checkAktifCalisma+0xb80>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d158      	bne.n	80060b4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006002:	2104      	movs	r1, #4
 8006004:	4818      	ldr	r0, [pc, #96]	; (8006068 <checkAktifCalisma+0xb54>)
 8006006:	f002 fdfd 	bl	8008c04 <HAL_GPIO_ReadPin>
 800600a:	4603      	mov	r3, r0
 800600c:	2b01      	cmp	r3, #1
 800600e:	d003      	beq.n	8006018 <checkAktifCalisma+0xb04>
 8006010:	4b22      	ldr	r3, [pc, #136]	; (800609c <checkAktifCalisma+0xb88>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d14d      	bne.n	80060b4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006018:	2102      	movs	r1, #2
 800601a:	4813      	ldr	r0, [pc, #76]	; (8006068 <checkAktifCalisma+0xb54>)
 800601c:	f002 fdf2 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d146      	bne.n	80060b4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006026:	2180      	movs	r1, #128	; 0x80
 8006028:	480f      	ldr	r0, [pc, #60]	; (8006068 <checkAktifCalisma+0xb54>)
 800602a:	f002 fdeb 	bl	8008c04 <HAL_GPIO_ReadPin>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <checkAktifCalisma+0xb28>
 8006034:	4b18      	ldr	r3, [pc, #96]	; (8006098 <checkAktifCalisma+0xb84>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00b      	beq.n	8006054 <checkAktifCalisma+0xb40>
 800603c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006040:	4811      	ldr	r0, [pc, #68]	; (8006088 <checkAktifCalisma+0xb74>)
 8006042:	f002 fddf 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d133      	bne.n	80060b4 <checkAktifCalisma+0xba0>
 800604c:	4b12      	ldr	r3, [pc, #72]	; (8006098 <checkAktifCalisma+0xb84>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d12f      	bne.n	80060b4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006054:	4b0d      	ldr	r3, [pc, #52]	; (800608c <checkAktifCalisma+0xb78>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d02b      	beq.n	80060b4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800605c:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <checkAktifCalisma+0xb9c>)
 800605e:	2201      	movs	r2, #1
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	e02a      	b.n	80060ba <checkAktifCalisma+0xba6>
 8006064:	20000b63 	.word	0x20000b63
 8006068:	40011000 	.word	0x40011000
 800606c:	20000b67 	.word	0x20000b67
 8006070:	20000b7e 	.word	0x20000b7e
 8006074:	20000b7f 	.word	0x20000b7f
 8006078:	20000b5f 	.word	0x20000b5f
 800607c:	20000b08 	.word	0x20000b08
 8006080:	20000b14 	.word	0x20000b14
 8006084:	20000b42 	.word	0x20000b42
 8006088:	40010c00 	.word	0x40010c00
 800608c:	20000b6e 	.word	0x20000b6e
 8006090:	20000b35 	.word	0x20000b35
 8006094:	20000b34 	.word	0x20000b34
 8006098:	20000b38 	.word	0x20000b38
 800609c:	20000b32 	.word	0x20000b32
 80060a0:	20000b5b 	.word	0x20000b5b
 80060a4:	20000b6f 	.word	0x20000b6f
 80060a8:	20000b0c 	.word	0x20000b0c
 80060ac:	20000b45 	.word	0x20000b45
 80060b0:	20000b70 	.word	0x20000b70
		} else {
			kapi1butonkontrol=0;
 80060b4:	4b8b      	ldr	r3, [pc, #556]	; (80062e4 <checkAktifCalisma+0xdd0>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80060ba:	4b8b      	ldr	r3, [pc, #556]	; (80062e8 <checkAktifCalisma+0xdd4>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d121      	bne.n	8006106 <checkAktifCalisma+0xbf2>
 80060c2:	4b8a      	ldr	r3, [pc, #552]	; (80062ec <checkAktifCalisma+0xdd8>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d003      	beq.n	80060d2 <checkAktifCalisma+0xbbe>
 80060ca:	4b88      	ldr	r3, [pc, #544]	; (80062ec <checkAktifCalisma+0xdd8>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d119      	bne.n	8006106 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80060d2:	2104      	movs	r1, #4
 80060d4:	4886      	ldr	r0, [pc, #536]	; (80062f0 <checkAktifCalisma+0xddc>)
 80060d6:	f002 fd95 	bl	8008c04 <HAL_GPIO_ReadPin>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d003      	beq.n	80060e8 <checkAktifCalisma+0xbd4>
 80060e0:	4b84      	ldr	r3, [pc, #528]	; (80062f4 <checkAktifCalisma+0xde0>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10e      	bne.n	8006106 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80060e8:	2102      	movs	r1, #2
 80060ea:	4881      	ldr	r0, [pc, #516]	; (80062f0 <checkAktifCalisma+0xddc>)
 80060ec:	f002 fd8a 	bl	8008c04 <HAL_GPIO_ReadPin>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d107      	bne.n	8006106 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80060f6:	4b80      	ldr	r3, [pc, #512]	; (80062f8 <checkAktifCalisma+0xde4>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80060fe:	4b7f      	ldr	r3, [pc, #508]	; (80062fc <checkAktifCalisma+0xde8>)
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	e002      	b.n	800610c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006106:	4b7d      	ldr	r3, [pc, #500]	; (80062fc <checkAktifCalisma+0xde8>)
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800610c:	4b75      	ldr	r3, [pc, #468]	; (80062e4 <checkAktifCalisma+0xdd0>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d107      	bne.n	8006124 <checkAktifCalisma+0xc10>
 8006114:	4b79      	ldr	r3, [pc, #484]	; (80062fc <checkAktifCalisma+0xde8>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d103      	bne.n	8006124 <checkAktifCalisma+0xc10>
 800611c:	4b78      	ldr	r3, [pc, #480]	; (8006300 <checkAktifCalisma+0xdec>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006124:	2201      	movs	r2, #1
 8006126:	2180      	movs	r1, #128	; 0x80
 8006128:	4876      	ldr	r0, [pc, #472]	; (8006304 <checkAktifCalisma+0xdf0>)
 800612a:	f002 fd82 	bl	8008c32 <HAL_GPIO_WritePin>
 800612e:	e004      	b.n	800613a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006130:	2200      	movs	r2, #0
 8006132:	2180      	movs	r1, #128	; 0x80
 8006134:	4873      	ldr	r0, [pc, #460]	; (8006304 <checkAktifCalisma+0xdf0>)
 8006136:	f002 fd7c 	bl	8008c32 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800613a:	4b73      	ldr	r3, [pc, #460]	; (8006308 <checkAktifCalisma+0xdf4>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d141      	bne.n	80061c6 <checkAktifCalisma+0xcb2>
 8006142:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <checkAktifCalisma+0xdd8>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d003      	beq.n	8006152 <checkAktifCalisma+0xc3e>
 800614a:	4b68      	ldr	r3, [pc, #416]	; (80062ec <checkAktifCalisma+0xdd8>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b03      	cmp	r3, #3
 8006150:	d139      	bne.n	80061c6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006156:	4866      	ldr	r0, [pc, #408]	; (80062f0 <checkAktifCalisma+0xddc>)
 8006158:	f002 fd54 	bl	8008c04 <HAL_GPIO_ReadPin>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <checkAktifCalisma+0xc56>
 8006162:	4b6a      	ldr	r3, [pc, #424]	; (800630c <checkAktifCalisma+0xdf8>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <checkAktifCalisma+0xc6e>
 800616a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800616e:	4868      	ldr	r0, [pc, #416]	; (8006310 <checkAktifCalisma+0xdfc>)
 8006170:	f002 fd48 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d125      	bne.n	80061c6 <checkAktifCalisma+0xcb2>
 800617a:	4b64      	ldr	r3, [pc, #400]	; (800630c <checkAktifCalisma+0xdf8>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d121      	bne.n	80061c6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006182:	2102      	movs	r1, #2
 8006184:	485a      	ldr	r0, [pc, #360]	; (80062f0 <checkAktifCalisma+0xddc>)
 8006186:	f002 fd3d 	bl	8008c04 <HAL_GPIO_ReadPin>
 800618a:	4603      	mov	r3, r0
 800618c:	2b01      	cmp	r3, #1
 800618e:	d11a      	bne.n	80061c6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006190:	2104      	movs	r1, #4
 8006192:	4857      	ldr	r0, [pc, #348]	; (80062f0 <checkAktifCalisma+0xddc>)
 8006194:	f002 fd36 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d113      	bne.n	80061c6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800619e:	4b56      	ldr	r3, [pc, #344]	; (80062f8 <checkAktifCalisma+0xde4>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00f      	beq.n	80061c6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80061a6:	4b5b      	ldr	r3, [pc, #364]	; (8006314 <checkAktifCalisma+0xe00>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	f083 0301 	eor.w	r3, r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80061b4:	4b58      	ldr	r3, [pc, #352]	; (8006318 <checkAktifCalisma+0xe04>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80061ba:	4b58      	ldr	r3, [pc, #352]	; (800631c <checkAktifCalisma+0xe08>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a58      	ldr	r2, [pc, #352]	; (8006320 <checkAktifCalisma+0xe0c>)
 80061c0:	6013      	str	r3, [r2, #0]
			bekle();
 80061c2:	f7fe ff71 	bl	80050a8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80061c6:	4b55      	ldr	r3, [pc, #340]	; (800631c <checkAktifCalisma+0xe08>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b55      	ldr	r3, [pc, #340]	; (8006320 <checkAktifCalisma+0xe0c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	4a54      	ldr	r2, [pc, #336]	; (8006324 <checkAktifCalisma+0xe10>)
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d20d      	bcs.n	80061f4 <checkAktifCalisma+0xce0>
 80061d8:	2102      	movs	r1, #2
 80061da:	4845      	ldr	r0, [pc, #276]	; (80062f0 <checkAktifCalisma+0xddc>)
 80061dc:	f002 fd12 	bl	8008c04 <HAL_GPIO_ReadPin>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d006      	beq.n	80061f4 <checkAktifCalisma+0xce0>
 80061e6:	4b44      	ldr	r3, [pc, #272]	; (80062f8 <checkAktifCalisma+0xde4>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	f083 0301 	eor.w	r3, r3, #1
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80061f4:	4b48      	ldr	r3, [pc, #288]	; (8006318 <checkAktifCalisma+0xe04>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80061fa:	4b43      	ldr	r3, [pc, #268]	; (8006308 <checkAktifCalisma+0xdf4>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d135      	bne.n	800626e <checkAktifCalisma+0xd5a>
 8006202:	4b3a      	ldr	r3, [pc, #232]	; (80062ec <checkAktifCalisma+0xdd8>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d003      	beq.n	8006212 <checkAktifCalisma+0xcfe>
 800620a:	4b38      	ldr	r3, [pc, #224]	; (80062ec <checkAktifCalisma+0xdd8>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b03      	cmp	r3, #3
 8006210:	d12d      	bne.n	800626e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006216:	4836      	ldr	r0, [pc, #216]	; (80062f0 <checkAktifCalisma+0xddc>)
 8006218:	f002 fcf4 	bl	8008c04 <HAL_GPIO_ReadPin>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d103      	bne.n	800622a <checkAktifCalisma+0xd16>
 8006222:	4b3a      	ldr	r3, [pc, #232]	; (800630c <checkAktifCalisma+0xdf8>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <checkAktifCalisma+0xd2e>
 800622a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800622e:	4838      	ldr	r0, [pc, #224]	; (8006310 <checkAktifCalisma+0xdfc>)
 8006230:	f002 fce8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d119      	bne.n	800626e <checkAktifCalisma+0xd5a>
 800623a:	4b34      	ldr	r3, [pc, #208]	; (800630c <checkAktifCalisma+0xdf8>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d115      	bne.n	800626e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006242:	2102      	movs	r1, #2
 8006244:	482a      	ldr	r0, [pc, #168]	; (80062f0 <checkAktifCalisma+0xddc>)
 8006246:	f002 fcdd 	bl	8008c04 <HAL_GPIO_ReadPin>
 800624a:	4603      	mov	r3, r0
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10e      	bne.n	800626e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006250:	2104      	movs	r1, #4
 8006252:	4827      	ldr	r0, [pc, #156]	; (80062f0 <checkAktifCalisma+0xddc>)
 8006254:	f002 fcd6 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d107      	bne.n	800626e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800625e:	4b26      	ldr	r3, [pc, #152]	; (80062f8 <checkAktifCalisma+0xde4>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8006266:	4b30      	ldr	r3, [pc, #192]	; (8006328 <checkAktifCalisma+0xe14>)
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	e002      	b.n	8006274 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800626e:	4b2e      	ldr	r3, [pc, #184]	; (8006328 <checkAktifCalisma+0xe14>)
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006274:	4b24      	ldr	r3, [pc, #144]	; (8006308 <checkAktifCalisma+0xdf4>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d11d      	bne.n	80062b8 <checkAktifCalisma+0xda4>
 800627c:	4b1b      	ldr	r3, [pc, #108]	; (80062ec <checkAktifCalisma+0xdd8>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d003      	beq.n	800628c <checkAktifCalisma+0xd78>
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <checkAktifCalisma+0xdd8>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b03      	cmp	r3, #3
 800628a:	d115      	bne.n	80062b8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800628c:	2102      	movs	r1, #2
 800628e:	4818      	ldr	r0, [pc, #96]	; (80062f0 <checkAktifCalisma+0xddc>)
 8006290:	f002 fcb8 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006294:	4603      	mov	r3, r0
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10e      	bne.n	80062b8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800629a:	2104      	movs	r1, #4
 800629c:	4814      	ldr	r0, [pc, #80]	; (80062f0 <checkAktifCalisma+0xddc>)
 800629e:	f002 fcb1 	bl	8008c04 <HAL_GPIO_ReadPin>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d107      	bne.n	80062b8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80062a8:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <checkAktifCalisma+0xde4>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80062b0:	4b1e      	ldr	r3, [pc, #120]	; (800632c <checkAktifCalisma+0xe18>)
 80062b2:	2201      	movs	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e002      	b.n	80062be <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80062b8:	4b1c      	ldr	r3, [pc, #112]	; (800632c <checkAktifCalisma+0xe18>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80062be:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <checkAktifCalisma+0xe14>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d107      	bne.n	80062d6 <checkAktifCalisma+0xdc2>
 80062c6:	4b19      	ldr	r3, [pc, #100]	; (800632c <checkAktifCalisma+0xe18>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d103      	bne.n	80062d6 <checkAktifCalisma+0xdc2>
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <checkAktifCalisma+0xe04>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d02c      	beq.n	8006330 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80062d6:	2201      	movs	r2, #1
 80062d8:	2140      	movs	r1, #64	; 0x40
 80062da:	480a      	ldr	r0, [pc, #40]	; (8006304 <checkAktifCalisma+0xdf0>)
 80062dc:	f002 fca9 	bl	8008c32 <HAL_GPIO_WritePin>
 80062e0:	e02b      	b.n	800633a <checkAktifCalisma+0xe26>
 80062e2:	bf00      	nop
 80062e4:	20000b70 	.word	0x20000b70
 80062e8:	20000b35 	.word	0x20000b35
 80062ec:	20000b34 	.word	0x20000b34
 80062f0:	40011000 	.word	0x40011000
 80062f4:	20000b32 	.word	0x20000b32
 80062f8:	20000b6e 	.word	0x20000b6e
 80062fc:	20000b71 	.word	0x20000b71
 8006300:	20000b6f 	.word	0x20000b6f
 8006304:	40010800 	.word	0x40010800
 8006308:	20000b36 	.word	0x20000b36
 800630c:	20000b38 	.word	0x20000b38
 8006310:	40010c00 	.word	0x40010c00
 8006314:	20000b5b 	.word	0x20000b5b
 8006318:	20000b72 	.word	0x20000b72
 800631c:	20000b08 	.word	0x20000b08
 8006320:	20000b0c 	.word	0x20000b0c
 8006324:	20000b46 	.word	0x20000b46
 8006328:	20000b73 	.word	0x20000b73
 800632c:	20000b74 	.word	0x20000b74
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006330:	2200      	movs	r2, #0
 8006332:	2140      	movs	r1, #64	; 0x40
 8006334:	488d      	ldr	r0, [pc, #564]	; (800656c <checkAktifCalisma+0x1058>)
 8006336:	f002 fc7c 	bl	8008c32 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800633a:	4b8d      	ldr	r3, [pc, #564]	; (8006570 <checkAktifCalisma+0x105c>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <checkAktifCalisma+0xe36>
 8006342:	4b8b      	ldr	r3, [pc, #556]	; (8006570 <checkAktifCalisma+0x105c>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d115      	bne.n	8006376 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800634a:	2104      	movs	r1, #4
 800634c:	4889      	ldr	r0, [pc, #548]	; (8006574 <checkAktifCalisma+0x1060>)
 800634e:	f002 fc59 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006352:	4603      	mov	r3, r0
 8006354:	2b01      	cmp	r3, #1
 8006356:	d003      	beq.n	8006360 <checkAktifCalisma+0xe4c>
 8006358:	4b87      	ldr	r3, [pc, #540]	; (8006578 <checkAktifCalisma+0x1064>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006360:	2102      	movs	r1, #2
 8006362:	4884      	ldr	r0, [pc, #528]	; (8006574 <checkAktifCalisma+0x1060>)
 8006364:	f002 fc4e 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 800636e:	4b83      	ldr	r3, [pc, #524]	; (800657c <checkAktifCalisma+0x1068>)
 8006370:	2201      	movs	r2, #1
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e002      	b.n	800637c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8006376:	4b81      	ldr	r3, [pc, #516]	; (800657c <checkAktifCalisma+0x1068>)
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800637c:	4b7c      	ldr	r3, [pc, #496]	; (8006570 <checkAktifCalisma+0x105c>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d003      	beq.n	800638c <checkAktifCalisma+0xe78>
 8006384:	4b7a      	ldr	r3, [pc, #488]	; (8006570 <checkAktifCalisma+0x105c>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d111      	bne.n	80063b0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800638c:	2102      	movs	r1, #2
 800638e:	4879      	ldr	r0, [pc, #484]	; (8006574 <checkAktifCalisma+0x1060>)
 8006390:	f002 fc38 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d10a      	bne.n	80063b0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800639a:	2104      	movs	r1, #4
 800639c:	4875      	ldr	r0, [pc, #468]	; (8006574 <checkAktifCalisma+0x1060>)
 800639e:	f002 fc31 	bl	8008c04 <HAL_GPIO_ReadPin>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80063a8:	4b75      	ldr	r3, [pc, #468]	; (8006580 <checkAktifCalisma+0x106c>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80063b0:	4b73      	ldr	r3, [pc, #460]	; (8006580 <checkAktifCalisma+0x106c>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80063b6:	4b71      	ldr	r3, [pc, #452]	; (800657c <checkAktifCalisma+0x1068>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00f      	beq.n	80063de <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80063be:	4b71      	ldr	r3, [pc, #452]	; (8006584 <checkAktifCalisma+0x1070>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d10b      	bne.n	80063de <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80063c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063ca:	486f      	ldr	r0, [pc, #444]	; (8006588 <checkAktifCalisma+0x1074>)
 80063cc:	f002 fc1a 	bl	8008c04 <HAL_GPIO_ReadPin>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80063d6:	4b6d      	ldr	r3, [pc, #436]	; (800658c <checkAktifCalisma+0x1078>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e002      	b.n	80063e4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80063de:	4b6b      	ldr	r3, [pc, #428]	; (800658c <checkAktifCalisma+0x1078>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80063e4:	4b66      	ldr	r3, [pc, #408]	; (8006580 <checkAktifCalisma+0x106c>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00f      	beq.n	800640c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80063ec:	4b65      	ldr	r3, [pc, #404]	; (8006584 <checkAktifCalisma+0x1070>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d10b      	bne.n	800640c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80063f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063f8:	4863      	ldr	r0, [pc, #396]	; (8006588 <checkAktifCalisma+0x1074>)
 80063fa:	f002 fc03 	bl	8008c04 <HAL_GPIO_ReadPin>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d103      	bne.n	800640c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8006404:	4b62      	ldr	r3, [pc, #392]	; (8006590 <checkAktifCalisma+0x107c>)
 8006406:	2201      	movs	r2, #1
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	e002      	b.n	8006412 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 800640c:	4b60      	ldr	r3, [pc, #384]	; (8006590 <checkAktifCalisma+0x107c>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006412:	4b60      	ldr	r3, [pc, #384]	; (8006594 <checkAktifCalisma+0x1080>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d137      	bne.n	800648a <checkAktifCalisma+0xf76>
 800641a:	4b5f      	ldr	r3, [pc, #380]	; (8006598 <checkAktifCalisma+0x1084>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d003      	beq.n	800642a <checkAktifCalisma+0xf16>
 8006422:	4b5d      	ldr	r3, [pc, #372]	; (8006598 <checkAktifCalisma+0x1084>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b03      	cmp	r3, #3
 8006428:	d12f      	bne.n	800648a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800642a:	4b54      	ldr	r3, [pc, #336]	; (800657c <checkAktifCalisma+0x1068>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <checkAktifCalisma+0xf26>
 8006432:	4b53      	ldr	r3, [pc, #332]	; (8006580 <checkAktifCalisma+0x106c>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d027      	beq.n	800648a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800643a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800643e:	484d      	ldr	r0, [pc, #308]	; (8006574 <checkAktifCalisma+0x1060>)
 8006440:	f002 fbe0 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d103      	bne.n	8006452 <checkAktifCalisma+0xf3e>
 800644a:	4b4e      	ldr	r3, [pc, #312]	; (8006584 <checkAktifCalisma+0x1070>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006452:	4b4e      	ldr	r3, [pc, #312]	; (800658c <checkAktifCalisma+0x1078>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d103      	bne.n	8006462 <checkAktifCalisma+0xf4e>
 800645a:	4b4d      	ldr	r3, [pc, #308]	; (8006590 <checkAktifCalisma+0x107c>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d013      	beq.n	800648a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8006462:	4b4e      	ldr	r3, [pc, #312]	; (800659c <checkAktifCalisma+0x1088>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00f      	beq.n	800648a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800646a:	4b4d      	ldr	r3, [pc, #308]	; (80065a0 <checkAktifCalisma+0x108c>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f083 0301 	eor.w	r3, r3, #1
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8006478:	4b4a      	ldr	r3, [pc, #296]	; (80065a4 <checkAktifCalisma+0x1090>)
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800647e:	4b4a      	ldr	r3, [pc, #296]	; (80065a8 <checkAktifCalisma+0x1094>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a4a      	ldr	r2, [pc, #296]	; (80065ac <checkAktifCalisma+0x1098>)
 8006484:	6013      	str	r3, [r2, #0]
			bekle();
 8006486:	f7fe fe0f 	bl	80050a8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800648a:	4b47      	ldr	r3, [pc, #284]	; (80065a8 <checkAktifCalisma+0x1094>)
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4b47      	ldr	r3, [pc, #284]	; (80065ac <checkAktifCalisma+0x1098>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	4a46      	ldr	r2, [pc, #280]	; (80065b0 <checkAktifCalisma+0x109c>)
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	4293      	cmp	r3, r2
 800649a:	d214      	bcs.n	80064c6 <checkAktifCalisma+0xfb2>
 800649c:	4b37      	ldr	r3, [pc, #220]	; (800657c <checkAktifCalisma+0x1068>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	f083 0301 	eor.w	r3, r3, #1
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d006      	beq.n	80064b8 <checkAktifCalisma+0xfa4>
 80064aa:	4b35      	ldr	r3, [pc, #212]	; (8006580 <checkAktifCalisma+0x106c>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	f083 0301 	eor.w	r3, r3, #1
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <checkAktifCalisma+0xfb2>
 80064b8:	4b38      	ldr	r3, [pc, #224]	; (800659c <checkAktifCalisma+0x1088>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f083 0301 	eor.w	r3, r3, #1
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80064c6:	4b37      	ldr	r3, [pc, #220]	; (80065a4 <checkAktifCalisma+0x1090>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80064cc:	4b31      	ldr	r3, [pc, #196]	; (8006594 <checkAktifCalisma+0x1080>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d12b      	bne.n	800652c <checkAktifCalisma+0x1018>
 80064d4:	4b30      	ldr	r3, [pc, #192]	; (8006598 <checkAktifCalisma+0x1084>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d003      	beq.n	80064e4 <checkAktifCalisma+0xfd0>
 80064dc:	4b2e      	ldr	r3, [pc, #184]	; (8006598 <checkAktifCalisma+0x1084>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d123      	bne.n	800652c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80064e4:	4b25      	ldr	r3, [pc, #148]	; (800657c <checkAktifCalisma+0x1068>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <checkAktifCalisma+0xfe0>
 80064ec:	4b24      	ldr	r3, [pc, #144]	; (8006580 <checkAktifCalisma+0x106c>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01b      	beq.n	800652c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80064f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064f8:	481e      	ldr	r0, [pc, #120]	; (8006574 <checkAktifCalisma+0x1060>)
 80064fa:	f002 fb83 	bl	8008c04 <HAL_GPIO_ReadPin>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <checkAktifCalisma+0xff8>
 8006504:	4b1f      	ldr	r3, [pc, #124]	; (8006584 <checkAktifCalisma+0x1070>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800650c:	4b1f      	ldr	r3, [pc, #124]	; (800658c <checkAktifCalisma+0x1078>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <checkAktifCalisma+0x1008>
 8006514:	4b1e      	ldr	r3, [pc, #120]	; (8006590 <checkAktifCalisma+0x107c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d007      	beq.n	800652c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800651c:	4b1f      	ldr	r3, [pc, #124]	; (800659c <checkAktifCalisma+0x1088>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006524:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <checkAktifCalisma+0x10a0>)
 8006526:	2201      	movs	r2, #1
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e002      	b.n	8006532 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 800652c:	4b21      	ldr	r3, [pc, #132]	; (80065b4 <checkAktifCalisma+0x10a0>)
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006532:	4b18      	ldr	r3, [pc, #96]	; (8006594 <checkAktifCalisma+0x1080>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d140      	bne.n	80065bc <checkAktifCalisma+0x10a8>
 800653a:	4b17      	ldr	r3, [pc, #92]	; (8006598 <checkAktifCalisma+0x1084>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d003      	beq.n	800654a <checkAktifCalisma+0x1036>
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <checkAktifCalisma+0x1084>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b03      	cmp	r3, #3
 8006548:	d138      	bne.n	80065bc <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800654a:	4b0c      	ldr	r3, [pc, #48]	; (800657c <checkAktifCalisma+0x1068>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <checkAktifCalisma+0x1046>
 8006552:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <checkAktifCalisma+0x106c>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d030      	beq.n	80065bc <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800655a:	4b10      	ldr	r3, [pc, #64]	; (800659c <checkAktifCalisma+0x1088>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d02c      	beq.n	80065bc <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8006562:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <checkAktifCalisma+0x10a4>)
 8006564:	2201      	movs	r2, #1
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	e02b      	b.n	80065c2 <checkAktifCalisma+0x10ae>
 800656a:	bf00      	nop
 800656c:	40010800 	.word	0x40010800
 8006570:	20000b39 	.word	0x20000b39
 8006574:	40011000 	.word	0x40011000
 8006578:	20000b32 	.word	0x20000b32
 800657c:	20000b78 	.word	0x20000b78
 8006580:	20000b79 	.word	0x20000b79
 8006584:	20000b38 	.word	0x20000b38
 8006588:	40010c00 	.word	0x40010c00
 800658c:	20000b88 	.word	0x20000b88
 8006590:	20000b89 	.word	0x20000b89
 8006594:	20000b37 	.word	0x20000b37
 8006598:	20000b34 	.word	0x20000b34
 800659c:	20000b6e 	.word	0x20000b6e
 80065a0:	20000b5b 	.word	0x20000b5b
 80065a4:	20000b75 	.word	0x20000b75
 80065a8:	20000b08 	.word	0x20000b08
 80065ac:	20000b0c 	.word	0x20000b0c
 80065b0:	20000b47 	.word	0x20000b47
 80065b4:	20000b76 	.word	0x20000b76
 80065b8:	20000b77 	.word	0x20000b77
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80065bc:	4b89      	ldr	r3, [pc, #548]	; (80067e4 <checkAktifCalisma+0x12d0>)
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80065c2:	4b89      	ldr	r3, [pc, #548]	; (80067e8 <checkAktifCalisma+0x12d4>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d107      	bne.n	80065da <checkAktifCalisma+0x10c6>
 80065ca:	4b88      	ldr	r3, [pc, #544]	; (80067ec <checkAktifCalisma+0x12d8>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <checkAktifCalisma+0x10c6>
 80065d2:	4b84      	ldr	r3, [pc, #528]	; (80067e4 <checkAktifCalisma+0x12d0>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80065da:	2201      	movs	r2, #1
 80065dc:	2120      	movs	r1, #32
 80065de:	4884      	ldr	r0, [pc, #528]	; (80067f0 <checkAktifCalisma+0x12dc>)
 80065e0:	f002 fb27 	bl	8008c32 <HAL_GPIO_WritePin>
 80065e4:	e004      	b.n	80065f0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80065e6:	2200      	movs	r2, #0
 80065e8:	2120      	movs	r1, #32
 80065ea:	4881      	ldr	r0, [pc, #516]	; (80067f0 <checkAktifCalisma+0x12dc>)
 80065ec:	f002 fb21 	bl	8008c32 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80065f0:	4b80      	ldr	r3, [pc, #512]	; (80067f4 <checkAktifCalisma+0x12e0>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00e      	beq.n	8006616 <checkAktifCalisma+0x1102>
 80065f8:	2102      	movs	r1, #2
 80065fa:	487f      	ldr	r0, [pc, #508]	; (80067f8 <checkAktifCalisma+0x12e4>)
 80065fc:	f002 fb02 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006600:	4603      	mov	r3, r0
 8006602:	2b01      	cmp	r3, #1
 8006604:	d107      	bne.n	8006616 <checkAktifCalisma+0x1102>
 8006606:	4b7d      	ldr	r3, [pc, #500]	; (80067fc <checkAktifCalisma+0x12e8>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d103      	bne.n	8006616 <checkAktifCalisma+0x1102>
 800660e:	4b7c      	ldr	r3, [pc, #496]	; (8006800 <checkAktifCalisma+0x12ec>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d112      	bne.n	800663c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006616:	4b7b      	ldr	r3, [pc, #492]	; (8006804 <checkAktifCalisma+0x12f0>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d066      	beq.n	80066ec <checkAktifCalisma+0x11d8>
 800661e:	2104      	movs	r1, #4
 8006620:	4875      	ldr	r0, [pc, #468]	; (80067f8 <checkAktifCalisma+0x12e4>)
 8006622:	f002 faef 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006626:	4603      	mov	r3, r0
 8006628:	2b01      	cmp	r3, #1
 800662a:	d15f      	bne.n	80066ec <checkAktifCalisma+0x11d8>
 800662c:	4b73      	ldr	r3, [pc, #460]	; (80067fc <checkAktifCalisma+0x12e8>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d05b      	beq.n	80066ec <checkAktifCalisma+0x11d8>
 8006634:	4b72      	ldr	r3, [pc, #456]	; (8006800 <checkAktifCalisma+0x12ec>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d057      	beq.n	80066ec <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 800663c:	4b72      	ldr	r3, [pc, #456]	; (8006808 <checkAktifCalisma+0x12f4>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	b2da      	uxtb	r2, r3
 8006644:	4b70      	ldr	r3, [pc, #448]	; (8006808 <checkAktifCalisma+0x12f4>)
 8006646:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006648:	4b6f      	ldr	r3, [pc, #444]	; (8006808 <checkAktifCalisma+0x12f4>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b09      	cmp	r3, #9
 800664e:	d908      	bls.n	8006662 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006650:	4b6d      	ldr	r3, [pc, #436]	; (8006808 <checkAktifCalisma+0x12f4>)
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006656:	4b6d      	ldr	r3, [pc, #436]	; (800680c <checkAktifCalisma+0x12f8>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	b2da      	uxtb	r2, r3
 800665e:	4b6b      	ldr	r3, [pc, #428]	; (800680c <checkAktifCalisma+0x12f8>)
 8006660:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006662:	4b6a      	ldr	r3, [pc, #424]	; (800680c <checkAktifCalisma+0x12f8>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b09      	cmp	r3, #9
 8006668:	d908      	bls.n	800667c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800666a:	4b68      	ldr	r3, [pc, #416]	; (800680c <checkAktifCalisma+0x12f8>)
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006670:	4b67      	ldr	r3, [pc, #412]	; (8006810 <checkAktifCalisma+0x12fc>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	b2da      	uxtb	r2, r3
 8006678:	4b65      	ldr	r3, [pc, #404]	; (8006810 <checkAktifCalisma+0x12fc>)
 800667a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 800667c:	4b64      	ldr	r3, [pc, #400]	; (8006810 <checkAktifCalisma+0x12fc>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b09      	cmp	r3, #9
 8006682:	d908      	bls.n	8006696 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006684:	4b62      	ldr	r3, [pc, #392]	; (8006810 <checkAktifCalisma+0x12fc>)
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800668a:	4b62      	ldr	r3, [pc, #392]	; (8006814 <checkAktifCalisma+0x1300>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	3301      	adds	r3, #1
 8006690:	b2da      	uxtb	r2, r3
 8006692:	4b60      	ldr	r3, [pc, #384]	; (8006814 <checkAktifCalisma+0x1300>)
 8006694:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006696:	4b5f      	ldr	r3, [pc, #380]	; (8006814 <checkAktifCalisma+0x1300>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b09      	cmp	r3, #9
 800669c:	d908      	bls.n	80066b0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800669e:	4b5d      	ldr	r3, [pc, #372]	; (8006814 <checkAktifCalisma+0x1300>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80066a4:	4b5c      	ldr	r3, [pc, #368]	; (8006818 <checkAktifCalisma+0x1304>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	4b5a      	ldr	r3, [pc, #360]	; (8006818 <checkAktifCalisma+0x1304>)
 80066ae:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80066b0:	4b59      	ldr	r3, [pc, #356]	; (8006818 <checkAktifCalisma+0x1304>)
 80066b2:	781a      	ldrb	r2, [r3, #0]
 80066b4:	4b59      	ldr	r3, [pc, #356]	; (800681c <checkAktifCalisma+0x1308>)
 80066b6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80066ba:	4b56      	ldr	r3, [pc, #344]	; (8006814 <checkAktifCalisma+0x1300>)
 80066bc:	781a      	ldrb	r2, [r3, #0]
 80066be:	4b57      	ldr	r3, [pc, #348]	; (800681c <checkAktifCalisma+0x1308>)
 80066c0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80066c2:	4b53      	ldr	r3, [pc, #332]	; (8006810 <checkAktifCalisma+0x12fc>)
 80066c4:	781a      	ldrb	r2, [r3, #0]
 80066c6:	4b55      	ldr	r3, [pc, #340]	; (800681c <checkAktifCalisma+0x1308>)
 80066c8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80066ca:	4b50      	ldr	r3, [pc, #320]	; (800680c <checkAktifCalisma+0x12f8>)
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	4b53      	ldr	r3, [pc, #332]	; (800681c <checkAktifCalisma+0x1308>)
 80066d0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80066d2:	4b4d      	ldr	r3, [pc, #308]	; (8006808 <checkAktifCalisma+0x12f4>)
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	4b51      	ldr	r3, [pc, #324]	; (800681c <checkAktifCalisma+0x1308>)
 80066d8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80066da:	4b51      	ldr	r3, [pc, #324]	; (8006820 <checkAktifCalisma+0x130c>)
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80066e0:	4b44      	ldr	r3, [pc, #272]	; (80067f4 <checkAktifCalisma+0x12e0>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80066e6:	4b47      	ldr	r3, [pc, #284]	; (8006804 <checkAktifCalisma+0x12f0>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80066ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066f0:	484c      	ldr	r0, [pc, #304]	; (8006824 <checkAktifCalisma+0x1310>)
 80066f2:	f002 fa87 	bl	8008c04 <HAL_GPIO_ReadPin>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d016      	beq.n	800672a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80066fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006700:	4848      	ldr	r0, [pc, #288]	; (8006824 <checkAktifCalisma+0x1310>)
 8006702:	f002 fa7f 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00e      	beq.n	800672a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800670c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006710:	4844      	ldr	r0, [pc, #272]	; (8006824 <checkAktifCalisma+0x1310>)
 8006712:	f002 fa77 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d006      	beq.n	800672a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800671c:	2140      	movs	r1, #64	; 0x40
 800671e:	4836      	ldr	r0, [pc, #216]	; (80067f8 <checkAktifCalisma+0x12e4>)
 8006720:	f002 fa70 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <checkAktifCalisma+0x121e>
			startBasili=1;
 800672a:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <checkAktifCalisma+0x1314>)
 800672c:	2201      	movs	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	e002      	b.n	8006738 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006732:	4b3d      	ldr	r3, [pc, #244]	; (8006828 <checkAktifCalisma+0x1314>)
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006738:	4b3b      	ldr	r3, [pc, #236]	; (8006828 <checkAktifCalisma+0x1314>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d014      	beq.n	800676a <checkAktifCalisma+0x1256>
 8006740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006744:	4837      	ldr	r0, [pc, #220]	; (8006824 <checkAktifCalisma+0x1310>)
 8006746:	f002 fa5d 	bl	8008c04 <HAL_GPIO_ReadPin>
 800674a:	4603      	mov	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d10c      	bne.n	800676a <checkAktifCalisma+0x1256>
			hataVar=1;
 8006750:	4b36      	ldr	r3, [pc, #216]	; (800682c <checkAktifCalisma+0x1318>)
 8006752:	2201      	movs	r2, #1
 8006754:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006756:	2001      	movs	r0, #1
 8006758:	f7fe f898 	bl	800488c <hataKoduLcdGoster>
			hata2EEPROM(1);
 800675c:	2001      	movs	r0, #1
 800675e:	f7fe fc27 	bl	8004fb0 <hata2EEPROM>
			acilstophatasi=1;
 8006762:	4b33      	ldr	r3, [pc, #204]	; (8006830 <checkAktifCalisma+0x131c>)
 8006764:	2201      	movs	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e018      	b.n	800679c <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800676a:	4b31      	ldr	r3, [pc, #196]	; (8006830 <checkAktifCalisma+0x131c>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d014      	beq.n	800679c <checkAktifCalisma+0x1288>
 8006772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006776:	482b      	ldr	r0, [pc, #172]	; (8006824 <checkAktifCalisma+0x1310>)
 8006778:	f002 fa44 	bl	8008c04 <HAL_GPIO_ReadPin>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10c      	bne.n	800679c <checkAktifCalisma+0x1288>
 8006782:	4b29      	ldr	r3, [pc, #164]	; (8006828 <checkAktifCalisma+0x1314>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	f083 0301 	eor.w	r3, r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8006790:	4b27      	ldr	r3, [pc, #156]	; (8006830 <checkAktifCalisma+0x131c>)
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006796:	2001      	movs	r0, #1
 8006798:	f7fe f824 	bl	80047e4 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <checkAktifCalisma+0x1320>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f083 0301 	eor.w	r3, r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d04c      	beq.n	8006844 <checkAktifCalisma+0x1330>
 80067aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067ae:	481d      	ldr	r0, [pc, #116]	; (8006824 <checkAktifCalisma+0x1310>)
 80067b0:	f002 fa28 	bl	8008c04 <HAL_GPIO_ReadPin>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <checkAktifCalisma+0x12ae>
 80067ba:	4b1f      	ldr	r3, [pc, #124]	; (8006838 <checkAktifCalisma+0x1324>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d040      	beq.n	8006844 <checkAktifCalisma+0x1330>
 80067c2:	4b1e      	ldr	r3, [pc, #120]	; (800683c <checkAktifCalisma+0x1328>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d13c      	bne.n	8006844 <checkAktifCalisma+0x1330>
			hataVar=1;
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <checkAktifCalisma+0x1318>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80067d0:	2002      	movs	r0, #2
 80067d2:	f7fe f85b 	bl	800488c <hataKoduLcdGoster>
			hata2EEPROM(2);
 80067d6:	2002      	movs	r0, #2
 80067d8:	f7fe fbea 	bl	8004fb0 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 80067dc:	4b18      	ldr	r3, [pc, #96]	; (8006840 <checkAktifCalisma+0x132c>)
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e047      	b.n	8006874 <checkAktifCalisma+0x1360>
 80067e4:	20000b77 	.word	0x20000b77
 80067e8:	20000b76 	.word	0x20000b76
 80067ec:	20000b75 	.word	0x20000b75
 80067f0:	40010800 	.word	0x40010800
 80067f4:	20000b6b 	.word	0x20000b6b
 80067f8:	40011000 	.word	0x40011000
 80067fc:	20000b32 	.word	0x20000b32
 8006800:	20000b6e 	.word	0x20000b6e
 8006804:	20000b6c 	.word	0x20000b6c
 8006808:	20000b29 	.word	0x20000b29
 800680c:	20000b2a 	.word	0x20000b2a
 8006810:	20000947 	.word	0x20000947
 8006814:	20000948 	.word	0x20000948
 8006818:	20000b2b 	.word	0x20000b2b
 800681c:	20000ac0 	.word	0x20000ac0
 8006820:	20000b58 	.word	0x20000b58
 8006824:	40010c00 	.word	0x40010c00
 8006828:	20000b7a 	.word	0x20000b7a
 800682c:	20000b81 	.word	0x20000b81
 8006830:	20000b7c 	.word	0x20000b7c
 8006834:	20000b83 	.word	0x20000b83
 8006838:	20000b8d 	.word	0x20000b8d
 800683c:	20000b30 	.word	0x20000b30
 8006840:	20000b7d 	.word	0x20000b7d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006844:	4b97      	ldr	r3, [pc, #604]	; (8006aa4 <checkAktifCalisma+0x1590>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d013      	beq.n	8006874 <checkAktifCalisma+0x1360>
 800684c:	4b96      	ldr	r3, [pc, #600]	; (8006aa8 <checkAktifCalisma+0x1594>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00f      	beq.n	8006874 <checkAktifCalisma+0x1360>
 8006854:	4b95      	ldr	r3, [pc, #596]	; (8006aac <checkAktifCalisma+0x1598>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	f083 0301 	eor.w	r3, r3, #1
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d008      	beq.n	8006874 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8006862:	4b90      	ldr	r3, [pc, #576]	; (8006aa4 <checkAktifCalisma+0x1590>)
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006868:	4b91      	ldr	r3, [pc, #580]	; (8006ab0 <checkAktifCalisma+0x159c>)
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800686e:	2002      	movs	r0, #2
 8006870:	f7fd ffb8 	bl	80047e4 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006874:	4b8f      	ldr	r3, [pc, #572]	; (8006ab4 <checkAktifCalisma+0x15a0>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d11c      	bne.n	80068b6 <checkAktifCalisma+0x13a2>
 800687c:	4b8e      	ldr	r3, [pc, #568]	; (8006ab8 <checkAktifCalisma+0x15a4>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d118      	bne.n	80068b6 <checkAktifCalisma+0x13a2>
 8006884:	4b8d      	ldr	r3, [pc, #564]	; (8006abc <checkAktifCalisma+0x15a8>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d014      	beq.n	80068b6 <checkAktifCalisma+0x13a2>
 800688c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006890:	488b      	ldr	r0, [pc, #556]	; (8006ac0 <checkAktifCalisma+0x15ac>)
 8006892:	f002 f9b7 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006896:	4603      	mov	r3, r0
 8006898:	2b01      	cmp	r3, #1
 800689a:	d10c      	bne.n	80068b6 <checkAktifCalisma+0x13a2>
			hataVar=1;
 800689c:	4b89      	ldr	r3, [pc, #548]	; (8006ac4 <checkAktifCalisma+0x15b0>)
 800689e:	2201      	movs	r2, #1
 80068a0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80068a2:	2003      	movs	r0, #3
 80068a4:	f7fd fff2 	bl	800488c <hataKoduLcdGoster>
			hata2EEPROM(3);
 80068a8:	2003      	movs	r0, #3
 80068aa:	f7fe fb81 	bl	8004fb0 <hata2EEPROM>
			basinchatasi=1;
 80068ae:	4b86      	ldr	r3, [pc, #536]	; (8006ac8 <checkAktifCalisma+0x15b4>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	e015      	b.n	80068e2 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80068b6:	4b84      	ldr	r3, [pc, #528]	; (8006ac8 <checkAktifCalisma+0x15b4>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d011      	beq.n	80068e2 <checkAktifCalisma+0x13ce>
 80068be:	4b7d      	ldr	r3, [pc, #500]	; (8006ab4 <checkAktifCalisma+0x15a0>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d10d      	bne.n	80068e2 <checkAktifCalisma+0x13ce>
 80068c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068ca:	4880      	ldr	r0, [pc, #512]	; (8006acc <checkAktifCalisma+0x15b8>)
 80068cc:	f002 f99a 	bl	8008c04 <HAL_GPIO_ReadPin>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d105      	bne.n	80068e2 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 80068d6:	4b7c      	ldr	r3, [pc, #496]	; (8006ac8 <checkAktifCalisma+0x15b4>)
 80068d8:	2200      	movs	r2, #0
 80068da:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80068dc:	2003      	movs	r0, #3
 80068de:	f7fd ff81 	bl	80047e4 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80068e2:	4b7b      	ldr	r3, [pc, #492]	; (8006ad0 <checkAktifCalisma+0x15bc>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <checkAktifCalisma+0x13de>
 80068ea:	4b7a      	ldr	r3, [pc, #488]	; (8006ad4 <checkAktifCalisma+0x15c0>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01c      	beq.n	800692c <checkAktifCalisma+0x1418>
 80068f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068f6:	4878      	ldr	r0, [pc, #480]	; (8006ad8 <checkAktifCalisma+0x15c4>)
 80068f8:	f002 f984 	bl	8008c04 <HAL_GPIO_ReadPin>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d114      	bne.n	800692c <checkAktifCalisma+0x1418>
 8006902:	4b76      	ldr	r3, [pc, #472]	; (8006adc <checkAktifCalisma+0x15c8>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d003      	beq.n	8006912 <checkAktifCalisma+0x13fe>
 800690a:	4b74      	ldr	r3, [pc, #464]	; (8006adc <checkAktifCalisma+0x15c8>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b03      	cmp	r3, #3
 8006910:	d10c      	bne.n	800692c <checkAktifCalisma+0x1418>
			hataVar=1;
 8006912:	4b6c      	ldr	r3, [pc, #432]	; (8006ac4 <checkAktifCalisma+0x15b0>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006918:	2004      	movs	r0, #4
 800691a:	f7fd ffb7 	bl	800488c <hataKoduLcdGoster>
			hata2EEPROM(4);
 800691e:	2004      	movs	r0, #4
 8006920:	f7fe fb46 	bl	8004fb0 <hata2EEPROM>
			katkapisivicihatasi=1;
 8006924:	4b6e      	ldr	r3, [pc, #440]	; (8006ae0 <checkAktifCalisma+0x15cc>)
 8006926:	2201      	movs	r2, #1
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	e01f      	b.n	800696c <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800692c:	4b6c      	ldr	r3, [pc, #432]	; (8006ae0 <checkAktifCalisma+0x15cc>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01b      	beq.n	800696c <checkAktifCalisma+0x1458>
 8006934:	4b6b      	ldr	r3, [pc, #428]	; (8006ae4 <checkAktifCalisma+0x15d0>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d017      	beq.n	800696c <checkAktifCalisma+0x1458>
 800693c:	4b64      	ldr	r3, [pc, #400]	; (8006ad0 <checkAktifCalisma+0x15bc>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f083 0301 	eor.w	r3, r3, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d010      	beq.n	800696c <checkAktifCalisma+0x1458>
 800694a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800694e:	4862      	ldr	r0, [pc, #392]	; (8006ad8 <checkAktifCalisma+0x15c4>)
 8006950:	f002 f958 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d108      	bne.n	800696c <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 800695a:	4b61      	ldr	r3, [pc, #388]	; (8006ae0 <checkAktifCalisma+0x15cc>)
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006960:	4b5c      	ldr	r3, [pc, #368]	; (8006ad4 <checkAktifCalisma+0x15c0>)
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006966:	2004      	movs	r0, #4
 8006968:	f7fd ff3c 	bl	80047e4 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800696c:	4b58      	ldr	r3, [pc, #352]	; (8006ad0 <checkAktifCalisma+0x15bc>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d103      	bne.n	800697c <checkAktifCalisma+0x1468>
 8006974:	4b5c      	ldr	r3, [pc, #368]	; (8006ae8 <checkAktifCalisma+0x15d4>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01c      	beq.n	80069b6 <checkAktifCalisma+0x14a2>
 800697c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006980:	4855      	ldr	r0, [pc, #340]	; (8006ad8 <checkAktifCalisma+0x15c4>)
 8006982:	f002 f93f 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006986:	4603      	mov	r3, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	d114      	bne.n	80069b6 <checkAktifCalisma+0x14a2>
 800698c:	4b53      	ldr	r3, [pc, #332]	; (8006adc <checkAktifCalisma+0x15c8>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d003      	beq.n	800699c <checkAktifCalisma+0x1488>
 8006994:	4b51      	ldr	r3, [pc, #324]	; (8006adc <checkAktifCalisma+0x15c8>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d10c      	bne.n	80069b6 <checkAktifCalisma+0x14a2>
			hataVar=1;
 800699c:	4b49      	ldr	r3, [pc, #292]	; (8006ac4 <checkAktifCalisma+0x15b0>)
 800699e:	2201      	movs	r2, #1
 80069a0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80069a2:	2005      	movs	r0, #5
 80069a4:	f7fd ff72 	bl	800488c <hataKoduLcdGoster>
			hata2EEPROM(5);
 80069a8:	2005      	movs	r0, #5
 80069aa:	f7fe fb01 	bl	8004fb0 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80069ae:	4b4f      	ldr	r3, [pc, #316]	; (8006aec <checkAktifCalisma+0x15d8>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	e023      	b.n	80069fe <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80069b6:	4b4d      	ldr	r3, [pc, #308]	; (8006aec <checkAktifCalisma+0x15d8>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01f      	beq.n	80069fe <checkAktifCalisma+0x14ea>
 80069be:	4b49      	ldr	r3, [pc, #292]	; (8006ae4 <checkAktifCalisma+0x15d0>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01b      	beq.n	80069fe <checkAktifCalisma+0x14ea>
 80069c6:	4b42      	ldr	r3, [pc, #264]	; (8006ad0 <checkAktifCalisma+0x15bc>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	f083 0301 	eor.w	r3, r3, #1
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d014      	beq.n	80069fe <checkAktifCalisma+0x14ea>
 80069d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069d8:	483f      	ldr	r0, [pc, #252]	; (8006ad8 <checkAktifCalisma+0x15c4>)
 80069da:	f002 f913 	bl	8008c04 <HAL_GPIO_ReadPin>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10c      	bne.n	80069fe <checkAktifCalisma+0x14ea>
 80069e4:	4b3f      	ldr	r3, [pc, #252]	; (8006ae4 <checkAktifCalisma+0x15d0>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 80069ec:	4b3f      	ldr	r3, [pc, #252]	; (8006aec <checkAktifCalisma+0x15d8>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80069f2:	4b3d      	ldr	r3, [pc, #244]	; (8006ae8 <checkAktifCalisma+0x15d4>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80069f8:	2005      	movs	r0, #5
 80069fa:	f7fd fef3 	bl	80047e4 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80069fe:	4b2f      	ldr	r3, [pc, #188]	; (8006abc <checkAktifCalisma+0x15a8>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d107      	bne.n	8006a16 <checkAktifCalisma+0x1502>
 8006a06:	4b29      	ldr	r3, [pc, #164]	; (8006aac <checkAktifCalisma+0x1598>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <checkAktifCalisma+0x1502>
 8006a0e:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <checkAktifCalisma+0x15dc>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d014      	beq.n	8006a40 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8006a16:	4b37      	ldr	r3, [pc, #220]	; (8006af4 <checkAktifCalisma+0x15e0>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b37      	ldr	r3, [pc, #220]	; (8006af8 <checkAktifCalisma+0x15e4>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	4a36      	ldr	r2, [pc, #216]	; (8006afc <checkAktifCalisma+0x15e8>)
 8006a22:	7812      	ldrb	r2, [r2, #0]
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d30b      	bcc.n	8006a40 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8006a28:	4b26      	ldr	r3, [pc, #152]	; (8006ac4 <checkAktifCalisma+0x15b0>)
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006a2e:	2006      	movs	r0, #6
 8006a30:	f7fd ff2c 	bl	800488c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006a34:	2006      	movs	r0, #6
 8006a36:	f7fe fabb 	bl	8004fb0 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8006a3a:	4b31      	ldr	r3, [pc, #196]	; (8006b00 <checkAktifCalisma+0x15ec>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006a40:	4b2f      	ldr	r3, [pc, #188]	; (8006b00 <checkAktifCalisma+0x15ec>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d013      	beq.n	8006a70 <checkAktifCalisma+0x155c>
 8006a48:	2108      	movs	r1, #8
 8006a4a:	4823      	ldr	r0, [pc, #140]	; (8006ad8 <checkAktifCalisma+0x15c4>)
 8006a4c:	f002 f8da 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00c      	beq.n	8006a70 <checkAktifCalisma+0x155c>
 8006a56:	4b1e      	ldr	r3, [pc, #120]	; (8006ad0 <checkAktifCalisma+0x15bc>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	f083 0301 	eor.w	r3, r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8006a64:	4b26      	ldr	r3, [pc, #152]	; (8006b00 <checkAktifCalisma+0x15ec>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006a6a:	2006      	movs	r0, #6
 8006a6c:	f7fd feba 	bl	80047e4 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006a70:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <checkAktifCalisma+0x15f0>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <checkAktifCalisma+0x157c>
 8006a78:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <checkAktifCalisma+0x1598>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d107      	bne.n	8006a90 <checkAktifCalisma+0x157c>
 8006a80:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <checkAktifCalisma+0x15f4>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d103      	bne.n	8006a90 <checkAktifCalisma+0x157c>
 8006a88:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <checkAktifCalisma+0x15dc>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d03f      	beq.n	8006b10 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8006a90:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <checkAktifCalisma+0x15f8>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006a96:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <checkAktifCalisma+0x15c0>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006a9c:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <checkAktifCalisma+0x15d4>)
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	e03c      	b.n	8006b1e <checkAktifCalisma+0x160a>
 8006aa4:	20000b7d 	.word	0x20000b7d
 8006aa8:	20000b83 	.word	0x20000b83
 8006aac:	20000b64 	.word	0x20000b64
 8006ab0:	20000b8d 	.word	0x20000b8d
 8006ab4:	20000b2f 	.word	0x20000b2f
 8006ab8:	20000b33 	.word	0x20000b33
 8006abc:	20000b80 	.word	0x20000b80
 8006ac0:	40011000 	.word	0x40011000
 8006ac4:	20000b81 	.word	0x20000b81
 8006ac8:	20000b8a 	.word	0x20000b8a
 8006acc:	40010c00 	.word	0x40010c00
 8006ad0:	20000b7a 	.word	0x20000b7a
 8006ad4:	20000b8e 	.word	0x20000b8e
 8006ad8:	40010800 	.word	0x40010800
 8006adc:	20000b34 	.word	0x20000b34
 8006ae0:	20000b8b 	.word	0x20000b8b
 8006ae4:	20000b6e 	.word	0x20000b6e
 8006ae8:	20000b8f 	.word	0x20000b8f
 8006aec:	20000b8c 	.word	0x20000b8c
 8006af0:	20000b63 	.word	0x20000b63
 8006af4:	20000b08 	.word	0x20000b08
 8006af8:	20000b1c 	.word	0x20000b1c
 8006afc:	20000b44 	.word	0x20000b44
 8006b00:	20000b7b 	.word	0x20000b7b
 8006b04:	20000b61 	.word	0x20000b61
 8006b08:	20000b62 	.word	0x20000b62
 8006b0c:	20000b82 	.word	0x20000b82
		} else {
			makineCalisiyor=1;
 8006b10:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <checkAktifCalisma+0x1678>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006b16:	4b1e      	ldr	r3, [pc, #120]	; (8006b90 <checkAktifCalisma+0x167c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1e      	ldr	r2, [pc, #120]	; (8006b94 <checkAktifCalisma+0x1680>)
 8006b1c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006b1e:	4b1e      	ldr	r3, [pc, #120]	; (8006b98 <checkAktifCalisma+0x1684>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d02f      	beq.n	8006b86 <checkAktifCalisma+0x1672>
 8006b26:	4b1d      	ldr	r3, [pc, #116]	; (8006b9c <checkAktifCalisma+0x1688>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	f083 0301 	eor.w	r3, r3, #1
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d028      	beq.n	8006b86 <checkAktifCalisma+0x1672>
 8006b34:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <checkAktifCalisma+0x168c>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	f083 0301 	eor.w	r3, r3, #1
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d021      	beq.n	8006b86 <checkAktifCalisma+0x1672>
 8006b42:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <checkAktifCalisma+0x1690>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f083 0301 	eor.w	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01a      	beq.n	8006b86 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006b50:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <checkAktifCalisma+0x1694>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f083 0301 	eor.w	r3, r3, #1
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d013      	beq.n	8006b86 <checkAktifCalisma+0x1672>
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <checkAktifCalisma+0x1698>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	f083 0301 	eor.w	r3, r3, #1
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00c      	beq.n	8006b86 <checkAktifCalisma+0x1672>
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <checkAktifCalisma+0x169c>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f083 0301 	eor.w	r3, r3, #1
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <checkAktifCalisma+0x1672>
			hataVar=0;
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <checkAktifCalisma+0x1684>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006b80:	2007      	movs	r0, #7
 8006b82:	f7fd fe2f 	bl	80047e4 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000b82 	.word	0x20000b82
 8006b90:	20000b08 	.word	0x20000b08
 8006b94:	20000b1c 	.word	0x20000b1c
 8006b98:	20000b81 	.word	0x20000b81
 8006b9c:	20000b7c 	.word	0x20000b7c
 8006ba0:	20000b7d 	.word	0x20000b7d
 8006ba4:	20000b8a 	.word	0x20000b8a
 8006ba8:	20000b8b 	.word	0x20000b8b
 8006bac:	20000b8c 	.word	0x20000b8c
 8006bb0:	20000b7b 	.word	0x20000b7b

08006bb4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006bb8:	4b8b      	ldr	r3, [pc, #556]	; (8006de8 <checkDemoModCalisma+0x234>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	f040 8229 	bne.w	8007014 <checkDemoModCalisma+0x460>
 8006bc2:	4b8a      	ldr	r3, [pc, #552]	; (8006dec <checkDemoModCalisma+0x238>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 8224 	beq.w	8007014 <checkDemoModCalisma+0x460>
 8006bcc:	4b88      	ldr	r3, [pc, #544]	; (8006df0 <checkDemoModCalisma+0x23c>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f040 821f 	bne.w	8007014 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	4886      	ldr	r0, [pc, #536]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006bda:	f002 f813 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11d      	bne.n	8006c20 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006be4:	4b84      	ldr	r3, [pc, #528]	; (8006df8 <checkDemoModCalisma+0x244>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	f083 0301 	eor.w	r3, r3, #1
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d016      	beq.n	8006c20 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006bf2:	4b82      	ldr	r3, [pc, #520]	; (8006dfc <checkDemoModCalisma+0x248>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	f083 0301 	eor.w	r3, r3, #1
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00f      	beq.n	8006c20 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006c00:	4b7f      	ldr	r3, [pc, #508]	; (8006e00 <checkDemoModCalisma+0x24c>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f083 0301 	eor.w	r3, r3, #1
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d008      	beq.n	8006c20 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006c0e:	2201      	movs	r2, #1
 8006c10:	2104      	movs	r1, #4
 8006c12:	487c      	ldr	r0, [pc, #496]	; (8006e04 <checkDemoModCalisma+0x250>)
 8006c14:	f002 f80d 	bl	8008c32 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006c18:	4b7b      	ldr	r3, [pc, #492]	; (8006e08 <checkDemoModCalisma+0x254>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	e00e      	b.n	8006c3e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006c20:	2102      	movs	r1, #2
 8006c22:	4874      	ldr	r0, [pc, #464]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006c24:	f001 ffee 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d107      	bne.n	8006c3e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2104      	movs	r1, #4
 8006c32:	4874      	ldr	r0, [pc, #464]	; (8006e04 <checkDemoModCalisma+0x250>)
 8006c34:	f001 fffd 	bl	8008c32 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006c38:	4b73      	ldr	r3, [pc, #460]	; (8006e08 <checkDemoModCalisma+0x254>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006c3e:	4b72      	ldr	r3, [pc, #456]	; (8006e08 <checkDemoModCalisma+0x254>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <checkDemoModCalisma+0xaa>
 8006c46:	4b6d      	ldr	r3, [pc, #436]	; (8006dfc <checkDemoModCalisma+0x248>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d107      	bne.n	8006c5e <checkDemoModCalisma+0xaa>
 8006c4e:	4b6c      	ldr	r3, [pc, #432]	; (8006e00 <checkDemoModCalisma+0x24c>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <checkDemoModCalisma+0xaa>
 8006c56:	4b68      	ldr	r3, [pc, #416]	; (8006df8 <checkDemoModCalisma+0x244>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00c      	beq.n	8006c78 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c64:	4867      	ldr	r0, [pc, #412]	; (8006e04 <checkDemoModCalisma+0x250>)
 8006c66:	f001 ffe4 	bl	8008c32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c70:	4864      	ldr	r0, [pc, #400]	; (8006e04 <checkDemoModCalisma+0x250>)
 8006c72:	f001 ffde 	bl	8008c32 <HAL_GPIO_WritePin>
 8006c76:	e00b      	b.n	8006c90 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c7e:	4861      	ldr	r0, [pc, #388]	; (8006e04 <checkDemoModCalisma+0x250>)
 8006c80:	f001 ffd7 	bl	8008c32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006c84:	2200      	movs	r2, #0
 8006c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c8a:	485e      	ldr	r0, [pc, #376]	; (8006e04 <checkDemoModCalisma+0x250>)
 8006c8c:	f001 ffd1 	bl	8008c32 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006c90:	2102      	movs	r1, #2
 8006c92:	4858      	ldr	r0, [pc, #352]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006c94:	f001 ffb6 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d10d      	bne.n	8006cba <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ca2:	4854      	ldr	r0, [pc, #336]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006ca4:	f001 ffae 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d105      	bne.n	8006cba <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006cae:	4b56      	ldr	r3, [pc, #344]	; (8006e08 <checkDemoModCalisma+0x254>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f083 0301 	eor.w	r3, r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006cba:	2102      	movs	r1, #2
 8006cbc:	484d      	ldr	r0, [pc, #308]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006cbe:	f001 ffa1 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d125      	bne.n	8006d14 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ccc:	4849      	ldr	r0, [pc, #292]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006cce:	f001 ff99 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11d      	bne.n	8006d14 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006cd8:	4b4b      	ldr	r3, [pc, #300]	; (8006e08 <checkDemoModCalisma+0x254>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f083 0301 	eor.w	r3, r3, #1
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006ce6:	4b44      	ldr	r3, [pc, #272]	; (8006df8 <checkDemoModCalisma+0x244>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f083 0301 	eor.w	r3, r3, #1
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00f      	beq.n	8006d14 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006cf4:	4b42      	ldr	r3, [pc, #264]	; (8006e00 <checkDemoModCalisma+0x24c>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f083 0301 	eor.w	r3, r3, #1
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006d02:	2201      	movs	r2, #1
 8006d04:	2120      	movs	r1, #32
 8006d06:	483b      	ldr	r0, [pc, #236]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006d08:	f001 ff93 	bl	8008c32 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006d0c:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <checkDemoModCalisma+0x248>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e007      	b.n	8006d24 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006d14:	2200      	movs	r2, #0
 8006d16:	2120      	movs	r1, #32
 8006d18:	4836      	ldr	r0, [pc, #216]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006d1a:	f001 ff8a 	bl	8008c32 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006d1e:	4b37      	ldr	r3, [pc, #220]	; (8006dfc <checkDemoModCalisma+0x248>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006d24:	2102      	movs	r1, #2
 8006d26:	4833      	ldr	r0, [pc, #204]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006d28:	f001 ff6c 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d125      	bne.n	8006d7e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006d32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d36:	482f      	ldr	r0, [pc, #188]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006d38:	f001 ff64 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d11d      	bne.n	8006d7e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006d42:	4b31      	ldr	r3, [pc, #196]	; (8006e08 <checkDemoModCalisma+0x254>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	f083 0301 	eor.w	r3, r3, #1
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d016      	beq.n	8006d7e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006d50:	4b2a      	ldr	r3, [pc, #168]	; (8006dfc <checkDemoModCalisma+0x248>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	f083 0301 	eor.w	r3, r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00f      	beq.n	8006d7e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006d5e:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <checkDemoModCalisma+0x244>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f083 0301 	eor.w	r3, r3, #1
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	2110      	movs	r1, #16
 8006d70:	4820      	ldr	r0, [pc, #128]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006d72:	f001 ff5e 	bl	8008c32 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006d76:	4b22      	ldr	r3, [pc, #136]	; (8006e00 <checkDemoModCalisma+0x24c>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	e007      	b.n	8006d8e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2110      	movs	r1, #16
 8006d82:	481c      	ldr	r0, [pc, #112]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006d84:	f001 ff55 	bl	8008c32 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006d88:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <checkDemoModCalisma+0x24c>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006d8e:	2104      	movs	r1, #4
 8006d90:	4818      	ldr	r0, [pc, #96]	; (8006df4 <checkDemoModCalisma+0x240>)
 8006d92:	f001 ff37 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d139      	bne.n	8006e10 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006d9c:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <checkDemoModCalisma+0x254>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f083 0301 	eor.w	r3, r3, #1
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d032      	beq.n	8006e10 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006daa:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <checkDemoModCalisma+0x24c>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f083 0301 	eor.w	r3, r3, #1
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d02b      	beq.n	8006e10 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006db8:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <checkDemoModCalisma+0x248>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	f083 0301 	eor.w	r3, r3, #1
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d024      	beq.n	8006e10 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	2102      	movs	r1, #2
 8006dca:	480e      	ldr	r0, [pc, #56]	; (8006e04 <checkDemoModCalisma+0x250>)
 8006dcc:	f001 ff31 	bl	8008c32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	480b      	ldr	r0, [pc, #44]	; (8006e04 <checkDemoModCalisma+0x250>)
 8006dd6:	f001 ff2c 	bl	8008c32 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006dda:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <checkDemoModCalisma+0x244>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <checkDemoModCalisma+0x258>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	e027      	b.n	8006e38 <checkDemoModCalisma+0x284>
 8006de8:	20000b4a 	.word	0x20000b4a
 8006dec:	20000b7e 	.word	0x20000b7e
 8006df0:	20000b49 	.word	0x20000b49
 8006df4:	40011000 	.word	0x40011000
 8006df8:	20000b85 	.word	0x20000b85
 8006dfc:	20000b86 	.word	0x20000b86
 8006e00:	20000b87 	.word	0x20000b87
 8006e04:	40010c00 	.word	0x40010c00
 8006e08:	20000b84 	.word	0x20000b84
 8006e0c:	20000b6a 	.word	0x20000b6a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006e10:	2104      	movs	r1, #4
 8006e12:	48a0      	ldr	r0, [pc, #640]	; (8007094 <checkDemoModCalisma+0x4e0>)
 8006e14:	f001 fef6 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d10c      	bne.n	8006e38 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2102      	movs	r1, #2
 8006e22:	489d      	ldr	r0, [pc, #628]	; (8007098 <checkDemoModCalisma+0x4e4>)
 8006e24:	f001 ff05 	bl	8008c32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	489a      	ldr	r0, [pc, #616]	; (8007098 <checkDemoModCalisma+0x4e4>)
 8006e2e:	f001 ff00 	bl	8008c32 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006e32:	4b9a      	ldr	r3, [pc, #616]	; (800709c <checkDemoModCalisma+0x4e8>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006e38:	2104      	movs	r1, #4
 8006e3a:	4896      	ldr	r0, [pc, #600]	; (8007094 <checkDemoModCalisma+0x4e0>)
 8006e3c:	f001 fee2 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d10d      	bne.n	8006e62 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006e46:	2201      	movs	r2, #1
 8006e48:	2180      	movs	r1, #128	; 0x80
 8006e4a:	4895      	ldr	r0, [pc, #596]	; (80070a0 <checkDemoModCalisma+0x4ec>)
 8006e4c:	f001 fef1 	bl	8008c32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006e50:	2201      	movs	r2, #1
 8006e52:	2120      	movs	r1, #32
 8006e54:	4892      	ldr	r0, [pc, #584]	; (80070a0 <checkDemoModCalisma+0x4ec>)
 8006e56:	f001 feec 	bl	8008c32 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006e5a:	4b92      	ldr	r3, [pc, #584]	; (80070a4 <checkDemoModCalisma+0x4f0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a92      	ldr	r2, [pc, #584]	; (80070a8 <checkDemoModCalisma+0x4f4>)
 8006e60:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006e62:	4b90      	ldr	r3, [pc, #576]	; (80070a4 <checkDemoModCalisma+0x4f0>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b90      	ldr	r3, [pc, #576]	; (80070a8 <checkDemoModCalisma+0x4f4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d909      	bls.n	8006e84 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006e70:	2200      	movs	r2, #0
 8006e72:	2180      	movs	r1, #128	; 0x80
 8006e74:	488a      	ldr	r0, [pc, #552]	; (80070a0 <checkDemoModCalisma+0x4ec>)
 8006e76:	f001 fedc 	bl	8008c32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2120      	movs	r1, #32
 8006e7e:	4888      	ldr	r0, [pc, #544]	; (80070a0 <checkDemoModCalisma+0x4ec>)
 8006e80:	f001 fed7 	bl	8008c32 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006e84:	2102      	movs	r1, #2
 8006e86:	4883      	ldr	r0, [pc, #524]	; (8007094 <checkDemoModCalisma+0x4e0>)
 8006e88:	f001 febc 	bl	8008c04 <HAL_GPIO_ReadPin>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d108      	bne.n	8006ea4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006e92:	2201      	movs	r2, #1
 8006e94:	2140      	movs	r1, #64	; 0x40
 8006e96:	4882      	ldr	r0, [pc, #520]	; (80070a0 <checkDemoModCalisma+0x4ec>)
 8006e98:	f001 fecb 	bl	8008c32 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006e9c:	4b81      	ldr	r3, [pc, #516]	; (80070a4 <checkDemoModCalisma+0x4f0>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a81      	ldr	r2, [pc, #516]	; (80070a8 <checkDemoModCalisma+0x4f4>)
 8006ea2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006ea4:	4b7f      	ldr	r3, [pc, #508]	; (80070a4 <checkDemoModCalisma+0x4f0>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	4b7f      	ldr	r3, [pc, #508]	; (80070a8 <checkDemoModCalisma+0x4f4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d904      	bls.n	8006ebc <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2140      	movs	r1, #64	; 0x40
 8006eb6:	487a      	ldr	r0, [pc, #488]	; (80070a0 <checkDemoModCalisma+0x4ec>)
 8006eb8:	f001 febb 	bl	8008c32 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006ebc:	4b7b      	ldr	r3, [pc, #492]	; (80070ac <checkDemoModCalisma+0x4f8>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d058      	beq.n	8006f76 <checkDemoModCalisma+0x3c2>
 8006ec4:	4b7a      	ldr	r3, [pc, #488]	; (80070b0 <checkDemoModCalisma+0x4fc>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d054      	beq.n	8006f76 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006ecc:	4b79      	ldr	r3, [pc, #484]	; (80070b4 <checkDemoModCalisma+0x500>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	4b77      	ldr	r3, [pc, #476]	; (80070b4 <checkDemoModCalisma+0x500>)
 8006ed6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006ed8:	4b76      	ldr	r3, [pc, #472]	; (80070b4 <checkDemoModCalisma+0x500>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b09      	cmp	r3, #9
 8006ede:	d908      	bls.n	8006ef2 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006ee0:	4b74      	ldr	r3, [pc, #464]	; (80070b4 <checkDemoModCalisma+0x500>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006ee6:	4b74      	ldr	r3, [pc, #464]	; (80070b8 <checkDemoModCalisma+0x504>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	3301      	adds	r3, #1
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	4b72      	ldr	r3, [pc, #456]	; (80070b8 <checkDemoModCalisma+0x504>)
 8006ef0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006ef2:	4b71      	ldr	r3, [pc, #452]	; (80070b8 <checkDemoModCalisma+0x504>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b09      	cmp	r3, #9
 8006ef8:	d908      	bls.n	8006f0c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006efa:	4b6f      	ldr	r3, [pc, #444]	; (80070b8 <checkDemoModCalisma+0x504>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006f00:	4b6e      	ldr	r3, [pc, #440]	; (80070bc <checkDemoModCalisma+0x508>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	3301      	adds	r3, #1
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	4b6c      	ldr	r3, [pc, #432]	; (80070bc <checkDemoModCalisma+0x508>)
 8006f0a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006f0c:	4b6b      	ldr	r3, [pc, #428]	; (80070bc <checkDemoModCalisma+0x508>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b09      	cmp	r3, #9
 8006f12:	d908      	bls.n	8006f26 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006f14:	4b69      	ldr	r3, [pc, #420]	; (80070bc <checkDemoModCalisma+0x508>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006f1a:	4b69      	ldr	r3, [pc, #420]	; (80070c0 <checkDemoModCalisma+0x50c>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	4b67      	ldr	r3, [pc, #412]	; (80070c0 <checkDemoModCalisma+0x50c>)
 8006f24:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006f26:	4b66      	ldr	r3, [pc, #408]	; (80070c0 <checkDemoModCalisma+0x50c>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b09      	cmp	r3, #9
 8006f2c:	d908      	bls.n	8006f40 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006f2e:	4b64      	ldr	r3, [pc, #400]	; (80070c0 <checkDemoModCalisma+0x50c>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006f34:	4b63      	ldr	r3, [pc, #396]	; (80070c4 <checkDemoModCalisma+0x510>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	4b61      	ldr	r3, [pc, #388]	; (80070c4 <checkDemoModCalisma+0x510>)
 8006f3e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006f40:	4b60      	ldr	r3, [pc, #384]	; (80070c4 <checkDemoModCalisma+0x510>)
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	4b60      	ldr	r3, [pc, #384]	; (80070c8 <checkDemoModCalisma+0x514>)
 8006f46:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006f4a:	4b5d      	ldr	r3, [pc, #372]	; (80070c0 <checkDemoModCalisma+0x50c>)
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	4b5e      	ldr	r3, [pc, #376]	; (80070c8 <checkDemoModCalisma+0x514>)
 8006f50:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006f52:	4b5a      	ldr	r3, [pc, #360]	; (80070bc <checkDemoModCalisma+0x508>)
 8006f54:	781a      	ldrb	r2, [r3, #0]
 8006f56:	4b5c      	ldr	r3, [pc, #368]	; (80070c8 <checkDemoModCalisma+0x514>)
 8006f58:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006f5a:	4b57      	ldr	r3, [pc, #348]	; (80070b8 <checkDemoModCalisma+0x504>)
 8006f5c:	781a      	ldrb	r2, [r3, #0]
 8006f5e:	4b5a      	ldr	r3, [pc, #360]	; (80070c8 <checkDemoModCalisma+0x514>)
 8006f60:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006f62:	4b54      	ldr	r3, [pc, #336]	; (80070b4 <checkDemoModCalisma+0x500>)
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	4b58      	ldr	r3, [pc, #352]	; (80070c8 <checkDemoModCalisma+0x514>)
 8006f68:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006f6a:	4b58      	ldr	r3, [pc, #352]	; (80070cc <checkDemoModCalisma+0x518>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006f70:	4b4f      	ldr	r3, [pc, #316]	; (80070b0 <checkDemoModCalisma+0x4fc>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006f76:	4b56      	ldr	r3, [pc, #344]	; (80070d0 <checkDemoModCalisma+0x51c>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 8087 	bne.w	800708e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006f80:	4a54      	ldr	r2, [pc, #336]	; (80070d4 <checkDemoModCalisma+0x520>)
 8006f82:	2101      	movs	r1, #1
 8006f84:	2002      	movs	r0, #2
 8006f86:	f7f9 fbc2 	bl	800070e <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006f8a:	4a53      	ldr	r2, [pc, #332]	; (80070d8 <checkDemoModCalisma+0x524>)
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	2001      	movs	r0, #1
 8006f90:	f7f9 fbbd 	bl	800070e <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006f94:	4b4b      	ldr	r3, [pc, #300]	; (80070c4 <checkDemoModCalisma+0x510>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4950      	ldr	r1, [pc, #320]	; (80070dc <checkDemoModCalisma+0x528>)
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f004 fe5d 	bl	800bc5c <itoa>
			lcd_print(2,12,snum);
 8006fa2:	4a4e      	ldr	r2, [pc, #312]	; (80070dc <checkDemoModCalisma+0x528>)
 8006fa4:	210c      	movs	r1, #12
 8006fa6:	2002      	movs	r0, #2
 8006fa8:	f7f9 fbb1 	bl	800070e <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006fac:	4b44      	ldr	r3, [pc, #272]	; (80070c0 <checkDemoModCalisma+0x50c>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	220a      	movs	r2, #10
 8006fb2:	494a      	ldr	r1, [pc, #296]	; (80070dc <checkDemoModCalisma+0x528>)
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f004 fe51 	bl	800bc5c <itoa>
			lcd_print(2,13,snum);
 8006fba:	4a48      	ldr	r2, [pc, #288]	; (80070dc <checkDemoModCalisma+0x528>)
 8006fbc:	210d      	movs	r1, #13
 8006fbe:	2002      	movs	r0, #2
 8006fc0:	f7f9 fba5 	bl	800070e <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006fc4:	4b3d      	ldr	r3, [pc, #244]	; (80070bc <checkDemoModCalisma+0x508>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	220a      	movs	r2, #10
 8006fca:	4944      	ldr	r1, [pc, #272]	; (80070dc <checkDemoModCalisma+0x528>)
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f004 fe45 	bl	800bc5c <itoa>
			lcd_print(2,14,snum);
 8006fd2:	4a42      	ldr	r2, [pc, #264]	; (80070dc <checkDemoModCalisma+0x528>)
 8006fd4:	210e      	movs	r1, #14
 8006fd6:	2002      	movs	r0, #2
 8006fd8:	f7f9 fb99 	bl	800070e <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006fdc:	4b36      	ldr	r3, [pc, #216]	; (80070b8 <checkDemoModCalisma+0x504>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	220a      	movs	r2, #10
 8006fe2:	493e      	ldr	r1, [pc, #248]	; (80070dc <checkDemoModCalisma+0x528>)
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f004 fe39 	bl	800bc5c <itoa>
			lcd_print(2,15,snum);
 8006fea:	4a3c      	ldr	r2, [pc, #240]	; (80070dc <checkDemoModCalisma+0x528>)
 8006fec:	210f      	movs	r1, #15
 8006fee:	2002      	movs	r0, #2
 8006ff0:	f7f9 fb8d 	bl	800070e <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006ff4:	4b2f      	ldr	r3, [pc, #188]	; (80070b4 <checkDemoModCalisma+0x500>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	220a      	movs	r2, #10
 8006ffa:	4938      	ldr	r1, [pc, #224]	; (80070dc <checkDemoModCalisma+0x528>)
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f004 fe2d 	bl	800bc5c <itoa>
			lcd_print(2,16,snum);
 8007002:	4a36      	ldr	r2, [pc, #216]	; (80070dc <checkDemoModCalisma+0x528>)
 8007004:	2110      	movs	r1, #16
 8007006:	2002      	movs	r0, #2
 8007008:	f7f9 fb81 	bl	800070e <lcd_print>
			mesajYazildi=1;
 800700c:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <checkDemoModCalisma+0x52c>)
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007012:	e03c      	b.n	800708e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007014:	4b33      	ldr	r3, [pc, #204]	; (80070e4 <checkDemoModCalisma+0x530>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d003      	beq.n	8007024 <checkDemoModCalisma+0x470>
 800701c:	4b2c      	ldr	r3, [pc, #176]	; (80070d0 <checkDemoModCalisma+0x51c>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d134      	bne.n	800708e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007024:	2200      	movs	r2, #0
 8007026:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800702a:	481b      	ldr	r0, [pc, #108]	; (8007098 <checkDemoModCalisma+0x4e4>)
 800702c:	f001 fe01 	bl	8008c32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007030:	2200      	movs	r2, #0
 8007032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007036:	4818      	ldr	r0, [pc, #96]	; (8007098 <checkDemoModCalisma+0x4e4>)
 8007038:	f001 fdfb 	bl	8008c32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800703c:	2200      	movs	r2, #0
 800703e:	2104      	movs	r1, #4
 8007040:	4815      	ldr	r0, [pc, #84]	; (8007098 <checkDemoModCalisma+0x4e4>)
 8007042:	f001 fdf6 	bl	8008c32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007046:	2200      	movs	r2, #0
 8007048:	2102      	movs	r1, #2
 800704a:	4813      	ldr	r0, [pc, #76]	; (8007098 <checkDemoModCalisma+0x4e4>)
 800704c:	f001 fdf1 	bl	8008c32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007050:	2200      	movs	r2, #0
 8007052:	2101      	movs	r1, #1
 8007054:	4810      	ldr	r0, [pc, #64]	; (8007098 <checkDemoModCalisma+0x4e4>)
 8007056:	f001 fdec 	bl	8008c32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800705a:	2200      	movs	r2, #0
 800705c:	2120      	movs	r1, #32
 800705e:	480d      	ldr	r0, [pc, #52]	; (8007094 <checkDemoModCalisma+0x4e0>)
 8007060:	f001 fde7 	bl	8008c32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007064:	2200      	movs	r2, #0
 8007066:	2110      	movs	r1, #16
 8007068:	480a      	ldr	r0, [pc, #40]	; (8007094 <checkDemoModCalisma+0x4e0>)
 800706a:	f001 fde2 	bl	8008c32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800706e:	2200      	movs	r2, #0
 8007070:	2180      	movs	r1, #128	; 0x80
 8007072:	480b      	ldr	r0, [pc, #44]	; (80070a0 <checkDemoModCalisma+0x4ec>)
 8007074:	f001 fddd 	bl	8008c32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007078:	2200      	movs	r2, #0
 800707a:	2140      	movs	r1, #64	; 0x40
 800707c:	4808      	ldr	r0, [pc, #32]	; (80070a0 <checkDemoModCalisma+0x4ec>)
 800707e:	f001 fdd8 	bl	8008c32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007082:	2200      	movs	r2, #0
 8007084:	2120      	movs	r1, #32
 8007086:	4806      	ldr	r0, [pc, #24]	; (80070a0 <checkDemoModCalisma+0x4ec>)
 8007088:	f001 fdd3 	bl	8008c32 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800708c:	e7ff      	b.n	800708e <checkDemoModCalisma+0x4da>
 800708e:	bf00      	nop
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40011000 	.word	0x40011000
 8007098:	40010c00 	.word	0x40010c00
 800709c:	20000b85 	.word	0x20000b85
 80070a0:	40010800 	.word	0x40010800
 80070a4:	20000b08 	.word	0x20000b08
 80070a8:	20000b18 	.word	0x20000b18
 80070ac:	20000b84 	.word	0x20000b84
 80070b0:	20000b6a 	.word	0x20000b6a
 80070b4:	20000b29 	.word	0x20000b29
 80070b8:	20000b2a 	.word	0x20000b2a
 80070bc:	20000947 	.word	0x20000947
 80070c0:	20000948 	.word	0x20000948
 80070c4:	20000b2b 	.word	0x20000b2b
 80070c8:	20000ac0 	.word	0x20000ac0
 80070cc:	20000b58 	.word	0x20000b58
 80070d0:	20000b49 	.word	0x20000b49
 80070d4:	0800d380 	.word	0x0800d380
 80070d8:	0800d38c 	.word	0x0800d38c
 80070dc:	20000b00 	.word	0x20000b00
 80070e0:	20000b60 	.word	0x20000b60
 80070e4:	20000b4a 	.word	0x20000b4a

080070e8 <mergeData>:

char* mergeData() {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b09e      	sub	sp, #120	; 0x78
 80070ec:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80070ee:	2300      	movs	r3, #0
 80070f0:	643b      	str	r3, [r7, #64]	; 0x40
 80070f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80070f6:	2229      	movs	r2, #41	; 0x29
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f004 fec6 	bl	800be8c <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007100:	4b6a      	ldr	r3, [pc, #424]	; (80072ac <mergeData+0x1c4>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	713b      	strb	r3, [r7, #4]
 8007106:	4b6a      	ldr	r3, [pc, #424]	; (80072b0 <mergeData+0x1c8>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	717b      	strb	r3, [r7, #5]
 800710c:	4b69      	ldr	r3, [pc, #420]	; (80072b4 <mergeData+0x1cc>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	71bb      	strb	r3, [r7, #6]
 8007112:	4b69      	ldr	r3, [pc, #420]	; (80072b8 <mergeData+0x1d0>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
 8007118:	4b68      	ldr	r3, [pc, #416]	; (80072bc <mergeData+0x1d4>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	723b      	strb	r3, [r7, #8]
 800711e:	4b68      	ldr	r3, [pc, #416]	; (80072c0 <mergeData+0x1d8>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	727b      	strb	r3, [r7, #9]
 8007124:	4b67      	ldr	r3, [pc, #412]	; (80072c4 <mergeData+0x1dc>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	72bb      	strb	r3, [r7, #10]
 800712a:	4b67      	ldr	r3, [pc, #412]	; (80072c8 <mergeData+0x1e0>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	72fb      	strb	r3, [r7, #11]
 8007130:	4b66      	ldr	r3, [pc, #408]	; (80072cc <mergeData+0x1e4>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	733b      	strb	r3, [r7, #12]
 8007136:	4b66      	ldr	r3, [pc, #408]	; (80072d0 <mergeData+0x1e8>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	737b      	strb	r3, [r7, #13]
 800713c:	4b65      	ldr	r3, [pc, #404]	; (80072d4 <mergeData+0x1ec>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	73bb      	strb	r3, [r7, #14]
 8007142:	4b65      	ldr	r3, [pc, #404]	; (80072d8 <mergeData+0x1f0>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	73fb      	strb	r3, [r7, #15]
 8007148:	4b64      	ldr	r3, [pc, #400]	; (80072dc <mergeData+0x1f4>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	743b      	strb	r3, [r7, #16]
 800714e:	4b64      	ldr	r3, [pc, #400]	; (80072e0 <mergeData+0x1f8>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	747b      	strb	r3, [r7, #17]
 8007154:	4b63      	ldr	r3, [pc, #396]	; (80072e4 <mergeData+0x1fc>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	74bb      	strb	r3, [r7, #18]
 800715a:	4b63      	ldr	r3, [pc, #396]	; (80072e8 <mergeData+0x200>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	74fb      	strb	r3, [r7, #19]
 8007160:	4b62      	ldr	r3, [pc, #392]	; (80072ec <mergeData+0x204>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	753b      	strb	r3, [r7, #20]
 8007166:	4b62      	ldr	r3, [pc, #392]	; (80072f0 <mergeData+0x208>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	757b      	strb	r3, [r7, #21]
 800716c:	4b61      	ldr	r3, [pc, #388]	; (80072f4 <mergeData+0x20c>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	75bb      	strb	r3, [r7, #22]
 8007172:	4b61      	ldr	r3, [pc, #388]	; (80072f8 <mergeData+0x210>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	75fb      	strb	r3, [r7, #23]
 8007178:	4b60      	ldr	r3, [pc, #384]	; (80072fc <mergeData+0x214>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	763b      	strb	r3, [r7, #24]
 800717e:	4b60      	ldr	r3, [pc, #384]	; (8007300 <mergeData+0x218>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	767b      	strb	r3, [r7, #25]
 8007184:	4b5f      	ldr	r3, [pc, #380]	; (8007304 <mergeData+0x21c>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	76bb      	strb	r3, [r7, #26]
 800718a:	4b5f      	ldr	r3, [pc, #380]	; (8007308 <mergeData+0x220>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	76fb      	strb	r3, [r7, #27]
 8007190:	4b5e      	ldr	r3, [pc, #376]	; (800730c <mergeData+0x224>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	773b      	strb	r3, [r7, #28]
 8007196:	4b5e      	ldr	r3, [pc, #376]	; (8007310 <mergeData+0x228>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	777b      	strb	r3, [r7, #29]
 800719c:	4b5d      	ldr	r3, [pc, #372]	; (8007314 <mergeData+0x22c>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	77bb      	strb	r3, [r7, #30]
 80071a2:	4b5d      	ldr	r3, [pc, #372]	; (8007318 <mergeData+0x230>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	77fb      	strb	r3, [r7, #31]
 80071a8:	4b5c      	ldr	r3, [pc, #368]	; (800731c <mergeData+0x234>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	f887 3020 	strb.w	r3, [r7, #32]
 80071b0:	4b5b      	ldr	r3, [pc, #364]	; (8007320 <mergeData+0x238>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80071b8:	4b5a      	ldr	r3, [pc, #360]	; (8007324 <mergeData+0x23c>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071c0:	4b59      	ldr	r3, [pc, #356]	; (8007328 <mergeData+0x240>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071c8:	4b58      	ldr	r3, [pc, #352]	; (800732c <mergeData+0x244>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80071d0:	4b57      	ldr	r3, [pc, #348]	; (8007330 <mergeData+0x248>)
 80071d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80071d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80071da:	4b55      	ldr	r3, [pc, #340]	; (8007330 <mergeData+0x248>)
 80071dc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80071e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80071e4:	4b52      	ldr	r3, [pc, #328]	; (8007330 <mergeData+0x248>)
 80071e6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80071ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80071ee:	4b50      	ldr	r3, [pc, #320]	; (8007330 <mergeData+0x248>)
 80071f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80071f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80071f8:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <mergeData+0x248>)
 80071fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80071fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8007202:	4b4b      	ldr	r3, [pc, #300]	; (8007330 <mergeData+0x248>)
 8007204:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007208:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 800720c:	4b48      	ldr	r3, [pc, #288]	; (8007330 <mergeData+0x248>)
 800720e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8007216:	4b46      	ldr	r3, [pc, #280]	; (8007330 <mergeData+0x248>)
 8007218:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800721c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8007220:	4b43      	ldr	r3, [pc, #268]	; (8007330 <mergeData+0x248>)
 8007222:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007226:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800722a:	4b41      	ldr	r3, [pc, #260]	; (8007330 <mergeData+0x248>)
 800722c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007230:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8007234:	4b3e      	ldr	r3, [pc, #248]	; (8007330 <mergeData+0x248>)
 8007236:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800723a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800723e:	4b3d      	ldr	r3, [pc, #244]	; (8007334 <mergeData+0x24c>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007246:	2300      	movs	r3, #0
 8007248:	677b      	str	r3, [r7, #116]	; 0x74
 800724a:	e015      	b.n	8007278 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 800724c:	1d3a      	adds	r2, r7, #4
 800724e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007250:	4413      	add	r3, r2
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800725a:	4937      	ldr	r1, [pc, #220]	; (8007338 <mergeData+0x250>)
 800725c:	4618      	mov	r0, r3
 800725e:	f004 fdf5 	bl	800be4c <siprintf>
	    strcat(combinedString, temp);
 8007262:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800726a:	4611      	mov	r1, r2
 800726c:	4618      	mov	r0, r3
 800726e:	f004 fe15 	bl	800be9c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007274:	3301      	adds	r3, #1
 8007276:	677b      	str	r3, [r7, #116]	; 0x74
 8007278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800727a:	2b2c      	cmp	r3, #44	; 0x2c
 800727c:	d9e6      	bls.n	800724c <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800727e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007282:	4618      	mov	r0, r3
 8007284:	f7f8 ffce 	bl	8000224 <strlen>
 8007288:	4603      	mov	r3, r0
 800728a:	3301      	adds	r3, #1
 800728c:	4618      	mov	r0, r3
 800728e:	f004 fce7 	bl	800bc60 <malloc>
 8007292:	4603      	mov	r3, r0
 8007294:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8007296:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800729a:	4619      	mov	r1, r3
 800729c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800729e:	f004 fe49 	bl	800bf34 <strcpy>
	return result;
 80072a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3778      	adds	r7, #120	; 0x78
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	20000b3b 	.word	0x20000b3b
 80072b0:	20000b2d 	.word	0x20000b2d
 80072b4:	20000b30 	.word	0x20000b30
 80072b8:	20000b31 	.word	0x20000b31
 80072bc:	20000b32 	.word	0x20000b32
 80072c0:	20000b39 	.word	0x20000b39
 80072c4:	20000b33 	.word	0x20000b33
 80072c8:	20000b34 	.word	0x20000b34
 80072cc:	20000b38 	.word	0x20000b38
 80072d0:	20000b35 	.word	0x20000b35
 80072d4:	20000b45 	.word	0x20000b45
 80072d8:	20000b36 	.word	0x20000b36
 80072dc:	20000b46 	.word	0x20000b46
 80072e0:	20000b37 	.word	0x20000b37
 80072e4:	20000b47 	.word	0x20000b47
 80072e8:	20000b3a 	.word	0x20000b3a
 80072ec:	20000b3c 	.word	0x20000b3c
 80072f0:	20000b3d 	.word	0x20000b3d
 80072f4:	20000b3e 	.word	0x20000b3e
 80072f8:	20000b3f 	.word	0x20000b3f
 80072fc:	20000b40 	.word	0x20000b40
 8007300:	20000b41 	.word	0x20000b41
 8007304:	20000b42 	.word	0x20000b42
 8007308:	20000b43 	.word	0x20000b43
 800730c:	20000b44 	.word	0x20000b44
 8007310:	20000b48 	.word	0x20000b48
 8007314:	20000b4a 	.word	0x20000b4a
 8007318:	20000b29 	.word	0x20000b29
 800731c:	20000b2a 	.word	0x20000b2a
 8007320:	20000947 	.word	0x20000947
 8007324:	20000948 	.word	0x20000948
 8007328:	20000b2b 	.word	0x20000b2b
 800732c:	20000b4d 	.word	0x20000b4d
 8007330:	20000ac0 	.word	0x20000ac0
 8007334:	20000946 	.word	0x20000946
 8007338:	0800d3a0 	.word	0x0800d3a0

0800733c <mainLoop>:

void mainLoop() {
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007342:	f7fd fffb 	bl	800533c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8007346:	2101      	movs	r1, #1
 8007348:	48ac      	ldr	r0, [pc, #688]	; (80075fc <mainLoop+0x2c0>)
 800734a:	f001 fc5b 	bl	8008c04 <HAL_GPIO_ReadPin>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d136      	bne.n	80073c2 <mainLoop+0x86>
 8007354:	2108      	movs	r1, #8
 8007356:	48aa      	ldr	r0, [pc, #680]	; (8007600 <mainLoop+0x2c4>)
 8007358:	f001 fc54 	bl	8008c04 <HAL_GPIO_ReadPin>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d12f      	bne.n	80073c2 <mainLoop+0x86>
 8007362:	2102      	movs	r1, #2
 8007364:	48a5      	ldr	r0, [pc, #660]	; (80075fc <mainLoop+0x2c0>)
 8007366:	f001 fc4d 	bl	8008c04 <HAL_GPIO_ReadPin>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d128      	bne.n	80073c2 <mainLoop+0x86>
 8007370:	2104      	movs	r1, #4
 8007372:	48a2      	ldr	r0, [pc, #648]	; (80075fc <mainLoop+0x2c0>)
 8007374:	f001 fc46 	bl	8008c04 <HAL_GPIO_ReadPin>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d121      	bne.n	80073c2 <mainLoop+0x86>
 800737e:	2108      	movs	r1, #8
 8007380:	489e      	ldr	r0, [pc, #632]	; (80075fc <mainLoop+0x2c0>)
 8007382:	f001 fc3f 	bl	8008c04 <HAL_GPIO_ReadPin>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d11a      	bne.n	80073c2 <mainLoop+0x86>
 800738c:	2180      	movs	r1, #128	; 0x80
 800738e:	489c      	ldr	r0, [pc, #624]	; (8007600 <mainLoop+0x2c4>)
 8007390:	f001 fc38 	bl	8008c04 <HAL_GPIO_ReadPin>
 8007394:	4603      	mov	r3, r0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d113      	bne.n	80073c2 <mainLoop+0x86>
 800739a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800739e:	4898      	ldr	r0, [pc, #608]	; (8007600 <mainLoop+0x2c4>)
 80073a0:	f001 fc30 	bl	8008c04 <HAL_GPIO_ReadPin>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d10b      	bne.n	80073c2 <mainLoop+0x86>
 80073aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073ae:	4894      	ldr	r0, [pc, #592]	; (8007600 <mainLoop+0x2c4>)
 80073b0:	f001 fc28 	bl	8008c04 <HAL_GPIO_ReadPin>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d103      	bne.n	80073c2 <mainLoop+0x86>
			butonKontrol=0;
 80073ba:	4b92      	ldr	r3, [pc, #584]	; (8007604 <mainLoop+0x2c8>)
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	e003      	b.n	80073ca <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80073c2:	4b91      	ldr	r3, [pc, #580]	; (8007608 <mainLoop+0x2cc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a91      	ldr	r2, [pc, #580]	; (800760c <mainLoop+0x2d0>)
 80073c8:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80073ca:	4b91      	ldr	r3, [pc, #580]	; (8007610 <mainLoop+0x2d4>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d039      	beq.n	8007446 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80073d2:	bf00      	nop
 80073d4:	488f      	ldr	r0, [pc, #572]	; (8007614 <mainLoop+0x2d8>)
 80073d6:	f002 fa3e 	bl	8009856 <HAL_I2C_GetError>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d0f9      	beq.n	80073d4 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80073e0:	bf00      	nop
 80073e2:	488c      	ldr	r0, [pc, #560]	; (8007614 <mainLoop+0x2d8>)
 80073e4:	f002 fa2a 	bl	800983c <HAL_I2C_GetState>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d1f9      	bne.n	80073e2 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80073ee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80073f2:	9302      	str	r3, [sp, #8]
 80073f4:	233f      	movs	r3, #63	; 0x3f
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	4b87      	ldr	r3, [pc, #540]	; (8007618 <mainLoop+0x2dc>)
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	233f      	movs	r3, #63	; 0x3f
 80073fe:	2200      	movs	r2, #0
 8007400:	21a0      	movs	r1, #160	; 0xa0
 8007402:	4884      	ldr	r0, [pc, #528]	; (8007614 <mainLoop+0x2d8>)
 8007404:	f001 feb8 	bl	8009178 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8007408:	2005      	movs	r0, #5
 800740a:	f000 fe2b 	bl	8008064 <HAL_Delay>

		  hafizaYaz=0;
 800740e:	4b80      	ldr	r3, [pc, #512]	; (8007610 <mainLoop+0x2d4>)
 8007410:	2200      	movs	r2, #0
 8007412:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8007414:	4b81      	ldr	r3, [pc, #516]	; (800761c <mainLoop+0x2e0>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d105      	bne.n	8007428 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 800741c:	4a80      	ldr	r2, [pc, #512]	; (8007620 <mainLoop+0x2e4>)
 800741e:	2101      	movs	r1, #1
 8007420:	2002      	movs	r0, #2
 8007422:	f7f9 f974 	bl	800070e <lcd_print>
 8007426:	e008      	b.n	800743a <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8007428:	4b7c      	ldr	r3, [pc, #496]	; (800761c <mainLoop+0x2e0>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d104      	bne.n	800743a <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8007430:	4a7c      	ldr	r2, [pc, #496]	; (8007624 <mainLoop+0x2e8>)
 8007432:	2101      	movs	r1, #1
 8007434:	2002      	movs	r0, #2
 8007436:	f7f9 f96a 	bl	800070e <lcd_print>
		  }

		  HAL_Delay(1000);
 800743a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800743e:	f000 fe11 	bl	8008064 <HAL_Delay>
		  lcd_clear();
 8007442:	f7f9 f979 	bl	8000738 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007446:	4b78      	ldr	r3, [pc, #480]	; (8007628 <mainLoop+0x2ec>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f083 0301 	eor.w	r3, r3, #1
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d06e      	beq.n	8007532 <mainLoop+0x1f6>
 8007454:	486f      	ldr	r0, [pc, #444]	; (8007614 <mainLoop+0x2d8>)
 8007456:	f002 f9f1 	bl	800983c <HAL_I2C_GetState>
 800745a:	4603      	mov	r3, r0
 800745c:	2b20      	cmp	r3, #32
 800745e:	d168      	bne.n	8007532 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8007460:	4b72      	ldr	r3, [pc, #456]	; (800762c <mainLoop+0x2f0>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f083 0301 	eor.w	r3, r3, #1
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d044      	beq.n	80074f8 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 800746e:	4a70      	ldr	r2, [pc, #448]	; (8007630 <mainLoop+0x2f4>)
 8007470:	2101      	movs	r1, #1
 8007472:	2001      	movs	r0, #1
 8007474:	f7f9 f94b 	bl	800070e <lcd_print>
			  if(dilSecim==0) {
 8007478:	4b68      	ldr	r3, [pc, #416]	; (800761c <mainLoop+0x2e0>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8007480:	4a6c      	ldr	r2, [pc, #432]	; (8007634 <mainLoop+0x2f8>)
 8007482:	2101      	movs	r1, #1
 8007484:	2002      	movs	r0, #2
 8007486:	f7f9 f942 	bl	800070e <lcd_print>
 800748a:	e008      	b.n	800749e <mainLoop+0x162>
			  } else if(dilSecim==1) {
 800748c:	4b63      	ldr	r3, [pc, #396]	; (800761c <mainLoop+0x2e0>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d104      	bne.n	800749e <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8007494:	4a68      	ldr	r2, [pc, #416]	; (8007638 <mainLoop+0x2fc>)
 8007496:	2101      	movs	r1, #1
 8007498:	2002      	movs	r0, #2
 800749a:	f7f9 f938 	bl	800070e <lcd_print>
			  }
			  HAL_Delay(1000);
 800749e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074a2:	f000 fddf 	bl	8008064 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80074a6:	bf00      	nop
 80074a8:	485a      	ldr	r0, [pc, #360]	; (8007614 <mainLoop+0x2d8>)
 80074aa:	f002 f9d4 	bl	8009856 <HAL_I2C_GetError>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d0f9      	beq.n	80074a8 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80074b4:	e003      	b.n	80074be <mainLoop+0x182>
				  HAL_Delay(1000);
 80074b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074ba:	f000 fdd3 	bl	8008064 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80074be:	4855      	ldr	r0, [pc, #340]	; (8007614 <mainLoop+0x2d8>)
 80074c0:	f002 f9bc 	bl	800983c <HAL_I2C_GetState>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d1f5      	bne.n	80074b6 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 80074ca:	4b54      	ldr	r3, [pc, #336]	; (800761c <mainLoop+0x2e0>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 80074d2:	4a5a      	ldr	r2, [pc, #360]	; (800763c <mainLoop+0x300>)
 80074d4:	2101      	movs	r1, #1
 80074d6:	2002      	movs	r0, #2
 80074d8:	f7f9 f919 	bl	800070e <lcd_print>
 80074dc:	e008      	b.n	80074f0 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 80074de:	4b4f      	ldr	r3, [pc, #316]	; (800761c <mainLoop+0x2e0>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d104      	bne.n	80074f0 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 80074e6:	4a56      	ldr	r2, [pc, #344]	; (8007640 <mainLoop+0x304>)
 80074e8:	2101      	movs	r1, #1
 80074ea:	2002      	movs	r0, #2
 80074ec:	f7f9 f90f 	bl	800070e <lcd_print>
			  }

			  ilkOkuma=1;
 80074f0:	4b4e      	ldr	r3, [pc, #312]	; (800762c <mainLoop+0x2f0>)
 80074f2:	2201      	movs	r2, #1
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	e014      	b.n	8007522 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 80074f8:	4b48      	ldr	r3, [pc, #288]	; (800761c <mainLoop+0x2e0>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8007500:	4a50      	ldr	r2, [pc, #320]	; (8007644 <mainLoop+0x308>)
 8007502:	2101      	movs	r1, #1
 8007504:	2002      	movs	r0, #2
 8007506:	f7f9 f902 	bl	800070e <lcd_print>
 800750a:	e008      	b.n	800751e <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 800750c:	4b43      	ldr	r3, [pc, #268]	; (800761c <mainLoop+0x2e0>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d104      	bne.n	800751e <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8007514:	4a4c      	ldr	r2, [pc, #304]	; (8007648 <mainLoop+0x30c>)
 8007516:	2101      	movs	r1, #1
 8007518:	2002      	movs	r0, #2
 800751a:	f7f9 f8f8 	bl	800070e <lcd_print>
			  }
			  lcd_clear();
 800751e:	f7f9 f90b 	bl	8000738 <lcd_clear>
		  }

		  lcd_clear();
 8007522:	f7f9 f909 	bl	8000738 <lcd_clear>

		  eepromKontrol(1);
 8007526:	2001      	movs	r0, #1
 8007528:	f7fd fac6 	bl	8004ab8 <eepromKontrol>
		  hafizaOku=1;
 800752c:	4b3e      	ldr	r3, [pc, #248]	; (8007628 <mainLoop+0x2ec>)
 800752e:	2201      	movs	r2, #1
 8007530:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007532:	4b46      	ldr	r3, [pc, #280]	; (800764c <mainLoop+0x310>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d11c      	bne.n	8007574 <mainLoop+0x238>
 800753a:	4b45      	ldr	r3, [pc, #276]	; (8007650 <mainLoop+0x314>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	f083 0301 	eor.w	r3, r3, #1
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d015      	beq.n	8007574 <mainLoop+0x238>
 8007548:	4b42      	ldr	r3, [pc, #264]	; (8007654 <mainLoop+0x318>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d111      	bne.n	8007574 <mainLoop+0x238>
			lcd_clear();
 8007550:	f7f9 f8f2 	bl	8000738 <lcd_clear>
			HAL_Delay(10);
 8007554:	200a      	movs	r0, #10
 8007556:	f000 fd85 	bl	8008064 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800755a:	4a3f      	ldr	r2, [pc, #252]	; (8007658 <mainLoop+0x31c>)
 800755c:	2101      	movs	r1, #1
 800755e:	2001      	movs	r0, #1
 8007560:	f7f9 f8d5 	bl	800070e <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8007564:	4a3d      	ldr	r2, [pc, #244]	; (800765c <mainLoop+0x320>)
 8007566:	2101      	movs	r1, #1
 8007568:	2002      	movs	r0, #2
 800756a:	f7f9 f8d0 	bl	800070e <lcd_print>
			mesajYazildi=1;
 800756e:	4b38      	ldr	r3, [pc, #224]	; (8007650 <mainLoop+0x314>)
 8007570:	2201      	movs	r2, #1
 8007572:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007574:	4b35      	ldr	r3, [pc, #212]	; (800764c <mainLoop+0x310>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d112      	bne.n	80075a2 <mainLoop+0x266>
 800757c:	2102      	movs	r1, #2
 800757e:	481f      	ldr	r0, [pc, #124]	; (80075fc <mainLoop+0x2c0>)
 8007580:	f001 fb40 	bl	8008c04 <HAL_GPIO_ReadPin>
 8007584:	4603      	mov	r3, r0
 8007586:	2b01      	cmp	r3, #1
 8007588:	d10b      	bne.n	80075a2 <mainLoop+0x266>
 800758a:	2104      	movs	r1, #4
 800758c:	481b      	ldr	r0, [pc, #108]	; (80075fc <mainLoop+0x2c0>)
 800758e:	f001 fb39 	bl	8008c04 <HAL_GPIO_ReadPin>
 8007592:	4603      	mov	r3, r0
 8007594:	2b01      	cmp	r3, #1
 8007596:	d104      	bne.n	80075a2 <mainLoop+0x266>
			menuGiris=1;
 8007598:	4b2c      	ldr	r3, [pc, #176]	; (800764c <mainLoop+0x310>)
 800759a:	2201      	movs	r2, #1
 800759c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800759e:	f7f9 f8cb 	bl	8000738 <lcd_clear>
		}

		if(menuGiris==1) {
 80075a2:	4b2a      	ldr	r3, [pc, #168]	; (800764c <mainLoop+0x310>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <mainLoop+0x272>
			menu();
 80075aa:	f7f9 f911 	bl	80007d0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80075ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075b2:	4813      	ldr	r0, [pc, #76]	; (8007600 <mainLoop+0x2c4>)
 80075b4:	f001 fb55 	bl	8008c62 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80075b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075bc:	4828      	ldr	r0, [pc, #160]	; (8007660 <mainLoop+0x324>)
 80075be:	f001 fb21 	bl	8008c04 <HAL_GPIO_ReadPin>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <mainLoop+0x2a2>
 80075c8:	4b26      	ldr	r3, [pc, #152]	; (8007664 <mainLoop+0x328>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	f083 0301 	eor.w	r3, r3, #1
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <mainLoop+0x2a2>
			stopVar=1;
 80075d6:	4b24      	ldr	r3, [pc, #144]	; (8007668 <mainLoop+0x32c>)
 80075d8:	2201      	movs	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	e002      	b.n	80075e4 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 80075de:	4b22      	ldr	r3, [pc, #136]	; (8007668 <mainLoop+0x32c>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80075e4:	f7fd feca 	bl	800537c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80075e8:	f7fd fefc 	bl	80053e4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80075ec:	f7fd ff40 	bl	8005470 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80075f0:	f7fd ff90 	bl	8005514 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80075f4:	f7ff fade 	bl	8006bb4 <checkDemoModCalisma>
		checkLCDBacklight();
 80075f8:	e6a3      	b.n	8007342 <mainLoop+0x6>
 80075fa:	bf00      	nop
 80075fc:	40010800 	.word	0x40010800
 8007600:	40011000 	.word	0x40011000
 8007604:	20000b5b 	.word	0x20000b5b
 8007608:	20000b08 	.word	0x20000b08
 800760c:	20000b24 	.word	0x20000b24
 8007610:	20000b58 	.word	0x20000b58
 8007614:	20000ce8 	.word	0x20000ce8
 8007618:	20000ac0 	.word	0x20000ac0
 800761c:	20000b4d 	.word	0x20000b4d
 8007620:	0800d3a4 	.word	0x0800d3a4
 8007624:	0800d3b8 	.word	0x0800d3b8
 8007628:	20000b59 	.word	0x20000b59
 800762c:	20000b5a 	.word	0x20000b5a
 8007630:	0800d3cc 	.word	0x0800d3cc
 8007634:	0800d3e0 	.word	0x0800d3e0
 8007638:	0800d3f4 	.word	0x0800d3f4
 800763c:	0800d408 	.word	0x0800d408
 8007640:	0800d41c 	.word	0x0800d41c
 8007644:	0800d430 	.word	0x0800d430
 8007648:	0800d444 	.word	0x0800d444
 800764c:	20000b49 	.word	0x20000b49
 8007650:	20000b60 	.word	0x20000b60
 8007654:	20000b4a 	.word	0x20000b4a
 8007658:	0800d2f0 	.word	0x0800d2f0
 800765c:	0800d304 	.word	0x0800d304
 8007660:	40010c00 	.word	0x40010c00
 8007664:	20000b81 	.word	0x20000b81
 8007668:	20000b7e 	.word	0x20000b7e

0800766c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a03      	ldr	r2, [pc, #12]	; (8007688 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800767c:	6013      	str	r3, [r2, #0]
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr
 8007688:	20000b08 	.word	0x20000b08

0800768c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007690:	f000 fc86 	bl	8007fa0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007698:	f000 fce4 	bl	8008064 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800769c:	f000 f8b6 	bl	800780c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80076a0:	f000 f9d8 	bl	8007a54 <MX_GPIO_Init>
  MX_CAN_Init();
 80076a4:	f000 f8f8 	bl	8007898 <MX_CAN_Init>
  MX_I2C1_Init();
 80076a8:	f000 f92a 	bl	8007900 <MX_I2C1_Init>
  MX_TIM1_Init();
 80076ac:	f000 f956 	bl	800795c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80076b0:	f000 f9a6 	bl	8007a00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80076b4:	2201      	movs	r2, #1
 80076b6:	2140      	movs	r1, #64	; 0x40
 80076b8:	4847      	ldr	r0, [pc, #284]	; (80077d8 <main+0x14c>)
 80076ba:	f001 faba 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80076be:	2201      	movs	r2, #1
 80076c0:	2180      	movs	r1, #128	; 0x80
 80076c2:	4845      	ldr	r0, [pc, #276]	; (80077d8 <main+0x14c>)
 80076c4:	f001 fab5 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80076c8:	200a      	movs	r0, #10
 80076ca:	f000 fccb 	bl	8008064 <HAL_Delay>
  lcd_init();
 80076ce:	f7f8 ffec 	bl	80006aa <lcd_init>
  HAL_Delay(10);
 80076d2:	200a      	movs	r0, #10
 80076d4:	f000 fcc6 	bl	8008064 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80076d8:	4840      	ldr	r0, [pc, #256]	; (80077dc <main+0x150>)
 80076da:	f003 f95d 	bl	800a998 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80076de:	bf00      	nop
 80076e0:	483f      	ldr	r0, [pc, #252]	; (80077e0 <main+0x154>)
 80076e2:	f002 f8b8 	bl	8009856 <HAL_I2C_GetError>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d0f9      	beq.n	80076e0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80076ec:	bf00      	nop
 80076ee:	483c      	ldr	r0, [pc, #240]	; (80077e0 <main+0x154>)
 80076f0:	f002 f8a4 	bl	800983c <HAL_I2C_GetState>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d1f9      	bne.n	80076ee <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80076fa:	2200      	movs	r2, #0
 80076fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007700:	4835      	ldr	r0, [pc, #212]	; (80077d8 <main+0x14c>)
 8007702:	f001 fa96 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007706:	2200      	movs	r2, #0
 8007708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800770c:	4832      	ldr	r0, [pc, #200]	; (80077d8 <main+0x14c>)
 800770e:	f001 fa90 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007712:	2200      	movs	r2, #0
 8007714:	2104      	movs	r1, #4
 8007716:	4830      	ldr	r0, [pc, #192]	; (80077d8 <main+0x14c>)
 8007718:	f001 fa8b 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800771c:	2200      	movs	r2, #0
 800771e:	2102      	movs	r1, #2
 8007720:	482d      	ldr	r0, [pc, #180]	; (80077d8 <main+0x14c>)
 8007722:	f001 fa86 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007726:	2200      	movs	r2, #0
 8007728:	2101      	movs	r1, #1
 800772a:	482b      	ldr	r0, [pc, #172]	; (80077d8 <main+0x14c>)
 800772c:	f001 fa81 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007730:	2200      	movs	r2, #0
 8007732:	2120      	movs	r1, #32
 8007734:	482b      	ldr	r0, [pc, #172]	; (80077e4 <main+0x158>)
 8007736:	f001 fa7c 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800773a:	2200      	movs	r2, #0
 800773c:	2110      	movs	r1, #16
 800773e:	4829      	ldr	r0, [pc, #164]	; (80077e4 <main+0x158>)
 8007740:	f001 fa77 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007744:	2200      	movs	r2, #0
 8007746:	2180      	movs	r1, #128	; 0x80
 8007748:	4827      	ldr	r0, [pc, #156]	; (80077e8 <main+0x15c>)
 800774a:	f001 fa72 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800774e:	2200      	movs	r2, #0
 8007750:	2140      	movs	r1, #64	; 0x40
 8007752:	4825      	ldr	r0, [pc, #148]	; (80077e8 <main+0x15c>)
 8007754:	f001 fa6d 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007758:	2200      	movs	r2, #0
 800775a:	2120      	movs	r1, #32
 800775c:	4822      	ldr	r0, [pc, #136]	; (80077e8 <main+0x15c>)
 800775e:	f001 fa68 	bl	8008c32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007762:	2200      	movs	r2, #0
 8007764:	2110      	movs	r1, #16
 8007766:	4820      	ldr	r0, [pc, #128]	; (80077e8 <main+0x15c>)
 8007768:	f001 fa63 	bl	8008c32 <HAL_GPIO_WritePin>

  i2cTest();
 800776c:	f7fd fd38 	bl	80051e0 <i2cTest>
  HAL_Delay(100);
 8007770:	2064      	movs	r0, #100	; 0x64
 8007772:	f000 fc77 	bl	8008064 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007776:	4a1d      	ldr	r2, [pc, #116]	; (80077ec <main+0x160>)
 8007778:	2101      	movs	r1, #1
 800777a:	2001      	movs	r0, #1
 800777c:	f7f8 ffc7 	bl	800070e <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007780:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <main+0x164>)
 8007782:	2101      	movs	r1, #1
 8007784:	2002      	movs	r0, #2
 8007786:	f7f8 ffc2 	bl	800070e <lcd_print>
  HAL_Delay(1000);
 800778a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800778e:	f000 fc69 	bl	8008064 <HAL_Delay>
  lcd_clear();
 8007792:	f7f8 ffd1 	bl	8000738 <lcd_clear>

  eepromKontrol(0);
 8007796:	2000      	movs	r0, #0
 8007798:	f7fd f98e 	bl	8004ab8 <eepromKontrol>

  if(iotMode == 1) {
 800779c:	4b15      	ldr	r3, [pc, #84]	; (80077f4 <main+0x168>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d110      	bne.n	80077c6 <main+0x13a>
	  lcd_print(1, 1, "Wifi Ayarlaniyor");
 80077a4:	4a14      	ldr	r2, [pc, #80]	; (80077f8 <main+0x16c>)
 80077a6:	2101      	movs	r1, #1
 80077a8:	2001      	movs	r0, #1
 80077aa:	f7f8 ffb0 	bl	800070e <lcd_print>
	  lcd_print(2, 1, "Lutfen Bekleyin");
 80077ae:	4a13      	ldr	r2, [pc, #76]	; (80077fc <main+0x170>)
 80077b0:	2101      	movs	r1, #1
 80077b2:	2002      	movs	r0, #2
 80077b4:	f7f8 ffab 	bl	800070e <lcd_print>
	  ESP8266_Init(&huart1);
 80077b8:	4811      	ldr	r0, [pc, #68]	; (8007800 <main+0x174>)
 80077ba:	f7f8 fd3b 	bl	8000234 <ESP8266_Init>
	  HAL_Delay(500);
 80077be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077c2:	f000 fc4f 	bl	8008064 <HAL_Delay>
  }

  lcd_clear();
 80077c6:	f7f8 ffb7 	bl	8000738 <lcd_clear>

  backLightTimer = millis;
 80077ca:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <main+0x178>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a0e      	ldr	r2, [pc, #56]	; (8007808 <main+0x17c>)
 80077d0:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80077d2:	f7ff fdb3 	bl	800733c <mainLoop>
 80077d6:	e7fc      	b.n	80077d2 <main+0x146>
 80077d8:	40010c00 	.word	0x40010c00
 80077dc:	20000d3c 	.word	0x20000d3c
 80077e0:	20000ce8 	.word	0x20000ce8
 80077e4:	40011000 	.word	0x40011000
 80077e8:	40010800 	.word	0x40010800
 80077ec:	0800d458 	.word	0x0800d458
 80077f0:	0800d46c 	.word	0x0800d46c
 80077f4:	20000b4b 	.word	0x20000b4b
 80077f8:	0800d480 	.word	0x0800d480
 80077fc:	0800d494 	.word	0x0800d494
 8007800:	20000d84 	.word	0x20000d84
 8007804:	20000b08 	.word	0x20000b08
 8007808:	20000b24 	.word	0x20000b24

0800780c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b090      	sub	sp, #64	; 0x40
 8007810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007812:	f107 0318 	add.w	r3, r7, #24
 8007816:	2228      	movs	r2, #40	; 0x28
 8007818:	2100      	movs	r1, #0
 800781a:	4618      	mov	r0, r3
 800781c:	f004 fb36 	bl	800be8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007820:	1d3b      	adds	r3, r7, #4
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	605a      	str	r2, [r3, #4]
 8007828:	609a      	str	r2, [r3, #8]
 800782a:	60da      	str	r2, [r3, #12]
 800782c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800782e:	2301      	movs	r3, #1
 8007830:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007838:	2300      	movs	r3, #0
 800783a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800783c:	2301      	movs	r3, #1
 800783e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007840:	2302      	movs	r3, #2
 8007842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800784a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800784e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007850:	f107 0318 	add.w	r3, r7, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f002 fc3f 	bl	800a0d8 <HAL_RCC_OscConfig>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007860:	f000 f9a2 	bl	8007ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007864:	230f      	movs	r3, #15
 8007866:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007868:	2302      	movs	r3, #2
 800786a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800787a:	1d3b      	adds	r3, r7, #4
 800787c:	2102      	movs	r1, #2
 800787e:	4618      	mov	r0, r3
 8007880:	f002 feac 	bl	800a5dc <HAL_RCC_ClockConfig>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800788a:	f000 f98d 	bl	8007ba8 <Error_Handler>
  }
}
 800788e:	bf00      	nop
 8007890:	3740      	adds	r7, #64	; 0x40
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800789c:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <MX_CAN_Init+0x60>)
 800789e:	4a17      	ldr	r2, [pc, #92]	; (80078fc <MX_CAN_Init+0x64>)
 80078a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80078a2:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <MX_CAN_Init+0x60>)
 80078a4:	2210      	movs	r2, #16
 80078a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80078a8:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <MX_CAN_Init+0x60>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80078ae:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <MX_CAN_Init+0x60>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80078b4:	4b10      	ldr	r3, [pc, #64]	; (80078f8 <MX_CAN_Init+0x60>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80078ba:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <MX_CAN_Init+0x60>)
 80078bc:	2200      	movs	r2, #0
 80078be:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80078c0:	4b0d      	ldr	r3, [pc, #52]	; (80078f8 <MX_CAN_Init+0x60>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80078c6:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <MX_CAN_Init+0x60>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <MX_CAN_Init+0x60>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80078d2:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <MX_CAN_Init+0x60>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80078d8:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <MX_CAN_Init+0x60>)
 80078da:	2200      	movs	r2, #0
 80078dc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80078de:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <MX_CAN_Init+0x60>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80078e4:	4804      	ldr	r0, [pc, #16]	; (80078f8 <MX_CAN_Init+0x60>)
 80078e6:	f000 fbe1 	bl	80080ac <HAL_CAN_Init>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80078f0:	f000 f95a 	bl	8007ba8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80078f4:	bf00      	nop
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000cc0 	.word	0x20000cc0
 80078fc:	40006400 	.word	0x40006400

08007900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007904:	4b12      	ldr	r3, [pc, #72]	; (8007950 <MX_I2C1_Init+0x50>)
 8007906:	4a13      	ldr	r2, [pc, #76]	; (8007954 <MX_I2C1_Init+0x54>)
 8007908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800790a:	4b11      	ldr	r3, [pc, #68]	; (8007950 <MX_I2C1_Init+0x50>)
 800790c:	4a12      	ldr	r2, [pc, #72]	; (8007958 <MX_I2C1_Init+0x58>)
 800790e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <MX_I2C1_Init+0x50>)
 8007912:	2200      	movs	r2, #0
 8007914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007916:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <MX_I2C1_Init+0x50>)
 8007918:	2200      	movs	r2, #0
 800791a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800791c:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <MX_I2C1_Init+0x50>)
 800791e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007922:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007924:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <MX_I2C1_Init+0x50>)
 8007926:	2200      	movs	r2, #0
 8007928:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800792a:	4b09      	ldr	r3, [pc, #36]	; (8007950 <MX_I2C1_Init+0x50>)
 800792c:	2200      	movs	r2, #0
 800792e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <MX_I2C1_Init+0x50>)
 8007932:	2200      	movs	r2, #0
 8007934:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <MX_I2C1_Init+0x50>)
 8007938:	2200      	movs	r2, #0
 800793a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800793c:	4804      	ldr	r0, [pc, #16]	; (8007950 <MX_I2C1_Init+0x50>)
 800793e:	f001 f9a9 	bl	8008c94 <HAL_I2C_Init>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007948:	f000 f92e 	bl	8007ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800794c:	bf00      	nop
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000ce8 	.word	0x20000ce8
 8007954:	40005400 	.word	0x40005400
 8007958:	00061a80 	.word	0x00061a80

0800795c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007962:	f107 0308 	add.w	r3, r7, #8
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	605a      	str	r2, [r3, #4]
 800796c:	609a      	str	r2, [r3, #8]
 800796e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007970:	463b      	mov	r3, r7
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007978:	4b1f      	ldr	r3, [pc, #124]	; (80079f8 <MX_TIM1_Init+0x9c>)
 800797a:	4a20      	ldr	r2, [pc, #128]	; (80079fc <MX_TIM1_Init+0xa0>)
 800797c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800797e:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <MX_TIM1_Init+0x9c>)
 8007980:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007984:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007986:	4b1c      	ldr	r3, [pc, #112]	; (80079f8 <MX_TIM1_Init+0x9c>)
 8007988:	2200      	movs	r2, #0
 800798a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800798c:	4b1a      	ldr	r3, [pc, #104]	; (80079f8 <MX_TIM1_Init+0x9c>)
 800798e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007992:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007994:	4b18      	ldr	r3, [pc, #96]	; (80079f8 <MX_TIM1_Init+0x9c>)
 8007996:	2200      	movs	r2, #0
 8007998:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800799a:	4b17      	ldr	r3, [pc, #92]	; (80079f8 <MX_TIM1_Init+0x9c>)
 800799c:	2200      	movs	r2, #0
 800799e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079a0:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <MX_TIM1_Init+0x9c>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80079a6:	4814      	ldr	r0, [pc, #80]	; (80079f8 <MX_TIM1_Init+0x9c>)
 80079a8:	f002 ffa6 	bl	800a8f8 <HAL_TIM_Base_Init>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80079b2:	f000 f8f9 	bl	8007ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80079bc:	f107 0308 	add.w	r3, r7, #8
 80079c0:	4619      	mov	r1, r3
 80079c2:	480d      	ldr	r0, [pc, #52]	; (80079f8 <MX_TIM1_Init+0x9c>)
 80079c4:	f003 f950 	bl	800ac68 <HAL_TIM_ConfigClockSource>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80079ce:	f000 f8eb 	bl	8007ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079d2:	2300      	movs	r3, #0
 80079d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80079da:	463b      	mov	r3, r7
 80079dc:	4619      	mov	r1, r3
 80079de:	4806      	ldr	r0, [pc, #24]	; (80079f8 <MX_TIM1_Init+0x9c>)
 80079e0:	f003 fb3e 	bl	800b060 <HAL_TIMEx_MasterConfigSynchronization>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80079ea:	f000 f8dd 	bl	8007ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80079ee:	bf00      	nop
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20000d3c 	.word	0x20000d3c
 80079fc:	40012c00 	.word	0x40012c00

08007a00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007a04:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <MX_USART1_UART_Init+0x4c>)
 8007a06:	4a12      	ldr	r2, [pc, #72]	; (8007a50 <MX_USART1_UART_Init+0x50>)
 8007a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007a0a:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <MX_USART1_UART_Init+0x4c>)
 8007a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007a12:	4b0e      	ldr	r3, [pc, #56]	; (8007a4c <MX_USART1_UART_Init+0x4c>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007a18:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <MX_USART1_UART_Init+0x4c>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007a1e:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <MX_USART1_UART_Init+0x4c>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007a24:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <MX_USART1_UART_Init+0x4c>)
 8007a26:	220c      	movs	r2, #12
 8007a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a2a:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <MX_USART1_UART_Init+0x4c>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a30:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <MX_USART1_UART_Init+0x4c>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007a36:	4805      	ldr	r0, [pc, #20]	; (8007a4c <MX_USART1_UART_Init+0x4c>)
 8007a38:	f003 fb90 	bl	800b15c <HAL_UART_Init>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007a42:	f000 f8b1 	bl	8007ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007a46:	bf00      	nop
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000d84 	.word	0x20000d84
 8007a50:	40013800 	.word	0x40013800

08007a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a5a:	f107 0310 	add.w	r3, r7, #16
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	605a      	str	r2, [r3, #4]
 8007a64:	609a      	str	r2, [r3, #8]
 8007a66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a68:	4b4b      	ldr	r3, [pc, #300]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	4a4a      	ldr	r2, [pc, #296]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007a6e:	f043 0310 	orr.w	r3, r3, #16
 8007a72:	6193      	str	r3, [r2, #24]
 8007a74:	4b48      	ldr	r3, [pc, #288]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a80:	4b45      	ldr	r3, [pc, #276]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	4a44      	ldr	r2, [pc, #272]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007a86:	f043 0320 	orr.w	r3, r3, #32
 8007a8a:	6193      	str	r3, [r2, #24]
 8007a8c:	4b42      	ldr	r3, [pc, #264]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a98:	4b3f      	ldr	r3, [pc, #252]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	4a3e      	ldr	r2, [pc, #248]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007a9e:	f043 0304 	orr.w	r3, r3, #4
 8007aa2:	6193      	str	r3, [r2, #24]
 8007aa4:	4b3c      	ldr	r3, [pc, #240]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	607b      	str	r3, [r7, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ab0:	4b39      	ldr	r3, [pc, #228]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	4a38      	ldr	r2, [pc, #224]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007ab6:	f043 0308 	orr.w	r3, r3, #8
 8007aba:	6193      	str	r3, [r2, #24]
 8007abc:	4b36      	ldr	r3, [pc, #216]	; (8007b98 <MX_GPIO_Init+0x144>)
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	603b      	str	r3, [r7, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007ac8:	2200      	movs	r2, #0
 8007aca:	21f0      	movs	r1, #240	; 0xf0
 8007acc:	4833      	ldr	r0, [pc, #204]	; (8007b9c <MX_GPIO_Init+0x148>)
 8007ace:	f001 f8b0 	bl	8008c32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f241 0130 	movw	r1, #4144	; 0x1030
 8007ad8:	4831      	ldr	r0, [pc, #196]	; (8007ba0 <MX_GPIO_Init+0x14c>)
 8007ada:	f001 f8aa 	bl	8008c32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f640 4107 	movw	r1, #3079	; 0xc07
 8007ae4:	482f      	ldr	r0, [pc, #188]	; (8007ba4 <MX_GPIO_Init+0x150>)
 8007ae6:	f001 f8a4 	bl	8008c32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007aea:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007aee:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007af8:	f107 0310 	add.w	r3, r7, #16
 8007afc:	4619      	mov	r1, r3
 8007afe:	4828      	ldr	r0, [pc, #160]	; (8007ba0 <MX_GPIO_Init+0x14c>)
 8007b00:	f000 fe20 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007b04:	f248 130f 	movw	r3, #33039	; 0x810f
 8007b08:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b12:	f107 0310 	add.w	r3, r7, #16
 8007b16:	4619      	mov	r1, r3
 8007b18:	4820      	ldr	r0, [pc, #128]	; (8007b9c <MX_GPIO_Init+0x148>)
 8007b1a:	f000 fe13 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007b1e:	23f0      	movs	r3, #240	; 0xf0
 8007b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b22:	2301      	movs	r3, #1
 8007b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b2e:	f107 0310 	add.w	r3, r7, #16
 8007b32:	4619      	mov	r1, r3
 8007b34:	4819      	ldr	r0, [pc, #100]	; (8007b9c <MX_GPIO_Init+0x148>)
 8007b36:	f000 fe05 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007b3a:	f241 0330 	movw	r3, #4144	; 0x1030
 8007b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b40:	2301      	movs	r3, #1
 8007b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b4c:	f107 0310 	add.w	r3, r7, #16
 8007b50:	4619      	mov	r1, r3
 8007b52:	4813      	ldr	r0, [pc, #76]	; (8007ba0 <MX_GPIO_Init+0x14c>)
 8007b54:	f000 fdf6 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007b58:	f640 4307 	movw	r3, #3079	; 0xc07
 8007b5c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b66:	2302      	movs	r3, #2
 8007b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b6a:	f107 0310 	add.w	r3, r7, #16
 8007b6e:	4619      	mov	r1, r3
 8007b70:	480c      	ldr	r0, [pc, #48]	; (8007ba4 <MX_GPIO_Init+0x150>)
 8007b72:	f000 fde7 	bl	8008744 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007b76:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b84:	f107 0310 	add.w	r3, r7, #16
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4806      	ldr	r0, [pc, #24]	; (8007ba4 <MX_GPIO_Init+0x150>)
 8007b8c:	f000 fdda 	bl	8008744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007b90:	bf00      	nop
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40021000 	.word	0x40021000
 8007b9c:	40010800 	.word	0x40010800
 8007ba0:	40011000 	.word	0x40011000
 8007ba4:	40010c00 	.word	0x40010c00

08007ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007bac:	bf00      	nop
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007bba:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <HAL_MspInit+0x5c>)
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <HAL_MspInit+0x5c>)
 8007bc0:	f043 0301 	orr.w	r3, r3, #1
 8007bc4:	6193      	str	r3, [r2, #24]
 8007bc6:	4b12      	ldr	r3, [pc, #72]	; (8007c10 <HAL_MspInit+0x5c>)
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bd2:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <HAL_MspInit+0x5c>)
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	4a0e      	ldr	r2, [pc, #56]	; (8007c10 <HAL_MspInit+0x5c>)
 8007bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bdc:	61d3      	str	r3, [r2, #28]
 8007bde:	4b0c      	ldr	r3, [pc, #48]	; (8007c10 <HAL_MspInit+0x5c>)
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007be6:	607b      	str	r3, [r7, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007bea:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <HAL_MspInit+0x60>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	4a04      	ldr	r2, [pc, #16]	; (8007c14 <HAL_MspInit+0x60>)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c06:	bf00      	nop
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bc80      	pop	{r7}
 8007c0e:	4770      	bx	lr
 8007c10:	40021000 	.word	0x40021000
 8007c14:	40010000 	.word	0x40010000

08007c18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c20:	f107 0310 	add.w	r3, r7, #16
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
 8007c2c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a1c      	ldr	r2, [pc, #112]	; (8007ca4 <HAL_CAN_MspInit+0x8c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d131      	bne.n	8007c9c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007c38:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <HAL_CAN_MspInit+0x90>)
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	4a1a      	ldr	r2, [pc, #104]	; (8007ca8 <HAL_CAN_MspInit+0x90>)
 8007c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007c42:	61d3      	str	r3, [r2, #28]
 8007c44:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <HAL_CAN_MspInit+0x90>)
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c50:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <HAL_CAN_MspInit+0x90>)
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	4a14      	ldr	r2, [pc, #80]	; (8007ca8 <HAL_CAN_MspInit+0x90>)
 8007c56:	f043 0304 	orr.w	r3, r3, #4
 8007c5a:	6193      	str	r3, [r2, #24]
 8007c5c:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <HAL_CAN_MspInit+0x90>)
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	60bb      	str	r3, [r7, #8]
 8007c66:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c76:	f107 0310 	add.w	r3, r7, #16
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	480b      	ldr	r0, [pc, #44]	; (8007cac <HAL_CAN_MspInit+0x94>)
 8007c7e:	f000 fd61 	bl	8008744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c90:	f107 0310 	add.w	r3, r7, #16
 8007c94:	4619      	mov	r1, r3
 8007c96:	4805      	ldr	r0, [pc, #20]	; (8007cac <HAL_CAN_MspInit+0x94>)
 8007c98:	f000 fd54 	bl	8008744 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007c9c:	bf00      	nop
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	40006400 	.word	0x40006400
 8007ca8:	40021000 	.word	0x40021000
 8007cac:	40010800 	.word	0x40010800

08007cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb8:	f107 0310 	add.w	r3, r7, #16
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	605a      	str	r2, [r3, #4]
 8007cc2:	609a      	str	r2, [r3, #8]
 8007cc4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a15      	ldr	r2, [pc, #84]	; (8007d20 <HAL_I2C_MspInit+0x70>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d123      	bne.n	8007d18 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cd0:	4b14      	ldr	r3, [pc, #80]	; (8007d24 <HAL_I2C_MspInit+0x74>)
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	4a13      	ldr	r2, [pc, #76]	; (8007d24 <HAL_I2C_MspInit+0x74>)
 8007cd6:	f043 0308 	orr.w	r3, r3, #8
 8007cda:	6193      	str	r3, [r2, #24]
 8007cdc:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <HAL_I2C_MspInit+0x74>)
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ce8:	23c0      	movs	r3, #192	; 0xc0
 8007cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007cec:	2312      	movs	r3, #18
 8007cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cf4:	f107 0310 	add.w	r3, r7, #16
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	480b      	ldr	r0, [pc, #44]	; (8007d28 <HAL_I2C_MspInit+0x78>)
 8007cfc:	f000 fd22 	bl	8008744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007d00:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <HAL_I2C_MspInit+0x74>)
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	4a07      	ldr	r2, [pc, #28]	; (8007d24 <HAL_I2C_MspInit+0x74>)
 8007d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d0a:	61d3      	str	r3, [r2, #28]
 8007d0c:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <HAL_I2C_MspInit+0x74>)
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007d18:	bf00      	nop
 8007d1a:	3720      	adds	r7, #32
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40005400 	.word	0x40005400
 8007d24:	40021000 	.word	0x40021000
 8007d28:	40010c00 	.word	0x40010c00

08007d2c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a0a      	ldr	r2, [pc, #40]	; (8007d64 <HAL_I2C_MspDeInit+0x38>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d10d      	bne.n	8007d5a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <HAL_I2C_MspDeInit+0x3c>)
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	4a09      	ldr	r2, [pc, #36]	; (8007d68 <HAL_I2C_MspDeInit+0x3c>)
 8007d44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d48:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8007d4a:	2140      	movs	r1, #64	; 0x40
 8007d4c:	4807      	ldr	r0, [pc, #28]	; (8007d6c <HAL_I2C_MspDeInit+0x40>)
 8007d4e:	f000 fe8d 	bl	8008a6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007d52:	2180      	movs	r1, #128	; 0x80
 8007d54:	4805      	ldr	r0, [pc, #20]	; (8007d6c <HAL_I2C_MspDeInit+0x40>)
 8007d56:	f000 fe89 	bl	8008a6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	40005400 	.word	0x40005400
 8007d68:	40021000 	.word	0x40021000
 8007d6c:	40010c00 	.word	0x40010c00

08007d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a0d      	ldr	r2, [pc, #52]	; (8007db4 <HAL_TIM_Base_MspInit+0x44>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d113      	bne.n	8007daa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007d82:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <HAL_TIM_Base_MspInit+0x48>)
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	4a0c      	ldr	r2, [pc, #48]	; (8007db8 <HAL_TIM_Base_MspInit+0x48>)
 8007d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d8c:	6193      	str	r3, [r2, #24]
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <HAL_TIM_Base_MspInit+0x48>)
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	2019      	movs	r0, #25
 8007da0:	f000 fb57 	bl	8008452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007da4:	2019      	movs	r0, #25
 8007da6:	f000 fb70 	bl	800848a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	40012c00 	.word	0x40012c00
 8007db8:	40021000 	.word	0x40021000

08007dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dc4:	f107 0310 	add.w	r3, r7, #16
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	605a      	str	r2, [r3, #4]
 8007dce:	609a      	str	r2, [r3, #8]
 8007dd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a20      	ldr	r2, [pc, #128]	; (8007e58 <HAL_UART_MspInit+0x9c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d139      	bne.n	8007e50 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007ddc:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <HAL_UART_MspInit+0xa0>)
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <HAL_UART_MspInit+0xa0>)
 8007de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007de6:	6193      	str	r3, [r2, #24]
 8007de8:	4b1c      	ldr	r3, [pc, #112]	; (8007e5c <HAL_UART_MspInit+0xa0>)
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007df4:	4b19      	ldr	r3, [pc, #100]	; (8007e5c <HAL_UART_MspInit+0xa0>)
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	4a18      	ldr	r2, [pc, #96]	; (8007e5c <HAL_UART_MspInit+0xa0>)
 8007dfa:	f043 0304 	orr.w	r3, r3, #4
 8007dfe:	6193      	str	r3, [r2, #24]
 8007e00:	4b16      	ldr	r3, [pc, #88]	; (8007e5c <HAL_UART_MspInit+0xa0>)
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e12:	2302      	movs	r3, #2
 8007e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007e16:	2303      	movs	r3, #3
 8007e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e1a:	f107 0310 	add.w	r3, r7, #16
 8007e1e:	4619      	mov	r1, r3
 8007e20:	480f      	ldr	r0, [pc, #60]	; (8007e60 <HAL_UART_MspInit+0xa4>)
 8007e22:	f000 fc8f 	bl	8008744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e30:	2300      	movs	r3, #0
 8007e32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e34:	f107 0310 	add.w	r3, r7, #16
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4809      	ldr	r0, [pc, #36]	; (8007e60 <HAL_UART_MspInit+0xa4>)
 8007e3c:	f000 fc82 	bl	8008744 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007e40:	2200      	movs	r2, #0
 8007e42:	2100      	movs	r1, #0
 8007e44:	2025      	movs	r0, #37	; 0x25
 8007e46:	f000 fb04 	bl	8008452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007e4a:	2025      	movs	r0, #37	; 0x25
 8007e4c:	f000 fb1d 	bl	800848a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007e50:	bf00      	nop
 8007e52:	3720      	adds	r7, #32
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	40013800 	.word	0x40013800
 8007e5c:	40021000 	.word	0x40021000
 8007e60:	40010800 	.word	0x40010800

08007e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007e68:	e7fe      	b.n	8007e68 <NMI_Handler+0x4>

08007e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e6e:	e7fe      	b.n	8007e6e <HardFault_Handler+0x4>

08007e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e74:	e7fe      	b.n	8007e74 <MemManage_Handler+0x4>

08007e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e76:	b480      	push	{r7}
 8007e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e7a:	e7fe      	b.n	8007e7a <BusFault_Handler+0x4>

08007e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e80:	e7fe      	b.n	8007e80 <UsageFault_Handler+0x4>

08007e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e82:	b480      	push	{r7}
 8007e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e86:	bf00      	nop
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr

08007e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e92:	bf00      	nop
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bc80      	pop	{r7}
 8007e98:	4770      	bx	lr

08007e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e9e:	bf00      	nop
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bc80      	pop	{r7}
 8007ea4:	4770      	bx	lr

08007ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007eaa:	f000 f8bf 	bl	800802c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007eae:	bf00      	nop
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007eb8:	4802      	ldr	r0, [pc, #8]	; (8007ec4 <TIM1_UP_IRQHandler+0x10>)
 8007eba:	f002 fdcd 	bl	800aa58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007ebe:	bf00      	nop
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000d3c 	.word	0x20000d3c

08007ec8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007ecc:	4802      	ldr	r0, [pc, #8]	; (8007ed8 <USART1_IRQHandler+0x10>)
 8007ece:	f003 f9cb 	bl	800b268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007ed2:	bf00      	nop
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000d84 	.word	0x20000d84

08007edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007ee4:	4a14      	ldr	r2, [pc, #80]	; (8007f38 <_sbrk+0x5c>)
 8007ee6:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <_sbrk+0x60>)
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007ef0:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <_sbrk+0x64>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007ef8:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <_sbrk+0x64>)
 8007efa:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <_sbrk+0x68>)
 8007efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <_sbrk+0x64>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4413      	add	r3, r2
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d207      	bcs.n	8007f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f0c:	f003 ffe6 	bl	800bedc <__errno>
 8007f10:	4603      	mov	r3, r0
 8007f12:	220c      	movs	r2, #12
 8007f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f16:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1a:	e009      	b.n	8007f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f1c:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <_sbrk+0x64>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f22:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <_sbrk+0x64>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4413      	add	r3, r2
 8007f2a:	4a05      	ldr	r2, [pc, #20]	; (8007f40 <_sbrk+0x64>)
 8007f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	2000c000 	.word	0x2000c000
 8007f3c:	00000400 	.word	0x00000400
 8007f40:	20000dcc 	.word	0x20000dcc
 8007f44:	20000f20 	.word	0x20000f20

08007f48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007f4c:	bf00      	nop
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr

08007f54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007f54:	480c      	ldr	r0, [pc, #48]	; (8007f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007f56:	490d      	ldr	r1, [pc, #52]	; (8007f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007f58:	4a0d      	ldr	r2, [pc, #52]	; (8007f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007f5c:	e002      	b.n	8007f64 <LoopCopyDataInit>

08007f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007f62:	3304      	adds	r3, #4

08007f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007f68:	d3f9      	bcc.n	8007f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007f6a:	4a0a      	ldr	r2, [pc, #40]	; (8007f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007f6c:	4c0a      	ldr	r4, [pc, #40]	; (8007f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007f70:	e001      	b.n	8007f76 <LoopFillZerobss>

08007f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007f74:	3204      	adds	r2, #4

08007f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007f78:	d3fb      	bcc.n	8007f72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007f7a:	f7ff ffe5 	bl	8007f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f7e:	f003 ffb3 	bl	800bee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007f82:	f7ff fb83 	bl	800768c <main>
  bx lr
 8007f86:	4770      	bx	lr
  ldr r0, =_sdata
 8007f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f8c:	200009a8 	.word	0x200009a8
  ldr r2, =_sidata
 8007f90:	0800d530 	.word	0x0800d530
  ldr r2, =_sbss
 8007f94:	200009a8 	.word	0x200009a8
  ldr r4, =_ebss
 8007f98:	20000f1c 	.word	0x20000f1c

08007f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007f9c:	e7fe      	b.n	8007f9c <ADC1_2_IRQHandler>
	...

08007fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007fa4:	4b08      	ldr	r3, [pc, #32]	; (8007fc8 <HAL_Init+0x28>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a07      	ldr	r2, [pc, #28]	; (8007fc8 <HAL_Init+0x28>)
 8007faa:	f043 0310 	orr.w	r3, r3, #16
 8007fae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007fb0:	2003      	movs	r0, #3
 8007fb2:	f000 fa43 	bl	800843c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007fb6:	200f      	movs	r0, #15
 8007fb8:	f000 f808 	bl	8007fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007fbc:	f7ff fdfa 	bl	8007bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	40022000 	.word	0x40022000

08007fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007fd4:	4b12      	ldr	r3, [pc, #72]	; (8008020 <HAL_InitTick+0x54>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	4b12      	ldr	r3, [pc, #72]	; (8008024 <HAL_InitTick+0x58>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 fa5b 	bl	80084a6 <HAL_SYSTICK_Config>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e00e      	b.n	8008018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b0f      	cmp	r3, #15
 8007ffe:	d80a      	bhi.n	8008016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008000:	2200      	movs	r2, #0
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	f000 fa23 	bl	8008452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800800c:	4a06      	ldr	r2, [pc, #24]	; (8008028 <HAL_InitTick+0x5c>)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	e000      	b.n	8008018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	2000094c 	.word	0x2000094c
 8008024:	20000954 	.word	0x20000954
 8008028:	20000950 	.word	0x20000950

0800802c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008030:	4b05      	ldr	r3, [pc, #20]	; (8008048 <HAL_IncTick+0x1c>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	4b05      	ldr	r3, [pc, #20]	; (800804c <HAL_IncTick+0x20>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4413      	add	r3, r2
 800803c:	4a03      	ldr	r2, [pc, #12]	; (800804c <HAL_IncTick+0x20>)
 800803e:	6013      	str	r3, [r2, #0]
}
 8008040:	bf00      	nop
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr
 8008048:	20000954 	.word	0x20000954
 800804c:	20000dd0 	.word	0x20000dd0

08008050 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  return uwTick;
 8008054:	4b02      	ldr	r3, [pc, #8]	; (8008060 <HAL_GetTick+0x10>)
 8008056:	681b      	ldr	r3, [r3, #0]
}
 8008058:	4618      	mov	r0, r3
 800805a:	46bd      	mov	sp, r7
 800805c:	bc80      	pop	{r7}
 800805e:	4770      	bx	lr
 8008060:	20000dd0 	.word	0x20000dd0

08008064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800806c:	f7ff fff0 	bl	8008050 <HAL_GetTick>
 8008070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807c:	d005      	beq.n	800808a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800807e:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <HAL_Delay+0x44>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800808a:	bf00      	nop
 800808c:	f7ff ffe0 	bl	8008050 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	429a      	cmp	r2, r3
 800809a:	d8f7      	bhi.n	800808c <HAL_Delay+0x28>
  {
  }
}
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20000954 	.word	0x20000954

080080ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e0ed      	b.n	800829a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fda4 	bl	8007c18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080e0:	f7ff ffb6 	bl	8008050 <HAL_GetTick>
 80080e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80080e6:	e012      	b.n	800810e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80080e8:	f7ff ffb2 	bl	8008050 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b0a      	cmp	r3, #10
 80080f4:	d90b      	bls.n	800810e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2205      	movs	r2, #5
 8008106:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e0c5      	b.n	800829a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0e5      	beq.n	80080e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0202 	bic.w	r2, r2, #2
 800812a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800812c:	f7ff ff90 	bl	8008050 <HAL_GetTick>
 8008130:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008132:	e012      	b.n	800815a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008134:	f7ff ff8c 	bl	8008050 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b0a      	cmp	r3, #10
 8008140:	d90b      	bls.n	800815a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2205      	movs	r2, #5
 8008152:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e09f      	b.n	800829a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e5      	bne.n	8008134 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7e1b      	ldrb	r3, [r3, #24]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d108      	bne.n	8008182 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e007      	b.n	8008192 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008190:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	7e5b      	ldrb	r3, [r3, #25]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d108      	bne.n	80081ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	e007      	b.n	80081bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7e9b      	ldrb	r3, [r3, #26]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d108      	bne.n	80081d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0220 	orr.w	r2, r2, #32
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	e007      	b.n	80081e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0220 	bic.w	r2, r2, #32
 80081e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	7edb      	ldrb	r3, [r3, #27]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d108      	bne.n	8008200 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0210 	bic.w	r2, r2, #16
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e007      	b.n	8008210 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0210 	orr.w	r2, r2, #16
 800820e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	7f1b      	ldrb	r3, [r3, #28]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d108      	bne.n	800822a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0208 	orr.w	r2, r2, #8
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e007      	b.n	800823a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0208 	bic.w	r2, r2, #8
 8008238:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	7f5b      	ldrb	r3, [r3, #29]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d108      	bne.n	8008254 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f042 0204 	orr.w	r2, r2, #4
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	e007      	b.n	8008264 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 0204 	bic.w	r2, r2, #4
 8008262:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	ea42 0103 	orr.w	r1, r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	1e5a      	subs	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <__NVIC_SetPriorityGrouping>:
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082b4:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <__NVIC_SetPriorityGrouping+0x44>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80082c0:	4013      	ands	r3, r2
 80082c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80082cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80082d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082d6:	4a04      	ldr	r2, [pc, #16]	; (80082e8 <__NVIC_SetPriorityGrouping+0x44>)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	60d3      	str	r3, [r2, #12]
}
 80082dc:	bf00      	nop
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	e000ed00 	.word	0xe000ed00

080082ec <__NVIC_GetPriorityGrouping>:
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <__NVIC_GetPriorityGrouping+0x18>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	f003 0307 	and.w	r3, r3, #7
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	e000ed00 	.word	0xe000ed00

08008308 <__NVIC_EnableIRQ>:
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008316:	2b00      	cmp	r3, #0
 8008318:	db0b      	blt.n	8008332 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	f003 021f 	and.w	r2, r3, #31
 8008320:	4906      	ldr	r1, [pc, #24]	; (800833c <__NVIC_EnableIRQ+0x34>)
 8008322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	2001      	movs	r0, #1
 800832a:	fa00 f202 	lsl.w	r2, r0, r2
 800832e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr
 800833c:	e000e100 	.word	0xe000e100

08008340 <__NVIC_SetPriority>:
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	6039      	str	r1, [r7, #0]
 800834a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800834c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008350:	2b00      	cmp	r3, #0
 8008352:	db0a      	blt.n	800836a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	b2da      	uxtb	r2, r3
 8008358:	490c      	ldr	r1, [pc, #48]	; (800838c <__NVIC_SetPriority+0x4c>)
 800835a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835e:	0112      	lsls	r2, r2, #4
 8008360:	b2d2      	uxtb	r2, r2
 8008362:	440b      	add	r3, r1
 8008364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008368:	e00a      	b.n	8008380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	b2da      	uxtb	r2, r3
 800836e:	4908      	ldr	r1, [pc, #32]	; (8008390 <__NVIC_SetPriority+0x50>)
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	3b04      	subs	r3, #4
 8008378:	0112      	lsls	r2, r2, #4
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	440b      	add	r3, r1
 800837e:	761a      	strb	r2, [r3, #24]
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	bc80      	pop	{r7}
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	e000e100 	.word	0xe000e100
 8008390:	e000ed00 	.word	0xe000ed00

08008394 <NVIC_EncodePriority>:
{
 8008394:	b480      	push	{r7}
 8008396:	b089      	sub	sp, #36	; 0x24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	f1c3 0307 	rsb	r3, r3, #7
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	bf28      	it	cs
 80083b2:	2304      	movcs	r3, #4
 80083b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	3304      	adds	r3, #4
 80083ba:	2b06      	cmp	r3, #6
 80083bc:	d902      	bls.n	80083c4 <NVIC_EncodePriority+0x30>
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	3b03      	subs	r3, #3
 80083c2:	e000      	b.n	80083c6 <NVIC_EncodePriority+0x32>
 80083c4:	2300      	movs	r3, #0
 80083c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083c8:	f04f 32ff 	mov.w	r2, #4294967295
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	fa02 f303 	lsl.w	r3, r2, r3
 80083d2:	43da      	mvns	r2, r3
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	401a      	ands	r2, r3
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083dc:	f04f 31ff 	mov.w	r1, #4294967295
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	fa01 f303 	lsl.w	r3, r1, r3
 80083e6:	43d9      	mvns	r1, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083ec:	4313      	orrs	r3, r2
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3724      	adds	r7, #36	; 0x24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr

080083f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3b01      	subs	r3, #1
 8008404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008408:	d301      	bcc.n	800840e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800840a:	2301      	movs	r3, #1
 800840c:	e00f      	b.n	800842e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800840e:	4a0a      	ldr	r2, [pc, #40]	; (8008438 <SysTick_Config+0x40>)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3b01      	subs	r3, #1
 8008414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008416:	210f      	movs	r1, #15
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	f7ff ff90 	bl	8008340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008420:	4b05      	ldr	r3, [pc, #20]	; (8008438 <SysTick_Config+0x40>)
 8008422:	2200      	movs	r2, #0
 8008424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008426:	4b04      	ldr	r3, [pc, #16]	; (8008438 <SysTick_Config+0x40>)
 8008428:	2207      	movs	r2, #7
 800842a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	e000e010 	.word	0xe000e010

0800843c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff ff2d 	bl	80082a4 <__NVIC_SetPriorityGrouping>
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008452:	b580      	push	{r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af00      	add	r7, sp, #0
 8008458:	4603      	mov	r3, r0
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008464:	f7ff ff42 	bl	80082ec <__NVIC_GetPriorityGrouping>
 8008468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	68b9      	ldr	r1, [r7, #8]
 800846e:	6978      	ldr	r0, [r7, #20]
 8008470:	f7ff ff90 	bl	8008394 <NVIC_EncodePriority>
 8008474:	4602      	mov	r2, r0
 8008476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff ff5f 	bl	8008340 <__NVIC_SetPriority>
}
 8008482:	bf00      	nop
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	4603      	mov	r3, r0
 8008492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff ff35 	bl	8008308 <__NVIC_EnableIRQ>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff ffa2 	bl	80083f8 <SysTick_Config>
 80084b4:	4603      	mov	r3, r0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80084be:	b480      	push	{r7}
 80084c0:	b085      	sub	sp, #20
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d008      	beq.n	80084e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2204      	movs	r2, #4
 80084da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e020      	b.n	800852a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 020e 	bic.w	r2, r2, #14
 80084f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0201 	bic.w	r2, r2, #1
 8008506:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f202 	lsl.w	r2, r1, r2
 8008516:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr

08008534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b02      	cmp	r3, #2
 800854a:	d005      	beq.n	8008558 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2204      	movs	r2, #4
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	73fb      	strb	r3, [r7, #15]
 8008556:	e0d6      	b.n	8008706 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 020e 	bic.w	r2, r2, #14
 8008566:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f022 0201 	bic.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	4b64      	ldr	r3, [pc, #400]	; (8008710 <HAL_DMA_Abort_IT+0x1dc>)
 8008580:	429a      	cmp	r2, r3
 8008582:	d958      	bls.n	8008636 <HAL_DMA_Abort_IT+0x102>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a62      	ldr	r2, [pc, #392]	; (8008714 <HAL_DMA_Abort_IT+0x1e0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d04f      	beq.n	800862e <HAL_DMA_Abort_IT+0xfa>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a61      	ldr	r2, [pc, #388]	; (8008718 <HAL_DMA_Abort_IT+0x1e4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d048      	beq.n	800862a <HAL_DMA_Abort_IT+0xf6>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a5f      	ldr	r2, [pc, #380]	; (800871c <HAL_DMA_Abort_IT+0x1e8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d040      	beq.n	8008624 <HAL_DMA_Abort_IT+0xf0>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a5e      	ldr	r2, [pc, #376]	; (8008720 <HAL_DMA_Abort_IT+0x1ec>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d038      	beq.n	800861e <HAL_DMA_Abort_IT+0xea>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a5c      	ldr	r2, [pc, #368]	; (8008724 <HAL_DMA_Abort_IT+0x1f0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d030      	beq.n	8008618 <HAL_DMA_Abort_IT+0xe4>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a5b      	ldr	r2, [pc, #364]	; (8008728 <HAL_DMA_Abort_IT+0x1f4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d028      	beq.n	8008612 <HAL_DMA_Abort_IT+0xde>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a52      	ldr	r2, [pc, #328]	; (8008710 <HAL_DMA_Abort_IT+0x1dc>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d020      	beq.n	800860c <HAL_DMA_Abort_IT+0xd8>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a57      	ldr	r2, [pc, #348]	; (800872c <HAL_DMA_Abort_IT+0x1f8>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d019      	beq.n	8008608 <HAL_DMA_Abort_IT+0xd4>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a55      	ldr	r2, [pc, #340]	; (8008730 <HAL_DMA_Abort_IT+0x1fc>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d012      	beq.n	8008604 <HAL_DMA_Abort_IT+0xd0>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a54      	ldr	r2, [pc, #336]	; (8008734 <HAL_DMA_Abort_IT+0x200>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00a      	beq.n	80085fe <HAL_DMA_Abort_IT+0xca>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a52      	ldr	r2, [pc, #328]	; (8008738 <HAL_DMA_Abort_IT+0x204>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d102      	bne.n	80085f8 <HAL_DMA_Abort_IT+0xc4>
 80085f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085f6:	e01b      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 80085f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085fc:	e018      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 80085fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008602:	e015      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 8008604:	2310      	movs	r3, #16
 8008606:	e013      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 8008608:	2301      	movs	r3, #1
 800860a:	e011      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 800860c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008610:	e00e      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 8008612:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008616:	e00b      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 8008618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800861c:	e008      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 800861e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008622:	e005      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 8008624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008628:	e002      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 800862a:	2310      	movs	r3, #16
 800862c:	e000      	b.n	8008630 <HAL_DMA_Abort_IT+0xfc>
 800862e:	2301      	movs	r3, #1
 8008630:	4a42      	ldr	r2, [pc, #264]	; (800873c <HAL_DMA_Abort_IT+0x208>)
 8008632:	6053      	str	r3, [r2, #4]
 8008634:	e057      	b.n	80086e6 <HAL_DMA_Abort_IT+0x1b2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a36      	ldr	r2, [pc, #216]	; (8008714 <HAL_DMA_Abort_IT+0x1e0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d04f      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x1ac>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a34      	ldr	r2, [pc, #208]	; (8008718 <HAL_DMA_Abort_IT+0x1e4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d048      	beq.n	80086dc <HAL_DMA_Abort_IT+0x1a8>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a33      	ldr	r2, [pc, #204]	; (800871c <HAL_DMA_Abort_IT+0x1e8>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d040      	beq.n	80086d6 <HAL_DMA_Abort_IT+0x1a2>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a31      	ldr	r2, [pc, #196]	; (8008720 <HAL_DMA_Abort_IT+0x1ec>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d038      	beq.n	80086d0 <HAL_DMA_Abort_IT+0x19c>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a30      	ldr	r2, [pc, #192]	; (8008724 <HAL_DMA_Abort_IT+0x1f0>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d030      	beq.n	80086ca <HAL_DMA_Abort_IT+0x196>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a2e      	ldr	r2, [pc, #184]	; (8008728 <HAL_DMA_Abort_IT+0x1f4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d028      	beq.n	80086c4 <HAL_DMA_Abort_IT+0x190>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a26      	ldr	r2, [pc, #152]	; (8008710 <HAL_DMA_Abort_IT+0x1dc>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d020      	beq.n	80086be <HAL_DMA_Abort_IT+0x18a>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a2a      	ldr	r2, [pc, #168]	; (800872c <HAL_DMA_Abort_IT+0x1f8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d019      	beq.n	80086ba <HAL_DMA_Abort_IT+0x186>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a29      	ldr	r2, [pc, #164]	; (8008730 <HAL_DMA_Abort_IT+0x1fc>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d012      	beq.n	80086b6 <HAL_DMA_Abort_IT+0x182>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a27      	ldr	r2, [pc, #156]	; (8008734 <HAL_DMA_Abort_IT+0x200>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00a      	beq.n	80086b0 <HAL_DMA_Abort_IT+0x17c>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a26      	ldr	r2, [pc, #152]	; (8008738 <HAL_DMA_Abort_IT+0x204>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d102      	bne.n	80086aa <HAL_DMA_Abort_IT+0x176>
 80086a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a8:	e01b      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086ae:	e018      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086b4:	e015      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086b6:	2310      	movs	r3, #16
 80086b8:	e013      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e011      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086c2:	e00e      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086c8:	e00b      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086ce:	e008      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086d4:	e005      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086da:	e002      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086dc:	2310      	movs	r3, #16
 80086de:	e000      	b.n	80086e2 <HAL_DMA_Abort_IT+0x1ae>
 80086e0:	2301      	movs	r3, #1
 80086e2:	4a17      	ldr	r2, [pc, #92]	; (8008740 <HAL_DMA_Abort_IT+0x20c>)
 80086e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
    } 
  }
  return status;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	40020080 	.word	0x40020080
 8008714:	40020008 	.word	0x40020008
 8008718:	4002001c 	.word	0x4002001c
 800871c:	40020030 	.word	0x40020030
 8008720:	40020044 	.word	0x40020044
 8008724:	40020058 	.word	0x40020058
 8008728:	4002006c 	.word	0x4002006c
 800872c:	40020408 	.word	0x40020408
 8008730:	4002041c 	.word	0x4002041c
 8008734:	40020430 	.word	0x40020430
 8008738:	40020444 	.word	0x40020444
 800873c:	40020400 	.word	0x40020400
 8008740:	40020000 	.word	0x40020000

08008744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008744:	b480      	push	{r7}
 8008746:	b08b      	sub	sp, #44	; 0x2c
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800874e:	2300      	movs	r3, #0
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008752:	2300      	movs	r3, #0
 8008754:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008756:	e179      	b.n	8008a4c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008758:	2201      	movs	r2, #1
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	4013      	ands	r3, r2
 800876a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	429a      	cmp	r2, r3
 8008772:	f040 8168 	bne.w	8008a46 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	4a96      	ldr	r2, [pc, #600]	; (80089d4 <HAL_GPIO_Init+0x290>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d05e      	beq.n	800883e <HAL_GPIO_Init+0xfa>
 8008780:	4a94      	ldr	r2, [pc, #592]	; (80089d4 <HAL_GPIO_Init+0x290>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d875      	bhi.n	8008872 <HAL_GPIO_Init+0x12e>
 8008786:	4a94      	ldr	r2, [pc, #592]	; (80089d8 <HAL_GPIO_Init+0x294>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d058      	beq.n	800883e <HAL_GPIO_Init+0xfa>
 800878c:	4a92      	ldr	r2, [pc, #584]	; (80089d8 <HAL_GPIO_Init+0x294>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d86f      	bhi.n	8008872 <HAL_GPIO_Init+0x12e>
 8008792:	4a92      	ldr	r2, [pc, #584]	; (80089dc <HAL_GPIO_Init+0x298>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d052      	beq.n	800883e <HAL_GPIO_Init+0xfa>
 8008798:	4a90      	ldr	r2, [pc, #576]	; (80089dc <HAL_GPIO_Init+0x298>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d869      	bhi.n	8008872 <HAL_GPIO_Init+0x12e>
 800879e:	4a90      	ldr	r2, [pc, #576]	; (80089e0 <HAL_GPIO_Init+0x29c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d04c      	beq.n	800883e <HAL_GPIO_Init+0xfa>
 80087a4:	4a8e      	ldr	r2, [pc, #568]	; (80089e0 <HAL_GPIO_Init+0x29c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d863      	bhi.n	8008872 <HAL_GPIO_Init+0x12e>
 80087aa:	4a8e      	ldr	r2, [pc, #568]	; (80089e4 <HAL_GPIO_Init+0x2a0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d046      	beq.n	800883e <HAL_GPIO_Init+0xfa>
 80087b0:	4a8c      	ldr	r2, [pc, #560]	; (80089e4 <HAL_GPIO_Init+0x2a0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d85d      	bhi.n	8008872 <HAL_GPIO_Init+0x12e>
 80087b6:	2b12      	cmp	r3, #18
 80087b8:	d82a      	bhi.n	8008810 <HAL_GPIO_Init+0xcc>
 80087ba:	2b12      	cmp	r3, #18
 80087bc:	d859      	bhi.n	8008872 <HAL_GPIO_Init+0x12e>
 80087be:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <HAL_GPIO_Init+0x80>)
 80087c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c4:	0800883f 	.word	0x0800883f
 80087c8:	08008819 	.word	0x08008819
 80087cc:	0800882b 	.word	0x0800882b
 80087d0:	0800886d 	.word	0x0800886d
 80087d4:	08008873 	.word	0x08008873
 80087d8:	08008873 	.word	0x08008873
 80087dc:	08008873 	.word	0x08008873
 80087e0:	08008873 	.word	0x08008873
 80087e4:	08008873 	.word	0x08008873
 80087e8:	08008873 	.word	0x08008873
 80087ec:	08008873 	.word	0x08008873
 80087f0:	08008873 	.word	0x08008873
 80087f4:	08008873 	.word	0x08008873
 80087f8:	08008873 	.word	0x08008873
 80087fc:	08008873 	.word	0x08008873
 8008800:	08008873 	.word	0x08008873
 8008804:	08008873 	.word	0x08008873
 8008808:	08008821 	.word	0x08008821
 800880c:	08008835 	.word	0x08008835
 8008810:	4a75      	ldr	r2, [pc, #468]	; (80089e8 <HAL_GPIO_Init+0x2a4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d013      	beq.n	800883e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008816:	e02c      	b.n	8008872 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	623b      	str	r3, [r7, #32]
          break;
 800881e:	e029      	b.n	8008874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	3304      	adds	r3, #4
 8008826:	623b      	str	r3, [r7, #32]
          break;
 8008828:	e024      	b.n	8008874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	3308      	adds	r3, #8
 8008830:	623b      	str	r3, [r7, #32]
          break;
 8008832:	e01f      	b.n	8008874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	330c      	adds	r3, #12
 800883a:	623b      	str	r3, [r7, #32]
          break;
 800883c:	e01a      	b.n	8008874 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d102      	bne.n	800884c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008846:	2304      	movs	r3, #4
 8008848:	623b      	str	r3, [r7, #32]
          break;
 800884a:	e013      	b.n	8008874 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d105      	bne.n	8008860 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008854:	2308      	movs	r3, #8
 8008856:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	611a      	str	r2, [r3, #16]
          break;
 800885e:	e009      	b.n	8008874 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008860:	2308      	movs	r3, #8
 8008862:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	615a      	str	r2, [r3, #20]
          break;
 800886a:	e003      	b.n	8008874 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800886c:	2300      	movs	r3, #0
 800886e:	623b      	str	r3, [r7, #32]
          break;
 8008870:	e000      	b.n	8008874 <HAL_GPIO_Init+0x130>
          break;
 8008872:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2bff      	cmp	r3, #255	; 0xff
 8008878:	d801      	bhi.n	800887e <HAL_GPIO_Init+0x13a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	e001      	b.n	8008882 <HAL_GPIO_Init+0x13e>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3304      	adds	r3, #4
 8008882:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2bff      	cmp	r3, #255	; 0xff
 8008888:	d802      	bhi.n	8008890 <HAL_GPIO_Init+0x14c>
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	e002      	b.n	8008896 <HAL_GPIO_Init+0x152>
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	3b08      	subs	r3, #8
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	210f      	movs	r1, #15
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	fa01 f303 	lsl.w	r3, r1, r3
 80088a4:	43db      	mvns	r3, r3
 80088a6:	401a      	ands	r2, r3
 80088a8:	6a39      	ldr	r1, [r7, #32]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	fa01 f303 	lsl.w	r3, r1, r3
 80088b0:	431a      	orrs	r2, r3
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 80c1 	beq.w	8008a46 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80088c4:	4b49      	ldr	r3, [pc, #292]	; (80089ec <HAL_GPIO_Init+0x2a8>)
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	4a48      	ldr	r2, [pc, #288]	; (80089ec <HAL_GPIO_Init+0x2a8>)
 80088ca:	f043 0301 	orr.w	r3, r3, #1
 80088ce:	6193      	str	r3, [r2, #24]
 80088d0:	4b46      	ldr	r3, [pc, #280]	; (80089ec <HAL_GPIO_Init+0x2a8>)
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	60bb      	str	r3, [r7, #8]
 80088da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80088dc:	4a44      	ldr	r2, [pc, #272]	; (80089f0 <HAL_GPIO_Init+0x2ac>)
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	089b      	lsrs	r3, r3, #2
 80088e2:	3302      	adds	r3, #2
 80088e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	220f      	movs	r2, #15
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	43db      	mvns	r3, r3
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4013      	ands	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a3c      	ldr	r2, [pc, #240]	; (80089f4 <HAL_GPIO_Init+0x2b0>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d01f      	beq.n	8008948 <HAL_GPIO_Init+0x204>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a3b      	ldr	r2, [pc, #236]	; (80089f8 <HAL_GPIO_Init+0x2b4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d019      	beq.n	8008944 <HAL_GPIO_Init+0x200>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a3a      	ldr	r2, [pc, #232]	; (80089fc <HAL_GPIO_Init+0x2b8>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d013      	beq.n	8008940 <HAL_GPIO_Init+0x1fc>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a39      	ldr	r2, [pc, #228]	; (8008a00 <HAL_GPIO_Init+0x2bc>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d00d      	beq.n	800893c <HAL_GPIO_Init+0x1f8>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a38      	ldr	r2, [pc, #224]	; (8008a04 <HAL_GPIO_Init+0x2c0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d007      	beq.n	8008938 <HAL_GPIO_Init+0x1f4>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a37      	ldr	r2, [pc, #220]	; (8008a08 <HAL_GPIO_Init+0x2c4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d101      	bne.n	8008934 <HAL_GPIO_Init+0x1f0>
 8008930:	2305      	movs	r3, #5
 8008932:	e00a      	b.n	800894a <HAL_GPIO_Init+0x206>
 8008934:	2306      	movs	r3, #6
 8008936:	e008      	b.n	800894a <HAL_GPIO_Init+0x206>
 8008938:	2304      	movs	r3, #4
 800893a:	e006      	b.n	800894a <HAL_GPIO_Init+0x206>
 800893c:	2303      	movs	r3, #3
 800893e:	e004      	b.n	800894a <HAL_GPIO_Init+0x206>
 8008940:	2302      	movs	r3, #2
 8008942:	e002      	b.n	800894a <HAL_GPIO_Init+0x206>
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <HAL_GPIO_Init+0x206>
 8008948:	2300      	movs	r3, #0
 800894a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894c:	f002 0203 	and.w	r2, r2, #3
 8008950:	0092      	lsls	r2, r2, #2
 8008952:	4093      	lsls	r3, r2
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	4313      	orrs	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800895a:	4925      	ldr	r1, [pc, #148]	; (80089f0 <HAL_GPIO_Init+0x2ac>)
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	089b      	lsrs	r3, r3, #2
 8008960:	3302      	adds	r3, #2
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d006      	beq.n	8008982 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008974:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	4924      	ldr	r1, [pc, #144]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	4313      	orrs	r3, r2
 800897e:	608b      	str	r3, [r1, #8]
 8008980:	e006      	b.n	8008990 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008982:	4b22      	ldr	r3, [pc, #136]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 8008984:	689a      	ldr	r2, [r3, #8]
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	43db      	mvns	r3, r3
 800898a:	4920      	ldr	r1, [pc, #128]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 800898c:	4013      	ands	r3, r2
 800898e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800899c:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 800899e:	68da      	ldr	r2, [r3, #12]
 80089a0:	491a      	ldr	r1, [pc, #104]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60cb      	str	r3, [r1, #12]
 80089a8:	e006      	b.n	80089b8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	43db      	mvns	r3, r3
 80089b2:	4916      	ldr	r1, [pc, #88]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d025      	beq.n	8008a10 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80089c4:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	4910      	ldr	r1, [pc, #64]	; (8008a0c <HAL_GPIO_Init+0x2c8>)
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	604b      	str	r3, [r1, #4]
 80089d0:	e025      	b.n	8008a1e <HAL_GPIO_Init+0x2da>
 80089d2:	bf00      	nop
 80089d4:	10320000 	.word	0x10320000
 80089d8:	10310000 	.word	0x10310000
 80089dc:	10220000 	.word	0x10220000
 80089e0:	10210000 	.word	0x10210000
 80089e4:	10120000 	.word	0x10120000
 80089e8:	10110000 	.word	0x10110000
 80089ec:	40021000 	.word	0x40021000
 80089f0:	40010000 	.word	0x40010000
 80089f4:	40010800 	.word	0x40010800
 80089f8:	40010c00 	.word	0x40010c00
 80089fc:	40011000 	.word	0x40011000
 8008a00:	40011400 	.word	0x40011400
 8008a04:	40011800 	.word	0x40011800
 8008a08:	40011c00 	.word	0x40011c00
 8008a0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008a10:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <HAL_GPIO_Init+0x324>)
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	43db      	mvns	r3, r3
 8008a18:	4913      	ldr	r1, [pc, #76]	; (8008a68 <HAL_GPIO_Init+0x324>)
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d006      	beq.n	8008a38 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <HAL_GPIO_Init+0x324>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	490e      	ldr	r1, [pc, #56]	; (8008a68 <HAL_GPIO_Init+0x324>)
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	600b      	str	r3, [r1, #0]
 8008a36:	e006      	b.n	8008a46 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008a38:	4b0b      	ldr	r3, [pc, #44]	; (8008a68 <HAL_GPIO_Init+0x324>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	43db      	mvns	r3, r3
 8008a40:	4909      	ldr	r1, [pc, #36]	; (8008a68 <HAL_GPIO_Init+0x324>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	3301      	adds	r3, #1
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f47f ae7e 	bne.w	8008758 <HAL_GPIO_Init+0x14>
  }
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	372c      	adds	r7, #44	; 0x2c
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr
 8008a68:	40010400 	.word	0x40010400

08008a6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b089      	sub	sp, #36	; 0x24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a76:	2300      	movs	r3, #0
 8008a78:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008a7a:	e0a6      	b.n	8008bca <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	fa02 f303 	lsl.w	r3, r2, r3
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	4013      	ands	r3, r2
 8008a88:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8099 	beq.w	8008bc4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008a92:	4a54      	ldr	r2, [pc, #336]	; (8008be4 <HAL_GPIO_DeInit+0x178>)
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	089b      	lsrs	r3, r3, #2
 8008a98:	3302      	adds	r3, #2
 8008a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a9e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	220f      	movs	r2, #15
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a4c      	ldr	r2, [pc, #304]	; (8008be8 <HAL_GPIO_DeInit+0x17c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d01f      	beq.n	8008afc <HAL_GPIO_DeInit+0x90>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a4b      	ldr	r2, [pc, #300]	; (8008bec <HAL_GPIO_DeInit+0x180>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d019      	beq.n	8008af8 <HAL_GPIO_DeInit+0x8c>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a4a      	ldr	r2, [pc, #296]	; (8008bf0 <HAL_GPIO_DeInit+0x184>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d013      	beq.n	8008af4 <HAL_GPIO_DeInit+0x88>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a49      	ldr	r2, [pc, #292]	; (8008bf4 <HAL_GPIO_DeInit+0x188>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00d      	beq.n	8008af0 <HAL_GPIO_DeInit+0x84>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a48      	ldr	r2, [pc, #288]	; (8008bf8 <HAL_GPIO_DeInit+0x18c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d007      	beq.n	8008aec <HAL_GPIO_DeInit+0x80>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a47      	ldr	r2, [pc, #284]	; (8008bfc <HAL_GPIO_DeInit+0x190>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d101      	bne.n	8008ae8 <HAL_GPIO_DeInit+0x7c>
 8008ae4:	2305      	movs	r3, #5
 8008ae6:	e00a      	b.n	8008afe <HAL_GPIO_DeInit+0x92>
 8008ae8:	2306      	movs	r3, #6
 8008aea:	e008      	b.n	8008afe <HAL_GPIO_DeInit+0x92>
 8008aec:	2304      	movs	r3, #4
 8008aee:	e006      	b.n	8008afe <HAL_GPIO_DeInit+0x92>
 8008af0:	2303      	movs	r3, #3
 8008af2:	e004      	b.n	8008afe <HAL_GPIO_DeInit+0x92>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e002      	b.n	8008afe <HAL_GPIO_DeInit+0x92>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <HAL_GPIO_DeInit+0x92>
 8008afc:	2300      	movs	r3, #0
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	f002 0203 	and.w	r2, r2, #3
 8008b04:	0092      	lsls	r2, r2, #2
 8008b06:	4093      	lsls	r3, r2
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d132      	bne.n	8008b74 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008b0e:	4b3c      	ldr	r3, [pc, #240]	; (8008c00 <HAL_GPIO_DeInit+0x194>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	43db      	mvns	r3, r3
 8008b16:	493a      	ldr	r1, [pc, #232]	; (8008c00 <HAL_GPIO_DeInit+0x194>)
 8008b18:	4013      	ands	r3, r2
 8008b1a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008b1c:	4b38      	ldr	r3, [pc, #224]	; (8008c00 <HAL_GPIO_DeInit+0x194>)
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	43db      	mvns	r3, r3
 8008b24:	4936      	ldr	r1, [pc, #216]	; (8008c00 <HAL_GPIO_DeInit+0x194>)
 8008b26:	4013      	ands	r3, r2
 8008b28:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008b2a:	4b35      	ldr	r3, [pc, #212]	; (8008c00 <HAL_GPIO_DeInit+0x194>)
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	43db      	mvns	r3, r3
 8008b32:	4933      	ldr	r1, [pc, #204]	; (8008c00 <HAL_GPIO_DeInit+0x194>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008b38:	4b31      	ldr	r3, [pc, #196]	; (8008c00 <HAL_GPIO_DeInit+0x194>)
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	492f      	ldr	r1, [pc, #188]	; (8008c00 <HAL_GPIO_DeInit+0x194>)
 8008b42:	4013      	ands	r3, r2
 8008b44:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	f003 0303 	and.w	r3, r3, #3
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	220f      	movs	r2, #15
 8008b50:	fa02 f303 	lsl.w	r3, r2, r3
 8008b54:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008b56:	4a23      	ldr	r2, [pc, #140]	; (8008be4 <HAL_GPIO_DeInit+0x178>)
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	089b      	lsrs	r3, r3, #2
 8008b5c:	3302      	adds	r3, #2
 8008b5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	43da      	mvns	r2, r3
 8008b66:	481f      	ldr	r0, [pc, #124]	; (8008be4 <HAL_GPIO_DeInit+0x178>)
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	089b      	lsrs	r3, r3, #2
 8008b6c:	400a      	ands	r2, r1
 8008b6e:	3302      	adds	r3, #2
 8008b70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2bff      	cmp	r3, #255	; 0xff
 8008b78:	d801      	bhi.n	8008b7e <HAL_GPIO_DeInit+0x112>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	e001      	b.n	8008b82 <HAL_GPIO_DeInit+0x116>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	3304      	adds	r3, #4
 8008b82:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	2bff      	cmp	r3, #255	; 0xff
 8008b88:	d802      	bhi.n	8008b90 <HAL_GPIO_DeInit+0x124>
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	e002      	b.n	8008b96 <HAL_GPIO_DeInit+0x12a>
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	3b08      	subs	r3, #8
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	210f      	movs	r1, #15
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba4:	43db      	mvns	r3, r3
 8008ba6:	401a      	ands	r2, r3
 8008ba8:	2104      	movs	r1, #4
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	401a      	ands	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f47f af52 	bne.w	8008a7c <HAL_GPIO_DeInit+0x10>
  }
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	3724      	adds	r7, #36	; 0x24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bc80      	pop	{r7}
 8008be2:	4770      	bx	lr
 8008be4:	40010000 	.word	0x40010000
 8008be8:	40010800 	.word	0x40010800
 8008bec:	40010c00 	.word	0x40010c00
 8008bf0:	40011000 	.word	0x40011000
 8008bf4:	40011400 	.word	0x40011400
 8008bf8:	40011800 	.word	0x40011800
 8008bfc:	40011c00 	.word	0x40011c00
 8008c00:	40010400 	.word	0x40010400

08008c04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	887b      	ldrh	r3, [r7, #2]
 8008c16:	4013      	ands	r3, r2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]
 8008c20:	e001      	b.n	8008c26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr

08008c32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	807b      	strh	r3, [r7, #2]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c42:	787b      	ldrb	r3, [r7, #1]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c48:	887a      	ldrh	r2, [r7, #2]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008c4e:	e003      	b.n	8008c58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008c50:	887b      	ldrh	r3, [r7, #2]
 8008c52:	041a      	lsls	r2, r3, #16
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	611a      	str	r2, [r3, #16]
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bc80      	pop	{r7}
 8008c60:	4770      	bx	lr

08008c62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b085      	sub	sp, #20
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008c74:	887a      	ldrh	r2, [r7, #2]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	041a      	lsls	r2, r3, #16
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	43d9      	mvns	r1, r3
 8008c80:	887b      	ldrh	r3, [r7, #2]
 8008c82:	400b      	ands	r3, r1
 8008c84:	431a      	orrs	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	611a      	str	r2, [r3, #16]
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bc80      	pop	{r7}
 8008c92:	4770      	bx	lr

08008c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e12b      	b.n	8008efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7fe fff8 	bl	8007cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2224      	movs	r2, #36	; 0x24
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0201 	bic.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008cf8:	f001 fdb8 	bl	800a86c <HAL_RCC_GetPCLK1Freq>
 8008cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	4a81      	ldr	r2, [pc, #516]	; (8008f08 <HAL_I2C_Init+0x274>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d807      	bhi.n	8008d18 <HAL_I2C_Init+0x84>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4a80      	ldr	r2, [pc, #512]	; (8008f0c <HAL_I2C_Init+0x278>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	bf94      	ite	ls
 8008d10:	2301      	movls	r3, #1
 8008d12:	2300      	movhi	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	e006      	b.n	8008d26 <HAL_I2C_Init+0x92>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4a7d      	ldr	r2, [pc, #500]	; (8008f10 <HAL_I2C_Init+0x27c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	bf94      	ite	ls
 8008d20:	2301      	movls	r3, #1
 8008d22:	2300      	movhi	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e0e7      	b.n	8008efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	4a78      	ldr	r2, [pc, #480]	; (8008f14 <HAL_I2C_Init+0x280>)
 8008d32:	fba2 2303 	umull	r2, r3, r2, r3
 8008d36:	0c9b      	lsrs	r3, r3, #18
 8008d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4a6a      	ldr	r2, [pc, #424]	; (8008f08 <HAL_I2C_Init+0x274>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d802      	bhi.n	8008d68 <HAL_I2C_Init+0xd4>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	3301      	adds	r3, #1
 8008d66:	e009      	b.n	8008d7c <HAL_I2C_Init+0xe8>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	4a69      	ldr	r2, [pc, #420]	; (8008f18 <HAL_I2C_Init+0x284>)
 8008d74:	fba2 2303 	umull	r2, r3, r2, r3
 8008d78:	099b      	lsrs	r3, r3, #6
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	430b      	orrs	r3, r1
 8008d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	495c      	ldr	r1, [pc, #368]	; (8008f08 <HAL_I2C_Init+0x274>)
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	d819      	bhi.n	8008dd0 <HAL_I2C_Init+0x13c>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	1e59      	subs	r1, r3, #1
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008daa:	1c59      	adds	r1, r3, #1
 8008dac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008db0:	400b      	ands	r3, r1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <HAL_I2C_Init+0x138>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	1e59      	subs	r1, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dca:	e051      	b.n	8008e70 <HAL_I2C_Init+0x1dc>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	e04f      	b.n	8008e70 <HAL_I2C_Init+0x1dc>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d111      	bne.n	8008dfc <HAL_I2C_Init+0x168>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	1e58      	subs	r0, r3, #1
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6859      	ldr	r1, [r3, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	440b      	add	r3, r1
 8008de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008dea:	3301      	adds	r3, #1
 8008dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bf0c      	ite	eq
 8008df4:	2301      	moveq	r3, #1
 8008df6:	2300      	movne	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	e012      	b.n	8008e22 <HAL_I2C_Init+0x18e>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	1e58      	subs	r0, r3, #1
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6859      	ldr	r1, [r3, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	440b      	add	r3, r1
 8008e0a:	0099      	lsls	r1, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e12:	3301      	adds	r3, #1
 8008e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2301      	moveq	r3, #1
 8008e1e:	2300      	movne	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_I2C_Init+0x196>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e022      	b.n	8008e70 <HAL_I2C_Init+0x1dc>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10e      	bne.n	8008e50 <HAL_I2C_Init+0x1bc>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	1e58      	subs	r0, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6859      	ldr	r1, [r3, #4]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	440b      	add	r3, r1
 8008e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e44:	3301      	adds	r3, #1
 8008e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e4e:	e00f      	b.n	8008e70 <HAL_I2C_Init+0x1dc>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	1e58      	subs	r0, r3, #1
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6859      	ldr	r1, [r3, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	0099      	lsls	r1, r3, #2
 8008e60:	440b      	add	r3, r1
 8008e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e66:	3301      	adds	r3, #1
 8008e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	6809      	ldr	r1, [r1, #0]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	69da      	ldr	r2, [r3, #28]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	6911      	ldr	r1, [r2, #16]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	68d2      	ldr	r2, [r2, #12]
 8008eaa:	4311      	orrs	r1, r2
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	6812      	ldr	r2, [r2, #0]
 8008eb0:	430b      	orrs	r3, r1
 8008eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	695a      	ldr	r2, [r3, #20]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f042 0201 	orr.w	r2, r2, #1
 8008ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	000186a0 	.word	0x000186a0
 8008f0c:	001e847f 	.word	0x001e847f
 8008f10:	003d08ff 	.word	0x003d08ff
 8008f14:	431bde83 	.word	0x431bde83
 8008f18:	10624dd3 	.word	0x10624dd3

08008f1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e021      	b.n	8008f72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2224      	movs	r2, #36	; 0x24
 8008f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0201 	bic.w	r2, r2, #1
 8008f44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7fe fef0 	bl	8007d2c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	607a      	str	r2, [r7, #4]
 8008f86:	461a      	mov	r2, r3
 8008f88:	460b      	mov	r3, r1
 8008f8a:	817b      	strh	r3, [r7, #10]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f90:	f7ff f85e 	bl	8008050 <HAL_GetTick>
 8008f94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	f040 80e0 	bne.w	8009164 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	2319      	movs	r3, #25
 8008faa:	2201      	movs	r2, #1
 8008fac:	4970      	ldr	r1, [pc, #448]	; (8009170 <HAL_I2C_Master_Transmit+0x1f4>)
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 fe5c 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008fba:	2302      	movs	r3, #2
 8008fbc:	e0d3      	b.n	8009166 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_I2C_Master_Transmit+0x50>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e0cc      	b.n	8009166 <HAL_I2C_Master_Transmit+0x1ea>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d007      	beq.n	8008ff2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f042 0201 	orr.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009000:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2221      	movs	r2, #33	; 0x21
 8009006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2210      	movs	r2, #16
 800900e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	893a      	ldrh	r2, [r7, #8]
 8009022:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4a50      	ldr	r2, [pc, #320]	; (8009174 <HAL_I2C_Master_Transmit+0x1f8>)
 8009032:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009034:	8979      	ldrh	r1, [r7, #10]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	6a3a      	ldr	r2, [r7, #32]
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 fc16 	bl	800986c <I2C_MasterRequestWrite>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e08d      	b.n	8009166 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	613b      	str	r3, [r7, #16]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009060:	e066      	b.n	8009130 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	6a39      	ldr	r1, [r7, #32]
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 ff1a 	bl	8009ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00d      	beq.n	800908e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	2b04      	cmp	r3, #4
 8009078:	d107      	bne.n	800908a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009088:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e06b      	b.n	8009166 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b6:	3b01      	subs	r3, #1
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d11b      	bne.n	8009104 <HAL_I2C_Master_Transmit+0x188>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d017      	beq.n	8009104 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	3b01      	subs	r3, #1
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	6a39      	ldr	r1, [r7, #32]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 ff11 	bl	8009f30 <I2C_WaitOnBTFFlagUntilTimeout>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00d      	beq.n	8009130 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	2b04      	cmp	r3, #4
 800911a:	d107      	bne.n	800912c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800912a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e01a      	b.n	8009166 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009134:	2b00      	cmp	r3, #0
 8009136:	d194      	bne.n	8009062 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2220      	movs	r2, #32
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	e000      	b.n	8009166 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009164:	2302      	movs	r3, #2
  }
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	00100002 	.word	0x00100002
 8009174:	ffff0000 	.word	0xffff0000

08009178 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af02      	add	r7, sp, #8
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	4608      	mov	r0, r1
 8009182:	4611      	mov	r1, r2
 8009184:	461a      	mov	r2, r3
 8009186:	4603      	mov	r3, r0
 8009188:	817b      	strh	r3, [r7, #10]
 800918a:	460b      	mov	r3, r1
 800918c:	813b      	strh	r3, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009192:	f7fe ff5d 	bl	8008050 <HAL_GetTick>
 8009196:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	f040 80d9 	bne.w	8009358 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	2319      	movs	r3, #25
 80091ac:	2201      	movs	r2, #1
 80091ae:	496d      	ldr	r1, [pc, #436]	; (8009364 <HAL_I2C_Mem_Write+0x1ec>)
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 fd5b 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80091bc:	2302      	movs	r3, #2
 80091be:	e0cc      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d101      	bne.n	80091ce <HAL_I2C_Mem_Write+0x56>
 80091ca:	2302      	movs	r3, #2
 80091cc:	e0c5      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d007      	beq.n	80091f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0201 	orr.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009202:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2221      	movs	r2, #33	; 0x21
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2240      	movs	r2, #64	; 0x40
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6a3a      	ldr	r2, [r7, #32]
 800921e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800922a:	b29a      	uxth	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4a4d      	ldr	r2, [pc, #308]	; (8009368 <HAL_I2C_Mem_Write+0x1f0>)
 8009234:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009236:	88f8      	ldrh	r0, [r7, #6]
 8009238:	893a      	ldrh	r2, [r7, #8]
 800923a:	8979      	ldrh	r1, [r7, #10]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	4603      	mov	r3, r0
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 fb92 	bl	8009970 <I2C_RequestMemoryWrite>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d052      	beq.n	80092f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e081      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 fe20 	bl	8009ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00d      	beq.n	8009282 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926a:	2b04      	cmp	r3, #4
 800926c:	d107      	bne.n	800927e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e06b      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800929c:	3b01      	subs	r3, #1
 800929e:	b29a      	uxth	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b04      	cmp	r3, #4
 80092be:	d11b      	bne.n	80092f8 <HAL_I2C_Mem_Write+0x180>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d017      	beq.n	80092f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	781a      	ldrb	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	3b01      	subs	r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1aa      	bne.n	8009256 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 fe13 	bl	8009f30 <I2C_WaitOnBTFFlagUntilTimeout>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00d      	beq.n	800932c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009314:	2b04      	cmp	r3, #4
 8009316:	d107      	bne.n	8009328 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009326:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e016      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800933a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2220      	movs	r2, #32
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	e000      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009358:	2302      	movs	r3, #2
  }
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	00100002 	.word	0x00100002
 8009368:	ffff0000 	.word	0xffff0000

0800936c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08c      	sub	sp, #48	; 0x30
 8009370:	af02      	add	r7, sp, #8
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	4608      	mov	r0, r1
 8009376:	4611      	mov	r1, r2
 8009378:	461a      	mov	r2, r3
 800937a:	4603      	mov	r3, r0
 800937c:	817b      	strh	r3, [r7, #10]
 800937e:	460b      	mov	r3, r1
 8009380:	813b      	strh	r3, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800938a:	f7fe fe61 	bl	8008050 <HAL_GetTick>
 800938e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b20      	cmp	r3, #32
 800939a:	f040 8244 	bne.w	8009826 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	2319      	movs	r3, #25
 80093a4:	2201      	movs	r2, #1
 80093a6:	4982      	ldr	r1, [pc, #520]	; (80095b0 <HAL_I2C_Mem_Read+0x244>)
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fc5f 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80093b4:	2302      	movs	r3, #2
 80093b6:	e237      	b.n	8009828 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d101      	bne.n	80093c6 <HAL_I2C_Mem_Read+0x5a>
 80093c2:	2302      	movs	r3, #2
 80093c4:	e230      	b.n	8009828 <HAL_I2C_Mem_Read+0x4bc>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d007      	beq.n	80093ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f042 0201 	orr.w	r2, r2, #1
 80093ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2222      	movs	r2, #34	; 0x22
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2240      	movs	r2, #64	; 0x40
 8009408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800941c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009422:	b29a      	uxth	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4a62      	ldr	r2, [pc, #392]	; (80095b4 <HAL_I2C_Mem_Read+0x248>)
 800942c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800942e:	88f8      	ldrh	r0, [r7, #6]
 8009430:	893a      	ldrh	r2, [r7, #8]
 8009432:	8979      	ldrh	r1, [r7, #10]
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	4603      	mov	r3, r0
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fb2c 	bl	8009a9c <I2C_RequestMemoryRead>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e1ec      	b.n	8009828 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009452:	2b00      	cmp	r3, #0
 8009454:	d113      	bne.n	800947e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009456:	2300      	movs	r3, #0
 8009458:	61fb      	str	r3, [r7, #28]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	61fb      	str	r3, [r7, #28]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	61fb      	str	r3, [r7, #28]
 800946a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	e1c0      	b.n	8009800 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009482:	2b01      	cmp	r3, #1
 8009484:	d11e      	bne.n	80094c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009494:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009496:	b672      	cpsid	i
}
 8009498:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800949a:	2300      	movs	r3, #0
 800949c:	61bb      	str	r3, [r7, #24]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	61bb      	str	r3, [r7, #24]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	61bb      	str	r3, [r7, #24]
 80094ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80094c0:	b662      	cpsie	i
}
 80094c2:	e035      	b.n	8009530 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d11e      	bne.n	800950a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80094dc:	b672      	cpsid	i
}
 80094de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094e0:	2300      	movs	r3, #0
 80094e2:	617b      	str	r3, [r7, #20]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	617b      	str	r3, [r7, #20]
 80094f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009506:	b662      	cpsie	i
}
 8009508:	e012      	b.n	8009530 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009518:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800951a:	2300      	movs	r3, #0
 800951c:	613b      	str	r3, [r7, #16]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	613b      	str	r3, [r7, #16]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	613b      	str	r3, [r7, #16]
 800952e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009530:	e166      	b.n	8009800 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009536:	2b03      	cmp	r3, #3
 8009538:	f200 811f 	bhi.w	800977a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009540:	2b01      	cmp	r3, #1
 8009542:	d123      	bne.n	800958c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 fd39 	bl	8009fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e167      	b.n	8009828 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691a      	ldr	r2, [r3, #16]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	b2d2      	uxtb	r2, r2
 8009564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009574:	3b01      	subs	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	855a      	strh	r2, [r3, #42]	; 0x2a
 800958a:	e139      	b.n	8009800 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009590:	2b02      	cmp	r3, #2
 8009592:	d152      	bne.n	800963a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	2200      	movs	r2, #0
 800959c:	4906      	ldr	r1, [pc, #24]	; (80095b8 <HAL_I2C_Mem_Read+0x24c>)
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 fb64 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d008      	beq.n	80095bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e13c      	b.n	8009828 <HAL_I2C_Mem_Read+0x4bc>
 80095ae:	bf00      	nop
 80095b0:	00100002 	.word	0x00100002
 80095b4:	ffff0000 	.word	0xffff0000
 80095b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80095bc:	b672      	cpsid	i
}
 80095be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691a      	ldr	r2, [r3, #16]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	b2d2      	uxtb	r2, r2
 80095dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ec:	3b01      	subs	r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009602:	b662      	cpsie	i
}
 8009604:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	b2d2      	uxtb	r2, r2
 8009612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009622:	3b01      	subs	r3, #1
 8009624:	b29a      	uxth	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009638:	e0e2      	b.n	8009800 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009640:	2200      	movs	r2, #0
 8009642:	497b      	ldr	r1, [pc, #492]	; (8009830 <HAL_I2C_Mem_Read+0x4c4>)
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 fb11 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e0e9      	b.n	8009828 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009662:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009664:	b672      	cpsid	i
}
 8009666:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	691a      	ldr	r2, [r3, #16]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009684:	3b01      	subs	r3, #1
 8009686:	b29a      	uxth	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800969a:	4b66      	ldr	r3, [pc, #408]	; (8009834 <HAL_I2C_Mem_Read+0x4c8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	08db      	lsrs	r3, r3, #3
 80096a0:	4a65      	ldr	r2, [pc, #404]	; (8009838 <HAL_I2C_Mem_Read+0x4cc>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	0a1a      	lsrs	r2, r3, #8
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	00da      	lsls	r2, r3, #3
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d118      	bne.n	80096f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096da:	f043 0220 	orr.w	r2, r3, #32
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80096e2:	b662      	cpsie	i
}
 80096e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e09a      	b.n	8009828 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b04      	cmp	r3, #4
 80096fe:	d1d9      	bne.n	80096b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800970e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	b2d2      	uxtb	r2, r2
 800971c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800972c:	3b01      	subs	r3, #1
 800972e:	b29a      	uxth	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009738:	b29b      	uxth	r3, r3
 800973a:	3b01      	subs	r3, #1
 800973c:	b29a      	uxth	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009742:	b662      	cpsie	i
}
 8009744:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	691a      	ldr	r2, [r3, #16]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	b2d2      	uxtb	r2, r2
 8009752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800976e:	b29b      	uxth	r3, r3
 8009770:	3b01      	subs	r3, #1
 8009772:	b29a      	uxth	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009778:	e042      	b.n	8009800 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800977a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800977c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 fc1e 	bl	8009fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e04c      	b.n	8009828 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	691a      	ldr	r2, [r3, #16]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	b2d2      	uxtb	r2, r2
 800979a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097aa:	3b01      	subs	r3, #1
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	3b01      	subs	r3, #1
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	f003 0304 	and.w	r3, r3, #4
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	d118      	bne.n	8009800 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691a      	ldr	r2, [r3, #16]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009804:	2b00      	cmp	r3, #0
 8009806:	f47f ae94 	bne.w	8009532 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	e000      	b.n	8009828 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009826:	2302      	movs	r3, #2
  }
}
 8009828:	4618      	mov	r0, r3
 800982a:	3728      	adds	r7, #40	; 0x28
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	00010004 	.word	0x00010004
 8009834:	2000094c 	.word	0x2000094c
 8009838:	14f8b589 	.word	0x14f8b589

0800983c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800984a:	b2db      	uxtb	r3, r3
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	bc80      	pop	{r7}
 8009854:	4770      	bx	lr

08009856 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009862:	4618      	mov	r0, r3
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	bc80      	pop	{r7}
 800986a:	4770      	bx	lr

0800986c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af02      	add	r7, sp, #8
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	607a      	str	r2, [r7, #4]
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	460b      	mov	r3, r1
 800987a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b08      	cmp	r3, #8
 8009886:	d006      	beq.n	8009896 <I2C_MasterRequestWrite+0x2a>
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d003      	beq.n	8009896 <I2C_MasterRequestWrite+0x2a>
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009894:	d108      	bne.n	80098a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098a4:	601a      	str	r2, [r3, #0]
 80098a6:	e00b      	b.n	80098c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ac:	2b12      	cmp	r3, #18
 80098ae:	d107      	bne.n	80098c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 f9cd 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00d      	beq.n	80098f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098e6:	d103      	bne.n	80098f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e035      	b.n	8009960 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098fc:	d108      	bne.n	8009910 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098fe:	897b      	ldrh	r3, [r7, #10]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	461a      	mov	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800990c:	611a      	str	r2, [r3, #16]
 800990e:	e01b      	b.n	8009948 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009910:	897b      	ldrh	r3, [r7, #10]
 8009912:	11db      	asrs	r3, r3, #7
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f003 0306 	and.w	r3, r3, #6
 800991a:	b2db      	uxtb	r3, r3
 800991c:	f063 030f 	orn	r3, r3, #15
 8009920:	b2da      	uxtb	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	490e      	ldr	r1, [pc, #56]	; (8009968 <I2C_MasterRequestWrite+0xfc>)
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 fa16 	bl	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e010      	b.n	8009960 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800993e:	897b      	ldrh	r3, [r7, #10]
 8009940:	b2da      	uxtb	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	4907      	ldr	r1, [pc, #28]	; (800996c <I2C_MasterRequestWrite+0x100>)
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 fa06 	bl	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e000      	b.n	8009960 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	00010008 	.word	0x00010008
 800996c:	00010002 	.word	0x00010002

08009970 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af02      	add	r7, sp, #8
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	4608      	mov	r0, r1
 800997a:	4611      	mov	r1, r2
 800997c:	461a      	mov	r2, r3
 800997e:	4603      	mov	r3, r0
 8009980:	817b      	strh	r3, [r7, #10]
 8009982:	460b      	mov	r3, r1
 8009984:	813b      	strh	r3, [r7, #8]
 8009986:	4613      	mov	r3, r2
 8009988:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 f960 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00d      	beq.n	80099ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c0:	d103      	bne.n	80099ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e05f      	b.n	8009a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099ce:	897b      	ldrh	r3, [r7, #10]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	461a      	mov	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	6a3a      	ldr	r2, [r7, #32]
 80099e2:	492d      	ldr	r1, [pc, #180]	; (8009a98 <I2C_RequestMemoryWrite+0x128>)
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 f9bb 	bl	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e04c      	b.n	8009a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0c:	6a39      	ldr	r1, [r7, #32]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fa46 	bl	8009ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00d      	beq.n	8009a36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d107      	bne.n	8009a32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e02b      	b.n	8009a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d105      	bne.n	8009a48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a3c:	893b      	ldrh	r3, [r7, #8]
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	611a      	str	r2, [r3, #16]
 8009a46:	e021      	b.n	8009a8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a48:	893b      	ldrh	r3, [r7, #8]
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a58:	6a39      	ldr	r1, [r7, #32]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 fa20 	bl	8009ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00d      	beq.n	8009a82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d107      	bne.n	8009a7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e005      	b.n	8009a8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a82:	893b      	ldrh	r3, [r7, #8]
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	00010002 	.word	0x00010002

08009a9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b088      	sub	sp, #32
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4603      	mov	r3, r0
 8009aac:	817b      	strh	r3, [r7, #10]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	813b      	strh	r3, [r7, #8]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ac4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ad4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 f8c2 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00d      	beq.n	8009b0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009afc:	d103      	bne.n	8009b06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e0aa      	b.n	8009c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b0a:	897b      	ldrh	r3, [r7, #10]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	461a      	mov	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	6a3a      	ldr	r2, [r7, #32]
 8009b1e:	4952      	ldr	r1, [pc, #328]	; (8009c68 <I2C_RequestMemoryRead+0x1cc>)
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f91d 	bl	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e097      	b.n	8009c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	617b      	str	r3, [r7, #20]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	617b      	str	r3, [r7, #20]
 8009b44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b48:	6a39      	ldr	r1, [r7, #32]
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 f9a8 	bl	8009ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00d      	beq.n	8009b72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	d107      	bne.n	8009b6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e076      	b.n	8009c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b72:	88fb      	ldrh	r3, [r7, #6]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d105      	bne.n	8009b84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b78:	893b      	ldrh	r3, [r7, #8]
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	611a      	str	r2, [r3, #16]
 8009b82:	e021      	b.n	8009bc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b84:	893b      	ldrh	r3, [r7, #8]
 8009b86:	0a1b      	lsrs	r3, r3, #8
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b94:	6a39      	ldr	r1, [r7, #32]
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 f982 	bl	8009ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00d      	beq.n	8009bbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	2b04      	cmp	r3, #4
 8009ba8:	d107      	bne.n	8009bba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e050      	b.n	8009c60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bbe:	893b      	ldrh	r3, [r7, #8]
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bca:	6a39      	ldr	r1, [r7, #32]
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 f967 	bl	8009ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00d      	beq.n	8009bf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d107      	bne.n	8009bf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e035      	b.n	8009c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f82b 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00d      	beq.n	8009c38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c2a:	d103      	bne.n	8009c34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e013      	b.n	8009c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009c38:	897b      	ldrh	r3, [r7, #10]
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f043 0301 	orr.w	r3, r3, #1
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	6a3a      	ldr	r2, [r7, #32]
 8009c4c:	4906      	ldr	r1, [pc, #24]	; (8009c68 <I2C_RequestMemoryRead+0x1cc>)
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 f886 	bl	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e000      	b.n	8009c60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	00010002 	.word	0x00010002

08009c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c7c:	e048      	b.n	8009d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d044      	beq.n	8009d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c86:	f7fe f9e3 	bl	8008050 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d302      	bcc.n	8009c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d139      	bne.n	8009d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	0c1b      	lsrs	r3, r3, #16
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d10d      	bne.n	8009cc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	43da      	mvns	r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	bf0c      	ite	eq
 8009cb8:	2301      	moveq	r3, #1
 8009cba:	2300      	movne	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	e00c      	b.n	8009cdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	43da      	mvns	r2, r3
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4013      	ands	r3, r2
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bf0c      	ite	eq
 8009cd4:	2301      	moveq	r3, #1
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d116      	bne.n	8009d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfc:	f043 0220 	orr.w	r2, r3, #32
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e023      	b.n	8009d58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	0c1b      	lsrs	r3, r3, #16
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d10d      	bne.n	8009d36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	43da      	mvns	r2, r3
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	4013      	ands	r3, r2
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	bf0c      	ite	eq
 8009d2c:	2301      	moveq	r3, #1
 8009d2e:	2300      	movne	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	461a      	mov	r2, r3
 8009d34:	e00c      	b.n	8009d50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	43da      	mvns	r2, r3
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	4013      	ands	r3, r2
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	bf0c      	ite	eq
 8009d48:	2301      	moveq	r3, #1
 8009d4a:	2300      	movne	r3, #0
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	79fb      	ldrb	r3, [r7, #7]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d093      	beq.n	8009c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d6e:	e071      	b.n	8009e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d7e:	d123      	bne.n	8009dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	f043 0204 	orr.w	r2, r3, #4
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e067      	b.n	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dce:	d041      	beq.n	8009e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dd0:	f7fe f93e 	bl	8008050 <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d302      	bcc.n	8009de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d136      	bne.n	8009e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	0c1b      	lsrs	r3, r3, #16
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d10c      	bne.n	8009e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	43da      	mvns	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bf14      	ite	ne
 8009e02:	2301      	movne	r3, #1
 8009e04:	2300      	moveq	r3, #0
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	e00b      	b.n	8009e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	43da      	mvns	r2, r3
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	4013      	ands	r3, r2
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	bf14      	ite	ne
 8009e1c:	2301      	movne	r3, #1
 8009e1e:	2300      	moveq	r3, #0
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d016      	beq.n	8009e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2220      	movs	r2, #32
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e40:	f043 0220 	orr.w	r2, r3, #32
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e021      	b.n	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	0c1b      	lsrs	r3, r3, #16
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d10c      	bne.n	8009e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	43da      	mvns	r2, r3
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	4013      	ands	r3, r2
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bf14      	ite	ne
 8009e70:	2301      	movne	r3, #1
 8009e72:	2300      	moveq	r3, #0
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	e00b      	b.n	8009e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	43da      	mvns	r2, r3
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4013      	ands	r3, r2
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	bf14      	ite	ne
 8009e8a:	2301      	movne	r3, #1
 8009e8c:	2300      	moveq	r3, #0
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f47f af6d 	bne.w	8009d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009eac:	e034      	b.n	8009f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 f8e3 	bl	800a07a <I2C_IsAcknowledgeFailed>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e034      	b.n	8009f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec4:	d028      	beq.n	8009f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ec6:	f7fe f8c3 	bl	8008050 <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d302      	bcc.n	8009edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d11d      	bne.n	8009f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee6:	2b80      	cmp	r3, #128	; 0x80
 8009ee8:	d016      	beq.n	8009f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f04:	f043 0220 	orr.w	r2, r3, #32
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e007      	b.n	8009f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f22:	2b80      	cmp	r3, #128	; 0x80
 8009f24:	d1c3      	bne.n	8009eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f3c:	e034      	b.n	8009fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 f89b 	bl	800a07a <I2C_IsAcknowledgeFailed>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e034      	b.n	8009fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f54:	d028      	beq.n	8009fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f56:	f7fe f87b 	bl	8008050 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d302      	bcc.n	8009f6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d11d      	bne.n	8009fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	f003 0304 	and.w	r3, r3, #4
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	d016      	beq.n	8009fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f94:	f043 0220 	orr.w	r2, r3, #32
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e007      	b.n	8009fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	f003 0304 	and.w	r3, r3, #4
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d1c3      	bne.n	8009f3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fcc:	e049      	b.n	800a062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b10      	cmp	r3, #16
 8009fda:	d119      	bne.n	800a010 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f06f 0210 	mvn.w	r2, #16
 8009fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e030      	b.n	800a072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a010:	f7fe f81e 	bl	8008050 <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d302      	bcc.n	800a026 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d11d      	bne.n	800a062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a030:	2b40      	cmp	r3, #64	; 0x40
 800a032:	d016      	beq.n	800a062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2220      	movs	r2, #32
 800a03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04e:	f043 0220 	orr.w	r2, r3, #32
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e007      	b.n	800a072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a06c:	2b40      	cmp	r3, #64	; 0x40
 800a06e:	d1ae      	bne.n	8009fce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b083      	sub	sp, #12
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a08c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a090:	d11b      	bne.n	800a0ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a09a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b6:	f043 0204 	orr.w	r2, r3, #4
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e000      	b.n	800a0cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bc80      	pop	{r7}
 800a0d4:	4770      	bx	lr
	...

0800a0d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e272      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 8087 	beq.w	800a206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0f8:	4b92      	ldr	r3, [pc, #584]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f003 030c 	and.w	r3, r3, #12
 800a100:	2b04      	cmp	r3, #4
 800a102:	d00c      	beq.n	800a11e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a104:	4b8f      	ldr	r3, [pc, #572]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f003 030c 	and.w	r3, r3, #12
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d112      	bne.n	800a136 <HAL_RCC_OscConfig+0x5e>
 800a110:	4b8c      	ldr	r3, [pc, #560]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a11c:	d10b      	bne.n	800a136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a11e:	4b89      	ldr	r3, [pc, #548]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a126:	2b00      	cmp	r3, #0
 800a128:	d06c      	beq.n	800a204 <HAL_RCC_OscConfig+0x12c>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d168      	bne.n	800a204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e24c      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a13e:	d106      	bne.n	800a14e <HAL_RCC_OscConfig+0x76>
 800a140:	4b80      	ldr	r3, [pc, #512]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a7f      	ldr	r2, [pc, #508]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	e02e      	b.n	800a1ac <HAL_RCC_OscConfig+0xd4>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10c      	bne.n	800a170 <HAL_RCC_OscConfig+0x98>
 800a156:	4b7b      	ldr	r3, [pc, #492]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a7a      	ldr	r2, [pc, #488]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a15c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	4b78      	ldr	r3, [pc, #480]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a77      	ldr	r2, [pc, #476]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	e01d      	b.n	800a1ac <HAL_RCC_OscConfig+0xd4>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a178:	d10c      	bne.n	800a194 <HAL_RCC_OscConfig+0xbc>
 800a17a:	4b72      	ldr	r3, [pc, #456]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a71      	ldr	r2, [pc, #452]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	4b6f      	ldr	r3, [pc, #444]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a6e      	ldr	r2, [pc, #440]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a18c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	e00b      	b.n	800a1ac <HAL_RCC_OscConfig+0xd4>
 800a194:	4b6b      	ldr	r3, [pc, #428]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a6a      	ldr	r2, [pc, #424]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a19a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	4b68      	ldr	r3, [pc, #416]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a67      	ldr	r2, [pc, #412]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a1a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d013      	beq.n	800a1dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1b4:	f7fd ff4c 	bl	8008050 <HAL_GetTick>
 800a1b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1ba:	e008      	b.n	800a1ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1bc:	f7fd ff48 	bl	8008050 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	2b64      	cmp	r3, #100	; 0x64
 800a1c8:	d901      	bls.n	800a1ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e200      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1ce:	4b5d      	ldr	r3, [pc, #372]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0f0      	beq.n	800a1bc <HAL_RCC_OscConfig+0xe4>
 800a1da:	e014      	b.n	800a206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1dc:	f7fd ff38 	bl	8008050 <HAL_GetTick>
 800a1e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1e2:	e008      	b.n	800a1f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1e4:	f7fd ff34 	bl	8008050 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	2b64      	cmp	r3, #100	; 0x64
 800a1f0:	d901      	bls.n	800a1f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e1ec      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1f6:	4b53      	ldr	r3, [pc, #332]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f0      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x10c>
 800a202:	e000      	b.n	800a206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d063      	beq.n	800a2da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a212:	4b4c      	ldr	r3, [pc, #304]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f003 030c 	and.w	r3, r3, #12
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00b      	beq.n	800a236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a21e:	4b49      	ldr	r3, [pc, #292]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	f003 030c 	and.w	r3, r3, #12
 800a226:	2b08      	cmp	r3, #8
 800a228:	d11c      	bne.n	800a264 <HAL_RCC_OscConfig+0x18c>
 800a22a:	4b46      	ldr	r3, [pc, #280]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a232:	2b00      	cmp	r3, #0
 800a234:	d116      	bne.n	800a264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a236:	4b43      	ldr	r3, [pc, #268]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d005      	beq.n	800a24e <HAL_RCC_OscConfig+0x176>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d001      	beq.n	800a24e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e1c0      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a24e:	4b3d      	ldr	r3, [pc, #244]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	4939      	ldr	r1, [pc, #228]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a262:	e03a      	b.n	800a2da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d020      	beq.n	800a2ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a26c:	4b36      	ldr	r3, [pc, #216]	; (800a348 <HAL_RCC_OscConfig+0x270>)
 800a26e:	2201      	movs	r2, #1
 800a270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a272:	f7fd feed 	bl	8008050 <HAL_GetTick>
 800a276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a278:	e008      	b.n	800a28c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a27a:	f7fd fee9 	bl	8008050 <HAL_GetTick>
 800a27e:	4602      	mov	r2, r0
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	2b02      	cmp	r3, #2
 800a286:	d901      	bls.n	800a28c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e1a1      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a28c:	4b2d      	ldr	r3, [pc, #180]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0302 	and.w	r3, r3, #2
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0f0      	beq.n	800a27a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a298:	4b2a      	ldr	r3, [pc, #168]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	4927      	ldr	r1, [pc, #156]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	600b      	str	r3, [r1, #0]
 800a2ac:	e015      	b.n	800a2da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2ae:	4b26      	ldr	r3, [pc, #152]	; (800a348 <HAL_RCC_OscConfig+0x270>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2b4:	f7fd fecc 	bl	8008050 <HAL_GetTick>
 800a2b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2ba:	e008      	b.n	800a2ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2bc:	f7fd fec8 	bl	8008050 <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d901      	bls.n	800a2ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e180      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2ce:	4b1d      	ldr	r3, [pc, #116]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1f0      	bne.n	800a2bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0308 	and.w	r3, r3, #8
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d03a      	beq.n	800a35c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d019      	beq.n	800a322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2ee:	4b17      	ldr	r3, [pc, #92]	; (800a34c <HAL_RCC_OscConfig+0x274>)
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2f4:	f7fd feac 	bl	8008050 <HAL_GetTick>
 800a2f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2fa:	e008      	b.n	800a30e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2fc:	f7fd fea8 	bl	8008050 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d901      	bls.n	800a30e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e160      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a30e:	4b0d      	ldr	r3, [pc, #52]	; (800a344 <HAL_RCC_OscConfig+0x26c>)
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d0f0      	beq.n	800a2fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a31a:	2001      	movs	r0, #1
 800a31c:	f000 face 	bl	800a8bc <RCC_Delay>
 800a320:	e01c      	b.n	800a35c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a322:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <HAL_RCC_OscConfig+0x274>)
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a328:	f7fd fe92 	bl	8008050 <HAL_GetTick>
 800a32c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a32e:	e00f      	b.n	800a350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a330:	f7fd fe8e 	bl	8008050 <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d908      	bls.n	800a350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e146      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
 800a342:	bf00      	nop
 800a344:	40021000 	.word	0x40021000
 800a348:	42420000 	.word	0x42420000
 800a34c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a350:	4b92      	ldr	r3, [pc, #584]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	f003 0302 	and.w	r3, r3, #2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e9      	bne.n	800a330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 80a6 	beq.w	800a4b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a36e:	4b8b      	ldr	r3, [pc, #556]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10d      	bne.n	800a396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a37a:	4b88      	ldr	r3, [pc, #544]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	4a87      	ldr	r2, [pc, #540]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a384:	61d3      	str	r3, [r2, #28]
 800a386:	4b85      	ldr	r3, [pc, #532]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a38e:	60bb      	str	r3, [r7, #8]
 800a390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a392:	2301      	movs	r3, #1
 800a394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a396:	4b82      	ldr	r3, [pc, #520]	; (800a5a0 <HAL_RCC_OscConfig+0x4c8>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d118      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a3a2:	4b7f      	ldr	r3, [pc, #508]	; (800a5a0 <HAL_RCC_OscConfig+0x4c8>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a7e      	ldr	r2, [pc, #504]	; (800a5a0 <HAL_RCC_OscConfig+0x4c8>)
 800a3a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3ae:	f7fd fe4f 	bl	8008050 <HAL_GetTick>
 800a3b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3b4:	e008      	b.n	800a3c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3b6:	f7fd fe4b 	bl	8008050 <HAL_GetTick>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	2b64      	cmp	r3, #100	; 0x64
 800a3c2:	d901      	bls.n	800a3c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e103      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3c8:	4b75      	ldr	r3, [pc, #468]	; (800a5a0 <HAL_RCC_OscConfig+0x4c8>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d0f0      	beq.n	800a3b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d106      	bne.n	800a3ea <HAL_RCC_OscConfig+0x312>
 800a3dc:	4b6f      	ldr	r3, [pc, #444]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	4a6e      	ldr	r2, [pc, #440]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a3e2:	f043 0301 	orr.w	r3, r3, #1
 800a3e6:	6213      	str	r3, [r2, #32]
 800a3e8:	e02d      	b.n	800a446 <HAL_RCC_OscConfig+0x36e>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10c      	bne.n	800a40c <HAL_RCC_OscConfig+0x334>
 800a3f2:	4b6a      	ldr	r3, [pc, #424]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	4a69      	ldr	r2, [pc, #420]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a3f8:	f023 0301 	bic.w	r3, r3, #1
 800a3fc:	6213      	str	r3, [r2, #32]
 800a3fe:	4b67      	ldr	r3, [pc, #412]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	4a66      	ldr	r2, [pc, #408]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a404:	f023 0304 	bic.w	r3, r3, #4
 800a408:	6213      	str	r3, [r2, #32]
 800a40a:	e01c      	b.n	800a446 <HAL_RCC_OscConfig+0x36e>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	2b05      	cmp	r3, #5
 800a412:	d10c      	bne.n	800a42e <HAL_RCC_OscConfig+0x356>
 800a414:	4b61      	ldr	r3, [pc, #388]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a416:	6a1b      	ldr	r3, [r3, #32]
 800a418:	4a60      	ldr	r2, [pc, #384]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a41a:	f043 0304 	orr.w	r3, r3, #4
 800a41e:	6213      	str	r3, [r2, #32]
 800a420:	4b5e      	ldr	r3, [pc, #376]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a422:	6a1b      	ldr	r3, [r3, #32]
 800a424:	4a5d      	ldr	r2, [pc, #372]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a426:	f043 0301 	orr.w	r3, r3, #1
 800a42a:	6213      	str	r3, [r2, #32]
 800a42c:	e00b      	b.n	800a446 <HAL_RCC_OscConfig+0x36e>
 800a42e:	4b5b      	ldr	r3, [pc, #364]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	4a5a      	ldr	r2, [pc, #360]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a434:	f023 0301 	bic.w	r3, r3, #1
 800a438:	6213      	str	r3, [r2, #32]
 800a43a:	4b58      	ldr	r3, [pc, #352]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	4a57      	ldr	r2, [pc, #348]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a440:	f023 0304 	bic.w	r3, r3, #4
 800a444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d015      	beq.n	800a47a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a44e:	f7fd fdff 	bl	8008050 <HAL_GetTick>
 800a452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a454:	e00a      	b.n	800a46c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a456:	f7fd fdfb 	bl	8008050 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	f241 3288 	movw	r2, #5000	; 0x1388
 800a464:	4293      	cmp	r3, r2
 800a466:	d901      	bls.n	800a46c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e0b1      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a46c:	4b4b      	ldr	r3, [pc, #300]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	f003 0302 	and.w	r3, r3, #2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0ee      	beq.n	800a456 <HAL_RCC_OscConfig+0x37e>
 800a478:	e014      	b.n	800a4a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a47a:	f7fd fde9 	bl	8008050 <HAL_GetTick>
 800a47e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a480:	e00a      	b.n	800a498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a482:	f7fd fde5 	bl	8008050 <HAL_GetTick>
 800a486:	4602      	mov	r2, r0
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a490:	4293      	cmp	r3, r2
 800a492:	d901      	bls.n	800a498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e09b      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a498:	4b40      	ldr	r3, [pc, #256]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1ee      	bne.n	800a482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d105      	bne.n	800a4b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4aa:	4b3c      	ldr	r3, [pc, #240]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	4a3b      	ldr	r2, [pc, #236]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a4b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 8087 	beq.w	800a5ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a4c0:	4b36      	ldr	r3, [pc, #216]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f003 030c 	and.w	r3, r3, #12
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d061      	beq.n	800a590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d146      	bne.n	800a562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4d4:	4b33      	ldr	r3, [pc, #204]	; (800a5a4 <HAL_RCC_OscConfig+0x4cc>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4da:	f7fd fdb9 	bl	8008050 <HAL_GetTick>
 800a4de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4e0:	e008      	b.n	800a4f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4e2:	f7fd fdb5 	bl	8008050 <HAL_GetTick>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d901      	bls.n	800a4f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e06d      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4f4:	4b29      	ldr	r3, [pc, #164]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1f0      	bne.n	800a4e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a508:	d108      	bne.n	800a51c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a50a:	4b24      	ldr	r3, [pc, #144]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	4921      	ldr	r1, [pc, #132]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a51c:	4b1f      	ldr	r3, [pc, #124]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a19      	ldr	r1, [r3, #32]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	430b      	orrs	r3, r1
 800a52e:	491b      	ldr	r1, [pc, #108]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a530:	4313      	orrs	r3, r2
 800a532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a534:	4b1b      	ldr	r3, [pc, #108]	; (800a5a4 <HAL_RCC_OscConfig+0x4cc>)
 800a536:	2201      	movs	r2, #1
 800a538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a53a:	f7fd fd89 	bl	8008050 <HAL_GetTick>
 800a53e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a540:	e008      	b.n	800a554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a542:	f7fd fd85 	bl	8008050 <HAL_GetTick>
 800a546:	4602      	mov	r2, r0
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d901      	bls.n	800a554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e03d      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a554:	4b11      	ldr	r3, [pc, #68]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0f0      	beq.n	800a542 <HAL_RCC_OscConfig+0x46a>
 800a560:	e035      	b.n	800a5ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a562:	4b10      	ldr	r3, [pc, #64]	; (800a5a4 <HAL_RCC_OscConfig+0x4cc>)
 800a564:	2200      	movs	r2, #0
 800a566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a568:	f7fd fd72 	bl	8008050 <HAL_GetTick>
 800a56c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a56e:	e008      	b.n	800a582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a570:	f7fd fd6e 	bl	8008050 <HAL_GetTick>
 800a574:	4602      	mov	r2, r0
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d901      	bls.n	800a582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e026      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a582:	4b06      	ldr	r3, [pc, #24]	; (800a59c <HAL_RCC_OscConfig+0x4c4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1f0      	bne.n	800a570 <HAL_RCC_OscConfig+0x498>
 800a58e:	e01e      	b.n	800a5ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	69db      	ldr	r3, [r3, #28]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d107      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e019      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
 800a59c:	40021000 	.word	0x40021000
 800a5a0:	40007000 	.word	0x40007000
 800a5a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a5a8:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <HAL_RCC_OscConfig+0x500>)
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d106      	bne.n	800a5ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d001      	beq.n	800a5ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e000      	b.n	800a5d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	40021000 	.word	0x40021000

0800a5dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e0d0      	b.n	800a792 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5f0:	4b6a      	ldr	r3, [pc, #424]	; (800a79c <HAL_RCC_ClockConfig+0x1c0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d910      	bls.n	800a620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5fe:	4b67      	ldr	r3, [pc, #412]	; (800a79c <HAL_RCC_ClockConfig+0x1c0>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f023 0207 	bic.w	r2, r3, #7
 800a606:	4965      	ldr	r1, [pc, #404]	; (800a79c <HAL_RCC_ClockConfig+0x1c0>)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a60e:	4b63      	ldr	r3, [pc, #396]	; (800a79c <HAL_RCC_ClockConfig+0x1c0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0307 	and.w	r3, r3, #7
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d001      	beq.n	800a620 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e0b8      	b.n	800a792 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d020      	beq.n	800a66e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b00      	cmp	r3, #0
 800a636:	d005      	beq.n	800a644 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a638:	4b59      	ldr	r3, [pc, #356]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	4a58      	ldr	r2, [pc, #352]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a63e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a642:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0308 	and.w	r3, r3, #8
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d005      	beq.n	800a65c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a650:	4b53      	ldr	r3, [pc, #332]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	4a52      	ldr	r2, [pc, #328]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a656:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a65a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a65c:	4b50      	ldr	r3, [pc, #320]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	494d      	ldr	r1, [pc, #308]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d040      	beq.n	800a6fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d107      	bne.n	800a692 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a682:	4b47      	ldr	r3, [pc, #284]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d115      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e07f      	b.n	800a792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d107      	bne.n	800a6aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a69a:	4b41      	ldr	r3, [pc, #260]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e073      	b.n	800a792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6aa:	4b3d      	ldr	r3, [pc, #244]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e06b      	b.n	800a792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6ba:	4b39      	ldr	r3, [pc, #228]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f023 0203 	bic.w	r2, r3, #3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	4936      	ldr	r1, [pc, #216]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6cc:	f7fd fcc0 	bl	8008050 <HAL_GetTick>
 800a6d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6d2:	e00a      	b.n	800a6ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6d4:	f7fd fcbc 	bl	8008050 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e053      	b.n	800a792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6ea:	4b2d      	ldr	r3, [pc, #180]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	f003 020c 	and.w	r2, r3, #12
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d1eb      	bne.n	800a6d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6fc:	4b27      	ldr	r3, [pc, #156]	; (800a79c <HAL_RCC_ClockConfig+0x1c0>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	429a      	cmp	r2, r3
 800a708:	d210      	bcs.n	800a72c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a70a:	4b24      	ldr	r3, [pc, #144]	; (800a79c <HAL_RCC_ClockConfig+0x1c0>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f023 0207 	bic.w	r2, r3, #7
 800a712:	4922      	ldr	r1, [pc, #136]	; (800a79c <HAL_RCC_ClockConfig+0x1c0>)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	4313      	orrs	r3, r2
 800a718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a71a:	4b20      	ldr	r3, [pc, #128]	; (800a79c <HAL_RCC_ClockConfig+0x1c0>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0307 	and.w	r3, r3, #7
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d001      	beq.n	800a72c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e032      	b.n	800a792 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b00      	cmp	r3, #0
 800a736:	d008      	beq.n	800a74a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a738:	4b19      	ldr	r3, [pc, #100]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	4916      	ldr	r1, [pc, #88]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a746:	4313      	orrs	r3, r2
 800a748:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0308 	and.w	r3, r3, #8
 800a752:	2b00      	cmp	r3, #0
 800a754:	d009      	beq.n	800a76a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a756:	4b12      	ldr	r3, [pc, #72]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	490e      	ldr	r1, [pc, #56]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a766:	4313      	orrs	r3, r2
 800a768:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a76a:	f000 f821 	bl	800a7b0 <HAL_RCC_GetSysClockFreq>
 800a76e:	4602      	mov	r2, r0
 800a770:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	091b      	lsrs	r3, r3, #4
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	490a      	ldr	r1, [pc, #40]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c8>)
 800a77c:	5ccb      	ldrb	r3, [r1, r3]
 800a77e:	fa22 f303 	lsr.w	r3, r2, r3
 800a782:	4a09      	ldr	r2, [pc, #36]	; (800a7a8 <HAL_RCC_ClockConfig+0x1cc>)
 800a784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a786:	4b09      	ldr	r3, [pc, #36]	; (800a7ac <HAL_RCC_ClockConfig+0x1d0>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fd fc1e 	bl	8007fcc <HAL_InitTick>

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	40022000 	.word	0x40022000
 800a7a0:	40021000 	.word	0x40021000
 800a7a4:	0800d4a4 	.word	0x0800d4a4
 800a7a8:	2000094c 	.word	0x2000094c
 800a7ac:	20000950 	.word	0x20000950

0800a7b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	60fb      	str	r3, [r7, #12]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60bb      	str	r3, [r7, #8]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a7ca:	4b1e      	ldr	r3, [pc, #120]	; (800a844 <HAL_RCC_GetSysClockFreq+0x94>)
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f003 030c 	and.w	r3, r3, #12
 800a7d6:	2b04      	cmp	r3, #4
 800a7d8:	d002      	beq.n	800a7e0 <HAL_RCC_GetSysClockFreq+0x30>
 800a7da:	2b08      	cmp	r3, #8
 800a7dc:	d003      	beq.n	800a7e6 <HAL_RCC_GetSysClockFreq+0x36>
 800a7de:	e027      	b.n	800a830 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a7e0:	4b19      	ldr	r3, [pc, #100]	; (800a848 <HAL_RCC_GetSysClockFreq+0x98>)
 800a7e2:	613b      	str	r3, [r7, #16]
      break;
 800a7e4:	e027      	b.n	800a836 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	0c9b      	lsrs	r3, r3, #18
 800a7ea:	f003 030f 	and.w	r3, r3, #15
 800a7ee:	4a17      	ldr	r2, [pc, #92]	; (800a84c <HAL_RCC_GetSysClockFreq+0x9c>)
 800a7f0:	5cd3      	ldrb	r3, [r2, r3]
 800a7f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d010      	beq.n	800a820 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a7fe:	4b11      	ldr	r3, [pc, #68]	; (800a844 <HAL_RCC_GetSysClockFreq+0x94>)
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	0c5b      	lsrs	r3, r3, #17
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	4a11      	ldr	r2, [pc, #68]	; (800a850 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a80a:	5cd3      	ldrb	r3, [r2, r3]
 800a80c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a0d      	ldr	r2, [pc, #52]	; (800a848 <HAL_RCC_GetSysClockFreq+0x98>)
 800a812:	fb03 f202 	mul.w	r2, r3, r2
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	fbb2 f3f3 	udiv	r3, r2, r3
 800a81c:	617b      	str	r3, [r7, #20]
 800a81e:	e004      	b.n	800a82a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a0c      	ldr	r2, [pc, #48]	; (800a854 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a824:	fb02 f303 	mul.w	r3, r2, r3
 800a828:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	613b      	str	r3, [r7, #16]
      break;
 800a82e:	e002      	b.n	800a836 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a830:	4b05      	ldr	r3, [pc, #20]	; (800a848 <HAL_RCC_GetSysClockFreq+0x98>)
 800a832:	613b      	str	r3, [r7, #16]
      break;
 800a834:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a836:	693b      	ldr	r3, [r7, #16]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	371c      	adds	r7, #28
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bc80      	pop	{r7}
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	40021000 	.word	0x40021000
 800a848:	007a1200 	.word	0x007a1200
 800a84c:	0800d4bc 	.word	0x0800d4bc
 800a850:	0800d4cc 	.word	0x0800d4cc
 800a854:	003d0900 	.word	0x003d0900

0800a858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a858:	b480      	push	{r7}
 800a85a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <HAL_RCC_GetHCLKFreq+0x10>)
 800a85e:	681b      	ldr	r3, [r3, #0]
}
 800a860:	4618      	mov	r0, r3
 800a862:	46bd      	mov	sp, r7
 800a864:	bc80      	pop	{r7}
 800a866:	4770      	bx	lr
 800a868:	2000094c 	.word	0x2000094c

0800a86c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a870:	f7ff fff2 	bl	800a858 <HAL_RCC_GetHCLKFreq>
 800a874:	4602      	mov	r2, r0
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	0a1b      	lsrs	r3, r3, #8
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	4903      	ldr	r1, [pc, #12]	; (800a890 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a882:	5ccb      	ldrb	r3, [r1, r3]
 800a884:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a888:	4618      	mov	r0, r3
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	40021000 	.word	0x40021000
 800a890:	0800d4b4 	.word	0x0800d4b4

0800a894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a898:	f7ff ffde 	bl	800a858 <HAL_RCC_GetHCLKFreq>
 800a89c:	4602      	mov	r2, r0
 800a89e:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	0adb      	lsrs	r3, r3, #11
 800a8a4:	f003 0307 	and.w	r3, r3, #7
 800a8a8:	4903      	ldr	r1, [pc, #12]	; (800a8b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8aa:	5ccb      	ldrb	r3, [r1, r3]
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	40021000 	.word	0x40021000
 800a8b8:	0800d4b4 	.word	0x0800d4b4

0800a8bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a8c4:	4b0a      	ldr	r3, [pc, #40]	; (800a8f0 <RCC_Delay+0x34>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a0a      	ldr	r2, [pc, #40]	; (800a8f4 <RCC_Delay+0x38>)
 800a8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ce:	0a5b      	lsrs	r3, r3, #9
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	fb02 f303 	mul.w	r3, r2, r3
 800a8d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a8d8:	bf00      	nop
  }
  while (Delay --);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	1e5a      	subs	r2, r3, #1
 800a8de:	60fa      	str	r2, [r7, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1f9      	bne.n	800a8d8 <RCC_Delay+0x1c>
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bc80      	pop	{r7}
 800a8ee:	4770      	bx	lr
 800a8f0:	2000094c 	.word	0x2000094c
 800a8f4:	10624dd3 	.word	0x10624dd3

0800a8f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e041      	b.n	800a98e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d106      	bne.n	800a924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f7fd fa26 	bl	8007d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2202      	movs	r2, #2
 800a928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3304      	adds	r3, #4
 800a934:	4619      	mov	r1, r3
 800a936:	4610      	mov	r0, r2
 800a938:	f000 fa82 	bl	800ae40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d001      	beq.n	800a9b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e044      	b.n	800aa3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68da      	ldr	r2, [r3, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f042 0201 	orr.w	r2, r2, #1
 800a9c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a1d      	ldr	r2, [pc, #116]	; (800aa44 <HAL_TIM_Base_Start_IT+0xac>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d018      	beq.n	800aa04 <HAL_TIM_Base_Start_IT+0x6c>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a1c      	ldr	r2, [pc, #112]	; (800aa48 <HAL_TIM_Base_Start_IT+0xb0>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d013      	beq.n	800aa04 <HAL_TIM_Base_Start_IT+0x6c>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e4:	d00e      	beq.n	800aa04 <HAL_TIM_Base_Start_IT+0x6c>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a18      	ldr	r2, [pc, #96]	; (800aa4c <HAL_TIM_Base_Start_IT+0xb4>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d009      	beq.n	800aa04 <HAL_TIM_Base_Start_IT+0x6c>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a16      	ldr	r2, [pc, #88]	; (800aa50 <HAL_TIM_Base_Start_IT+0xb8>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d004      	beq.n	800aa04 <HAL_TIM_Base_Start_IT+0x6c>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a15      	ldr	r2, [pc, #84]	; (800aa54 <HAL_TIM_Base_Start_IT+0xbc>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d111      	bne.n	800aa28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f003 0307 	and.w	r3, r3, #7
 800aa0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b06      	cmp	r3, #6
 800aa14:	d010      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f042 0201 	orr.w	r2, r2, #1
 800aa24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa26:	e007      	b.n	800aa38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f042 0201 	orr.w	r2, r2, #1
 800aa36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bc80      	pop	{r7}
 800aa42:	4770      	bx	lr
 800aa44:	40012c00 	.word	0x40012c00
 800aa48:	40013400 	.word	0x40013400
 800aa4c:	40000400 	.word	0x40000400
 800aa50:	40000800 	.word	0x40000800
 800aa54:	40000c00 	.word	0x40000c00

0800aa58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	f003 0302 	and.w	r3, r3, #2
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d122      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d11b      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f06f 0202 	mvn.w	r2, #2
 800aa84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f9b4 	bl	800ae08 <HAL_TIM_IC_CaptureCallback>
 800aaa0:	e005      	b.n	800aaae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f9a7 	bl	800adf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9b6 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	f003 0304 	and.w	r3, r3, #4
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d122      	bne.n	800ab08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	2b04      	cmp	r3, #4
 800aace:	d11b      	bne.n	800ab08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f06f 0204 	mvn.w	r2, #4
 800aad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2202      	movs	r2, #2
 800aade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f98a 	bl	800ae08 <HAL_TIM_IC_CaptureCallback>
 800aaf4:	e005      	b.n	800ab02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f97d 	bl	800adf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f98c 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	f003 0308 	and.w	r3, r3, #8
 800ab12:	2b08      	cmp	r3, #8
 800ab14:	d122      	bne.n	800ab5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b08      	cmp	r3, #8
 800ab22:	d11b      	bne.n	800ab5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f06f 0208 	mvn.w	r2, #8
 800ab2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2204      	movs	r2, #4
 800ab32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f960 	bl	800ae08 <HAL_TIM_IC_CaptureCallback>
 800ab48:	e005      	b.n	800ab56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f953 	bl	800adf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f962 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	f003 0310 	and.w	r3, r3, #16
 800ab66:	2b10      	cmp	r3, #16
 800ab68:	d122      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	f003 0310 	and.w	r3, r3, #16
 800ab74:	2b10      	cmp	r3, #16
 800ab76:	d11b      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f06f 0210 	mvn.w	r2, #16
 800ab80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2208      	movs	r2, #8
 800ab86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d003      	beq.n	800ab9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f936 	bl	800ae08 <HAL_TIM_IC_CaptureCallback>
 800ab9c:	e005      	b.n	800abaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f929 	bl	800adf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f938 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d10e      	bne.n	800abdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f003 0301 	and.w	r3, r3, #1
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d107      	bne.n	800abdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f06f 0201 	mvn.w	r2, #1
 800abd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7fc fd48 	bl	800766c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe6:	2b80      	cmp	r3, #128	; 0x80
 800abe8:	d10e      	bne.n	800ac08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf4:	2b80      	cmp	r3, #128	; 0x80
 800abf6:	d107      	bne.n	800ac08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 faa1 	bl	800b14a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac12:	2b40      	cmp	r3, #64	; 0x40
 800ac14:	d10e      	bne.n	800ac34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac20:	2b40      	cmp	r3, #64	; 0x40
 800ac22:	d107      	bne.n	800ac34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f8fc 	bl	800ae2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	f003 0320 	and.w	r3, r3, #32
 800ac3e:	2b20      	cmp	r3, #32
 800ac40:	d10e      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	f003 0320 	and.w	r3, r3, #32
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d107      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f06f 0220 	mvn.w	r2, #32
 800ac58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fa6c 	bl	800b138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac60:	bf00      	nop
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d101      	bne.n	800ac84 <HAL_TIM_ConfigClockSource+0x1c>
 800ac80:	2302      	movs	r3, #2
 800ac82:	e0b4      	b.n	800adee <HAL_TIM_ConfigClockSource+0x186>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acbc:	d03e      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd4>
 800acbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acc2:	f200 8087 	bhi.w	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acca:	f000 8086 	beq.w	800adda <HAL_TIM_ConfigClockSource+0x172>
 800acce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd2:	d87f      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acd4:	2b70      	cmp	r3, #112	; 0x70
 800acd6:	d01a      	beq.n	800ad0e <HAL_TIM_ConfigClockSource+0xa6>
 800acd8:	2b70      	cmp	r3, #112	; 0x70
 800acda:	d87b      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acdc:	2b60      	cmp	r3, #96	; 0x60
 800acde:	d050      	beq.n	800ad82 <HAL_TIM_ConfigClockSource+0x11a>
 800ace0:	2b60      	cmp	r3, #96	; 0x60
 800ace2:	d877      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800ace4:	2b50      	cmp	r3, #80	; 0x50
 800ace6:	d03c      	beq.n	800ad62 <HAL_TIM_ConfigClockSource+0xfa>
 800ace8:	2b50      	cmp	r3, #80	; 0x50
 800acea:	d873      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acec:	2b40      	cmp	r3, #64	; 0x40
 800acee:	d058      	beq.n	800ada2 <HAL_TIM_ConfigClockSource+0x13a>
 800acf0:	2b40      	cmp	r3, #64	; 0x40
 800acf2:	d86f      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acf4:	2b30      	cmp	r3, #48	; 0x30
 800acf6:	d064      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x15a>
 800acf8:	2b30      	cmp	r3, #48	; 0x30
 800acfa:	d86b      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acfc:	2b20      	cmp	r3, #32
 800acfe:	d060      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x15a>
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d867      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d05c      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x15a>
 800ad08:	2b10      	cmp	r3, #16
 800ad0a:	d05a      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x15a>
 800ad0c:	e062      	b.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad1e:	f000 f980 	bl	800b022 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	609a      	str	r2, [r3, #8]
      break;
 800ad3a:	e04f      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad4c:	f000 f969 	bl	800b022 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad5e:	609a      	str	r2, [r3, #8]
      break;
 800ad60:	e03c      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f000 f8e0 	bl	800af34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2150      	movs	r1, #80	; 0x50
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f937 	bl	800afee <TIM_ITRx_SetConfig>
      break;
 800ad80:	e02c      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f000 f8fe 	bl	800af90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2160      	movs	r1, #96	; 0x60
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 f927 	bl	800afee <TIM_ITRx_SetConfig>
      break;
 800ada0:	e01c      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adae:	461a      	mov	r2, r3
 800adb0:	f000 f8c0 	bl	800af34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2140      	movs	r1, #64	; 0x40
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 f917 	bl	800afee <TIM_ITRx_SetConfig>
      break;
 800adc0:	e00c      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f000 f90e 	bl	800afee <TIM_ITRx_SetConfig>
      break;
 800add2:	e003      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	73fb      	strb	r3, [r7, #15]
      break;
 800add8:	e000      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800adda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adec:	7bfb      	ldrb	r3, [r7, #15]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bc80      	pop	{r7}
 800ae06:	4770      	bx	lr

0800ae08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bc80      	pop	{r7}
 800ae18:	4770      	bx	lr

0800ae1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae22:	bf00      	nop
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bc80      	pop	{r7}
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bc80      	pop	{r7}
 800ae3c:	4770      	bx	lr
	...

0800ae40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a33      	ldr	r2, [pc, #204]	; (800af20 <TIM_Base_SetConfig+0xe0>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d013      	beq.n	800ae80 <TIM_Base_SetConfig+0x40>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a32      	ldr	r2, [pc, #200]	; (800af24 <TIM_Base_SetConfig+0xe4>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d00f      	beq.n	800ae80 <TIM_Base_SetConfig+0x40>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae66:	d00b      	beq.n	800ae80 <TIM_Base_SetConfig+0x40>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a2f      	ldr	r2, [pc, #188]	; (800af28 <TIM_Base_SetConfig+0xe8>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d007      	beq.n	800ae80 <TIM_Base_SetConfig+0x40>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a2e      	ldr	r2, [pc, #184]	; (800af2c <TIM_Base_SetConfig+0xec>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d003      	beq.n	800ae80 <TIM_Base_SetConfig+0x40>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a2d      	ldr	r2, [pc, #180]	; (800af30 <TIM_Base_SetConfig+0xf0>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d108      	bne.n	800ae92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a22      	ldr	r2, [pc, #136]	; (800af20 <TIM_Base_SetConfig+0xe0>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d013      	beq.n	800aec2 <TIM_Base_SetConfig+0x82>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a21      	ldr	r2, [pc, #132]	; (800af24 <TIM_Base_SetConfig+0xe4>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d00f      	beq.n	800aec2 <TIM_Base_SetConfig+0x82>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea8:	d00b      	beq.n	800aec2 <TIM_Base_SetConfig+0x82>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a1e      	ldr	r2, [pc, #120]	; (800af28 <TIM_Base_SetConfig+0xe8>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d007      	beq.n	800aec2 <TIM_Base_SetConfig+0x82>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a1d      	ldr	r2, [pc, #116]	; (800af2c <TIM_Base_SetConfig+0xec>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d003      	beq.n	800aec2 <TIM_Base_SetConfig+0x82>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a1c      	ldr	r2, [pc, #112]	; (800af30 <TIM_Base_SetConfig+0xf0>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d108      	bne.n	800aed4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	4313      	orrs	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	689a      	ldr	r2, [r3, #8]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a09      	ldr	r2, [pc, #36]	; (800af20 <TIM_Base_SetConfig+0xe0>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d003      	beq.n	800af08 <TIM_Base_SetConfig+0xc8>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a08      	ldr	r2, [pc, #32]	; (800af24 <TIM_Base_SetConfig+0xe4>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d103      	bne.n	800af10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	691a      	ldr	r2, [r3, #16]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	615a      	str	r2, [r3, #20]
}
 800af16:	bf00      	nop
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bc80      	pop	{r7}
 800af1e:	4770      	bx	lr
 800af20:	40012c00 	.word	0x40012c00
 800af24:	40013400 	.word	0x40013400
 800af28:	40000400 	.word	0x40000400
 800af2c:	40000800 	.word	0x40000800
 800af30:	40000c00 	.word	0x40000c00

0800af34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a1b      	ldr	r3, [r3, #32]
 800af44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	f023 0201 	bic.w	r2, r3, #1
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f023 030a 	bic.w	r3, r3, #10
 800af70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	4313      	orrs	r3, r2
 800af78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	621a      	str	r2, [r3, #32]
}
 800af86:	bf00      	nop
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bc80      	pop	{r7}
 800af8e:	4770      	bx	lr

0800af90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af90:	b480      	push	{r7}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6a1b      	ldr	r3, [r3, #32]
 800afa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	f023 0210 	bic.w	r2, r3, #16
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	031b      	lsls	r3, r3, #12
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afcc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	621a      	str	r2, [r3, #32]
}
 800afe4:	bf00      	nop
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	bc80      	pop	{r7}
 800afec:	4770      	bx	lr

0800afee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b006:	683a      	ldr	r2, [r7, #0]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	f043 0307 	orr.w	r3, r3, #7
 800b010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	609a      	str	r2, [r3, #8]
}
 800b018:	bf00      	nop
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bc80      	pop	{r7}
 800b020:	4770      	bx	lr

0800b022 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b022:	b480      	push	{r7}
 800b024:	b087      	sub	sp, #28
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
 800b02e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b03c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	021a      	lsls	r2, r3, #8
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	431a      	orrs	r2, r3
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	4313      	orrs	r3, r2
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	609a      	str	r2, [r3, #8]
}
 800b056:	bf00      	nop
 800b058:	371c      	adds	r7, #28
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bc80      	pop	{r7}
 800b05e:	4770      	bx	lr

0800b060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b070:	2b01      	cmp	r3, #1
 800b072:	d101      	bne.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b074:	2302      	movs	r3, #2
 800b076:	e050      	b.n	800b11a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a1b      	ldr	r2, [pc, #108]	; (800b124 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d018      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a19      	ldr	r2, [pc, #100]	; (800b128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d013      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ce:	d00e      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a15      	ldr	r2, [pc, #84]	; (800b12c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d009      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a14      	ldr	r2, [pc, #80]	; (800b130 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d004      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a12      	ldr	r2, [pc, #72]	; (800b134 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d10c      	bne.n	800b108 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	bc80      	pop	{r7}
 800b122:	4770      	bx	lr
 800b124:	40012c00 	.word	0x40012c00
 800b128:	40013400 	.word	0x40013400
 800b12c:	40000400 	.word	0x40000400
 800b130:	40000800 	.word	0x40000800
 800b134:	40000c00 	.word	0x40000c00

0800b138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	bc80      	pop	{r7}
 800b148:	4770      	bx	lr

0800b14a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b152:	bf00      	nop
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	bc80      	pop	{r7}
 800b15a:	4770      	bx	lr

0800b15c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e042      	b.n	800b1f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7fc fe1a 	bl	8007dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2224      	movs	r2, #36	; 0x24
 800b18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b19e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fcb5 	bl	800bb10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	691a      	ldr	r2, [r3, #16]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	695a      	ldr	r2, [r3, #20]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68da      	ldr	r2, [r3, #12]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b1d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	4613      	mov	r3, r2
 800b208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b20      	cmp	r3, #32
 800b214:	d121      	bne.n	800b25a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <HAL_UART_Transmit_IT+0x26>
 800b21c:	88fb      	ldrh	r3, [r7, #6]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d101      	bne.n	800b226 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e01a      	b.n	800b25c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	88fa      	ldrh	r2, [r7, #6]
 800b230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	88fa      	ldrh	r2, [r7, #6]
 800b236:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2221      	movs	r2, #33	; 0x21
 800b242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68da      	ldr	r2, [r3, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b254:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b256:	2300      	movs	r3, #0
 800b258:	e000      	b.n	800b25c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b25a:	2302      	movs	r3, #2
  }
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	bc80      	pop	{r7}
 800b264:	4770      	bx	lr
	...

0800b268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b0ba      	sub	sp, #232	; 0xe8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b28e:	2300      	movs	r3, #0
 800b290:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b294:	2300      	movs	r3, #0
 800b296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b29e:	f003 030f 	and.w	r3, r3, #15
 800b2a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b2a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10f      	bne.n	800b2ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b2:	f003 0320 	and.w	r3, r3, #32
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <HAL_UART_IRQHandler+0x66>
 800b2ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2be:	f003 0320 	and.w	r3, r3, #32
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fb63 	bl	800b992 <UART_Receive_IT>
      return;
 800b2cc:	e25b      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b2ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 80de 	beq.w	800b494 <HAL_UART_IRQHandler+0x22c>
 800b2d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d106      	bne.n	800b2f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 80d1 	beq.w	800b494 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00b      	beq.n	800b316 <HAL_UART_IRQHandler+0xae>
 800b2fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b306:	2b00      	cmp	r3, #0
 800b308:	d005      	beq.n	800b316 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b30e:	f043 0201 	orr.w	r2, r3, #1
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b31a:	f003 0304 	and.w	r3, r3, #4
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00b      	beq.n	800b33a <HAL_UART_IRQHandler+0xd2>
 800b322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d005      	beq.n	800b33a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b332:	f043 0202 	orr.w	r2, r3, #2
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b33e:	f003 0302 	and.w	r3, r3, #2
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00b      	beq.n	800b35e <HAL_UART_IRQHandler+0xf6>
 800b346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d005      	beq.n	800b35e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b356:	f043 0204 	orr.w	r2, r3, #4
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b362:	f003 0308 	and.w	r3, r3, #8
 800b366:	2b00      	cmp	r3, #0
 800b368:	d011      	beq.n	800b38e <HAL_UART_IRQHandler+0x126>
 800b36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b36e:	f003 0320 	and.w	r3, r3, #32
 800b372:	2b00      	cmp	r3, #0
 800b374:	d105      	bne.n	800b382 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b386:	f043 0208 	orr.w	r2, r3, #8
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 81f2 	beq.w	800b77c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b39c:	f003 0320 	and.w	r3, r3, #32
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d008      	beq.n	800b3b6 <HAL_UART_IRQHandler+0x14e>
 800b3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3a8:	f003 0320 	and.w	r3, r3, #32
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 faee 	bl	800b992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	bf14      	ite	ne
 800b3c4:	2301      	movne	r3, #1
 800b3c6:	2300      	moveq	r3, #0
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d103      	bne.n	800b3e2 <HAL_UART_IRQHandler+0x17a>
 800b3da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d04f      	beq.n	800b482 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f9f8 	bl	800b7d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d041      	beq.n	800b47a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3314      	adds	r3, #20
 800b3fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b40c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3314      	adds	r3, #20
 800b41e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b422:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b42e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b432:	e841 2300 	strex	r3, r2, [r1]
 800b436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b43a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1d9      	bne.n	800b3f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d013      	beq.n	800b472 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b44e:	4a7e      	ldr	r2, [pc, #504]	; (800b648 <HAL_UART_IRQHandler+0x3e0>)
 800b450:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b456:	4618      	mov	r0, r3
 800b458:	f7fd f86c 	bl	8008534 <HAL_DMA_Abort_IT>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d016      	beq.n	800b490 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b46c:	4610      	mov	r0, r2
 800b46e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b470:	e00e      	b.n	800b490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f99c 	bl	800b7b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b478:	e00a      	b.n	800b490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f998 	bl	800b7b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b480:	e006      	b.n	800b490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f994 	bl	800b7b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b48e:	e175      	b.n	800b77c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b490:	bf00      	nop
    return;
 800b492:	e173      	b.n	800b77c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b498:	2b01      	cmp	r3, #1
 800b49a:	f040 814f 	bne.w	800b73c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a2:	f003 0310 	and.w	r3, r3, #16
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 8148 	beq.w	800b73c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4b0:	f003 0310 	and.w	r3, r3, #16
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 8141 	beq.w	800b73c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	60bb      	str	r3, [r7, #8]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	60bb      	str	r3, [r7, #8]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	60bb      	str	r3, [r7, #8]
 800b4ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	695b      	ldr	r3, [r3, #20]
 800b4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 80b6 	beq.w	800b64c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 8145 	beq.w	800b780 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4fe:	429a      	cmp	r2, r3
 800b500:	f080 813e 	bcs.w	800b780 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b50a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	2b20      	cmp	r3, #32
 800b514:	f000 8088 	beq.w	800b628 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	330c      	adds	r3, #12
 800b51e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b522:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b526:	e853 3f00 	ldrex	r3, [r3]
 800b52a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b52e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b536:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	330c      	adds	r3, #12
 800b540:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b544:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b548:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b550:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b55c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1d9      	bne.n	800b518 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3314      	adds	r3, #20
 800b56a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b56e:	e853 3f00 	ldrex	r3, [r3]
 800b572:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b576:	f023 0301 	bic.w	r3, r3, #1
 800b57a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3314      	adds	r3, #20
 800b584:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b588:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b58c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b590:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b594:	e841 2300 	strex	r3, r2, [r1]
 800b598:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b59a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1e1      	bne.n	800b564 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3314      	adds	r3, #20
 800b5a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5aa:	e853 3f00 	ldrex	r3, [r3]
 800b5ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b5b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3314      	adds	r3, #20
 800b5c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b5c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b5c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b5cc:	e841 2300 	strex	r3, r2, [r1]
 800b5d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b5d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1e3      	bne.n	800b5a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	330c      	adds	r3, #12
 800b5ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f0:	e853 3f00 	ldrex	r3, [r3]
 800b5f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5f8:	f023 0310 	bic.w	r3, r3, #16
 800b5fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	330c      	adds	r3, #12
 800b606:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b60a:	65ba      	str	r2, [r7, #88]	; 0x58
 800b60c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b610:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b612:	e841 2300 	strex	r3, r2, [r1]
 800b616:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e3      	bne.n	800b5e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b622:	4618      	mov	r0, r3
 800b624:	f7fc ff4b 	bl	80084be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2202      	movs	r2, #2
 800b62c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b636:	b29b      	uxth	r3, r3
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f8bf 	bl	800b7c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b644:	e09c      	b.n	800b780 <HAL_UART_IRQHandler+0x518>
 800b646:	bf00      	nop
 800b648:	0800b89d 	.word	0x0800b89d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b654:	b29b      	uxth	r3, r3
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b660:	b29b      	uxth	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 808e 	beq.w	800b784 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 8089 	beq.w	800b784 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	330c      	adds	r3, #12
 800b678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	e853 3f00 	ldrex	r3, [r3]
 800b680:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	330c      	adds	r3, #12
 800b692:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b696:	647a      	str	r2, [r7, #68]	; 0x44
 800b698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b69c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b69e:	e841 2300 	strex	r3, r2, [r1]
 800b6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e3      	bne.n	800b672 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3314      	adds	r3, #20
 800b6b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	e853 3f00 	ldrex	r3, [r3]
 800b6b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	f023 0301 	bic.w	r3, r3, #1
 800b6c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3314      	adds	r3, #20
 800b6ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b6ce:	633a      	str	r2, [r7, #48]	; 0x30
 800b6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e3      	bne.n	800b6aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	330c      	adds	r3, #12
 800b6f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f023 0310 	bic.w	r3, r3, #16
 800b706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	330c      	adds	r3, #12
 800b710:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b714:	61fa      	str	r2, [r7, #28]
 800b716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b718:	69b9      	ldr	r1, [r7, #24]
 800b71a:	69fa      	ldr	r2, [r7, #28]
 800b71c:	e841 2300 	strex	r3, r2, [r1]
 800b720:	617b      	str	r3, [r7, #20]
   return(result);
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1e3      	bne.n	800b6f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2202      	movs	r2, #2
 800b72c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b72e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f844 	bl	800b7c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b73a:	e023      	b.n	800b784 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b744:	2b00      	cmp	r3, #0
 800b746:	d009      	beq.n	800b75c <HAL_UART_IRQHandler+0x4f4>
 800b748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b750:	2b00      	cmp	r3, #0
 800b752:	d003      	beq.n	800b75c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f8b5 	bl	800b8c4 <UART_Transmit_IT>
    return;
 800b75a:	e014      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00e      	beq.n	800b786 <HAL_UART_IRQHandler+0x51e>
 800b768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b770:	2b00      	cmp	r3, #0
 800b772:	d008      	beq.n	800b786 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f8f4 	bl	800b962 <UART_EndTransmit_IT>
    return;
 800b77a:	e004      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
    return;
 800b77c:	bf00      	nop
 800b77e:	e002      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
      return;
 800b780:	bf00      	nop
 800b782:	e000      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
      return;
 800b784:	bf00      	nop
  }
}
 800b786:	37e8      	adds	r7, #232	; 0xe8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	bc80      	pop	{r7}
 800b79c:	4770      	bx	lr

0800b79e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bc80      	pop	{r7}
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b7b8:	bf00      	nop
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bc80      	pop	{r7}
 800b7c0:	4770      	bx	lr

0800b7c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7ce:	bf00      	nop
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bc80      	pop	{r7}
 800b7d6:	4770      	bx	lr

0800b7d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b095      	sub	sp, #84	; 0x54
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	330c      	adds	r3, #12
 800b7e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ea:	e853 3f00 	ldrex	r3, [r3]
 800b7ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	330c      	adds	r3, #12
 800b7fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b800:	643a      	str	r2, [r7, #64]	; 0x40
 800b802:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b808:	e841 2300 	strex	r3, r2, [r1]
 800b80c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1e5      	bne.n	800b7e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3314      	adds	r3, #20
 800b81a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81c:	6a3b      	ldr	r3, [r7, #32]
 800b81e:	e853 3f00 	ldrex	r3, [r3]
 800b822:	61fb      	str	r3, [r7, #28]
   return(result);
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	f023 0301 	bic.w	r3, r3, #1
 800b82a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3314      	adds	r3, #20
 800b832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b834:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b83a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b83c:	e841 2300 	strex	r3, r2, [r1]
 800b840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e5      	bne.n	800b814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d119      	bne.n	800b884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	330c      	adds	r3, #12
 800b856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	e853 3f00 	ldrex	r3, [r3]
 800b85e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	f023 0310 	bic.w	r3, r3, #16
 800b866:	647b      	str	r3, [r7, #68]	; 0x44
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	330c      	adds	r3, #12
 800b86e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b870:	61ba      	str	r2, [r7, #24]
 800b872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b874:	6979      	ldr	r1, [r7, #20]
 800b876:	69ba      	ldr	r2, [r7, #24]
 800b878:	e841 2300 	strex	r3, r2, [r1]
 800b87c:	613b      	str	r3, [r7, #16]
   return(result);
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e5      	bne.n	800b850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2220      	movs	r2, #32
 800b888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b892:	bf00      	nop
 800b894:	3754      	adds	r7, #84	; 0x54
 800b896:	46bd      	mov	sp, r7
 800b898:	bc80      	pop	{r7}
 800b89a:	4770      	bx	lr

0800b89c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7ff ff7a 	bl	800b7b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b21      	cmp	r3, #33	; 0x21
 800b8d6:	d13e      	bne.n	800b956 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e0:	d114      	bne.n	800b90c <UART_Transmit_IT+0x48>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d110      	bne.n	800b90c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a1b      	ldr	r3, [r3, #32]
 800b8ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6a1b      	ldr	r3, [r3, #32]
 800b904:	1c9a      	adds	r2, r3, #2
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	621a      	str	r2, [r3, #32]
 800b90a:	e008      	b.n	800b91e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	1c59      	adds	r1, r3, #1
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	6211      	str	r1, [r2, #32]
 800b916:	781a      	ldrb	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b922:	b29b      	uxth	r3, r3
 800b924:	3b01      	subs	r3, #1
 800b926:	b29b      	uxth	r3, r3
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	4619      	mov	r1, r3
 800b92c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10f      	bne.n	800b952 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	68da      	ldr	r2, [r3, #12]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68da      	ldr	r2, [r3, #12]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	e000      	b.n	800b958 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b956:	2302      	movs	r3, #2
  }
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3714      	adds	r7, #20
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bc80      	pop	{r7}
 800b960:	4770      	bx	lr

0800b962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b082      	sub	sp, #8
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2220      	movs	r2, #32
 800b97e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ff02 	bl	800b78c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b08c      	sub	sp, #48	; 0x30
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b22      	cmp	r3, #34	; 0x22
 800b9a4:	f040 80ae 	bne.w	800bb04 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b0:	d117      	bne.n	800b9e2 <UART_Receive_IT+0x50>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d113      	bne.n	800b9e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9da:	1c9a      	adds	r2, r3, #2
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	629a      	str	r2, [r3, #40]	; 0x28
 800b9e0:	e026      	b.n	800ba30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9f4:	d007      	beq.n	800ba06 <UART_Receive_IT+0x74>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10a      	bne.n	800ba14 <UART_Receive_IT+0x82>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d106      	bne.n	800ba14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	e008      	b.n	800ba26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d15d      	bne.n	800bb00 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f022 0220 	bic.w	r2, r2, #32
 800ba52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68da      	ldr	r2, [r3, #12]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	695a      	ldr	r2, [r3, #20]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f022 0201 	bic.w	r2, r2, #1
 800ba72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2220      	movs	r2, #32
 800ba78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d135      	bne.n	800baf6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	330c      	adds	r3, #12
 800ba96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	e853 3f00 	ldrex	r3, [r3]
 800ba9e:	613b      	str	r3, [r7, #16]
   return(result);
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f023 0310 	bic.w	r3, r3, #16
 800baa6:	627b      	str	r3, [r7, #36]	; 0x24
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	330c      	adds	r3, #12
 800baae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bab0:	623a      	str	r2, [r7, #32]
 800bab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab4:	69f9      	ldr	r1, [r7, #28]
 800bab6:	6a3a      	ldr	r2, [r7, #32]
 800bab8:	e841 2300 	strex	r3, r2, [r1]
 800babc:	61bb      	str	r3, [r7, #24]
   return(result);
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1e5      	bne.n	800ba90 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 0310 	and.w	r3, r3, #16
 800bace:	2b10      	cmp	r3, #16
 800bad0:	d10a      	bne.n	800bae8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bad2:	2300      	movs	r3, #0
 800bad4:	60fb      	str	r3, [r7, #12]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	60fb      	str	r3, [r7, #12]
 800bae6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff fe67 	bl	800b7c2 <HAL_UARTEx_RxEventCallback>
 800baf4:	e002      	b.n	800bafc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff fe51 	bl	800b79e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	e002      	b.n	800bb06 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	e000      	b.n	800bb06 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bb04:	2302      	movs	r3, #2
  }
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3730      	adds	r7, #48	; 0x30
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
	...

0800bb10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	68da      	ldr	r2, [r3, #12]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	430a      	orrs	r2, r1
 800bb2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	689a      	ldr	r2, [r3, #8]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	431a      	orrs	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bb4a:	f023 030c 	bic.w	r3, r3, #12
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	6812      	ldr	r2, [r2, #0]
 800bb52:	68b9      	ldr	r1, [r7, #8]
 800bb54:	430b      	orrs	r3, r1
 800bb56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	699a      	ldr	r2, [r3, #24]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a2c      	ldr	r2, [pc, #176]	; (800bc24 <UART_SetConfig+0x114>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d103      	bne.n	800bb80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bb78:	f7fe fe8c 	bl	800a894 <HAL_RCC_GetPCLK2Freq>
 800bb7c:	60f8      	str	r0, [r7, #12]
 800bb7e:	e002      	b.n	800bb86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bb80:	f7fe fe74 	bl	800a86c <HAL_RCC_GetPCLK1Freq>
 800bb84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	009a      	lsls	r2, r3, #2
 800bb90:	441a      	add	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb9c:	4a22      	ldr	r2, [pc, #136]	; (800bc28 <UART_SetConfig+0x118>)
 800bb9e:	fba2 2303 	umull	r2, r3, r2, r3
 800bba2:	095b      	lsrs	r3, r3, #5
 800bba4:	0119      	lsls	r1, r3, #4
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	009a      	lsls	r2, r3, #2
 800bbb0:	441a      	add	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	fbb2 f2f3 	udiv	r2, r2, r3
 800bbbc:	4b1a      	ldr	r3, [pc, #104]	; (800bc28 <UART_SetConfig+0x118>)
 800bbbe:	fba3 0302 	umull	r0, r3, r3, r2
 800bbc2:	095b      	lsrs	r3, r3, #5
 800bbc4:	2064      	movs	r0, #100	; 0x64
 800bbc6:	fb00 f303 	mul.w	r3, r0, r3
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	011b      	lsls	r3, r3, #4
 800bbce:	3332      	adds	r3, #50	; 0x32
 800bbd0:	4a15      	ldr	r2, [pc, #84]	; (800bc28 <UART_SetConfig+0x118>)
 800bbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbd6:	095b      	lsrs	r3, r3, #5
 800bbd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbdc:	4419      	add	r1, r3
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009a      	lsls	r2, r3, #2
 800bbe8:	441a      	add	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	fbb2 f2f3 	udiv	r2, r2, r3
 800bbf4:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <UART_SetConfig+0x118>)
 800bbf6:	fba3 0302 	umull	r0, r3, r3, r2
 800bbfa:	095b      	lsrs	r3, r3, #5
 800bbfc:	2064      	movs	r0, #100	; 0x64
 800bbfe:	fb00 f303 	mul.w	r3, r0, r3
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	011b      	lsls	r3, r3, #4
 800bc06:	3332      	adds	r3, #50	; 0x32
 800bc08:	4a07      	ldr	r2, [pc, #28]	; (800bc28 <UART_SetConfig+0x118>)
 800bc0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc0e:	095b      	lsrs	r3, r3, #5
 800bc10:	f003 020f 	and.w	r2, r3, #15
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	440a      	add	r2, r1
 800bc1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bc1c:	bf00      	nop
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	40013800 	.word	0x40013800
 800bc28:	51eb851f 	.word	0x51eb851f

0800bc2c <__itoa>:
 800bc2c:	1e93      	subs	r3, r2, #2
 800bc2e:	2b22      	cmp	r3, #34	; 0x22
 800bc30:	b510      	push	{r4, lr}
 800bc32:	460c      	mov	r4, r1
 800bc34:	d904      	bls.n	800bc40 <__itoa+0x14>
 800bc36:	2300      	movs	r3, #0
 800bc38:	461c      	mov	r4, r3
 800bc3a:	700b      	strb	r3, [r1, #0]
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	bd10      	pop	{r4, pc}
 800bc40:	2a0a      	cmp	r2, #10
 800bc42:	d109      	bne.n	800bc58 <__itoa+0x2c>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	da07      	bge.n	800bc58 <__itoa+0x2c>
 800bc48:	232d      	movs	r3, #45	; 0x2d
 800bc4a:	700b      	strb	r3, [r1, #0]
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	4240      	negs	r0, r0
 800bc50:	4421      	add	r1, r4
 800bc52:	f000 f8b9 	bl	800bdc8 <__utoa>
 800bc56:	e7f1      	b.n	800bc3c <__itoa+0x10>
 800bc58:	2100      	movs	r1, #0
 800bc5a:	e7f9      	b.n	800bc50 <__itoa+0x24>

0800bc5c <itoa>:
 800bc5c:	f7ff bfe6 	b.w	800bc2c <__itoa>

0800bc60 <malloc>:
 800bc60:	4b02      	ldr	r3, [pc, #8]	; (800bc6c <malloc+0xc>)
 800bc62:	4601      	mov	r1, r0
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	f000 b823 	b.w	800bcb0 <_malloc_r>
 800bc6a:	bf00      	nop
 800bc6c:	200009a4 	.word	0x200009a4

0800bc70 <sbrk_aligned>:
 800bc70:	b570      	push	{r4, r5, r6, lr}
 800bc72:	4e0e      	ldr	r6, [pc, #56]	; (800bcac <sbrk_aligned+0x3c>)
 800bc74:	460c      	mov	r4, r1
 800bc76:	6831      	ldr	r1, [r6, #0]
 800bc78:	4605      	mov	r5, r0
 800bc7a:	b911      	cbnz	r1, 800bc82 <sbrk_aligned+0x12>
 800bc7c:	f000 f91e 	bl	800bebc <_sbrk_r>
 800bc80:	6030      	str	r0, [r6, #0]
 800bc82:	4621      	mov	r1, r4
 800bc84:	4628      	mov	r0, r5
 800bc86:	f000 f919 	bl	800bebc <_sbrk_r>
 800bc8a:	1c43      	adds	r3, r0, #1
 800bc8c:	d00a      	beq.n	800bca4 <sbrk_aligned+0x34>
 800bc8e:	1cc4      	adds	r4, r0, #3
 800bc90:	f024 0403 	bic.w	r4, r4, #3
 800bc94:	42a0      	cmp	r0, r4
 800bc96:	d007      	beq.n	800bca8 <sbrk_aligned+0x38>
 800bc98:	1a21      	subs	r1, r4, r0
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f000 f90e 	bl	800bebc <_sbrk_r>
 800bca0:	3001      	adds	r0, #1
 800bca2:	d101      	bne.n	800bca8 <sbrk_aligned+0x38>
 800bca4:	f04f 34ff 	mov.w	r4, #4294967295
 800bca8:	4620      	mov	r0, r4
 800bcaa:	bd70      	pop	{r4, r5, r6, pc}
 800bcac:	20000dd8 	.word	0x20000dd8

0800bcb0 <_malloc_r>:
 800bcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb4:	1ccd      	adds	r5, r1, #3
 800bcb6:	f025 0503 	bic.w	r5, r5, #3
 800bcba:	3508      	adds	r5, #8
 800bcbc:	2d0c      	cmp	r5, #12
 800bcbe:	bf38      	it	cc
 800bcc0:	250c      	movcc	r5, #12
 800bcc2:	2d00      	cmp	r5, #0
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	db01      	blt.n	800bccc <_malloc_r+0x1c>
 800bcc8:	42a9      	cmp	r1, r5
 800bcca:	d905      	bls.n	800bcd8 <_malloc_r+0x28>
 800bccc:	230c      	movs	r3, #12
 800bcce:	2600      	movs	r6, #0
 800bcd0:	603b      	str	r3, [r7, #0]
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bdac <_malloc_r+0xfc>
 800bcdc:	f000 f868 	bl	800bdb0 <__malloc_lock>
 800bce0:	f8d8 3000 	ldr.w	r3, [r8]
 800bce4:	461c      	mov	r4, r3
 800bce6:	bb5c      	cbnz	r4, 800bd40 <_malloc_r+0x90>
 800bce8:	4629      	mov	r1, r5
 800bcea:	4638      	mov	r0, r7
 800bcec:	f7ff ffc0 	bl	800bc70 <sbrk_aligned>
 800bcf0:	1c43      	adds	r3, r0, #1
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	d155      	bne.n	800bda2 <_malloc_r+0xf2>
 800bcf6:	f8d8 4000 	ldr.w	r4, [r8]
 800bcfa:	4626      	mov	r6, r4
 800bcfc:	2e00      	cmp	r6, #0
 800bcfe:	d145      	bne.n	800bd8c <_malloc_r+0xdc>
 800bd00:	2c00      	cmp	r4, #0
 800bd02:	d048      	beq.n	800bd96 <_malloc_r+0xe6>
 800bd04:	6823      	ldr	r3, [r4, #0]
 800bd06:	4631      	mov	r1, r6
 800bd08:	4638      	mov	r0, r7
 800bd0a:	eb04 0903 	add.w	r9, r4, r3
 800bd0e:	f000 f8d5 	bl	800bebc <_sbrk_r>
 800bd12:	4581      	cmp	r9, r0
 800bd14:	d13f      	bne.n	800bd96 <_malloc_r+0xe6>
 800bd16:	6821      	ldr	r1, [r4, #0]
 800bd18:	4638      	mov	r0, r7
 800bd1a:	1a6d      	subs	r5, r5, r1
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	f7ff ffa7 	bl	800bc70 <sbrk_aligned>
 800bd22:	3001      	adds	r0, #1
 800bd24:	d037      	beq.n	800bd96 <_malloc_r+0xe6>
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	442b      	add	r3, r5
 800bd2a:	6023      	str	r3, [r4, #0]
 800bd2c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d038      	beq.n	800bda6 <_malloc_r+0xf6>
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	42a2      	cmp	r2, r4
 800bd38:	d12b      	bne.n	800bd92 <_malloc_r+0xe2>
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	605a      	str	r2, [r3, #4]
 800bd3e:	e00f      	b.n	800bd60 <_malloc_r+0xb0>
 800bd40:	6822      	ldr	r2, [r4, #0]
 800bd42:	1b52      	subs	r2, r2, r5
 800bd44:	d41f      	bmi.n	800bd86 <_malloc_r+0xd6>
 800bd46:	2a0b      	cmp	r2, #11
 800bd48:	d917      	bls.n	800bd7a <_malloc_r+0xca>
 800bd4a:	1961      	adds	r1, r4, r5
 800bd4c:	42a3      	cmp	r3, r4
 800bd4e:	6025      	str	r5, [r4, #0]
 800bd50:	bf18      	it	ne
 800bd52:	6059      	strne	r1, [r3, #4]
 800bd54:	6863      	ldr	r3, [r4, #4]
 800bd56:	bf08      	it	eq
 800bd58:	f8c8 1000 	streq.w	r1, [r8]
 800bd5c:	5162      	str	r2, [r4, r5]
 800bd5e:	604b      	str	r3, [r1, #4]
 800bd60:	4638      	mov	r0, r7
 800bd62:	f104 060b 	add.w	r6, r4, #11
 800bd66:	f000 f829 	bl	800bdbc <__malloc_unlock>
 800bd6a:	f026 0607 	bic.w	r6, r6, #7
 800bd6e:	1d23      	adds	r3, r4, #4
 800bd70:	1af2      	subs	r2, r6, r3
 800bd72:	d0ae      	beq.n	800bcd2 <_malloc_r+0x22>
 800bd74:	1b9b      	subs	r3, r3, r6
 800bd76:	50a3      	str	r3, [r4, r2]
 800bd78:	e7ab      	b.n	800bcd2 <_malloc_r+0x22>
 800bd7a:	42a3      	cmp	r3, r4
 800bd7c:	6862      	ldr	r2, [r4, #4]
 800bd7e:	d1dd      	bne.n	800bd3c <_malloc_r+0x8c>
 800bd80:	f8c8 2000 	str.w	r2, [r8]
 800bd84:	e7ec      	b.n	800bd60 <_malloc_r+0xb0>
 800bd86:	4623      	mov	r3, r4
 800bd88:	6864      	ldr	r4, [r4, #4]
 800bd8a:	e7ac      	b.n	800bce6 <_malloc_r+0x36>
 800bd8c:	4634      	mov	r4, r6
 800bd8e:	6876      	ldr	r6, [r6, #4]
 800bd90:	e7b4      	b.n	800bcfc <_malloc_r+0x4c>
 800bd92:	4613      	mov	r3, r2
 800bd94:	e7cc      	b.n	800bd30 <_malloc_r+0x80>
 800bd96:	230c      	movs	r3, #12
 800bd98:	4638      	mov	r0, r7
 800bd9a:	603b      	str	r3, [r7, #0]
 800bd9c:	f000 f80e 	bl	800bdbc <__malloc_unlock>
 800bda0:	e797      	b.n	800bcd2 <_malloc_r+0x22>
 800bda2:	6025      	str	r5, [r4, #0]
 800bda4:	e7dc      	b.n	800bd60 <_malloc_r+0xb0>
 800bda6:	605b      	str	r3, [r3, #4]
 800bda8:	deff      	udf	#255	; 0xff
 800bdaa:	bf00      	nop
 800bdac:	20000dd4 	.word	0x20000dd4

0800bdb0 <__malloc_lock>:
 800bdb0:	4801      	ldr	r0, [pc, #4]	; (800bdb8 <__malloc_lock+0x8>)
 800bdb2:	f000 b8bd 	b.w	800bf30 <__retarget_lock_acquire_recursive>
 800bdb6:	bf00      	nop
 800bdb8:	20000f18 	.word	0x20000f18

0800bdbc <__malloc_unlock>:
 800bdbc:	4801      	ldr	r0, [pc, #4]	; (800bdc4 <__malloc_unlock+0x8>)
 800bdbe:	f000 b8b8 	b.w	800bf32 <__retarget_lock_release_recursive>
 800bdc2:	bf00      	nop
 800bdc4:	20000f18 	.word	0x20000f18

0800bdc8 <__utoa>:
 800bdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdca:	b08b      	sub	sp, #44	; 0x2c
 800bdcc:	4605      	mov	r5, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	466e      	mov	r6, sp
 800bdd2:	4c1d      	ldr	r4, [pc, #116]	; (800be48 <__utoa+0x80>)
 800bdd4:	f104 0c20 	add.w	ip, r4, #32
 800bdd8:	4637      	mov	r7, r6
 800bdda:	6820      	ldr	r0, [r4, #0]
 800bddc:	6861      	ldr	r1, [r4, #4]
 800bdde:	3408      	adds	r4, #8
 800bde0:	c703      	stmia	r7!, {r0, r1}
 800bde2:	4564      	cmp	r4, ip
 800bde4:	463e      	mov	r6, r7
 800bde6:	d1f7      	bne.n	800bdd8 <__utoa+0x10>
 800bde8:	7921      	ldrb	r1, [r4, #4]
 800bdea:	6820      	ldr	r0, [r4, #0]
 800bdec:	7139      	strb	r1, [r7, #4]
 800bdee:	1e91      	subs	r1, r2, #2
 800bdf0:	2922      	cmp	r1, #34	; 0x22
 800bdf2:	6038      	str	r0, [r7, #0]
 800bdf4:	f04f 0100 	mov.w	r1, #0
 800bdf8:	d904      	bls.n	800be04 <__utoa+0x3c>
 800bdfa:	7019      	strb	r1, [r3, #0]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4618      	mov	r0, r3
 800be00:	b00b      	add	sp, #44	; 0x2c
 800be02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be04:	1e58      	subs	r0, r3, #1
 800be06:	4684      	mov	ip, r0
 800be08:	fbb5 f7f2 	udiv	r7, r5, r2
 800be0c:	fb02 5617 	mls	r6, r2, r7, r5
 800be10:	3628      	adds	r6, #40	; 0x28
 800be12:	446e      	add	r6, sp
 800be14:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800be18:	460c      	mov	r4, r1
 800be1a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800be1e:	462e      	mov	r6, r5
 800be20:	42b2      	cmp	r2, r6
 800be22:	463d      	mov	r5, r7
 800be24:	f101 0101 	add.w	r1, r1, #1
 800be28:	d9ee      	bls.n	800be08 <__utoa+0x40>
 800be2a:	2200      	movs	r2, #0
 800be2c:	545a      	strb	r2, [r3, r1]
 800be2e:	1919      	adds	r1, r3, r4
 800be30:	1aa5      	subs	r5, r4, r2
 800be32:	42aa      	cmp	r2, r5
 800be34:	dae3      	bge.n	800bdfe <__utoa+0x36>
 800be36:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800be3a:	780e      	ldrb	r6, [r1, #0]
 800be3c:	3201      	adds	r2, #1
 800be3e:	7006      	strb	r6, [r0, #0]
 800be40:	f801 5901 	strb.w	r5, [r1], #-1
 800be44:	e7f4      	b.n	800be30 <__utoa+0x68>
 800be46:	bf00      	nop
 800be48:	0800d4ce 	.word	0x0800d4ce

0800be4c <siprintf>:
 800be4c:	b40e      	push	{r1, r2, r3}
 800be4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be52:	b500      	push	{lr}
 800be54:	b09c      	sub	sp, #112	; 0x70
 800be56:	ab1d      	add	r3, sp, #116	; 0x74
 800be58:	9002      	str	r0, [sp, #8]
 800be5a:	9006      	str	r0, [sp, #24]
 800be5c:	9107      	str	r1, [sp, #28]
 800be5e:	9104      	str	r1, [sp, #16]
 800be60:	4808      	ldr	r0, [pc, #32]	; (800be84 <siprintf+0x38>)
 800be62:	4909      	ldr	r1, [pc, #36]	; (800be88 <siprintf+0x3c>)
 800be64:	f853 2b04 	ldr.w	r2, [r3], #4
 800be68:	9105      	str	r1, [sp, #20]
 800be6a:	6800      	ldr	r0, [r0, #0]
 800be6c:	a902      	add	r1, sp, #8
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	f000 f90a 	bl	800c088 <_svfiprintf_r>
 800be74:	2200      	movs	r2, #0
 800be76:	9b02      	ldr	r3, [sp, #8]
 800be78:	701a      	strb	r2, [r3, #0]
 800be7a:	b01c      	add	sp, #112	; 0x70
 800be7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be80:	b003      	add	sp, #12
 800be82:	4770      	bx	lr
 800be84:	200009a4 	.word	0x200009a4
 800be88:	ffff0208 	.word	0xffff0208

0800be8c <memset>:
 800be8c:	4603      	mov	r3, r0
 800be8e:	4402      	add	r2, r0
 800be90:	4293      	cmp	r3, r2
 800be92:	d100      	bne.n	800be96 <memset+0xa>
 800be94:	4770      	bx	lr
 800be96:	f803 1b01 	strb.w	r1, [r3], #1
 800be9a:	e7f9      	b.n	800be90 <memset+0x4>

0800be9c <strcat>:
 800be9c:	4602      	mov	r2, r0
 800be9e:	b510      	push	{r4, lr}
 800bea0:	7814      	ldrb	r4, [r2, #0]
 800bea2:	4613      	mov	r3, r2
 800bea4:	3201      	adds	r2, #1
 800bea6:	2c00      	cmp	r4, #0
 800bea8:	d1fa      	bne.n	800bea0 <strcat+0x4>
 800beaa:	3b01      	subs	r3, #1
 800beac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beb4:	2a00      	cmp	r2, #0
 800beb6:	d1f9      	bne.n	800beac <strcat+0x10>
 800beb8:	bd10      	pop	{r4, pc}
	...

0800bebc <_sbrk_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	2300      	movs	r3, #0
 800bec0:	4d05      	ldr	r5, [pc, #20]	; (800bed8 <_sbrk_r+0x1c>)
 800bec2:	4604      	mov	r4, r0
 800bec4:	4608      	mov	r0, r1
 800bec6:	602b      	str	r3, [r5, #0]
 800bec8:	f7fc f808 	bl	8007edc <_sbrk>
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	d102      	bne.n	800bed6 <_sbrk_r+0x1a>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	b103      	cbz	r3, 800bed6 <_sbrk_r+0x1a>
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	bd38      	pop	{r3, r4, r5, pc}
 800bed8:	20000f14 	.word	0x20000f14

0800bedc <__errno>:
 800bedc:	4b01      	ldr	r3, [pc, #4]	; (800bee4 <__errno+0x8>)
 800bede:	6818      	ldr	r0, [r3, #0]
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	200009a4 	.word	0x200009a4

0800bee8 <__libc_init_array>:
 800bee8:	b570      	push	{r4, r5, r6, lr}
 800beea:	2600      	movs	r6, #0
 800beec:	4d0c      	ldr	r5, [pc, #48]	; (800bf20 <__libc_init_array+0x38>)
 800beee:	4c0d      	ldr	r4, [pc, #52]	; (800bf24 <__libc_init_array+0x3c>)
 800bef0:	1b64      	subs	r4, r4, r5
 800bef2:	10a4      	asrs	r4, r4, #2
 800bef4:	42a6      	cmp	r6, r4
 800bef6:	d109      	bne.n	800bf0c <__libc_init_array+0x24>
 800bef8:	f000 fbc6 	bl	800c688 <_init>
 800befc:	2600      	movs	r6, #0
 800befe:	4d0a      	ldr	r5, [pc, #40]	; (800bf28 <__libc_init_array+0x40>)
 800bf00:	4c0a      	ldr	r4, [pc, #40]	; (800bf2c <__libc_init_array+0x44>)
 800bf02:	1b64      	subs	r4, r4, r5
 800bf04:	10a4      	asrs	r4, r4, #2
 800bf06:	42a6      	cmp	r6, r4
 800bf08:	d105      	bne.n	800bf16 <__libc_init_array+0x2e>
 800bf0a:	bd70      	pop	{r4, r5, r6, pc}
 800bf0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf10:	4798      	blx	r3
 800bf12:	3601      	adds	r6, #1
 800bf14:	e7ee      	b.n	800bef4 <__libc_init_array+0xc>
 800bf16:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf1a:	4798      	blx	r3
 800bf1c:	3601      	adds	r6, #1
 800bf1e:	e7f2      	b.n	800bf06 <__libc_init_array+0x1e>
 800bf20:	0800d528 	.word	0x0800d528
 800bf24:	0800d528 	.word	0x0800d528
 800bf28:	0800d528 	.word	0x0800d528
 800bf2c:	0800d52c 	.word	0x0800d52c

0800bf30 <__retarget_lock_acquire_recursive>:
 800bf30:	4770      	bx	lr

0800bf32 <__retarget_lock_release_recursive>:
 800bf32:	4770      	bx	lr

0800bf34 <strcpy>:
 800bf34:	4603      	mov	r3, r0
 800bf36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf3a:	f803 2b01 	strb.w	r2, [r3], #1
 800bf3e:	2a00      	cmp	r2, #0
 800bf40:	d1f9      	bne.n	800bf36 <strcpy+0x2>
 800bf42:	4770      	bx	lr

0800bf44 <_free_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4605      	mov	r5, r0
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	d040      	beq.n	800bfce <_free_r+0x8a>
 800bf4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf50:	1f0c      	subs	r4, r1, #4
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	bfb8      	it	lt
 800bf56:	18e4      	addlt	r4, r4, r3
 800bf58:	f7ff ff2a 	bl	800bdb0 <__malloc_lock>
 800bf5c:	4a1c      	ldr	r2, [pc, #112]	; (800bfd0 <_free_r+0x8c>)
 800bf5e:	6813      	ldr	r3, [r2, #0]
 800bf60:	b933      	cbnz	r3, 800bf70 <_free_r+0x2c>
 800bf62:	6063      	str	r3, [r4, #4]
 800bf64:	6014      	str	r4, [r2, #0]
 800bf66:	4628      	mov	r0, r5
 800bf68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf6c:	f7ff bf26 	b.w	800bdbc <__malloc_unlock>
 800bf70:	42a3      	cmp	r3, r4
 800bf72:	d908      	bls.n	800bf86 <_free_r+0x42>
 800bf74:	6820      	ldr	r0, [r4, #0]
 800bf76:	1821      	adds	r1, r4, r0
 800bf78:	428b      	cmp	r3, r1
 800bf7a:	bf01      	itttt	eq
 800bf7c:	6819      	ldreq	r1, [r3, #0]
 800bf7e:	685b      	ldreq	r3, [r3, #4]
 800bf80:	1809      	addeq	r1, r1, r0
 800bf82:	6021      	streq	r1, [r4, #0]
 800bf84:	e7ed      	b.n	800bf62 <_free_r+0x1e>
 800bf86:	461a      	mov	r2, r3
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	b10b      	cbz	r3, 800bf90 <_free_r+0x4c>
 800bf8c:	42a3      	cmp	r3, r4
 800bf8e:	d9fa      	bls.n	800bf86 <_free_r+0x42>
 800bf90:	6811      	ldr	r1, [r2, #0]
 800bf92:	1850      	adds	r0, r2, r1
 800bf94:	42a0      	cmp	r0, r4
 800bf96:	d10b      	bne.n	800bfb0 <_free_r+0x6c>
 800bf98:	6820      	ldr	r0, [r4, #0]
 800bf9a:	4401      	add	r1, r0
 800bf9c:	1850      	adds	r0, r2, r1
 800bf9e:	4283      	cmp	r3, r0
 800bfa0:	6011      	str	r1, [r2, #0]
 800bfa2:	d1e0      	bne.n	800bf66 <_free_r+0x22>
 800bfa4:	6818      	ldr	r0, [r3, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	4408      	add	r0, r1
 800bfaa:	6010      	str	r0, [r2, #0]
 800bfac:	6053      	str	r3, [r2, #4]
 800bfae:	e7da      	b.n	800bf66 <_free_r+0x22>
 800bfb0:	d902      	bls.n	800bfb8 <_free_r+0x74>
 800bfb2:	230c      	movs	r3, #12
 800bfb4:	602b      	str	r3, [r5, #0]
 800bfb6:	e7d6      	b.n	800bf66 <_free_r+0x22>
 800bfb8:	6820      	ldr	r0, [r4, #0]
 800bfba:	1821      	adds	r1, r4, r0
 800bfbc:	428b      	cmp	r3, r1
 800bfbe:	bf01      	itttt	eq
 800bfc0:	6819      	ldreq	r1, [r3, #0]
 800bfc2:	685b      	ldreq	r3, [r3, #4]
 800bfc4:	1809      	addeq	r1, r1, r0
 800bfc6:	6021      	streq	r1, [r4, #0]
 800bfc8:	6063      	str	r3, [r4, #4]
 800bfca:	6054      	str	r4, [r2, #4]
 800bfcc:	e7cb      	b.n	800bf66 <_free_r+0x22>
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20000dd4 	.word	0x20000dd4

0800bfd4 <__ssputs_r>:
 800bfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd8:	461f      	mov	r7, r3
 800bfda:	688e      	ldr	r6, [r1, #8]
 800bfdc:	4682      	mov	sl, r0
 800bfde:	42be      	cmp	r6, r7
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	4690      	mov	r8, r2
 800bfe4:	680b      	ldr	r3, [r1, #0]
 800bfe6:	d82c      	bhi.n	800c042 <__ssputs_r+0x6e>
 800bfe8:	898a      	ldrh	r2, [r1, #12]
 800bfea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfee:	d026      	beq.n	800c03e <__ssputs_r+0x6a>
 800bff0:	6965      	ldr	r5, [r4, #20]
 800bff2:	6909      	ldr	r1, [r1, #16]
 800bff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bff8:	eba3 0901 	sub.w	r9, r3, r1
 800bffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c000:	1c7b      	adds	r3, r7, #1
 800c002:	444b      	add	r3, r9
 800c004:	106d      	asrs	r5, r5, #1
 800c006:	429d      	cmp	r5, r3
 800c008:	bf38      	it	cc
 800c00a:	461d      	movcc	r5, r3
 800c00c:	0553      	lsls	r3, r2, #21
 800c00e:	d527      	bpl.n	800c060 <__ssputs_r+0x8c>
 800c010:	4629      	mov	r1, r5
 800c012:	f7ff fe4d 	bl	800bcb0 <_malloc_r>
 800c016:	4606      	mov	r6, r0
 800c018:	b360      	cbz	r0, 800c074 <__ssputs_r+0xa0>
 800c01a:	464a      	mov	r2, r9
 800c01c:	6921      	ldr	r1, [r4, #16]
 800c01e:	f000 faed 	bl	800c5fc <memcpy>
 800c022:	89a3      	ldrh	r3, [r4, #12]
 800c024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c02c:	81a3      	strh	r3, [r4, #12]
 800c02e:	6126      	str	r6, [r4, #16]
 800c030:	444e      	add	r6, r9
 800c032:	6026      	str	r6, [r4, #0]
 800c034:	463e      	mov	r6, r7
 800c036:	6165      	str	r5, [r4, #20]
 800c038:	eba5 0509 	sub.w	r5, r5, r9
 800c03c:	60a5      	str	r5, [r4, #8]
 800c03e:	42be      	cmp	r6, r7
 800c040:	d900      	bls.n	800c044 <__ssputs_r+0x70>
 800c042:	463e      	mov	r6, r7
 800c044:	4632      	mov	r2, r6
 800c046:	4641      	mov	r1, r8
 800c048:	6820      	ldr	r0, [r4, #0]
 800c04a:	f000 faaf 	bl	800c5ac <memmove>
 800c04e:	2000      	movs	r0, #0
 800c050:	68a3      	ldr	r3, [r4, #8]
 800c052:	1b9b      	subs	r3, r3, r6
 800c054:	60a3      	str	r3, [r4, #8]
 800c056:	6823      	ldr	r3, [r4, #0]
 800c058:	4433      	add	r3, r6
 800c05a:	6023      	str	r3, [r4, #0]
 800c05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c060:	462a      	mov	r2, r5
 800c062:	f000 fad9 	bl	800c618 <_realloc_r>
 800c066:	4606      	mov	r6, r0
 800c068:	2800      	cmp	r0, #0
 800c06a:	d1e0      	bne.n	800c02e <__ssputs_r+0x5a>
 800c06c:	4650      	mov	r0, sl
 800c06e:	6921      	ldr	r1, [r4, #16]
 800c070:	f7ff ff68 	bl	800bf44 <_free_r>
 800c074:	230c      	movs	r3, #12
 800c076:	f8ca 3000 	str.w	r3, [sl]
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295
 800c080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c084:	81a3      	strh	r3, [r4, #12]
 800c086:	e7e9      	b.n	800c05c <__ssputs_r+0x88>

0800c088 <_svfiprintf_r>:
 800c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08c:	4698      	mov	r8, r3
 800c08e:	898b      	ldrh	r3, [r1, #12]
 800c090:	4607      	mov	r7, r0
 800c092:	061b      	lsls	r3, r3, #24
 800c094:	460d      	mov	r5, r1
 800c096:	4614      	mov	r4, r2
 800c098:	b09d      	sub	sp, #116	; 0x74
 800c09a:	d50e      	bpl.n	800c0ba <_svfiprintf_r+0x32>
 800c09c:	690b      	ldr	r3, [r1, #16]
 800c09e:	b963      	cbnz	r3, 800c0ba <_svfiprintf_r+0x32>
 800c0a0:	2140      	movs	r1, #64	; 0x40
 800c0a2:	f7ff fe05 	bl	800bcb0 <_malloc_r>
 800c0a6:	6028      	str	r0, [r5, #0]
 800c0a8:	6128      	str	r0, [r5, #16]
 800c0aa:	b920      	cbnz	r0, 800c0b6 <_svfiprintf_r+0x2e>
 800c0ac:	230c      	movs	r3, #12
 800c0ae:	603b      	str	r3, [r7, #0]
 800c0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b4:	e0d0      	b.n	800c258 <_svfiprintf_r+0x1d0>
 800c0b6:	2340      	movs	r3, #64	; 0x40
 800c0b8:	616b      	str	r3, [r5, #20]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0be:	2320      	movs	r3, #32
 800c0c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0c4:	2330      	movs	r3, #48	; 0x30
 800c0c6:	f04f 0901 	mov.w	r9, #1
 800c0ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c270 <_svfiprintf_r+0x1e8>
 800c0d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0d6:	4623      	mov	r3, r4
 800c0d8:	469a      	mov	sl, r3
 800c0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0de:	b10a      	cbz	r2, 800c0e4 <_svfiprintf_r+0x5c>
 800c0e0:	2a25      	cmp	r2, #37	; 0x25
 800c0e2:	d1f9      	bne.n	800c0d8 <_svfiprintf_r+0x50>
 800c0e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c0e8:	d00b      	beq.n	800c102 <_svfiprintf_r+0x7a>
 800c0ea:	465b      	mov	r3, fp
 800c0ec:	4622      	mov	r2, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	f7ff ff6f 	bl	800bfd4 <__ssputs_r>
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	f000 80a9 	beq.w	800c24e <_svfiprintf_r+0x1c6>
 800c0fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0fe:	445a      	add	r2, fp
 800c100:	9209      	str	r2, [sp, #36]	; 0x24
 800c102:	f89a 3000 	ldrb.w	r3, [sl]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f000 80a1 	beq.w	800c24e <_svfiprintf_r+0x1c6>
 800c10c:	2300      	movs	r3, #0
 800c10e:	f04f 32ff 	mov.w	r2, #4294967295
 800c112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c116:	f10a 0a01 	add.w	sl, sl, #1
 800c11a:	9304      	str	r3, [sp, #16]
 800c11c:	9307      	str	r3, [sp, #28]
 800c11e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c122:	931a      	str	r3, [sp, #104]	; 0x68
 800c124:	4654      	mov	r4, sl
 800c126:	2205      	movs	r2, #5
 800c128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c12c:	4850      	ldr	r0, [pc, #320]	; (800c270 <_svfiprintf_r+0x1e8>)
 800c12e:	f000 fa57 	bl	800c5e0 <memchr>
 800c132:	9a04      	ldr	r2, [sp, #16]
 800c134:	b9d8      	cbnz	r0, 800c16e <_svfiprintf_r+0xe6>
 800c136:	06d0      	lsls	r0, r2, #27
 800c138:	bf44      	itt	mi
 800c13a:	2320      	movmi	r3, #32
 800c13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c140:	0711      	lsls	r1, r2, #28
 800c142:	bf44      	itt	mi
 800c144:	232b      	movmi	r3, #43	; 0x2b
 800c146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c14a:	f89a 3000 	ldrb.w	r3, [sl]
 800c14e:	2b2a      	cmp	r3, #42	; 0x2a
 800c150:	d015      	beq.n	800c17e <_svfiprintf_r+0xf6>
 800c152:	4654      	mov	r4, sl
 800c154:	2000      	movs	r0, #0
 800c156:	f04f 0c0a 	mov.w	ip, #10
 800c15a:	9a07      	ldr	r2, [sp, #28]
 800c15c:	4621      	mov	r1, r4
 800c15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c162:	3b30      	subs	r3, #48	; 0x30
 800c164:	2b09      	cmp	r3, #9
 800c166:	d94d      	bls.n	800c204 <_svfiprintf_r+0x17c>
 800c168:	b1b0      	cbz	r0, 800c198 <_svfiprintf_r+0x110>
 800c16a:	9207      	str	r2, [sp, #28]
 800c16c:	e014      	b.n	800c198 <_svfiprintf_r+0x110>
 800c16e:	eba0 0308 	sub.w	r3, r0, r8
 800c172:	fa09 f303 	lsl.w	r3, r9, r3
 800c176:	4313      	orrs	r3, r2
 800c178:	46a2      	mov	sl, r4
 800c17a:	9304      	str	r3, [sp, #16]
 800c17c:	e7d2      	b.n	800c124 <_svfiprintf_r+0x9c>
 800c17e:	9b03      	ldr	r3, [sp, #12]
 800c180:	1d19      	adds	r1, r3, #4
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	9103      	str	r1, [sp, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	bfbb      	ittet	lt
 800c18a:	425b      	neglt	r3, r3
 800c18c:	f042 0202 	orrlt.w	r2, r2, #2
 800c190:	9307      	strge	r3, [sp, #28]
 800c192:	9307      	strlt	r3, [sp, #28]
 800c194:	bfb8      	it	lt
 800c196:	9204      	strlt	r2, [sp, #16]
 800c198:	7823      	ldrb	r3, [r4, #0]
 800c19a:	2b2e      	cmp	r3, #46	; 0x2e
 800c19c:	d10c      	bne.n	800c1b8 <_svfiprintf_r+0x130>
 800c19e:	7863      	ldrb	r3, [r4, #1]
 800c1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a2:	d134      	bne.n	800c20e <_svfiprintf_r+0x186>
 800c1a4:	9b03      	ldr	r3, [sp, #12]
 800c1a6:	3402      	adds	r4, #2
 800c1a8:	1d1a      	adds	r2, r3, #4
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	9203      	str	r2, [sp, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	bfb8      	it	lt
 800c1b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1b6:	9305      	str	r3, [sp, #20]
 800c1b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c274 <_svfiprintf_r+0x1ec>
 800c1bc:	2203      	movs	r2, #3
 800c1be:	4650      	mov	r0, sl
 800c1c0:	7821      	ldrb	r1, [r4, #0]
 800c1c2:	f000 fa0d 	bl	800c5e0 <memchr>
 800c1c6:	b138      	cbz	r0, 800c1d8 <_svfiprintf_r+0x150>
 800c1c8:	2240      	movs	r2, #64	; 0x40
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	eba0 000a 	sub.w	r0, r0, sl
 800c1d0:	4082      	lsls	r2, r0
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	3401      	adds	r4, #1
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1dc:	2206      	movs	r2, #6
 800c1de:	4826      	ldr	r0, [pc, #152]	; (800c278 <_svfiprintf_r+0x1f0>)
 800c1e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1e4:	f000 f9fc 	bl	800c5e0 <memchr>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d038      	beq.n	800c25e <_svfiprintf_r+0x1d6>
 800c1ec:	4b23      	ldr	r3, [pc, #140]	; (800c27c <_svfiprintf_r+0x1f4>)
 800c1ee:	bb1b      	cbnz	r3, 800c238 <_svfiprintf_r+0x1b0>
 800c1f0:	9b03      	ldr	r3, [sp, #12]
 800c1f2:	3307      	adds	r3, #7
 800c1f4:	f023 0307 	bic.w	r3, r3, #7
 800c1f8:	3308      	adds	r3, #8
 800c1fa:	9303      	str	r3, [sp, #12]
 800c1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1fe:	4433      	add	r3, r6
 800c200:	9309      	str	r3, [sp, #36]	; 0x24
 800c202:	e768      	b.n	800c0d6 <_svfiprintf_r+0x4e>
 800c204:	460c      	mov	r4, r1
 800c206:	2001      	movs	r0, #1
 800c208:	fb0c 3202 	mla	r2, ip, r2, r3
 800c20c:	e7a6      	b.n	800c15c <_svfiprintf_r+0xd4>
 800c20e:	2300      	movs	r3, #0
 800c210:	f04f 0c0a 	mov.w	ip, #10
 800c214:	4619      	mov	r1, r3
 800c216:	3401      	adds	r4, #1
 800c218:	9305      	str	r3, [sp, #20]
 800c21a:	4620      	mov	r0, r4
 800c21c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c220:	3a30      	subs	r2, #48	; 0x30
 800c222:	2a09      	cmp	r2, #9
 800c224:	d903      	bls.n	800c22e <_svfiprintf_r+0x1a6>
 800c226:	2b00      	cmp	r3, #0
 800c228:	d0c6      	beq.n	800c1b8 <_svfiprintf_r+0x130>
 800c22a:	9105      	str	r1, [sp, #20]
 800c22c:	e7c4      	b.n	800c1b8 <_svfiprintf_r+0x130>
 800c22e:	4604      	mov	r4, r0
 800c230:	2301      	movs	r3, #1
 800c232:	fb0c 2101 	mla	r1, ip, r1, r2
 800c236:	e7f0      	b.n	800c21a <_svfiprintf_r+0x192>
 800c238:	ab03      	add	r3, sp, #12
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	462a      	mov	r2, r5
 800c23e:	4638      	mov	r0, r7
 800c240:	4b0f      	ldr	r3, [pc, #60]	; (800c280 <_svfiprintf_r+0x1f8>)
 800c242:	a904      	add	r1, sp, #16
 800c244:	f3af 8000 	nop.w
 800c248:	1c42      	adds	r2, r0, #1
 800c24a:	4606      	mov	r6, r0
 800c24c:	d1d6      	bne.n	800c1fc <_svfiprintf_r+0x174>
 800c24e:	89ab      	ldrh	r3, [r5, #12]
 800c250:	065b      	lsls	r3, r3, #25
 800c252:	f53f af2d 	bmi.w	800c0b0 <_svfiprintf_r+0x28>
 800c256:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c258:	b01d      	add	sp, #116	; 0x74
 800c25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25e:	ab03      	add	r3, sp, #12
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	462a      	mov	r2, r5
 800c264:	4638      	mov	r0, r7
 800c266:	4b06      	ldr	r3, [pc, #24]	; (800c280 <_svfiprintf_r+0x1f8>)
 800c268:	a904      	add	r1, sp, #16
 800c26a:	f000 f87d 	bl	800c368 <_printf_i>
 800c26e:	e7eb      	b.n	800c248 <_svfiprintf_r+0x1c0>
 800c270:	0800d4f3 	.word	0x0800d4f3
 800c274:	0800d4f9 	.word	0x0800d4f9
 800c278:	0800d4fd 	.word	0x0800d4fd
 800c27c:	00000000 	.word	0x00000000
 800c280:	0800bfd5 	.word	0x0800bfd5

0800c284 <_printf_common>:
 800c284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c288:	4616      	mov	r6, r2
 800c28a:	4699      	mov	r9, r3
 800c28c:	688a      	ldr	r2, [r1, #8]
 800c28e:	690b      	ldr	r3, [r1, #16]
 800c290:	4607      	mov	r7, r0
 800c292:	4293      	cmp	r3, r2
 800c294:	bfb8      	it	lt
 800c296:	4613      	movlt	r3, r2
 800c298:	6033      	str	r3, [r6, #0]
 800c29a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c29e:	460c      	mov	r4, r1
 800c2a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2a4:	b10a      	cbz	r2, 800c2aa <_printf_common+0x26>
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	6033      	str	r3, [r6, #0]
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	0699      	lsls	r1, r3, #26
 800c2ae:	bf42      	ittt	mi
 800c2b0:	6833      	ldrmi	r3, [r6, #0]
 800c2b2:	3302      	addmi	r3, #2
 800c2b4:	6033      	strmi	r3, [r6, #0]
 800c2b6:	6825      	ldr	r5, [r4, #0]
 800c2b8:	f015 0506 	ands.w	r5, r5, #6
 800c2bc:	d106      	bne.n	800c2cc <_printf_common+0x48>
 800c2be:	f104 0a19 	add.w	sl, r4, #25
 800c2c2:	68e3      	ldr	r3, [r4, #12]
 800c2c4:	6832      	ldr	r2, [r6, #0]
 800c2c6:	1a9b      	subs	r3, r3, r2
 800c2c8:	42ab      	cmp	r3, r5
 800c2ca:	dc2b      	bgt.n	800c324 <_printf_common+0xa0>
 800c2cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2d0:	1e13      	subs	r3, r2, #0
 800c2d2:	6822      	ldr	r2, [r4, #0]
 800c2d4:	bf18      	it	ne
 800c2d6:	2301      	movne	r3, #1
 800c2d8:	0692      	lsls	r2, r2, #26
 800c2da:	d430      	bmi.n	800c33e <_printf_common+0xba>
 800c2dc:	4649      	mov	r1, r9
 800c2de:	4638      	mov	r0, r7
 800c2e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2e4:	47c0      	blx	r8
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	d023      	beq.n	800c332 <_printf_common+0xae>
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	6922      	ldr	r2, [r4, #16]
 800c2ee:	f003 0306 	and.w	r3, r3, #6
 800c2f2:	2b04      	cmp	r3, #4
 800c2f4:	bf14      	ite	ne
 800c2f6:	2500      	movne	r5, #0
 800c2f8:	6833      	ldreq	r3, [r6, #0]
 800c2fa:	f04f 0600 	mov.w	r6, #0
 800c2fe:	bf08      	it	eq
 800c300:	68e5      	ldreq	r5, [r4, #12]
 800c302:	f104 041a 	add.w	r4, r4, #26
 800c306:	bf08      	it	eq
 800c308:	1aed      	subeq	r5, r5, r3
 800c30a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c30e:	bf08      	it	eq
 800c310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c314:	4293      	cmp	r3, r2
 800c316:	bfc4      	itt	gt
 800c318:	1a9b      	subgt	r3, r3, r2
 800c31a:	18ed      	addgt	r5, r5, r3
 800c31c:	42b5      	cmp	r5, r6
 800c31e:	d11a      	bne.n	800c356 <_printf_common+0xd2>
 800c320:	2000      	movs	r0, #0
 800c322:	e008      	b.n	800c336 <_printf_common+0xb2>
 800c324:	2301      	movs	r3, #1
 800c326:	4652      	mov	r2, sl
 800c328:	4649      	mov	r1, r9
 800c32a:	4638      	mov	r0, r7
 800c32c:	47c0      	blx	r8
 800c32e:	3001      	adds	r0, #1
 800c330:	d103      	bne.n	800c33a <_printf_common+0xb6>
 800c332:	f04f 30ff 	mov.w	r0, #4294967295
 800c336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33a:	3501      	adds	r5, #1
 800c33c:	e7c1      	b.n	800c2c2 <_printf_common+0x3e>
 800c33e:	2030      	movs	r0, #48	; 0x30
 800c340:	18e1      	adds	r1, r4, r3
 800c342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c34c:	4422      	add	r2, r4
 800c34e:	3302      	adds	r3, #2
 800c350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c354:	e7c2      	b.n	800c2dc <_printf_common+0x58>
 800c356:	2301      	movs	r3, #1
 800c358:	4622      	mov	r2, r4
 800c35a:	4649      	mov	r1, r9
 800c35c:	4638      	mov	r0, r7
 800c35e:	47c0      	blx	r8
 800c360:	3001      	adds	r0, #1
 800c362:	d0e6      	beq.n	800c332 <_printf_common+0xae>
 800c364:	3601      	adds	r6, #1
 800c366:	e7d9      	b.n	800c31c <_printf_common+0x98>

0800c368 <_printf_i>:
 800c368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c36c:	7e0f      	ldrb	r7, [r1, #24]
 800c36e:	4691      	mov	r9, r2
 800c370:	2f78      	cmp	r7, #120	; 0x78
 800c372:	4680      	mov	r8, r0
 800c374:	460c      	mov	r4, r1
 800c376:	469a      	mov	sl, r3
 800c378:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c37a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c37e:	d807      	bhi.n	800c390 <_printf_i+0x28>
 800c380:	2f62      	cmp	r7, #98	; 0x62
 800c382:	d80a      	bhi.n	800c39a <_printf_i+0x32>
 800c384:	2f00      	cmp	r7, #0
 800c386:	f000 80d5 	beq.w	800c534 <_printf_i+0x1cc>
 800c38a:	2f58      	cmp	r7, #88	; 0x58
 800c38c:	f000 80c1 	beq.w	800c512 <_printf_i+0x1aa>
 800c390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c398:	e03a      	b.n	800c410 <_printf_i+0xa8>
 800c39a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c39e:	2b15      	cmp	r3, #21
 800c3a0:	d8f6      	bhi.n	800c390 <_printf_i+0x28>
 800c3a2:	a101      	add	r1, pc, #4	; (adr r1, 800c3a8 <_printf_i+0x40>)
 800c3a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3a8:	0800c401 	.word	0x0800c401
 800c3ac:	0800c415 	.word	0x0800c415
 800c3b0:	0800c391 	.word	0x0800c391
 800c3b4:	0800c391 	.word	0x0800c391
 800c3b8:	0800c391 	.word	0x0800c391
 800c3bc:	0800c391 	.word	0x0800c391
 800c3c0:	0800c415 	.word	0x0800c415
 800c3c4:	0800c391 	.word	0x0800c391
 800c3c8:	0800c391 	.word	0x0800c391
 800c3cc:	0800c391 	.word	0x0800c391
 800c3d0:	0800c391 	.word	0x0800c391
 800c3d4:	0800c51b 	.word	0x0800c51b
 800c3d8:	0800c441 	.word	0x0800c441
 800c3dc:	0800c4d5 	.word	0x0800c4d5
 800c3e0:	0800c391 	.word	0x0800c391
 800c3e4:	0800c391 	.word	0x0800c391
 800c3e8:	0800c53d 	.word	0x0800c53d
 800c3ec:	0800c391 	.word	0x0800c391
 800c3f0:	0800c441 	.word	0x0800c441
 800c3f4:	0800c391 	.word	0x0800c391
 800c3f8:	0800c391 	.word	0x0800c391
 800c3fc:	0800c4dd 	.word	0x0800c4dd
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	1d1a      	adds	r2, r3, #4
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	602a      	str	r2, [r5, #0]
 800c408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c40c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c410:	2301      	movs	r3, #1
 800c412:	e0a0      	b.n	800c556 <_printf_i+0x1ee>
 800c414:	6820      	ldr	r0, [r4, #0]
 800c416:	682b      	ldr	r3, [r5, #0]
 800c418:	0607      	lsls	r7, r0, #24
 800c41a:	f103 0104 	add.w	r1, r3, #4
 800c41e:	6029      	str	r1, [r5, #0]
 800c420:	d501      	bpl.n	800c426 <_printf_i+0xbe>
 800c422:	681e      	ldr	r6, [r3, #0]
 800c424:	e003      	b.n	800c42e <_printf_i+0xc6>
 800c426:	0646      	lsls	r6, r0, #25
 800c428:	d5fb      	bpl.n	800c422 <_printf_i+0xba>
 800c42a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c42e:	2e00      	cmp	r6, #0
 800c430:	da03      	bge.n	800c43a <_printf_i+0xd2>
 800c432:	232d      	movs	r3, #45	; 0x2d
 800c434:	4276      	negs	r6, r6
 800c436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c43a:	230a      	movs	r3, #10
 800c43c:	4859      	ldr	r0, [pc, #356]	; (800c5a4 <_printf_i+0x23c>)
 800c43e:	e012      	b.n	800c466 <_printf_i+0xfe>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	6820      	ldr	r0, [r4, #0]
 800c444:	1d19      	adds	r1, r3, #4
 800c446:	6029      	str	r1, [r5, #0]
 800c448:	0605      	lsls	r5, r0, #24
 800c44a:	d501      	bpl.n	800c450 <_printf_i+0xe8>
 800c44c:	681e      	ldr	r6, [r3, #0]
 800c44e:	e002      	b.n	800c456 <_printf_i+0xee>
 800c450:	0641      	lsls	r1, r0, #25
 800c452:	d5fb      	bpl.n	800c44c <_printf_i+0xe4>
 800c454:	881e      	ldrh	r6, [r3, #0]
 800c456:	2f6f      	cmp	r7, #111	; 0x6f
 800c458:	bf0c      	ite	eq
 800c45a:	2308      	moveq	r3, #8
 800c45c:	230a      	movne	r3, #10
 800c45e:	4851      	ldr	r0, [pc, #324]	; (800c5a4 <_printf_i+0x23c>)
 800c460:	2100      	movs	r1, #0
 800c462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c466:	6865      	ldr	r5, [r4, #4]
 800c468:	2d00      	cmp	r5, #0
 800c46a:	bfa8      	it	ge
 800c46c:	6821      	ldrge	r1, [r4, #0]
 800c46e:	60a5      	str	r5, [r4, #8]
 800c470:	bfa4      	itt	ge
 800c472:	f021 0104 	bicge.w	r1, r1, #4
 800c476:	6021      	strge	r1, [r4, #0]
 800c478:	b90e      	cbnz	r6, 800c47e <_printf_i+0x116>
 800c47a:	2d00      	cmp	r5, #0
 800c47c:	d04b      	beq.n	800c516 <_printf_i+0x1ae>
 800c47e:	4615      	mov	r5, r2
 800c480:	fbb6 f1f3 	udiv	r1, r6, r3
 800c484:	fb03 6711 	mls	r7, r3, r1, r6
 800c488:	5dc7      	ldrb	r7, [r0, r7]
 800c48a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c48e:	4637      	mov	r7, r6
 800c490:	42bb      	cmp	r3, r7
 800c492:	460e      	mov	r6, r1
 800c494:	d9f4      	bls.n	800c480 <_printf_i+0x118>
 800c496:	2b08      	cmp	r3, #8
 800c498:	d10b      	bne.n	800c4b2 <_printf_i+0x14a>
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	07de      	lsls	r6, r3, #31
 800c49e:	d508      	bpl.n	800c4b2 <_printf_i+0x14a>
 800c4a0:	6923      	ldr	r3, [r4, #16]
 800c4a2:	6861      	ldr	r1, [r4, #4]
 800c4a4:	4299      	cmp	r1, r3
 800c4a6:	bfde      	ittt	le
 800c4a8:	2330      	movle	r3, #48	; 0x30
 800c4aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4b2:	1b52      	subs	r2, r2, r5
 800c4b4:	6122      	str	r2, [r4, #16]
 800c4b6:	464b      	mov	r3, r9
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	4640      	mov	r0, r8
 800c4bc:	f8cd a000 	str.w	sl, [sp]
 800c4c0:	aa03      	add	r2, sp, #12
 800c4c2:	f7ff fedf 	bl	800c284 <_printf_common>
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	d14a      	bne.n	800c560 <_printf_i+0x1f8>
 800c4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ce:	b004      	add	sp, #16
 800c4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d4:	6823      	ldr	r3, [r4, #0]
 800c4d6:	f043 0320 	orr.w	r3, r3, #32
 800c4da:	6023      	str	r3, [r4, #0]
 800c4dc:	2778      	movs	r7, #120	; 0x78
 800c4de:	4832      	ldr	r0, [pc, #200]	; (800c5a8 <_printf_i+0x240>)
 800c4e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	6829      	ldr	r1, [r5, #0]
 800c4e8:	061f      	lsls	r7, r3, #24
 800c4ea:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4ee:	d402      	bmi.n	800c4f6 <_printf_i+0x18e>
 800c4f0:	065f      	lsls	r7, r3, #25
 800c4f2:	bf48      	it	mi
 800c4f4:	b2b6      	uxthmi	r6, r6
 800c4f6:	07df      	lsls	r7, r3, #31
 800c4f8:	bf48      	it	mi
 800c4fa:	f043 0320 	orrmi.w	r3, r3, #32
 800c4fe:	6029      	str	r1, [r5, #0]
 800c500:	bf48      	it	mi
 800c502:	6023      	strmi	r3, [r4, #0]
 800c504:	b91e      	cbnz	r6, 800c50e <_printf_i+0x1a6>
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	f023 0320 	bic.w	r3, r3, #32
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	2310      	movs	r3, #16
 800c510:	e7a6      	b.n	800c460 <_printf_i+0xf8>
 800c512:	4824      	ldr	r0, [pc, #144]	; (800c5a4 <_printf_i+0x23c>)
 800c514:	e7e4      	b.n	800c4e0 <_printf_i+0x178>
 800c516:	4615      	mov	r5, r2
 800c518:	e7bd      	b.n	800c496 <_printf_i+0x12e>
 800c51a:	682b      	ldr	r3, [r5, #0]
 800c51c:	6826      	ldr	r6, [r4, #0]
 800c51e:	1d18      	adds	r0, r3, #4
 800c520:	6961      	ldr	r1, [r4, #20]
 800c522:	6028      	str	r0, [r5, #0]
 800c524:	0635      	lsls	r5, r6, #24
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	d501      	bpl.n	800c52e <_printf_i+0x1c6>
 800c52a:	6019      	str	r1, [r3, #0]
 800c52c:	e002      	b.n	800c534 <_printf_i+0x1cc>
 800c52e:	0670      	lsls	r0, r6, #25
 800c530:	d5fb      	bpl.n	800c52a <_printf_i+0x1c2>
 800c532:	8019      	strh	r1, [r3, #0]
 800c534:	2300      	movs	r3, #0
 800c536:	4615      	mov	r5, r2
 800c538:	6123      	str	r3, [r4, #16]
 800c53a:	e7bc      	b.n	800c4b6 <_printf_i+0x14e>
 800c53c:	682b      	ldr	r3, [r5, #0]
 800c53e:	2100      	movs	r1, #0
 800c540:	1d1a      	adds	r2, r3, #4
 800c542:	602a      	str	r2, [r5, #0]
 800c544:	681d      	ldr	r5, [r3, #0]
 800c546:	6862      	ldr	r2, [r4, #4]
 800c548:	4628      	mov	r0, r5
 800c54a:	f000 f849 	bl	800c5e0 <memchr>
 800c54e:	b108      	cbz	r0, 800c554 <_printf_i+0x1ec>
 800c550:	1b40      	subs	r0, r0, r5
 800c552:	6060      	str	r0, [r4, #4]
 800c554:	6863      	ldr	r3, [r4, #4]
 800c556:	6123      	str	r3, [r4, #16]
 800c558:	2300      	movs	r3, #0
 800c55a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c55e:	e7aa      	b.n	800c4b6 <_printf_i+0x14e>
 800c560:	462a      	mov	r2, r5
 800c562:	4649      	mov	r1, r9
 800c564:	4640      	mov	r0, r8
 800c566:	6923      	ldr	r3, [r4, #16]
 800c568:	47d0      	blx	sl
 800c56a:	3001      	adds	r0, #1
 800c56c:	d0ad      	beq.n	800c4ca <_printf_i+0x162>
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	079b      	lsls	r3, r3, #30
 800c572:	d413      	bmi.n	800c59c <_printf_i+0x234>
 800c574:	68e0      	ldr	r0, [r4, #12]
 800c576:	9b03      	ldr	r3, [sp, #12]
 800c578:	4298      	cmp	r0, r3
 800c57a:	bfb8      	it	lt
 800c57c:	4618      	movlt	r0, r3
 800c57e:	e7a6      	b.n	800c4ce <_printf_i+0x166>
 800c580:	2301      	movs	r3, #1
 800c582:	4632      	mov	r2, r6
 800c584:	4649      	mov	r1, r9
 800c586:	4640      	mov	r0, r8
 800c588:	47d0      	blx	sl
 800c58a:	3001      	adds	r0, #1
 800c58c:	d09d      	beq.n	800c4ca <_printf_i+0x162>
 800c58e:	3501      	adds	r5, #1
 800c590:	68e3      	ldr	r3, [r4, #12]
 800c592:	9903      	ldr	r1, [sp, #12]
 800c594:	1a5b      	subs	r3, r3, r1
 800c596:	42ab      	cmp	r3, r5
 800c598:	dcf2      	bgt.n	800c580 <_printf_i+0x218>
 800c59a:	e7eb      	b.n	800c574 <_printf_i+0x20c>
 800c59c:	2500      	movs	r5, #0
 800c59e:	f104 0619 	add.w	r6, r4, #25
 800c5a2:	e7f5      	b.n	800c590 <_printf_i+0x228>
 800c5a4:	0800d504 	.word	0x0800d504
 800c5a8:	0800d515 	.word	0x0800d515

0800c5ac <memmove>:
 800c5ac:	4288      	cmp	r0, r1
 800c5ae:	b510      	push	{r4, lr}
 800c5b0:	eb01 0402 	add.w	r4, r1, r2
 800c5b4:	d902      	bls.n	800c5bc <memmove+0x10>
 800c5b6:	4284      	cmp	r4, r0
 800c5b8:	4623      	mov	r3, r4
 800c5ba:	d807      	bhi.n	800c5cc <memmove+0x20>
 800c5bc:	1e43      	subs	r3, r0, #1
 800c5be:	42a1      	cmp	r1, r4
 800c5c0:	d008      	beq.n	800c5d4 <memmove+0x28>
 800c5c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5ca:	e7f8      	b.n	800c5be <memmove+0x12>
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	4402      	add	r2, r0
 800c5d0:	428a      	cmp	r2, r1
 800c5d2:	d100      	bne.n	800c5d6 <memmove+0x2a>
 800c5d4:	bd10      	pop	{r4, pc}
 800c5d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5de:	e7f7      	b.n	800c5d0 <memmove+0x24>

0800c5e0 <memchr>:
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	b510      	push	{r4, lr}
 800c5e4:	b2c9      	uxtb	r1, r1
 800c5e6:	4402      	add	r2, r0
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	d101      	bne.n	800c5f2 <memchr+0x12>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	e003      	b.n	800c5fa <memchr+0x1a>
 800c5f2:	7804      	ldrb	r4, [r0, #0]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	428c      	cmp	r4, r1
 800c5f8:	d1f6      	bne.n	800c5e8 <memchr+0x8>
 800c5fa:	bd10      	pop	{r4, pc}

0800c5fc <memcpy>:
 800c5fc:	440a      	add	r2, r1
 800c5fe:	4291      	cmp	r1, r2
 800c600:	f100 33ff 	add.w	r3, r0, #4294967295
 800c604:	d100      	bne.n	800c608 <memcpy+0xc>
 800c606:	4770      	bx	lr
 800c608:	b510      	push	{r4, lr}
 800c60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c60e:	4291      	cmp	r1, r2
 800c610:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c614:	d1f9      	bne.n	800c60a <memcpy+0xe>
 800c616:	bd10      	pop	{r4, pc}

0800c618 <_realloc_r>:
 800c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c61c:	4680      	mov	r8, r0
 800c61e:	4614      	mov	r4, r2
 800c620:	460e      	mov	r6, r1
 800c622:	b921      	cbnz	r1, 800c62e <_realloc_r+0x16>
 800c624:	4611      	mov	r1, r2
 800c626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c62a:	f7ff bb41 	b.w	800bcb0 <_malloc_r>
 800c62e:	b92a      	cbnz	r2, 800c63c <_realloc_r+0x24>
 800c630:	f7ff fc88 	bl	800bf44 <_free_r>
 800c634:	4625      	mov	r5, r4
 800c636:	4628      	mov	r0, r5
 800c638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c63c:	f000 f81b 	bl	800c676 <_malloc_usable_size_r>
 800c640:	4284      	cmp	r4, r0
 800c642:	4607      	mov	r7, r0
 800c644:	d802      	bhi.n	800c64c <_realloc_r+0x34>
 800c646:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c64a:	d812      	bhi.n	800c672 <_realloc_r+0x5a>
 800c64c:	4621      	mov	r1, r4
 800c64e:	4640      	mov	r0, r8
 800c650:	f7ff fb2e 	bl	800bcb0 <_malloc_r>
 800c654:	4605      	mov	r5, r0
 800c656:	2800      	cmp	r0, #0
 800c658:	d0ed      	beq.n	800c636 <_realloc_r+0x1e>
 800c65a:	42bc      	cmp	r4, r7
 800c65c:	4622      	mov	r2, r4
 800c65e:	4631      	mov	r1, r6
 800c660:	bf28      	it	cs
 800c662:	463a      	movcs	r2, r7
 800c664:	f7ff ffca 	bl	800c5fc <memcpy>
 800c668:	4631      	mov	r1, r6
 800c66a:	4640      	mov	r0, r8
 800c66c:	f7ff fc6a 	bl	800bf44 <_free_r>
 800c670:	e7e1      	b.n	800c636 <_realloc_r+0x1e>
 800c672:	4635      	mov	r5, r6
 800c674:	e7df      	b.n	800c636 <_realloc_r+0x1e>

0800c676 <_malloc_usable_size_r>:
 800c676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c67a:	1f18      	subs	r0, r3, #4
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	bfbc      	itt	lt
 800c680:	580b      	ldrlt	r3, [r1, r0]
 800c682:	18c0      	addlt	r0, r0, r3
 800c684:	4770      	bx	lr
	...

0800c688 <_init>:
 800c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68a:	bf00      	nop
 800c68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68e:	bc08      	pop	{r3}
 800c690:	469e      	mov	lr, r3
 800c692:	4770      	bx	lr

0800c694 <_fini>:
 800c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c696:	bf00      	nop
 800c698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c69a:	bc08      	pop	{r3}
 800c69c:	469e      	mov	lr, r3
 800c69e:	4770      	bx	lr
