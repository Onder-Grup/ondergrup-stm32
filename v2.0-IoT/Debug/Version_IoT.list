
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc04  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f8c  0800cde8  0800cde8  0001cde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd74  0800dd74  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd74  0800dd74  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd74  0800dd74  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd74  0800dd74  0001dd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd78  0800dd78  0001dd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800dd7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000010c  0800de88  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800de88  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013acf  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ce  00000000  00000000  00033c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  00036618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e07  00000000  00000000  00037808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b304  00000000  00000000  0003860f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c4b  00000000  00000000  00053913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ed58  00000000  00000000  0006c55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051c0  00000000  00000000  0010b2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00110478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cdd0 	.word	0x0800cdd0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800cdd0 	.word	0x0800cdd0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b09f      	sub	sp, #124	; 0x7c
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4948      	ldr	r1, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000242:	4849      	ldr	r0, [pc, #292]	; (8000368 <ESP8266_Init+0x134>)
 8000244:	f00c f952 	bl	800c4ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4847      	ldr	r0, [pc, #284]	; (8000368 <ESP8266_Init+0x134>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4944      	ldr	r1, [pc, #272]	; (8000368 <ESP8266_Init+0x134>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00b fb62 	bl	800b920 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 fa92 	bl	8008788 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4941      	ldr	r1, [pc, #260]	; (800036c <ESP8266_Init+0x138>)
 8000266:	4840      	ldr	r0, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000268:	f00c f940 	bl	800c4ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483e      	ldr	r0, [pc, #248]	; (8000368 <ESP8266_Init+0x134>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493b      	ldr	r1, [pc, #236]	; (8000368 <ESP8266_Init+0x134>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00b fb50 	bl	800b920 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 fa80 	bl	8008788 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4939      	ldr	r1, [pc, #228]	; (8000370 <ESP8266_Init+0x13c>)
 800028a:	4837      	ldr	r0, [pc, #220]	; (8000368 <ESP8266_Init+0x134>)
 800028c:	f00c f92e 	bl	800c4ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4835      	ldr	r0, [pc, #212]	; (8000368 <ESP8266_Init+0x134>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4932      	ldr	r1, [pc, #200]	; (8000368 <ESP8266_Init+0x134>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b fb3e 	bl	800b920 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 fa6e 	bl	8008788 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4931      	ldr	r1, [pc, #196]	; (8000374 <ESP8266_Init+0x140>)
 80002ae:	482e      	ldr	r0, [pc, #184]	; (8000368 <ESP8266_Init+0x134>)
 80002b0:	f00c f91c 	bl	800c4ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482c      	ldr	r0, [pc, #176]	; (8000368 <ESP8266_Init+0x134>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4929      	ldr	r1, [pc, #164]	; (8000368 <ESP8266_Init+0x134>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b fb2c 	bl	800b920 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 fa5c 	bl	8008788 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a28      	ldr	r2, [pc, #160]	; (8000378 <ESP8266_Init+0x144>)
 80002d6:	461c      	mov	r4, r3
 80002d8:	4613      	mov	r3, r2
 80002da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002dc:	c407      	stmia	r4!, {r0, r1, r2}
 80002de:	8023      	strh	r3, [r4, #0]
 80002e0:	3402      	adds	r4, #2
 80002e2:	0c1b      	lsrs	r3, r3, #16
 80002e4:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	68b9      	ldr	r1, [r7, #8]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f00c f95f 	bl	800c5b0 <strcat>
	strcat(str, "\",\"");
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff94 	bl	8000224 <strlen>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4413      	add	r3, r2
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <ESP8266_Init+0x148>)
 8000308:	6810      	ldr	r0, [r2, #0]
 800030a:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	4618      	mov	r0, r3
 8000314:	f00c f94c 	bl	800c5b0 <strcat>
	strcat(str, "\"\r\n");
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff81 	bl	8000224 <strlen>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4413      	add	r3, r2
 800032c:	4a14      	ldr	r2, [pc, #80]	; (8000380 <ESP8266_Init+0x14c>)
 800032e:	6810      	ldr	r0, [r2, #0]
 8000330:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	461a      	mov	r2, r3
 8000338:	4912      	ldr	r1, [pc, #72]	; (8000384 <ESP8266_Init+0x150>)
 800033a:	480b      	ldr	r0, [pc, #44]	; (8000368 <ESP8266_Init+0x134>)
 800033c:	f00c f8d6 	bl	800c4ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <ESP8266_Init+0x134>)
 8000342:	f7ff ff6f 	bl	8000224 <strlen>
 8000346:	4603      	mov	r3, r0
 8000348:	b29b      	uxth	r3, r3
 800034a:	461a      	mov	r2, r3
 800034c:	4906      	ldr	r1, [pc, #24]	; (8000368 <ESP8266_Init+0x134>)
 800034e:	68f8      	ldr	r0, [r7, #12]
 8000350:	f00b fae6 	bl	800b920 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000358:	f008 fa16 	bl	8008788 <HAL_Delay>
}
 800035c:	bf00      	nop
 800035e:	377c      	adds	r7, #124	; 0x7c
 8000360:	46bd      	mov	sp, r7
 8000362:	bd90      	pop	{r4, r7, pc}
 8000364:	0800cde8 	.word	0x0800cde8
 8000368:	20000288 	.word	0x20000288
 800036c:	0800cdf8 	.word	0x0800cdf8
 8000370:	0800ce04 	.word	0x0800ce04
 8000374:	0800ce0c 	.word	0x0800ce0c
 8000378:	0800ce1c 	.word	0x0800ce1c
 800037c:	0800ce2c 	.word	0x0800ce2c
 8000380:	0800ce30 	.word	0x0800ce30
 8000384:	0800ce34 	.word	0x0800ce34

08000388 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b0c6      	sub	sp, #280	; 0x118
 800038c:	af02      	add	r7, sp, #8
 800038e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000396:	6018      	str	r0, [r3, #0]
 8000398:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800039c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80003a0:	6019      	str	r1, [r3, #0]
 80003a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003aa:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80003ac:	4a31      	ldr	r2, [pc, #196]	; (8000474 <sendMachineData+0xec>)
 80003ae:	4932      	ldr	r1, [pc, #200]	; (8000478 <sendMachineData+0xf0>)
 80003b0:	4832      	ldr	r0, [pc, #200]	; (800047c <sendMachineData+0xf4>)
 80003b2:	f00c f89b 	bl	800c4ec <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b6:	4831      	ldr	r0, [pc, #196]	; (800047c <sendMachineData+0xf4>)
 80003b8:	f7ff ff34 	bl	8000224 <strlen>
 80003bc:	4603      	mov	r3, r0
 80003be:	b29a      	uxth	r2, r3
 80003c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c8:	492c      	ldr	r1, [pc, #176]	; (800047c <sendMachineData+0xf4>)
 80003ca:	6818      	ldr	r0, [r3, #0]
 80003cc:	f00b faa8 	bl	800b920 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d4:	f008 f9d8 	bl	8008788 <HAL_Delay>

	sprintf(local_txA,
 80003d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003ec:	4924      	ldr	r1, [pc, #144]	; (8000480 <sendMachineData+0xf8>)
 80003ee:	9100      	str	r1, [sp, #0]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	4923      	ldr	r1, [pc, #140]	; (8000484 <sendMachineData+0xfc>)
 80003f6:	f00c f879 	bl	800c4ec <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80003fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff10 	bl	8000224 <strlen>
 8000404:	4603      	mov	r3, r0
 8000406:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000412:	491d      	ldr	r1, [pc, #116]	; (8000488 <sendMachineData+0x100>)
 8000414:	4618      	mov	r0, r3
 8000416:	f00c f869 	bl	800c4ec <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff00 	bl	8000224 <strlen>
 8000424:	4603      	mov	r3, r0
 8000426:	b29a      	uxth	r2, r3
 8000428:	f107 0110 	add.w	r1, r7, #16
 800042c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000430:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000434:	6818      	ldr	r0, [r3, #0]
 8000436:	f00b fa73 	bl	800b920 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800043a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043e:	f008 f9a3 	bl	8008788 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000442:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff feec 	bl	8000224 <strlen>
 800044c:	4603      	mov	r3, r0
 800044e:	b29a      	uxth	r2, r3
 8000450:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000454:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800045c:	6818      	ldr	r0, [r3, #0]
 800045e:	f00b fa5f 	bl	800b920 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000462:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000466:	f008 f98f 	bl	8008788 <HAL_Delay>
}
 800046a:	bf00      	nop
 800046c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	0800ce38 	.word	0x0800ce38
 8000478:	0800ce48 	.word	0x0800ce48
 800047c:	20000288 	.word	0x20000288
 8000480:	0800cec4 	.word	0x0800cec4
 8000484:	0800ce68 	.word	0x0800ce68
 8000488:	0800ced8 	.word	0x0800ced8

0800048c <checkLCDBacklight>:
#include "main.h"
#include "Process.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void checkLCDBacklight() {
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <checkLCDBacklight+0x24>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <checkLCDBacklight+0x28>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	2b3b      	cmp	r3, #59	; 0x3b
 800049c:	d903      	bls.n	80004a6 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f002 fa6a 	bl	8002978 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80004a4:	e002      	b.n	80004ac <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80004a6:	2001      	movs	r0, #1
 80004a8:	f002 fa66 	bl	8002978 <lcd_backlight>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000200 	.word	0x20000200
 80004b4:	2000021c 	.word	0x2000021c

080004b8 <checkBasincSalteri>:

void checkBasincSalteri() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <checkBasincSalteri+0x54>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d102      	bne.n	80004ca <checkBasincSalteri+0x12>
		basincVar=1;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <checkBasincSalteri+0x58>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <checkBasincSalteri+0x54>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d119      	bne.n	8000506 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80004d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <checkBasincSalteri+0x5c>)
 80004d8:	f008 ff26 	bl	8009328 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d10a      	bne.n	80004f8 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <checkBasincSalteri+0x60>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <checkBasincSalteri+0x64>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d90a      	bls.n	8000506 <checkBasincSalteri+0x4e>
				basincVar=1;
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <checkBasincSalteri+0x58>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80004f6:	e006      	b.n	8000506 <checkBasincSalteri+0x4e>
			timer5=millis;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <checkBasincSalteri+0x60>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <checkBasincSalteri+0x64>)
 80004fe:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <checkBasincSalteri+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	2000022b 	.word	0x2000022b
 8000510:	20000227 	.word	0x20000227
 8000514:	40011000 	.word	0x40011000
 8000518:	20000200 	.word	0x20000200
 800051c:	20000218 	.word	0x20000218

08000520 <checkBasGonder>:

void checkBasGonder() {
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <checkBasGonder+0x74>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d10b      	bne.n	8000544 <checkBasGonder+0x24>
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <checkBasGonder+0x78>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d007      	beq.n	8000544 <checkBasGonder+0x24>
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <checkBasGonder+0x7c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d103      	bne.n	8000544 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <checkBasGonder+0x80>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e009      	b.n	8000558 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <checkBasGonder+0x78>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f083 0301 	eor.w	r3, r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	d002      	beq.n	8000558 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <checkBasGonder+0x80>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <checkBasGonder+0x74>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d10b      	bne.n	8000578 <checkBasGonder+0x58>
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <checkBasGonder+0x84>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d007      	beq.n	8000578 <checkBasGonder+0x58>
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <checkBasGonder+0x7c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d103      	bne.n	8000578 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <checkBasGonder+0x88>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8000576:	e009      	b.n	800058c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <checkBasGonder+0x84>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f083 0301 	eor.w	r3, r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <checkBasGonder+0x88>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	20000225 	.word	0x20000225
 8000598:	20000259 	.word	0x20000259
 800059c:	20000233 	.word	0x20000233
 80005a0:	20000260 	.word	0x20000260
 80005a4:	2000025c 	.word	0x2000025c
 80005a8:	20000261 	.word	0x20000261

080005ac <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <checkKapiSecimleri+0x98>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <checkKapiSecimleri+0x9c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <checkKapiSecimleri+0x98>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d10e      	bne.n	80005e4 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80005c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ca:	4820      	ldr	r0, [pc, #128]	; (800064c <checkKapiSecimleri+0xa0>)
 80005cc:	f008 feac 	bl	8009328 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <checkKapiSecimleri+0x9c>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e002      	b.n	80005e4 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <checkKapiSecimleri+0x9c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <checkKapiSecimleri+0x98>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d10e      	bne.n	800060a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4816      	ldr	r0, [pc, #88]	; (800064c <checkKapiSecimleri+0xa0>)
 80005f2:	f008 fe99 	bl	8009328 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d103      	bne.n	8000604 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <checkKapiSecimleri+0x9c>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	e002      	b.n	800060a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <checkKapiSecimleri+0x9c>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <checkKapiSecimleri+0x98>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b03      	cmp	r3, #3
 8000610:	d116      	bne.n	8000640 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8000612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <checkKapiSecimleri+0xa0>)
 8000618:	f008 fe86 	bl	8009328 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d10b      	bne.n	800063a <checkKapiSecimleri+0x8e>
 8000622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000626:	4809      	ldr	r0, [pc, #36]	; (800064c <checkKapiSecimleri+0xa0>)
 8000628:	f008 fe7e 	bl	8009328 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <checkKapiSecimleri+0x9c>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8000638:	e002      	b.n	8000640 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800063a:	4b03      	ldr	r3, [pc, #12]	; (8000648 <checkKapiSecimleri+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000022c 	.word	0x2000022c
 8000648:	20000277 	.word	0x20000277
 800064c:	40010800 	.word	0x40010800

08000650 <checkAktifCalisma>:

void checkAktifCalisma() {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8000654:	4b62      	ldr	r3, [pc, #392]	; (80007e0 <checkAktifCalisma+0x190>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	f041 833e 	bne.w	8001cda <checkAktifCalisma+0x168a>
 800065e:	4b61      	ldr	r3, [pc, #388]	; (80007e4 <checkAktifCalisma+0x194>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	f041 8339 	bne.w	8001cda <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8000668:	4b5f      	ldr	r3, [pc, #380]	; (80007e8 <checkAktifCalisma+0x198>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d11a      	bne.n	80006a6 <checkAktifCalisma+0x56>
 8000670:	4b5e      	ldr	r3, [pc, #376]	; (80007ec <checkAktifCalisma+0x19c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d116      	bne.n	80006a6 <checkAktifCalisma+0x56>
 8000678:	4b5d      	ldr	r3, [pc, #372]	; (80007f0 <checkAktifCalisma+0x1a0>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00a      	beq.n	8000696 <checkAktifCalisma+0x46>
 8000680:	4b5c      	ldr	r3, [pc, #368]	; (80007f4 <checkAktifCalisma+0x1a4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f083 0301 	eor.w	r3, r3, #1
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <checkAktifCalisma+0x46>
 800068e:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <checkAktifCalisma+0x1a8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d007      	beq.n	80006a6 <checkAktifCalisma+0x56>
 8000696:	4b59      	ldr	r3, [pc, #356]	; (80007fc <checkAktifCalisma+0x1ac>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d018      	beq.n	80006d0 <checkAktifCalisma+0x80>
 800069e:	4b58      	ldr	r3, [pc, #352]	; (8000800 <checkAktifCalisma+0x1b0>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d114      	bne.n	80006d0 <checkAktifCalisma+0x80>
 80006a6:	4b57      	ldr	r3, [pc, #348]	; (8000804 <checkAktifCalisma+0x1b4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d010      	beq.n	80006d0 <checkAktifCalisma+0x80>
 80006ae:	4b56      	ldr	r3, [pc, #344]	; (8000808 <checkAktifCalisma+0x1b8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00c      	beq.n	80006d0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006bc:	4853      	ldr	r0, [pc, #332]	; (800080c <checkAktifCalisma+0x1bc>)
 80006be:	f008 fe4a 	bl	8009356 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80006c2:	4b53      	ldr	r3, [pc, #332]	; (8000810 <checkAktifCalisma+0x1c0>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80006c8:	4b52      	ldr	r3, [pc, #328]	; (8000814 <checkAktifCalisma+0x1c4>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	e008      	b.n	80006e2 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d6:	484d      	ldr	r0, [pc, #308]	; (800080c <checkAktifCalisma+0x1bc>)
 80006d8:	f008 fe3d 	bl	8009356 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80006dc:	4b4c      	ldr	r3, [pc, #304]	; (8000810 <checkAktifCalisma+0x1c0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80006e2:	4b40      	ldr	r3, [pc, #256]	; (80007e4 <checkAktifCalisma+0x194>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d160      	bne.n	80007ac <checkAktifCalisma+0x15c>
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <checkAktifCalisma+0x1b4>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d05c      	beq.n	80007ac <checkAktifCalisma+0x15c>
 80006f2:	4b45      	ldr	r3, [pc, #276]	; (8000808 <checkAktifCalisma+0x1b8>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d058      	beq.n	80007ac <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80006fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fe:	4843      	ldr	r0, [pc, #268]	; (800080c <checkAktifCalisma+0x1bc>)
 8000700:	f008 fe12 	bl	8009328 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <checkAktifCalisma+0xc2>
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <checkAktifCalisma+0x1c8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d04c      	beq.n	80007ac <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8000712:	2102      	movs	r1, #2
 8000714:	4841      	ldr	r0, [pc, #260]	; (800081c <checkAktifCalisma+0x1cc>)
 8000716:	f008 fe07 	bl	8009328 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d145      	bne.n	80007ac <checkAktifCalisma+0x15c>
				&& (basincVar)
 8000720:	4b3f      	ldr	r3, [pc, #252]	; (8000820 <checkAktifCalisma+0x1d0>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d041      	beq.n	80007ac <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	4837      	ldr	r0, [pc, #220]	; (800080c <checkAktifCalisma+0x1bc>)
 800072e:	f008 fdfb 	bl	8009328 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	d10e      	bne.n	8000756 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8000738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073c:	4833      	ldr	r0, [pc, #204]	; (800080c <checkAktifCalisma+0x1bc>)
 800073e:	f008 fdf3 	bl	8009328 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b01      	cmp	r3, #1
 8000746:	d106      	bne.n	8000756 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	4834      	ldr	r0, [pc, #208]	; (800081c <checkAktifCalisma+0x1cc>)
 800074c:	f008 fdec 	bl	8009328 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d003      	beq.n	800075e <checkAktifCalisma+0x10e>
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <checkAktifCalisma+0x198>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d026      	beq.n	80007ac <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <checkAktifCalisma+0x1a0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	f083 0301 	eor.w	r3, r3, #1
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d01f      	beq.n	80007ac <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <checkAktifCalisma+0x19c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	f083 0301 	eor.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d018      	beq.n	80007ac <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <checkAktifCalisma+0x1ac>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	f083 0301 	eor.w	r3, r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d011      	beq.n	80007ac <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <checkAktifCalisma+0x1d4>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00a      	beq.n	80007ac <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8000796:	4b24      	ldr	r3, [pc, #144]	; (8000828 <checkAktifCalisma+0x1d8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	f083 0301 	eor.w	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d003      	beq.n	80007ac <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <checkAktifCalisma+0x198>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	e002      	b.n	80007b2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <checkAktifCalisma+0x198>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <checkAktifCalisma+0x198>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d03a      	beq.n	8000830 <checkAktifCalisma+0x1e0>
 80007ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007be:	4817      	ldr	r0, [pc, #92]	; (800081c <checkAktifCalisma+0x1cc>)
 80007c0:	f008 fdb2 	bl	8009328 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d132      	bne.n	8000830 <checkAktifCalisma+0x1e0>
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <checkAktifCalisma+0x1dc>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d02e      	beq.n	8000830 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <checkAktifCalisma+0x1bc>)
 80007da:	f008 fdbc 	bl	8009356 <HAL_GPIO_WritePin>
 80007de:	e02d      	b.n	800083c <checkAktifCalisma+0x1ec>
 80007e0:	20000242 	.word	0x20000242
 80007e4:	20000241 	.word	0x20000241
 80007e8:	20000259 	.word	0x20000259
 80007ec:	2000025a 	.word	0x2000025a
 80007f0:	2000025c 	.word	0x2000025c
 80007f4:	20000254 	.word	0x20000254
 80007f8:	20000237 	.word	0x20000237
 80007fc:	2000025b 	.word	0x2000025b
 8000800:	20000236 	.word	0x20000236
 8000804:	20000276 	.word	0x20000276
 8000808:	20000277 	.word	0x20000277
 800080c:	40010c00 	.word	0x40010c00
 8000810:	20000278 	.word	0x20000278
 8000814:	20000263 	.word	0x20000263
 8000818:	20000260 	.word	0x20000260
 800081c:	40011000 	.word	0x40011000
 8000820:	20000227 	.word	0x20000227
 8000824:	2000025e 	.word	0x2000025e
 8000828:	2000025f 	.word	0x2000025f
 800082c:	20000232 	.word	0x20000232
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000836:	4860      	ldr	r0, [pc, #384]	; (80009b8 <checkAktifCalisma+0x368>)
 8000838:	f008 fd8d 	bl	8009356 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800083c:	4b5f      	ldr	r3, [pc, #380]	; (80009bc <checkAktifCalisma+0x36c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d013      	beq.n	800086c <checkAktifCalisma+0x21c>
 8000844:	4b5e      	ldr	r3, [pc, #376]	; (80009c0 <checkAktifCalisma+0x370>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d007      	beq.n	800085c <checkAktifCalisma+0x20c>
 800084c:	4b5c      	ldr	r3, [pc, #368]	; (80009c0 <checkAktifCalisma+0x370>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d003      	beq.n	800085c <checkAktifCalisma+0x20c>
 8000854:	4b5b      	ldr	r3, [pc, #364]	; (80009c4 <checkAktifCalisma+0x374>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d107      	bne.n	800086c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2104      	movs	r1, #4
 8000860:	4855      	ldr	r0, [pc, #340]	; (80009b8 <checkAktifCalisma+0x368>)
 8000862:	f008 fd78 	bl	8009356 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8000866:	4b58      	ldr	r3, [pc, #352]	; (80009c8 <checkAktifCalisma+0x378>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800086c:	4b56      	ldr	r3, [pc, #344]	; (80009c8 <checkAktifCalisma+0x378>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d02f      	beq.n	80008d4 <checkAktifCalisma+0x284>
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	484f      	ldr	r0, [pc, #316]	; (80009b8 <checkAktifCalisma+0x368>)
 800087a:	f008 fd55 	bl	8009328 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d106      	bne.n	8000892 <checkAktifCalisma+0x242>
 8000884:	4b51      	ldr	r3, [pc, #324]	; (80009cc <checkAktifCalisma+0x37c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	f083 0301 	eor.w	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d106      	bne.n	80008a0 <checkAktifCalisma+0x250>
 8000892:	2102      	movs	r1, #2
 8000894:	484e      	ldr	r0, [pc, #312]	; (80009d0 <checkAktifCalisma+0x380>)
 8000896:	f008 fd47 	bl	8009328 <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d119      	bne.n	80008d4 <checkAktifCalisma+0x284>
 80008a0:	4b4c      	ldr	r3, [pc, #304]	; (80009d4 <checkAktifCalisma+0x384>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d015      	beq.n	80008d4 <checkAktifCalisma+0x284>
 80008a8:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <checkAktifCalisma+0x388>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d011      	beq.n	80008d4 <checkAktifCalisma+0x284>
 80008b0:	4b4a      	ldr	r3, [pc, #296]	; (80009dc <checkAktifCalisma+0x38c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00d      	beq.n	80008d4 <checkAktifCalisma+0x284>
 80008b8:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <checkAktifCalisma+0x390>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	f083 0301 	eor.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d006      	beq.n	80008d4 <checkAktifCalisma+0x284>
			timer2=millis;
 80008c6:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <checkAktifCalisma+0x394>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a47      	ldr	r2, [pc, #284]	; (80009e8 <checkAktifCalisma+0x398>)
 80008cc:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80008ce:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <checkAktifCalisma+0x390>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80008d4:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <checkAktifCalisma+0x394>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b43      	ldr	r3, [pc, #268]	; (80009e8 <checkAktifCalisma+0x398>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	4a43      	ldr	r2, [pc, #268]	; (80009ec <checkAktifCalisma+0x39c>)
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d303      	bcc.n	80008ee <checkAktifCalisma+0x29e>
 80008e6:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <checkAktifCalisma+0x390>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d111      	bne.n	8000912 <checkAktifCalisma+0x2c2>
 80008ee:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <checkAktifCalisma+0x384>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	f083 0301 	eor.w	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10a      	bne.n	8000912 <checkAktifCalisma+0x2c2>
 80008fc:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <checkAktifCalisma+0x388>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	f083 0301 	eor.w	r3, r3, #1
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <checkAktifCalisma+0x2c2>
 800090a:	4b34      	ldr	r3, [pc, #208]	; (80009dc <checkAktifCalisma+0x38c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10a      	bne.n	8000928 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2104      	movs	r1, #4
 8000916:	4828      	ldr	r0, [pc, #160]	; (80009b8 <checkAktifCalisma+0x368>)
 8000918:	f008 fd1d 	bl	8009356 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800091c:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <checkAktifCalisma+0x378>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <checkAktifCalisma+0x390>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8000928:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <checkAktifCalisma+0x3a0>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <checkAktifCalisma+0x3a4>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8000936:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <checkAktifCalisma+0x3a0>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d116      	bne.n	800096c <checkAktifCalisma+0x31c>
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <checkAktifCalisma+0x3a8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d112      	bne.n	800096c <checkAktifCalisma+0x31c>
 8000946:	2101      	movs	r1, #1
 8000948:	4821      	ldr	r0, [pc, #132]	; (80009d0 <checkAktifCalisma+0x380>)
 800094a:	f008 fced 	bl	8009328 <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10b      	bne.n	800096c <checkAktifCalisma+0x31c>
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	4817      	ldr	r0, [pc, #92]	; (80009b8 <checkAktifCalisma+0x368>)
 800095a:	f008 fce5 	bl	8009328 <HAL_GPIO_ReadPin>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <checkAktifCalisma+0x3a4>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	e011      	b.n	8000990 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <checkAktifCalisma+0x3a0>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d10d      	bne.n	8000990 <checkAktifCalisma+0x340>
 8000974:	2101      	movs	r1, #1
 8000976:	4816      	ldr	r0, [pc, #88]	; (80009d0 <checkAktifCalisma+0x380>)
 8000978:	f008 fcd6 	bl	8009328 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d106      	bne.n	8000990 <checkAktifCalisma+0x340>
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <checkAktifCalisma+0x3a8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <checkAktifCalisma+0x3a4>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <checkAktifCalisma+0x3a0>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d134      	bne.n	8000a02 <checkAktifCalisma+0x3b2>
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <checkAktifCalisma+0x3a8>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d130      	bne.n	8000a02 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80009a0:	2101      	movs	r1, #1
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <checkAktifCalisma+0x380>)
 80009a4:	f008 fcc0 	bl	8009328 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d126      	bne.n	80009fc <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <checkAktifCalisma+0x3a4>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e025      	b.n	8000a02 <checkAktifCalisma+0x3b2>
 80009b6:	bf00      	nop
 80009b8:	40010c00 	.word	0x40010c00
 80009bc:	20000259 	.word	0x20000259
 80009c0:	20000233 	.word	0x20000233
 80009c4:	20000237 	.word	0x20000237
 80009c8:	2000025d 	.word	0x2000025d
 80009cc:	20000260 	.word	0x20000260
 80009d0:	40011000 	.word	0x40011000
 80009d4:	20000276 	.word	0x20000276
 80009d8:	20000277 	.word	0x20000277
 80009dc:	20000227 	.word	0x20000227
 80009e0:	20000255 	.word	0x20000255
 80009e4:	20000200 	.word	0x20000200
 80009e8:	2000020c 	.word	0x2000020c
 80009ec:	20000238 	.word	0x20000238
 80009f0:	20000228 	.word	0x20000228
 80009f4:	2000027b 	.word	0x2000027b
 80009f8:	20000225 	.word	0x20000225
			} else {
				cerceveVar=0;
 80009fc:	4b7f      	ldr	r3, [pc, #508]	; (8000bfc <checkAktifCalisma+0x5ac>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8000a02:	4b7f      	ldr	r3, [pc, #508]	; (8000c00 <checkAktifCalisma+0x5b0>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d17c      	bne.n	8000b04 <checkAktifCalisma+0x4b4>
 8000a0a:	4b7e      	ldr	r3, [pc, #504]	; (8000c04 <checkAktifCalisma+0x5b4>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d078      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
 8000a12:	4b7d      	ldr	r3, [pc, #500]	; (8000c08 <checkAktifCalisma+0x5b8>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d074      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	487b      	ldr	r0, [pc, #492]	; (8000c0c <checkAktifCalisma+0x5bc>)
 8000a20:	f008 fc82 	bl	8009328 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <checkAktifCalisma+0x3e2>
 8000a2a:	4b79      	ldr	r3, [pc, #484]	; (8000c10 <checkAktifCalisma+0x5c0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d068      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8000a32:	4b72      	ldr	r3, [pc, #456]	; (8000bfc <checkAktifCalisma+0x5ac>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d064      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
 8000a3a:	4b76      	ldr	r3, [pc, #472]	; (8000c14 <checkAktifCalisma+0x5c4>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	f083 0301 	eor.w	r3, r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d05d      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4873      	ldr	r0, [pc, #460]	; (8000c18 <checkAktifCalisma+0x5c8>)
 8000a4c:	f008 fc6c 	bl	8009328 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <checkAktifCalisma+0x40e>
 8000a56:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <checkAktifCalisma+0x5cc>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d152      	bne.n	8000b04 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8000a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a62:	486a      	ldr	r0, [pc, #424]	; (8000c0c <checkAktifCalisma+0x5bc>)
 8000a64:	f008 fc60 	bl	8009328 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d10e      	bne.n	8000a8c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8000a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a72:	4866      	ldr	r0, [pc, #408]	; (8000c0c <checkAktifCalisma+0x5bc>)
 8000a74:	f008 fc58 	bl	8009328 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d106      	bne.n	8000a8c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	4865      	ldr	r0, [pc, #404]	; (8000c18 <checkAktifCalisma+0x5c8>)
 8000a82:	f008 fc51 	bl	8009328 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d003      	beq.n	8000a94 <checkAktifCalisma+0x444>
 8000a8c:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <checkAktifCalisma+0x5d0>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d037      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8000a94:	4b63      	ldr	r3, [pc, #396]	; (8000c24 <checkAktifCalisma+0x5d4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	f083 0301 	eor.w	r3, r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d030      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8000aa2:	4b61      	ldr	r3, [pc, #388]	; (8000c28 <checkAktifCalisma+0x5d8>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	f083 0301 	eor.w	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d029      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8000ab0:	4b5e      	ldr	r3, [pc, #376]	; (8000c2c <checkAktifCalisma+0x5dc>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	f083 0301 	eor.w	r3, r3, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d022      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8000abe:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <checkAktifCalisma+0x5e0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f083 0301 	eor.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d01b      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8000acc:	4b59      	ldr	r3, [pc, #356]	; (8000c34 <checkAktifCalisma+0x5e4>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	f083 0301 	eor.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d014      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8000ada:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <checkAktifCalisma+0x5e8>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f083 0301 	eor.w	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00d      	beq.n	8000b04 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2102      	movs	r1, #2
 8000aec:	4847      	ldr	r0, [pc, #284]	; (8000c0c <checkAktifCalisma+0x5bc>)
 8000aee:	f008 fc32 	bl	8009356 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8000af2:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <checkAktifCalisma+0x5d0>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8000af8:	4b50      	ldr	r3, [pc, #320]	; (8000c3c <checkAktifCalisma+0x5ec>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8000afe:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <checkAktifCalisma+0x5f0>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8000b04:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <checkAktifCalisma+0x5d0>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d033      	beq.n	8000b74 <checkAktifCalisma+0x524>
 8000b0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b10:	483e      	ldr	r0, [pc, #248]	; (8000c0c <checkAktifCalisma+0x5bc>)
 8000b12:	f008 fc09 	bl	8009328 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d106      	bne.n	8000b2a <checkAktifCalisma+0x4da>
 8000b1c:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <checkAktifCalisma+0x5c0>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f083 0301 	eor.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10a      	bne.n	8000b40 <checkAktifCalisma+0x4f0>
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	483a      	ldr	r0, [pc, #232]	; (8000c18 <checkAktifCalisma+0x5c8>)
 8000b2e:	f008 fbfb 	bl	8009328 <HAL_GPIO_ReadPin>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d11d      	bne.n	8000b74 <checkAktifCalisma+0x524>
 8000b38:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <checkAktifCalisma+0x5cc>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d019      	beq.n	8000b74 <checkAktifCalisma+0x524>
 8000b40:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <checkAktifCalisma+0x5b4>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d015      	beq.n	8000b74 <checkAktifCalisma+0x524>
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <checkAktifCalisma+0x5b8>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d011      	beq.n	8000b74 <checkAktifCalisma+0x524>
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <checkAktifCalisma+0x5ac>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00d      	beq.n	8000b74 <checkAktifCalisma+0x524>
 8000b58:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <checkAktifCalisma+0x5f4>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	f083 0301 	eor.w	r3, r3, #1
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d006      	beq.n	8000b74 <checkAktifCalisma+0x524>
			timer2=millis;
 8000b66:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <checkAktifCalisma+0x5f8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a38      	ldr	r2, [pc, #224]	; (8000c4c <checkAktifCalisma+0x5fc>)
 8000b6c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8000b6e:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <checkAktifCalisma+0x5f4>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8000b74:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <checkAktifCalisma+0x5f8>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <checkAktifCalisma+0x5fc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <checkAktifCalisma+0x600>)
 8000b80:	7812      	ldrb	r2, [r2, #0]
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d303      	bcc.n	8000b8e <checkAktifCalisma+0x53e>
 8000b86:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <checkAktifCalisma+0x5f4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d114      	bne.n	8000bb8 <checkAktifCalisma+0x568>
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <checkAktifCalisma+0x5b4>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	f083 0301 	eor.w	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10d      	bne.n	8000bb8 <checkAktifCalisma+0x568>
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <checkAktifCalisma+0x5b8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f083 0301 	eor.w	r3, r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d106      	bne.n	8000bb8 <checkAktifCalisma+0x568>
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <checkAktifCalisma+0x5ac>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	f083 0301 	eor.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00a      	beq.n	8000bce <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2102      	movs	r1, #2
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <checkAktifCalisma+0x5bc>)
 8000bbe:	f008 fbca 	bl	8009356 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <checkAktifCalisma+0x5d0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <checkAktifCalisma+0x5f4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <checkAktifCalisma+0x5d0>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d040      	beq.n	8000c58 <checkAktifCalisma+0x608>
 8000bd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bda:	480f      	ldr	r0, [pc, #60]	; (8000c18 <checkAktifCalisma+0x5c8>)
 8000bdc:	f008 fba4 	bl	8009328 <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d138      	bne.n	8000c58 <checkAktifCalisma+0x608>
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <checkAktifCalisma+0x604>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d034      	beq.n	8000c58 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <checkAktifCalisma+0x5bc>)
 8000bf4:	f008 fbaf 	bl	8009356 <HAL_GPIO_WritePin>
 8000bf8:	e033      	b.n	8000c62 <checkAktifCalisma+0x612>
 8000bfa:	bf00      	nop
 8000bfc:	2000027b 	.word	0x2000027b
 8000c00:	20000241 	.word	0x20000241
 8000c04:	20000276 	.word	0x20000276
 8000c08:	20000277 	.word	0x20000277
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	20000261 	.word	0x20000261
 8000c14:	20000275 	.word	0x20000275
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	2000022a 	.word	0x2000022a
 8000c20:	2000025c 	.word	0x2000025c
 8000c24:	20000259 	.word	0x20000259
 8000c28:	2000025d 	.word	0x2000025d
 8000c2c:	2000025a 	.word	0x2000025a
 8000c30:	2000025b 	.word	0x2000025b
 8000c34:	2000025e 	.word	0x2000025e
 8000c38:	2000025f 	.word	0x2000025f
 8000c3c:	20000264 	.word	0x20000264
 8000c40:	20000285 	.word	0x20000285
 8000c44:	20000254 	.word	0x20000254
 8000c48:	20000200 	.word	0x20000200
 8000c4c:	2000020c 	.word	0x2000020c
 8000c50:	20000239 	.word	0x20000239
 8000c54:	20000229 	.word	0x20000229
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4836      	ldr	r0, [pc, #216]	; (8000d38 <checkAktifCalisma+0x6e8>)
 8000c5e:	f008 fb7a 	bl	8009356 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8000c62:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <checkAktifCalisma+0x6ec>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8080 	bne.w	8000d6c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8000c6c:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <checkAktifCalisma+0x6f0>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d003      	beq.n	8000c7c <checkAktifCalisma+0x62c>
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <checkAktifCalisma+0x6f0>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d177      	bne.n	8000d6c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8000c7c:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <checkAktifCalisma+0x6f4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d073      	beq.n	8000d6c <checkAktifCalisma+0x71c>
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <checkAktifCalisma+0x6f8>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d06f      	beq.n	8000d6c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8000c8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c90:	4829      	ldr	r0, [pc, #164]	; (8000d38 <checkAktifCalisma+0x6e8>)
 8000c92:	f008 fb49 	bl	8009328 <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d167      	bne.n	8000d6c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8000c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca0:	482a      	ldr	r0, [pc, #168]	; (8000d4c <checkAktifCalisma+0x6fc>)
 8000ca2:	f008 fb41 	bl	8009328 <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <checkAktifCalisma+0x664>
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <checkAktifCalisma+0x700>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d15b      	bne.n	8000d6c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8000cb4:	2140      	movs	r1, #64	; 0x40
 8000cb6:	4825      	ldr	r0, [pc, #148]	; (8000d4c <checkAktifCalisma+0x6fc>)
 8000cb8:	f008 fb36 	bl	8009328 <HAL_GPIO_ReadPin>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d10f      	bne.n	8000ce2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	481c      	ldr	r0, [pc, #112]	; (8000d38 <checkAktifCalisma+0x6e8>)
 8000cc8:	f008 fb2e 	bl	8009328 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d107      	bne.n	8000ce2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8000cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd6:	4818      	ldr	r0, [pc, #96]	; (8000d38 <checkAktifCalisma+0x6e8>)
 8000cd8:	f008 fb26 	bl	8009328 <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d003      	beq.n	8000cea <checkAktifCalisma+0x69a>
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <checkAktifCalisma+0x704>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d040      	beq.n	8000d6c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <checkAktifCalisma+0x708>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	f083 0301 	eor.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d039      	beq.n	8000d6c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <checkAktifCalisma+0x70c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	f083 0301 	eor.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d032      	beq.n	8000d6c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <checkAktifCalisma+0x710>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d02b      	beq.n	8000d6c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <checkAktifCalisma+0x714>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	f083 0301 	eor.w	r3, r3, #1
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d024      	beq.n	8000d6c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <checkAktifCalisma+0x718>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d01d      	beq.n	8000d6c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <checkAktifCalisma+0x704>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	e01c      	b.n	8000d72 <checkAktifCalisma+0x722>
 8000d38:	40010c00 	.word	0x40010c00
 8000d3c:	20000241 	.word	0x20000241
 8000d40:	20000233 	.word	0x20000233
 8000d44:	20000276 	.word	0x20000276
 8000d48:	20000277 	.word	0x20000277
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	20000234 	.word	0x20000234
 8000d54:	2000025a 	.word	0x2000025a
 8000d58:	20000259 	.word	0x20000259
 8000d5c:	2000025d 	.word	0x2000025d
 8000d60:	2000025c 	.word	0x2000025c
 8000d64:	2000025b 	.word	0x2000025b
 8000d68:	2000025f 	.word	0x2000025f
		} else {
			devmotoryukaricalisiyor=0;
 8000d6c:	4b64      	ldr	r3, [pc, #400]	; (8000f00 <checkAktifCalisma+0x8b0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8000d72:	4b63      	ldr	r3, [pc, #396]	; (8000f00 <checkAktifCalisma+0x8b0>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	4861      	ldr	r0, [pc, #388]	; (8000f04 <checkAktifCalisma+0x8b4>)
 8000d80:	f008 fae9 	bl	8009356 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8000d84:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <checkAktifCalisma+0x8b8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8000d8a:	4b5f      	ldr	r3, [pc, #380]	; (8000f08 <checkAktifCalisma+0x8b8>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d025      	beq.n	8000dde <checkAktifCalisma+0x78e>
 8000d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d96:	485d      	ldr	r0, [pc, #372]	; (8000f0c <checkAktifCalisma+0x8bc>)
 8000d98:	f008 fac6 	bl	8009328 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d007      	beq.n	8000db2 <checkAktifCalisma+0x762>
 8000da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da6:	4857      	ldr	r0, [pc, #348]	; (8000f04 <checkAktifCalisma+0x8b4>)
 8000da8:	f008 fabe 	bl	8009328 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d115      	bne.n	8000dde <checkAktifCalisma+0x78e>
 8000db2:	4b57      	ldr	r3, [pc, #348]	; (8000f10 <checkAktifCalisma+0x8c0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d011      	beq.n	8000dde <checkAktifCalisma+0x78e>
 8000dba:	4b56      	ldr	r3, [pc, #344]	; (8000f14 <checkAktifCalisma+0x8c4>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00d      	beq.n	8000dde <checkAktifCalisma+0x78e>
 8000dc2:	4b55      	ldr	r3, [pc, #340]	; (8000f18 <checkAktifCalisma+0x8c8>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	f083 0301 	eor.w	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <checkAktifCalisma+0x78e>
			timer2=millis;
 8000dd0:	4b52      	ldr	r3, [pc, #328]	; (8000f1c <checkAktifCalisma+0x8cc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a52      	ldr	r2, [pc, #328]	; (8000f20 <checkAktifCalisma+0x8d0>)
 8000dd6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8000dd8:	4b4f      	ldr	r3, [pc, #316]	; (8000f18 <checkAktifCalisma+0x8c8>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8000dde:	4b4f      	ldr	r3, [pc, #316]	; (8000f1c <checkAktifCalisma+0x8cc>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <checkAktifCalisma+0x8d0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	4a4e      	ldr	r2, [pc, #312]	; (8000f24 <checkAktifCalisma+0x8d4>)
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d303      	bcc.n	8000df8 <checkAktifCalisma+0x7a8>
 8000df0:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <checkAktifCalisma+0x8c8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10d      	bne.n	8000e14 <checkAktifCalisma+0x7c4>
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <checkAktifCalisma+0x8c0>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	f083 0301 	eor.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d106      	bne.n	8000e14 <checkAktifCalisma+0x7c4>
 8000e06:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <checkAktifCalisma+0x8c4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	f083 0301 	eor.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00a      	beq.n	8000e2a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2120      	movs	r1, #32
 8000e18:	483a      	ldr	r0, [pc, #232]	; (8000f04 <checkAktifCalisma+0x8b4>)
 8000e1a:	f008 fa9c 	bl	8009356 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <checkAktifCalisma+0x8b8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <checkAktifCalisma+0x8c8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <checkAktifCalisma+0x8d8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8088 	bne.w	8000f44 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8000e34:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <checkAktifCalisma+0x8dc>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d003      	beq.n	8000e44 <checkAktifCalisma+0x7f4>
 8000e3c:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <checkAktifCalisma+0x8dc>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d17f      	bne.n	8000f44 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <checkAktifCalisma+0x8c0>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d07b      	beq.n	8000f44 <checkAktifCalisma+0x8f4>
 8000e4c:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <checkAktifCalisma+0x8c4>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d077      	beq.n	8000f44 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	482b      	ldr	r0, [pc, #172]	; (8000f04 <checkAktifCalisma+0x8b4>)
 8000e58:	f008 fa66 	bl	8009328 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d170      	bne.n	8000f44 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8000e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e66:	4827      	ldr	r0, [pc, #156]	; (8000f04 <checkAktifCalisma+0x8b4>)
 8000e68:	f008 fa5e 	bl	8009328 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <checkAktifCalisma+0x82a>
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <checkAktifCalisma+0x8e0>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d164      	bne.n	8000f44 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8000e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7e:	4823      	ldr	r0, [pc, #140]	; (8000f0c <checkAktifCalisma+0x8bc>)
 8000e80:	f008 fa52 	bl	8009328 <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d10f      	bne.n	8000eaa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	481f      	ldr	r0, [pc, #124]	; (8000f0c <checkAktifCalisma+0x8bc>)
 8000e90:	f008 fa4a 	bl	8009328 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d107      	bne.n	8000eaa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8000e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9e:	481b      	ldr	r0, [pc, #108]	; (8000f0c <checkAktifCalisma+0x8bc>)
 8000ea0:	f008 fa42 	bl	8009328 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d003      	beq.n	8000eb2 <checkAktifCalisma+0x862>
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <checkAktifCalisma+0x8e4>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d048      	beq.n	8000f44 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <checkAktifCalisma+0x8e8>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	f083 0301 	eor.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d041      	beq.n	8000f44 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <checkAktifCalisma+0x8ec>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	f083 0301 	eor.w	r3, r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d03a      	beq.n	8000f44 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <checkAktifCalisma+0x8f0>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f083 0301 	eor.w	r3, r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d033      	beq.n	8000f44 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <checkAktifCalisma+0x8b8>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f083 0301 	eor.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d02c      	beq.n	8000f44 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <checkAktifCalisma+0x8b0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f083 0301 	eor.w	r3, r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d025      	beq.n	8000f44 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <checkAktifCalisma+0x8e4>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e024      	b.n	8000f4a <checkAktifCalisma+0x8fa>
 8000f00:	2000025a 	.word	0x2000025a
 8000f04:	40011000 	.word	0x40011000
 8000f08:	2000025e 	.word	0x2000025e
 8000f0c:	40010c00 	.word	0x40010c00
 8000f10:	20000276 	.word	0x20000276
 8000f14:	20000277 	.word	0x20000277
 8000f18:	20000256 	.word	0x20000256
 8000f1c:	20000200 	.word	0x20000200
 8000f20:	2000020c 	.word	0x2000020c
 8000f24:	2000023a 	.word	0x2000023a
 8000f28:	20000241 	.word	0x20000241
 8000f2c:	20000233 	.word	0x20000233
 8000f30:	20000235 	.word	0x20000235
 8000f34:	2000025b 	.word	0x2000025b
 8000f38:	20000259 	.word	0x20000259
 8000f3c:	2000025d 	.word	0x2000025d
 8000f40:	2000025c 	.word	0x2000025c
		} else {
			devmotorasagicalisiyor=0;
 8000f44:	4b96      	ldr	r3, [pc, #600]	; (80011a0 <checkAktifCalisma+0xb50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8000f4a:	4b95      	ldr	r3, [pc, #596]	; (80011a0 <checkAktifCalisma+0xb50>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2110      	movs	r1, #16
 8000f56:	4893      	ldr	r0, [pc, #588]	; (80011a4 <checkAktifCalisma+0xb54>)
 8000f58:	f008 f9fd 	bl	8009356 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8000f5c:	4b92      	ldr	r3, [pc, #584]	; (80011a8 <checkAktifCalisma+0xb58>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8000f62:	4b91      	ldr	r3, [pc, #580]	; (80011a8 <checkAktifCalisma+0xb58>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d024      	beq.n	8000fb4 <checkAktifCalisma+0x964>
 8000f6a:	2140      	movs	r1, #64	; 0x40
 8000f6c:	488d      	ldr	r0, [pc, #564]	; (80011a4 <checkAktifCalisma+0xb54>)
 8000f6e:	f008 f9db 	bl	8009328 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d007      	beq.n	8000f88 <checkAktifCalisma+0x938>
 8000f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7c:	4889      	ldr	r0, [pc, #548]	; (80011a4 <checkAktifCalisma+0xb54>)
 8000f7e:	f008 f9d3 	bl	8009328 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d115      	bne.n	8000fb4 <checkAktifCalisma+0x964>
 8000f88:	4b88      	ldr	r3, [pc, #544]	; (80011ac <checkAktifCalisma+0xb5c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d011      	beq.n	8000fb4 <checkAktifCalisma+0x964>
 8000f90:	4b87      	ldr	r3, [pc, #540]	; (80011b0 <checkAktifCalisma+0xb60>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00d      	beq.n	8000fb4 <checkAktifCalisma+0x964>
 8000f98:	4b86      	ldr	r3, [pc, #536]	; (80011b4 <checkAktifCalisma+0xb64>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f083 0301 	eor.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <checkAktifCalisma+0x964>
			timer2=millis;
 8000fa6:	4b84      	ldr	r3, [pc, #528]	; (80011b8 <checkAktifCalisma+0xb68>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a84      	ldr	r2, [pc, #528]	; (80011bc <checkAktifCalisma+0xb6c>)
 8000fac:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8000fae:	4b81      	ldr	r3, [pc, #516]	; (80011b4 <checkAktifCalisma+0xb64>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8000fb4:	4b80      	ldr	r3, [pc, #512]	; (80011b8 <checkAktifCalisma+0xb68>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b80      	ldr	r3, [pc, #512]	; (80011bc <checkAktifCalisma+0xb6c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	4a80      	ldr	r2, [pc, #512]	; (80011c0 <checkAktifCalisma+0xb70>)
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d303      	bcc.n	8000fce <checkAktifCalisma+0x97e>
 8000fc6:	4b7b      	ldr	r3, [pc, #492]	; (80011b4 <checkAktifCalisma+0xb64>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10d      	bne.n	8000fea <checkAktifCalisma+0x99a>
 8000fce:	4b77      	ldr	r3, [pc, #476]	; (80011ac <checkAktifCalisma+0xb5c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d106      	bne.n	8000fea <checkAktifCalisma+0x99a>
 8000fdc:	4b74      	ldr	r3, [pc, #464]	; (80011b0 <checkAktifCalisma+0xb60>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00a      	beq.n	8001000 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	486d      	ldr	r0, [pc, #436]	; (80011a4 <checkAktifCalisma+0xb54>)
 8000ff0:	f008 f9b1 	bl	8009356 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8000ff4:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <checkAktifCalisma+0xb58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8000ffa:	4b6e      	ldr	r3, [pc, #440]	; (80011b4 <checkAktifCalisma+0xb64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8001000:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001004:	486f      	ldr	r0, [pc, #444]	; (80011c4 <checkAktifCalisma+0xb74>)
 8001006:	f008 f98f 	bl	8009328 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d120      	bne.n	8001052 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8001010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001014:	486b      	ldr	r0, [pc, #428]	; (80011c4 <checkAktifCalisma+0xb74>)
 8001016:	f008 f987 	bl	8009328 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d118      	bne.n	8001052 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8001020:	2104      	movs	r1, #4
 8001022:	4868      	ldr	r0, [pc, #416]	; (80011c4 <checkAktifCalisma+0xb74>)
 8001024:	f008 f980 	bl	8009328 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d111      	bne.n	8001052 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800102e:	2102      	movs	r1, #2
 8001030:	4864      	ldr	r0, [pc, #400]	; (80011c4 <checkAktifCalisma+0xb74>)
 8001032:	f008 f979 	bl	8009328 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10a      	bne.n	8001052 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800103c:	2101      	movs	r1, #1
 800103e:	4861      	ldr	r0, [pc, #388]	; (80011c4 <checkAktifCalisma+0xb74>)
 8001040:	f008 f972 	bl	8009328 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d103      	bne.n	8001052 <checkAktifCalisma+0xa02>
			makineStop=1;
 800104a:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <checkAktifCalisma+0xb78>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e002      	b.n	8001058 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8001052:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <checkAktifCalisma+0xb78>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8001058:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <checkAktifCalisma+0xb7c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d144      	bne.n	80010ea <checkAktifCalisma+0xa9a>
 8001060:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <checkAktifCalisma+0xb80>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d003      	beq.n	8001070 <checkAktifCalisma+0xa20>
 8001068:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <checkAktifCalisma+0xb80>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d13c      	bne.n	80010ea <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	484c      	ldr	r0, [pc, #304]	; (80011a4 <checkAktifCalisma+0xb54>)
 8001074:	f008 f958 	bl	8009328 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <checkAktifCalisma+0xa36>
 800107e:	4b55      	ldr	r3, [pc, #340]	; (80011d4 <checkAktifCalisma+0xb84>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <checkAktifCalisma+0xa4e>
 8001086:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108a:	484e      	ldr	r0, [pc, #312]	; (80011c4 <checkAktifCalisma+0xb74>)
 800108c:	f008 f94c 	bl	8009328 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d129      	bne.n	80010ea <checkAktifCalisma+0xa9a>
 8001096:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <checkAktifCalisma+0xb84>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d125      	bne.n	80010ea <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800109e:	2104      	movs	r1, #4
 80010a0:	4840      	ldr	r0, [pc, #256]	; (80011a4 <checkAktifCalisma+0xb54>)
 80010a2:	f008 f941 	bl	8009328 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d003      	beq.n	80010b4 <checkAktifCalisma+0xa64>
 80010ac:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <checkAktifCalisma+0xb88>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d11a      	bne.n	80010ea <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80010b4:	2102      	movs	r1, #2
 80010b6:	483b      	ldr	r0, [pc, #236]	; (80011a4 <checkAktifCalisma+0xb54>)
 80010b8:	f008 f936 	bl	8009328 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d113      	bne.n	80010ea <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80010c2:	4b46      	ldr	r3, [pc, #280]	; (80011dc <checkAktifCalisma+0xb8c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f083 0301 	eor.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00c      	beq.n	80010ea <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80010d0:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <checkAktifCalisma+0xb78>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <checkAktifCalisma+0xb90>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80010de:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <checkAktifCalisma+0xb68>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a40      	ldr	r2, [pc, #256]	; (80011e4 <checkAktifCalisma+0xb94>)
 80010e4:	6013      	str	r3, [r2, #0]
			bekle();
 80010e6:	f006 fd0f 	bl	8007b08 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <checkAktifCalisma+0xb68>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <checkAktifCalisma+0xb94>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	4a3c      	ldr	r2, [pc, #240]	; (80011e8 <checkAktifCalisma+0xb98>)
 80010f6:	7812      	ldrb	r2, [r2, #0]
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d211      	bcs.n	8001120 <checkAktifCalisma+0xad0>
 80010fc:	2104      	movs	r1, #4
 80010fe:	4829      	ldr	r0, [pc, #164]	; (80011a4 <checkAktifCalisma+0xb54>)
 8001100:	f008 f912 	bl	8009328 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <checkAktifCalisma+0xad0>
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <checkAktifCalisma+0xb88>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <checkAktifCalisma+0xad0>
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <checkAktifCalisma+0xb78>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	f083 0301 	eor.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <checkAktifCalisma+0xb90>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <checkAktifCalisma+0xb7c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d160      	bne.n	80011f0 <checkAktifCalisma+0xba0>
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <checkAktifCalisma+0xb80>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d003      	beq.n	800113e <checkAktifCalisma+0xaee>
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <checkAktifCalisma+0xb80>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d158      	bne.n	80011f0 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800113e:	2104      	movs	r1, #4
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <checkAktifCalisma+0xb54>)
 8001142:	f008 f8f1 	bl	8009328 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b01      	cmp	r3, #1
 800114a:	d003      	beq.n	8001154 <checkAktifCalisma+0xb04>
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <checkAktifCalisma+0xb88>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d14d      	bne.n	80011f0 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8001154:	2102      	movs	r1, #2
 8001156:	4813      	ldr	r0, [pc, #76]	; (80011a4 <checkAktifCalisma+0xb54>)
 8001158:	f008 f8e6 	bl	8009328 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d146      	bne.n	80011f0 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	480f      	ldr	r0, [pc, #60]	; (80011a4 <checkAktifCalisma+0xb54>)
 8001166:	f008 f8df 	bl	8009328 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <checkAktifCalisma+0xb28>
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <checkAktifCalisma+0xb84>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <checkAktifCalisma+0xb40>
 8001178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <checkAktifCalisma+0xb74>)
 800117e:	f008 f8d3 	bl	8009328 <HAL_GPIO_ReadPin>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d133      	bne.n	80011f0 <checkAktifCalisma+0xba0>
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <checkAktifCalisma+0xb84>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d12f      	bne.n	80011f0 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <checkAktifCalisma+0xb78>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d02b      	beq.n	80011f0 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <checkAktifCalisma+0xb9c>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e02a      	b.n	80011f6 <checkAktifCalisma+0xba6>
 80011a0:	2000025b 	.word	0x2000025b
 80011a4:	40011000 	.word	0x40011000
 80011a8:	2000025f 	.word	0x2000025f
 80011ac:	20000276 	.word	0x20000276
 80011b0:	20000277 	.word	0x20000277
 80011b4:	20000257 	.word	0x20000257
 80011b8:	20000200 	.word	0x20000200
 80011bc:	2000020c 	.word	0x2000020c
 80011c0:	2000023a 	.word	0x2000023a
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	20000266 	.word	0x20000266
 80011cc:	2000022d 	.word	0x2000022d
 80011d0:	2000022c 	.word	0x2000022c
 80011d4:	20000230 	.word	0x20000230
 80011d8:	2000022a 	.word	0x2000022a
 80011dc:	20000253 	.word	0x20000253
 80011e0:	20000267 	.word	0x20000267
 80011e4:	20000204 	.word	0x20000204
 80011e8:	2000023d 	.word	0x2000023d
 80011ec:	20000268 	.word	0x20000268
		} else {
			kapi1butonkontrol=0;
 80011f0:	4b8b      	ldr	r3, [pc, #556]	; (8001420 <checkAktifCalisma+0xdd0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80011f6:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <checkAktifCalisma+0xdd4>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d121      	bne.n	8001242 <checkAktifCalisma+0xbf2>
 80011fe:	4b8a      	ldr	r3, [pc, #552]	; (8001428 <checkAktifCalisma+0xdd8>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d003      	beq.n	800120e <checkAktifCalisma+0xbbe>
 8001206:	4b88      	ldr	r3, [pc, #544]	; (8001428 <checkAktifCalisma+0xdd8>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d119      	bne.n	8001242 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800120e:	2104      	movs	r1, #4
 8001210:	4886      	ldr	r0, [pc, #536]	; (800142c <checkAktifCalisma+0xddc>)
 8001212:	f008 f889 	bl	8009328 <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	2b01      	cmp	r3, #1
 800121a:	d003      	beq.n	8001224 <checkAktifCalisma+0xbd4>
 800121c:	4b84      	ldr	r3, [pc, #528]	; (8001430 <checkAktifCalisma+0xde0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10e      	bne.n	8001242 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8001224:	2102      	movs	r1, #2
 8001226:	4881      	ldr	r0, [pc, #516]	; (800142c <checkAktifCalisma+0xddc>)
 8001228:	f008 f87e 	bl	8009328 <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d107      	bne.n	8001242 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8001232:	4b80      	ldr	r3, [pc, #512]	; (8001434 <checkAktifCalisma+0xde4>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800123a:	4b7f      	ldr	r3, [pc, #508]	; (8001438 <checkAktifCalisma+0xde8>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e002      	b.n	8001248 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8001242:	4b7d      	ldr	r3, [pc, #500]	; (8001438 <checkAktifCalisma+0xde8>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8001248:	4b75      	ldr	r3, [pc, #468]	; (8001420 <checkAktifCalisma+0xdd0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d107      	bne.n	8001260 <checkAktifCalisma+0xc10>
 8001250:	4b79      	ldr	r3, [pc, #484]	; (8001438 <checkAktifCalisma+0xde8>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d103      	bne.n	8001260 <checkAktifCalisma+0xc10>
 8001258:	4b78      	ldr	r3, [pc, #480]	; (800143c <checkAktifCalisma+0xdec>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	4876      	ldr	r0, [pc, #472]	; (8001440 <checkAktifCalisma+0xdf0>)
 8001266:	f008 f876 	bl	8009356 <HAL_GPIO_WritePin>
 800126a:	e004      	b.n	8001276 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	4873      	ldr	r0, [pc, #460]	; (8001440 <checkAktifCalisma+0xdf0>)
 8001272:	f008 f870 	bl	8009356 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8001276:	4b73      	ldr	r3, [pc, #460]	; (8001444 <checkAktifCalisma+0xdf4>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d141      	bne.n	8001302 <checkAktifCalisma+0xcb2>
 800127e:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <checkAktifCalisma+0xdd8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d003      	beq.n	800128e <checkAktifCalisma+0xc3e>
 8001286:	4b68      	ldr	r3, [pc, #416]	; (8001428 <checkAktifCalisma+0xdd8>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d139      	bne.n	8001302 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800128e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001292:	4866      	ldr	r0, [pc, #408]	; (800142c <checkAktifCalisma+0xddc>)
 8001294:	f008 f848 	bl	8009328 <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d103      	bne.n	80012a6 <checkAktifCalisma+0xc56>
 800129e:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <checkAktifCalisma+0xdf8>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <checkAktifCalisma+0xc6e>
 80012a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012aa:	4868      	ldr	r0, [pc, #416]	; (800144c <checkAktifCalisma+0xdfc>)
 80012ac:	f008 f83c 	bl	8009328 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d125      	bne.n	8001302 <checkAktifCalisma+0xcb2>
 80012b6:	4b64      	ldr	r3, [pc, #400]	; (8001448 <checkAktifCalisma+0xdf8>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d121      	bne.n	8001302 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80012be:	2102      	movs	r1, #2
 80012c0:	485a      	ldr	r0, [pc, #360]	; (800142c <checkAktifCalisma+0xddc>)
 80012c2:	f008 f831 	bl	8009328 <HAL_GPIO_ReadPin>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d11a      	bne.n	8001302 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80012cc:	2104      	movs	r1, #4
 80012ce:	4857      	ldr	r0, [pc, #348]	; (800142c <checkAktifCalisma+0xddc>)
 80012d0:	f008 f82a 	bl	8009328 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80012da:	4b56      	ldr	r3, [pc, #344]	; (8001434 <checkAktifCalisma+0xde4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00f      	beq.n	8001302 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80012e2:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <checkAktifCalisma+0xe00>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	f083 0301 	eor.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80012f0:	4b58      	ldr	r3, [pc, #352]	; (8001454 <checkAktifCalisma+0xe04>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80012f6:	4b58      	ldr	r3, [pc, #352]	; (8001458 <checkAktifCalisma+0xe08>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a58      	ldr	r2, [pc, #352]	; (800145c <checkAktifCalisma+0xe0c>)
 80012fc:	6013      	str	r3, [r2, #0]
			bekle();
 80012fe:	f006 fc03 	bl	8007b08 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8001302:	4b55      	ldr	r3, [pc, #340]	; (8001458 <checkAktifCalisma+0xe08>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b55      	ldr	r3, [pc, #340]	; (800145c <checkAktifCalisma+0xe0c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <checkAktifCalisma+0xe10>)
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	4293      	cmp	r3, r2
 8001312:	d20d      	bcs.n	8001330 <checkAktifCalisma+0xce0>
 8001314:	2102      	movs	r1, #2
 8001316:	4845      	ldr	r0, [pc, #276]	; (800142c <checkAktifCalisma+0xddc>)
 8001318:	f008 f806 	bl	8009328 <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <checkAktifCalisma+0xce0>
 8001322:	4b44      	ldr	r3, [pc, #272]	; (8001434 <checkAktifCalisma+0xde4>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	f083 0301 	eor.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8001330:	4b48      	ldr	r3, [pc, #288]	; (8001454 <checkAktifCalisma+0xe04>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <checkAktifCalisma+0xdf4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d135      	bne.n	80013aa <checkAktifCalisma+0xd5a>
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <checkAktifCalisma+0xdd8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d003      	beq.n	800134e <checkAktifCalisma+0xcfe>
 8001346:	4b38      	ldr	r3, [pc, #224]	; (8001428 <checkAktifCalisma+0xdd8>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d12d      	bne.n	80013aa <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800134e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001352:	4836      	ldr	r0, [pc, #216]	; (800142c <checkAktifCalisma+0xddc>)
 8001354:	f007 ffe8 	bl	8009328 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d103      	bne.n	8001366 <checkAktifCalisma+0xd16>
 800135e:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <checkAktifCalisma+0xdf8>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <checkAktifCalisma+0xd2e>
 8001366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136a:	4838      	ldr	r0, [pc, #224]	; (800144c <checkAktifCalisma+0xdfc>)
 800136c:	f007 ffdc 	bl	8009328 <HAL_GPIO_ReadPin>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d119      	bne.n	80013aa <checkAktifCalisma+0xd5a>
 8001376:	4b34      	ldr	r3, [pc, #208]	; (8001448 <checkAktifCalisma+0xdf8>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d115      	bne.n	80013aa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800137e:	2102      	movs	r1, #2
 8001380:	482a      	ldr	r0, [pc, #168]	; (800142c <checkAktifCalisma+0xddc>)
 8001382:	f007 ffd1 	bl	8009328 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10e      	bne.n	80013aa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800138c:	2104      	movs	r1, #4
 800138e:	4827      	ldr	r0, [pc, #156]	; (800142c <checkAktifCalisma+0xddc>)
 8001390:	f007 ffca 	bl	8009328 <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d107      	bne.n	80013aa <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <checkAktifCalisma+0xde4>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <checkAktifCalisma+0xe14>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	e002      	b.n	80013b0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <checkAktifCalisma+0xe14>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <checkAktifCalisma+0xdf4>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d11d      	bne.n	80013f4 <checkAktifCalisma+0xda4>
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <checkAktifCalisma+0xdd8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d003      	beq.n	80013c8 <checkAktifCalisma+0xd78>
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <checkAktifCalisma+0xdd8>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d115      	bne.n	80013f4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80013c8:	2102      	movs	r1, #2
 80013ca:	4818      	ldr	r0, [pc, #96]	; (800142c <checkAktifCalisma+0xddc>)
 80013cc:	f007 ffac 	bl	8009328 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d10e      	bne.n	80013f4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80013d6:	2104      	movs	r1, #4
 80013d8:	4814      	ldr	r0, [pc, #80]	; (800142c <checkAktifCalisma+0xddc>)
 80013da:	f007 ffa5 	bl	8009328 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <checkAktifCalisma+0xde4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <checkAktifCalisma+0xe18>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	e002      	b.n	80013fa <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <checkAktifCalisma+0xe18>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <checkAktifCalisma+0xe14>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d107      	bne.n	8001412 <checkAktifCalisma+0xdc2>
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <checkAktifCalisma+0xe18>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <checkAktifCalisma+0xdc2>
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <checkAktifCalisma+0xe04>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d02c      	beq.n	800146c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	2140      	movs	r1, #64	; 0x40
 8001416:	480a      	ldr	r0, [pc, #40]	; (8001440 <checkAktifCalisma+0xdf0>)
 8001418:	f007 ff9d 	bl	8009356 <HAL_GPIO_WritePin>
 800141c:	e02b      	b.n	8001476 <checkAktifCalisma+0xe26>
 800141e:	bf00      	nop
 8001420:	20000268 	.word	0x20000268
 8001424:	2000022d 	.word	0x2000022d
 8001428:	2000022c 	.word	0x2000022c
 800142c:	40011000 	.word	0x40011000
 8001430:	2000022a 	.word	0x2000022a
 8001434:	20000266 	.word	0x20000266
 8001438:	20000269 	.word	0x20000269
 800143c:	20000267 	.word	0x20000267
 8001440:	40010800 	.word	0x40010800
 8001444:	2000022e 	.word	0x2000022e
 8001448:	20000230 	.word	0x20000230
 800144c:	40010c00 	.word	0x40010c00
 8001450:	20000253 	.word	0x20000253
 8001454:	2000026a 	.word	0x2000026a
 8001458:	20000200 	.word	0x20000200
 800145c:	20000204 	.word	0x20000204
 8001460:	2000023e 	.word	0x2000023e
 8001464:	2000026b 	.word	0x2000026b
 8001468:	2000026c 	.word	0x2000026c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	488d      	ldr	r0, [pc, #564]	; (80016a8 <checkAktifCalisma+0x1058>)
 8001472:	f007 ff70 	bl	8009356 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8001476:	4b8d      	ldr	r3, [pc, #564]	; (80016ac <checkAktifCalisma+0x105c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <checkAktifCalisma+0xe36>
 800147e:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <checkAktifCalisma+0x105c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d115      	bne.n	80014b2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8001486:	2104      	movs	r1, #4
 8001488:	4889      	ldr	r0, [pc, #548]	; (80016b0 <checkAktifCalisma+0x1060>)
 800148a:	f007 ff4d 	bl	8009328 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d003      	beq.n	800149c <checkAktifCalisma+0xe4c>
 8001494:	4b87      	ldr	r3, [pc, #540]	; (80016b4 <checkAktifCalisma+0x1064>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10a      	bne.n	80014b2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800149c:	2102      	movs	r1, #2
 800149e:	4884      	ldr	r0, [pc, #528]	; (80016b0 <checkAktifCalisma+0x1060>)
 80014a0:	f007 ff42 	bl	8009328 <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80014aa:	4b83      	ldr	r3, [pc, #524]	; (80016b8 <checkAktifCalisma+0x1068>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e002      	b.n	80014b8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80014b2:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <checkAktifCalisma+0x1068>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80014b8:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <checkAktifCalisma+0x105c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d003      	beq.n	80014c8 <checkAktifCalisma+0xe78>
 80014c0:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <checkAktifCalisma+0x105c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d111      	bne.n	80014ec <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80014c8:	2102      	movs	r1, #2
 80014ca:	4879      	ldr	r0, [pc, #484]	; (80016b0 <checkAktifCalisma+0x1060>)
 80014cc:	f007 ff2c 	bl	8009328 <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d10a      	bne.n	80014ec <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80014d6:	2104      	movs	r1, #4
 80014d8:	4875      	ldr	r0, [pc, #468]	; (80016b0 <checkAktifCalisma+0x1060>)
 80014da:	f007 ff25 	bl	8009328 <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80014e4:	4b75      	ldr	r3, [pc, #468]	; (80016bc <checkAktifCalisma+0x106c>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e002      	b.n	80014f2 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80014ec:	4b73      	ldr	r3, [pc, #460]	; (80016bc <checkAktifCalisma+0x106c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80014f2:	4b71      	ldr	r3, [pc, #452]	; (80016b8 <checkAktifCalisma+0x1068>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00f      	beq.n	800151a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80014fa:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <checkAktifCalisma+0x1070>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d10b      	bne.n	800151a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8001502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001506:	486f      	ldr	r0, [pc, #444]	; (80016c4 <checkAktifCalisma+0x1074>)
 8001508:	f007 ff0e 	bl	8009328 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8001512:	4b6d      	ldr	r3, [pc, #436]	; (80016c8 <checkAktifCalisma+0x1078>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e002      	b.n	8001520 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800151a:	4b6b      	ldr	r3, [pc, #428]	; (80016c8 <checkAktifCalisma+0x1078>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8001520:	4b66      	ldr	r3, [pc, #408]	; (80016bc <checkAktifCalisma+0x106c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00f      	beq.n	8001548 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8001528:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <checkAktifCalisma+0x1070>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10b      	bne.n	8001548 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	4863      	ldr	r0, [pc, #396]	; (80016c4 <checkAktifCalisma+0x1074>)
 8001536:	f007 fef7 	bl	8009328 <HAL_GPIO_ReadPin>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <checkAktifCalisma+0x107c>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	e002      	b.n	800154e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8001548:	4b60      	ldr	r3, [pc, #384]	; (80016cc <checkAktifCalisma+0x107c>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800154e:	4b60      	ldr	r3, [pc, #384]	; (80016d0 <checkAktifCalisma+0x1080>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d137      	bne.n	80015c6 <checkAktifCalisma+0xf76>
 8001556:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <checkAktifCalisma+0x1084>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d003      	beq.n	8001566 <checkAktifCalisma+0xf16>
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <checkAktifCalisma+0x1084>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d12f      	bne.n	80015c6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8001566:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <checkAktifCalisma+0x1068>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <checkAktifCalisma+0xf26>
 800156e:	4b53      	ldr	r3, [pc, #332]	; (80016bc <checkAktifCalisma+0x106c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d027      	beq.n	80015c6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8001576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157a:	484d      	ldr	r0, [pc, #308]	; (80016b0 <checkAktifCalisma+0x1060>)
 800157c:	f007 fed4 	bl	8009328 <HAL_GPIO_ReadPin>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <checkAktifCalisma+0xf3e>
 8001586:	4b4e      	ldr	r3, [pc, #312]	; (80016c0 <checkAktifCalisma+0x1070>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800158e:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <checkAktifCalisma+0x1078>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d103      	bne.n	800159e <checkAktifCalisma+0xf4e>
 8001596:	4b4d      	ldr	r3, [pc, #308]	; (80016cc <checkAktifCalisma+0x107c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d013      	beq.n	80015c6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800159e:	4b4e      	ldr	r3, [pc, #312]	; (80016d8 <checkAktifCalisma+0x1088>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00f      	beq.n	80015c6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80015a6:	4b4d      	ldr	r3, [pc, #308]	; (80016dc <checkAktifCalisma+0x108c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	f083 0301 	eor.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80015b4:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <checkAktifCalisma+0x1090>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <checkAktifCalisma+0x1094>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <checkAktifCalisma+0x1098>)
 80015c0:	6013      	str	r3, [r2, #0]
			bekle();
 80015c2:	f006 faa1 	bl	8007b08 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <checkAktifCalisma+0x1094>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <checkAktifCalisma+0x1098>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	4a46      	ldr	r2, [pc, #280]	; (80016ec <checkAktifCalisma+0x109c>)
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d214      	bcs.n	8001602 <checkAktifCalisma+0xfb2>
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <checkAktifCalisma+0x1068>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	f083 0301 	eor.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <checkAktifCalisma+0xfa4>
 80015e6:	4b35      	ldr	r3, [pc, #212]	; (80016bc <checkAktifCalisma+0x106c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	f083 0301 	eor.w	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <checkAktifCalisma+0xfb2>
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <checkAktifCalisma+0x1088>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	f083 0301 	eor.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <checkAktifCalisma+0x1090>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8001608:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <checkAktifCalisma+0x1080>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d12b      	bne.n	8001668 <checkAktifCalisma+0x1018>
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <checkAktifCalisma+0x1084>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d003      	beq.n	8001620 <checkAktifCalisma+0xfd0>
 8001618:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <checkAktifCalisma+0x1084>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d123      	bne.n	8001668 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <checkAktifCalisma+0x1068>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d103      	bne.n	8001630 <checkAktifCalisma+0xfe0>
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <checkAktifCalisma+0x106c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d01b      	beq.n	8001668 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8001630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001634:	481e      	ldr	r0, [pc, #120]	; (80016b0 <checkAktifCalisma+0x1060>)
 8001636:	f007 fe77 	bl	8009328 <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d103      	bne.n	8001648 <checkAktifCalisma+0xff8>
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <checkAktifCalisma+0x1070>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <checkAktifCalisma+0x1078>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d103      	bne.n	8001658 <checkAktifCalisma+0x1008>
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <checkAktifCalisma+0x107c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <checkAktifCalisma+0x1088>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <checkAktifCalisma+0x10a0>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	e002      	b.n	800166e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <checkAktifCalisma+0x10a0>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <checkAktifCalisma+0x1080>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d140      	bne.n	80016f8 <checkAktifCalisma+0x10a8>
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <checkAktifCalisma+0x1084>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <checkAktifCalisma+0x1036>
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <checkAktifCalisma+0x1084>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d138      	bne.n	80016f8 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <checkAktifCalisma+0x1068>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d103      	bne.n	8001696 <checkAktifCalisma+0x1046>
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <checkAktifCalisma+0x106c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d030      	beq.n	80016f8 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <checkAktifCalisma+0x1088>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d02c      	beq.n	80016f8 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <checkAktifCalisma+0x10a4>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e02b      	b.n	80016fe <checkAktifCalisma+0x10ae>
 80016a6:	bf00      	nop
 80016a8:	40010800 	.word	0x40010800
 80016ac:	20000231 	.word	0x20000231
 80016b0:	40011000 	.word	0x40011000
 80016b4:	2000022a 	.word	0x2000022a
 80016b8:	20000270 	.word	0x20000270
 80016bc:	20000271 	.word	0x20000271
 80016c0:	20000230 	.word	0x20000230
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	20000280 	.word	0x20000280
 80016cc:	20000281 	.word	0x20000281
 80016d0:	2000022f 	.word	0x2000022f
 80016d4:	2000022c 	.word	0x2000022c
 80016d8:	20000266 	.word	0x20000266
 80016dc:	20000253 	.word	0x20000253
 80016e0:	2000026d 	.word	0x2000026d
 80016e4:	20000200 	.word	0x20000200
 80016e8:	20000204 	.word	0x20000204
 80016ec:	2000023f 	.word	0x2000023f
 80016f0:	2000026e 	.word	0x2000026e
 80016f4:	2000026f 	.word	0x2000026f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80016f8:	4b8b      	ldr	r3, [pc, #556]	; (8001928 <checkAktifCalisma+0x12d8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <checkAktifCalisma+0x12dc>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d107      	bne.n	8001716 <checkAktifCalisma+0x10c6>
 8001706:	4b8a      	ldr	r3, [pc, #552]	; (8001930 <checkAktifCalisma+0x12e0>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <checkAktifCalisma+0x10c6>
 800170e:	4b86      	ldr	r3, [pc, #536]	; (8001928 <checkAktifCalisma+0x12d8>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	2120      	movs	r1, #32
 800171a:	4886      	ldr	r0, [pc, #536]	; (8001934 <checkAktifCalisma+0x12e4>)
 800171c:	f007 fe1b 	bl	8009356 <HAL_GPIO_WritePin>
 8001720:	e004      	b.n	800172c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2120      	movs	r1, #32
 8001726:	4883      	ldr	r0, [pc, #524]	; (8001934 <checkAktifCalisma+0x12e4>)
 8001728:	f007 fe15 	bl	8009356 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800172c:	4b82      	ldr	r3, [pc, #520]	; (8001938 <checkAktifCalisma+0x12e8>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00e      	beq.n	8001752 <checkAktifCalisma+0x1102>
 8001734:	2102      	movs	r1, #2
 8001736:	4881      	ldr	r0, [pc, #516]	; (800193c <checkAktifCalisma+0x12ec>)
 8001738:	f007 fdf6 	bl	8009328 <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	d107      	bne.n	8001752 <checkAktifCalisma+0x1102>
 8001742:	4b7f      	ldr	r3, [pc, #508]	; (8001940 <checkAktifCalisma+0x12f0>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <checkAktifCalisma+0x1102>
 800174a:	4b7e      	ldr	r3, [pc, #504]	; (8001944 <checkAktifCalisma+0x12f4>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d112      	bne.n	8001778 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <checkAktifCalisma+0x12f8>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d066      	beq.n	8001828 <checkAktifCalisma+0x11d8>
 800175a:	2104      	movs	r1, #4
 800175c:	4877      	ldr	r0, [pc, #476]	; (800193c <checkAktifCalisma+0x12ec>)
 800175e:	f007 fde3 	bl	8009328 <HAL_GPIO_ReadPin>
 8001762:	4603      	mov	r3, r0
 8001764:	2b01      	cmp	r3, #1
 8001766:	d15f      	bne.n	8001828 <checkAktifCalisma+0x11d8>
 8001768:	4b75      	ldr	r3, [pc, #468]	; (8001940 <checkAktifCalisma+0x12f0>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d05b      	beq.n	8001828 <checkAktifCalisma+0x11d8>
 8001770:	4b74      	ldr	r3, [pc, #464]	; (8001944 <checkAktifCalisma+0x12f4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d057      	beq.n	8001828 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8001778:	4b74      	ldr	r3, [pc, #464]	; (800194c <checkAktifCalisma+0x12fc>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b72      	ldr	r3, [pc, #456]	; (800194c <checkAktifCalisma+0x12fc>)
 8001782:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8001784:	4b71      	ldr	r3, [pc, #452]	; (800194c <checkAktifCalisma+0x12fc>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b09      	cmp	r3, #9
 800178a:	d908      	bls.n	800179e <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 800178c:	4b6f      	ldr	r3, [pc, #444]	; (800194c <checkAktifCalisma+0x12fc>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8001792:	4b6f      	ldr	r3, [pc, #444]	; (8001950 <checkAktifCalisma+0x1300>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b6d      	ldr	r3, [pc, #436]	; (8001950 <checkAktifCalisma+0x1300>)
 800179c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800179e:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <checkAktifCalisma+0x1300>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b09      	cmp	r3, #9
 80017a4:	d908      	bls.n	80017b8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80017a6:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <checkAktifCalisma+0x1300>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80017ac:	4b69      	ldr	r3, [pc, #420]	; (8001954 <checkAktifCalisma+0x1304>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b67      	ldr	r3, [pc, #412]	; (8001954 <checkAktifCalisma+0x1304>)
 80017b6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <checkAktifCalisma+0x1304>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b09      	cmp	r3, #9
 80017be:	d908      	bls.n	80017d2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80017c0:	4b64      	ldr	r3, [pc, #400]	; (8001954 <checkAktifCalisma+0x1304>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80017c6:	4b64      	ldr	r3, [pc, #400]	; (8001958 <checkAktifCalisma+0x1308>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b62      	ldr	r3, [pc, #392]	; (8001958 <checkAktifCalisma+0x1308>)
 80017d0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80017d2:	4b61      	ldr	r3, [pc, #388]	; (8001958 <checkAktifCalisma+0x1308>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b09      	cmp	r3, #9
 80017d8:	d908      	bls.n	80017ec <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <checkAktifCalisma+0x1308>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80017e0:	4b5e      	ldr	r3, [pc, #376]	; (800195c <checkAktifCalisma+0x130c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b5c      	ldr	r3, [pc, #368]	; (800195c <checkAktifCalisma+0x130c>)
 80017ea:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80017ec:	4b5b      	ldr	r3, [pc, #364]	; (800195c <checkAktifCalisma+0x130c>)
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <checkAktifCalisma+0x1310>)
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80017f6:	4b58      	ldr	r3, [pc, #352]	; (8001958 <checkAktifCalisma+0x1308>)
 80017f8:	781a      	ldrb	r2, [r3, #0]
 80017fa:	4b59      	ldr	r3, [pc, #356]	; (8001960 <checkAktifCalisma+0x1310>)
 80017fc:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80017fe:	4b55      	ldr	r3, [pc, #340]	; (8001954 <checkAktifCalisma+0x1304>)
 8001800:	781a      	ldrb	r2, [r3, #0]
 8001802:	4b57      	ldr	r3, [pc, #348]	; (8001960 <checkAktifCalisma+0x1310>)
 8001804:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8001806:	4b52      	ldr	r3, [pc, #328]	; (8001950 <checkAktifCalisma+0x1300>)
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	4b55      	ldr	r3, [pc, #340]	; (8001960 <checkAktifCalisma+0x1310>)
 800180c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <checkAktifCalisma+0x12fc>)
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	4b53      	ldr	r3, [pc, #332]	; (8001960 <checkAktifCalisma+0x1310>)
 8001814:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8001816:	4b53      	ldr	r3, [pc, #332]	; (8001964 <checkAktifCalisma+0x1314>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800181c:	4b46      	ldr	r3, [pc, #280]	; (8001938 <checkAktifCalisma+0x12e8>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8001822:	4b49      	ldr	r3, [pc, #292]	; (8001948 <checkAktifCalisma+0x12f8>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8001828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182c:	484e      	ldr	r0, [pc, #312]	; (8001968 <checkAktifCalisma+0x1318>)
 800182e:	f007 fd7b 	bl	8009328 <HAL_GPIO_ReadPin>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d016      	beq.n	8001866 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8001838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183c:	484a      	ldr	r0, [pc, #296]	; (8001968 <checkAktifCalisma+0x1318>)
 800183e:	f007 fd73 	bl	8009328 <HAL_GPIO_ReadPin>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00e      	beq.n	8001866 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8001848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184c:	4846      	ldr	r0, [pc, #280]	; (8001968 <checkAktifCalisma+0x1318>)
 800184e:	f007 fd6b 	bl	8009328 <HAL_GPIO_ReadPin>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8001858:	2140      	movs	r1, #64	; 0x40
 800185a:	4838      	ldr	r0, [pc, #224]	; (800193c <checkAktifCalisma+0x12ec>)
 800185c:	f007 fd64 	bl	8009328 <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <checkAktifCalisma+0x121e>
			startBasili=1;
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <checkAktifCalisma+0x131c>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e002      	b.n	8001874 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <checkAktifCalisma+0x131c>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8001874:	4b3d      	ldr	r3, [pc, #244]	; (800196c <checkAktifCalisma+0x131c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d016      	beq.n	80018aa <checkAktifCalisma+0x125a>
 800187c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001880:	4839      	ldr	r0, [pc, #228]	; (8001968 <checkAktifCalisma+0x1318>)
 8001882:	f007 fd51 	bl	8009328 <HAL_GPIO_ReadPin>
 8001886:	4603      	mov	r3, r0
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10e      	bne.n	80018aa <checkAktifCalisma+0x125a>
			hataVar=1;
 800188c:	4b38      	ldr	r3, [pc, #224]	; (8001970 <checkAktifCalisma+0x1320>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8001892:	2001      	movs	r0, #1
 8001894:	f005 fbf6 	bl	8007084 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8001898:	2001      	movs	r0, #1
 800189a:	f006 f8b9 	bl	8007a10 <hata2EEPROM>
			convertAndSendData();
 800189e:	f005 fdfb 	bl	8007498 <convertAndSendData>
			acilstophatasi=1;
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <checkAktifCalisma+0x1324>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	e018      	b.n	80018dc <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <checkAktifCalisma+0x1324>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d014      	beq.n	80018dc <checkAktifCalisma+0x128c>
 80018b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b6:	482c      	ldr	r0, [pc, #176]	; (8001968 <checkAktifCalisma+0x1318>)
 80018b8:	f007 fd36 	bl	8009328 <HAL_GPIO_ReadPin>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10c      	bne.n	80018dc <checkAktifCalisma+0x128c>
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <checkAktifCalisma+0x131c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	f083 0301 	eor.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <checkAktifCalisma+0x1324>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f005 fb80 	bl	8006fdc <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <checkAktifCalisma+0x1328>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	f083 0301 	eor.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d04e      	beq.n	8001988 <checkAktifCalisma+0x1338>
 80018ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ee:	481e      	ldr	r0, [pc, #120]	; (8001968 <checkAktifCalisma+0x1318>)
 80018f0:	f007 fd1a 	bl	8009328 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <checkAktifCalisma+0x12b2>
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <checkAktifCalisma+0x132c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d042      	beq.n	8001988 <checkAktifCalisma+0x1338>
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <checkAktifCalisma+0x1330>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d13e      	bne.n	8001988 <checkAktifCalisma+0x1338>
			hataVar=1;
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <checkAktifCalisma+0x1320>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8001910:	2002      	movs	r0, #2
 8001912:	f005 fbb7 	bl	8007084 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8001916:	2002      	movs	r0, #2
 8001918:	f006 f87a 	bl	8007a10 <hata2EEPROM>
			convertAndSendData();
 800191c:	f005 fdbc 	bl	8007498 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <checkAktifCalisma+0x1334>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e047      	b.n	80019b8 <checkAktifCalisma+0x1368>
 8001928:	2000026f 	.word	0x2000026f
 800192c:	2000026e 	.word	0x2000026e
 8001930:	2000026d 	.word	0x2000026d
 8001934:	40010800 	.word	0x40010800
 8001938:	20000263 	.word	0x20000263
 800193c:	40011000 	.word	0x40011000
 8001940:	2000022a 	.word	0x2000022a
 8001944:	20000266 	.word	0x20000266
 8001948:	20000264 	.word	0x20000264
 800194c:	20000221 	.word	0x20000221
 8001950:	20000222 	.word	0x20000222
 8001954:	20000008 	.word	0x20000008
 8001958:	20000009 	.word	0x20000009
 800195c:	20000223 	.word	0x20000223
 8001960:	20000128 	.word	0x20000128
 8001964:	20000250 	.word	0x20000250
 8001968:	40010c00 	.word	0x40010c00
 800196c:	20000272 	.word	0x20000272
 8001970:	20000279 	.word	0x20000279
 8001974:	20000274 	.word	0x20000274
 8001978:	2000027b 	.word	0x2000027b
 800197c:	20000285 	.word	0x20000285
 8001980:	20000228 	.word	0x20000228
 8001984:	20000275 	.word	0x20000275
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8001988:	4b9b      	ldr	r3, [pc, #620]	; (8001bf8 <checkAktifCalisma+0x15a8>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <checkAktifCalisma+0x1368>
 8001990:	4b9a      	ldr	r3, [pc, #616]	; (8001bfc <checkAktifCalisma+0x15ac>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00f      	beq.n	80019b8 <checkAktifCalisma+0x1368>
 8001998:	4b99      	ldr	r3, [pc, #612]	; (8001c00 <checkAktifCalisma+0x15b0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d008      	beq.n	80019b8 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80019a6:	4b94      	ldr	r3, [pc, #592]	; (8001bf8 <checkAktifCalisma+0x15a8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80019ac:	4b95      	ldr	r3, [pc, #596]	; (8001c04 <checkAktifCalisma+0x15b4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80019b2:	2002      	movs	r0, #2
 80019b4:	f005 fb12 	bl	8006fdc <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80019b8:	4b93      	ldr	r3, [pc, #588]	; (8001c08 <checkAktifCalisma+0x15b8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11e      	bne.n	80019fe <checkAktifCalisma+0x13ae>
 80019c0:	4b92      	ldr	r3, [pc, #584]	; (8001c0c <checkAktifCalisma+0x15bc>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d11a      	bne.n	80019fe <checkAktifCalisma+0x13ae>
 80019c8:	4b91      	ldr	r3, [pc, #580]	; (8001c10 <checkAktifCalisma+0x15c0>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d016      	beq.n	80019fe <checkAktifCalisma+0x13ae>
 80019d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d4:	488f      	ldr	r0, [pc, #572]	; (8001c14 <checkAktifCalisma+0x15c4>)
 80019d6:	f007 fca7 	bl	8009328 <HAL_GPIO_ReadPin>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10e      	bne.n	80019fe <checkAktifCalisma+0x13ae>
			hataVar=1;
 80019e0:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <checkAktifCalisma+0x15c8>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80019e6:	2003      	movs	r0, #3
 80019e8:	f005 fb4c 	bl	8007084 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f006 f80f 	bl	8007a10 <hata2EEPROM>
			convertAndSendData();
 80019f2:	f005 fd51 	bl	8007498 <convertAndSendData>
			basinchatasi=1;
 80019f6:	4b89      	ldr	r3, [pc, #548]	; (8001c1c <checkAktifCalisma+0x15cc>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e015      	b.n	8001a2a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80019fe:	4b87      	ldr	r3, [pc, #540]	; (8001c1c <checkAktifCalisma+0x15cc>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d011      	beq.n	8001a2a <checkAktifCalisma+0x13da>
 8001a06:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <checkAktifCalisma+0x15b8>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d10d      	bne.n	8001a2a <checkAktifCalisma+0x13da>
 8001a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a12:	4883      	ldr	r0, [pc, #524]	; (8001c20 <checkAktifCalisma+0x15d0>)
 8001a14:	f007 fc88 	bl	8009328 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8001a1e:	4b7f      	ldr	r3, [pc, #508]	; (8001c1c <checkAktifCalisma+0x15cc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f005 fad9 	bl	8006fdc <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8001a2a:	4b7e      	ldr	r3, [pc, #504]	; (8001c24 <checkAktifCalisma+0x15d4>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <checkAktifCalisma+0x13ea>
 8001a32:	4b7d      	ldr	r3, [pc, #500]	; (8001c28 <checkAktifCalisma+0x15d8>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01e      	beq.n	8001a78 <checkAktifCalisma+0x1428>
 8001a3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a3e:	487b      	ldr	r0, [pc, #492]	; (8001c2c <checkAktifCalisma+0x15dc>)
 8001a40:	f007 fc72 	bl	8009328 <HAL_GPIO_ReadPin>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d116      	bne.n	8001a78 <checkAktifCalisma+0x1428>
 8001a4a:	4b79      	ldr	r3, [pc, #484]	; (8001c30 <checkAktifCalisma+0x15e0>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d003      	beq.n	8001a5a <checkAktifCalisma+0x140a>
 8001a52:	4b77      	ldr	r3, [pc, #476]	; (8001c30 <checkAktifCalisma+0x15e0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d10e      	bne.n	8001a78 <checkAktifCalisma+0x1428>
			hataVar=1;
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <checkAktifCalisma+0x15c8>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8001a60:	2004      	movs	r0, #4
 8001a62:	f005 fb0f 	bl	8007084 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8001a66:	2004      	movs	r0, #4
 8001a68:	f005 ffd2 	bl	8007a10 <hata2EEPROM>
			convertAndSendData();
 8001a6c:	f005 fd14 	bl	8007498 <convertAndSendData>
			katkapisivicihatasi=1;
 8001a70:	4b70      	ldr	r3, [pc, #448]	; (8001c34 <checkAktifCalisma+0x15e4>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	e01f      	b.n	8001ab8 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8001a78:	4b6e      	ldr	r3, [pc, #440]	; (8001c34 <checkAktifCalisma+0x15e4>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01b      	beq.n	8001ab8 <checkAktifCalisma+0x1468>
 8001a80:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <checkAktifCalisma+0x15e8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d017      	beq.n	8001ab8 <checkAktifCalisma+0x1468>
 8001a88:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <checkAktifCalisma+0x15d4>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	f083 0301 	eor.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d010      	beq.n	8001ab8 <checkAktifCalisma+0x1468>
 8001a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a9a:	4864      	ldr	r0, [pc, #400]	; (8001c2c <checkAktifCalisma+0x15dc>)
 8001a9c:	f007 fc44 	bl	8009328 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <checkAktifCalisma+0x15e4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <checkAktifCalisma+0x15d8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8001ab2:	2004      	movs	r0, #4
 8001ab4:	f005 fa92 	bl	8006fdc <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	; (8001c24 <checkAktifCalisma+0x15d4>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d103      	bne.n	8001ac8 <checkAktifCalisma+0x1478>
 8001ac0:	4b5e      	ldr	r3, [pc, #376]	; (8001c3c <checkAktifCalisma+0x15ec>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01e      	beq.n	8001b06 <checkAktifCalisma+0x14b6>
 8001ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001acc:	4857      	ldr	r0, [pc, #348]	; (8001c2c <checkAktifCalisma+0x15dc>)
 8001ace:	f007 fc2b 	bl	8009328 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d116      	bne.n	8001b06 <checkAktifCalisma+0x14b6>
 8001ad8:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <checkAktifCalisma+0x15e0>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d003      	beq.n	8001ae8 <checkAktifCalisma+0x1498>
 8001ae0:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <checkAktifCalisma+0x15e0>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d10e      	bne.n	8001b06 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8001ae8:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <checkAktifCalisma+0x15c8>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8001aee:	2005      	movs	r0, #5
 8001af0:	f005 fac8 	bl	8007084 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8001af4:	2005      	movs	r0, #5
 8001af6:	f005 ff8b 	bl	8007a10 <hata2EEPROM>
			convertAndSendData();
 8001afa:	f005 fccd 	bl	8007498 <convertAndSendData>
			tablakapisivicihatasi=1;
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <checkAktifCalisma+0x15f0>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e023      	b.n	8001b4e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8001b06:	4b4e      	ldr	r3, [pc, #312]	; (8001c40 <checkAktifCalisma+0x15f0>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d01f      	beq.n	8001b4e <checkAktifCalisma+0x14fe>
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <checkAktifCalisma+0x15e8>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01b      	beq.n	8001b4e <checkAktifCalisma+0x14fe>
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <checkAktifCalisma+0x15d4>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	f083 0301 	eor.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d014      	beq.n	8001b4e <checkAktifCalisma+0x14fe>
 8001b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b28:	4840      	ldr	r0, [pc, #256]	; (8001c2c <checkAktifCalisma+0x15dc>)
 8001b2a:	f007 fbfd 	bl	8009328 <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10c      	bne.n	8001b4e <checkAktifCalisma+0x14fe>
 8001b34:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <checkAktifCalisma+0x15e8>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8001b3c:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <checkAktifCalisma+0x15f0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <checkAktifCalisma+0x15ec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8001b48:	2005      	movs	r0, #5
 8001b4a:	f005 fa47 	bl	8006fdc <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <checkAktifCalisma+0x15c0>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <checkAktifCalisma+0x1516>
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <checkAktifCalisma+0x15b0>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <checkAktifCalisma+0x1516>
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <checkAktifCalisma+0x15f4>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d016      	beq.n	8001b94 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8001b66:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <checkAktifCalisma+0x15f8>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <checkAktifCalisma+0x15fc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	4a37      	ldr	r2, [pc, #220]	; (8001c50 <checkAktifCalisma+0x1600>)
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d30d      	bcc.n	8001b94 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <checkAktifCalisma+0x15c8>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8001b7e:	2006      	movs	r0, #6
 8001b80:	f005 fa80 	bl	8007084 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8001b84:	2006      	movs	r0, #6
 8001b86:	f005 ff43 	bl	8007a10 <hata2EEPROM>
			  	convertAndSendData();
 8001b8a:	f005 fc85 	bl	8007498 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <checkAktifCalisma+0x1604>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8001b94:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <checkAktifCalisma+0x1604>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <checkAktifCalisma+0x1574>
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4823      	ldr	r0, [pc, #140]	; (8001c2c <checkAktifCalisma+0x15dc>)
 8001ba0:	f007 fbc2 	bl	8009328 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00c      	beq.n	8001bc4 <checkAktifCalisma+0x1574>
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <checkAktifCalisma+0x15d4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	f083 0301 	eor.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <checkAktifCalisma+0x1604>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8001bbe:	2006      	movs	r0, #6
 8001bc0:	f005 fa0c 	bl	8006fdc <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <checkAktifCalisma+0x1608>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10b      	bne.n	8001be4 <checkAktifCalisma+0x1594>
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <checkAktifCalisma+0x15b0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <checkAktifCalisma+0x1594>
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <checkAktifCalisma+0x160c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <checkAktifCalisma+0x1594>
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <checkAktifCalisma+0x15f4>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d03f      	beq.n	8001c64 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <checkAktifCalisma+0x1610>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <checkAktifCalisma+0x15d8>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <checkAktifCalisma+0x15ec>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	e03c      	b.n	8001c72 <checkAktifCalisma+0x1622>
 8001bf8:	20000275 	.word	0x20000275
 8001bfc:	2000027b 	.word	0x2000027b
 8001c00:	2000025c 	.word	0x2000025c
 8001c04:	20000285 	.word	0x20000285
 8001c08:	20000227 	.word	0x20000227
 8001c0c:	2000022b 	.word	0x2000022b
 8001c10:	20000278 	.word	0x20000278
 8001c14:	40011000 	.word	0x40011000
 8001c18:	20000279 	.word	0x20000279
 8001c1c:	20000282 	.word	0x20000282
 8001c20:	40010c00 	.word	0x40010c00
 8001c24:	20000272 	.word	0x20000272
 8001c28:	20000286 	.word	0x20000286
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	2000022c 	.word	0x2000022c
 8001c34:	20000283 	.word	0x20000283
 8001c38:	20000266 	.word	0x20000266
 8001c3c:	20000287 	.word	0x20000287
 8001c40:	20000284 	.word	0x20000284
 8001c44:	2000025b 	.word	0x2000025b
 8001c48:	20000200 	.word	0x20000200
 8001c4c:	20000214 	.word	0x20000214
 8001c50:	2000023c 	.word	0x2000023c
 8001c54:	20000273 	.word	0x20000273
 8001c58:	20000259 	.word	0x20000259
 8001c5c:	2000025a 	.word	0x2000025a
 8001c60:	2000027a 	.word	0x2000027a
		} else {
			makineCalisiyor=1;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <checkAktifCalisma+0x1690>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <checkAktifCalisma+0x1694>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <checkAktifCalisma+0x1698>)
 8001c70:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <checkAktifCalisma+0x169c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d02f      	beq.n	8001cda <checkAktifCalisma+0x168a>
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <checkAktifCalisma+0x16a0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	f083 0301 	eor.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d028      	beq.n	8001cda <checkAktifCalisma+0x168a>
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <checkAktifCalisma+0x16a4>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d021      	beq.n	8001cda <checkAktifCalisma+0x168a>
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <checkAktifCalisma+0x16a8>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01a      	beq.n	8001cda <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <checkAktifCalisma+0x16ac>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d013      	beq.n	8001cda <checkAktifCalisma+0x168a>
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <checkAktifCalisma+0x16b0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f083 0301 	eor.w	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00c      	beq.n	8001cda <checkAktifCalisma+0x168a>
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <checkAktifCalisma+0x16b4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <checkAktifCalisma+0x168a>
			hataVar=0;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <checkAktifCalisma+0x169c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8001cd4:	2007      	movs	r0, #7
 8001cd6:	f005 f981 	bl	8006fdc <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000027a 	.word	0x2000027a
 8001ce4:	20000200 	.word	0x20000200
 8001ce8:	20000214 	.word	0x20000214
 8001cec:	20000279 	.word	0x20000279
 8001cf0:	20000274 	.word	0x20000274
 8001cf4:	20000275 	.word	0x20000275
 8001cf8:	20000282 	.word	0x20000282
 8001cfc:	20000283 	.word	0x20000283
 8001d00:	20000284 	.word	0x20000284
 8001d04:	20000273 	.word	0x20000273

08001d08 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8001d0c:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <checkDemoModCalisma+0x234>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	f040 8229 	bne.w	8002168 <checkDemoModCalisma+0x460>
 8001d16:	4b8a      	ldr	r3, [pc, #552]	; (8001f40 <checkDemoModCalisma+0x238>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8224 	beq.w	8002168 <checkDemoModCalisma+0x460>
 8001d20:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <checkDemoModCalisma+0x23c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 821f 	bne.w	8002168 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4886      	ldr	r0, [pc, #536]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001d2e:	f007 fafb 	bl	8009328 <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d11d      	bne.n	8001d74 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8001d38:	4b84      	ldr	r3, [pc, #528]	; (8001f4c <checkDemoModCalisma+0x244>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f083 0301 	eor.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d016      	beq.n	8001d74 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8001d46:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <checkDemoModCalisma+0x248>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00f      	beq.n	8001d74 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <checkDemoModCalisma+0x24c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2104      	movs	r1, #4
 8001d66:	487c      	ldr	r0, [pc, #496]	; (8001f58 <checkDemoModCalisma+0x250>)
 8001d68:	f007 faf5 	bl	8009356 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8001d6c:	4b7b      	ldr	r3, [pc, #492]	; (8001f5c <checkDemoModCalisma+0x254>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e00e      	b.n	8001d92 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8001d74:	2102      	movs	r1, #2
 8001d76:	4874      	ldr	r0, [pc, #464]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001d78:	f007 fad6 	bl	8009328 <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2104      	movs	r1, #4
 8001d86:	4874      	ldr	r0, [pc, #464]	; (8001f58 <checkDemoModCalisma+0x250>)
 8001d88:	f007 fae5 	bl	8009356 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8001d8c:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <checkDemoModCalisma+0x254>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8001d92:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <checkDemoModCalisma+0x254>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10b      	bne.n	8001db2 <checkDemoModCalisma+0xaa>
 8001d9a:	4b6d      	ldr	r3, [pc, #436]	; (8001f50 <checkDemoModCalisma+0x248>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d107      	bne.n	8001db2 <checkDemoModCalisma+0xaa>
 8001da2:	4b6c      	ldr	r3, [pc, #432]	; (8001f54 <checkDemoModCalisma+0x24c>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <checkDemoModCalisma+0xaa>
 8001daa:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <checkDemoModCalisma+0x244>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00c      	beq.n	8001dcc <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db8:	4867      	ldr	r0, [pc, #412]	; (8001f58 <checkDemoModCalisma+0x250>)
 8001dba:	f007 facc 	bl	8009356 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc4:	4864      	ldr	r0, [pc, #400]	; (8001f58 <checkDemoModCalisma+0x250>)
 8001dc6:	f007 fac6 	bl	8009356 <HAL_GPIO_WritePin>
 8001dca:	e00b      	b.n	8001de4 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd2:	4861      	ldr	r0, [pc, #388]	; (8001f58 <checkDemoModCalisma+0x250>)
 8001dd4:	f007 fabf 	bl	8009356 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dde:	485e      	ldr	r0, [pc, #376]	; (8001f58 <checkDemoModCalisma+0x250>)
 8001de0:	f007 fab9 	bl	8009356 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8001de4:	2102      	movs	r1, #2
 8001de6:	4858      	ldr	r0, [pc, #352]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001de8:	f007 fa9e 	bl	8009328 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10d      	bne.n	8001e0e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8001df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df6:	4854      	ldr	r0, [pc, #336]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001df8:	f007 fa96 	bl	8009328 <HAL_GPIO_ReadPin>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8001e02:	4b56      	ldr	r3, [pc, #344]	; (8001f5c <checkDemoModCalisma+0x254>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	f083 0301 	eor.w	r3, r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8001e0e:	2102      	movs	r1, #2
 8001e10:	484d      	ldr	r0, [pc, #308]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001e12:	f007 fa89 	bl	8009328 <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d125      	bne.n	8001e68 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8001e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e20:	4849      	ldr	r0, [pc, #292]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001e22:	f007 fa81 	bl	8009328 <HAL_GPIO_ReadPin>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d11d      	bne.n	8001e68 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8001e2c:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <checkDemoModCalisma+0x254>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	f083 0301 	eor.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8001e3a:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <checkDemoModCalisma+0x244>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	f083 0301 	eor.w	r3, r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00f      	beq.n	8001e68 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8001e48:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <checkDemoModCalisma+0x24c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	f083 0301 	eor.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d008      	beq.n	8001e68 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2120      	movs	r1, #32
 8001e5a:	483b      	ldr	r0, [pc, #236]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001e5c:	f007 fa7b 	bl	8009356 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8001e60:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <checkDemoModCalisma+0x248>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e007      	b.n	8001e78 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2120      	movs	r1, #32
 8001e6c:	4836      	ldr	r0, [pc, #216]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001e6e:	f007 fa72 	bl	8009356 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <checkDemoModCalisma+0x248>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4833      	ldr	r0, [pc, #204]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001e7c:	f007 fa54 	bl	8009328 <HAL_GPIO_ReadPin>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d125      	bne.n	8001ed2 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8001e86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e8a:	482f      	ldr	r0, [pc, #188]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001e8c:	f007 fa4c 	bl	8009328 <HAL_GPIO_ReadPin>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d11d      	bne.n	8001ed2 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <checkDemoModCalisma+0x254>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d016      	beq.n	8001ed2 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <checkDemoModCalisma+0x248>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00f      	beq.n	8001ed2 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8001eb2:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <checkDemoModCalisma+0x244>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	4820      	ldr	r0, [pc, #128]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001ec6:	f007 fa46 	bl	8009356 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <checkDemoModCalisma+0x24c>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	e007      	b.n	8001ee2 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	481c      	ldr	r0, [pc, #112]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001ed8:	f007 fa3d 	bl	8009356 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <checkDemoModCalisma+0x24c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	4818      	ldr	r0, [pc, #96]	; (8001f48 <checkDemoModCalisma+0x240>)
 8001ee6:	f007 fa1f 	bl	8009328 <HAL_GPIO_ReadPin>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d139      	bne.n	8001f64 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <checkDemoModCalisma+0x254>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d032      	beq.n	8001f64 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <checkDemoModCalisma+0x24c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	f083 0301 	eor.w	r3, r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d02b      	beq.n	8001f64 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <checkDemoModCalisma+0x248>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d024      	beq.n	8001f64 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <checkDemoModCalisma+0x250>)
 8001f20:	f007 fa19 	bl	8009356 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8001f24:	2201      	movs	r2, #1
 8001f26:	2101      	movs	r1, #1
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <checkDemoModCalisma+0x250>)
 8001f2a:	f007 fa14 	bl	8009356 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <checkDemoModCalisma+0x244>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <checkDemoModCalisma+0x258>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e027      	b.n	8001f8c <checkDemoModCalisma+0x284>
 8001f3c:	20000242 	.word	0x20000242
 8001f40:	20000276 	.word	0x20000276
 8001f44:	20000241 	.word	0x20000241
 8001f48:	40011000 	.word	0x40011000
 8001f4c:	2000027d 	.word	0x2000027d
 8001f50:	2000027e 	.word	0x2000027e
 8001f54:	2000027f 	.word	0x2000027f
 8001f58:	40010c00 	.word	0x40010c00
 8001f5c:	2000027c 	.word	0x2000027c
 8001f60:	20000262 	.word	0x20000262
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8001f64:	2104      	movs	r1, #4
 8001f66:	48a0      	ldr	r0, [pc, #640]	; (80021e8 <checkDemoModCalisma+0x4e0>)
 8001f68:	f007 f9de 	bl	8009328 <HAL_GPIO_ReadPin>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10c      	bne.n	8001f8c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2102      	movs	r1, #2
 8001f76:	489d      	ldr	r0, [pc, #628]	; (80021ec <checkDemoModCalisma+0x4e4>)
 8001f78:	f007 f9ed 	bl	8009356 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2101      	movs	r1, #1
 8001f80:	489a      	ldr	r0, [pc, #616]	; (80021ec <checkDemoModCalisma+0x4e4>)
 8001f82:	f007 f9e8 	bl	8009356 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8001f86:	4b9a      	ldr	r3, [pc, #616]	; (80021f0 <checkDemoModCalisma+0x4e8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4896      	ldr	r0, [pc, #600]	; (80021e8 <checkDemoModCalisma+0x4e0>)
 8001f90:	f007 f9ca 	bl	8009328 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10d      	bne.n	8001fb6 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	4895      	ldr	r0, [pc, #596]	; (80021f4 <checkDemoModCalisma+0x4ec>)
 8001fa0:	f007 f9d9 	bl	8009356 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2120      	movs	r1, #32
 8001fa8:	4892      	ldr	r0, [pc, #584]	; (80021f4 <checkDemoModCalisma+0x4ec>)
 8001faa:	f007 f9d4 	bl	8009356 <HAL_GPIO_WritePin>
			timer3 = millis;
 8001fae:	4b92      	ldr	r3, [pc, #584]	; (80021f8 <checkDemoModCalisma+0x4f0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a92      	ldr	r2, [pc, #584]	; (80021fc <checkDemoModCalisma+0x4f4>)
 8001fb4:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8001fb6:	4b90      	ldr	r3, [pc, #576]	; (80021f8 <checkDemoModCalisma+0x4f0>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b90      	ldr	r3, [pc, #576]	; (80021fc <checkDemoModCalisma+0x4f4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d909      	bls.n	8001fd8 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	488a      	ldr	r0, [pc, #552]	; (80021f4 <checkDemoModCalisma+0x4ec>)
 8001fca:	f007 f9c4 	bl	8009356 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	4888      	ldr	r0, [pc, #544]	; (80021f4 <checkDemoModCalisma+0x4ec>)
 8001fd4:	f007 f9bf 	bl	8009356 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4883      	ldr	r0, [pc, #524]	; (80021e8 <checkDemoModCalisma+0x4e0>)
 8001fdc:	f007 f9a4 	bl	8009328 <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d108      	bne.n	8001ff8 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2140      	movs	r1, #64	; 0x40
 8001fea:	4882      	ldr	r0, [pc, #520]	; (80021f4 <checkDemoModCalisma+0x4ec>)
 8001fec:	f007 f9b3 	bl	8009356 <HAL_GPIO_WritePin>
			timer3 = millis;
 8001ff0:	4b81      	ldr	r3, [pc, #516]	; (80021f8 <checkDemoModCalisma+0x4f0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a81      	ldr	r2, [pc, #516]	; (80021fc <checkDemoModCalisma+0x4f4>)
 8001ff6:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8001ff8:	4b7f      	ldr	r3, [pc, #508]	; (80021f8 <checkDemoModCalisma+0x4f0>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <checkDemoModCalisma+0x4f4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b04      	cmp	r3, #4
 8002004:	d904      	bls.n	8002010 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	2140      	movs	r1, #64	; 0x40
 800200a:	487a      	ldr	r0, [pc, #488]	; (80021f4 <checkDemoModCalisma+0x4ec>)
 800200c:	f007 f9a3 	bl	8009356 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8002010:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <checkDemoModCalisma+0x4f8>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d058      	beq.n	80020ca <checkDemoModCalisma+0x3c2>
 8002018:	4b7a      	ldr	r3, [pc, #488]	; (8002204 <checkDemoModCalisma+0x4fc>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d054      	beq.n	80020ca <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8002020:	4b79      	ldr	r3, [pc, #484]	; (8002208 <checkDemoModCalisma+0x500>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	4b77      	ldr	r3, [pc, #476]	; (8002208 <checkDemoModCalisma+0x500>)
 800202a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800202c:	4b76      	ldr	r3, [pc, #472]	; (8002208 <checkDemoModCalisma+0x500>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d908      	bls.n	8002046 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8002034:	4b74      	ldr	r3, [pc, #464]	; (8002208 <checkDemoModCalisma+0x500>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800203a:	4b74      	ldr	r3, [pc, #464]	; (800220c <checkDemoModCalisma+0x504>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b72      	ldr	r3, [pc, #456]	; (800220c <checkDemoModCalisma+0x504>)
 8002044:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8002046:	4b71      	ldr	r3, [pc, #452]	; (800220c <checkDemoModCalisma+0x504>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b09      	cmp	r3, #9
 800204c:	d908      	bls.n	8002060 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800204e:	4b6f      	ldr	r3, [pc, #444]	; (800220c <checkDemoModCalisma+0x504>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8002054:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <checkDemoModCalisma+0x508>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <checkDemoModCalisma+0x508>)
 800205e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8002060:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <checkDemoModCalisma+0x508>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b09      	cmp	r3, #9
 8002066:	d908      	bls.n	800207a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8002068:	4b69      	ldr	r3, [pc, #420]	; (8002210 <checkDemoModCalisma+0x508>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800206e:	4b69      	ldr	r3, [pc, #420]	; (8002214 <checkDemoModCalisma+0x50c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <checkDemoModCalisma+0x50c>)
 8002078:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800207a:	4b66      	ldr	r3, [pc, #408]	; (8002214 <checkDemoModCalisma+0x50c>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b09      	cmp	r3, #9
 8002080:	d908      	bls.n	8002094 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8002082:	4b64      	ldr	r3, [pc, #400]	; (8002214 <checkDemoModCalisma+0x50c>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8002088:	4b63      	ldr	r3, [pc, #396]	; (8002218 <checkDemoModCalisma+0x510>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <checkDemoModCalisma+0x510>)
 8002092:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8002094:	4b60      	ldr	r3, [pc, #384]	; (8002218 <checkDemoModCalisma+0x510>)
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	4b60      	ldr	r3, [pc, #384]	; (800221c <checkDemoModCalisma+0x514>)
 800209a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800209e:	4b5d      	ldr	r3, [pc, #372]	; (8002214 <checkDemoModCalisma+0x50c>)
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	4b5e      	ldr	r3, [pc, #376]	; (800221c <checkDemoModCalisma+0x514>)
 80020a4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80020a6:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <checkDemoModCalisma+0x508>)
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	4b5c      	ldr	r3, [pc, #368]	; (800221c <checkDemoModCalisma+0x514>)
 80020ac:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80020ae:	4b57      	ldr	r3, [pc, #348]	; (800220c <checkDemoModCalisma+0x504>)
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	4b5a      	ldr	r3, [pc, #360]	; (800221c <checkDemoModCalisma+0x514>)
 80020b4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80020b6:	4b54      	ldr	r3, [pc, #336]	; (8002208 <checkDemoModCalisma+0x500>)
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	4b58      	ldr	r3, [pc, #352]	; (800221c <checkDemoModCalisma+0x514>)
 80020bc:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80020be:	4b58      	ldr	r3, [pc, #352]	; (8002220 <checkDemoModCalisma+0x518>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80020c4:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <checkDemoModCalisma+0x4fc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <checkDemoModCalisma+0x51c>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 8087 	bne.w	80021e2 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80020d4:	4a54      	ldr	r2, [pc, #336]	; (8002228 <checkDemoModCalisma+0x520>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	2002      	movs	r0, #2
 80020da:	f000 fbdf 	bl	800289c <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80020de:	4a53      	ldr	r2, [pc, #332]	; (800222c <checkDemoModCalisma+0x524>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	2001      	movs	r0, #1
 80020e4:	f000 fbda 	bl	800289c <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <checkDemoModCalisma+0x510>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	220a      	movs	r2, #10
 80020ee:	4950      	ldr	r1, [pc, #320]	; (8002230 <checkDemoModCalisma+0x528>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00a f945 	bl	800c380 <itoa>
			lcd_print(2,12,snum);
 80020f6:	4a4e      	ldr	r2, [pc, #312]	; (8002230 <checkDemoModCalisma+0x528>)
 80020f8:	210c      	movs	r1, #12
 80020fa:	2002      	movs	r0, #2
 80020fc:	f000 fbce 	bl	800289c <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8002100:	4b44      	ldr	r3, [pc, #272]	; (8002214 <checkDemoModCalisma+0x50c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	220a      	movs	r2, #10
 8002106:	494a      	ldr	r1, [pc, #296]	; (8002230 <checkDemoModCalisma+0x528>)
 8002108:	4618      	mov	r0, r3
 800210a:	f00a f939 	bl	800c380 <itoa>
			lcd_print(2,13,snum);
 800210e:	4a48      	ldr	r2, [pc, #288]	; (8002230 <checkDemoModCalisma+0x528>)
 8002110:	210d      	movs	r1, #13
 8002112:	2002      	movs	r0, #2
 8002114:	f000 fbc2 	bl	800289c <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8002118:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <checkDemoModCalisma+0x508>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	220a      	movs	r2, #10
 800211e:	4944      	ldr	r1, [pc, #272]	; (8002230 <checkDemoModCalisma+0x528>)
 8002120:	4618      	mov	r0, r3
 8002122:	f00a f92d 	bl	800c380 <itoa>
			lcd_print(2,14,snum);
 8002126:	4a42      	ldr	r2, [pc, #264]	; (8002230 <checkDemoModCalisma+0x528>)
 8002128:	210e      	movs	r1, #14
 800212a:	2002      	movs	r0, #2
 800212c:	f000 fbb6 	bl	800289c <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8002130:	4b36      	ldr	r3, [pc, #216]	; (800220c <checkDemoModCalisma+0x504>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	220a      	movs	r2, #10
 8002136:	493e      	ldr	r1, [pc, #248]	; (8002230 <checkDemoModCalisma+0x528>)
 8002138:	4618      	mov	r0, r3
 800213a:	f00a f921 	bl	800c380 <itoa>
			lcd_print(2,15,snum);
 800213e:	4a3c      	ldr	r2, [pc, #240]	; (8002230 <checkDemoModCalisma+0x528>)
 8002140:	210f      	movs	r1, #15
 8002142:	2002      	movs	r0, #2
 8002144:	f000 fbaa 	bl	800289c <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <checkDemoModCalisma+0x500>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	220a      	movs	r2, #10
 800214e:	4938      	ldr	r1, [pc, #224]	; (8002230 <checkDemoModCalisma+0x528>)
 8002150:	4618      	mov	r0, r3
 8002152:	f00a f915 	bl	800c380 <itoa>
			lcd_print(2,16,snum);
 8002156:	4a36      	ldr	r2, [pc, #216]	; (8002230 <checkDemoModCalisma+0x528>)
 8002158:	2110      	movs	r1, #16
 800215a:	2002      	movs	r0, #2
 800215c:	f000 fb9e 	bl	800289c <lcd_print>
			mesajYazildi=1;
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <checkDemoModCalisma+0x52c>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8002166:	e03c      	b.n	80021e2 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8002168:	4b33      	ldr	r3, [pc, #204]	; (8002238 <checkDemoModCalisma+0x530>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d003      	beq.n	8002178 <checkDemoModCalisma+0x470>
 8002170:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <checkDemoModCalisma+0x51c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d134      	bne.n	80021e2 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800217e:	481b      	ldr	r0, [pc, #108]	; (80021ec <checkDemoModCalisma+0x4e4>)
 8002180:	f007 f8e9 	bl	8009356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800218a:	4818      	ldr	r0, [pc, #96]	; (80021ec <checkDemoModCalisma+0x4e4>)
 800218c:	f007 f8e3 	bl	8009356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	2104      	movs	r1, #4
 8002194:	4815      	ldr	r0, [pc, #84]	; (80021ec <checkDemoModCalisma+0x4e4>)
 8002196:	f007 f8de 	bl	8009356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	2102      	movs	r1, #2
 800219e:	4813      	ldr	r0, [pc, #76]	; (80021ec <checkDemoModCalisma+0x4e4>)
 80021a0:	f007 f8d9 	bl	8009356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2101      	movs	r1, #1
 80021a8:	4810      	ldr	r0, [pc, #64]	; (80021ec <checkDemoModCalisma+0x4e4>)
 80021aa:	f007 f8d4 	bl	8009356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2120      	movs	r1, #32
 80021b2:	480d      	ldr	r0, [pc, #52]	; (80021e8 <checkDemoModCalisma+0x4e0>)
 80021b4:	f007 f8cf 	bl	8009356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2110      	movs	r1, #16
 80021bc:	480a      	ldr	r0, [pc, #40]	; (80021e8 <checkDemoModCalisma+0x4e0>)
 80021be:	f007 f8ca 	bl	8009356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	480b      	ldr	r0, [pc, #44]	; (80021f4 <checkDemoModCalisma+0x4ec>)
 80021c8:	f007 f8c5 	bl	8009356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	4808      	ldr	r0, [pc, #32]	; (80021f4 <checkDemoModCalisma+0x4ec>)
 80021d2:	f007 f8c0 	bl	8009356 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2120      	movs	r1, #32
 80021da:	4806      	ldr	r0, [pc, #24]	; (80021f4 <checkDemoModCalisma+0x4ec>)
 80021dc:	f007 f8bb 	bl	8009356 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80021e0:	e7ff      	b.n	80021e2 <checkDemoModCalisma+0x4da>
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40011000 	.word	0x40011000
 80021ec:	40010c00 	.word	0x40010c00
 80021f0:	2000027d 	.word	0x2000027d
 80021f4:	40010800 	.word	0x40010800
 80021f8:	20000200 	.word	0x20000200
 80021fc:	20000210 	.word	0x20000210
 8002200:	2000027c 	.word	0x2000027c
 8002204:	20000262 	.word	0x20000262
 8002208:	20000221 	.word	0x20000221
 800220c:	20000222 	.word	0x20000222
 8002210:	20000008 	.word	0x20000008
 8002214:	20000009 	.word	0x20000009
 8002218:	20000223 	.word	0x20000223
 800221c:	20000128 	.word	0x20000128
 8002220:	20000250 	.word	0x20000250
 8002224:	20000241 	.word	0x20000241
 8002228:	0800cf64 	.word	0x0800cf64
 800222c:	0800cf70 	.word	0x0800cf70
 8002230:	20000198 	.word	0x20000198
 8002234:	20000258 	.word	0x20000258
 8002238:	20000242 	.word	0x20000242

0800223c <mainLoop>:

void mainLoop() {
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8002242:	f7fe f923 	bl	800048c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8002246:	2101      	movs	r1, #1
 8002248:	48ac      	ldr	r0, [pc, #688]	; (80024fc <mainLoop+0x2c0>)
 800224a:	f007 f86d 	bl	8009328 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d136      	bne.n	80022c2 <mainLoop+0x86>
 8002254:	2108      	movs	r1, #8
 8002256:	48aa      	ldr	r0, [pc, #680]	; (8002500 <mainLoop+0x2c4>)
 8002258:	f007 f866 	bl	8009328 <HAL_GPIO_ReadPin>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d12f      	bne.n	80022c2 <mainLoop+0x86>
 8002262:	2102      	movs	r1, #2
 8002264:	48a5      	ldr	r0, [pc, #660]	; (80024fc <mainLoop+0x2c0>)
 8002266:	f007 f85f 	bl	8009328 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d128      	bne.n	80022c2 <mainLoop+0x86>
 8002270:	2104      	movs	r1, #4
 8002272:	48a2      	ldr	r0, [pc, #648]	; (80024fc <mainLoop+0x2c0>)
 8002274:	f007 f858 	bl	8009328 <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d121      	bne.n	80022c2 <mainLoop+0x86>
 800227e:	2108      	movs	r1, #8
 8002280:	489e      	ldr	r0, [pc, #632]	; (80024fc <mainLoop+0x2c0>)
 8002282:	f007 f851 	bl	8009328 <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11a      	bne.n	80022c2 <mainLoop+0x86>
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	489c      	ldr	r0, [pc, #624]	; (8002500 <mainLoop+0x2c4>)
 8002290:	f007 f84a 	bl	8009328 <HAL_GPIO_ReadPin>
 8002294:	4603      	mov	r3, r0
 8002296:	2b01      	cmp	r3, #1
 8002298:	d113      	bne.n	80022c2 <mainLoop+0x86>
 800229a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800229e:	4898      	ldr	r0, [pc, #608]	; (8002500 <mainLoop+0x2c4>)
 80022a0:	f007 f842 	bl	8009328 <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10b      	bne.n	80022c2 <mainLoop+0x86>
 80022aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ae:	4894      	ldr	r0, [pc, #592]	; (8002500 <mainLoop+0x2c4>)
 80022b0:	f007 f83a 	bl	8009328 <HAL_GPIO_ReadPin>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d103      	bne.n	80022c2 <mainLoop+0x86>
			butonKontrol=0;
 80022ba:	4b92      	ldr	r3, [pc, #584]	; (8002504 <mainLoop+0x2c8>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e003      	b.n	80022ca <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80022c2:	4b91      	ldr	r3, [pc, #580]	; (8002508 <mainLoop+0x2cc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a91      	ldr	r2, [pc, #580]	; (800250c <mainLoop+0x2d0>)
 80022c8:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80022ca:	4b91      	ldr	r3, [pc, #580]	; (8002510 <mainLoop+0x2d4>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d03a      	beq.n	8002348 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80022d2:	bf00      	nop
 80022d4:	488f      	ldr	r0, [pc, #572]	; (8002514 <mainLoop+0x2d8>)
 80022d6:	f007 fe50 	bl	8009f7a <HAL_I2C_GetError>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d0f9      	beq.n	80022d4 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80022e0:	bf00      	nop
 80022e2:	488c      	ldr	r0, [pc, #560]	; (8002514 <mainLoop+0x2d8>)
 80022e4:	f007 fe3c 	bl	8009f60 <HAL_I2C_GetState>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d1f9      	bne.n	80022e2 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80022ee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	236e      	movs	r3, #110	; 0x6e
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	4b87      	ldr	r3, [pc, #540]	; (8002518 <mainLoop+0x2dc>)
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	236e      	movs	r3, #110	; 0x6e
 80022fe:	2200      	movs	r2, #0
 8002300:	21a0      	movs	r1, #160	; 0xa0
 8002302:	4884      	ldr	r0, [pc, #528]	; (8002514 <mainLoop+0x2d8>)
 8002304:	f007 faca 	bl	800989c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8002308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800230c:	f006 fa3c 	bl	8008788 <HAL_Delay>

		  hafizaYaz=0;
 8002310:	4b7f      	ldr	r3, [pc, #508]	; (8002510 <mainLoop+0x2d4>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8002316:	4b81      	ldr	r3, [pc, #516]	; (800251c <mainLoop+0x2e0>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 800231e:	4a80      	ldr	r2, [pc, #512]	; (8002520 <mainLoop+0x2e4>)
 8002320:	2101      	movs	r1, #1
 8002322:	2002      	movs	r0, #2
 8002324:	f000 faba 	bl	800289c <lcd_print>
 8002328:	e008      	b.n	800233c <mainLoop+0x100>
		  } else if(dilSecim==1) {
 800232a:	4b7c      	ldr	r3, [pc, #496]	; (800251c <mainLoop+0x2e0>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d104      	bne.n	800233c <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8002332:	4a7c      	ldr	r2, [pc, #496]	; (8002524 <mainLoop+0x2e8>)
 8002334:	2101      	movs	r1, #1
 8002336:	2002      	movs	r0, #2
 8002338:	f000 fab0 	bl	800289c <lcd_print>
		  }

		  HAL_Delay(1000);
 800233c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002340:	f006 fa22 	bl	8008788 <HAL_Delay>
		  lcd_clear();
 8002344:	f000 faf9 	bl	800293a <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8002348:	4b77      	ldr	r3, [pc, #476]	; (8002528 <mainLoop+0x2ec>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	f083 0301 	eor.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d06e      	beq.n	8002434 <mainLoop+0x1f8>
 8002356:	486f      	ldr	r0, [pc, #444]	; (8002514 <mainLoop+0x2d8>)
 8002358:	f007 fe02 	bl	8009f60 <HAL_I2C_GetState>
 800235c:	4603      	mov	r3, r0
 800235e:	2b20      	cmp	r3, #32
 8002360:	d168      	bne.n	8002434 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <mainLoop+0x2f0>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	f083 0301 	eor.w	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d044      	beq.n	80023fa <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8002370:	4a6f      	ldr	r2, [pc, #444]	; (8002530 <mainLoop+0x2f4>)
 8002372:	2101      	movs	r1, #1
 8002374:	2001      	movs	r0, #1
 8002376:	f000 fa91 	bl	800289c <lcd_print>
			  if(dilSecim==0) {
 800237a:	4b68      	ldr	r3, [pc, #416]	; (800251c <mainLoop+0x2e0>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8002382:	4a6c      	ldr	r2, [pc, #432]	; (8002534 <mainLoop+0x2f8>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f000 fa88 	bl	800289c <lcd_print>
 800238c:	e008      	b.n	80023a0 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <mainLoop+0x2e0>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d104      	bne.n	80023a0 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8002396:	4a68      	ldr	r2, [pc, #416]	; (8002538 <mainLoop+0x2fc>)
 8002398:	2101      	movs	r1, #1
 800239a:	2002      	movs	r0, #2
 800239c:	f000 fa7e 	bl	800289c <lcd_print>
			  }
			  HAL_Delay(1000);
 80023a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a4:	f006 f9f0 	bl	8008788 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80023a8:	bf00      	nop
 80023aa:	485a      	ldr	r0, [pc, #360]	; (8002514 <mainLoop+0x2d8>)
 80023ac:	f007 fde5 	bl	8009f7a <HAL_I2C_GetError>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d0f9      	beq.n	80023aa <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80023b6:	e003      	b.n	80023c0 <mainLoop+0x184>
				  HAL_Delay(1000);
 80023b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023bc:	f006 f9e4 	bl	8008788 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80023c0:	4854      	ldr	r0, [pc, #336]	; (8002514 <mainLoop+0x2d8>)
 80023c2:	f007 fdcd 	bl	8009f60 <HAL_I2C_GetState>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d1f5      	bne.n	80023b8 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <mainLoop+0x2e0>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80023d4:	4a59      	ldr	r2, [pc, #356]	; (800253c <mainLoop+0x300>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	2002      	movs	r0, #2
 80023da:	f000 fa5f 	bl	800289c <lcd_print>
 80023de:	e008      	b.n	80023f2 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80023e0:	4b4e      	ldr	r3, [pc, #312]	; (800251c <mainLoop+0x2e0>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d104      	bne.n	80023f2 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80023e8:	4a55      	ldr	r2, [pc, #340]	; (8002540 <mainLoop+0x304>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	2002      	movs	r0, #2
 80023ee:	f000 fa55 	bl	800289c <lcd_print>
			  }

			  ilkOkuma=1;
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <mainLoop+0x2f0>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e014      	b.n	8002424 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80023fa:	4b48      	ldr	r3, [pc, #288]	; (800251c <mainLoop+0x2e0>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d105      	bne.n	800240e <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8002402:	4a50      	ldr	r2, [pc, #320]	; (8002544 <mainLoop+0x308>)
 8002404:	2101      	movs	r1, #1
 8002406:	2002      	movs	r0, #2
 8002408:	f000 fa48 	bl	800289c <lcd_print>
 800240c:	e008      	b.n	8002420 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 800240e:	4b43      	ldr	r3, [pc, #268]	; (800251c <mainLoop+0x2e0>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d104      	bne.n	8002420 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8002416:	4a4c      	ldr	r2, [pc, #304]	; (8002548 <mainLoop+0x30c>)
 8002418:	2101      	movs	r1, #1
 800241a:	2002      	movs	r0, #2
 800241c:	f000 fa3e 	bl	800289c <lcd_print>
			  }
			  lcd_clear();
 8002420:	f000 fa8b 	bl	800293a <lcd_clear>
		  }

		  lcd_clear();
 8002424:	f000 fa89 	bl	800293a <lcd_clear>

		  eepromKontrol(1);
 8002428:	2001      	movs	r0, #1
 800242a:	f005 f869 	bl	8007500 <eepromKontrol>
		  hafizaOku=1;
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <mainLoop+0x2ec>)
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8002434:	4b45      	ldr	r3, [pc, #276]	; (800254c <mainLoop+0x310>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d11c      	bne.n	8002476 <mainLoop+0x23a>
 800243c:	4b44      	ldr	r3, [pc, #272]	; (8002550 <mainLoop+0x314>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	f083 0301 	eor.w	r3, r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <mainLoop+0x23a>
 800244a:	4b42      	ldr	r3, [pc, #264]	; (8002554 <mainLoop+0x318>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d111      	bne.n	8002476 <mainLoop+0x23a>
			lcd_clear();
 8002452:	f000 fa72 	bl	800293a <lcd_clear>
			HAL_Delay(10);
 8002456:	200a      	movs	r0, #10
 8002458:	f006 f996 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800245c:	4a3e      	ldr	r2, [pc, #248]	; (8002558 <mainLoop+0x31c>)
 800245e:	2101      	movs	r1, #1
 8002460:	2001      	movs	r0, #1
 8002462:	f000 fa1b 	bl	800289c <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8002466:	4a3d      	ldr	r2, [pc, #244]	; (800255c <mainLoop+0x320>)
 8002468:	2101      	movs	r1, #1
 800246a:	2002      	movs	r0, #2
 800246c:	f000 fa16 	bl	800289c <lcd_print>
			mesajYazildi=1;
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <mainLoop+0x314>)
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <mainLoop+0x310>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d112      	bne.n	80024a4 <mainLoop+0x268>
 800247e:	2102      	movs	r1, #2
 8002480:	481e      	ldr	r0, [pc, #120]	; (80024fc <mainLoop+0x2c0>)
 8002482:	f006 ff51 	bl	8009328 <HAL_GPIO_ReadPin>
 8002486:	4603      	mov	r3, r0
 8002488:	2b01      	cmp	r3, #1
 800248a:	d10b      	bne.n	80024a4 <mainLoop+0x268>
 800248c:	2104      	movs	r1, #4
 800248e:	481b      	ldr	r0, [pc, #108]	; (80024fc <mainLoop+0x2c0>)
 8002490:	f006 ff4a 	bl	8009328 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b01      	cmp	r3, #1
 8002498:	d104      	bne.n	80024a4 <mainLoop+0x268>
			menuGiris=1;
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <mainLoop+0x310>)
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80024a0:	f000 fa4b 	bl	800293a <lcd_clear>
		}

		if(menuGiris==1) {
 80024a4:	4b29      	ldr	r3, [pc, #164]	; (800254c <mainLoop+0x310>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <mainLoop+0x274>
			menu();
 80024ac:	f001 fa44 	bl	8003938 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80024b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024b4:	4812      	ldr	r0, [pc, #72]	; (8002500 <mainLoop+0x2c4>)
 80024b6:	f006 ff66 	bl	8009386 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80024ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024be:	4828      	ldr	r0, [pc, #160]	; (8002560 <mainLoop+0x324>)
 80024c0:	f006 ff32 	bl	8009328 <HAL_GPIO_ReadPin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10a      	bne.n	80024e0 <mainLoop+0x2a4>
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <mainLoop+0x328>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <mainLoop+0x2a4>
			stopVar=1;
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <mainLoop+0x32c>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e002      	b.n	80024e6 <mainLoop+0x2aa>
		} else {
			stopVar=0;
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <mainLoop+0x32c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80024e6:	f7fd ffe7 	bl	80004b8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80024ea:	f7fe f819 	bl	8000520 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80024ee:	f7fe f85d 	bl	80005ac <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80024f2:	f7fe f8ad 	bl	8000650 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80024f6:	f7ff fc07 	bl	8001d08 <checkDemoModCalisma>
		checkLCDBacklight();
 80024fa:	e6a2      	b.n	8002242 <mainLoop+0x6>
 80024fc:	40010800 	.word	0x40010800
 8002500:	40011000 	.word	0x40011000
 8002504:	20000253 	.word	0x20000253
 8002508:	20000200 	.word	0x20000200
 800250c:	2000021c 	.word	0x2000021c
 8002510:	20000250 	.word	0x20000250
 8002514:	200003ac 	.word	0x200003ac
 8002518:	20000128 	.word	0x20000128
 800251c:	20000245 	.word	0x20000245
 8002520:	0800cf84 	.word	0x0800cf84
 8002524:	0800cf98 	.word	0x0800cf98
 8002528:	20000251 	.word	0x20000251
 800252c:	20000252 	.word	0x20000252
 8002530:	0800cfac 	.word	0x0800cfac
 8002534:	0800cfc0 	.word	0x0800cfc0
 8002538:	0800cfd4 	.word	0x0800cfd4
 800253c:	0800cfe8 	.word	0x0800cfe8
 8002540:	0800cffc 	.word	0x0800cffc
 8002544:	0800d010 	.word	0x0800d010
 8002548:	0800d024 	.word	0x0800d024
 800254c:	20000241 	.word	0x20000241
 8002550:	20000258 	.word	0x20000258
 8002554:	20000242 	.word	0x20000242
 8002558:	0800d038 	.word	0x0800d038
 800255c:	0800d04c 	.word	0x0800d04c
 8002560:	40010c00 	.word	0x40010c00
 8002564:	20000279 	.word	0x20000279
 8002568:	20000276 	.word	0x20000276

0800256c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af02      	add	r7, sp, #8
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f023 030f 	bic.w	r3, r3, #15
 800257c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002584:	7b7b      	ldrb	r3, [r7, #13]
 8002586:	f043 030c 	orr.w	r3, r3, #12
 800258a:	b2db      	uxtb	r3, r3
 800258c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800258e:	7b7b      	ldrb	r3, [r7, #13]
 8002590:	f043 0308 	orr.w	r3, r3, #8
 8002594:	b2db      	uxtb	r3, r3
 8002596:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002598:	7b3b      	ldrb	r3, [r7, #12]
 800259a:	f043 030c 	orr.w	r3, r3, #12
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80025a2:	7b3b      	ldrb	r3, [r7, #12]
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80025ac:	bf00      	nop
 80025ae:	4825      	ldr	r0, [pc, #148]	; (8002644 <lcd_send_cmd+0xd8>)
 80025b0:	f007 fce3 	bl	8009f7a <HAL_I2C_GetError>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d0f9      	beq.n	80025ae <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80025ba:	bf00      	nop
 80025bc:	4821      	ldr	r0, [pc, #132]	; (8002644 <lcd_send_cmd+0xd8>)
 80025be:	f007 fccf 	bl	8009f60 <HAL_I2C_GetState>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d1f9      	bne.n	80025bc <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80025c8:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <lcd_send_cmd+0xdc>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d116      	bne.n	80025fe <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e00f      	b.n	80025f6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	3310      	adds	r3, #16
 80025da:	443b      	add	r3, r7
 80025dc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	f022 0208 	bic.w	r2, r2, #8
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	3310      	adds	r3, #16
 80025ea:	443b      	add	r3, r7
 80025ec:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	3301      	adds	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d9ec      	bls.n	80025d6 <lcd_send_cmd+0x6a>
 80025fc:	e015      	b.n	800262a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80025fe:	2300      	movs	r3, #0
 8002600:	73bb      	strb	r3, [r7, #14]
 8002602:	e00f      	b.n	8002624 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8002604:	7bbb      	ldrb	r3, [r7, #14]
 8002606:	3310      	adds	r3, #16
 8002608:	443b      	add	r3, r7
 800260a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800260e:	7bbb      	ldrb	r3, [r7, #14]
 8002610:	f042 0208 	orr.w	r2, r2, #8
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	3310      	adds	r3, #16
 8002618:	443b      	add	r3, r7
 800261a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800261e:	7bbb      	ldrb	r3, [r7, #14]
 8002620:	3301      	adds	r3, #1
 8002622:	73bb      	strb	r3, [r7, #14]
 8002624:	7bbb      	ldrb	r3, [r7, #14]
 8002626:	2b03      	cmp	r3, #3
 8002628:	d9ec      	bls.n	8002604 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800262a:	f107 0208 	add.w	r2, r7, #8
 800262e:	2364      	movs	r3, #100	; 0x64
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2304      	movs	r3, #4
 8002634:	214e      	movs	r1, #78	; 0x4e
 8002636:	4803      	ldr	r0, [pc, #12]	; (8002644 <lcd_send_cmd+0xd8>)
 8002638:	f007 f832 	bl	80096a0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200003ac 	.word	0x200003ac
 8002648:	20000382 	.word	0x20000382

0800264c <lcd_send_data>:

void lcd_send_data (char data) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af02      	add	r7, sp, #8
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f023 030f 	bic.w	r3, r3, #15
 800265c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002664:	7b7b      	ldrb	r3, [r7, #13]
 8002666:	f043 030d 	orr.w	r3, r3, #13
 800266a:	b2db      	uxtb	r3, r3
 800266c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800266e:	7b7b      	ldrb	r3, [r7, #13]
 8002670:	f043 0309 	orr.w	r3, r3, #9
 8002674:	b2db      	uxtb	r3, r3
 8002676:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002678:	7b3b      	ldrb	r3, [r7, #12]
 800267a:	f043 030d 	orr.w	r3, r3, #13
 800267e:	b2db      	uxtb	r3, r3
 8002680:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002682:	7b3b      	ldrb	r3, [r7, #12]
 8002684:	f043 0309 	orr.w	r3, r3, #9
 8002688:	b2db      	uxtb	r3, r3
 800268a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800268c:	bf00      	nop
 800268e:	4825      	ldr	r0, [pc, #148]	; (8002724 <lcd_send_data+0xd8>)
 8002690:	f007 fc73 	bl	8009f7a <HAL_I2C_GetError>
 8002694:	4603      	mov	r3, r0
 8002696:	2b04      	cmp	r3, #4
 8002698:	d0f9      	beq.n	800268e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800269a:	bf00      	nop
 800269c:	4821      	ldr	r0, [pc, #132]	; (8002724 <lcd_send_data+0xd8>)
 800269e:	f007 fc5f 	bl	8009f60 <HAL_I2C_GetState>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d1f9      	bne.n	800269c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80026a8:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <lcd_send_data+0xdc>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d116      	bne.n	80026de <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	e00f      	b.n	80026d6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	3310      	adds	r3, #16
 80026ba:	443b      	add	r3, r7
 80026bc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	f022 0208 	bic.w	r2, r2, #8
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	3310      	adds	r3, #16
 80026ca:	443b      	add	r3, r7
 80026cc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	3301      	adds	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d9ec      	bls.n	80026b6 <lcd_send_data+0x6a>
 80026dc:	e015      	b.n	800270a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80026de:	2300      	movs	r3, #0
 80026e0:	73bb      	strb	r3, [r7, #14]
 80026e2:	e00f      	b.n	8002704 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80026e4:	7bbb      	ldrb	r3, [r7, #14]
 80026e6:	3310      	adds	r3, #16
 80026e8:	443b      	add	r3, r7
 80026ea:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80026ee:	7bbb      	ldrb	r3, [r7, #14]
 80026f0:	f042 0208 	orr.w	r2, r2, #8
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	3310      	adds	r3, #16
 80026f8:	443b      	add	r3, r7
 80026fa:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80026fe:	7bbb      	ldrb	r3, [r7, #14]
 8002700:	3301      	adds	r3, #1
 8002702:	73bb      	strb	r3, [r7, #14]
 8002704:	7bbb      	ldrb	r3, [r7, #14]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d9ec      	bls.n	80026e4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800270a:	f107 0208 	add.w	r2, r7, #8
 800270e:	2364      	movs	r3, #100	; 0x64
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2304      	movs	r3, #4
 8002714:	214e      	movs	r1, #78	; 0x4e
 8002716:	4803      	ldr	r0, [pc, #12]	; (8002724 <lcd_send_data+0xd8>)
 8002718:	f006 ffc2 	bl	80096a0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200003ac 	.word	0x200003ac
 8002728:	20000382 	.word	0x20000382

0800272c <lcd_send_string>:

void lcd_send_string (char *str) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	while (*str) {
 8002734:	e006      	b.n	8002744 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff84 	bl	800264c <lcd_send_data>
	while (*str) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f4      	bne.n	8002736 <lcd_send_string+0xa>
	}
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <lcd_send_char>:

void lcd_send_char(char ch) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af02      	add	r7, sp, #8
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f023 030f 	bic.w	r3, r3, #15
 8002768:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8002770:	7b7b      	ldrb	r3, [r7, #13]
 8002772:	f043 030d 	orr.w	r3, r3, #13
 8002776:	b2db      	uxtb	r3, r3
 8002778:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 800277a:	7b7b      	ldrb	r3, [r7, #13]
 800277c:	f043 0309 	orr.w	r3, r3, #9
 8002780:	b2db      	uxtb	r3, r3
 8002782:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8002784:	7b3b      	ldrb	r3, [r7, #12]
 8002786:	f043 030d 	orr.w	r3, r3, #13
 800278a:	b2db      	uxtb	r3, r3
 800278c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800278e:	7b3b      	ldrb	r3, [r7, #12]
 8002790:	f043 0309 	orr.w	r3, r3, #9
 8002794:	b2db      	uxtb	r3, r3
 8002796:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8002798:	bf00      	nop
 800279a:	4825      	ldr	r0, [pc, #148]	; (8002830 <lcd_send_char+0xd8>)
 800279c:	f007 fbed 	bl	8009f7a <HAL_I2C_GetError>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d0f9      	beq.n	800279a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80027a6:	bf00      	nop
 80027a8:	4821      	ldr	r0, [pc, #132]	; (8002830 <lcd_send_char+0xd8>)
 80027aa:	f007 fbd9 	bl	8009f60 <HAL_I2C_GetState>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d1f9      	bne.n	80027a8 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <lcd_send_char+0xdc>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d116      	bne.n	80027ea <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e00f      	b.n	80027e2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	3310      	adds	r3, #16
 80027c6:	443b      	add	r3, r7
 80027c8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	f022 0208 	bic.w	r2, r2, #8
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	3310      	adds	r3, #16
 80027d6:	443b      	add	r3, r7
 80027d8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	3301      	adds	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d9ec      	bls.n	80027c2 <lcd_send_char+0x6a>
 80027e8:	e015      	b.n	8002816 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	73bb      	strb	r3, [r7, #14]
 80027ee:	e00f      	b.n	8002810 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80027f0:	7bbb      	ldrb	r3, [r7, #14]
 80027f2:	3310      	adds	r3, #16
 80027f4:	443b      	add	r3, r7
 80027f6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80027fa:	7bbb      	ldrb	r3, [r7, #14]
 80027fc:	f042 0208 	orr.w	r2, r2, #8
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	3310      	adds	r3, #16
 8002804:	443b      	add	r3, r7
 8002806:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800280a:	7bbb      	ldrb	r3, [r7, #14]
 800280c:	3301      	adds	r3, #1
 800280e:	73bb      	strb	r3, [r7, #14]
 8002810:	7bbb      	ldrb	r3, [r7, #14]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d9ec      	bls.n	80027f0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8002816:	f107 0208 	add.w	r2, r7, #8
 800281a:	2364      	movs	r3, #100	; 0x64
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2304      	movs	r3, #4
 8002820:	214e      	movs	r1, #78	; 0x4e
 8002822:	4803      	ldr	r0, [pc, #12]	; (8002830 <lcd_send_char+0xd8>)
 8002824:	f006 ff3c 	bl	80096a0 <HAL_I2C_Master_Transmit>
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200003ac 	.word	0x200003ac
 8002834:	20000382 	.word	0x20000382

08002838 <lcd_init>:

void lcd_init (void) {
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800283c:	2002      	movs	r0, #2
 800283e:	f7ff fe95 	bl	800256c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8002842:	2028      	movs	r0, #40	; 0x28
 8002844:	f7ff fe92 	bl	800256c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8002848:	200c      	movs	r0, #12
 800284a:	f7ff fe8f 	bl	800256c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800284e:	2080      	movs	r0, #128	; 0x80
 8002850:	f7ff fe8c 	bl	800256c <lcd_send_cmd>
	lcd_backlight(1);
 8002854:	2001      	movs	r0, #1
 8002856:	f000 f88f 	bl	8002978 <lcd_backlight>
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}

0800285e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	460a      	mov	r2, r1
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	4613      	mov	r3, r2
 800286c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d106      	bne.n	8002882 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8002874:	79bb      	ldrb	r3, [r7, #6]
 8002876:	337f      	adds	r3, #127	; 0x7f
 8002878:	b2db      	uxtb	r3, r3
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fe76 	bl	800256c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8002880:	e008      	b.n	8002894 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d105      	bne.n	8002894 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8002888:	79bb      	ldrb	r3, [r7, #6]
 800288a:	3b41      	subs	r3, #65	; 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fe6c 	bl	800256c <lcd_send_cmd>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	603a      	str	r2, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
 80028a8:	460b      	mov	r3, r1
 80028aa:	71bb      	strb	r3, [r7, #6]
	char buffer[17];
	strncpy(buffer, str, 16);
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	2210      	movs	r2, #16
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f009 fe8a 	bl	800c5ce <strncpy>
	buffer[16] = '\0';
 80028ba:	2300      	movs	r3, #0
 80028bc:	773b      	strb	r3, [r7, #28]

	int len = strlen(buffer);
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fcae 	bl	8000224 <strlen>
 80028c8:	4603      	mov	r3, r0
 80028ca:	623b      	str	r3, [r7, #32]
	for (int i = len; i < 16; i++) {
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
 80028d0:	e008      	b.n	80028e4 <lcd_print+0x48>
	    buffer[i] = ' ';
 80028d2:	f107 020c 	add.w	r2, r7, #12
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	4413      	add	r3, r2
 80028da:	2220      	movs	r2, #32
 80028dc:	701a      	strb	r2, [r3, #0]
	for (int i = len; i < 16; i++) {
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	3301      	adds	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	2b0f      	cmp	r3, #15
 80028e8:	ddf3      	ble.n	80028d2 <lcd_print+0x36>
	}
	buffer[16] = '\0';
 80028ea:	2300      	movs	r3, #0
 80028ec:	773b      	strb	r3, [r7, #28]
	lcd_gotoxy(row, column);
 80028ee:	79ba      	ldrb	r2, [r7, #6]
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ffb2 	bl	800285e <lcd_gotoxy>
	lcd_send_string(buffer);
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff14 	bl	800272c <lcd_send_string>
}
 8002904:	bf00      	nop
 8002906:	3728      	adds	r7, #40	; 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
 8002916:	460b      	mov	r3, r1
 8002918:	71bb      	strb	r3, [r7, #6]
 800291a:	4613      	mov	r3, r2
 800291c:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 800291e:	79ba      	ldrb	r2, [r7, #6]
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff9a 	bl	800285e <lcd_gotoxy>
    lcd_send_char(ch);
 800292a:	797b      	ldrb	r3, [r7, #5]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff13 	bl	8002758 <lcd_send_char>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <lcd_clear>:

void lcd_clear(void) {
 800293a:	b580      	push	{r7, lr}
 800293c:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800293e:	2001      	movs	r0, #1
 8002940:	f7ff fe14 	bl	800256c <lcd_send_cmd>
    HAL_Delay(2);
 8002944:	2002      	movs	r0, #2
 8002946:	f005 ff1f 	bl	8008788 <HAL_Delay>
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}

0800294e <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	460a      	mov	r2, r1
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	4613      	mov	r3, r2
 800295c:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 800295e:	79ba      	ldrb	r2, [r7, #6]
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff7a 	bl	800285e <lcd_gotoxy>

    lcd_send_char(' ');
 800296a:	2020      	movs	r0, #32
 800296c:	f7ff fef4 	bl	8002758 <lcd_send_char>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <lcd_backlight+0x20>)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f7ff fdef 	bl	800256c <lcd_send_cmd>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000382 	.word	0x20000382

0800299c <lcd_cursor>:

void lcd_cursor(int state) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d106      	bne.n	80029b8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80029aa:	200e      	movs	r0, #14
 80029ac:	f7ff fdde 	bl	800256c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80029b0:	200f      	movs	r0, #15
 80029b2:	f7ff fddb 	bl	800256c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80029b6:	e002      	b.n	80029be <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80029b8:	200c      	movs	r0, #12
 80029ba:	f7ff fdd7 	bl	800256c <lcd_send_cmd>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029cc:	f3bf 8f4f 	dsb	sy
}
 80029d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <__NVIC_SystemReset+0x24>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029da:	4904      	ldr	r1, [pc, #16]	; (80029ec <__NVIC_SystemReset+0x24>)
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <__NVIC_SystemReset+0x28>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80029e2:	f3bf 8f4f 	dsb	sy
}
 80029e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <__NVIC_SystemReset+0x20>
 80029ec:	e000ed00 	.word	0xe000ed00
 80029f0:	05fa0004 	.word	0x05fa0004

080029f4 <printTemplate>:
int checkSlideVal(int state);
void slideText(const char* text, int startPos, int startLine, int state);

void menu(void);

void printTemplate(int type, int page) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80029fe:	20c8      	movs	r0, #200	; 0xc8
 8002a00:	f005 fec2 	bl	8008788 <HAL_Delay>
	lcd_clear();
 8002a04:	f7ff ff99 	bl	800293a <lcd_clear>
	if(type == 1 && page == 0) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d143      	bne.n	8002a96 <printTemplate+0xa2>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d140      	bne.n	8002a96 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8002a14:	4a9d      	ldr	r2, [pc, #628]	; (8002c8c <printTemplate+0x298>)
 8002a16:	2101      	movs	r1, #1
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f7ff ff3f 	bl	800289c <lcd_print>
		lcd_print(2, 3, "0");
 8002a1e:	4a9c      	ldr	r2, [pc, #624]	; (8002c90 <printTemplate+0x29c>)
 8002a20:	2103      	movs	r1, #3
 8002a22:	2002      	movs	r0, #2
 8002a24:	f7ff ff3a 	bl	800289c <lcd_print>
		lcd_print(2, 4, "1");
 8002a28:	4a9a      	ldr	r2, [pc, #616]	; (8002c94 <printTemplate+0x2a0>)
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f7ff ff35 	bl	800289c <lcd_print>
		lcd_print(2, 5, "2");
 8002a32:	4a99      	ldr	r2, [pc, #612]	; (8002c98 <printTemplate+0x2a4>)
 8002a34:	2105      	movs	r1, #5
 8002a36:	2002      	movs	r0, #2
 8002a38:	f7ff ff30 	bl	800289c <lcd_print>
		lcd_print(2, 6, "3");
 8002a3c:	4a97      	ldr	r2, [pc, #604]	; (8002c9c <printTemplate+0x2a8>)
 8002a3e:	2106      	movs	r1, #6
 8002a40:	2002      	movs	r0, #2
 8002a42:	f7ff ff2b 	bl	800289c <lcd_print>
		lcd_print(2, 7, "4");
 8002a46:	4a96      	ldr	r2, [pc, #600]	; (8002ca0 <printTemplate+0x2ac>)
 8002a48:	2107      	movs	r1, #7
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f7ff ff26 	bl	800289c <lcd_print>
		lcd_print(2, 10, "5");
 8002a50:	4a94      	ldr	r2, [pc, #592]	; (8002ca4 <printTemplate+0x2b0>)
 8002a52:	210a      	movs	r1, #10
 8002a54:	2002      	movs	r0, #2
 8002a56:	f7ff ff21 	bl	800289c <lcd_print>
		lcd_print(2, 11, "6");
 8002a5a:	4a93      	ldr	r2, [pc, #588]	; (8002ca8 <printTemplate+0x2b4>)
 8002a5c:	210b      	movs	r1, #11
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f7ff ff1c 	bl	800289c <lcd_print>
		lcd_print(2, 12, "7");
 8002a64:	4a91      	ldr	r2, [pc, #580]	; (8002cac <printTemplate+0x2b8>)
 8002a66:	210c      	movs	r1, #12
 8002a68:	2002      	movs	r0, #2
 8002a6a:	f7ff ff17 	bl	800289c <lcd_print>
		lcd_print(2, 13, "8");
 8002a6e:	4a90      	ldr	r2, [pc, #576]	; (8002cb0 <printTemplate+0x2bc>)
 8002a70:	210d      	movs	r1, #13
 8002a72:	2002      	movs	r0, #2
 8002a74:	f7ff ff12 	bl	800289c <lcd_print>
		lcd_print(2, 14, "9");
 8002a78:	4a8e      	ldr	r2, [pc, #568]	; (8002cb4 <printTemplate+0x2c0>)
 8002a7a:	210e      	movs	r1, #14
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f7ff ff0d 	bl	800289c <lcd_print>
		lcd_print(1, 5, machineID);
 8002a82:	4a8d      	ldr	r2, [pc, #564]	; (8002cb8 <printTemplate+0x2c4>)
 8002a84:	2105      	movs	r1, #5
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7ff ff08 	bl	800289c <lcd_print>
		lcd_gotoxy(2, 3);
 8002a8c:	2103      	movs	r1, #3
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f7ff fee5 	bl	800285e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8002a94:	e0f5      	b.n	8002c82 <printTemplate+0x28e>
	} else if(type == 2) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d178      	bne.n	8002b8e <printTemplate+0x19a>
		if(page == 1) {
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d114      	bne.n	8002acc <printTemplate+0xd8>
			lcd_clear();
 8002aa2:	f7ff ff4a 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002aa6:	2064      	movs	r0, #100	; 0x64
 8002aa8:	f005 fe6e 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8002aac:	4a83      	ldr	r2, [pc, #524]	; (8002cbc <printTemplate+0x2c8>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7ff fef3 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8002ab6:	4a82      	ldr	r2, [pc, #520]	; (8002cc0 <printTemplate+0x2cc>)
 8002ab8:	2107      	movs	r1, #7
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7ff feee 	bl	800289c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8002ac0:	4a80      	ldr	r2, [pc, #512]	; (8002cc4 <printTemplate+0x2d0>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f7ff fee9 	bl	800289c <lcd_print>
}
 8002aca:	e0da      	b.n	8002c82 <printTemplate+0x28e>
		} else if(page == 2) {
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d114      	bne.n	8002afc <printTemplate+0x108>
			lcd_clear();
 8002ad2:	f7ff ff32 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002ad6:	2064      	movs	r0, #100	; 0x64
 8002ad8:	f005 fe56 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8002adc:	4a77      	ldr	r2, [pc, #476]	; (8002cbc <printTemplate+0x2c8>)
 8002ade:	2101      	movs	r1, #1
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f7ff fedb 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8002ae6:	4a76      	ldr	r2, [pc, #472]	; (8002cc0 <printTemplate+0x2cc>)
 8002ae8:	2107      	movs	r1, #7
 8002aea:	2001      	movs	r0, #1
 8002aec:	f7ff fed6 	bl	800289c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8002af0:	4a75      	ldr	r2, [pc, #468]	; (8002cc8 <printTemplate+0x2d4>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	2002      	movs	r0, #2
 8002af6:	f7ff fed1 	bl	800289c <lcd_print>
}
 8002afa:	e0c2      	b.n	8002c82 <printTemplate+0x28e>
		} else if(page == 3) {
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d114      	bne.n	8002b2c <printTemplate+0x138>
			lcd_clear();
 8002b02:	f7ff ff1a 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002b06:	2064      	movs	r0, #100	; 0x64
 8002b08:	f005 fe3e 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8002b0c:	4a6b      	ldr	r2, [pc, #428]	; (8002cbc <printTemplate+0x2c8>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2001      	movs	r0, #1
 8002b12:	f7ff fec3 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8002b16:	4a6a      	ldr	r2, [pc, #424]	; (8002cc0 <printTemplate+0x2cc>)
 8002b18:	2107      	movs	r1, #7
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f7ff febe 	bl	800289c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8002b20:	4a6a      	ldr	r2, [pc, #424]	; (8002ccc <printTemplate+0x2d8>)
 8002b22:	2101      	movs	r1, #1
 8002b24:	2002      	movs	r0, #2
 8002b26:	f7ff feb9 	bl	800289c <lcd_print>
}
 8002b2a:	e0aa      	b.n	8002c82 <printTemplate+0x28e>
		} else if(page == 4) {
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d114      	bne.n	8002b5c <printTemplate+0x168>
			lcd_clear();
 8002b32:	f7ff ff02 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002b36:	2064      	movs	r0, #100	; 0x64
 8002b38:	f005 fe26 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8002b3c:	4a5f      	ldr	r2, [pc, #380]	; (8002cbc <printTemplate+0x2c8>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff feab 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8002b46:	4a5e      	ldr	r2, [pc, #376]	; (8002cc0 <printTemplate+0x2cc>)
 8002b48:	2107      	movs	r1, #7
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7ff fea6 	bl	800289c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8002b50:	4a5f      	ldr	r2, [pc, #380]	; (8002cd0 <printTemplate+0x2dc>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	2002      	movs	r0, #2
 8002b56:	f7ff fea1 	bl	800289c <lcd_print>
}
 8002b5a:	e092      	b.n	8002c82 <printTemplate+0x28e>
		} else if(page == 5) {
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	f040 808f 	bne.w	8002c82 <printTemplate+0x28e>
			lcd_clear();
 8002b64:	f7ff fee9 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002b68:	2064      	movs	r0, #100	; 0x64
 8002b6a:	f005 fe0d 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8002b6e:	4a53      	ldr	r2, [pc, #332]	; (8002cbc <printTemplate+0x2c8>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7ff fe92 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8002b78:	4a51      	ldr	r2, [pc, #324]	; (8002cc0 <printTemplate+0x2cc>)
 8002b7a:	2107      	movs	r1, #7
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7ff fe8d 	bl	800289c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8002b82:	4a54      	ldr	r2, [pc, #336]	; (8002cd4 <printTemplate+0x2e0>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	2002      	movs	r0, #2
 8002b88:	f7ff fe88 	bl	800289c <lcd_print>
}
 8002b8c:	e079      	b.n	8002c82 <printTemplate+0x28e>
	} else if(type == 3) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d176      	bne.n	8002c82 <printTemplate+0x28e>
		if(page == 1) {
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d114      	bne.n	8002bc4 <printTemplate+0x1d0>
			lcd_clear();
 8002b9a:	f7ff fece 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002b9e:	2064      	movs	r0, #100	; 0x64
 8002ba0:	f005 fdf2 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8002ba4:	4a4c      	ldr	r2, [pc, #304]	; (8002cd8 <printTemplate+0x2e4>)
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f7ff fe77 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8002bae:	4a4b      	ldr	r2, [pc, #300]	; (8002cdc <printTemplate+0x2e8>)
 8002bb0:	2107      	movs	r1, #7
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7ff fe72 	bl	800289c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8002bb8:	4a42      	ldr	r2, [pc, #264]	; (8002cc4 <printTemplate+0x2d0>)
 8002bba:	2101      	movs	r1, #1
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	f7ff fe6d 	bl	800289c <lcd_print>
}
 8002bc2:	e05e      	b.n	8002c82 <printTemplate+0x28e>
		} else if(page == 2) {
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d114      	bne.n	8002bf4 <printTemplate+0x200>
			lcd_clear();
 8002bca:	f7ff feb6 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002bce:	2064      	movs	r0, #100	; 0x64
 8002bd0:	f005 fdda 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8002bd4:	4a40      	ldr	r2, [pc, #256]	; (8002cd8 <printTemplate+0x2e4>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7ff fe5f 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8002bde:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <printTemplate+0x2e8>)
 8002be0:	2107      	movs	r1, #7
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7ff fe5a 	bl	800289c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8002be8:	4a37      	ldr	r2, [pc, #220]	; (8002cc8 <printTemplate+0x2d4>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	2002      	movs	r0, #2
 8002bee:	f7ff fe55 	bl	800289c <lcd_print>
}
 8002bf2:	e046      	b.n	8002c82 <printTemplate+0x28e>
		} else if(page == 3) {
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d114      	bne.n	8002c24 <printTemplate+0x230>
			lcd_clear();
 8002bfa:	f7ff fe9e 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002bfe:	2064      	movs	r0, #100	; 0x64
 8002c00:	f005 fdc2 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8002c04:	4a34      	ldr	r2, [pc, #208]	; (8002cd8 <printTemplate+0x2e4>)
 8002c06:	2101      	movs	r1, #1
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f7ff fe47 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8002c0e:	4a33      	ldr	r2, [pc, #204]	; (8002cdc <printTemplate+0x2e8>)
 8002c10:	2107      	movs	r1, #7
 8002c12:	2001      	movs	r0, #1
 8002c14:	f7ff fe42 	bl	800289c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8002c18:	4a2c      	ldr	r2, [pc, #176]	; (8002ccc <printTemplate+0x2d8>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f7ff fe3d 	bl	800289c <lcd_print>
}
 8002c22:	e02e      	b.n	8002c82 <printTemplate+0x28e>
		} else if(page == 4) {
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d114      	bne.n	8002c54 <printTemplate+0x260>
			lcd_clear();
 8002c2a:	f7ff fe86 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002c2e:	2064      	movs	r0, #100	; 0x64
 8002c30:	f005 fdaa 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8002c34:	4a28      	ldr	r2, [pc, #160]	; (8002cd8 <printTemplate+0x2e4>)
 8002c36:	2101      	movs	r1, #1
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7ff fe2f 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8002c3e:	4a27      	ldr	r2, [pc, #156]	; (8002cdc <printTemplate+0x2e8>)
 8002c40:	2107      	movs	r1, #7
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7ff fe2a 	bl	800289c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8002c48:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <printTemplate+0x2dc>)
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	2002      	movs	r0, #2
 8002c4e:	f7ff fe25 	bl	800289c <lcd_print>
}
 8002c52:	e016      	b.n	8002c82 <printTemplate+0x28e>
		} else if(page == 5) {
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d113      	bne.n	8002c82 <printTemplate+0x28e>
			lcd_clear();
 8002c5a:	f7ff fe6e 	bl	800293a <lcd_clear>
			HAL_Delay(100);
 8002c5e:	2064      	movs	r0, #100	; 0x64
 8002c60:	f005 fd92 	bl	8008788 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <printTemplate+0x2e4>)
 8002c66:	2101      	movs	r1, #1
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f7ff fe17 	bl	800289c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <printTemplate+0x2e8>)
 8002c70:	2107      	movs	r1, #7
 8002c72:	2001      	movs	r0, #1
 8002c74:	f7ff fe12 	bl	800289c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <printTemplate+0x2e0>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f7ff fe0d 	bl	800289c <lcd_print>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	0800d060 	.word	0x0800d060
 8002c90:	0800d068 	.word	0x0800d068
 8002c94:	0800d06c 	.word	0x0800d06c
 8002c98:	0800d070 	.word	0x0800d070
 8002c9c:	0800d074 	.word	0x0800d074
 8002ca0:	0800d078 	.word	0x0800d078
 8002ca4:	0800d07c 	.word	0x0800d07c
 8002ca8:	0800d080 	.word	0x0800d080
 8002cac:	0800d084 	.word	0x0800d084
 8002cb0:	0800d088 	.word	0x0800d088
 8002cb4:	0800d08c 	.word	0x0800d08c
 8002cb8:	200001a0 	.word	0x200001a0
 8002cbc:	0800d090 	.word	0x0800d090
 8002cc0:	200001ac 	.word	0x200001ac
 8002cc4:	0800d098 	.word	0x0800d098
 8002cc8:	0800d0ac 	.word	0x0800d0ac
 8002ccc:	0800d0c0 	.word	0x0800d0c0
 8002cd0:	0800d0d4 	.word	0x0800d0d4
 8002cd4:	0800d0e8 	.word	0x0800d0e8
 8002cd8:	0800d0fc 	.word	0x0800d0fc
 8002cdc:	200001c0 	.word	0x200001c0

08002ce0 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <getCharFromCursorPosition+0x1c>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	781b      	ldrb	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	2000002c 	.word	0x2000002c

08002d00 <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, 20);
		strncpy((char *)&eepromData[passStartPos], wifiPass, 20);
	}
}

void readFromEEPROM(int state) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d121      	bne.n	8002d52 <readFromEEPROM+0x52>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <readFromEEPROM+0x9c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<20; i++) {
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e017      	b.n	8002d4a <readFromEEPROM+0x4a>
			if(eepromData[tempSSIDStartPos] != '\0') {
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <readFromEEPROM+0xa0>)
 8002d1e:	5cd3      	ldrb	r3, [r2, r3]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00f      	beq.n	8002d44 <readFromEEPROM+0x44>
				wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <readFromEEPROM+0xa0>)
 8002d28:	5cd3      	ldrb	r3, [r2, r3]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ffd8 	bl	8002ce0 <getCharFromCursorPosition>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <readFromEEPROM+0xa4>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	460a      	mov	r2, r1
 8002d3c:	701a      	strb	r2, [r3, #0]

				tempSSIDStartPos++;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	3301      	adds	r3, #1
 8002d42:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<20; i++) {
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	3301      	adds	r3, #1
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b13      	cmp	r3, #19
 8002d4e:	dde4      	ble.n	8002d1a <readFromEEPROM+0x1a>
				wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
				tempPassStartPos++;
			}
		}
	}
}
 8002d50:	e020      	b.n	8002d94 <readFromEEPROM+0x94>
		uint8_t tempPassStartPos = passStartPos;
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <readFromEEPROM+0xa8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<20; i++) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	e017      	b.n	8002d8e <readFromEEPROM+0x8e>
			if(eepromData[tempPassStartPos] != '\0') {
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <readFromEEPROM+0xa0>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00f      	beq.n	8002d88 <readFromEEPROM+0x88>
				wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <readFromEEPROM+0xa0>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ffb6 	bl	8002ce0 <getCharFromCursorPosition>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <readFromEEPROM+0xac>)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	460a      	mov	r2, r1
 8002d80:	701a      	strb	r2, [r3, #0]
				tempPassStartPos++;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	3301      	adds	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<20; i++) {
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b13      	cmp	r3, #19
 8002d92:	dde4      	ble.n	8002d5e <readFromEEPROM+0x5e>
}
 8002d94:	bf00      	nop
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000010 	.word	0x20000010
 8002da0:	20000128 	.word	0x20000128
 8002da4:	200001ac 	.word	0x200001ac
 8002da8:	20000014 	.word	0x20000014
 8002dac:	200001c0 	.word	0x200001c0

08002db0 <takeMachineID>:

void takeMachineID(int state) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af04      	add	r7, sp, #16
 8002db6:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8002db8:	2001      	movs	r0, #1
 8002dba:	f7ff fdef 	bl	800299c <lcd_cursor>

    int cursorPosition = 3;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8002dd0:	220c      	movs	r2, #12
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4899      	ldr	r0, [pc, #612]	; (800303c <takeMachineID+0x28c>)
 8002dd6:	f009 fc0d 	bl	800c5f4 <memset>
    }
    HAL_Delay(100);
 8002dda:	2064      	movs	r0, #100	; 0x64
 8002ddc:	f005 fcd4 	bl	8008788 <HAL_Delay>

    printTemplate(1, 0);
 8002de0:	2100      	movs	r1, #0
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7ff fe06 	bl	80029f4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8002de8:	2108      	movs	r1, #8
 8002dea:	4895      	ldr	r0, [pc, #596]	; (8003040 <takeMachineID+0x290>)
 8002dec:	f006 fa9c 	bl	8009328 <HAL_GPIO_ReadPin>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d137      	bne.n	8002e66 <takeMachineID+0xb6>
        	lcd_cursor(0);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7ff fdd0 	bl	800299c <lcd_cursor>

        	if(machineID[11] == '\0') {
 8002dfc:	4b8f      	ldr	r3, [pc, #572]	; (800303c <takeMachineID+0x28c>)
 8002dfe:	7adb      	ldrb	r3, [r3, #11]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d110      	bne.n	8002e26 <takeMachineID+0x76>
        		lcd_clear();
 8002e04:	f7ff fd99 	bl	800293a <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8002e08:	4a8e      	ldr	r2, [pc, #568]	; (8003044 <takeMachineID+0x294>)
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7ff fd45 	bl	800289c <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8002e12:	4a8d      	ldr	r2, [pc, #564]	; (8003048 <takeMachineID+0x298>)
 8002e14:	2101      	movs	r1, #1
 8002e16:	2002      	movs	r0, #2
 8002e18:	f7ff fd40 	bl	800289c <lcd_print>
        		HAL_Delay(1200);
 8002e1c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002e20:	f005 fcb2 	bl	8008788 <HAL_Delay>
        		goto mainSection;
 8002e24:	e7c8      	b.n	8002db8 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8002e26:	4b89      	ldr	r3, [pc, #548]	; (800304c <takeMachineID+0x29c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a89      	ldr	r2, [pc, #548]	; (8003050 <takeMachineID+0x2a0>)
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a83      	ldr	r2, [pc, #524]	; (800303c <takeMachineID+0x28c>)
 8002e30:	6810      	ldr	r0, [r2, #0]
 8002e32:	6851      	ldr	r1, [r2, #4]
 8002e34:	6892      	ldr	r2, [r2, #8]
 8002e36:	6018      	str	r0, [r3, #0]
 8002e38:	6059      	str	r1, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8002e3c:	20c8      	movs	r0, #200	; 0xc8
 8002e3e:	f005 fca3 	bl	8008788 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8002e42:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002e46:	9302      	str	r3, [sp, #8]
 8002e48:	236e      	movs	r3, #110	; 0x6e
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	4b80      	ldr	r3, [pc, #512]	; (8003050 <takeMachineID+0x2a0>)
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	236e      	movs	r3, #110	; 0x6e
 8002e52:	2200      	movs	r2, #0
 8002e54:	21a0      	movs	r1, #160	; 0xa0
 8002e56:	487f      	ldr	r0, [pc, #508]	; (8003054 <takeMachineID+0x2a4>)
 8002e58:	f006 fd20 	bl	800989c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8002e5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e60:	f005 fc92 	bl	8008788 <HAL_Delay>

            break;
 8002e64:	e0e5      	b.n	8003032 <takeMachineID+0x282>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8002e66:	2101      	movs	r1, #1
 8002e68:	4875      	ldr	r0, [pc, #468]	; (8003040 <takeMachineID+0x290>)
 8002e6a:	f006 fa5d 	bl	8009328 <HAL_GPIO_ReadPin>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d112      	bne.n	8002e9a <takeMachineID+0xea>
        	if(cursorPosition == 7) {
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b07      	cmp	r3, #7
 8002e78:	d102      	bne.n	8002e80 <takeMachineID+0xd0>
        		cursorPosition = 10;
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e008      	b.n	8002e92 <takeMachineID+0xe2>
        	} else if (cursorPosition == 14) {
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b0e      	cmp	r3, #14
 8002e84:	d102      	bne.n	8002e8c <takeMachineID+0xdc>
                cursorPosition = 3;
 8002e86:	2303      	movs	r3, #3
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e002      	b.n	8002e92 <takeMachineID+0xe2>
            } else {
            	cursorPosition++;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8002e92:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002e96:	f005 fc77 	bl	8008788 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8002e9a:	2108      	movs	r1, #8
 8002e9c:	486e      	ldr	r0, [pc, #440]	; (8003058 <takeMachineID+0x2a8>)
 8002e9e:	f006 fa43 	bl	8009328 <HAL_GPIO_ReadPin>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d112      	bne.n	8002ece <takeMachineID+0x11e>
            if (cursorPosition == 3) {
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d102      	bne.n	8002eb4 <takeMachineID+0x104>
                cursorPosition = 14;
 8002eae:	230e      	movs	r3, #14
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e008      	b.n	8002ec6 <takeMachineID+0x116>
            } else if(cursorPosition == 10) {
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b0a      	cmp	r3, #10
 8002eb8:	d102      	bne.n	8002ec0 <takeMachineID+0x110>
            	cursorPosition = 7;
 8002eba:	2307      	movs	r3, #7
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e002      	b.n	8002ec6 <takeMachineID+0x116>
            } else {
            	cursorPosition--;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8002ec6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002eca:	f005 fc5d 	bl	8008788 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8002ece:	2102      	movs	r1, #2
 8002ed0:	485b      	ldr	r0, [pc, #364]	; (8003040 <takeMachineID+0x290>)
 8002ed2:	f006 fa29 	bl	8009328 <HAL_GPIO_ReadPin>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d16c      	bne.n	8002fb6 <takeMachineID+0x206>
        	if(cursorPosition == 3) {
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d105      	bne.n	8002eee <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '0';
 8002ee2:	4a56      	ldr	r2, [pc, #344]	; (800303c <takeMachineID+0x28c>)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	2230      	movs	r2, #48	; 0x30
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e04f      	b.n	8002f8e <takeMachineID+0x1de>
        	} else if(cursorPosition == 4) {
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d105      	bne.n	8002f00 <takeMachineID+0x150>
        		machineID[machineIDLoc] = '1';
 8002ef4:	4a51      	ldr	r2, [pc, #324]	; (800303c <takeMachineID+0x28c>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	2231      	movs	r2, #49	; 0x31
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e046      	b.n	8002f8e <takeMachineID+0x1de>
        	} else if(cursorPosition == 5) {
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d105      	bne.n	8002f12 <takeMachineID+0x162>
        		machineID[machineIDLoc] = '2';
 8002f06:	4a4d      	ldr	r2, [pc, #308]	; (800303c <takeMachineID+0x28c>)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	2232      	movs	r2, #50	; 0x32
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e03d      	b.n	8002f8e <takeMachineID+0x1de>
        	} else if(cursorPosition == 6) {
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d105      	bne.n	8002f24 <takeMachineID+0x174>
        		machineID[machineIDLoc] = '3';
 8002f18:	4a48      	ldr	r2, [pc, #288]	; (800303c <takeMachineID+0x28c>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	2233      	movs	r2, #51	; 0x33
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e034      	b.n	8002f8e <takeMachineID+0x1de>
        	} else if(cursorPosition == 7) {
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b07      	cmp	r3, #7
 8002f28:	d105      	bne.n	8002f36 <takeMachineID+0x186>
        		machineID[machineIDLoc] = '4';
 8002f2a:	4a44      	ldr	r2, [pc, #272]	; (800303c <takeMachineID+0x28c>)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	2234      	movs	r2, #52	; 0x34
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	e02b      	b.n	8002f8e <takeMachineID+0x1de>
        	} else if(cursorPosition == 10) {
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b0a      	cmp	r3, #10
 8002f3a:	d105      	bne.n	8002f48 <takeMachineID+0x198>
        		machineID[machineIDLoc] = '5';
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	; (800303c <takeMachineID+0x28c>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	2235      	movs	r2, #53	; 0x35
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e022      	b.n	8002f8e <takeMachineID+0x1de>
        	} else if(cursorPosition == 11) {
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b0b      	cmp	r3, #11
 8002f4c:	d105      	bne.n	8002f5a <takeMachineID+0x1aa>
        		machineID[machineIDLoc] = '6';
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <takeMachineID+0x28c>)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	2236      	movs	r2, #54	; 0x36
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	e019      	b.n	8002f8e <takeMachineID+0x1de>
        	} else if(cursorPosition == 12) {
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d105      	bne.n	8002f6c <takeMachineID+0x1bc>
        		machineID[machineIDLoc] = '7';
 8002f60:	4a36      	ldr	r2, [pc, #216]	; (800303c <takeMachineID+0x28c>)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	2237      	movs	r2, #55	; 0x37
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e010      	b.n	8002f8e <takeMachineID+0x1de>
        	} else if(cursorPosition == 13) {
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b0d      	cmp	r3, #13
 8002f70:	d105      	bne.n	8002f7e <takeMachineID+0x1ce>
        		machineID[machineIDLoc] = '8';
 8002f72:	4a32      	ldr	r2, [pc, #200]	; (800303c <takeMachineID+0x28c>)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	2238      	movs	r2, #56	; 0x38
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e007      	b.n	8002f8e <takeMachineID+0x1de>
        	} else if(cursorPosition == 14) {
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b0e      	cmp	r3, #14
 8002f82:	d104      	bne.n	8002f8e <takeMachineID+0x1de>
        		machineID[machineIDLoc] = '9';
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <takeMachineID+0x28c>)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	2239      	movs	r2, #57	; 0x39
 8002f8c:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	b2d9      	uxtb	r1, r3
 8002f92:	4a2a      	ldr	r2, [pc, #168]	; (800303c <takeMachineID+0x28c>)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f7ff fcb5 	bl	800290c <lcd_print_char>

        	writeLoc++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	3301      	adds	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8002fae:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002fb2:	f005 fbe9 	bl	8008788 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	4821      	ldr	r0, [pc, #132]	; (8003040 <takeMachineID+0x290>)
 8002fba:	f006 f9b5 	bl	8009328 <HAL_GPIO_ReadPin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d12f      	bne.n	8003024 <takeMachineID+0x274>
            if(strlen(machineID) >= 1) {
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <takeMachineID+0x28c>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d027      	beq.n	800301c <takeMachineID+0x26c>

                machineID[machineIDLoc] = '\0';
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <takeMachineID+0x28c>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3304      	adds	r3, #4
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	4619      	mov	r1, r3
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f7ff fcb4 	bl	800294e <lcd_delete_char>
                HAL_Delay(50);
 8002fe6:	2032      	movs	r0, #50	; 0x32
 8002fe8:	f005 fbce 	bl	8008788 <HAL_Delay>

                if(writeLoc > 5) {
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	dd03      	ble.n	8002ffa <takeMachineID+0x24a>
                	writeLoc--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e004      	b.n	8003004 <takeMachineID+0x254>
                } else if(writeLoc < 5) {
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	dc01      	bgt.n	8003004 <takeMachineID+0x254>
                	writeLoc = 5;
 8003000:	2305      	movs	r3, #5
 8003002:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	dd03      	ble.n	8003012 <takeMachineID+0x262>
                	machineIDLoc--;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3b01      	subs	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	e004      	b.n	800301c <takeMachineID+0x26c>
                } else if(machineIDLoc < 0) {
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	da01      	bge.n	800301c <takeMachineID+0x26c>
                	machineIDLoc = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 800301c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003020:	f005 fbb2 	bl	8008788 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	2002      	movs	r0, #2
 800302c:	f7ff fc17 	bl	800285e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8003030:	e6da      	b.n	8002de8 <takeMachineID+0x38>
    }
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200001a0 	.word	0x200001a0
 8003040:	40010800 	.word	0x40010800
 8003044:	0800d104 	.word	0x0800d104
 8003048:	0800d118 	.word	0x0800d118
 800304c:	2000000c 	.word	0x2000000c
 8003050:	20000128 	.word	0x20000128
 8003054:	200003ac 	.word	0x200003ac
 8003058:	40011000 	.word	0x40011000

0800305c <takeWifiSSID>:

void takeWifiSSID(int state) {
 800305c:	b5b0      	push	{r4, r5, r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af04      	add	r7, sp, #16
 8003062:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8003064:	2001      	movs	r0, #1
 8003066:	f7ff fc99 	bl	800299c <lcd_cursor>

    if(state == 0) {
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8003070:	2214      	movs	r2, #20
 8003072:	2100      	movs	r1, #0
 8003074:	4892      	ldr	r0, [pc, #584]	; (80032c0 <takeWifiSSID+0x264>)
 8003076:	f009 fabd 	bl	800c5f4 <memset>
    }

    int realCharPos = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 800307e:	4b91      	ldr	r3, [pc, #580]	; (80032c4 <takeWifiSSID+0x268>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]
    page = 1;
 8003084:	4b90      	ldr	r3, [pc, #576]	; (80032c8 <takeWifiSSID+0x26c>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 800308e:	2307      	movs	r3, #7
 8003090:	60fb      	str	r3, [r7, #12]

    uint8_t characterSavePos = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	72fb      	strb	r3, [r7, #11]

    printTemplate(2, 1);
 8003096:	2101      	movs	r1, #1
 8003098:	2002      	movs	r0, #2
 800309a:	f7ff fcab 	bl	80029f4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800309e:	2108      	movs	r1, #8
 80030a0:	488a      	ldr	r0, [pc, #552]	; (80032cc <takeWifiSSID+0x270>)
 80030a2:	f006 f941 	bl	8009328 <HAL_GPIO_ReadPin>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d13d      	bne.n	8003128 <takeWifiSSID+0xcc>
            lcd_cursor(0);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7ff fc75 	bl	800299c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80030b2:	4883      	ldr	r0, [pc, #524]	; (80032c0 <takeWifiSSID+0x264>)
 80030b4:	f7fd f8b6 	bl	8000224 <strlen>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b14      	cmp	r3, #20
 80030bc:	d910      	bls.n	80030e0 <takeWifiSSID+0x84>
                lcd_clear();
 80030be:	f7ff fc3c 	bl	800293a <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80030c2:	4a83      	ldr	r2, [pc, #524]	; (80032d0 <takeWifiSSID+0x274>)
 80030c4:	2101      	movs	r1, #1
 80030c6:	2001      	movs	r0, #1
 80030c8:	f7ff fbe8 	bl	800289c <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80030cc:	4a81      	ldr	r2, [pc, #516]	; (80032d4 <takeWifiSSID+0x278>)
 80030ce:	2101      	movs	r1, #1
 80030d0:	2002      	movs	r0, #2
 80030d2:	f7ff fbe3 	bl	800289c <lcd_print>
                HAL_Delay(1200);
 80030d6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80030da:	f005 fb55 	bl	8008788 <HAL_Delay>
                goto mainSSIDSection;
 80030de:	e7c1      	b.n	8003064 <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, 20);
 80030e0:	4b7d      	ldr	r3, [pc, #500]	; (80032d8 <takeWifiSSID+0x27c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a7d      	ldr	r2, [pc, #500]	; (80032dc <takeWifiSSID+0x280>)
 80030e6:	4413      	add	r3, r2
 80030e8:	4a7d      	ldr	r2, [pc, #500]	; (80032e0 <takeWifiSSID+0x284>)
 80030ea:	6811      	ldr	r1, [r2, #0]
 80030ec:	6855      	ldr	r5, [r2, #4]
 80030ee:	6894      	ldr	r4, [r2, #8]
 80030f0:	68d0      	ldr	r0, [r2, #12]
 80030f2:	6019      	str	r1, [r3, #0]
 80030f4:	605d      	str	r5, [r3, #4]
 80030f6:	609c      	str	r4, [r3, #8]
 80030f8:	60d8      	str	r0, [r3, #12]
 80030fa:	6911      	ldr	r1, [r2, #16]
 80030fc:	6119      	str	r1, [r3, #16]
            HAL_Delay(250);
 80030fe:	20fa      	movs	r0, #250	; 0xfa
 8003100:	f005 fb42 	bl	8008788 <HAL_Delay>
            //memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003104:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003108:	9302      	str	r3, [sp, #8]
 800310a:	236e      	movs	r3, #110	; 0x6e
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	4b73      	ldr	r3, [pc, #460]	; (80032dc <takeWifiSSID+0x280>)
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	236e      	movs	r3, #110	; 0x6e
 8003114:	2200      	movs	r2, #0
 8003116:	21a0      	movs	r1, #160	; 0xa0
 8003118:	4872      	ldr	r0, [pc, #456]	; (80032e4 <takeWifiSSID+0x288>)
 800311a:	f006 fbbf 	bl	800989c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 800311e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003122:	f005 fb31 	bl	8008788 <HAL_Delay>

            break;
 8003126:	e157      	b.n	80033d8 <takeWifiSSID+0x37c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8003128:	2101      	movs	r1, #1
 800312a:	4868      	ldr	r0, [pc, #416]	; (80032cc <takeWifiSSID+0x270>)
 800312c:	f006 f8fc 	bl	8009328 <HAL_GPIO_ReadPin>
 8003130:	4603      	mov	r3, r0
 8003132:	2b01      	cmp	r3, #1
 8003134:	d166      	bne.n	8003204 <takeWifiSSID+0x1a8>
        	realCharPos++;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3301      	adds	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b50      	cmp	r3, #80	; 0x50
 8003140:	dd01      	ble.n	8003146 <takeWifiSSID+0xea>
        		realCharPos = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <takeWifiSSID+0x268>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b10      	cmp	r3, #16
 800314c:	d152      	bne.n	80031f4 <takeWifiSSID+0x198>
            	if(page == 1) {
 800314e:	4b5e      	ldr	r3, [pc, #376]	; (80032c8 <takeWifiSSID+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d10c      	bne.n	8003170 <takeWifiSSID+0x114>
            		cursorPosition = 1;
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <takeWifiSSID+0x268>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
            		page++;
 800315c:	4b5a      	ldr	r3, [pc, #360]	; (80032c8 <takeWifiSSID+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	4a59      	ldr	r2, [pc, #356]	; (80032c8 <takeWifiSSID+0x26c>)
 8003164:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8003166:	2102      	movs	r1, #2
 8003168:	2002      	movs	r0, #2
 800316a:	f7ff fc43 	bl	80029f4 <printTemplate>
 800316e:	e046      	b.n	80031fe <takeWifiSSID+0x1a2>
            	} else if(page == 2) {
 8003170:	4b55      	ldr	r3, [pc, #340]	; (80032c8 <takeWifiSSID+0x26c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d10c      	bne.n	8003192 <takeWifiSSID+0x136>
            		cursorPosition = 1;
 8003178:	4b52      	ldr	r3, [pc, #328]	; (80032c4 <takeWifiSSID+0x268>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]
            		page++;
 800317e:	4b52      	ldr	r3, [pc, #328]	; (80032c8 <takeWifiSSID+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	4a50      	ldr	r2, [pc, #320]	; (80032c8 <takeWifiSSID+0x26c>)
 8003186:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8003188:	2103      	movs	r1, #3
 800318a:	2002      	movs	r0, #2
 800318c:	f7ff fc32 	bl	80029f4 <printTemplate>
 8003190:	e035      	b.n	80031fe <takeWifiSSID+0x1a2>
            	} else if(page == 3) {
 8003192:	4b4d      	ldr	r3, [pc, #308]	; (80032c8 <takeWifiSSID+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d10c      	bne.n	80031b4 <takeWifiSSID+0x158>
            		cursorPosition = 1;
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <takeWifiSSID+0x268>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
            		page++;
 80031a0:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <takeWifiSSID+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	4a48      	ldr	r2, [pc, #288]	; (80032c8 <takeWifiSSID+0x26c>)
 80031a8:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80031aa:	2104      	movs	r1, #4
 80031ac:	2002      	movs	r0, #2
 80031ae:	f7ff fc21 	bl	80029f4 <printTemplate>
 80031b2:	e024      	b.n	80031fe <takeWifiSSID+0x1a2>
            	} else if(page == 4) {
 80031b4:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <takeWifiSSID+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d10c      	bne.n	80031d6 <takeWifiSSID+0x17a>
            		cursorPosition = 1;
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <takeWifiSSID+0x268>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
            		page++;
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <takeWifiSSID+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <takeWifiSSID+0x26c>)
 80031ca:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 80031cc:	2105      	movs	r1, #5
 80031ce:	2002      	movs	r0, #2
 80031d0:	f7ff fc10 	bl	80029f4 <printTemplate>
 80031d4:	e013      	b.n	80031fe <takeWifiSSID+0x1a2>
            	} else if(page == 5) {
 80031d6:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <takeWifiSSID+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d10f      	bne.n	80031fe <takeWifiSSID+0x1a2>
            		cursorPosition = 1;
 80031de:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <takeWifiSSID+0x268>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
            		page = 1;
 80031e4:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <takeWifiSSID+0x26c>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80031ea:	2101      	movs	r1, #1
 80031ec:	2002      	movs	r0, #2
 80031ee:	f7ff fc01 	bl	80029f4 <printTemplate>
 80031f2:	e004      	b.n	80031fe <takeWifiSSID+0x1a2>
            	}
            } else {
            	cursorPosition++;
 80031f4:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <takeWifiSSID+0x268>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	4a32      	ldr	r2, [pc, #200]	; (80032c4 <takeWifiSSID+0x268>)
 80031fc:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80031fe:	20fa      	movs	r0, #250	; 0xfa
 8003200:	f005 fac2 	bl	8008788 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8003204:	2108      	movs	r1, #8
 8003206:	4838      	ldr	r0, [pc, #224]	; (80032e8 <takeWifiSSID+0x28c>)
 8003208:	f006 f88e 	bl	8009328 <HAL_GPIO_ReadPin>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	d174      	bne.n	80032fc <takeWifiSSID+0x2a0>
        	realCharPos--;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3b01      	subs	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	dc01      	bgt.n	8003222 <takeWifiSSID+0x1c6>
        		realCharPos = 80;
 800321e:	2350      	movs	r3, #80	; 0x50
 8003220:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8003222:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <takeWifiSSID+0x268>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d160      	bne.n	80032ec <takeWifiSSID+0x290>
            	if(page == 1) {
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <takeWifiSSID+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d10a      	bne.n	8003248 <takeWifiSSID+0x1ec>
            		cursorPosition = 16;
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <takeWifiSSID+0x268>)
 8003234:	2210      	movs	r2, #16
 8003236:	601a      	str	r2, [r3, #0]
            		page = 5;
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <takeWifiSSID+0x26c>)
 800323a:	2205      	movs	r2, #5
 800323c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 800323e:	2105      	movs	r1, #5
 8003240:	2002      	movs	r0, #2
 8003242:	f7ff fbd7 	bl	80029f4 <printTemplate>
 8003246:	e056      	b.n	80032f6 <takeWifiSSID+0x29a>
            	} else if(page == 2) {
 8003248:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <takeWifiSSID+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d10a      	bne.n	8003266 <takeWifiSSID+0x20a>
            		cursorPosition = 16;
 8003250:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <takeWifiSSID+0x268>)
 8003252:	2210      	movs	r2, #16
 8003254:	601a      	str	r2, [r3, #0]
            		page = 1;
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <takeWifiSSID+0x26c>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 800325c:	2101      	movs	r1, #1
 800325e:	2002      	movs	r0, #2
 8003260:	f7ff fbc8 	bl	80029f4 <printTemplate>
 8003264:	e047      	b.n	80032f6 <takeWifiSSID+0x29a>
            	} else if(page == 3) {
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <takeWifiSSID+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d10a      	bne.n	8003284 <takeWifiSSID+0x228>
            		cursorPosition = 16;
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <takeWifiSSID+0x268>)
 8003270:	2210      	movs	r2, #16
 8003272:	601a      	str	r2, [r3, #0]
            		page = 2;
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <takeWifiSSID+0x26c>)
 8003276:	2202      	movs	r2, #2
 8003278:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 800327a:	2102      	movs	r1, #2
 800327c:	2002      	movs	r0, #2
 800327e:	f7ff fbb9 	bl	80029f4 <printTemplate>
 8003282:	e038      	b.n	80032f6 <takeWifiSSID+0x29a>
            	} else if(page == 4) {
 8003284:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <takeWifiSSID+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d10a      	bne.n	80032a2 <takeWifiSSID+0x246>
            		cursorPosition = 16;
 800328c:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <takeWifiSSID+0x268>)
 800328e:	2210      	movs	r2, #16
 8003290:	601a      	str	r2, [r3, #0]
            		page = 3;
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <takeWifiSSID+0x26c>)
 8003294:	2203      	movs	r2, #3
 8003296:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8003298:	2103      	movs	r1, #3
 800329a:	2002      	movs	r0, #2
 800329c:	f7ff fbaa 	bl	80029f4 <printTemplate>
 80032a0:	e029      	b.n	80032f6 <takeWifiSSID+0x29a>
            	} else if(page == 5) {
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <takeWifiSSID+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d125      	bne.n	80032f6 <takeWifiSSID+0x29a>
            		cursorPosition = 16;
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <takeWifiSSID+0x268>)
 80032ac:	2210      	movs	r2, #16
 80032ae:	601a      	str	r2, [r3, #0]
            		page = 4;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <takeWifiSSID+0x26c>)
 80032b2:	2204      	movs	r2, #4
 80032b4:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 80032b6:	2104      	movs	r1, #4
 80032b8:	2002      	movs	r0, #2
 80032ba:	f7ff fb9b 	bl	80029f4 <printTemplate>
 80032be:	e01a      	b.n	80032f6 <takeWifiSSID+0x29a>
 80032c0:	200001ac 	.word	0x200001ac
 80032c4:	20000000 	.word	0x20000000
 80032c8:	20000004 	.word	0x20000004
 80032cc:	40010800 	.word	0x40010800
 80032d0:	0800d12c 	.word	0x0800d12c
 80032d4:	0800d140 	.word	0x0800d140
 80032d8:	20000010 	.word	0x20000010
 80032dc:	20000128 	.word	0x20000128
 80032e0:	200001d4 	.word	0x200001d4
 80032e4:	200003ac 	.word	0x200003ac
 80032e8:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80032ec:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <takeWifiSSID+0x384>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	4a3b      	ldr	r2, [pc, #236]	; (80033e0 <takeWifiSSID+0x384>)
 80032f4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80032f6:	20fa      	movs	r0, #250	; 0xfa
 80032f8:	f005 fa46 	bl	8008788 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80032fc:	2102      	movs	r1, #2
 80032fe:	4839      	ldr	r0, [pc, #228]	; (80033e4 <takeWifiSSID+0x388>)
 8003300:	f006 f812 	bl	8009328 <HAL_GPIO_ReadPin>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d128      	bne.n	800335c <takeWifiSSID+0x300>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3b01      	subs	r3, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fce6 	bl	8002ce0 <getCharFromCursorPosition>
 8003314:	4603      	mov	r3, r0
 8003316:	4619      	mov	r1, r3
 8003318:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <takeWifiSSID+0x38c>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	460a      	mov	r2, r1
 8003320:	701a      	strb	r2, [r3, #0]
            wifiSSIDLoc[characterSavePos] = realCharPos - 1;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	7afb      	ldrb	r3, [r7, #11]
 8003328:	3a01      	subs	r2, #1
 800332a:	b2d1      	uxtb	r1, r2
 800332c:	4a2f      	ldr	r2, [pc, #188]	; (80033ec <takeWifiSSID+0x390>)
 800332e:	54d1      	strb	r1, [r2, r3]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	b2d9      	uxtb	r1, r3
 8003334:	4a2c      	ldr	r2, [pc, #176]	; (80033e8 <takeWifiSSID+0x38c>)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4413      	add	r3, r2
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	2001      	movs	r0, #1
 8003340:	f7ff fae4 	bl	800290c <lcd_print_char>

            writeLoc++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3301      	adds	r3, #1
 8003348:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	3301      	adds	r3, #1
 800334e:	613b      	str	r3, [r7, #16]
            characterSavePos++;
 8003350:	7afb      	ldrb	r3, [r7, #11]
 8003352:	3301      	adds	r3, #1
 8003354:	72fb      	strb	r3, [r7, #11]

            HAL_Delay(250);
 8003356:	20fa      	movs	r0, #250	; 0xfa
 8003358:	f005 fa16 	bl	8008788 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800335c:	2104      	movs	r1, #4
 800335e:	4821      	ldr	r0, [pc, #132]	; (80033e4 <takeWifiSSID+0x388>)
 8003360:	f005 ffe2 	bl	8009328 <HAL_GPIO_ReadPin>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d12e      	bne.n	80033c8 <takeWifiSSID+0x36c>
        	if(strlen(wifiSSID) >= 1) {
 800336a:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <takeWifiSSID+0x38c>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d027      	beq.n	80033c2 <takeWifiSSID+0x366>
        		wifiSSID[wifiNameLoc] = '\0';
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <takeWifiSSID+0x38c>)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	3306      	adds	r3, #6
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	2001      	movs	r0, #1
 8003388:	f7ff fae1 	bl	800294e <lcd_delete_char>
        		HAL_Delay(50);
 800338c:	2032      	movs	r0, #50	; 0x32
 800338e:	f005 f9fb 	bl	8008788 <HAL_Delay>
        		if(writeLoc > 7) {
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b07      	cmp	r3, #7
 8003396:	dd03      	ble.n	80033a0 <takeWifiSSID+0x344>
        			writeLoc--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3b01      	subs	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e004      	b.n	80033aa <takeWifiSSID+0x34e>
        		} else if(writeLoc < 7) {
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	dc01      	bgt.n	80033aa <takeWifiSSID+0x34e>
        			writeLoc = 7;
 80033a6:	2307      	movs	r3, #7
 80033a8:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	dd03      	ble.n	80033b8 <takeWifiSSID+0x35c>
        			wifiNameLoc--;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	e004      	b.n	80033c2 <takeWifiSSID+0x366>
        		} else if(wifiNameLoc < 0) {
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da01      	bge.n	80033c2 <takeWifiSSID+0x366>
        			wifiNameLoc = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80033c2:	20fa      	movs	r0, #250	; 0xfa
 80033c4:	f005 f9e0 	bl	8008788 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <takeWifiSSID+0x384>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4619      	mov	r1, r3
 80033d0:	2002      	movs	r0, #2
 80033d2:	f7ff fa44 	bl	800285e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80033d6:	e662      	b.n	800309e <takeWifiSSID+0x42>
    }
}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bdb0      	pop	{r4, r5, r7, pc}
 80033e0:	20000000 	.word	0x20000000
 80033e4:	40010800 	.word	0x40010800
 80033e8:	200001ac 	.word	0x200001ac
 80033ec:	200001d4 	.word	0x200001d4

080033f0 <takeWifiPass>:

void takeWifiPass(int state) {
 80033f0:	b5b0      	push	{r4, r5, r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af04      	add	r7, sp, #16
 80033f6:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 80033f8:	2001      	movs	r0, #1
 80033fa:	f7ff facf 	bl	800299c <lcd_cursor>

    if(state == 0) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d104      	bne.n	800340e <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8003404:	2214      	movs	r2, #20
 8003406:	2100      	movs	r1, #0
 8003408:	4892      	ldr	r0, [pc, #584]	; (8003654 <takeWifiPass+0x264>)
 800340a:	f009 f8f3 	bl	800c5f4 <memset>
    }

    int realCharPos = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8003412:	4b91      	ldr	r3, [pc, #580]	; (8003658 <takeWifiPass+0x268>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
    page = 1;
 8003418:	4b90      	ldr	r3, [pc, #576]	; (800365c <takeWifiPass+0x26c>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8003422:	2307      	movs	r3, #7
 8003424:	60fb      	str	r3, [r7, #12]

    uint8_t characterSavePos = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	72fb      	strb	r3, [r7, #11]

    printTemplate(3, 1);
 800342a:	2101      	movs	r1, #1
 800342c:	2003      	movs	r0, #3
 800342e:	f7ff fae1 	bl	80029f4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8003432:	2108      	movs	r1, #8
 8003434:	488a      	ldr	r0, [pc, #552]	; (8003660 <takeWifiPass+0x270>)
 8003436:	f005 ff77 	bl	8009328 <HAL_GPIO_ReadPin>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d13d      	bne.n	80034bc <takeWifiPass+0xcc>
            lcd_cursor(0);
 8003440:	2000      	movs	r0, #0
 8003442:	f7ff faab 	bl	800299c <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8003446:	4883      	ldr	r0, [pc, #524]	; (8003654 <takeWifiPass+0x264>)
 8003448:	f7fc feec 	bl	8000224 <strlen>
 800344c:	4603      	mov	r3, r0
 800344e:	2b14      	cmp	r3, #20
 8003450:	d910      	bls.n	8003474 <takeWifiPass+0x84>
                lcd_clear();
 8003452:	f7ff fa72 	bl	800293a <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8003456:	4a83      	ldr	r2, [pc, #524]	; (8003664 <takeWifiPass+0x274>)
 8003458:	2101      	movs	r1, #1
 800345a:	2001      	movs	r0, #1
 800345c:	f7ff fa1e 	bl	800289c <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8003460:	4a81      	ldr	r2, [pc, #516]	; (8003668 <takeWifiPass+0x278>)
 8003462:	2101      	movs	r1, #1
 8003464:	2002      	movs	r0, #2
 8003466:	f7ff fa19 	bl	800289c <lcd_print>
                HAL_Delay(1200);
 800346a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800346e:	f005 f98b 	bl	8008788 <HAL_Delay>
                goto mainPASSSection;
 8003472:	e7c1      	b.n	80033f8 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, 20);
 8003474:	4b7d      	ldr	r3, [pc, #500]	; (800366c <takeWifiPass+0x27c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7d      	ldr	r2, [pc, #500]	; (8003670 <takeWifiPass+0x280>)
 800347a:	4413      	add	r3, r2
 800347c:	4a7d      	ldr	r2, [pc, #500]	; (8003674 <takeWifiPass+0x284>)
 800347e:	6811      	ldr	r1, [r2, #0]
 8003480:	6855      	ldr	r5, [r2, #4]
 8003482:	6894      	ldr	r4, [r2, #8]
 8003484:	68d0      	ldr	r0, [r2, #12]
 8003486:	6019      	str	r1, [r3, #0]
 8003488:	605d      	str	r5, [r3, #4]
 800348a:	609c      	str	r4, [r3, #8]
 800348c:	60d8      	str	r0, [r3, #12]
 800348e:	6911      	ldr	r1, [r2, #16]
 8003490:	6119      	str	r1, [r3, #16]
            HAL_Delay(250);
 8003492:	20fa      	movs	r0, #250	; 0xfa
 8003494:	f005 f978 	bl	8008788 <HAL_Delay>
            //memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003498:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800349c:	9302      	str	r3, [sp, #8]
 800349e:	236e      	movs	r3, #110	; 0x6e
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	4b73      	ldr	r3, [pc, #460]	; (8003670 <takeWifiPass+0x280>)
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	236e      	movs	r3, #110	; 0x6e
 80034a8:	2200      	movs	r2, #0
 80034aa:	21a0      	movs	r1, #160	; 0xa0
 80034ac:	4872      	ldr	r0, [pc, #456]	; (8003678 <takeWifiPass+0x288>)
 80034ae:	f006 f9f5 	bl	800989c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80034b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034b6:	f005 f967 	bl	8008788 <HAL_Delay>

            break;
 80034ba:	e157      	b.n	800376c <takeWifiPass+0x37c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80034bc:	2101      	movs	r1, #1
 80034be:	4868      	ldr	r0, [pc, #416]	; (8003660 <takeWifiPass+0x270>)
 80034c0:	f005 ff32 	bl	8009328 <HAL_GPIO_ReadPin>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d166      	bne.n	8003598 <takeWifiPass+0x1a8>
        	realCharPos++;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3301      	adds	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b50      	cmp	r3, #80	; 0x50
 80034d4:	dd01      	ble.n	80034da <takeWifiPass+0xea>
        	    realCharPos = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80034da:	4b5f      	ldr	r3, [pc, #380]	; (8003658 <takeWifiPass+0x268>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d152      	bne.n	8003588 <takeWifiPass+0x198>
            	if(page == 1) {
 80034e2:	4b5e      	ldr	r3, [pc, #376]	; (800365c <takeWifiPass+0x26c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d10c      	bne.n	8003504 <takeWifiPass+0x114>
            		cursorPosition = 1;
 80034ea:	4b5b      	ldr	r3, [pc, #364]	; (8003658 <takeWifiPass+0x268>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
            		page++;
 80034f0:	4b5a      	ldr	r3, [pc, #360]	; (800365c <takeWifiPass+0x26c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	4a59      	ldr	r2, [pc, #356]	; (800365c <takeWifiPass+0x26c>)
 80034f8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80034fa:	2102      	movs	r1, #2
 80034fc:	2003      	movs	r0, #3
 80034fe:	f7ff fa79 	bl	80029f4 <printTemplate>
 8003502:	e046      	b.n	8003592 <takeWifiPass+0x1a2>
            	} else if(page == 2) {
 8003504:	4b55      	ldr	r3, [pc, #340]	; (800365c <takeWifiPass+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d10c      	bne.n	8003526 <takeWifiPass+0x136>
            		cursorPosition = 1;
 800350c:	4b52      	ldr	r3, [pc, #328]	; (8003658 <takeWifiPass+0x268>)
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]
            		page++;
 8003512:	4b52      	ldr	r3, [pc, #328]	; (800365c <takeWifiPass+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	4a50      	ldr	r2, [pc, #320]	; (800365c <takeWifiPass+0x26c>)
 800351a:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 800351c:	2103      	movs	r1, #3
 800351e:	2003      	movs	r0, #3
 8003520:	f7ff fa68 	bl	80029f4 <printTemplate>
 8003524:	e035      	b.n	8003592 <takeWifiPass+0x1a2>
            	} else if(page == 3) {
 8003526:	4b4d      	ldr	r3, [pc, #308]	; (800365c <takeWifiPass+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d10c      	bne.n	8003548 <takeWifiPass+0x158>
            		cursorPosition = 1;
 800352e:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <takeWifiPass+0x268>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
            		page++;
 8003534:	4b49      	ldr	r3, [pc, #292]	; (800365c <takeWifiPass+0x26c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	4a48      	ldr	r2, [pc, #288]	; (800365c <takeWifiPass+0x26c>)
 800353c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 800353e:	2104      	movs	r1, #4
 8003540:	2003      	movs	r0, #3
 8003542:	f7ff fa57 	bl	80029f4 <printTemplate>
 8003546:	e024      	b.n	8003592 <takeWifiPass+0x1a2>
            	} else if(page == 4) {
 8003548:	4b44      	ldr	r3, [pc, #272]	; (800365c <takeWifiPass+0x26c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b04      	cmp	r3, #4
 800354e:	d10c      	bne.n	800356a <takeWifiPass+0x17a>
            		cursorPosition = 1;
 8003550:	4b41      	ldr	r3, [pc, #260]	; (8003658 <takeWifiPass+0x268>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]
            		page++;
 8003556:	4b41      	ldr	r3, [pc, #260]	; (800365c <takeWifiPass+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	4a3f      	ldr	r2, [pc, #252]	; (800365c <takeWifiPass+0x26c>)
 800355e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8003560:	2105      	movs	r1, #5
 8003562:	2003      	movs	r0, #3
 8003564:	f7ff fa46 	bl	80029f4 <printTemplate>
 8003568:	e013      	b.n	8003592 <takeWifiPass+0x1a2>
            	} else if(page == 5) {
 800356a:	4b3c      	ldr	r3, [pc, #240]	; (800365c <takeWifiPass+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d10f      	bne.n	8003592 <takeWifiPass+0x1a2>
            		cursorPosition = 1;
 8003572:	4b39      	ldr	r3, [pc, #228]	; (8003658 <takeWifiPass+0x268>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]
            		page = 1;
 8003578:	4b38      	ldr	r3, [pc, #224]	; (800365c <takeWifiPass+0x26c>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800357e:	2101      	movs	r1, #1
 8003580:	2003      	movs	r0, #3
 8003582:	f7ff fa37 	bl	80029f4 <printTemplate>
 8003586:	e004      	b.n	8003592 <takeWifiPass+0x1a2>
            	}
            } else {
            	cursorPosition++;
 8003588:	4b33      	ldr	r3, [pc, #204]	; (8003658 <takeWifiPass+0x268>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	4a32      	ldr	r2, [pc, #200]	; (8003658 <takeWifiPass+0x268>)
 8003590:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8003592:	20fa      	movs	r0, #250	; 0xfa
 8003594:	f005 f8f8 	bl	8008788 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8003598:	2108      	movs	r1, #8
 800359a:	4838      	ldr	r0, [pc, #224]	; (800367c <takeWifiPass+0x28c>)
 800359c:	f005 fec4 	bl	8009328 <HAL_GPIO_ReadPin>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d174      	bne.n	8003690 <takeWifiPass+0x2a0>
        	realCharPos--;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	dc01      	bgt.n	80035b6 <takeWifiPass+0x1c6>
        	    realCharPos = 80;
 80035b2:	2350      	movs	r3, #80	; 0x50
 80035b4:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <takeWifiPass+0x268>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d160      	bne.n	8003680 <takeWifiPass+0x290>
            	if(page == 1) {
 80035be:	4b27      	ldr	r3, [pc, #156]	; (800365c <takeWifiPass+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d10a      	bne.n	80035dc <takeWifiPass+0x1ec>
            		cursorPosition = 16;
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <takeWifiPass+0x268>)
 80035c8:	2210      	movs	r2, #16
 80035ca:	601a      	str	r2, [r3, #0]
            		page = 5;
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <takeWifiPass+0x26c>)
 80035ce:	2205      	movs	r2, #5
 80035d0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80035d2:	2105      	movs	r1, #5
 80035d4:	2003      	movs	r0, #3
 80035d6:	f7ff fa0d 	bl	80029f4 <printTemplate>
 80035da:	e056      	b.n	800368a <takeWifiPass+0x29a>
            	} else if(page == 2) {
 80035dc:	4b1f      	ldr	r3, [pc, #124]	; (800365c <takeWifiPass+0x26c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d10a      	bne.n	80035fa <takeWifiPass+0x20a>
            		cursorPosition = 16;
 80035e4:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <takeWifiPass+0x268>)
 80035e6:	2210      	movs	r2, #16
 80035e8:	601a      	str	r2, [r3, #0]
            		page = 1;
 80035ea:	4b1c      	ldr	r3, [pc, #112]	; (800365c <takeWifiPass+0x26c>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80035f0:	2101      	movs	r1, #1
 80035f2:	2003      	movs	r0, #3
 80035f4:	f7ff f9fe 	bl	80029f4 <printTemplate>
 80035f8:	e047      	b.n	800368a <takeWifiPass+0x29a>
            	} else if(page == 3) {
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <takeWifiPass+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d10a      	bne.n	8003618 <takeWifiPass+0x228>
            		cursorPosition = 16;
 8003602:	4b15      	ldr	r3, [pc, #84]	; (8003658 <takeWifiPass+0x268>)
 8003604:	2210      	movs	r2, #16
 8003606:	601a      	str	r2, [r3, #0]
            		page = 2;
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <takeWifiPass+0x26c>)
 800360a:	2202      	movs	r2, #2
 800360c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 800360e:	2102      	movs	r1, #2
 8003610:	2003      	movs	r0, #3
 8003612:	f7ff f9ef 	bl	80029f4 <printTemplate>
 8003616:	e038      	b.n	800368a <takeWifiPass+0x29a>
            	} else if(page == 4) {
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <takeWifiPass+0x26c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d10a      	bne.n	8003636 <takeWifiPass+0x246>
            		cursorPosition = 16;
 8003620:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <takeWifiPass+0x268>)
 8003622:	2210      	movs	r2, #16
 8003624:	601a      	str	r2, [r3, #0]
            		page = 3;
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <takeWifiPass+0x26c>)
 8003628:	2203      	movs	r2, #3
 800362a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 800362c:	2103      	movs	r1, #3
 800362e:	2003      	movs	r0, #3
 8003630:	f7ff f9e0 	bl	80029f4 <printTemplate>
 8003634:	e029      	b.n	800368a <takeWifiPass+0x29a>
            	} else if(page == 5) {
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <takeWifiPass+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d125      	bne.n	800368a <takeWifiPass+0x29a>
            		cursorPosition = 16;
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <takeWifiPass+0x268>)
 8003640:	2210      	movs	r2, #16
 8003642:	601a      	str	r2, [r3, #0]
            		page = 4;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <takeWifiPass+0x26c>)
 8003646:	2204      	movs	r2, #4
 8003648:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800364a:	2104      	movs	r1, #4
 800364c:	2003      	movs	r0, #3
 800364e:	f7ff f9d1 	bl	80029f4 <printTemplate>
 8003652:	e01a      	b.n	800368a <takeWifiPass+0x29a>
 8003654:	200001c0 	.word	0x200001c0
 8003658:	20000000 	.word	0x20000000
 800365c:	20000004 	.word	0x20000004
 8003660:	40010800 	.word	0x40010800
 8003664:	0800d12c 	.word	0x0800d12c
 8003668:	0800d154 	.word	0x0800d154
 800366c:	20000014 	.word	0x20000014
 8003670:	20000128 	.word	0x20000128
 8003674:	200001e8 	.word	0x200001e8
 8003678:	200003ac 	.word	0x200003ac
 800367c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8003680:	4b3c      	ldr	r3, [pc, #240]	; (8003774 <takeWifiPass+0x384>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3b01      	subs	r3, #1
 8003686:	4a3b      	ldr	r2, [pc, #236]	; (8003774 <takeWifiPass+0x384>)
 8003688:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800368a:	20fa      	movs	r0, #250	; 0xfa
 800368c:	f005 f87c 	bl	8008788 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8003690:	2102      	movs	r1, #2
 8003692:	4839      	ldr	r0, [pc, #228]	; (8003778 <takeWifiPass+0x388>)
 8003694:	f005 fe48 	bl	8009328 <HAL_GPIO_ReadPin>
 8003698:	4603      	mov	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d128      	bne.n	80036f0 <takeWifiPass+0x300>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fb1c 	bl	8002ce0 <getCharFromCursorPosition>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4619      	mov	r1, r3
 80036ac:	4a33      	ldr	r2, [pc, #204]	; (800377c <takeWifiPass+0x38c>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4413      	add	r3, r2
 80036b2:	460a      	mov	r2, r1
 80036b4:	701a      	strb	r2, [r3, #0]
        	wifiPassLocArr[characterSavePos] = realCharPos - 1;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	7afb      	ldrb	r3, [r7, #11]
 80036bc:	3a01      	subs	r2, #1
 80036be:	b2d1      	uxtb	r1, r2
 80036c0:	4a2f      	ldr	r2, [pc, #188]	; (8003780 <takeWifiPass+0x390>)
 80036c2:	54d1      	strb	r1, [r2, r3]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	b2d9      	uxtb	r1, r3
 80036c8:	4a2c      	ldr	r2, [pc, #176]	; (800377c <takeWifiPass+0x38c>)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	2001      	movs	r0, #1
 80036d4:	f7ff f91a 	bl	800290c <lcd_print_char>

            writeLoc++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	3301      	adds	r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
            characterSavePos++;
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	3301      	adds	r3, #1
 80036e8:	72fb      	strb	r3, [r7, #11]

            HAL_Delay(250);
 80036ea:	20fa      	movs	r0, #250	; 0xfa
 80036ec:	f005 f84c 	bl	8008788 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80036f0:	2104      	movs	r1, #4
 80036f2:	4821      	ldr	r0, [pc, #132]	; (8003778 <takeWifiPass+0x388>)
 80036f4:	f005 fe18 	bl	8009328 <HAL_GPIO_ReadPin>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d12e      	bne.n	800375c <takeWifiPass+0x36c>
            if(strlen(wifiPass) >= 1) {
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <takeWifiPass+0x38c>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d027      	beq.n	8003756 <takeWifiPass+0x366>
            	wifiPass[wifiPassLoc] = '\0';
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <takeWifiPass+0x38c>)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	3306      	adds	r3, #6
 8003716:	b2db      	uxtb	r3, r3
 8003718:	4619      	mov	r1, r3
 800371a:	2001      	movs	r0, #1
 800371c:	f7ff f917 	bl	800294e <lcd_delete_char>
            	HAL_Delay(50);
 8003720:	2032      	movs	r0, #50	; 0x32
 8003722:	f005 f831 	bl	8008788 <HAL_Delay>

            	if(writeLoc > 7) {
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b07      	cmp	r3, #7
 800372a:	dd03      	ble.n	8003734 <takeWifiPass+0x344>
            		writeLoc--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3b01      	subs	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e004      	b.n	800373e <takeWifiPass+0x34e>
            	} else if(writeLoc < 7) {
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b06      	cmp	r3, #6
 8003738:	dc01      	bgt.n	800373e <takeWifiPass+0x34e>
            		writeLoc = 7;
 800373a:	2307      	movs	r3, #7
 800373c:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	dd03      	ble.n	800374c <takeWifiPass+0x35c>
            		wifiPassLoc--;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	3b01      	subs	r3, #1
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e004      	b.n	8003756 <takeWifiPass+0x366>
            	} else if(wifiPassLoc < 0) {
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	da01      	bge.n	8003756 <takeWifiPass+0x366>
            		wifiPassLoc = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 8003756:	20fa      	movs	r0, #250	; 0xfa
 8003758:	f005 f816 	bl	8008788 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <takeWifiPass+0x384>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	4619      	mov	r1, r3
 8003764:	2002      	movs	r0, #2
 8003766:	f7ff f87a 	bl	800285e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800376a:	e662      	b.n	8003432 <takeWifiPass+0x42>
    }
}
 800376c:	bf00      	nop
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bdb0      	pop	{r4, r5, r7, pc}
 8003774:	20000000 	.word	0x20000000
 8003778:	40010800 	.word	0x40010800
 800377c:	200001c0 	.word	0x200001c0
 8003780:	200001e8 	.word	0x200001e8

08003784 <checkSlideVal>:

int checkSlideVal(int state) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d111      	bne.n	80037b6 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8003792:	2101      	movs	r1, #1
 8003794:	4813      	ldr	r0, [pc, #76]	; (80037e4 <checkSlideVal+0x60>)
 8003796:	f005 fdc7 	bl	8009328 <HAL_GPIO_ReadPin>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <checkSlideVal+0x20>
			return 34;
 80037a0:	2322      	movs	r3, #34	; 0x22
 80037a2:	e01b      	b.n	80037dc <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80037a4:	2108      	movs	r1, #8
 80037a6:	4810      	ldr	r0, [pc, #64]	; (80037e8 <checkSlideVal+0x64>)
 80037a8:	f005 fdbe 	bl	8009328 <HAL_GPIO_ReadPin>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d113      	bne.n	80037da <checkSlideVal+0x56>
			return 32;
 80037b2:	2320      	movs	r3, #32
 80037b4:	e012      	b.n	80037dc <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80037b6:	2101      	movs	r1, #1
 80037b8:	480a      	ldr	r0, [pc, #40]	; (80037e4 <checkSlideVal+0x60>)
 80037ba:	f005 fdb5 	bl	8009328 <HAL_GPIO_ReadPin>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <checkSlideVal+0x44>
			return 35;
 80037c4:	2323      	movs	r3, #35	; 0x23
 80037c6:	e009      	b.n	80037dc <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80037c8:	2108      	movs	r1, #8
 80037ca:	4807      	ldr	r0, [pc, #28]	; (80037e8 <checkSlideVal+0x64>)
 80037cc:	f005 fdac 	bl	8009328 <HAL_GPIO_ReadPin>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <checkSlideVal+0x56>
			return 33;
 80037d6:	2321      	movs	r3, #33	; 0x21
 80037d8:	e000      	b.n	80037dc <checkSlideVal+0x58>
		}
	}
	return 0;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40010800 	.word	0x40010800
 80037e8:	40011000 	.word	0x40011000

080037ec <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7fc fd12 	bl	8000224 <strlen>
 8003800:	4603      	mov	r3, r0
 8003802:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8003804:	2301      	movs	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8003808:	e08a      	b.n	8003920 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f7ff ffba 	bl	8003784 <checkSlideVal>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	dd07      	ble.n	8003826 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	f7ff ffb4 	bl	8003784 <checkSlideVal>
 800381c:	4603      	mov	r3, r0
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b44      	ldr	r3, [pc, #272]	; (8003934 <slideText+0x148>)
 8003822:	701a      	strb	r2, [r3, #0]
			break;
 8003824:	e081      	b.n	800392a <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	e075      	b.n	8003918 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f7ff ffa9 	bl	8003784 <checkSlideVal>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	dd09      	ble.n	800384c <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8003838:	6838      	ldr	r0, [r7, #0]
 800383a:	f7ff ffa3 	bl	8003784 <checkSlideVal>
 800383e:	4603      	mov	r3, r0
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4b3c      	ldr	r3, [pc, #240]	; (8003934 <slideText+0x148>)
 8003844:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800384a:	e069      	b.n	8003920 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	4413      	add	r3, r2
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	e029      	b.n	80038aa <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	f7ff ff94 	bl	8003784 <checkSlideVal>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	dd0b      	ble.n	800387a <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8003862:	6838      	ldr	r0, [r7, #0]
 8003864:	f7ff ff8e 	bl	8003784 <checkSlideVal>
 8003868:	4603      	mov	r3, r0
 800386a:	b2da      	uxtb	r2, r3
 800386c:	4b31      	ldr	r3, [pc, #196]	; (8003934 <slideText+0x148>)
 800386e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003878:	e01d      	b.n	80038b6 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	b2d8      	uxtb	r0, r3
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	b2d9      	uxtb	r1, r3
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	461a      	mov	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	f7ff f837 	bl	800290c <lcd_print_char>
				HAL_Delay(30);
 800389e:	201e      	movs	r0, #30
 80038a0:	f004 ff72 	bl	8008788 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	7dfa      	ldrb	r2, [r7, #23]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4413      	add	r3, r2
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	dbcf      	blt.n	8003856 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e023      	b.n	8003906 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	f7ff ff60 	bl	8003784 <checkSlideVal>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	dd0b      	ble.n	80038e2 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80038ca:	6838      	ldr	r0, [r7, #0]
 80038cc:	f7ff ff5a 	bl	8003784 <checkSlideVal>
 80038d0:	4603      	mov	r3, r0
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b17      	ldr	r3, [pc, #92]	; (8003934 <slideText+0x148>)
 80038d6:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80038e0:	e017      	b.n	8003912 <slideText+0x126>
				}
			     if(j >= startPos) {
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	db0a      	blt.n	8003900 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	b2d1      	uxtb	r1, r2
 80038f2:	2220      	movs	r2, #32
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f809 	bl	800290c <lcd_print_char>
			    	 HAL_Delay(30);
 80038fa:	201e      	movs	r0, #30
 80038fc:	f004 ff44 	bl	8008788 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	3b01      	subs	r3, #1
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	7dfa      	ldrb	r2, [r7, #23]
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	429a      	cmp	r2, r3
 8003910:	dad5      	bge.n	80038be <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	3301      	adds	r3, #1
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	429a      	cmp	r2, r3
 800391e:	db85      	blt.n	800382c <slideText+0x40>
	while(mainLoopVal == 1) {
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	2b01      	cmp	r3, #1
 8003924:	f43f af71 	beq.w	800380a <slideText+0x1e>
			     }
			}
		}
	}
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3728      	adds	r7, #40	; 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000224 	.word	0x20000224

08003938 <menu>:

void menu() {
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800393c:	2101      	movs	r1, #1
 800393e:	488f      	ldr	r0, [pc, #572]	; (8003b7c <menu+0x244>)
 8003940:	f005 fcf2 	bl	8009328 <HAL_GPIO_ReadPin>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	f040 808e 	bne.w	8003a68 <menu+0x130>
 800394c:	4b8c      	ldr	r3, [pc, #560]	; (8003b80 <menu+0x248>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	f083 0301 	eor.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8086 	beq.w	8003a68 <menu+0x130>
		menuSayac = menuSayac+1;
 800395c:	4b89      	ldr	r3, [pc, #548]	; (8003b84 <menu+0x24c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	b2da      	uxtb	r2, r3
 8003964:	4b87      	ldr	r3, [pc, #540]	; (8003b84 <menu+0x24c>)
 8003966:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8003968:	4b86      	ldr	r3, [pc, #536]	; (8003b84 <menu+0x24c>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b24      	cmp	r3, #36	; 0x24
 800396e:	d102      	bne.n	8003976 <menu+0x3e>
			menuSayac = 1;
 8003970:	4b84      	ldr	r3, [pc, #528]	; (8003b84 <menu+0x24c>)
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8003976:	4b83      	ldr	r3, [pc, #524]	; (8003b84 <menu+0x24c>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b12      	cmp	r3, #18
 800397c:	d106      	bne.n	800398c <menu+0x54>
 800397e:	4b82      	ldr	r3, [pc, #520]	; (8003b88 <menu+0x250>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <menu+0x54>
			menuSayac = 21;
 8003986:	4b7f      	ldr	r3, [pc, #508]	; (8003b84 <menu+0x24c>)
 8003988:	2215      	movs	r2, #21
 800398a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800398c:	4b7d      	ldr	r3, [pc, #500]	; (8003b84 <menu+0x24c>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d106      	bne.n	80039a2 <menu+0x6a>
 8003994:	4b7d      	ldr	r3, [pc, #500]	; (8003b8c <menu+0x254>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <menu+0x6a>
			menuSayac = 16;
 800399c:	4b79      	ldr	r3, [pc, #484]	; (8003b84 <menu+0x24c>)
 800399e:	2210      	movs	r2, #16
 80039a0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80039a2:	4b78      	ldr	r3, [pc, #480]	; (8003b84 <menu+0x24c>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b0d      	cmp	r3, #13
 80039a8:	d106      	bne.n	80039b8 <menu+0x80>
 80039aa:	4b78      	ldr	r3, [pc, #480]	; (8003b8c <menu+0x254>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d102      	bne.n	80039b8 <menu+0x80>
			menuSayac = 16;
 80039b2:	4b74      	ldr	r3, [pc, #464]	; (8003b84 <menu+0x24c>)
 80039b4:	2210      	movs	r2, #16
 80039b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80039b8:	4b72      	ldr	r3, [pc, #456]	; (8003b84 <menu+0x24c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b09      	cmp	r3, #9
 80039be:	d106      	bne.n	80039ce <menu+0x96>
 80039c0:	4b72      	ldr	r3, [pc, #456]	; (8003b8c <menu+0x254>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d102      	bne.n	80039ce <menu+0x96>
			menuSayac = 13;
 80039c8:	4b6e      	ldr	r3, [pc, #440]	; (8003b84 <menu+0x24c>)
 80039ca:	220d      	movs	r2, #13
 80039cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80039ce:	4b6d      	ldr	r3, [pc, #436]	; (8003b84 <menu+0x24c>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b0a      	cmp	r3, #10
 80039d4:	d10a      	bne.n	80039ec <menu+0xb4>
 80039d6:	4b6e      	ldr	r3, [pc, #440]	; (8003b90 <menu+0x258>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d003      	beq.n	80039e6 <menu+0xae>
 80039de:	4b6c      	ldr	r3, [pc, #432]	; (8003b90 <menu+0x258>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d102      	bne.n	80039ec <menu+0xb4>
			menuSayac = 11;
 80039e6:	4b67      	ldr	r3, [pc, #412]	; (8003b84 <menu+0x24c>)
 80039e8:	220b      	movs	r2, #11
 80039ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80039ec:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <menu+0x24c>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b0c      	cmp	r3, #12
 80039f2:	d10e      	bne.n	8003a12 <menu+0xda>
 80039f4:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <menu+0x25c>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d003      	beq.n	8003a04 <menu+0xcc>
 80039fc:	4b65      	ldr	r3, [pc, #404]	; (8003b94 <menu+0x25c>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d106      	bne.n	8003a12 <menu+0xda>
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <menu+0x254>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d102      	bne.n	8003a12 <menu+0xda>
			menuSayac = 16;
 8003a0c:	4b5d      	ldr	r3, [pc, #372]	; (8003b84 <menu+0x24c>)
 8003a0e:	2210      	movs	r2, #16
 8003a10:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8003a12:	4b5c      	ldr	r3, [pc, #368]	; (8003b84 <menu+0x24c>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d10e      	bne.n	8003a38 <menu+0x100>
 8003a1a:	4b5e      	ldr	r3, [pc, #376]	; (8003b94 <menu+0x25c>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d003      	beq.n	8003a2a <menu+0xf2>
 8003a22:	4b5c      	ldr	r3, [pc, #368]	; (8003b94 <menu+0x25c>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d106      	bne.n	8003a38 <menu+0x100>
 8003a2a:	4b58      	ldr	r3, [pc, #352]	; (8003b8c <menu+0x254>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d102      	bne.n	8003a38 <menu+0x100>
			menuSayac = 13;
 8003a32:	4b54      	ldr	r3, [pc, #336]	; (8003b84 <menu+0x24c>)
 8003a34:	220d      	movs	r2, #13
 8003a36:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8003a38:	4b52      	ldr	r3, [pc, #328]	; (8003b84 <menu+0x24c>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b0f      	cmp	r3, #15
 8003a3e:	d106      	bne.n	8003a4e <menu+0x116>
 8003a40:	4b55      	ldr	r3, [pc, #340]	; (8003b98 <menu+0x260>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d102      	bne.n	8003a4e <menu+0x116>
			menuSayac = 16;
 8003a48:	4b4e      	ldr	r3, [pc, #312]	; (8003b84 <menu+0x24c>)
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8003a4e:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <menu+0x24c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b18      	cmp	r3, #24
 8003a54:	d106      	bne.n	8003a64 <menu+0x12c>
 8003a56:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <menu+0x250>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <menu+0x12c>
			menuSayac = 26;
 8003a5e:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <menu+0x24c>)
 8003a60:	221a      	movs	r2, #26
 8003a62:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8003a64:	f004 f850 	bl	8007b08 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a68:	2108      	movs	r1, #8
 8003a6a:	484c      	ldr	r0, [pc, #304]	; (8003b9c <menu+0x264>)
 8003a6c:	f005 fc5c 	bl	8009328 <HAL_GPIO_ReadPin>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d175      	bne.n	8003b62 <menu+0x22a>
 8003a76:	4b42      	ldr	r3, [pc, #264]	; (8003b80 <menu+0x248>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	f083 0301 	eor.w	r3, r3, #1
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d06e      	beq.n	8003b62 <menu+0x22a>
		if (menuSayac <= 1) {
 8003a84:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <menu+0x24c>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d802      	bhi.n	8003a92 <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8003a8c:	4b3d      	ldr	r3, [pc, #244]	; (8003b84 <menu+0x24c>)
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8003a92:	4b3c      	ldr	r3, [pc, #240]	; (8003b84 <menu+0x24c>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <menu+0x24c>)
 8003a9c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8003a9e:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <menu+0x24c>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b14      	cmp	r3, #20
 8003aa4:	d106      	bne.n	8003ab4 <menu+0x17c>
 8003aa6:	4b38      	ldr	r3, [pc, #224]	; (8003b88 <menu+0x250>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <menu+0x17c>
			menuSayac = 17;
 8003aae:	4b35      	ldr	r3, [pc, #212]	; (8003b84 <menu+0x24c>)
 8003ab0:	2211      	movs	r2, #17
 8003ab2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8003ab4:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <menu+0x24c>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d106      	bne.n	8003aca <menu+0x192>
 8003abc:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <menu+0x254>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <menu+0x192>
			menuSayac = 7;
 8003ac4:	4b2f      	ldr	r3, [pc, #188]	; (8003b84 <menu+0x24c>)
 8003ac6:	2207      	movs	r2, #7
 8003ac8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8003aca:	4b2e      	ldr	r3, [pc, #184]	; (8003b84 <menu+0x24c>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b0f      	cmp	r3, #15
 8003ad0:	d106      	bne.n	8003ae0 <menu+0x1a8>
 8003ad2:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <menu+0x254>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d102      	bne.n	8003ae0 <menu+0x1a8>
			menuSayac = 12;
 8003ada:	4b2a      	ldr	r3, [pc, #168]	; (8003b84 <menu+0x24c>)
 8003adc:	220c      	movs	r2, #12
 8003ade:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8003ae0:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <menu+0x24c>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	d106      	bne.n	8003af6 <menu+0x1be>
 8003ae8:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <menu+0x254>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d102      	bne.n	8003af6 <menu+0x1be>
			menuSayac = 8;
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <menu+0x24c>)
 8003af2:	2208      	movs	r2, #8
 8003af4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <menu+0x24c>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b0a      	cmp	r3, #10
 8003afc:	d10a      	bne.n	8003b14 <menu+0x1dc>
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <menu+0x258>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d003      	beq.n	8003b0e <menu+0x1d6>
 8003b06:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <menu+0x258>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d102      	bne.n	8003b14 <menu+0x1dc>
			menuSayac = 9;
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <menu+0x24c>)
 8003b10:	2209      	movs	r2, #9
 8003b12:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <menu+0x24c>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d10a      	bne.n	8003b32 <menu+0x1fa>
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <menu+0x25c>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d003      	beq.n	8003b2c <menu+0x1f4>
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <menu+0x25c>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d102      	bne.n	8003b32 <menu+0x1fa>
			menuSayac = 11;
 8003b2c:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <menu+0x24c>)
 8003b2e:	220b      	movs	r2, #11
 8003b30:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8003b32:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <menu+0x24c>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	d106      	bne.n	8003b48 <menu+0x210>
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <menu+0x260>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <menu+0x210>
			menuSayac = 14;
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <menu+0x24c>)
 8003b44:	220e      	movs	r2, #14
 8003b46:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <menu+0x24c>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b19      	cmp	r3, #25
 8003b4e:	d106      	bne.n	8003b5e <menu+0x226>
 8003b50:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <menu+0x250>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d102      	bne.n	8003b5e <menu+0x226>
			menuSayac = 23;
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <menu+0x24c>)
 8003b5a:	2217      	movs	r2, #23
 8003b5c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8003b5e:	f003 ffd3 	bl	8007b08 <bekle>
	}

	if (menuSayac == 0) {
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <menu+0x24c>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d134      	bne.n	8003bd4 <menu+0x29c>
		if(dilSecim == 0) {
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <menu+0x268>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d122      	bne.n	8003bb8 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8003b72:	4a0c      	ldr	r2, [pc, #48]	; (8003ba4 <menu+0x26c>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	2001      	movs	r0, #1
 8003b78:	e016      	b.n	8003ba8 <menu+0x270>
 8003b7a:	bf00      	nop
 8003b7c:	40010800 	.word	0x40010800
 8003b80:	20000253 	.word	0x20000253
 8003b84:	20000224 	.word	0x20000224
 8003b88:	20000233 	.word	0x20000233
 8003b8c:	2000022c 	.word	0x2000022c
 8003b90:	2000022d 	.word	0x2000022d
 8003b94:	2000022e 	.word	0x2000022e
 8003b98:	2000022f 	.word	0x2000022f
 8003b9c:	40011000 	.word	0x40011000
 8003ba0:	20000245 	.word	0x20000245
 8003ba4:	0800d168 	.word	0x0800d168
 8003ba8:	f7fe fe78 	bl	800289c <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8003bac:	4a94      	ldr	r2, [pc, #592]	; (8003e00 <menu+0x4c8>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	f7fe fe73 	bl	800289c <lcd_print>
 8003bb6:	e00d      	b.n	8003bd4 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8003bb8:	4b92      	ldr	r3, [pc, #584]	; (8003e04 <menu+0x4cc>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d109      	bne.n	8003bd4 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8003bc0:	4a91      	ldr	r2, [pc, #580]	; (8003e08 <menu+0x4d0>)
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f7fe fe69 	bl	800289c <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8003bca:	4a90      	ldr	r2, [pc, #576]	; (8003e0c <menu+0x4d4>)
 8003bcc:	2101      	movs	r1, #1
 8003bce:	2002      	movs	r0, #2
 8003bd0:	f7fe fe64 	bl	800289c <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8003bd4:	4b8e      	ldr	r3, [pc, #568]	; (8003e10 <menu+0x4d8>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	f040 82b5 	bne.w	8004148 <menu+0x810>
		if(dilSecim == 0) {
 8003bde:	4b89      	ldr	r3, [pc, #548]	; (8003e04 <menu+0x4cc>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8003be6:	4a8b      	ldr	r2, [pc, #556]	; (8003e14 <menu+0x4dc>)
 8003be8:	2101      	movs	r1, #1
 8003bea:	2001      	movs	r0, #1
 8003bec:	f7fe fe56 	bl	800289c <lcd_print>
 8003bf0:	e008      	b.n	8003c04 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8003bf2:	4b84      	ldr	r3, [pc, #528]	; (8003e04 <menu+0x4cc>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d104      	bne.n	8003c04 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8003bfa:	4a87      	ldr	r2, [pc, #540]	; (8003e18 <menu+0x4e0>)
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f7fe fe4c 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8003c04:	4b85      	ldr	r3, [pc, #532]	; (8003e1c <menu+0x4e4>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d123      	bne.n	8003c54 <menu+0x31c>
			if(dilSecim == 0) {
 8003c0c:	4b7d      	ldr	r3, [pc, #500]	; (8003e04 <menu+0x4cc>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8003c14:	4a82      	ldr	r2, [pc, #520]	; (8003e20 <menu+0x4e8>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	2002      	movs	r0, #2
 8003c1a:	f7fe fe3f 	bl	800289c <lcd_print>
 8003c1e:	e008      	b.n	8003c32 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8003c20:	4b78      	ldr	r3, [pc, #480]	; (8003e04 <menu+0x4cc>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d104      	bne.n	8003c32 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8003c28:	4a7e      	ldr	r2, [pc, #504]	; (8003e24 <menu+0x4ec>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	f7fe fe35 	bl	800289c <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8003c32:	4a7d      	ldr	r2, [pc, #500]	; (8003e28 <menu+0x4f0>)
 8003c34:	210f      	movs	r1, #15
 8003c36:	2002      	movs	r0, #2
 8003c38:	f7fe fe30 	bl	800289c <lcd_print>
			itoa(hataKayit1, snum, 10);
 8003c3c:	4b7b      	ldr	r3, [pc, #492]	; (8003e2c <menu+0x4f4>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	220a      	movs	r2, #10
 8003c42:	497b      	ldr	r1, [pc, #492]	; (8003e30 <menu+0x4f8>)
 8003c44:	4618      	mov	r0, r3
 8003c46:	f008 fb9b 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8003c4a:	4a79      	ldr	r2, [pc, #484]	; (8003e30 <menu+0x4f8>)
 8003c4c:	210e      	movs	r1, #14
 8003c4e:	2002      	movs	r0, #2
 8003c50:	f7fe fe24 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8003c54:	4b71      	ldr	r3, [pc, #452]	; (8003e1c <menu+0x4e4>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d123      	bne.n	8003ca4 <menu+0x36c>
			if(dilSecim == 0) {
 8003c5c:	4b69      	ldr	r3, [pc, #420]	; (8003e04 <menu+0x4cc>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8003c64:	4a73      	ldr	r2, [pc, #460]	; (8003e34 <menu+0x4fc>)
 8003c66:	2101      	movs	r1, #1
 8003c68:	2002      	movs	r0, #2
 8003c6a:	f7fe fe17 	bl	800289c <lcd_print>
 8003c6e:	e008      	b.n	8003c82 <menu+0x34a>
			} else if(dilSecim == 1) {
 8003c70:	4b64      	ldr	r3, [pc, #400]	; (8003e04 <menu+0x4cc>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d104      	bne.n	8003c82 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8003c78:	4a6f      	ldr	r2, [pc, #444]	; (8003e38 <menu+0x500>)
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f7fe fe0d 	bl	800289c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8003c82:	4a6e      	ldr	r2, [pc, #440]	; (8003e3c <menu+0x504>)
 8003c84:	210f      	movs	r1, #15
 8003c86:	2002      	movs	r0, #2
 8003c88:	f7fe fe08 	bl	800289c <lcd_print>
			itoa(hataKayit2, snum, 10);
 8003c8c:	4b6c      	ldr	r3, [pc, #432]	; (8003e40 <menu+0x508>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	220a      	movs	r2, #10
 8003c92:	4967      	ldr	r1, [pc, #412]	; (8003e30 <menu+0x4f8>)
 8003c94:	4618      	mov	r0, r3
 8003c96:	f008 fb73 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8003c9a:	4a65      	ldr	r2, [pc, #404]	; (8003e30 <menu+0x4f8>)
 8003c9c:	210e      	movs	r1, #14
 8003c9e:	2002      	movs	r0, #2
 8003ca0:	f7fe fdfc 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8003ca4:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <menu+0x4e4>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d123      	bne.n	8003cf4 <menu+0x3bc>
			if(dilSecim == 0) {
 8003cac:	4b55      	ldr	r3, [pc, #340]	; (8003e04 <menu+0x4cc>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8003cb4:	4a63      	ldr	r2, [pc, #396]	; (8003e44 <menu+0x50c>)
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	2002      	movs	r0, #2
 8003cba:	f7fe fdef 	bl	800289c <lcd_print>
 8003cbe:	e008      	b.n	8003cd2 <menu+0x39a>
			} else if(dilSecim == 1) {
 8003cc0:	4b50      	ldr	r3, [pc, #320]	; (8003e04 <menu+0x4cc>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d104      	bne.n	8003cd2 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8003cc8:	4a5f      	ldr	r2, [pc, #380]	; (8003e48 <menu+0x510>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	2002      	movs	r0, #2
 8003cce:	f7fe fde5 	bl	800289c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8003cd2:	4a5a      	ldr	r2, [pc, #360]	; (8003e3c <menu+0x504>)
 8003cd4:	210f      	movs	r1, #15
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f7fe fde0 	bl	800289c <lcd_print>
			itoa(hataKayit3, snum, 10);
 8003cdc:	4b5b      	ldr	r3, [pc, #364]	; (8003e4c <menu+0x514>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	220a      	movs	r2, #10
 8003ce2:	4953      	ldr	r1, [pc, #332]	; (8003e30 <menu+0x4f8>)
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f008 fb4b 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8003cea:	4a51      	ldr	r2, [pc, #324]	; (8003e30 <menu+0x4f8>)
 8003cec:	210e      	movs	r1, #14
 8003cee:	2002      	movs	r0, #2
 8003cf0:	f7fe fdd4 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8003cf4:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <menu+0x4e4>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d123      	bne.n	8003d44 <menu+0x40c>
			if(dilSecim == 0) {
 8003cfc:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <menu+0x4cc>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8003d04:	4a52      	ldr	r2, [pc, #328]	; (8003e50 <menu+0x518>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f7fe fdc7 	bl	800289c <lcd_print>
 8003d0e:	e008      	b.n	8003d22 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8003d10:	4b3c      	ldr	r3, [pc, #240]	; (8003e04 <menu+0x4cc>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d104      	bne.n	8003d22 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8003d18:	4a4e      	ldr	r2, [pc, #312]	; (8003e54 <menu+0x51c>)
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	2002      	movs	r0, #2
 8003d1e:	f7fe fdbd 	bl	800289c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8003d22:	4a46      	ldr	r2, [pc, #280]	; (8003e3c <menu+0x504>)
 8003d24:	210f      	movs	r1, #15
 8003d26:	2002      	movs	r0, #2
 8003d28:	f7fe fdb8 	bl	800289c <lcd_print>
			itoa(hataKayit4, snum, 10);
 8003d2c:	4b4a      	ldr	r3, [pc, #296]	; (8003e58 <menu+0x520>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	220a      	movs	r2, #10
 8003d32:	493f      	ldr	r1, [pc, #252]	; (8003e30 <menu+0x4f8>)
 8003d34:	4618      	mov	r0, r3
 8003d36:	f008 fb23 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8003d3a:	4a3d      	ldr	r2, [pc, #244]	; (8003e30 <menu+0x4f8>)
 8003d3c:	210e      	movs	r1, #14
 8003d3e:	2002      	movs	r0, #2
 8003d40:	f7fe fdac 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8003d44:	4b35      	ldr	r3, [pc, #212]	; (8003e1c <menu+0x4e4>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d123      	bne.n	8003d94 <menu+0x45c>
			if(dilSecim == 0) {
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <menu+0x4cc>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8003d54:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <menu+0x524>)
 8003d56:	2101      	movs	r1, #1
 8003d58:	2002      	movs	r0, #2
 8003d5a:	f7fe fd9f 	bl	800289c <lcd_print>
 8003d5e:	e008      	b.n	8003d72 <menu+0x43a>
			} else if(dilSecim == 1) {
 8003d60:	4b28      	ldr	r3, [pc, #160]	; (8003e04 <menu+0x4cc>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d104      	bne.n	8003d72 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8003d68:	4a3d      	ldr	r2, [pc, #244]	; (8003e60 <menu+0x528>)
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	2002      	movs	r0, #2
 8003d6e:	f7fe fd95 	bl	800289c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8003d72:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <menu+0x504>)
 8003d74:	210f      	movs	r1, #15
 8003d76:	2002      	movs	r0, #2
 8003d78:	f7fe fd90 	bl	800289c <lcd_print>
			itoa(hataKayit5, snum, 10);
 8003d7c:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <menu+0x52c>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	220a      	movs	r2, #10
 8003d82:	492b      	ldr	r1, [pc, #172]	; (8003e30 <menu+0x4f8>)
 8003d84:	4618      	mov	r0, r3
 8003d86:	f008 fafb 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8003d8a:	4a29      	ldr	r2, [pc, #164]	; (8003e30 <menu+0x4f8>)
 8003d8c:	210e      	movs	r1, #14
 8003d8e:	2002      	movs	r0, #2
 8003d90:	f7fe fd84 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8003d94:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <menu+0x4e4>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d123      	bne.n	8003de4 <menu+0x4ac>
			if(dilSecim == 0) {
 8003d9c:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <menu+0x4cc>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8003da4:	4a30      	ldr	r2, [pc, #192]	; (8003e68 <menu+0x530>)
 8003da6:	2101      	movs	r1, #1
 8003da8:	2002      	movs	r0, #2
 8003daa:	f7fe fd77 	bl	800289c <lcd_print>
 8003dae:	e008      	b.n	8003dc2 <menu+0x48a>
			} else if(dilSecim == 1) {
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <menu+0x4cc>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d104      	bne.n	8003dc2 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8003db8:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <menu+0x534>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f7fe fd6d 	bl	800289c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <menu+0x504>)
 8003dc4:	210f      	movs	r1, #15
 8003dc6:	2002      	movs	r0, #2
 8003dc8:	f7fe fd68 	bl	800289c <lcd_print>
			itoa(hataKayit6, snum, 10);
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <menu+0x538>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	220a      	movs	r2, #10
 8003dd2:	4917      	ldr	r1, [pc, #92]	; (8003e30 <menu+0x4f8>)
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f008 fad3 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8003dda:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <menu+0x4f8>)
 8003ddc:	210e      	movs	r1, #14
 8003dde:	2002      	movs	r0, #2
 8003de0:	f7fe fd5c 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8003de4:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <menu+0x4e4>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b06      	cmp	r3, #6
 8003dea:	d15f      	bne.n	8003eac <menu+0x574>
			if(dilSecim == 0) {
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <menu+0x4cc>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d141      	bne.n	8003e78 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8003df4:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <menu+0x53c>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	2002      	movs	r0, #2
 8003dfa:	f7fe fd4f 	bl	800289c <lcd_print>
 8003dfe:	e044      	b.n	8003e8a <menu+0x552>
 8003e00:	0800d17c 	.word	0x0800d17c
 8003e04:	20000245 	.word	0x20000245
 8003e08:	0800d190 	.word	0x0800d190
 8003e0c:	0800d1a4 	.word	0x0800d1a4
 8003e10:	20000224 	.word	0x20000224
 8003e14:	0800d1b8 	.word	0x0800d1b8
 8003e18:	0800d1cc 	.word	0x0800d1cc
 8003e1c:	20000226 	.word	0x20000226
 8003e20:	0800d1e0 	.word	0x0800d1e0
 8003e24:	0800d1f0 	.word	0x0800d1f0
 8003e28:	0800d200 	.word	0x0800d200
 8003e2c:	20000246 	.word	0x20000246
 8003e30:	20000198 	.word	0x20000198
 8003e34:	0800d204 	.word	0x0800d204
 8003e38:	0800d214 	.word	0x0800d214
 8003e3c:	0800d224 	.word	0x0800d224
 8003e40:	20000247 	.word	0x20000247
 8003e44:	0800d228 	.word	0x0800d228
 8003e48:	0800d238 	.word	0x0800d238
 8003e4c:	20000248 	.word	0x20000248
 8003e50:	0800d248 	.word	0x0800d248
 8003e54:	0800d258 	.word	0x0800d258
 8003e58:	20000249 	.word	0x20000249
 8003e5c:	0800d268 	.word	0x0800d268
 8003e60:	0800d278 	.word	0x0800d278
 8003e64:	2000024a 	.word	0x2000024a
 8003e68:	0800d288 	.word	0x0800d288
 8003e6c:	0800d298 	.word	0x0800d298
 8003e70:	2000024b 	.word	0x2000024b
 8003e74:	0800d2a8 	.word	0x0800d2a8
			} else if(dilSecim == 1) {
 8003e78:	4b4f      	ldr	r3, [pc, #316]	; (8003fb8 <menu+0x680>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d104      	bne.n	8003e8a <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8003e80:	4a4e      	ldr	r2, [pc, #312]	; (8003fbc <menu+0x684>)
 8003e82:	2101      	movs	r1, #1
 8003e84:	2002      	movs	r0, #2
 8003e86:	f7fe fd09 	bl	800289c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8003e8a:	4a4d      	ldr	r2, [pc, #308]	; (8003fc0 <menu+0x688>)
 8003e8c:	210f      	movs	r1, #15
 8003e8e:	2002      	movs	r0, #2
 8003e90:	f7fe fd04 	bl	800289c <lcd_print>
			itoa(hataKayit7, snum, 10);
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <menu+0x68c>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	220a      	movs	r2, #10
 8003e9a:	494b      	ldr	r1, [pc, #300]	; (8003fc8 <menu+0x690>)
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f008 fa6f 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8003ea2:	4a49      	ldr	r2, [pc, #292]	; (8003fc8 <menu+0x690>)
 8003ea4:	210e      	movs	r1, #14
 8003ea6:	2002      	movs	r0, #2
 8003ea8:	f7fe fcf8 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8003eac:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <menu+0x694>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b07      	cmp	r3, #7
 8003eb2:	d123      	bne.n	8003efc <menu+0x5c4>
			if(dilSecim == 0) {
 8003eb4:	4b40      	ldr	r3, [pc, #256]	; (8003fb8 <menu+0x680>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d105      	bne.n	8003ec8 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8003ebc:	4a44      	ldr	r2, [pc, #272]	; (8003fd0 <menu+0x698>)
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	2002      	movs	r0, #2
 8003ec2:	f7fe fceb 	bl	800289c <lcd_print>
 8003ec6:	e008      	b.n	8003eda <menu+0x5a2>
			} else if(dilSecim == 1) {
 8003ec8:	4b3b      	ldr	r3, [pc, #236]	; (8003fb8 <menu+0x680>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d104      	bne.n	8003eda <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8003ed0:	4a40      	ldr	r2, [pc, #256]	; (8003fd4 <menu+0x69c>)
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	f7fe fce1 	bl	800289c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8003eda:	4a39      	ldr	r2, [pc, #228]	; (8003fc0 <menu+0x688>)
 8003edc:	210f      	movs	r1, #15
 8003ede:	2002      	movs	r0, #2
 8003ee0:	f7fe fcdc 	bl	800289c <lcd_print>
			itoa(hataKayit8, snum, 10);
 8003ee4:	4b3c      	ldr	r3, [pc, #240]	; (8003fd8 <menu+0x6a0>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	220a      	movs	r2, #10
 8003eea:	4937      	ldr	r1, [pc, #220]	; (8003fc8 <menu+0x690>)
 8003eec:	4618      	mov	r0, r3
 8003eee:	f008 fa47 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8003ef2:	4a35      	ldr	r2, [pc, #212]	; (8003fc8 <menu+0x690>)
 8003ef4:	210e      	movs	r1, #14
 8003ef6:	2002      	movs	r0, #2
 8003ef8:	f7fe fcd0 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8003efc:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <menu+0x694>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d123      	bne.n	8003f4c <menu+0x614>
			if(dilSecim == 0) {
 8003f04:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <menu+0x680>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8003f0c:	4a33      	ldr	r2, [pc, #204]	; (8003fdc <menu+0x6a4>)
 8003f0e:	2101      	movs	r1, #1
 8003f10:	2002      	movs	r0, #2
 8003f12:	f7fe fcc3 	bl	800289c <lcd_print>
 8003f16:	e008      	b.n	8003f2a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8003f18:	4b27      	ldr	r3, [pc, #156]	; (8003fb8 <menu+0x680>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d104      	bne.n	8003f2a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8003f20:	4a2f      	ldr	r2, [pc, #188]	; (8003fe0 <menu+0x6a8>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	2002      	movs	r0, #2
 8003f26:	f7fe fcb9 	bl	800289c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8003f2a:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <menu+0x688>)
 8003f2c:	210f      	movs	r1, #15
 8003f2e:	2002      	movs	r0, #2
 8003f30:	f7fe fcb4 	bl	800289c <lcd_print>
			itoa(hataKayit9, snum, 10);
 8003f34:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <menu+0x6ac>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	220a      	movs	r2, #10
 8003f3a:	4923      	ldr	r1, [pc, #140]	; (8003fc8 <menu+0x690>)
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f008 fa1f 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8003f42:	4a21      	ldr	r2, [pc, #132]	; (8003fc8 <menu+0x690>)
 8003f44:	210e      	movs	r1, #14
 8003f46:	2002      	movs	r0, #2
 8003f48:	f7fe fca8 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8003f4c:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <menu+0x694>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b09      	cmp	r3, #9
 8003f52:	d123      	bne.n	8003f9c <menu+0x664>
			if(dilSecim == 0) {
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <menu+0x680>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8003f5c:	4a22      	ldr	r2, [pc, #136]	; (8003fe8 <menu+0x6b0>)
 8003f5e:	2101      	movs	r1, #1
 8003f60:	2002      	movs	r0, #2
 8003f62:	f7fe fc9b 	bl	800289c <lcd_print>
 8003f66:	e008      	b.n	8003f7a <menu+0x642>
			} else if(dilSecim == 1) {
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <menu+0x680>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d104      	bne.n	8003f7a <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8003f70:	4a1e      	ldr	r2, [pc, #120]	; (8003fec <menu+0x6b4>)
 8003f72:	2101      	movs	r1, #1
 8003f74:	2002      	movs	r0, #2
 8003f76:	f7fe fc91 	bl	800289c <lcd_print>
			}
			lcd_print(2, 16, " ");
 8003f7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <menu+0x6b8>)
 8003f7c:	2110      	movs	r1, #16
 8003f7e:	2002      	movs	r0, #2
 8003f80:	f7fe fc8c 	bl	800289c <lcd_print>
			itoa(hataKayit10, snum, 10);
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <menu+0x6bc>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	220a      	movs	r2, #10
 8003f8a:	490f      	ldr	r1, [pc, #60]	; (8003fc8 <menu+0x690>)
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f008 f9f7 	bl	800c380 <itoa>
			lcd_print(2, 15, snum);
 8003f92:	4a0d      	ldr	r2, [pc, #52]	; (8003fc8 <menu+0x690>)
 8003f94:	210f      	movs	r1, #15
 8003f96:	2002      	movs	r0, #2
 8003f98:	f7fe fc80 	bl	800289c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <menu+0x694>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b0a      	cmp	r3, #10
 8003fa2:	d134      	bne.n	800400e <menu+0x6d6>
			if(dilSecim == 0) {
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <menu+0x680>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d127      	bne.n	8003ffc <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8003fac:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <menu+0x6c0>)
 8003fae:	2101      	movs	r1, #1
 8003fb0:	2002      	movs	r0, #2
 8003fb2:	f7fe fc73 	bl	800289c <lcd_print>
 8003fb6:	e02a      	b.n	800400e <menu+0x6d6>
 8003fb8:	20000245 	.word	0x20000245
 8003fbc:	0800d2b8 	.word	0x0800d2b8
 8003fc0:	0800d224 	.word	0x0800d224
 8003fc4:	2000024c 	.word	0x2000024c
 8003fc8:	20000198 	.word	0x20000198
 8003fcc:	20000226 	.word	0x20000226
 8003fd0:	0800d2c8 	.word	0x0800d2c8
 8003fd4:	0800d2d8 	.word	0x0800d2d8
 8003fd8:	2000024d 	.word	0x2000024d
 8003fdc:	0800d2e8 	.word	0x0800d2e8
 8003fe0:	0800d2f8 	.word	0x0800d2f8
 8003fe4:	2000024e 	.word	0x2000024e
 8003fe8:	0800d308 	.word	0x0800d308
 8003fec:	0800d318 	.word	0x0800d318
 8003ff0:	0800d328 	.word	0x0800d328
 8003ff4:	2000024f 	.word	0x2000024f
 8003ff8:	0800d32c 	.word	0x0800d32c
			} else if(dilSecim == 1) {
 8003ffc:	4b82      	ldr	r3, [pc, #520]	; (8004208 <menu+0x8d0>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d104      	bne.n	800400e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8004004:	4a81      	ldr	r2, [pc, #516]	; (800420c <menu+0x8d4>)
 8004006:	2101      	movs	r1, #1
 8004008:	2002      	movs	r0, #2
 800400a:	f7fe fc47 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800400e:	2102      	movs	r1, #2
 8004010:	487f      	ldr	r0, [pc, #508]	; (8004210 <menu+0x8d8>)
 8004012:	f005 f989 	bl	8009328 <HAL_GPIO_ReadPin>
 8004016:	4603      	mov	r3, r0
 8004018:	2b01      	cmp	r3, #1
 800401a:	d119      	bne.n	8004050 <menu+0x718>
 800401c:	4b7d      	ldr	r3, [pc, #500]	; (8004214 <menu+0x8dc>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	f083 0301 	eor.w	r3, r3, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d012      	beq.n	8004050 <menu+0x718>
 800402a:	4b7b      	ldr	r3, [pc, #492]	; (8004218 <menu+0x8e0>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10e      	bne.n	8004050 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8004032:	4b7a      	ldr	r3, [pc, #488]	; (800421c <menu+0x8e4>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	b2da      	uxtb	r2, r3
 800403a:	4b78      	ldr	r3, [pc, #480]	; (800421c <menu+0x8e4>)
 800403c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800403e:	4b77      	ldr	r3, [pc, #476]	; (800421c <menu+0x8e4>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b0a      	cmp	r3, #10
 8004044:	d902      	bls.n	800404c <menu+0x714>
				hataGostermeSirasi = 0;
 8004046:	4b75      	ldr	r3, [pc, #468]	; (800421c <menu+0x8e4>)
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800404c:	f003 fd5c 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8004050:	2104      	movs	r1, #4
 8004052:	486f      	ldr	r0, [pc, #444]	; (8004210 <menu+0x8d8>)
 8004054:	f005 f968 	bl	8009328 <HAL_GPIO_ReadPin>
 8004058:	4603      	mov	r3, r0
 800405a:	2b01      	cmp	r3, #1
 800405c:	d119      	bne.n	8004092 <menu+0x75a>
 800405e:	4b6d      	ldr	r3, [pc, #436]	; (8004214 <menu+0x8dc>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	f083 0301 	eor.w	r3, r3, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d012      	beq.n	8004092 <menu+0x75a>
 800406c:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <menu+0x8e0>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10e      	bne.n	8004092 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8004074:	4b69      	ldr	r3, [pc, #420]	; (800421c <menu+0x8e4>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	3b01      	subs	r3, #1
 800407a:	b2da      	uxtb	r2, r3
 800407c:	4b67      	ldr	r3, [pc, #412]	; (800421c <menu+0x8e4>)
 800407e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8004080:	4b66      	ldr	r3, [pc, #408]	; (800421c <menu+0x8e4>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b0b      	cmp	r3, #11
 8004086:	d902      	bls.n	800408e <menu+0x756>
	    		hataGostermeSirasi = 10;
 8004088:	4b64      	ldr	r3, [pc, #400]	; (800421c <menu+0x8e4>)
 800408a:	220a      	movs	r2, #10
 800408c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800408e:	f003 fd3b 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8004092:	2108      	movs	r1, #8
 8004094:	485e      	ldr	r0, [pc, #376]	; (8004210 <menu+0x8d8>)
 8004096:	f005 f947 	bl	8009328 <HAL_GPIO_ReadPin>
 800409a:	4603      	mov	r3, r0
 800409c:	2b01      	cmp	r3, #1
 800409e:	d153      	bne.n	8004148 <menu+0x810>
 80040a0:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <menu+0x8dc>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f083 0301 	eor.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04c      	beq.n	8004148 <menu+0x810>
 80040ae:	4b5b      	ldr	r3, [pc, #364]	; (800421c <menu+0x8e4>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b0a      	cmp	r3, #10
 80040b4:	d148      	bne.n	8004148 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 80040b6:	4b5a      	ldr	r3, [pc, #360]	; (8004220 <menu+0x8e8>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	4b59      	ldr	r3, [pc, #356]	; (8004224 <menu+0x8ec>)
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80040c4:	4b58      	ldr	r3, [pc, #352]	; (8004228 <menu+0x8f0>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	4b56      	ldr	r3, [pc, #344]	; (8004224 <menu+0x8ec>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80040d2:	4b56      	ldr	r3, [pc, #344]	; (800422c <menu+0x8f4>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	4b52      	ldr	r3, [pc, #328]	; (8004224 <menu+0x8ec>)
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80040e0:	4b53      	ldr	r3, [pc, #332]	; (8004230 <menu+0x8f8>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	4b4f      	ldr	r3, [pc, #316]	; (8004224 <menu+0x8ec>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80040ee:	4b51      	ldr	r3, [pc, #324]	; (8004234 <menu+0x8fc>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <menu+0x8ec>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80040fc:	4b4e      	ldr	r3, [pc, #312]	; (8004238 <menu+0x900>)
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	4b48      	ldr	r3, [pc, #288]	; (8004224 <menu+0x8ec>)
 8004104:	2200      	movs	r2, #0
 8004106:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800410a:	4b4c      	ldr	r3, [pc, #304]	; (800423c <menu+0x904>)
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
 8004110:	4b44      	ldr	r3, [pc, #272]	; (8004224 <menu+0x8ec>)
 8004112:	2200      	movs	r2, #0
 8004114:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8004118:	4b49      	ldr	r3, [pc, #292]	; (8004240 <menu+0x908>)
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	4b41      	ldr	r3, [pc, #260]	; (8004224 <menu+0x8ec>)
 8004120:	2200      	movs	r2, #0
 8004122:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8004126:	4b47      	ldr	r3, [pc, #284]	; (8004244 <menu+0x90c>)
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <menu+0x8ec>)
 800412e:	2200      	movs	r2, #0
 8004130:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8004134:	4b44      	ldr	r3, [pc, #272]	; (8004248 <menu+0x910>)
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	4b3a      	ldr	r3, [pc, #232]	; (8004224 <menu+0x8ec>)
 800413c:	2200      	movs	r2, #0
 800413e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8004142:	4b42      	ldr	r3, [pc, #264]	; (800424c <menu+0x914>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8004148:	4b41      	ldr	r3, [pc, #260]	; (8004250 <menu+0x918>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b02      	cmp	r3, #2
 800414e:	f040 80fc 	bne.w	800434a <menu+0xa12>
		if(dilSecim == 0) {
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <menu+0x8d0>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 800415a:	4a3e      	ldr	r2, [pc, #248]	; (8004254 <menu+0x91c>)
 800415c:	2101      	movs	r1, #1
 800415e:	2001      	movs	r0, #1
 8004160:	f7fe fb9c 	bl	800289c <lcd_print>
 8004164:	e008      	b.n	8004178 <menu+0x840>
		} else if(dilSecim == 1) {
 8004166:	4b28      	ldr	r3, [pc, #160]	; (8004208 <menu+0x8d0>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d104      	bne.n	8004178 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 800416e:	4a3a      	ldr	r2, [pc, #232]	; (8004258 <menu+0x920>)
 8004170:	2101      	movs	r1, #1
 8004172:	2001      	movs	r0, #1
 8004174:	f7fe fb92 	bl	800289c <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8004178:	4b27      	ldr	r3, [pc, #156]	; (8004218 <menu+0x8e0>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d003      	beq.n	8004188 <menu+0x850>
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <menu+0x8e0>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d112      	bne.n	80041ae <menu+0x876>
			if(dilSecim == 0) {
 8004188:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <menu+0x8d0>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8004190:	4a32      	ldr	r2, [pc, #200]	; (800425c <menu+0x924>)
 8004192:	2101      	movs	r1, #1
 8004194:	2002      	movs	r0, #2
 8004196:	f7fe fb81 	bl	800289c <lcd_print>
 800419a:	e008      	b.n	80041ae <menu+0x876>
			} else if(dilSecim == 1) {
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <menu+0x8d0>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d104      	bne.n	80041ae <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 80041a4:	4a2e      	ldr	r2, [pc, #184]	; (8004260 <menu+0x928>)
 80041a6:	2101      	movs	r1, #1
 80041a8:	2002      	movs	r0, #2
 80041aa:	f7fe fb77 	bl	800289c <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80041ae:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <menu+0x92c>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d116      	bne.n	80041e4 <menu+0x8ac>
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <menu+0x8e0>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d112      	bne.n	80041e4 <menu+0x8ac>
			if(dilSecim == 0) {
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <menu+0x8d0>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d105      	bne.n	80041d2 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 80041c6:	4a28      	ldr	r2, [pc, #160]	; (8004268 <menu+0x930>)
 80041c8:	2101      	movs	r1, #1
 80041ca:	2002      	movs	r0, #2
 80041cc:	f7fe fb66 	bl	800289c <lcd_print>
 80041d0:	e008      	b.n	80041e4 <menu+0x8ac>
			} else if(dilSecim == 1) {
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <menu+0x8d0>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d104      	bne.n	80041e4 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 80041da:	4a24      	ldr	r2, [pc, #144]	; (800426c <menu+0x934>)
 80041dc:	2101      	movs	r1, #1
 80041de:	2002      	movs	r0, #2
 80041e0:	f7fe fb5c 	bl	800289c <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80041e4:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <menu+0x92c>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d14c      	bne.n	8004286 <menu+0x94e>
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <menu+0x8e0>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d148      	bne.n	8004286 <menu+0x94e>
			if(dilSecim == 0) {
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <menu+0x8d0>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d13b      	bne.n	8004274 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <menu+0x938>)
 80041fe:	2101      	movs	r1, #1
 8004200:	2002      	movs	r0, #2
 8004202:	f7fe fb4b 	bl	800289c <lcd_print>
 8004206:	e03e      	b.n	8004286 <menu+0x94e>
 8004208:	20000245 	.word	0x20000245
 800420c:	0800d340 	.word	0x0800d340
 8004210:	40010800 	.word	0x40010800
 8004214:	20000253 	.word	0x20000253
 8004218:	20000233 	.word	0x20000233
 800421c:	20000226 	.word	0x20000226
 8004220:	20000246 	.word	0x20000246
 8004224:	20000128 	.word	0x20000128
 8004228:	20000247 	.word	0x20000247
 800422c:	20000248 	.word	0x20000248
 8004230:	20000249 	.word	0x20000249
 8004234:	2000024a 	.word	0x2000024a
 8004238:	2000024b 	.word	0x2000024b
 800423c:	2000024c 	.word	0x2000024c
 8004240:	2000024d 	.word	0x2000024d
 8004244:	2000024e 	.word	0x2000024e
 8004248:	2000024f 	.word	0x2000024f
 800424c:	20000250 	.word	0x20000250
 8004250:	20000224 	.word	0x20000224
 8004254:	0800d354 	.word	0x0800d354
 8004258:	0800d368 	.word	0x0800d368
 800425c:	0800d37c 	.word	0x0800d37c
 8004260:	0800d390 	.word	0x0800d390
 8004264:	20000225 	.word	0x20000225
 8004268:	0800d3a4 	.word	0x0800d3a4
 800426c:	0800d3b4 	.word	0x0800d3b4
 8004270:	0800d3c4 	.word	0x0800d3c4
			} else if(dilSecim == 1) {
 8004274:	4b98      	ldr	r3, [pc, #608]	; (80044d8 <menu+0xba0>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d104      	bne.n	8004286 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 800427c:	4a97      	ldr	r2, [pc, #604]	; (80044dc <menu+0xba4>)
 800427e:	2101      	movs	r1, #1
 8004280:	2002      	movs	r0, #2
 8004282:	f7fe fb0b 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8004286:	2102      	movs	r1, #2
 8004288:	4895      	ldr	r0, [pc, #596]	; (80044e0 <menu+0xba8>)
 800428a:	f005 f84d 	bl	8009328 <HAL_GPIO_ReadPin>
 800428e:	4603      	mov	r3, r0
 8004290:	2b01      	cmp	r3, #1
 8004292:	d119      	bne.n	80042c8 <menu+0x990>
 8004294:	4b93      	ldr	r3, [pc, #588]	; (80044e4 <menu+0xbac>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	f083 0301 	eor.w	r3, r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d012      	beq.n	80042c8 <menu+0x990>
 80042a2:	4b91      	ldr	r3, [pc, #580]	; (80044e8 <menu+0xbb0>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10e      	bne.n	80042c8 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 80042aa:	4b90      	ldr	r3, [pc, #576]	; (80044ec <menu+0xbb4>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	3301      	adds	r3, #1
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4b8e      	ldr	r3, [pc, #568]	; (80044ec <menu+0xbb4>)
 80042b4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80042b6:	4b8d      	ldr	r3, [pc, #564]	; (80044ec <menu+0xbb4>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d902      	bls.n	80042c4 <menu+0x98c>
				calismaSekli = 0;
 80042be:	4b8b      	ldr	r3, [pc, #556]	; (80044ec <menu+0xbb4>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042c4:	f003 fc20 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80042c8:	2104      	movs	r1, #4
 80042ca:	4885      	ldr	r0, [pc, #532]	; (80044e0 <menu+0xba8>)
 80042cc:	f005 f82c 	bl	8009328 <HAL_GPIO_ReadPin>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d119      	bne.n	800430a <menu+0x9d2>
 80042d6:	4b83      	ldr	r3, [pc, #524]	; (80044e4 <menu+0xbac>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	f083 0301 	eor.w	r3, r3, #1
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <menu+0x9d2>
 80042e4:	4b80      	ldr	r3, [pc, #512]	; (80044e8 <menu+0xbb0>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10e      	bne.n	800430a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 80042ec:	4b7f      	ldr	r3, [pc, #508]	; (80044ec <menu+0xbb4>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	4b7d      	ldr	r3, [pc, #500]	; (80044ec <menu+0xbb4>)
 80042f6:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80042f8:	4b7c      	ldr	r3, [pc, #496]	; (80044ec <menu+0xbb4>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <menu+0x9ce>
	    		calismaSekli = 1;
 8004300:	4b7a      	ldr	r3, [pc, #488]	; (80044ec <menu+0xbb4>)
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8004306:	f003 fbff 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800430a:	2108      	movs	r1, #8
 800430c:	4874      	ldr	r0, [pc, #464]	; (80044e0 <menu+0xba8>)
 800430e:	f005 f80b 	bl	8009328 <HAL_GPIO_ReadPin>
 8004312:	4603      	mov	r3, r0
 8004314:	2b01      	cmp	r3, #1
 8004316:	d118      	bne.n	800434a <menu+0xa12>
 8004318:	4b72      	ldr	r3, [pc, #456]	; (80044e4 <menu+0xbac>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	f083 0301 	eor.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d011      	beq.n	800434a <menu+0xa12>
			eepromData[1] = calismaSekli;
 8004326:	4b71      	ldr	r3, [pc, #452]	; (80044ec <menu+0xbb4>)
 8004328:	781a      	ldrb	r2, [r3, #0]
 800432a:	4b71      	ldr	r3, [pc, #452]	; (80044f0 <menu+0xbb8>)
 800432c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 800432e:	4b6f      	ldr	r3, [pc, #444]	; (80044ec <menu+0xbb4>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d106      	bne.n	8004344 <menu+0xa0c>
				altLimit = 1;
 8004336:	4b6f      	ldr	r3, [pc, #444]	; (80044f4 <menu+0xbbc>)
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800433c:	4b6d      	ldr	r3, [pc, #436]	; (80044f4 <menu+0xbbc>)
 800433e:	781a      	ldrb	r2, [r3, #0]
 8004340:	4b6b      	ldr	r3, [pc, #428]	; (80044f0 <menu+0xbb8>)
 8004342:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8004344:	4b6c      	ldr	r3, [pc, #432]	; (80044f8 <menu+0xbc0>)
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800434a:	4b6c      	ldr	r3, [pc, #432]	; (80044fc <menu+0xbc4>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b03      	cmp	r3, #3
 8004350:	f040 8083 	bne.w	800445a <menu+0xb22>
		if(dilSecim == 0) {
 8004354:	4b60      	ldr	r3, [pc, #384]	; (80044d8 <menu+0xba0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <menu+0xbc8>)
 800435e:	2101      	movs	r1, #1
 8004360:	2001      	movs	r0, #1
 8004362:	f7fe fa9b 	bl	800289c <lcd_print>
 8004366:	e008      	b.n	800437a <menu+0xa42>
		} else if(dilSecim == 1) {
 8004368:	4b5b      	ldr	r3, [pc, #364]	; (80044d8 <menu+0xba0>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d104      	bne.n	800437a <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8004370:	4a64      	ldr	r2, [pc, #400]	; (8004504 <menu+0xbcc>)
 8004372:	2101      	movs	r1, #1
 8004374:	2001      	movs	r0, #1
 8004376:	f7fe fa91 	bl	800289c <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 800437a:	4b63      	ldr	r3, [pc, #396]	; (8004508 <menu+0xbd0>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d113      	bne.n	80043aa <menu+0xa72>
			if(dilSecim == 0) {
 8004382:	4b55      	ldr	r3, [pc, #340]	; (80044d8 <menu+0xba0>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 800438a:	4a60      	ldr	r2, [pc, #384]	; (800450c <menu+0xbd4>)
 800438c:	2101      	movs	r1, #1
 800438e:	2002      	movs	r0, #2
 8004390:	f7fe fa84 	bl	800289c <lcd_print>
 8004394:	e012      	b.n	80043bc <menu+0xa84>
			} else if(dilSecim == 1) {
 8004396:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <menu+0xba0>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10e      	bne.n	80043bc <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 800439e:	4a5c      	ldr	r2, [pc, #368]	; (8004510 <menu+0xbd8>)
 80043a0:	2101      	movs	r1, #1
 80043a2:	2002      	movs	r0, #2
 80043a4:	f7fe fa7a 	bl	800289c <lcd_print>
 80043a8:	e008      	b.n	80043bc <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 80043aa:	4b57      	ldr	r3, [pc, #348]	; (8004508 <menu+0xbd0>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d104      	bne.n	80043bc <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 80043b2:	4a58      	ldr	r2, [pc, #352]	; (8004514 <menu+0xbdc>)
 80043b4:	2101      	movs	r1, #1
 80043b6:	2002      	movs	r0, #2
 80043b8:	f7fe fa70 	bl	800289c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043bc:	2102      	movs	r1, #2
 80043be:	4848      	ldr	r0, [pc, #288]	; (80044e0 <menu+0xba8>)
 80043c0:	f004 ffb2 	bl	8009328 <HAL_GPIO_ReadPin>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d115      	bne.n	80043f6 <menu+0xabe>
 80043ca:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <menu+0xbac>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	f083 0301 	eor.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 80043d8:	4b4b      	ldr	r3, [pc, #300]	; (8004508 <menu+0xbd0>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	4b49      	ldr	r3, [pc, #292]	; (8004508 <menu+0xbd0>)
 80043e2:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80043e4:	4b48      	ldr	r3, [pc, #288]	; (8004508 <menu+0xbd0>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d902      	bls.n	80043f2 <menu+0xaba>
				emniyetCercevesi = 0;
 80043ec:	4b46      	ldr	r3, [pc, #280]	; (8004508 <menu+0xbd0>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043f2:	f003 fb89 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043f6:	2104      	movs	r1, #4
 80043f8:	4839      	ldr	r0, [pc, #228]	; (80044e0 <menu+0xba8>)
 80043fa:	f004 ff95 	bl	8009328 <HAL_GPIO_ReadPin>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b01      	cmp	r3, #1
 8004402:	d115      	bne.n	8004430 <menu+0xaf8>
 8004404:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <menu+0xbac>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	f083 0301 	eor.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00e      	beq.n	8004430 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8004412:	4b3d      	ldr	r3, [pc, #244]	; (8004508 <menu+0xbd0>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	3b01      	subs	r3, #1
 8004418:	b2da      	uxtb	r2, r3
 800441a:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <menu+0xbd0>)
 800441c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800441e:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <menu+0xbd0>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8004426:	4b38      	ldr	r3, [pc, #224]	; (8004508 <menu+0xbd0>)
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800442c:	f003 fb6c 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8004430:	2108      	movs	r1, #8
 8004432:	482b      	ldr	r0, [pc, #172]	; (80044e0 <menu+0xba8>)
 8004434:	f004 ff78 	bl	8009328 <HAL_GPIO_ReadPin>
 8004438:	4603      	mov	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d10d      	bne.n	800445a <menu+0xb22>
 800443e:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <menu+0xbac>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f083 0301 	eor.w	r3, r3, #1
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d006      	beq.n	800445a <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 800444c:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <menu+0xbd0>)
 800444e:	781a      	ldrb	r2, [r3, #0]
 8004450:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <menu+0xbb8>)
 8004452:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8004454:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <menu+0xbc0>)
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800445a:	4b28      	ldr	r3, [pc, #160]	; (80044fc <menu+0xbc4>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b04      	cmp	r3, #4
 8004460:	f040 80ba 	bne.w	80045d8 <menu+0xca0>
		if(dilSecim == 0) {
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <menu+0xba0>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800446c:	4a2a      	ldr	r2, [pc, #168]	; (8004518 <menu+0xbe0>)
 800446e:	2101      	movs	r1, #1
 8004470:	2001      	movs	r0, #1
 8004472:	f7fe fa13 	bl	800289c <lcd_print>
 8004476:	e008      	b.n	800448a <menu+0xb52>
		} else if(dilSecim == 1) {
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <menu+0xba0>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d104      	bne.n	800448a <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8004480:	4a26      	ldr	r2, [pc, #152]	; (800451c <menu+0xbe4>)
 8004482:	2101      	movs	r1, #1
 8004484:	2001      	movs	r0, #1
 8004486:	f7fe fa09 	bl	800289c <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800448a:	4b25      	ldr	r3, [pc, #148]	; (8004520 <menu+0xbe8>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d113      	bne.n	80044ba <menu+0xb82>
			if(dilSecim == 0) {
 8004492:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <menu+0xba0>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d105      	bne.n	80044a6 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <menu+0xbd4>)
 800449c:	2101      	movs	r1, #1
 800449e:	2002      	movs	r0, #2
 80044a0:	f7fe f9fc 	bl	800289c <lcd_print>
 80044a4:	e049      	b.n	800453a <menu+0xc02>
			} else if(dilSecim == 1) {
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <menu+0xba0>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d145      	bne.n	800453a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <menu+0xbd8>)
 80044b0:	2101      	movs	r1, #1
 80044b2:	2002      	movs	r0, #2
 80044b4:	f7fe f9f2 	bl	800289c <lcd_print>
 80044b8:	e03f      	b.n	800453a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <menu+0xbe8>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d13b      	bne.n	800453a <menu+0xc02>
			if(dilSecim == 0) {
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <menu+0xba0>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d12e      	bne.n	8004528 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <menu+0xbec>)
 80044cc:	2101      	movs	r1, #1
 80044ce:	2002      	movs	r0, #2
 80044d0:	f7fe f9e4 	bl	800289c <lcd_print>
 80044d4:	e031      	b.n	800453a <menu+0xc02>
 80044d6:	bf00      	nop
 80044d8:	20000245 	.word	0x20000245
 80044dc:	0800d3d4 	.word	0x0800d3d4
 80044e0:	40010800 	.word	0x40010800
 80044e4:	20000253 	.word	0x20000253
 80044e8:	20000233 	.word	0x20000233
 80044ec:	20000225 	.word	0x20000225
 80044f0:	20000128 	.word	0x20000128
 80044f4:	2000022a 	.word	0x2000022a
 80044f8:	20000250 	.word	0x20000250
 80044fc:	20000224 	.word	0x20000224
 8004500:	0800d3e4 	.word	0x0800d3e4
 8004504:	0800d3f8 	.word	0x0800d3f8
 8004508:	20000228 	.word	0x20000228
 800450c:	0800d40c 	.word	0x0800d40c
 8004510:	0800d420 	.word	0x0800d420
 8004514:	0800d434 	.word	0x0800d434
 8004518:	0800d444 	.word	0x0800d444
 800451c:	0800d458 	.word	0x0800d458
 8004520:	20000229 	.word	0x20000229
 8004524:	0800d46c 	.word	0x0800d46c
			} else if(dilSecim == 1) {
 8004528:	4b92      	ldr	r3, [pc, #584]	; (8004774 <menu+0xe3c>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d104      	bne.n	800453a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8004530:	4a91      	ldr	r2, [pc, #580]	; (8004778 <menu+0xe40>)
 8004532:	2101      	movs	r1, #1
 8004534:	2002      	movs	r0, #2
 8004536:	f7fe f9b1 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800453a:	2102      	movs	r1, #2
 800453c:	488f      	ldr	r0, [pc, #572]	; (800477c <menu+0xe44>)
 800453e:	f004 fef3 	bl	8009328 <HAL_GPIO_ReadPin>
 8004542:	4603      	mov	r3, r0
 8004544:	2b01      	cmp	r3, #1
 8004546:	d115      	bne.n	8004574 <menu+0xc3c>
 8004548:	4b8d      	ldr	r3, [pc, #564]	; (8004780 <menu+0xe48>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f083 0301 	eor.w	r3, r3, #1
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00e      	beq.n	8004574 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8004556:	4b8b      	ldr	r3, [pc, #556]	; (8004784 <menu+0xe4c>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	3301      	adds	r3, #1
 800455c:	b2da      	uxtb	r2, r3
 800455e:	4b89      	ldr	r3, [pc, #548]	; (8004784 <menu+0xe4c>)
 8004560:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8004562:	4b88      	ldr	r3, [pc, #544]	; (8004784 <menu+0xe4c>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d902      	bls.n	8004570 <menu+0xc38>
				yavaslamaLimit = 0;
 800456a:	4b86      	ldr	r3, [pc, #536]	; (8004784 <menu+0xe4c>)
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004570:	f003 faca 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004574:	2104      	movs	r1, #4
 8004576:	4881      	ldr	r0, [pc, #516]	; (800477c <menu+0xe44>)
 8004578:	f004 fed6 	bl	8009328 <HAL_GPIO_ReadPin>
 800457c:	4603      	mov	r3, r0
 800457e:	2b01      	cmp	r3, #1
 8004580:	d115      	bne.n	80045ae <menu+0xc76>
 8004582:	4b7f      	ldr	r3, [pc, #508]	; (8004780 <menu+0xe48>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	f083 0301 	eor.w	r3, r3, #1
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8004590:	4b7c      	ldr	r3, [pc, #496]	; (8004784 <menu+0xe4c>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	3b01      	subs	r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	4b7a      	ldr	r3, [pc, #488]	; (8004784 <menu+0xe4c>)
 800459a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800459c:	4b79      	ldr	r3, [pc, #484]	; (8004784 <menu+0xe4c>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <menu+0xc72>
		   		yavaslamaLimit = 1;
 80045a4:	4b77      	ldr	r3, [pc, #476]	; (8004784 <menu+0xe4c>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045aa:	f003 faad 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045ae:	2108      	movs	r1, #8
 80045b0:	4872      	ldr	r0, [pc, #456]	; (800477c <menu+0xe44>)
 80045b2:	f004 feb9 	bl	8009328 <HAL_GPIO_ReadPin>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d10d      	bne.n	80045d8 <menu+0xca0>
 80045bc:	4b70      	ldr	r3, [pc, #448]	; (8004780 <menu+0xe48>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	f083 0301 	eor.w	r3, r3, #1
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80045ca:	4b6e      	ldr	r3, [pc, #440]	; (8004784 <menu+0xe4c>)
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	4b6e      	ldr	r3, [pc, #440]	; (8004788 <menu+0xe50>)
 80045d0:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80045d2:	4b6e      	ldr	r3, [pc, #440]	; (800478c <menu+0xe54>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80045d8:	4b6d      	ldr	r3, [pc, #436]	; (8004790 <menu+0xe58>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b05      	cmp	r3, #5
 80045de:	f040 80b9 	bne.w	8004754 <menu+0xe1c>
		if(dilSecim == 0) {
 80045e2:	4b64      	ldr	r3, [pc, #400]	; (8004774 <menu+0xe3c>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d105      	bne.n	80045f6 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 80045ea:	4a6a      	ldr	r2, [pc, #424]	; (8004794 <menu+0xe5c>)
 80045ec:	2101      	movs	r1, #1
 80045ee:	2001      	movs	r0, #1
 80045f0:	f7fe f954 	bl	800289c <lcd_print>
 80045f4:	e008      	b.n	8004608 <menu+0xcd0>
		} else if(dilSecim == 1) {
 80045f6:	4b5f      	ldr	r3, [pc, #380]	; (8004774 <menu+0xe3c>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d104      	bne.n	8004608 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80045fe:	4a66      	ldr	r2, [pc, #408]	; (8004798 <menu+0xe60>)
 8004600:	2101      	movs	r1, #1
 8004602:	2001      	movs	r0, #1
 8004604:	f7fe f94a 	bl	800289c <lcd_print>
		}

		if(altLimit == 0) {
 8004608:	4b64      	ldr	r3, [pc, #400]	; (800479c <menu+0xe64>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d113      	bne.n	8004638 <menu+0xd00>
			if(dilSecim == 0) {
 8004610:	4b58      	ldr	r3, [pc, #352]	; (8004774 <menu+0xe3c>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8004618:	4a61      	ldr	r2, [pc, #388]	; (80047a0 <menu+0xe68>)
 800461a:	2101      	movs	r1, #1
 800461c:	2002      	movs	r0, #2
 800461e:	f7fe f93d 	bl	800289c <lcd_print>
 8004622:	e020      	b.n	8004666 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8004624:	4b53      	ldr	r3, [pc, #332]	; (8004774 <menu+0xe3c>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d11c      	bne.n	8004666 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 800462c:	4a5d      	ldr	r2, [pc, #372]	; (80047a4 <menu+0xe6c>)
 800462e:	2101      	movs	r1, #1
 8004630:	2002      	movs	r0, #2
 8004632:	f7fe f933 	bl	800289c <lcd_print>
 8004636:	e016      	b.n	8004666 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8004638:	4b58      	ldr	r3, [pc, #352]	; (800479c <menu+0xe64>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d112      	bne.n	8004666 <menu+0xd2e>
			if(dilSecim == 0){
 8004640:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <menu+0xe3c>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8004648:	4a57      	ldr	r2, [pc, #348]	; (80047a8 <menu+0xe70>)
 800464a:	2101      	movs	r1, #1
 800464c:	2002      	movs	r0, #2
 800464e:	f7fe f925 	bl	800289c <lcd_print>
 8004652:	e008      	b.n	8004666 <menu+0xd2e>
			} else if(dilSecim == 1){
 8004654:	4b47      	ldr	r3, [pc, #284]	; (8004774 <menu+0xe3c>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d104      	bne.n	8004666 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 800465c:	4a46      	ldr	r2, [pc, #280]	; (8004778 <menu+0xe40>)
 800465e:	2101      	movs	r1, #1
 8004660:	2002      	movs	r0, #2
 8004662:	f7fe f91b 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8004666:	2102      	movs	r1, #2
 8004668:	4844      	ldr	r0, [pc, #272]	; (800477c <menu+0xe44>)
 800466a:	f004 fe5d 	bl	8009328 <HAL_GPIO_ReadPin>
 800466e:	4603      	mov	r3, r0
 8004670:	2b01      	cmp	r3, #1
 8004672:	d119      	bne.n	80046a8 <menu+0xd70>
 8004674:	4b42      	ldr	r3, [pc, #264]	; (8004780 <menu+0xe48>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	f083 0301 	eor.w	r3, r3, #1
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d012      	beq.n	80046a8 <menu+0xd70>
 8004682:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <menu+0xe74>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10e      	bne.n	80046a8 <menu+0xd70>
			altLimit = altLimit + 1;
 800468a:	4b44      	ldr	r3, [pc, #272]	; (800479c <menu+0xe64>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	b2da      	uxtb	r2, r3
 8004692:	4b42      	ldr	r3, [pc, #264]	; (800479c <menu+0xe64>)
 8004694:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8004696:	4b41      	ldr	r3, [pc, #260]	; (800479c <menu+0xe64>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d902      	bls.n	80046a4 <menu+0xd6c>
				altLimit = 0;
 800469e:	4b3f      	ldr	r3, [pc, #252]	; (800479c <menu+0xe64>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80046a4:	f003 fa30 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80046a8:	2104      	movs	r1, #4
 80046aa:	4834      	ldr	r0, [pc, #208]	; (800477c <menu+0xe44>)
 80046ac:	f004 fe3c 	bl	8009328 <HAL_GPIO_ReadPin>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d119      	bne.n	80046ea <menu+0xdb2>
 80046b6:	4b32      	ldr	r3, [pc, #200]	; (8004780 <menu+0xe48>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f083 0301 	eor.w	r3, r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d012      	beq.n	80046ea <menu+0xdb2>
 80046c4:	4b39      	ldr	r3, [pc, #228]	; (80047ac <menu+0xe74>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10e      	bne.n	80046ea <menu+0xdb2>
			altLimit = altLimit - 1;
 80046cc:	4b33      	ldr	r3, [pc, #204]	; (800479c <menu+0xe64>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	4b31      	ldr	r3, [pc, #196]	; (800479c <menu+0xe64>)
 80046d6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80046d8:	4b30      	ldr	r3, [pc, #192]	; (800479c <menu+0xe64>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <menu+0xdae>
		   		altLimit = 1;
 80046e0:	4b2e      	ldr	r3, [pc, #184]	; (800479c <menu+0xe64>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046e6:	f003 fa0f 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ea:	2108      	movs	r1, #8
 80046ec:	4823      	ldr	r0, [pc, #140]	; (800477c <menu+0xe44>)
 80046ee:	f004 fe1b 	bl	8009328 <HAL_GPIO_ReadPin>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d12d      	bne.n	8004754 <menu+0xe1c>
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <menu+0xe48>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	f083 0301 	eor.w	r3, r3, #1
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d026      	beq.n	8004754 <menu+0xe1c>
			eepromData[5] = altLimit;
 8004706:	4b25      	ldr	r3, [pc, #148]	; (800479c <menu+0xe64>)
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	4b1f      	ldr	r3, [pc, #124]	; (8004788 <menu+0xe50>)
 800470c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800470e:	4b23      	ldr	r3, [pc, #140]	; (800479c <menu+0xe64>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d110      	bne.n	8004738 <menu+0xe00>
 8004716:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <menu+0xe78>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <menu+0xdee>
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <menu+0xe78>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d108      	bne.n	8004738 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8004726:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <menu+0xe78>)
 8004728:	2203      	movs	r2, #3
 800472a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800472c:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <menu+0xe78>)
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	4b15      	ldr	r3, [pc, #84]	; (8004788 <menu+0xe50>)
 8004732:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004736:	e00a      	b.n	800474e <menu+0xe16>
			} else if(altLimit == 0) {
 8004738:	4b18      	ldr	r3, [pc, #96]	; (800479c <menu+0xe64>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <menu+0xe16>
				platformSilindirTipi = 0;
 8004740:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <menu+0xe7c>)
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8004746:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <menu+0xe7c>)
 8004748:	781a      	ldrb	r2, [r3, #0]
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <menu+0xe50>)
 800474c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <menu+0xe54>)
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <menu+0xe58>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b06      	cmp	r3, #6
 800475a:	f040 80b6 	bne.w	80048ca <menu+0xf92>
		if(dilSecim == 0) {
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <menu+0xe3c>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d12a      	bne.n	80047bc <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8004766:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <menu+0xe80>)
 8004768:	2101      	movs	r1, #1
 800476a:	2001      	movs	r0, #1
 800476c:	f7fe f896 	bl	800289c <lcd_print>
 8004770:	e02d      	b.n	80047ce <menu+0xe96>
 8004772:	bf00      	nop
 8004774:	20000245 	.word	0x20000245
 8004778:	0800d480 	.word	0x0800d480
 800477c:	40010800 	.word	0x40010800
 8004780:	20000253 	.word	0x20000253
 8004784:	20000229 	.word	0x20000229
 8004788:	20000128 	.word	0x20000128
 800478c:	20000250 	.word	0x20000250
 8004790:	20000224 	.word	0x20000224
 8004794:	0800d494 	.word	0x0800d494
 8004798:	0800d4a8 	.word	0x0800d4a8
 800479c:	2000022a 	.word	0x2000022a
 80047a0:	0800d40c 	.word	0x0800d40c
 80047a4:	0800d420 	.word	0x0800d420
 80047a8:	0800d46c 	.word	0x0800d46c
 80047ac:	20000225 	.word	0x20000225
 80047b0:	20000231 	.word	0x20000231
 80047b4:	20000237 	.word	0x20000237
 80047b8:	0800d4bc 	.word	0x0800d4bc
		} else if(dilSecim == 1){
 80047bc:	4b7a      	ldr	r3, [pc, #488]	; (80049a8 <menu+0x1070>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d104      	bne.n	80047ce <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80047c4:	4a79      	ldr	r2, [pc, #484]	; (80049ac <menu+0x1074>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	2001      	movs	r0, #1
 80047ca:	f7fe f867 	bl	800289c <lcd_print>
		}
		if(basincSalteri == 0){
 80047ce:	4b78      	ldr	r3, [pc, #480]	; (80049b0 <menu+0x1078>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d113      	bne.n	80047fe <menu+0xec6>
			if(dilSecim == 0) {
 80047d6:	4b74      	ldr	r3, [pc, #464]	; (80049a8 <menu+0x1070>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80047de:	4a75      	ldr	r2, [pc, #468]	; (80049b4 <menu+0x107c>)
 80047e0:	2101      	movs	r1, #1
 80047e2:	2002      	movs	r0, #2
 80047e4:	f7fe f85a 	bl	800289c <lcd_print>
 80047e8:	e020      	b.n	800482c <menu+0xef4>
			} else if(dilSecim == 1){
 80047ea:	4b6f      	ldr	r3, [pc, #444]	; (80049a8 <menu+0x1070>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d11c      	bne.n	800482c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80047f2:	4a71      	ldr	r2, [pc, #452]	; (80049b8 <menu+0x1080>)
 80047f4:	2101      	movs	r1, #1
 80047f6:	2002      	movs	r0, #2
 80047f8:	f7fe f850 	bl	800289c <lcd_print>
 80047fc:	e016      	b.n	800482c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80047fe:	4b6c      	ldr	r3, [pc, #432]	; (80049b0 <menu+0x1078>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d112      	bne.n	800482c <menu+0xef4>
			if(dilSecim == 0) {
 8004806:	4b68      	ldr	r3, [pc, #416]	; (80049a8 <menu+0x1070>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d105      	bne.n	800481a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800480e:	4a6b      	ldr	r2, [pc, #428]	; (80049bc <menu+0x1084>)
 8004810:	2101      	movs	r1, #1
 8004812:	2002      	movs	r0, #2
 8004814:	f7fe f842 	bl	800289c <lcd_print>
 8004818:	e008      	b.n	800482c <menu+0xef4>
			} else if(dilSecim == 1) {
 800481a:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <menu+0x1070>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d104      	bne.n	800482c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8004822:	4a67      	ldr	r2, [pc, #412]	; (80049c0 <menu+0x1088>)
 8004824:	2101      	movs	r1, #1
 8004826:	2002      	movs	r0, #2
 8004828:	f7fe f838 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800482c:	2102      	movs	r1, #2
 800482e:	4865      	ldr	r0, [pc, #404]	; (80049c4 <menu+0x108c>)
 8004830:	f004 fd7a 	bl	8009328 <HAL_GPIO_ReadPin>
 8004834:	4603      	mov	r3, r0
 8004836:	2b01      	cmp	r3, #1
 8004838:	d115      	bne.n	8004866 <menu+0xf2e>
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <menu+0x1090>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	f083 0301 	eor.w	r3, r3, #1
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00e      	beq.n	8004866 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8004848:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <menu+0x1078>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	b2da      	uxtb	r2, r3
 8004850:	4b57      	ldr	r3, [pc, #348]	; (80049b0 <menu+0x1078>)
 8004852:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8004854:	4b56      	ldr	r3, [pc, #344]	; (80049b0 <menu+0x1078>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d902      	bls.n	8004862 <menu+0xf2a>
				basincSalteri = 0;
 800485c:	4b54      	ldr	r3, [pc, #336]	; (80049b0 <menu+0x1078>)
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004862:	f003 f951 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004866:	2104      	movs	r1, #4
 8004868:	4856      	ldr	r0, [pc, #344]	; (80049c4 <menu+0x108c>)
 800486a:	f004 fd5d 	bl	8009328 <HAL_GPIO_ReadPin>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d115      	bne.n	80048a0 <menu+0xf68>
 8004874:	4b54      	ldr	r3, [pc, #336]	; (80049c8 <menu+0x1090>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f083 0301 	eor.w	r3, r3, #1
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00e      	beq.n	80048a0 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8004882:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <menu+0x1078>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	3b01      	subs	r3, #1
 8004888:	b2da      	uxtb	r2, r3
 800488a:	4b49      	ldr	r3, [pc, #292]	; (80049b0 <menu+0x1078>)
 800488c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800488e:	4b48      	ldr	r3, [pc, #288]	; (80049b0 <menu+0x1078>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <menu+0xf64>
		   		basincSalteri = 1;
 8004896:	4b46      	ldr	r3, [pc, #280]	; (80049b0 <menu+0x1078>)
 8004898:	2201      	movs	r2, #1
 800489a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800489c:	f003 f934 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80048a0:	2108      	movs	r1, #8
 80048a2:	4848      	ldr	r0, [pc, #288]	; (80049c4 <menu+0x108c>)
 80048a4:	f004 fd40 	bl	8009328 <HAL_GPIO_ReadPin>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10d      	bne.n	80048ca <menu+0xf92>
 80048ae:	4b46      	ldr	r3, [pc, #280]	; (80049c8 <menu+0x1090>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	f083 0301 	eor.w	r3, r3, #1
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d006      	beq.n	80048ca <menu+0xf92>
			eepromData[6] = basincSalteri;
 80048bc:	4b3c      	ldr	r3, [pc, #240]	; (80049b0 <menu+0x1078>)
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	4b42      	ldr	r3, [pc, #264]	; (80049cc <menu+0x1094>)
 80048c2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80048c4:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <menu+0x1098>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80048ca:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <menu+0x109c>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b07      	cmp	r3, #7
 80048d0:	f040 80f5 	bne.w	8004abe <menu+0x1186>
		if(dilSecim == 0) {
 80048d4:	4b34      	ldr	r3, [pc, #208]	; (80049a8 <menu+0x1070>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80048dc:	4a3e      	ldr	r2, [pc, #248]	; (80049d8 <menu+0x10a0>)
 80048de:	2101      	movs	r1, #1
 80048e0:	2001      	movs	r0, #1
 80048e2:	f7fd ffdb 	bl	800289c <lcd_print>
 80048e6:	e008      	b.n	80048fa <menu+0xfc2>
		} else if(dilSecim == 1){
 80048e8:	4b2f      	ldr	r3, [pc, #188]	; (80049a8 <menu+0x1070>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d104      	bne.n	80048fa <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80048f0:	4a3a      	ldr	r2, [pc, #232]	; (80049dc <menu+0x10a4>)
 80048f2:	2101      	movs	r1, #1
 80048f4:	2001      	movs	r0, #1
 80048f6:	f7fd ffd1 	bl	800289c <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80048fa:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <menu+0x10a8>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d113      	bne.n	800492a <menu+0xff2>
			if(dilSecim == 0) {
 8004902:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <menu+0x1070>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800490a:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <menu+0x107c>)
 800490c:	2101      	movs	r1, #1
 800490e:	2002      	movs	r0, #2
 8004910:	f7fd ffc4 	bl	800289c <lcd_print>
 8004914:	e079      	b.n	8004a0a <menu+0x10d2>
			} else if(dilSecim == 1){
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <menu+0x1070>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d175      	bne.n	8004a0a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800491e:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <menu+0x1080>)
 8004920:	2101      	movs	r1, #1
 8004922:	2002      	movs	r0, #2
 8004924:	f7fd ffba 	bl	800289c <lcd_print>
 8004928:	e06f      	b.n	8004a0a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800492a:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <menu+0x10a8>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d113      	bne.n	800495a <menu+0x1022>
			if(dilSecim == 0) {
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <menu+0x1070>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800493a:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <menu+0x10ac>)
 800493c:	2101      	movs	r1, #1
 800493e:	2002      	movs	r0, #2
 8004940:	f7fd ffac 	bl	800289c <lcd_print>
 8004944:	e061      	b.n	8004a0a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8004946:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <menu+0x1070>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d15d      	bne.n	8004a0a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800494e:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <menu+0x10b0>)
 8004950:	2101      	movs	r1, #1
 8004952:	2002      	movs	r0, #2
 8004954:	f7fd ffa2 	bl	800289c <lcd_print>
 8004958:	e057      	b.n	8004a0a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800495a:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <menu+0x10a8>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d113      	bne.n	800498a <menu+0x1052>
			if(dilSecim == 0) {
 8004962:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <menu+0x1070>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800496a:	4a20      	ldr	r2, [pc, #128]	; (80049ec <menu+0x10b4>)
 800496c:	2101      	movs	r1, #1
 800496e:	2002      	movs	r0, #2
 8004970:	f7fd ff94 	bl	800289c <lcd_print>
 8004974:	e049      	b.n	8004a0a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <menu+0x1070>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d145      	bne.n	8004a0a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <menu+0x10b8>)
 8004980:	2101      	movs	r1, #1
 8004982:	2002      	movs	r0, #2
 8004984:	f7fd ff8a 	bl	800289c <lcd_print>
 8004988:	e03f      	b.n	8004a0a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800498a:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <menu+0x10a8>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d13b      	bne.n	8004a0a <menu+0x10d2>
			if(dilSecim == 0) {
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <menu+0x1070>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d12e      	bne.n	80049f8 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800499a:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <menu+0x10bc>)
 800499c:	2101      	movs	r1, #1
 800499e:	2002      	movs	r0, #2
 80049a0:	f7fd ff7c 	bl	800289c <lcd_print>
 80049a4:	e031      	b.n	8004a0a <menu+0x10d2>
 80049a6:	bf00      	nop
 80049a8:	20000245 	.word	0x20000245
 80049ac:	0800d4cc 	.word	0x0800d4cc
 80049b0:	2000022b 	.word	0x2000022b
 80049b4:	0800d40c 	.word	0x0800d40c
 80049b8:	0800d420 	.word	0x0800d420
 80049bc:	0800d46c 	.word	0x0800d46c
 80049c0:	0800d480 	.word	0x0800d480
 80049c4:	40010800 	.word	0x40010800
 80049c8:	20000253 	.word	0x20000253
 80049cc:	20000128 	.word	0x20000128
 80049d0:	20000250 	.word	0x20000250
 80049d4:	20000224 	.word	0x20000224
 80049d8:	0800d4dc 	.word	0x0800d4dc
 80049dc:	0800d4f0 	.word	0x0800d4f0
 80049e0:	2000022c 	.word	0x2000022c
 80049e4:	0800d504 	.word	0x0800d504
 80049e8:	0800d518 	.word	0x0800d518
 80049ec:	0800d52c 	.word	0x0800d52c
 80049f0:	0800d540 	.word	0x0800d540
 80049f4:	0800d554 	.word	0x0800d554
			} else if(dilSecim == 1){
 80049f8:	4b99      	ldr	r3, [pc, #612]	; (8004c60 <menu+0x1328>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d104      	bne.n	8004a0a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8004a00:	4a98      	ldr	r2, [pc, #608]	; (8004c64 <menu+0x132c>)
 8004a02:	2101      	movs	r1, #1
 8004a04:	2002      	movs	r0, #2
 8004a06:	f7fd ff49 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4896      	ldr	r0, [pc, #600]	; (8004c68 <menu+0x1330>)
 8004a0e:	f004 fc8b 	bl	8009328 <HAL_GPIO_ReadPin>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d115      	bne.n	8004a44 <menu+0x110c>
 8004a18:	4b94      	ldr	r3, [pc, #592]	; (8004c6c <menu+0x1334>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	f083 0301 	eor.w	r3, r3, #1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00e      	beq.n	8004a44 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8004a26:	4b92      	ldr	r3, [pc, #584]	; (8004c70 <menu+0x1338>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	4b90      	ldr	r3, [pc, #576]	; (8004c70 <menu+0x1338>)
 8004a30:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8004a32:	4b8f      	ldr	r3, [pc, #572]	; (8004c70 <menu+0x1338>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d902      	bls.n	8004a40 <menu+0x1108>
				kapiSecimleri = 0;
 8004a3a:	4b8d      	ldr	r3, [pc, #564]	; (8004c70 <menu+0x1338>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004a40:	f003 f862 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a44:	2104      	movs	r1, #4
 8004a46:	4888      	ldr	r0, [pc, #544]	; (8004c68 <menu+0x1330>)
 8004a48:	f004 fc6e 	bl	8009328 <HAL_GPIO_ReadPin>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d115      	bne.n	8004a7e <menu+0x1146>
 8004a52:	4b86      	ldr	r3, [pc, #536]	; (8004c6c <menu+0x1334>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	f083 0301 	eor.w	r3, r3, #1
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00e      	beq.n	8004a7e <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8004a60:	4b83      	ldr	r3, [pc, #524]	; (8004c70 <menu+0x1338>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	4b81      	ldr	r3, [pc, #516]	; (8004c70 <menu+0x1338>)
 8004a6a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8004a6c:	4b80      	ldr	r3, [pc, #512]	; (8004c70 <menu+0x1338>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d902      	bls.n	8004a7a <menu+0x1142>
		   		kapiSecimleri = 3;
 8004a74:	4b7e      	ldr	r3, [pc, #504]	; (8004c70 <menu+0x1338>)
 8004a76:	2203      	movs	r2, #3
 8004a78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004a7a:	f003 f845 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a7e:	2108      	movs	r1, #8
 8004a80:	4879      	ldr	r0, [pc, #484]	; (8004c68 <menu+0x1330>)
 8004a82:	f004 fc51 	bl	8009328 <HAL_GPIO_ReadPin>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d118      	bne.n	8004abe <menu+0x1186>
 8004a8c:	4b77      	ldr	r3, [pc, #476]	; (8004c6c <menu+0x1334>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	f083 0301 	eor.w	r3, r3, #1
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d011      	beq.n	8004abe <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8004a9a:	4b75      	ldr	r3, [pc, #468]	; (8004c70 <menu+0x1338>)
 8004a9c:	781a      	ldrb	r2, [r3, #0]
 8004a9e:	4b75      	ldr	r3, [pc, #468]	; (8004c74 <menu+0x133c>)
 8004aa0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8004aa2:	4b73      	ldr	r3, [pc, #460]	; (8004c70 <menu+0x1338>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <menu+0x1180>
				altLimit = 1;
 8004aaa:	4b73      	ldr	r3, [pc, #460]	; (8004c78 <menu+0x1340>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8004ab0:	4b71      	ldr	r3, [pc, #452]	; (8004c78 <menu+0x1340>)
 8004ab2:	781a      	ldrb	r2, [r3, #0]
 8004ab4:	4b6f      	ldr	r3, [pc, #444]	; (8004c74 <menu+0x133c>)
 8004ab6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8004ab8:	4b70      	ldr	r3, [pc, #448]	; (8004c7c <menu+0x1344>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8004abe:	4b70      	ldr	r3, [pc, #448]	; (8004c80 <menu+0x1348>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	f040 8092 	bne.w	8004bec <menu+0x12b4>
		if(dilSecim == 0) {
 8004ac8:	4b65      	ldr	r3, [pc, #404]	; (8004c60 <menu+0x1328>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8004ad0:	4a6c      	ldr	r2, [pc, #432]	; (8004c84 <menu+0x134c>)
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	f7fd fee1 	bl	800289c <lcd_print>
 8004ada:	e008      	b.n	8004aee <menu+0x11b6>
		} else if(dilSecim == 1) {
 8004adc:	4b60      	ldr	r3, [pc, #384]	; (8004c60 <menu+0x1328>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d104      	bne.n	8004aee <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8004ae4:	4a68      	ldr	r2, [pc, #416]	; (8004c88 <menu+0x1350>)
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f7fd fed7 	bl	800289c <lcd_print>
		}

		if(kapiAcTipi == 0){
 8004aee:	4b67      	ldr	r3, [pc, #412]	; (8004c8c <menu+0x1354>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d113      	bne.n	8004b1e <menu+0x11e6>
			if(dilSecim == 0) {
 8004af6:	4b5a      	ldr	r3, [pc, #360]	; (8004c60 <menu+0x1328>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8004afe:	4a64      	ldr	r2, [pc, #400]	; (8004c90 <menu+0x1358>)
 8004b00:	2101      	movs	r1, #1
 8004b02:	2002      	movs	r0, #2
 8004b04:	f7fd feca 	bl	800289c <lcd_print>
 8004b08:	e020      	b.n	8004b4c <menu+0x1214>
			} else if(dilSecim == 1) {
 8004b0a:	4b55      	ldr	r3, [pc, #340]	; (8004c60 <menu+0x1328>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d11c      	bne.n	8004b4c <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8004b12:	4a60      	ldr	r2, [pc, #384]	; (8004c94 <menu+0x135c>)
 8004b14:	2101      	movs	r1, #1
 8004b16:	2002      	movs	r0, #2
 8004b18:	f7fd fec0 	bl	800289c <lcd_print>
 8004b1c:	e016      	b.n	8004b4c <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8004b1e:	4b5b      	ldr	r3, [pc, #364]	; (8004c8c <menu+0x1354>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d112      	bne.n	8004b4c <menu+0x1214>
			if(dilSecim == 0){
 8004b26:	4b4e      	ldr	r3, [pc, #312]	; (8004c60 <menu+0x1328>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8004b2e:	4a5a      	ldr	r2, [pc, #360]	; (8004c98 <menu+0x1360>)
 8004b30:	2101      	movs	r1, #1
 8004b32:	2002      	movs	r0, #2
 8004b34:	f7fd feb2 	bl	800289c <lcd_print>
 8004b38:	e008      	b.n	8004b4c <menu+0x1214>
			} else if(dilSecim == 1){
 8004b3a:	4b49      	ldr	r3, [pc, #292]	; (8004c60 <menu+0x1328>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d104      	bne.n	8004b4c <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8004b42:	4a56      	ldr	r2, [pc, #344]	; (8004c9c <menu+0x1364>)
 8004b44:	2101      	movs	r1, #1
 8004b46:	2002      	movs	r0, #2
 8004b48:	f7fd fea8 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	4846      	ldr	r0, [pc, #280]	; (8004c68 <menu+0x1330>)
 8004b50:	f004 fbea 	bl	8009328 <HAL_GPIO_ReadPin>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d115      	bne.n	8004b86 <menu+0x124e>
 8004b5a:	4b44      	ldr	r3, [pc, #272]	; (8004c6c <menu+0x1334>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	f083 0301 	eor.w	r3, r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00e      	beq.n	8004b86 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8004b68:	4b48      	ldr	r3, [pc, #288]	; (8004c8c <menu+0x1354>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <menu+0x1354>)
 8004b72:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8004b74:	4b45      	ldr	r3, [pc, #276]	; (8004c8c <menu+0x1354>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d902      	bls.n	8004b82 <menu+0x124a>
				kapiAcTipi = 0;
 8004b7c:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <menu+0x1354>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004b82:	f002 ffc1 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b86:	2104      	movs	r1, #4
 8004b88:	4837      	ldr	r0, [pc, #220]	; (8004c68 <menu+0x1330>)
 8004b8a:	f004 fbcd 	bl	8009328 <HAL_GPIO_ReadPin>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d115      	bne.n	8004bc0 <menu+0x1288>
 8004b94:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <menu+0x1334>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	f083 0301 	eor.w	r3, r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00e      	beq.n	8004bc0 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8004ba2:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <menu+0x1354>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4b38      	ldr	r3, [pc, #224]	; (8004c8c <menu+0x1354>)
 8004bac:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8004bae:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <menu+0x1354>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <menu+0x1284>
		   		kapiAcTipi = 1;
 8004bb6:	4b35      	ldr	r3, [pc, #212]	; (8004c8c <menu+0x1354>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004bbc:	f002 ffa4 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004bc0:	2108      	movs	r1, #8
 8004bc2:	4829      	ldr	r0, [pc, #164]	; (8004c68 <menu+0x1330>)
 8004bc4:	f004 fbb0 	bl	8009328 <HAL_GPIO_ReadPin>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d10e      	bne.n	8004bec <menu+0x12b4>
 8004bce:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <menu+0x1334>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f083 0301 	eor.w	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8004bdc:	4b2b      	ldr	r3, [pc, #172]	; (8004c8c <menu+0x1354>)
 8004bde:	781a      	ldrb	r2, [r3, #0]
 8004be0:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <menu+0x133c>)
 8004be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8004be6:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <menu+0x1344>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <menu+0x1348>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b09      	cmp	r3, #9
 8004bf2:	f040 80b9 	bne.w	8004d68 <menu+0x1430>
		if(dilSecim == 0){
 8004bf6:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <menu+0x1328>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d105      	bne.n	8004c0a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8004bfe:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <menu+0x1368>)
 8004c00:	2101      	movs	r1, #1
 8004c02:	2001      	movs	r0, #1
 8004c04:	f7fd fe4a 	bl	800289c <lcd_print>
 8004c08:	e008      	b.n	8004c1c <menu+0x12e4>
		} else if(dilSecim == 1) {
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <menu+0x1328>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d104      	bne.n	8004c1c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8004c12:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <menu+0x136c>)
 8004c14:	2101      	movs	r1, #1
 8004c16:	2001      	movs	r0, #1
 8004c18:	f7fd fe40 	bl	800289c <lcd_print>
		}

		if(kapi1Tip == 0) {
 8004c1c:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <menu+0x1370>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8004c24:	4a21      	ldr	r2, [pc, #132]	; (8004cac <menu+0x1374>)
 8004c26:	2101      	movs	r1, #1
 8004c28:	2002      	movs	r0, #2
 8004c2a:	f7fd fe37 	bl	800289c <lcd_print>
 8004c2e:	e04c      	b.n	8004cca <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8004c30:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <menu+0x1370>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d13f      	bne.n	8004cb8 <menu+0x1380>
			if(dilSecim == 0){
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <menu+0x1328>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8004c40:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <menu+0x1378>)
 8004c42:	2101      	movs	r1, #1
 8004c44:	2002      	movs	r0, #2
 8004c46:	f7fd fe29 	bl	800289c <lcd_print>
 8004c4a:	e03e      	b.n	8004cca <menu+0x1392>
			} else if(dilSecim == 1) {
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <menu+0x1328>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d13a      	bne.n	8004cca <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8004c54:	4a17      	ldr	r2, [pc, #92]	; (8004cb4 <menu+0x137c>)
 8004c56:	2101      	movs	r1, #1
 8004c58:	2002      	movs	r0, #2
 8004c5a:	f7fd fe1f 	bl	800289c <lcd_print>
 8004c5e:	e034      	b.n	8004cca <menu+0x1392>
 8004c60:	20000245 	.word	0x20000245
 8004c64:	0800d568 	.word	0x0800d568
 8004c68:	40010800 	.word	0x40010800
 8004c6c:	20000253 	.word	0x20000253
 8004c70:	2000022c 	.word	0x2000022c
 8004c74:	20000128 	.word	0x20000128
 8004c78:	2000022a 	.word	0x2000022a
 8004c7c:	20000250 	.word	0x20000250
 8004c80:	20000224 	.word	0x20000224
 8004c84:	0800d57c 	.word	0x0800d57c
 8004c88:	0800d590 	.word	0x0800d590
 8004c8c:	20000230 	.word	0x20000230
 8004c90:	0800d5a4 	.word	0x0800d5a4
 8004c94:	0800d5b4 	.word	0x0800d5b4
 8004c98:	0800d5c4 	.word	0x0800d5c4
 8004c9c:	0800d5d8 	.word	0x0800d5d8
 8004ca0:	0800d5ec 	.word	0x0800d5ec
 8004ca4:	0800d600 	.word	0x0800d600
 8004ca8:	2000022d 	.word	0x2000022d
 8004cac:	0800d614 	.word	0x0800d614
 8004cb0:	0800d628 	.word	0x0800d628
 8004cb4:	0800d638 	.word	0x0800d638
			}
		} else if(kapi1Tip == 2) {
 8004cb8:	4b8a      	ldr	r3, [pc, #552]	; (8004ee4 <menu+0x15ac>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d104      	bne.n	8004cca <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8004cc0:	4a89      	ldr	r2, [pc, #548]	; (8004ee8 <menu+0x15b0>)
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	2002      	movs	r0, #2
 8004cc6:	f7fd fde9 	bl	800289c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004cca:	2102      	movs	r1, #2
 8004ccc:	4887      	ldr	r0, [pc, #540]	; (8004eec <menu+0x15b4>)
 8004cce:	f004 fb2b 	bl	8009328 <HAL_GPIO_ReadPin>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d115      	bne.n	8004d04 <menu+0x13cc>
 8004cd8:	4b85      	ldr	r3, [pc, #532]	; (8004ef0 <menu+0x15b8>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	f083 0301 	eor.w	r3, r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8004ce6:	4b7f      	ldr	r3, [pc, #508]	; (8004ee4 <menu+0x15ac>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4b7d      	ldr	r3, [pc, #500]	; (8004ee4 <menu+0x15ac>)
 8004cf0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8004cf2:	4b7c      	ldr	r3, [pc, #496]	; (8004ee4 <menu+0x15ac>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d902      	bls.n	8004d00 <menu+0x13c8>
				kapi1Tip = 0;
 8004cfa:	4b7a      	ldr	r3, [pc, #488]	; (8004ee4 <menu+0x15ac>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004d00:	f002 ff02 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004d04:	2104      	movs	r1, #4
 8004d06:	4879      	ldr	r0, [pc, #484]	; (8004eec <menu+0x15b4>)
 8004d08:	f004 fb0e 	bl	8009328 <HAL_GPIO_ReadPin>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d115      	bne.n	8004d3e <menu+0x1406>
 8004d12:	4b77      	ldr	r3, [pc, #476]	; (8004ef0 <menu+0x15b8>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	f083 0301 	eor.w	r3, r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00e      	beq.n	8004d3e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8004d20:	4b70      	ldr	r3, [pc, #448]	; (8004ee4 <menu+0x15ac>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	4b6e      	ldr	r3, [pc, #440]	; (8004ee4 <menu+0x15ac>)
 8004d2a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8004d2c:	4b6d      	ldr	r3, [pc, #436]	; (8004ee4 <menu+0x15ac>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d902      	bls.n	8004d3a <menu+0x1402>
		   		kapi1Tip = 2;
 8004d34:	4b6b      	ldr	r3, [pc, #428]	; (8004ee4 <menu+0x15ac>)
 8004d36:	2202      	movs	r2, #2
 8004d38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004d3a:	f002 fee5 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004d3e:	2108      	movs	r1, #8
 8004d40:	486a      	ldr	r0, [pc, #424]	; (8004eec <menu+0x15b4>)
 8004d42:	f004 faf1 	bl	8009328 <HAL_GPIO_ReadPin>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10d      	bne.n	8004d68 <menu+0x1430>
 8004d4c:	4b68      	ldr	r3, [pc, #416]	; (8004ef0 <menu+0x15b8>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f083 0301 	eor.w	r3, r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d006      	beq.n	8004d68 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8004d5a:	4b62      	ldr	r3, [pc, #392]	; (8004ee4 <menu+0x15ac>)
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	4b65      	ldr	r3, [pc, #404]	; (8004ef4 <menu+0x15bc>)
 8004d60:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8004d62:	4b65      	ldr	r3, [pc, #404]	; (8004ef8 <menu+0x15c0>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8004d68:	4b64      	ldr	r3, [pc, #400]	; (8004efc <menu+0x15c4>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b0a      	cmp	r3, #10
 8004d6e:	d17f      	bne.n	8004e70 <menu+0x1538>
		if(dilSecim == 0) {
 8004d70:	4b63      	ldr	r3, [pc, #396]	; (8004f00 <menu+0x15c8>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8004d78:	4a62      	ldr	r2, [pc, #392]	; (8004f04 <menu+0x15cc>)
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	f7fd fd8d 	bl	800289c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8004d82:	4a61      	ldr	r2, [pc, #388]	; (8004f08 <menu+0x15d0>)
 8004d84:	2101      	movs	r1, #1
 8004d86:	2002      	movs	r0, #2
 8004d88:	f7fd fd88 	bl	800289c <lcd_print>
 8004d8c:	e00d      	b.n	8004daa <menu+0x1472>
		} else if(dilSecim == 1) {
 8004d8e:	4b5c      	ldr	r3, [pc, #368]	; (8004f00 <menu+0x15c8>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d109      	bne.n	8004daa <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8004d96:	4a5d      	ldr	r2, [pc, #372]	; (8004f0c <menu+0x15d4>)
 8004d98:	2101      	movs	r1, #1
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	f7fd fd7e 	bl	800289c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8004da0:	4a5b      	ldr	r2, [pc, #364]	; (8004f10 <menu+0x15d8>)
 8004da2:	2101      	movs	r1, #1
 8004da4:	2002      	movs	r0, #2
 8004da6:	f7fd fd79 	bl	800289c <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8004daa:	4b5a      	ldr	r3, [pc, #360]	; (8004f14 <menu+0x15dc>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	220a      	movs	r2, #10
 8004db0:	4959      	ldr	r1, [pc, #356]	; (8004f18 <menu+0x15e0>)
 8004db2:	4618      	mov	r0, r3
 8004db4:	f007 fae4 	bl	800c380 <itoa>
		lcd_print(2,16,snum);
 8004db8:	4a57      	ldr	r2, [pc, #348]	; (8004f18 <menu+0x15e0>)
 8004dba:	2110      	movs	r1, #16
 8004dbc:	2002      	movs	r0, #2
 8004dbe:	f7fd fd6d 	bl	800289c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8004dc2:	2102      	movs	r1, #2
 8004dc4:	4849      	ldr	r0, [pc, #292]	; (8004eec <menu+0x15b4>)
 8004dc6:	f004 faaf 	bl	8009328 <HAL_GPIO_ReadPin>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d119      	bne.n	8004e04 <menu+0x14cc>
 8004dd0:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <menu+0x15b8>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f083 0301 	eor.w	r3, r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d012      	beq.n	8004e04 <menu+0x14cc>
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <menu+0x15ac>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10e      	bne.n	8004e04 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8004de6:	4b4b      	ldr	r3, [pc, #300]	; (8004f14 <menu+0x15dc>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	3301      	adds	r3, #1
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b49      	ldr	r3, [pc, #292]	; (8004f14 <menu+0x15dc>)
 8004df0:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8004df2:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <menu+0x15dc>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b05      	cmp	r3, #5
 8004df8:	d902      	bls.n	8004e00 <menu+0x14c8>
				kapi1AcSure = 0;
 8004dfa:	4b46      	ldr	r3, [pc, #280]	; (8004f14 <menu+0x15dc>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004e00:	f002 fe82 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8004e04:	2104      	movs	r1, #4
 8004e06:	4839      	ldr	r0, [pc, #228]	; (8004eec <menu+0x15b4>)
 8004e08:	f004 fa8e 	bl	8009328 <HAL_GPIO_ReadPin>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d119      	bne.n	8004e46 <menu+0x150e>
 8004e12:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <menu+0x15b8>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	f083 0301 	eor.w	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d012      	beq.n	8004e46 <menu+0x150e>
 8004e20:	4b30      	ldr	r3, [pc, #192]	; (8004ee4 <menu+0x15ac>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10e      	bne.n	8004e46 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8004e28:	4b3a      	ldr	r3, [pc, #232]	; (8004f14 <menu+0x15dc>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	4b38      	ldr	r3, [pc, #224]	; (8004f14 <menu+0x15dc>)
 8004e32:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8004e34:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <menu+0x15dc>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b06      	cmp	r3, #6
 8004e3a:	d902      	bls.n	8004e42 <menu+0x150a>
		   		kapi1AcSure = 5;
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <menu+0x15dc>)
 8004e3e:	2205      	movs	r2, #5
 8004e40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004e42:	f002 fe61 	bl	8007b08 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004e46:	2108      	movs	r1, #8
 8004e48:	4828      	ldr	r0, [pc, #160]	; (8004eec <menu+0x15b4>)
 8004e4a:	f004 fa6d 	bl	8009328 <HAL_GPIO_ReadPin>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10d      	bne.n	8004e70 <menu+0x1538>
 8004e54:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <menu+0x15b8>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	f083 0301 	eor.w	r3, r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d006      	beq.n	8004e70 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <menu+0x15dc>)
 8004e64:	781a      	ldrb	r2, [r3, #0]
 8004e66:	4b23      	ldr	r3, [pc, #140]	; (8004ef4 <menu+0x15bc>)
 8004e68:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8004e6a:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <menu+0x15c0>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8004e70:	4b22      	ldr	r3, [pc, #136]	; (8004efc <menu+0x15c4>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b0b      	cmp	r3, #11
 8004e76:	f040 80b5 	bne.w	8004fe4 <menu+0x16ac>
		if(dilSecim == 0) {
 8004e7a:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <menu+0x15c8>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8004e82:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <menu+0x15e4>)
 8004e84:	2101      	movs	r1, #1
 8004e86:	2001      	movs	r0, #1
 8004e88:	f7fd fd08 	bl	800289c <lcd_print>
 8004e8c:	e008      	b.n	8004ea0 <menu+0x1568>
		} else if(dilSecim == 1) {
 8004e8e:	4b1c      	ldr	r3, [pc, #112]	; (8004f00 <menu+0x15c8>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d104      	bne.n	8004ea0 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8004e96:	4a22      	ldr	r2, [pc, #136]	; (8004f20 <menu+0x15e8>)
 8004e98:	2101      	movs	r1, #1
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f7fd fcfe 	bl	800289c <lcd_print>
		}

		if(kapi2Tip == 0) {
 8004ea0:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <menu+0x15ec>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <menu+0x15f0>)
 8004eaa:	2101      	movs	r1, #1
 8004eac:	2002      	movs	r0, #2
 8004eae:	f7fd fcf5 	bl	800289c <lcd_print>
 8004eb2:	e048      	b.n	8004f46 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <menu+0x15ec>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d13b      	bne.n	8004f34 <menu+0x15fc>
			if(dilSecim == 0) {
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <menu+0x15c8>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <menu+0x15f4>)
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	2002      	movs	r0, #2
 8004eca:	f7fd fce7 	bl	800289c <lcd_print>
 8004ece:	e03a      	b.n	8004f46 <menu+0x160e>
			} else if(dilSecim == 1) {
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <menu+0x15c8>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d136      	bne.n	8004f46 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8004ed8:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <menu+0x15f8>)
 8004eda:	2101      	movs	r1, #1
 8004edc:	2002      	movs	r0, #2
 8004ede:	f7fd fcdd 	bl	800289c <lcd_print>
 8004ee2:	e030      	b.n	8004f46 <menu+0x160e>
 8004ee4:	2000022d 	.word	0x2000022d
 8004ee8:	0800d64c 	.word	0x0800d64c
 8004eec:	40010800 	.word	0x40010800
 8004ef0:	20000253 	.word	0x20000253
 8004ef4:	20000128 	.word	0x20000128
 8004ef8:	20000250 	.word	0x20000250
 8004efc:	20000224 	.word	0x20000224
 8004f00:	20000245 	.word	0x20000245
 8004f04:	0800d65c 	.word	0x0800d65c
 8004f08:	0800d670 	.word	0x0800d670
 8004f0c:	0800d680 	.word	0x0800d680
 8004f10:	0800d694 	.word	0x0800d694
 8004f14:	2000023d 	.word	0x2000023d
 8004f18:	20000198 	.word	0x20000198
 8004f1c:	0800d6a4 	.word	0x0800d6a4
 8004f20:	0800d6b8 	.word	0x0800d6b8
 8004f24:	2000022e 	.word	0x2000022e
 8004f28:	0800d614 	.word	0x0800d614
 8004f2c:	0800d628 	.word	0x0800d628
 8004f30:	0800d638 	.word	0x0800d638
			}
		} else if(kapi2Tip == 2) {
 8004f34:	4b8a      	ldr	r3, [pc, #552]	; (8005160 <menu+0x1828>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d104      	bne.n	8004f46 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8004f3c:	4a89      	ldr	r2, [pc, #548]	; (8005164 <menu+0x182c>)
 8004f3e:	2101      	movs	r1, #1
 8004f40:	2002      	movs	r0, #2
 8004f42:	f7fd fcab 	bl	800289c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004f46:	2102      	movs	r1, #2
 8004f48:	4887      	ldr	r0, [pc, #540]	; (8005168 <menu+0x1830>)
 8004f4a:	f004 f9ed 	bl	8009328 <HAL_GPIO_ReadPin>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d115      	bne.n	8004f80 <menu+0x1648>
 8004f54:	4b85      	ldr	r3, [pc, #532]	; (800516c <menu+0x1834>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f083 0301 	eor.w	r3, r3, #1
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00e      	beq.n	8004f80 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8004f62:	4b7f      	ldr	r3, [pc, #508]	; (8005160 <menu+0x1828>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	3301      	adds	r3, #1
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	4b7d      	ldr	r3, [pc, #500]	; (8005160 <menu+0x1828>)
 8004f6c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8004f6e:	4b7c      	ldr	r3, [pc, #496]	; (8005160 <menu+0x1828>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d902      	bls.n	8004f7c <menu+0x1644>
				kapi2Tip = 0;
 8004f76:	4b7a      	ldr	r3, [pc, #488]	; (8005160 <menu+0x1828>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004f7c:	f002 fdc4 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004f80:	2104      	movs	r1, #4
 8004f82:	4879      	ldr	r0, [pc, #484]	; (8005168 <menu+0x1830>)
 8004f84:	f004 f9d0 	bl	8009328 <HAL_GPIO_ReadPin>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d115      	bne.n	8004fba <menu+0x1682>
 8004f8e:	4b77      	ldr	r3, [pc, #476]	; (800516c <menu+0x1834>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	f083 0301 	eor.w	r3, r3, #1
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00e      	beq.n	8004fba <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8004f9c:	4b70      	ldr	r3, [pc, #448]	; (8005160 <menu+0x1828>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	4b6e      	ldr	r3, [pc, #440]	; (8005160 <menu+0x1828>)
 8004fa6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8004fa8:	4b6d      	ldr	r3, [pc, #436]	; (8005160 <menu+0x1828>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d902      	bls.n	8004fb6 <menu+0x167e>
		   		kapi2Tip = 2;
 8004fb0:	4b6b      	ldr	r3, [pc, #428]	; (8005160 <menu+0x1828>)
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004fb6:	f002 fda7 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004fba:	2108      	movs	r1, #8
 8004fbc:	486a      	ldr	r0, [pc, #424]	; (8005168 <menu+0x1830>)
 8004fbe:	f004 f9b3 	bl	8009328 <HAL_GPIO_ReadPin>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d10d      	bne.n	8004fe4 <menu+0x16ac>
 8004fc8:	4b68      	ldr	r3, [pc, #416]	; (800516c <menu+0x1834>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f083 0301 	eor.w	r3, r3, #1
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d006      	beq.n	8004fe4 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8004fd6:	4b62      	ldr	r3, [pc, #392]	; (8005160 <menu+0x1828>)
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	4b65      	ldr	r3, [pc, #404]	; (8005170 <menu+0x1838>)
 8004fdc:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8004fde:	4b65      	ldr	r3, [pc, #404]	; (8005174 <menu+0x183c>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8004fe4:	4b64      	ldr	r3, [pc, #400]	; (8005178 <menu+0x1840>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d17f      	bne.n	80050ec <menu+0x17b4>
		if(dilSecim == 0) {
 8004fec:	4b63      	ldr	r3, [pc, #396]	; (800517c <menu+0x1844>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8004ff4:	4a62      	ldr	r2, [pc, #392]	; (8005180 <menu+0x1848>)
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	f7fd fc4f 	bl	800289c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8004ffe:	4a61      	ldr	r2, [pc, #388]	; (8005184 <menu+0x184c>)
 8005000:	2101      	movs	r1, #1
 8005002:	2002      	movs	r0, #2
 8005004:	f7fd fc4a 	bl	800289c <lcd_print>
 8005008:	e00d      	b.n	8005026 <menu+0x16ee>
		} else if(dilSecim == 1) {
 800500a:	4b5c      	ldr	r3, [pc, #368]	; (800517c <menu+0x1844>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d109      	bne.n	8005026 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8005012:	4a5d      	ldr	r2, [pc, #372]	; (8005188 <menu+0x1850>)
 8005014:	2101      	movs	r1, #1
 8005016:	2001      	movs	r0, #1
 8005018:	f7fd fc40 	bl	800289c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800501c:	4a5b      	ldr	r2, [pc, #364]	; (800518c <menu+0x1854>)
 800501e:	2101      	movs	r1, #1
 8005020:	2002      	movs	r0, #2
 8005022:	f7fd fc3b 	bl	800289c <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8005026:	4b5a      	ldr	r3, [pc, #360]	; (8005190 <menu+0x1858>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	220a      	movs	r2, #10
 800502c:	4959      	ldr	r1, [pc, #356]	; (8005194 <menu+0x185c>)
 800502e:	4618      	mov	r0, r3
 8005030:	f007 f9a6 	bl	800c380 <itoa>
		lcd_print(2,16,snum);
 8005034:	4a57      	ldr	r2, [pc, #348]	; (8005194 <menu+0x185c>)
 8005036:	2110      	movs	r1, #16
 8005038:	2002      	movs	r0, #2
 800503a:	f7fd fc2f 	bl	800289c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800503e:	2102      	movs	r1, #2
 8005040:	4849      	ldr	r0, [pc, #292]	; (8005168 <menu+0x1830>)
 8005042:	f004 f971 	bl	8009328 <HAL_GPIO_ReadPin>
 8005046:	4603      	mov	r3, r0
 8005048:	2b01      	cmp	r3, #1
 800504a:	d119      	bne.n	8005080 <menu+0x1748>
 800504c:	4b47      	ldr	r3, [pc, #284]	; (800516c <menu+0x1834>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d012      	beq.n	8005080 <menu+0x1748>
 800505a:	4b41      	ldr	r3, [pc, #260]	; (8005160 <menu+0x1828>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10e      	bne.n	8005080 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8005062:	4b4b      	ldr	r3, [pc, #300]	; (8005190 <menu+0x1858>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	3301      	adds	r3, #1
 8005068:	b2da      	uxtb	r2, r3
 800506a:	4b49      	ldr	r3, [pc, #292]	; (8005190 <menu+0x1858>)
 800506c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800506e:	4b48      	ldr	r3, [pc, #288]	; (8005190 <menu+0x1858>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b05      	cmp	r3, #5
 8005074:	d902      	bls.n	800507c <menu+0x1744>
				kapi2AcSure = 0;
 8005076:	4b46      	ldr	r3, [pc, #280]	; (8005190 <menu+0x1858>)
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800507c:	f002 fd44 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8005080:	2104      	movs	r1, #4
 8005082:	4839      	ldr	r0, [pc, #228]	; (8005168 <menu+0x1830>)
 8005084:	f004 f950 	bl	8009328 <HAL_GPIO_ReadPin>
 8005088:	4603      	mov	r3, r0
 800508a:	2b01      	cmp	r3, #1
 800508c:	d119      	bne.n	80050c2 <menu+0x178a>
 800508e:	4b37      	ldr	r3, [pc, #220]	; (800516c <menu+0x1834>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	f083 0301 	eor.w	r3, r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d012      	beq.n	80050c2 <menu+0x178a>
 800509c:	4b30      	ldr	r3, [pc, #192]	; (8005160 <menu+0x1828>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10e      	bne.n	80050c2 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 80050a4:	4b3a      	ldr	r3, [pc, #232]	; (8005190 <menu+0x1858>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	4b38      	ldr	r3, [pc, #224]	; (8005190 <menu+0x1858>)
 80050ae:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80050b0:	4b37      	ldr	r3, [pc, #220]	; (8005190 <menu+0x1858>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d902      	bls.n	80050be <menu+0x1786>
		   		kapi2AcSure = 5;
 80050b8:	4b35      	ldr	r3, [pc, #212]	; (8005190 <menu+0x1858>)
 80050ba:	2205      	movs	r2, #5
 80050bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80050be:	f002 fd23 	bl	8007b08 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80050c2:	2108      	movs	r1, #8
 80050c4:	4828      	ldr	r0, [pc, #160]	; (8005168 <menu+0x1830>)
 80050c6:	f004 f92f 	bl	8009328 <HAL_GPIO_ReadPin>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d10d      	bne.n	80050ec <menu+0x17b4>
 80050d0:	4b26      	ldr	r3, [pc, #152]	; (800516c <menu+0x1834>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	f083 0301 	eor.w	r3, r3, #1
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80050de:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <menu+0x1858>)
 80050e0:	781a      	ldrb	r2, [r3, #0]
 80050e2:	4b23      	ldr	r3, [pc, #140]	; (8005170 <menu+0x1838>)
 80050e4:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80050e6:	4b23      	ldr	r3, [pc, #140]	; (8005174 <menu+0x183c>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80050ec:	4b22      	ldr	r3, [pc, #136]	; (8005178 <menu+0x1840>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b0d      	cmp	r3, #13
 80050f2:	f040 80b5 	bne.w	8005260 <menu+0x1928>
		if(dilSecim == 0) {
 80050f6:	4b21      	ldr	r3, [pc, #132]	; (800517c <menu+0x1844>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80050fe:	4a26      	ldr	r2, [pc, #152]	; (8005198 <menu+0x1860>)
 8005100:	2101      	movs	r1, #1
 8005102:	2001      	movs	r0, #1
 8005104:	f7fd fbca 	bl	800289c <lcd_print>
 8005108:	e008      	b.n	800511c <menu+0x17e4>
		} else if(dilSecim == 1){
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <menu+0x1844>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d104      	bne.n	800511c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8005112:	4a22      	ldr	r2, [pc, #136]	; (800519c <menu+0x1864>)
 8005114:	2101      	movs	r1, #1
 8005116:	2001      	movs	r0, #1
 8005118:	f7fd fbc0 	bl	800289c <lcd_print>
		}

		if(kapitablaTip == 0) {
 800511c:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <menu+0x1868>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8005124:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <menu+0x186c>)
 8005126:	2101      	movs	r1, #1
 8005128:	2002      	movs	r0, #2
 800512a:	f7fd fbb7 	bl	800289c <lcd_print>
 800512e:	e048      	b.n	80051c2 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8005130:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <menu+0x1868>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d13b      	bne.n	80051b0 <menu+0x1878>
			if(dilSecim == 0) {
 8005138:	4b10      	ldr	r3, [pc, #64]	; (800517c <menu+0x1844>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d105      	bne.n	800514c <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8005140:	4a19      	ldr	r2, [pc, #100]	; (80051a8 <menu+0x1870>)
 8005142:	2101      	movs	r1, #1
 8005144:	2002      	movs	r0, #2
 8005146:	f7fd fba9 	bl	800289c <lcd_print>
 800514a:	e03a      	b.n	80051c2 <menu+0x188a>
			} else if(dilSecim == 1) {
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <menu+0x1844>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d136      	bne.n	80051c2 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8005154:	4a15      	ldr	r2, [pc, #84]	; (80051ac <menu+0x1874>)
 8005156:	2101      	movs	r1, #1
 8005158:	2002      	movs	r0, #2
 800515a:	f7fd fb9f 	bl	800289c <lcd_print>
 800515e:	e030      	b.n	80051c2 <menu+0x188a>
 8005160:	2000022e 	.word	0x2000022e
 8005164:	0800d64c 	.word	0x0800d64c
 8005168:	40010800 	.word	0x40010800
 800516c:	20000253 	.word	0x20000253
 8005170:	20000128 	.word	0x20000128
 8005174:	20000250 	.word	0x20000250
 8005178:	20000224 	.word	0x20000224
 800517c:	20000245 	.word	0x20000245
 8005180:	0800d6cc 	.word	0x0800d6cc
 8005184:	0800d670 	.word	0x0800d670
 8005188:	0800d6e0 	.word	0x0800d6e0
 800518c:	0800d694 	.word	0x0800d694
 8005190:	2000023e 	.word	0x2000023e
 8005194:	20000198 	.word	0x20000198
 8005198:	0800d6f4 	.word	0x0800d6f4
 800519c:	0800d708 	.word	0x0800d708
 80051a0:	2000022f 	.word	0x2000022f
 80051a4:	0800d614 	.word	0x0800d614
 80051a8:	0800d628 	.word	0x0800d628
 80051ac:	0800d638 	.word	0x0800d638
			}
		} else if(kapitablaTip == 2) {
 80051b0:	4b5b      	ldr	r3, [pc, #364]	; (8005320 <menu+0x19e8>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d104      	bne.n	80051c2 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 80051b8:	4a5a      	ldr	r2, [pc, #360]	; (8005324 <menu+0x19ec>)
 80051ba:	2101      	movs	r1, #1
 80051bc:	2002      	movs	r0, #2
 80051be:	f7fd fb6d 	bl	800289c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80051c2:	2102      	movs	r1, #2
 80051c4:	4858      	ldr	r0, [pc, #352]	; (8005328 <menu+0x19f0>)
 80051c6:	f004 f8af 	bl	8009328 <HAL_GPIO_ReadPin>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d115      	bne.n	80051fc <menu+0x18c4>
 80051d0:	4b56      	ldr	r3, [pc, #344]	; (800532c <menu+0x19f4>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	f083 0301 	eor.w	r3, r3, #1
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00e      	beq.n	80051fc <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 80051de:	4b50      	ldr	r3, [pc, #320]	; (8005320 <menu+0x19e8>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	3301      	adds	r3, #1
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4b4e      	ldr	r3, [pc, #312]	; (8005320 <menu+0x19e8>)
 80051e8:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80051ea:	4b4d      	ldr	r3, [pc, #308]	; (8005320 <menu+0x19e8>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d902      	bls.n	80051f8 <menu+0x18c0>
				kapitablaTip = 0;
 80051f2:	4b4b      	ldr	r3, [pc, #300]	; (8005320 <menu+0x19e8>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80051f8:	f002 fc86 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80051fc:	2104      	movs	r1, #4
 80051fe:	484a      	ldr	r0, [pc, #296]	; (8005328 <menu+0x19f0>)
 8005200:	f004 f892 	bl	8009328 <HAL_GPIO_ReadPin>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d115      	bne.n	8005236 <menu+0x18fe>
 800520a:	4b48      	ldr	r3, [pc, #288]	; (800532c <menu+0x19f4>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	f083 0301 	eor.w	r3, r3, #1
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00e      	beq.n	8005236 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8005218:	4b41      	ldr	r3, [pc, #260]	; (8005320 <menu+0x19e8>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	3b01      	subs	r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	4b3f      	ldr	r3, [pc, #252]	; (8005320 <menu+0x19e8>)
 8005222:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8005224:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <menu+0x19e8>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d902      	bls.n	8005232 <menu+0x18fa>
		   		kapitablaTip = 2;
 800522c:	4b3c      	ldr	r3, [pc, #240]	; (8005320 <menu+0x19e8>)
 800522e:	2202      	movs	r2, #2
 8005230:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8005232:	f002 fc69 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8005236:	2108      	movs	r1, #8
 8005238:	483b      	ldr	r0, [pc, #236]	; (8005328 <menu+0x19f0>)
 800523a:	f004 f875 	bl	8009328 <HAL_GPIO_ReadPin>
 800523e:	4603      	mov	r3, r0
 8005240:	2b01      	cmp	r3, #1
 8005242:	d10d      	bne.n	8005260 <menu+0x1928>
 8005244:	4b39      	ldr	r3, [pc, #228]	; (800532c <menu+0x19f4>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f083 0301 	eor.w	r3, r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d006      	beq.n	8005260 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8005252:	4b33      	ldr	r3, [pc, #204]	; (8005320 <menu+0x19e8>)
 8005254:	781a      	ldrb	r2, [r3, #0]
 8005256:	4b36      	ldr	r3, [pc, #216]	; (8005330 <menu+0x19f8>)
 8005258:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <menu+0x19fc>)
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8005260:	4b35      	ldr	r3, [pc, #212]	; (8005338 <menu+0x1a00>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b0e      	cmp	r3, #14
 8005266:	f040 80f2 	bne.w	800544e <menu+0x1b16>
		if(dilSecim == 0) {
 800526a:	4b34      	ldr	r3, [pc, #208]	; (800533c <menu+0x1a04>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d105      	bne.n	800527e <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8005272:	4a33      	ldr	r2, [pc, #204]	; (8005340 <menu+0x1a08>)
 8005274:	2101      	movs	r1, #1
 8005276:	2001      	movs	r0, #1
 8005278:	f7fd fb10 	bl	800289c <lcd_print>
 800527c:	e008      	b.n	8005290 <menu+0x1958>
		} else if(dilSecim == 1) {
 800527e:	4b2f      	ldr	r3, [pc, #188]	; (800533c <menu+0x1a04>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d104      	bne.n	8005290 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8005286:	4a2f      	ldr	r2, [pc, #188]	; (8005344 <menu+0x1a0c>)
 8005288:	2101      	movs	r1, #1
 800528a:	2001      	movs	r0, #1
 800528c:	f7fd fb06 	bl	800289c <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8005290:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <menu+0x1a10>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d113      	bne.n	80052c0 <menu+0x1988>
			if(dilSecim == 0){
 8005298:	4b28      	ldr	r3, [pc, #160]	; (800533c <menu+0x1a04>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 80052a0:	4a2a      	ldr	r2, [pc, #168]	; (800534c <menu+0x1a14>)
 80052a2:	2101      	movs	r1, #1
 80052a4:	2002      	movs	r0, #2
 80052a6:	f7fd faf9 	bl	800289c <lcd_print>
 80052aa:	e071      	b.n	8005390 <menu+0x1a58>
			} else if(dilSecim == 1) {
 80052ac:	4b23      	ldr	r3, [pc, #140]	; (800533c <menu+0x1a04>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d16d      	bne.n	8005390 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 80052b4:	4a26      	ldr	r2, [pc, #152]	; (8005350 <menu+0x1a18>)
 80052b6:	2101      	movs	r1, #1
 80052b8:	2002      	movs	r0, #2
 80052ba:	f7fd faef 	bl	800289c <lcd_print>
 80052be:	e067      	b.n	8005390 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 80052c0:	4b21      	ldr	r3, [pc, #132]	; (8005348 <menu+0x1a10>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d112      	bne.n	80052ee <menu+0x19b6>
			if(dilSecim == 0){
 80052c8:	4b1c      	ldr	r3, [pc, #112]	; (800533c <menu+0x1a04>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 80052d0:	4a20      	ldr	r2, [pc, #128]	; (8005354 <menu+0x1a1c>)
 80052d2:	2101      	movs	r1, #1
 80052d4:	2002      	movs	r0, #2
 80052d6:	f7fd fae1 	bl	800289c <lcd_print>
			}
			if(dilSecim == 1){
 80052da:	4b18      	ldr	r3, [pc, #96]	; (800533c <menu+0x1a04>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d156      	bne.n	8005390 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 80052e2:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <menu+0x1a20>)
 80052e4:	2101      	movs	r1, #1
 80052e6:	2002      	movs	r0, #2
 80052e8:	f7fd fad8 	bl	800289c <lcd_print>
 80052ec:	e050      	b.n	8005390 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 80052ee:	4b16      	ldr	r3, [pc, #88]	; (8005348 <menu+0x1a10>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d136      	bne.n	8005364 <menu+0x1a2c>
			if(dilSecim == 0){
 80052f6:	4b11      	ldr	r3, [pc, #68]	; (800533c <menu+0x1a04>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d105      	bne.n	800530a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 80052fe:	4a17      	ldr	r2, [pc, #92]	; (800535c <menu+0x1a24>)
 8005300:	2101      	movs	r1, #1
 8005302:	2002      	movs	r0, #2
 8005304:	f7fd faca 	bl	800289c <lcd_print>
 8005308:	e042      	b.n	8005390 <menu+0x1a58>
			} else if(dilSecim == 1) {
 800530a:	4b0c      	ldr	r3, [pc, #48]	; (800533c <menu+0x1a04>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d13e      	bne.n	8005390 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8005312:	4a13      	ldr	r2, [pc, #76]	; (8005360 <menu+0x1a28>)
 8005314:	2101      	movs	r1, #1
 8005316:	2002      	movs	r0, #2
 8005318:	f7fd fac0 	bl	800289c <lcd_print>
 800531c:	e038      	b.n	8005390 <menu+0x1a58>
 800531e:	bf00      	nop
 8005320:	2000022f 	.word	0x2000022f
 8005324:	0800d64c 	.word	0x0800d64c
 8005328:	40010800 	.word	0x40010800
 800532c:	20000253 	.word	0x20000253
 8005330:	20000128 	.word	0x20000128
 8005334:	20000250 	.word	0x20000250
 8005338:	20000224 	.word	0x20000224
 800533c:	20000245 	.word	0x20000245
 8005340:	0800d71c 	.word	0x0800d71c
 8005344:	0800d730 	.word	0x0800d730
 8005348:	20000231 	.word	0x20000231
 800534c:	0800d744 	.word	0x0800d744
 8005350:	0800d754 	.word	0x0800d754
 8005354:	0800d764 	.word	0x0800d764
 8005358:	0800d774 	.word	0x0800d774
 800535c:	0800d784 	.word	0x0800d784
 8005360:	0800d798 	.word	0x0800d798
			}
		} else if(kapiTablaAcKonum == 3) {
 8005364:	4b9b      	ldr	r3, [pc, #620]	; (80055d4 <menu+0x1c9c>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d111      	bne.n	8005390 <menu+0x1a58>
			if(dilSecim == 0) {
 800536c:	4b9a      	ldr	r3, [pc, #616]	; (80055d8 <menu+0x1ca0>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d104      	bne.n	800537e <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8005374:	4a99      	ldr	r2, [pc, #612]	; (80055dc <menu+0x1ca4>)
 8005376:	2101      	movs	r1, #1
 8005378:	2002      	movs	r0, #2
 800537a:	f7fd fa8f 	bl	800289c <lcd_print>
			}
			if(dilSecim == 1) {
 800537e:	4b96      	ldr	r3, [pc, #600]	; (80055d8 <menu+0x1ca0>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d104      	bne.n	8005390 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8005386:	4a96      	ldr	r2, [pc, #600]	; (80055e0 <menu+0x1ca8>)
 8005388:	2101      	movs	r1, #1
 800538a:	2002      	movs	r0, #2
 800538c:	f7fd fa86 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8005390:	2102      	movs	r1, #2
 8005392:	4894      	ldr	r0, [pc, #592]	; (80055e4 <menu+0x1cac>)
 8005394:	f003 ffc8 	bl	8009328 <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d115      	bne.n	80053ca <menu+0x1a92>
 800539e:	4b92      	ldr	r3, [pc, #584]	; (80055e8 <menu+0x1cb0>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	f083 0301 	eor.w	r3, r3, #1
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00e      	beq.n	80053ca <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80053ac:	4b89      	ldr	r3, [pc, #548]	; (80055d4 <menu+0x1c9c>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	3301      	adds	r3, #1
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	4b87      	ldr	r3, [pc, #540]	; (80055d4 <menu+0x1c9c>)
 80053b6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80053b8:	4b86      	ldr	r3, [pc, #536]	; (80055d4 <menu+0x1c9c>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d902      	bls.n	80053c6 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 80053c0:	4b84      	ldr	r3, [pc, #528]	; (80055d4 <menu+0x1c9c>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80053c6:	f002 fb9f 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80053ca:	2104      	movs	r1, #4
 80053cc:	4885      	ldr	r0, [pc, #532]	; (80055e4 <menu+0x1cac>)
 80053ce:	f003 ffab 	bl	8009328 <HAL_GPIO_ReadPin>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d115      	bne.n	8005404 <menu+0x1acc>
 80053d8:	4b83      	ldr	r3, [pc, #524]	; (80055e8 <menu+0x1cb0>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f083 0301 	eor.w	r3, r3, #1
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00e      	beq.n	8005404 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80053e6:	4b7b      	ldr	r3, [pc, #492]	; (80055d4 <menu+0x1c9c>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	4b79      	ldr	r3, [pc, #484]	; (80055d4 <menu+0x1c9c>)
 80053f0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80053f2:	4b78      	ldr	r3, [pc, #480]	; (80055d4 <menu+0x1c9c>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d902      	bls.n	8005400 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 80053fa:	4b76      	ldr	r3, [pc, #472]	; (80055d4 <menu+0x1c9c>)
 80053fc:	2202      	movs	r2, #2
 80053fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8005400:	f002 fb82 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8005404:	2108      	movs	r1, #8
 8005406:	4877      	ldr	r0, [pc, #476]	; (80055e4 <menu+0x1cac>)
 8005408:	f003 ff8e 	bl	8009328 <HAL_GPIO_ReadPin>
 800540c:	4603      	mov	r3, r0
 800540e:	2b01      	cmp	r3, #1
 8005410:	d11d      	bne.n	800544e <menu+0x1b16>
 8005412:	4b75      	ldr	r3, [pc, #468]	; (80055e8 <menu+0x1cb0>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f083 0301 	eor.w	r3, r3, #1
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d016      	beq.n	800544e <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8005420:	4b6c      	ldr	r3, [pc, #432]	; (80055d4 <menu+0x1c9c>)
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	4b71      	ldr	r3, [pc, #452]	; (80055ec <menu+0x1cb4>)
 8005426:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800542a:	4b6a      	ldr	r3, [pc, #424]	; (80055d4 <menu+0x1c9c>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <menu+0x1b02>
 8005432:	4b68      	ldr	r3, [pc, #416]	; (80055d4 <menu+0x1c9c>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d106      	bne.n	8005448 <menu+0x1b10>
				altLimit = 1;
 800543a:	4b6d      	ldr	r3, [pc, #436]	; (80055f0 <menu+0x1cb8>)
 800543c:	2201      	movs	r2, #1
 800543e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8005440:	4b6b      	ldr	r3, [pc, #428]	; (80055f0 <menu+0x1cb8>)
 8005442:	781a      	ldrb	r2, [r3, #0]
 8005444:	4b69      	ldr	r3, [pc, #420]	; (80055ec <menu+0x1cb4>)
 8005446:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8005448:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <menu+0x1cbc>)
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800544e:	4b6a      	ldr	r3, [pc, #424]	; (80055f8 <menu+0x1cc0>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b0f      	cmp	r3, #15
 8005454:	d17f      	bne.n	8005556 <menu+0x1c1e>
		if(dilSecim == 0) {
 8005456:	4b60      	ldr	r3, [pc, #384]	; (80055d8 <menu+0x1ca0>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800545e:	4a67      	ldr	r2, [pc, #412]	; (80055fc <menu+0x1cc4>)
 8005460:	2101      	movs	r1, #1
 8005462:	2001      	movs	r0, #1
 8005464:	f7fd fa1a 	bl	800289c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8005468:	4a65      	ldr	r2, [pc, #404]	; (8005600 <menu+0x1cc8>)
 800546a:	2101      	movs	r1, #1
 800546c:	2002      	movs	r0, #2
 800546e:	f7fd fa15 	bl	800289c <lcd_print>
 8005472:	e00d      	b.n	8005490 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8005474:	4b58      	ldr	r3, [pc, #352]	; (80055d8 <menu+0x1ca0>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d109      	bne.n	8005490 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800547c:	4a61      	ldr	r2, [pc, #388]	; (8005604 <menu+0x1ccc>)
 800547e:	2101      	movs	r1, #1
 8005480:	2001      	movs	r0, #1
 8005482:	f7fd fa0b 	bl	800289c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8005486:	4a60      	ldr	r2, [pc, #384]	; (8005608 <menu+0x1cd0>)
 8005488:	2101      	movs	r1, #1
 800548a:	2002      	movs	r0, #2
 800548c:	f7fd fa06 	bl	800289c <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8005490:	4b5e      	ldr	r3, [pc, #376]	; (800560c <menu+0x1cd4>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	220a      	movs	r2, #10
 8005496:	495e      	ldr	r1, [pc, #376]	; (8005610 <menu+0x1cd8>)
 8005498:	4618      	mov	r0, r3
 800549a:	f006 ff71 	bl	800c380 <itoa>
		lcd_print(2,16,snum);
 800549e:	4a5c      	ldr	r2, [pc, #368]	; (8005610 <menu+0x1cd8>)
 80054a0:	2110      	movs	r1, #16
 80054a2:	2002      	movs	r0, #2
 80054a4:	f7fd f9fa 	bl	800289c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80054a8:	2102      	movs	r1, #2
 80054aa:	484e      	ldr	r0, [pc, #312]	; (80055e4 <menu+0x1cac>)
 80054ac:	f003 ff3c 	bl	8009328 <HAL_GPIO_ReadPin>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d119      	bne.n	80054ea <menu+0x1bb2>
 80054b6:	4b4c      	ldr	r3, [pc, #304]	; (80055e8 <menu+0x1cb0>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	f083 0301 	eor.w	r3, r3, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d012      	beq.n	80054ea <menu+0x1bb2>
 80054c4:	4b53      	ldr	r3, [pc, #332]	; (8005614 <menu+0x1cdc>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10e      	bne.n	80054ea <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80054cc:	4b4f      	ldr	r3, [pc, #316]	; (800560c <menu+0x1cd4>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	3301      	adds	r3, #1
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	4b4d      	ldr	r3, [pc, #308]	; (800560c <menu+0x1cd4>)
 80054d6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80054d8:	4b4c      	ldr	r3, [pc, #304]	; (800560c <menu+0x1cd4>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b05      	cmp	r3, #5
 80054de:	d902      	bls.n	80054e6 <menu+0x1bae>
				kapiTablaAcSure = 0;
 80054e0:	4b4a      	ldr	r3, [pc, #296]	; (800560c <menu+0x1cd4>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80054e6:	f002 fb0f 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80054ea:	2104      	movs	r1, #4
 80054ec:	483d      	ldr	r0, [pc, #244]	; (80055e4 <menu+0x1cac>)
 80054ee:	f003 ff1b 	bl	8009328 <HAL_GPIO_ReadPin>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d119      	bne.n	800552c <menu+0x1bf4>
 80054f8:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <menu+0x1cb0>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	f083 0301 	eor.w	r3, r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d012      	beq.n	800552c <menu+0x1bf4>
 8005506:	4b43      	ldr	r3, [pc, #268]	; (8005614 <menu+0x1cdc>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10e      	bne.n	800552c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800550e:	4b3f      	ldr	r3, [pc, #252]	; (800560c <menu+0x1cd4>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	3b01      	subs	r3, #1
 8005514:	b2da      	uxtb	r2, r3
 8005516:	4b3d      	ldr	r3, [pc, #244]	; (800560c <menu+0x1cd4>)
 8005518:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800551a:	4b3c      	ldr	r3, [pc, #240]	; (800560c <menu+0x1cd4>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b06      	cmp	r3, #6
 8005520:	d902      	bls.n	8005528 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8005522:	4b3a      	ldr	r3, [pc, #232]	; (800560c <menu+0x1cd4>)
 8005524:	2205      	movs	r2, #5
 8005526:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8005528:	f002 faee 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800552c:	2108      	movs	r1, #8
 800552e:	482d      	ldr	r0, [pc, #180]	; (80055e4 <menu+0x1cac>)
 8005530:	f003 fefa 	bl	8009328 <HAL_GPIO_ReadPin>
 8005534:	4603      	mov	r3, r0
 8005536:	2b01      	cmp	r3, #1
 8005538:	d10d      	bne.n	8005556 <menu+0x1c1e>
 800553a:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <menu+0x1cb0>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f083 0301 	eor.w	r3, r3, #1
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8005548:	4b30      	ldr	r3, [pc, #192]	; (800560c <menu+0x1cd4>)
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	4b27      	ldr	r3, [pc, #156]	; (80055ec <menu+0x1cb4>)
 800554e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8005550:	4b28      	ldr	r3, [pc, #160]	; (80055f4 <menu+0x1cbc>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8005556:	4b28      	ldr	r3, [pc, #160]	; (80055f8 <menu+0x1cc0>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b10      	cmp	r3, #16
 800555c:	f040 80bc 	bne.w	80056d8 <menu+0x1da0>
		if(dilSecim == 0) {
 8005560:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <menu+0x1ca0>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8005568:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <menu+0x1ce0>)
 800556a:	2101      	movs	r1, #1
 800556c:	2001      	movs	r0, #1
 800556e:	f7fd f995 	bl	800289c <lcd_print>
 8005572:	e008      	b.n	8005586 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8005574:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <menu+0x1ca0>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d104      	bne.n	8005586 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800557c:	4a27      	ldr	r2, [pc, #156]	; (800561c <menu+0x1ce4>)
 800557e:	2101      	movs	r1, #1
 8005580:	2001      	movs	r0, #1
 8005582:	f7fd f98b 	bl	800289c <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8005586:	4b26      	ldr	r3, [pc, #152]	; (8005620 <menu+0x1ce8>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d113      	bne.n	80055b6 <menu+0x1c7e>
			if(dilSecim == 0) {
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <menu+0x1ca0>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d105      	bne.n	80055a2 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8005596:	4a11      	ldr	r2, [pc, #68]	; (80055dc <menu+0x1ca4>)
 8005598:	2101      	movs	r1, #1
 800559a:	2002      	movs	r0, #2
 800559c:	f7fd f97e 	bl	800289c <lcd_print>
 80055a0:	e04b      	b.n	800563a <menu+0x1d02>
			} else if(dilSecim == 1) {
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <menu+0x1ca0>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d147      	bne.n	800563a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80055aa:	4a0d      	ldr	r2, [pc, #52]	; (80055e0 <menu+0x1ca8>)
 80055ac:	2101      	movs	r1, #1
 80055ae:	2002      	movs	r0, #2
 80055b0:	f7fd f974 	bl	800289c <lcd_print>
 80055b4:	e041      	b.n	800563a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <menu+0x1ce8>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d13d      	bne.n	800563a <menu+0x1d02>
			if(dilSecim == 0) {
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <menu+0x1ca0>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d130      	bne.n	8005628 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80055c6:	4a17      	ldr	r2, [pc, #92]	; (8005624 <menu+0x1cec>)
 80055c8:	2101      	movs	r1, #1
 80055ca:	2002      	movs	r0, #2
 80055cc:	f7fd f966 	bl	800289c <lcd_print>
 80055d0:	e033      	b.n	800563a <menu+0x1d02>
 80055d2:	bf00      	nop
 80055d4:	20000231 	.word	0x20000231
 80055d8:	20000245 	.word	0x20000245
 80055dc:	0800d40c 	.word	0x0800d40c
 80055e0:	0800d420 	.word	0x0800d420
 80055e4:	40010800 	.word	0x40010800
 80055e8:	20000253 	.word	0x20000253
 80055ec:	20000128 	.word	0x20000128
 80055f0:	2000022a 	.word	0x2000022a
 80055f4:	20000250 	.word	0x20000250
 80055f8:	20000224 	.word	0x20000224
 80055fc:	0800d7ac 	.word	0x0800d7ac
 8005600:	0800d670 	.word	0x0800d670
 8005604:	0800d7c0 	.word	0x0800d7c0
 8005608:	0800d694 	.word	0x0800d694
 800560c:	2000023f 	.word	0x2000023f
 8005610:	20000198 	.word	0x20000198
 8005614:	2000022f 	.word	0x2000022f
 8005618:	0800d7d4 	.word	0x0800d7d4
 800561c:	0800d7e8 	.word	0x0800d7e8
 8005620:	20000232 	.word	0x20000232
 8005624:	0800d46c 	.word	0x0800d46c
			} else if(dilSecim == 1) {
 8005628:	4b99      	ldr	r3, [pc, #612]	; (8005890 <menu+0x1f58>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d104      	bne.n	800563a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8005630:	4a98      	ldr	r2, [pc, #608]	; (8005894 <menu+0x1f5c>)
 8005632:	2101      	movs	r1, #1
 8005634:	2002      	movs	r0, #2
 8005636:	f7fd f931 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800563a:	2102      	movs	r1, #2
 800563c:	4896      	ldr	r0, [pc, #600]	; (8005898 <menu+0x1f60>)
 800563e:	f003 fe73 	bl	8009328 <HAL_GPIO_ReadPin>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d115      	bne.n	8005674 <menu+0x1d3c>
 8005648:	4b94      	ldr	r3, [pc, #592]	; (800589c <menu+0x1f64>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f083 0301 	eor.w	r3, r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8005656:	4b92      	ldr	r3, [pc, #584]	; (80058a0 <menu+0x1f68>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	4b90      	ldr	r3, [pc, #576]	; (80058a0 <menu+0x1f68>)
 8005660:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8005662:	4b8f      	ldr	r3, [pc, #572]	; (80058a0 <menu+0x1f68>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d902      	bls.n	8005670 <menu+0x1d38>
				yukariYavasLimit = 0;
 800566a:	4b8d      	ldr	r3, [pc, #564]	; (80058a0 <menu+0x1f68>)
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8005670:	f002 fa4a 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8005674:	2104      	movs	r1, #4
 8005676:	4888      	ldr	r0, [pc, #544]	; (8005898 <menu+0x1f60>)
 8005678:	f003 fe56 	bl	8009328 <HAL_GPIO_ReadPin>
 800567c:	4603      	mov	r3, r0
 800567e:	2b01      	cmp	r3, #1
 8005680:	d115      	bne.n	80056ae <menu+0x1d76>
 8005682:	4b86      	ldr	r3, [pc, #536]	; (800589c <menu+0x1f64>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f083 0301 	eor.w	r3, r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00e      	beq.n	80056ae <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8005690:	4b83      	ldr	r3, [pc, #524]	; (80058a0 <menu+0x1f68>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	3b01      	subs	r3, #1
 8005696:	b2da      	uxtb	r2, r3
 8005698:	4b81      	ldr	r3, [pc, #516]	; (80058a0 <menu+0x1f68>)
 800569a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800569c:	4b80      	ldr	r3, [pc, #512]	; (80058a0 <menu+0x1f68>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80056a4:	4b7e      	ldr	r3, [pc, #504]	; (80058a0 <menu+0x1f68>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80056aa:	f002 fa2d 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80056ae:	2108      	movs	r1, #8
 80056b0:	4879      	ldr	r0, [pc, #484]	; (8005898 <menu+0x1f60>)
 80056b2:	f003 fe39 	bl	8009328 <HAL_GPIO_ReadPin>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10d      	bne.n	80056d8 <menu+0x1da0>
 80056bc:	4b77      	ldr	r3, [pc, #476]	; (800589c <menu+0x1f64>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f083 0301 	eor.w	r3, r3, #1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d006      	beq.n	80056d8 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80056ca:	4b75      	ldr	r3, [pc, #468]	; (80058a0 <menu+0x1f68>)
 80056cc:	781a      	ldrb	r2, [r3, #0]
 80056ce:	4b75      	ldr	r3, [pc, #468]	; (80058a4 <menu+0x1f6c>)
 80056d0:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80056d2:	4b75      	ldr	r3, [pc, #468]	; (80058a8 <menu+0x1f70>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80056d8:	4b74      	ldr	r3, [pc, #464]	; (80058ac <menu+0x1f74>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b11      	cmp	r3, #17
 80056de:	f040 80c3 	bne.w	8005868 <menu+0x1f30>
		if(dilSecim == 0) {
 80056e2:	4b6b      	ldr	r3, [pc, #428]	; (8005890 <menu+0x1f58>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d105      	bne.n	80056f6 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80056ea:	4a71      	ldr	r2, [pc, #452]	; (80058b0 <menu+0x1f78>)
 80056ec:	2101      	movs	r1, #1
 80056ee:	2001      	movs	r0, #1
 80056f0:	f7fd f8d4 	bl	800289c <lcd_print>
 80056f4:	e008      	b.n	8005708 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80056f6:	4b66      	ldr	r3, [pc, #408]	; (8005890 <menu+0x1f58>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d104      	bne.n	8005708 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80056fe:	4a6d      	ldr	r2, [pc, #436]	; (80058b4 <menu+0x1f7c>)
 8005700:	2101      	movs	r1, #1
 8005702:	2001      	movs	r0, #1
 8005704:	f7fd f8ca 	bl	800289c <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8005708:	4b6b      	ldr	r3, [pc, #428]	; (80058b8 <menu+0x1f80>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d113      	bne.n	8005738 <menu+0x1e00>
			if(dilSecim == 0){
 8005710:	4b5f      	ldr	r3, [pc, #380]	; (8005890 <menu+0x1f58>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d105      	bne.n	8005724 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8005718:	4a68      	ldr	r2, [pc, #416]	; (80058bc <menu+0x1f84>)
 800571a:	2101      	movs	r1, #1
 800571c:	2002      	movs	r0, #2
 800571e:	f7fd f8bd 	bl	800289c <lcd_print>
 8005722:	e038      	b.n	8005796 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8005724:	4b5a      	ldr	r3, [pc, #360]	; (8005890 <menu+0x1f58>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d134      	bne.n	8005796 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 800572c:	4a64      	ldr	r2, [pc, #400]	; (80058c0 <menu+0x1f88>)
 800572e:	2101      	movs	r1, #1
 8005730:	2002      	movs	r0, #2
 8005732:	f7fd f8b3 	bl	800289c <lcd_print>
 8005736:	e02e      	b.n	8005796 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8005738:	4b5f      	ldr	r3, [pc, #380]	; (80058b8 <menu+0x1f80>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d113      	bne.n	8005768 <menu+0x1e30>
			if(dilSecim == 0){
 8005740:	4b53      	ldr	r3, [pc, #332]	; (8005890 <menu+0x1f58>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8005748:	4a5e      	ldr	r2, [pc, #376]	; (80058c4 <menu+0x1f8c>)
 800574a:	2101      	movs	r1, #1
 800574c:	2002      	movs	r0, #2
 800574e:	f7fd f8a5 	bl	800289c <lcd_print>
 8005752:	e020      	b.n	8005796 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8005754:	4b4e      	ldr	r3, [pc, #312]	; (8005890 <menu+0x1f58>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d11c      	bne.n	8005796 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 800575c:	4a5a      	ldr	r2, [pc, #360]	; (80058c8 <menu+0x1f90>)
 800575e:	2101      	movs	r1, #1
 8005760:	2002      	movs	r0, #2
 8005762:	f7fd f89b 	bl	800289c <lcd_print>
 8005766:	e016      	b.n	8005796 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8005768:	4b53      	ldr	r3, [pc, #332]	; (80058b8 <menu+0x1f80>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d112      	bne.n	8005796 <menu+0x1e5e>
			if(dilSecim == 0) {
 8005770:	4b47      	ldr	r3, [pc, #284]	; (8005890 <menu+0x1f58>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8005778:	4a54      	ldr	r2, [pc, #336]	; (80058cc <menu+0x1f94>)
 800577a:	2101      	movs	r1, #1
 800577c:	2002      	movs	r0, #2
 800577e:	f7fd f88d 	bl	800289c <lcd_print>
 8005782:	e008      	b.n	8005796 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8005784:	4b42      	ldr	r3, [pc, #264]	; (8005890 <menu+0x1f58>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d104      	bne.n	8005796 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 800578c:	4a50      	ldr	r2, [pc, #320]	; (80058d0 <menu+0x1f98>)
 800578e:	2101      	movs	r1, #1
 8005790:	2002      	movs	r0, #2
 8005792:	f7fd f883 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8005796:	2102      	movs	r1, #2
 8005798:	483f      	ldr	r0, [pc, #252]	; (8005898 <menu+0x1f60>)
 800579a:	f003 fdc5 	bl	8009328 <HAL_GPIO_ReadPin>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d115      	bne.n	80057d0 <menu+0x1e98>
 80057a4:	4b3d      	ldr	r3, [pc, #244]	; (800589c <menu+0x1f64>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f083 0301 	eor.w	r3, r3, #1
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00e      	beq.n	80057d0 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80057b2:	4b41      	ldr	r3, [pc, #260]	; (80058b8 <menu+0x1f80>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	3301      	adds	r3, #1
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	4b3f      	ldr	r3, [pc, #252]	; (80058b8 <menu+0x1f80>)
 80057bc:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80057be:	4b3e      	ldr	r3, [pc, #248]	; (80058b8 <menu+0x1f80>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d902      	bls.n	80057cc <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80057c6:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <menu+0x1f80>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80057cc:	f002 f99c 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80057d0:	2104      	movs	r1, #4
 80057d2:	4831      	ldr	r0, [pc, #196]	; (8005898 <menu+0x1f60>)
 80057d4:	f003 fda8 	bl	8009328 <HAL_GPIO_ReadPin>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d115      	bne.n	800580a <menu+0x1ed2>
 80057de:	4b2f      	ldr	r3, [pc, #188]	; (800589c <menu+0x1f64>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f083 0301 	eor.w	r3, r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80057ec:	4b32      	ldr	r3, [pc, #200]	; (80058b8 <menu+0x1f80>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	4b30      	ldr	r3, [pc, #192]	; (80058b8 <menu+0x1f80>)
 80057f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80057f8:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <menu+0x1f80>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d902      	bls.n	8005806 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8005800:	4b2d      	ldr	r3, [pc, #180]	; (80058b8 <menu+0x1f80>)
 8005802:	2202      	movs	r2, #2
 8005804:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8005806:	f002 f97f 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800580a:	2108      	movs	r1, #8
 800580c:	4822      	ldr	r0, [pc, #136]	; (8005898 <menu+0x1f60>)
 800580e:	f003 fd8b 	bl	8009328 <HAL_GPIO_ReadPin>
 8005812:	4603      	mov	r3, r0
 8005814:	2b01      	cmp	r3, #1
 8005816:	d127      	bne.n	8005868 <menu+0x1f30>
 8005818:	4b20      	ldr	r3, [pc, #128]	; (800589c <menu+0x1f64>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	f083 0301 	eor.w	r3, r3, #1
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d020      	beq.n	8005868 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8005826:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <menu+0x1f80>)
 8005828:	781a      	ldrb	r2, [r3, #0]
 800582a:	4b1e      	ldr	r3, [pc, #120]	; (80058a4 <menu+0x1f6c>)
 800582c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800582e:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <menu+0x1f80>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d003      	beq.n	800583e <menu+0x1f06>
 8005836:	4b20      	ldr	r3, [pc, #128]	; (80058b8 <menu+0x1f80>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d106      	bne.n	800584c <menu+0x1f14>
				calismaSekli = 0;
 800583e:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <menu+0x1f9c>)
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8005844:	4b23      	ldr	r3, [pc, #140]	; (80058d4 <menu+0x1f9c>)
 8005846:	781a      	ldrb	r2, [r3, #0]
 8005848:	4b16      	ldr	r3, [pc, #88]	; (80058a4 <menu+0x1f6c>)
 800584a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800584c:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <menu+0x1f80>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d106      	bne.n	8005862 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8005854:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <menu+0x1fa0>)
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800585a:	4b1f      	ldr	r3, [pc, #124]	; (80058d8 <menu+0x1fa0>)
 800585c:	781a      	ldrb	r2, [r3, #0]
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <menu+0x1f6c>)
 8005860:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8005862:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <menu+0x1f70>)
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8005868:	4b10      	ldr	r3, [pc, #64]	; (80058ac <menu+0x1f74>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b12      	cmp	r3, #18
 800586e:	f040 80d5 	bne.w	8005a1c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8005872:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <menu+0x1f80>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d13c      	bne.n	80058f4 <menu+0x1fbc>
			if(dilSecim == 0) {
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <menu+0x1f58>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d12e      	bne.n	80058e0 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8005882:	4a16      	ldr	r2, [pc, #88]	; (80058dc <menu+0x1fa4>)
 8005884:	2101      	movs	r1, #1
 8005886:	2001      	movs	r0, #1
 8005888:	f7fd f808 	bl	800289c <lcd_print>
 800588c:	e048      	b.n	8005920 <menu+0x1fe8>
 800588e:	bf00      	nop
 8005890:	20000245 	.word	0x20000245
 8005894:	0800d480 	.word	0x0800d480
 8005898:	40010800 	.word	0x40010800
 800589c:	20000253 	.word	0x20000253
 80058a0:	20000232 	.word	0x20000232
 80058a4:	20000128 	.word	0x20000128
 80058a8:	20000250 	.word	0x20000250
 80058ac:	20000224 	.word	0x20000224
 80058b0:	0800d7fc 	.word	0x0800d7fc
 80058b4:	0800d810 	.word	0x0800d810
 80058b8:	20000233 	.word	0x20000233
 80058bc:	0800d824 	.word	0x0800d824
 80058c0:	0800d834 	.word	0x0800d834
 80058c4:	0800d844 	.word	0x0800d844
 80058c8:	0800d854 	.word	0x0800d854
 80058cc:	0800d40c 	.word	0x0800d40c
 80058d0:	0800d420 	.word	0x0800d420
 80058d4:	20000225 	.word	0x20000225
 80058d8:	20000236 	.word	0x20000236
 80058dc:	0800d864 	.word	0x0800d864
			} else if(dilSecim == 1) {
 80058e0:	4b7b      	ldr	r3, [pc, #492]	; (8005ad0 <menu+0x2198>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d11b      	bne.n	8005920 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80058e8:	4a7a      	ldr	r2, [pc, #488]	; (8005ad4 <menu+0x219c>)
 80058ea:	2101      	movs	r1, #1
 80058ec:	2001      	movs	r0, #1
 80058ee:	f7fc ffd5 	bl	800289c <lcd_print>
 80058f2:	e015      	b.n	8005920 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80058f4:	4b78      	ldr	r3, [pc, #480]	; (8005ad8 <menu+0x21a0>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d111      	bne.n	8005920 <menu+0x1fe8>
			if(dilSecim == 0){
 80058fc:	4b74      	ldr	r3, [pc, #464]	; (8005ad0 <menu+0x2198>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8005904:	4a75      	ldr	r2, [pc, #468]	; (8005adc <menu+0x21a4>)
 8005906:	2101      	movs	r1, #1
 8005908:	2001      	movs	r0, #1
 800590a:	f7fc ffc7 	bl	800289c <lcd_print>
			}
			if(dilSecim == 1){
 800590e:	4b70      	ldr	r3, [pc, #448]	; (8005ad0 <menu+0x2198>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d104      	bne.n	8005920 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8005916:	4a72      	ldr	r2, [pc, #456]	; (8005ae0 <menu+0x21a8>)
 8005918:	2101      	movs	r1, #1
 800591a:	2001      	movs	r0, #1
 800591c:	f7fc ffbe 	bl	800289c <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8005920:	4b70      	ldr	r3, [pc, #448]	; (8005ae4 <menu+0x21ac>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d113      	bne.n	8005950 <menu+0x2018>
			if(dilSecim == 0) {
 8005928:	4b69      	ldr	r3, [pc, #420]	; (8005ad0 <menu+0x2198>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8005930:	4a6d      	ldr	r2, [pc, #436]	; (8005ae8 <menu+0x21b0>)
 8005932:	2101      	movs	r1, #1
 8005934:	2002      	movs	r0, #2
 8005936:	f7fc ffb1 	bl	800289c <lcd_print>
 800593a:	e020      	b.n	800597e <menu+0x2046>
			} else if(dilSecim == 1){
 800593c:	4b64      	ldr	r3, [pc, #400]	; (8005ad0 <menu+0x2198>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d11c      	bne.n	800597e <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8005944:	4a69      	ldr	r2, [pc, #420]	; (8005aec <menu+0x21b4>)
 8005946:	2101      	movs	r1, #1
 8005948:	2002      	movs	r0, #2
 800594a:	f7fc ffa7 	bl	800289c <lcd_print>
 800594e:	e016      	b.n	800597e <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8005950:	4b64      	ldr	r3, [pc, #400]	; (8005ae4 <menu+0x21ac>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d112      	bne.n	800597e <menu+0x2046>
			if(dilSecim == 0){
 8005958:	4b5d      	ldr	r3, [pc, #372]	; (8005ad0 <menu+0x2198>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d105      	bne.n	800596c <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8005960:	4a63      	ldr	r2, [pc, #396]	; (8005af0 <menu+0x21b8>)
 8005962:	2101      	movs	r1, #1
 8005964:	2002      	movs	r0, #2
 8005966:	f7fc ff99 	bl	800289c <lcd_print>
 800596a:	e008      	b.n	800597e <menu+0x2046>
			} else if(dilSecim == 1){
 800596c:	4b58      	ldr	r3, [pc, #352]	; (8005ad0 <menu+0x2198>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d104      	bne.n	800597e <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8005974:	4a5f      	ldr	r2, [pc, #380]	; (8005af4 <menu+0x21bc>)
 8005976:	2101      	movs	r1, #1
 8005978:	2002      	movs	r0, #2
 800597a:	f7fc ff8f 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800597e:	2102      	movs	r1, #2
 8005980:	485d      	ldr	r0, [pc, #372]	; (8005af8 <menu+0x21c0>)
 8005982:	f003 fcd1 	bl	8009328 <HAL_GPIO_ReadPin>
 8005986:	4603      	mov	r3, r0
 8005988:	2b01      	cmp	r3, #1
 800598a:	d115      	bne.n	80059b8 <menu+0x2080>
 800598c:	4b5b      	ldr	r3, [pc, #364]	; (8005afc <menu+0x21c4>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	f083 0301 	eor.w	r3, r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800599a:	4b52      	ldr	r3, [pc, #328]	; (8005ae4 <menu+0x21ac>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	3301      	adds	r3, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4b50      	ldr	r3, [pc, #320]	; (8005ae4 <menu+0x21ac>)
 80059a4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80059a6:	4b4f      	ldr	r3, [pc, #316]	; (8005ae4 <menu+0x21ac>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d902      	bls.n	80059b4 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80059ae:	4b4d      	ldr	r3, [pc, #308]	; (8005ae4 <menu+0x21ac>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80059b4:	f002 f8a8 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80059b8:	2104      	movs	r1, #4
 80059ba:	484f      	ldr	r0, [pc, #316]	; (8005af8 <menu+0x21c0>)
 80059bc:	f003 fcb4 	bl	8009328 <HAL_GPIO_ReadPin>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d115      	bne.n	80059f2 <menu+0x20ba>
 80059c6:	4b4d      	ldr	r3, [pc, #308]	; (8005afc <menu+0x21c4>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	f083 0301 	eor.w	r3, r3, #1
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00e      	beq.n	80059f2 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80059d4:	4b43      	ldr	r3, [pc, #268]	; (8005ae4 <menu+0x21ac>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	3b01      	subs	r3, #1
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	4b41      	ldr	r3, [pc, #260]	; (8005ae4 <menu+0x21ac>)
 80059de:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80059e0:	4b40      	ldr	r3, [pc, #256]	; (8005ae4 <menu+0x21ac>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80059e8:	4b3e      	ldr	r3, [pc, #248]	; (8005ae4 <menu+0x21ac>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80059ee:	f002 f88b 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80059f2:	2108      	movs	r1, #8
 80059f4:	4840      	ldr	r0, [pc, #256]	; (8005af8 <menu+0x21c0>)
 80059f6:	f003 fc97 	bl	8009328 <HAL_GPIO_ReadPin>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10d      	bne.n	8005a1c <menu+0x20e4>
 8005a00:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <menu+0x21c4>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	f083 0301 	eor.w	r3, r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8005a0e:	4b35      	ldr	r3, [pc, #212]	; (8005ae4 <menu+0x21ac>)
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <menu+0x21c8>)
 8005a14:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8005a16:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <menu+0x21cc>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8005a1c:	4b3a      	ldr	r3, [pc, #232]	; (8005b08 <menu+0x21d0>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b13      	cmp	r3, #19
 8005a22:	f040 80d5 	bne.w	8005bd0 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8005a26:	4b2c      	ldr	r3, [pc, #176]	; (8005ad8 <menu+0x21a0>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d113      	bne.n	8005a56 <menu+0x211e>
			if(dilSecim == 0) {
 8005a2e:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <menu+0x2198>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d105      	bne.n	8005a42 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8005a36:	4a35      	ldr	r2, [pc, #212]	; (8005b0c <menu+0x21d4>)
 8005a38:	2101      	movs	r1, #1
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	f7fc ff2e 	bl	800289c <lcd_print>
 8005a40:	e01f      	b.n	8005a82 <menu+0x214a>
			} else if(dilSecim == 1) {
 8005a42:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <menu+0x2198>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d11b      	bne.n	8005a82 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8005a4a:	4a31      	ldr	r2, [pc, #196]	; (8005b10 <menu+0x21d8>)
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	2001      	movs	r0, #1
 8005a50:	f7fc ff24 	bl	800289c <lcd_print>
 8005a54:	e015      	b.n	8005a82 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8005a56:	4b20      	ldr	r3, [pc, #128]	; (8005ad8 <menu+0x21a0>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d111      	bne.n	8005a82 <menu+0x214a>
			if(dilSecim == 0) {
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <menu+0x2198>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8005a66:	4a2b      	ldr	r2, [pc, #172]	; (8005b14 <menu+0x21dc>)
 8005a68:	2101      	movs	r1, #1
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	f7fc ff16 	bl	800289c <lcd_print>
			}
			if(dilSecim == 1) {
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <menu+0x2198>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d104      	bne.n	8005a82 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8005a78:	4a27      	ldr	r2, [pc, #156]	; (8005b18 <menu+0x21e0>)
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	f7fc ff0d 	bl	800289c <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8005a82:	4b26      	ldr	r3, [pc, #152]	; (8005b1c <menu+0x21e4>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d113      	bne.n	8005ab2 <menu+0x217a>
			if(dilSecim == 0) {
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <menu+0x2198>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d105      	bne.n	8005a9e <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8005a92:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <menu+0x21b0>)
 8005a94:	2101      	movs	r1, #1
 8005a96:	2002      	movs	r0, #2
 8005a98:	f7fc ff00 	bl	800289c <lcd_print>
 8005a9c:	e049      	b.n	8005b32 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <menu+0x2198>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d145      	bne.n	8005b32 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8005aa6:	4a11      	ldr	r2, [pc, #68]	; (8005aec <menu+0x21b4>)
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	2002      	movs	r0, #2
 8005aac:	f7fc fef6 	bl	800289c <lcd_print>
 8005ab0:	e03f      	b.n	8005b32 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <menu+0x21e4>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d13b      	bne.n	8005b32 <menu+0x21fa>
			if(dilSecim == 0) {
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <menu+0x2198>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d12e      	bne.n	8005b20 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8005ac2:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <menu+0x21b8>)
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	2002      	movs	r0, #2
 8005ac8:	f7fc fee8 	bl	800289c <lcd_print>
 8005acc:	e031      	b.n	8005b32 <menu+0x21fa>
 8005ace:	bf00      	nop
 8005ad0:	20000245 	.word	0x20000245
 8005ad4:	0800d878 	.word	0x0800d878
 8005ad8:	20000233 	.word	0x20000233
 8005adc:	0800d888 	.word	0x0800d888
 8005ae0:	0800d89c 	.word	0x0800d89c
 8005ae4:	20000234 	.word	0x20000234
 8005ae8:	0800d40c 	.word	0x0800d40c
 8005aec:	0800d420 	.word	0x0800d420
 8005af0:	0800d46c 	.word	0x0800d46c
 8005af4:	0800d480 	.word	0x0800d480
 8005af8:	40010800 	.word	0x40010800
 8005afc:	20000253 	.word	0x20000253
 8005b00:	20000128 	.word	0x20000128
 8005b04:	20000250 	.word	0x20000250
 8005b08:	20000224 	.word	0x20000224
 8005b0c:	0800d8b0 	.word	0x0800d8b0
 8005b10:	0800d8c4 	.word	0x0800d8c4
 8005b14:	0800d8d8 	.word	0x0800d8d8
 8005b18:	0800d8ec 	.word	0x0800d8ec
 8005b1c:	20000235 	.word	0x20000235
			} else if(dilSecim == 1) {
 8005b20:	4b90      	ldr	r3, [pc, #576]	; (8005d64 <menu+0x242c>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d104      	bne.n	8005b32 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8005b28:	4a8f      	ldr	r2, [pc, #572]	; (8005d68 <menu+0x2430>)
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	2002      	movs	r0, #2
 8005b2e:	f7fc feb5 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8005b32:	2102      	movs	r1, #2
 8005b34:	488d      	ldr	r0, [pc, #564]	; (8005d6c <menu+0x2434>)
 8005b36:	f003 fbf7 	bl	8009328 <HAL_GPIO_ReadPin>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d115      	bne.n	8005b6c <menu+0x2234>
 8005b40:	4b8b      	ldr	r3, [pc, #556]	; (8005d70 <menu+0x2438>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f083 0301 	eor.w	r3, r3, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8005b4e:	4b89      	ldr	r3, [pc, #548]	; (8005d74 <menu+0x243c>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	4b87      	ldr	r3, [pc, #540]	; (8005d74 <menu+0x243c>)
 8005b58:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8005b5a:	4b86      	ldr	r3, [pc, #536]	; (8005d74 <menu+0x243c>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d902      	bls.n	8005b68 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8005b62:	4b84      	ldr	r3, [pc, #528]	; (8005d74 <menu+0x243c>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8005b68:	f001 ffce 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8005b6c:	2104      	movs	r1, #4
 8005b6e:	487f      	ldr	r0, [pc, #508]	; (8005d6c <menu+0x2434>)
 8005b70:	f003 fbda 	bl	8009328 <HAL_GPIO_ReadPin>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d115      	bne.n	8005ba6 <menu+0x226e>
 8005b7a:	4b7d      	ldr	r3, [pc, #500]	; (8005d70 <menu+0x2438>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f083 0301 	eor.w	r3, r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00e      	beq.n	8005ba6 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8005b88:	4b7a      	ldr	r3, [pc, #488]	; (8005d74 <menu+0x243c>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	4b78      	ldr	r3, [pc, #480]	; (8005d74 <menu+0x243c>)
 8005b92:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8005b94:	4b77      	ldr	r3, [pc, #476]	; (8005d74 <menu+0x243c>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8005b9c:	4b75      	ldr	r3, [pc, #468]	; (8005d74 <menu+0x243c>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8005ba2:	f001 ffb1 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8005ba6:	2108      	movs	r1, #8
 8005ba8:	4870      	ldr	r0, [pc, #448]	; (8005d6c <menu+0x2434>)
 8005baa:	f003 fbbd 	bl	8009328 <HAL_GPIO_ReadPin>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d10d      	bne.n	8005bd0 <menu+0x2298>
 8005bb4:	4b6e      	ldr	r3, [pc, #440]	; (8005d70 <menu+0x2438>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f083 0301 	eor.w	r3, r3, #1
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d006      	beq.n	8005bd0 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8005bc2:	4b6c      	ldr	r3, [pc, #432]	; (8005d74 <menu+0x243c>)
 8005bc4:	781a      	ldrb	r2, [r3, #0]
 8005bc6:	4b6c      	ldr	r3, [pc, #432]	; (8005d78 <menu+0x2440>)
 8005bc8:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8005bca:	4b6c      	ldr	r3, [pc, #432]	; (8005d7c <menu+0x2444>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8005bd0:	4b6b      	ldr	r3, [pc, #428]	; (8005d80 <menu+0x2448>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b14      	cmp	r3, #20
 8005bd6:	f040 80b5 	bne.w	8005d44 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8005bda:	4b6a      	ldr	r3, [pc, #424]	; (8005d84 <menu+0x244c>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d113      	bne.n	8005c0a <menu+0x22d2>
			if(dilSecim == 0) {
 8005be2:	4b60      	ldr	r3, [pc, #384]	; (8005d64 <menu+0x242c>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d105      	bne.n	8005bf6 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8005bea:	4a67      	ldr	r2, [pc, #412]	; (8005d88 <menu+0x2450>)
 8005bec:	2101      	movs	r1, #1
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f7fc fe54 	bl	800289c <lcd_print>
 8005bf4:	e020      	b.n	8005c38 <menu+0x2300>
			} else if(dilSecim == 1) {
 8005bf6:	4b5b      	ldr	r3, [pc, #364]	; (8005d64 <menu+0x242c>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d11c      	bne.n	8005c38 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8005bfe:	4a63      	ldr	r2, [pc, #396]	; (8005d8c <menu+0x2454>)
 8005c00:	2101      	movs	r1, #1
 8005c02:	2001      	movs	r0, #1
 8005c04:	f7fc fe4a 	bl	800289c <lcd_print>
 8005c08:	e016      	b.n	8005c38 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8005c0a:	4b5e      	ldr	r3, [pc, #376]	; (8005d84 <menu+0x244c>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d112      	bne.n	8005c38 <menu+0x2300>
			if(dilSecim == 0) {
 8005c12:	4b54      	ldr	r3, [pc, #336]	; (8005d64 <menu+0x242c>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d105      	bne.n	8005c26 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8005c1a:	4a5d      	ldr	r2, [pc, #372]	; (8005d90 <menu+0x2458>)
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f7fc fe3c 	bl	800289c <lcd_print>
 8005c24:	e008      	b.n	8005c38 <menu+0x2300>
			} else if(dilSecim == 1) {
 8005c26:	4b4f      	ldr	r3, [pc, #316]	; (8005d64 <menu+0x242c>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d104      	bne.n	8005c38 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8005c2e:	4a59      	ldr	r2, [pc, #356]	; (8005d94 <menu+0x245c>)
 8005c30:	2101      	movs	r1, #1
 8005c32:	2001      	movs	r0, #1
 8005c34:	f7fc fe32 	bl	800289c <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8005c38:	4b57      	ldr	r3, [pc, #348]	; (8005d98 <menu+0x2460>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d113      	bne.n	8005c68 <menu+0x2330>
			if(dilSecim == 0) {
 8005c40:	4b48      	ldr	r3, [pc, #288]	; (8005d64 <menu+0x242c>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8005c48:	4a54      	ldr	r2, [pc, #336]	; (8005d9c <menu+0x2464>)
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	2002      	movs	r0, #2
 8005c4e:	f7fc fe25 	bl	800289c <lcd_print>
 8005c52:	e020      	b.n	8005c96 <menu+0x235e>
			} else if(dilSecim == 1) {
 8005c54:	4b43      	ldr	r3, [pc, #268]	; (8005d64 <menu+0x242c>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d11c      	bne.n	8005c96 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8005c5c:	4a50      	ldr	r2, [pc, #320]	; (8005da0 <menu+0x2468>)
 8005c5e:	2101      	movs	r1, #1
 8005c60:	2002      	movs	r0, #2
 8005c62:	f7fc fe1b 	bl	800289c <lcd_print>
 8005c66:	e016      	b.n	8005c96 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8005c68:	4b4b      	ldr	r3, [pc, #300]	; (8005d98 <menu+0x2460>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d112      	bne.n	8005c96 <menu+0x235e>
			if(dilSecim == 0) {
 8005c70:	4b3c      	ldr	r3, [pc, #240]	; (8005d64 <menu+0x242c>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8005c78:	4a4a      	ldr	r2, [pc, #296]	; (8005da4 <menu+0x246c>)
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	2002      	movs	r0, #2
 8005c7e:	f7fc fe0d 	bl	800289c <lcd_print>
 8005c82:	e008      	b.n	8005c96 <menu+0x235e>
			} else if(dilSecim == 1) {
 8005c84:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <menu+0x242c>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d104      	bne.n	8005c96 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8005c8c:	4a46      	ldr	r2, [pc, #280]	; (8005da8 <menu+0x2470>)
 8005c8e:	2101      	movs	r1, #1
 8005c90:	2002      	movs	r0, #2
 8005c92:	f7fc fe03 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8005c96:	2102      	movs	r1, #2
 8005c98:	4834      	ldr	r0, [pc, #208]	; (8005d6c <menu+0x2434>)
 8005c9a:	f003 fb45 	bl	8009328 <HAL_GPIO_ReadPin>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d119      	bne.n	8005cd8 <menu+0x23a0>
 8005ca4:	4b32      	ldr	r3, [pc, #200]	; (8005d70 <menu+0x2438>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	f083 0301 	eor.w	r3, r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d012      	beq.n	8005cd8 <menu+0x23a0>
 8005cb2:	4b34      	ldr	r3, [pc, #208]	; (8005d84 <menu+0x244c>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d10e      	bne.n	8005cd8 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8005cba:	4b37      	ldr	r3, [pc, #220]	; (8005d98 <menu+0x2460>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	4b35      	ldr	r3, [pc, #212]	; (8005d98 <menu+0x2460>)
 8005cc4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8005cc6:	4b34      	ldr	r3, [pc, #208]	; (8005d98 <menu+0x2460>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d902      	bls.n	8005cd4 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8005cce:	4b32      	ldr	r3, [pc, #200]	; (8005d98 <menu+0x2460>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8005cd4:	f001 ff18 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8005cd8:	2104      	movs	r1, #4
 8005cda:	4824      	ldr	r0, [pc, #144]	; (8005d6c <menu+0x2434>)
 8005cdc:	f003 fb24 	bl	8009328 <HAL_GPIO_ReadPin>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d119      	bne.n	8005d1a <menu+0x23e2>
 8005ce6:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <menu+0x2438>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d012      	beq.n	8005d1a <menu+0x23e2>
 8005cf4:	4b23      	ldr	r3, [pc, #140]	; (8005d84 <menu+0x244c>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d10e      	bne.n	8005d1a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8005cfc:	4b26      	ldr	r3, [pc, #152]	; (8005d98 <menu+0x2460>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <menu+0x2460>)
 8005d06:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8005d08:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <menu+0x2460>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8005d10:	4b21      	ldr	r3, [pc, #132]	; (8005d98 <menu+0x2460>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8005d16:	f001 fef7 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8005d1a:	2108      	movs	r1, #8
 8005d1c:	4813      	ldr	r0, [pc, #76]	; (8005d6c <menu+0x2434>)
 8005d1e:	f003 fb03 	bl	8009328 <HAL_GPIO_ReadPin>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d10d      	bne.n	8005d44 <menu+0x240c>
 8005d28:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <menu+0x2438>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	f083 0301 	eor.w	r3, r3, #1
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d006      	beq.n	8005d44 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8005d36:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <menu+0x2460>)
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <menu+0x2440>)
 8005d3c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <menu+0x2444>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <menu+0x2448>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b15      	cmp	r3, #21
 8005d4a:	f040 80c2 	bne.w	8005ed2 <menu+0x259a>
		if(dilSecim == 0) {
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <menu+0x242c>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d12c      	bne.n	8005db0 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8005d56:	4a15      	ldr	r2, [pc, #84]	; (8005dac <menu+0x2474>)
 8005d58:	2101      	movs	r1, #1
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	f7fc fd9e 	bl	800289c <lcd_print>
 8005d60:	e02f      	b.n	8005dc2 <menu+0x248a>
 8005d62:	bf00      	nop
 8005d64:	20000245 	.word	0x20000245
 8005d68:	0800d480 	.word	0x0800d480
 8005d6c:	40010800 	.word	0x40010800
 8005d70:	20000253 	.word	0x20000253
 8005d74:	20000235 	.word	0x20000235
 8005d78:	20000128 	.word	0x20000128
 8005d7c:	20000250 	.word	0x20000250
 8005d80:	20000224 	.word	0x20000224
 8005d84:	20000233 	.word	0x20000233
 8005d88:	0800d900 	.word	0x0800d900
 8005d8c:	0800d914 	.word	0x0800d914
 8005d90:	0800d928 	.word	0x0800d928
 8005d94:	0800d93c 	.word	0x0800d93c
 8005d98:	20000236 	.word	0x20000236
 8005d9c:	0800d950 	.word	0x0800d950
 8005da0:	0800d964 	.word	0x0800d964
 8005da4:	0800d974 	.word	0x0800d974
 8005da8:	0800d988 	.word	0x0800d988
 8005dac:	0800d998 	.word	0x0800d998
		} else if(dilSecim == 1) {
 8005db0:	4b9c      	ldr	r3, [pc, #624]	; (8006024 <menu+0x26ec>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d104      	bne.n	8005dc2 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8005db8:	4a9b      	ldr	r2, [pc, #620]	; (8006028 <menu+0x26f0>)
 8005dba:	2101      	movs	r1, #1
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	f7fc fd6d 	bl	800289c <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8005dc2:	4b9a      	ldr	r3, [pc, #616]	; (800602c <menu+0x26f4>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d112      	bne.n	8005df0 <menu+0x24b8>
			if(dilSecim == 0) {
 8005dca:	4b96      	ldr	r3, [pc, #600]	; (8006024 <menu+0x26ec>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8005dd2:	4a97      	ldr	r2, [pc, #604]	; (8006030 <menu+0x26f8>)
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	2002      	movs	r0, #2
 8005dd8:	f7fc fd60 	bl	800289c <lcd_print>
			}
			if(dilSecim == 1) {
 8005ddc:	4b91      	ldr	r3, [pc, #580]	; (8006024 <menu+0x26ec>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d11c      	bne.n	8005e1e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8005de4:	4a93      	ldr	r2, [pc, #588]	; (8006034 <menu+0x26fc>)
 8005de6:	2101      	movs	r1, #1
 8005de8:	2002      	movs	r0, #2
 8005dea:	f7fc fd57 	bl	800289c <lcd_print>
 8005dee:	e016      	b.n	8005e1e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8005df0:	4b8e      	ldr	r3, [pc, #568]	; (800602c <menu+0x26f4>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d112      	bne.n	8005e1e <menu+0x24e6>
			if(dilSecim == 0) {
 8005df8:	4b8a      	ldr	r3, [pc, #552]	; (8006024 <menu+0x26ec>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d105      	bne.n	8005e0c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8005e00:	4a8d      	ldr	r2, [pc, #564]	; (8006038 <menu+0x2700>)
 8005e02:	2101      	movs	r1, #1
 8005e04:	2002      	movs	r0, #2
 8005e06:	f7fc fd49 	bl	800289c <lcd_print>
 8005e0a:	e008      	b.n	8005e1e <menu+0x24e6>
			} else if(dilSecim == 1) {
 8005e0c:	4b85      	ldr	r3, [pc, #532]	; (8006024 <menu+0x26ec>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d104      	bne.n	8005e1e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8005e14:	4a89      	ldr	r2, [pc, #548]	; (800603c <menu+0x2704>)
 8005e16:	2101      	movs	r1, #1
 8005e18:	2002      	movs	r0, #2
 8005e1a:	f7fc fd3f 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8005e1e:	2102      	movs	r1, #2
 8005e20:	4887      	ldr	r0, [pc, #540]	; (8006040 <menu+0x2708>)
 8005e22:	f003 fa81 	bl	8009328 <HAL_GPIO_ReadPin>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d115      	bne.n	8005e58 <menu+0x2520>
 8005e2c:	4b85      	ldr	r3, [pc, #532]	; (8006044 <menu+0x270c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f083 0301 	eor.w	r3, r3, #1
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00e      	beq.n	8005e58 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8005e3a:	4b7c      	ldr	r3, [pc, #496]	; (800602c <menu+0x26f4>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	4b7a      	ldr	r3, [pc, #488]	; (800602c <menu+0x26f4>)
 8005e44:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8005e46:	4b79      	ldr	r3, [pc, #484]	; (800602c <menu+0x26f4>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d902      	bls.n	8005e54 <menu+0x251c>
				platformSilindirTipi = 0;
 8005e4e:	4b77      	ldr	r3, [pc, #476]	; (800602c <menu+0x26f4>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8005e54:	f001 fe58 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8005e58:	2104      	movs	r1, #4
 8005e5a:	4879      	ldr	r0, [pc, #484]	; (8006040 <menu+0x2708>)
 8005e5c:	f003 fa64 	bl	8009328 <HAL_GPIO_ReadPin>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d115      	bne.n	8005e92 <menu+0x255a>
 8005e66:	4b77      	ldr	r3, [pc, #476]	; (8006044 <menu+0x270c>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f083 0301 	eor.w	r3, r3, #1
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00e      	beq.n	8005e92 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8005e74:	4b6d      	ldr	r3, [pc, #436]	; (800602c <menu+0x26f4>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	4b6b      	ldr	r3, [pc, #428]	; (800602c <menu+0x26f4>)
 8005e7e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8005e80:	4b6a      	ldr	r3, [pc, #424]	; (800602c <menu+0x26f4>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <menu+0x2556>
		   		platformSilindirTipi = 1;
 8005e88:	4b68      	ldr	r3, [pc, #416]	; (800602c <menu+0x26f4>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8005e8e:	f001 fe3b 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8005e92:	2108      	movs	r1, #8
 8005e94:	486a      	ldr	r0, [pc, #424]	; (8006040 <menu+0x2708>)
 8005e96:	f003 fa47 	bl	8009328 <HAL_GPIO_ReadPin>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d118      	bne.n	8005ed2 <menu+0x259a>
 8005ea0:	4b68      	ldr	r3, [pc, #416]	; (8006044 <menu+0x270c>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	f083 0301 	eor.w	r3, r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d011      	beq.n	8005ed2 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8005eae:	4b5f      	ldr	r3, [pc, #380]	; (800602c <menu+0x26f4>)
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	4b65      	ldr	r3, [pc, #404]	; (8006048 <menu+0x2710>)
 8005eb4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8005eb6:	4b5d      	ldr	r3, [pc, #372]	; (800602c <menu+0x26f4>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d106      	bne.n	8005ecc <menu+0x2594>
				altLimit = 1;
 8005ebe:	4b63      	ldr	r3, [pc, #396]	; (800604c <menu+0x2714>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8005ec4:	4b61      	ldr	r3, [pc, #388]	; (800604c <menu+0x2714>)
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <menu+0x2710>)
 8005eca:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8005ecc:	4b60      	ldr	r3, [pc, #384]	; (8006050 <menu+0x2718>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8005ed2:	4b60      	ldr	r3, [pc, #384]	; (8006054 <menu+0x271c>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b16      	cmp	r3, #22
 8005ed8:	f040 8081 	bne.w	8005fde <menu+0x26a6>
		if(dilSecim == 0) {
 8005edc:	4b51      	ldr	r3, [pc, #324]	; (8006024 <menu+0x26ec>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8005ee4:	4a5c      	ldr	r2, [pc, #368]	; (8006058 <menu+0x2720>)
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f7fc fcd7 	bl	800289c <lcd_print>
 8005eee:	e008      	b.n	8005f02 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8005ef0:	4b4c      	ldr	r3, [pc, #304]	; (8006024 <menu+0x26ec>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d104      	bne.n	8005f02 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8005ef8:	4a58      	ldr	r2, [pc, #352]	; (800605c <menu+0x2724>)
 8005efa:	2101      	movs	r1, #1
 8005efc:	2001      	movs	r0, #1
 8005efe:	f7fc fccd 	bl	800289c <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8005f02:	4b48      	ldr	r3, [pc, #288]	; (8006024 <menu+0x26ec>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d105      	bne.n	8005f16 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8005f0a:	4a55      	ldr	r2, [pc, #340]	; (8006060 <menu+0x2728>)
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	2002      	movs	r0, #2
 8005f10:	f7fc fcc4 	bl	800289c <lcd_print>
 8005f14:	e008      	b.n	8005f28 <menu+0x25f0>
			} else if(dilSecim == 1){
 8005f16:	4b43      	ldr	r3, [pc, #268]	; (8006024 <menu+0x26ec>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d104      	bne.n	8005f28 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8005f1e:	4a51      	ldr	r2, [pc, #324]	; (8006064 <menu+0x272c>)
 8005f20:	2101      	movs	r1, #1
 8005f22:	2002      	movs	r0, #2
 8005f24:	f7fc fcba 	bl	800289c <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8005f28:	4b4f      	ldr	r3, [pc, #316]	; (8006068 <menu+0x2730>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	220a      	movs	r2, #10
 8005f2e:	494f      	ldr	r1, [pc, #316]	; (800606c <menu+0x2734>)
 8005f30:	4618      	mov	r0, r3
 8005f32:	f006 fa25 	bl	800c380 <itoa>
		lcd_print(2,16,snum);
 8005f36:	4a4d      	ldr	r2, [pc, #308]	; (800606c <menu+0x2734>)
 8005f38:	2110      	movs	r1, #16
 8005f3a:	2002      	movs	r0, #2
 8005f3c:	f7fc fcae 	bl	800289c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8005f40:	2102      	movs	r1, #2
 8005f42:	483f      	ldr	r0, [pc, #252]	; (8006040 <menu+0x2708>)
 8005f44:	f003 f9f0 	bl	8009328 <HAL_GPIO_ReadPin>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d115      	bne.n	8005f7a <menu+0x2642>
 8005f4e:	4b3d      	ldr	r3, [pc, #244]	; (8006044 <menu+0x270c>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f083 0301 	eor.w	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8005f5c:	4b42      	ldr	r3, [pc, #264]	; (8006068 <menu+0x2730>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	3301      	adds	r3, #1
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	4b40      	ldr	r3, [pc, #256]	; (8006068 <menu+0x2730>)
 8005f66:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8005f68:	4b3f      	ldr	r3, [pc, #252]	; (8006068 <menu+0x2730>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b05      	cmp	r3, #5
 8005f6e:	d902      	bls.n	8005f76 <menu+0x263e>
				yukariValfTmr = 0;
 8005f70:	4b3d      	ldr	r3, [pc, #244]	; (8006068 <menu+0x2730>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8005f76:	f001 fdc7 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8005f7a:	2104      	movs	r1, #4
 8005f7c:	4830      	ldr	r0, [pc, #192]	; (8006040 <menu+0x2708>)
 8005f7e:	f003 f9d3 	bl	8009328 <HAL_GPIO_ReadPin>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d115      	bne.n	8005fb4 <menu+0x267c>
 8005f88:	4b2e      	ldr	r3, [pc, #184]	; (8006044 <menu+0x270c>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	f083 0301 	eor.w	r3, r3, #1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00e      	beq.n	8005fb4 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8005f96:	4b34      	ldr	r3, [pc, #208]	; (8006068 <menu+0x2730>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	4b32      	ldr	r3, [pc, #200]	; (8006068 <menu+0x2730>)
 8005fa0:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8005fa2:	4b31      	ldr	r3, [pc, #196]	; (8006068 <menu+0x2730>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b06      	cmp	r3, #6
 8005fa8:	d902      	bls.n	8005fb0 <menu+0x2678>
		   		yukariValfTmr = 5;
 8005faa:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <menu+0x2730>)
 8005fac:	2205      	movs	r2, #5
 8005fae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8005fb0:	f001 fdaa 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8005fb4:	2108      	movs	r1, #8
 8005fb6:	4822      	ldr	r0, [pc, #136]	; (8006040 <menu+0x2708>)
 8005fb8:	f003 f9b6 	bl	8009328 <HAL_GPIO_ReadPin>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d10d      	bne.n	8005fde <menu+0x26a6>
 8005fc2:	4b20      	ldr	r3, [pc, #128]	; (8006044 <menu+0x270c>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f083 0301 	eor.w	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d006      	beq.n	8005fde <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8005fd0:	4b25      	ldr	r3, [pc, #148]	; (8006068 <menu+0x2730>)
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	4b1c      	ldr	r3, [pc, #112]	; (8006048 <menu+0x2710>)
 8005fd6:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <menu+0x2718>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8005fde:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <menu+0x271c>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b17      	cmp	r3, #23
 8005fe4:	f040 80ac 	bne.w	8006140 <menu+0x2808>
		if(dilSecim == 0) {
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <menu+0x26ec>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <menu+0x2738>)
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	f7fc fc51 	bl	800289c <lcd_print>
 8005ffa:	e008      	b.n	800600e <menu+0x26d6>
		} else if(dilSecim == 1) {
 8005ffc:	4b09      	ldr	r3, [pc, #36]	; (8006024 <menu+0x26ec>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d104      	bne.n	800600e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8006004:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <menu+0x273c>)
 8006006:	2101      	movs	r1, #1
 8006008:	2001      	movs	r0, #1
 800600a:	f7fc fc47 	bl	800289c <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800600e:	4b05      	ldr	r3, [pc, #20]	; (8006024 <menu+0x26ec>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d130      	bne.n	8006078 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <menu+0x2728>)
 8006018:	2101      	movs	r1, #1
 800601a:	2002      	movs	r0, #2
 800601c:	f7fc fc3e 	bl	800289c <lcd_print>
 8006020:	e033      	b.n	800608a <menu+0x2752>
 8006022:	bf00      	nop
 8006024:	20000245 	.word	0x20000245
 8006028:	0800d9ac 	.word	0x0800d9ac
 800602c:	20000237 	.word	0x20000237
 8006030:	0800d950 	.word	0x0800d950
 8006034:	0800d964 	.word	0x0800d964
 8006038:	0800d974 	.word	0x0800d974
 800603c:	0800d988 	.word	0x0800d988
 8006040:	40010800 	.word	0x40010800
 8006044:	20000253 	.word	0x20000253
 8006048:	20000128 	.word	0x20000128
 800604c:	2000022a 	.word	0x2000022a
 8006050:	20000250 	.word	0x20000250
 8006054:	20000224 	.word	0x20000224
 8006058:	0800d9bc 	.word	0x0800d9bc
 800605c:	0800d9d0 	.word	0x0800d9d0
 8006060:	0800d670 	.word	0x0800d670
 8006064:	0800d9e4 	.word	0x0800d9e4
 8006068:	20000238 	.word	0x20000238
 800606c:	20000198 	.word	0x20000198
 8006070:	0800d9f4 	.word	0x0800d9f4
 8006074:	0800da08 	.word	0x0800da08
			} else if(dilSecim == 1) {
 8006078:	4b98      	ldr	r3, [pc, #608]	; (80062dc <menu+0x29a4>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d104      	bne.n	800608a <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8006080:	4a97      	ldr	r2, [pc, #604]	; (80062e0 <menu+0x29a8>)
 8006082:	2101      	movs	r1, #1
 8006084:	2002      	movs	r0, #2
 8006086:	f7fc fc09 	bl	800289c <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 800608a:	4b96      	ldr	r3, [pc, #600]	; (80062e4 <menu+0x29ac>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	220a      	movs	r2, #10
 8006090:	4995      	ldr	r1, [pc, #596]	; (80062e8 <menu+0x29b0>)
 8006092:	4618      	mov	r0, r3
 8006094:	f006 f974 	bl	800c380 <itoa>
		lcd_print(2,16,snum);
 8006098:	4a93      	ldr	r2, [pc, #588]	; (80062e8 <menu+0x29b0>)
 800609a:	2110      	movs	r1, #16
 800609c:	2002      	movs	r0, #2
 800609e:	f7fc fbfd 	bl	800289c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80060a2:	2102      	movs	r1, #2
 80060a4:	4891      	ldr	r0, [pc, #580]	; (80062ec <menu+0x29b4>)
 80060a6:	f003 f93f 	bl	8009328 <HAL_GPIO_ReadPin>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d115      	bne.n	80060dc <menu+0x27a4>
 80060b0:	4b8f      	ldr	r3, [pc, #572]	; (80062f0 <menu+0x29b8>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f083 0301 	eor.w	r3, r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00e      	beq.n	80060dc <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 80060be:	4b89      	ldr	r3, [pc, #548]	; (80062e4 <menu+0x29ac>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4b87      	ldr	r3, [pc, #540]	; (80062e4 <menu+0x29ac>)
 80060c8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80060ca:	4b86      	ldr	r3, [pc, #536]	; (80062e4 <menu+0x29ac>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d902      	bls.n	80060d8 <menu+0x27a0>
				asagiValfTmr = 0;
 80060d2:	4b84      	ldr	r3, [pc, #528]	; (80062e4 <menu+0x29ac>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80060d8:	f001 fd16 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80060dc:	2104      	movs	r1, #4
 80060de:	4883      	ldr	r0, [pc, #524]	; (80062ec <menu+0x29b4>)
 80060e0:	f003 f922 	bl	8009328 <HAL_GPIO_ReadPin>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d115      	bne.n	8006116 <menu+0x27de>
 80060ea:	4b81      	ldr	r3, [pc, #516]	; (80062f0 <menu+0x29b8>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	f083 0301 	eor.w	r3, r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00e      	beq.n	8006116 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 80060f8:	4b7a      	ldr	r3, [pc, #488]	; (80062e4 <menu+0x29ac>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	4b78      	ldr	r3, [pc, #480]	; (80062e4 <menu+0x29ac>)
 8006102:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8006104:	4b77      	ldr	r3, [pc, #476]	; (80062e4 <menu+0x29ac>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b06      	cmp	r3, #6
 800610a:	d902      	bls.n	8006112 <menu+0x27da>
		   		asagiValfTmr = 5;
 800610c:	4b75      	ldr	r3, [pc, #468]	; (80062e4 <menu+0x29ac>)
 800610e:	2205      	movs	r2, #5
 8006110:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8006112:	f001 fcf9 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8006116:	2108      	movs	r1, #8
 8006118:	4874      	ldr	r0, [pc, #464]	; (80062ec <menu+0x29b4>)
 800611a:	f003 f905 	bl	8009328 <HAL_GPIO_ReadPin>
 800611e:	4603      	mov	r3, r0
 8006120:	2b01      	cmp	r3, #1
 8006122:	d10d      	bne.n	8006140 <menu+0x2808>
 8006124:	4b72      	ldr	r3, [pc, #456]	; (80062f0 <menu+0x29b8>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f083 0301 	eor.w	r3, r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d006      	beq.n	8006140 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8006132:	4b6c      	ldr	r3, [pc, #432]	; (80062e4 <menu+0x29ac>)
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	4b6f      	ldr	r3, [pc, #444]	; (80062f4 <menu+0x29bc>)
 8006138:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800613a:	4b6f      	ldr	r3, [pc, #444]	; (80062f8 <menu+0x29c0>)
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8006140:	4b6e      	ldr	r3, [pc, #440]	; (80062fc <menu+0x29c4>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b18      	cmp	r3, #24
 8006146:	f040 809d 	bne.w	8006284 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 800614a:	4b6d      	ldr	r3, [pc, #436]	; (8006300 <menu+0x29c8>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d113      	bne.n	800617a <menu+0x2842>
			if(dilSecim == 0) {
 8006152:	4b62      	ldr	r3, [pc, #392]	; (80062dc <menu+0x29a4>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d105      	bne.n	8006166 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 800615a:	4a6a      	ldr	r2, [pc, #424]	; (8006304 <menu+0x29cc>)
 800615c:	2101      	movs	r1, #1
 800615e:	2001      	movs	r0, #1
 8006160:	f7fc fb9c 	bl	800289c <lcd_print>
 8006164:	e020      	b.n	80061a8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8006166:	4b5d      	ldr	r3, [pc, #372]	; (80062dc <menu+0x29a4>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d11c      	bne.n	80061a8 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 800616e:	4a66      	ldr	r2, [pc, #408]	; (8006308 <menu+0x29d0>)
 8006170:	2101      	movs	r1, #1
 8006172:	2001      	movs	r0, #1
 8006174:	f7fc fb92 	bl	800289c <lcd_print>
 8006178:	e016      	b.n	80061a8 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800617a:	4b61      	ldr	r3, [pc, #388]	; (8006300 <menu+0x29c8>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d112      	bne.n	80061a8 <menu+0x2870>
			if(dilSecim == 0) {
 8006182:	4b56      	ldr	r3, [pc, #344]	; (80062dc <menu+0x29a4>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 800618a:	4a60      	ldr	r2, [pc, #384]	; (800630c <menu+0x29d4>)
 800618c:	2101      	movs	r1, #1
 800618e:	2001      	movs	r0, #1
 8006190:	f7fc fb84 	bl	800289c <lcd_print>
 8006194:	e008      	b.n	80061a8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8006196:	4b51      	ldr	r3, [pc, #324]	; (80062dc <menu+0x29a4>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d104      	bne.n	80061a8 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800619e:	4a5c      	ldr	r2, [pc, #368]	; (8006310 <menu+0x29d8>)
 80061a0:	2101      	movs	r1, #1
 80061a2:	2001      	movs	r0, #1
 80061a4:	f7fc fb7a 	bl	800289c <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 80061a8:	4b4c      	ldr	r3, [pc, #304]	; (80062dc <menu+0x29a4>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 80061b0:	4a58      	ldr	r2, [pc, #352]	; (8006314 <menu+0x29dc>)
 80061b2:	2101      	movs	r1, #1
 80061b4:	2002      	movs	r0, #2
 80061b6:	f7fc fb71 	bl	800289c <lcd_print>
 80061ba:	e008      	b.n	80061ce <menu+0x2896>
			} else if(dilSecim == 1) {
 80061bc:	4b47      	ldr	r3, [pc, #284]	; (80062dc <menu+0x29a4>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d104      	bne.n	80061ce <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 80061c4:	4a46      	ldr	r2, [pc, #280]	; (80062e0 <menu+0x29a8>)
 80061c6:	2101      	movs	r1, #1
 80061c8:	2002      	movs	r0, #2
 80061ca:	f7fc fb67 	bl	800289c <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80061ce:	4b52      	ldr	r3, [pc, #328]	; (8006318 <menu+0x29e0>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	220a      	movs	r2, #10
 80061d4:	4944      	ldr	r1, [pc, #272]	; (80062e8 <menu+0x29b0>)
 80061d6:	4618      	mov	r0, r3
 80061d8:	f006 f8d2 	bl	800c380 <itoa>
		lcd_print(2, 16, snum);
 80061dc:	4a42      	ldr	r2, [pc, #264]	; (80062e8 <menu+0x29b0>)
 80061de:	2110      	movs	r1, #16
 80061e0:	2002      	movs	r0, #2
 80061e2:	f7fc fb5b 	bl	800289c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80061e6:	2102      	movs	r1, #2
 80061e8:	4840      	ldr	r0, [pc, #256]	; (80062ec <menu+0x29b4>)
 80061ea:	f003 f89d 	bl	8009328 <HAL_GPIO_ReadPin>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d115      	bne.n	8006220 <menu+0x28e8>
 80061f4:	4b3e      	ldr	r3, [pc, #248]	; (80062f0 <menu+0x29b8>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	f083 0301 	eor.w	r3, r3, #1
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00e      	beq.n	8006220 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8006202:	4b45      	ldr	r3, [pc, #276]	; (8006318 <menu+0x29e0>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	b2da      	uxtb	r2, r3
 800620a:	4b43      	ldr	r3, [pc, #268]	; (8006318 <menu+0x29e0>)
 800620c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800620e:	4b42      	ldr	r3, [pc, #264]	; (8006318 <menu+0x29e0>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b05      	cmp	r3, #5
 8006214:	d902      	bls.n	800621c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8006216:	4b40      	ldr	r3, [pc, #256]	; (8006318 <menu+0x29e0>)
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800621c:	f001 fc74 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8006220:	2104      	movs	r1, #4
 8006222:	4832      	ldr	r0, [pc, #200]	; (80062ec <menu+0x29b4>)
 8006224:	f003 f880 	bl	8009328 <HAL_GPIO_ReadPin>
 8006228:	4603      	mov	r3, r0
 800622a:	2b01      	cmp	r3, #1
 800622c:	d115      	bne.n	800625a <menu+0x2922>
 800622e:	4b30      	ldr	r3, [pc, #192]	; (80062f0 <menu+0x29b8>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f083 0301 	eor.w	r3, r3, #1
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800623c:	4b36      	ldr	r3, [pc, #216]	; (8006318 <menu+0x29e0>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	b2da      	uxtb	r2, r3
 8006244:	4b34      	ldr	r3, [pc, #208]	; (8006318 <menu+0x29e0>)
 8006246:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8006248:	4b33      	ldr	r3, [pc, #204]	; (8006318 <menu+0x29e0>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b06      	cmp	r3, #6
 800624e:	d902      	bls.n	8006256 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8006250:	4b31      	ldr	r3, [pc, #196]	; (8006318 <menu+0x29e0>)
 8006252:	2205      	movs	r2, #5
 8006254:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8006256:	f001 fc57 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800625a:	2108      	movs	r1, #8
 800625c:	4823      	ldr	r0, [pc, #140]	; (80062ec <menu+0x29b4>)
 800625e:	f003 f863 	bl	8009328 <HAL_GPIO_ReadPin>
 8006262:	4603      	mov	r3, r0
 8006264:	2b01      	cmp	r3, #1
 8006266:	d10d      	bne.n	8006284 <menu+0x294c>
 8006268:	4b21      	ldr	r3, [pc, #132]	; (80062f0 <menu+0x29b8>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	f083 0301 	eor.w	r3, r3, #1
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d006      	beq.n	8006284 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8006276:	4b28      	ldr	r3, [pc, #160]	; (8006318 <menu+0x29e0>)
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <menu+0x29bc>)
 800627c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800627e:	4b1e      	ldr	r3, [pc, #120]	; (80062f8 <menu+0x29c0>)
 8006280:	2201      	movs	r2, #1
 8006282:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8006284:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <menu+0x29c4>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b19      	cmp	r3, #25
 800628a:	f040 80c4 	bne.w	8006416 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 800628e:	4b1c      	ldr	r3, [pc, #112]	; (8006300 <menu+0x29c8>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d113      	bne.n	80062be <menu+0x2986>
			if(dilSecim == 0) {
 8006296:	4b11      	ldr	r3, [pc, #68]	; (80062dc <menu+0x29a4>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 800629e:	4a1f      	ldr	r2, [pc, #124]	; (800631c <menu+0x29e4>)
 80062a0:	2101      	movs	r1, #1
 80062a2:	2001      	movs	r0, #1
 80062a4:	f7fc fafa 	bl	800289c <lcd_print>
 80062a8:	e047      	b.n	800633a <menu+0x2a02>
			} else if(dilSecim == 1) {
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <menu+0x29a4>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d143      	bne.n	800633a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 80062b2:	4a1b      	ldr	r2, [pc, #108]	; (8006320 <menu+0x29e8>)
 80062b4:	2101      	movs	r1, #1
 80062b6:	2001      	movs	r0, #1
 80062b8:	f7fc faf0 	bl	800289c <lcd_print>
 80062bc:	e03d      	b.n	800633a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80062be:	4b10      	ldr	r3, [pc, #64]	; (8006300 <menu+0x29c8>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d139      	bne.n	800633a <menu+0x2a02>
			if(dilSecim == 0) {
 80062c6:	4b05      	ldr	r3, [pc, #20]	; (80062dc <menu+0x29a4>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d12c      	bne.n	8006328 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 80062ce:	4a15      	ldr	r2, [pc, #84]	; (8006324 <menu+0x29ec>)
 80062d0:	2101      	movs	r1, #1
 80062d2:	2001      	movs	r0, #1
 80062d4:	f7fc fae2 	bl	800289c <lcd_print>
 80062d8:	e02f      	b.n	800633a <menu+0x2a02>
 80062da:	bf00      	nop
 80062dc:	20000245 	.word	0x20000245
 80062e0:	0800d9e4 	.word	0x0800d9e4
 80062e4:	20000239 	.word	0x20000239
 80062e8:	20000198 	.word	0x20000198
 80062ec:	40010800 	.word	0x40010800
 80062f0:	20000253 	.word	0x20000253
 80062f4:	20000128 	.word	0x20000128
 80062f8:	20000250 	.word	0x20000250
 80062fc:	20000224 	.word	0x20000224
 8006300:	20000233 	.word	0x20000233
 8006304:	0800da1c 	.word	0x0800da1c
 8006308:	0800da30 	.word	0x0800da30
 800630c:	0800da44 	.word	0x0800da44
 8006310:	0800da58 	.word	0x0800da58
 8006314:	0800d670 	.word	0x0800d670
 8006318:	2000023a 	.word	0x2000023a
 800631c:	0800da6c 	.word	0x0800da6c
 8006320:	0800da80 	.word	0x0800da80
 8006324:	0800da94 	.word	0x0800da94
			} else if(dilSecim == 1) {
 8006328:	4b73      	ldr	r3, [pc, #460]	; (80064f8 <menu+0x2bc0>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d104      	bne.n	800633a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8006330:	4a72      	ldr	r2, [pc, #456]	; (80064fc <menu+0x2bc4>)
 8006332:	2101      	movs	r1, #1
 8006334:	2001      	movs	r0, #1
 8006336:	f7fc fab1 	bl	800289c <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 800633a:	4b6f      	ldr	r3, [pc, #444]	; (80064f8 <menu+0x2bc0>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d105      	bne.n	800634e <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8006342:	4a6f      	ldr	r2, [pc, #444]	; (8006500 <menu+0x2bc8>)
 8006344:	2101      	movs	r1, #1
 8006346:	2002      	movs	r0, #2
 8006348:	f7fc faa8 	bl	800289c <lcd_print>
 800634c:	e008      	b.n	8006360 <menu+0x2a28>
			} else if(dilSecim == 1) {
 800634e:	4b6a      	ldr	r3, [pc, #424]	; (80064f8 <menu+0x2bc0>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d104      	bne.n	8006360 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8006356:	4a6b      	ldr	r2, [pc, #428]	; (8006504 <menu+0x2bcc>)
 8006358:	2101      	movs	r1, #1
 800635a:	2002      	movs	r0, #2
 800635c:	f7fc fa9e 	bl	800289c <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8006360:	4b69      	ldr	r3, [pc, #420]	; (8006508 <menu+0x2bd0>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	220a      	movs	r2, #10
 8006366:	4969      	ldr	r1, [pc, #420]	; (800650c <menu+0x2bd4>)
 8006368:	4618      	mov	r0, r3
 800636a:	f006 f809 	bl	800c380 <itoa>
		lcd_print(2,16,snum);
 800636e:	4a67      	ldr	r2, [pc, #412]	; (800650c <menu+0x2bd4>)
 8006370:	2110      	movs	r1, #16
 8006372:	2002      	movs	r0, #2
 8006374:	f7fc fa92 	bl	800289c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8006378:	2102      	movs	r1, #2
 800637a:	4865      	ldr	r0, [pc, #404]	; (8006510 <menu+0x2bd8>)
 800637c:	f002 ffd4 	bl	8009328 <HAL_GPIO_ReadPin>
 8006380:	4603      	mov	r3, r0
 8006382:	2b01      	cmp	r3, #1
 8006384:	d115      	bne.n	80063b2 <menu+0x2a7a>
 8006386:	4b63      	ldr	r3, [pc, #396]	; (8006514 <menu+0x2bdc>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	f083 0301 	eor.w	r3, r3, #1
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00e      	beq.n	80063b2 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8006394:	4b5c      	ldr	r3, [pc, #368]	; (8006508 <menu+0x2bd0>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	4b5a      	ldr	r3, [pc, #360]	; (8006508 <menu+0x2bd0>)
 800639e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80063a0:	4b59      	ldr	r3, [pc, #356]	; (8006508 <menu+0x2bd0>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	d902      	bls.n	80063ae <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 80063a8:	4b57      	ldr	r3, [pc, #348]	; (8006508 <menu+0x2bd0>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80063ae:	f001 fbab 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80063b2:	2104      	movs	r1, #4
 80063b4:	4856      	ldr	r0, [pc, #344]	; (8006510 <menu+0x2bd8>)
 80063b6:	f002 ffb7 	bl	8009328 <HAL_GPIO_ReadPin>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d115      	bne.n	80063ec <menu+0x2ab4>
 80063c0:	4b54      	ldr	r3, [pc, #336]	; (8006514 <menu+0x2bdc>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f083 0301 	eor.w	r3, r3, #1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80063ce:	4b4e      	ldr	r3, [pc, #312]	; (8006508 <menu+0x2bd0>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b4c      	ldr	r3, [pc, #304]	; (8006508 <menu+0x2bd0>)
 80063d8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80063da:	4b4b      	ldr	r3, [pc, #300]	; (8006508 <menu+0x2bd0>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b06      	cmp	r3, #6
 80063e0:	d902      	bls.n	80063e8 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 80063e2:	4b49      	ldr	r3, [pc, #292]	; (8006508 <menu+0x2bd0>)
 80063e4:	2205      	movs	r2, #5
 80063e6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80063e8:	f001 fb8e 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80063ec:	2108      	movs	r1, #8
 80063ee:	4848      	ldr	r0, [pc, #288]	; (8006510 <menu+0x2bd8>)
 80063f0:	f002 ff9a 	bl	8009328 <HAL_GPIO_ReadPin>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d10d      	bne.n	8006416 <menu+0x2ade>
 80063fa:	4b46      	ldr	r3, [pc, #280]	; (8006514 <menu+0x2bdc>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f083 0301 	eor.w	r3, r3, #1
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d006      	beq.n	8006416 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8006408:	4b3f      	ldr	r3, [pc, #252]	; (8006508 <menu+0x2bd0>)
 800640a:	781a      	ldrb	r2, [r3, #0]
 800640c:	4b42      	ldr	r3, [pc, #264]	; (8006518 <menu+0x2be0>)
 800640e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8006410:	4b42      	ldr	r3, [pc, #264]	; (800651c <menu+0x2be4>)
 8006412:	2201      	movs	r2, #1
 8006414:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8006416:	4b42      	ldr	r3, [pc, #264]	; (8006520 <menu+0x2be8>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b1a      	cmp	r3, #26
 800641c:	f040 80ec 	bne.w	80065f8 <menu+0x2cc0>
		if(dilSecim == 0) {
 8006420:	4b35      	ldr	r3, [pc, #212]	; (80064f8 <menu+0x2bc0>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d105      	bne.n	8006434 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8006428:	4a3e      	ldr	r2, [pc, #248]	; (8006524 <menu+0x2bec>)
 800642a:	2101      	movs	r1, #1
 800642c:	2001      	movs	r0, #1
 800642e:	f7fc fa35 	bl	800289c <lcd_print>
 8006432:	e008      	b.n	8006446 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8006434:	4b30      	ldr	r3, [pc, #192]	; (80064f8 <menu+0x2bc0>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d104      	bne.n	8006446 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 800643c:	4a3a      	ldr	r2, [pc, #232]	; (8006528 <menu+0x2bf0>)
 800643e:	2101      	movs	r1, #1
 8006440:	2001      	movs	r0, #1
 8006442:	f7fc fa2b 	bl	800289c <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8006446:	4b39      	ldr	r3, [pc, #228]	; (800652c <menu+0x2bf4>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b63      	cmp	r3, #99	; 0x63
 800644c:	d91e      	bls.n	800648c <menu+0x2b54>
			if(dilSecim == 0) {
 800644e:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <menu+0x2bc0>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d104      	bne.n	8006460 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8006456:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <menu+0x2bc8>)
 8006458:	2101      	movs	r1, #1
 800645a:	2002      	movs	r0, #2
 800645c:	f7fc fa1e 	bl	800289c <lcd_print>
			}
			if(dilSecim == 1) {
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <menu+0x2bc0>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d104      	bne.n	8006472 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8006468:	4a26      	ldr	r2, [pc, #152]	; (8006504 <menu+0x2bcc>)
 800646a:	2101      	movs	r1, #1
 800646c:	2002      	movs	r0, #2
 800646e:	f7fc fa15 	bl	800289c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8006472:	4b2e      	ldr	r3, [pc, #184]	; (800652c <menu+0x2bf4>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	220a      	movs	r2, #10
 8006478:	4924      	ldr	r1, [pc, #144]	; (800650c <menu+0x2bd4>)
 800647a:	4618      	mov	r0, r3
 800647c:	f005 ff80 	bl	800c380 <itoa>
			lcd_print(2,14,snum);
 8006480:	4a22      	ldr	r2, [pc, #136]	; (800650c <menu+0x2bd4>)
 8006482:	210e      	movs	r1, #14
 8006484:	2002      	movs	r0, #2
 8006486:	f7fc fa09 	bl	800289c <lcd_print>
 800648a:	e066      	b.n	800655a <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800648c:	4b27      	ldr	r3, [pc, #156]	; (800652c <menu+0x2bf4>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b09      	cmp	r3, #9
 8006492:	d923      	bls.n	80064dc <menu+0x2ba4>
 8006494:	4b25      	ldr	r3, [pc, #148]	; (800652c <menu+0x2bf4>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b63      	cmp	r3, #99	; 0x63
 800649a:	d81f      	bhi.n	80064dc <menu+0x2ba4>
			if(dilSecim == 0) {
 800649c:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <menu+0x2bc0>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 80064a4:	4a16      	ldr	r2, [pc, #88]	; (8006500 <menu+0x2bc8>)
 80064a6:	2101      	movs	r1, #1
 80064a8:	2002      	movs	r0, #2
 80064aa:	f7fc f9f7 	bl	800289c <lcd_print>
 80064ae:	e008      	b.n	80064c2 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 80064b0:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <menu+0x2bc0>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d104      	bne.n	80064c2 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 80064b8:	4a12      	ldr	r2, [pc, #72]	; (8006504 <menu+0x2bcc>)
 80064ba:	2101      	movs	r1, #1
 80064bc:	2002      	movs	r0, #2
 80064be:	f7fc f9ed 	bl	800289c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80064c2:	4b1a      	ldr	r3, [pc, #104]	; (800652c <menu+0x2bf4>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	220a      	movs	r2, #10
 80064c8:	4910      	ldr	r1, [pc, #64]	; (800650c <menu+0x2bd4>)
 80064ca:	4618      	mov	r0, r3
 80064cc:	f005 ff58 	bl	800c380 <itoa>
			lcd_print(2, 15, snum);
 80064d0:	4a0e      	ldr	r2, [pc, #56]	; (800650c <menu+0x2bd4>)
 80064d2:	210f      	movs	r1, #15
 80064d4:	2002      	movs	r0, #2
 80064d6:	f7fc f9e1 	bl	800289c <lcd_print>
 80064da:	e03e      	b.n	800655a <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <menu+0x2bf4>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b09      	cmp	r3, #9
 80064e2:	d83a      	bhi.n	800655a <menu+0x2c22>
			if(dilSecim == 0) {
 80064e4:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <menu+0x2bc0>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d121      	bne.n	8006530 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 80064ec:	4a04      	ldr	r2, [pc, #16]	; (8006500 <menu+0x2bc8>)
 80064ee:	2101      	movs	r1, #1
 80064f0:	2002      	movs	r0, #2
 80064f2:	f7fc f9d3 	bl	800289c <lcd_print>
 80064f6:	e024      	b.n	8006542 <menu+0x2c0a>
 80064f8:	20000245 	.word	0x20000245
 80064fc:	0800daa8 	.word	0x0800daa8
 8006500:	0800d670 	.word	0x0800d670
 8006504:	0800d9e4 	.word	0x0800d9e4
 8006508:	2000023b 	.word	0x2000023b
 800650c:	20000198 	.word	0x20000198
 8006510:	40010800 	.word	0x40010800
 8006514:	20000253 	.word	0x20000253
 8006518:	20000128 	.word	0x20000128
 800651c:	20000250 	.word	0x20000250
 8006520:	20000224 	.word	0x20000224
 8006524:	0800dabc 	.word	0x0800dabc
 8006528:	0800dad0 	.word	0x0800dad0
 800652c:	2000023c 	.word	0x2000023c
			} else if(dilSecim == 1) {
 8006530:	4b8f      	ldr	r3, [pc, #572]	; (8006770 <menu+0x2e38>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d104      	bne.n	8006542 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8006538:	4a8e      	ldr	r2, [pc, #568]	; (8006774 <menu+0x2e3c>)
 800653a:	2101      	movs	r1, #1
 800653c:	2002      	movs	r0, #2
 800653e:	f7fc f9ad 	bl	800289c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8006542:	4b8d      	ldr	r3, [pc, #564]	; (8006778 <menu+0x2e40>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	220a      	movs	r2, #10
 8006548:	498c      	ldr	r1, [pc, #560]	; (800677c <menu+0x2e44>)
 800654a:	4618      	mov	r0, r3
 800654c:	f005 ff18 	bl	800c380 <itoa>
			lcd_print(2, 16, snum);
 8006550:	4a8a      	ldr	r2, [pc, #552]	; (800677c <menu+0x2e44>)
 8006552:	2110      	movs	r1, #16
 8006554:	2002      	movs	r0, #2
 8006556:	f7fc f9a1 	bl	800289c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800655a:	2102      	movs	r1, #2
 800655c:	4888      	ldr	r0, [pc, #544]	; (8006780 <menu+0x2e48>)
 800655e:	f002 fee3 	bl	8009328 <HAL_GPIO_ReadPin>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d115      	bne.n	8006594 <menu+0x2c5c>
 8006568:	4b86      	ldr	r3, [pc, #536]	; (8006784 <menu+0x2e4c>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f083 0301 	eor.w	r3, r3, #1
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00e      	beq.n	8006594 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8006576:	4b80      	ldr	r3, [pc, #512]	; (8006778 <menu+0x2e40>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	3301      	adds	r3, #1
 800657c:	b2da      	uxtb	r2, r3
 800657e:	4b7e      	ldr	r3, [pc, #504]	; (8006778 <menu+0x2e40>)
 8006580:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8006582:	4b7d      	ldr	r3, [pc, #500]	; (8006778 <menu+0x2e40>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2bb4      	cmp	r3, #180	; 0xb4
 8006588:	d902      	bls.n	8006590 <menu+0x2c58>
				makineCalismaTmr = 0;
 800658a:	4b7b      	ldr	r3, [pc, #492]	; (8006778 <menu+0x2e40>)
 800658c:	2200      	movs	r2, #0
 800658e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8006590:	f001 faba 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8006594:	2104      	movs	r1, #4
 8006596:	487a      	ldr	r0, [pc, #488]	; (8006780 <menu+0x2e48>)
 8006598:	f002 fec6 	bl	8009328 <HAL_GPIO_ReadPin>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d115      	bne.n	80065ce <menu+0x2c96>
 80065a2:	4b78      	ldr	r3, [pc, #480]	; (8006784 <menu+0x2e4c>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	f083 0301 	eor.w	r3, r3, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00e      	beq.n	80065ce <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80065b0:	4b71      	ldr	r3, [pc, #452]	; (8006778 <menu+0x2e40>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	4b6f      	ldr	r3, [pc, #444]	; (8006778 <menu+0x2e40>)
 80065ba:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80065bc:	4b6e      	ldr	r3, [pc, #440]	; (8006778 <menu+0x2e40>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2bb5      	cmp	r3, #181	; 0xb5
 80065c2:	d902      	bls.n	80065ca <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80065c4:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <menu+0x2e40>)
 80065c6:	22b4      	movs	r2, #180	; 0xb4
 80065c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80065ca:	f001 fa9d 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80065ce:	2108      	movs	r1, #8
 80065d0:	486b      	ldr	r0, [pc, #428]	; (8006780 <menu+0x2e48>)
 80065d2:	f002 fea9 	bl	8009328 <HAL_GPIO_ReadPin>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d10d      	bne.n	80065f8 <menu+0x2cc0>
 80065dc:	4b69      	ldr	r3, [pc, #420]	; (8006784 <menu+0x2e4c>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f083 0301 	eor.w	r3, r3, #1
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d006      	beq.n	80065f8 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 80065ea:	4b63      	ldr	r3, [pc, #396]	; (8006778 <menu+0x2e40>)
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	4b66      	ldr	r3, [pc, #408]	; (8006788 <menu+0x2e50>)
 80065f0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80065f2:	4b66      	ldr	r3, [pc, #408]	; (800678c <menu+0x2e54>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80065f8:	4b65      	ldr	r3, [pc, #404]	; (8006790 <menu+0x2e58>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b1b      	cmp	r3, #27
 80065fe:	f040 8083 	bne.w	8006708 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8006602:	4a64      	ldr	r2, [pc, #400]	; (8006794 <menu+0x2e5c>)
 8006604:	2101      	movs	r1, #1
 8006606:	2001      	movs	r0, #1
 8006608:	f7fc f948 	bl	800289c <lcd_print>

		if(buzzer == 0) {
 800660c:	4b62      	ldr	r3, [pc, #392]	; (8006798 <menu+0x2e60>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d113      	bne.n	800663c <menu+0x2d04>
			if(dilSecim == 0) {
 8006614:	4b56      	ldr	r3, [pc, #344]	; (8006770 <menu+0x2e38>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 800661c:	4a5f      	ldr	r2, [pc, #380]	; (800679c <menu+0x2e64>)
 800661e:	2101      	movs	r1, #1
 8006620:	2002      	movs	r0, #2
 8006622:	f7fc f93b 	bl	800289c <lcd_print>
 8006626:	e020      	b.n	800666a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8006628:	4b51      	ldr	r3, [pc, #324]	; (8006770 <menu+0x2e38>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d11c      	bne.n	800666a <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8006630:	4a5b      	ldr	r2, [pc, #364]	; (80067a0 <menu+0x2e68>)
 8006632:	2101      	movs	r1, #1
 8006634:	2002      	movs	r0, #2
 8006636:	f7fc f931 	bl	800289c <lcd_print>
 800663a:	e016      	b.n	800666a <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 800663c:	4b56      	ldr	r3, [pc, #344]	; (8006798 <menu+0x2e60>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d112      	bne.n	800666a <menu+0x2d32>
			if(dilSecim == 0) {
 8006644:	4b4a      	ldr	r3, [pc, #296]	; (8006770 <menu+0x2e38>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 800664c:	4a55      	ldr	r2, [pc, #340]	; (80067a4 <menu+0x2e6c>)
 800664e:	2101      	movs	r1, #1
 8006650:	2002      	movs	r0, #2
 8006652:	f7fc f923 	bl	800289c <lcd_print>
 8006656:	e008      	b.n	800666a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8006658:	4b45      	ldr	r3, [pc, #276]	; (8006770 <menu+0x2e38>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d104      	bne.n	800666a <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8006660:	4a51      	ldr	r2, [pc, #324]	; (80067a8 <menu+0x2e70>)
 8006662:	2101      	movs	r1, #1
 8006664:	2002      	movs	r0, #2
 8006666:	f7fc f919 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800666a:	2102      	movs	r1, #2
 800666c:	4844      	ldr	r0, [pc, #272]	; (8006780 <menu+0x2e48>)
 800666e:	f002 fe5b 	bl	8009328 <HAL_GPIO_ReadPin>
 8006672:	4603      	mov	r3, r0
 8006674:	2b01      	cmp	r3, #1
 8006676:	d115      	bne.n	80066a4 <menu+0x2d6c>
 8006678:	4b42      	ldr	r3, [pc, #264]	; (8006784 <menu+0x2e4c>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	f083 0301 	eor.w	r3, r3, #1
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00e      	beq.n	80066a4 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8006686:	4b44      	ldr	r3, [pc, #272]	; (8006798 <menu+0x2e60>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	3301      	adds	r3, #1
 800668c:	b2da      	uxtb	r2, r3
 800668e:	4b42      	ldr	r3, [pc, #264]	; (8006798 <menu+0x2e60>)
 8006690:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8006692:	4b41      	ldr	r3, [pc, #260]	; (8006798 <menu+0x2e60>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d902      	bls.n	80066a0 <menu+0x2d68>
				buzzer = 0;
 800669a:	4b3f      	ldr	r3, [pc, #252]	; (8006798 <menu+0x2e60>)
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80066a0:	f001 fa32 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80066a4:	2104      	movs	r1, #4
 80066a6:	4836      	ldr	r0, [pc, #216]	; (8006780 <menu+0x2e48>)
 80066a8:	f002 fe3e 	bl	8009328 <HAL_GPIO_ReadPin>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d115      	bne.n	80066de <menu+0x2da6>
 80066b2:	4b34      	ldr	r3, [pc, #208]	; (8006784 <menu+0x2e4c>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f083 0301 	eor.w	r3, r3, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00e      	beq.n	80066de <menu+0x2da6>
			buzzer = buzzer - 1;
 80066c0:	4b35      	ldr	r3, [pc, #212]	; (8006798 <menu+0x2e60>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	4b33      	ldr	r3, [pc, #204]	; (8006798 <menu+0x2e60>)
 80066ca:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80066cc:	4b32      	ldr	r3, [pc, #200]	; (8006798 <menu+0x2e60>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <menu+0x2da2>
		   		buzzer = 1;
 80066d4:	4b30      	ldr	r3, [pc, #192]	; (8006798 <menu+0x2e60>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80066da:	f001 fa15 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80066de:	2108      	movs	r1, #8
 80066e0:	4827      	ldr	r0, [pc, #156]	; (8006780 <menu+0x2e48>)
 80066e2:	f002 fe21 	bl	8009328 <HAL_GPIO_ReadPin>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d10d      	bne.n	8006708 <menu+0x2dd0>
 80066ec:	4b25      	ldr	r3, [pc, #148]	; (8006784 <menu+0x2e4c>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f083 0301 	eor.w	r3, r3, #1
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d006      	beq.n	8006708 <menu+0x2dd0>
			eepromData[25] = buzzer;
 80066fa:	4b27      	ldr	r3, [pc, #156]	; (8006798 <menu+0x2e60>)
 80066fc:	781a      	ldrb	r2, [r3, #0]
 80066fe:	4b22      	ldr	r3, [pc, #136]	; (8006788 <menu+0x2e50>)
 8006700:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8006702:	4b22      	ldr	r3, [pc, #136]	; (800678c <menu+0x2e54>)
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8006708:	4b21      	ldr	r3, [pc, #132]	; (8006790 <menu+0x2e58>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b1c      	cmp	r3, #28
 800670e:	f040 80ab 	bne.w	8006868 <menu+0x2f30>
		calismaSayModu = 0;
 8006712:	4b26      	ldr	r3, [pc, #152]	; (80067ac <menu+0x2e74>)
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8006718:	4a25      	ldr	r2, [pc, #148]	; (80067b0 <menu+0x2e78>)
 800671a:	2101      	movs	r1, #1
 800671c:	2001      	movs	r0, #1
 800671e:	f7fc f8bd 	bl	800289c <lcd_print>

		if(demoMode == 0) {
 8006722:	4b24      	ldr	r3, [pc, #144]	; (80067b4 <menu+0x2e7c>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d113      	bne.n	8006752 <menu+0x2e1a>
			if(dilSecim == 0) {
 800672a:	4b11      	ldr	r3, [pc, #68]	; (8006770 <menu+0x2e38>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d105      	bne.n	800673e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8006732:	4a1a      	ldr	r2, [pc, #104]	; (800679c <menu+0x2e64>)
 8006734:	2101      	movs	r1, #1
 8006736:	2002      	movs	r0, #2
 8006738:	f7fc f8b0 	bl	800289c <lcd_print>
 800673c:	e045      	b.n	80067ca <menu+0x2e92>
			} else if(dilSecim == 1) {
 800673e:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <menu+0x2e38>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d141      	bne.n	80067ca <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8006746:	4a16      	ldr	r2, [pc, #88]	; (80067a0 <menu+0x2e68>)
 8006748:	2101      	movs	r1, #1
 800674a:	2002      	movs	r0, #2
 800674c:	f7fc f8a6 	bl	800289c <lcd_print>
 8006750:	e03b      	b.n	80067ca <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8006752:	4b18      	ldr	r3, [pc, #96]	; (80067b4 <menu+0x2e7c>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d137      	bne.n	80067ca <menu+0x2e92>
			if(dilSecim == 0){
 800675a:	4b05      	ldr	r3, [pc, #20]	; (8006770 <menu+0x2e38>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d12a      	bne.n	80067b8 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8006762:	4a10      	ldr	r2, [pc, #64]	; (80067a4 <menu+0x2e6c>)
 8006764:	2101      	movs	r1, #1
 8006766:	2002      	movs	r0, #2
 8006768:	f7fc f898 	bl	800289c <lcd_print>
 800676c:	e02d      	b.n	80067ca <menu+0x2e92>
 800676e:	bf00      	nop
 8006770:	20000245 	.word	0x20000245
 8006774:	0800d9e4 	.word	0x0800d9e4
 8006778:	2000023c 	.word	0x2000023c
 800677c:	20000198 	.word	0x20000198
 8006780:	40010800 	.word	0x40010800
 8006784:	20000253 	.word	0x20000253
 8006788:	20000128 	.word	0x20000128
 800678c:	20000250 	.word	0x20000250
 8006790:	20000224 	.word	0x20000224
 8006794:	0800dae4 	.word	0x0800dae4
 8006798:	20000240 	.word	0x20000240
 800679c:	0800d40c 	.word	0x0800d40c
 80067a0:	0800d420 	.word	0x0800d420
 80067a4:	0800d46c 	.word	0x0800d46c
 80067a8:	0800d480 	.word	0x0800d480
 80067ac:	20000244 	.word	0x20000244
 80067b0:	0800daf8 	.word	0x0800daf8
 80067b4:	20000242 	.word	0x20000242
			} else if(dilSecim == 1) {
 80067b8:	4b71      	ldr	r3, [pc, #452]	; (8006980 <menu+0x3048>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d104      	bne.n	80067ca <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80067c0:	4a70      	ldr	r2, [pc, #448]	; (8006984 <menu+0x304c>)
 80067c2:	2101      	movs	r1, #1
 80067c4:	2002      	movs	r0, #2
 80067c6:	f7fc f869 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80067ca:	2102      	movs	r1, #2
 80067cc:	486e      	ldr	r0, [pc, #440]	; (8006988 <menu+0x3050>)
 80067ce:	f002 fdab 	bl	8009328 <HAL_GPIO_ReadPin>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d115      	bne.n	8006804 <menu+0x2ecc>
 80067d8:	4b6c      	ldr	r3, [pc, #432]	; (800698c <menu+0x3054>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	f083 0301 	eor.w	r3, r3, #1
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00e      	beq.n	8006804 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80067e6:	4b6a      	ldr	r3, [pc, #424]	; (8006990 <menu+0x3058>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	4b68      	ldr	r3, [pc, #416]	; (8006990 <menu+0x3058>)
 80067f0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80067f2:	4b67      	ldr	r3, [pc, #412]	; (8006990 <menu+0x3058>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d902      	bls.n	8006800 <menu+0x2ec8>
				demoMode = 0;
 80067fa:	4b65      	ldr	r3, [pc, #404]	; (8006990 <menu+0x3058>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8006800:	f001 f982 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8006804:	2104      	movs	r1, #4
 8006806:	4860      	ldr	r0, [pc, #384]	; (8006988 <menu+0x3050>)
 8006808:	f002 fd8e 	bl	8009328 <HAL_GPIO_ReadPin>
 800680c:	4603      	mov	r3, r0
 800680e:	2b01      	cmp	r3, #1
 8006810:	d115      	bne.n	800683e <menu+0x2f06>
 8006812:	4b5e      	ldr	r3, [pc, #376]	; (800698c <menu+0x3054>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	f083 0301 	eor.w	r3, r3, #1
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00e      	beq.n	800683e <menu+0x2f06>
			demoMode = demoMode - 1;
 8006820:	4b5b      	ldr	r3, [pc, #364]	; (8006990 <menu+0x3058>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	3b01      	subs	r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	4b59      	ldr	r3, [pc, #356]	; (8006990 <menu+0x3058>)
 800682a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800682c:	4b58      	ldr	r3, [pc, #352]	; (8006990 <menu+0x3058>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <menu+0x2f02>
		   		demoMode = 1;
 8006834:	4b56      	ldr	r3, [pc, #344]	; (8006990 <menu+0x3058>)
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800683a:	f001 f965 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800683e:	2108      	movs	r1, #8
 8006840:	4851      	ldr	r0, [pc, #324]	; (8006988 <menu+0x3050>)
 8006842:	f002 fd71 	bl	8009328 <HAL_GPIO_ReadPin>
 8006846:	4603      	mov	r3, r0
 8006848:	2b01      	cmp	r3, #1
 800684a:	d10d      	bne.n	8006868 <menu+0x2f30>
 800684c:	4b4f      	ldr	r3, [pc, #316]	; (800698c <menu+0x3054>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f083 0301 	eor.w	r3, r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <menu+0x2f30>
			eepromData[26] = demoMode;
 800685a:	4b4d      	ldr	r3, [pc, #308]	; (8006990 <menu+0x3058>)
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	4b4d      	ldr	r3, [pc, #308]	; (8006994 <menu+0x305c>)
 8006860:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8006862:	4b4d      	ldr	r3, [pc, #308]	; (8006998 <menu+0x3060>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8006868:	4b4c      	ldr	r3, [pc, #304]	; (800699c <menu+0x3064>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b1d      	cmp	r3, #29
 800686e:	f040 8132 	bne.w	8006ad6 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8006872:	4b4b      	ldr	r3, [pc, #300]	; (80069a0 <menu+0x3068>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d113      	bne.n	80068a2 <menu+0x2f6a>
 800687a:	4b4a      	ldr	r3, [pc, #296]	; (80069a4 <menu+0x306c>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10f      	bne.n	80068a2 <menu+0x2f6a>
 8006882:	4b49      	ldr	r3, [pc, #292]	; (80069a8 <menu+0x3070>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <menu+0x2f6a>
 800688a:	4b48      	ldr	r3, [pc, #288]	; (80069ac <menu+0x3074>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <menu+0x2f6a>
 8006892:	4b47      	ldr	r3, [pc, #284]	; (80069b0 <menu+0x3078>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800689a:	4b46      	ldr	r3, [pc, #280]	; (80069b4 <menu+0x307c>)
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	e002      	b.n	80068a8 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80068a2:	4b44      	ldr	r3, [pc, #272]	; (80069b4 <menu+0x307c>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80068a8:	4b43      	ldr	r3, [pc, #268]	; (80069b8 <menu+0x3080>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d154      	bne.n	800695a <menu+0x3022>
			if(dilSecim == 0) {
 80068b0:	4b33      	ldr	r3, [pc, #204]	; (8006980 <menu+0x3048>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d105      	bne.n	80068c4 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80068b8:	4a40      	ldr	r2, [pc, #256]	; (80069bc <menu+0x3084>)
 80068ba:	2101      	movs	r1, #1
 80068bc:	2001      	movs	r0, #1
 80068be:	f7fb ffed 	bl	800289c <lcd_print>
 80068c2:	e008      	b.n	80068d6 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80068c4:	4b2e      	ldr	r3, [pc, #184]	; (8006980 <menu+0x3048>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d104      	bne.n	80068d6 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80068cc:	4a3c      	ldr	r2, [pc, #240]	; (80069c0 <menu+0x3088>)
 80068ce:	2101      	movs	r1, #1
 80068d0:	2001      	movs	r0, #1
 80068d2:	f7fb ffe3 	bl	800289c <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80068d6:	4b36      	ldr	r3, [pc, #216]	; (80069b0 <menu+0x3078>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	220a      	movs	r2, #10
 80068dc:	4939      	ldr	r1, [pc, #228]	; (80069c4 <menu+0x308c>)
 80068de:	4618      	mov	r0, r3
 80068e0:	f005 fd4e 	bl	800c380 <itoa>
			lcd_print(2, 12, snum);
 80068e4:	4a37      	ldr	r2, [pc, #220]	; (80069c4 <menu+0x308c>)
 80068e6:	210c      	movs	r1, #12
 80068e8:	2002      	movs	r0, #2
 80068ea:	f7fb ffd7 	bl	800289c <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80068ee:	4b2f      	ldr	r3, [pc, #188]	; (80069ac <menu+0x3074>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	220a      	movs	r2, #10
 80068f4:	4933      	ldr	r1, [pc, #204]	; (80069c4 <menu+0x308c>)
 80068f6:	4618      	mov	r0, r3
 80068f8:	f005 fd42 	bl	800c380 <itoa>
			lcd_print(2, 13, snum);
 80068fc:	4a31      	ldr	r2, [pc, #196]	; (80069c4 <menu+0x308c>)
 80068fe:	210d      	movs	r1, #13
 8006900:	2002      	movs	r0, #2
 8006902:	f7fb ffcb 	bl	800289c <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8006906:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <menu+0x3070>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	220a      	movs	r2, #10
 800690c:	492d      	ldr	r1, [pc, #180]	; (80069c4 <menu+0x308c>)
 800690e:	4618      	mov	r0, r3
 8006910:	f005 fd36 	bl	800c380 <itoa>
			lcd_print(2, 14, snum);
 8006914:	4a2b      	ldr	r2, [pc, #172]	; (80069c4 <menu+0x308c>)
 8006916:	210e      	movs	r1, #14
 8006918:	2002      	movs	r0, #2
 800691a:	f7fb ffbf 	bl	800289c <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800691e:	4b21      	ldr	r3, [pc, #132]	; (80069a4 <menu+0x306c>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	220a      	movs	r2, #10
 8006924:	4927      	ldr	r1, [pc, #156]	; (80069c4 <menu+0x308c>)
 8006926:	4618      	mov	r0, r3
 8006928:	f005 fd2a 	bl	800c380 <itoa>
			lcd_print(2, 15, snum);
 800692c:	4a25      	ldr	r2, [pc, #148]	; (80069c4 <menu+0x308c>)
 800692e:	210f      	movs	r1, #15
 8006930:	2002      	movs	r0, #2
 8006932:	f7fb ffb3 	bl	800289c <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8006936:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <menu+0x3068>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	220a      	movs	r2, #10
 800693c:	4921      	ldr	r1, [pc, #132]	; (80069c4 <menu+0x308c>)
 800693e:	4618      	mov	r0, r3
 8006940:	f005 fd1e 	bl	800c380 <itoa>
			lcd_print(2, 16, snum);
 8006944:	4a1f      	ldr	r2, [pc, #124]	; (80069c4 <menu+0x308c>)
 8006946:	2110      	movs	r1, #16
 8006948:	2002      	movs	r0, #2
 800694a:	f7fb ffa7 	bl	800289c <lcd_print>

			lcd_print(2, 1, "           ");
 800694e:	4a1e      	ldr	r2, [pc, #120]	; (80069c8 <menu+0x3090>)
 8006950:	2101      	movs	r1, #1
 8006952:	2002      	movs	r0, #2
 8006954:	f7fb ffa2 	bl	800289c <lcd_print>
 8006958:	e048      	b.n	80069ec <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800695a:	4b17      	ldr	r3, [pc, #92]	; (80069b8 <menu+0x3080>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d144      	bne.n	80069ec <menu+0x30b4>
			if(dilSecim == 0) {
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <menu+0x3048>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d132      	bne.n	80069d0 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800696a:	4a14      	ldr	r2, [pc, #80]	; (80069bc <menu+0x3084>)
 800696c:	2101      	movs	r1, #1
 800696e:	2001      	movs	r0, #1
 8006970:	f7fb ff94 	bl	800289c <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <menu+0x3094>)
 8006976:	2101      	movs	r1, #1
 8006978:	2002      	movs	r0, #2
 800697a:	f7fb ff8f 	bl	800289c <lcd_print>
 800697e:	e035      	b.n	80069ec <menu+0x30b4>
 8006980:	20000245 	.word	0x20000245
 8006984:	0800d480 	.word	0x0800d480
 8006988:	40010800 	.word	0x40010800
 800698c:	20000253 	.word	0x20000253
 8006990:	20000242 	.word	0x20000242
 8006994:	20000128 	.word	0x20000128
 8006998:	20000250 	.word	0x20000250
 800699c:	20000224 	.word	0x20000224
 80069a0:	20000221 	.word	0x20000221
 80069a4:	20000222 	.word	0x20000222
 80069a8:	20000008 	.word	0x20000008
 80069ac:	20000009 	.word	0x20000009
 80069b0:	20000223 	.word	0x20000223
 80069b4:	20000265 	.word	0x20000265
 80069b8:	20000244 	.word	0x20000244
 80069bc:	0800db08 	.word	0x0800db08
 80069c0:	0800db1c 	.word	0x0800db1c
 80069c4:	20000198 	.word	0x20000198
 80069c8:	0800db30 	.word	0x0800db30
 80069cc:	0800db3c 	.word	0x0800db3c
			} else if(dilSecim == 1) {
 80069d0:	4b94      	ldr	r3, [pc, #592]	; (8006c24 <menu+0x32ec>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d109      	bne.n	80069ec <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80069d8:	4a93      	ldr	r2, [pc, #588]	; (8006c28 <menu+0x32f0>)
 80069da:	2101      	movs	r1, #1
 80069dc:	2001      	movs	r0, #1
 80069de:	f7fb ff5d 	bl	800289c <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80069e2:	4a92      	ldr	r2, [pc, #584]	; (8006c2c <menu+0x32f4>)
 80069e4:	2101      	movs	r1, #1
 80069e6:	2002      	movs	r0, #2
 80069e8:	f7fb ff58 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80069ec:	2102      	movs	r1, #2
 80069ee:	4890      	ldr	r0, [pc, #576]	; (8006c30 <menu+0x32f8>)
 80069f0:	f002 fc9a 	bl	8009328 <HAL_GPIO_ReadPin>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d119      	bne.n	8006a2e <menu+0x30f6>
 80069fa:	4b8e      	ldr	r3, [pc, #568]	; (8006c34 <menu+0x32fc>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	f083 0301 	eor.w	r3, r3, #1
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d012      	beq.n	8006a2e <menu+0x30f6>
 8006a08:	4b8b      	ldr	r3, [pc, #556]	; (8006c38 <menu+0x3300>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00e      	beq.n	8006a2e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8006a10:	4b8a      	ldr	r3, [pc, #552]	; (8006c3c <menu+0x3304>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	4b88      	ldr	r3, [pc, #544]	; (8006c3c <menu+0x3304>)
 8006a1a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8006a1c:	4b87      	ldr	r3, [pc, #540]	; (8006c3c <menu+0x3304>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d902      	bls.n	8006a2a <menu+0x30f2>
				calismaSayModu = 0;
 8006a24:	4b85      	ldr	r3, [pc, #532]	; (8006c3c <menu+0x3304>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8006a2a:	f001 f86d 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8006a2e:	2104      	movs	r1, #4
 8006a30:	487f      	ldr	r0, [pc, #508]	; (8006c30 <menu+0x32f8>)
 8006a32:	f002 fc79 	bl	8009328 <HAL_GPIO_ReadPin>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d119      	bne.n	8006a70 <menu+0x3138>
 8006a3c:	4b7d      	ldr	r3, [pc, #500]	; (8006c34 <menu+0x32fc>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f083 0301 	eor.w	r3, r3, #1
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d012      	beq.n	8006a70 <menu+0x3138>
 8006a4a:	4b7b      	ldr	r3, [pc, #492]	; (8006c38 <menu+0x3300>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00e      	beq.n	8006a70 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8006a52:	4b7a      	ldr	r3, [pc, #488]	; (8006c3c <menu+0x3304>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	4b78      	ldr	r3, [pc, #480]	; (8006c3c <menu+0x3304>)
 8006a5c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8006a5e:	4b77      	ldr	r3, [pc, #476]	; (8006c3c <menu+0x3304>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <menu+0x3134>
		   		calismaSayModu = 1;
 8006a66:	4b75      	ldr	r3, [pc, #468]	; (8006c3c <menu+0x3304>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8006a6c:	f001 f84c 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8006a70:	2108      	movs	r1, #8
 8006a72:	486f      	ldr	r0, [pc, #444]	; (8006c30 <menu+0x32f8>)
 8006a74:	f002 fc58 	bl	8009328 <HAL_GPIO_ReadPin>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d12b      	bne.n	8006ad6 <menu+0x319e>
 8006a7e:	4b6d      	ldr	r3, [pc, #436]	; (8006c34 <menu+0x32fc>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	f083 0301 	eor.w	r3, r3, #1
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d024      	beq.n	8006ad6 <menu+0x319e>
			eepromData[32] = 0;
 8006a8c:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <menu+0x3308>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8006a94:	4b6a      	ldr	r3, [pc, #424]	; (8006c40 <menu+0x3308>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8006a9a:	4b69      	ldr	r3, [pc, #420]	; (8006c40 <menu+0x3308>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8006aa0:	4b67      	ldr	r3, [pc, #412]	; (8006c40 <menu+0x3308>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8006aa6:	4b66      	ldr	r3, [pc, #408]	; (8006c40 <menu+0x3308>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8006aac:	4b65      	ldr	r3, [pc, #404]	; (8006c44 <menu+0x330c>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8006ab2:	4b65      	ldr	r3, [pc, #404]	; (8006c48 <menu+0x3310>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8006ab8:	4b64      	ldr	r3, [pc, #400]	; (8006c4c <menu+0x3314>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8006abe:	4b64      	ldr	r3, [pc, #400]	; (8006c50 <menu+0x3318>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8006ac4:	4b63      	ldr	r3, [pc, #396]	; (8006c54 <menu+0x331c>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8006aca:	4b5c      	ldr	r3, [pc, #368]	; (8006c3c <menu+0x3304>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8006ad0:	4b61      	ldr	r3, [pc, #388]	; (8006c58 <menu+0x3320>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8006ad6:	4b61      	ldr	r3, [pc, #388]	; (8006c5c <menu+0x3324>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b1e      	cmp	r3, #30
 8006adc:	d16f      	bne.n	8006bbe <menu+0x3286>
		calismaSayModu = 0;
 8006ade:	4b57      	ldr	r3, [pc, #348]	; (8006c3c <menu+0x3304>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8006ae4:	4b4f      	ldr	r3, [pc, #316]	; (8006c24 <menu+0x32ec>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8006aec:	4a5c      	ldr	r2, [pc, #368]	; (8006c60 <menu+0x3328>)
 8006aee:	2101      	movs	r1, #1
 8006af0:	2001      	movs	r0, #1
 8006af2:	f7fb fed3 	bl	800289c <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8006af6:	4a5b      	ldr	r2, [pc, #364]	; (8006c64 <menu+0x332c>)
 8006af8:	2101      	movs	r1, #1
 8006afa:	2002      	movs	r0, #2
 8006afc:	f7fb fece 	bl	800289c <lcd_print>
 8006b00:	e00d      	b.n	8006b1e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8006b02:	4b48      	ldr	r3, [pc, #288]	; (8006c24 <menu+0x32ec>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d109      	bne.n	8006b1e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8006b0a:	4a57      	ldr	r2, [pc, #348]	; (8006c68 <menu+0x3330>)
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	2001      	movs	r0, #1
 8006b10:	f7fb fec4 	bl	800289c <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8006b14:	4a55      	ldr	r2, [pc, #340]	; (8006c6c <menu+0x3334>)
 8006b16:	2101      	movs	r1, #1
 8006b18:	2002      	movs	r0, #2
 8006b1a:	f7fb febf 	bl	800289c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8006b1e:	2102      	movs	r1, #2
 8006b20:	4843      	ldr	r0, [pc, #268]	; (8006c30 <menu+0x32f8>)
 8006b22:	f002 fc01 	bl	8009328 <HAL_GPIO_ReadPin>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d115      	bne.n	8006b58 <menu+0x3220>
 8006b2c:	4b41      	ldr	r3, [pc, #260]	; (8006c34 <menu+0x32fc>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f083 0301 	eor.w	r3, r3, #1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8006b3a:	4b3a      	ldr	r3, [pc, #232]	; (8006c24 <menu+0x32ec>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	4b38      	ldr	r3, [pc, #224]	; (8006c24 <menu+0x32ec>)
 8006b44:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8006b46:	4b37      	ldr	r3, [pc, #220]	; (8006c24 <menu+0x32ec>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d902      	bls.n	8006b54 <menu+0x321c>
				dilSecim = 0;
 8006b4e:	4b35      	ldr	r3, [pc, #212]	; (8006c24 <menu+0x32ec>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8006b54:	f000 ffd8 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8006b58:	2104      	movs	r1, #4
 8006b5a:	4835      	ldr	r0, [pc, #212]	; (8006c30 <menu+0x32f8>)
 8006b5c:	f002 fbe4 	bl	8009328 <HAL_GPIO_ReadPin>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d115      	bne.n	8006b92 <menu+0x325a>
 8006b66:	4b33      	ldr	r3, [pc, #204]	; (8006c34 <menu+0x32fc>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	f083 0301 	eor.w	r3, r3, #1
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00e      	beq.n	8006b92 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8006b74:	4b2b      	ldr	r3, [pc, #172]	; (8006c24 <menu+0x32ec>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	4b29      	ldr	r3, [pc, #164]	; (8006c24 <menu+0x32ec>)
 8006b7e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8006b80:	4b28      	ldr	r3, [pc, #160]	; (8006c24 <menu+0x32ec>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <menu+0x3256>
		   		dilSecim = 1;
 8006b88:	4b26      	ldr	r3, [pc, #152]	; (8006c24 <menu+0x32ec>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8006b8e:	f000 ffbb 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8006b92:	2108      	movs	r1, #8
 8006b94:	4826      	ldr	r0, [pc, #152]	; (8006c30 <menu+0x32f8>)
 8006b96:	f002 fbc7 	bl	8009328 <HAL_GPIO_ReadPin>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d10e      	bne.n	8006bbe <menu+0x3286>
 8006ba0:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <menu+0x32fc>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f083 0301 	eor.w	r3, r3, #1
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d007      	beq.n	8006bbe <menu+0x3286>
			eepromData[33] = dilSecim;
 8006bae:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <menu+0x32ec>)
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	4b23      	ldr	r3, [pc, #140]	; (8006c40 <menu+0x3308>)
 8006bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <menu+0x3320>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8006bbe:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <menu+0x3324>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b1f      	cmp	r3, #31
 8006bc4:	f040 80b7 	bne.w	8006d36 <menu+0x33fe>
		calismaSayModu = 0;
 8006bc8:	4b1c      	ldr	r3, [pc, #112]	; (8006c3c <menu+0x3304>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8006bce:	4a28      	ldr	r2, [pc, #160]	; (8006c70 <menu+0x3338>)
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	f7fb fe62 	bl	800289c <lcd_print>

		if(iotMode == 0) {
 8006bd8:	4b26      	ldr	r3, [pc, #152]	; (8006c74 <menu+0x333c>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d113      	bne.n	8006c08 <menu+0x32d0>
			if(dilSecim == 0) {
 8006be0:	4b10      	ldr	r3, [pc, #64]	; (8006c24 <menu+0x32ec>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d105      	bne.n	8006bf4 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8006be8:	4a23      	ldr	r2, [pc, #140]	; (8006c78 <menu+0x3340>)
 8006bea:	2101      	movs	r1, #1
 8006bec:	2002      	movs	r0, #2
 8006bee:	f7fb fe55 	bl	800289c <lcd_print>
 8006bf2:	e050      	b.n	8006c96 <menu+0x335e>
			} else if(dilSecim == 1) {
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <menu+0x32ec>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d14c      	bne.n	8006c96 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8006bfc:	4a1f      	ldr	r2, [pc, #124]	; (8006c7c <menu+0x3344>)
 8006bfe:	2101      	movs	r1, #1
 8006c00:	2002      	movs	r0, #2
 8006c02:	f7fb fe4b 	bl	800289c <lcd_print>
 8006c06:	e046      	b.n	8006c96 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8006c08:	4b1a      	ldr	r3, [pc, #104]	; (8006c74 <menu+0x333c>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d142      	bne.n	8006c96 <menu+0x335e>
			if(dilSecim == 0){
 8006c10:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <menu+0x32ec>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d135      	bne.n	8006c84 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8006c18:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <menu+0x3348>)
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	2002      	movs	r0, #2
 8006c1e:	f7fb fe3d 	bl	800289c <lcd_print>
 8006c22:	e038      	b.n	8006c96 <menu+0x335e>
 8006c24:	20000245 	.word	0x20000245
 8006c28:	0800db1c 	.word	0x0800db1c
 8006c2c:	0800db50 	.word	0x0800db50
 8006c30:	40010800 	.word	0x40010800
 8006c34:	20000253 	.word	0x20000253
 8006c38:	20000265 	.word	0x20000265
 8006c3c:	20000244 	.word	0x20000244
 8006c40:	20000128 	.word	0x20000128
 8006c44:	20000223 	.word	0x20000223
 8006c48:	20000009 	.word	0x20000009
 8006c4c:	20000008 	.word	0x20000008
 8006c50:	20000222 	.word	0x20000222
 8006c54:	20000221 	.word	0x20000221
 8006c58:	20000250 	.word	0x20000250
 8006c5c:	20000224 	.word	0x20000224
 8006c60:	0800db64 	.word	0x0800db64
 8006c64:	0800db78 	.word	0x0800db78
 8006c68:	0800db8c 	.word	0x0800db8c
 8006c6c:	0800dba0 	.word	0x0800dba0
 8006c70:	0800dbb4 	.word	0x0800dbb4
 8006c74:	20000243 	.word	0x20000243
 8006c78:	0800d40c 	.word	0x0800d40c
 8006c7c:	0800d420 	.word	0x0800d420
 8006c80:	0800d46c 	.word	0x0800d46c
			} else if(dilSecim == 1) {
 8006c84:	4bac      	ldr	r3, [pc, #688]	; (8006f38 <menu+0x3600>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d104      	bne.n	8006c96 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8006c8c:	4aab      	ldr	r2, [pc, #684]	; (8006f3c <menu+0x3604>)
 8006c8e:	2101      	movs	r1, #1
 8006c90:	2002      	movs	r0, #2
 8006c92:	f7fb fe03 	bl	800289c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8006c96:	2102      	movs	r1, #2
 8006c98:	48a9      	ldr	r0, [pc, #676]	; (8006f40 <menu+0x3608>)
 8006c9a:	f002 fb45 	bl	8009328 <HAL_GPIO_ReadPin>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d115      	bne.n	8006cd0 <menu+0x3398>
 8006ca4:	4ba7      	ldr	r3, [pc, #668]	; (8006f44 <menu+0x360c>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	f083 0301 	eor.w	r3, r3, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00e      	beq.n	8006cd0 <menu+0x3398>
			iotMode = iotMode + 1;
 8006cb2:	4ba5      	ldr	r3, [pc, #660]	; (8006f48 <menu+0x3610>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	4ba3      	ldr	r3, [pc, #652]	; (8006f48 <menu+0x3610>)
 8006cbc:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8006cbe:	4ba2      	ldr	r3, [pc, #648]	; (8006f48 <menu+0x3610>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d902      	bls.n	8006ccc <menu+0x3394>
				iotMode = 0;
 8006cc6:	4ba0      	ldr	r3, [pc, #640]	; (8006f48 <menu+0x3610>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8006ccc:	f000 ff1c 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8006cd0:	2104      	movs	r1, #4
 8006cd2:	489b      	ldr	r0, [pc, #620]	; (8006f40 <menu+0x3608>)
 8006cd4:	f002 fb28 	bl	8009328 <HAL_GPIO_ReadPin>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d115      	bne.n	8006d0a <menu+0x33d2>
 8006cde:	4b99      	ldr	r3, [pc, #612]	; (8006f44 <menu+0x360c>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f083 0301 	eor.w	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00e      	beq.n	8006d0a <menu+0x33d2>
			iotMode = iotMode - 1;
 8006cec:	4b96      	ldr	r3, [pc, #600]	; (8006f48 <menu+0x3610>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	4b94      	ldr	r3, [pc, #592]	; (8006f48 <menu+0x3610>)
 8006cf6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8006cf8:	4b93      	ldr	r3, [pc, #588]	; (8006f48 <menu+0x3610>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <menu+0x33ce>
		   		iotMode = 1;
 8006d00:	4b91      	ldr	r3, [pc, #580]	; (8006f48 <menu+0x3610>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8006d06:	f000 feff 	bl	8007b08 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8006d0a:	2108      	movs	r1, #8
 8006d0c:	488c      	ldr	r0, [pc, #560]	; (8006f40 <menu+0x3608>)
 8006d0e:	f002 fb0b 	bl	8009328 <HAL_GPIO_ReadPin>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d10e      	bne.n	8006d36 <menu+0x33fe>
 8006d18:	4b8a      	ldr	r3, [pc, #552]	; (8006f44 <menu+0x360c>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	f083 0301 	eor.w	r3, r3, #1
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d007      	beq.n	8006d36 <menu+0x33fe>
			eepromData[48] = iotMode;
 8006d26:	4b88      	ldr	r3, [pc, #544]	; (8006f48 <menu+0x3610>)
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	4b88      	ldr	r3, [pc, #544]	; (8006f4c <menu+0x3614>)
 8006d2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8006d30:	4b87      	ldr	r3, [pc, #540]	; (8006f50 <menu+0x3618>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8006d36:	4b87      	ldr	r3, [pc, #540]	; (8006f54 <menu+0x361c>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d138      	bne.n	8006db0 <menu+0x3478>
		calismaSayModu = 0;
 8006d3e:	4b86      	ldr	r3, [pc, #536]	; (8006f58 <menu+0x3620>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8006d44:	4a85      	ldr	r2, [pc, #532]	; (8006f5c <menu+0x3624>)
 8006d46:	2101      	movs	r1, #1
 8006d48:	2001      	movs	r0, #1
 8006d4a:	f7fb fda7 	bl	800289c <lcd_print>

		lcd_print(2, 1, machineID);
 8006d4e:	4a84      	ldr	r2, [pc, #528]	; (8006f60 <menu+0x3628>)
 8006d50:	2101      	movs	r1, #1
 8006d52:	2002      	movs	r0, #2
 8006d54:	f7fb fda2 	bl	800289c <lcd_print>
		lcd_print(2, 13, "    ");
 8006d58:	4a82      	ldr	r2, [pc, #520]	; (8006f64 <menu+0x362c>)
 8006d5a:	210d      	movs	r1, #13
 8006d5c:	2002      	movs	r0, #2
 8006d5e:	f7fb fd9d 	bl	800289c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8006d62:	2102      	movs	r1, #2
 8006d64:	4876      	ldr	r0, [pc, #472]	; (8006f40 <menu+0x3608>)
 8006d66:	f002 fadf 	bl	8009328 <HAL_GPIO_ReadPin>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d11f      	bne.n	8006db0 <menu+0x3478>
 8006d70:	2104      	movs	r1, #4
 8006d72:	4873      	ldr	r0, [pc, #460]	; (8006f40 <menu+0x3608>)
 8006d74:	f002 fad8 	bl	8009328 <HAL_GPIO_ReadPin>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d118      	bne.n	8006db0 <menu+0x3478>
 8006d7e:	4b71      	ldr	r3, [pc, #452]	; (8006f44 <menu+0x360c>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f083 0301 	eor.w	r3, r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d011      	beq.n	8006db0 <menu+0x3478>
			takeMachineID(0);
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f7fc f80f 	bl	8002db0 <takeMachineID>

			HAL_Delay(50);
 8006d92:	2032      	movs	r0, #50	; 0x32
 8006d94:	f001 fcf8 	bl	8008788 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8006d98:	4a71      	ldr	r2, [pc, #452]	; (8006f60 <menu+0x3628>)
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	2002      	movs	r0, #2
 8006d9e:	f7fb fd7d 	bl	800289c <lcd_print>
			lcd_print(2, 13, "    ");
 8006da2:	4a70      	ldr	r2, [pc, #448]	; (8006f64 <menu+0x362c>)
 8006da4:	210d      	movs	r1, #13
 8006da6:	2002      	movs	r0, #2
 8006da8:	f7fb fd78 	bl	800289c <lcd_print>

			bekle();
 8006dac:	f000 feac 	bl	8007b08 <bekle>
		}
	}

	if (menuSayac == 33) {
 8006db0:	4b68      	ldr	r3, [pc, #416]	; (8006f54 <menu+0x361c>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b21      	cmp	r3, #33	; 0x21
 8006db6:	d153      	bne.n	8006e60 <menu+0x3528>
		calismaSayModu = 0;
 8006db8:	4b67      	ldr	r3, [pc, #412]	; (8006f58 <menu+0x3620>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8006dbe:	4a6a      	ldr	r2, [pc, #424]	; (8006f68 <menu+0x3630>)
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	2001      	movs	r0, #1
 8006dc4:	f7fb fd6a 	bl	800289c <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8006dc8:	4868      	ldr	r0, [pc, #416]	; (8006f6c <menu+0x3634>)
 8006dca:	f7f9 fa2b 	bl	8000224 <strlen>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d811      	bhi.n	8006df8 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8006dd4:	4a65      	ldr	r2, [pc, #404]	; (8006f6c <menu+0x3634>)
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	2002      	movs	r0, #2
 8006dda:	f7fb fd5f 	bl	800289c <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8006dde:	4863      	ldr	r0, [pc, #396]	; (8006f6c <menu+0x3634>)
 8006de0:	f7f9 fa20 	bl	8000224 <strlen>
 8006de4:	4603      	mov	r3, r0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	3301      	adds	r3, #1
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	4a60      	ldr	r2, [pc, #384]	; (8006f70 <menu+0x3638>)
 8006dee:	4619      	mov	r1, r3
 8006df0:	2002      	movs	r0, #2
 8006df2:	f7fb fd53 	bl	800289c <lcd_print>
 8006df6:	e005      	b.n	8006e04 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8006df8:	2300      	movs	r3, #0
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	485b      	ldr	r0, [pc, #364]	; (8006f6c <menu+0x3634>)
 8006e00:	f7fc fcf4 	bl	80037ec <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8006e04:	2102      	movs	r1, #2
 8006e06:	484e      	ldr	r0, [pc, #312]	; (8006f40 <menu+0x3608>)
 8006e08:	f002 fa8e 	bl	8009328 <HAL_GPIO_ReadPin>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d126      	bne.n	8006e60 <menu+0x3528>
 8006e12:	2104      	movs	r1, #4
 8006e14:	484a      	ldr	r0, [pc, #296]	; (8006f40 <menu+0x3608>)
 8006e16:	f002 fa87 	bl	8009328 <HAL_GPIO_ReadPin>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d11f      	bne.n	8006e60 <menu+0x3528>
 8006e20:	4b48      	ldr	r3, [pc, #288]	; (8006f44 <menu+0x360c>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f083 0301 	eor.w	r3, r3, #1
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d018      	beq.n	8006e60 <menu+0x3528>
			takeWifiSSID(0);
 8006e2e:	2000      	movs	r0, #0
 8006e30:	f7fc f914 	bl	800305c <takeWifiSSID>

			HAL_Delay(100);
 8006e34:	2064      	movs	r0, #100	; 0x64
 8006e36:	f001 fca7 	bl	8008788 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8006e3a:	4a4c      	ldr	r2, [pc, #304]	; (8006f6c <menu+0x3634>)
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	2002      	movs	r0, #2
 8006e40:	f7fb fd2c 	bl	800289c <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8006e44:	4849      	ldr	r0, [pc, #292]	; (8006f6c <menu+0x3634>)
 8006e46:	f7f9 f9ed 	bl	8000224 <strlen>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	3301      	adds	r3, #1
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4a47      	ldr	r2, [pc, #284]	; (8006f70 <menu+0x3638>)
 8006e54:	4619      	mov	r1, r3
 8006e56:	2002      	movs	r0, #2
 8006e58:	f7fb fd20 	bl	800289c <lcd_print>

			bekle();
 8006e5c:	f000 fe54 	bl	8007b08 <bekle>
		}
	}

	if (menuSayac == 34) {
 8006e60:	4b3c      	ldr	r3, [pc, #240]	; (8006f54 <menu+0x361c>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b22      	cmp	r3, #34	; 0x22
 8006e66:	d153      	bne.n	8006f10 <menu+0x35d8>
		calismaSayModu = 0;
 8006e68:	4b3b      	ldr	r3, [pc, #236]	; (8006f58 <menu+0x3620>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8006e6e:	4a41      	ldr	r2, [pc, #260]	; (8006f74 <menu+0x363c>)
 8006e70:	2101      	movs	r1, #1
 8006e72:	2001      	movs	r0, #1
 8006e74:	f7fb fd12 	bl	800289c <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8006e78:	483f      	ldr	r0, [pc, #252]	; (8006f78 <menu+0x3640>)
 8006e7a:	f7f9 f9d3 	bl	8000224 <strlen>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d811      	bhi.n	8006ea8 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8006e84:	4a3c      	ldr	r2, [pc, #240]	; (8006f78 <menu+0x3640>)
 8006e86:	2101      	movs	r1, #1
 8006e88:	2002      	movs	r0, #2
 8006e8a:	f7fb fd07 	bl	800289c <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8006e8e:	483a      	ldr	r0, [pc, #232]	; (8006f78 <menu+0x3640>)
 8006e90:	f7f9 f9c8 	bl	8000224 <strlen>
 8006e94:	4603      	mov	r3, r0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	3301      	adds	r3, #1
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	4a34      	ldr	r2, [pc, #208]	; (8006f70 <menu+0x3638>)
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	2002      	movs	r0, #2
 8006ea2:	f7fb fcfb 	bl	800289c <lcd_print>
 8006ea6:	e005      	b.n	8006eb4 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	2202      	movs	r2, #2
 8006eac:	2101      	movs	r1, #1
 8006eae:	4832      	ldr	r0, [pc, #200]	; (8006f78 <menu+0x3640>)
 8006eb0:	f7fc fc9c 	bl	80037ec <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8006eb4:	2102      	movs	r1, #2
 8006eb6:	4822      	ldr	r0, [pc, #136]	; (8006f40 <menu+0x3608>)
 8006eb8:	f002 fa36 	bl	8009328 <HAL_GPIO_ReadPin>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d126      	bne.n	8006f10 <menu+0x35d8>
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	481e      	ldr	r0, [pc, #120]	; (8006f40 <menu+0x3608>)
 8006ec6:	f002 fa2f 	bl	8009328 <HAL_GPIO_ReadPin>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d11f      	bne.n	8006f10 <menu+0x35d8>
 8006ed0:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <menu+0x360c>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f083 0301 	eor.w	r3, r3, #1
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d018      	beq.n	8006f10 <menu+0x35d8>
			takeWifiPass(0);
 8006ede:	2000      	movs	r0, #0
 8006ee0:	f7fc fa86 	bl	80033f0 <takeWifiPass>

			HAL_Delay(50);
 8006ee4:	2032      	movs	r0, #50	; 0x32
 8006ee6:	f001 fc4f 	bl	8008788 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8006eea:	4a23      	ldr	r2, [pc, #140]	; (8006f78 <menu+0x3640>)
 8006eec:	2101      	movs	r1, #1
 8006eee:	2002      	movs	r0, #2
 8006ef0:	f7fb fcd4 	bl	800289c <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8006ef4:	4820      	ldr	r0, [pc, #128]	; (8006f78 <menu+0x3640>)
 8006ef6:	f7f9 f995 	bl	8000224 <strlen>
 8006efa:	4603      	mov	r3, r0
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	3301      	adds	r3, #1
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	4a1b      	ldr	r2, [pc, #108]	; (8006f70 <menu+0x3638>)
 8006f04:	4619      	mov	r1, r3
 8006f06:	2002      	movs	r0, #2
 8006f08:	f7fb fcc8 	bl	800289c <lcd_print>

			bekle();
 8006f0c:	f000 fdfc 	bl	8007b08 <bekle>
		}
	}

	if (menuSayac == 35) {
 8006f10:	4b10      	ldr	r3, [pc, #64]	; (8006f54 <menu+0x361c>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b23      	cmp	r3, #35	; 0x23
 8006f16:	d155      	bne.n	8006fc4 <menu+0x368c>
		if(dilSecim == 0) {
 8006f18:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <menu+0x3600>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d131      	bne.n	8006f84 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8006f20:	4a16      	ldr	r2, [pc, #88]	; (8006f7c <menu+0x3644>)
 8006f22:	2101      	movs	r1, #1
 8006f24:	2001      	movs	r0, #1
 8006f26:	f7fb fcb9 	bl	800289c <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8006f2a:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <menu+0x3648>)
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	2002      	movs	r0, #2
 8006f30:	f7fb fcb4 	bl	800289c <lcd_print>
 8006f34:	e034      	b.n	8006fa0 <menu+0x3668>
 8006f36:	bf00      	nop
 8006f38:	20000245 	.word	0x20000245
 8006f3c:	0800d480 	.word	0x0800d480
 8006f40:	40010800 	.word	0x40010800
 8006f44:	20000253 	.word	0x20000253
 8006f48:	20000243 	.word	0x20000243
 8006f4c:	20000128 	.word	0x20000128
 8006f50:	20000250 	.word	0x20000250
 8006f54:	20000224 	.word	0x20000224
 8006f58:	20000244 	.word	0x20000244
 8006f5c:	0800dbc8 	.word	0x0800dbc8
 8006f60:	200001a0 	.word	0x200001a0
 8006f64:	0800dbdc 	.word	0x0800dbdc
 8006f68:	0800dbe4 	.word	0x0800dbe4
 8006f6c:	200001ac 	.word	0x200001ac
 8006f70:	20000018 	.word	0x20000018
 8006f74:	0800dbf8 	.word	0x0800dbf8
 8006f78:	200001c0 	.word	0x200001c0
 8006f7c:	0800dc0c 	.word	0x0800dc0c
 8006f80:	0800dc20 	.word	0x0800dc20
		} else if(dilSecim == 1) {
 8006f84:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <menu+0x3690>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d109      	bne.n	8006fa0 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8006f8c:	4a0f      	ldr	r2, [pc, #60]	; (8006fcc <menu+0x3694>)
 8006f8e:	2101      	movs	r1, #1
 8006f90:	2001      	movs	r0, #1
 8006f92:	f7fb fc83 	bl	800289c <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8006f96:	4a0e      	ldr	r2, [pc, #56]	; (8006fd0 <menu+0x3698>)
 8006f98:	2101      	movs	r1, #1
 8006f9a:	2002      	movs	r0, #2
 8006f9c:	f7fb fc7e 	bl	800289c <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8006fa0:	2108      	movs	r1, #8
 8006fa2:	480c      	ldr	r0, [pc, #48]	; (8006fd4 <menu+0x369c>)
 8006fa4:	f002 f9c0 	bl	8009328 <HAL_GPIO_ReadPin>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d10a      	bne.n	8006fc4 <menu+0x368c>
			menuGiris = 0;
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <menu+0x36a0>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8006fb4:	f7fb fcc1 	bl	800293a <lcd_clear>
			HAL_Delay(500);
 8006fb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006fbc:	f001 fbe4 	bl	8008788 <HAL_Delay>
			NVIC_SystemReset();
 8006fc0:	f7fb fd02 	bl	80029c8 <__NVIC_SystemReset>
		}
	}
}
 8006fc4:	bf00      	nop
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000245 	.word	0x20000245
 8006fcc:	0800dc34 	.word	0x0800dc34
 8006fd0:	0800dc48 	.word	0x0800dc48
 8006fd4:	40010800 	.word	0x40010800
 8006fd8:	20000241 	.word	0x20000241

08006fdc <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d105      	bne.n	8006ff8 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8006fec:	4a22      	ldr	r2, [pc, #136]	; (8007078 <lcdUpdate+0x9c>)
 8006fee:	2101      	movs	r1, #1
 8006ff0:	2002      	movs	r0, #2
 8006ff2:	f7fb fc53 	bl	800289c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8006ff6:	e03b      	b.n	8007070 <lcdUpdate+0x94>
	} else if(y==2) {
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d105      	bne.n	800700a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <lcdUpdate+0x9c>)
 8007000:	2102      	movs	r1, #2
 8007002:	2002      	movs	r0, #2
 8007004:	f7fb fc4a 	bl	800289c <lcd_print>
}
 8007008:	e032      	b.n	8007070 <lcdUpdate+0x94>
	} else if(y==3) {
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d105      	bne.n	800701c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8007010:	4a19      	ldr	r2, [pc, #100]	; (8007078 <lcdUpdate+0x9c>)
 8007012:	2103      	movs	r1, #3
 8007014:	2002      	movs	r0, #2
 8007016:	f7fb fc41 	bl	800289c <lcd_print>
}
 800701a:	e029      	b.n	8007070 <lcdUpdate+0x94>
	} else if(y==4) {
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	2b04      	cmp	r3, #4
 8007020:	d105      	bne.n	800702e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8007022:	4a15      	ldr	r2, [pc, #84]	; (8007078 <lcdUpdate+0x9c>)
 8007024:	2104      	movs	r1, #4
 8007026:	2002      	movs	r0, #2
 8007028:	f7fb fc38 	bl	800289c <lcd_print>
}
 800702c:	e020      	b.n	8007070 <lcdUpdate+0x94>
	} else if(y==5) {
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	2b05      	cmp	r3, #5
 8007032:	d105      	bne.n	8007040 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8007034:	4a10      	ldr	r2, [pc, #64]	; (8007078 <lcdUpdate+0x9c>)
 8007036:	2105      	movs	r1, #5
 8007038:	2002      	movs	r0, #2
 800703a:	f7fb fc2f 	bl	800289c <lcd_print>
}
 800703e:	e017      	b.n	8007070 <lcdUpdate+0x94>
	} else if(y==6) {
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	2b06      	cmp	r3, #6
 8007044:	d105      	bne.n	8007052 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8007046:	4a0c      	ldr	r2, [pc, #48]	; (8007078 <lcdUpdate+0x9c>)
 8007048:	2106      	movs	r1, #6
 800704a:	2002      	movs	r0, #2
 800704c:	f7fb fc26 	bl	800289c <lcd_print>
}
 8007050:	e00e      	b.n	8007070 <lcdUpdate+0x94>
	} else if (y==7) {
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	2b07      	cmp	r3, #7
 8007056:	d10b      	bne.n	8007070 <lcdUpdate+0x94>
		lcd_clear();
 8007058:	f7fb fc6f 	bl	800293a <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 800705c:	4a07      	ldr	r2, [pc, #28]	; (800707c <lcdUpdate+0xa0>)
 800705e:	2104      	movs	r1, #4
 8007060:	2001      	movs	r0, #1
 8007062:	f7fb fc1b 	bl	800289c <lcd_print>
		lcd_print(2, 6, "RUN");
 8007066:	4a06      	ldr	r2, [pc, #24]	; (8007080 <lcdUpdate+0xa4>)
 8007068:	2106      	movs	r1, #6
 800706a:	2002      	movs	r0, #2
 800706c:	f7fb fc16 	bl	800289c <lcd_print>
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	0800d328 	.word	0x0800d328
 800707c:	0800dc5c 	.word	0x0800dc5c
 8007080:	0800dc64 	.word	0x0800dc64

08007084 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d11d      	bne.n	80070d0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8007094:	4b62      	ldr	r3, [pc, #392]	; (8007220 <hataKoduLcdGoster+0x19c>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 800709c:	4a61      	ldr	r2, [pc, #388]	; (8007224 <hataKoduLcdGoster+0x1a0>)
 800709e:	2101      	movs	r1, #1
 80070a0:	2001      	movs	r0, #1
 80070a2:	f7fb fbfb 	bl	800289c <lcd_print>
 80070a6:	e008      	b.n	80070ba <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80070a8:	4b5d      	ldr	r3, [pc, #372]	; (8007220 <hataKoduLcdGoster+0x19c>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d104      	bne.n	80070ba <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 80070b0:	4a5d      	ldr	r2, [pc, #372]	; (8007228 <hataKoduLcdGoster+0x1a4>)
 80070b2:	2101      	movs	r1, #1
 80070b4:	2001      	movs	r0, #1
 80070b6:	f7fb fbf1 	bl	800289c <lcd_print>
		}
		lcd_print(2, 1, "1");
 80070ba:	4a5c      	ldr	r2, [pc, #368]	; (800722c <hataKoduLcdGoster+0x1a8>)
 80070bc:	2101      	movs	r1, #1
 80070be:	2002      	movs	r0, #2
 80070c0:	f7fb fbec 	bl	800289c <lcd_print>
		lcd_print(2, 7, "          ");
 80070c4:	4a5a      	ldr	r2, [pc, #360]	; (8007230 <hataKoduLcdGoster+0x1ac>)
 80070c6:	2107      	movs	r1, #7
 80070c8:	2002      	movs	r0, #2
 80070ca:	f7fb fbe7 	bl	800289c <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80070ce:	e0a3      	b.n	8007218 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d11d      	bne.n	8007112 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80070d6:	4b52      	ldr	r3, [pc, #328]	; (8007220 <hataKoduLcdGoster+0x19c>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d105      	bne.n	80070ea <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 80070de:	4a51      	ldr	r2, [pc, #324]	; (8007224 <hataKoduLcdGoster+0x1a0>)
 80070e0:	2101      	movs	r1, #1
 80070e2:	2001      	movs	r0, #1
 80070e4:	f7fb fbda 	bl	800289c <lcd_print>
 80070e8:	e008      	b.n	80070fc <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80070ea:	4b4d      	ldr	r3, [pc, #308]	; (8007220 <hataKoduLcdGoster+0x19c>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d104      	bne.n	80070fc <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 80070f2:	4a4d      	ldr	r2, [pc, #308]	; (8007228 <hataKoduLcdGoster+0x1a4>)
 80070f4:	2101      	movs	r1, #1
 80070f6:	2001      	movs	r0, #1
 80070f8:	f7fb fbd0 	bl	800289c <lcd_print>
		lcd_print(2, 2, "2");
 80070fc:	4a4d      	ldr	r2, [pc, #308]	; (8007234 <hataKoduLcdGoster+0x1b0>)
 80070fe:	2102      	movs	r1, #2
 8007100:	2002      	movs	r0, #2
 8007102:	f7fb fbcb 	bl	800289c <lcd_print>
		lcd_print(2, 7, "          ");
 8007106:	4a4a      	ldr	r2, [pc, #296]	; (8007230 <hataKoduLcdGoster+0x1ac>)
 8007108:	2107      	movs	r1, #7
 800710a:	2002      	movs	r0, #2
 800710c:	f7fb fbc6 	bl	800289c <lcd_print>
}
 8007110:	e082      	b.n	8007218 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	2b03      	cmp	r3, #3
 8007116:	d11d      	bne.n	8007154 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8007118:	4b41      	ldr	r3, [pc, #260]	; (8007220 <hataKoduLcdGoster+0x19c>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d105      	bne.n	800712c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8007120:	4a40      	ldr	r2, [pc, #256]	; (8007224 <hataKoduLcdGoster+0x1a0>)
 8007122:	2101      	movs	r1, #1
 8007124:	2001      	movs	r0, #1
 8007126:	f7fb fbb9 	bl	800289c <lcd_print>
 800712a:	e008      	b.n	800713e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 800712c:	4b3c      	ldr	r3, [pc, #240]	; (8007220 <hataKoduLcdGoster+0x19c>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d104      	bne.n	800713e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8007134:	4a3c      	ldr	r2, [pc, #240]	; (8007228 <hataKoduLcdGoster+0x1a4>)
 8007136:	2101      	movs	r1, #1
 8007138:	2001      	movs	r0, #1
 800713a:	f7fb fbaf 	bl	800289c <lcd_print>
		lcd_print(2, 3, "3");
 800713e:	4a3e      	ldr	r2, [pc, #248]	; (8007238 <hataKoduLcdGoster+0x1b4>)
 8007140:	2103      	movs	r1, #3
 8007142:	2002      	movs	r0, #2
 8007144:	f7fb fbaa 	bl	800289c <lcd_print>
		lcd_print(2, 7, "          ");
 8007148:	4a39      	ldr	r2, [pc, #228]	; (8007230 <hataKoduLcdGoster+0x1ac>)
 800714a:	2107      	movs	r1, #7
 800714c:	2002      	movs	r0, #2
 800714e:	f7fb fba5 	bl	800289c <lcd_print>
}
 8007152:	e061      	b.n	8007218 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	2b04      	cmp	r3, #4
 8007158:	d11d      	bne.n	8007196 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800715a:	4b31      	ldr	r3, [pc, #196]	; (8007220 <hataKoduLcdGoster+0x19c>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d105      	bne.n	800716e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8007162:	4a30      	ldr	r2, [pc, #192]	; (8007224 <hataKoduLcdGoster+0x1a0>)
 8007164:	2101      	movs	r1, #1
 8007166:	2001      	movs	r0, #1
 8007168:	f7fb fb98 	bl	800289c <lcd_print>
 800716c:	e008      	b.n	8007180 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800716e:	4b2c      	ldr	r3, [pc, #176]	; (8007220 <hataKoduLcdGoster+0x19c>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d104      	bne.n	8007180 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8007176:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <hataKoduLcdGoster+0x1a4>)
 8007178:	2101      	movs	r1, #1
 800717a:	2001      	movs	r0, #1
 800717c:	f7fb fb8e 	bl	800289c <lcd_print>
		lcd_print(2, 4, "4");
 8007180:	4a2e      	ldr	r2, [pc, #184]	; (800723c <hataKoduLcdGoster+0x1b8>)
 8007182:	2104      	movs	r1, #4
 8007184:	2002      	movs	r0, #2
 8007186:	f7fb fb89 	bl	800289c <lcd_print>
		lcd_print(2, 7, "          ");
 800718a:	4a29      	ldr	r2, [pc, #164]	; (8007230 <hataKoduLcdGoster+0x1ac>)
 800718c:	2107      	movs	r1, #7
 800718e:	2002      	movs	r0, #2
 8007190:	f7fb fb84 	bl	800289c <lcd_print>
}
 8007194:	e040      	b.n	8007218 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	2b05      	cmp	r3, #5
 800719a:	d11d      	bne.n	80071d8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 800719c:	4b20      	ldr	r3, [pc, #128]	; (8007220 <hataKoduLcdGoster+0x19c>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d105      	bne.n	80071b0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 80071a4:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <hataKoduLcdGoster+0x1a0>)
 80071a6:	2101      	movs	r1, #1
 80071a8:	2001      	movs	r0, #1
 80071aa:	f7fb fb77 	bl	800289c <lcd_print>
 80071ae:	e008      	b.n	80071c2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80071b0:	4b1b      	ldr	r3, [pc, #108]	; (8007220 <hataKoduLcdGoster+0x19c>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d104      	bne.n	80071c2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 80071b8:	4a1b      	ldr	r2, [pc, #108]	; (8007228 <hataKoduLcdGoster+0x1a4>)
 80071ba:	2101      	movs	r1, #1
 80071bc:	2001      	movs	r0, #1
 80071be:	f7fb fb6d 	bl	800289c <lcd_print>
		lcd_print(2, 5, "5");
 80071c2:	4a1f      	ldr	r2, [pc, #124]	; (8007240 <hataKoduLcdGoster+0x1bc>)
 80071c4:	2105      	movs	r1, #5
 80071c6:	2002      	movs	r0, #2
 80071c8:	f7fb fb68 	bl	800289c <lcd_print>
		lcd_print(2, 7, "          ");
 80071cc:	4a18      	ldr	r2, [pc, #96]	; (8007230 <hataKoduLcdGoster+0x1ac>)
 80071ce:	2107      	movs	r1, #7
 80071d0:	2002      	movs	r0, #2
 80071d2:	f7fb fb63 	bl	800289c <lcd_print>
}
 80071d6:	e01f      	b.n	8007218 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	2b06      	cmp	r3, #6
 80071dc:	d11c      	bne.n	8007218 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <hataKoduLcdGoster+0x19c>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d105      	bne.n	80071f2 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 80071e6:	4a0f      	ldr	r2, [pc, #60]	; (8007224 <hataKoduLcdGoster+0x1a0>)
 80071e8:	2101      	movs	r1, #1
 80071ea:	2001      	movs	r0, #1
 80071ec:	f7fb fb56 	bl	800289c <lcd_print>
 80071f0:	e008      	b.n	8007204 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80071f2:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <hataKoduLcdGoster+0x19c>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d104      	bne.n	8007204 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 80071fa:	4a0b      	ldr	r2, [pc, #44]	; (8007228 <hataKoduLcdGoster+0x1a4>)
 80071fc:	2101      	movs	r1, #1
 80071fe:	2001      	movs	r0, #1
 8007200:	f7fb fb4c 	bl	800289c <lcd_print>
		lcd_print(2, 6, "6");
 8007204:	4a0f      	ldr	r2, [pc, #60]	; (8007244 <hataKoduLcdGoster+0x1c0>)
 8007206:	2106      	movs	r1, #6
 8007208:	2002      	movs	r0, #2
 800720a:	f7fb fb47 	bl	800289c <lcd_print>
		lcd_print(2, 7, "          ");
 800720e:	4a08      	ldr	r2, [pc, #32]	; (8007230 <hataKoduLcdGoster+0x1ac>)
 8007210:	2107      	movs	r1, #7
 8007212:	2002      	movs	r0, #2
 8007214:	f7fb fb42 	bl	800289c <lcd_print>
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000245 	.word	0x20000245
 8007224:	0800dc68 	.word	0x0800dc68
 8007228:	0800dc78 	.word	0x0800dc78
 800722c:	0800d06c 	.word	0x0800d06c
 8007230:	0800dc88 	.word	0x0800dc88
 8007234:	0800d070 	.word	0x0800d070
 8007238:	0800d074 	.word	0x0800d074
 800723c:	0800d078 	.word	0x0800d078
 8007240:	0800d07c 	.word	0x0800d07c
 8007244:	0800d080 	.word	0x0800d080

08007248 <mergeData>:

char* mergeData() {
 8007248:	b580      	push	{r7, lr}
 800724a:	b09e      	sub	sp, #120	; 0x78
 800724c:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800724e:	2300      	movs	r3, #0
 8007250:	643b      	str	r3, [r7, #64]	; 0x40
 8007252:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007256:	2229      	movs	r2, #41	; 0x29
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f005 f9ca 	bl	800c5f4 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007260:	4b6a      	ldr	r3, [pc, #424]	; (800740c <mergeData+0x1c4>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	713b      	strb	r3, [r7, #4]
 8007266:	4b6a      	ldr	r3, [pc, #424]	; (8007410 <mergeData+0x1c8>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	717b      	strb	r3, [r7, #5]
 800726c:	4b69      	ldr	r3, [pc, #420]	; (8007414 <mergeData+0x1cc>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	71bb      	strb	r3, [r7, #6]
 8007272:	4b69      	ldr	r3, [pc, #420]	; (8007418 <mergeData+0x1d0>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	71fb      	strb	r3, [r7, #7]
 8007278:	4b68      	ldr	r3, [pc, #416]	; (800741c <mergeData+0x1d4>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	723b      	strb	r3, [r7, #8]
 800727e:	4b68      	ldr	r3, [pc, #416]	; (8007420 <mergeData+0x1d8>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	727b      	strb	r3, [r7, #9]
 8007284:	4b67      	ldr	r3, [pc, #412]	; (8007424 <mergeData+0x1dc>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	72bb      	strb	r3, [r7, #10]
 800728a:	4b67      	ldr	r3, [pc, #412]	; (8007428 <mergeData+0x1e0>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	72fb      	strb	r3, [r7, #11]
 8007290:	4b66      	ldr	r3, [pc, #408]	; (800742c <mergeData+0x1e4>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	733b      	strb	r3, [r7, #12]
 8007296:	4b66      	ldr	r3, [pc, #408]	; (8007430 <mergeData+0x1e8>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	737b      	strb	r3, [r7, #13]
 800729c:	4b65      	ldr	r3, [pc, #404]	; (8007434 <mergeData+0x1ec>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	73bb      	strb	r3, [r7, #14]
 80072a2:	4b65      	ldr	r3, [pc, #404]	; (8007438 <mergeData+0x1f0>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	73fb      	strb	r3, [r7, #15]
 80072a8:	4b64      	ldr	r3, [pc, #400]	; (800743c <mergeData+0x1f4>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	743b      	strb	r3, [r7, #16]
 80072ae:	4b64      	ldr	r3, [pc, #400]	; (8007440 <mergeData+0x1f8>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	747b      	strb	r3, [r7, #17]
 80072b4:	4b63      	ldr	r3, [pc, #396]	; (8007444 <mergeData+0x1fc>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	74bb      	strb	r3, [r7, #18]
 80072ba:	4b63      	ldr	r3, [pc, #396]	; (8007448 <mergeData+0x200>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	74fb      	strb	r3, [r7, #19]
 80072c0:	4b62      	ldr	r3, [pc, #392]	; (800744c <mergeData+0x204>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	753b      	strb	r3, [r7, #20]
 80072c6:	4b62      	ldr	r3, [pc, #392]	; (8007450 <mergeData+0x208>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	757b      	strb	r3, [r7, #21]
 80072cc:	4b61      	ldr	r3, [pc, #388]	; (8007454 <mergeData+0x20c>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	75bb      	strb	r3, [r7, #22]
 80072d2:	4b61      	ldr	r3, [pc, #388]	; (8007458 <mergeData+0x210>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	75fb      	strb	r3, [r7, #23]
 80072d8:	4b60      	ldr	r3, [pc, #384]	; (800745c <mergeData+0x214>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	763b      	strb	r3, [r7, #24]
 80072de:	4b60      	ldr	r3, [pc, #384]	; (8007460 <mergeData+0x218>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	767b      	strb	r3, [r7, #25]
 80072e4:	4b5f      	ldr	r3, [pc, #380]	; (8007464 <mergeData+0x21c>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	76bb      	strb	r3, [r7, #26]
 80072ea:	4b5f      	ldr	r3, [pc, #380]	; (8007468 <mergeData+0x220>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	76fb      	strb	r3, [r7, #27]
 80072f0:	4b5e      	ldr	r3, [pc, #376]	; (800746c <mergeData+0x224>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	773b      	strb	r3, [r7, #28]
 80072f6:	4b5e      	ldr	r3, [pc, #376]	; (8007470 <mergeData+0x228>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	777b      	strb	r3, [r7, #29]
 80072fc:	4b5d      	ldr	r3, [pc, #372]	; (8007474 <mergeData+0x22c>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	77bb      	strb	r3, [r7, #30]
 8007302:	4b5d      	ldr	r3, [pc, #372]	; (8007478 <mergeData+0x230>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	77fb      	strb	r3, [r7, #31]
 8007308:	4b5c      	ldr	r3, [pc, #368]	; (800747c <mergeData+0x234>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	f887 3020 	strb.w	r3, [r7, #32]
 8007310:	4b5b      	ldr	r3, [pc, #364]	; (8007480 <mergeData+0x238>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007318:	4b5a      	ldr	r3, [pc, #360]	; (8007484 <mergeData+0x23c>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007320:	4b59      	ldr	r3, [pc, #356]	; (8007488 <mergeData+0x240>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007328:	4b58      	ldr	r3, [pc, #352]	; (800748c <mergeData+0x244>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8007330:	4b57      	ldr	r3, [pc, #348]	; (8007490 <mergeData+0x248>)
 8007332:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8007336:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 800733a:	4b55      	ldr	r3, [pc, #340]	; (8007490 <mergeData+0x248>)
 800733c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007340:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8007344:	4b52      	ldr	r3, [pc, #328]	; (8007490 <mergeData+0x248>)
 8007346:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800734a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800734e:	4b50      	ldr	r3, [pc, #320]	; (8007490 <mergeData+0x248>)
 8007350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007354:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8007358:	4b4d      	ldr	r3, [pc, #308]	; (8007490 <mergeData+0x248>)
 800735a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800735e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8007362:	4b4b      	ldr	r3, [pc, #300]	; (8007490 <mergeData+0x248>)
 8007364:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 800736c:	4b48      	ldr	r3, [pc, #288]	; (8007490 <mergeData+0x248>)
 800736e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8007376:	4b46      	ldr	r3, [pc, #280]	; (8007490 <mergeData+0x248>)
 8007378:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800737c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8007380:	4b43      	ldr	r3, [pc, #268]	; (8007490 <mergeData+0x248>)
 8007382:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007386:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800738a:	4b41      	ldr	r3, [pc, #260]	; (8007490 <mergeData+0x248>)
 800738c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007390:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8007394:	4b3e      	ldr	r3, [pc, #248]	; (8007490 <mergeData+0x248>)
 8007396:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800739a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800739e:	2306      	movs	r3, #6
 80073a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80073a4:	2300      	movs	r3, #0
 80073a6:	677b      	str	r3, [r7, #116]	; 0x74
 80073a8:	e015      	b.n	80073d6 <mergeData+0x18e>
	    sprintf(temp, "%u", uintVariables[i]);
 80073aa:	1d3a      	adds	r2, r7, #4
 80073ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ae:	4413      	add	r3, r2
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80073b8:	4936      	ldr	r1, [pc, #216]	; (8007494 <mergeData+0x24c>)
 80073ba:	4618      	mov	r0, r3
 80073bc:	f005 f896 	bl	800c4ec <siprintf>
	    strcat(combinedString, temp);
 80073c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80073c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f005 f8f0 	bl	800c5b0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80073d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d2:	3301      	adds	r3, #1
 80073d4:	677b      	str	r3, [r7, #116]	; 0x74
 80073d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d8:	2b2c      	cmp	r3, #44	; 0x2c
 80073da:	d9e6      	bls.n	80073aa <mergeData+0x162>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80073dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7f8 ff1f 	bl	8000224 <strlen>
 80073e6:	4603      	mov	r3, r0
 80073e8:	3301      	adds	r3, #1
 80073ea:	4618      	mov	r0, r3
 80073ec:	f004 ffca 	bl	800c384 <malloc>
 80073f0:	4603      	mov	r3, r0
 80073f2:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80073f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073f8:	4619      	mov	r1, r3
 80073fa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80073fc:	f005 f93e 	bl	800c67c <strcpy>
	return result;
 8007400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8007402:	4618      	mov	r0, r3
 8007404:	3778      	adds	r7, #120	; 0x78
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000233 	.word	0x20000233
 8007410:	20000225 	.word	0x20000225
 8007414:	20000228 	.word	0x20000228
 8007418:	20000229 	.word	0x20000229
 800741c:	2000022a 	.word	0x2000022a
 8007420:	20000231 	.word	0x20000231
 8007424:	2000022b 	.word	0x2000022b
 8007428:	2000022c 	.word	0x2000022c
 800742c:	20000230 	.word	0x20000230
 8007430:	2000022d 	.word	0x2000022d
 8007434:	2000023d 	.word	0x2000023d
 8007438:	2000022e 	.word	0x2000022e
 800743c:	2000023e 	.word	0x2000023e
 8007440:	2000022f 	.word	0x2000022f
 8007444:	2000023f 	.word	0x2000023f
 8007448:	20000232 	.word	0x20000232
 800744c:	20000234 	.word	0x20000234
 8007450:	20000235 	.word	0x20000235
 8007454:	20000236 	.word	0x20000236
 8007458:	20000237 	.word	0x20000237
 800745c:	20000238 	.word	0x20000238
 8007460:	20000239 	.word	0x20000239
 8007464:	2000023a 	.word	0x2000023a
 8007468:	2000023b 	.word	0x2000023b
 800746c:	2000023c 	.word	0x2000023c
 8007470:	20000240 	.word	0x20000240
 8007474:	20000242 	.word	0x20000242
 8007478:	20000221 	.word	0x20000221
 800747c:	20000222 	.word	0x20000222
 8007480:	20000008 	.word	0x20000008
 8007484:	20000009 	.word	0x20000009
 8007488:	20000223 	.word	0x20000223
 800748c:	20000245 	.word	0x20000245
 8007490:	20000128 	.word	0x20000128
 8007494:	0800dc94 	.word	0x0800dc94

08007498 <convertAndSendData>:

void convertAndSendData() {
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 800749e:	4a14      	ldr	r2, [pc, #80]	; (80074f0 <convertAndSendData+0x58>)
 80074a0:	2101      	movs	r1, #1
 80074a2:	2001      	movs	r0, #1
 80074a4:	f7fb f9fa 	bl	800289c <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 80074a8:	4a12      	ldr	r2, [pc, #72]	; (80074f4 <convertAndSendData+0x5c>)
 80074aa:	2101      	movs	r1, #1
 80074ac:	2002      	movs	r0, #2
 80074ae:	f7fb f9f5 	bl	800289c <lcd_print>
	for(int i=0; i<2; i++) {
 80074b2:	2300      	movs	r3, #0
 80074b4:	607b      	str	r3, [r7, #4]
 80074b6:	e00a      	b.n	80074ce <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 80074b8:	f7ff fec6 	bl	8007248 <mergeData>
 80074bc:	4603      	mov	r3, r0
 80074be:	461a      	mov	r2, r3
 80074c0:	490d      	ldr	r1, [pc, #52]	; (80074f8 <convertAndSendData+0x60>)
 80074c2:	480e      	ldr	r0, [pc, #56]	; (80074fc <convertAndSendData+0x64>)
 80074c4:	f7f8 ff60 	bl	8000388 <sendMachineData>
	for(int i=0; i<2; i++) {
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3301      	adds	r3, #1
 80074cc:	607b      	str	r3, [r7, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	ddf1      	ble.n	80074b8 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 80074d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074d8:	f001 f956 	bl	8008788 <HAL_Delay>
	lcd_clear();
 80074dc:	f7fb fa2d 	bl	800293a <lcd_clear>
	HAL_Delay(500);
 80074e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074e4:	f001 f950 	bl	8008788 <HAL_Delay>
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	0800dc98 	.word	0x0800dc98
 80074f4:	0800dca4 	.word	0x0800dca4
 80074f8:	200001a0 	.word	0x200001a0
 80074fc:	20000448 	.word	0x20000448

08007500 <eepromKontrol>:

void eepromKontrol(int type) {
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af04      	add	r7, sp, #16
 8007506:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007508:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800750c:	9302      	str	r3, [sp, #8]
 800750e:	236e      	movs	r3, #110	; 0x6e
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	4b9c      	ldr	r3, [pc, #624]	; (8007784 <eepromKontrol+0x284>)
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	236e      	movs	r3, #110	; 0x6e
 8007518:	2200      	movs	r2, #0
 800751a:	21a0      	movs	r1, #160	; 0xa0
 800751c:	489a      	ldr	r0, [pc, #616]	; (8007788 <eepromKontrol+0x288>)
 800751e:	f002 fab7 	bl	8009a90 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8007522:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007526:	f001 f92f 	bl	8008788 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800752a:	4b96      	ldr	r3, [pc, #600]	; (8007784 <eepromKontrol+0x284>)
 800752c:	78da      	ldrb	r2, [r3, #3]
 800752e:	4b97      	ldr	r3, [pc, #604]	; (800778c <eepromKontrol+0x28c>)
 8007530:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8007532:	4b94      	ldr	r3, [pc, #592]	; (8007784 <eepromKontrol+0x284>)
 8007534:	785a      	ldrb	r2, [r3, #1]
 8007536:	4b96      	ldr	r3, [pc, #600]	; (8007790 <eepromKontrol+0x290>)
 8007538:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800753a:	4b92      	ldr	r3, [pc, #584]	; (8007784 <eepromKontrol+0x284>)
 800753c:	789a      	ldrb	r2, [r3, #2]
 800753e:	4b95      	ldr	r3, [pc, #596]	; (8007794 <eepromKontrol+0x294>)
 8007540:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8007542:	4b90      	ldr	r3, [pc, #576]	; (8007784 <eepromKontrol+0x284>)
 8007544:	791a      	ldrb	r2, [r3, #4]
 8007546:	4b94      	ldr	r3, [pc, #592]	; (8007798 <eepromKontrol+0x298>)
 8007548:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800754a:	4b8e      	ldr	r3, [pc, #568]	; (8007784 <eepromKontrol+0x284>)
 800754c:	795a      	ldrb	r2, [r3, #5]
 800754e:	4b93      	ldr	r3, [pc, #588]	; (800779c <eepromKontrol+0x29c>)
 8007550:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8007552:	4b8c      	ldr	r3, [pc, #560]	; (8007784 <eepromKontrol+0x284>)
 8007554:	799a      	ldrb	r2, [r3, #6]
 8007556:	4b92      	ldr	r3, [pc, #584]	; (80077a0 <eepromKontrol+0x2a0>)
 8007558:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800755a:	4b8a      	ldr	r3, [pc, #552]	; (8007784 <eepromKontrol+0x284>)
 800755c:	79da      	ldrb	r2, [r3, #7]
 800755e:	4b91      	ldr	r3, [pc, #580]	; (80077a4 <eepromKontrol+0x2a4>)
 8007560:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8007562:	4b88      	ldr	r3, [pc, #544]	; (8007784 <eepromKontrol+0x284>)
 8007564:	7a1a      	ldrb	r2, [r3, #8]
 8007566:	4b90      	ldr	r3, [pc, #576]	; (80077a8 <eepromKontrol+0x2a8>)
 8007568:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800756a:	4b86      	ldr	r3, [pc, #536]	; (8007784 <eepromKontrol+0x284>)
 800756c:	7a5a      	ldrb	r2, [r3, #9]
 800756e:	4b8f      	ldr	r3, [pc, #572]	; (80077ac <eepromKontrol+0x2ac>)
 8007570:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8007572:	4b84      	ldr	r3, [pc, #528]	; (8007784 <eepromKontrol+0x284>)
 8007574:	7a9a      	ldrb	r2, [r3, #10]
 8007576:	4b8e      	ldr	r3, [pc, #568]	; (80077b0 <eepromKontrol+0x2b0>)
 8007578:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 800757a:	4b82      	ldr	r3, [pc, #520]	; (8007784 <eepromKontrol+0x284>)
 800757c:	7ada      	ldrb	r2, [r3, #11]
 800757e:	4b8d      	ldr	r3, [pc, #564]	; (80077b4 <eepromKontrol+0x2b4>)
 8007580:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8007582:	4b80      	ldr	r3, [pc, #512]	; (8007784 <eepromKontrol+0x284>)
 8007584:	7b1a      	ldrb	r2, [r3, #12]
 8007586:	4b8c      	ldr	r3, [pc, #560]	; (80077b8 <eepromKontrol+0x2b8>)
 8007588:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 800758a:	4b7e      	ldr	r3, [pc, #504]	; (8007784 <eepromKontrol+0x284>)
 800758c:	7b5a      	ldrb	r2, [r3, #13]
 800758e:	4b8b      	ldr	r3, [pc, #556]	; (80077bc <eepromKontrol+0x2bc>)
 8007590:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8007592:	4b7c      	ldr	r3, [pc, #496]	; (8007784 <eepromKontrol+0x284>)
 8007594:	7b9a      	ldrb	r2, [r3, #14]
 8007596:	4b8a      	ldr	r3, [pc, #552]	; (80077c0 <eepromKontrol+0x2c0>)
 8007598:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 800759a:	4b7a      	ldr	r3, [pc, #488]	; (8007784 <eepromKontrol+0x284>)
 800759c:	7bda      	ldrb	r2, [r3, #15]
 800759e:	4b89      	ldr	r3, [pc, #548]	; (80077c4 <eepromKontrol+0x2c4>)
 80075a0:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80075a2:	4b78      	ldr	r3, [pc, #480]	; (8007784 <eepromKontrol+0x284>)
 80075a4:	7c1a      	ldrb	r2, [r3, #16]
 80075a6:	4b88      	ldr	r3, [pc, #544]	; (80077c8 <eepromKontrol+0x2c8>)
 80075a8:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80075aa:	4b76      	ldr	r3, [pc, #472]	; (8007784 <eepromKontrol+0x284>)
 80075ac:	7c5a      	ldrb	r2, [r3, #17]
 80075ae:	4b87      	ldr	r3, [pc, #540]	; (80077cc <eepromKontrol+0x2cc>)
 80075b0:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80075b2:	4b74      	ldr	r3, [pc, #464]	; (8007784 <eepromKontrol+0x284>)
 80075b4:	7c9a      	ldrb	r2, [r3, #18]
 80075b6:	4b86      	ldr	r3, [pc, #536]	; (80077d0 <eepromKontrol+0x2d0>)
 80075b8:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80075ba:	4b72      	ldr	r3, [pc, #456]	; (8007784 <eepromKontrol+0x284>)
 80075bc:	7cda      	ldrb	r2, [r3, #19]
 80075be:	4b85      	ldr	r3, [pc, #532]	; (80077d4 <eepromKontrol+0x2d4>)
 80075c0:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80075c2:	4b70      	ldr	r3, [pc, #448]	; (8007784 <eepromKontrol+0x284>)
 80075c4:	7d1a      	ldrb	r2, [r3, #20]
 80075c6:	4b84      	ldr	r3, [pc, #528]	; (80077d8 <eepromKontrol+0x2d8>)
 80075c8:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80075ca:	4b6e      	ldr	r3, [pc, #440]	; (8007784 <eepromKontrol+0x284>)
 80075cc:	7d5a      	ldrb	r2, [r3, #21]
 80075ce:	4b83      	ldr	r3, [pc, #524]	; (80077dc <eepromKontrol+0x2dc>)
 80075d0:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80075d2:	4b6c      	ldr	r3, [pc, #432]	; (8007784 <eepromKontrol+0x284>)
 80075d4:	7d9a      	ldrb	r2, [r3, #22]
 80075d6:	4b82      	ldr	r3, [pc, #520]	; (80077e0 <eepromKontrol+0x2e0>)
 80075d8:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80075da:	4b6a      	ldr	r3, [pc, #424]	; (8007784 <eepromKontrol+0x284>)
 80075dc:	7dda      	ldrb	r2, [r3, #23]
 80075de:	4b81      	ldr	r3, [pc, #516]	; (80077e4 <eepromKontrol+0x2e4>)
 80075e0:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80075e2:	4b68      	ldr	r3, [pc, #416]	; (8007784 <eepromKontrol+0x284>)
 80075e4:	7e1a      	ldrb	r2, [r3, #24]
 80075e6:	4b80      	ldr	r3, [pc, #512]	; (80077e8 <eepromKontrol+0x2e8>)
 80075e8:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80075ea:	4b66      	ldr	r3, [pc, #408]	; (8007784 <eepromKontrol+0x284>)
 80075ec:	7e5a      	ldrb	r2, [r3, #25]
 80075ee:	4b7f      	ldr	r3, [pc, #508]	; (80077ec <eepromKontrol+0x2ec>)
 80075f0:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80075f2:	4b64      	ldr	r3, [pc, #400]	; (8007784 <eepromKontrol+0x284>)
 80075f4:	7e9a      	ldrb	r2, [r3, #26]
 80075f6:	4b7e      	ldr	r3, [pc, #504]	; (80077f0 <eepromKontrol+0x2f0>)
 80075f8:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80075fa:	4b62      	ldr	r3, [pc, #392]	; (8007784 <eepromKontrol+0x284>)
 80075fc:	7eda      	ldrb	r2, [r3, #27]
 80075fe:	4b7d      	ldr	r3, [pc, #500]	; (80077f4 <eepromKontrol+0x2f4>)
 8007600:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8007602:	4b60      	ldr	r3, [pc, #384]	; (8007784 <eepromKontrol+0x284>)
 8007604:	7f1a      	ldrb	r2, [r3, #28]
 8007606:	4b7c      	ldr	r3, [pc, #496]	; (80077f8 <eepromKontrol+0x2f8>)
 8007608:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800760a:	4b5e      	ldr	r3, [pc, #376]	; (8007784 <eepromKontrol+0x284>)
 800760c:	7f5a      	ldrb	r2, [r3, #29]
 800760e:	4b7b      	ldr	r3, [pc, #492]	; (80077fc <eepromKontrol+0x2fc>)
 8007610:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8007612:	4b5c      	ldr	r3, [pc, #368]	; (8007784 <eepromKontrol+0x284>)
 8007614:	7f9a      	ldrb	r2, [r3, #30]
 8007616:	4b7a      	ldr	r3, [pc, #488]	; (8007800 <eepromKontrol+0x300>)
 8007618:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800761a:	4b5a      	ldr	r3, [pc, #360]	; (8007784 <eepromKontrol+0x284>)
 800761c:	7fda      	ldrb	r2, [r3, #31]
 800761e:	4b79      	ldr	r3, [pc, #484]	; (8007804 <eepromKontrol+0x304>)
 8007620:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8007622:	4b58      	ldr	r3, [pc, #352]	; (8007784 <eepromKontrol+0x284>)
 8007624:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007628:	4b77      	ldr	r3, [pc, #476]	; (8007808 <eepromKontrol+0x308>)
 800762a:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800762c:	4b55      	ldr	r3, [pc, #340]	; (8007784 <eepromKontrol+0x284>)
 800762e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8007632:	4b76      	ldr	r3, [pc, #472]	; (800780c <eepromKontrol+0x30c>)
 8007634:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8007636:	4b53      	ldr	r3, [pc, #332]	; (8007784 <eepromKontrol+0x284>)
 8007638:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800763c:	4b74      	ldr	r3, [pc, #464]	; (8007810 <eepromKontrol+0x310>)
 800763e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8007640:	4b50      	ldr	r3, [pc, #320]	; (8007784 <eepromKontrol+0x284>)
 8007642:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007646:	4b73      	ldr	r3, [pc, #460]	; (8007814 <eepromKontrol+0x314>)
 8007648:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800764a:	4b4e      	ldr	r3, [pc, #312]	; (8007784 <eepromKontrol+0x284>)
 800764c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8007650:	4b71      	ldr	r3, [pc, #452]	; (8007818 <eepromKontrol+0x318>)
 8007652:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8007654:	4b4b      	ldr	r3, [pc, #300]	; (8007784 <eepromKontrol+0x284>)
 8007656:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800765a:	4b70      	ldr	r3, [pc, #448]	; (800781c <eepromKontrol+0x31c>)
 800765c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800765e:	4b49      	ldr	r3, [pc, #292]	; (8007784 <eepromKontrol+0x284>)
 8007660:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8007664:	4b6e      	ldr	r3, [pc, #440]	; (8007820 <eepromKontrol+0x320>)
 8007666:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8007668:	4b46      	ldr	r3, [pc, #280]	; (8007784 <eepromKontrol+0x284>)
 800766a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800766e:	4b6d      	ldr	r3, [pc, #436]	; (8007824 <eepromKontrol+0x324>)
 8007670:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8007672:	4b44      	ldr	r3, [pc, #272]	; (8007784 <eepromKontrol+0x284>)
 8007674:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8007678:	4b6b      	ldr	r3, [pc, #428]	; (8007828 <eepromKontrol+0x328>)
 800767a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800767c:	4b41      	ldr	r3, [pc, #260]	; (8007784 <eepromKontrol+0x284>)
 800767e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8007682:	4b6a      	ldr	r3, [pc, #424]	; (800782c <eepromKontrol+0x32c>)
 8007684:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8007686:	4b3f      	ldr	r3, [pc, #252]	; (8007784 <eepromKontrol+0x284>)
 8007688:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800768c:	4b68      	ldr	r3, [pc, #416]	; (8007830 <eepromKontrol+0x330>)
 800768e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8007690:	4b3c      	ldr	r3, [pc, #240]	; (8007784 <eepromKontrol+0x284>)
 8007692:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8007696:	4b67      	ldr	r3, [pc, #412]	; (8007834 <eepromKontrol+0x334>)
 8007698:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 800769a:	4b3a      	ldr	r3, [pc, #232]	; (8007784 <eepromKontrol+0x284>)
 800769c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80076a0:	4b65      	ldr	r3, [pc, #404]	; (8007838 <eepromKontrol+0x338>)
 80076a2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80076a4:	4b37      	ldr	r3, [pc, #220]	; (8007784 <eepromKontrol+0x284>)
 80076a6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80076aa:	4b64      	ldr	r3, [pc, #400]	; (800783c <eepromKontrol+0x33c>)
 80076ac:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80076ae:	4b35      	ldr	r3, [pc, #212]	; (8007784 <eepromKontrol+0x284>)
 80076b0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80076b4:	4b62      	ldr	r3, [pc, #392]	; (8007840 <eepromKontrol+0x340>)
 80076b6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80076b8:	4b32      	ldr	r3, [pc, #200]	; (8007784 <eepromKontrol+0x284>)
 80076ba:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80076be:	4b61      	ldr	r3, [pc, #388]	; (8007844 <eepromKontrol+0x344>)
 80076c0:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80076c2:	4b51      	ldr	r3, [pc, #324]	; (8007808 <eepromKontrol+0x308>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b09      	cmp	r3, #9
 80076c8:	d902      	bls.n	80076d0 <eepromKontrol+0x1d0>
	    calismaSayisi10000=0;
 80076ca:	4b4f      	ldr	r3, [pc, #316]	; (8007808 <eepromKontrol+0x308>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 80076d0:	4b4c      	ldr	r3, [pc, #304]	; (8007804 <eepromKontrol+0x304>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	d902      	bls.n	80076de <eepromKontrol+0x1de>
	    calismaSayisi1000=0;
 80076d8:	4b4a      	ldr	r3, [pc, #296]	; (8007804 <eepromKontrol+0x304>)
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 80076de:	4b48      	ldr	r3, [pc, #288]	; (8007800 <eepromKontrol+0x300>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b09      	cmp	r3, #9
 80076e4:	d902      	bls.n	80076ec <eepromKontrol+0x1ec>
	    calismaSayisi100=0;
 80076e6:	4b46      	ldr	r3, [pc, #280]	; (8007800 <eepromKontrol+0x300>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80076ec:	4b43      	ldr	r3, [pc, #268]	; (80077fc <eepromKontrol+0x2fc>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b09      	cmp	r3, #9
 80076f2:	d902      	bls.n	80076fa <eepromKontrol+0x1fa>
	    calismaSayisi10=0;
 80076f4:	4b41      	ldr	r3, [pc, #260]	; (80077fc <eepromKontrol+0x2fc>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80076fa:	4b3f      	ldr	r3, [pc, #252]	; (80077f8 <eepromKontrol+0x2f8>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d902      	bls.n	8007708 <eepromKontrol+0x208>
	    calismaSayisi1=0;
 8007702:	4b3d      	ldr	r3, [pc, #244]	; (80077f8 <eepromKontrol+0x2f8>)
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8007708:	4b21      	ldr	r3, [pc, #132]	; (8007790 <eepromKontrol+0x290>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d902      	bls.n	8007716 <eepromKontrol+0x216>
	    calismaSekli=0;
 8007710:	4b1f      	ldr	r3, [pc, #124]	; (8007790 <eepromKontrol+0x290>)
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8007716:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <eepromKontrol+0x294>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d902      	bls.n	8007724 <eepromKontrol+0x224>
	    emniyetCercevesi=1;
 800771e:	4b1d      	ldr	r3, [pc, #116]	; (8007794 <eepromKontrol+0x294>)
 8007720:	2201      	movs	r2, #1
 8007722:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8007724:	4b1c      	ldr	r3, [pc, #112]	; (8007798 <eepromKontrol+0x298>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d902      	bls.n	8007732 <eepromKontrol+0x232>
	    yavaslamaLimit=0;
 800772c:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <eepromKontrol+0x298>)
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8007732:	4b1a      	ldr	r3, [pc, #104]	; (800779c <eepromKontrol+0x29c>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d902      	bls.n	8007740 <eepromKontrol+0x240>
	    altLimit=1;
 800773a:	4b18      	ldr	r3, [pc, #96]	; (800779c <eepromKontrol+0x29c>)
 800773c:	2201      	movs	r2, #1
 800773e:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8007740:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <eepromKontrol+0x2a0>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d902      	bls.n	800774e <eepromKontrol+0x24e>
	    basincSalteri=1;
 8007748:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <eepromKontrol+0x2a0>)
 800774a:	2201      	movs	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800774e:	4b15      	ldr	r3, [pc, #84]	; (80077a4 <eepromKontrol+0x2a4>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b03      	cmp	r3, #3
 8007754:	d902      	bls.n	800775c <eepromKontrol+0x25c>
	    kapiSecimleri=3;
 8007756:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <eepromKontrol+0x2a4>)
 8007758:	2203      	movs	r2, #3
 800775a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800775c:	4b2f      	ldr	r3, [pc, #188]	; (800781c <eepromKontrol+0x31c>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d902      	bls.n	800776a <eepromKontrol+0x26a>
	    kapiAcTipi=0;
 8007764:	4b2d      	ldr	r3, [pc, #180]	; (800781c <eepromKontrol+0x31c>)
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800776a:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <eepromKontrol+0x2a8>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d902      	bls.n	8007778 <eepromKontrol+0x278>
	    kapi1Tip=1;
 8007772:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <eepromKontrol+0x2a8>)
 8007774:	2201      	movs	r2, #1
 8007776:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <eepromKontrol+0x2ac>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b05      	cmp	r3, #5
 800777e:	d966      	bls.n	800784e <eepromKontrol+0x34e>
 8007780:	e062      	b.n	8007848 <eepromKontrol+0x348>
 8007782:	bf00      	nop
 8007784:	20000128 	.word	0x20000128
 8007788:	200003ac 	.word	0x200003ac
 800778c:	200001fc 	.word	0x200001fc
 8007790:	20000225 	.word	0x20000225
 8007794:	20000228 	.word	0x20000228
 8007798:	20000229 	.word	0x20000229
 800779c:	2000022a 	.word	0x2000022a
 80077a0:	2000022b 	.word	0x2000022b
 80077a4:	2000022c 	.word	0x2000022c
 80077a8:	2000022d 	.word	0x2000022d
 80077ac:	2000023d 	.word	0x2000023d
 80077b0:	2000022e 	.word	0x2000022e
 80077b4:	2000023e 	.word	0x2000023e
 80077b8:	2000022f 	.word	0x2000022f
 80077bc:	2000023f 	.word	0x2000023f
 80077c0:	20000232 	.word	0x20000232
 80077c4:	20000233 	.word	0x20000233
 80077c8:	20000234 	.word	0x20000234
 80077cc:	20000235 	.word	0x20000235
 80077d0:	20000236 	.word	0x20000236
 80077d4:	20000237 	.word	0x20000237
 80077d8:	20000238 	.word	0x20000238
 80077dc:	20000239 	.word	0x20000239
 80077e0:	2000023a 	.word	0x2000023a
 80077e4:	2000023b 	.word	0x2000023b
 80077e8:	2000023c 	.word	0x2000023c
 80077ec:	20000240 	.word	0x20000240
 80077f0:	20000242 	.word	0x20000242
 80077f4:	20000220 	.word	0x20000220
 80077f8:	20000221 	.word	0x20000221
 80077fc:	20000222 	.word	0x20000222
 8007800:	20000008 	.word	0x20000008
 8007804:	20000009 	.word	0x20000009
 8007808:	20000223 	.word	0x20000223
 800780c:	20000245 	.word	0x20000245
 8007810:	20000243 	.word	0x20000243
 8007814:	20000231 	.word	0x20000231
 8007818:	20000244 	.word	0x20000244
 800781c:	20000230 	.word	0x20000230
 8007820:	20000246 	.word	0x20000246
 8007824:	20000247 	.word	0x20000247
 8007828:	20000248 	.word	0x20000248
 800782c:	20000249 	.word	0x20000249
 8007830:	2000024a 	.word	0x2000024a
 8007834:	2000024b 	.word	0x2000024b
 8007838:	2000024c 	.word	0x2000024c
 800783c:	2000024d 	.word	0x2000024d
 8007840:	2000024e 	.word	0x2000024e
 8007844:	2000024f 	.word	0x2000024f
	    kapi1AcSure=5;
 8007848:	4b58      	ldr	r3, [pc, #352]	; (80079ac <eepromKontrol+0x4ac>)
 800784a:	2205      	movs	r2, #5
 800784c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800784e:	4b58      	ldr	r3, [pc, #352]	; (80079b0 <eepromKontrol+0x4b0>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d902      	bls.n	800785c <eepromKontrol+0x35c>
	    kapi2Tip=1;
 8007856:	4b56      	ldr	r3, [pc, #344]	; (80079b0 <eepromKontrol+0x4b0>)
 8007858:	2201      	movs	r2, #1
 800785a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800785c:	4b55      	ldr	r3, [pc, #340]	; (80079b4 <eepromKontrol+0x4b4>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b05      	cmp	r3, #5
 8007862:	d902      	bls.n	800786a <eepromKontrol+0x36a>
	    kapi2AcSure=5;
 8007864:	4b53      	ldr	r3, [pc, #332]	; (80079b4 <eepromKontrol+0x4b4>)
 8007866:	2205      	movs	r2, #5
 8007868:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800786a:	4b53      	ldr	r3, [pc, #332]	; (80079b8 <eepromKontrol+0x4b8>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d902      	bls.n	8007878 <eepromKontrol+0x378>
	    kapitablaTip=1;
 8007872:	4b51      	ldr	r3, [pc, #324]	; (80079b8 <eepromKontrol+0x4b8>)
 8007874:	2201      	movs	r2, #1
 8007876:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8007878:	4b50      	ldr	r3, [pc, #320]	; (80079bc <eepromKontrol+0x4bc>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b02      	cmp	r3, #2
 800787e:	d902      	bls.n	8007886 <eepromKontrol+0x386>
	    kapiTablaAcKonum=2;
 8007880:	4b4e      	ldr	r3, [pc, #312]	; (80079bc <eepromKontrol+0x4bc>)
 8007882:	2202      	movs	r2, #2
 8007884:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8007886:	4b4e      	ldr	r3, [pc, #312]	; (80079c0 <eepromKontrol+0x4c0>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b05      	cmp	r3, #5
 800788c:	d902      	bls.n	8007894 <eepromKontrol+0x394>
	    kapiTablaAcSure=5;
 800788e:	4b4c      	ldr	r3, [pc, #304]	; (80079c0 <eepromKontrol+0x4c0>)
 8007890:	2205      	movs	r2, #5
 8007892:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8007894:	4b4b      	ldr	r3, [pc, #300]	; (80079c4 <eepromKontrol+0x4c4>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d902      	bls.n	80078a2 <eepromKontrol+0x3a2>
	    yukariYavasLimit=0;
 800789c:	4b49      	ldr	r3, [pc, #292]	; (80079c4 <eepromKontrol+0x4c4>)
 800789e:	2200      	movs	r2, #0
 80078a0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80078a2:	4b49      	ldr	r3, [pc, #292]	; (80079c8 <eepromKontrol+0x4c8>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d902      	bls.n	80078b0 <eepromKontrol+0x3b0>
	    devirmeYuruyusSecim=0;
 80078aa:	4b47      	ldr	r3, [pc, #284]	; (80079c8 <eepromKontrol+0x4c8>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80078b0:	4b46      	ldr	r3, [pc, #280]	; (80079cc <eepromKontrol+0x4cc>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d902      	bls.n	80078be <eepromKontrol+0x3be>
	    devirmeYukariIleriLimit=1;
 80078b8:	4b44      	ldr	r3, [pc, #272]	; (80079cc <eepromKontrol+0x4cc>)
 80078ba:	2201      	movs	r2, #1
 80078bc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80078be:	4b44      	ldr	r3, [pc, #272]	; (80079d0 <eepromKontrol+0x4d0>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d902      	bls.n	80078cc <eepromKontrol+0x3cc>
	    devirmeAsagiGeriLimit=1;
 80078c6:	4b42      	ldr	r3, [pc, #264]	; (80079d0 <eepromKontrol+0x4d0>)
 80078c8:	2201      	movs	r2, #1
 80078ca:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 80078cc:	4b41      	ldr	r3, [pc, #260]	; (80079d4 <eepromKontrol+0x4d4>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d902      	bls.n	80078da <eepromKontrol+0x3da>
	    devirmeSilindirTipi=0;
 80078d4:	4b3f      	ldr	r3, [pc, #252]	; (80079d4 <eepromKontrol+0x4d4>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80078da:	4b3f      	ldr	r3, [pc, #252]	; (80079d8 <eepromKontrol+0x4d8>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d902      	bls.n	80078e8 <eepromKontrol+0x3e8>
	    platformSilindirTipi=0;
 80078e2:	4b3d      	ldr	r3, [pc, #244]	; (80079d8 <eepromKontrol+0x4d8>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80078e8:	4b3c      	ldr	r3, [pc, #240]	; (80079dc <eepromKontrol+0x4dc>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b05      	cmp	r3, #5
 80078ee:	d902      	bls.n	80078f6 <eepromKontrol+0x3f6>
	    yukariValfTmr=0;
 80078f0:	4b3a      	ldr	r3, [pc, #232]	; (80079dc <eepromKontrol+0x4dc>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80078f6:	4b3a      	ldr	r3, [pc, #232]	; (80079e0 <eepromKontrol+0x4e0>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	d902      	bls.n	8007904 <eepromKontrol+0x404>
	    asagiValfTmr=0;
 80078fe:	4b38      	ldr	r3, [pc, #224]	; (80079e0 <eepromKontrol+0x4e0>)
 8007900:	2200      	movs	r2, #0
 8007902:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8007904:	4b37      	ldr	r3, [pc, #220]	; (80079e4 <eepromKontrol+0x4e4>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b05      	cmp	r3, #5
 800790a:	d902      	bls.n	8007912 <eepromKontrol+0x412>
	    devirmeYukariIleriTmr=0;
 800790c:	4b35      	ldr	r3, [pc, #212]	; (80079e4 <eepromKontrol+0x4e4>)
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8007912:	4b35      	ldr	r3, [pc, #212]	; (80079e8 <eepromKontrol+0x4e8>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b05      	cmp	r3, #5
 8007918:	d902      	bls.n	8007920 <eepromKontrol+0x420>
	    devirmeAsagiGeriTmr=0;
 800791a:	4b33      	ldr	r3, [pc, #204]	; (80079e8 <eepromKontrol+0x4e8>)
 800791c:	2200      	movs	r2, #0
 800791e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8007920:	4b32      	ldr	r3, [pc, #200]	; (80079ec <eepromKontrol+0x4ec>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2bb4      	cmp	r3, #180	; 0xb4
 8007926:	d902      	bls.n	800792e <eepromKontrol+0x42e>
	    makineCalismaTmr=60;
 8007928:	4b30      	ldr	r3, [pc, #192]	; (80079ec <eepromKontrol+0x4ec>)
 800792a:	223c      	movs	r2, #60	; 0x3c
 800792c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800792e:	4b30      	ldr	r3, [pc, #192]	; (80079f0 <eepromKontrol+0x4f0>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d902      	bls.n	800793c <eepromKontrol+0x43c>
	    buzzer=0;
 8007936:	4b2e      	ldr	r3, [pc, #184]	; (80079f0 <eepromKontrol+0x4f0>)
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800793c:	4b2d      	ldr	r3, [pc, #180]	; (80079f4 <eepromKontrol+0x4f4>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d902      	bls.n	800794a <eepromKontrol+0x44a>
	    demoMode=0;
 8007944:	4b2b      	ldr	r3, [pc, #172]	; (80079f4 <eepromKontrol+0x4f4>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800794a:	4b2b      	ldr	r3, [pc, #172]	; (80079f8 <eepromKontrol+0x4f8>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d902      	bls.n	8007958 <eepromKontrol+0x458>
	    calismaSayModu=0;
 8007952:	4b29      	ldr	r3, [pc, #164]	; (80079f8 <eepromKontrol+0x4f8>)
 8007954:	2200      	movs	r2, #0
 8007956:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8007958:	4b28      	ldr	r3, [pc, #160]	; (80079fc <eepromKontrol+0x4fc>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d902      	bls.n	8007966 <eepromKontrol+0x466>
	    dilSecim=0;
 8007960:	4b26      	ldr	r3, [pc, #152]	; (80079fc <eepromKontrol+0x4fc>)
 8007962:	2200      	movs	r2, #0
 8007964:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8007966:	4b26      	ldr	r3, [pc, #152]	; (8007a00 <eepromKontrol+0x500>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d902      	bls.n	8007974 <eepromKontrol+0x474>
		iotMode=0;
 800796e:	4b24      	ldr	r3, [pc, #144]	; (8007a00 <eepromKontrol+0x500>)
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8007974:	4b23      	ldr	r3, [pc, #140]	; (8007a04 <eepromKontrol+0x504>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a23      	ldr	r2, [pc, #140]	; (8007a08 <eepromKontrol+0x508>)
 800797a:	441a      	add	r2, r3
 800797c:	4b23      	ldr	r3, [pc, #140]	; (8007a0c <eepromKontrol+0x50c>)
 800797e:	6810      	ldr	r0, [r2, #0]
 8007980:	6851      	ldr	r1, [r2, #4]
 8007982:	6892      	ldr	r2, [r2, #8]
 8007984:	6018      	str	r0, [r3, #0]
 8007986:	6059      	str	r1, [r3, #4]
 8007988:	609a      	str	r2, [r3, #8]
	HAL_Delay(250);
 800798a:	20fa      	movs	r0, #250	; 0xfa
 800798c:	f000 fefc 	bl	8008788 <HAL_Delay>
	readFromEEPROM(1);
 8007990:	2001      	movs	r0, #1
 8007992:	f7fb f9b5 	bl	8002d00 <readFromEEPROM>
	HAL_Delay(250);
 8007996:	20fa      	movs	r0, #250	; 0xfa
 8007998:	f000 fef6 	bl	8008788 <HAL_Delay>
	readFromEEPROM(2);
 800799c:	2002      	movs	r0, #2
 800799e:	f7fb f9af 	bl	8002d00 <readFromEEPROM>
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	2000023d 	.word	0x2000023d
 80079b0:	2000022e 	.word	0x2000022e
 80079b4:	2000023e 	.word	0x2000023e
 80079b8:	2000022f 	.word	0x2000022f
 80079bc:	20000231 	.word	0x20000231
 80079c0:	2000023f 	.word	0x2000023f
 80079c4:	20000232 	.word	0x20000232
 80079c8:	20000233 	.word	0x20000233
 80079cc:	20000234 	.word	0x20000234
 80079d0:	20000235 	.word	0x20000235
 80079d4:	20000236 	.word	0x20000236
 80079d8:	20000237 	.word	0x20000237
 80079dc:	20000238 	.word	0x20000238
 80079e0:	20000239 	.word	0x20000239
 80079e4:	2000023a 	.word	0x2000023a
 80079e8:	2000023b 	.word	0x2000023b
 80079ec:	2000023c 	.word	0x2000023c
 80079f0:	20000240 	.word	0x20000240
 80079f4:	20000242 	.word	0x20000242
 80079f8:	20000244 	.word	0x20000244
 80079fc:	20000245 	.word	0x20000245
 8007a00:	20000243 	.word	0x20000243
 8007a04:	2000000c 	.word	0x2000000c
 8007a08:	20000128 	.word	0x20000128
 8007a0c:	200001a0 	.word	0x200001a0

08007a10 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8007a10:	b590      	push	{r4, r7, lr}
 8007a12:	b089      	sub	sp, #36	; 0x24
 8007a14:	af04      	add	r7, sp, #16
 8007a16:	4603      	mov	r3, r0
 8007a18:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8007a1a:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <hata2EEPROM+0xa4>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	1e5a      	subs	r2, r3, #1
 8007a20:	4b25      	ldr	r3, [pc, #148]	; (8007ab8 <hata2EEPROM+0xa8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4413      	add	r3, r2
 8007a26:	4a25      	ldr	r2, [pc, #148]	; (8007abc <hata2EEPROM+0xac>)
 8007a28:	5cd3      	ldrb	r3, [r2, r3]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8007a2e:	f000 f849 	bl	8007ac4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8007a32:	e000      	b.n	8007a36 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8007a34:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	e012      	b.n	8007a62 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8007a3c:	4b1e      	ldr	r3, [pc, #120]	; (8007ab8 <hata2EEPROM+0xa8>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	4a1d      	ldr	r2, [pc, #116]	; (8007abc <hata2EEPROM+0xac>)
 8007a46:	5cd3      	ldrb	r3, [r2, r3]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d107      	bne.n	8007a5c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8007a4c:	4b1a      	ldr	r3, [pc, #104]	; (8007ab8 <hata2EEPROM+0xa8>)
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	4919      	ldr	r1, [pc, #100]	; (8007abc <hata2EEPROM+0xac>)
 8007a56:	79fa      	ldrb	r2, [r7, #7]
 8007a58:	54ca      	strb	r2, [r1, r3]
					break;
 8007a5a:	e007      	b.n	8007a6c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	4b14      	ldr	r3, [pc, #80]	; (8007ab4 <hata2EEPROM+0xa4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	dbe7      	blt.n	8007a3c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8007a6c:	4b12      	ldr	r3, [pc, #72]	; (8007ab8 <hata2EEPROM+0xa8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	b299      	uxth	r1, r3
 8007a72:	4b10      	ldr	r3, [pc, #64]	; (8007ab4 <hata2EEPROM+0xa4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	b298      	uxth	r0, r3
 8007a78:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <hata2EEPROM+0xa8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a0f      	ldr	r2, [pc, #60]	; (8007abc <hata2EEPROM+0xac>)
 8007a7e:	4413      	add	r3, r2
 8007a80:	4a0c      	ldr	r2, [pc, #48]	; (8007ab4 <hata2EEPROM+0xa4>)
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	b292      	uxth	r2, r2
 8007a86:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8007a8a:	9402      	str	r4, [sp, #8]
 8007a8c:	9201      	str	r2, [sp, #4]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	4603      	mov	r3, r0
 8007a92:	460a      	mov	r2, r1
 8007a94:	21a0      	movs	r1, #160	; 0xa0
 8007a96:	480a      	ldr	r0, [pc, #40]	; (8007ac0 <hata2EEPROM+0xb0>)
 8007a98:	f001 ff00 	bl	800989c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8007a9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007aa0:	f000 fe72 	bl	8008788 <HAL_Delay>
	eepromKontrol(1);
 8007aa4:	2001      	movs	r0, #1
 8007aa6:	f7ff fd2b 	bl	8007500 <eepromKontrol>
}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd90      	pop	{r4, r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	200000a8 	.word	0x200000a8
 8007ab8:	200000ac 	.word	0x200000ac
 8007abc:	20000128 	.word	0x20000128
 8007ac0:	200003ac 	.word	0x200003ac

08007ac4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8007aca:	2300      	movs	r3, #0
 8007acc:	607b      	str	r3, [r7, #4]
 8007ace:	e009      	b.n	8007ae4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8007ad0:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <eepromDataFillWithEmpty+0x38>)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <eepromDataFillWithEmpty+0x3c>)
 8007ada:	2100      	movs	r1, #0
 8007adc:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	607b      	str	r3, [r7, #4]
 8007ae4:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <eepromDataFillWithEmpty+0x40>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	dbf0      	blt.n	8007ad0 <eepromDataFillWithEmpty+0xc>
	}
}
 8007aee:	bf00      	nop
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	20000080 	.word	0x20000080
 8007b00:	20000128 	.word	0x20000128
 8007b04:	200000a8 	.word	0x200000a8

08007b08 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
	timer1=millis;
 8007b0c:	4b47      	ldr	r3, [pc, #284]	; (8007c2c <bekle+0x124>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a47      	ldr	r2, [pc, #284]	; (8007c30 <bekle+0x128>)
 8007b12:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007b14:	e002      	b.n	8007b1c <bekle+0x14>
    	butonKontrol = 1;
 8007b16:	4b47      	ldr	r3, [pc, #284]	; (8007c34 <bekle+0x12c>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	4846      	ldr	r0, [pc, #280]	; (8007c38 <bekle+0x130>)
 8007b20:	f001 fc02 	bl	8009328 <HAL_GPIO_ReadPin>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d109      	bne.n	8007b3e <bekle+0x36>
 8007b2a:	4b40      	ldr	r3, [pc, #256]	; (8007c2c <bekle+0x124>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <bekle+0x128>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d0ef      	beq.n	8007b16 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007b36:	e002      	b.n	8007b3e <bekle+0x36>
    	butonKontrol = 1;
 8007b38:	4b3e      	ldr	r3, [pc, #248]	; (8007c34 <bekle+0x12c>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007b3e:	2108      	movs	r1, #8
 8007b40:	483e      	ldr	r0, [pc, #248]	; (8007c3c <bekle+0x134>)
 8007b42:	f001 fbf1 	bl	8009328 <HAL_GPIO_ReadPin>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d109      	bne.n	8007b60 <bekle+0x58>
 8007b4c:	4b37      	ldr	r3, [pc, #220]	; (8007c2c <bekle+0x124>)
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	4b37      	ldr	r3, [pc, #220]	; (8007c30 <bekle+0x128>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d0ef      	beq.n	8007b38 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007b58:	e002      	b.n	8007b60 <bekle+0x58>
    	butonKontrol = 1;
 8007b5a:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <bekle+0x12c>)
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007b60:	2102      	movs	r1, #2
 8007b62:	4835      	ldr	r0, [pc, #212]	; (8007c38 <bekle+0x130>)
 8007b64:	f001 fbe0 	bl	8009328 <HAL_GPIO_ReadPin>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d109      	bne.n	8007b82 <bekle+0x7a>
 8007b6e:	4b2f      	ldr	r3, [pc, #188]	; (8007c2c <bekle+0x124>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b2f      	ldr	r3, [pc, #188]	; (8007c30 <bekle+0x128>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d0ef      	beq.n	8007b5a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007b7a:	e002      	b.n	8007b82 <bekle+0x7a>
    	butonKontrol = 1;
 8007b7c:	4b2d      	ldr	r3, [pc, #180]	; (8007c34 <bekle+0x12c>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007b82:	2104      	movs	r1, #4
 8007b84:	482c      	ldr	r0, [pc, #176]	; (8007c38 <bekle+0x130>)
 8007b86:	f001 fbcf 	bl	8009328 <HAL_GPIO_ReadPin>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d109      	bne.n	8007ba4 <bekle+0x9c>
 8007b90:	4b26      	ldr	r3, [pc, #152]	; (8007c2c <bekle+0x124>)
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	4b26      	ldr	r3, [pc, #152]	; (8007c30 <bekle+0x128>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d0ef      	beq.n	8007b7c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007b9c:	e002      	b.n	8007ba4 <bekle+0x9c>
    	butonKontrol = 1;
 8007b9e:	4b25      	ldr	r3, [pc, #148]	; (8007c34 <bekle+0x12c>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8007ba4:	2108      	movs	r1, #8
 8007ba6:	4824      	ldr	r0, [pc, #144]	; (8007c38 <bekle+0x130>)
 8007ba8:	f001 fbbe 	bl	8009328 <HAL_GPIO_ReadPin>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d109      	bne.n	8007bc6 <bekle+0xbe>
 8007bb2:	4b1e      	ldr	r3, [pc, #120]	; (8007c2c <bekle+0x124>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b1e      	ldr	r3, [pc, #120]	; (8007c30 <bekle+0x128>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d0ef      	beq.n	8007b9e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8007bbe:	e002      	b.n	8007bc6 <bekle+0xbe>
    	butonKontrol = 1;
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <bekle+0x12c>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8007bc6:	2180      	movs	r1, #128	; 0x80
 8007bc8:	481c      	ldr	r0, [pc, #112]	; (8007c3c <bekle+0x134>)
 8007bca:	f001 fbad 	bl	8009328 <HAL_GPIO_ReadPin>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d109      	bne.n	8007be8 <bekle+0xe0>
 8007bd4:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <bekle+0x124>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <bekle+0x128>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d0ef      	beq.n	8007bc0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8007be0:	e002      	b.n	8007be8 <bekle+0xe0>
    	butonKontrol = 1;
 8007be2:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <bekle+0x12c>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8007be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bec:	4813      	ldr	r0, [pc, #76]	; (8007c3c <bekle+0x134>)
 8007bee:	f001 fb9b 	bl	8009328 <HAL_GPIO_ReadPin>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d109      	bne.n	8007c0c <bekle+0x104>
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <bekle+0x124>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <bekle+0x128>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d0ee      	beq.n	8007be2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8007c04:	e002      	b.n	8007c0c <bekle+0x104>
    	butonKontrol = 1;
 8007c06:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <bekle+0x12c>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8007c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c10:	480a      	ldr	r0, [pc, #40]	; (8007c3c <bekle+0x134>)
 8007c12:	f001 fb89 	bl	8009328 <HAL_GPIO_ReadPin>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d105      	bne.n	8007c28 <bekle+0x120>
 8007c1c:	4b03      	ldr	r3, [pc, #12]	; (8007c2c <bekle+0x124>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <bekle+0x128>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d0ee      	beq.n	8007c06 <bekle+0xfe>
    }

}
 8007c28:	bf00      	nop
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000200 	.word	0x20000200
 8007c30:	20000208 	.word	0x20000208
 8007c34:	20000253 	.word	0x20000253
 8007c38:	40010800 	.word	0x40010800
 8007c3c:	40011000 	.word	0x40011000

08007c40 <i2cTest>:

void i2cTest() {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8007c46:	463b      	mov	r3, r7
 8007c48:	2200      	movs	r2, #0
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	605a      	str	r2, [r3, #4]
 8007c4e:	609a      	str	r2, [r3, #8]
 8007c50:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8007c52:	4b50      	ldr	r3, [pc, #320]	; (8007d94 <i2cTest+0x154>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	4b4e      	ldr	r3, [pc, #312]	; (8007d94 <i2cTest+0x154>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0201 	bic.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8007c62:	484c      	ldr	r0, [pc, #304]	; (8007d94 <i2cTest+0x154>)
 8007c64:	f001 fcec 	bl	8009640 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c68:	23c0      	movs	r3, #192	; 0xc0
 8007c6a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8007c6c:	2311      	movs	r3, #17
 8007c6e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8007c70:	2301      	movs	r3, #1
 8007c72:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8007c74:	2303      	movs	r3, #3
 8007c76:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8007c78:	463b      	mov	r3, r7
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4846      	ldr	r0, [pc, #280]	; (8007d98 <i2cTest+0x158>)
 8007c7e:	f001 f8f3 	bl	8008e68 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007c82:	2201      	movs	r2, #1
 8007c84:	2140      	movs	r1, #64	; 0x40
 8007c86:	4844      	ldr	r0, [pc, #272]	; (8007d98 <i2cTest+0x158>)
 8007c88:	f001 fb65 	bl	8009356 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	2180      	movs	r1, #128	; 0x80
 8007c90:	4841      	ldr	r0, [pc, #260]	; (8007d98 <i2cTest+0x158>)
 8007c92:	f001 fb60 	bl	8009356 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8007c96:	200a      	movs	r0, #10
 8007c98:	f000 fd76 	bl	8008788 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8007c9c:	bf00      	nop
 8007c9e:	2140      	movs	r1, #64	; 0x40
 8007ca0:	483d      	ldr	r0, [pc, #244]	; (8007d98 <i2cTest+0x158>)
 8007ca2:	f001 fb41 	bl	8009328 <HAL_GPIO_ReadPin>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d006      	beq.n	8007cba <i2cTest+0x7a>
 8007cac:	2180      	movs	r1, #128	; 0x80
 8007cae:	483a      	ldr	r0, [pc, #232]	; (8007d98 <i2cTest+0x158>)
 8007cb0:	f001 fb3a 	bl	8009328 <HAL_GPIO_ReadPin>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d1f1      	bne.n	8007c9e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2180      	movs	r1, #128	; 0x80
 8007cbe:	4836      	ldr	r0, [pc, #216]	; (8007d98 <i2cTest+0x158>)
 8007cc0:	f001 fb49 	bl	8009356 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8007cc4:	200a      	movs	r0, #10
 8007cc6:	f000 fd5f 	bl	8008788 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8007cca:	bf00      	nop
 8007ccc:	2180      	movs	r1, #128	; 0x80
 8007cce:	4832      	ldr	r0, [pc, #200]	; (8007d98 <i2cTest+0x158>)
 8007cd0:	f001 fb2a 	bl	8009328 <HAL_GPIO_ReadPin>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d0f8      	beq.n	8007ccc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2140      	movs	r1, #64	; 0x40
 8007cde:	482e      	ldr	r0, [pc, #184]	; (8007d98 <i2cTest+0x158>)
 8007ce0:	f001 fb39 	bl	8009356 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8007ce4:	200a      	movs	r0, #10
 8007ce6:	f000 fd4f 	bl	8008788 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8007cea:	bf00      	nop
 8007cec:	2140      	movs	r1, #64	; 0x40
 8007cee:	482a      	ldr	r0, [pc, #168]	; (8007d98 <i2cTest+0x158>)
 8007cf0:	f001 fb1a 	bl	8009328 <HAL_GPIO_ReadPin>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d0f8      	beq.n	8007cec <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	2140      	movs	r1, #64	; 0x40
 8007cfe:	4826      	ldr	r0, [pc, #152]	; (8007d98 <i2cTest+0x158>)
 8007d00:	f001 fb29 	bl	8009356 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8007d04:	200a      	movs	r0, #10
 8007d06:	f000 fd3f 	bl	8008788 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8007d0a:	bf00      	nop
 8007d0c:	2140      	movs	r1, #64	; 0x40
 8007d0e:	4822      	ldr	r0, [pc, #136]	; (8007d98 <i2cTest+0x158>)
 8007d10:	f001 fb0a 	bl	8009328 <HAL_GPIO_ReadPin>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d1f8      	bne.n	8007d0c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	2180      	movs	r1, #128	; 0x80
 8007d1e:	481e      	ldr	r0, [pc, #120]	; (8007d98 <i2cTest+0x158>)
 8007d20:	f001 fb19 	bl	8009356 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8007d24:	200a      	movs	r0, #10
 8007d26:	f000 fd2f 	bl	8008788 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8007d2a:	bf00      	nop
 8007d2c:	2180      	movs	r1, #128	; 0x80
 8007d2e:	481a      	ldr	r0, [pc, #104]	; (8007d98 <i2cTest+0x158>)
 8007d30:	f001 fafa 	bl	8009328 <HAL_GPIO_ReadPin>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d1f8      	bne.n	8007d2c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007d3a:	23c0      	movs	r3, #192	; 0xc0
 8007d3c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8007d3e:	2312      	movs	r3, #18
 8007d40:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8007d42:	2301      	movs	r3, #1
 8007d44:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8007d46:	2303      	movs	r3, #3
 8007d48:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4812      	ldr	r0, [pc, #72]	; (8007d98 <i2cTest+0x158>)
 8007d50:	f001 f88a 	bl	8008e68 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8007d54:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <i2cTest+0x154>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	4b0e      	ldr	r3, [pc, #56]	; (8007d94 <i2cTest+0x154>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d62:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8007d64:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <i2cTest+0x154>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <i2cTest+0x154>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d72:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8007d74:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <i2cTest+0x154>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <i2cTest+0x154>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8007d84:	4803      	ldr	r0, [pc, #12]	; (8007d94 <i2cTest+0x154>)
 8007d86:	f001 fb17 	bl	80093b8 <HAL_I2C_Init>
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	200003ac 	.word	0x200003ac
 8007d98:	40010c00 	.word	0x40010c00

08007d9c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	4a03      	ldr	r2, [pc, #12]	; (8007db8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007dac:	6013      	str	r3, [r2, #0]
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr
 8007db8:	20000200 	.word	0x20000200

08007dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007dc0:	f000 fc80 	bl	80086c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dc8:	f000 fcde 	bl	8008788 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007dcc:	f000 f8b0 	bl	8007f30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007dd0:	f000 f9d2 	bl	8008178 <MX_GPIO_Init>
  MX_CAN_Init();
 8007dd4:	f000 f8f2 	bl	8007fbc <MX_CAN_Init>
  MX_I2C1_Init();
 8007dd8:	f000 f924 	bl	8008024 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007ddc:	f000 f950 	bl	8008080 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007de0:	f000 f9a0 	bl	8008124 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007de4:	2201      	movs	r2, #1
 8007de6:	2140      	movs	r1, #64	; 0x40
 8007de8:	4845      	ldr	r0, [pc, #276]	; (8007f00 <main+0x144>)
 8007dea:	f001 fab4 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007dee:	2201      	movs	r2, #1
 8007df0:	2180      	movs	r1, #128	; 0x80
 8007df2:	4843      	ldr	r0, [pc, #268]	; (8007f00 <main+0x144>)
 8007df4:	f001 faaf 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007df8:	200a      	movs	r0, #10
 8007dfa:	f000 fcc5 	bl	8008788 <HAL_Delay>
  lcd_init();
 8007dfe:	f7fa fd1b 	bl	8002838 <lcd_init>
  HAL_Delay(10);
 8007e02:	200a      	movs	r0, #10
 8007e04:	f000 fcc0 	bl	8008788 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007e08:	483e      	ldr	r0, [pc, #248]	; (8007f04 <main+0x148>)
 8007e0a:	f003 f957 	bl	800b0bc <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e0e:	bf00      	nop
 8007e10:	483d      	ldr	r0, [pc, #244]	; (8007f08 <main+0x14c>)
 8007e12:	f002 f8b2 	bl	8009f7a <HAL_I2C_GetError>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d0f9      	beq.n	8007e10 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e1c:	bf00      	nop
 8007e1e:	483a      	ldr	r0, [pc, #232]	; (8007f08 <main+0x14c>)
 8007e20:	f002 f89e 	bl	8009f60 <HAL_I2C_GetState>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d1f9      	bne.n	8007e1e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e30:	4833      	ldr	r0, [pc, #204]	; (8007f00 <main+0x144>)
 8007e32:	f001 fa90 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e36:	2200      	movs	r2, #0
 8007e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e3c:	4830      	ldr	r0, [pc, #192]	; (8007f00 <main+0x144>)
 8007e3e:	f001 fa8a 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2104      	movs	r1, #4
 8007e46:	482e      	ldr	r0, [pc, #184]	; (8007f00 <main+0x144>)
 8007e48:	f001 fa85 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2102      	movs	r1, #2
 8007e50:	482b      	ldr	r0, [pc, #172]	; (8007f00 <main+0x144>)
 8007e52:	f001 fa80 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e56:	2200      	movs	r2, #0
 8007e58:	2101      	movs	r1, #1
 8007e5a:	4829      	ldr	r0, [pc, #164]	; (8007f00 <main+0x144>)
 8007e5c:	f001 fa7b 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e60:	2200      	movs	r2, #0
 8007e62:	2120      	movs	r1, #32
 8007e64:	4829      	ldr	r0, [pc, #164]	; (8007f0c <main+0x150>)
 8007e66:	f001 fa76 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2110      	movs	r1, #16
 8007e6e:	4827      	ldr	r0, [pc, #156]	; (8007f0c <main+0x150>)
 8007e70:	f001 fa71 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e74:	2200      	movs	r2, #0
 8007e76:	2180      	movs	r1, #128	; 0x80
 8007e78:	4825      	ldr	r0, [pc, #148]	; (8007f10 <main+0x154>)
 8007e7a:	f001 fa6c 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2140      	movs	r1, #64	; 0x40
 8007e82:	4823      	ldr	r0, [pc, #140]	; (8007f10 <main+0x154>)
 8007e84:	f001 fa67 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2120      	movs	r1, #32
 8007e8c:	4820      	ldr	r0, [pc, #128]	; (8007f10 <main+0x154>)
 8007e8e:	f001 fa62 	bl	8009356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007e92:	2200      	movs	r2, #0
 8007e94:	2110      	movs	r1, #16
 8007e96:	481e      	ldr	r0, [pc, #120]	; (8007f10 <main+0x154>)
 8007e98:	f001 fa5d 	bl	8009356 <HAL_GPIO_WritePin>

  i2cTest();
 8007e9c:	f7ff fed0 	bl	8007c40 <i2cTest>
  HAL_Delay(100);
 8007ea0:	2064      	movs	r0, #100	; 0x64
 8007ea2:	f000 fc71 	bl	8008788 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007ea6:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <main+0x158>)
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	2001      	movs	r0, #1
 8007eac:	f7fa fcf6 	bl	800289c <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007eb0:	4a19      	ldr	r2, [pc, #100]	; (8007f18 <main+0x15c>)
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	2002      	movs	r0, #2
 8007eb6:	f7fa fcf1 	bl	800289c <lcd_print>
  HAL_Delay(1000);
 8007eba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ebe:	f000 fc63 	bl	8008788 <HAL_Delay>
  lcd_clear();
 8007ec2:	f7fa fd3a 	bl	800293a <lcd_clear>

  eepromKontrol(0);
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	f7ff fb1a 	bl	8007500 <eepromKontrol>
  HAL_Delay(200);
 8007ecc:	20c8      	movs	r0, #200	; 0xc8
 8007ece:	f000 fc5b 	bl	8008788 <HAL_Delay>

  lcd_clear();
 8007ed2:	f7fa fd32 	bl	800293a <lcd_clear>
  HAL_Delay(200);
 8007ed6:	20c8      	movs	r0, #200	; 0xc8
 8007ed8:	f000 fc56 	bl	8008788 <HAL_Delay>

  backLightTimer = millis;
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <main+0x160>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0f      	ldr	r2, [pc, #60]	; (8007f20 <main+0x164>)
 8007ee2:	6013      	str	r3, [r2, #0]
	  if(wifiPass[0] != '\0') {
		  takeWifiPass(0);
	  }
  }*/

  ESP8266_Init(&huart1, "iPhone", "ipek123456");
 8007ee4:	4a0f      	ldr	r2, [pc, #60]	; (8007f24 <main+0x168>)
 8007ee6:	4910      	ldr	r1, [pc, #64]	; (8007f28 <main+0x16c>)
 8007ee8:	4810      	ldr	r0, [pc, #64]	; (8007f2c <main+0x170>)
 8007eea:	f7f8 f9a3 	bl	8000234 <ESP8266_Init>
  HAL_Delay(250);
 8007eee:	20fa      	movs	r0, #250	; 0xfa
 8007ef0:	f000 fc4a 	bl	8008788 <HAL_Delay>
  convertAndSendData();
 8007ef4:	f7ff fad0 	bl	8007498 <convertAndSendData>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007ef8:	f7fa f9a0 	bl	800223c <mainLoop>
 8007efc:	e7fc      	b.n	8007ef8 <main+0x13c>
 8007efe:	bf00      	nop
 8007f00:	40010c00 	.word	0x40010c00
 8007f04:	20000400 	.word	0x20000400
 8007f08:	200003ac 	.word	0x200003ac
 8007f0c:	40011000 	.word	0x40011000
 8007f10:	40010800 	.word	0x40010800
 8007f14:	0800dcb4 	.word	0x0800dcb4
 8007f18:	0800dcc8 	.word	0x0800dcc8
 8007f1c:	20000200 	.word	0x20000200
 8007f20:	2000021c 	.word	0x2000021c
 8007f24:	0800dcdc 	.word	0x0800dcdc
 8007f28:	0800dce8 	.word	0x0800dce8
 8007f2c:	20000448 	.word	0x20000448

08007f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b090      	sub	sp, #64	; 0x40
 8007f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f36:	f107 0318 	add.w	r3, r7, #24
 8007f3a:	2228      	movs	r2, #40	; 0x28
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f004 fb58 	bl	800c5f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f44:	1d3b      	adds	r3, r7, #4
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	605a      	str	r2, [r3, #4]
 8007f4c:	609a      	str	r2, [r3, #8]
 8007f4e:	60da      	str	r2, [r3, #12]
 8007f50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f52:	2301      	movs	r3, #1
 8007f54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f60:	2301      	movs	r3, #1
 8007f62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f64:	2302      	movs	r3, #2
 8007f66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f74:	f107 0318 	add.w	r3, r7, #24
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f002 fc3f 	bl	800a7fc <HAL_RCC_OscConfig>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007f84:	f000 f9a2 	bl	80082cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f88:	230f      	movs	r3, #15
 8007f8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	2102      	movs	r1, #2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f002 feac 	bl	800ad00 <HAL_RCC_ClockConfig>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007fae:	f000 f98d 	bl	80082cc <Error_Handler>
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	3740      	adds	r7, #64	; 0x40
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007fc0:	4b16      	ldr	r3, [pc, #88]	; (800801c <MX_CAN_Init+0x60>)
 8007fc2:	4a17      	ldr	r2, [pc, #92]	; (8008020 <MX_CAN_Init+0x64>)
 8007fc4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007fc6:	4b15      	ldr	r3, [pc, #84]	; (800801c <MX_CAN_Init+0x60>)
 8007fc8:	2210      	movs	r2, #16
 8007fca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007fcc:	4b13      	ldr	r3, [pc, #76]	; (800801c <MX_CAN_Init+0x60>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <MX_CAN_Init+0x60>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007fd8:	4b10      	ldr	r3, [pc, #64]	; (800801c <MX_CAN_Init+0x60>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <MX_CAN_Init+0x60>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007fe4:	4b0d      	ldr	r3, [pc, #52]	; (800801c <MX_CAN_Init+0x60>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007fea:	4b0c      	ldr	r3, [pc, #48]	; (800801c <MX_CAN_Init+0x60>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <MX_CAN_Init+0x60>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007ff6:	4b09      	ldr	r3, [pc, #36]	; (800801c <MX_CAN_Init+0x60>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007ffc:	4b07      	ldr	r3, [pc, #28]	; (800801c <MX_CAN_Init+0x60>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008002:	4b06      	ldr	r3, [pc, #24]	; (800801c <MX_CAN_Init+0x60>)
 8008004:	2200      	movs	r2, #0
 8008006:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008008:	4804      	ldr	r0, [pc, #16]	; (800801c <MX_CAN_Init+0x60>)
 800800a:	f000 fbe1 	bl	80087d0 <HAL_CAN_Init>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008014:	f000 f95a 	bl	80082cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008018:	bf00      	nop
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20000384 	.word	0x20000384
 8008020:	40006400 	.word	0x40006400

08008024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008028:	4b12      	ldr	r3, [pc, #72]	; (8008074 <MX_I2C1_Init+0x50>)
 800802a:	4a13      	ldr	r2, [pc, #76]	; (8008078 <MX_I2C1_Init+0x54>)
 800802c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800802e:	4b11      	ldr	r3, [pc, #68]	; (8008074 <MX_I2C1_Init+0x50>)
 8008030:	4a12      	ldr	r2, [pc, #72]	; (800807c <MX_I2C1_Init+0x58>)
 8008032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008034:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <MX_I2C1_Init+0x50>)
 8008036:	2200      	movs	r2, #0
 8008038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800803a:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <MX_I2C1_Init+0x50>)
 800803c:	2200      	movs	r2, #0
 800803e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008040:	4b0c      	ldr	r3, [pc, #48]	; (8008074 <MX_I2C1_Init+0x50>)
 8008042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <MX_I2C1_Init+0x50>)
 800804a:	2200      	movs	r2, #0
 800804c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800804e:	4b09      	ldr	r3, [pc, #36]	; (8008074 <MX_I2C1_Init+0x50>)
 8008050:	2200      	movs	r2, #0
 8008052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008054:	4b07      	ldr	r3, [pc, #28]	; (8008074 <MX_I2C1_Init+0x50>)
 8008056:	2200      	movs	r2, #0
 8008058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800805a:	4b06      	ldr	r3, [pc, #24]	; (8008074 <MX_I2C1_Init+0x50>)
 800805c:	2200      	movs	r2, #0
 800805e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008060:	4804      	ldr	r0, [pc, #16]	; (8008074 <MX_I2C1_Init+0x50>)
 8008062:	f001 f9a9 	bl	80093b8 <HAL_I2C_Init>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800806c:	f000 f92e 	bl	80082cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008070:	bf00      	nop
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200003ac 	.word	0x200003ac
 8008078:	40005400 	.word	0x40005400
 800807c:	00061a80 	.word	0x00061a80

08008080 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008086:	f107 0308 	add.w	r3, r7, #8
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	605a      	str	r2, [r3, #4]
 8008090:	609a      	str	r2, [r3, #8]
 8008092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008094:	463b      	mov	r3, r7
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800809c:	4b1f      	ldr	r3, [pc, #124]	; (800811c <MX_TIM1_Init+0x9c>)
 800809e:	4a20      	ldr	r2, [pc, #128]	; (8008120 <MX_TIM1_Init+0xa0>)
 80080a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80080a2:	4b1e      	ldr	r3, [pc, #120]	; (800811c <MX_TIM1_Init+0x9c>)
 80080a4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80080a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080aa:	4b1c      	ldr	r3, [pc, #112]	; (800811c <MX_TIM1_Init+0x9c>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80080b0:	4b1a      	ldr	r3, [pc, #104]	; (800811c <MX_TIM1_Init+0x9c>)
 80080b2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80080b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080b8:	4b18      	ldr	r3, [pc, #96]	; (800811c <MX_TIM1_Init+0x9c>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80080be:	4b17      	ldr	r3, [pc, #92]	; (800811c <MX_TIM1_Init+0x9c>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080c4:	4b15      	ldr	r3, [pc, #84]	; (800811c <MX_TIM1_Init+0x9c>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80080ca:	4814      	ldr	r0, [pc, #80]	; (800811c <MX_TIM1_Init+0x9c>)
 80080cc:	f002 ffa6 	bl	800b01c <HAL_TIM_Base_Init>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80080d6:	f000 f8f9 	bl	80082cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80080e0:	f107 0308 	add.w	r3, r7, #8
 80080e4:	4619      	mov	r1, r3
 80080e6:	480d      	ldr	r0, [pc, #52]	; (800811c <MX_TIM1_Init+0x9c>)
 80080e8:	f003 f950 	bl	800b38c <HAL_TIM_ConfigClockSource>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80080f2:	f000 f8eb 	bl	80082cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080f6:	2300      	movs	r3, #0
 80080f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80080fe:	463b      	mov	r3, r7
 8008100:	4619      	mov	r1, r3
 8008102:	4806      	ldr	r0, [pc, #24]	; (800811c <MX_TIM1_Init+0x9c>)
 8008104:	f003 fb3e 	bl	800b784 <HAL_TIMEx_MasterConfigSynchronization>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800810e:	f000 f8dd 	bl	80082cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008112:	bf00      	nop
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20000400 	.word	0x20000400
 8008120:	40012c00 	.word	0x40012c00

08008124 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008128:	4b11      	ldr	r3, [pc, #68]	; (8008170 <MX_USART1_UART_Init+0x4c>)
 800812a:	4a12      	ldr	r2, [pc, #72]	; (8008174 <MX_USART1_UART_Init+0x50>)
 800812c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800812e:	4b10      	ldr	r3, [pc, #64]	; (8008170 <MX_USART1_UART_Init+0x4c>)
 8008130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008134:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008136:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <MX_USART1_UART_Init+0x4c>)
 8008138:	2200      	movs	r2, #0
 800813a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800813c:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <MX_USART1_UART_Init+0x4c>)
 800813e:	2200      	movs	r2, #0
 8008140:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008142:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <MX_USART1_UART_Init+0x4c>)
 8008144:	2200      	movs	r2, #0
 8008146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008148:	4b09      	ldr	r3, [pc, #36]	; (8008170 <MX_USART1_UART_Init+0x4c>)
 800814a:	220c      	movs	r2, #12
 800814c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800814e:	4b08      	ldr	r3, [pc, #32]	; (8008170 <MX_USART1_UART_Init+0x4c>)
 8008150:	2200      	movs	r2, #0
 8008152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008154:	4b06      	ldr	r3, [pc, #24]	; (8008170 <MX_USART1_UART_Init+0x4c>)
 8008156:	2200      	movs	r2, #0
 8008158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800815a:	4805      	ldr	r0, [pc, #20]	; (8008170 <MX_USART1_UART_Init+0x4c>)
 800815c:	f003 fb90 	bl	800b880 <HAL_UART_Init>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008166:	f000 f8b1 	bl	80082cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800816a:	bf00      	nop
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000448 	.word	0x20000448
 8008174:	40013800 	.word	0x40013800

08008178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800817e:	f107 0310 	add.w	r3, r7, #16
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	605a      	str	r2, [r3, #4]
 8008188:	609a      	str	r2, [r3, #8]
 800818a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800818c:	4b4b      	ldr	r3, [pc, #300]	; (80082bc <MX_GPIO_Init+0x144>)
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	4a4a      	ldr	r2, [pc, #296]	; (80082bc <MX_GPIO_Init+0x144>)
 8008192:	f043 0310 	orr.w	r3, r3, #16
 8008196:	6193      	str	r3, [r2, #24]
 8008198:	4b48      	ldr	r3, [pc, #288]	; (80082bc <MX_GPIO_Init+0x144>)
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 0310 	and.w	r3, r3, #16
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081a4:	4b45      	ldr	r3, [pc, #276]	; (80082bc <MX_GPIO_Init+0x144>)
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	4a44      	ldr	r2, [pc, #272]	; (80082bc <MX_GPIO_Init+0x144>)
 80081aa:	f043 0320 	orr.w	r3, r3, #32
 80081ae:	6193      	str	r3, [r2, #24]
 80081b0:	4b42      	ldr	r3, [pc, #264]	; (80082bc <MX_GPIO_Init+0x144>)
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	60bb      	str	r3, [r7, #8]
 80081ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081bc:	4b3f      	ldr	r3, [pc, #252]	; (80082bc <MX_GPIO_Init+0x144>)
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	4a3e      	ldr	r2, [pc, #248]	; (80082bc <MX_GPIO_Init+0x144>)
 80081c2:	f043 0304 	orr.w	r3, r3, #4
 80081c6:	6193      	str	r3, [r2, #24]
 80081c8:	4b3c      	ldr	r3, [pc, #240]	; (80082bc <MX_GPIO_Init+0x144>)
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	607b      	str	r3, [r7, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081d4:	4b39      	ldr	r3, [pc, #228]	; (80082bc <MX_GPIO_Init+0x144>)
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	4a38      	ldr	r2, [pc, #224]	; (80082bc <MX_GPIO_Init+0x144>)
 80081da:	f043 0308 	orr.w	r3, r3, #8
 80081de:	6193      	str	r3, [r2, #24]
 80081e0:	4b36      	ldr	r3, [pc, #216]	; (80082bc <MX_GPIO_Init+0x144>)
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	603b      	str	r3, [r7, #0]
 80081ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80081ec:	2200      	movs	r2, #0
 80081ee:	21f0      	movs	r1, #240	; 0xf0
 80081f0:	4833      	ldr	r0, [pc, #204]	; (80082c0 <MX_GPIO_Init+0x148>)
 80081f2:	f001 f8b0 	bl	8009356 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80081f6:	2200      	movs	r2, #0
 80081f8:	f241 0130 	movw	r1, #4144	; 0x1030
 80081fc:	4831      	ldr	r0, [pc, #196]	; (80082c4 <MX_GPIO_Init+0x14c>)
 80081fe:	f001 f8aa 	bl	8009356 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008202:	2200      	movs	r2, #0
 8008204:	f640 4107 	movw	r1, #3079	; 0xc07
 8008208:	482f      	ldr	r0, [pc, #188]	; (80082c8 <MX_GPIO_Init+0x150>)
 800820a:	f001 f8a4 	bl	8009356 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800820e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008212:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008218:	2300      	movs	r3, #0
 800821a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800821c:	f107 0310 	add.w	r3, r7, #16
 8008220:	4619      	mov	r1, r3
 8008222:	4828      	ldr	r0, [pc, #160]	; (80082c4 <MX_GPIO_Init+0x14c>)
 8008224:	f000 fe20 	bl	8008e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008228:	f248 130f 	movw	r3, #33039	; 0x810f
 800822c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800822e:	2300      	movs	r3, #0
 8008230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008232:	2300      	movs	r3, #0
 8008234:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008236:	f107 0310 	add.w	r3, r7, #16
 800823a:	4619      	mov	r1, r3
 800823c:	4820      	ldr	r0, [pc, #128]	; (80082c0 <MX_GPIO_Init+0x148>)
 800823e:	f000 fe13 	bl	8008e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008242:	23f0      	movs	r3, #240	; 0xf0
 8008244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008246:	2301      	movs	r3, #1
 8008248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824a:	2300      	movs	r3, #0
 800824c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800824e:	2302      	movs	r3, #2
 8008250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008252:	f107 0310 	add.w	r3, r7, #16
 8008256:	4619      	mov	r1, r3
 8008258:	4819      	ldr	r0, [pc, #100]	; (80082c0 <MX_GPIO_Init+0x148>)
 800825a:	f000 fe05 	bl	8008e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800825e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008264:	2301      	movs	r3, #1
 8008266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008268:	2300      	movs	r3, #0
 800826a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800826c:	2302      	movs	r3, #2
 800826e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008270:	f107 0310 	add.w	r3, r7, #16
 8008274:	4619      	mov	r1, r3
 8008276:	4813      	ldr	r0, [pc, #76]	; (80082c4 <MX_GPIO_Init+0x14c>)
 8008278:	f000 fdf6 	bl	8008e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800827c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008280:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008282:	2301      	movs	r3, #1
 8008284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008286:	2300      	movs	r3, #0
 8008288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800828a:	2302      	movs	r3, #2
 800828c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800828e:	f107 0310 	add.w	r3, r7, #16
 8008292:	4619      	mov	r1, r3
 8008294:	480c      	ldr	r0, [pc, #48]	; (80082c8 <MX_GPIO_Init+0x150>)
 8008296:	f000 fde7 	bl	8008e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800829a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800829e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082a0:	2300      	movs	r3, #0
 80082a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	4619      	mov	r1, r3
 80082ae:	4806      	ldr	r0, [pc, #24]	; (80082c8 <MX_GPIO_Init+0x150>)
 80082b0:	f000 fdda 	bl	8008e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80082b4:	bf00      	nop
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	40021000 	.word	0x40021000
 80082c0:	40010800 	.word	0x40010800
 80082c4:	40011000 	.word	0x40011000
 80082c8:	40010c00 	.word	0x40010c00

080082cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80082d0:	bf00      	nop
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bc80      	pop	{r7}
 80082d6:	4770      	bx	lr

080082d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082de:	4b15      	ldr	r3, [pc, #84]	; (8008334 <HAL_MspInit+0x5c>)
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	4a14      	ldr	r2, [pc, #80]	; (8008334 <HAL_MspInit+0x5c>)
 80082e4:	f043 0301 	orr.w	r3, r3, #1
 80082e8:	6193      	str	r3, [r2, #24]
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <HAL_MspInit+0x5c>)
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	60bb      	str	r3, [r7, #8]
 80082f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082f6:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <HAL_MspInit+0x5c>)
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	4a0e      	ldr	r2, [pc, #56]	; (8008334 <HAL_MspInit+0x5c>)
 80082fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008300:	61d3      	str	r3, [r2, #28]
 8008302:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <HAL_MspInit+0x5c>)
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830a:	607b      	str	r3, [r7, #4]
 800830c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800830e:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <HAL_MspInit+0x60>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	4a04      	ldr	r2, [pc, #16]	; (8008338 <HAL_MspInit+0x60>)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr
 8008334:	40021000 	.word	0x40021000
 8008338:	40010000 	.word	0x40010000

0800833c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008344:	f107 0310 	add.w	r3, r7, #16
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	605a      	str	r2, [r3, #4]
 800834e:	609a      	str	r2, [r3, #8]
 8008350:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1c      	ldr	r2, [pc, #112]	; (80083c8 <HAL_CAN_MspInit+0x8c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d131      	bne.n	80083c0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800835c:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <HAL_CAN_MspInit+0x90>)
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	4a1a      	ldr	r2, [pc, #104]	; (80083cc <HAL_CAN_MspInit+0x90>)
 8008362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008366:	61d3      	str	r3, [r2, #28]
 8008368:	4b18      	ldr	r3, [pc, #96]	; (80083cc <HAL_CAN_MspInit+0x90>)
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008374:	4b15      	ldr	r3, [pc, #84]	; (80083cc <HAL_CAN_MspInit+0x90>)
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	4a14      	ldr	r2, [pc, #80]	; (80083cc <HAL_CAN_MspInit+0x90>)
 800837a:	f043 0304 	orr.w	r3, r3, #4
 800837e:	6193      	str	r3, [r2, #24]
 8008380:	4b12      	ldr	r3, [pc, #72]	; (80083cc <HAL_CAN_MspInit+0x90>)
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	60bb      	str	r3, [r7, #8]
 800838a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800838c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008396:	2300      	movs	r3, #0
 8008398:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800839a:	f107 0310 	add.w	r3, r7, #16
 800839e:	4619      	mov	r1, r3
 80083a0:	480b      	ldr	r0, [pc, #44]	; (80083d0 <HAL_CAN_MspInit+0x94>)
 80083a2:	f000 fd61 	bl	8008e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80083a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ac:	2302      	movs	r3, #2
 80083ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083b0:	2303      	movs	r3, #3
 80083b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083b4:	f107 0310 	add.w	r3, r7, #16
 80083b8:	4619      	mov	r1, r3
 80083ba:	4805      	ldr	r0, [pc, #20]	; (80083d0 <HAL_CAN_MspInit+0x94>)
 80083bc:	f000 fd54 	bl	8008e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80083c0:	bf00      	nop
 80083c2:	3720      	adds	r7, #32
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	40006400 	.word	0x40006400
 80083cc:	40021000 	.word	0x40021000
 80083d0:	40010800 	.word	0x40010800

080083d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083dc:	f107 0310 	add.w	r3, r7, #16
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	605a      	str	r2, [r3, #4]
 80083e6:	609a      	str	r2, [r3, #8]
 80083e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a15      	ldr	r2, [pc, #84]	; (8008444 <HAL_I2C_MspInit+0x70>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d123      	bne.n	800843c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083f4:	4b14      	ldr	r3, [pc, #80]	; (8008448 <HAL_I2C_MspInit+0x74>)
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	4a13      	ldr	r2, [pc, #76]	; (8008448 <HAL_I2C_MspInit+0x74>)
 80083fa:	f043 0308 	orr.w	r3, r3, #8
 80083fe:	6193      	str	r3, [r2, #24]
 8008400:	4b11      	ldr	r3, [pc, #68]	; (8008448 <HAL_I2C_MspInit+0x74>)
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800840c:	23c0      	movs	r3, #192	; 0xc0
 800840e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008410:	2312      	movs	r3, #18
 8008412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008414:	2303      	movs	r3, #3
 8008416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008418:	f107 0310 	add.w	r3, r7, #16
 800841c:	4619      	mov	r1, r3
 800841e:	480b      	ldr	r0, [pc, #44]	; (800844c <HAL_I2C_MspInit+0x78>)
 8008420:	f000 fd22 	bl	8008e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008424:	4b08      	ldr	r3, [pc, #32]	; (8008448 <HAL_I2C_MspInit+0x74>)
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	4a07      	ldr	r2, [pc, #28]	; (8008448 <HAL_I2C_MspInit+0x74>)
 800842a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800842e:	61d3      	str	r3, [r2, #28]
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <HAL_I2C_MspInit+0x74>)
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800843c:	bf00      	nop
 800843e:	3720      	adds	r7, #32
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	40005400 	.word	0x40005400
 8008448:	40021000 	.word	0x40021000
 800844c:	40010c00 	.word	0x40010c00

08008450 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a0a      	ldr	r2, [pc, #40]	; (8008488 <HAL_I2C_MspDeInit+0x38>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d10d      	bne.n	800847e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <HAL_I2C_MspDeInit+0x3c>)
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	4a09      	ldr	r2, [pc, #36]	; (800848c <HAL_I2C_MspDeInit+0x3c>)
 8008468:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800846c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800846e:	2140      	movs	r1, #64	; 0x40
 8008470:	4807      	ldr	r0, [pc, #28]	; (8008490 <HAL_I2C_MspDeInit+0x40>)
 8008472:	f000 fe8d 	bl	8009190 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008476:	2180      	movs	r1, #128	; 0x80
 8008478:	4805      	ldr	r0, [pc, #20]	; (8008490 <HAL_I2C_MspDeInit+0x40>)
 800847a:	f000 fe89 	bl	8009190 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800847e:	bf00      	nop
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	40005400 	.word	0x40005400
 800848c:	40021000 	.word	0x40021000
 8008490:	40010c00 	.word	0x40010c00

08008494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0d      	ldr	r2, [pc, #52]	; (80084d8 <HAL_TIM_Base_MspInit+0x44>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d113      	bne.n	80084ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80084a6:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <HAL_TIM_Base_MspInit+0x48>)
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <HAL_TIM_Base_MspInit+0x48>)
 80084ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80084b0:	6193      	str	r3, [r2, #24]
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <HAL_TIM_Base_MspInit+0x48>)
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80084be:	2200      	movs	r2, #0
 80084c0:	2100      	movs	r1, #0
 80084c2:	2019      	movs	r0, #25
 80084c4:	f000 fb57 	bl	8008b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80084c8:	2019      	movs	r0, #25
 80084ca:	f000 fb70 	bl	8008bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40012c00 	.word	0x40012c00
 80084dc:	40021000 	.word	0x40021000

080084e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084e8:	f107 0310 	add.w	r3, r7, #16
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	605a      	str	r2, [r3, #4]
 80084f2:	609a      	str	r2, [r3, #8]
 80084f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a20      	ldr	r2, [pc, #128]	; (800857c <HAL_UART_MspInit+0x9c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d139      	bne.n	8008574 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008500:	4b1f      	ldr	r3, [pc, #124]	; (8008580 <HAL_UART_MspInit+0xa0>)
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	4a1e      	ldr	r2, [pc, #120]	; (8008580 <HAL_UART_MspInit+0xa0>)
 8008506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800850a:	6193      	str	r3, [r2, #24]
 800850c:	4b1c      	ldr	r3, [pc, #112]	; (8008580 <HAL_UART_MspInit+0xa0>)
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008514:	60fb      	str	r3, [r7, #12]
 8008516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008518:	4b19      	ldr	r3, [pc, #100]	; (8008580 <HAL_UART_MspInit+0xa0>)
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	4a18      	ldr	r2, [pc, #96]	; (8008580 <HAL_UART_MspInit+0xa0>)
 800851e:	f043 0304 	orr.w	r3, r3, #4
 8008522:	6193      	str	r3, [r2, #24]
 8008524:	4b16      	ldr	r3, [pc, #88]	; (8008580 <HAL_UART_MspInit+0xa0>)
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	60bb      	str	r3, [r7, #8]
 800852e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008534:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008536:	2302      	movs	r3, #2
 8008538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800853a:	2303      	movs	r3, #3
 800853c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800853e:	f107 0310 	add.w	r3, r7, #16
 8008542:	4619      	mov	r1, r3
 8008544:	480f      	ldr	r0, [pc, #60]	; (8008584 <HAL_UART_MspInit+0xa4>)
 8008546:	f000 fc8f 	bl	8008e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800854a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800854e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008554:	2300      	movs	r3, #0
 8008556:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008558:	f107 0310 	add.w	r3, r7, #16
 800855c:	4619      	mov	r1, r3
 800855e:	4809      	ldr	r0, [pc, #36]	; (8008584 <HAL_UART_MspInit+0xa4>)
 8008560:	f000 fc82 	bl	8008e68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008564:	2200      	movs	r2, #0
 8008566:	2100      	movs	r1, #0
 8008568:	2025      	movs	r0, #37	; 0x25
 800856a:	f000 fb04 	bl	8008b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800856e:	2025      	movs	r0, #37	; 0x25
 8008570:	f000 fb1d 	bl	8008bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008574:	bf00      	nop
 8008576:	3720      	adds	r7, #32
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	40013800 	.word	0x40013800
 8008580:	40021000 	.word	0x40021000
 8008584:	40010800 	.word	0x40010800

08008588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800858c:	e7fe      	b.n	800858c <NMI_Handler+0x4>

0800858e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800858e:	b480      	push	{r7}
 8008590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008592:	e7fe      	b.n	8008592 <HardFault_Handler+0x4>

08008594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008594:	b480      	push	{r7}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008598:	e7fe      	b.n	8008598 <MemManage_Handler+0x4>

0800859a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800859a:	b480      	push	{r7}
 800859c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800859e:	e7fe      	b.n	800859e <BusFault_Handler+0x4>

080085a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085a4:	e7fe      	b.n	80085a4 <UsageFault_Handler+0x4>

080085a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80085a6:	b480      	push	{r7}
 80085a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085aa:	bf00      	nop
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr

080085b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085b2:	b480      	push	{r7}
 80085b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085b6:	bf00      	nop
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	4770      	bx	lr

080085be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80085be:	b480      	push	{r7}
 80085c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80085c2:	bf00      	nop
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr

080085ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80085ce:	f000 f8bf 	bl	8008750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80085d2:	bf00      	nop
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80085dc:	4802      	ldr	r0, [pc, #8]	; (80085e8 <TIM1_UP_IRQHandler+0x10>)
 80085de:	f002 fdcd 	bl	800b17c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80085e2:	bf00      	nop
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000400 	.word	0x20000400

080085ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80085f0:	4802      	ldr	r0, [pc, #8]	; (80085fc <USART1_IRQHandler+0x10>)
 80085f2:	f003 f9cb 	bl	800b98c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80085f6:	bf00      	nop
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000448 	.word	0x20000448

08008600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008608:	4a14      	ldr	r2, [pc, #80]	; (800865c <_sbrk+0x5c>)
 800860a:	4b15      	ldr	r3, [pc, #84]	; (8008660 <_sbrk+0x60>)
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008614:	4b13      	ldr	r3, [pc, #76]	; (8008664 <_sbrk+0x64>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d102      	bne.n	8008622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800861c:	4b11      	ldr	r3, [pc, #68]	; (8008664 <_sbrk+0x64>)
 800861e:	4a12      	ldr	r2, [pc, #72]	; (8008668 <_sbrk+0x68>)
 8008620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <_sbrk+0x64>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4413      	add	r3, r2
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	429a      	cmp	r2, r3
 800862e:	d207      	bcs.n	8008640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008630:	f003 fff8 	bl	800c624 <__errno>
 8008634:	4603      	mov	r3, r0
 8008636:	220c      	movs	r2, #12
 8008638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800863a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800863e:	e009      	b.n	8008654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <_sbrk+0x64>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008646:	4b07      	ldr	r3, [pc, #28]	; (8008664 <_sbrk+0x64>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	4a05      	ldr	r2, [pc, #20]	; (8008664 <_sbrk+0x64>)
 8008650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008652:	68fb      	ldr	r3, [r7, #12]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	2000c000 	.word	0x2000c000
 8008660:	00000400 	.word	0x00000400
 8008664:	20000490 	.word	0x20000490
 8008668:	200005e0 	.word	0x200005e0

0800866c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008670:	bf00      	nop
 8008672:	46bd      	mov	sp, r7
 8008674:	bc80      	pop	{r7}
 8008676:	4770      	bx	lr

08008678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008678:	480c      	ldr	r0, [pc, #48]	; (80086ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800867a:	490d      	ldr	r1, [pc, #52]	; (80086b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800867c:	4a0d      	ldr	r2, [pc, #52]	; (80086b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800867e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008680:	e002      	b.n	8008688 <LoopCopyDataInit>

08008682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008686:	3304      	adds	r3, #4

08008688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800868a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800868c:	d3f9      	bcc.n	8008682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800868e:	4a0a      	ldr	r2, [pc, #40]	; (80086b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008690:	4c0a      	ldr	r4, [pc, #40]	; (80086bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8008692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008694:	e001      	b.n	800869a <LoopFillZerobss>

08008696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008698:	3204      	adds	r2, #4

0800869a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800869a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800869c:	d3fb      	bcc.n	8008696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800869e:	f7ff ffe5 	bl	800866c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086a2:	f003 ffc5 	bl	800c630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80086a6:	f7ff fb89 	bl	8007dbc <main>
  bx lr
 80086aa:	4770      	bx	lr
  ldr r0, =_sdata
 80086ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086b0:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80086b4:	0800dd7c 	.word	0x0800dd7c
  ldr r2, =_sbss
 80086b8:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80086bc:	200005e0 	.word	0x200005e0

080086c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80086c0:	e7fe      	b.n	80086c0 <ADC1_2_IRQHandler>
	...

080086c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80086c8:	4b08      	ldr	r3, [pc, #32]	; (80086ec <HAL_Init+0x28>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a07      	ldr	r2, [pc, #28]	; (80086ec <HAL_Init+0x28>)
 80086ce:	f043 0310 	orr.w	r3, r3, #16
 80086d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086d4:	2003      	movs	r0, #3
 80086d6:	f000 fa43 	bl	8008b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80086da:	200f      	movs	r0, #15
 80086dc:	f000 f808 	bl	80086f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80086e0:	f7ff fdfa 	bl	80082d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	40022000 	.word	0x40022000

080086f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086f8:	4b12      	ldr	r3, [pc, #72]	; (8008744 <HAL_InitTick+0x54>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	4b12      	ldr	r3, [pc, #72]	; (8008748 <HAL_InitTick+0x58>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	4619      	mov	r1, r3
 8008702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008706:	fbb3 f3f1 	udiv	r3, r3, r1
 800870a:	fbb2 f3f3 	udiv	r3, r2, r3
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fa5b 	bl	8008bca <HAL_SYSTICK_Config>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e00e      	b.n	800873c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b0f      	cmp	r3, #15
 8008722:	d80a      	bhi.n	800873a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008724:	2200      	movs	r2, #0
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800872c:	f000 fa23 	bl	8008b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008730:	4a06      	ldr	r2, [pc, #24]	; (800874c <HAL_InitTick+0x5c>)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	e000      	b.n	800873c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
}
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	200000b0 	.word	0x200000b0
 8008748:	200000b8 	.word	0x200000b8
 800874c:	200000b4 	.word	0x200000b4

08008750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <HAL_IncTick+0x1c>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	4b05      	ldr	r3, [pc, #20]	; (8008770 <HAL_IncTick+0x20>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4413      	add	r3, r2
 8008760:	4a03      	ldr	r2, [pc, #12]	; (8008770 <HAL_IncTick+0x20>)
 8008762:	6013      	str	r3, [r2, #0]
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	bc80      	pop	{r7}
 800876a:	4770      	bx	lr
 800876c:	200000b8 	.word	0x200000b8
 8008770:	20000494 	.word	0x20000494

08008774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008774:	b480      	push	{r7}
 8008776:	af00      	add	r7, sp, #0
  return uwTick;
 8008778:	4b02      	ldr	r3, [pc, #8]	; (8008784 <HAL_GetTick+0x10>)
 800877a:	681b      	ldr	r3, [r3, #0]
}
 800877c:	4618      	mov	r0, r3
 800877e:	46bd      	mov	sp, r7
 8008780:	bc80      	pop	{r7}
 8008782:	4770      	bx	lr
 8008784:	20000494 	.word	0x20000494

08008788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008790:	f7ff fff0 	bl	8008774 <HAL_GetTick>
 8008794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087a0:	d005      	beq.n	80087ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80087a2:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <HAL_Delay+0x44>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4413      	add	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80087ae:	bf00      	nop
 80087b0:	f7ff ffe0 	bl	8008774 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d8f7      	bhi.n	80087b0 <HAL_Delay+0x28>
  {
  }
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	200000b8 	.word	0x200000b8

080087d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e0ed      	b.n	80089be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d102      	bne.n	80087f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff fda4 	bl	800833c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0201 	orr.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008804:	f7ff ffb6 	bl	8008774 <HAL_GetTick>
 8008808:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800880a:	e012      	b.n	8008832 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800880c:	f7ff ffb2 	bl	8008774 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b0a      	cmp	r3, #10
 8008818:	d90b      	bls.n	8008832 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2205      	movs	r2, #5
 800882a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e0c5      	b.n	80089be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0e5      	beq.n	800880c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0202 	bic.w	r2, r2, #2
 800884e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008850:	f7ff ff90 	bl	8008774 <HAL_GetTick>
 8008854:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008856:	e012      	b.n	800887e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008858:	f7ff ff8c 	bl	8008774 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b0a      	cmp	r3, #10
 8008864:	d90b      	bls.n	800887e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2205      	movs	r2, #5
 8008876:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e09f      	b.n	80089be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e5      	bne.n	8008858 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	7e1b      	ldrb	r3, [r3, #24]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d108      	bne.n	80088a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	e007      	b.n	80088b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7e5b      	ldrb	r3, [r3, #25]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d108      	bne.n	80088d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	e007      	b.n	80088e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7e9b      	ldrb	r3, [r3, #26]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d108      	bne.n	80088fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0220 	orr.w	r2, r2, #32
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e007      	b.n	800890a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0220 	bic.w	r2, r2, #32
 8008908:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	7edb      	ldrb	r3, [r3, #27]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d108      	bne.n	8008924 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0210 	bic.w	r2, r2, #16
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	e007      	b.n	8008934 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0210 	orr.w	r2, r2, #16
 8008932:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	7f1b      	ldrb	r3, [r3, #28]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d108      	bne.n	800894e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0208 	orr.w	r2, r2, #8
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	e007      	b.n	800895e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0208 	bic.w	r2, r2, #8
 800895c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	7f5b      	ldrb	r3, [r3, #29]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d108      	bne.n	8008978 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f042 0204 	orr.w	r2, r2, #4
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	e007      	b.n	8008988 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0204 	bic.w	r2, r2, #4
 8008986:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	431a      	orrs	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	431a      	orrs	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	ea42 0103 	orr.w	r1, r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	1e5a      	subs	r2, r3, #1
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <__NVIC_SetPriorityGrouping>:
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <__NVIC_SetPriorityGrouping+0x44>)
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089e4:	4013      	ands	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089fa:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <__NVIC_SetPriorityGrouping+0x44>)
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	60d3      	str	r3, [r2, #12]
}
 8008a00:	bf00      	nop
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc80      	pop	{r7}
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	e000ed00 	.word	0xe000ed00

08008a10 <__NVIC_GetPriorityGrouping>:
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <__NVIC_GetPriorityGrouping+0x18>)
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	0a1b      	lsrs	r3, r3, #8
 8008a1a:	f003 0307 	and.w	r3, r3, #7
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	e000ed00 	.word	0xe000ed00

08008a2c <__NVIC_EnableIRQ>:
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	db0b      	blt.n	8008a56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a3e:	79fb      	ldrb	r3, [r7, #7]
 8008a40:	f003 021f 	and.w	r2, r3, #31
 8008a44:	4906      	ldr	r1, [pc, #24]	; (8008a60 <__NVIC_EnableIRQ+0x34>)
 8008a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	2001      	movs	r0, #1
 8008a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8008a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr
 8008a60:	e000e100 	.word	0xe000e100

08008a64 <__NVIC_SetPriority>:
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	db0a      	blt.n	8008a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	490c      	ldr	r1, [pc, #48]	; (8008ab0 <__NVIC_SetPriority+0x4c>)
 8008a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a82:	0112      	lsls	r2, r2, #4
 8008a84:	b2d2      	uxtb	r2, r2
 8008a86:	440b      	add	r3, r1
 8008a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a8c:	e00a      	b.n	8008aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	4908      	ldr	r1, [pc, #32]	; (8008ab4 <__NVIC_SetPriority+0x50>)
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	f003 030f 	and.w	r3, r3, #15
 8008a9a:	3b04      	subs	r3, #4
 8008a9c:	0112      	lsls	r2, r2, #4
 8008a9e:	b2d2      	uxtb	r2, r2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	761a      	strb	r2, [r3, #24]
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	e000e100 	.word	0xe000e100
 8008ab4:	e000ed00 	.word	0xe000ed00

08008ab8 <NVIC_EncodePriority>:
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b089      	sub	sp, #36	; 0x24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f1c3 0307 	rsb	r3, r3, #7
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	bf28      	it	cs
 8008ad6:	2304      	movcs	r3, #4
 8008ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	3304      	adds	r3, #4
 8008ade:	2b06      	cmp	r3, #6
 8008ae0:	d902      	bls.n	8008ae8 <NVIC_EncodePriority+0x30>
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	3b03      	subs	r3, #3
 8008ae6:	e000      	b.n	8008aea <NVIC_EncodePriority+0x32>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	fa02 f303 	lsl.w	r3, r2, r3
 8008af6:	43da      	mvns	r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	401a      	ands	r2, r3
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	fa01 f303 	lsl.w	r3, r1, r3
 8008b0a:	43d9      	mvns	r1, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b10:	4313      	orrs	r3, r2
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3724      	adds	r7, #36	; 0x24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr

08008b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b2c:	d301      	bcc.n	8008b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e00f      	b.n	8008b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b32:	4a0a      	ldr	r2, [pc, #40]	; (8008b5c <SysTick_Config+0x40>)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b3a:	210f      	movs	r1, #15
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b40:	f7ff ff90 	bl	8008a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <SysTick_Config+0x40>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b4a:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <SysTick_Config+0x40>)
 8008b4c:	2207      	movs	r2, #7
 8008b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	e000e010 	.word	0xe000e010

08008b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff ff2d 	bl	80089c8 <__NVIC_SetPriorityGrouping>
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b086      	sub	sp, #24
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	607a      	str	r2, [r7, #4]
 8008b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b88:	f7ff ff42 	bl	8008a10 <__NVIC_GetPriorityGrouping>
 8008b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	6978      	ldr	r0, [r7, #20]
 8008b94:	f7ff ff90 	bl	8008ab8 <NVIC_EncodePriority>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff ff5f 	bl	8008a64 <__NVIC_SetPriority>
}
 8008ba6:	bf00      	nop
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff ff35 	bl	8008a2c <__NVIC_EnableIRQ>
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff ffa2 	bl	8008b1c <SysTick_Config>
 8008bd8:	4603      	mov	r3, r0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b085      	sub	sp, #20
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d008      	beq.n	8008c0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2204      	movs	r2, #4
 8008bfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e020      	b.n	8008c4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 020e 	bic.w	r2, r2, #14
 8008c1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0201 	bic.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c34:	2101      	movs	r1, #1
 8008c36:	fa01 f202 	lsl.w	r2, r1, r2
 8008c3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bc80      	pop	{r7}
 8008c56:	4770      	bx	lr

08008c58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d005      	beq.n	8008c7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2204      	movs	r2, #4
 8008c74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	73fb      	strb	r3, [r7, #15]
 8008c7a:	e0d6      	b.n	8008e2a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 020e 	bic.w	r2, r2, #14
 8008c8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	4b64      	ldr	r3, [pc, #400]	; (8008e34 <HAL_DMA_Abort_IT+0x1dc>)
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d958      	bls.n	8008d5a <HAL_DMA_Abort_IT+0x102>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a62      	ldr	r2, [pc, #392]	; (8008e38 <HAL_DMA_Abort_IT+0x1e0>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d04f      	beq.n	8008d52 <HAL_DMA_Abort_IT+0xfa>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a61      	ldr	r2, [pc, #388]	; (8008e3c <HAL_DMA_Abort_IT+0x1e4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d048      	beq.n	8008d4e <HAL_DMA_Abort_IT+0xf6>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a5f      	ldr	r2, [pc, #380]	; (8008e40 <HAL_DMA_Abort_IT+0x1e8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d040      	beq.n	8008d48 <HAL_DMA_Abort_IT+0xf0>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a5e      	ldr	r2, [pc, #376]	; (8008e44 <HAL_DMA_Abort_IT+0x1ec>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d038      	beq.n	8008d42 <HAL_DMA_Abort_IT+0xea>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a5c      	ldr	r2, [pc, #368]	; (8008e48 <HAL_DMA_Abort_IT+0x1f0>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d030      	beq.n	8008d3c <HAL_DMA_Abort_IT+0xe4>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a5b      	ldr	r2, [pc, #364]	; (8008e4c <HAL_DMA_Abort_IT+0x1f4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d028      	beq.n	8008d36 <HAL_DMA_Abort_IT+0xde>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a52      	ldr	r2, [pc, #328]	; (8008e34 <HAL_DMA_Abort_IT+0x1dc>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d020      	beq.n	8008d30 <HAL_DMA_Abort_IT+0xd8>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a57      	ldr	r2, [pc, #348]	; (8008e50 <HAL_DMA_Abort_IT+0x1f8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d019      	beq.n	8008d2c <HAL_DMA_Abort_IT+0xd4>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a55      	ldr	r2, [pc, #340]	; (8008e54 <HAL_DMA_Abort_IT+0x1fc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d012      	beq.n	8008d28 <HAL_DMA_Abort_IT+0xd0>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a54      	ldr	r2, [pc, #336]	; (8008e58 <HAL_DMA_Abort_IT+0x200>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00a      	beq.n	8008d22 <HAL_DMA_Abort_IT+0xca>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a52      	ldr	r2, [pc, #328]	; (8008e5c <HAL_DMA_Abort_IT+0x204>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d102      	bne.n	8008d1c <HAL_DMA_Abort_IT+0xc4>
 8008d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d1a:	e01b      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d20:	e018      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d26:	e015      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d28:	2310      	movs	r3, #16
 8008d2a:	e013      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e011      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d34:	e00e      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d3a:	e00b      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d40:	e008      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d46:	e005      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d4c:	e002      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d4e:	2310      	movs	r3, #16
 8008d50:	e000      	b.n	8008d54 <HAL_DMA_Abort_IT+0xfc>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4a42      	ldr	r2, [pc, #264]	; (8008e60 <HAL_DMA_Abort_IT+0x208>)
 8008d56:	6053      	str	r3, [r2, #4]
 8008d58:	e057      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1b2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a36      	ldr	r2, [pc, #216]	; (8008e38 <HAL_DMA_Abort_IT+0x1e0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d04f      	beq.n	8008e04 <HAL_DMA_Abort_IT+0x1ac>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a34      	ldr	r2, [pc, #208]	; (8008e3c <HAL_DMA_Abort_IT+0x1e4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d048      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x1a8>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a33      	ldr	r2, [pc, #204]	; (8008e40 <HAL_DMA_Abort_IT+0x1e8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d040      	beq.n	8008dfa <HAL_DMA_Abort_IT+0x1a2>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a31      	ldr	r2, [pc, #196]	; (8008e44 <HAL_DMA_Abort_IT+0x1ec>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d038      	beq.n	8008df4 <HAL_DMA_Abort_IT+0x19c>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a30      	ldr	r2, [pc, #192]	; (8008e48 <HAL_DMA_Abort_IT+0x1f0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d030      	beq.n	8008dee <HAL_DMA_Abort_IT+0x196>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a2e      	ldr	r2, [pc, #184]	; (8008e4c <HAL_DMA_Abort_IT+0x1f4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d028      	beq.n	8008de8 <HAL_DMA_Abort_IT+0x190>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a26      	ldr	r2, [pc, #152]	; (8008e34 <HAL_DMA_Abort_IT+0x1dc>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d020      	beq.n	8008de2 <HAL_DMA_Abort_IT+0x18a>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a2a      	ldr	r2, [pc, #168]	; (8008e50 <HAL_DMA_Abort_IT+0x1f8>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d019      	beq.n	8008dde <HAL_DMA_Abort_IT+0x186>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a29      	ldr	r2, [pc, #164]	; (8008e54 <HAL_DMA_Abort_IT+0x1fc>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d012      	beq.n	8008dda <HAL_DMA_Abort_IT+0x182>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a27      	ldr	r2, [pc, #156]	; (8008e58 <HAL_DMA_Abort_IT+0x200>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00a      	beq.n	8008dd4 <HAL_DMA_Abort_IT+0x17c>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a26      	ldr	r2, [pc, #152]	; (8008e5c <HAL_DMA_Abort_IT+0x204>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d102      	bne.n	8008dce <HAL_DMA_Abort_IT+0x176>
 8008dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dcc:	e01b      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dd2:	e018      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dd8:	e015      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008dda:	2310      	movs	r3, #16
 8008ddc:	e013      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e011      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008de6:	e00e      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008de8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008dec:	e00b      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008df2:	e008      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008df8:	e005      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dfe:	e002      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008e00:	2310      	movs	r3, #16
 8008e02:	e000      	b.n	8008e06 <HAL_DMA_Abort_IT+0x1ae>
 8008e04:	2301      	movs	r3, #1
 8008e06:	4a17      	ldr	r2, [pc, #92]	; (8008e64 <HAL_DMA_Abort_IT+0x20c>)
 8008e08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	4798      	blx	r3
    } 
  }
  return status;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40020080 	.word	0x40020080
 8008e38:	40020008 	.word	0x40020008
 8008e3c:	4002001c 	.word	0x4002001c
 8008e40:	40020030 	.word	0x40020030
 8008e44:	40020044 	.word	0x40020044
 8008e48:	40020058 	.word	0x40020058
 8008e4c:	4002006c 	.word	0x4002006c
 8008e50:	40020408 	.word	0x40020408
 8008e54:	4002041c 	.word	0x4002041c
 8008e58:	40020430 	.word	0x40020430
 8008e5c:	40020444 	.word	0x40020444
 8008e60:	40020400 	.word	0x40020400
 8008e64:	40020000 	.word	0x40020000

08008e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b08b      	sub	sp, #44	; 0x2c
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e72:	2300      	movs	r3, #0
 8008e74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e76:	2300      	movs	r3, #0
 8008e78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e7a:	e179      	b.n	8009170 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	fa02 f303 	lsl.w	r3, r2, r3
 8008e84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	f040 8168 	bne.w	800916a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	4a96      	ldr	r2, [pc, #600]	; (80090f8 <HAL_GPIO_Init+0x290>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d05e      	beq.n	8008f62 <HAL_GPIO_Init+0xfa>
 8008ea4:	4a94      	ldr	r2, [pc, #592]	; (80090f8 <HAL_GPIO_Init+0x290>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d875      	bhi.n	8008f96 <HAL_GPIO_Init+0x12e>
 8008eaa:	4a94      	ldr	r2, [pc, #592]	; (80090fc <HAL_GPIO_Init+0x294>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d058      	beq.n	8008f62 <HAL_GPIO_Init+0xfa>
 8008eb0:	4a92      	ldr	r2, [pc, #584]	; (80090fc <HAL_GPIO_Init+0x294>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d86f      	bhi.n	8008f96 <HAL_GPIO_Init+0x12e>
 8008eb6:	4a92      	ldr	r2, [pc, #584]	; (8009100 <HAL_GPIO_Init+0x298>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d052      	beq.n	8008f62 <HAL_GPIO_Init+0xfa>
 8008ebc:	4a90      	ldr	r2, [pc, #576]	; (8009100 <HAL_GPIO_Init+0x298>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d869      	bhi.n	8008f96 <HAL_GPIO_Init+0x12e>
 8008ec2:	4a90      	ldr	r2, [pc, #576]	; (8009104 <HAL_GPIO_Init+0x29c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d04c      	beq.n	8008f62 <HAL_GPIO_Init+0xfa>
 8008ec8:	4a8e      	ldr	r2, [pc, #568]	; (8009104 <HAL_GPIO_Init+0x29c>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d863      	bhi.n	8008f96 <HAL_GPIO_Init+0x12e>
 8008ece:	4a8e      	ldr	r2, [pc, #568]	; (8009108 <HAL_GPIO_Init+0x2a0>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d046      	beq.n	8008f62 <HAL_GPIO_Init+0xfa>
 8008ed4:	4a8c      	ldr	r2, [pc, #560]	; (8009108 <HAL_GPIO_Init+0x2a0>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d85d      	bhi.n	8008f96 <HAL_GPIO_Init+0x12e>
 8008eda:	2b12      	cmp	r3, #18
 8008edc:	d82a      	bhi.n	8008f34 <HAL_GPIO_Init+0xcc>
 8008ede:	2b12      	cmp	r3, #18
 8008ee0:	d859      	bhi.n	8008f96 <HAL_GPIO_Init+0x12e>
 8008ee2:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <HAL_GPIO_Init+0x80>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f63 	.word	0x08008f63
 8008eec:	08008f3d 	.word	0x08008f3d
 8008ef0:	08008f4f 	.word	0x08008f4f
 8008ef4:	08008f91 	.word	0x08008f91
 8008ef8:	08008f97 	.word	0x08008f97
 8008efc:	08008f97 	.word	0x08008f97
 8008f00:	08008f97 	.word	0x08008f97
 8008f04:	08008f97 	.word	0x08008f97
 8008f08:	08008f97 	.word	0x08008f97
 8008f0c:	08008f97 	.word	0x08008f97
 8008f10:	08008f97 	.word	0x08008f97
 8008f14:	08008f97 	.word	0x08008f97
 8008f18:	08008f97 	.word	0x08008f97
 8008f1c:	08008f97 	.word	0x08008f97
 8008f20:	08008f97 	.word	0x08008f97
 8008f24:	08008f97 	.word	0x08008f97
 8008f28:	08008f97 	.word	0x08008f97
 8008f2c:	08008f45 	.word	0x08008f45
 8008f30:	08008f59 	.word	0x08008f59
 8008f34:	4a75      	ldr	r2, [pc, #468]	; (800910c <HAL_GPIO_Init+0x2a4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d013      	beq.n	8008f62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f3a:	e02c      	b.n	8008f96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	623b      	str	r3, [r7, #32]
          break;
 8008f42:	e029      	b.n	8008f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	623b      	str	r3, [r7, #32]
          break;
 8008f4c:	e024      	b.n	8008f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	3308      	adds	r3, #8
 8008f54:	623b      	str	r3, [r7, #32]
          break;
 8008f56:	e01f      	b.n	8008f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	330c      	adds	r3, #12
 8008f5e:	623b      	str	r3, [r7, #32]
          break;
 8008f60:	e01a      	b.n	8008f98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d102      	bne.n	8008f70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f6a:	2304      	movs	r3, #4
 8008f6c:	623b      	str	r3, [r7, #32]
          break;
 8008f6e:	e013      	b.n	8008f98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d105      	bne.n	8008f84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f78:	2308      	movs	r3, #8
 8008f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	611a      	str	r2, [r3, #16]
          break;
 8008f82:	e009      	b.n	8008f98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f84:	2308      	movs	r3, #8
 8008f86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	615a      	str	r2, [r3, #20]
          break;
 8008f8e:	e003      	b.n	8008f98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f90:	2300      	movs	r3, #0
 8008f92:	623b      	str	r3, [r7, #32]
          break;
 8008f94:	e000      	b.n	8008f98 <HAL_GPIO_Init+0x130>
          break;
 8008f96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2bff      	cmp	r3, #255	; 0xff
 8008f9c:	d801      	bhi.n	8008fa2 <HAL_GPIO_Init+0x13a>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	e001      	b.n	8008fa6 <HAL_GPIO_Init+0x13e>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	2bff      	cmp	r3, #255	; 0xff
 8008fac:	d802      	bhi.n	8008fb4 <HAL_GPIO_Init+0x14c>
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	e002      	b.n	8008fba <HAL_GPIO_Init+0x152>
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	3b08      	subs	r3, #8
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	210f      	movs	r1, #15
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc8:	43db      	mvns	r3, r3
 8008fca:	401a      	ands	r2, r3
 8008fcc:	6a39      	ldr	r1, [r7, #32]
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 80c1 	beq.w	800916a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008fe8:	4b49      	ldr	r3, [pc, #292]	; (8009110 <HAL_GPIO_Init+0x2a8>)
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	4a48      	ldr	r2, [pc, #288]	; (8009110 <HAL_GPIO_Init+0x2a8>)
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	6193      	str	r3, [r2, #24]
 8008ff4:	4b46      	ldr	r3, [pc, #280]	; (8009110 <HAL_GPIO_Init+0x2a8>)
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	60bb      	str	r3, [r7, #8]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009000:	4a44      	ldr	r2, [pc, #272]	; (8009114 <HAL_GPIO_Init+0x2ac>)
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	089b      	lsrs	r3, r3, #2
 8009006:	3302      	adds	r3, #2
 8009008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800900c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	f003 0303 	and.w	r3, r3, #3
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	220f      	movs	r2, #15
 8009018:	fa02 f303 	lsl.w	r3, r2, r3
 800901c:	43db      	mvns	r3, r3
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	4013      	ands	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a3c      	ldr	r2, [pc, #240]	; (8009118 <HAL_GPIO_Init+0x2b0>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d01f      	beq.n	800906c <HAL_GPIO_Init+0x204>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a3b      	ldr	r2, [pc, #236]	; (800911c <HAL_GPIO_Init+0x2b4>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d019      	beq.n	8009068 <HAL_GPIO_Init+0x200>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a3a      	ldr	r2, [pc, #232]	; (8009120 <HAL_GPIO_Init+0x2b8>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d013      	beq.n	8009064 <HAL_GPIO_Init+0x1fc>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a39      	ldr	r2, [pc, #228]	; (8009124 <HAL_GPIO_Init+0x2bc>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00d      	beq.n	8009060 <HAL_GPIO_Init+0x1f8>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a38      	ldr	r2, [pc, #224]	; (8009128 <HAL_GPIO_Init+0x2c0>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d007      	beq.n	800905c <HAL_GPIO_Init+0x1f4>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a37      	ldr	r2, [pc, #220]	; (800912c <HAL_GPIO_Init+0x2c4>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d101      	bne.n	8009058 <HAL_GPIO_Init+0x1f0>
 8009054:	2305      	movs	r3, #5
 8009056:	e00a      	b.n	800906e <HAL_GPIO_Init+0x206>
 8009058:	2306      	movs	r3, #6
 800905a:	e008      	b.n	800906e <HAL_GPIO_Init+0x206>
 800905c:	2304      	movs	r3, #4
 800905e:	e006      	b.n	800906e <HAL_GPIO_Init+0x206>
 8009060:	2303      	movs	r3, #3
 8009062:	e004      	b.n	800906e <HAL_GPIO_Init+0x206>
 8009064:	2302      	movs	r3, #2
 8009066:	e002      	b.n	800906e <HAL_GPIO_Init+0x206>
 8009068:	2301      	movs	r3, #1
 800906a:	e000      	b.n	800906e <HAL_GPIO_Init+0x206>
 800906c:	2300      	movs	r3, #0
 800906e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009070:	f002 0203 	and.w	r2, r2, #3
 8009074:	0092      	lsls	r2, r2, #2
 8009076:	4093      	lsls	r3, r2
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800907e:	4925      	ldr	r1, [pc, #148]	; (8009114 <HAL_GPIO_Init+0x2ac>)
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	089b      	lsrs	r3, r3, #2
 8009084:	3302      	adds	r3, #2
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d006      	beq.n	80090a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009098:	4b25      	ldr	r3, [pc, #148]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	4924      	ldr	r1, [pc, #144]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	608b      	str	r3, [r1, #8]
 80090a4:	e006      	b.n	80090b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80090a6:	4b22      	ldr	r3, [pc, #136]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	43db      	mvns	r3, r3
 80090ae:	4920      	ldr	r1, [pc, #128]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d006      	beq.n	80090ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80090c0:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	491a      	ldr	r1, [pc, #104]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60cb      	str	r3, [r1, #12]
 80090cc:	e006      	b.n	80090dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80090ce:	4b18      	ldr	r3, [pc, #96]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	43db      	mvns	r3, r3
 80090d6:	4916      	ldr	r1, [pc, #88]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 80090d8:	4013      	ands	r3, r2
 80090da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d025      	beq.n	8009134 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80090e8:	4b11      	ldr	r3, [pc, #68]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	4910      	ldr	r1, [pc, #64]	; (8009130 <HAL_GPIO_Init+0x2c8>)
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	604b      	str	r3, [r1, #4]
 80090f4:	e025      	b.n	8009142 <HAL_GPIO_Init+0x2da>
 80090f6:	bf00      	nop
 80090f8:	10320000 	.word	0x10320000
 80090fc:	10310000 	.word	0x10310000
 8009100:	10220000 	.word	0x10220000
 8009104:	10210000 	.word	0x10210000
 8009108:	10120000 	.word	0x10120000
 800910c:	10110000 	.word	0x10110000
 8009110:	40021000 	.word	0x40021000
 8009114:	40010000 	.word	0x40010000
 8009118:	40010800 	.word	0x40010800
 800911c:	40010c00 	.word	0x40010c00
 8009120:	40011000 	.word	0x40011000
 8009124:	40011400 	.word	0x40011400
 8009128:	40011800 	.word	0x40011800
 800912c:	40011c00 	.word	0x40011c00
 8009130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009134:	4b15      	ldr	r3, [pc, #84]	; (800918c <HAL_GPIO_Init+0x324>)
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	43db      	mvns	r3, r3
 800913c:	4913      	ldr	r1, [pc, #76]	; (800918c <HAL_GPIO_Init+0x324>)
 800913e:	4013      	ands	r3, r2
 8009140:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d006      	beq.n	800915c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800914e:	4b0f      	ldr	r3, [pc, #60]	; (800918c <HAL_GPIO_Init+0x324>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	490e      	ldr	r1, [pc, #56]	; (800918c <HAL_GPIO_Init+0x324>)
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	4313      	orrs	r3, r2
 8009158:	600b      	str	r3, [r1, #0]
 800915a:	e006      	b.n	800916a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800915c:	4b0b      	ldr	r3, [pc, #44]	; (800918c <HAL_GPIO_Init+0x324>)
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	43db      	mvns	r3, r3
 8009164:	4909      	ldr	r1, [pc, #36]	; (800918c <HAL_GPIO_Init+0x324>)
 8009166:	4013      	ands	r3, r2
 8009168:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	3301      	adds	r3, #1
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	fa22 f303 	lsr.w	r3, r2, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	f47f ae7e 	bne.w	8008e7c <HAL_GPIO_Init+0x14>
  }
}
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	372c      	adds	r7, #44	; 0x2c
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr
 800918c:	40010400 	.word	0x40010400

08009190 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009190:	b480      	push	{r7}
 8009192:	b089      	sub	sp, #36	; 0x24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800919a:	2300      	movs	r3, #0
 800919c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800919e:	e0a6      	b.n	80092ee <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80091a0:	2201      	movs	r2, #1
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	fa02 f303 	lsl.w	r3, r2, r3
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	4013      	ands	r3, r2
 80091ac:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8099 	beq.w	80092e8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80091b6:	4a54      	ldr	r2, [pc, #336]	; (8009308 <HAL_GPIO_DeInit+0x178>)
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	089b      	lsrs	r3, r3, #2
 80091bc:	3302      	adds	r3, #2
 80091be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091c2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	f003 0303 	and.w	r3, r3, #3
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	220f      	movs	r2, #15
 80091ce:	fa02 f303 	lsl.w	r3, r2, r3
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	4013      	ands	r3, r2
 80091d6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a4c      	ldr	r2, [pc, #304]	; (800930c <HAL_GPIO_DeInit+0x17c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d01f      	beq.n	8009220 <HAL_GPIO_DeInit+0x90>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a4b      	ldr	r2, [pc, #300]	; (8009310 <HAL_GPIO_DeInit+0x180>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d019      	beq.n	800921c <HAL_GPIO_DeInit+0x8c>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a4a      	ldr	r2, [pc, #296]	; (8009314 <HAL_GPIO_DeInit+0x184>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d013      	beq.n	8009218 <HAL_GPIO_DeInit+0x88>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a49      	ldr	r2, [pc, #292]	; (8009318 <HAL_GPIO_DeInit+0x188>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00d      	beq.n	8009214 <HAL_GPIO_DeInit+0x84>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a48      	ldr	r2, [pc, #288]	; (800931c <HAL_GPIO_DeInit+0x18c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d007      	beq.n	8009210 <HAL_GPIO_DeInit+0x80>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a47      	ldr	r2, [pc, #284]	; (8009320 <HAL_GPIO_DeInit+0x190>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d101      	bne.n	800920c <HAL_GPIO_DeInit+0x7c>
 8009208:	2305      	movs	r3, #5
 800920a:	e00a      	b.n	8009222 <HAL_GPIO_DeInit+0x92>
 800920c:	2306      	movs	r3, #6
 800920e:	e008      	b.n	8009222 <HAL_GPIO_DeInit+0x92>
 8009210:	2304      	movs	r3, #4
 8009212:	e006      	b.n	8009222 <HAL_GPIO_DeInit+0x92>
 8009214:	2303      	movs	r3, #3
 8009216:	e004      	b.n	8009222 <HAL_GPIO_DeInit+0x92>
 8009218:	2302      	movs	r3, #2
 800921a:	e002      	b.n	8009222 <HAL_GPIO_DeInit+0x92>
 800921c:	2301      	movs	r3, #1
 800921e:	e000      	b.n	8009222 <HAL_GPIO_DeInit+0x92>
 8009220:	2300      	movs	r3, #0
 8009222:	69fa      	ldr	r2, [r7, #28]
 8009224:	f002 0203 	and.w	r2, r2, #3
 8009228:	0092      	lsls	r2, r2, #2
 800922a:	4093      	lsls	r3, r2
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	429a      	cmp	r2, r3
 8009230:	d132      	bne.n	8009298 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009232:	4b3c      	ldr	r3, [pc, #240]	; (8009324 <HAL_GPIO_DeInit+0x194>)
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	43db      	mvns	r3, r3
 800923a:	493a      	ldr	r1, [pc, #232]	; (8009324 <HAL_GPIO_DeInit+0x194>)
 800923c:	4013      	ands	r3, r2
 800923e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009240:	4b38      	ldr	r3, [pc, #224]	; (8009324 <HAL_GPIO_DeInit+0x194>)
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	43db      	mvns	r3, r3
 8009248:	4936      	ldr	r1, [pc, #216]	; (8009324 <HAL_GPIO_DeInit+0x194>)
 800924a:	4013      	ands	r3, r2
 800924c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800924e:	4b35      	ldr	r3, [pc, #212]	; (8009324 <HAL_GPIO_DeInit+0x194>)
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	43db      	mvns	r3, r3
 8009256:	4933      	ldr	r1, [pc, #204]	; (8009324 <HAL_GPIO_DeInit+0x194>)
 8009258:	4013      	ands	r3, r2
 800925a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800925c:	4b31      	ldr	r3, [pc, #196]	; (8009324 <HAL_GPIO_DeInit+0x194>)
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	43db      	mvns	r3, r3
 8009264:	492f      	ldr	r1, [pc, #188]	; (8009324 <HAL_GPIO_DeInit+0x194>)
 8009266:	4013      	ands	r3, r2
 8009268:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	f003 0303 	and.w	r3, r3, #3
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	220f      	movs	r2, #15
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800927a:	4a23      	ldr	r2, [pc, #140]	; (8009308 <HAL_GPIO_DeInit+0x178>)
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	089b      	lsrs	r3, r3, #2
 8009280:	3302      	adds	r3, #2
 8009282:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	43da      	mvns	r2, r3
 800928a:	481f      	ldr	r0, [pc, #124]	; (8009308 <HAL_GPIO_DeInit+0x178>)
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	089b      	lsrs	r3, r3, #2
 8009290:	400a      	ands	r2, r1
 8009292:	3302      	adds	r3, #2
 8009294:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2bff      	cmp	r3, #255	; 0xff
 800929c:	d801      	bhi.n	80092a2 <HAL_GPIO_DeInit+0x112>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	e001      	b.n	80092a6 <HAL_GPIO_DeInit+0x116>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3304      	adds	r3, #4
 80092a6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2bff      	cmp	r3, #255	; 0xff
 80092ac:	d802      	bhi.n	80092b4 <HAL_GPIO_DeInit+0x124>
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	e002      	b.n	80092ba <HAL_GPIO_DeInit+0x12a>
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	3b08      	subs	r3, #8
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	210f      	movs	r1, #15
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	fa01 f303 	lsl.w	r3, r1, r3
 80092c8:	43db      	mvns	r3, r3
 80092ca:	401a      	ands	r2, r3
 80092cc:	2104      	movs	r1, #4
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	fa01 f303 	lsl.w	r3, r1, r3
 80092d4:	431a      	orrs	r2, r3
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	43db      	mvns	r3, r3
 80092e2:	401a      	ands	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	3301      	adds	r3, #1
 80092ec:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	fa22 f303 	lsr.w	r3, r2, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f47f af52 	bne.w	80091a0 <HAL_GPIO_DeInit+0x10>
  }
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	3724      	adds	r7, #36	; 0x24
 8009302:	46bd      	mov	sp, r7
 8009304:	bc80      	pop	{r7}
 8009306:	4770      	bx	lr
 8009308:	40010000 	.word	0x40010000
 800930c:	40010800 	.word	0x40010800
 8009310:	40010c00 	.word	0x40010c00
 8009314:	40011000 	.word	0x40011000
 8009318:	40011400 	.word	0x40011400
 800931c:	40011800 	.word	0x40011800
 8009320:	40011c00 	.word	0x40011c00
 8009324:	40010400 	.word	0x40010400

08009328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	887b      	ldrh	r3, [r7, #2]
 800933a:	4013      	ands	r3, r2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009340:	2301      	movs	r3, #1
 8009342:	73fb      	strb	r3, [r7, #15]
 8009344:	e001      	b.n	800934a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800934a:	7bfb      	ldrb	r3, [r7, #15]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	bc80      	pop	{r7}
 8009354:	4770      	bx	lr

08009356 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	460b      	mov	r3, r1
 8009360:	807b      	strh	r3, [r7, #2]
 8009362:	4613      	mov	r3, r2
 8009364:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009366:	787b      	ldrb	r3, [r7, #1]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800936c:	887a      	ldrh	r2, [r7, #2]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009372:	e003      	b.n	800937c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009374:	887b      	ldrh	r3, [r7, #2]
 8009376:	041a      	lsls	r2, r3, #16
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	611a      	str	r2, [r3, #16]
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	bc80      	pop	{r7}
 8009384:	4770      	bx	lr

08009386 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009386:	b480      	push	{r7}
 8009388:	b085      	sub	sp, #20
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	460b      	mov	r3, r1
 8009390:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009398:	887a      	ldrh	r2, [r7, #2]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	4013      	ands	r3, r2
 800939e:	041a      	lsls	r2, r3, #16
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	43d9      	mvns	r1, r3
 80093a4:	887b      	ldrh	r3, [r7, #2]
 80093a6:	400b      	ands	r3, r1
 80093a8:	431a      	orrs	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	611a      	str	r2, [r3, #16]
}
 80093ae:	bf00      	nop
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bc80      	pop	{r7}
 80093b6:	4770      	bx	lr

080093b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e12b      	b.n	8009622 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d106      	bne.n	80093e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7fe fff8 	bl	80083d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2224      	movs	r2, #36	; 0x24
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 0201 	bic.w	r2, r2, #1
 80093fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800940a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800941a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800941c:	f001 fdb8 	bl	800af90 <HAL_RCC_GetPCLK1Freq>
 8009420:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	4a81      	ldr	r2, [pc, #516]	; (800962c <HAL_I2C_Init+0x274>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d807      	bhi.n	800943c <HAL_I2C_Init+0x84>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4a80      	ldr	r2, [pc, #512]	; (8009630 <HAL_I2C_Init+0x278>)
 8009430:	4293      	cmp	r3, r2
 8009432:	bf94      	ite	ls
 8009434:	2301      	movls	r3, #1
 8009436:	2300      	movhi	r3, #0
 8009438:	b2db      	uxtb	r3, r3
 800943a:	e006      	b.n	800944a <HAL_I2C_Init+0x92>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4a7d      	ldr	r2, [pc, #500]	; (8009634 <HAL_I2C_Init+0x27c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	bf94      	ite	ls
 8009444:	2301      	movls	r3, #1
 8009446:	2300      	movhi	r3, #0
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e0e7      	b.n	8009622 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4a78      	ldr	r2, [pc, #480]	; (8009638 <HAL_I2C_Init+0x280>)
 8009456:	fba2 2303 	umull	r2, r3, r2, r3
 800945a:	0c9b      	lsrs	r3, r3, #18
 800945c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	430a      	orrs	r2, r1
 8009470:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6a1b      	ldr	r3, [r3, #32]
 8009478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	4a6a      	ldr	r2, [pc, #424]	; (800962c <HAL_I2C_Init+0x274>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d802      	bhi.n	800948c <HAL_I2C_Init+0xd4>
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	3301      	adds	r3, #1
 800948a:	e009      	b.n	80094a0 <HAL_I2C_Init+0xe8>
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009492:	fb02 f303 	mul.w	r3, r2, r3
 8009496:	4a69      	ldr	r2, [pc, #420]	; (800963c <HAL_I2C_Init+0x284>)
 8009498:	fba2 2303 	umull	r2, r3, r2, r3
 800949c:	099b      	lsrs	r3, r3, #6
 800949e:	3301      	adds	r3, #1
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6812      	ldr	r2, [r2, #0]
 80094a4:	430b      	orrs	r3, r1
 80094a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80094b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	495c      	ldr	r1, [pc, #368]	; (800962c <HAL_I2C_Init+0x274>)
 80094bc:	428b      	cmp	r3, r1
 80094be:	d819      	bhi.n	80094f4 <HAL_I2C_Init+0x13c>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	1e59      	subs	r1, r3, #1
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80094ce:	1c59      	adds	r1, r3, #1
 80094d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80094d4:	400b      	ands	r3, r1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <HAL_I2C_Init+0x138>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	1e59      	subs	r1, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80094e8:	3301      	adds	r3, #1
 80094ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ee:	e051      	b.n	8009594 <HAL_I2C_Init+0x1dc>
 80094f0:	2304      	movs	r3, #4
 80094f2:	e04f      	b.n	8009594 <HAL_I2C_Init+0x1dc>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d111      	bne.n	8009520 <HAL_I2C_Init+0x168>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	1e58      	subs	r0, r3, #1
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6859      	ldr	r1, [r3, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	440b      	add	r3, r1
 800950a:	fbb0 f3f3 	udiv	r3, r0, r3
 800950e:	3301      	adds	r3, #1
 8009510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009514:	2b00      	cmp	r3, #0
 8009516:	bf0c      	ite	eq
 8009518:	2301      	moveq	r3, #1
 800951a:	2300      	movne	r3, #0
 800951c:	b2db      	uxtb	r3, r3
 800951e:	e012      	b.n	8009546 <HAL_I2C_Init+0x18e>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	1e58      	subs	r0, r3, #1
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6859      	ldr	r1, [r3, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	440b      	add	r3, r1
 800952e:	0099      	lsls	r1, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	fbb0 f3f3 	udiv	r3, r0, r3
 8009536:	3301      	adds	r3, #1
 8009538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800953c:	2b00      	cmp	r3, #0
 800953e:	bf0c      	ite	eq
 8009540:	2301      	moveq	r3, #1
 8009542:	2300      	movne	r3, #0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <HAL_I2C_Init+0x196>
 800954a:	2301      	movs	r3, #1
 800954c:	e022      	b.n	8009594 <HAL_I2C_Init+0x1dc>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10e      	bne.n	8009574 <HAL_I2C_Init+0x1bc>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	1e58      	subs	r0, r3, #1
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6859      	ldr	r1, [r3, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	440b      	add	r3, r1
 8009564:	fbb0 f3f3 	udiv	r3, r0, r3
 8009568:	3301      	adds	r3, #1
 800956a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800956e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009572:	e00f      	b.n	8009594 <HAL_I2C_Init+0x1dc>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	1e58      	subs	r0, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6859      	ldr	r1, [r3, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	0099      	lsls	r1, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	fbb0 f3f3 	udiv	r3, r0, r3
 800958a:	3301      	adds	r3, #1
 800958c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	6809      	ldr	r1, [r1, #0]
 8009598:	4313      	orrs	r3, r2
 800959a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	69da      	ldr	r2, [r3, #28]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80095c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	6911      	ldr	r1, [r2, #16]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	68d2      	ldr	r2, [r2, #12]
 80095ce:	4311      	orrs	r1, r2
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	6812      	ldr	r2, [r2, #0]
 80095d4:	430b      	orrs	r3, r1
 80095d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	695a      	ldr	r2, [r3, #20]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	431a      	orrs	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	430a      	orrs	r2, r1
 80095f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f042 0201 	orr.w	r2, r2, #1
 8009602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	000186a0 	.word	0x000186a0
 8009630:	001e847f 	.word	0x001e847f
 8009634:	003d08ff 	.word	0x003d08ff
 8009638:	431bde83 	.word	0x431bde83
 800963c:	10624dd3 	.word	0x10624dd3

08009640 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e021      	b.n	8009696 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2224      	movs	r2, #36	; 0x24
 8009656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0201 	bic.w	r2, r2, #1
 8009668:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7fe fef0 	bl	8008450 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	461a      	mov	r2, r3
 80096ac:	460b      	mov	r3, r1
 80096ae:	817b      	strh	r3, [r7, #10]
 80096b0:	4613      	mov	r3, r2
 80096b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80096b4:	f7ff f85e 	bl	8008774 <HAL_GetTick>
 80096b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	f040 80e0 	bne.w	8009888 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	2319      	movs	r3, #25
 80096ce:	2201      	movs	r2, #1
 80096d0:	4970      	ldr	r1, [pc, #448]	; (8009894 <HAL_I2C_Master_Transmit+0x1f4>)
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 fe5c 	bl	800a390 <I2C_WaitOnFlagUntilTimeout>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80096de:	2302      	movs	r3, #2
 80096e0:	e0d3      	b.n	800988a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d101      	bne.n	80096f0 <HAL_I2C_Master_Transmit+0x50>
 80096ec:	2302      	movs	r3, #2
 80096ee:	e0cc      	b.n	800988a <HAL_I2C_Master_Transmit+0x1ea>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	2b01      	cmp	r3, #1
 8009704:	d007      	beq.n	8009716 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f042 0201 	orr.w	r2, r2, #1
 8009714:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009724:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2221      	movs	r2, #33	; 0x21
 800972a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2210      	movs	r2, #16
 8009732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	893a      	ldrh	r2, [r7, #8]
 8009746:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4a50      	ldr	r2, [pc, #320]	; (8009898 <HAL_I2C_Master_Transmit+0x1f8>)
 8009756:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009758:	8979      	ldrh	r1, [r7, #10]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	6a3a      	ldr	r2, [r7, #32]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fc16 	bl	8009f90 <I2C_MasterRequestWrite>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e08d      	b.n	800988a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800976e:	2300      	movs	r3, #0
 8009770:	613b      	str	r3, [r7, #16]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	613b      	str	r3, [r7, #16]
 8009782:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009784:	e066      	b.n	8009854 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	6a39      	ldr	r1, [r7, #32]
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 ff1a 	bl	800a5c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00d      	beq.n	80097b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	2b04      	cmp	r3, #4
 800979c:	d107      	bne.n	80097ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e06b      	b.n	800988a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097da:	3b01      	subs	r3, #1
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d11b      	bne.n	8009828 <HAL_I2C_Master_Transmit+0x188>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d017      	beq.n	8009828 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	781a      	ldrb	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009812:	b29b      	uxth	r3, r3
 8009814:	3b01      	subs	r3, #1
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009820:	3b01      	subs	r3, #1
 8009822:	b29a      	uxth	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	6a39      	ldr	r1, [r7, #32]
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 ff11 	bl	800a654 <I2C_WaitOnBTFFlagUntilTimeout>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00d      	beq.n	8009854 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983c:	2b04      	cmp	r3, #4
 800983e:	d107      	bne.n	8009850 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800984e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e01a      	b.n	800988a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009858:	2b00      	cmp	r3, #0
 800985a:	d194      	bne.n	8009786 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800986a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	e000      	b.n	800988a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009888:	2302      	movs	r3, #2
  }
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	00100002 	.word	0x00100002
 8009898:	ffff0000 	.word	0xffff0000

0800989c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af02      	add	r7, sp, #8
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	4608      	mov	r0, r1
 80098a6:	4611      	mov	r1, r2
 80098a8:	461a      	mov	r2, r3
 80098aa:	4603      	mov	r3, r0
 80098ac:	817b      	strh	r3, [r7, #10]
 80098ae:	460b      	mov	r3, r1
 80098b0:	813b      	strh	r3, [r7, #8]
 80098b2:	4613      	mov	r3, r2
 80098b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098b6:	f7fe ff5d 	bl	8008774 <HAL_GetTick>
 80098ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	f040 80d9 	bne.w	8009a7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	2319      	movs	r3, #25
 80098d0:	2201      	movs	r2, #1
 80098d2:	496d      	ldr	r1, [pc, #436]	; (8009a88 <HAL_I2C_Mem_Write+0x1ec>)
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f000 fd5b 	bl	800a390 <I2C_WaitOnFlagUntilTimeout>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80098e0:	2302      	movs	r3, #2
 80098e2:	e0cc      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d101      	bne.n	80098f2 <HAL_I2C_Mem_Write+0x56>
 80098ee:	2302      	movs	r3, #2
 80098f0:	e0c5      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b01      	cmp	r3, #1
 8009906:	d007      	beq.n	8009918 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0201 	orr.w	r2, r2, #1
 8009916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2221      	movs	r2, #33	; 0x21
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2240      	movs	r2, #64	; 0x40
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a3a      	ldr	r2, [r7, #32]
 8009942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4a4d      	ldr	r2, [pc, #308]	; (8009a8c <HAL_I2C_Mem_Write+0x1f0>)
 8009958:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800995a:	88f8      	ldrh	r0, [r7, #6]
 800995c:	893a      	ldrh	r2, [r7, #8]
 800995e:	8979      	ldrh	r1, [r7, #10]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4603      	mov	r3, r0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fb92 	bl	800a094 <I2C_RequestMemoryWrite>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d052      	beq.n	8009a1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e081      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 fe20 	bl	800a5c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00d      	beq.n	80099a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	2b04      	cmp	r3, #4
 8009990:	d107      	bne.n	80099a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e06b      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c0:	3b01      	subs	r3, #1
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d11b      	bne.n	8009a1c <HAL_I2C_Mem_Write+0x180>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d017      	beq.n	8009a1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	781a      	ldrb	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1aa      	bne.n	800997a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fe13 	bl	800a654 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00d      	beq.n	8009a50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d107      	bne.n	8009a4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e016      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e000      	b.n	8009a7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a7c:	2302      	movs	r3, #2
  }
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	00100002 	.word	0x00100002
 8009a8c:	ffff0000 	.word	0xffff0000

08009a90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08c      	sub	sp, #48	; 0x30
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	4608      	mov	r0, r1
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	817b      	strh	r3, [r7, #10]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	813b      	strh	r3, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009aae:	f7fe fe61 	bl	8008774 <HAL_GetTick>
 8009ab2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b20      	cmp	r3, #32
 8009abe:	f040 8244 	bne.w	8009f4a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	2319      	movs	r3, #25
 8009ac8:	2201      	movs	r2, #1
 8009aca:	4982      	ldr	r1, [pc, #520]	; (8009cd4 <HAL_I2C_Mem_Read+0x244>)
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 fc5f 	bl	800a390 <I2C_WaitOnFlagUntilTimeout>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009ad8:	2302      	movs	r3, #2
 8009ada:	e237      	b.n	8009f4c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d101      	bne.n	8009aea <HAL_I2C_Mem_Read+0x5a>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e230      	b.n	8009f4c <HAL_I2C_Mem_Read+0x4bc>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d007      	beq.n	8009b10 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0201 	orr.w	r2, r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2222      	movs	r2, #34	; 0x22
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2240      	movs	r2, #64	; 0x40
 8009b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4a62      	ldr	r2, [pc, #392]	; (8009cd8 <HAL_I2C_Mem_Read+0x248>)
 8009b50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b52:	88f8      	ldrh	r0, [r7, #6]
 8009b54:	893a      	ldrh	r2, [r7, #8]
 8009b56:	8979      	ldrh	r1, [r7, #10]
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	9301      	str	r3, [sp, #4]
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	4603      	mov	r3, r0
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 fb2c 	bl	800a1c0 <I2C_RequestMemoryRead>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e1ec      	b.n	8009f4c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d113      	bne.n	8009ba2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	61fb      	str	r3, [r7, #28]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	695b      	ldr	r3, [r3, #20]
 8009b84:	61fb      	str	r3, [r7, #28]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	61fb      	str	r3, [r7, #28]
 8009b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	e1c0      	b.n	8009f24 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d11e      	bne.n	8009be8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bba:	b672      	cpsid	i
}
 8009bbc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61bb      	str	r3, [r7, #24]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	61bb      	str	r3, [r7, #24]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	61bb      	str	r3, [r7, #24]
 8009bd2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009be4:	b662      	cpsie	i
}
 8009be6:	e035      	b.n	8009c54 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d11e      	bne.n	8009c2e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c00:	b672      	cpsid	i
}
 8009c02:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c04:	2300      	movs	r3, #0
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	617b      	str	r3, [r7, #20]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c2a:	b662      	cpsie	i
}
 8009c2c:	e012      	b.n	8009c54 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c3c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c3e:	2300      	movs	r3, #0
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	613b      	str	r3, [r7, #16]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c54:	e166      	b.n	8009f24 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	f200 811f 	bhi.w	8009e9e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d123      	bne.n	8009cb0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 fd39 	bl	800a6e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e167      	b.n	8009f4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	691a      	ldr	r2, [r3, #16]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009cae:	e139      	b.n	8009f24 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d152      	bne.n	8009d5e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4906      	ldr	r1, [pc, #24]	; (8009cdc <HAL_I2C_Mem_Read+0x24c>)
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 fb64 	bl	800a390 <I2C_WaitOnFlagUntilTimeout>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d008      	beq.n	8009ce0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e13c      	b.n	8009f4c <HAL_I2C_Mem_Read+0x4bc>
 8009cd2:	bf00      	nop
 8009cd4:	00100002 	.word	0x00100002
 8009cd8:	ffff0000 	.word	0xffff0000
 8009cdc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009ce0:	b672      	cpsid	i
}
 8009ce2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691a      	ldr	r2, [r3, #16]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	b2d2      	uxtb	r2, r2
 8009d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d26:	b662      	cpsie	i
}
 8009d28:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	b2d2      	uxtb	r2, r2
 8009d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d46:	3b01      	subs	r3, #1
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	3b01      	subs	r3, #1
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d5c:	e0e2      	b.n	8009f24 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d64:	2200      	movs	r2, #0
 8009d66:	497b      	ldr	r1, [pc, #492]	; (8009f54 <HAL_I2C_Mem_Read+0x4c4>)
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 fb11 	bl	800a390 <I2C_WaitOnFlagUntilTimeout>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e0e9      	b.n	8009f4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d88:	b672      	cpsid	i
}
 8009d8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	691a      	ldr	r2, [r3, #16]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d96:	b2d2      	uxtb	r2, r2
 8009d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da8:	3b01      	subs	r3, #1
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009dbe:	4b66      	ldr	r3, [pc, #408]	; (8009f58 <HAL_I2C_Mem_Read+0x4c8>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	08db      	lsrs	r3, r3, #3
 8009dc4:	4a65      	ldr	r2, [pc, #404]	; (8009f5c <HAL_I2C_Mem_Read+0x4cc>)
 8009dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dca:	0a1a      	lsrs	r2, r3, #8
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	00da      	lsls	r2, r3, #3
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d118      	bne.n	8009e16 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	f043 0220 	orr.w	r2, r3, #32
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e06:	b662      	cpsie	i
}
 8009e08:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e09a      	b.n	8009f4c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d1d9      	bne.n	8009dd8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691a      	ldr	r2, [r3, #16]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	b2d2      	uxtb	r2, r2
 8009e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e50:	3b01      	subs	r3, #1
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e66:	b662      	cpsie	i
}
 8009e68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691a      	ldr	r2, [r3, #16]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	b2d2      	uxtb	r2, r2
 8009e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e86:	3b01      	subs	r3, #1
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e9c:	e042      	b.n	8009f24 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 fc1e 	bl	800a6e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e04c      	b.n	8009f4c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	691a      	ldr	r2, [r3, #16]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	b2d2      	uxtb	r2, r2
 8009ebe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	1c5a      	adds	r2, r3, #1
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	3b01      	subs	r3, #1
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f003 0304 	and.w	r3, r3, #4
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d118      	bne.n	8009f24 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	691a      	ldr	r2, [r3, #16]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	b2d2      	uxtb	r2, r2
 8009efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f47f ae94 	bne.w	8009c56 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	e000      	b.n	8009f4c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f4a:	2302      	movs	r3, #2
  }
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3728      	adds	r7, #40	; 0x28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	00010004 	.word	0x00010004
 8009f58:	200000b0 	.word	0x200000b0
 8009f5c:	14f8b589 	.word	0x14f8b589

08009f60 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f6e:	b2db      	uxtb	r3, r3
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bc80      	pop	{r7}
 8009f78:	4770      	bx	lr

08009f7a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bc80      	pop	{r7}
 8009f8e:	4770      	bx	lr

08009f90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b088      	sub	sp, #32
 8009f94:	af02      	add	r7, sp, #8
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	607a      	str	r2, [r7, #4]
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2b08      	cmp	r3, #8
 8009faa:	d006      	beq.n	8009fba <I2C_MasterRequestWrite+0x2a>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d003      	beq.n	8009fba <I2C_MasterRequestWrite+0x2a>
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009fb8:	d108      	bne.n	8009fcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	e00b      	b.n	8009fe4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd0:	2b12      	cmp	r3, #18
 8009fd2:	d107      	bne.n	8009fe4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fe2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f9cd 	bl	800a390 <I2C_WaitOnFlagUntilTimeout>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00d      	beq.n	800a018 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00a:	d103      	bne.n	800a014 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a012:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e035      	b.n	800a084 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a020:	d108      	bne.n	800a034 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a022:	897b      	ldrh	r3, [r7, #10]
 800a024:	b2db      	uxtb	r3, r3
 800a026:	461a      	mov	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a030:	611a      	str	r2, [r3, #16]
 800a032:	e01b      	b.n	800a06c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a034:	897b      	ldrh	r3, [r7, #10]
 800a036:	11db      	asrs	r3, r3, #7
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	f003 0306 	and.w	r3, r3, #6
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f063 030f 	orn	r3, r3, #15
 800a044:	b2da      	uxtb	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	490e      	ldr	r1, [pc, #56]	; (800a08c <I2C_MasterRequestWrite+0xfc>)
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fa16 	bl	800a484 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e010      	b.n	800a084 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a062:	897b      	ldrh	r3, [r7, #10]
 800a064:	b2da      	uxtb	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	4907      	ldr	r1, [pc, #28]	; (800a090 <I2C_MasterRequestWrite+0x100>)
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f000 fa06 	bl	800a484 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	00010008 	.word	0x00010008
 800a090:	00010002 	.word	0x00010002

0800a094 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af02      	add	r7, sp, #8
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	4608      	mov	r0, r1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	817b      	strh	r3, [r7, #10]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	813b      	strh	r3, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 f960 	bl	800a390 <I2C_WaitOnFlagUntilTimeout>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00d      	beq.n	800a0f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0e4:	d103      	bne.n	800a0ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e05f      	b.n	800a1b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0f2:	897b      	ldrh	r3, [r7, #10]
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a100:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	6a3a      	ldr	r2, [r7, #32]
 800a106:	492d      	ldr	r1, [pc, #180]	; (800a1bc <I2C_RequestMemoryWrite+0x128>)
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 f9bb 	bl	800a484 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e04c      	b.n	800a1b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a118:	2300      	movs	r3, #0
 800a11a:	617b      	str	r3, [r7, #20]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	617b      	str	r3, [r7, #20]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a12e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a130:	6a39      	ldr	r1, [r7, #32]
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 fa46 	bl	800a5c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00d      	beq.n	800a15a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	2b04      	cmp	r3, #4
 800a144:	d107      	bne.n	800a156 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a154:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e02b      	b.n	800a1b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a15a:	88fb      	ldrh	r3, [r7, #6]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d105      	bne.n	800a16c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a160:	893b      	ldrh	r3, [r7, #8]
 800a162:	b2da      	uxtb	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	611a      	str	r2, [r3, #16]
 800a16a:	e021      	b.n	800a1b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a16c:	893b      	ldrh	r3, [r7, #8]
 800a16e:	0a1b      	lsrs	r3, r3, #8
 800a170:	b29b      	uxth	r3, r3
 800a172:	b2da      	uxtb	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17c:	6a39      	ldr	r1, [r7, #32]
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 fa20 	bl	800a5c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00d      	beq.n	800a1a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	2b04      	cmp	r3, #4
 800a190:	d107      	bne.n	800a1a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e005      	b.n	800a1b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1a6:	893b      	ldrh	r3, [r7, #8]
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	00010002 	.word	0x00010002

0800a1c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	817b      	strh	r3, [r7, #10]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	813b      	strh	r3, [r7, #8]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	2200      	movs	r2, #0
 800a202:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f000 f8c2 	bl	800a390 <I2C_WaitOnFlagUntilTimeout>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00d      	beq.n	800a22e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a220:	d103      	bne.n	800a22a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a228:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e0aa      	b.n	800a384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a22e:	897b      	ldrh	r3, [r7, #10]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	461a      	mov	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a23c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	6a3a      	ldr	r2, [r7, #32]
 800a242:	4952      	ldr	r1, [pc, #328]	; (800a38c <I2C_RequestMemoryRead+0x1cc>)
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f91d 	bl	800a484 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e097      	b.n	800a384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a254:	2300      	movs	r3, #0
 800a256:	617b      	str	r3, [r7, #20]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a26a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a26c:	6a39      	ldr	r1, [r7, #32]
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f000 f9a8 	bl	800a5c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00d      	beq.n	800a296 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d107      	bne.n	800a292 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a290:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e076      	b.n	800a384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a296:	88fb      	ldrh	r3, [r7, #6]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d105      	bne.n	800a2a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a29c:	893b      	ldrh	r3, [r7, #8]
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	611a      	str	r2, [r3, #16]
 800a2a6:	e021      	b.n	800a2ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2a8:	893b      	ldrh	r3, [r7, #8]
 800a2aa:	0a1b      	lsrs	r3, r3, #8
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b8:	6a39      	ldr	r1, [r7, #32]
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 f982 	bl	800a5c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00d      	beq.n	800a2e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	d107      	bne.n	800a2de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e050      	b.n	800a384 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2e2:	893b      	ldrh	r3, [r7, #8]
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ee:	6a39      	ldr	r1, [r7, #32]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 f967 	bl	800a5c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00d      	beq.n	800a318 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a300:	2b04      	cmp	r3, #4
 800a302:	d107      	bne.n	800a314 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a312:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e035      	b.n	800a384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a326:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	2200      	movs	r2, #0
 800a330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f000 f82b 	bl	800a390 <I2C_WaitOnFlagUntilTimeout>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00d      	beq.n	800a35c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a34e:	d103      	bne.n	800a358 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e013      	b.n	800a384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a35c:	897b      	ldrh	r3, [r7, #10]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f043 0301 	orr.w	r3, r3, #1
 800a364:	b2da      	uxtb	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	6a3a      	ldr	r2, [r7, #32]
 800a370:	4906      	ldr	r1, [pc, #24]	; (800a38c <I2C_RequestMemoryRead+0x1cc>)
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 f886 	bl	800a484 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	00010002 	.word	0x00010002

0800a390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	4613      	mov	r3, r2
 800a39e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3a0:	e048      	b.n	800a434 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3a8:	d044      	beq.n	800a434 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3aa:	f7fe f9e3 	bl	8008774 <HAL_GetTick>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d302      	bcc.n	800a3c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d139      	bne.n	800a434 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	0c1b      	lsrs	r3, r3, #16
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d10d      	bne.n	800a3e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	43da      	mvns	r2, r3
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bf0c      	ite	eq
 800a3dc:	2301      	moveq	r3, #1
 800a3de:	2300      	movne	r3, #0
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	e00c      	b.n	800a400 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	43da      	mvns	r2, r3
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	bf0c      	ite	eq
 800a3f8:	2301      	moveq	r3, #1
 800a3fa:	2300      	movne	r3, #0
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	461a      	mov	r2, r3
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	429a      	cmp	r2, r3
 800a404:	d116      	bne.n	800a434 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2220      	movs	r2, #32
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a420:	f043 0220 	orr.w	r2, r3, #32
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e023      	b.n	800a47c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	0c1b      	lsrs	r3, r3, #16
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d10d      	bne.n	800a45a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	43da      	mvns	r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4013      	ands	r3, r2
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	bf0c      	ite	eq
 800a450:	2301      	moveq	r3, #1
 800a452:	2300      	movne	r3, #0
 800a454:	b2db      	uxtb	r3, r3
 800a456:	461a      	mov	r2, r3
 800a458:	e00c      	b.n	800a474 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	43da      	mvns	r2, r3
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	4013      	ands	r3, r2
 800a466:	b29b      	uxth	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bf0c      	ite	eq
 800a46c:	2301      	moveq	r3, #1
 800a46e:	2300      	movne	r3, #0
 800a470:	b2db      	uxtb	r3, r3
 800a472:	461a      	mov	r2, r3
 800a474:	79fb      	ldrb	r3, [r7, #7]
 800a476:	429a      	cmp	r2, r3
 800a478:	d093      	beq.n	800a3a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a492:	e071      	b.n	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a49e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a2:	d123      	bne.n	800a4ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d8:	f043 0204 	orr.w	r2, r3, #4
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e067      	b.n	800a5bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f2:	d041      	beq.n	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f4:	f7fe f93e 	bl	8008774 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	429a      	cmp	r2, r3
 800a502:	d302      	bcc.n	800a50a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d136      	bne.n	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	0c1b      	lsrs	r3, r3, #16
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b01      	cmp	r3, #1
 800a512:	d10c      	bne.n	800a52e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	695b      	ldr	r3, [r3, #20]
 800a51a:	43da      	mvns	r2, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	4013      	ands	r3, r2
 800a520:	b29b      	uxth	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	bf14      	ite	ne
 800a526:	2301      	movne	r3, #1
 800a528:	2300      	moveq	r3, #0
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	e00b      	b.n	800a546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	43da      	mvns	r2, r3
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	4013      	ands	r3, r2
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bf14      	ite	ne
 800a540:	2301      	movne	r3, #1
 800a542:	2300      	moveq	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d016      	beq.n	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2220      	movs	r2, #32
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	f043 0220 	orr.w	r2, r3, #32
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e021      	b.n	800a5bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	0c1b      	lsrs	r3, r3, #16
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d10c      	bne.n	800a59c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	43da      	mvns	r2, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	4013      	ands	r3, r2
 800a58e:	b29b      	uxth	r3, r3
 800a590:	2b00      	cmp	r3, #0
 800a592:	bf14      	ite	ne
 800a594:	2301      	movne	r3, #1
 800a596:	2300      	moveq	r3, #0
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	e00b      	b.n	800a5b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	43da      	mvns	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	bf14      	ite	ne
 800a5ae:	2301      	movne	r3, #1
 800a5b0:	2300      	moveq	r3, #0
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f47f af6d 	bne.w	800a494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5d0:	e034      	b.n	800a63c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 f8e3 	bl	800a79e <I2C_IsAcknowledgeFailed>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e034      	b.n	800a64c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e8:	d028      	beq.n	800a63c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ea:	f7fe f8c3 	bl	8008774 <HAL_GetTick>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d302      	bcc.n	800a600 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d11d      	bne.n	800a63c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60a:	2b80      	cmp	r3, #128	; 0x80
 800a60c:	d016      	beq.n	800a63c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2220      	movs	r2, #32
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a628:	f043 0220 	orr.w	r2, r3, #32
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e007      	b.n	800a64c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a646:	2b80      	cmp	r3, #128	; 0x80
 800a648:	d1c3      	bne.n	800a5d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a660:	e034      	b.n	800a6cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 f89b 	bl	800a79e <I2C_IsAcknowledgeFailed>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e034      	b.n	800a6dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a678:	d028      	beq.n	800a6cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a67a:	f7fe f87b 	bl	8008774 <HAL_GetTick>
 800a67e:	4602      	mov	r2, r0
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	429a      	cmp	r2, r3
 800a688:	d302      	bcc.n	800a690 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d11d      	bne.n	800a6cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d016      	beq.n	800a6cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2220      	movs	r2, #32
 800a6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b8:	f043 0220 	orr.w	r2, r3, #32
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e007      	b.n	800a6dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f003 0304 	and.w	r3, r3, #4
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d1c3      	bne.n	800a662 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6f0:	e049      	b.n	800a786 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	f003 0310 	and.w	r3, r3, #16
 800a6fc:	2b10      	cmp	r3, #16
 800a6fe:	d119      	bne.n	800a734 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f06f 0210 	mvn.w	r2, #16
 800a708:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2220      	movs	r2, #32
 800a714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e030      	b.n	800a796 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a734:	f7fe f81e 	bl	8008774 <HAL_GetTick>
 800a738:	4602      	mov	r2, r0
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	429a      	cmp	r2, r3
 800a742:	d302      	bcc.n	800a74a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d11d      	bne.n	800a786 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a754:	2b40      	cmp	r3, #64	; 0x40
 800a756:	d016      	beq.n	800a786 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2220      	movs	r2, #32
 800a762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a772:	f043 0220 	orr.w	r2, r3, #32
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e007      	b.n	800a796 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a790:	2b40      	cmp	r3, #64	; 0x40
 800a792:	d1ae      	bne.n	800a6f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b4:	d11b      	bne.n	800a7ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2220      	movs	r2, #32
 800a7ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	f043 0204 	orr.w	r2, r3, #4
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e000      	b.n	800a7f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bc80      	pop	{r7}
 800a7f8:	4770      	bx	lr
	...

0800a7fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e272      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 8087 	beq.w	800a92a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a81c:	4b92      	ldr	r3, [pc, #584]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f003 030c 	and.w	r3, r3, #12
 800a824:	2b04      	cmp	r3, #4
 800a826:	d00c      	beq.n	800a842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a828:	4b8f      	ldr	r3, [pc, #572]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	f003 030c 	and.w	r3, r3, #12
 800a830:	2b08      	cmp	r3, #8
 800a832:	d112      	bne.n	800a85a <HAL_RCC_OscConfig+0x5e>
 800a834:	4b8c      	ldr	r3, [pc, #560]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a83c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a840:	d10b      	bne.n	800a85a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a842:	4b89      	ldr	r3, [pc, #548]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d06c      	beq.n	800a928 <HAL_RCC_OscConfig+0x12c>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d168      	bne.n	800a928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e24c      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a862:	d106      	bne.n	800a872 <HAL_RCC_OscConfig+0x76>
 800a864:	4b80      	ldr	r3, [pc, #512]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a7f      	ldr	r2, [pc, #508]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a86a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	e02e      	b.n	800a8d0 <HAL_RCC_OscConfig+0xd4>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10c      	bne.n	800a894 <HAL_RCC_OscConfig+0x98>
 800a87a:	4b7b      	ldr	r3, [pc, #492]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a7a      	ldr	r2, [pc, #488]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	4b78      	ldr	r3, [pc, #480]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a77      	ldr	r2, [pc, #476]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a88c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	e01d      	b.n	800a8d0 <HAL_RCC_OscConfig+0xd4>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a89c:	d10c      	bne.n	800a8b8 <HAL_RCC_OscConfig+0xbc>
 800a89e:	4b72      	ldr	r3, [pc, #456]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a71      	ldr	r2, [pc, #452]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a8a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	4b6f      	ldr	r3, [pc, #444]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a6e      	ldr	r2, [pc, #440]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a8b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	e00b      	b.n	800a8d0 <HAL_RCC_OscConfig+0xd4>
 800a8b8:	4b6b      	ldr	r3, [pc, #428]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a6a      	ldr	r2, [pc, #424]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a8be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8c2:	6013      	str	r3, [r2, #0]
 800a8c4:	4b68      	ldr	r3, [pc, #416]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a67      	ldr	r2, [pc, #412]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a8ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d013      	beq.n	800a900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8d8:	f7fd ff4c 	bl	8008774 <HAL_GetTick>
 800a8dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8de:	e008      	b.n	800a8f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8e0:	f7fd ff48 	bl	8008774 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	2b64      	cmp	r3, #100	; 0x64
 800a8ec:	d901      	bls.n	800a8f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e200      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8f2:	4b5d      	ldr	r3, [pc, #372]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d0f0      	beq.n	800a8e0 <HAL_RCC_OscConfig+0xe4>
 800a8fe:	e014      	b.n	800a92a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a900:	f7fd ff38 	bl	8008774 <HAL_GetTick>
 800a904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a906:	e008      	b.n	800a91a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a908:	f7fd ff34 	bl	8008774 <HAL_GetTick>
 800a90c:	4602      	mov	r2, r0
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	2b64      	cmp	r3, #100	; 0x64
 800a914:	d901      	bls.n	800a91a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e1ec      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a91a:	4b53      	ldr	r3, [pc, #332]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1f0      	bne.n	800a908 <HAL_RCC_OscConfig+0x10c>
 800a926:	e000      	b.n	800a92a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0302 	and.w	r3, r3, #2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d063      	beq.n	800a9fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a936:	4b4c      	ldr	r3, [pc, #304]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f003 030c 	and.w	r3, r3, #12
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00b      	beq.n	800a95a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a942:	4b49      	ldr	r3, [pc, #292]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f003 030c 	and.w	r3, r3, #12
 800a94a:	2b08      	cmp	r3, #8
 800a94c:	d11c      	bne.n	800a988 <HAL_RCC_OscConfig+0x18c>
 800a94e:	4b46      	ldr	r3, [pc, #280]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a956:	2b00      	cmp	r3, #0
 800a958:	d116      	bne.n	800a988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a95a:	4b43      	ldr	r3, [pc, #268]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <HAL_RCC_OscConfig+0x176>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d001      	beq.n	800a972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e1c0      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a972:	4b3d      	ldr	r3, [pc, #244]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	00db      	lsls	r3, r3, #3
 800a980:	4939      	ldr	r1, [pc, #228]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a982:	4313      	orrs	r3, r2
 800a984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a986:	e03a      	b.n	800a9fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d020      	beq.n	800a9d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a990:	4b36      	ldr	r3, [pc, #216]	; (800aa6c <HAL_RCC_OscConfig+0x270>)
 800a992:	2201      	movs	r2, #1
 800a994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a996:	f7fd feed 	bl	8008774 <HAL_GetTick>
 800a99a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a99c:	e008      	b.n	800a9b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a99e:	f7fd fee9 	bl	8008774 <HAL_GetTick>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d901      	bls.n	800a9b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e1a1      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9b0:	4b2d      	ldr	r3, [pc, #180]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d0f0      	beq.n	800a99e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9bc:	4b2a      	ldr	r3, [pc, #168]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	00db      	lsls	r3, r3, #3
 800a9ca:	4927      	ldr	r1, [pc, #156]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	600b      	str	r3, [r1, #0]
 800a9d0:	e015      	b.n	800a9fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9d2:	4b26      	ldr	r3, [pc, #152]	; (800aa6c <HAL_RCC_OscConfig+0x270>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9d8:	f7fd fecc 	bl	8008774 <HAL_GetTick>
 800a9dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9de:	e008      	b.n	800a9f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9e0:	f7fd fec8 	bl	8008774 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d901      	bls.n	800a9f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e180      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9f2:	4b1d      	ldr	r3, [pc, #116]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0302 	and.w	r3, r3, #2
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1f0      	bne.n	800a9e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0308 	and.w	r3, r3, #8
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d03a      	beq.n	800aa80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d019      	beq.n	800aa46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa12:	4b17      	ldr	r3, [pc, #92]	; (800aa70 <HAL_RCC_OscConfig+0x274>)
 800aa14:	2201      	movs	r2, #1
 800aa16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa18:	f7fd feac 	bl	8008774 <HAL_GetTick>
 800aa1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa1e:	e008      	b.n	800aa32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa20:	f7fd fea8 	bl	8008774 <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d901      	bls.n	800aa32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e160      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa32:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <HAL_RCC_OscConfig+0x26c>)
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0f0      	beq.n	800aa20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa3e:	2001      	movs	r0, #1
 800aa40:	f000 face 	bl	800afe0 <RCC_Delay>
 800aa44:	e01c      	b.n	800aa80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa46:	4b0a      	ldr	r3, [pc, #40]	; (800aa70 <HAL_RCC_OscConfig+0x274>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa4c:	f7fd fe92 	bl	8008774 <HAL_GetTick>
 800aa50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa52:	e00f      	b.n	800aa74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa54:	f7fd fe8e 	bl	8008774 <HAL_GetTick>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d908      	bls.n	800aa74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e146      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
 800aa66:	bf00      	nop
 800aa68:	40021000 	.word	0x40021000
 800aa6c:	42420000 	.word	0x42420000
 800aa70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa74:	4b92      	ldr	r3, [pc, #584]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	f003 0302 	and.w	r3, r3, #2
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e9      	bne.n	800aa54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 80a6 	beq.w	800abda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa92:	4b8b      	ldr	r3, [pc, #556]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa94:	69db      	ldr	r3, [r3, #28]
 800aa96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10d      	bne.n	800aaba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa9e:	4b88      	ldr	r3, [pc, #544]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	4a87      	ldr	r2, [pc, #540]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800aaa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaa8:	61d3      	str	r3, [r2, #28]
 800aaaa:	4b85      	ldr	r3, [pc, #532]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aab2:	60bb      	str	r3, [r7, #8]
 800aab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aab6:	2301      	movs	r3, #1
 800aab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaba:	4b82      	ldr	r3, [pc, #520]	; (800acc4 <HAL_RCC_OscConfig+0x4c8>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d118      	bne.n	800aaf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aac6:	4b7f      	ldr	r3, [pc, #508]	; (800acc4 <HAL_RCC_OscConfig+0x4c8>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a7e      	ldr	r2, [pc, #504]	; (800acc4 <HAL_RCC_OscConfig+0x4c8>)
 800aacc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aad2:	f7fd fe4f 	bl	8008774 <HAL_GetTick>
 800aad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aad8:	e008      	b.n	800aaec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aada:	f7fd fe4b 	bl	8008774 <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	2b64      	cmp	r3, #100	; 0x64
 800aae6:	d901      	bls.n	800aaec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e103      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaec:	4b75      	ldr	r3, [pc, #468]	; (800acc4 <HAL_RCC_OscConfig+0x4c8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0f0      	beq.n	800aada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d106      	bne.n	800ab0e <HAL_RCC_OscConfig+0x312>
 800ab00:	4b6f      	ldr	r3, [pc, #444]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	4a6e      	ldr	r2, [pc, #440]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	6213      	str	r3, [r2, #32]
 800ab0c:	e02d      	b.n	800ab6a <HAL_RCC_OscConfig+0x36e>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10c      	bne.n	800ab30 <HAL_RCC_OscConfig+0x334>
 800ab16:	4b6a      	ldr	r3, [pc, #424]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	4a69      	ldr	r2, [pc, #420]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab1c:	f023 0301 	bic.w	r3, r3, #1
 800ab20:	6213      	str	r3, [r2, #32]
 800ab22:	4b67      	ldr	r3, [pc, #412]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	4a66      	ldr	r2, [pc, #408]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab28:	f023 0304 	bic.w	r3, r3, #4
 800ab2c:	6213      	str	r3, [r2, #32]
 800ab2e:	e01c      	b.n	800ab6a <HAL_RCC_OscConfig+0x36e>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b05      	cmp	r3, #5
 800ab36:	d10c      	bne.n	800ab52 <HAL_RCC_OscConfig+0x356>
 800ab38:	4b61      	ldr	r3, [pc, #388]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	4a60      	ldr	r2, [pc, #384]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab3e:	f043 0304 	orr.w	r3, r3, #4
 800ab42:	6213      	str	r3, [r2, #32]
 800ab44:	4b5e      	ldr	r3, [pc, #376]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	4a5d      	ldr	r2, [pc, #372]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab4a:	f043 0301 	orr.w	r3, r3, #1
 800ab4e:	6213      	str	r3, [r2, #32]
 800ab50:	e00b      	b.n	800ab6a <HAL_RCC_OscConfig+0x36e>
 800ab52:	4b5b      	ldr	r3, [pc, #364]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	4a5a      	ldr	r2, [pc, #360]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab58:	f023 0301 	bic.w	r3, r3, #1
 800ab5c:	6213      	str	r3, [r2, #32]
 800ab5e:	4b58      	ldr	r3, [pc, #352]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	4a57      	ldr	r2, [pc, #348]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab64:	f023 0304 	bic.w	r3, r3, #4
 800ab68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d015      	beq.n	800ab9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab72:	f7fd fdff 	bl	8008774 <HAL_GetTick>
 800ab76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab78:	e00a      	b.n	800ab90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab7a:	f7fd fdfb 	bl	8008774 <HAL_GetTick>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d901      	bls.n	800ab90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e0b1      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab90:	4b4b      	ldr	r3, [pc, #300]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab92:	6a1b      	ldr	r3, [r3, #32]
 800ab94:	f003 0302 	and.w	r3, r3, #2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0ee      	beq.n	800ab7a <HAL_RCC_OscConfig+0x37e>
 800ab9c:	e014      	b.n	800abc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab9e:	f7fd fde9 	bl	8008774 <HAL_GetTick>
 800aba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aba4:	e00a      	b.n	800abbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aba6:	f7fd fde5 	bl	8008774 <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d901      	bls.n	800abbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e09b      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abbc:	4b40      	ldr	r3, [pc, #256]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1ee      	bne.n	800aba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d105      	bne.n	800abda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abce:	4b3c      	ldr	r3, [pc, #240]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	4a3b      	ldr	r2, [pc, #236]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800abd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 8087 	beq.w	800acf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abe4:	4b36      	ldr	r3, [pc, #216]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	f003 030c 	and.w	r3, r3, #12
 800abec:	2b08      	cmp	r3, #8
 800abee:	d061      	beq.n	800acb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d146      	bne.n	800ac86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abf8:	4b33      	ldr	r3, [pc, #204]	; (800acc8 <HAL_RCC_OscConfig+0x4cc>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abfe:	f7fd fdb9 	bl	8008774 <HAL_GetTick>
 800ac02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac04:	e008      	b.n	800ac18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac06:	f7fd fdb5 	bl	8008774 <HAL_GetTick>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d901      	bls.n	800ac18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e06d      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac18:	4b29      	ldr	r3, [pc, #164]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1f0      	bne.n	800ac06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac2c:	d108      	bne.n	800ac40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac2e:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	4921      	ldr	r1, [pc, #132]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac40:	4b1f      	ldr	r3, [pc, #124]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a19      	ldr	r1, [r3, #32]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	430b      	orrs	r3, r1
 800ac52:	491b      	ldr	r1, [pc, #108]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ac54:	4313      	orrs	r3, r2
 800ac56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac58:	4b1b      	ldr	r3, [pc, #108]	; (800acc8 <HAL_RCC_OscConfig+0x4cc>)
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac5e:	f7fd fd89 	bl	8008774 <HAL_GetTick>
 800ac62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac64:	e008      	b.n	800ac78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac66:	f7fd fd85 	bl	8008774 <HAL_GetTick>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d901      	bls.n	800ac78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e03d      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac78:	4b11      	ldr	r3, [pc, #68]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0f0      	beq.n	800ac66 <HAL_RCC_OscConfig+0x46a>
 800ac84:	e035      	b.n	800acf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac86:	4b10      	ldr	r3, [pc, #64]	; (800acc8 <HAL_RCC_OscConfig+0x4cc>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac8c:	f7fd fd72 	bl	8008774 <HAL_GetTick>
 800ac90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac92:	e008      	b.n	800aca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac94:	f7fd fd6e 	bl	8008774 <HAL_GetTick>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d901      	bls.n	800aca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e026      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aca6:	4b06      	ldr	r3, [pc, #24]	; (800acc0 <HAL_RCC_OscConfig+0x4c4>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1f0      	bne.n	800ac94 <HAL_RCC_OscConfig+0x498>
 800acb2:	e01e      	b.n	800acf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d107      	bne.n	800accc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e019      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
 800acc0:	40021000 	.word	0x40021000
 800acc4:	40007000 	.word	0x40007000
 800acc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800accc:	4b0b      	ldr	r3, [pc, #44]	; (800acfc <HAL_RCC_OscConfig+0x500>)
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a1b      	ldr	r3, [r3, #32]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d106      	bne.n	800acee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acea:	429a      	cmp	r2, r3
 800acec:	d001      	beq.n	800acf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e000      	b.n	800acf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	40021000 	.word	0x40021000

0800ad00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e0d0      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad14:	4b6a      	ldr	r3, [pc, #424]	; (800aec0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0307 	and.w	r3, r3, #7
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d910      	bls.n	800ad44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad22:	4b67      	ldr	r3, [pc, #412]	; (800aec0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f023 0207 	bic.w	r2, r3, #7
 800ad2a:	4965      	ldr	r1, [pc, #404]	; (800aec0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad32:	4b63      	ldr	r3, [pc, #396]	; (800aec0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d001      	beq.n	800ad44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e0b8      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0302 	and.w	r3, r3, #2
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d020      	beq.n	800ad92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0304 	and.w	r3, r3, #4
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d005      	beq.n	800ad68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad5c:	4b59      	ldr	r3, [pc, #356]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	4a58      	ldr	r2, [pc, #352]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 0308 	and.w	r3, r3, #8
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d005      	beq.n	800ad80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad74:	4b53      	ldr	r3, [pc, #332]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	4a52      	ldr	r2, [pc, #328]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad80:	4b50      	ldr	r3, [pc, #320]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	494d      	ldr	r1, [pc, #308]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d040      	beq.n	800ae20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d107      	bne.n	800adb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ada6:	4b47      	ldr	r3, [pc, #284]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d115      	bne.n	800adde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e07f      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d107      	bne.n	800adce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adbe:	4b41      	ldr	r3, [pc, #260]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e073      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adce:	4b3d      	ldr	r3, [pc, #244]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 0302 	and.w	r3, r3, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e06b      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800adde:	4b39      	ldr	r3, [pc, #228]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	f023 0203 	bic.w	r2, r3, #3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	4936      	ldr	r1, [pc, #216]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800adec:	4313      	orrs	r3, r2
 800adee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adf0:	f7fd fcc0 	bl	8008774 <HAL_GetTick>
 800adf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adf6:	e00a      	b.n	800ae0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adf8:	f7fd fcbc 	bl	8008774 <HAL_GetTick>
 800adfc:	4602      	mov	r2, r0
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d901      	bls.n	800ae0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e053      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae0e:	4b2d      	ldr	r3, [pc, #180]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	f003 020c 	and.w	r2, r3, #12
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d1eb      	bne.n	800adf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae20:	4b27      	ldr	r3, [pc, #156]	; (800aec0 <HAL_RCC_ClockConfig+0x1c0>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0307 	and.w	r3, r3, #7
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d210      	bcs.n	800ae50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae2e:	4b24      	ldr	r3, [pc, #144]	; (800aec0 <HAL_RCC_ClockConfig+0x1c0>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f023 0207 	bic.w	r2, r3, #7
 800ae36:	4922      	ldr	r1, [pc, #136]	; (800aec0 <HAL_RCC_ClockConfig+0x1c0>)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae3e:	4b20      	ldr	r3, [pc, #128]	; (800aec0 <HAL_RCC_ClockConfig+0x1c0>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 0307 	and.w	r3, r3, #7
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d001      	beq.n	800ae50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e032      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d008      	beq.n	800ae6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae5c:	4b19      	ldr	r3, [pc, #100]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	4916      	ldr	r1, [pc, #88]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 0308 	and.w	r3, r3, #8
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d009      	beq.n	800ae8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae7a:	4b12      	ldr	r3, [pc, #72]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	490e      	ldr	r1, [pc, #56]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae8e:	f000 f821 	bl	800aed4 <HAL_RCC_GetSysClockFreq>
 800ae92:	4602      	mov	r2, r0
 800ae94:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	091b      	lsrs	r3, r3, #4
 800ae9a:	f003 030f 	and.w	r3, r3, #15
 800ae9e:	490a      	ldr	r1, [pc, #40]	; (800aec8 <HAL_RCC_ClockConfig+0x1c8>)
 800aea0:	5ccb      	ldrb	r3, [r1, r3]
 800aea2:	fa22 f303 	lsr.w	r3, r2, r3
 800aea6:	4a09      	ldr	r2, [pc, #36]	; (800aecc <HAL_RCC_ClockConfig+0x1cc>)
 800aea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aeaa:	4b09      	ldr	r3, [pc, #36]	; (800aed0 <HAL_RCC_ClockConfig+0x1d0>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fd fc1e 	bl	80086f0 <HAL_InitTick>

  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	40022000 	.word	0x40022000
 800aec4:	40021000 	.word	0x40021000
 800aec8:	0800dcf0 	.word	0x0800dcf0
 800aecc:	200000b0 	.word	0x200000b0
 800aed0:	200000b4 	.word	0x200000b4

0800aed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b087      	sub	sp, #28
 800aed8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aeda:	2300      	movs	r3, #0
 800aedc:	60fb      	str	r3, [r7, #12]
 800aede:	2300      	movs	r3, #0
 800aee0:	60bb      	str	r3, [r7, #8]
 800aee2:	2300      	movs	r3, #0
 800aee4:	617b      	str	r3, [r7, #20]
 800aee6:	2300      	movs	r3, #0
 800aee8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aeea:	2300      	movs	r3, #0
 800aeec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aeee:	4b1e      	ldr	r3, [pc, #120]	; (800af68 <HAL_RCC_GetSysClockFreq+0x94>)
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f003 030c 	and.w	r3, r3, #12
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d002      	beq.n	800af04 <HAL_RCC_GetSysClockFreq+0x30>
 800aefe:	2b08      	cmp	r3, #8
 800af00:	d003      	beq.n	800af0a <HAL_RCC_GetSysClockFreq+0x36>
 800af02:	e027      	b.n	800af54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af04:	4b19      	ldr	r3, [pc, #100]	; (800af6c <HAL_RCC_GetSysClockFreq+0x98>)
 800af06:	613b      	str	r3, [r7, #16]
      break;
 800af08:	e027      	b.n	800af5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	0c9b      	lsrs	r3, r3, #18
 800af0e:	f003 030f 	and.w	r3, r3, #15
 800af12:	4a17      	ldr	r2, [pc, #92]	; (800af70 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af14:	5cd3      	ldrb	r3, [r2, r3]
 800af16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d010      	beq.n	800af44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af22:	4b11      	ldr	r3, [pc, #68]	; (800af68 <HAL_RCC_GetSysClockFreq+0x94>)
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	0c5b      	lsrs	r3, r3, #17
 800af28:	f003 0301 	and.w	r3, r3, #1
 800af2c:	4a11      	ldr	r2, [pc, #68]	; (800af74 <HAL_RCC_GetSysClockFreq+0xa0>)
 800af2e:	5cd3      	ldrb	r3, [r2, r3]
 800af30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a0d      	ldr	r2, [pc, #52]	; (800af6c <HAL_RCC_GetSysClockFreq+0x98>)
 800af36:	fb03 f202 	mul.w	r2, r3, r2
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af40:	617b      	str	r3, [r7, #20]
 800af42:	e004      	b.n	800af4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a0c      	ldr	r2, [pc, #48]	; (800af78 <HAL_RCC_GetSysClockFreq+0xa4>)
 800af48:	fb02 f303 	mul.w	r3, r2, r3
 800af4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	613b      	str	r3, [r7, #16]
      break;
 800af52:	e002      	b.n	800af5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <HAL_RCC_GetSysClockFreq+0x98>)
 800af56:	613b      	str	r3, [r7, #16]
      break;
 800af58:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af5a:	693b      	ldr	r3, [r7, #16]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	371c      	adds	r7, #28
 800af60:	46bd      	mov	sp, r7
 800af62:	bc80      	pop	{r7}
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	40021000 	.word	0x40021000
 800af6c:	007a1200 	.word	0x007a1200
 800af70:	0800dd08 	.word	0x0800dd08
 800af74:	0800dd18 	.word	0x0800dd18
 800af78:	003d0900 	.word	0x003d0900

0800af7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af80:	4b02      	ldr	r3, [pc, #8]	; (800af8c <HAL_RCC_GetHCLKFreq+0x10>)
 800af82:	681b      	ldr	r3, [r3, #0]
}
 800af84:	4618      	mov	r0, r3
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr
 800af8c:	200000b0 	.word	0x200000b0

0800af90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af94:	f7ff fff2 	bl	800af7c <HAL_RCC_GetHCLKFreq>
 800af98:	4602      	mov	r2, r0
 800af9a:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	0a1b      	lsrs	r3, r3, #8
 800afa0:	f003 0307 	and.w	r3, r3, #7
 800afa4:	4903      	ldr	r1, [pc, #12]	; (800afb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afa6:	5ccb      	ldrb	r3, [r1, r3]
 800afa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afac:	4618      	mov	r0, r3
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	40021000 	.word	0x40021000
 800afb4:	0800dd00 	.word	0x0800dd00

0800afb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800afbc:	f7ff ffde 	bl	800af7c <HAL_RCC_GetHCLKFreq>
 800afc0:	4602      	mov	r2, r0
 800afc2:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	0adb      	lsrs	r3, r3, #11
 800afc8:	f003 0307 	and.w	r3, r3, #7
 800afcc:	4903      	ldr	r1, [pc, #12]	; (800afdc <HAL_RCC_GetPCLK2Freq+0x24>)
 800afce:	5ccb      	ldrb	r3, [r1, r3]
 800afd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	40021000 	.word	0x40021000
 800afdc:	0800dd00 	.word	0x0800dd00

0800afe0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800afe8:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <RCC_Delay+0x34>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a0a      	ldr	r2, [pc, #40]	; (800b018 <RCC_Delay+0x38>)
 800afee:	fba2 2303 	umull	r2, r3, r2, r3
 800aff2:	0a5b      	lsrs	r3, r3, #9
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	fb02 f303 	mul.w	r3, r2, r3
 800affa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800affc:	bf00      	nop
  }
  while (Delay --);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	1e5a      	subs	r2, r3, #1
 800b002:	60fa      	str	r2, [r7, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1f9      	bne.n	800affc <RCC_Delay+0x1c>
}
 800b008:	bf00      	nop
 800b00a:	bf00      	nop
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr
 800b014:	200000b0 	.word	0x200000b0
 800b018:	10624dd3 	.word	0x10624dd3

0800b01c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d101      	bne.n	800b02e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e041      	b.n	800b0b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d106      	bne.n	800b048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7fd fa26 	bl	8008494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2202      	movs	r2, #2
 800b04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3304      	adds	r3, #4
 800b058:	4619      	mov	r1, r3
 800b05a:	4610      	mov	r0, r2
 800b05c:	f000 fa82 	bl	800b564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d001      	beq.n	800b0d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e044      	b.n	800b15e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f042 0201 	orr.w	r2, r2, #1
 800b0ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a1d      	ldr	r2, [pc, #116]	; (800b168 <HAL_TIM_Base_Start_IT+0xac>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d018      	beq.n	800b128 <HAL_TIM_Base_Start_IT+0x6c>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a1c      	ldr	r2, [pc, #112]	; (800b16c <HAL_TIM_Base_Start_IT+0xb0>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d013      	beq.n	800b128 <HAL_TIM_Base_Start_IT+0x6c>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b108:	d00e      	beq.n	800b128 <HAL_TIM_Base_Start_IT+0x6c>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a18      	ldr	r2, [pc, #96]	; (800b170 <HAL_TIM_Base_Start_IT+0xb4>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d009      	beq.n	800b128 <HAL_TIM_Base_Start_IT+0x6c>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a16      	ldr	r2, [pc, #88]	; (800b174 <HAL_TIM_Base_Start_IT+0xb8>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d004      	beq.n	800b128 <HAL_TIM_Base_Start_IT+0x6c>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a15      	ldr	r2, [pc, #84]	; (800b178 <HAL_TIM_Base_Start_IT+0xbc>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d111      	bne.n	800b14c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	f003 0307 	and.w	r3, r3, #7
 800b132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b06      	cmp	r3, #6
 800b138:	d010      	beq.n	800b15c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f042 0201 	orr.w	r2, r2, #1
 800b148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b14a:	e007      	b.n	800b15c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0201 	orr.w	r2, r2, #1
 800b15a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	bc80      	pop	{r7}
 800b166:	4770      	bx	lr
 800b168:	40012c00 	.word	0x40012c00
 800b16c:	40013400 	.word	0x40013400
 800b170:	40000400 	.word	0x40000400
 800b174:	40000800 	.word	0x40000800
 800b178:	40000c00 	.word	0x40000c00

0800b17c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	f003 0302 	and.w	r3, r3, #2
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d122      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f003 0302 	and.w	r3, r3, #2
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d11b      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f06f 0202 	mvn.w	r2, #2
 800b1a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	f003 0303 	and.w	r3, r3, #3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f9b4 	bl	800b52c <HAL_TIM_IC_CaptureCallback>
 800b1c4:	e005      	b.n	800b1d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f9a7 	bl	800b51a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f9b6 	bl	800b53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0304 	and.w	r3, r3, #4
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	d122      	bne.n	800b22c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f003 0304 	and.w	r3, r3, #4
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d11b      	bne.n	800b22c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f06f 0204 	mvn.w	r2, #4
 800b1fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2202      	movs	r2, #2
 800b202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f98a 	bl	800b52c <HAL_TIM_IC_CaptureCallback>
 800b218:	e005      	b.n	800b226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f97d 	bl	800b51a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f98c 	bl	800b53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f003 0308 	and.w	r3, r3, #8
 800b236:	2b08      	cmp	r3, #8
 800b238:	d122      	bne.n	800b280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f003 0308 	and.w	r3, r3, #8
 800b244:	2b08      	cmp	r3, #8
 800b246:	d11b      	bne.n	800b280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f06f 0208 	mvn.w	r2, #8
 800b250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2204      	movs	r2, #4
 800b256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	f003 0303 	and.w	r3, r3, #3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f960 	bl	800b52c <HAL_TIM_IC_CaptureCallback>
 800b26c:	e005      	b.n	800b27a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f953 	bl	800b51a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f962 	bl	800b53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	f003 0310 	and.w	r3, r3, #16
 800b28a:	2b10      	cmp	r3, #16
 800b28c:	d122      	bne.n	800b2d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f003 0310 	and.w	r3, r3, #16
 800b298:	2b10      	cmp	r3, #16
 800b29a:	d11b      	bne.n	800b2d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f06f 0210 	mvn.w	r2, #16
 800b2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2208      	movs	r2, #8
 800b2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f936 	bl	800b52c <HAL_TIM_IC_CaptureCallback>
 800b2c0:	e005      	b.n	800b2ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f929 	bl	800b51a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 f938 	bl	800b53e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d10e      	bne.n	800b300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	f003 0301 	and.w	r3, r3, #1
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d107      	bne.n	800b300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f06f 0201 	mvn.w	r2, #1
 800b2f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7fc fd4e 	bl	8007d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b30a:	2b80      	cmp	r3, #128	; 0x80
 800b30c:	d10e      	bne.n	800b32c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b318:	2b80      	cmp	r3, #128	; 0x80
 800b31a:	d107      	bne.n	800b32c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 faa1 	bl	800b86e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b336:	2b40      	cmp	r3, #64	; 0x40
 800b338:	d10e      	bne.n	800b358 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b344:	2b40      	cmp	r3, #64	; 0x40
 800b346:	d107      	bne.n	800b358 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f8fc 	bl	800b550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	f003 0320 	and.w	r3, r3, #32
 800b362:	2b20      	cmp	r3, #32
 800b364:	d10e      	bne.n	800b384 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	f003 0320 	and.w	r3, r3, #32
 800b370:	2b20      	cmp	r3, #32
 800b372:	d107      	bne.n	800b384 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f06f 0220 	mvn.w	r2, #32
 800b37c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fa6c 	bl	800b85c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d101      	bne.n	800b3a8 <HAL_TIM_ConfigClockSource+0x1c>
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	e0b4      	b.n	800b512 <HAL_TIM_ConfigClockSource+0x186>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b3c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3e0:	d03e      	beq.n	800b460 <HAL_TIM_ConfigClockSource+0xd4>
 800b3e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3e6:	f200 8087 	bhi.w	800b4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ee:	f000 8086 	beq.w	800b4fe <HAL_TIM_ConfigClockSource+0x172>
 800b3f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3f6:	d87f      	bhi.n	800b4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b3f8:	2b70      	cmp	r3, #112	; 0x70
 800b3fa:	d01a      	beq.n	800b432 <HAL_TIM_ConfigClockSource+0xa6>
 800b3fc:	2b70      	cmp	r3, #112	; 0x70
 800b3fe:	d87b      	bhi.n	800b4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b400:	2b60      	cmp	r3, #96	; 0x60
 800b402:	d050      	beq.n	800b4a6 <HAL_TIM_ConfigClockSource+0x11a>
 800b404:	2b60      	cmp	r3, #96	; 0x60
 800b406:	d877      	bhi.n	800b4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b408:	2b50      	cmp	r3, #80	; 0x50
 800b40a:	d03c      	beq.n	800b486 <HAL_TIM_ConfigClockSource+0xfa>
 800b40c:	2b50      	cmp	r3, #80	; 0x50
 800b40e:	d873      	bhi.n	800b4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b410:	2b40      	cmp	r3, #64	; 0x40
 800b412:	d058      	beq.n	800b4c6 <HAL_TIM_ConfigClockSource+0x13a>
 800b414:	2b40      	cmp	r3, #64	; 0x40
 800b416:	d86f      	bhi.n	800b4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b418:	2b30      	cmp	r3, #48	; 0x30
 800b41a:	d064      	beq.n	800b4e6 <HAL_TIM_ConfigClockSource+0x15a>
 800b41c:	2b30      	cmp	r3, #48	; 0x30
 800b41e:	d86b      	bhi.n	800b4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b420:	2b20      	cmp	r3, #32
 800b422:	d060      	beq.n	800b4e6 <HAL_TIM_ConfigClockSource+0x15a>
 800b424:	2b20      	cmp	r3, #32
 800b426:	d867      	bhi.n	800b4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d05c      	beq.n	800b4e6 <HAL_TIM_ConfigClockSource+0x15a>
 800b42c:	2b10      	cmp	r3, #16
 800b42e:	d05a      	beq.n	800b4e6 <HAL_TIM_ConfigClockSource+0x15a>
 800b430:	e062      	b.n	800b4f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b442:	f000 f980 	bl	800b746 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	609a      	str	r2, [r3, #8]
      break;
 800b45e:	e04f      	b.n	800b500 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b470:	f000 f969 	bl	800b746 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689a      	ldr	r2, [r3, #8]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b482:	609a      	str	r2, [r3, #8]
      break;
 800b484:	e03c      	b.n	800b500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b492:	461a      	mov	r2, r3
 800b494:	f000 f8e0 	bl	800b658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2150      	movs	r1, #80	; 0x50
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 f937 	bl	800b712 <TIM_ITRx_SetConfig>
      break;
 800b4a4:	e02c      	b.n	800b500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f000 f8fe 	bl	800b6b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2160      	movs	r1, #96	; 0x60
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 f927 	bl	800b712 <TIM_ITRx_SetConfig>
      break;
 800b4c4:	e01c      	b.n	800b500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f000 f8c0 	bl	800b658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2140      	movs	r1, #64	; 0x40
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 f917 	bl	800b712 <TIM_ITRx_SetConfig>
      break;
 800b4e4:	e00c      	b.n	800b500 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	4610      	mov	r0, r2
 800b4f2:	f000 f90e 	bl	800b712 <TIM_ITRx_SetConfig>
      break;
 800b4f6:	e003      	b.n	800b500 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b4fc:	e000      	b.n	800b500 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b4fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b510:	7bfb      	ldrb	r3, [r7, #15]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b51a:	b480      	push	{r7}
 800b51c:	b083      	sub	sp, #12
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b522:	bf00      	nop
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	bc80      	pop	{r7}
 800b52a:	4770      	bx	lr

0800b52c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	bc80      	pop	{r7}
 800b53c:	4770      	bx	lr

0800b53e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b53e:	b480      	push	{r7}
 800b540:	b083      	sub	sp, #12
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b546:	bf00      	nop
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bc80      	pop	{r7}
 800b54e:	4770      	bx	lr

0800b550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b558:	bf00      	nop
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bc80      	pop	{r7}
 800b560:	4770      	bx	lr
	...

0800b564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a33      	ldr	r2, [pc, #204]	; (800b644 <TIM_Base_SetConfig+0xe0>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d013      	beq.n	800b5a4 <TIM_Base_SetConfig+0x40>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a32      	ldr	r2, [pc, #200]	; (800b648 <TIM_Base_SetConfig+0xe4>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d00f      	beq.n	800b5a4 <TIM_Base_SetConfig+0x40>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b58a:	d00b      	beq.n	800b5a4 <TIM_Base_SetConfig+0x40>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a2f      	ldr	r2, [pc, #188]	; (800b64c <TIM_Base_SetConfig+0xe8>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d007      	beq.n	800b5a4 <TIM_Base_SetConfig+0x40>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a2e      	ldr	r2, [pc, #184]	; (800b650 <TIM_Base_SetConfig+0xec>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d003      	beq.n	800b5a4 <TIM_Base_SetConfig+0x40>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a2d      	ldr	r2, [pc, #180]	; (800b654 <TIM_Base_SetConfig+0xf0>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d108      	bne.n	800b5b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a22      	ldr	r2, [pc, #136]	; (800b644 <TIM_Base_SetConfig+0xe0>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d013      	beq.n	800b5e6 <TIM_Base_SetConfig+0x82>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a21      	ldr	r2, [pc, #132]	; (800b648 <TIM_Base_SetConfig+0xe4>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d00f      	beq.n	800b5e6 <TIM_Base_SetConfig+0x82>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5cc:	d00b      	beq.n	800b5e6 <TIM_Base_SetConfig+0x82>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a1e      	ldr	r2, [pc, #120]	; (800b64c <TIM_Base_SetConfig+0xe8>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d007      	beq.n	800b5e6 <TIM_Base_SetConfig+0x82>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a1d      	ldr	r2, [pc, #116]	; (800b650 <TIM_Base_SetConfig+0xec>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d003      	beq.n	800b5e6 <TIM_Base_SetConfig+0x82>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a1c      	ldr	r2, [pc, #112]	; (800b654 <TIM_Base_SetConfig+0xf0>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d108      	bne.n	800b5f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	695b      	ldr	r3, [r3, #20]
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	689a      	ldr	r2, [r3, #8]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a09      	ldr	r2, [pc, #36]	; (800b644 <TIM_Base_SetConfig+0xe0>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d003      	beq.n	800b62c <TIM_Base_SetConfig+0xc8>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a08      	ldr	r2, [pc, #32]	; (800b648 <TIM_Base_SetConfig+0xe4>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d103      	bne.n	800b634 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	691a      	ldr	r2, [r3, #16]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	615a      	str	r2, [r3, #20]
}
 800b63a:	bf00      	nop
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	bc80      	pop	{r7}
 800b642:	4770      	bx	lr
 800b644:	40012c00 	.word	0x40012c00
 800b648:	40013400 	.word	0x40013400
 800b64c:	40000400 	.word	0x40000400
 800b650:	40000800 	.word	0x40000800
 800b654:	40000c00 	.word	0x40000c00

0800b658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b658:	b480      	push	{r7}
 800b65a:	b087      	sub	sp, #28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	f023 0201 	bic.w	r2, r3, #1
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	011b      	lsls	r3, r3, #4
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	f023 030a 	bic.w	r3, r3, #10
 800b694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	621a      	str	r2, [r3, #32]
}
 800b6aa:	bf00      	nop
 800b6ac:	371c      	adds	r7, #28
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bc80      	pop	{r7}
 800b6b2:	4770      	bx	lr

0800b6b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b087      	sub	sp, #28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6a1b      	ldr	r3, [r3, #32]
 800b6ca:	f023 0210 	bic.w	r2, r3, #16
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b6de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	031b      	lsls	r3, r3, #12
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	011b      	lsls	r3, r3, #4
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	621a      	str	r2, [r3, #32]
}
 800b708:	bf00      	nop
 800b70a:	371c      	adds	r7, #28
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bc80      	pop	{r7}
 800b710:	4770      	bx	lr

0800b712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b712:	b480      	push	{r7}
 800b714:	b085      	sub	sp, #20
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b728:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4313      	orrs	r3, r2
 800b730:	f043 0307 	orr.w	r3, r3, #7
 800b734:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	609a      	str	r2, [r3, #8]
}
 800b73c:	bf00      	nop
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	bc80      	pop	{r7}
 800b744:	4770      	bx	lr

0800b746 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b746:	b480      	push	{r7}
 800b748:	b087      	sub	sp, #28
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
 800b752:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b760:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	021a      	lsls	r2, r3, #8
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	431a      	orrs	r2, r3
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	4313      	orrs	r3, r2
 800b772:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	609a      	str	r2, [r3, #8]
}
 800b77a:	bf00      	nop
 800b77c:	371c      	adds	r7, #28
 800b77e:	46bd      	mov	sp, r7
 800b780:	bc80      	pop	{r7}
 800b782:	4770      	bx	lr

0800b784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b794:	2b01      	cmp	r3, #1
 800b796:	d101      	bne.n	800b79c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b798:	2302      	movs	r3, #2
 800b79a:	e050      	b.n	800b83e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a1b      	ldr	r2, [pc, #108]	; (800b848 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d018      	beq.n	800b812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a19      	ldr	r2, [pc, #100]	; (800b84c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d013      	beq.n	800b812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7f2:	d00e      	beq.n	800b812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a15      	ldr	r2, [pc, #84]	; (800b850 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d009      	beq.n	800b812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a14      	ldr	r2, [pc, #80]	; (800b854 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d004      	beq.n	800b812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a12      	ldr	r2, [pc, #72]	; (800b858 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d10c      	bne.n	800b82c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	4313      	orrs	r3, r2
 800b822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	bc80      	pop	{r7}
 800b846:	4770      	bx	lr
 800b848:	40012c00 	.word	0x40012c00
 800b84c:	40013400 	.word	0x40013400
 800b850:	40000400 	.word	0x40000400
 800b854:	40000800 	.word	0x40000800
 800b858:	40000c00 	.word	0x40000c00

0800b85c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	bc80      	pop	{r7}
 800b86c:	4770      	bx	lr

0800b86e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bc80      	pop	{r7}
 800b87e:	4770      	bx	lr

0800b880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d101      	bne.n	800b892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	e042      	b.n	800b918 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d106      	bne.n	800b8ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7fc fe1a 	bl	80084e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2224      	movs	r2, #36	; 0x24
 800b8b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fcb5 	bl	800c234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	691a      	ldr	r2, [r3, #16]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	695a      	ldr	r2, [r3, #20]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68da      	ldr	r2, [r3, #12]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2220      	movs	r2, #32
 800b904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2220      	movs	r2, #32
 800b90c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	4613      	mov	r3, r2
 800b92c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b20      	cmp	r3, #32
 800b938:	d121      	bne.n	800b97e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <HAL_UART_Transmit_IT+0x26>
 800b940:	88fb      	ldrh	r3, [r7, #6]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e01a      	b.n	800b980 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	88fa      	ldrh	r2, [r7, #6]
 800b954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	88fa      	ldrh	r2, [r7, #6]
 800b95a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2221      	movs	r2, #33	; 0x21
 800b966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b978:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	e000      	b.n	800b980 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b97e:	2302      	movs	r3, #2
  }
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	bc80      	pop	{r7}
 800b988:	4770      	bx	lr
	...

0800b98c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b0ba      	sub	sp, #232	; 0xe8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b9be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9c2:	f003 030f 	and.w	r3, r3, #15
 800b9c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b9ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10f      	bne.n	800b9f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d6:	f003 0320 	and.w	r3, r3, #32
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d009      	beq.n	800b9f2 <HAL_UART_IRQHandler+0x66>
 800b9de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e2:	f003 0320 	and.w	r3, r3, #32
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fb63 	bl	800c0b6 <UART_Receive_IT>
      return;
 800b9f0:	e25b      	b.n	800beaa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f000 80de 	beq.w	800bbb8 <HAL_UART_IRQHandler+0x22c>
 800b9fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 80d1 	beq.w	800bbb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00b      	beq.n	800ba3a <HAL_UART_IRQHandler+0xae>
 800ba22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba32:	f043 0201 	orr.w	r2, r3, #1
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba3e:	f003 0304 	and.w	r3, r3, #4
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00b      	beq.n	800ba5e <HAL_UART_IRQHandler+0xd2>
 800ba46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d005      	beq.n	800ba5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba56:	f043 0202 	orr.w	r2, r3, #2
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba62:	f003 0302 	and.w	r3, r3, #2
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00b      	beq.n	800ba82 <HAL_UART_IRQHandler+0xf6>
 800ba6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d005      	beq.n	800ba82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba7a:	f043 0204 	orr.w	r2, r3, #4
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba86:	f003 0308 	and.w	r3, r3, #8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d011      	beq.n	800bab2 <HAL_UART_IRQHandler+0x126>
 800ba8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba92:	f003 0320 	and.w	r3, r3, #32
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d105      	bne.n	800baa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d005      	beq.n	800bab2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baaa:	f043 0208 	orr.w	r2, r3, #8
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 81f2 	beq.w	800bea0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800babc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac0:	f003 0320 	and.w	r3, r3, #32
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d008      	beq.n	800bada <HAL_UART_IRQHandler+0x14e>
 800bac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bacc:	f003 0320 	and.w	r3, r3, #32
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 faee 	bl	800c0b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	bf14      	ite	ne
 800bae8:	2301      	movne	r3, #1
 800baea:	2300      	moveq	r3, #0
 800baec:	b2db      	uxtb	r3, r3
 800baee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf6:	f003 0308 	and.w	r3, r3, #8
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d103      	bne.n	800bb06 <HAL_UART_IRQHandler+0x17a>
 800bafe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d04f      	beq.n	800bba6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f9f8 	bl	800befc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d041      	beq.n	800bb9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3314      	adds	r3, #20
 800bb20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb28:	e853 3f00 	ldrex	r3, [r3]
 800bb2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3314      	adds	r3, #20
 800bb42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb56:	e841 2300 	strex	r3, r2, [r1]
 800bb5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1d9      	bne.n	800bb1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d013      	beq.n	800bb96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb72:	4a7e      	ldr	r2, [pc, #504]	; (800bd6c <HAL_UART_IRQHandler+0x3e0>)
 800bb74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fd f86c 	bl	8008c58 <HAL_DMA_Abort_IT>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d016      	beq.n	800bbb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb90:	4610      	mov	r0, r2
 800bb92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb94:	e00e      	b.n	800bbb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f99c 	bl	800bed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb9c:	e00a      	b.n	800bbb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f998 	bl	800bed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba4:	e006      	b.n	800bbb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f994 	bl	800bed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bbb2:	e175      	b.n	800bea0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb4:	bf00      	nop
    return;
 800bbb6:	e173      	b.n	800bea0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	f040 814f 	bne.w	800be60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bbc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbc6:	f003 0310 	and.w	r3, r3, #16
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 8148 	beq.w	800be60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bbd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbd4:	f003 0310 	and.w	r3, r3, #16
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 8141 	beq.w	800be60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60bb      	str	r3, [r7, #8]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	60bb      	str	r3, [r7, #8]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	60bb      	str	r3, [r7, #8]
 800bbf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	695b      	ldr	r3, [r3, #20]
 800bbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f000 80b6 	beq.w	800bd70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8145 	beq.w	800bea4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc22:	429a      	cmp	r2, r3
 800bc24:	f080 813e 	bcs.w	800bea4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	2b20      	cmp	r3, #32
 800bc38:	f000 8088 	beq.w	800bd4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	330c      	adds	r3, #12
 800bc42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc4a:	e853 3f00 	ldrex	r3, [r3]
 800bc4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	330c      	adds	r3, #12
 800bc64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc78:	e841 2300 	strex	r3, r2, [r1]
 800bc7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1d9      	bne.n	800bc3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3314      	adds	r3, #20
 800bc8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc92:	e853 3f00 	ldrex	r3, [r3]
 800bc96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc9a:	f023 0301 	bic.w	r3, r3, #1
 800bc9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3314      	adds	r3, #20
 800bca8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bcac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bcb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcb8:	e841 2300 	strex	r3, r2, [r1]
 800bcbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bcbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1e1      	bne.n	800bc88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3314      	adds	r3, #20
 800bcca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcce:	e853 3f00 	ldrex	r3, [r3]
 800bcd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bcd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3314      	adds	r3, #20
 800bce4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bce8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bcea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bcee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bcf0:	e841 2300 	strex	r3, r2, [r1]
 800bcf4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1e3      	bne.n	800bcc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2220      	movs	r2, #32
 800bd00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	330c      	adds	r3, #12
 800bd10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd14:	e853 3f00 	ldrex	r3, [r3]
 800bd18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd1c:	f023 0310 	bic.w	r3, r3, #16
 800bd20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	330c      	adds	r3, #12
 800bd2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd2e:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd36:	e841 2300 	strex	r3, r2, [r1]
 800bd3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1e3      	bne.n	800bd0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fc ff4b 	bl	8008be2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f8bf 	bl	800bee6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd68:	e09c      	b.n	800bea4 <HAL_UART_IRQHandler+0x518>
 800bd6a:	bf00      	nop
 800bd6c:	0800bfc1 	.word	0x0800bfc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 808e 	beq.w	800bea8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f000 8089 	beq.w	800bea8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	330c      	adds	r3, #12
 800bd9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda0:	e853 3f00 	ldrex	r3, [r3]
 800bda4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	330c      	adds	r3, #12
 800bdb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdba:	647a      	str	r2, [r7, #68]	; 0x44
 800bdbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdc2:	e841 2300 	strex	r3, r2, [r1]
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1e3      	bne.n	800bd96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3314      	adds	r3, #20
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	e853 3f00 	ldrex	r3, [r3]
 800bddc:	623b      	str	r3, [r7, #32]
   return(result);
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	f023 0301 	bic.w	r3, r3, #1
 800bde4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	3314      	adds	r3, #20
 800bdee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdf2:	633a      	str	r2, [r7, #48]	; 0x30
 800bdf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e3      	bne.n	800bdce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2220      	movs	r2, #32
 800be0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	330c      	adds	r3, #12
 800be1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	e853 3f00 	ldrex	r3, [r3]
 800be22:	60fb      	str	r3, [r7, #12]
   return(result);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f023 0310 	bic.w	r3, r3, #16
 800be2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	330c      	adds	r3, #12
 800be34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be38:	61fa      	str	r2, [r7, #28]
 800be3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3c:	69b9      	ldr	r1, [r7, #24]
 800be3e:	69fa      	ldr	r2, [r7, #28]
 800be40:	e841 2300 	strex	r3, r2, [r1]
 800be44:	617b      	str	r3, [r7, #20]
   return(result);
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1e3      	bne.n	800be14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2202      	movs	r2, #2
 800be50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 f844 	bl	800bee6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be5e:	e023      	b.n	800bea8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d009      	beq.n	800be80 <HAL_UART_IRQHandler+0x4f4>
 800be6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be74:	2b00      	cmp	r3, #0
 800be76:	d003      	beq.n	800be80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 f8b5 	bl	800bfe8 <UART_Transmit_IT>
    return;
 800be7e:	e014      	b.n	800beaa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00e      	beq.n	800beaa <HAL_UART_IRQHandler+0x51e>
 800be8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be94:	2b00      	cmp	r3, #0
 800be96:	d008      	beq.n	800beaa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f8f4 	bl	800c086 <UART_EndTransmit_IT>
    return;
 800be9e:	e004      	b.n	800beaa <HAL_UART_IRQHandler+0x51e>
    return;
 800bea0:	bf00      	nop
 800bea2:	e002      	b.n	800beaa <HAL_UART_IRQHandler+0x51e>
      return;
 800bea4:	bf00      	nop
 800bea6:	e000      	b.n	800beaa <HAL_UART_IRQHandler+0x51e>
      return;
 800bea8:	bf00      	nop
  }
}
 800beaa:	37e8      	adds	r7, #232	; 0xe8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bc80      	pop	{r7}
 800bec0:	4770      	bx	lr

0800bec2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bec2:	b480      	push	{r7}
 800bec4:	b083      	sub	sp, #12
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800beca:	bf00      	nop
 800becc:	370c      	adds	r7, #12
 800bece:	46bd      	mov	sp, r7
 800bed0:	bc80      	pop	{r7}
 800bed2:	4770      	bx	lr

0800bed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bc80      	pop	{r7}
 800bee4:	4770      	bx	lr

0800bee6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bee6:	b480      	push	{r7}
 800bee8:	b083      	sub	sp, #12
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	460b      	mov	r3, r1
 800bef0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bef2:	bf00      	nop
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bc80      	pop	{r7}
 800befa:	4770      	bx	lr

0800befc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800befc:	b480      	push	{r7}
 800befe:	b095      	sub	sp, #84	; 0x54
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	330c      	adds	r3, #12
 800bf0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0e:	e853 3f00 	ldrex	r3, [r3]
 800bf12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	330c      	adds	r3, #12
 800bf22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf24:	643a      	str	r2, [r7, #64]	; 0x40
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e5      	bne.n	800bf04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3314      	adds	r3, #20
 800bf3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf40:	6a3b      	ldr	r3, [r7, #32]
 800bf42:	e853 3f00 	ldrex	r3, [r3]
 800bf46:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	f023 0301 	bic.w	r3, r3, #1
 800bf4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3314      	adds	r3, #20
 800bf56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf58:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf60:	e841 2300 	strex	r3, r2, [r1]
 800bf64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1e5      	bne.n	800bf38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d119      	bne.n	800bfa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	330c      	adds	r3, #12
 800bf7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f023 0310 	bic.w	r3, r3, #16
 800bf8a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	330c      	adds	r3, #12
 800bf92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf94:	61ba      	str	r2, [r7, #24]
 800bf96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf98:	6979      	ldr	r1, [r7, #20]
 800bf9a:	69ba      	ldr	r2, [r7, #24]
 800bf9c:	e841 2300 	strex	r3, r2, [r1]
 800bfa0:	613b      	str	r3, [r7, #16]
   return(result);
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e5      	bne.n	800bf74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2220      	movs	r2, #32
 800bfac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bfb6:	bf00      	nop
 800bfb8:	3754      	adds	r7, #84	; 0x54
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bc80      	pop	{r7}
 800bfbe:	4770      	bx	lr

0800bfc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f7ff ff7a 	bl	800bed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfe0:	bf00      	nop
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b21      	cmp	r3, #33	; 0x21
 800bffa:	d13e      	bne.n	800c07a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c004:	d114      	bne.n	800c030 <UART_Transmit_IT+0x48>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d110      	bne.n	800c030 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	461a      	mov	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c022:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	1c9a      	adds	r2, r3, #2
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	621a      	str	r2, [r3, #32]
 800c02e:	e008      	b.n	800c042 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	1c59      	adds	r1, r3, #1
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	6211      	str	r1, [r2, #32]
 800c03a:	781a      	ldrb	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c046:	b29b      	uxth	r3, r3
 800c048:	3b01      	subs	r3, #1
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	4619      	mov	r1, r3
 800c050:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10f      	bne.n	800c076 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68da      	ldr	r2, [r3, #12]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68da      	ldr	r2, [r3, #12]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	e000      	b.n	800c07c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c07a:	2302      	movs	r3, #2
  }
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	bc80      	pop	{r7}
 800c084:	4770      	bx	lr

0800c086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68da      	ldr	r2, [r3, #12]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c09c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff ff02 	bl	800beb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b08c      	sub	sp, #48	; 0x30
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b22      	cmp	r3, #34	; 0x22
 800c0c8:	f040 80ae 	bne.w	800c228 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d4:	d117      	bne.n	800c106 <UART_Receive_IT+0x50>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d113      	bne.n	800c106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fe:	1c9a      	adds	r2, r3, #2
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	629a      	str	r2, [r3, #40]	; 0x28
 800c104:	e026      	b.n	800c154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c118:	d007      	beq.n	800c12a <UART_Receive_IT+0x74>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <UART_Receive_IT+0x82>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	b2da      	uxtb	r2, r3
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	e008      	b.n	800c14a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c144:	b2da      	uxtb	r2, r3
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14e:	1c5a      	adds	r2, r3, #1
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c158:	b29b      	uxth	r3, r3
 800c15a:	3b01      	subs	r3, #1
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	4619      	mov	r1, r3
 800c162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c164:	2b00      	cmp	r3, #0
 800c166:	d15d      	bne.n	800c224 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f022 0220 	bic.w	r2, r2, #32
 800c176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	695a      	ldr	r2, [r3, #20]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f022 0201 	bic.w	r2, r2, #1
 800c196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2220      	movs	r2, #32
 800c19c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d135      	bne.n	800c21a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	330c      	adds	r3, #12
 800c1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	f023 0310 	bic.w	r3, r3, #16
 800c1ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	330c      	adds	r3, #12
 800c1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d4:	623a      	str	r2, [r7, #32]
 800c1d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d8:	69f9      	ldr	r1, [r7, #28]
 800c1da:	6a3a      	ldr	r2, [r7, #32]
 800c1dc:	e841 2300 	strex	r3, r2, [r1]
 800c1e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1e5      	bne.n	800c1b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 0310 	and.w	r3, r3, #16
 800c1f2:	2b10      	cmp	r3, #16
 800c1f4:	d10a      	bne.n	800c20c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60fb      	str	r3, [r7, #12]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	60fb      	str	r3, [r7, #12]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	60fb      	str	r3, [r7, #12]
 800c20a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c210:	4619      	mov	r1, r3
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff fe67 	bl	800bee6 <HAL_UARTEx_RxEventCallback>
 800c218:	e002      	b.n	800c220 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f7ff fe51 	bl	800bec2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	e002      	b.n	800c22a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c224:	2300      	movs	r3, #0
 800c226:	e000      	b.n	800c22a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c228:	2302      	movs	r3, #2
  }
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3730      	adds	r7, #48	; 0x30
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68da      	ldr	r2, [r3, #12]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	430a      	orrs	r2, r1
 800c250:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	431a      	orrs	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	695b      	ldr	r3, [r3, #20]
 800c260:	4313      	orrs	r3, r2
 800c262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c26e:	f023 030c 	bic.w	r3, r3, #12
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	6812      	ldr	r2, [r2, #0]
 800c276:	68b9      	ldr	r1, [r7, #8]
 800c278:	430b      	orrs	r3, r1
 800c27a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	695b      	ldr	r3, [r3, #20]
 800c282:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	699a      	ldr	r2, [r3, #24]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	430a      	orrs	r2, r1
 800c290:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a2c      	ldr	r2, [pc, #176]	; (800c348 <UART_SetConfig+0x114>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d103      	bne.n	800c2a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c29c:	f7fe fe8c 	bl	800afb8 <HAL_RCC_GetPCLK2Freq>
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	e002      	b.n	800c2aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c2a4:	f7fe fe74 	bl	800af90 <HAL_RCC_GetPCLK1Freq>
 800c2a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	009a      	lsls	r2, r3, #2
 800c2b4:	441a      	add	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2c0:	4a22      	ldr	r2, [pc, #136]	; (800c34c <UART_SetConfig+0x118>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	095b      	lsrs	r3, r3, #5
 800c2c8:	0119      	lsls	r1, r3, #4
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009a      	lsls	r2, r3, #2
 800c2d4:	441a      	add	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2e0:	4b1a      	ldr	r3, [pc, #104]	; (800c34c <UART_SetConfig+0x118>)
 800c2e2:	fba3 0302 	umull	r0, r3, r3, r2
 800c2e6:	095b      	lsrs	r3, r3, #5
 800c2e8:	2064      	movs	r0, #100	; 0x64
 800c2ea:	fb00 f303 	mul.w	r3, r0, r3
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	011b      	lsls	r3, r3, #4
 800c2f2:	3332      	adds	r3, #50	; 0x32
 800c2f4:	4a15      	ldr	r2, [pc, #84]	; (800c34c <UART_SetConfig+0x118>)
 800c2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2fa:	095b      	lsrs	r3, r3, #5
 800c2fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c300:	4419      	add	r1, r3
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4613      	mov	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	009a      	lsls	r2, r3, #2
 800c30c:	441a      	add	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	fbb2 f2f3 	udiv	r2, r2, r3
 800c318:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <UART_SetConfig+0x118>)
 800c31a:	fba3 0302 	umull	r0, r3, r3, r2
 800c31e:	095b      	lsrs	r3, r3, #5
 800c320:	2064      	movs	r0, #100	; 0x64
 800c322:	fb00 f303 	mul.w	r3, r0, r3
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	3332      	adds	r3, #50	; 0x32
 800c32c:	4a07      	ldr	r2, [pc, #28]	; (800c34c <UART_SetConfig+0x118>)
 800c32e:	fba2 2303 	umull	r2, r3, r2, r3
 800c332:	095b      	lsrs	r3, r3, #5
 800c334:	f003 020f 	and.w	r2, r3, #15
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	440a      	add	r2, r1
 800c33e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c340:	bf00      	nop
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	40013800 	.word	0x40013800
 800c34c:	51eb851f 	.word	0x51eb851f

0800c350 <__itoa>:
 800c350:	1e93      	subs	r3, r2, #2
 800c352:	2b22      	cmp	r3, #34	; 0x22
 800c354:	b510      	push	{r4, lr}
 800c356:	460c      	mov	r4, r1
 800c358:	d904      	bls.n	800c364 <__itoa+0x14>
 800c35a:	2300      	movs	r3, #0
 800c35c:	461c      	mov	r4, r3
 800c35e:	700b      	strb	r3, [r1, #0]
 800c360:	4620      	mov	r0, r4
 800c362:	bd10      	pop	{r4, pc}
 800c364:	2a0a      	cmp	r2, #10
 800c366:	d109      	bne.n	800c37c <__itoa+0x2c>
 800c368:	2800      	cmp	r0, #0
 800c36a:	da07      	bge.n	800c37c <__itoa+0x2c>
 800c36c:	232d      	movs	r3, #45	; 0x2d
 800c36e:	700b      	strb	r3, [r1, #0]
 800c370:	2101      	movs	r1, #1
 800c372:	4240      	negs	r0, r0
 800c374:	4421      	add	r1, r4
 800c376:	f000 f8d9 	bl	800c52c <__utoa>
 800c37a:	e7f1      	b.n	800c360 <__itoa+0x10>
 800c37c:	2100      	movs	r1, #0
 800c37e:	e7f9      	b.n	800c374 <__itoa+0x24>

0800c380 <itoa>:
 800c380:	f7ff bfe6 	b.w	800c350 <__itoa>

0800c384 <malloc>:
 800c384:	4b02      	ldr	r3, [pc, #8]	; (800c390 <malloc+0xc>)
 800c386:	4601      	mov	r1, r0
 800c388:	6818      	ldr	r0, [r3, #0]
 800c38a:	f000 b823 	b.w	800c3d4 <_malloc_r>
 800c38e:	bf00      	nop
 800c390:	20000108 	.word	0x20000108

0800c394 <sbrk_aligned>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	4e0e      	ldr	r6, [pc, #56]	; (800c3d0 <sbrk_aligned+0x3c>)
 800c398:	460c      	mov	r4, r1
 800c39a:	6831      	ldr	r1, [r6, #0]
 800c39c:	4605      	mov	r5, r0
 800c39e:	b911      	cbnz	r1, 800c3a6 <sbrk_aligned+0x12>
 800c3a0:	f000 f930 	bl	800c604 <_sbrk_r>
 800c3a4:	6030      	str	r0, [r6, #0]
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f000 f92b 	bl	800c604 <_sbrk_r>
 800c3ae:	1c43      	adds	r3, r0, #1
 800c3b0:	d00a      	beq.n	800c3c8 <sbrk_aligned+0x34>
 800c3b2:	1cc4      	adds	r4, r0, #3
 800c3b4:	f024 0403 	bic.w	r4, r4, #3
 800c3b8:	42a0      	cmp	r0, r4
 800c3ba:	d007      	beq.n	800c3cc <sbrk_aligned+0x38>
 800c3bc:	1a21      	subs	r1, r4, r0
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f000 f920 	bl	800c604 <_sbrk_r>
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d101      	bne.n	800c3cc <sbrk_aligned+0x38>
 800c3c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}
 800c3d0:	2000049c 	.word	0x2000049c

0800c3d4 <_malloc_r>:
 800c3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d8:	1ccd      	adds	r5, r1, #3
 800c3da:	f025 0503 	bic.w	r5, r5, #3
 800c3de:	3508      	adds	r5, #8
 800c3e0:	2d0c      	cmp	r5, #12
 800c3e2:	bf38      	it	cc
 800c3e4:	250c      	movcc	r5, #12
 800c3e6:	2d00      	cmp	r5, #0
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	db01      	blt.n	800c3f0 <_malloc_r+0x1c>
 800c3ec:	42a9      	cmp	r1, r5
 800c3ee:	d905      	bls.n	800c3fc <_malloc_r+0x28>
 800c3f0:	230c      	movs	r3, #12
 800c3f2:	2600      	movs	r6, #0
 800c3f4:	603b      	str	r3, [r7, #0]
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c4d0 <_malloc_r+0xfc>
 800c400:	f000 f868 	bl	800c4d4 <__malloc_lock>
 800c404:	f8d8 3000 	ldr.w	r3, [r8]
 800c408:	461c      	mov	r4, r3
 800c40a:	bb5c      	cbnz	r4, 800c464 <_malloc_r+0x90>
 800c40c:	4629      	mov	r1, r5
 800c40e:	4638      	mov	r0, r7
 800c410:	f7ff ffc0 	bl	800c394 <sbrk_aligned>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	4604      	mov	r4, r0
 800c418:	d155      	bne.n	800c4c6 <_malloc_r+0xf2>
 800c41a:	f8d8 4000 	ldr.w	r4, [r8]
 800c41e:	4626      	mov	r6, r4
 800c420:	2e00      	cmp	r6, #0
 800c422:	d145      	bne.n	800c4b0 <_malloc_r+0xdc>
 800c424:	2c00      	cmp	r4, #0
 800c426:	d048      	beq.n	800c4ba <_malloc_r+0xe6>
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	4631      	mov	r1, r6
 800c42c:	4638      	mov	r0, r7
 800c42e:	eb04 0903 	add.w	r9, r4, r3
 800c432:	f000 f8e7 	bl	800c604 <_sbrk_r>
 800c436:	4581      	cmp	r9, r0
 800c438:	d13f      	bne.n	800c4ba <_malloc_r+0xe6>
 800c43a:	6821      	ldr	r1, [r4, #0]
 800c43c:	4638      	mov	r0, r7
 800c43e:	1a6d      	subs	r5, r5, r1
 800c440:	4629      	mov	r1, r5
 800c442:	f7ff ffa7 	bl	800c394 <sbrk_aligned>
 800c446:	3001      	adds	r0, #1
 800c448:	d037      	beq.n	800c4ba <_malloc_r+0xe6>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	442b      	add	r3, r5
 800c44e:	6023      	str	r3, [r4, #0]
 800c450:	f8d8 3000 	ldr.w	r3, [r8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d038      	beq.n	800c4ca <_malloc_r+0xf6>
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	42a2      	cmp	r2, r4
 800c45c:	d12b      	bne.n	800c4b6 <_malloc_r+0xe2>
 800c45e:	2200      	movs	r2, #0
 800c460:	605a      	str	r2, [r3, #4]
 800c462:	e00f      	b.n	800c484 <_malloc_r+0xb0>
 800c464:	6822      	ldr	r2, [r4, #0]
 800c466:	1b52      	subs	r2, r2, r5
 800c468:	d41f      	bmi.n	800c4aa <_malloc_r+0xd6>
 800c46a:	2a0b      	cmp	r2, #11
 800c46c:	d917      	bls.n	800c49e <_malloc_r+0xca>
 800c46e:	1961      	adds	r1, r4, r5
 800c470:	42a3      	cmp	r3, r4
 800c472:	6025      	str	r5, [r4, #0]
 800c474:	bf18      	it	ne
 800c476:	6059      	strne	r1, [r3, #4]
 800c478:	6863      	ldr	r3, [r4, #4]
 800c47a:	bf08      	it	eq
 800c47c:	f8c8 1000 	streq.w	r1, [r8]
 800c480:	5162      	str	r2, [r4, r5]
 800c482:	604b      	str	r3, [r1, #4]
 800c484:	4638      	mov	r0, r7
 800c486:	f104 060b 	add.w	r6, r4, #11
 800c48a:	f000 f829 	bl	800c4e0 <__malloc_unlock>
 800c48e:	f026 0607 	bic.w	r6, r6, #7
 800c492:	1d23      	adds	r3, r4, #4
 800c494:	1af2      	subs	r2, r6, r3
 800c496:	d0ae      	beq.n	800c3f6 <_malloc_r+0x22>
 800c498:	1b9b      	subs	r3, r3, r6
 800c49a:	50a3      	str	r3, [r4, r2]
 800c49c:	e7ab      	b.n	800c3f6 <_malloc_r+0x22>
 800c49e:	42a3      	cmp	r3, r4
 800c4a0:	6862      	ldr	r2, [r4, #4]
 800c4a2:	d1dd      	bne.n	800c460 <_malloc_r+0x8c>
 800c4a4:	f8c8 2000 	str.w	r2, [r8]
 800c4a8:	e7ec      	b.n	800c484 <_malloc_r+0xb0>
 800c4aa:	4623      	mov	r3, r4
 800c4ac:	6864      	ldr	r4, [r4, #4]
 800c4ae:	e7ac      	b.n	800c40a <_malloc_r+0x36>
 800c4b0:	4634      	mov	r4, r6
 800c4b2:	6876      	ldr	r6, [r6, #4]
 800c4b4:	e7b4      	b.n	800c420 <_malloc_r+0x4c>
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	e7cc      	b.n	800c454 <_malloc_r+0x80>
 800c4ba:	230c      	movs	r3, #12
 800c4bc:	4638      	mov	r0, r7
 800c4be:	603b      	str	r3, [r7, #0]
 800c4c0:	f000 f80e 	bl	800c4e0 <__malloc_unlock>
 800c4c4:	e797      	b.n	800c3f6 <_malloc_r+0x22>
 800c4c6:	6025      	str	r5, [r4, #0]
 800c4c8:	e7dc      	b.n	800c484 <_malloc_r+0xb0>
 800c4ca:	605b      	str	r3, [r3, #4]
 800c4cc:	deff      	udf	#255	; 0xff
 800c4ce:	bf00      	nop
 800c4d0:	20000498 	.word	0x20000498

0800c4d4 <__malloc_lock>:
 800c4d4:	4801      	ldr	r0, [pc, #4]	; (800c4dc <__malloc_lock+0x8>)
 800c4d6:	f000 b8cf 	b.w	800c678 <__retarget_lock_acquire_recursive>
 800c4da:	bf00      	nop
 800c4dc:	200005d8 	.word	0x200005d8

0800c4e0 <__malloc_unlock>:
 800c4e0:	4801      	ldr	r0, [pc, #4]	; (800c4e8 <__malloc_unlock+0x8>)
 800c4e2:	f000 b8ca 	b.w	800c67a <__retarget_lock_release_recursive>
 800c4e6:	bf00      	nop
 800c4e8:	200005d8 	.word	0x200005d8

0800c4ec <siprintf>:
 800c4ec:	b40e      	push	{r1, r2, r3}
 800c4ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4f2:	b500      	push	{lr}
 800c4f4:	b09c      	sub	sp, #112	; 0x70
 800c4f6:	ab1d      	add	r3, sp, #116	; 0x74
 800c4f8:	9002      	str	r0, [sp, #8]
 800c4fa:	9006      	str	r0, [sp, #24]
 800c4fc:	9107      	str	r1, [sp, #28]
 800c4fe:	9104      	str	r1, [sp, #16]
 800c500:	4808      	ldr	r0, [pc, #32]	; (800c524 <siprintf+0x38>)
 800c502:	4909      	ldr	r1, [pc, #36]	; (800c528 <siprintf+0x3c>)
 800c504:	f853 2b04 	ldr.w	r2, [r3], #4
 800c508:	9105      	str	r1, [sp, #20]
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	a902      	add	r1, sp, #8
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	f000 f95e 	bl	800c7d0 <_svfiprintf_r>
 800c514:	2200      	movs	r2, #0
 800c516:	9b02      	ldr	r3, [sp, #8]
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	b01c      	add	sp, #112	; 0x70
 800c51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c520:	b003      	add	sp, #12
 800c522:	4770      	bx	lr
 800c524:	20000108 	.word	0x20000108
 800c528:	ffff0208 	.word	0xffff0208

0800c52c <__utoa>:
 800c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c52e:	b08b      	sub	sp, #44	; 0x2c
 800c530:	4605      	mov	r5, r0
 800c532:	460b      	mov	r3, r1
 800c534:	466e      	mov	r6, sp
 800c536:	4c1d      	ldr	r4, [pc, #116]	; (800c5ac <__utoa+0x80>)
 800c538:	f104 0c20 	add.w	ip, r4, #32
 800c53c:	4637      	mov	r7, r6
 800c53e:	6820      	ldr	r0, [r4, #0]
 800c540:	6861      	ldr	r1, [r4, #4]
 800c542:	3408      	adds	r4, #8
 800c544:	c703      	stmia	r7!, {r0, r1}
 800c546:	4564      	cmp	r4, ip
 800c548:	463e      	mov	r6, r7
 800c54a:	d1f7      	bne.n	800c53c <__utoa+0x10>
 800c54c:	7921      	ldrb	r1, [r4, #4]
 800c54e:	6820      	ldr	r0, [r4, #0]
 800c550:	7139      	strb	r1, [r7, #4]
 800c552:	1e91      	subs	r1, r2, #2
 800c554:	2922      	cmp	r1, #34	; 0x22
 800c556:	6038      	str	r0, [r7, #0]
 800c558:	f04f 0100 	mov.w	r1, #0
 800c55c:	d904      	bls.n	800c568 <__utoa+0x3c>
 800c55e:	7019      	strb	r1, [r3, #0]
 800c560:	460b      	mov	r3, r1
 800c562:	4618      	mov	r0, r3
 800c564:	b00b      	add	sp, #44	; 0x2c
 800c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c568:	1e58      	subs	r0, r3, #1
 800c56a:	4684      	mov	ip, r0
 800c56c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c570:	fb02 5617 	mls	r6, r2, r7, r5
 800c574:	3628      	adds	r6, #40	; 0x28
 800c576:	446e      	add	r6, sp
 800c578:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c57c:	460c      	mov	r4, r1
 800c57e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c582:	462e      	mov	r6, r5
 800c584:	42b2      	cmp	r2, r6
 800c586:	463d      	mov	r5, r7
 800c588:	f101 0101 	add.w	r1, r1, #1
 800c58c:	d9ee      	bls.n	800c56c <__utoa+0x40>
 800c58e:	2200      	movs	r2, #0
 800c590:	545a      	strb	r2, [r3, r1]
 800c592:	1919      	adds	r1, r3, r4
 800c594:	1aa5      	subs	r5, r4, r2
 800c596:	42aa      	cmp	r2, r5
 800c598:	dae3      	bge.n	800c562 <__utoa+0x36>
 800c59a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c59e:	780e      	ldrb	r6, [r1, #0]
 800c5a0:	3201      	adds	r2, #1
 800c5a2:	7006      	strb	r6, [r0, #0]
 800c5a4:	f801 5901 	strb.w	r5, [r1], #-1
 800c5a8:	e7f4      	b.n	800c594 <__utoa+0x68>
 800c5aa:	bf00      	nop
 800c5ac:	0800dd1a 	.word	0x0800dd1a

0800c5b0 <strcat>:
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	b510      	push	{r4, lr}
 800c5b4:	7814      	ldrb	r4, [r2, #0]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	3201      	adds	r2, #1
 800c5ba:	2c00      	cmp	r4, #0
 800c5bc:	d1fa      	bne.n	800c5b4 <strcat+0x4>
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5c8:	2a00      	cmp	r2, #0
 800c5ca:	d1f9      	bne.n	800c5c0 <strcat+0x10>
 800c5cc:	bd10      	pop	{r4, pc}

0800c5ce <strncpy>:
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	3901      	subs	r1, #1
 800c5d4:	b132      	cbz	r2, 800c5e4 <strncpy+0x16>
 800c5d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5da:	3a01      	subs	r2, #1
 800c5dc:	f803 4b01 	strb.w	r4, [r3], #1
 800c5e0:	2c00      	cmp	r4, #0
 800c5e2:	d1f7      	bne.n	800c5d4 <strncpy+0x6>
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	441a      	add	r2, r3
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d100      	bne.n	800c5ee <strncpy+0x20>
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c5f2:	e7f9      	b.n	800c5e8 <strncpy+0x1a>

0800c5f4 <memset>:
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	4402      	add	r2, r0
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d100      	bne.n	800c5fe <memset+0xa>
 800c5fc:	4770      	bx	lr
 800c5fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c602:	e7f9      	b.n	800c5f8 <memset+0x4>

0800c604 <_sbrk_r>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	2300      	movs	r3, #0
 800c608:	4d05      	ldr	r5, [pc, #20]	; (800c620 <_sbrk_r+0x1c>)
 800c60a:	4604      	mov	r4, r0
 800c60c:	4608      	mov	r0, r1
 800c60e:	602b      	str	r3, [r5, #0]
 800c610:	f7fb fff6 	bl	8008600 <_sbrk>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_sbrk_r+0x1a>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_sbrk_r+0x1a>
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	200005dc 	.word	0x200005dc

0800c624 <__errno>:
 800c624:	4b01      	ldr	r3, [pc, #4]	; (800c62c <__errno+0x8>)
 800c626:	6818      	ldr	r0, [r3, #0]
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	20000108 	.word	0x20000108

0800c630 <__libc_init_array>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	2600      	movs	r6, #0
 800c634:	4d0c      	ldr	r5, [pc, #48]	; (800c668 <__libc_init_array+0x38>)
 800c636:	4c0d      	ldr	r4, [pc, #52]	; (800c66c <__libc_init_array+0x3c>)
 800c638:	1b64      	subs	r4, r4, r5
 800c63a:	10a4      	asrs	r4, r4, #2
 800c63c:	42a6      	cmp	r6, r4
 800c63e:	d109      	bne.n	800c654 <__libc_init_array+0x24>
 800c640:	f000 fbc6 	bl	800cdd0 <_init>
 800c644:	2600      	movs	r6, #0
 800c646:	4d0a      	ldr	r5, [pc, #40]	; (800c670 <__libc_init_array+0x40>)
 800c648:	4c0a      	ldr	r4, [pc, #40]	; (800c674 <__libc_init_array+0x44>)
 800c64a:	1b64      	subs	r4, r4, r5
 800c64c:	10a4      	asrs	r4, r4, #2
 800c64e:	42a6      	cmp	r6, r4
 800c650:	d105      	bne.n	800c65e <__libc_init_array+0x2e>
 800c652:	bd70      	pop	{r4, r5, r6, pc}
 800c654:	f855 3b04 	ldr.w	r3, [r5], #4
 800c658:	4798      	blx	r3
 800c65a:	3601      	adds	r6, #1
 800c65c:	e7ee      	b.n	800c63c <__libc_init_array+0xc>
 800c65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c662:	4798      	blx	r3
 800c664:	3601      	adds	r6, #1
 800c666:	e7f2      	b.n	800c64e <__libc_init_array+0x1e>
 800c668:	0800dd74 	.word	0x0800dd74
 800c66c:	0800dd74 	.word	0x0800dd74
 800c670:	0800dd74 	.word	0x0800dd74
 800c674:	0800dd78 	.word	0x0800dd78

0800c678 <__retarget_lock_acquire_recursive>:
 800c678:	4770      	bx	lr

0800c67a <__retarget_lock_release_recursive>:
 800c67a:	4770      	bx	lr

0800c67c <strcpy>:
 800c67c:	4603      	mov	r3, r0
 800c67e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c682:	f803 2b01 	strb.w	r2, [r3], #1
 800c686:	2a00      	cmp	r2, #0
 800c688:	d1f9      	bne.n	800c67e <strcpy+0x2>
 800c68a:	4770      	bx	lr

0800c68c <_free_r>:
 800c68c:	b538      	push	{r3, r4, r5, lr}
 800c68e:	4605      	mov	r5, r0
 800c690:	2900      	cmp	r1, #0
 800c692:	d040      	beq.n	800c716 <_free_r+0x8a>
 800c694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c698:	1f0c      	subs	r4, r1, #4
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bfb8      	it	lt
 800c69e:	18e4      	addlt	r4, r4, r3
 800c6a0:	f7ff ff18 	bl	800c4d4 <__malloc_lock>
 800c6a4:	4a1c      	ldr	r2, [pc, #112]	; (800c718 <_free_r+0x8c>)
 800c6a6:	6813      	ldr	r3, [r2, #0]
 800c6a8:	b933      	cbnz	r3, 800c6b8 <_free_r+0x2c>
 800c6aa:	6063      	str	r3, [r4, #4]
 800c6ac:	6014      	str	r4, [r2, #0]
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b4:	f7ff bf14 	b.w	800c4e0 <__malloc_unlock>
 800c6b8:	42a3      	cmp	r3, r4
 800c6ba:	d908      	bls.n	800c6ce <_free_r+0x42>
 800c6bc:	6820      	ldr	r0, [r4, #0]
 800c6be:	1821      	adds	r1, r4, r0
 800c6c0:	428b      	cmp	r3, r1
 800c6c2:	bf01      	itttt	eq
 800c6c4:	6819      	ldreq	r1, [r3, #0]
 800c6c6:	685b      	ldreq	r3, [r3, #4]
 800c6c8:	1809      	addeq	r1, r1, r0
 800c6ca:	6021      	streq	r1, [r4, #0]
 800c6cc:	e7ed      	b.n	800c6aa <_free_r+0x1e>
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	b10b      	cbz	r3, 800c6d8 <_free_r+0x4c>
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	d9fa      	bls.n	800c6ce <_free_r+0x42>
 800c6d8:	6811      	ldr	r1, [r2, #0]
 800c6da:	1850      	adds	r0, r2, r1
 800c6dc:	42a0      	cmp	r0, r4
 800c6de:	d10b      	bne.n	800c6f8 <_free_r+0x6c>
 800c6e0:	6820      	ldr	r0, [r4, #0]
 800c6e2:	4401      	add	r1, r0
 800c6e4:	1850      	adds	r0, r2, r1
 800c6e6:	4283      	cmp	r3, r0
 800c6e8:	6011      	str	r1, [r2, #0]
 800c6ea:	d1e0      	bne.n	800c6ae <_free_r+0x22>
 800c6ec:	6818      	ldr	r0, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	4408      	add	r0, r1
 800c6f2:	6010      	str	r0, [r2, #0]
 800c6f4:	6053      	str	r3, [r2, #4]
 800c6f6:	e7da      	b.n	800c6ae <_free_r+0x22>
 800c6f8:	d902      	bls.n	800c700 <_free_r+0x74>
 800c6fa:	230c      	movs	r3, #12
 800c6fc:	602b      	str	r3, [r5, #0]
 800c6fe:	e7d6      	b.n	800c6ae <_free_r+0x22>
 800c700:	6820      	ldr	r0, [r4, #0]
 800c702:	1821      	adds	r1, r4, r0
 800c704:	428b      	cmp	r3, r1
 800c706:	bf01      	itttt	eq
 800c708:	6819      	ldreq	r1, [r3, #0]
 800c70a:	685b      	ldreq	r3, [r3, #4]
 800c70c:	1809      	addeq	r1, r1, r0
 800c70e:	6021      	streq	r1, [r4, #0]
 800c710:	6063      	str	r3, [r4, #4]
 800c712:	6054      	str	r4, [r2, #4]
 800c714:	e7cb      	b.n	800c6ae <_free_r+0x22>
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	20000498 	.word	0x20000498

0800c71c <__ssputs_r>:
 800c71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c720:	461f      	mov	r7, r3
 800c722:	688e      	ldr	r6, [r1, #8]
 800c724:	4682      	mov	sl, r0
 800c726:	42be      	cmp	r6, r7
 800c728:	460c      	mov	r4, r1
 800c72a:	4690      	mov	r8, r2
 800c72c:	680b      	ldr	r3, [r1, #0]
 800c72e:	d82c      	bhi.n	800c78a <__ssputs_r+0x6e>
 800c730:	898a      	ldrh	r2, [r1, #12]
 800c732:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c736:	d026      	beq.n	800c786 <__ssputs_r+0x6a>
 800c738:	6965      	ldr	r5, [r4, #20]
 800c73a:	6909      	ldr	r1, [r1, #16]
 800c73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c740:	eba3 0901 	sub.w	r9, r3, r1
 800c744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c748:	1c7b      	adds	r3, r7, #1
 800c74a:	444b      	add	r3, r9
 800c74c:	106d      	asrs	r5, r5, #1
 800c74e:	429d      	cmp	r5, r3
 800c750:	bf38      	it	cc
 800c752:	461d      	movcc	r5, r3
 800c754:	0553      	lsls	r3, r2, #21
 800c756:	d527      	bpl.n	800c7a8 <__ssputs_r+0x8c>
 800c758:	4629      	mov	r1, r5
 800c75a:	f7ff fe3b 	bl	800c3d4 <_malloc_r>
 800c75e:	4606      	mov	r6, r0
 800c760:	b360      	cbz	r0, 800c7bc <__ssputs_r+0xa0>
 800c762:	464a      	mov	r2, r9
 800c764:	6921      	ldr	r1, [r4, #16]
 800c766:	f000 fb1c 	bl	800cda2 <memcpy>
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	6126      	str	r6, [r4, #16]
 800c778:	444e      	add	r6, r9
 800c77a:	6026      	str	r6, [r4, #0]
 800c77c:	463e      	mov	r6, r7
 800c77e:	6165      	str	r5, [r4, #20]
 800c780:	eba5 0509 	sub.w	r5, r5, r9
 800c784:	60a5      	str	r5, [r4, #8]
 800c786:	42be      	cmp	r6, r7
 800c788:	d900      	bls.n	800c78c <__ssputs_r+0x70>
 800c78a:	463e      	mov	r6, r7
 800c78c:	4632      	mov	r2, r6
 800c78e:	4641      	mov	r1, r8
 800c790:	6820      	ldr	r0, [r4, #0]
 800c792:	f000 fade 	bl	800cd52 <memmove>
 800c796:	2000      	movs	r0, #0
 800c798:	68a3      	ldr	r3, [r4, #8]
 800c79a:	1b9b      	subs	r3, r3, r6
 800c79c:	60a3      	str	r3, [r4, #8]
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	4433      	add	r3, r6
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a8:	462a      	mov	r2, r5
 800c7aa:	f000 faa3 	bl	800ccf4 <_realloc_r>
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d1e0      	bne.n	800c776 <__ssputs_r+0x5a>
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	6921      	ldr	r1, [r4, #16]
 800c7b8:	f7ff ff68 	bl	800c68c <_free_r>
 800c7bc:	230c      	movs	r3, #12
 800c7be:	f8ca 3000 	str.w	r3, [sl]
 800c7c2:	89a3      	ldrh	r3, [r4, #12]
 800c7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	e7e9      	b.n	800c7a4 <__ssputs_r+0x88>

0800c7d0 <_svfiprintf_r>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	4698      	mov	r8, r3
 800c7d6:	898b      	ldrh	r3, [r1, #12]
 800c7d8:	4607      	mov	r7, r0
 800c7da:	061b      	lsls	r3, r3, #24
 800c7dc:	460d      	mov	r5, r1
 800c7de:	4614      	mov	r4, r2
 800c7e0:	b09d      	sub	sp, #116	; 0x74
 800c7e2:	d50e      	bpl.n	800c802 <_svfiprintf_r+0x32>
 800c7e4:	690b      	ldr	r3, [r1, #16]
 800c7e6:	b963      	cbnz	r3, 800c802 <_svfiprintf_r+0x32>
 800c7e8:	2140      	movs	r1, #64	; 0x40
 800c7ea:	f7ff fdf3 	bl	800c3d4 <_malloc_r>
 800c7ee:	6028      	str	r0, [r5, #0]
 800c7f0:	6128      	str	r0, [r5, #16]
 800c7f2:	b920      	cbnz	r0, 800c7fe <_svfiprintf_r+0x2e>
 800c7f4:	230c      	movs	r3, #12
 800c7f6:	603b      	str	r3, [r7, #0]
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7fc:	e0d0      	b.n	800c9a0 <_svfiprintf_r+0x1d0>
 800c7fe:	2340      	movs	r3, #64	; 0x40
 800c800:	616b      	str	r3, [r5, #20]
 800c802:	2300      	movs	r3, #0
 800c804:	9309      	str	r3, [sp, #36]	; 0x24
 800c806:	2320      	movs	r3, #32
 800c808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c80c:	2330      	movs	r3, #48	; 0x30
 800c80e:	f04f 0901 	mov.w	r9, #1
 800c812:	f8cd 800c 	str.w	r8, [sp, #12]
 800c816:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c9b8 <_svfiprintf_r+0x1e8>
 800c81a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c81e:	4623      	mov	r3, r4
 800c820:	469a      	mov	sl, r3
 800c822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c826:	b10a      	cbz	r2, 800c82c <_svfiprintf_r+0x5c>
 800c828:	2a25      	cmp	r2, #37	; 0x25
 800c82a:	d1f9      	bne.n	800c820 <_svfiprintf_r+0x50>
 800c82c:	ebba 0b04 	subs.w	fp, sl, r4
 800c830:	d00b      	beq.n	800c84a <_svfiprintf_r+0x7a>
 800c832:	465b      	mov	r3, fp
 800c834:	4622      	mov	r2, r4
 800c836:	4629      	mov	r1, r5
 800c838:	4638      	mov	r0, r7
 800c83a:	f7ff ff6f 	bl	800c71c <__ssputs_r>
 800c83e:	3001      	adds	r0, #1
 800c840:	f000 80a9 	beq.w	800c996 <_svfiprintf_r+0x1c6>
 800c844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c846:	445a      	add	r2, fp
 800c848:	9209      	str	r2, [sp, #36]	; 0x24
 800c84a:	f89a 3000 	ldrb.w	r3, [sl]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 80a1 	beq.w	800c996 <_svfiprintf_r+0x1c6>
 800c854:	2300      	movs	r3, #0
 800c856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c85e:	f10a 0a01 	add.w	sl, sl, #1
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	9307      	str	r3, [sp, #28]
 800c866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c86a:	931a      	str	r3, [sp, #104]	; 0x68
 800c86c:	4654      	mov	r4, sl
 800c86e:	2205      	movs	r2, #5
 800c870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c874:	4850      	ldr	r0, [pc, #320]	; (800c9b8 <_svfiprintf_r+0x1e8>)
 800c876:	f000 fa86 	bl	800cd86 <memchr>
 800c87a:	9a04      	ldr	r2, [sp, #16]
 800c87c:	b9d8      	cbnz	r0, 800c8b6 <_svfiprintf_r+0xe6>
 800c87e:	06d0      	lsls	r0, r2, #27
 800c880:	bf44      	itt	mi
 800c882:	2320      	movmi	r3, #32
 800c884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c888:	0711      	lsls	r1, r2, #28
 800c88a:	bf44      	itt	mi
 800c88c:	232b      	movmi	r3, #43	; 0x2b
 800c88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c892:	f89a 3000 	ldrb.w	r3, [sl]
 800c896:	2b2a      	cmp	r3, #42	; 0x2a
 800c898:	d015      	beq.n	800c8c6 <_svfiprintf_r+0xf6>
 800c89a:	4654      	mov	r4, sl
 800c89c:	2000      	movs	r0, #0
 800c89e:	f04f 0c0a 	mov.w	ip, #10
 800c8a2:	9a07      	ldr	r2, [sp, #28]
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8aa:	3b30      	subs	r3, #48	; 0x30
 800c8ac:	2b09      	cmp	r3, #9
 800c8ae:	d94d      	bls.n	800c94c <_svfiprintf_r+0x17c>
 800c8b0:	b1b0      	cbz	r0, 800c8e0 <_svfiprintf_r+0x110>
 800c8b2:	9207      	str	r2, [sp, #28]
 800c8b4:	e014      	b.n	800c8e0 <_svfiprintf_r+0x110>
 800c8b6:	eba0 0308 	sub.w	r3, r0, r8
 800c8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	46a2      	mov	sl, r4
 800c8c2:	9304      	str	r3, [sp, #16]
 800c8c4:	e7d2      	b.n	800c86c <_svfiprintf_r+0x9c>
 800c8c6:	9b03      	ldr	r3, [sp, #12]
 800c8c8:	1d19      	adds	r1, r3, #4
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	9103      	str	r1, [sp, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	bfbb      	ittet	lt
 800c8d2:	425b      	neglt	r3, r3
 800c8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8d8:	9307      	strge	r3, [sp, #28]
 800c8da:	9307      	strlt	r3, [sp, #28]
 800c8dc:	bfb8      	it	lt
 800c8de:	9204      	strlt	r2, [sp, #16]
 800c8e0:	7823      	ldrb	r3, [r4, #0]
 800c8e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8e4:	d10c      	bne.n	800c900 <_svfiprintf_r+0x130>
 800c8e6:	7863      	ldrb	r3, [r4, #1]
 800c8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ea:	d134      	bne.n	800c956 <_svfiprintf_r+0x186>
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	3402      	adds	r4, #2
 800c8f0:	1d1a      	adds	r2, r3, #4
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	9203      	str	r2, [sp, #12]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	bfb8      	it	lt
 800c8fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8fe:	9305      	str	r3, [sp, #20]
 800c900:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c9bc <_svfiprintf_r+0x1ec>
 800c904:	2203      	movs	r2, #3
 800c906:	4650      	mov	r0, sl
 800c908:	7821      	ldrb	r1, [r4, #0]
 800c90a:	f000 fa3c 	bl	800cd86 <memchr>
 800c90e:	b138      	cbz	r0, 800c920 <_svfiprintf_r+0x150>
 800c910:	2240      	movs	r2, #64	; 0x40
 800c912:	9b04      	ldr	r3, [sp, #16]
 800c914:	eba0 000a 	sub.w	r0, r0, sl
 800c918:	4082      	lsls	r2, r0
 800c91a:	4313      	orrs	r3, r2
 800c91c:	3401      	adds	r4, #1
 800c91e:	9304      	str	r3, [sp, #16]
 800c920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c924:	2206      	movs	r2, #6
 800c926:	4826      	ldr	r0, [pc, #152]	; (800c9c0 <_svfiprintf_r+0x1f0>)
 800c928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c92c:	f000 fa2b 	bl	800cd86 <memchr>
 800c930:	2800      	cmp	r0, #0
 800c932:	d038      	beq.n	800c9a6 <_svfiprintf_r+0x1d6>
 800c934:	4b23      	ldr	r3, [pc, #140]	; (800c9c4 <_svfiprintf_r+0x1f4>)
 800c936:	bb1b      	cbnz	r3, 800c980 <_svfiprintf_r+0x1b0>
 800c938:	9b03      	ldr	r3, [sp, #12]
 800c93a:	3307      	adds	r3, #7
 800c93c:	f023 0307 	bic.w	r3, r3, #7
 800c940:	3308      	adds	r3, #8
 800c942:	9303      	str	r3, [sp, #12]
 800c944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c946:	4433      	add	r3, r6
 800c948:	9309      	str	r3, [sp, #36]	; 0x24
 800c94a:	e768      	b.n	800c81e <_svfiprintf_r+0x4e>
 800c94c:	460c      	mov	r4, r1
 800c94e:	2001      	movs	r0, #1
 800c950:	fb0c 3202 	mla	r2, ip, r2, r3
 800c954:	e7a6      	b.n	800c8a4 <_svfiprintf_r+0xd4>
 800c956:	2300      	movs	r3, #0
 800c958:	f04f 0c0a 	mov.w	ip, #10
 800c95c:	4619      	mov	r1, r3
 800c95e:	3401      	adds	r4, #1
 800c960:	9305      	str	r3, [sp, #20]
 800c962:	4620      	mov	r0, r4
 800c964:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c968:	3a30      	subs	r2, #48	; 0x30
 800c96a:	2a09      	cmp	r2, #9
 800c96c:	d903      	bls.n	800c976 <_svfiprintf_r+0x1a6>
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0c6      	beq.n	800c900 <_svfiprintf_r+0x130>
 800c972:	9105      	str	r1, [sp, #20]
 800c974:	e7c4      	b.n	800c900 <_svfiprintf_r+0x130>
 800c976:	4604      	mov	r4, r0
 800c978:	2301      	movs	r3, #1
 800c97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c97e:	e7f0      	b.n	800c962 <_svfiprintf_r+0x192>
 800c980:	ab03      	add	r3, sp, #12
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	462a      	mov	r2, r5
 800c986:	4638      	mov	r0, r7
 800c988:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <_svfiprintf_r+0x1f8>)
 800c98a:	a904      	add	r1, sp, #16
 800c98c:	f3af 8000 	nop.w
 800c990:	1c42      	adds	r2, r0, #1
 800c992:	4606      	mov	r6, r0
 800c994:	d1d6      	bne.n	800c944 <_svfiprintf_r+0x174>
 800c996:	89ab      	ldrh	r3, [r5, #12]
 800c998:	065b      	lsls	r3, r3, #25
 800c99a:	f53f af2d 	bmi.w	800c7f8 <_svfiprintf_r+0x28>
 800c99e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9a0:	b01d      	add	sp, #116	; 0x74
 800c9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a6:	ab03      	add	r3, sp, #12
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <_svfiprintf_r+0x1f8>)
 800c9b0:	a904      	add	r1, sp, #16
 800c9b2:	f000 f87d 	bl	800cab0 <_printf_i>
 800c9b6:	e7eb      	b.n	800c990 <_svfiprintf_r+0x1c0>
 800c9b8:	0800dd3f 	.word	0x0800dd3f
 800c9bc:	0800dd45 	.word	0x0800dd45
 800c9c0:	0800dd49 	.word	0x0800dd49
 800c9c4:	00000000 	.word	0x00000000
 800c9c8:	0800c71d 	.word	0x0800c71d

0800c9cc <_printf_common>:
 800c9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d0:	4616      	mov	r6, r2
 800c9d2:	4699      	mov	r9, r3
 800c9d4:	688a      	ldr	r2, [r1, #8]
 800c9d6:	690b      	ldr	r3, [r1, #16]
 800c9d8:	4607      	mov	r7, r0
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	bfb8      	it	lt
 800c9de:	4613      	movlt	r3, r2
 800c9e0:	6033      	str	r3, [r6, #0]
 800c9e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9ec:	b10a      	cbz	r2, 800c9f2 <_printf_common+0x26>
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	6033      	str	r3, [r6, #0]
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	0699      	lsls	r1, r3, #26
 800c9f6:	bf42      	ittt	mi
 800c9f8:	6833      	ldrmi	r3, [r6, #0]
 800c9fa:	3302      	addmi	r3, #2
 800c9fc:	6033      	strmi	r3, [r6, #0]
 800c9fe:	6825      	ldr	r5, [r4, #0]
 800ca00:	f015 0506 	ands.w	r5, r5, #6
 800ca04:	d106      	bne.n	800ca14 <_printf_common+0x48>
 800ca06:	f104 0a19 	add.w	sl, r4, #25
 800ca0a:	68e3      	ldr	r3, [r4, #12]
 800ca0c:	6832      	ldr	r2, [r6, #0]
 800ca0e:	1a9b      	subs	r3, r3, r2
 800ca10:	42ab      	cmp	r3, r5
 800ca12:	dc2b      	bgt.n	800ca6c <_printf_common+0xa0>
 800ca14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca18:	1e13      	subs	r3, r2, #0
 800ca1a:	6822      	ldr	r2, [r4, #0]
 800ca1c:	bf18      	it	ne
 800ca1e:	2301      	movne	r3, #1
 800ca20:	0692      	lsls	r2, r2, #26
 800ca22:	d430      	bmi.n	800ca86 <_printf_common+0xba>
 800ca24:	4649      	mov	r1, r9
 800ca26:	4638      	mov	r0, r7
 800ca28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca2c:	47c0      	blx	r8
 800ca2e:	3001      	adds	r0, #1
 800ca30:	d023      	beq.n	800ca7a <_printf_common+0xae>
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	6922      	ldr	r2, [r4, #16]
 800ca36:	f003 0306 	and.w	r3, r3, #6
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	bf14      	ite	ne
 800ca3e:	2500      	movne	r5, #0
 800ca40:	6833      	ldreq	r3, [r6, #0]
 800ca42:	f04f 0600 	mov.w	r6, #0
 800ca46:	bf08      	it	eq
 800ca48:	68e5      	ldreq	r5, [r4, #12]
 800ca4a:	f104 041a 	add.w	r4, r4, #26
 800ca4e:	bf08      	it	eq
 800ca50:	1aed      	subeq	r5, r5, r3
 800ca52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca56:	bf08      	it	eq
 800ca58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	bfc4      	itt	gt
 800ca60:	1a9b      	subgt	r3, r3, r2
 800ca62:	18ed      	addgt	r5, r5, r3
 800ca64:	42b5      	cmp	r5, r6
 800ca66:	d11a      	bne.n	800ca9e <_printf_common+0xd2>
 800ca68:	2000      	movs	r0, #0
 800ca6a:	e008      	b.n	800ca7e <_printf_common+0xb2>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	4652      	mov	r2, sl
 800ca70:	4649      	mov	r1, r9
 800ca72:	4638      	mov	r0, r7
 800ca74:	47c0      	blx	r8
 800ca76:	3001      	adds	r0, #1
 800ca78:	d103      	bne.n	800ca82 <_printf_common+0xb6>
 800ca7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca82:	3501      	adds	r5, #1
 800ca84:	e7c1      	b.n	800ca0a <_printf_common+0x3e>
 800ca86:	2030      	movs	r0, #48	; 0x30
 800ca88:	18e1      	adds	r1, r4, r3
 800ca8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca94:	4422      	add	r2, r4
 800ca96:	3302      	adds	r3, #2
 800ca98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca9c:	e7c2      	b.n	800ca24 <_printf_common+0x58>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4622      	mov	r2, r4
 800caa2:	4649      	mov	r1, r9
 800caa4:	4638      	mov	r0, r7
 800caa6:	47c0      	blx	r8
 800caa8:	3001      	adds	r0, #1
 800caaa:	d0e6      	beq.n	800ca7a <_printf_common+0xae>
 800caac:	3601      	adds	r6, #1
 800caae:	e7d9      	b.n	800ca64 <_printf_common+0x98>

0800cab0 <_printf_i>:
 800cab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cab4:	7e0f      	ldrb	r7, [r1, #24]
 800cab6:	4691      	mov	r9, r2
 800cab8:	2f78      	cmp	r7, #120	; 0x78
 800caba:	4680      	mov	r8, r0
 800cabc:	460c      	mov	r4, r1
 800cabe:	469a      	mov	sl, r3
 800cac0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cac6:	d807      	bhi.n	800cad8 <_printf_i+0x28>
 800cac8:	2f62      	cmp	r7, #98	; 0x62
 800caca:	d80a      	bhi.n	800cae2 <_printf_i+0x32>
 800cacc:	2f00      	cmp	r7, #0
 800cace:	f000 80d5 	beq.w	800cc7c <_printf_i+0x1cc>
 800cad2:	2f58      	cmp	r7, #88	; 0x58
 800cad4:	f000 80c1 	beq.w	800cc5a <_printf_i+0x1aa>
 800cad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cadc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cae0:	e03a      	b.n	800cb58 <_printf_i+0xa8>
 800cae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cae6:	2b15      	cmp	r3, #21
 800cae8:	d8f6      	bhi.n	800cad8 <_printf_i+0x28>
 800caea:	a101      	add	r1, pc, #4	; (adr r1, 800caf0 <_printf_i+0x40>)
 800caec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caf0:	0800cb49 	.word	0x0800cb49
 800caf4:	0800cb5d 	.word	0x0800cb5d
 800caf8:	0800cad9 	.word	0x0800cad9
 800cafc:	0800cad9 	.word	0x0800cad9
 800cb00:	0800cad9 	.word	0x0800cad9
 800cb04:	0800cad9 	.word	0x0800cad9
 800cb08:	0800cb5d 	.word	0x0800cb5d
 800cb0c:	0800cad9 	.word	0x0800cad9
 800cb10:	0800cad9 	.word	0x0800cad9
 800cb14:	0800cad9 	.word	0x0800cad9
 800cb18:	0800cad9 	.word	0x0800cad9
 800cb1c:	0800cc63 	.word	0x0800cc63
 800cb20:	0800cb89 	.word	0x0800cb89
 800cb24:	0800cc1d 	.word	0x0800cc1d
 800cb28:	0800cad9 	.word	0x0800cad9
 800cb2c:	0800cad9 	.word	0x0800cad9
 800cb30:	0800cc85 	.word	0x0800cc85
 800cb34:	0800cad9 	.word	0x0800cad9
 800cb38:	0800cb89 	.word	0x0800cb89
 800cb3c:	0800cad9 	.word	0x0800cad9
 800cb40:	0800cad9 	.word	0x0800cad9
 800cb44:	0800cc25 	.word	0x0800cc25
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	1d1a      	adds	r2, r3, #4
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	602a      	str	r2, [r5, #0]
 800cb50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e0a0      	b.n	800cc9e <_printf_i+0x1ee>
 800cb5c:	6820      	ldr	r0, [r4, #0]
 800cb5e:	682b      	ldr	r3, [r5, #0]
 800cb60:	0607      	lsls	r7, r0, #24
 800cb62:	f103 0104 	add.w	r1, r3, #4
 800cb66:	6029      	str	r1, [r5, #0]
 800cb68:	d501      	bpl.n	800cb6e <_printf_i+0xbe>
 800cb6a:	681e      	ldr	r6, [r3, #0]
 800cb6c:	e003      	b.n	800cb76 <_printf_i+0xc6>
 800cb6e:	0646      	lsls	r6, r0, #25
 800cb70:	d5fb      	bpl.n	800cb6a <_printf_i+0xba>
 800cb72:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	da03      	bge.n	800cb82 <_printf_i+0xd2>
 800cb7a:	232d      	movs	r3, #45	; 0x2d
 800cb7c:	4276      	negs	r6, r6
 800cb7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb82:	230a      	movs	r3, #10
 800cb84:	4859      	ldr	r0, [pc, #356]	; (800ccec <_printf_i+0x23c>)
 800cb86:	e012      	b.n	800cbae <_printf_i+0xfe>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	6820      	ldr	r0, [r4, #0]
 800cb8c:	1d19      	adds	r1, r3, #4
 800cb8e:	6029      	str	r1, [r5, #0]
 800cb90:	0605      	lsls	r5, r0, #24
 800cb92:	d501      	bpl.n	800cb98 <_printf_i+0xe8>
 800cb94:	681e      	ldr	r6, [r3, #0]
 800cb96:	e002      	b.n	800cb9e <_printf_i+0xee>
 800cb98:	0641      	lsls	r1, r0, #25
 800cb9a:	d5fb      	bpl.n	800cb94 <_printf_i+0xe4>
 800cb9c:	881e      	ldrh	r6, [r3, #0]
 800cb9e:	2f6f      	cmp	r7, #111	; 0x6f
 800cba0:	bf0c      	ite	eq
 800cba2:	2308      	moveq	r3, #8
 800cba4:	230a      	movne	r3, #10
 800cba6:	4851      	ldr	r0, [pc, #324]	; (800ccec <_printf_i+0x23c>)
 800cba8:	2100      	movs	r1, #0
 800cbaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbae:	6865      	ldr	r5, [r4, #4]
 800cbb0:	2d00      	cmp	r5, #0
 800cbb2:	bfa8      	it	ge
 800cbb4:	6821      	ldrge	r1, [r4, #0]
 800cbb6:	60a5      	str	r5, [r4, #8]
 800cbb8:	bfa4      	itt	ge
 800cbba:	f021 0104 	bicge.w	r1, r1, #4
 800cbbe:	6021      	strge	r1, [r4, #0]
 800cbc0:	b90e      	cbnz	r6, 800cbc6 <_printf_i+0x116>
 800cbc2:	2d00      	cmp	r5, #0
 800cbc4:	d04b      	beq.n	800cc5e <_printf_i+0x1ae>
 800cbc6:	4615      	mov	r5, r2
 800cbc8:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbcc:	fb03 6711 	mls	r7, r3, r1, r6
 800cbd0:	5dc7      	ldrb	r7, [r0, r7]
 800cbd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbd6:	4637      	mov	r7, r6
 800cbd8:	42bb      	cmp	r3, r7
 800cbda:	460e      	mov	r6, r1
 800cbdc:	d9f4      	bls.n	800cbc8 <_printf_i+0x118>
 800cbde:	2b08      	cmp	r3, #8
 800cbe0:	d10b      	bne.n	800cbfa <_printf_i+0x14a>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	07de      	lsls	r6, r3, #31
 800cbe6:	d508      	bpl.n	800cbfa <_printf_i+0x14a>
 800cbe8:	6923      	ldr	r3, [r4, #16]
 800cbea:	6861      	ldr	r1, [r4, #4]
 800cbec:	4299      	cmp	r1, r3
 800cbee:	bfde      	ittt	le
 800cbf0:	2330      	movle	r3, #48	; 0x30
 800cbf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbf6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cbfa:	1b52      	subs	r2, r2, r5
 800cbfc:	6122      	str	r2, [r4, #16]
 800cbfe:	464b      	mov	r3, r9
 800cc00:	4621      	mov	r1, r4
 800cc02:	4640      	mov	r0, r8
 800cc04:	f8cd a000 	str.w	sl, [sp]
 800cc08:	aa03      	add	r2, sp, #12
 800cc0a:	f7ff fedf 	bl	800c9cc <_printf_common>
 800cc0e:	3001      	adds	r0, #1
 800cc10:	d14a      	bne.n	800cca8 <_printf_i+0x1f8>
 800cc12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc16:	b004      	add	sp, #16
 800cc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1c:	6823      	ldr	r3, [r4, #0]
 800cc1e:	f043 0320 	orr.w	r3, r3, #32
 800cc22:	6023      	str	r3, [r4, #0]
 800cc24:	2778      	movs	r7, #120	; 0x78
 800cc26:	4832      	ldr	r0, [pc, #200]	; (800ccf0 <_printf_i+0x240>)
 800cc28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	6829      	ldr	r1, [r5, #0]
 800cc30:	061f      	lsls	r7, r3, #24
 800cc32:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc36:	d402      	bmi.n	800cc3e <_printf_i+0x18e>
 800cc38:	065f      	lsls	r7, r3, #25
 800cc3a:	bf48      	it	mi
 800cc3c:	b2b6      	uxthmi	r6, r6
 800cc3e:	07df      	lsls	r7, r3, #31
 800cc40:	bf48      	it	mi
 800cc42:	f043 0320 	orrmi.w	r3, r3, #32
 800cc46:	6029      	str	r1, [r5, #0]
 800cc48:	bf48      	it	mi
 800cc4a:	6023      	strmi	r3, [r4, #0]
 800cc4c:	b91e      	cbnz	r6, 800cc56 <_printf_i+0x1a6>
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	f023 0320 	bic.w	r3, r3, #32
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	2310      	movs	r3, #16
 800cc58:	e7a6      	b.n	800cba8 <_printf_i+0xf8>
 800cc5a:	4824      	ldr	r0, [pc, #144]	; (800ccec <_printf_i+0x23c>)
 800cc5c:	e7e4      	b.n	800cc28 <_printf_i+0x178>
 800cc5e:	4615      	mov	r5, r2
 800cc60:	e7bd      	b.n	800cbde <_printf_i+0x12e>
 800cc62:	682b      	ldr	r3, [r5, #0]
 800cc64:	6826      	ldr	r6, [r4, #0]
 800cc66:	1d18      	adds	r0, r3, #4
 800cc68:	6961      	ldr	r1, [r4, #20]
 800cc6a:	6028      	str	r0, [r5, #0]
 800cc6c:	0635      	lsls	r5, r6, #24
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	d501      	bpl.n	800cc76 <_printf_i+0x1c6>
 800cc72:	6019      	str	r1, [r3, #0]
 800cc74:	e002      	b.n	800cc7c <_printf_i+0x1cc>
 800cc76:	0670      	lsls	r0, r6, #25
 800cc78:	d5fb      	bpl.n	800cc72 <_printf_i+0x1c2>
 800cc7a:	8019      	strh	r1, [r3, #0]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	4615      	mov	r5, r2
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	e7bc      	b.n	800cbfe <_printf_i+0x14e>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	2100      	movs	r1, #0
 800cc88:	1d1a      	adds	r2, r3, #4
 800cc8a:	602a      	str	r2, [r5, #0]
 800cc8c:	681d      	ldr	r5, [r3, #0]
 800cc8e:	6862      	ldr	r2, [r4, #4]
 800cc90:	4628      	mov	r0, r5
 800cc92:	f000 f878 	bl	800cd86 <memchr>
 800cc96:	b108      	cbz	r0, 800cc9c <_printf_i+0x1ec>
 800cc98:	1b40      	subs	r0, r0, r5
 800cc9a:	6060      	str	r0, [r4, #4]
 800cc9c:	6863      	ldr	r3, [r4, #4]
 800cc9e:	6123      	str	r3, [r4, #16]
 800cca0:	2300      	movs	r3, #0
 800cca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cca6:	e7aa      	b.n	800cbfe <_printf_i+0x14e>
 800cca8:	462a      	mov	r2, r5
 800ccaa:	4649      	mov	r1, r9
 800ccac:	4640      	mov	r0, r8
 800ccae:	6923      	ldr	r3, [r4, #16]
 800ccb0:	47d0      	blx	sl
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	d0ad      	beq.n	800cc12 <_printf_i+0x162>
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	079b      	lsls	r3, r3, #30
 800ccba:	d413      	bmi.n	800cce4 <_printf_i+0x234>
 800ccbc:	68e0      	ldr	r0, [r4, #12]
 800ccbe:	9b03      	ldr	r3, [sp, #12]
 800ccc0:	4298      	cmp	r0, r3
 800ccc2:	bfb8      	it	lt
 800ccc4:	4618      	movlt	r0, r3
 800ccc6:	e7a6      	b.n	800cc16 <_printf_i+0x166>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	4632      	mov	r2, r6
 800cccc:	4649      	mov	r1, r9
 800ccce:	4640      	mov	r0, r8
 800ccd0:	47d0      	blx	sl
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	d09d      	beq.n	800cc12 <_printf_i+0x162>
 800ccd6:	3501      	adds	r5, #1
 800ccd8:	68e3      	ldr	r3, [r4, #12]
 800ccda:	9903      	ldr	r1, [sp, #12]
 800ccdc:	1a5b      	subs	r3, r3, r1
 800ccde:	42ab      	cmp	r3, r5
 800cce0:	dcf2      	bgt.n	800ccc8 <_printf_i+0x218>
 800cce2:	e7eb      	b.n	800ccbc <_printf_i+0x20c>
 800cce4:	2500      	movs	r5, #0
 800cce6:	f104 0619 	add.w	r6, r4, #25
 800ccea:	e7f5      	b.n	800ccd8 <_printf_i+0x228>
 800ccec:	0800dd50 	.word	0x0800dd50
 800ccf0:	0800dd61 	.word	0x0800dd61

0800ccf4 <_realloc_r>:
 800ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf8:	4680      	mov	r8, r0
 800ccfa:	4614      	mov	r4, r2
 800ccfc:	460e      	mov	r6, r1
 800ccfe:	b921      	cbnz	r1, 800cd0a <_realloc_r+0x16>
 800cd00:	4611      	mov	r1, r2
 800cd02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd06:	f7ff bb65 	b.w	800c3d4 <_malloc_r>
 800cd0a:	b92a      	cbnz	r2, 800cd18 <_realloc_r+0x24>
 800cd0c:	f7ff fcbe 	bl	800c68c <_free_r>
 800cd10:	4625      	mov	r5, r4
 800cd12:	4628      	mov	r0, r5
 800cd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd18:	f000 f851 	bl	800cdbe <_malloc_usable_size_r>
 800cd1c:	4284      	cmp	r4, r0
 800cd1e:	4607      	mov	r7, r0
 800cd20:	d802      	bhi.n	800cd28 <_realloc_r+0x34>
 800cd22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd26:	d812      	bhi.n	800cd4e <_realloc_r+0x5a>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	4640      	mov	r0, r8
 800cd2c:	f7ff fb52 	bl	800c3d4 <_malloc_r>
 800cd30:	4605      	mov	r5, r0
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d0ed      	beq.n	800cd12 <_realloc_r+0x1e>
 800cd36:	42bc      	cmp	r4, r7
 800cd38:	4622      	mov	r2, r4
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	bf28      	it	cs
 800cd3e:	463a      	movcs	r2, r7
 800cd40:	f000 f82f 	bl	800cda2 <memcpy>
 800cd44:	4631      	mov	r1, r6
 800cd46:	4640      	mov	r0, r8
 800cd48:	f7ff fca0 	bl	800c68c <_free_r>
 800cd4c:	e7e1      	b.n	800cd12 <_realloc_r+0x1e>
 800cd4e:	4635      	mov	r5, r6
 800cd50:	e7df      	b.n	800cd12 <_realloc_r+0x1e>

0800cd52 <memmove>:
 800cd52:	4288      	cmp	r0, r1
 800cd54:	b510      	push	{r4, lr}
 800cd56:	eb01 0402 	add.w	r4, r1, r2
 800cd5a:	d902      	bls.n	800cd62 <memmove+0x10>
 800cd5c:	4284      	cmp	r4, r0
 800cd5e:	4623      	mov	r3, r4
 800cd60:	d807      	bhi.n	800cd72 <memmove+0x20>
 800cd62:	1e43      	subs	r3, r0, #1
 800cd64:	42a1      	cmp	r1, r4
 800cd66:	d008      	beq.n	800cd7a <memmove+0x28>
 800cd68:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd70:	e7f8      	b.n	800cd64 <memmove+0x12>
 800cd72:	4601      	mov	r1, r0
 800cd74:	4402      	add	r2, r0
 800cd76:	428a      	cmp	r2, r1
 800cd78:	d100      	bne.n	800cd7c <memmove+0x2a>
 800cd7a:	bd10      	pop	{r4, pc}
 800cd7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd80:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd84:	e7f7      	b.n	800cd76 <memmove+0x24>

0800cd86 <memchr>:
 800cd86:	4603      	mov	r3, r0
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	b2c9      	uxtb	r1, r1
 800cd8c:	4402      	add	r2, r0
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	d101      	bne.n	800cd98 <memchr+0x12>
 800cd94:	2000      	movs	r0, #0
 800cd96:	e003      	b.n	800cda0 <memchr+0x1a>
 800cd98:	7804      	ldrb	r4, [r0, #0]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	428c      	cmp	r4, r1
 800cd9e:	d1f6      	bne.n	800cd8e <memchr+0x8>
 800cda0:	bd10      	pop	{r4, pc}

0800cda2 <memcpy>:
 800cda2:	440a      	add	r2, r1
 800cda4:	4291      	cmp	r1, r2
 800cda6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdaa:	d100      	bne.n	800cdae <memcpy+0xc>
 800cdac:	4770      	bx	lr
 800cdae:	b510      	push	{r4, lr}
 800cdb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdb4:	4291      	cmp	r1, r2
 800cdb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdba:	d1f9      	bne.n	800cdb0 <memcpy+0xe>
 800cdbc:	bd10      	pop	{r4, pc}

0800cdbe <_malloc_usable_size_r>:
 800cdbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc2:	1f18      	subs	r0, r3, #4
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bfbc      	itt	lt
 800cdc8:	580b      	ldrlt	r3, [r1, r0]
 800cdca:	18c0      	addlt	r0, r0, r3
 800cdcc:	4770      	bx	lr
	...

0800cdd0 <_init>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr

0800cddc <_fini>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	bf00      	nop
 800cde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde2:	bc08      	pop	{r3}
 800cde4:	469e      	mov	lr, r3
 800cde6:	4770      	bx	lr
