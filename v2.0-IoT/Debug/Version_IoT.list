
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  0800cd90  0800cd90  0001cd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd84  0800dd84  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd84  0800dd84  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd84  0800dd84  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd84  0800dd84  0001dd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd88  0800dd88  0001dd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800dd8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000fc  0800de88  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800de88  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016908  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000351d  00000000  00000000  00036a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00039f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5d  00000000  00000000  0003b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003c075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2ee  00000000  00000000  0005871a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee4c  00000000  00000000  00074a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000521c  00000000  00000000  00113854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cd78 	.word	0x0800cd78

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800cd78 	.word	0x0800cd78

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc04 	bl	8009a5c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa7c 	bl	8008754 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003a8 	.word	0x200003a8
 80004c0:	200001f9 	.word	0x200001f9
 80004c4:	20000221 	.word	0x20000221
 80004c8:	20000224 	.word	0x20000224
 80004cc:	20000225 	.word	0x20000225
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000227 	.word	0x20000227
 80004d8:	20000228 	.word	0x20000228
 80004dc:	20000229 	.word	0x20000229
 80004e0:	20000239 	.word	0x20000239
 80004e4:	2000022a 	.word	0x2000022a
 80004e8:	2000023a 	.word	0x2000023a
 80004ec:	2000022b 	.word	0x2000022b
 80004f0:	2000023b 	.word	0x2000023b
 80004f4:	2000022e 	.word	0x2000022e
 80004f8:	2000022f 	.word	0x2000022f
 80004fc:	20000230 	.word	0x20000230
 8000500:	20000231 	.word	0x20000231
 8000504:	20000232 	.word	0x20000232
 8000508:	20000233 	.word	0x20000233
 800050c:	20000234 	.word	0x20000234
 8000510:	20000235 	.word	0x20000235
 8000514:	20000236 	.word	0x20000236
 8000518:	20000237 	.word	0x20000237
 800051c:	20000238 	.word	0x20000238
 8000520:	2000023c 	.word	0x2000023c
 8000524:	2000023e 	.word	0x2000023e
 8000528:	2000021c 	.word	0x2000021c
 800052c:	2000021d 	.word	0x2000021d
 8000530:	2000021e 	.word	0x2000021e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021f 	.word	0x2000021f
 8000540:	20000241 	.word	0x20000241
 8000544:	2000023f 	.word	0x2000023f
 8000548:	2000022d 	.word	0x2000022d
 800054c:	20000240 	.word	0x20000240
 8000550:	2000022c 	.word	0x2000022c
 8000554:	20000242 	.word	0x20000242
 8000558:	20000243 	.word	0x20000243
 800055c:	20000244 	.word	0x20000244
 8000560:	20000245 	.word	0x20000245
 8000564:	20000246 	.word	0x20000246
 8000568:	20000247 	.word	0x20000247
 800056c:	20000248 	.word	0x20000248
 8000570:	20000249 	.word	0x20000249
 8000574:	2000024a 	.word	0x2000024a
 8000578:	2000024b 	.word	0x2000024b
 800057c:	200001f8 	.word	0x200001f8
	}

	if(kapi1AcSure>5) {
 8000580:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <eepromKontrol+0x4ac>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <eepromKontrol+0x4ac>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b55      	ldr	r3, [pc, #340]	; (80006e4 <eepromKontrol+0x4b0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <eepromKontrol+0x4b0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <eepromKontrol+0x4b4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <eepromKontrol+0x4b4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <eepromKontrol+0x4b8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4e      	ldr	r3, [pc, #312]	; (80006ec <eepromKontrol+0x4b8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <eepromKontrol+0x4bc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <eepromKontrol+0x4c0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <eepromKontrol+0x4c4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <eepromKontrol+0x4c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <eepromKontrol+0x4c8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <eepromKontrol+0x4cc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <eepromKontrol+0x4cc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <eepromKontrol+0x4d0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <eepromKontrol+0x4d0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <eepromKontrol+0x4d4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <eepromKontrol+0x4d4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3c      	ldr	r3, [pc, #240]	; (800070c <eepromKontrol+0x4d8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <eepromKontrol+0x4d8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <eepromKontrol+0x4dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b37      	ldr	r3, [pc, #220]	; (8000710 <eepromKontrol+0x4dc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <eepromKontrol+0x4e0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <eepromKontrol+0x4e0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <eepromKontrol+0x4e4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <eepromKontrol+0x4e4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <eepromKontrol+0x4e8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <eepromKontrol+0x4e8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <eepromKontrol+0x4ec>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <eepromKontrol+0x4ec>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <eepromKontrol+0x4f0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <eepromKontrol+0x4f0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <eepromKontrol+0x4f4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <eepromKontrol+0x4f4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <eepromKontrol+0x4f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <eepromKontrol+0x4f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <eepromKontrol+0x4fc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <eepromKontrol+0x4fc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <eepromKontrol+0x500>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <eepromKontrol+0x500>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	//memcpy(machineIDInt, &eepromData[idStartPos], 12);
	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f83f 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f008 f84a 	bl	8008754 <HAL_Delay>
	//memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f839 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f008 f844 	bl	8008754 <HAL_Delay>
	//memcpy(wifiPassInt, &eepromData[passStartPos], 20);
	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f833 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f008 f83e 	bl	8008754 <HAL_Delay>
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000239 	.word	0x20000239
 80006e4:	2000022a 	.word	0x2000022a
 80006e8:	2000023a 	.word	0x2000023a
 80006ec:	2000022b 	.word	0x2000022b
 80006f0:	2000022d 	.word	0x2000022d
 80006f4:	2000023b 	.word	0x2000023b
 80006f8:	2000022e 	.word	0x2000022e
 80006fc:	2000022f 	.word	0x2000022f
 8000700:	20000230 	.word	0x20000230
 8000704:	20000231 	.word	0x20000231
 8000708:	20000232 	.word	0x20000232
 800070c:	20000233 	.word	0x20000233
 8000710:	20000234 	.word	0x20000234
 8000714:	20000235 	.word	0x20000235
 8000718:	20000236 	.word	0x20000236
 800071c:	20000237 	.word	0x20000237
 8000720:	20000238 	.word	0x20000238
 8000724:	2000023c 	.word	0x2000023c
 8000728:	2000023e 	.word	0x2000023e
 800072c:	20000240 	.word	0x20000240
 8000730:	20000241 	.word	0x20000241
 8000734:	2000023f 	.word	0x2000023f

08000738 <convertArrays>:

void convertArrays(int state) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d122      	bne.n	800078c <convertArrays+0x54>
		memset(machineID, 0, machineID[0]);
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <convertArrays+0xec>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	4835      	ldr	r0, [pc, #212]	; (8000824 <convertArrays+0xec>)
 8000750:	f00b ff23 	bl	800c59a <memset>
		int eepromVal = idStartPos;
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <convertArrays+0xf0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<12; i++) {
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	e011      	b.n	8000784 <convertArrays+0x4c>
			machineID[i] = idCharactersArray[eepromData[eepromVal]];
 8000760:	4a32      	ldr	r2, [pc, #200]	; (800082c <convertArrays+0xf4>)
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <convertArrays+0xf8>)
 800076c:	5c99      	ldrb	r1, [r3, r2]
 800076e:	4a2d      	ldr	r2, [pc, #180]	; (8000824 <convertArrays+0xec>)
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	4413      	add	r3, r2
 8000774:	460a      	mov	r2, r1
 8000776:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	3301      	adds	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<12; i++) {
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	3301      	adds	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	2b0b      	cmp	r3, #11
 8000788:	ddea      	ble.n	8000760 <convertArrays+0x28>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];

			eepromVal++;
		}
	}
}
 800078a:	e047      	b.n	800081c <convertArrays+0xe4>
	} else if(state == 2) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d122      	bne.n	80007d8 <convertArrays+0xa0>
		memset(wifiSSID, 0, wifiSSID[0]);
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <convertArrays+0xfc>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	4826      	ldr	r0, [pc, #152]	; (8000834 <convertArrays+0xfc>)
 800079c:	f00b fefd 	bl	800c59a <memset>
		int eepromVal = ssidStartPos;
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <convertArrays+0x100>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e011      	b.n	80007d0 <convertArrays+0x98>
			wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007ac:	4a1f      	ldr	r2, [pc, #124]	; (800082c <convertArrays+0xf4>)
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <convertArrays+0x104>)
 80007b8:	5c99      	ldrb	r1, [r3, r2]
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <convertArrays+0xfc>)
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	4413      	add	r3, r2
 80007c0:	460a      	mov	r2, r1
 80007c2:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	3301      	adds	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	2b13      	cmp	r3, #19
 80007d4:	ddea      	ble.n	80007ac <convertArrays+0x74>
}
 80007d6:	e021      	b.n	800081c <convertArrays+0xe4>
		memset(wifiPass, 0, wifiPass[0]);
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <convertArrays+0x108>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	4817      	ldr	r0, [pc, #92]	; (8000840 <convertArrays+0x108>)
 80007e2:	f00b feda 	bl	800c59a <memset>
		int eepromVal = passStartPos;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <convertArrays+0x10c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	e011      	b.n	8000816 <convertArrays+0xde>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <convertArrays+0xf4>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <convertArrays+0x104>)
 80007fe:	5c99      	ldrb	r1, [r3, r2]
 8000800:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <convertArrays+0x108>)
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	4413      	add	r3, r2
 8000806:	460a      	mov	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3301      	adds	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	2b13      	cmp	r3, #19
 800081a:	ddea      	ble.n	80007f2 <convertArrays+0xba>
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000190 	.word	0x20000190
 8000828:	20000004 	.word	0x20000004
 800082c:	20000118 	.word	0x20000118
 8000830:	20000010 	.word	0x20000010
 8000834:	2000019c 	.word	0x2000019c
 8000838:	20000008 	.word	0x20000008
 800083c:	2000001c 	.word	0x2000001c
 8000840:	200001b0 	.word	0x200001b0
 8000844:	2000000c 	.word	0x2000000c

08000848 <resetEEPROM4Wifi>:
	} else {
		//wifi pass convert
	}
}

void resetEEPROM4Wifi(int state) {
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d11e      	bne.n	8000894 <resetEEPROM4Wifi+0x4c>
		int eepromVal = idStartPos;
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <resetEEPROM4Wifi+0xd8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	e014      	b.n	800088c <resetEEPROM4Wifi+0x44>
			machineID[i] = '\0';
 8000862:	4a30      	ldr	r2, [pc, #192]	; (8000924 <resetEEPROM4Wifi+0xdc>)
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	4413      	add	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
			machineIDInt[i] = '\0';
 800086c:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <resetEEPROM4Wifi+0xe0>)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	4413      	add	r3, r2
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000876:	4a2d      	ldr	r2, [pc, #180]	; (800092c <resetEEPROM4Wifi+0xe4>)
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	4413      	add	r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	3301      	adds	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	3301      	adds	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	2b0b      	cmp	r3, #11
 8000890:	dde7      	ble.n	8000862 <resetEEPROM4Wifi+0x1a>
			wifiPassInt[i] = '\0';
			eepromData[eepromVal] = '\0';
			eepromVal++;
		}
	}
}
 8000892:	e03f      	b.n	8000914 <resetEEPROM4Wifi+0xcc>
	} else if(state == 2) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d11e      	bne.n	80008d8 <resetEEPROM4Wifi+0x90>
		int eepromVal = ssidStartPos;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <resetEEPROM4Wifi+0xe8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	e014      	b.n	80008d0 <resetEEPROM4Wifi+0x88>
			wifiSSID[i] = '\0';
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <resetEEPROM4Wifi+0xec>)
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	4413      	add	r3, r2
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
			wifiSSIDInt[i] = '\0';
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <resetEEPROM4Wifi+0xf0>)
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	4413      	add	r3, r2
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <resetEEPROM4Wifi+0xe4>)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	4413      	add	r3, r2
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	3301      	adds	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	2b13      	cmp	r3, #19
 80008d4:	dde7      	ble.n	80008a6 <resetEEPROM4Wifi+0x5e>
}
 80008d6:	e01d      	b.n	8000914 <resetEEPROM4Wifi+0xcc>
		int eepromVal = passStartPos;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <resetEEPROM4Wifi+0xf4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	e014      	b.n	800090e <resetEEPROM4Wifi+0xc6>
			wifiPass[i] = '\0';
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <resetEEPROM4Wifi+0xf8>)
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
			wifiPassInt[i] = '\0';
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <resetEEPROM4Wifi+0xfc>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4413      	add	r3, r2
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80008f8:	4a0c      	ldr	r2, [pc, #48]	; (800092c <resetEEPROM4Wifi+0xe4>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4413      	add	r3, r2
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3301      	adds	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3301      	adds	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b13      	cmp	r3, #19
 8000912:	dde7      	ble.n	80008e4 <resetEEPROM4Wifi+0x9c>
}
 8000914:	bf00      	nop
 8000916:	3724      	adds	r7, #36	; 0x24
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000004 	.word	0x20000004
 8000924:	20000190 	.word	0x20000190
 8000928:	200001c4 	.word	0x200001c4
 800092c:	20000118 	.word	0x20000118
 8000930:	20000008 	.word	0x20000008
 8000934:	2000019c 	.word	0x2000019c
 8000938:	200001d0 	.word	0x200001d0
 800093c:	2000000c 	.word	0x2000000c
 8000940:	200001b0 	.word	0x200001b0
 8000944:	200001e4 	.word	0x200001e4

08000948 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b0c9      	sub	sp, #292	; 0x124
 800094c:	af04      	add	r7, sp, #16
 800094e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000952:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8000956:	6020      	str	r0, [r4, #0]
 8000958:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800095c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8000960:	6001      	str	r1, [r0, #0]
 8000962:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000966:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800096a:	600a      	str	r2, [r1, #0]
 800096c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000970:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000974:	6013      	str	r3, [r2, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000976:	4a36      	ldr	r2, [pc, #216]	; (8000a50 <sendMachineData+0x108>)
 8000978:	4936      	ldr	r1, [pc, #216]	; (8000a54 <sendMachineData+0x10c>)
 800097a:	4837      	ldr	r0, [pc, #220]	; (8000a58 <sendMachineData+0x110>)
 800097c:	f00b fd9c 	bl	800c4b8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000980:	4835      	ldr	r0, [pc, #212]	; (8000a58 <sendMachineData+0x110>)
 8000982:	f7ff fc4f 	bl	8000224 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000992:	4931      	ldr	r1, [pc, #196]	; (8000a58 <sendMachineData+0x110>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	f00a ffa9 	bl	800b8ec <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 800099a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800099e:	f007 fed9 	bl	8008754 <HAL_Delay>

	sprintf(local_txA,
 80009a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009ae:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80009b2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80009b6:	4929      	ldr	r1, [pc, #164]	; (8000a5c <sendMachineData+0x114>)
 80009b8:	9102      	str	r1, [sp, #8]
 80009ba:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80009be:	9101      	str	r1, [sp, #4]
 80009c0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80009c4:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80009c8:	6809      	ldr	r1, [r1, #0]
 80009ca:	9100      	str	r1, [sp, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	4923      	ldr	r1, [pc, #140]	; (8000a60 <sendMachineData+0x118>)
 80009d2:	f00b fd71 	bl	800c4b8 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80009d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fc22 	bl	8000224 <strlen>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009ee:	491d      	ldr	r1, [pc, #116]	; (8000a64 <sendMachineData+0x11c>)
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00b fd61 	bl	800c4b8 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fc12 	bl	8000224 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	f107 0110 	add.w	r1, r7, #16
 8000a08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	f00a ff6b 	bl	800b8ec <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a16:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a1a:	f007 fe9b 	bl	8008754 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fbfe 	bl	8000224 <strlen>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	f00a ff57 	bl	800b8ec <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000a3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a42:	f007 fe87 	bl	8008754 <HAL_Delay>
}
 8000a46:	bf00      	nop
 8000a48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	0800cde0 	.word	0x0800cde0
 8000a54:	0800cdf0 	.word	0x0800cdf0
 8000a58:	20000284 	.word	0x20000284
 8000a5c:	0800ce84 	.word	0x0800ce84
 8000a60:	0800ce10 	.word	0x0800ce10
 8000a64:	0800ce98 	.word	0x0800ce98

08000a68 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af04      	add	r7, sp, #16
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <hata2EEPROM+0xa4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1e5a      	subs	r2, r3, #1
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <hata2EEPROM+0xa8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <hata2EEPROM+0xac>)
 8000a80:	5cd3      	ldrb	r3, [r2, r3]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a86:	f000 f92b 	bl	8000ce0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a8a:	e000      	b.n	8000a8e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a8c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	e012      	b.n	8000aba <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <hata2EEPROM+0xa8>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <hata2EEPROM+0xac>)
 8000a9e:	5cd3      	ldrb	r3, [r2, r3]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <hata2EEPROM+0xa8>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4919      	ldr	r1, [pc, #100]	; (8000b14 <hata2EEPROM+0xac>)
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	54ca      	strb	r2, [r1, r3]
					break;
 8000ab2:	e007      	b.n	8000ac4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <hata2EEPROM+0xa4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbe7      	blt.n	8000a94 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <hata2EEPROM+0xa8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	b299      	uxth	r1, r3
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <hata2EEPROM+0xa4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	b298      	uxth	r0, r3
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <hata2EEPROM+0xa8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <hata2EEPROM+0xac>)
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <hata2EEPROM+0xa4>)
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	b292      	uxth	r2, r2
 8000ade:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000ae2:	9402      	str	r4, [sp, #8]
 8000ae4:	9201      	str	r2, [sp, #4]
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	4603      	mov	r3, r0
 8000aea:	460a      	mov	r2, r1
 8000aec:	21a0      	movs	r1, #160	; 0xa0
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <hata2EEPROM+0xb0>)
 8000af0:	f008 feba 	bl	8009868 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f007 fe2c 	bl	8008754 <HAL_Delay>
	eepromKontrol(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff fb99 	bl	8000234 <eepromKontrol>
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000098 	.word	0x20000098
 8000b10:	2000009c 	.word	0x2000009c
 8000b14:	20000118 	.word	0x20000118
 8000b18:	200003a8 	.word	0x200003a8

08000b1c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d11d      	bne.n	8000b68 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b2c:	4b62      	ldr	r3, [pc, #392]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d105      	bne.n	8000b40 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b34:	4a61      	ldr	r2, [pc, #388]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f007 f8b5 	bl	8007ca8 <lcd_print>
 8000b3e:	e008      	b.n	8000b52 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000b40:	4b5d      	ldr	r3, [pc, #372]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d104      	bne.n	8000b52 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b48:	4a5d      	ldr	r2, [pc, #372]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f007 f8ab 	bl	8007ca8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b52:	4a5c      	ldr	r2, [pc, #368]	; (8000cc4 <hataKoduLcdGoster+0x1a8>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	2002      	movs	r0, #2
 8000b58:	f007 f8a6 	bl	8007ca8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b5c:	4a5a      	ldr	r2, [pc, #360]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000b5e:	2107      	movs	r1, #7
 8000b60:	2002      	movs	r0, #2
 8000b62:	f007 f8a1 	bl	8007ca8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b66:	e0a3      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d11d      	bne.n	8000baa <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000b6e:	4b52      	ldr	r3, [pc, #328]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d105      	bne.n	8000b82 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000b76:	4a51      	ldr	r2, [pc, #324]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f007 f894 	bl	8007ca8 <lcd_print>
 8000b80:	e008      	b.n	8000b94 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000b82:	4b4d      	ldr	r3, [pc, #308]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d104      	bne.n	8000b94 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000b8a:	4a4d      	ldr	r2, [pc, #308]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f007 f88a 	bl	8007ca8 <lcd_print>
		lcd_print(2, 2, "2");
 8000b94:	4a4d      	ldr	r2, [pc, #308]	; (8000ccc <hataKoduLcdGoster+0x1b0>)
 8000b96:	2102      	movs	r1, #2
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f007 f885 	bl	8007ca8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b9e:	4a4a      	ldr	r2, [pc, #296]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000ba0:	2107      	movs	r1, #7
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f007 f880 	bl	8007ca8 <lcd_print>
}
 8000ba8:	e082      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d11d      	bne.n	8000bec <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000bb0:	4b41      	ldr	r3, [pc, #260]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d105      	bne.n	8000bc4 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000bb8:	4a40      	ldr	r2, [pc, #256]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f007 f873 	bl	8007ca8 <lcd_print>
 8000bc2:	e008      	b.n	8000bd6 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000bc4:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d104      	bne.n	8000bd6 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000bcc:	4a3c      	ldr	r2, [pc, #240]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000bce:	2101      	movs	r1, #1
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f007 f869 	bl	8007ca8 <lcd_print>
		lcd_print(2, 3, "3");
 8000bd6:	4a3e      	ldr	r2, [pc, #248]	; (8000cd0 <hataKoduLcdGoster+0x1b4>)
 8000bd8:	2103      	movs	r1, #3
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f007 f864 	bl	8007ca8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000be0:	4a39      	ldr	r2, [pc, #228]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000be2:	2107      	movs	r1, #7
 8000be4:	2002      	movs	r0, #2
 8000be6:	f007 f85f 	bl	8007ca8 <lcd_print>
}
 8000bea:	e061      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d11d      	bne.n	8000c2e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000bf2:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d105      	bne.n	8000c06 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000bfa:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f007 f852 	bl	8007ca8 <lcd_print>
 8000c04:	e008      	b.n	8000c18 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d104      	bne.n	8000c18 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c0e:	4a2c      	ldr	r2, [pc, #176]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	2001      	movs	r0, #1
 8000c14:	f007 f848 	bl	8007ca8 <lcd_print>
		lcd_print(2, 4, "4");
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <hataKoduLcdGoster+0x1b8>)
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f007 f843 	bl	8007ca8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000c24:	2107      	movs	r1, #7
 8000c26:	2002      	movs	r0, #2
 8000c28:	f007 f83e 	bl	8007ca8 <lcd_print>
}
 8000c2c:	e040      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b05      	cmp	r3, #5
 8000c32:	d11d      	bne.n	8000c70 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d105      	bne.n	8000c48 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000c3c:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2001      	movs	r0, #1
 8000c42:	f007 f831 	bl	8007ca8 <lcd_print>
 8000c46:	e008      	b.n	8000c5a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d104      	bne.n	8000c5a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	2001      	movs	r0, #1
 8000c56:	f007 f827 	bl	8007ca8 <lcd_print>
		lcd_print(2, 5, "5");
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <hataKoduLcdGoster+0x1bc>)
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f007 f822 	bl	8007ca8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c64:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000c66:	2107      	movs	r1, #7
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f007 f81d 	bl	8007ca8 <lcd_print>
}
 8000c6e:	e01f      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d11c      	bne.n	8000cb0 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d105      	bne.n	8000c8a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	2001      	movs	r0, #1
 8000c84:	f007 f810 	bl	8007ca8 <lcd_print>
 8000c88:	e008      	b.n	8000c9c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d104      	bne.n	8000c9c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000c94:	2101      	movs	r1, #1
 8000c96:	2001      	movs	r0, #1
 8000c98:	f007 f806 	bl	8007ca8 <lcd_print>
		lcd_print(2, 6, "6");
 8000c9c:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <hataKoduLcdGoster+0x1c0>)
 8000c9e:	2106      	movs	r1, #6
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f007 f801 	bl	8007ca8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000ca8:	2107      	movs	r1, #7
 8000caa:	2002      	movs	r0, #2
 8000cac:	f006 fffc 	bl	8007ca8 <lcd_print>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000241 	.word	0x20000241
 8000cbc:	0800cf24 	.word	0x0800cf24
 8000cc0:	0800cf34 	.word	0x0800cf34
 8000cc4:	0800cf44 	.word	0x0800cf44
 8000cc8:	0800cf48 	.word	0x0800cf48
 8000ccc:	0800cf54 	.word	0x0800cf54
 8000cd0:	0800cf58 	.word	0x0800cf58
 8000cd4:	0800cf5c 	.word	0x0800cf5c
 8000cd8:	0800cf60 	.word	0x0800cf60
 8000cdc:	0800cf64 	.word	0x0800cf64

08000ce0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	e009      	b.n	8000d00 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <eepromDataFillWithEmpty+0x38>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <eepromDataFillWithEmpty+0x3c>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <eepromDataFillWithEmpty+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbf0      	blt.n	8000cec <eepromDataFillWithEmpty+0xc>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000070 	.word	0x20000070
 8000d1c:	20000118 	.word	0x20000118
 8000d20:	20000098 	.word	0x20000098

08000d24 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d36:	4b50      	ldr	r3, [pc, #320]	; (8000e78 <i2cTest+0x154>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <i2cTest+0x154>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0201 	bic.w	r2, r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d46:	484c      	ldr	r0, [pc, #304]	; (8000e78 <i2cTest+0x154>)
 8000d48:	f008 fc60 	bl	800960c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4c:	23c0      	movs	r3, #192	; 0xc0
 8000d4e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d50:	2311      	movs	r3, #17
 8000d52:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4846      	ldr	r0, [pc, #280]	; (8000e7c <i2cTest+0x158>)
 8000d62:	f008 f867 	bl	8008e34 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2140      	movs	r1, #64	; 0x40
 8000d6a:	4844      	ldr	r0, [pc, #272]	; (8000e7c <i2cTest+0x158>)
 8000d6c:	f008 fad9 	bl	8009322 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	4841      	ldr	r0, [pc, #260]	; (8000e7c <i2cTest+0x158>)
 8000d76:	f008 fad4 	bl	8009322 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	f007 fcea 	bl	8008754 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d80:	bf00      	nop
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	483d      	ldr	r0, [pc, #244]	; (8000e7c <i2cTest+0x158>)
 8000d86:	f008 fab5 	bl	80092f4 <HAL_GPIO_ReadPin>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d006      	beq.n	8000d9e <i2cTest+0x7a>
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	483a      	ldr	r0, [pc, #232]	; (8000e7c <i2cTest+0x158>)
 8000d94:	f008 faae 	bl	80092f4 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d1f1      	bne.n	8000d82 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	4836      	ldr	r0, [pc, #216]	; (8000e7c <i2cTest+0x158>)
 8000da4:	f008 fabd 	bl	8009322 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000da8:	200a      	movs	r0, #10
 8000daa:	f007 fcd3 	bl	8008754 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000dae:	bf00      	nop
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	4832      	ldr	r0, [pc, #200]	; (8000e7c <i2cTest+0x158>)
 8000db4:	f008 fa9e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d0f8      	beq.n	8000db0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2140      	movs	r1, #64	; 0x40
 8000dc2:	482e      	ldr	r0, [pc, #184]	; (8000e7c <i2cTest+0x158>)
 8000dc4:	f008 faad 	bl	8009322 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000dc8:	200a      	movs	r0, #10
 8000dca:	f007 fcc3 	bl	8008754 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dce:	bf00      	nop
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	482a      	ldr	r0, [pc, #168]	; (8000e7c <i2cTest+0x158>)
 8000dd4:	f008 fa8e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d0f8      	beq.n	8000dd0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2140      	movs	r1, #64	; 0x40
 8000de2:	4826      	ldr	r0, [pc, #152]	; (8000e7c <i2cTest+0x158>)
 8000de4:	f008 fa9d 	bl	8009322 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000de8:	200a      	movs	r0, #10
 8000dea:	f007 fcb3 	bl	8008754 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000dee:	bf00      	nop
 8000df0:	2140      	movs	r1, #64	; 0x40
 8000df2:	4822      	ldr	r0, [pc, #136]	; (8000e7c <i2cTest+0x158>)
 8000df4:	f008 fa7e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d1f8      	bne.n	8000df0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	481e      	ldr	r0, [pc, #120]	; (8000e7c <i2cTest+0x158>)
 8000e04:	f008 fa8d 	bl	8009322 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f007 fca3 	bl	8008754 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e0e:	bf00      	nop
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	481a      	ldr	r0, [pc, #104]	; (8000e7c <i2cTest+0x158>)
 8000e14:	f008 fa6e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d1f8      	bne.n	8000e10 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e1e:	23c0      	movs	r3, #192	; 0xc0
 8000e20:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e22:	2312      	movs	r3, #18
 8000e24:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4812      	ldr	r0, [pc, #72]	; (8000e7c <i2cTest+0x158>)
 8000e34:	f007 fffe 	bl	8008e34 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <i2cTest+0x154>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <i2cTest+0x154>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e46:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <i2cTest+0x154>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <i2cTest+0x154>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e56:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <i2cTest+0x154>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <i2cTest+0x154>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <i2cTest+0x154>)
 8000e6a:	f008 fa8b 	bl	8009384 <HAL_I2C_Init>
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200003a8 	.word	0x200003a8
 8000e7c:	40010c00 	.word	0x40010c00

08000e80 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000e8a:	20c8      	movs	r0, #200	; 0xc8
 8000e8c:	f007 fc62 	bl	8008754 <HAL_Delay>
	lcd_clear();
 8000e90:	f006 ff36 	bl	8007d00 <lcd_clear>
	if(type == 1 && page == 0) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d143      	bne.n	8000f22 <printTemplate+0xa2>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d140      	bne.n	8000f22 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000ea0:	4a9d      	ldr	r2, [pc, #628]	; (8001118 <printTemplate+0x298>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f006 feff 	bl	8007ca8 <lcd_print>
		lcd_print(2, 3, "0");
 8000eaa:	4a9c      	ldr	r2, [pc, #624]	; (800111c <printTemplate+0x29c>)
 8000eac:	2103      	movs	r1, #3
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f006 fefa 	bl	8007ca8 <lcd_print>
		lcd_print(2, 4, "1");
 8000eb4:	4a9a      	ldr	r2, [pc, #616]	; (8001120 <printTemplate+0x2a0>)
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f006 fef5 	bl	8007ca8 <lcd_print>
		lcd_print(2, 5, "2");
 8000ebe:	4a99      	ldr	r2, [pc, #612]	; (8001124 <printTemplate+0x2a4>)
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f006 fef0 	bl	8007ca8 <lcd_print>
		lcd_print(2, 6, "3");
 8000ec8:	4a97      	ldr	r2, [pc, #604]	; (8001128 <printTemplate+0x2a8>)
 8000eca:	2106      	movs	r1, #6
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f006 feeb 	bl	8007ca8 <lcd_print>
		lcd_print(2, 7, "4");
 8000ed2:	4a96      	ldr	r2, [pc, #600]	; (800112c <printTemplate+0x2ac>)
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f006 fee6 	bl	8007ca8 <lcd_print>
		lcd_print(2, 10, "5");
 8000edc:	4a94      	ldr	r2, [pc, #592]	; (8001130 <printTemplate+0x2b0>)
 8000ede:	210a      	movs	r1, #10
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f006 fee1 	bl	8007ca8 <lcd_print>
		lcd_print(2, 11, "6");
 8000ee6:	4a93      	ldr	r2, [pc, #588]	; (8001134 <printTemplate+0x2b4>)
 8000ee8:	210b      	movs	r1, #11
 8000eea:	2002      	movs	r0, #2
 8000eec:	f006 fedc 	bl	8007ca8 <lcd_print>
		lcd_print(2, 12, "7");
 8000ef0:	4a91      	ldr	r2, [pc, #580]	; (8001138 <printTemplate+0x2b8>)
 8000ef2:	210c      	movs	r1, #12
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f006 fed7 	bl	8007ca8 <lcd_print>
		lcd_print(2, 13, "8");
 8000efa:	4a90      	ldr	r2, [pc, #576]	; (800113c <printTemplate+0x2bc>)
 8000efc:	210d      	movs	r1, #13
 8000efe:	2002      	movs	r0, #2
 8000f00:	f006 fed2 	bl	8007ca8 <lcd_print>
		lcd_print(2, 14, "9");
 8000f04:	4a8e      	ldr	r2, [pc, #568]	; (8001140 <printTemplate+0x2c0>)
 8000f06:	210e      	movs	r1, #14
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f006 fecd 	bl	8007ca8 <lcd_print>
		lcd_print(1, 5, machineID);
 8000f0e:	4a8d      	ldr	r2, [pc, #564]	; (8001144 <printTemplate+0x2c4>)
 8000f10:	2105      	movs	r1, #5
 8000f12:	2001      	movs	r0, #1
 8000f14:	f006 fec8 	bl	8007ca8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f18:	2103      	movs	r1, #3
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f006 fea5 	bl	8007c6a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f20:	e0f5      	b.n	800110e <printTemplate+0x28e>
	} else if(type == 2) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d178      	bne.n	800101a <printTemplate+0x19a>
		if(page == 1) {
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d114      	bne.n	8000f58 <printTemplate+0xd8>
			lcd_clear();
 8000f2e:	f006 fee7 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 8000f32:	2064      	movs	r0, #100	; 0x64
 8000f34:	f007 fc0e 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f38:	4a83      	ldr	r2, [pc, #524]	; (8001148 <printTemplate+0x2c8>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f006 feb3 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f42:	4a82      	ldr	r2, [pc, #520]	; (800114c <printTemplate+0x2cc>)
 8000f44:	2107      	movs	r1, #7
 8000f46:	2001      	movs	r0, #1
 8000f48:	f006 feae 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f4c:	4a80      	ldr	r2, [pc, #512]	; (8001150 <printTemplate+0x2d0>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	2002      	movs	r0, #2
 8000f52:	f006 fea9 	bl	8007ca8 <lcd_print>
}
 8000f56:	e0da      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 2) {
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d114      	bne.n	8000f88 <printTemplate+0x108>
			lcd_clear();
 8000f5e:	f006 fecf 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f007 fbf6 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f68:	4a77      	ldr	r2, [pc, #476]	; (8001148 <printTemplate+0x2c8>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f006 fe9b 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f72:	4a76      	ldr	r2, [pc, #472]	; (800114c <printTemplate+0x2cc>)
 8000f74:	2107      	movs	r1, #7
 8000f76:	2001      	movs	r0, #1
 8000f78:	f006 fe96 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f7c:	4a75      	ldr	r2, [pc, #468]	; (8001154 <printTemplate+0x2d4>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2002      	movs	r0, #2
 8000f82:	f006 fe91 	bl	8007ca8 <lcd_print>
}
 8000f86:	e0c2      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 3) {
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d114      	bne.n	8000fb8 <printTemplate+0x138>
			lcd_clear();
 8000f8e:	f006 feb7 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 8000f92:	2064      	movs	r0, #100	; 0x64
 8000f94:	f007 fbde 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f98:	4a6b      	ldr	r2, [pc, #428]	; (8001148 <printTemplate+0x2c8>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f006 fe83 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fa2:	4a6a      	ldr	r2, [pc, #424]	; (800114c <printTemplate+0x2cc>)
 8000fa4:	2107      	movs	r1, #7
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f006 fe7e 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fac:	4a6a      	ldr	r2, [pc, #424]	; (8001158 <printTemplate+0x2d8>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f006 fe79 	bl	8007ca8 <lcd_print>
}
 8000fb6:	e0aa      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 4) {
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d114      	bne.n	8000fe8 <printTemplate+0x168>
			lcd_clear();
 8000fbe:	f006 fe9f 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f007 fbc6 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fc8:	4a5f      	ldr	r2, [pc, #380]	; (8001148 <printTemplate+0x2c8>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f006 fe6b 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	; (800114c <printTemplate+0x2cc>)
 8000fd4:	2107      	movs	r1, #7
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f006 fe66 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fdc:	4a5f      	ldr	r2, [pc, #380]	; (800115c <printTemplate+0x2dc>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f006 fe61 	bl	8007ca8 <lcd_print>
}
 8000fe6:	e092      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 5) {
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	f040 808f 	bne.w	800110e <printTemplate+0x28e>
			lcd_clear();
 8000ff0:	f006 fe86 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 8000ff4:	2064      	movs	r0, #100	; 0x64
 8000ff6:	f007 fbad 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ffa:	4a53      	ldr	r2, [pc, #332]	; (8001148 <printTemplate+0x2c8>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2001      	movs	r0, #1
 8001000:	f006 fe52 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001004:	4a51      	ldr	r2, [pc, #324]	; (800114c <printTemplate+0x2cc>)
 8001006:	2107      	movs	r1, #7
 8001008:	2001      	movs	r0, #1
 800100a:	f006 fe4d 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800100e:	4a54      	ldr	r2, [pc, #336]	; (8001160 <printTemplate+0x2e0>)
 8001010:	2101      	movs	r1, #1
 8001012:	2002      	movs	r0, #2
 8001014:	f006 fe48 	bl	8007ca8 <lcd_print>
}
 8001018:	e079      	b.n	800110e <printTemplate+0x28e>
	} else if(type == 3) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d176      	bne.n	800110e <printTemplate+0x28e>
		if(page == 1) {
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d114      	bne.n	8001050 <printTemplate+0x1d0>
			lcd_clear();
 8001026:	f006 fe6b 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f007 fb92 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <printTemplate+0x2e4>)
 8001032:	2101      	movs	r1, #1
 8001034:	2001      	movs	r0, #1
 8001036:	f006 fe37 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800103a:	4a4b      	ldr	r2, [pc, #300]	; (8001168 <printTemplate+0x2e8>)
 800103c:	2107      	movs	r1, #7
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fe32 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001044:	4a42      	ldr	r2, [pc, #264]	; (8001150 <printTemplate+0x2d0>)
 8001046:	2101      	movs	r1, #1
 8001048:	2002      	movs	r0, #2
 800104a:	f006 fe2d 	bl	8007ca8 <lcd_print>
}
 800104e:	e05e      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 2) {
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d114      	bne.n	8001080 <printTemplate+0x200>
			lcd_clear();
 8001056:	f006 fe53 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 800105a:	2064      	movs	r0, #100	; 0x64
 800105c:	f007 fb7a 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001060:	4a40      	ldr	r2, [pc, #256]	; (8001164 <printTemplate+0x2e4>)
 8001062:	2101      	movs	r1, #1
 8001064:	2001      	movs	r0, #1
 8001066:	f006 fe1f 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800106a:	4a3f      	ldr	r2, [pc, #252]	; (8001168 <printTemplate+0x2e8>)
 800106c:	2107      	movs	r1, #7
 800106e:	2001      	movs	r0, #1
 8001070:	f006 fe1a 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001074:	4a37      	ldr	r2, [pc, #220]	; (8001154 <printTemplate+0x2d4>)
 8001076:	2101      	movs	r1, #1
 8001078:	2002      	movs	r0, #2
 800107a:	f006 fe15 	bl	8007ca8 <lcd_print>
}
 800107e:	e046      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 3) {
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d114      	bne.n	80010b0 <printTemplate+0x230>
			lcd_clear();
 8001086:	f006 fe3b 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 800108a:	2064      	movs	r0, #100	; 0x64
 800108c:	f007 fb62 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001090:	4a34      	ldr	r2, [pc, #208]	; (8001164 <printTemplate+0x2e4>)
 8001092:	2101      	movs	r1, #1
 8001094:	2001      	movs	r0, #1
 8001096:	f006 fe07 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800109a:	4a33      	ldr	r2, [pc, #204]	; (8001168 <printTemplate+0x2e8>)
 800109c:	2107      	movs	r1, #7
 800109e:	2001      	movs	r0, #1
 80010a0:	f006 fe02 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80010a4:	4a2c      	ldr	r2, [pc, #176]	; (8001158 <printTemplate+0x2d8>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	2002      	movs	r0, #2
 80010aa:	f006 fdfd 	bl	8007ca8 <lcd_print>
}
 80010ae:	e02e      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 4) {
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d114      	bne.n	80010e0 <printTemplate+0x260>
			lcd_clear();
 80010b6:	f006 fe23 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f007 fb4a 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c0:	4a28      	ldr	r2, [pc, #160]	; (8001164 <printTemplate+0x2e4>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	2001      	movs	r0, #1
 80010c6:	f006 fdef 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <printTemplate+0x2e8>)
 80010cc:	2107      	movs	r1, #7
 80010ce:	2001      	movs	r0, #1
 80010d0:	f006 fdea 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <printTemplate+0x2dc>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	2002      	movs	r0, #2
 80010da:	f006 fde5 	bl	8007ca8 <lcd_print>
}
 80010de:	e016      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 5) {
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d113      	bne.n	800110e <printTemplate+0x28e>
			lcd_clear();
 80010e6:	f006 fe0b 	bl	8007d00 <lcd_clear>
			HAL_Delay(100);
 80010ea:	2064      	movs	r0, #100	; 0x64
 80010ec:	f007 fb32 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <printTemplate+0x2e4>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	2001      	movs	r0, #1
 80010f6:	f006 fdd7 	bl	8007ca8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010fa:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <printTemplate+0x2e8>)
 80010fc:	2107      	movs	r1, #7
 80010fe:	2001      	movs	r0, #1
 8001100:	f006 fdd2 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001104:	4a16      	ldr	r2, [pc, #88]	; (8001160 <printTemplate+0x2e0>)
 8001106:	2101      	movs	r1, #1
 8001108:	2002      	movs	r0, #2
 800110a:	f006 fdcd 	bl	8007ca8 <lcd_print>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	0800cf68 	.word	0x0800cf68
 800111c:	0800cf70 	.word	0x0800cf70
 8001120:	0800cf74 	.word	0x0800cf74
 8001124:	0800cf78 	.word	0x0800cf78
 8001128:	0800cf7c 	.word	0x0800cf7c
 800112c:	0800cf80 	.word	0x0800cf80
 8001130:	0800cf84 	.word	0x0800cf84
 8001134:	0800cf88 	.word	0x0800cf88
 8001138:	0800cf8c 	.word	0x0800cf8c
 800113c:	0800cf90 	.word	0x0800cf90
 8001140:	0800cf94 	.word	0x0800cf94
 8001144:	20000190 	.word	0x20000190
 8001148:	0800cf98 	.word	0x0800cf98
 800114c:	2000019c 	.word	0x2000019c
 8001150:	0800cfa0 	.word	0x0800cfa0
 8001154:	0800cfb4 	.word	0x0800cfb4
 8001158:	0800cfc8 	.word	0x0800cfc8
 800115c:	0800cfdc 	.word	0x0800cfdc
 8001160:	0800cff0 	.word	0x0800cff0
 8001164:	0800d004 	.word	0x0800d004
 8001168:	200001b0 	.word	0x200001b0

0800116c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001170:	f3bf 8f4f 	dsb	sy
}
 8001174:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <__NVIC_SystemReset+0x24>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800117e:	4904      	ldr	r1, [pc, #16]	; (8001190 <__NVIC_SystemReset+0x24>)
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_SystemReset+0x28>)
 8001182:	4313      	orrs	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001186:	f3bf 8f4f 	dsb	sy
}
 800118a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <__NVIC_SystemReset+0x20>
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	05fa0004 	.word	0x05fa0004

08001198 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b092      	sub	sp, #72	; 0x48
 800119c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800119e:	2101      	movs	r1, #1
 80011a0:	488e      	ldr	r0, [pc, #568]	; (80013dc <menu+0x244>)
 80011a2:	f008 f8a7 	bl	80092f4 <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 808e 	bne.w	80012ca <menu+0x132>
 80011ae:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <menu+0x248>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8086 	beq.w	80012ca <menu+0x132>
		menuSayac = menuSayac+1;
 80011be:	4b89      	ldr	r3, [pc, #548]	; (80013e4 <menu+0x24c>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b87      	ldr	r3, [pc, #540]	; (80013e4 <menu+0x24c>)
 80011c8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80011ca:	4b86      	ldr	r3, [pc, #536]	; (80013e4 <menu+0x24c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b24      	cmp	r3, #36	; 0x24
 80011d0:	d102      	bne.n	80011d8 <menu+0x40>
			menuSayac = 1;
 80011d2:	4b84      	ldr	r3, [pc, #528]	; (80013e4 <menu+0x24c>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80011d8:	4b82      	ldr	r3, [pc, #520]	; (80013e4 <menu+0x24c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b12      	cmp	r3, #18
 80011de:	d106      	bne.n	80011ee <menu+0x56>
 80011e0:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <menu+0x250>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <menu+0x56>
			menuSayac = 21;
 80011e8:	4b7e      	ldr	r3, [pc, #504]	; (80013e4 <menu+0x24c>)
 80011ea:	2215      	movs	r2, #21
 80011ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80011ee:	4b7d      	ldr	r3, [pc, #500]	; (80013e4 <menu+0x24c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d106      	bne.n	8001204 <menu+0x6c>
 80011f6:	4b7d      	ldr	r3, [pc, #500]	; (80013ec <menu+0x254>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <menu+0x6c>
			menuSayac = 16;
 80011fe:	4b79      	ldr	r3, [pc, #484]	; (80013e4 <menu+0x24c>)
 8001200:	2210      	movs	r2, #16
 8001202:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001204:	4b77      	ldr	r3, [pc, #476]	; (80013e4 <menu+0x24c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b0d      	cmp	r3, #13
 800120a:	d106      	bne.n	800121a <menu+0x82>
 800120c:	4b77      	ldr	r3, [pc, #476]	; (80013ec <menu+0x254>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d102      	bne.n	800121a <menu+0x82>
			menuSayac = 16;
 8001214:	4b73      	ldr	r3, [pc, #460]	; (80013e4 <menu+0x24c>)
 8001216:	2210      	movs	r2, #16
 8001218:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800121a:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <menu+0x24c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b09      	cmp	r3, #9
 8001220:	d106      	bne.n	8001230 <menu+0x98>
 8001222:	4b72      	ldr	r3, [pc, #456]	; (80013ec <menu+0x254>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d102      	bne.n	8001230 <menu+0x98>
			menuSayac = 13;
 800122a:	4b6e      	ldr	r3, [pc, #440]	; (80013e4 <menu+0x24c>)
 800122c:	220d      	movs	r2, #13
 800122e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001230:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <menu+0x24c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b0a      	cmp	r3, #10
 8001236:	d10a      	bne.n	800124e <menu+0xb6>
 8001238:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <menu+0x258>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d003      	beq.n	8001248 <menu+0xb0>
 8001240:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <menu+0x258>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d102      	bne.n	800124e <menu+0xb6>
			menuSayac = 11;
 8001248:	4b66      	ldr	r3, [pc, #408]	; (80013e4 <menu+0x24c>)
 800124a:	220b      	movs	r2, #11
 800124c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800124e:	4b65      	ldr	r3, [pc, #404]	; (80013e4 <menu+0x24c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d10e      	bne.n	8001274 <menu+0xdc>
 8001256:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <menu+0x25c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d003      	beq.n	8001266 <menu+0xce>
 800125e:	4b65      	ldr	r3, [pc, #404]	; (80013f4 <menu+0x25c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d106      	bne.n	8001274 <menu+0xdc>
 8001266:	4b61      	ldr	r3, [pc, #388]	; (80013ec <menu+0x254>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <menu+0xdc>
			menuSayac = 16;
 800126e:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <menu+0x24c>)
 8001270:	2210      	movs	r2, #16
 8001272:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001274:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <menu+0x24c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b0c      	cmp	r3, #12
 800127a:	d10e      	bne.n	800129a <menu+0x102>
 800127c:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <menu+0x25c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d003      	beq.n	800128c <menu+0xf4>
 8001284:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <menu+0x25c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d106      	bne.n	800129a <menu+0x102>
 800128c:	4b57      	ldr	r3, [pc, #348]	; (80013ec <menu+0x254>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d102      	bne.n	800129a <menu+0x102>
			menuSayac = 13;
 8001294:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <menu+0x24c>)
 8001296:	220d      	movs	r2, #13
 8001298:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800129a:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <menu+0x24c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	d106      	bne.n	80012b0 <menu+0x118>
 80012a2:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <menu+0x260>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d102      	bne.n	80012b0 <menu+0x118>
			menuSayac = 16;
 80012aa:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <menu+0x24c>)
 80012ac:	2210      	movs	r2, #16
 80012ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80012b0:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <menu+0x24c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b18      	cmp	r3, #24
 80012b6:	d106      	bne.n	80012c6 <menu+0x12e>
 80012b8:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <menu+0x250>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <menu+0x12e>
			menuSayac = 26;
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <menu+0x24c>)
 80012c2:	221a      	movs	r2, #26
 80012c4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012c6:	f003 fbff 	bl	8004ac8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012ca:	2108      	movs	r1, #8
 80012cc:	484b      	ldr	r0, [pc, #300]	; (80013fc <menu+0x264>)
 80012ce:	f008 f811 	bl	80092f4 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d175      	bne.n	80013c4 <menu+0x22c>
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <menu+0x248>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d06e      	beq.n	80013c4 <menu+0x22c>
		if (menuSayac <= 1) {
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <menu+0x24c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d802      	bhi.n	80012f4 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80012ee:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <menu+0x24c>)
 80012f0:	2224      	movs	r2, #36	; 0x24
 80012f2:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80012f4:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <menu+0x24c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <menu+0x24c>)
 80012fe:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001300:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <menu+0x24c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b14      	cmp	r3, #20
 8001306:	d106      	bne.n	8001316 <menu+0x17e>
 8001308:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <menu+0x250>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <menu+0x17e>
			menuSayac = 17;
 8001310:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <menu+0x24c>)
 8001312:	2211      	movs	r2, #17
 8001314:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001316:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <menu+0x24c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	d106      	bne.n	800132c <menu+0x194>
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <menu+0x254>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <menu+0x194>
			menuSayac = 7;
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <menu+0x24c>)
 8001328:	2207      	movs	r2, #7
 800132a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <menu+0x24c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d106      	bne.n	8001342 <menu+0x1aa>
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <menu+0x254>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d102      	bne.n	8001342 <menu+0x1aa>
			menuSayac = 12;
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <menu+0x24c>)
 800133e:	220c      	movs	r2, #12
 8001340:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <menu+0x24c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d106      	bne.n	8001358 <menu+0x1c0>
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <menu+0x254>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d102      	bne.n	8001358 <menu+0x1c0>
			menuSayac = 8;
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <menu+0x24c>)
 8001354:	2208      	movs	r2, #8
 8001356:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <menu+0x24c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d10a      	bne.n	8001376 <menu+0x1de>
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <menu+0x258>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d003      	beq.n	8001370 <menu+0x1d8>
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <menu+0x258>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d102      	bne.n	8001376 <menu+0x1de>
			menuSayac = 9;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <menu+0x24c>)
 8001372:	2209      	movs	r2, #9
 8001374:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <menu+0x24c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b0c      	cmp	r3, #12
 800137c:	d10a      	bne.n	8001394 <menu+0x1fc>
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <menu+0x25c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d003      	beq.n	800138e <menu+0x1f6>
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <menu+0x25c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d102      	bne.n	8001394 <menu+0x1fc>
			menuSayac = 11;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <menu+0x24c>)
 8001390:	220b      	movs	r2, #11
 8001392:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <menu+0x24c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d106      	bne.n	80013aa <menu+0x212>
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <menu+0x260>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d102      	bne.n	80013aa <menu+0x212>
			menuSayac = 14;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <menu+0x24c>)
 80013a6:	220e      	movs	r2, #14
 80013a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <menu+0x24c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b19      	cmp	r3, #25
 80013b0:	d106      	bne.n	80013c0 <menu+0x228>
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <menu+0x250>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <menu+0x228>
			menuSayac = 23;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <menu+0x24c>)
 80013bc:	2217      	movs	r2, #23
 80013be:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013c0:	f003 fb82 	bl	8004ac8 <bekle>
	}

	if (menuSayac == 0) {
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <menu+0x24c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d133      	bne.n	8001434 <menu+0x29c>
		if(dilSecim == 0) {
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <menu+0x268>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d121      	bne.n	8001418 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <menu+0x26c>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	2001      	movs	r0, #1
 80013da:	e015      	b.n	8001408 <menu+0x270>
 80013dc:	40010800 	.word	0x40010800
 80013e0:	2000024f 	.word	0x2000024f
 80013e4:	20000220 	.word	0x20000220
 80013e8:	2000022f 	.word	0x2000022f
 80013ec:	20000228 	.word	0x20000228
 80013f0:	20000229 	.word	0x20000229
 80013f4:	2000022a 	.word	0x2000022a
 80013f8:	2000022b 	.word	0x2000022b
 80013fc:	40011000 	.word	0x40011000
 8001400:	20000241 	.word	0x20000241
 8001404:	0800d00c 	.word	0x0800d00c
 8001408:	f006 fc4e 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800140c:	4a94      	ldr	r2, [pc, #592]	; (8001660 <menu+0x4c8>)
 800140e:	2101      	movs	r1, #1
 8001410:	2002      	movs	r0, #2
 8001412:	f006 fc49 	bl	8007ca8 <lcd_print>
 8001416:	e00d      	b.n	8001434 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001418:	4b92      	ldr	r3, [pc, #584]	; (8001664 <menu+0x4cc>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d109      	bne.n	8001434 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001420:	4a91      	ldr	r2, [pc, #580]	; (8001668 <menu+0x4d0>)
 8001422:	2101      	movs	r1, #1
 8001424:	2001      	movs	r0, #1
 8001426:	f006 fc3f 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800142a:	4a90      	ldr	r2, [pc, #576]	; (800166c <menu+0x4d4>)
 800142c:	2101      	movs	r1, #1
 800142e:	2002      	movs	r0, #2
 8001430:	f006 fc3a 	bl	8007ca8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001434:	4b8e      	ldr	r3, [pc, #568]	; (8001670 <menu+0x4d8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	f040 82b5 	bne.w	80019a8 <menu+0x810>
		if(dilSecim == 0) {
 800143e:	4b89      	ldr	r3, [pc, #548]	; (8001664 <menu+0x4cc>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001446:	4a8b      	ldr	r2, [pc, #556]	; (8001674 <menu+0x4dc>)
 8001448:	2101      	movs	r1, #1
 800144a:	2001      	movs	r0, #1
 800144c:	f006 fc2c 	bl	8007ca8 <lcd_print>
 8001450:	e008      	b.n	8001464 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001452:	4b84      	ldr	r3, [pc, #528]	; (8001664 <menu+0x4cc>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d104      	bne.n	8001464 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800145a:	4a87      	ldr	r2, [pc, #540]	; (8001678 <menu+0x4e0>)
 800145c:	2101      	movs	r1, #1
 800145e:	2001      	movs	r0, #1
 8001460:	f006 fc22 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001464:	4b85      	ldr	r3, [pc, #532]	; (800167c <menu+0x4e4>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d123      	bne.n	80014b4 <menu+0x31c>
			if(dilSecim == 0) {
 800146c:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <menu+0x4cc>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001474:	4a82      	ldr	r2, [pc, #520]	; (8001680 <menu+0x4e8>)
 8001476:	2101      	movs	r1, #1
 8001478:	2002      	movs	r0, #2
 800147a:	f006 fc15 	bl	8007ca8 <lcd_print>
 800147e:	e008      	b.n	8001492 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001480:	4b78      	ldr	r3, [pc, #480]	; (8001664 <menu+0x4cc>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d104      	bne.n	8001492 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001488:	4a7e      	ldr	r2, [pc, #504]	; (8001684 <menu+0x4ec>)
 800148a:	2101      	movs	r1, #1
 800148c:	2002      	movs	r0, #2
 800148e:	f006 fc0b 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001492:	4a7d      	ldr	r2, [pc, #500]	; (8001688 <menu+0x4f0>)
 8001494:	210f      	movs	r1, #15
 8001496:	2002      	movs	r0, #2
 8001498:	f006 fc06 	bl	8007ca8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800149c:	4b7b      	ldr	r3, [pc, #492]	; (800168c <menu+0x4f4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	220a      	movs	r2, #10
 80014a2:	497b      	ldr	r1, [pc, #492]	; (8001690 <menu+0x4f8>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00a ff51 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 80014aa:	4a79      	ldr	r2, [pc, #484]	; (8001690 <menu+0x4f8>)
 80014ac:	210e      	movs	r1, #14
 80014ae:	2002      	movs	r0, #2
 80014b0:	f006 fbfa 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80014b4:	4b71      	ldr	r3, [pc, #452]	; (800167c <menu+0x4e4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d123      	bne.n	8001504 <menu+0x36c>
			if(dilSecim == 0) {
 80014bc:	4b69      	ldr	r3, [pc, #420]	; (8001664 <menu+0x4cc>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80014c4:	4a73      	ldr	r2, [pc, #460]	; (8001694 <menu+0x4fc>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	2002      	movs	r0, #2
 80014ca:	f006 fbed 	bl	8007ca8 <lcd_print>
 80014ce:	e008      	b.n	80014e2 <menu+0x34a>
			} else if(dilSecim == 1) {
 80014d0:	4b64      	ldr	r3, [pc, #400]	; (8001664 <menu+0x4cc>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d104      	bne.n	80014e2 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80014d8:	4a6f      	ldr	r2, [pc, #444]	; (8001698 <menu+0x500>)
 80014da:	2101      	movs	r1, #1
 80014dc:	2002      	movs	r0, #2
 80014de:	f006 fbe3 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014e2:	4a6e      	ldr	r2, [pc, #440]	; (800169c <menu+0x504>)
 80014e4:	210f      	movs	r1, #15
 80014e6:	2002      	movs	r0, #2
 80014e8:	f006 fbde 	bl	8007ca8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80014ec:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <menu+0x508>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	220a      	movs	r2, #10
 80014f2:	4967      	ldr	r1, [pc, #412]	; (8001690 <menu+0x4f8>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00a ff29 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 80014fa:	4a65      	ldr	r2, [pc, #404]	; (8001690 <menu+0x4f8>)
 80014fc:	210e      	movs	r1, #14
 80014fe:	2002      	movs	r0, #2
 8001500:	f006 fbd2 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001504:	4b5d      	ldr	r3, [pc, #372]	; (800167c <menu+0x4e4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <menu+0x3bc>
			if(dilSecim == 0) {
 800150c:	4b55      	ldr	r3, [pc, #340]	; (8001664 <menu+0x4cc>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001514:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <menu+0x50c>)
 8001516:	2101      	movs	r1, #1
 8001518:	2002      	movs	r0, #2
 800151a:	f006 fbc5 	bl	8007ca8 <lcd_print>
 800151e:	e008      	b.n	8001532 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <menu+0x4cc>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d104      	bne.n	8001532 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001528:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <menu+0x510>)
 800152a:	2101      	movs	r1, #1
 800152c:	2002      	movs	r0, #2
 800152e:	f006 fbbb 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001532:	4a5a      	ldr	r2, [pc, #360]	; (800169c <menu+0x504>)
 8001534:	210f      	movs	r1, #15
 8001536:	2002      	movs	r0, #2
 8001538:	f006 fbb6 	bl	8007ca8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <menu+0x514>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	220a      	movs	r2, #10
 8001542:	4953      	ldr	r1, [pc, #332]	; (8001690 <menu+0x4f8>)
 8001544:	4618      	mov	r0, r3
 8001546:	f00a ff01 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 800154a:	4a51      	ldr	r2, [pc, #324]	; (8001690 <menu+0x4f8>)
 800154c:	210e      	movs	r1, #14
 800154e:	2002      	movs	r0, #2
 8001550:	f006 fbaa 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001554:	4b49      	ldr	r3, [pc, #292]	; (800167c <menu+0x4e4>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d123      	bne.n	80015a4 <menu+0x40c>
			if(dilSecim == 0) {
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <menu+0x4cc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d105      	bne.n	8001570 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001564:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <menu+0x518>)
 8001566:	2101      	movs	r1, #1
 8001568:	2002      	movs	r0, #2
 800156a:	f006 fb9d 	bl	8007ca8 <lcd_print>
 800156e:	e008      	b.n	8001582 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001570:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <menu+0x4cc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d104      	bne.n	8001582 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001578:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <menu+0x51c>)
 800157a:	2101      	movs	r1, #1
 800157c:	2002      	movs	r0, #2
 800157e:	f006 fb93 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001582:	4a46      	ldr	r2, [pc, #280]	; (800169c <menu+0x504>)
 8001584:	210f      	movs	r1, #15
 8001586:	2002      	movs	r0, #2
 8001588:	f006 fb8e 	bl	8007ca8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <menu+0x520>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	220a      	movs	r2, #10
 8001592:	493f      	ldr	r1, [pc, #252]	; (8001690 <menu+0x4f8>)
 8001594:	4618      	mov	r0, r3
 8001596:	f00a fed9 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 800159a:	4a3d      	ldr	r2, [pc, #244]	; (8001690 <menu+0x4f8>)
 800159c:	210e      	movs	r1, #14
 800159e:	2002      	movs	r0, #2
 80015a0:	f006 fb82 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80015a4:	4b35      	ldr	r3, [pc, #212]	; (800167c <menu+0x4e4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d123      	bne.n	80015f4 <menu+0x45c>
			if(dilSecim == 0) {
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <menu+0x4cc>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80015b4:	4a41      	ldr	r2, [pc, #260]	; (80016bc <menu+0x524>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	2002      	movs	r0, #2
 80015ba:	f006 fb75 	bl	8007ca8 <lcd_print>
 80015be:	e008      	b.n	80015d2 <menu+0x43a>
			} else if(dilSecim == 1) {
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <menu+0x4cc>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d104      	bne.n	80015d2 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80015c8:	4a3d      	ldr	r2, [pc, #244]	; (80016c0 <menu+0x528>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	2002      	movs	r0, #2
 80015ce:	f006 fb6b 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <menu+0x504>)
 80015d4:	210f      	movs	r1, #15
 80015d6:	2002      	movs	r0, #2
 80015d8:	f006 fb66 	bl	8007ca8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <menu+0x52c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	220a      	movs	r2, #10
 80015e2:	492b      	ldr	r1, [pc, #172]	; (8001690 <menu+0x4f8>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00a feb1 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 80015ea:	4a29      	ldr	r2, [pc, #164]	; (8001690 <menu+0x4f8>)
 80015ec:	210e      	movs	r1, #14
 80015ee:	2002      	movs	r0, #2
 80015f0:	f006 fb5a 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <menu+0x4e4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d123      	bne.n	8001644 <menu+0x4ac>
			if(dilSecim == 0) {
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <menu+0x4cc>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d105      	bne.n	8001610 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001604:	4a30      	ldr	r2, [pc, #192]	; (80016c8 <menu+0x530>)
 8001606:	2101      	movs	r1, #1
 8001608:	2002      	movs	r0, #2
 800160a:	f006 fb4d 	bl	8007ca8 <lcd_print>
 800160e:	e008      	b.n	8001622 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <menu+0x4cc>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d104      	bne.n	8001622 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001618:	4a2c      	ldr	r2, [pc, #176]	; (80016cc <menu+0x534>)
 800161a:	2101      	movs	r1, #1
 800161c:	2002      	movs	r0, #2
 800161e:	f006 fb43 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <menu+0x504>)
 8001624:	210f      	movs	r1, #15
 8001626:	2002      	movs	r0, #2
 8001628:	f006 fb3e 	bl	8007ca8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <menu+0x538>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	220a      	movs	r2, #10
 8001632:	4917      	ldr	r1, [pc, #92]	; (8001690 <menu+0x4f8>)
 8001634:	4618      	mov	r0, r3
 8001636:	f00a fe89 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <menu+0x4f8>)
 800163c:	210e      	movs	r1, #14
 800163e:	2002      	movs	r0, #2
 8001640:	f006 fb32 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <menu+0x4e4>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b06      	cmp	r3, #6
 800164a:	d15f      	bne.n	800170c <menu+0x574>
			if(dilSecim == 0) {
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <menu+0x4cc>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d141      	bne.n	80016d8 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <menu+0x53c>)
 8001656:	2101      	movs	r1, #1
 8001658:	2002      	movs	r0, #2
 800165a:	f006 fb25 	bl	8007ca8 <lcd_print>
 800165e:	e044      	b.n	80016ea <menu+0x552>
 8001660:	0800d020 	.word	0x0800d020
 8001664:	20000241 	.word	0x20000241
 8001668:	0800d034 	.word	0x0800d034
 800166c:	0800d048 	.word	0x0800d048
 8001670:	20000220 	.word	0x20000220
 8001674:	0800d05c 	.word	0x0800d05c
 8001678:	0800d070 	.word	0x0800d070
 800167c:	20000222 	.word	0x20000222
 8001680:	0800d084 	.word	0x0800d084
 8001684:	0800d094 	.word	0x0800d094
 8001688:	0800d0a4 	.word	0x0800d0a4
 800168c:	20000242 	.word	0x20000242
 8001690:	20000188 	.word	0x20000188
 8001694:	0800d0a8 	.word	0x0800d0a8
 8001698:	0800d0b8 	.word	0x0800d0b8
 800169c:	0800d0c8 	.word	0x0800d0c8
 80016a0:	20000243 	.word	0x20000243
 80016a4:	0800d0cc 	.word	0x0800d0cc
 80016a8:	0800d0dc 	.word	0x0800d0dc
 80016ac:	20000244 	.word	0x20000244
 80016b0:	0800d0ec 	.word	0x0800d0ec
 80016b4:	0800d0fc 	.word	0x0800d0fc
 80016b8:	20000245 	.word	0x20000245
 80016bc:	0800d10c 	.word	0x0800d10c
 80016c0:	0800d11c 	.word	0x0800d11c
 80016c4:	20000246 	.word	0x20000246
 80016c8:	0800d12c 	.word	0x0800d12c
 80016cc:	0800d13c 	.word	0x0800d13c
 80016d0:	20000247 	.word	0x20000247
 80016d4:	0800d14c 	.word	0x0800d14c
			} else if(dilSecim == 1) {
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <menu+0x680>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d104      	bne.n	80016ea <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80016e0:	4a4e      	ldr	r2, [pc, #312]	; (800181c <menu+0x684>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	2002      	movs	r0, #2
 80016e6:	f006 fadf 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016ea:	4a4d      	ldr	r2, [pc, #308]	; (8001820 <menu+0x688>)
 80016ec:	210f      	movs	r1, #15
 80016ee:	2002      	movs	r0, #2
 80016f0:	f006 fada 	bl	8007ca8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <menu+0x68c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	220a      	movs	r2, #10
 80016fa:	494b      	ldr	r1, [pc, #300]	; (8001828 <menu+0x690>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00a fe25 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 8001702:	4a49      	ldr	r2, [pc, #292]	; (8001828 <menu+0x690>)
 8001704:	210e      	movs	r1, #14
 8001706:	2002      	movs	r0, #2
 8001708:	f006 face 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800170c:	4b47      	ldr	r3, [pc, #284]	; (800182c <menu+0x694>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b07      	cmp	r3, #7
 8001712:	d123      	bne.n	800175c <menu+0x5c4>
			if(dilSecim == 0) {
 8001714:	4b40      	ldr	r3, [pc, #256]	; (8001818 <menu+0x680>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 800171c:	4a44      	ldr	r2, [pc, #272]	; (8001830 <menu+0x698>)
 800171e:	2101      	movs	r1, #1
 8001720:	2002      	movs	r0, #2
 8001722:	f006 fac1 	bl	8007ca8 <lcd_print>
 8001726:	e008      	b.n	800173a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001728:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <menu+0x680>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d104      	bne.n	800173a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001730:	4a40      	ldr	r2, [pc, #256]	; (8001834 <menu+0x69c>)
 8001732:	2101      	movs	r1, #1
 8001734:	2002      	movs	r0, #2
 8001736:	f006 fab7 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800173a:	4a39      	ldr	r2, [pc, #228]	; (8001820 <menu+0x688>)
 800173c:	210f      	movs	r1, #15
 800173e:	2002      	movs	r0, #2
 8001740:	f006 fab2 	bl	8007ca8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001744:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <menu+0x6a0>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	220a      	movs	r2, #10
 800174a:	4937      	ldr	r1, [pc, #220]	; (8001828 <menu+0x690>)
 800174c:	4618      	mov	r0, r3
 800174e:	f00a fdfd 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 8001752:	4a35      	ldr	r2, [pc, #212]	; (8001828 <menu+0x690>)
 8001754:	210e      	movs	r1, #14
 8001756:	2002      	movs	r0, #2
 8001758:	f006 faa6 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <menu+0x694>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d123      	bne.n	80017ac <menu+0x614>
			if(dilSecim == 0) {
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <menu+0x680>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 800176c:	4a33      	ldr	r2, [pc, #204]	; (800183c <menu+0x6a4>)
 800176e:	2101      	movs	r1, #1
 8001770:	2002      	movs	r0, #2
 8001772:	f006 fa99 	bl	8007ca8 <lcd_print>
 8001776:	e008      	b.n	800178a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <menu+0x680>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d104      	bne.n	800178a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001780:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <menu+0x6a8>)
 8001782:	2101      	movs	r1, #1
 8001784:	2002      	movs	r0, #2
 8001786:	f006 fa8f 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800178a:	4a25      	ldr	r2, [pc, #148]	; (8001820 <menu+0x688>)
 800178c:	210f      	movs	r1, #15
 800178e:	2002      	movs	r0, #2
 8001790:	f006 fa8a 	bl	8007ca8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <menu+0x6ac>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	220a      	movs	r2, #10
 800179a:	4923      	ldr	r1, [pc, #140]	; (8001828 <menu+0x690>)
 800179c:	4618      	mov	r0, r3
 800179e:	f00a fdd5 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 80017a2:	4a21      	ldr	r2, [pc, #132]	; (8001828 <menu+0x690>)
 80017a4:	210e      	movs	r1, #14
 80017a6:	2002      	movs	r0, #2
 80017a8:	f006 fa7e 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <menu+0x694>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d123      	bne.n	80017fc <menu+0x664>
			if(dilSecim == 0) {
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <menu+0x680>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d105      	bne.n	80017c8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <menu+0x6b0>)
 80017be:	2101      	movs	r1, #1
 80017c0:	2002      	movs	r0, #2
 80017c2:	f006 fa71 	bl	8007ca8 <lcd_print>
 80017c6:	e008      	b.n	80017da <menu+0x642>
			} else if(dilSecim == 1) {
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <menu+0x680>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d104      	bne.n	80017da <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80017d0:	4a1e      	ldr	r2, [pc, #120]	; (800184c <menu+0x6b4>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	2002      	movs	r0, #2
 80017d6:	f006 fa67 	bl	8007ca8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <menu+0x6b8>)
 80017dc:	2110      	movs	r1, #16
 80017de:	2002      	movs	r0, #2
 80017e0:	f006 fa62 	bl	8007ca8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <menu+0x6bc>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	220a      	movs	r2, #10
 80017ea:	490f      	ldr	r1, [pc, #60]	; (8001828 <menu+0x690>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00a fdad 	bl	800c34c <itoa>
			lcd_print(2, 15, snum);
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <menu+0x690>)
 80017f4:	210f      	movs	r1, #15
 80017f6:	2002      	movs	r0, #2
 80017f8:	f006 fa56 	bl	8007ca8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <menu+0x694>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b0a      	cmp	r3, #10
 8001802:	d134      	bne.n	800186e <menu+0x6d6>
			if(dilSecim == 0) {
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <menu+0x680>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d127      	bne.n	800185c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <menu+0x6c0>)
 800180e:	2101      	movs	r1, #1
 8001810:	2002      	movs	r0, #2
 8001812:	f006 fa49 	bl	8007ca8 <lcd_print>
 8001816:	e02a      	b.n	800186e <menu+0x6d6>
 8001818:	20000241 	.word	0x20000241
 800181c:	0800d15c 	.word	0x0800d15c
 8001820:	0800d0c8 	.word	0x0800d0c8
 8001824:	20000248 	.word	0x20000248
 8001828:	20000188 	.word	0x20000188
 800182c:	20000222 	.word	0x20000222
 8001830:	0800d16c 	.word	0x0800d16c
 8001834:	0800d17c 	.word	0x0800d17c
 8001838:	20000249 	.word	0x20000249
 800183c:	0800d18c 	.word	0x0800d18c
 8001840:	0800d19c 	.word	0x0800d19c
 8001844:	2000024a 	.word	0x2000024a
 8001848:	0800d1ac 	.word	0x0800d1ac
 800184c:	0800d1bc 	.word	0x0800d1bc
 8001850:	0800d1cc 	.word	0x0800d1cc
 8001854:	2000024b 	.word	0x2000024b
 8001858:	0800d1d0 	.word	0x0800d1d0
			} else if(dilSecim == 1) {
 800185c:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <menu+0x8d0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d104      	bne.n	800186e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001864:	4a81      	ldr	r2, [pc, #516]	; (8001a6c <menu+0x8d4>)
 8001866:	2101      	movs	r1, #1
 8001868:	2002      	movs	r0, #2
 800186a:	f006 fa1d 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800186e:	2102      	movs	r1, #2
 8001870:	487f      	ldr	r0, [pc, #508]	; (8001a70 <menu+0x8d8>)
 8001872:	f007 fd3f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b01      	cmp	r3, #1
 800187a:	d119      	bne.n	80018b0 <menu+0x718>
 800187c:	4b7d      	ldr	r3, [pc, #500]	; (8001a74 <menu+0x8dc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d012      	beq.n	80018b0 <menu+0x718>
 800188a:	4b7b      	ldr	r3, [pc, #492]	; (8001a78 <menu+0x8e0>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10e      	bne.n	80018b0 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001892:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <menu+0x8e4>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <menu+0x8e4>)
 800189c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800189e:	4b77      	ldr	r3, [pc, #476]	; (8001a7c <menu+0x8e4>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	d902      	bls.n	80018ac <menu+0x714>
				hataGostermeSirasi = 0;
 80018a6:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <menu+0x8e4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018ac:	f003 f90c 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018b0:	2104      	movs	r1, #4
 80018b2:	486f      	ldr	r0, [pc, #444]	; (8001a70 <menu+0x8d8>)
 80018b4:	f007 fd1e 	bl	80092f4 <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d119      	bne.n	80018f2 <menu+0x75a>
 80018be:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <menu+0x8dc>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f083 0301 	eor.w	r3, r3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d012      	beq.n	80018f2 <menu+0x75a>
 80018cc:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <menu+0x8e0>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10e      	bne.n	80018f2 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80018d4:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <menu+0x8e4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	3b01      	subs	r3, #1
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <menu+0x8e4>)
 80018de:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80018e0:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <menu+0x8e4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b0b      	cmp	r3, #11
 80018e6:	d902      	bls.n	80018ee <menu+0x756>
	    		hataGostermeSirasi = 10;
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <menu+0x8e4>)
 80018ea:	220a      	movs	r2, #10
 80018ec:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80018ee:	f003 f8eb 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80018f2:	2108      	movs	r1, #8
 80018f4:	485e      	ldr	r0, [pc, #376]	; (8001a70 <menu+0x8d8>)
 80018f6:	f007 fcfd 	bl	80092f4 <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d153      	bne.n	80019a8 <menu+0x810>
 8001900:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <menu+0x8dc>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	f083 0301 	eor.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d04c      	beq.n	80019a8 <menu+0x810>
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <menu+0x8e4>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b0a      	cmp	r3, #10
 8001914:	d148      	bne.n	80019a8 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001916:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <menu+0x8e8>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	4b59      	ldr	r3, [pc, #356]	; (8001a84 <menu+0x8ec>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <menu+0x8f0>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <menu+0x8ec>)
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001932:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <menu+0x8f4>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <menu+0x8ec>)
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <menu+0x8f8>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <menu+0x8ec>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800194e:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <menu+0x8fc>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <menu+0x8ec>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 800195c:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <menu+0x900>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <menu+0x8ec>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800196a:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <menu+0x904>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <menu+0x8ec>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001978:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <menu+0x908>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <menu+0x8ec>)
 8001980:	2200      	movs	r2, #0
 8001982:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <menu+0x90c>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <menu+0x8ec>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001994:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <menu+0x910>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <menu+0x8ec>)
 800199c:	2200      	movs	r2, #0
 800199e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <menu+0x914>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <menu+0x918>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	f040 80fc 	bne.w	8001baa <menu+0xa12>
		if(dilSecim == 0) {
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <menu+0x8d0>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80019ba:	4a3e      	ldr	r2, [pc, #248]	; (8001ab4 <menu+0x91c>)
 80019bc:	2101      	movs	r1, #1
 80019be:	2001      	movs	r0, #1
 80019c0:	f006 f972 	bl	8007ca8 <lcd_print>
 80019c4:	e008      	b.n	80019d8 <menu+0x840>
		} else if(dilSecim == 1) {
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <menu+0x8d0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d104      	bne.n	80019d8 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80019ce:	4a3a      	ldr	r2, [pc, #232]	; (8001ab8 <menu+0x920>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	2001      	movs	r0, #1
 80019d4:	f006 f968 	bl	8007ca8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <menu+0x8e0>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d003      	beq.n	80019e8 <menu+0x850>
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <menu+0x8e0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d112      	bne.n	8001a0e <menu+0x876>
			if(dilSecim == 0) {
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <menu+0x8d0>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80019f0:	4a32      	ldr	r2, [pc, #200]	; (8001abc <menu+0x924>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	2002      	movs	r0, #2
 80019f6:	f006 f957 	bl	8007ca8 <lcd_print>
 80019fa:	e008      	b.n	8001a0e <menu+0x876>
			} else if(dilSecim == 1) {
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <menu+0x8d0>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d104      	bne.n	8001a0e <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001a04:	4a2e      	ldr	r2, [pc, #184]	; (8001ac0 <menu+0x928>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	2002      	movs	r0, #2
 8001a0a:	f006 f94d 	bl	8007ca8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <menu+0x92c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <menu+0x8ac>
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <menu+0x8e0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d112      	bne.n	8001a44 <menu+0x8ac>
			if(dilSecim == 0) {
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <menu+0x8d0>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001a26:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <menu+0x930>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f006 f93c 	bl	8007ca8 <lcd_print>
 8001a30:	e008      	b.n	8001a44 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <menu+0x8d0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d104      	bne.n	8001a44 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001a3a:	4a24      	ldr	r2, [pc, #144]	; (8001acc <menu+0x934>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f006 f932 	bl	8007ca8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <menu+0x92c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d14c      	bne.n	8001ae6 <menu+0x94e>
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <menu+0x8e0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d148      	bne.n	8001ae6 <menu+0x94e>
			if(dilSecim == 0) {
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <menu+0x8d0>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d13b      	bne.n	8001ad4 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <menu+0x938>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2002      	movs	r0, #2
 8001a62:	f006 f921 	bl	8007ca8 <lcd_print>
 8001a66:	e03e      	b.n	8001ae6 <menu+0x94e>
 8001a68:	20000241 	.word	0x20000241
 8001a6c:	0800d1e4 	.word	0x0800d1e4
 8001a70:	40010800 	.word	0x40010800
 8001a74:	2000024f 	.word	0x2000024f
 8001a78:	2000022f 	.word	0x2000022f
 8001a7c:	20000222 	.word	0x20000222
 8001a80:	20000242 	.word	0x20000242
 8001a84:	20000118 	.word	0x20000118
 8001a88:	20000243 	.word	0x20000243
 8001a8c:	20000244 	.word	0x20000244
 8001a90:	20000245 	.word	0x20000245
 8001a94:	20000246 	.word	0x20000246
 8001a98:	20000247 	.word	0x20000247
 8001a9c:	20000248 	.word	0x20000248
 8001aa0:	20000249 	.word	0x20000249
 8001aa4:	2000024a 	.word	0x2000024a
 8001aa8:	2000024b 	.word	0x2000024b
 8001aac:	2000024c 	.word	0x2000024c
 8001ab0:	20000220 	.word	0x20000220
 8001ab4:	0800d1f8 	.word	0x0800d1f8
 8001ab8:	0800d20c 	.word	0x0800d20c
 8001abc:	0800d220 	.word	0x0800d220
 8001ac0:	0800d234 	.word	0x0800d234
 8001ac4:	20000221 	.word	0x20000221
 8001ac8:	0800d248 	.word	0x0800d248
 8001acc:	0800d258 	.word	0x0800d258
 8001ad0:	0800d268 	.word	0x0800d268
			} else if(dilSecim == 1) {
 8001ad4:	4b98      	ldr	r3, [pc, #608]	; (8001d38 <menu+0xba0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d104      	bne.n	8001ae6 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001adc:	4a97      	ldr	r2, [pc, #604]	; (8001d3c <menu+0xba4>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f006 f8e1 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	4895      	ldr	r0, [pc, #596]	; (8001d40 <menu+0xba8>)
 8001aea:	f007 fc03 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d119      	bne.n	8001b28 <menu+0x990>
 8001af4:	4b93      	ldr	r3, [pc, #588]	; (8001d44 <menu+0xbac>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d012      	beq.n	8001b28 <menu+0x990>
 8001b02:	4b91      	ldr	r3, [pc, #580]	; (8001d48 <menu+0xbb0>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10e      	bne.n	8001b28 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001b0a:	4b90      	ldr	r3, [pc, #576]	; (8001d4c <menu+0xbb4>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <menu+0xbb4>)
 8001b14:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b16:	4b8d      	ldr	r3, [pc, #564]	; (8001d4c <menu+0xbb4>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d902      	bls.n	8001b24 <menu+0x98c>
				calismaSekli = 0;
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <menu+0xbb4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b24:	f002 ffd0 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b28:	2104      	movs	r1, #4
 8001b2a:	4885      	ldr	r0, [pc, #532]	; (8001d40 <menu+0xba8>)
 8001b2c:	f007 fbe2 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d119      	bne.n	8001b6a <menu+0x9d2>
 8001b36:	4b83      	ldr	r3, [pc, #524]	; (8001d44 <menu+0xbac>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d012      	beq.n	8001b6a <menu+0x9d2>
 8001b44:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <menu+0xbb0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10e      	bne.n	8001b6a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001b4c:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <menu+0xbb4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <menu+0xbb4>)
 8001b56:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001b58:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <menu+0xbb4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <menu+0x9ce>
	    		calismaSekli = 1;
 8001b60:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <menu+0xbb4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b66:	f002 ffaf 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	4874      	ldr	r0, [pc, #464]	; (8001d40 <menu+0xba8>)
 8001b6e:	f007 fbc1 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d118      	bne.n	8001baa <menu+0xa12>
 8001b78:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <menu+0xbac>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d011      	beq.n	8001baa <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001b86:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <menu+0xbb4>)
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <menu+0xbb8>)
 8001b8c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <menu+0xbb4>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d106      	bne.n	8001ba4 <menu+0xa0c>
				altLimit = 1;
 8001b96:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <menu+0xbbc>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001b9c:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <menu+0xbbc>)
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <menu+0xbb8>)
 8001ba2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ba4:	4b6c      	ldr	r3, [pc, #432]	; (8001d58 <menu+0xbc0>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001baa:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <menu+0xbc4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	f040 8083 	bne.w	8001cba <menu+0xb22>
		if(dilSecim == 0) {
 8001bb4:	4b60      	ldr	r3, [pc, #384]	; (8001d38 <menu+0xba0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001bbc:	4a68      	ldr	r2, [pc, #416]	; (8001d60 <menu+0xbc8>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f006 f871 	bl	8007ca8 <lcd_print>
 8001bc6:	e008      	b.n	8001bda <menu+0xa42>
		} else if(dilSecim == 1) {
 8001bc8:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <menu+0xba0>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d104      	bne.n	8001bda <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001bd0:	4a64      	ldr	r2, [pc, #400]	; (8001d64 <menu+0xbcc>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f006 f867 	bl	8007ca8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <menu+0xbd0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <menu+0xa72>
			if(dilSecim == 0) {
 8001be2:	4b55      	ldr	r3, [pc, #340]	; (8001d38 <menu+0xba0>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001bea:	4a60      	ldr	r2, [pc, #384]	; (8001d6c <menu+0xbd4>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f006 f85a 	bl	8007ca8 <lcd_print>
 8001bf4:	e012      	b.n	8001c1c <menu+0xa84>
			} else if(dilSecim == 1) {
 8001bf6:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <menu+0xba0>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10e      	bne.n	8001c1c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001bfe:	4a5c      	ldr	r2, [pc, #368]	; (8001d70 <menu+0xbd8>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	2002      	movs	r0, #2
 8001c04:	f006 f850 	bl	8007ca8 <lcd_print>
 8001c08:	e008      	b.n	8001c1c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <menu+0xbd0>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d104      	bne.n	8001c1c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001c12:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <menu+0xbdc>)
 8001c14:	2101      	movs	r1, #1
 8001c16:	2002      	movs	r0, #2
 8001c18:	f006 f846 	bl	8007ca8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4848      	ldr	r0, [pc, #288]	; (8001d40 <menu+0xba8>)
 8001c20:	f007 fb68 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d115      	bne.n	8001c56 <menu+0xabe>
 8001c2a:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <menu+0xbac>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	f083 0301 	eor.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00e      	beq.n	8001c56 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001c38:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <menu+0xbd0>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <menu+0xbd0>)
 8001c42:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <menu+0xbd0>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d902      	bls.n	8001c52 <menu+0xaba>
				emniyetCercevesi = 0;
 8001c4c:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <menu+0xbd0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c52:	f002 ff39 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c56:	2104      	movs	r1, #4
 8001c58:	4839      	ldr	r0, [pc, #228]	; (8001d40 <menu+0xba8>)
 8001c5a:	f007 fb4b 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d115      	bne.n	8001c90 <menu+0xaf8>
 8001c64:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <menu+0xbac>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00e      	beq.n	8001c90 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <menu+0xbd0>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <menu+0xbd0>)
 8001c7c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <menu+0xbd0>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001c86:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <menu+0xbd0>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c8c:	f002 ff1c 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c90:	2108      	movs	r1, #8
 8001c92:	482b      	ldr	r0, [pc, #172]	; (8001d40 <menu+0xba8>)
 8001c94:	f007 fb2e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10d      	bne.n	8001cba <menu+0xb22>
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <menu+0xbac>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	f083 0301 	eor.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <menu+0xbd0>)
 8001cae:	781a      	ldrb	r2, [r3, #0]
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <menu+0xbb8>)
 8001cb2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <menu+0xbc0>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <menu+0xbc4>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	f040 80ba 	bne.w	8001e38 <menu+0xca0>
		if(dilSecim == 0) {
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <menu+0xba0>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <menu+0xbe0>)
 8001cce:	2101      	movs	r1, #1
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f005 ffe9 	bl	8007ca8 <lcd_print>
 8001cd6:	e008      	b.n	8001cea <menu+0xb52>
		} else if(dilSecim == 1) {
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <menu+0xba0>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d104      	bne.n	8001cea <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001ce0:	4a26      	ldr	r2, [pc, #152]	; (8001d7c <menu+0xbe4>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f005 ffdf 	bl	8007ca8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <menu+0xbe8>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d113      	bne.n	8001d1a <menu+0xb82>
			if(dilSecim == 0) {
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <menu+0xba0>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <menu+0xbd4>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f005 ffd2 	bl	8007ca8 <lcd_print>
 8001d04:	e049      	b.n	8001d9a <menu+0xc02>
			} else if(dilSecim == 1) {
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <menu+0xba0>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d145      	bne.n	8001d9a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <menu+0xbd8>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	2002      	movs	r0, #2
 8001d14:	f005 ffc8 	bl	8007ca8 <lcd_print>
 8001d18:	e03f      	b.n	8001d9a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <menu+0xbe8>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d13b      	bne.n	8001d9a <menu+0xc02>
			if(dilSecim == 0) {
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <menu+0xba0>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d12e      	bne.n	8001d88 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <menu+0xbec>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f005 ffba 	bl	8007ca8 <lcd_print>
 8001d34:	e031      	b.n	8001d9a <menu+0xc02>
 8001d36:	bf00      	nop
 8001d38:	20000241 	.word	0x20000241
 8001d3c:	0800d278 	.word	0x0800d278
 8001d40:	40010800 	.word	0x40010800
 8001d44:	2000024f 	.word	0x2000024f
 8001d48:	2000022f 	.word	0x2000022f
 8001d4c:	20000221 	.word	0x20000221
 8001d50:	20000118 	.word	0x20000118
 8001d54:	20000226 	.word	0x20000226
 8001d58:	2000024c 	.word	0x2000024c
 8001d5c:	20000220 	.word	0x20000220
 8001d60:	0800d288 	.word	0x0800d288
 8001d64:	0800d29c 	.word	0x0800d29c
 8001d68:	20000224 	.word	0x20000224
 8001d6c:	0800d2b0 	.word	0x0800d2b0
 8001d70:	0800d2c4 	.word	0x0800d2c4
 8001d74:	0800d2d8 	.word	0x0800d2d8
 8001d78:	0800d2e8 	.word	0x0800d2e8
 8001d7c:	0800d2fc 	.word	0x0800d2fc
 8001d80:	20000225 	.word	0x20000225
 8001d84:	0800d310 	.word	0x0800d310
			} else if(dilSecim == 1) {
 8001d88:	4b92      	ldr	r3, [pc, #584]	; (8001fd4 <menu+0xe3c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d104      	bne.n	8001d9a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001d90:	4a91      	ldr	r2, [pc, #580]	; (8001fd8 <menu+0xe40>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	2002      	movs	r0, #2
 8001d96:	f005 ff87 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	488f      	ldr	r0, [pc, #572]	; (8001fdc <menu+0xe44>)
 8001d9e:	f007 faa9 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d115      	bne.n	8001dd4 <menu+0xc3c>
 8001da8:	4b8d      	ldr	r3, [pc, #564]	; (8001fe0 <menu+0xe48>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	f083 0301 	eor.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00e      	beq.n	8001dd4 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001db6:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <menu+0xe4c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <menu+0xe4c>)
 8001dc0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001dc2:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <menu+0xe4c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d902      	bls.n	8001dd0 <menu+0xc38>
				yavaslamaLimit = 0;
 8001dca:	4b86      	ldr	r3, [pc, #536]	; (8001fe4 <menu+0xe4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dd0:	f002 fe7a 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	4881      	ldr	r0, [pc, #516]	; (8001fdc <menu+0xe44>)
 8001dd8:	f007 fa8c 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d115      	bne.n	8001e0e <menu+0xc76>
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <menu+0xe48>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	f083 0301 	eor.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00e      	beq.n	8001e0e <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001df0:	4b7c      	ldr	r3, [pc, #496]	; (8001fe4 <menu+0xe4c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <menu+0xe4c>)
 8001dfa:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <menu+0xe4c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001e04:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <menu+0xe4c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e0a:	f002 fe5d 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0e:	2108      	movs	r1, #8
 8001e10:	4872      	ldr	r0, [pc, #456]	; (8001fdc <menu+0xe44>)
 8001e12:	f007 fa6f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10d      	bne.n	8001e38 <menu+0xca0>
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <menu+0xe48>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f083 0301 	eor.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <menu+0xe4c>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <menu+0xe50>)
 8001e30:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e32:	4b6e      	ldr	r3, [pc, #440]	; (8001fec <menu+0xe54>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001e38:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <menu+0xe58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	f040 80b9 	bne.w	8001fb4 <menu+0xe1c>
		if(dilSecim == 0) {
 8001e42:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <menu+0xe3c>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001e4a:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <menu+0xe5c>)
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f005 ff2a 	bl	8007ca8 <lcd_print>
 8001e54:	e008      	b.n	8001e68 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001e56:	4b5f      	ldr	r3, [pc, #380]	; (8001fd4 <menu+0xe3c>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d104      	bne.n	8001e68 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001e5e:	4a66      	ldr	r2, [pc, #408]	; (8001ff8 <menu+0xe60>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	2001      	movs	r0, #1
 8001e64:	f005 ff20 	bl	8007ca8 <lcd_print>
		}

		if(altLimit == 0) {
 8001e68:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <menu+0xe64>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d113      	bne.n	8001e98 <menu+0xd00>
			if(dilSecim == 0) {
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <menu+0xe3c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001e78:	4a61      	ldr	r2, [pc, #388]	; (8002000 <menu+0xe68>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f005 ff13 	bl	8007ca8 <lcd_print>
 8001e82:	e020      	b.n	8001ec6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <menu+0xe3c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d11c      	bne.n	8001ec6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	; (8002004 <menu+0xe6c>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2002      	movs	r0, #2
 8001e92:	f005 ff09 	bl	8007ca8 <lcd_print>
 8001e96:	e016      	b.n	8001ec6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001e98:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <menu+0xe64>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d112      	bne.n	8001ec6 <menu+0xd2e>
			if(dilSecim == 0){
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <menu+0xe3c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001ea8:	4a57      	ldr	r2, [pc, #348]	; (8002008 <menu+0xe70>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2002      	movs	r0, #2
 8001eae:	f005 fefb 	bl	8007ca8 <lcd_print>
 8001eb2:	e008      	b.n	8001ec6 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001eb4:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <menu+0xe3c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d104      	bne.n	8001ec6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001ebc:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <menu+0xe40>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	f005 fef1 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	4844      	ldr	r0, [pc, #272]	; (8001fdc <menu+0xe44>)
 8001eca:	f007 fa13 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d119      	bne.n	8001f08 <menu+0xd70>
 8001ed4:	4b42      	ldr	r3, [pc, #264]	; (8001fe0 <menu+0xe48>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f083 0301 	eor.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d012      	beq.n	8001f08 <menu+0xd70>
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <menu+0xe74>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <menu+0xd70>
			altLimit = altLimit + 1;
 8001eea:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <menu+0xe64>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <menu+0xe64>)
 8001ef4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <menu+0xe64>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d902      	bls.n	8001f04 <menu+0xd6c>
				altLimit = 0;
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <menu+0xe64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f04:	f002 fde0 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f08:	2104      	movs	r1, #4
 8001f0a:	4834      	ldr	r0, [pc, #208]	; (8001fdc <menu+0xe44>)
 8001f0c:	f007 f9f2 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d119      	bne.n	8001f4a <menu+0xdb2>
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <menu+0xe48>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f083 0301 	eor.w	r3, r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d012      	beq.n	8001f4a <menu+0xdb2>
 8001f24:	4b39      	ldr	r3, [pc, #228]	; (800200c <menu+0xe74>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10e      	bne.n	8001f4a <menu+0xdb2>
			altLimit = altLimit - 1;
 8001f2c:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <menu+0xe64>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <menu+0xe64>)
 8001f36:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <menu+0xe64>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <menu+0xdae>
		   		altLimit = 1;
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <menu+0xe64>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f46:	f002 fdbf 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	4823      	ldr	r0, [pc, #140]	; (8001fdc <menu+0xe44>)
 8001f4e:	f007 f9d1 	bl	80092f4 <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d12d      	bne.n	8001fb4 <menu+0xe1c>
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <menu+0xe48>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	f083 0301 	eor.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d026      	beq.n	8001fb4 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <menu+0xe64>)
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <menu+0xe50>)
 8001f6c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001f6e:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <menu+0xe64>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d110      	bne.n	8001f98 <menu+0xe00>
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <menu+0xe78>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <menu+0xdee>
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <menu+0xe78>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d108      	bne.n	8001f98 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <menu+0xe78>)
 8001f88:	2203      	movs	r2, #3
 8001f8a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <menu+0xe78>)
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <menu+0xe50>)
 8001f92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001f96:	e00a      	b.n	8001fae <menu+0xe16>
			} else if(altLimit == 0) {
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <menu+0xe64>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <menu+0xe16>
				platformSilindirTipi = 0;
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <menu+0xe7c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <menu+0xe7c>)
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <menu+0xe50>)
 8001fac:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <menu+0xe54>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <menu+0xe58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b06      	cmp	r3, #6
 8001fba:	f040 80b6 	bne.w	800212a <menu+0xf92>
		if(dilSecim == 0) {
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <menu+0xe3c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d12a      	bne.n	800201c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001fc6:	4a14      	ldr	r2, [pc, #80]	; (8002018 <menu+0xe80>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f005 fe6c 	bl	8007ca8 <lcd_print>
 8001fd0:	e02d      	b.n	800202e <menu+0xe96>
 8001fd2:	bf00      	nop
 8001fd4:	20000241 	.word	0x20000241
 8001fd8:	0800d324 	.word	0x0800d324
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	2000024f 	.word	0x2000024f
 8001fe4:	20000225 	.word	0x20000225
 8001fe8:	20000118 	.word	0x20000118
 8001fec:	2000024c 	.word	0x2000024c
 8001ff0:	20000220 	.word	0x20000220
 8001ff4:	0800d338 	.word	0x0800d338
 8001ff8:	0800d34c 	.word	0x0800d34c
 8001ffc:	20000226 	.word	0x20000226
 8002000:	0800d2b0 	.word	0x0800d2b0
 8002004:	0800d2c4 	.word	0x0800d2c4
 8002008:	0800d310 	.word	0x0800d310
 800200c:	20000221 	.word	0x20000221
 8002010:	2000022d 	.word	0x2000022d
 8002014:	20000233 	.word	0x20000233
 8002018:	0800d360 	.word	0x0800d360
		} else if(dilSecim == 1){
 800201c:	4b7a      	ldr	r3, [pc, #488]	; (8002208 <menu+0x1070>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d104      	bne.n	800202e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002024:	4a79      	ldr	r2, [pc, #484]	; (800220c <menu+0x1074>)
 8002026:	2101      	movs	r1, #1
 8002028:	2001      	movs	r0, #1
 800202a:	f005 fe3d 	bl	8007ca8 <lcd_print>
		}
		if(basincSalteri == 0){
 800202e:	4b78      	ldr	r3, [pc, #480]	; (8002210 <menu+0x1078>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d113      	bne.n	800205e <menu+0xec6>
			if(dilSecim == 0) {
 8002036:	4b74      	ldr	r3, [pc, #464]	; (8002208 <menu+0x1070>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800203e:	4a75      	ldr	r2, [pc, #468]	; (8002214 <menu+0x107c>)
 8002040:	2101      	movs	r1, #1
 8002042:	2002      	movs	r0, #2
 8002044:	f005 fe30 	bl	8007ca8 <lcd_print>
 8002048:	e020      	b.n	800208c <menu+0xef4>
			} else if(dilSecim == 1){
 800204a:	4b6f      	ldr	r3, [pc, #444]	; (8002208 <menu+0x1070>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d11c      	bne.n	800208c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002052:	4a71      	ldr	r2, [pc, #452]	; (8002218 <menu+0x1080>)
 8002054:	2101      	movs	r1, #1
 8002056:	2002      	movs	r0, #2
 8002058:	f005 fe26 	bl	8007ca8 <lcd_print>
 800205c:	e016      	b.n	800208c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800205e:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <menu+0x1078>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d112      	bne.n	800208c <menu+0xef4>
			if(dilSecim == 0) {
 8002066:	4b68      	ldr	r3, [pc, #416]	; (8002208 <menu+0x1070>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800206e:	4a6b      	ldr	r2, [pc, #428]	; (800221c <menu+0x1084>)
 8002070:	2101      	movs	r1, #1
 8002072:	2002      	movs	r0, #2
 8002074:	f005 fe18 	bl	8007ca8 <lcd_print>
 8002078:	e008      	b.n	800208c <menu+0xef4>
			} else if(dilSecim == 1) {
 800207a:	4b63      	ldr	r3, [pc, #396]	; (8002208 <menu+0x1070>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d104      	bne.n	800208c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002082:	4a67      	ldr	r2, [pc, #412]	; (8002220 <menu+0x1088>)
 8002084:	2101      	movs	r1, #1
 8002086:	2002      	movs	r0, #2
 8002088:	f005 fe0e 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800208c:	2102      	movs	r1, #2
 800208e:	4865      	ldr	r0, [pc, #404]	; (8002224 <menu+0x108c>)
 8002090:	f007 f930 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d115      	bne.n	80020c6 <menu+0xf2e>
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <menu+0x1090>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	f083 0301 	eor.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80020a8:	4b59      	ldr	r3, [pc, #356]	; (8002210 <menu+0x1078>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b57      	ldr	r3, [pc, #348]	; (8002210 <menu+0x1078>)
 80020b2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80020b4:	4b56      	ldr	r3, [pc, #344]	; (8002210 <menu+0x1078>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d902      	bls.n	80020c2 <menu+0xf2a>
				basincSalteri = 0;
 80020bc:	4b54      	ldr	r3, [pc, #336]	; (8002210 <menu+0x1078>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020c2:	f002 fd01 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020c6:	2104      	movs	r1, #4
 80020c8:	4856      	ldr	r0, [pc, #344]	; (8002224 <menu+0x108c>)
 80020ca:	f007 f913 	bl	80092f4 <HAL_GPIO_ReadPin>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d115      	bne.n	8002100 <menu+0xf68>
 80020d4:	4b54      	ldr	r3, [pc, #336]	; (8002228 <menu+0x1090>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	f083 0301 	eor.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00e      	beq.n	8002100 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80020e2:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <menu+0x1078>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <menu+0x1078>)
 80020ec:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80020ee:	4b48      	ldr	r3, [pc, #288]	; (8002210 <menu+0x1078>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <menu+0xf64>
		   		basincSalteri = 1;
 80020f6:	4b46      	ldr	r3, [pc, #280]	; (8002210 <menu+0x1078>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020fc:	f002 fce4 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002100:	2108      	movs	r1, #8
 8002102:	4848      	ldr	r0, [pc, #288]	; (8002224 <menu+0x108c>)
 8002104:	f007 f8f6 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10d      	bne.n	800212a <menu+0xf92>
 800210e:	4b46      	ldr	r3, [pc, #280]	; (8002228 <menu+0x1090>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f083 0301 	eor.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800211c:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <menu+0x1078>)
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	4b42      	ldr	r3, [pc, #264]	; (800222c <menu+0x1094>)
 8002122:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002124:	4b42      	ldr	r3, [pc, #264]	; (8002230 <menu+0x1098>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800212a:	4b42      	ldr	r3, [pc, #264]	; (8002234 <menu+0x109c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b07      	cmp	r3, #7
 8002130:	f040 80f5 	bne.w	800231e <menu+0x1186>
		if(dilSecim == 0) {
 8002134:	4b34      	ldr	r3, [pc, #208]	; (8002208 <menu+0x1070>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800213c:	4a3e      	ldr	r2, [pc, #248]	; (8002238 <menu+0x10a0>)
 800213e:	2101      	movs	r1, #1
 8002140:	2001      	movs	r0, #1
 8002142:	f005 fdb1 	bl	8007ca8 <lcd_print>
 8002146:	e008      	b.n	800215a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <menu+0x1070>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d104      	bne.n	800215a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002150:	4a3a      	ldr	r2, [pc, #232]	; (800223c <menu+0x10a4>)
 8002152:	2101      	movs	r1, #1
 8002154:	2001      	movs	r0, #1
 8002156:	f005 fda7 	bl	8007ca8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <menu+0x10a8>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d113      	bne.n	800218a <menu+0xff2>
			if(dilSecim == 0) {
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <menu+0x1070>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800216a:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <menu+0x107c>)
 800216c:	2101      	movs	r1, #1
 800216e:	2002      	movs	r0, #2
 8002170:	f005 fd9a 	bl	8007ca8 <lcd_print>
 8002174:	e079      	b.n	800226a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <menu+0x1070>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d175      	bne.n	800226a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800217e:	4a26      	ldr	r2, [pc, #152]	; (8002218 <menu+0x1080>)
 8002180:	2101      	movs	r1, #1
 8002182:	2002      	movs	r0, #2
 8002184:	f005 fd90 	bl	8007ca8 <lcd_print>
 8002188:	e06f      	b.n	800226a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <menu+0x10a8>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d113      	bne.n	80021ba <menu+0x1022>
			if(dilSecim == 0) {
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <menu+0x1070>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <menu+0x10ac>)
 800219c:	2101      	movs	r1, #1
 800219e:	2002      	movs	r0, #2
 80021a0:	f005 fd82 	bl	8007ca8 <lcd_print>
 80021a4:	e061      	b.n	800226a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <menu+0x1070>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d15d      	bne.n	800226a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <menu+0x10b0>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	2002      	movs	r0, #2
 80021b4:	f005 fd78 	bl	8007ca8 <lcd_print>
 80021b8:	e057      	b.n	800226a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <menu+0x10a8>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d113      	bne.n	80021ea <menu+0x1052>
			if(dilSecim == 0) {
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <menu+0x1070>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80021ca:	4a20      	ldr	r2, [pc, #128]	; (800224c <menu+0x10b4>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2002      	movs	r0, #2
 80021d0:	f005 fd6a 	bl	8007ca8 <lcd_print>
 80021d4:	e049      	b.n	800226a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <menu+0x1070>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d145      	bne.n	800226a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80021de:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <menu+0x10b8>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2002      	movs	r0, #2
 80021e4:	f005 fd60 	bl	8007ca8 <lcd_print>
 80021e8:	e03f      	b.n	800226a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <menu+0x10a8>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d13b      	bne.n	800226a <menu+0x10d2>
			if(dilSecim == 0) {
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <menu+0x1070>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d12e      	bne.n	8002258 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <menu+0x10bc>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	2002      	movs	r0, #2
 8002200:	f005 fd52 	bl	8007ca8 <lcd_print>
 8002204:	e031      	b.n	800226a <menu+0x10d2>
 8002206:	bf00      	nop
 8002208:	20000241 	.word	0x20000241
 800220c:	0800d370 	.word	0x0800d370
 8002210:	20000227 	.word	0x20000227
 8002214:	0800d2b0 	.word	0x0800d2b0
 8002218:	0800d2c4 	.word	0x0800d2c4
 800221c:	0800d310 	.word	0x0800d310
 8002220:	0800d324 	.word	0x0800d324
 8002224:	40010800 	.word	0x40010800
 8002228:	2000024f 	.word	0x2000024f
 800222c:	20000118 	.word	0x20000118
 8002230:	2000024c 	.word	0x2000024c
 8002234:	20000220 	.word	0x20000220
 8002238:	0800d380 	.word	0x0800d380
 800223c:	0800d394 	.word	0x0800d394
 8002240:	20000228 	.word	0x20000228
 8002244:	0800d3a8 	.word	0x0800d3a8
 8002248:	0800d3bc 	.word	0x0800d3bc
 800224c:	0800d3d0 	.word	0x0800d3d0
 8002250:	0800d3e4 	.word	0x0800d3e4
 8002254:	0800d3f8 	.word	0x0800d3f8
			} else if(dilSecim == 1){
 8002258:	4b99      	ldr	r3, [pc, #612]	; (80024c0 <menu+0x1328>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d104      	bne.n	800226a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002260:	4a98      	ldr	r2, [pc, #608]	; (80024c4 <menu+0x132c>)
 8002262:	2101      	movs	r1, #1
 8002264:	2002      	movs	r0, #2
 8002266:	f005 fd1f 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800226a:	2102      	movs	r1, #2
 800226c:	4896      	ldr	r0, [pc, #600]	; (80024c8 <menu+0x1330>)
 800226e:	f007 f841 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002272:	4603      	mov	r3, r0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d115      	bne.n	80022a4 <menu+0x110c>
 8002278:	4b94      	ldr	r3, [pc, #592]	; (80024cc <menu+0x1334>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	f083 0301 	eor.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00e      	beq.n	80022a4 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002286:	4b92      	ldr	r3, [pc, #584]	; (80024d0 <menu+0x1338>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b90      	ldr	r3, [pc, #576]	; (80024d0 <menu+0x1338>)
 8002290:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002292:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <menu+0x1338>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d902      	bls.n	80022a0 <menu+0x1108>
				kapiSecimleri = 0;
 800229a:	4b8d      	ldr	r3, [pc, #564]	; (80024d0 <menu+0x1338>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022a0:	f002 fc12 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a4:	2104      	movs	r1, #4
 80022a6:	4888      	ldr	r0, [pc, #544]	; (80024c8 <menu+0x1330>)
 80022a8:	f007 f824 	bl	80092f4 <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d115      	bne.n	80022de <menu+0x1146>
 80022b2:	4b86      	ldr	r3, [pc, #536]	; (80024cc <menu+0x1334>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80022c0:	4b83      	ldr	r3, [pc, #524]	; (80024d0 <menu+0x1338>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <menu+0x1338>)
 80022ca:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80022cc:	4b80      	ldr	r3, [pc, #512]	; (80024d0 <menu+0x1338>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d902      	bls.n	80022da <menu+0x1142>
		   		kapiSecimleri = 3;
 80022d4:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <menu+0x1338>)
 80022d6:	2203      	movs	r2, #3
 80022d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022da:	f002 fbf5 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022de:	2108      	movs	r1, #8
 80022e0:	4879      	ldr	r0, [pc, #484]	; (80024c8 <menu+0x1330>)
 80022e2:	f007 f807 	bl	80092f4 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d118      	bne.n	800231e <menu+0x1186>
 80022ec:	4b77      	ldr	r3, [pc, #476]	; (80024cc <menu+0x1334>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d011      	beq.n	800231e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80022fa:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <menu+0x1338>)
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <menu+0x133c>)
 8002300:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002302:	4b73      	ldr	r3, [pc, #460]	; (80024d0 <menu+0x1338>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <menu+0x1180>
				altLimit = 1;
 800230a:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <menu+0x1340>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002310:	4b71      	ldr	r3, [pc, #452]	; (80024d8 <menu+0x1340>)
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <menu+0x133c>)
 8002316:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002318:	4b70      	ldr	r3, [pc, #448]	; (80024dc <menu+0x1344>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800231e:	4b70      	ldr	r3, [pc, #448]	; (80024e0 <menu+0x1348>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b08      	cmp	r3, #8
 8002324:	f040 8092 	bne.w	800244c <menu+0x12b4>
		if(dilSecim == 0) {
 8002328:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <menu+0x1328>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002330:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <menu+0x134c>)
 8002332:	2101      	movs	r1, #1
 8002334:	2001      	movs	r0, #1
 8002336:	f005 fcb7 	bl	8007ca8 <lcd_print>
 800233a:	e008      	b.n	800234e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800233c:	4b60      	ldr	r3, [pc, #384]	; (80024c0 <menu+0x1328>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d104      	bne.n	800234e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002344:	4a68      	ldr	r2, [pc, #416]	; (80024e8 <menu+0x1350>)
 8002346:	2101      	movs	r1, #1
 8002348:	2001      	movs	r0, #1
 800234a:	f005 fcad 	bl	8007ca8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <menu+0x1354>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <menu+0x11e6>
			if(dilSecim == 0) {
 8002356:	4b5a      	ldr	r3, [pc, #360]	; (80024c0 <menu+0x1328>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800235e:	4a64      	ldr	r2, [pc, #400]	; (80024f0 <menu+0x1358>)
 8002360:	2101      	movs	r1, #1
 8002362:	2002      	movs	r0, #2
 8002364:	f005 fca0 	bl	8007ca8 <lcd_print>
 8002368:	e020      	b.n	80023ac <menu+0x1214>
			} else if(dilSecim == 1) {
 800236a:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <menu+0x1328>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d11c      	bne.n	80023ac <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002372:	4a60      	ldr	r2, [pc, #384]	; (80024f4 <menu+0x135c>)
 8002374:	2101      	movs	r1, #1
 8002376:	2002      	movs	r0, #2
 8002378:	f005 fc96 	bl	8007ca8 <lcd_print>
 800237c:	e016      	b.n	80023ac <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <menu+0x1354>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d112      	bne.n	80023ac <menu+0x1214>
			if(dilSecim == 0){
 8002386:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <menu+0x1328>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800238e:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <menu+0x1360>)
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f005 fc88 	bl	8007ca8 <lcd_print>
 8002398:	e008      	b.n	80023ac <menu+0x1214>
			} else if(dilSecim == 1){
 800239a:	4b49      	ldr	r3, [pc, #292]	; (80024c0 <menu+0x1328>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d104      	bne.n	80023ac <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80023a2:	4a56      	ldr	r2, [pc, #344]	; (80024fc <menu+0x1364>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	2002      	movs	r0, #2
 80023a8:	f005 fc7e 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ac:	2102      	movs	r1, #2
 80023ae:	4846      	ldr	r0, [pc, #280]	; (80024c8 <menu+0x1330>)
 80023b0:	f006 ffa0 	bl	80092f4 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d115      	bne.n	80023e6 <menu+0x124e>
 80023ba:	4b44      	ldr	r3, [pc, #272]	; (80024cc <menu+0x1334>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80023c8:	4b48      	ldr	r3, [pc, #288]	; (80024ec <menu+0x1354>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <menu+0x1354>)
 80023d2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80023d4:	4b45      	ldr	r3, [pc, #276]	; (80024ec <menu+0x1354>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d902      	bls.n	80023e2 <menu+0x124a>
				kapiAcTipi = 0;
 80023dc:	4b43      	ldr	r3, [pc, #268]	; (80024ec <menu+0x1354>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023e2:	f002 fb71 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023e6:	2104      	movs	r1, #4
 80023e8:	4837      	ldr	r0, [pc, #220]	; (80024c8 <menu+0x1330>)
 80023ea:	f006 ff83 	bl	80092f4 <HAL_GPIO_ReadPin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d115      	bne.n	8002420 <menu+0x1288>
 80023f4:	4b35      	ldr	r3, [pc, #212]	; (80024cc <menu+0x1334>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f083 0301 	eor.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00e      	beq.n	8002420 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002402:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <menu+0x1354>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <menu+0x1354>)
 800240c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <menu+0x1354>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <menu+0x1284>
		   		kapiAcTipi = 1;
 8002416:	4b35      	ldr	r3, [pc, #212]	; (80024ec <menu+0x1354>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800241c:	f002 fb54 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002420:	2108      	movs	r1, #8
 8002422:	4829      	ldr	r0, [pc, #164]	; (80024c8 <menu+0x1330>)
 8002424:	f006 ff66 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10e      	bne.n	800244c <menu+0x12b4>
 800242e:	4b27      	ldr	r3, [pc, #156]	; (80024cc <menu+0x1334>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <menu+0x1354>)
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <menu+0x133c>)
 8002442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <menu+0x1344>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <menu+0x1348>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b09      	cmp	r3, #9
 8002452:	f040 80b9 	bne.w	80025c8 <menu+0x1430>
		if(dilSecim == 0){
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <menu+0x1328>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <menu+0x1368>)
 8002460:	2101      	movs	r1, #1
 8002462:	2001      	movs	r0, #1
 8002464:	f005 fc20 	bl	8007ca8 <lcd_print>
 8002468:	e008      	b.n	800247c <menu+0x12e4>
		} else if(dilSecim == 1) {
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <menu+0x1328>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d104      	bne.n	800247c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002472:	4a24      	ldr	r2, [pc, #144]	; (8002504 <menu+0x136c>)
 8002474:	2101      	movs	r1, #1
 8002476:	2001      	movs	r0, #1
 8002478:	f005 fc16 	bl	8007ca8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <menu+0x1370>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002484:	4a21      	ldr	r2, [pc, #132]	; (800250c <menu+0x1374>)
 8002486:	2101      	movs	r1, #1
 8002488:	2002      	movs	r0, #2
 800248a:	f005 fc0d 	bl	8007ca8 <lcd_print>
 800248e:	e04c      	b.n	800252a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <menu+0x1370>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d13f      	bne.n	8002518 <menu+0x1380>
			if(dilSecim == 0){
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <menu+0x1328>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <menu+0x1378>)
 80024a2:	2101      	movs	r1, #1
 80024a4:	2002      	movs	r0, #2
 80024a6:	f005 fbff 	bl	8007ca8 <lcd_print>
 80024aa:	e03e      	b.n	800252a <menu+0x1392>
			} else if(dilSecim == 1) {
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <menu+0x1328>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d13a      	bne.n	800252a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <menu+0x137c>)
 80024b6:	2101      	movs	r1, #1
 80024b8:	2002      	movs	r0, #2
 80024ba:	f005 fbf5 	bl	8007ca8 <lcd_print>
 80024be:	e034      	b.n	800252a <menu+0x1392>
 80024c0:	20000241 	.word	0x20000241
 80024c4:	0800d40c 	.word	0x0800d40c
 80024c8:	40010800 	.word	0x40010800
 80024cc:	2000024f 	.word	0x2000024f
 80024d0:	20000228 	.word	0x20000228
 80024d4:	20000118 	.word	0x20000118
 80024d8:	20000226 	.word	0x20000226
 80024dc:	2000024c 	.word	0x2000024c
 80024e0:	20000220 	.word	0x20000220
 80024e4:	0800d420 	.word	0x0800d420
 80024e8:	0800d434 	.word	0x0800d434
 80024ec:	2000022c 	.word	0x2000022c
 80024f0:	0800d448 	.word	0x0800d448
 80024f4:	0800d458 	.word	0x0800d458
 80024f8:	0800d468 	.word	0x0800d468
 80024fc:	0800d47c 	.word	0x0800d47c
 8002500:	0800d490 	.word	0x0800d490
 8002504:	0800d4a4 	.word	0x0800d4a4
 8002508:	20000229 	.word	0x20000229
 800250c:	0800d4b8 	.word	0x0800d4b8
 8002510:	0800d4cc 	.word	0x0800d4cc
 8002514:	0800d4dc 	.word	0x0800d4dc
			}
		} else if(kapi1Tip == 2) {
 8002518:	4b8a      	ldr	r3, [pc, #552]	; (8002744 <menu+0x15ac>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d104      	bne.n	800252a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002520:	4a89      	ldr	r2, [pc, #548]	; (8002748 <menu+0x15b0>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f005 fbbf 	bl	8007ca8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800252a:	2102      	movs	r1, #2
 800252c:	4887      	ldr	r0, [pc, #540]	; (800274c <menu+0x15b4>)
 800252e:	f006 fee1 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d115      	bne.n	8002564 <menu+0x13cc>
 8002538:	4b85      	ldr	r3, [pc, #532]	; (8002750 <menu+0x15b8>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002546:	4b7f      	ldr	r3, [pc, #508]	; (8002744 <menu+0x15ac>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b7d      	ldr	r3, [pc, #500]	; (8002744 <menu+0x15ac>)
 8002550:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002552:	4b7c      	ldr	r3, [pc, #496]	; (8002744 <menu+0x15ac>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d902      	bls.n	8002560 <menu+0x13c8>
				kapi1Tip = 0;
 800255a:	4b7a      	ldr	r3, [pc, #488]	; (8002744 <menu+0x15ac>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002560:	f002 fab2 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002564:	2104      	movs	r1, #4
 8002566:	4879      	ldr	r0, [pc, #484]	; (800274c <menu+0x15b4>)
 8002568:	f006 fec4 	bl	80092f4 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <menu+0x1406>
 8002572:	4b77      	ldr	r3, [pc, #476]	; (8002750 <menu+0x15b8>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002580:	4b70      	ldr	r3, [pc, #448]	; (8002744 <menu+0x15ac>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3b01      	subs	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b6e      	ldr	r3, [pc, #440]	; (8002744 <menu+0x15ac>)
 800258a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800258c:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <menu+0x15ac>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d902      	bls.n	800259a <menu+0x1402>
		   		kapi1Tip = 2;
 8002594:	4b6b      	ldr	r3, [pc, #428]	; (8002744 <menu+0x15ac>)
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800259a:	f002 fa95 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800259e:	2108      	movs	r1, #8
 80025a0:	486a      	ldr	r0, [pc, #424]	; (800274c <menu+0x15b4>)
 80025a2:	f006 fea7 	bl	80092f4 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10d      	bne.n	80025c8 <menu+0x1430>
 80025ac:	4b68      	ldr	r3, [pc, #416]	; (8002750 <menu+0x15b8>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80025ba:	4b62      	ldr	r3, [pc, #392]	; (8002744 <menu+0x15ac>)
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <menu+0x15bc>)
 80025c0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80025c2:	4b65      	ldr	r3, [pc, #404]	; (8002758 <menu+0x15c0>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80025c8:	4b64      	ldr	r3, [pc, #400]	; (800275c <menu+0x15c4>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b0a      	cmp	r3, #10
 80025ce:	d17f      	bne.n	80026d0 <menu+0x1538>
		if(dilSecim == 0) {
 80025d0:	4b63      	ldr	r3, [pc, #396]	; (8002760 <menu+0x15c8>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80025d8:	4a62      	ldr	r2, [pc, #392]	; (8002764 <menu+0x15cc>)
 80025da:	2101      	movs	r1, #1
 80025dc:	2001      	movs	r0, #1
 80025de:	f005 fb63 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80025e2:	4a61      	ldr	r2, [pc, #388]	; (8002768 <menu+0x15d0>)
 80025e4:	2101      	movs	r1, #1
 80025e6:	2002      	movs	r0, #2
 80025e8:	f005 fb5e 	bl	8007ca8 <lcd_print>
 80025ec:	e00d      	b.n	800260a <menu+0x1472>
		} else if(dilSecim == 1) {
 80025ee:	4b5c      	ldr	r3, [pc, #368]	; (8002760 <menu+0x15c8>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d109      	bne.n	800260a <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80025f6:	4a5d      	ldr	r2, [pc, #372]	; (800276c <menu+0x15d4>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	2001      	movs	r0, #1
 80025fc:	f005 fb54 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002600:	4a5b      	ldr	r2, [pc, #364]	; (8002770 <menu+0x15d8>)
 8002602:	2101      	movs	r1, #1
 8002604:	2002      	movs	r0, #2
 8002606:	f005 fb4f 	bl	8007ca8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800260a:	4b5a      	ldr	r3, [pc, #360]	; (8002774 <menu+0x15dc>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	220a      	movs	r2, #10
 8002610:	4959      	ldr	r1, [pc, #356]	; (8002778 <menu+0x15e0>)
 8002612:	4618      	mov	r0, r3
 8002614:	f009 fe9a 	bl	800c34c <itoa>
		lcd_print(2,16,snum);
 8002618:	4a57      	ldr	r2, [pc, #348]	; (8002778 <menu+0x15e0>)
 800261a:	2110      	movs	r1, #16
 800261c:	2002      	movs	r0, #2
 800261e:	f005 fb43 	bl	8007ca8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002622:	2102      	movs	r1, #2
 8002624:	4849      	ldr	r0, [pc, #292]	; (800274c <menu+0x15b4>)
 8002626:	f006 fe65 	bl	80092f4 <HAL_GPIO_ReadPin>
 800262a:	4603      	mov	r3, r0
 800262c:	2b01      	cmp	r3, #1
 800262e:	d119      	bne.n	8002664 <menu+0x14cc>
 8002630:	4b47      	ldr	r3, [pc, #284]	; (8002750 <menu+0x15b8>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f083 0301 	eor.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <menu+0x14cc>
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <menu+0x15ac>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002646:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <menu+0x15dc>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b49      	ldr	r3, [pc, #292]	; (8002774 <menu+0x15dc>)
 8002650:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002652:	4b48      	ldr	r3, [pc, #288]	; (8002774 <menu+0x15dc>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d902      	bls.n	8002660 <menu+0x14c8>
				kapi1AcSure = 0;
 800265a:	4b46      	ldr	r3, [pc, #280]	; (8002774 <menu+0x15dc>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002660:	f002 fa32 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002664:	2104      	movs	r1, #4
 8002666:	4839      	ldr	r0, [pc, #228]	; (800274c <menu+0x15b4>)
 8002668:	f006 fe44 	bl	80092f4 <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d119      	bne.n	80026a6 <menu+0x150e>
 8002672:	4b37      	ldr	r3, [pc, #220]	; (8002750 <menu+0x15b8>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <menu+0x150e>
 8002680:	4b30      	ldr	r3, [pc, #192]	; (8002744 <menu+0x15ac>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10e      	bne.n	80026a6 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <menu+0x15dc>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	3b01      	subs	r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b38      	ldr	r3, [pc, #224]	; (8002774 <menu+0x15dc>)
 8002692:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002694:	4b37      	ldr	r3, [pc, #220]	; (8002774 <menu+0x15dc>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b06      	cmp	r3, #6
 800269a:	d902      	bls.n	80026a2 <menu+0x150a>
		   		kapi1AcSure = 5;
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <menu+0x15dc>)
 800269e:	2205      	movs	r2, #5
 80026a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026a2:	f002 fa11 	bl	8004ac8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a6:	2108      	movs	r1, #8
 80026a8:	4828      	ldr	r0, [pc, #160]	; (800274c <menu+0x15b4>)
 80026aa:	f006 fe23 	bl	80092f4 <HAL_GPIO_ReadPin>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d10d      	bne.n	80026d0 <menu+0x1538>
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <menu+0x15b8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80026c2:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <menu+0x15dc>)
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <menu+0x15bc>)
 80026c8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <menu+0x15c0>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80026d0:	4b22      	ldr	r3, [pc, #136]	; (800275c <menu+0x15c4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b0b      	cmp	r3, #11
 80026d6:	f040 80b5 	bne.w	8002844 <menu+0x16ac>
		if(dilSecim == 0) {
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <menu+0x15c8>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80026e2:	4a26      	ldr	r2, [pc, #152]	; (800277c <menu+0x15e4>)
 80026e4:	2101      	movs	r1, #1
 80026e6:	2001      	movs	r0, #1
 80026e8:	f005 fade 	bl	8007ca8 <lcd_print>
 80026ec:	e008      	b.n	8002700 <menu+0x1568>
		} else if(dilSecim == 1) {
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <menu+0x15c8>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d104      	bne.n	8002700 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80026f6:	4a22      	ldr	r2, [pc, #136]	; (8002780 <menu+0x15e8>)
 80026f8:	2101      	movs	r1, #1
 80026fa:	2001      	movs	r0, #1
 80026fc:	f005 fad4 	bl	8007ca8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <menu+0x15ec>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <menu+0x15f0>)
 800270a:	2101      	movs	r1, #1
 800270c:	2002      	movs	r0, #2
 800270e:	f005 facb 	bl	8007ca8 <lcd_print>
 8002712:	e048      	b.n	80027a6 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <menu+0x15ec>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d13b      	bne.n	8002794 <menu+0x15fc>
			if(dilSecim == 0) {
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <menu+0x15c8>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <menu+0x15f4>)
 8002726:	2101      	movs	r1, #1
 8002728:	2002      	movs	r0, #2
 800272a:	f005 fabd 	bl	8007ca8 <lcd_print>
 800272e:	e03a      	b.n	80027a6 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <menu+0x15c8>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d136      	bne.n	80027a6 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002738:	4a15      	ldr	r2, [pc, #84]	; (8002790 <menu+0x15f8>)
 800273a:	2101      	movs	r1, #1
 800273c:	2002      	movs	r0, #2
 800273e:	f005 fab3 	bl	8007ca8 <lcd_print>
 8002742:	e030      	b.n	80027a6 <menu+0x160e>
 8002744:	20000229 	.word	0x20000229
 8002748:	0800d4f0 	.word	0x0800d4f0
 800274c:	40010800 	.word	0x40010800
 8002750:	2000024f 	.word	0x2000024f
 8002754:	20000118 	.word	0x20000118
 8002758:	2000024c 	.word	0x2000024c
 800275c:	20000220 	.word	0x20000220
 8002760:	20000241 	.word	0x20000241
 8002764:	0800d500 	.word	0x0800d500
 8002768:	0800d514 	.word	0x0800d514
 800276c:	0800d524 	.word	0x0800d524
 8002770:	0800d538 	.word	0x0800d538
 8002774:	20000239 	.word	0x20000239
 8002778:	20000188 	.word	0x20000188
 800277c:	0800d548 	.word	0x0800d548
 8002780:	0800d55c 	.word	0x0800d55c
 8002784:	2000022a 	.word	0x2000022a
 8002788:	0800d4b8 	.word	0x0800d4b8
 800278c:	0800d4cc 	.word	0x0800d4cc
 8002790:	0800d4dc 	.word	0x0800d4dc
			}
		} else if(kapi2Tip == 2) {
 8002794:	4b8a      	ldr	r3, [pc, #552]	; (80029c0 <menu+0x1828>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d104      	bne.n	80027a6 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 800279c:	4a89      	ldr	r2, [pc, #548]	; (80029c4 <menu+0x182c>)
 800279e:	2101      	movs	r1, #1
 80027a0:	2002      	movs	r0, #2
 80027a2:	f005 fa81 	bl	8007ca8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027a6:	2102      	movs	r1, #2
 80027a8:	4887      	ldr	r0, [pc, #540]	; (80029c8 <menu+0x1830>)
 80027aa:	f006 fda3 	bl	80092f4 <HAL_GPIO_ReadPin>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d115      	bne.n	80027e0 <menu+0x1648>
 80027b4:	4b85      	ldr	r3, [pc, #532]	; (80029cc <menu+0x1834>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00e      	beq.n	80027e0 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80027c2:	4b7f      	ldr	r3, [pc, #508]	; (80029c0 <menu+0x1828>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <menu+0x1828>)
 80027cc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80027ce:	4b7c      	ldr	r3, [pc, #496]	; (80029c0 <menu+0x1828>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <menu+0x1644>
				kapi2Tip = 0;
 80027d6:	4b7a      	ldr	r3, [pc, #488]	; (80029c0 <menu+0x1828>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027dc:	f002 f974 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027e0:	2104      	movs	r1, #4
 80027e2:	4879      	ldr	r0, [pc, #484]	; (80029c8 <menu+0x1830>)
 80027e4:	f006 fd86 	bl	80092f4 <HAL_GPIO_ReadPin>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d115      	bne.n	800281a <menu+0x1682>
 80027ee:	4b77      	ldr	r3, [pc, #476]	; (80029cc <menu+0x1834>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80027fc:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <menu+0x1828>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	3b01      	subs	r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b6e      	ldr	r3, [pc, #440]	; (80029c0 <menu+0x1828>)
 8002806:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002808:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <menu+0x1828>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d902      	bls.n	8002816 <menu+0x167e>
		   		kapi2Tip = 2;
 8002810:	4b6b      	ldr	r3, [pc, #428]	; (80029c0 <menu+0x1828>)
 8002812:	2202      	movs	r2, #2
 8002814:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002816:	f002 f957 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800281a:	2108      	movs	r1, #8
 800281c:	486a      	ldr	r0, [pc, #424]	; (80029c8 <menu+0x1830>)
 800281e:	f006 fd69 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10d      	bne.n	8002844 <menu+0x16ac>
 8002828:	4b68      	ldr	r3, [pc, #416]	; (80029cc <menu+0x1834>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d006      	beq.n	8002844 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002836:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <menu+0x1828>)
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <menu+0x1838>)
 800283c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <menu+0x183c>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002844:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <menu+0x1840>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b0c      	cmp	r3, #12
 800284a:	d17f      	bne.n	800294c <menu+0x17b4>
		if(dilSecim == 0) {
 800284c:	4b63      	ldr	r3, [pc, #396]	; (80029dc <menu+0x1844>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002854:	4a62      	ldr	r2, [pc, #392]	; (80029e0 <menu+0x1848>)
 8002856:	2101      	movs	r1, #1
 8002858:	2001      	movs	r0, #1
 800285a:	f005 fa25 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800285e:	4a61      	ldr	r2, [pc, #388]	; (80029e4 <menu+0x184c>)
 8002860:	2101      	movs	r1, #1
 8002862:	2002      	movs	r0, #2
 8002864:	f005 fa20 	bl	8007ca8 <lcd_print>
 8002868:	e00d      	b.n	8002886 <menu+0x16ee>
		} else if(dilSecim == 1) {
 800286a:	4b5c      	ldr	r3, [pc, #368]	; (80029dc <menu+0x1844>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d109      	bne.n	8002886 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002872:	4a5d      	ldr	r2, [pc, #372]	; (80029e8 <menu+0x1850>)
 8002874:	2101      	movs	r1, #1
 8002876:	2001      	movs	r0, #1
 8002878:	f005 fa16 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800287c:	4a5b      	ldr	r2, [pc, #364]	; (80029ec <menu+0x1854>)
 800287e:	2101      	movs	r1, #1
 8002880:	2002      	movs	r0, #2
 8002882:	f005 fa11 	bl	8007ca8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002886:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <menu+0x1858>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	220a      	movs	r2, #10
 800288c:	4959      	ldr	r1, [pc, #356]	; (80029f4 <menu+0x185c>)
 800288e:	4618      	mov	r0, r3
 8002890:	f009 fd5c 	bl	800c34c <itoa>
		lcd_print(2,16,snum);
 8002894:	4a57      	ldr	r2, [pc, #348]	; (80029f4 <menu+0x185c>)
 8002896:	2110      	movs	r1, #16
 8002898:	2002      	movs	r0, #2
 800289a:	f005 fa05 	bl	8007ca8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800289e:	2102      	movs	r1, #2
 80028a0:	4849      	ldr	r0, [pc, #292]	; (80029c8 <menu+0x1830>)
 80028a2:	f006 fd27 	bl	80092f4 <HAL_GPIO_ReadPin>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d119      	bne.n	80028e0 <menu+0x1748>
 80028ac:	4b47      	ldr	r3, [pc, #284]	; (80029cc <menu+0x1834>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	f083 0301 	eor.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d012      	beq.n	80028e0 <menu+0x1748>
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <menu+0x1828>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10e      	bne.n	80028e0 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80028c2:	4b4b      	ldr	r3, [pc, #300]	; (80029f0 <menu+0x1858>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <menu+0x1858>)
 80028cc:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80028ce:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <menu+0x1858>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d902      	bls.n	80028dc <menu+0x1744>
				kapi2AcSure = 0;
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <menu+0x1858>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028dc:	f002 f8f4 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80028e0:	2104      	movs	r1, #4
 80028e2:	4839      	ldr	r0, [pc, #228]	; (80029c8 <menu+0x1830>)
 80028e4:	f006 fd06 	bl	80092f4 <HAL_GPIO_ReadPin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d119      	bne.n	8002922 <menu+0x178a>
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <menu+0x1834>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <menu+0x178a>
 80028fc:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <menu+0x1828>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10e      	bne.n	8002922 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002904:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <menu+0x1858>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	3b01      	subs	r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <menu+0x1858>)
 800290e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002910:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <menu+0x1858>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b06      	cmp	r3, #6
 8002916:	d902      	bls.n	800291e <menu+0x1786>
		   		kapi2AcSure = 5;
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <menu+0x1858>)
 800291a:	2205      	movs	r2, #5
 800291c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800291e:	f002 f8d3 	bl	8004ac8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002922:	2108      	movs	r1, #8
 8002924:	4828      	ldr	r0, [pc, #160]	; (80029c8 <menu+0x1830>)
 8002926:	f006 fce5 	bl	80092f4 <HAL_GPIO_ReadPin>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10d      	bne.n	800294c <menu+0x17b4>
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <menu+0x1834>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	f083 0301 	eor.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d006      	beq.n	800294c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 800293e:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <menu+0x1858>)
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <menu+0x1838>)
 8002944:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <menu+0x183c>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <menu+0x1840>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b0d      	cmp	r3, #13
 8002952:	f040 80b5 	bne.w	8002ac0 <menu+0x1928>
		if(dilSecim == 0) {
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <menu+0x1844>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800295e:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <menu+0x1860>)
 8002960:	2101      	movs	r1, #1
 8002962:	2001      	movs	r0, #1
 8002964:	f005 f9a0 	bl	8007ca8 <lcd_print>
 8002968:	e008      	b.n	800297c <menu+0x17e4>
		} else if(dilSecim == 1){
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <menu+0x1844>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d104      	bne.n	800297c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002972:	4a22      	ldr	r2, [pc, #136]	; (80029fc <menu+0x1864>)
 8002974:	2101      	movs	r1, #1
 8002976:	2001      	movs	r0, #1
 8002978:	f005 f996 	bl	8007ca8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <menu+0x1868>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002984:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <menu+0x186c>)
 8002986:	2101      	movs	r1, #1
 8002988:	2002      	movs	r0, #2
 800298a:	f005 f98d 	bl	8007ca8 <lcd_print>
 800298e:	e048      	b.n	8002a22 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <menu+0x1868>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d13b      	bne.n	8002a10 <menu+0x1878>
			if(dilSecim == 0) {
 8002998:	4b10      	ldr	r3, [pc, #64]	; (80029dc <menu+0x1844>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 80029a0:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <menu+0x1870>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	2002      	movs	r0, #2
 80029a6:	f005 f97f 	bl	8007ca8 <lcd_print>
 80029aa:	e03a      	b.n	8002a22 <menu+0x188a>
			} else if(dilSecim == 1) {
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <menu+0x1844>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d136      	bne.n	8002a22 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80029b4:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <menu+0x1874>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	2002      	movs	r0, #2
 80029ba:	f005 f975 	bl	8007ca8 <lcd_print>
 80029be:	e030      	b.n	8002a22 <menu+0x188a>
 80029c0:	2000022a 	.word	0x2000022a
 80029c4:	0800d4f0 	.word	0x0800d4f0
 80029c8:	40010800 	.word	0x40010800
 80029cc:	2000024f 	.word	0x2000024f
 80029d0:	20000118 	.word	0x20000118
 80029d4:	2000024c 	.word	0x2000024c
 80029d8:	20000220 	.word	0x20000220
 80029dc:	20000241 	.word	0x20000241
 80029e0:	0800d570 	.word	0x0800d570
 80029e4:	0800d514 	.word	0x0800d514
 80029e8:	0800d584 	.word	0x0800d584
 80029ec:	0800d538 	.word	0x0800d538
 80029f0:	2000023a 	.word	0x2000023a
 80029f4:	20000188 	.word	0x20000188
 80029f8:	0800d598 	.word	0x0800d598
 80029fc:	0800d5ac 	.word	0x0800d5ac
 8002a00:	2000022b 	.word	0x2000022b
 8002a04:	0800d4b8 	.word	0x0800d4b8
 8002a08:	0800d4cc 	.word	0x0800d4cc
 8002a0c:	0800d4dc 	.word	0x0800d4dc
			}
		} else if(kapitablaTip == 2) {
 8002a10:	4b5b      	ldr	r3, [pc, #364]	; (8002b80 <menu+0x19e8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d104      	bne.n	8002a22 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002a18:	4a5a      	ldr	r2, [pc, #360]	; (8002b84 <menu+0x19ec>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f005 f943 	bl	8007ca8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a22:	2102      	movs	r1, #2
 8002a24:	4858      	ldr	r0, [pc, #352]	; (8002b88 <menu+0x19f0>)
 8002a26:	f006 fc65 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d115      	bne.n	8002a5c <menu+0x18c4>
 8002a30:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <menu+0x19f4>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f083 0301 	eor.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00e      	beq.n	8002a5c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002a3e:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <menu+0x19e8>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <menu+0x19e8>)
 8002a48:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002a4a:	4b4d      	ldr	r3, [pc, #308]	; (8002b80 <menu+0x19e8>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <menu+0x18c0>
				kapitablaTip = 0;
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <menu+0x19e8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a58:	f002 f836 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	484a      	ldr	r0, [pc, #296]	; (8002b88 <menu+0x19f0>)
 8002a60:	f006 fc48 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d115      	bne.n	8002a96 <menu+0x18fe>
 8002a6a:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <menu+0x19f4>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f083 0301 	eor.w	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00e      	beq.n	8002a96 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002a78:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <menu+0x19e8>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <menu+0x19e8>)
 8002a82:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002a84:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <menu+0x19e8>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d902      	bls.n	8002a92 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <menu+0x19e8>)
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a92:	f002 f819 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a96:	2108      	movs	r1, #8
 8002a98:	483b      	ldr	r0, [pc, #236]	; (8002b88 <menu+0x19f0>)
 8002a9a:	f006 fc2b 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10d      	bne.n	8002ac0 <menu+0x1928>
 8002aa4:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <menu+0x19f4>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	f083 0301 	eor.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002ab2:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <menu+0x19e8>)
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <menu+0x19f8>)
 8002ab8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <menu+0x19fc>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002ac0:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <menu+0x1a00>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b0e      	cmp	r3, #14
 8002ac6:	f040 80f2 	bne.w	8002cae <menu+0x1b16>
		if(dilSecim == 0) {
 8002aca:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <menu+0x1a04>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002ad2:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <menu+0x1a08>)
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f005 f8e6 	bl	8007ca8 <lcd_print>
 8002adc:	e008      	b.n	8002af0 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <menu+0x1a04>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d104      	bne.n	8002af0 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <menu+0x1a0c>)
 8002ae8:	2101      	movs	r1, #1
 8002aea:	2001      	movs	r0, #1
 8002aec:	f005 f8dc 	bl	8007ca8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <menu+0x1a10>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d113      	bne.n	8002b20 <menu+0x1988>
			if(dilSecim == 0){
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <menu+0x1a04>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002b00:	4a2a      	ldr	r2, [pc, #168]	; (8002bac <menu+0x1a14>)
 8002b02:	2101      	movs	r1, #1
 8002b04:	2002      	movs	r0, #2
 8002b06:	f005 f8cf 	bl	8007ca8 <lcd_print>
 8002b0a:	e071      	b.n	8002bf0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <menu+0x1a04>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d16d      	bne.n	8002bf0 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002b14:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <menu+0x1a18>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f005 f8c5 	bl	8007ca8 <lcd_print>
 8002b1e:	e067      	b.n	8002bf0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <menu+0x1a10>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d112      	bne.n	8002b4e <menu+0x19b6>
			if(dilSecim == 0){
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <menu+0x1a04>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002b30:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <menu+0x1a1c>)
 8002b32:	2101      	movs	r1, #1
 8002b34:	2002      	movs	r0, #2
 8002b36:	f005 f8b7 	bl	8007ca8 <lcd_print>
			}
			if(dilSecim == 1){
 8002b3a:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <menu+0x1a04>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d156      	bne.n	8002bf0 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <menu+0x1a20>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	2002      	movs	r0, #2
 8002b48:	f005 f8ae 	bl	8007ca8 <lcd_print>
 8002b4c:	e050      	b.n	8002bf0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <menu+0x1a10>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d136      	bne.n	8002bc4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <menu+0x1a04>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002b5e:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <menu+0x1a24>)
 8002b60:	2101      	movs	r1, #1
 8002b62:	2002      	movs	r0, #2
 8002b64:	f005 f8a0 	bl	8007ca8 <lcd_print>
 8002b68:	e042      	b.n	8002bf0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <menu+0x1a04>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d13e      	bne.n	8002bf0 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <menu+0x1a28>)
 8002b74:	2101      	movs	r1, #1
 8002b76:	2002      	movs	r0, #2
 8002b78:	f005 f896 	bl	8007ca8 <lcd_print>
 8002b7c:	e038      	b.n	8002bf0 <menu+0x1a58>
 8002b7e:	bf00      	nop
 8002b80:	2000022b 	.word	0x2000022b
 8002b84:	0800d4f0 	.word	0x0800d4f0
 8002b88:	40010800 	.word	0x40010800
 8002b8c:	2000024f 	.word	0x2000024f
 8002b90:	20000118 	.word	0x20000118
 8002b94:	2000024c 	.word	0x2000024c
 8002b98:	20000220 	.word	0x20000220
 8002b9c:	20000241 	.word	0x20000241
 8002ba0:	0800d5c0 	.word	0x0800d5c0
 8002ba4:	0800d5d4 	.word	0x0800d5d4
 8002ba8:	2000022d 	.word	0x2000022d
 8002bac:	0800d5e8 	.word	0x0800d5e8
 8002bb0:	0800d5f8 	.word	0x0800d5f8
 8002bb4:	0800d608 	.word	0x0800d608
 8002bb8:	0800d618 	.word	0x0800d618
 8002bbc:	0800d628 	.word	0x0800d628
 8002bc0:	0800d63c 	.word	0x0800d63c
			}
		} else if(kapiTablaAcKonum == 3) {
 8002bc4:	4b9b      	ldr	r3, [pc, #620]	; (8002e34 <menu+0x1c9c>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d111      	bne.n	8002bf0 <menu+0x1a58>
			if(dilSecim == 0) {
 8002bcc:	4b9a      	ldr	r3, [pc, #616]	; (8002e38 <menu+0x1ca0>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002bd4:	4a99      	ldr	r2, [pc, #612]	; (8002e3c <menu+0x1ca4>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f005 f865 	bl	8007ca8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002bde:	4b96      	ldr	r3, [pc, #600]	; (8002e38 <menu+0x1ca0>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d104      	bne.n	8002bf0 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002be6:	4a96      	ldr	r2, [pc, #600]	; (8002e40 <menu+0x1ca8>)
 8002be8:	2101      	movs	r1, #1
 8002bea:	2002      	movs	r0, #2
 8002bec:	f005 f85c 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	4894      	ldr	r0, [pc, #592]	; (8002e44 <menu+0x1cac>)
 8002bf4:	f006 fb7e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d115      	bne.n	8002c2a <menu+0x1a92>
 8002bfe:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <menu+0x1cb0>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c0c:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <menu+0x1c9c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b87      	ldr	r3, [pc, #540]	; (8002e34 <menu+0x1c9c>)
 8002c16:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c18:	4b86      	ldr	r3, [pc, #536]	; (8002e34 <menu+0x1c9c>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002c20:	4b84      	ldr	r3, [pc, #528]	; (8002e34 <menu+0x1c9c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c26:	f001 ff4f 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	4885      	ldr	r0, [pc, #532]	; (8002e44 <menu+0x1cac>)
 8002c2e:	f006 fb61 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d115      	bne.n	8002c64 <menu+0x1acc>
 8002c38:	4b83      	ldr	r3, [pc, #524]	; (8002e48 <menu+0x1cb0>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	f083 0301 	eor.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002c46:	4b7b      	ldr	r3, [pc, #492]	; (8002e34 <menu+0x1c9c>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <menu+0x1c9c>)
 8002c50:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002c52:	4b78      	ldr	r3, [pc, #480]	; (8002e34 <menu+0x1c9c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d902      	bls.n	8002c60 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002c5a:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <menu+0x1c9c>)
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c60:	f001 ff32 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c64:	2108      	movs	r1, #8
 8002c66:	4877      	ldr	r0, [pc, #476]	; (8002e44 <menu+0x1cac>)
 8002c68:	f006 fb44 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d11d      	bne.n	8002cae <menu+0x1b16>
 8002c72:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <menu+0x1cb0>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d016      	beq.n	8002cae <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002c80:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <menu+0x1c9c>)
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <menu+0x1cb4>)
 8002c86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <menu+0x1c9c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <menu+0x1b02>
 8002c92:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <menu+0x1c9c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d106      	bne.n	8002ca8 <menu+0x1b10>
				altLimit = 1;
 8002c9a:	4b6d      	ldr	r3, [pc, #436]	; (8002e50 <menu+0x1cb8>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002ca0:	4b6b      	ldr	r3, [pc, #428]	; (8002e50 <menu+0x1cb8>)
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	4b69      	ldr	r3, [pc, #420]	; (8002e4c <menu+0x1cb4>)
 8002ca6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <menu+0x1cbc>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <menu+0x1cc0>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b0f      	cmp	r3, #15
 8002cb4:	d17f      	bne.n	8002db6 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002cb6:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <menu+0x1ca0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002cbe:	4a67      	ldr	r2, [pc, #412]	; (8002e5c <menu+0x1cc4>)
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f004 fff0 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002cc8:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <menu+0x1cc8>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2002      	movs	r0, #2
 8002cce:	f004 ffeb 	bl	8007ca8 <lcd_print>
 8002cd2:	e00d      	b.n	8002cf0 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002cd4:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <menu+0x1ca0>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d109      	bne.n	8002cf0 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002cdc:	4a61      	ldr	r2, [pc, #388]	; (8002e64 <menu+0x1ccc>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f004 ffe1 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ce6:	4a60      	ldr	r2, [pc, #384]	; (8002e68 <menu+0x1cd0>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2002      	movs	r0, #2
 8002cec:	f004 ffdc 	bl	8007ca8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002cf0:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <menu+0x1cd4>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	220a      	movs	r2, #10
 8002cf6:	495e      	ldr	r1, [pc, #376]	; (8002e70 <menu+0x1cd8>)
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f009 fb27 	bl	800c34c <itoa>
		lcd_print(2,16,snum);
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <menu+0x1cd8>)
 8002d00:	2110      	movs	r1, #16
 8002d02:	2002      	movs	r0, #2
 8002d04:	f004 ffd0 	bl	8007ca8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d08:	2102      	movs	r1, #2
 8002d0a:	484e      	ldr	r0, [pc, #312]	; (8002e44 <menu+0x1cac>)
 8002d0c:	f006 faf2 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d119      	bne.n	8002d4a <menu+0x1bb2>
 8002d16:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <menu+0x1cb0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f083 0301 	eor.w	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d012      	beq.n	8002d4a <menu+0x1bb2>
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <menu+0x1cdc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10e      	bne.n	8002d4a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <menu+0x1cd4>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <menu+0x1cd4>)
 8002d36:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <menu+0x1cd4>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d902      	bls.n	8002d46 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002d40:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <menu+0x1cd4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d46:	f001 febf 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d4a:	2104      	movs	r1, #4
 8002d4c:	483d      	ldr	r0, [pc, #244]	; (8002e44 <menu+0x1cac>)
 8002d4e:	f006 fad1 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d119      	bne.n	8002d8c <menu+0x1bf4>
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <menu+0x1cb0>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d012      	beq.n	8002d8c <menu+0x1bf4>
 8002d66:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <menu+0x1cdc>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10e      	bne.n	8002d8c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <menu+0x1cd4>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <menu+0x1cd4>)
 8002d78:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <menu+0x1cd4>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002d82:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <menu+0x1cd4>)
 8002d84:	2205      	movs	r2, #5
 8002d86:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002d88:	f001 fe9e 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d8c:	2108      	movs	r1, #8
 8002d8e:	482d      	ldr	r0, [pc, #180]	; (8002e44 <menu+0x1cac>)
 8002d90:	f006 fab0 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d10d      	bne.n	8002db6 <menu+0x1c1e>
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <menu+0x1cb0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	f083 0301 	eor.w	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002da8:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <menu+0x1cd4>)
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <menu+0x1cb4>)
 8002dae:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <menu+0x1cbc>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <menu+0x1cc0>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	f040 80bc 	bne.w	8002f38 <menu+0x1da0>
		if(dilSecim == 0) {
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <menu+0x1ca0>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002dc8:	4a2b      	ldr	r2, [pc, #172]	; (8002e78 <menu+0x1ce0>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f004 ff6b 	bl	8007ca8 <lcd_print>
 8002dd2:	e008      	b.n	8002de6 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <menu+0x1ca0>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d104      	bne.n	8002de6 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ddc:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <menu+0x1ce4>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	2001      	movs	r0, #1
 8002de2:	f004 ff61 	bl	8007ca8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <menu+0x1ce8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d113      	bne.n	8002e16 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <menu+0x1ca0>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002df6:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <menu+0x1ca4>)
 8002df8:	2101      	movs	r1, #1
 8002dfa:	2002      	movs	r0, #2
 8002dfc:	f004 ff54 	bl	8007ca8 <lcd_print>
 8002e00:	e04b      	b.n	8002e9a <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <menu+0x1ca0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d147      	bne.n	8002e9a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002e0a:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <menu+0x1ca8>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	2002      	movs	r0, #2
 8002e10:	f004 ff4a 	bl	8007ca8 <lcd_print>
 8002e14:	e041      	b.n	8002e9a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <menu+0x1ce8>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d13d      	bne.n	8002e9a <menu+0x1d02>
			if(dilSecim == 0) {
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <menu+0x1ca0>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d130      	bne.n	8002e88 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002e26:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <menu+0x1cec>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	f004 ff3c 	bl	8007ca8 <lcd_print>
 8002e30:	e033      	b.n	8002e9a <menu+0x1d02>
 8002e32:	bf00      	nop
 8002e34:	2000022d 	.word	0x2000022d
 8002e38:	20000241 	.word	0x20000241
 8002e3c:	0800d2b0 	.word	0x0800d2b0
 8002e40:	0800d2c4 	.word	0x0800d2c4
 8002e44:	40010800 	.word	0x40010800
 8002e48:	2000024f 	.word	0x2000024f
 8002e4c:	20000118 	.word	0x20000118
 8002e50:	20000226 	.word	0x20000226
 8002e54:	2000024c 	.word	0x2000024c
 8002e58:	20000220 	.word	0x20000220
 8002e5c:	0800d650 	.word	0x0800d650
 8002e60:	0800d514 	.word	0x0800d514
 8002e64:	0800d664 	.word	0x0800d664
 8002e68:	0800d538 	.word	0x0800d538
 8002e6c:	2000023b 	.word	0x2000023b
 8002e70:	20000188 	.word	0x20000188
 8002e74:	2000022b 	.word	0x2000022b
 8002e78:	0800d678 	.word	0x0800d678
 8002e7c:	0800d68c 	.word	0x0800d68c
 8002e80:	2000022e 	.word	0x2000022e
 8002e84:	0800d310 	.word	0x0800d310
			} else if(dilSecim == 1) {
 8002e88:	4b99      	ldr	r3, [pc, #612]	; (80030f0 <menu+0x1f58>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d104      	bne.n	8002e9a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002e90:	4a98      	ldr	r2, [pc, #608]	; (80030f4 <menu+0x1f5c>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	2002      	movs	r0, #2
 8002e96:	f004 ff07 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	4896      	ldr	r0, [pc, #600]	; (80030f8 <menu+0x1f60>)
 8002e9e:	f006 fa29 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d115      	bne.n	8002ed4 <menu+0x1d3c>
 8002ea8:	4b94      	ldr	r3, [pc, #592]	; (80030fc <menu+0x1f64>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f083 0301 	eor.w	r3, r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00e      	beq.n	8002ed4 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002eb6:	4b92      	ldr	r3, [pc, #584]	; (8003100 <menu+0x1f68>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4b90      	ldr	r3, [pc, #576]	; (8003100 <menu+0x1f68>)
 8002ec0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002ec2:	4b8f      	ldr	r3, [pc, #572]	; (8003100 <menu+0x1f68>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d902      	bls.n	8002ed0 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002eca:	4b8d      	ldr	r3, [pc, #564]	; (8003100 <menu+0x1f68>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ed0:	f001 fdfa 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	4888      	ldr	r0, [pc, #544]	; (80030f8 <menu+0x1f60>)
 8002ed8:	f006 fa0c 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d115      	bne.n	8002f0e <menu+0x1d76>
 8002ee2:	4b86      	ldr	r3, [pc, #536]	; (80030fc <menu+0x1f64>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f083 0301 	eor.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00e      	beq.n	8002f0e <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002ef0:	4b83      	ldr	r3, [pc, #524]	; (8003100 <menu+0x1f68>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b81      	ldr	r3, [pc, #516]	; (8003100 <menu+0x1f68>)
 8002efa:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002efc:	4b80      	ldr	r3, [pc, #512]	; (8003100 <menu+0x1f68>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002f04:	4b7e      	ldr	r3, [pc, #504]	; (8003100 <menu+0x1f68>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f0a:	f001 fddd 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f0e:	2108      	movs	r1, #8
 8002f10:	4879      	ldr	r0, [pc, #484]	; (80030f8 <menu+0x1f60>)
 8002f12:	f006 f9ef 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d10d      	bne.n	8002f38 <menu+0x1da0>
 8002f1c:	4b77      	ldr	r3, [pc, #476]	; (80030fc <menu+0x1f64>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	f083 0301 	eor.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002f2a:	4b75      	ldr	r3, [pc, #468]	; (8003100 <menu+0x1f68>)
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	4b75      	ldr	r3, [pc, #468]	; (8003104 <menu+0x1f6c>)
 8002f30:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f32:	4b75      	ldr	r3, [pc, #468]	; (8003108 <menu+0x1f70>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002f38:	4b74      	ldr	r3, [pc, #464]	; (800310c <menu+0x1f74>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b11      	cmp	r3, #17
 8002f3e:	f040 80c3 	bne.w	80030c8 <menu+0x1f30>
		if(dilSecim == 0) {
 8002f42:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <menu+0x1f58>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002f4a:	4a71      	ldr	r2, [pc, #452]	; (8003110 <menu+0x1f78>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f004 feaa 	bl	8007ca8 <lcd_print>
 8002f54:	e008      	b.n	8002f68 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002f56:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <menu+0x1f58>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d104      	bne.n	8002f68 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002f5e:	4a6d      	ldr	r2, [pc, #436]	; (8003114 <menu+0x1f7c>)
 8002f60:	2101      	movs	r1, #1
 8002f62:	2001      	movs	r0, #1
 8002f64:	f004 fea0 	bl	8007ca8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002f68:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <menu+0x1f80>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d113      	bne.n	8002f98 <menu+0x1e00>
			if(dilSecim == 0){
 8002f70:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <menu+0x1f58>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002f78:	4a68      	ldr	r2, [pc, #416]	; (800311c <menu+0x1f84>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	f004 fe93 	bl	8007ca8 <lcd_print>
 8002f82:	e038      	b.n	8002ff6 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002f84:	4b5a      	ldr	r3, [pc, #360]	; (80030f0 <menu+0x1f58>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d134      	bne.n	8002ff6 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002f8c:	4a64      	ldr	r2, [pc, #400]	; (8003120 <menu+0x1f88>)
 8002f8e:	2101      	movs	r1, #1
 8002f90:	2002      	movs	r0, #2
 8002f92:	f004 fe89 	bl	8007ca8 <lcd_print>
 8002f96:	e02e      	b.n	8002ff6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f98:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <menu+0x1f80>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d113      	bne.n	8002fc8 <menu+0x1e30>
			if(dilSecim == 0){
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <menu+0x1f58>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002fa8:	4a5e      	ldr	r2, [pc, #376]	; (8003124 <menu+0x1f8c>)
 8002faa:	2101      	movs	r1, #1
 8002fac:	2002      	movs	r0, #2
 8002fae:	f004 fe7b 	bl	8007ca8 <lcd_print>
 8002fb2:	e020      	b.n	8002ff6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002fb4:	4b4e      	ldr	r3, [pc, #312]	; (80030f0 <menu+0x1f58>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d11c      	bne.n	8002ff6 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002fbc:	4a5a      	ldr	r2, [pc, #360]	; (8003128 <menu+0x1f90>)
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2002      	movs	r0, #2
 8002fc2:	f004 fe71 	bl	8007ca8 <lcd_print>
 8002fc6:	e016      	b.n	8002ff6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002fc8:	4b53      	ldr	r3, [pc, #332]	; (8003118 <menu+0x1f80>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d112      	bne.n	8002ff6 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002fd0:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <menu+0x1f58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002fd8:	4a54      	ldr	r2, [pc, #336]	; (800312c <menu+0x1f94>)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f004 fe63 	bl	8007ca8 <lcd_print>
 8002fe2:	e008      	b.n	8002ff6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002fe4:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <menu+0x1f58>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d104      	bne.n	8002ff6 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002fec:	4a50      	ldr	r2, [pc, #320]	; (8003130 <menu+0x1f98>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f004 fe59 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	483f      	ldr	r0, [pc, #252]	; (80030f8 <menu+0x1f60>)
 8002ffa:	f006 f97b 	bl	80092f4 <HAL_GPIO_ReadPin>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	d115      	bne.n	8003030 <menu+0x1e98>
 8003004:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <menu+0x1f64>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	f083 0301 	eor.w	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00e      	beq.n	8003030 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003012:	4b41      	ldr	r3, [pc, #260]	; (8003118 <menu+0x1f80>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b3f      	ldr	r3, [pc, #252]	; (8003118 <menu+0x1f80>)
 800301c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <menu+0x1f80>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d902      	bls.n	800302c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003026:	4b3c      	ldr	r3, [pc, #240]	; (8003118 <menu+0x1f80>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800302c:	f001 fd4c 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003030:	2104      	movs	r1, #4
 8003032:	4831      	ldr	r0, [pc, #196]	; (80030f8 <menu+0x1f60>)
 8003034:	f006 f95e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d115      	bne.n	800306a <menu+0x1ed2>
 800303e:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <menu+0x1f64>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	f083 0301 	eor.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800304c:	4b32      	ldr	r3, [pc, #200]	; (8003118 <menu+0x1f80>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <menu+0x1f80>)
 8003056:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003058:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <menu+0x1f80>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d902      	bls.n	8003066 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003060:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <menu+0x1f80>)
 8003062:	2202      	movs	r2, #2
 8003064:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003066:	f001 fd2f 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800306a:	2108      	movs	r1, #8
 800306c:	4822      	ldr	r0, [pc, #136]	; (80030f8 <menu+0x1f60>)
 800306e:	f006 f941 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d127      	bne.n	80030c8 <menu+0x1f30>
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <menu+0x1f64>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	f083 0301 	eor.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d020      	beq.n	80030c8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <menu+0x1f80>)
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <menu+0x1f6c>)
 800308c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <menu+0x1f80>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d003      	beq.n	800309e <menu+0x1f06>
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <menu+0x1f80>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d106      	bne.n	80030ac <menu+0x1f14>
				calismaSekli = 0;
 800309e:	4b25      	ldr	r3, [pc, #148]	; (8003134 <menu+0x1f9c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80030a4:	4b23      	ldr	r3, [pc, #140]	; (8003134 <menu+0x1f9c>)
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <menu+0x1f6c>)
 80030aa:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <menu+0x1f80>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d106      	bne.n	80030c2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <menu+0x1fa0>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80030ba:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <menu+0x1fa0>)
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <menu+0x1f6c>)
 80030c0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <menu+0x1f70>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80030c8:	4b10      	ldr	r3, [pc, #64]	; (800310c <menu+0x1f74>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b12      	cmp	r3, #18
 80030ce:	f040 80d5 	bne.w	800327c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <menu+0x1f80>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d13c      	bne.n	8003154 <menu+0x1fbc>
			if(dilSecim == 0) {
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <menu+0x1f58>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d12e      	bne.n	8003140 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <menu+0x1fa4>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	2001      	movs	r0, #1
 80030e8:	f004 fdde 	bl	8007ca8 <lcd_print>
 80030ec:	e048      	b.n	8003180 <menu+0x1fe8>
 80030ee:	bf00      	nop
 80030f0:	20000241 	.word	0x20000241
 80030f4:	0800d324 	.word	0x0800d324
 80030f8:	40010800 	.word	0x40010800
 80030fc:	2000024f 	.word	0x2000024f
 8003100:	2000022e 	.word	0x2000022e
 8003104:	20000118 	.word	0x20000118
 8003108:	2000024c 	.word	0x2000024c
 800310c:	20000220 	.word	0x20000220
 8003110:	0800d6a0 	.word	0x0800d6a0
 8003114:	0800d6b4 	.word	0x0800d6b4
 8003118:	2000022f 	.word	0x2000022f
 800311c:	0800d6c8 	.word	0x0800d6c8
 8003120:	0800d6d8 	.word	0x0800d6d8
 8003124:	0800d6e8 	.word	0x0800d6e8
 8003128:	0800d6f8 	.word	0x0800d6f8
 800312c:	0800d2b0 	.word	0x0800d2b0
 8003130:	0800d2c4 	.word	0x0800d2c4
 8003134:	20000221 	.word	0x20000221
 8003138:	20000232 	.word	0x20000232
 800313c:	0800d708 	.word	0x0800d708
			} else if(dilSecim == 1) {
 8003140:	4b7b      	ldr	r3, [pc, #492]	; (8003330 <menu+0x2198>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d11b      	bne.n	8003180 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003148:	4a7a      	ldr	r2, [pc, #488]	; (8003334 <menu+0x219c>)
 800314a:	2101      	movs	r1, #1
 800314c:	2001      	movs	r0, #1
 800314e:	f004 fdab 	bl	8007ca8 <lcd_print>
 8003152:	e015      	b.n	8003180 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003154:	4b78      	ldr	r3, [pc, #480]	; (8003338 <menu+0x21a0>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d111      	bne.n	8003180 <menu+0x1fe8>
			if(dilSecim == 0){
 800315c:	4b74      	ldr	r3, [pc, #464]	; (8003330 <menu+0x2198>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d104      	bne.n	800316e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003164:	4a75      	ldr	r2, [pc, #468]	; (800333c <menu+0x21a4>)
 8003166:	2101      	movs	r1, #1
 8003168:	2001      	movs	r0, #1
 800316a:	f004 fd9d 	bl	8007ca8 <lcd_print>
			}
			if(dilSecim == 1){
 800316e:	4b70      	ldr	r3, [pc, #448]	; (8003330 <menu+0x2198>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d104      	bne.n	8003180 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003176:	4a72      	ldr	r2, [pc, #456]	; (8003340 <menu+0x21a8>)
 8003178:	2101      	movs	r1, #1
 800317a:	2001      	movs	r0, #1
 800317c:	f004 fd94 	bl	8007ca8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003180:	4b70      	ldr	r3, [pc, #448]	; (8003344 <menu+0x21ac>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d113      	bne.n	80031b0 <menu+0x2018>
			if(dilSecim == 0) {
 8003188:	4b69      	ldr	r3, [pc, #420]	; (8003330 <menu+0x2198>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003190:	4a6d      	ldr	r2, [pc, #436]	; (8003348 <menu+0x21b0>)
 8003192:	2101      	movs	r1, #1
 8003194:	2002      	movs	r0, #2
 8003196:	f004 fd87 	bl	8007ca8 <lcd_print>
 800319a:	e020      	b.n	80031de <menu+0x2046>
			} else if(dilSecim == 1){
 800319c:	4b64      	ldr	r3, [pc, #400]	; (8003330 <menu+0x2198>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d11c      	bne.n	80031de <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80031a4:	4a69      	ldr	r2, [pc, #420]	; (800334c <menu+0x21b4>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2002      	movs	r0, #2
 80031aa:	f004 fd7d 	bl	8007ca8 <lcd_print>
 80031ae:	e016      	b.n	80031de <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80031b0:	4b64      	ldr	r3, [pc, #400]	; (8003344 <menu+0x21ac>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d112      	bne.n	80031de <menu+0x2046>
			if(dilSecim == 0){
 80031b8:	4b5d      	ldr	r3, [pc, #372]	; (8003330 <menu+0x2198>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80031c0:	4a63      	ldr	r2, [pc, #396]	; (8003350 <menu+0x21b8>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2002      	movs	r0, #2
 80031c6:	f004 fd6f 	bl	8007ca8 <lcd_print>
 80031ca:	e008      	b.n	80031de <menu+0x2046>
			} else if(dilSecim == 1){
 80031cc:	4b58      	ldr	r3, [pc, #352]	; (8003330 <menu+0x2198>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d104      	bne.n	80031de <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80031d4:	4a5f      	ldr	r2, [pc, #380]	; (8003354 <menu+0x21bc>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	2002      	movs	r0, #2
 80031da:	f004 fd65 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031de:	2102      	movs	r1, #2
 80031e0:	485d      	ldr	r0, [pc, #372]	; (8003358 <menu+0x21c0>)
 80031e2:	f006 f887 	bl	80092f4 <HAL_GPIO_ReadPin>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d115      	bne.n	8003218 <menu+0x2080>
 80031ec:	4b5b      	ldr	r3, [pc, #364]	; (800335c <menu+0x21c4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	f083 0301 	eor.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80031fa:	4b52      	ldr	r3, [pc, #328]	; (8003344 <menu+0x21ac>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	3301      	adds	r3, #1
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4b50      	ldr	r3, [pc, #320]	; (8003344 <menu+0x21ac>)
 8003204:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003206:	4b4f      	ldr	r3, [pc, #316]	; (8003344 <menu+0x21ac>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d902      	bls.n	8003214 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800320e:	4b4d      	ldr	r3, [pc, #308]	; (8003344 <menu+0x21ac>)
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003214:	f001 fc58 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003218:	2104      	movs	r1, #4
 800321a:	484f      	ldr	r0, [pc, #316]	; (8003358 <menu+0x21c0>)
 800321c:	f006 f86a 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003220:	4603      	mov	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d115      	bne.n	8003252 <menu+0x20ba>
 8003226:	4b4d      	ldr	r3, [pc, #308]	; (800335c <menu+0x21c4>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	f083 0301 	eor.w	r3, r3, #1
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00e      	beq.n	8003252 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003234:	4b43      	ldr	r3, [pc, #268]	; (8003344 <menu+0x21ac>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	3b01      	subs	r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b41      	ldr	r3, [pc, #260]	; (8003344 <menu+0x21ac>)
 800323e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003240:	4b40      	ldr	r3, [pc, #256]	; (8003344 <menu+0x21ac>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003248:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <menu+0x21ac>)
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800324e:	f001 fc3b 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003252:	2108      	movs	r1, #8
 8003254:	4840      	ldr	r0, [pc, #256]	; (8003358 <menu+0x21c0>)
 8003256:	f006 f84d 	bl	80092f4 <HAL_GPIO_ReadPin>
 800325a:	4603      	mov	r3, r0
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10d      	bne.n	800327c <menu+0x20e4>
 8003260:	4b3e      	ldr	r3, [pc, #248]	; (800335c <menu+0x21c4>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	f083 0301 	eor.w	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800326e:	4b35      	ldr	r3, [pc, #212]	; (8003344 <menu+0x21ac>)
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <menu+0x21c8>)
 8003274:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003276:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <menu+0x21cc>)
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <menu+0x21d0>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b13      	cmp	r3, #19
 8003282:	f040 80d5 	bne.w	8003430 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003286:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <menu+0x21a0>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d113      	bne.n	80032b6 <menu+0x211e>
			if(dilSecim == 0) {
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <menu+0x2198>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003296:	4a35      	ldr	r2, [pc, #212]	; (800336c <menu+0x21d4>)
 8003298:	2101      	movs	r1, #1
 800329a:	2001      	movs	r0, #1
 800329c:	f004 fd04 	bl	8007ca8 <lcd_print>
 80032a0:	e01f      	b.n	80032e2 <menu+0x214a>
			} else if(dilSecim == 1) {
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <menu+0x2198>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d11b      	bne.n	80032e2 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80032aa:	4a31      	ldr	r2, [pc, #196]	; (8003370 <menu+0x21d8>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	2001      	movs	r0, #1
 80032b0:	f004 fcfa 	bl	8007ca8 <lcd_print>
 80032b4:	e015      	b.n	80032e2 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <menu+0x21a0>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d111      	bne.n	80032e2 <menu+0x214a>
			if(dilSecim == 0) {
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <menu+0x2198>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <menu+0x21dc>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	2001      	movs	r0, #1
 80032cc:	f004 fcec 	bl	8007ca8 <lcd_print>
			}
			if(dilSecim == 1) {
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <menu+0x2198>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d104      	bne.n	80032e2 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80032d8:	4a27      	ldr	r2, [pc, #156]	; (8003378 <menu+0x21e0>)
 80032da:	2101      	movs	r1, #1
 80032dc:	2001      	movs	r0, #1
 80032de:	f004 fce3 	bl	8007ca8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <menu+0x21e4>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <menu+0x217a>
			if(dilSecim == 0) {
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <menu+0x2198>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <menu+0x21b0>)
 80032f4:	2101      	movs	r1, #1
 80032f6:	2002      	movs	r0, #2
 80032f8:	f004 fcd6 	bl	8007ca8 <lcd_print>
 80032fc:	e049      	b.n	8003392 <menu+0x21fa>
			} else if(dilSecim == 1) {
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <menu+0x2198>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d145      	bne.n	8003392 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003306:	4a11      	ldr	r2, [pc, #68]	; (800334c <menu+0x21b4>)
 8003308:	2101      	movs	r1, #1
 800330a:	2002      	movs	r0, #2
 800330c:	f004 fccc 	bl	8007ca8 <lcd_print>
 8003310:	e03f      	b.n	8003392 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <menu+0x21e4>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d13b      	bne.n	8003392 <menu+0x21fa>
			if(dilSecim == 0) {
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <menu+0x2198>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d12e      	bne.n	8003380 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <menu+0x21b8>)
 8003324:	2101      	movs	r1, #1
 8003326:	2002      	movs	r0, #2
 8003328:	f004 fcbe 	bl	8007ca8 <lcd_print>
 800332c:	e031      	b.n	8003392 <menu+0x21fa>
 800332e:	bf00      	nop
 8003330:	20000241 	.word	0x20000241
 8003334:	0800d71c 	.word	0x0800d71c
 8003338:	2000022f 	.word	0x2000022f
 800333c:	0800d72c 	.word	0x0800d72c
 8003340:	0800d740 	.word	0x0800d740
 8003344:	20000230 	.word	0x20000230
 8003348:	0800d2b0 	.word	0x0800d2b0
 800334c:	0800d2c4 	.word	0x0800d2c4
 8003350:	0800d310 	.word	0x0800d310
 8003354:	0800d324 	.word	0x0800d324
 8003358:	40010800 	.word	0x40010800
 800335c:	2000024f 	.word	0x2000024f
 8003360:	20000118 	.word	0x20000118
 8003364:	2000024c 	.word	0x2000024c
 8003368:	20000220 	.word	0x20000220
 800336c:	0800d754 	.word	0x0800d754
 8003370:	0800d768 	.word	0x0800d768
 8003374:	0800d77c 	.word	0x0800d77c
 8003378:	0800d790 	.word	0x0800d790
 800337c:	20000231 	.word	0x20000231
			} else if(dilSecim == 1) {
 8003380:	4b90      	ldr	r3, [pc, #576]	; (80035c4 <menu+0x242c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d104      	bne.n	8003392 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003388:	4a8f      	ldr	r2, [pc, #572]	; (80035c8 <menu+0x2430>)
 800338a:	2101      	movs	r1, #1
 800338c:	2002      	movs	r0, #2
 800338e:	f004 fc8b 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003392:	2102      	movs	r1, #2
 8003394:	488d      	ldr	r0, [pc, #564]	; (80035cc <menu+0x2434>)
 8003396:	f005 ffad 	bl	80092f4 <HAL_GPIO_ReadPin>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d115      	bne.n	80033cc <menu+0x2234>
 80033a0:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <menu+0x2438>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f083 0301 	eor.w	r3, r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00e      	beq.n	80033cc <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80033ae:	4b89      	ldr	r3, [pc, #548]	; (80035d4 <menu+0x243c>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4b87      	ldr	r3, [pc, #540]	; (80035d4 <menu+0x243c>)
 80033b8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80033ba:	4b86      	ldr	r3, [pc, #536]	; (80035d4 <menu+0x243c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d902      	bls.n	80033c8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80033c2:	4b84      	ldr	r3, [pc, #528]	; (80035d4 <menu+0x243c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033c8:	f001 fb7e 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033cc:	2104      	movs	r1, #4
 80033ce:	487f      	ldr	r0, [pc, #508]	; (80035cc <menu+0x2434>)
 80033d0:	f005 ff90 	bl	80092f4 <HAL_GPIO_ReadPin>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d115      	bne.n	8003406 <menu+0x226e>
 80033da:	4b7d      	ldr	r3, [pc, #500]	; (80035d0 <menu+0x2438>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	f083 0301 	eor.w	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80033e8:	4b7a      	ldr	r3, [pc, #488]	; (80035d4 <menu+0x243c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b78      	ldr	r3, [pc, #480]	; (80035d4 <menu+0x243c>)
 80033f2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80033f4:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <menu+0x243c>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80033fc:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <menu+0x243c>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003402:	f001 fb61 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003406:	2108      	movs	r1, #8
 8003408:	4870      	ldr	r0, [pc, #448]	; (80035cc <menu+0x2434>)
 800340a:	f005 ff73 	bl	80092f4 <HAL_GPIO_ReadPin>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	d10d      	bne.n	8003430 <menu+0x2298>
 8003414:	4b6e      	ldr	r3, [pc, #440]	; (80035d0 <menu+0x2438>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f083 0301 	eor.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003422:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <menu+0x243c>)
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	4b6c      	ldr	r3, [pc, #432]	; (80035d8 <menu+0x2440>)
 8003428:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800342a:	4b6c      	ldr	r3, [pc, #432]	; (80035dc <menu+0x2444>)
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003430:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <menu+0x2448>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b14      	cmp	r3, #20
 8003436:	f040 80b5 	bne.w	80035a4 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800343a:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <menu+0x244c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d113      	bne.n	800346a <menu+0x22d2>
			if(dilSecim == 0) {
 8003442:	4b60      	ldr	r3, [pc, #384]	; (80035c4 <menu+0x242c>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800344a:	4a67      	ldr	r2, [pc, #412]	; (80035e8 <menu+0x2450>)
 800344c:	2101      	movs	r1, #1
 800344e:	2001      	movs	r0, #1
 8003450:	f004 fc2a 	bl	8007ca8 <lcd_print>
 8003454:	e020      	b.n	8003498 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003456:	4b5b      	ldr	r3, [pc, #364]	; (80035c4 <menu+0x242c>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d11c      	bne.n	8003498 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800345e:	4a63      	ldr	r2, [pc, #396]	; (80035ec <menu+0x2454>)
 8003460:	2101      	movs	r1, #1
 8003462:	2001      	movs	r0, #1
 8003464:	f004 fc20 	bl	8007ca8 <lcd_print>
 8003468:	e016      	b.n	8003498 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800346a:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <menu+0x244c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d112      	bne.n	8003498 <menu+0x2300>
			if(dilSecim == 0) {
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <menu+0x242c>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800347a:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <menu+0x2458>)
 800347c:	2101      	movs	r1, #1
 800347e:	2001      	movs	r0, #1
 8003480:	f004 fc12 	bl	8007ca8 <lcd_print>
 8003484:	e008      	b.n	8003498 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003486:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <menu+0x242c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d104      	bne.n	8003498 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800348e:	4a59      	ldr	r2, [pc, #356]	; (80035f4 <menu+0x245c>)
 8003490:	2101      	movs	r1, #1
 8003492:	2001      	movs	r0, #1
 8003494:	f004 fc08 	bl	8007ca8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003498:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <menu+0x2460>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <menu+0x2330>
			if(dilSecim == 0) {
 80034a0:	4b48      	ldr	r3, [pc, #288]	; (80035c4 <menu+0x242c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <menu+0x2464>)
 80034aa:	2101      	movs	r1, #1
 80034ac:	2002      	movs	r0, #2
 80034ae:	f004 fbfb 	bl	8007ca8 <lcd_print>
 80034b2:	e020      	b.n	80034f6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <menu+0x242c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d11c      	bne.n	80034f6 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80034bc:	4a50      	ldr	r2, [pc, #320]	; (8003600 <menu+0x2468>)
 80034be:	2101      	movs	r1, #1
 80034c0:	2002      	movs	r0, #2
 80034c2:	f004 fbf1 	bl	8007ca8 <lcd_print>
 80034c6:	e016      	b.n	80034f6 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80034c8:	4b4b      	ldr	r3, [pc, #300]	; (80035f8 <menu+0x2460>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d112      	bne.n	80034f6 <menu+0x235e>
			if(dilSecim == 0) {
 80034d0:	4b3c      	ldr	r3, [pc, #240]	; (80035c4 <menu+0x242c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80034d8:	4a4a      	ldr	r2, [pc, #296]	; (8003604 <menu+0x246c>)
 80034da:	2101      	movs	r1, #1
 80034dc:	2002      	movs	r0, #2
 80034de:	f004 fbe3 	bl	8007ca8 <lcd_print>
 80034e2:	e008      	b.n	80034f6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80034e4:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <menu+0x242c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d104      	bne.n	80034f6 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80034ec:	4a46      	ldr	r2, [pc, #280]	; (8003608 <menu+0x2470>)
 80034ee:	2101      	movs	r1, #1
 80034f0:	2002      	movs	r0, #2
 80034f2:	f004 fbd9 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80034f6:	2102      	movs	r1, #2
 80034f8:	4834      	ldr	r0, [pc, #208]	; (80035cc <menu+0x2434>)
 80034fa:	f005 fefb 	bl	80092f4 <HAL_GPIO_ReadPin>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d119      	bne.n	8003538 <menu+0x23a0>
 8003504:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <menu+0x2438>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f083 0301 	eor.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d012      	beq.n	8003538 <menu+0x23a0>
 8003512:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <menu+0x244c>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d10e      	bne.n	8003538 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800351a:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <menu+0x2460>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <menu+0x2460>)
 8003524:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <menu+0x2460>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d902      	bls.n	8003534 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800352e:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <menu+0x2460>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003534:	f001 fac8 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003538:	2104      	movs	r1, #4
 800353a:	4824      	ldr	r0, [pc, #144]	; (80035cc <menu+0x2434>)
 800353c:	f005 feda 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003540:	4603      	mov	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d119      	bne.n	800357a <menu+0x23e2>
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <menu+0x2438>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	f083 0301 	eor.w	r3, r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d012      	beq.n	800357a <menu+0x23e2>
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <menu+0x244c>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d10e      	bne.n	800357a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <menu+0x2460>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <menu+0x2460>)
 8003566:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003568:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <menu+0x2460>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <menu+0x2460>)
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003576:	f001 faa7 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800357a:	2108      	movs	r1, #8
 800357c:	4813      	ldr	r0, [pc, #76]	; (80035cc <menu+0x2434>)
 800357e:	f005 feb9 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003582:	4603      	mov	r3, r0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10d      	bne.n	80035a4 <menu+0x240c>
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <menu+0x2438>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f083 0301 	eor.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <menu+0x2460>)
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <menu+0x2440>)
 800359c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <menu+0x2444>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <menu+0x2448>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b15      	cmp	r3, #21
 80035aa:	f040 80c2 	bne.w	8003732 <menu+0x259a>
		if(dilSecim == 0) {
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <menu+0x242c>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d12c      	bne.n	8003610 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80035b6:	4a15      	ldr	r2, [pc, #84]	; (800360c <menu+0x2474>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	2001      	movs	r0, #1
 80035bc:	f004 fb74 	bl	8007ca8 <lcd_print>
 80035c0:	e02f      	b.n	8003622 <menu+0x248a>
 80035c2:	bf00      	nop
 80035c4:	20000241 	.word	0x20000241
 80035c8:	0800d324 	.word	0x0800d324
 80035cc:	40010800 	.word	0x40010800
 80035d0:	2000024f 	.word	0x2000024f
 80035d4:	20000231 	.word	0x20000231
 80035d8:	20000118 	.word	0x20000118
 80035dc:	2000024c 	.word	0x2000024c
 80035e0:	20000220 	.word	0x20000220
 80035e4:	2000022f 	.word	0x2000022f
 80035e8:	0800d7a4 	.word	0x0800d7a4
 80035ec:	0800d7b8 	.word	0x0800d7b8
 80035f0:	0800d7cc 	.word	0x0800d7cc
 80035f4:	0800d7e0 	.word	0x0800d7e0
 80035f8:	20000232 	.word	0x20000232
 80035fc:	0800d7f4 	.word	0x0800d7f4
 8003600:	0800d808 	.word	0x0800d808
 8003604:	0800d818 	.word	0x0800d818
 8003608:	0800d82c 	.word	0x0800d82c
 800360c:	0800d83c 	.word	0x0800d83c
		} else if(dilSecim == 1) {
 8003610:	4b9c      	ldr	r3, [pc, #624]	; (8003884 <menu+0x26ec>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d104      	bne.n	8003622 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003618:	4a9b      	ldr	r2, [pc, #620]	; (8003888 <menu+0x26f0>)
 800361a:	2101      	movs	r1, #1
 800361c:	2001      	movs	r0, #1
 800361e:	f004 fb43 	bl	8007ca8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003622:	4b9a      	ldr	r3, [pc, #616]	; (800388c <menu+0x26f4>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d112      	bne.n	8003650 <menu+0x24b8>
			if(dilSecim == 0) {
 800362a:	4b96      	ldr	r3, [pc, #600]	; (8003884 <menu+0x26ec>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003632:	4a97      	ldr	r2, [pc, #604]	; (8003890 <menu+0x26f8>)
 8003634:	2101      	movs	r1, #1
 8003636:	2002      	movs	r0, #2
 8003638:	f004 fb36 	bl	8007ca8 <lcd_print>
			}
			if(dilSecim == 1) {
 800363c:	4b91      	ldr	r3, [pc, #580]	; (8003884 <menu+0x26ec>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d11c      	bne.n	800367e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003644:	4a93      	ldr	r2, [pc, #588]	; (8003894 <menu+0x26fc>)
 8003646:	2101      	movs	r1, #1
 8003648:	2002      	movs	r0, #2
 800364a:	f004 fb2d 	bl	8007ca8 <lcd_print>
 800364e:	e016      	b.n	800367e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003650:	4b8e      	ldr	r3, [pc, #568]	; (800388c <menu+0x26f4>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d112      	bne.n	800367e <menu+0x24e6>
			if(dilSecim == 0) {
 8003658:	4b8a      	ldr	r3, [pc, #552]	; (8003884 <menu+0x26ec>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003660:	4a8d      	ldr	r2, [pc, #564]	; (8003898 <menu+0x2700>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f004 fb1f 	bl	8007ca8 <lcd_print>
 800366a:	e008      	b.n	800367e <menu+0x24e6>
			} else if(dilSecim == 1) {
 800366c:	4b85      	ldr	r3, [pc, #532]	; (8003884 <menu+0x26ec>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d104      	bne.n	800367e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003674:	4a89      	ldr	r2, [pc, #548]	; (800389c <menu+0x2704>)
 8003676:	2101      	movs	r1, #1
 8003678:	2002      	movs	r0, #2
 800367a:	f004 fb15 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800367e:	2102      	movs	r1, #2
 8003680:	4887      	ldr	r0, [pc, #540]	; (80038a0 <menu+0x2708>)
 8003682:	f005 fe37 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003686:	4603      	mov	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d115      	bne.n	80036b8 <menu+0x2520>
 800368c:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <menu+0x270c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	f083 0301 	eor.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800369a:	4b7c      	ldr	r3, [pc, #496]	; (800388c <menu+0x26f4>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b7a      	ldr	r3, [pc, #488]	; (800388c <menu+0x26f4>)
 80036a4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80036a6:	4b79      	ldr	r3, [pc, #484]	; (800388c <menu+0x26f4>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d902      	bls.n	80036b4 <menu+0x251c>
				platformSilindirTipi = 0;
 80036ae:	4b77      	ldr	r3, [pc, #476]	; (800388c <menu+0x26f4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036b4:	f001 fa08 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b8:	2104      	movs	r1, #4
 80036ba:	4879      	ldr	r0, [pc, #484]	; (80038a0 <menu+0x2708>)
 80036bc:	f005 fe1a 	bl	80092f4 <HAL_GPIO_ReadPin>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d115      	bne.n	80036f2 <menu+0x255a>
 80036c6:	4b77      	ldr	r3, [pc, #476]	; (80038a4 <menu+0x270c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	f083 0301 	eor.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80036d4:	4b6d      	ldr	r3, [pc, #436]	; (800388c <menu+0x26f4>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	3b01      	subs	r3, #1
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	4b6b      	ldr	r3, [pc, #428]	; (800388c <menu+0x26f4>)
 80036de:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80036e0:	4b6a      	ldr	r3, [pc, #424]	; (800388c <menu+0x26f4>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <menu+0x2556>
		   		platformSilindirTipi = 1;
 80036e8:	4b68      	ldr	r3, [pc, #416]	; (800388c <menu+0x26f4>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036ee:	f001 f9eb 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f2:	2108      	movs	r1, #8
 80036f4:	486a      	ldr	r0, [pc, #424]	; (80038a0 <menu+0x2708>)
 80036f6:	f005 fdfd 	bl	80092f4 <HAL_GPIO_ReadPin>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d118      	bne.n	8003732 <menu+0x259a>
 8003700:	4b68      	ldr	r3, [pc, #416]	; (80038a4 <menu+0x270c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	f083 0301 	eor.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <menu+0x26f4>)
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <menu+0x2710>)
 8003714:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003716:	4b5d      	ldr	r3, [pc, #372]	; (800388c <menu+0x26f4>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d106      	bne.n	800372c <menu+0x2594>
				altLimit = 1;
 800371e:	4b63      	ldr	r3, [pc, #396]	; (80038ac <menu+0x2714>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003724:	4b61      	ldr	r3, [pc, #388]	; (80038ac <menu+0x2714>)
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <menu+0x2710>)
 800372a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800372c:	4b60      	ldr	r3, [pc, #384]	; (80038b0 <menu+0x2718>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003732:	4b60      	ldr	r3, [pc, #384]	; (80038b4 <menu+0x271c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b16      	cmp	r3, #22
 8003738:	f040 8081 	bne.w	800383e <menu+0x26a6>
		if(dilSecim == 0) {
 800373c:	4b51      	ldr	r3, [pc, #324]	; (8003884 <menu+0x26ec>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003744:	4a5c      	ldr	r2, [pc, #368]	; (80038b8 <menu+0x2720>)
 8003746:	2101      	movs	r1, #1
 8003748:	2001      	movs	r0, #1
 800374a:	f004 faad 	bl	8007ca8 <lcd_print>
 800374e:	e008      	b.n	8003762 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <menu+0x26ec>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d104      	bne.n	8003762 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003758:	4a58      	ldr	r2, [pc, #352]	; (80038bc <menu+0x2724>)
 800375a:	2101      	movs	r1, #1
 800375c:	2001      	movs	r0, #1
 800375e:	f004 faa3 	bl	8007ca8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003762:	4b48      	ldr	r3, [pc, #288]	; (8003884 <menu+0x26ec>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800376a:	4a55      	ldr	r2, [pc, #340]	; (80038c0 <menu+0x2728>)
 800376c:	2101      	movs	r1, #1
 800376e:	2002      	movs	r0, #2
 8003770:	f004 fa9a 	bl	8007ca8 <lcd_print>
 8003774:	e008      	b.n	8003788 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003776:	4b43      	ldr	r3, [pc, #268]	; (8003884 <menu+0x26ec>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d104      	bne.n	8003788 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800377e:	4a51      	ldr	r2, [pc, #324]	; (80038c4 <menu+0x272c>)
 8003780:	2101      	movs	r1, #1
 8003782:	2002      	movs	r0, #2
 8003784:	f004 fa90 	bl	8007ca8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003788:	4b4f      	ldr	r3, [pc, #316]	; (80038c8 <menu+0x2730>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	220a      	movs	r2, #10
 800378e:	494f      	ldr	r1, [pc, #316]	; (80038cc <menu+0x2734>)
 8003790:	4618      	mov	r0, r3
 8003792:	f008 fddb 	bl	800c34c <itoa>
		lcd_print(2,16,snum);
 8003796:	4a4d      	ldr	r2, [pc, #308]	; (80038cc <menu+0x2734>)
 8003798:	2110      	movs	r1, #16
 800379a:	2002      	movs	r0, #2
 800379c:	f004 fa84 	bl	8007ca8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037a0:	2102      	movs	r1, #2
 80037a2:	483f      	ldr	r0, [pc, #252]	; (80038a0 <menu+0x2708>)
 80037a4:	f005 fda6 	bl	80092f4 <HAL_GPIO_ReadPin>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d115      	bne.n	80037da <menu+0x2642>
 80037ae:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <menu+0x270c>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80037bc:	4b42      	ldr	r3, [pc, #264]	; (80038c8 <menu+0x2730>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <menu+0x2730>)
 80037c6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80037c8:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <menu+0x2730>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	d902      	bls.n	80037d6 <menu+0x263e>
				yukariValfTmr = 0;
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <menu+0x2730>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037d6:	f001 f977 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037da:	2104      	movs	r1, #4
 80037dc:	4830      	ldr	r0, [pc, #192]	; (80038a0 <menu+0x2708>)
 80037de:	f005 fd89 	bl	80092f4 <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d115      	bne.n	8003814 <menu+0x267c>
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <menu+0x270c>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	f083 0301 	eor.w	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80037f6:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <menu+0x2730>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <menu+0x2730>)
 8003800:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <menu+0x2730>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b06      	cmp	r3, #6
 8003808:	d902      	bls.n	8003810 <menu+0x2678>
		   		yukariValfTmr = 5;
 800380a:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <menu+0x2730>)
 800380c:	2205      	movs	r2, #5
 800380e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003810:	f001 f95a 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003814:	2108      	movs	r1, #8
 8003816:	4822      	ldr	r0, [pc, #136]	; (80038a0 <menu+0x2708>)
 8003818:	f005 fd6c 	bl	80092f4 <HAL_GPIO_ReadPin>
 800381c:	4603      	mov	r3, r0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10d      	bne.n	800383e <menu+0x26a6>
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <menu+0x270c>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	f083 0301 	eor.w	r3, r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <menu+0x2730>)
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <menu+0x2710>)
 8003836:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003838:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <menu+0x2718>)
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800383e:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <menu+0x271c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b17      	cmp	r3, #23
 8003844:	f040 80ac 	bne.w	80039a0 <menu+0x2808>
		if(dilSecim == 0) {
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <menu+0x26ec>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003850:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <menu+0x2738>)
 8003852:	2101      	movs	r1, #1
 8003854:	2001      	movs	r0, #1
 8003856:	f004 fa27 	bl	8007ca8 <lcd_print>
 800385a:	e008      	b.n	800386e <menu+0x26d6>
		} else if(dilSecim == 1) {
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <menu+0x26ec>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d104      	bne.n	800386e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <menu+0x273c>)
 8003866:	2101      	movs	r1, #1
 8003868:	2001      	movs	r0, #1
 800386a:	f004 fa1d 	bl	8007ca8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <menu+0x26ec>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d130      	bne.n	80038d8 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <menu+0x2728>)
 8003878:	2101      	movs	r1, #1
 800387a:	2002      	movs	r0, #2
 800387c:	f004 fa14 	bl	8007ca8 <lcd_print>
 8003880:	e033      	b.n	80038ea <menu+0x2752>
 8003882:	bf00      	nop
 8003884:	20000241 	.word	0x20000241
 8003888:	0800d850 	.word	0x0800d850
 800388c:	20000233 	.word	0x20000233
 8003890:	0800d7f4 	.word	0x0800d7f4
 8003894:	0800d808 	.word	0x0800d808
 8003898:	0800d818 	.word	0x0800d818
 800389c:	0800d82c 	.word	0x0800d82c
 80038a0:	40010800 	.word	0x40010800
 80038a4:	2000024f 	.word	0x2000024f
 80038a8:	20000118 	.word	0x20000118
 80038ac:	20000226 	.word	0x20000226
 80038b0:	2000024c 	.word	0x2000024c
 80038b4:	20000220 	.word	0x20000220
 80038b8:	0800d860 	.word	0x0800d860
 80038bc:	0800d874 	.word	0x0800d874
 80038c0:	0800d514 	.word	0x0800d514
 80038c4:	0800d888 	.word	0x0800d888
 80038c8:	20000234 	.word	0x20000234
 80038cc:	20000188 	.word	0x20000188
 80038d0:	0800d898 	.word	0x0800d898
 80038d4:	0800d8ac 	.word	0x0800d8ac
			} else if(dilSecim == 1) {
 80038d8:	4b98      	ldr	r3, [pc, #608]	; (8003b3c <menu+0x29a4>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d104      	bne.n	80038ea <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80038e0:	4a97      	ldr	r2, [pc, #604]	; (8003b40 <menu+0x29a8>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	2002      	movs	r0, #2
 80038e6:	f004 f9df 	bl	8007ca8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80038ea:	4b96      	ldr	r3, [pc, #600]	; (8003b44 <menu+0x29ac>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	220a      	movs	r2, #10
 80038f0:	4995      	ldr	r1, [pc, #596]	; (8003b48 <menu+0x29b0>)
 80038f2:	4618      	mov	r0, r3
 80038f4:	f008 fd2a 	bl	800c34c <itoa>
		lcd_print(2,16,snum);
 80038f8:	4a93      	ldr	r2, [pc, #588]	; (8003b48 <menu+0x29b0>)
 80038fa:	2110      	movs	r1, #16
 80038fc:	2002      	movs	r0, #2
 80038fe:	f004 f9d3 	bl	8007ca8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003902:	2102      	movs	r1, #2
 8003904:	4891      	ldr	r0, [pc, #580]	; (8003b4c <menu+0x29b4>)
 8003906:	f005 fcf5 	bl	80092f4 <HAL_GPIO_ReadPin>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d115      	bne.n	800393c <menu+0x27a4>
 8003910:	4b8f      	ldr	r3, [pc, #572]	; (8003b50 <menu+0x29b8>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	f083 0301 	eor.w	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00e      	beq.n	800393c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800391e:	4b89      	ldr	r3, [pc, #548]	; (8003b44 <menu+0x29ac>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4b87      	ldr	r3, [pc, #540]	; (8003b44 <menu+0x29ac>)
 8003928:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800392a:	4b86      	ldr	r3, [pc, #536]	; (8003b44 <menu+0x29ac>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d902      	bls.n	8003938 <menu+0x27a0>
				asagiValfTmr = 0;
 8003932:	4b84      	ldr	r3, [pc, #528]	; (8003b44 <menu+0x29ac>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003938:	f001 f8c6 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800393c:	2104      	movs	r1, #4
 800393e:	4883      	ldr	r0, [pc, #524]	; (8003b4c <menu+0x29b4>)
 8003940:	f005 fcd8 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d115      	bne.n	8003976 <menu+0x27de>
 800394a:	4b81      	ldr	r3, [pc, #516]	; (8003b50 <menu+0x29b8>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	f083 0301 	eor.w	r3, r3, #1
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003958:	4b7a      	ldr	r3, [pc, #488]	; (8003b44 <menu+0x29ac>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	b2da      	uxtb	r2, r3
 8003960:	4b78      	ldr	r3, [pc, #480]	; (8003b44 <menu+0x29ac>)
 8003962:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003964:	4b77      	ldr	r3, [pc, #476]	; (8003b44 <menu+0x29ac>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d902      	bls.n	8003972 <menu+0x27da>
		   		asagiValfTmr = 5;
 800396c:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <menu+0x29ac>)
 800396e:	2205      	movs	r2, #5
 8003970:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003972:	f001 f8a9 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003976:	2108      	movs	r1, #8
 8003978:	4874      	ldr	r0, [pc, #464]	; (8003b4c <menu+0x29b4>)
 800397a:	f005 fcbb 	bl	80092f4 <HAL_GPIO_ReadPin>
 800397e:	4603      	mov	r3, r0
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10d      	bne.n	80039a0 <menu+0x2808>
 8003984:	4b72      	ldr	r3, [pc, #456]	; (8003b50 <menu+0x29b8>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	f083 0301 	eor.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003992:	4b6c      	ldr	r3, [pc, #432]	; (8003b44 <menu+0x29ac>)
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <menu+0x29bc>)
 8003998:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800399a:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <menu+0x29c0>)
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80039a0:	4b6e      	ldr	r3, [pc, #440]	; (8003b5c <menu+0x29c4>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b18      	cmp	r3, #24
 80039a6:	f040 809d 	bne.w	8003ae4 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80039aa:	4b6d      	ldr	r3, [pc, #436]	; (8003b60 <menu+0x29c8>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d113      	bne.n	80039da <menu+0x2842>
			if(dilSecim == 0) {
 80039b2:	4b62      	ldr	r3, [pc, #392]	; (8003b3c <menu+0x29a4>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80039ba:	4a6a      	ldr	r2, [pc, #424]	; (8003b64 <menu+0x29cc>)
 80039bc:	2101      	movs	r1, #1
 80039be:	2001      	movs	r0, #1
 80039c0:	f004 f972 	bl	8007ca8 <lcd_print>
 80039c4:	e020      	b.n	8003a08 <menu+0x2870>
			} else if(dilSecim == 1) {
 80039c6:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <menu+0x29a4>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d11c      	bne.n	8003a08 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80039ce:	4a66      	ldr	r2, [pc, #408]	; (8003b68 <menu+0x29d0>)
 80039d0:	2101      	movs	r1, #1
 80039d2:	2001      	movs	r0, #1
 80039d4:	f004 f968 	bl	8007ca8 <lcd_print>
 80039d8:	e016      	b.n	8003a08 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80039da:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <menu+0x29c8>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d112      	bne.n	8003a08 <menu+0x2870>
			if(dilSecim == 0) {
 80039e2:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <menu+0x29a4>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80039ea:	4a60      	ldr	r2, [pc, #384]	; (8003b6c <menu+0x29d4>)
 80039ec:	2101      	movs	r1, #1
 80039ee:	2001      	movs	r0, #1
 80039f0:	f004 f95a 	bl	8007ca8 <lcd_print>
 80039f4:	e008      	b.n	8003a08 <menu+0x2870>
			} else if(dilSecim == 1) {
 80039f6:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <menu+0x29a4>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d104      	bne.n	8003a08 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 80039fe:	4a5c      	ldr	r2, [pc, #368]	; (8003b70 <menu+0x29d8>)
 8003a00:	2101      	movs	r1, #1
 8003a02:	2001      	movs	r0, #1
 8003a04:	f004 f950 	bl	8007ca8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <menu+0x29a4>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <menu+0x29dc>)
 8003a12:	2101      	movs	r1, #1
 8003a14:	2002      	movs	r0, #2
 8003a16:	f004 f947 	bl	8007ca8 <lcd_print>
 8003a1a:	e008      	b.n	8003a2e <menu+0x2896>
			} else if(dilSecim == 1) {
 8003a1c:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <menu+0x29a4>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d104      	bne.n	8003a2e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003a24:	4a46      	ldr	r2, [pc, #280]	; (8003b40 <menu+0x29a8>)
 8003a26:	2101      	movs	r1, #1
 8003a28:	2002      	movs	r0, #2
 8003a2a:	f004 f93d 	bl	8007ca8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003a2e:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <menu+0x29e0>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	220a      	movs	r2, #10
 8003a34:	4944      	ldr	r1, [pc, #272]	; (8003b48 <menu+0x29b0>)
 8003a36:	4618      	mov	r0, r3
 8003a38:	f008 fc88 	bl	800c34c <itoa>
		lcd_print(2, 16, snum);
 8003a3c:	4a42      	ldr	r2, [pc, #264]	; (8003b48 <menu+0x29b0>)
 8003a3e:	2110      	movs	r1, #16
 8003a40:	2002      	movs	r0, #2
 8003a42:	f004 f931 	bl	8007ca8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a46:	2102      	movs	r1, #2
 8003a48:	4840      	ldr	r0, [pc, #256]	; (8003b4c <menu+0x29b4>)
 8003a4a:	f005 fc53 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d115      	bne.n	8003a80 <menu+0x28e8>
 8003a54:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <menu+0x29b8>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	f083 0301 	eor.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00e      	beq.n	8003a80 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003a62:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <menu+0x29e0>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4b43      	ldr	r3, [pc, #268]	; (8003b78 <menu+0x29e0>)
 8003a6c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <menu+0x29e0>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b05      	cmp	r3, #5
 8003a74:	d902      	bls.n	8003a7c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <menu+0x29e0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a7c:	f001 f824 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a80:	2104      	movs	r1, #4
 8003a82:	4832      	ldr	r0, [pc, #200]	; (8003b4c <menu+0x29b4>)
 8003a84:	f005 fc36 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d115      	bne.n	8003aba <menu+0x2922>
 8003a8e:	4b30      	ldr	r3, [pc, #192]	; (8003b50 <menu+0x29b8>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	f083 0301 	eor.w	r3, r3, #1
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <menu+0x29e0>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b34      	ldr	r3, [pc, #208]	; (8003b78 <menu+0x29e0>)
 8003aa6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003aa8:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <menu+0x29e0>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d902      	bls.n	8003ab6 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <menu+0x29e0>)
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ab6:	f001 f807 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aba:	2108      	movs	r1, #8
 8003abc:	4823      	ldr	r0, [pc, #140]	; (8003b4c <menu+0x29b4>)
 8003abe:	f005 fc19 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10d      	bne.n	8003ae4 <menu+0x294c>
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <menu+0x29b8>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003ad6:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <menu+0x29e0>)
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <menu+0x29bc>)
 8003adc:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <menu+0x29c0>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <menu+0x29c4>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b19      	cmp	r3, #25
 8003aea:	f040 80c4 	bne.w	8003c76 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003aee:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <menu+0x29c8>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d113      	bne.n	8003b1e <menu+0x2986>
			if(dilSecim == 0) {
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <menu+0x29a4>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003afe:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <menu+0x29e4>)
 8003b00:	2101      	movs	r1, #1
 8003b02:	2001      	movs	r0, #1
 8003b04:	f004 f8d0 	bl	8007ca8 <lcd_print>
 8003b08:	e047      	b.n	8003b9a <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <menu+0x29a4>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d143      	bne.n	8003b9a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003b12:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <menu+0x29e8>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	2001      	movs	r0, #1
 8003b18:	f004 f8c6 	bl	8007ca8 <lcd_print>
 8003b1c:	e03d      	b.n	8003b9a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <menu+0x29c8>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d139      	bne.n	8003b9a <menu+0x2a02>
			if(dilSecim == 0) {
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <menu+0x29a4>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d12c      	bne.n	8003b88 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <menu+0x29ec>)
 8003b30:	2101      	movs	r1, #1
 8003b32:	2001      	movs	r0, #1
 8003b34:	f004 f8b8 	bl	8007ca8 <lcd_print>
 8003b38:	e02f      	b.n	8003b9a <menu+0x2a02>
 8003b3a:	bf00      	nop
 8003b3c:	20000241 	.word	0x20000241
 8003b40:	0800d888 	.word	0x0800d888
 8003b44:	20000235 	.word	0x20000235
 8003b48:	20000188 	.word	0x20000188
 8003b4c:	40010800 	.word	0x40010800
 8003b50:	2000024f 	.word	0x2000024f
 8003b54:	20000118 	.word	0x20000118
 8003b58:	2000024c 	.word	0x2000024c
 8003b5c:	20000220 	.word	0x20000220
 8003b60:	2000022f 	.word	0x2000022f
 8003b64:	0800d8c0 	.word	0x0800d8c0
 8003b68:	0800d8d4 	.word	0x0800d8d4
 8003b6c:	0800d8e8 	.word	0x0800d8e8
 8003b70:	0800d8fc 	.word	0x0800d8fc
 8003b74:	0800d514 	.word	0x0800d514
 8003b78:	20000236 	.word	0x20000236
 8003b7c:	0800d910 	.word	0x0800d910
 8003b80:	0800d924 	.word	0x0800d924
 8003b84:	0800d938 	.word	0x0800d938
			} else if(dilSecim == 1) {
 8003b88:	4b73      	ldr	r3, [pc, #460]	; (8003d58 <menu+0x2bc0>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d104      	bne.n	8003b9a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003b90:	4a72      	ldr	r2, [pc, #456]	; (8003d5c <menu+0x2bc4>)
 8003b92:	2101      	movs	r1, #1
 8003b94:	2001      	movs	r0, #1
 8003b96:	f004 f887 	bl	8007ca8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003b9a:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <menu+0x2bc0>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ba2:	4a6f      	ldr	r2, [pc, #444]	; (8003d60 <menu+0x2bc8>)
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	f004 f87e 	bl	8007ca8 <lcd_print>
 8003bac:	e008      	b.n	8003bc0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003bae:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <menu+0x2bc0>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d104      	bne.n	8003bc0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003bb6:	4a6b      	ldr	r2, [pc, #428]	; (8003d64 <menu+0x2bcc>)
 8003bb8:	2101      	movs	r1, #1
 8003bba:	2002      	movs	r0, #2
 8003bbc:	f004 f874 	bl	8007ca8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003bc0:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <menu+0x2bd0>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	220a      	movs	r2, #10
 8003bc6:	4969      	ldr	r1, [pc, #420]	; (8003d6c <menu+0x2bd4>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f008 fbbf 	bl	800c34c <itoa>
		lcd_print(2,16,snum);
 8003bce:	4a67      	ldr	r2, [pc, #412]	; (8003d6c <menu+0x2bd4>)
 8003bd0:	2110      	movs	r1, #16
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	f004 f868 	bl	8007ca8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bd8:	2102      	movs	r1, #2
 8003bda:	4865      	ldr	r0, [pc, #404]	; (8003d70 <menu+0x2bd8>)
 8003bdc:	f005 fb8a 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d115      	bne.n	8003c12 <menu+0x2a7a>
 8003be6:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <menu+0x2bdc>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f083 0301 	eor.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003bf4:	4b5c      	ldr	r3, [pc, #368]	; (8003d68 <menu+0x2bd0>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	4b5a      	ldr	r3, [pc, #360]	; (8003d68 <menu+0x2bd0>)
 8003bfe:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003c00:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <menu+0x2bd0>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	d902      	bls.n	8003c0e <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003c08:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <menu+0x2bd0>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c0e:	f000 ff5b 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c12:	2104      	movs	r1, #4
 8003c14:	4856      	ldr	r0, [pc, #344]	; (8003d70 <menu+0x2bd8>)
 8003c16:	f005 fb6d 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d115      	bne.n	8003c4c <menu+0x2ab4>
 8003c20:	4b54      	ldr	r3, [pc, #336]	; (8003d74 <menu+0x2bdc>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	f083 0301 	eor.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003c2e:	4b4e      	ldr	r3, [pc, #312]	; (8003d68 <menu+0x2bd0>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <menu+0x2bd0>)
 8003c38:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003c3a:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <menu+0x2bd0>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d902      	bls.n	8003c48 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003c42:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <menu+0x2bd0>)
 8003c44:	2205      	movs	r2, #5
 8003c46:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c48:	f000 ff3e 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c4c:	2108      	movs	r1, #8
 8003c4e:	4848      	ldr	r0, [pc, #288]	; (8003d70 <menu+0x2bd8>)
 8003c50:	f005 fb50 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d10d      	bne.n	8003c76 <menu+0x2ade>
 8003c5a:	4b46      	ldr	r3, [pc, #280]	; (8003d74 <menu+0x2bdc>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	f083 0301 	eor.w	r3, r3, #1
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003c68:	4b3f      	ldr	r3, [pc, #252]	; (8003d68 <menu+0x2bd0>)
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <menu+0x2be0>)
 8003c6e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003c70:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <menu+0x2be4>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003c76:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <menu+0x2be8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b1a      	cmp	r3, #26
 8003c7c:	f040 80ec 	bne.w	8003e58 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003c80:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <menu+0x2bc0>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003c88:	4a3e      	ldr	r2, [pc, #248]	; (8003d84 <menu+0x2bec>)
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f004 f80b 	bl	8007ca8 <lcd_print>
 8003c92:	e008      	b.n	8003ca6 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003c94:	4b30      	ldr	r3, [pc, #192]	; (8003d58 <menu+0x2bc0>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d104      	bne.n	8003ca6 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003c9c:	4a3a      	ldr	r2, [pc, #232]	; (8003d88 <menu+0x2bf0>)
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f004 f801 	bl	8007ca8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003ca6:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <menu+0x2bf4>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b63      	cmp	r3, #99	; 0x63
 8003cac:	d91e      	bls.n	8003cec <menu+0x2b54>
			if(dilSecim == 0) {
 8003cae:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <menu+0x2bc0>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cb6:	4a2a      	ldr	r2, [pc, #168]	; (8003d60 <menu+0x2bc8>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2002      	movs	r0, #2
 8003cbc:	f003 fff4 	bl	8007ca8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003cc0:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <menu+0x2bc0>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d104      	bne.n	8003cd2 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003cc8:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <menu+0x2bcc>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	2002      	movs	r0, #2
 8003cce:	f003 ffeb 	bl	8007ca8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cd2:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <menu+0x2bf4>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	220a      	movs	r2, #10
 8003cd8:	4924      	ldr	r1, [pc, #144]	; (8003d6c <menu+0x2bd4>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f008 fb36 	bl	800c34c <itoa>
			lcd_print(2,14,snum);
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <menu+0x2bd4>)
 8003ce2:	210e      	movs	r1, #14
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f003 ffdf 	bl	8007ca8 <lcd_print>
 8003cea:	e066      	b.n	8003dba <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <menu+0x2bf4>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	d923      	bls.n	8003d3c <menu+0x2ba4>
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <menu+0x2bf4>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b63      	cmp	r3, #99	; 0x63
 8003cfa:	d81f      	bhi.n	8003d3c <menu+0x2ba4>
			if(dilSecim == 0) {
 8003cfc:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <menu+0x2bc0>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d04:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <menu+0x2bc8>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f003 ffcd 	bl	8007ca8 <lcd_print>
 8003d0e:	e008      	b.n	8003d22 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <menu+0x2bc0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d104      	bne.n	8003d22 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003d18:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <menu+0x2bcc>)
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	2002      	movs	r0, #2
 8003d1e:	f003 ffc3 	bl	8007ca8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <menu+0x2bf4>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	220a      	movs	r2, #10
 8003d28:	4910      	ldr	r1, [pc, #64]	; (8003d6c <menu+0x2bd4>)
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f008 fb0e 	bl	800c34c <itoa>
			lcd_print(2, 15, snum);
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <menu+0x2bd4>)
 8003d32:	210f      	movs	r1, #15
 8003d34:	2002      	movs	r0, #2
 8003d36:	f003 ffb7 	bl	8007ca8 <lcd_print>
 8003d3a:	e03e      	b.n	8003dba <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <menu+0x2bf4>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b09      	cmp	r3, #9
 8003d42:	d83a      	bhi.n	8003dba <menu+0x2c22>
			if(dilSecim == 0) {
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <menu+0x2bc0>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d121      	bne.n	8003d90 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <menu+0x2bc8>)
 8003d4e:	2101      	movs	r1, #1
 8003d50:	2002      	movs	r0, #2
 8003d52:	f003 ffa9 	bl	8007ca8 <lcd_print>
 8003d56:	e024      	b.n	8003da2 <menu+0x2c0a>
 8003d58:	20000241 	.word	0x20000241
 8003d5c:	0800d94c 	.word	0x0800d94c
 8003d60:	0800d514 	.word	0x0800d514
 8003d64:	0800d888 	.word	0x0800d888
 8003d68:	20000237 	.word	0x20000237
 8003d6c:	20000188 	.word	0x20000188
 8003d70:	40010800 	.word	0x40010800
 8003d74:	2000024f 	.word	0x2000024f
 8003d78:	20000118 	.word	0x20000118
 8003d7c:	2000024c 	.word	0x2000024c
 8003d80:	20000220 	.word	0x20000220
 8003d84:	0800d960 	.word	0x0800d960
 8003d88:	0800d974 	.word	0x0800d974
 8003d8c:	20000238 	.word	0x20000238
			} else if(dilSecim == 1) {
 8003d90:	4b8f      	ldr	r3, [pc, #572]	; (8003fd0 <menu+0x2e38>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d104      	bne.n	8003da2 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003d98:	4a8e      	ldr	r2, [pc, #568]	; (8003fd4 <menu+0x2e3c>)
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f003 ff83 	bl	8007ca8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003da2:	4b8d      	ldr	r3, [pc, #564]	; (8003fd8 <menu+0x2e40>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	220a      	movs	r2, #10
 8003da8:	498c      	ldr	r1, [pc, #560]	; (8003fdc <menu+0x2e44>)
 8003daa:	4618      	mov	r0, r3
 8003dac:	f008 face 	bl	800c34c <itoa>
			lcd_print(2, 16, snum);
 8003db0:	4a8a      	ldr	r2, [pc, #552]	; (8003fdc <menu+0x2e44>)
 8003db2:	2110      	movs	r1, #16
 8003db4:	2002      	movs	r0, #2
 8003db6:	f003 ff77 	bl	8007ca8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4888      	ldr	r0, [pc, #544]	; (8003fe0 <menu+0x2e48>)
 8003dbe:	f005 fa99 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d115      	bne.n	8003df4 <menu+0x2c5c>
 8003dc8:	4b86      	ldr	r3, [pc, #536]	; (8003fe4 <menu+0x2e4c>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f083 0301 	eor.w	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00e      	beq.n	8003df4 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003dd6:	4b80      	ldr	r3, [pc, #512]	; (8003fd8 <menu+0x2e40>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4b7e      	ldr	r3, [pc, #504]	; (8003fd8 <menu+0x2e40>)
 8003de0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003de2:	4b7d      	ldr	r3, [pc, #500]	; (8003fd8 <menu+0x2e40>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2bb4      	cmp	r3, #180	; 0xb4
 8003de8:	d902      	bls.n	8003df0 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003dea:	4b7b      	ldr	r3, [pc, #492]	; (8003fd8 <menu+0x2e40>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003df0:	f000 fe6a 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df4:	2104      	movs	r1, #4
 8003df6:	487a      	ldr	r0, [pc, #488]	; (8003fe0 <menu+0x2e48>)
 8003df8:	f005 fa7c 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d115      	bne.n	8003e2e <menu+0x2c96>
 8003e02:	4b78      	ldr	r3, [pc, #480]	; (8003fe4 <menu+0x2e4c>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f083 0301 	eor.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003e10:	4b71      	ldr	r3, [pc, #452]	; (8003fd8 <menu+0x2e40>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b6f      	ldr	r3, [pc, #444]	; (8003fd8 <menu+0x2e40>)
 8003e1a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003e1c:	4b6e      	ldr	r3, [pc, #440]	; (8003fd8 <menu+0x2e40>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2bb5      	cmp	r3, #181	; 0xb5
 8003e22:	d902      	bls.n	8003e2a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003e24:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <menu+0x2e40>)
 8003e26:	22b4      	movs	r2, #180	; 0xb4
 8003e28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e2a:	f000 fe4d 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2e:	2108      	movs	r1, #8
 8003e30:	486b      	ldr	r0, [pc, #428]	; (8003fe0 <menu+0x2e48>)
 8003e32:	f005 fa5f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10d      	bne.n	8003e58 <menu+0x2cc0>
 8003e3c:	4b69      	ldr	r3, [pc, #420]	; (8003fe4 <menu+0x2e4c>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	f083 0301 	eor.w	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d006      	beq.n	8003e58 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003e4a:	4b63      	ldr	r3, [pc, #396]	; (8003fd8 <menu+0x2e40>)
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	4b66      	ldr	r3, [pc, #408]	; (8003fe8 <menu+0x2e50>)
 8003e50:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003e52:	4b66      	ldr	r3, [pc, #408]	; (8003fec <menu+0x2e54>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003e58:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <menu+0x2e58>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b1b      	cmp	r3, #27
 8003e5e:	f040 8083 	bne.w	8003f68 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003e62:	4a64      	ldr	r2, [pc, #400]	; (8003ff4 <menu+0x2e5c>)
 8003e64:	2101      	movs	r1, #1
 8003e66:	2001      	movs	r0, #1
 8003e68:	f003 ff1e 	bl	8007ca8 <lcd_print>

		if(buzzer == 0) {
 8003e6c:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <menu+0x2e60>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d113      	bne.n	8003e9c <menu+0x2d04>
			if(dilSecim == 0) {
 8003e74:	4b56      	ldr	r3, [pc, #344]	; (8003fd0 <menu+0x2e38>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003e7c:	4a5f      	ldr	r2, [pc, #380]	; (8003ffc <menu+0x2e64>)
 8003e7e:	2101      	movs	r1, #1
 8003e80:	2002      	movs	r0, #2
 8003e82:	f003 ff11 	bl	8007ca8 <lcd_print>
 8003e86:	e020      	b.n	8003eca <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e88:	4b51      	ldr	r3, [pc, #324]	; (8003fd0 <menu+0x2e38>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d11c      	bne.n	8003eca <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003e90:	4a5b      	ldr	r2, [pc, #364]	; (8004000 <menu+0x2e68>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	2002      	movs	r0, #2
 8003e96:	f003 ff07 	bl	8007ca8 <lcd_print>
 8003e9a:	e016      	b.n	8003eca <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003e9c:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <menu+0x2e60>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d112      	bne.n	8003eca <menu+0x2d32>
			if(dilSecim == 0) {
 8003ea4:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <menu+0x2e38>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003eac:	4a55      	ldr	r2, [pc, #340]	; (8004004 <menu+0x2e6c>)
 8003eae:	2101      	movs	r1, #1
 8003eb0:	2002      	movs	r0, #2
 8003eb2:	f003 fef9 	bl	8007ca8 <lcd_print>
 8003eb6:	e008      	b.n	8003eca <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003eb8:	4b45      	ldr	r3, [pc, #276]	; (8003fd0 <menu+0x2e38>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d104      	bne.n	8003eca <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003ec0:	4a51      	ldr	r2, [pc, #324]	; (8004008 <menu+0x2e70>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	2002      	movs	r0, #2
 8003ec6:	f003 feef 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4844      	ldr	r0, [pc, #272]	; (8003fe0 <menu+0x2e48>)
 8003ece:	f005 fa11 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d115      	bne.n	8003f04 <menu+0x2d6c>
 8003ed8:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <menu+0x2e4c>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f083 0301 	eor.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00e      	beq.n	8003f04 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003ee6:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <menu+0x2e60>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <menu+0x2e60>)
 8003ef0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <menu+0x2e60>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d902      	bls.n	8003f00 <menu+0x2d68>
				buzzer = 0;
 8003efa:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <menu+0x2e60>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f00:	f000 fde2 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f04:	2104      	movs	r1, #4
 8003f06:	4836      	ldr	r0, [pc, #216]	; (8003fe0 <menu+0x2e48>)
 8003f08:	f005 f9f4 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d115      	bne.n	8003f3e <menu+0x2da6>
 8003f12:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <menu+0x2e4c>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	f083 0301 	eor.w	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00e      	beq.n	8003f3e <menu+0x2da6>
			buzzer = buzzer - 1;
 8003f20:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <menu+0x2e60>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <menu+0x2e60>)
 8003f2a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <menu+0x2e60>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <menu+0x2da2>
		   		buzzer = 1;
 8003f34:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <menu+0x2e60>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f3a:	f000 fdc5 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f3e:	2108      	movs	r1, #8
 8003f40:	4827      	ldr	r0, [pc, #156]	; (8003fe0 <menu+0x2e48>)
 8003f42:	f005 f9d7 	bl	80092f4 <HAL_GPIO_ReadPin>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10d      	bne.n	8003f68 <menu+0x2dd0>
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <menu+0x2e4c>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	f083 0301 	eor.w	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003f5a:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <menu+0x2e60>)
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <menu+0x2e50>)
 8003f60:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <menu+0x2e54>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <menu+0x2e58>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b1c      	cmp	r3, #28
 8003f6e:	f040 80ab 	bne.w	80040c8 <menu+0x2f30>
		calismaSayModu = 0;
 8003f72:	4b26      	ldr	r3, [pc, #152]	; (800400c <menu+0x2e74>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <menu+0x2e78>)
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f003 fe93 	bl	8007ca8 <lcd_print>

		if(demoMode == 0) {
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <menu+0x2e7c>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d113      	bne.n	8003fb2 <menu+0x2e1a>
			if(dilSecim == 0) {
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <menu+0x2e38>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d105      	bne.n	8003f9e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003f92:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <menu+0x2e64>)
 8003f94:	2101      	movs	r1, #1
 8003f96:	2002      	movs	r0, #2
 8003f98:	f003 fe86 	bl	8007ca8 <lcd_print>
 8003f9c:	e045      	b.n	800402a <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <menu+0x2e38>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d141      	bne.n	800402a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <menu+0x2e68>)
 8003fa8:	2101      	movs	r1, #1
 8003faa:	2002      	movs	r0, #2
 8003fac:	f003 fe7c 	bl	8007ca8 <lcd_print>
 8003fb0:	e03b      	b.n	800402a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <menu+0x2e7c>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d137      	bne.n	800402a <menu+0x2e92>
			if(dilSecim == 0){
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <menu+0x2e38>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d12a      	bne.n	8004018 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003fc2:	4a10      	ldr	r2, [pc, #64]	; (8004004 <menu+0x2e6c>)
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	f003 fe6e 	bl	8007ca8 <lcd_print>
 8003fcc:	e02d      	b.n	800402a <menu+0x2e92>
 8003fce:	bf00      	nop
 8003fd0:	20000241 	.word	0x20000241
 8003fd4:	0800d888 	.word	0x0800d888
 8003fd8:	20000238 	.word	0x20000238
 8003fdc:	20000188 	.word	0x20000188
 8003fe0:	40010800 	.word	0x40010800
 8003fe4:	2000024f 	.word	0x2000024f
 8003fe8:	20000118 	.word	0x20000118
 8003fec:	2000024c 	.word	0x2000024c
 8003ff0:	20000220 	.word	0x20000220
 8003ff4:	0800d988 	.word	0x0800d988
 8003ff8:	2000023c 	.word	0x2000023c
 8003ffc:	0800d2b0 	.word	0x0800d2b0
 8004000:	0800d2c4 	.word	0x0800d2c4
 8004004:	0800d310 	.word	0x0800d310
 8004008:	0800d324 	.word	0x0800d324
 800400c:	20000240 	.word	0x20000240
 8004010:	0800d99c 	.word	0x0800d99c
 8004014:	2000023e 	.word	0x2000023e
			} else if(dilSecim == 1) {
 8004018:	4b71      	ldr	r3, [pc, #452]	; (80041e0 <menu+0x3048>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d104      	bne.n	800402a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004020:	4a70      	ldr	r2, [pc, #448]	; (80041e4 <menu+0x304c>)
 8004022:	2101      	movs	r1, #1
 8004024:	2002      	movs	r0, #2
 8004026:	f003 fe3f 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800402a:	2102      	movs	r1, #2
 800402c:	486e      	ldr	r0, [pc, #440]	; (80041e8 <menu+0x3050>)
 800402e:	f005 f961 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d115      	bne.n	8004064 <menu+0x2ecc>
 8004038:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <menu+0x3054>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	f083 0301 	eor.w	r3, r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004046:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <menu+0x3058>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	4b68      	ldr	r3, [pc, #416]	; (80041f0 <menu+0x3058>)
 8004050:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004052:	4b67      	ldr	r3, [pc, #412]	; (80041f0 <menu+0x3058>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d902      	bls.n	8004060 <menu+0x2ec8>
				demoMode = 0;
 800405a:	4b65      	ldr	r3, [pc, #404]	; (80041f0 <menu+0x3058>)
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004060:	f000 fd32 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004064:	2104      	movs	r1, #4
 8004066:	4860      	ldr	r0, [pc, #384]	; (80041e8 <menu+0x3050>)
 8004068:	f005 f944 	bl	80092f4 <HAL_GPIO_ReadPin>
 800406c:	4603      	mov	r3, r0
 800406e:	2b01      	cmp	r3, #1
 8004070:	d115      	bne.n	800409e <menu+0x2f06>
 8004072:	4b5e      	ldr	r3, [pc, #376]	; (80041ec <menu+0x3054>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	f083 0301 	eor.w	r3, r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <menu+0x2f06>
			demoMode = demoMode - 1;
 8004080:	4b5b      	ldr	r3, [pc, #364]	; (80041f0 <menu+0x3058>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	3b01      	subs	r3, #1
 8004086:	b2da      	uxtb	r2, r3
 8004088:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <menu+0x3058>)
 800408a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800408c:	4b58      	ldr	r3, [pc, #352]	; (80041f0 <menu+0x3058>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <menu+0x2f02>
		   		demoMode = 1;
 8004094:	4b56      	ldr	r3, [pc, #344]	; (80041f0 <menu+0x3058>)
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800409a:	f000 fd15 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800409e:	2108      	movs	r1, #8
 80040a0:	4851      	ldr	r0, [pc, #324]	; (80041e8 <menu+0x3050>)
 80040a2:	f005 f927 	bl	80092f4 <HAL_GPIO_ReadPin>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10d      	bne.n	80040c8 <menu+0x2f30>
 80040ac:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <menu+0x3054>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f083 0301 	eor.w	r3, r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d006      	beq.n	80040c8 <menu+0x2f30>
			eepromData[26] = demoMode;
 80040ba:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <menu+0x3058>)
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	4b4d      	ldr	r3, [pc, #308]	; (80041f4 <menu+0x305c>)
 80040c0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80040c2:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <menu+0x3060>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80040c8:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <menu+0x3064>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b1d      	cmp	r3, #29
 80040ce:	f040 8132 	bne.w	8004336 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80040d2:	4b4b      	ldr	r3, [pc, #300]	; (8004200 <menu+0x3068>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d113      	bne.n	8004102 <menu+0x2f6a>
 80040da:	4b4a      	ldr	r3, [pc, #296]	; (8004204 <menu+0x306c>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <menu+0x2f6a>
 80040e2:	4b49      	ldr	r3, [pc, #292]	; (8004208 <menu+0x3070>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <menu+0x2f6a>
 80040ea:	4b48      	ldr	r3, [pc, #288]	; (800420c <menu+0x3074>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <menu+0x2f6a>
 80040f2:	4b47      	ldr	r3, [pc, #284]	; (8004210 <menu+0x3078>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <menu+0x2f6a>
			calismaSayisiYar = 0;
 80040fa:	4b46      	ldr	r3, [pc, #280]	; (8004214 <menu+0x307c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e002      	b.n	8004108 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004102:	4b44      	ldr	r3, [pc, #272]	; (8004214 <menu+0x307c>)
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004108:	4b43      	ldr	r3, [pc, #268]	; (8004218 <menu+0x3080>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d154      	bne.n	80041ba <menu+0x3022>
			if(dilSecim == 0) {
 8004110:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <menu+0x3048>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004118:	4a40      	ldr	r2, [pc, #256]	; (800421c <menu+0x3084>)
 800411a:	2101      	movs	r1, #1
 800411c:	2001      	movs	r0, #1
 800411e:	f003 fdc3 	bl	8007ca8 <lcd_print>
 8004122:	e008      	b.n	8004136 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004124:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <menu+0x3048>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d104      	bne.n	8004136 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800412c:	4a3c      	ldr	r2, [pc, #240]	; (8004220 <menu+0x3088>)
 800412e:	2101      	movs	r1, #1
 8004130:	2001      	movs	r0, #1
 8004132:	f003 fdb9 	bl	8007ca8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004136:	4b36      	ldr	r3, [pc, #216]	; (8004210 <menu+0x3078>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	220a      	movs	r2, #10
 800413c:	4939      	ldr	r1, [pc, #228]	; (8004224 <menu+0x308c>)
 800413e:	4618      	mov	r0, r3
 8004140:	f008 f904 	bl	800c34c <itoa>
			lcd_print(2, 12, snum);
 8004144:	4a37      	ldr	r2, [pc, #220]	; (8004224 <menu+0x308c>)
 8004146:	210c      	movs	r1, #12
 8004148:	2002      	movs	r0, #2
 800414a:	f003 fdad 	bl	8007ca8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800414e:	4b2f      	ldr	r3, [pc, #188]	; (800420c <menu+0x3074>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	220a      	movs	r2, #10
 8004154:	4933      	ldr	r1, [pc, #204]	; (8004224 <menu+0x308c>)
 8004156:	4618      	mov	r0, r3
 8004158:	f008 f8f8 	bl	800c34c <itoa>
			lcd_print(2, 13, snum);
 800415c:	4a31      	ldr	r2, [pc, #196]	; (8004224 <menu+0x308c>)
 800415e:	210d      	movs	r1, #13
 8004160:	2002      	movs	r0, #2
 8004162:	f003 fda1 	bl	8007ca8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004166:	4b28      	ldr	r3, [pc, #160]	; (8004208 <menu+0x3070>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	220a      	movs	r2, #10
 800416c:	492d      	ldr	r1, [pc, #180]	; (8004224 <menu+0x308c>)
 800416e:	4618      	mov	r0, r3
 8004170:	f008 f8ec 	bl	800c34c <itoa>
			lcd_print(2, 14, snum);
 8004174:	4a2b      	ldr	r2, [pc, #172]	; (8004224 <menu+0x308c>)
 8004176:	210e      	movs	r1, #14
 8004178:	2002      	movs	r0, #2
 800417a:	f003 fd95 	bl	8007ca8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <menu+0x306c>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	220a      	movs	r2, #10
 8004184:	4927      	ldr	r1, [pc, #156]	; (8004224 <menu+0x308c>)
 8004186:	4618      	mov	r0, r3
 8004188:	f008 f8e0 	bl	800c34c <itoa>
			lcd_print(2, 15, snum);
 800418c:	4a25      	ldr	r2, [pc, #148]	; (8004224 <menu+0x308c>)
 800418e:	210f      	movs	r1, #15
 8004190:	2002      	movs	r0, #2
 8004192:	f003 fd89 	bl	8007ca8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <menu+0x3068>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	220a      	movs	r2, #10
 800419c:	4921      	ldr	r1, [pc, #132]	; (8004224 <menu+0x308c>)
 800419e:	4618      	mov	r0, r3
 80041a0:	f008 f8d4 	bl	800c34c <itoa>
			lcd_print(2, 16, snum);
 80041a4:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <menu+0x308c>)
 80041a6:	2110      	movs	r1, #16
 80041a8:	2002      	movs	r0, #2
 80041aa:	f003 fd7d 	bl	8007ca8 <lcd_print>

			lcd_print(2, 1, "           ");
 80041ae:	4a1e      	ldr	r2, [pc, #120]	; (8004228 <menu+0x3090>)
 80041b0:	2101      	movs	r1, #1
 80041b2:	2002      	movs	r0, #2
 80041b4:	f003 fd78 	bl	8007ca8 <lcd_print>
 80041b8:	e048      	b.n	800424c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <menu+0x3080>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d144      	bne.n	800424c <menu+0x30b4>
			if(dilSecim == 0) {
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <menu+0x3048>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d132      	bne.n	8004230 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80041ca:	4a14      	ldr	r2, [pc, #80]	; (800421c <menu+0x3084>)
 80041cc:	2101      	movs	r1, #1
 80041ce:	2001      	movs	r0, #1
 80041d0:	f003 fd6a 	bl	8007ca8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <menu+0x3094>)
 80041d6:	2101      	movs	r1, #1
 80041d8:	2002      	movs	r0, #2
 80041da:	f003 fd65 	bl	8007ca8 <lcd_print>
 80041de:	e035      	b.n	800424c <menu+0x30b4>
 80041e0:	20000241 	.word	0x20000241
 80041e4:	0800d324 	.word	0x0800d324
 80041e8:	40010800 	.word	0x40010800
 80041ec:	2000024f 	.word	0x2000024f
 80041f0:	2000023e 	.word	0x2000023e
 80041f4:	20000118 	.word	0x20000118
 80041f8:	2000024c 	.word	0x2000024c
 80041fc:	20000220 	.word	0x20000220
 8004200:	2000021d 	.word	0x2000021d
 8004204:	2000021e 	.word	0x2000021e
 8004208:	20000000 	.word	0x20000000
 800420c:	20000001 	.word	0x20000001
 8004210:	2000021f 	.word	0x2000021f
 8004214:	20000261 	.word	0x20000261
 8004218:	20000240 	.word	0x20000240
 800421c:	0800d9ac 	.word	0x0800d9ac
 8004220:	0800d9c0 	.word	0x0800d9c0
 8004224:	20000188 	.word	0x20000188
 8004228:	0800d9d4 	.word	0x0800d9d4
 800422c:	0800d9e0 	.word	0x0800d9e0
			} else if(dilSecim == 1) {
 8004230:	4b94      	ldr	r3, [pc, #592]	; (8004484 <menu+0x32ec>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d109      	bne.n	800424c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004238:	4a93      	ldr	r2, [pc, #588]	; (8004488 <menu+0x32f0>)
 800423a:	2101      	movs	r1, #1
 800423c:	2001      	movs	r0, #1
 800423e:	f003 fd33 	bl	8007ca8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004242:	4a92      	ldr	r2, [pc, #584]	; (800448c <menu+0x32f4>)
 8004244:	2101      	movs	r1, #1
 8004246:	2002      	movs	r0, #2
 8004248:	f003 fd2e 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800424c:	2102      	movs	r1, #2
 800424e:	4890      	ldr	r0, [pc, #576]	; (8004490 <menu+0x32f8>)
 8004250:	f005 f850 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d119      	bne.n	800428e <menu+0x30f6>
 800425a:	4b8e      	ldr	r3, [pc, #568]	; (8004494 <menu+0x32fc>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	f083 0301 	eor.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <menu+0x30f6>
 8004268:	4b8b      	ldr	r3, [pc, #556]	; (8004498 <menu+0x3300>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00e      	beq.n	800428e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004270:	4b8a      	ldr	r3, [pc, #552]	; (800449c <menu+0x3304>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	b2da      	uxtb	r2, r3
 8004278:	4b88      	ldr	r3, [pc, #544]	; (800449c <menu+0x3304>)
 800427a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800427c:	4b87      	ldr	r3, [pc, #540]	; (800449c <menu+0x3304>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d902      	bls.n	800428a <menu+0x30f2>
				calismaSayModu = 0;
 8004284:	4b85      	ldr	r3, [pc, #532]	; (800449c <menu+0x3304>)
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800428a:	f000 fc1d 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800428e:	2104      	movs	r1, #4
 8004290:	487f      	ldr	r0, [pc, #508]	; (8004490 <menu+0x32f8>)
 8004292:	f005 f82f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d119      	bne.n	80042d0 <menu+0x3138>
 800429c:	4b7d      	ldr	r3, [pc, #500]	; (8004494 <menu+0x32fc>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	f083 0301 	eor.w	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d012      	beq.n	80042d0 <menu+0x3138>
 80042aa:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <menu+0x3300>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00e      	beq.n	80042d0 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80042b2:	4b7a      	ldr	r3, [pc, #488]	; (800449c <menu+0x3304>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4b78      	ldr	r3, [pc, #480]	; (800449c <menu+0x3304>)
 80042bc:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80042be:	4b77      	ldr	r3, [pc, #476]	; (800449c <menu+0x3304>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <menu+0x3134>
		   		calismaSayModu = 1;
 80042c6:	4b75      	ldr	r3, [pc, #468]	; (800449c <menu+0x3304>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042cc:	f000 fbfc 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042d0:	2108      	movs	r1, #8
 80042d2:	486f      	ldr	r0, [pc, #444]	; (8004490 <menu+0x32f8>)
 80042d4:	f005 f80e 	bl	80092f4 <HAL_GPIO_ReadPin>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d12b      	bne.n	8004336 <menu+0x319e>
 80042de:	4b6d      	ldr	r3, [pc, #436]	; (8004494 <menu+0x32fc>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	f083 0301 	eor.w	r3, r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d024      	beq.n	8004336 <menu+0x319e>
			eepromData[32] = 0;
 80042ec:	4b6c      	ldr	r3, [pc, #432]	; (80044a0 <menu+0x3308>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80042f4:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <menu+0x3308>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80042fa:	4b69      	ldr	r3, [pc, #420]	; (80044a0 <menu+0x3308>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004300:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <menu+0x3308>)
 8004302:	2200      	movs	r2, #0
 8004304:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004306:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <menu+0x3308>)
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800430c:	4b65      	ldr	r3, [pc, #404]	; (80044a4 <menu+0x330c>)
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004312:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <menu+0x3310>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004318:	4b64      	ldr	r3, [pc, #400]	; (80044ac <menu+0x3314>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800431e:	4b64      	ldr	r3, [pc, #400]	; (80044b0 <menu+0x3318>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004324:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <menu+0x331c>)
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800432a:	4b5c      	ldr	r3, [pc, #368]	; (800449c <menu+0x3304>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004330:	4b61      	ldr	r3, [pc, #388]	; (80044b8 <menu+0x3320>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004336:	4b61      	ldr	r3, [pc, #388]	; (80044bc <menu+0x3324>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b1e      	cmp	r3, #30
 800433c:	d16f      	bne.n	800441e <menu+0x3286>
		calismaSayModu = 0;
 800433e:	4b57      	ldr	r3, [pc, #348]	; (800449c <menu+0x3304>)
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004344:	4b4f      	ldr	r3, [pc, #316]	; (8004484 <menu+0x32ec>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800434c:	4a5c      	ldr	r2, [pc, #368]	; (80044c0 <menu+0x3328>)
 800434e:	2101      	movs	r1, #1
 8004350:	2001      	movs	r0, #1
 8004352:	f003 fca9 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004356:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <menu+0x332c>)
 8004358:	2101      	movs	r1, #1
 800435a:	2002      	movs	r0, #2
 800435c:	f003 fca4 	bl	8007ca8 <lcd_print>
 8004360:	e00d      	b.n	800437e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004362:	4b48      	ldr	r3, [pc, #288]	; (8004484 <menu+0x32ec>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d109      	bne.n	800437e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800436a:	4a57      	ldr	r2, [pc, #348]	; (80044c8 <menu+0x3330>)
 800436c:	2101      	movs	r1, #1
 800436e:	2001      	movs	r0, #1
 8004370:	f003 fc9a 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004374:	4a55      	ldr	r2, [pc, #340]	; (80044cc <menu+0x3334>)
 8004376:	2101      	movs	r1, #1
 8004378:	2002      	movs	r0, #2
 800437a:	f003 fc95 	bl	8007ca8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800437e:	2102      	movs	r1, #2
 8004380:	4843      	ldr	r0, [pc, #268]	; (8004490 <menu+0x32f8>)
 8004382:	f004 ffb7 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d115      	bne.n	80043b8 <menu+0x3220>
 800438c:	4b41      	ldr	r3, [pc, #260]	; (8004494 <menu+0x32fc>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f083 0301 	eor.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00e      	beq.n	80043b8 <menu+0x3220>
			dilSecim = dilSecim + 1;
 800439a:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <menu+0x32ec>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4b38      	ldr	r3, [pc, #224]	; (8004484 <menu+0x32ec>)
 80043a4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80043a6:	4b37      	ldr	r3, [pc, #220]	; (8004484 <menu+0x32ec>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d902      	bls.n	80043b4 <menu+0x321c>
				dilSecim = 0;
 80043ae:	4b35      	ldr	r3, [pc, #212]	; (8004484 <menu+0x32ec>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80043b4:	f000 fb88 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043b8:	2104      	movs	r1, #4
 80043ba:	4835      	ldr	r0, [pc, #212]	; (8004490 <menu+0x32f8>)
 80043bc:	f004 ff9a 	bl	80092f4 <HAL_GPIO_ReadPin>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d115      	bne.n	80043f2 <menu+0x325a>
 80043c6:	4b33      	ldr	r3, [pc, #204]	; (8004494 <menu+0x32fc>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	f083 0301 	eor.w	r3, r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <menu+0x32ec>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	3b01      	subs	r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	4b29      	ldr	r3, [pc, #164]	; (8004484 <menu+0x32ec>)
 80043de:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80043e0:	4b28      	ldr	r3, [pc, #160]	; (8004484 <menu+0x32ec>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <menu+0x3256>
		   		dilSecim = 1;
 80043e8:	4b26      	ldr	r3, [pc, #152]	; (8004484 <menu+0x32ec>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80043ee:	f000 fb6b 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043f2:	2108      	movs	r1, #8
 80043f4:	4826      	ldr	r0, [pc, #152]	; (8004490 <menu+0x32f8>)
 80043f6:	f004 ff7d 	bl	80092f4 <HAL_GPIO_ReadPin>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10e      	bne.n	800441e <menu+0x3286>
 8004400:	4b24      	ldr	r3, [pc, #144]	; (8004494 <menu+0x32fc>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f083 0301 	eor.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <menu+0x3286>
			eepromData[33] = dilSecim;
 800440e:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <menu+0x32ec>)
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <menu+0x3308>)
 8004414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004418:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <menu+0x3320>)
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800441e:	4b27      	ldr	r3, [pc, #156]	; (80044bc <menu+0x3324>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b1f      	cmp	r3, #31
 8004424:	f040 80b7 	bne.w	8004596 <menu+0x33fe>
		calismaSayModu = 0;
 8004428:	4b1c      	ldr	r3, [pc, #112]	; (800449c <menu+0x3304>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800442e:	4a28      	ldr	r2, [pc, #160]	; (80044d0 <menu+0x3338>)
 8004430:	2101      	movs	r1, #1
 8004432:	2001      	movs	r0, #1
 8004434:	f003 fc38 	bl	8007ca8 <lcd_print>

		if(iotMode == 0) {
 8004438:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <menu+0x333c>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d113      	bne.n	8004468 <menu+0x32d0>
			if(dilSecim == 0) {
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <menu+0x32ec>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004448:	4a23      	ldr	r2, [pc, #140]	; (80044d8 <menu+0x3340>)
 800444a:	2101      	movs	r1, #1
 800444c:	2002      	movs	r0, #2
 800444e:	f003 fc2b 	bl	8007ca8 <lcd_print>
 8004452:	e050      	b.n	80044f6 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <menu+0x32ec>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d14c      	bne.n	80044f6 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 800445c:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <menu+0x3344>)
 800445e:	2101      	movs	r1, #1
 8004460:	2002      	movs	r0, #2
 8004462:	f003 fc21 	bl	8007ca8 <lcd_print>
 8004466:	e046      	b.n	80044f6 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <menu+0x333c>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d142      	bne.n	80044f6 <menu+0x335e>
			if(dilSecim == 0) {
 8004470:	4b04      	ldr	r3, [pc, #16]	; (8004484 <menu+0x32ec>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d135      	bne.n	80044e4 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <menu+0x3348>)
 800447a:	2101      	movs	r1, #1
 800447c:	2002      	movs	r0, #2
 800447e:	f003 fc13 	bl	8007ca8 <lcd_print>
 8004482:	e038      	b.n	80044f6 <menu+0x335e>
 8004484:	20000241 	.word	0x20000241
 8004488:	0800d9c0 	.word	0x0800d9c0
 800448c:	0800d9f4 	.word	0x0800d9f4
 8004490:	40010800 	.word	0x40010800
 8004494:	2000024f 	.word	0x2000024f
 8004498:	20000261 	.word	0x20000261
 800449c:	20000240 	.word	0x20000240
 80044a0:	20000118 	.word	0x20000118
 80044a4:	2000021f 	.word	0x2000021f
 80044a8:	20000001 	.word	0x20000001
 80044ac:	20000000 	.word	0x20000000
 80044b0:	2000021e 	.word	0x2000021e
 80044b4:	2000021d 	.word	0x2000021d
 80044b8:	2000024c 	.word	0x2000024c
 80044bc:	20000220 	.word	0x20000220
 80044c0:	0800da08 	.word	0x0800da08
 80044c4:	0800da1c 	.word	0x0800da1c
 80044c8:	0800da30 	.word	0x0800da30
 80044cc:	0800da44 	.word	0x0800da44
 80044d0:	0800da58 	.word	0x0800da58
 80044d4:	2000023f 	.word	0x2000023f
 80044d8:	0800d2b0 	.word	0x0800d2b0
 80044dc:	0800d2c4 	.word	0x0800d2c4
 80044e0:	0800d310 	.word	0x0800d310
			} else if(dilSecim == 1) {
 80044e4:	4ba3      	ldr	r3, [pc, #652]	; (8004774 <menu+0x35dc>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d104      	bne.n	80044f6 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80044ec:	4aa2      	ldr	r2, [pc, #648]	; (8004778 <menu+0x35e0>)
 80044ee:	2101      	movs	r1, #1
 80044f0:	2002      	movs	r0, #2
 80044f2:	f003 fbd9 	bl	8007ca8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80044f6:	2102      	movs	r1, #2
 80044f8:	48a0      	ldr	r0, [pc, #640]	; (800477c <menu+0x35e4>)
 80044fa:	f004 fefb 	bl	80092f4 <HAL_GPIO_ReadPin>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b01      	cmp	r3, #1
 8004502:	d115      	bne.n	8004530 <menu+0x3398>
 8004504:	4b9e      	ldr	r3, [pc, #632]	; (8004780 <menu+0x35e8>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f083 0301 	eor.w	r3, r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00e      	beq.n	8004530 <menu+0x3398>
			iotMode = iotMode + 1;
 8004512:	4b9c      	ldr	r3, [pc, #624]	; (8004784 <menu+0x35ec>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	3301      	adds	r3, #1
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4b9a      	ldr	r3, [pc, #616]	; (8004784 <menu+0x35ec>)
 800451c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800451e:	4b99      	ldr	r3, [pc, #612]	; (8004784 <menu+0x35ec>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d902      	bls.n	800452c <menu+0x3394>
				iotMode = 0;
 8004526:	4b97      	ldr	r3, [pc, #604]	; (8004784 <menu+0x35ec>)
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800452c:	f000 facc 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004530:	2104      	movs	r1, #4
 8004532:	4892      	ldr	r0, [pc, #584]	; (800477c <menu+0x35e4>)
 8004534:	f004 fede 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d115      	bne.n	800456a <menu+0x33d2>
 800453e:	4b90      	ldr	r3, [pc, #576]	; (8004780 <menu+0x35e8>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	f083 0301 	eor.w	r3, r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00e      	beq.n	800456a <menu+0x33d2>
			iotMode = iotMode - 1;
 800454c:	4b8d      	ldr	r3, [pc, #564]	; (8004784 <menu+0x35ec>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	3b01      	subs	r3, #1
 8004552:	b2da      	uxtb	r2, r3
 8004554:	4b8b      	ldr	r3, [pc, #556]	; (8004784 <menu+0x35ec>)
 8004556:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004558:	4b8a      	ldr	r3, [pc, #552]	; (8004784 <menu+0x35ec>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <menu+0x33ce>
		   		iotMode = 1;
 8004560:	4b88      	ldr	r3, [pc, #544]	; (8004784 <menu+0x35ec>)
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004566:	f000 faaf 	bl	8004ac8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800456a:	2108      	movs	r1, #8
 800456c:	4883      	ldr	r0, [pc, #524]	; (800477c <menu+0x35e4>)
 800456e:	f004 fec1 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10e      	bne.n	8004596 <menu+0x33fe>
 8004578:	4b81      	ldr	r3, [pc, #516]	; (8004780 <menu+0x35e8>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	f083 0301 	eor.w	r3, r3, #1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004586:	4b7f      	ldr	r3, [pc, #508]	; (8004784 <menu+0x35ec>)
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	4b7f      	ldr	r3, [pc, #508]	; (8004788 <menu+0x35f0>)
 800458c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004590:	4b7e      	ldr	r3, [pc, #504]	; (800478c <menu+0x35f4>)
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004596:	4b7e      	ldr	r3, [pc, #504]	; (8004790 <menu+0x35f8>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b20      	cmp	r3, #32
 800459c:	d14b      	bne.n	8004636 <menu+0x349e>
		calismaSayModu = 0;
 800459e:	4b7d      	ldr	r3, [pc, #500]	; (8004794 <menu+0x35fc>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 80045a4:	2001      	movs	r0, #1
 80045a6:	f7fc f8c7 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 80045aa:	2032      	movs	r0, #50	; 0x32
 80045ac:	f004 f8d2 	bl	8008754 <HAL_Delay>

		if(dilSecim == 0) {
 80045b0:	4b70      	ldr	r3, [pc, #448]	; (8004774 <menu+0x35dc>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <menu+0x342c>
			lcd_print(1, 1, "MAKINE ID       ");
 80045b8:	4a77      	ldr	r2, [pc, #476]	; (8004798 <menu+0x3600>)
 80045ba:	2101      	movs	r1, #1
 80045bc:	2001      	movs	r0, #1
 80045be:	f003 fb73 	bl	8007ca8 <lcd_print>
 80045c2:	e004      	b.n	80045ce <menu+0x3436>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80045c4:	4a75      	ldr	r2, [pc, #468]	; (800479c <menu+0x3604>)
 80045c6:	2101      	movs	r1, #1
 80045c8:	2001      	movs	r0, #1
 80045ca:	f003 fb6d 	bl	8007ca8 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 80045ce:	4a74      	ldr	r2, [pc, #464]	; (80047a0 <menu+0x3608>)
 80045d0:	2101      	movs	r1, #1
 80045d2:	2002      	movs	r0, #2
 80045d4:	f003 fb68 	bl	8007ca8 <lcd_print>
		lcd_print(2, 13, "    ");
 80045d8:	4a72      	ldr	r2, [pc, #456]	; (80047a4 <menu+0x360c>)
 80045da:	210d      	movs	r1, #13
 80045dc:	2002      	movs	r0, #2
 80045de:	f003 fb63 	bl	8007ca8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045e2:	2102      	movs	r1, #2
 80045e4:	4865      	ldr	r0, [pc, #404]	; (800477c <menu+0x35e4>)
 80045e6:	f004 fe85 	bl	80092f4 <HAL_GPIO_ReadPin>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d122      	bne.n	8004636 <menu+0x349e>
 80045f0:	2104      	movs	r1, #4
 80045f2:	4862      	ldr	r0, [pc, #392]	; (800477c <menu+0x35e4>)
 80045f4:	f004 fe7e 	bl	80092f4 <HAL_GPIO_ReadPin>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d11b      	bne.n	8004636 <menu+0x349e>
 80045fe:	4b60      	ldr	r3, [pc, #384]	; (8004780 <menu+0x35e8>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	f083 0301 	eor.w	r3, r3, #1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d014      	beq.n	8004636 <menu+0x349e>
			takeMachineID();
 800460c:	f002 fb68 	bl	8006ce0 <takeMachineID>

			convertArrays(1);
 8004610:	2001      	movs	r0, #1
 8004612:	f7fc f891 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004616:	2032      	movs	r0, #50	; 0x32
 8004618:	f004 f89c 	bl	8008754 <HAL_Delay>

			HAL_Delay(250);
 800461c:	20fa      	movs	r0, #250	; 0xfa
 800461e:	f004 f899 	bl	8008754 <HAL_Delay>
			lcd_print(2, 1, machineID);
 8004622:	4a5f      	ldr	r2, [pc, #380]	; (80047a0 <menu+0x3608>)
 8004624:	2101      	movs	r1, #1
 8004626:	2002      	movs	r0, #2
 8004628:	f003 fb3e 	bl	8007ca8 <lcd_print>
			lcd_print(2, 13, "    ");
 800462c:	4a5d      	ldr	r2, [pc, #372]	; (80047a4 <menu+0x360c>)
 800462e:	210d      	movs	r1, #13
 8004630:	2002      	movs	r0, #2
 8004632:	f003 fb39 	bl	8007ca8 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 8004636:	4b56      	ldr	r3, [pc, #344]	; (8004790 <menu+0x35f8>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b21      	cmp	r3, #33	; 0x21
 800463c:	f040 80cb 	bne.w	80047d6 <menu+0x363e>
		calismaSayModu = 0;
 8004640:	4b54      	ldr	r3, [pc, #336]	; (8004794 <menu+0x35fc>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
		int ssidLength = strlen(wifiSSID);
 8004646:	4858      	ldr	r0, [pc, #352]	; (80047a8 <menu+0x3610>)
 8004648:	f7fb fdec 	bl	8000224 <strlen>
 800464c:	4603      	mov	r3, r0
 800464e:	637b      	str	r3, [r7, #52]	; 0x34

		convertArrays(2);
 8004650:	2002      	movs	r0, #2
 8004652:	f7fc f871 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004656:	2032      	movs	r0, #50	; 0x32
 8004658:	f004 f87c 	bl	8008754 <HAL_Delay>

		lcd_print(1, 1, "WIFI SSID       ");
 800465c:	4a53      	ldr	r2, [pc, #332]	; (80047ac <menu+0x3614>)
 800465e:	2101      	movs	r1, #1
 8004660:	2001      	movs	r0, #1
 8004662:	f003 fb21 	bl	8007ca8 <lcd_print>
		if(ssidLength == 16) {
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	2b10      	cmp	r3, #16
 800466a:	d105      	bne.n	8004678 <menu+0x34e0>
			lcd_print(2, 1, wifiSSID);
 800466c:	4a4e      	ldr	r2, [pc, #312]	; (80047a8 <menu+0x3610>)
 800466e:	2101      	movs	r1, #1
 8004670:	2002      	movs	r0, #2
 8004672:	f003 fb19 	bl	8007ca8 <lcd_print>
 8004676:	e030      	b.n	80046da <menu+0x3542>
		} else if(ssidLength < 16) {
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	2b0f      	cmp	r3, #15
 800467c:	dc15      	bgt.n	80046aa <menu+0x3512>
			for(int i=0; i<16-ssidLength; i++) {
 800467e:	2300      	movs	r3, #0
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
 8004682:	e00b      	b.n	800469c <menu+0x3504>
				lcd_delete_char(2, ssidLength);
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	b2db      	uxtb	r3, r3
 8004688:	4619      	mov	r1, r3
 800468a:	2002      	movs	r0, #2
 800468c:	f003 fb42 	bl	8007d14 <lcd_delete_char>
				ssidLength++;
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	3301      	adds	r3, #1
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
			for(int i=0; i<16-ssidLength; i++) {
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	3301      	adds	r3, #1
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
 800469c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469e:	f1c3 0310 	rsb	r3, r3, #16
 80046a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a4:	429a      	cmp	r2, r3
 80046a6:	dbed      	blt.n	8004684 <menu+0x34ec>
 80046a8:	e017      	b.n	80046da <menu+0x3542>
			}
		} else {
			int lcdVal = 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c

			//Eğer ssid 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 80046ae:	2300      	movs	r3, #0
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b2:	e00f      	b.n	80046d4 <menu+0x353c>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	b2d9      	uxtb	r1, r3
 80046b8:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <menu+0x3610>)
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	4413      	add	r3, r2
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	2002      	movs	r0, #2
 80046c4:	f003 fb05 	bl	8007cd2 <lcd_print_char>
				lcdVal++;
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	3301      	adds	r3, #1
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(int i=0; i<16; i++) {
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	3301      	adds	r3, #1
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	2b0f      	cmp	r3, #15
 80046d8:	ddec      	ble.n	80046b4 <menu+0x351c>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046da:	2102      	movs	r1, #2
 80046dc:	4827      	ldr	r0, [pc, #156]	; (800477c <menu+0x35e4>)
 80046de:	f004 fe09 	bl	80092f4 <HAL_GPIO_ReadPin>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d176      	bne.n	80047d6 <menu+0x363e>
 80046e8:	2104      	movs	r1, #4
 80046ea:	4824      	ldr	r0, [pc, #144]	; (800477c <menu+0x35e4>)
 80046ec:	f004 fe02 	bl	80092f4 <HAL_GPIO_ReadPin>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d16f      	bne.n	80047d6 <menu+0x363e>
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <menu+0x35e8>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f083 0301 	eor.w	r3, r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d068      	beq.n	80047d6 <menu+0x363e>
			takeWifiSSID();
 8004704:	f002 fc86 	bl	8007014 <takeWifiSSID>

			convertArrays(2);
 8004708:	2002      	movs	r0, #2
 800470a:	f7fc f815 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 800470e:	2032      	movs	r0, #50	; 0x32
 8004710:	f004 f820 	bl	8008754 <HAL_Delay>

			ssidLength = strlen(wifiSSID);
 8004714:	4824      	ldr	r0, [pc, #144]	; (80047a8 <menu+0x3610>)
 8004716:	f7fb fd85 	bl	8000224 <strlen>
 800471a:	4603      	mov	r3, r0
 800471c:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_Delay(250);
 800471e:	20fa      	movs	r0, #250	; 0xfa
 8004720:	f004 f818 	bl	8008754 <HAL_Delay>
			if(ssidLength == 16) {
 8004724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004726:	2b10      	cmp	r3, #16
 8004728:	d105      	bne.n	8004736 <menu+0x359e>
				lcd_print(2, 1, wifiSSID);
 800472a:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <menu+0x3610>)
 800472c:	2101      	movs	r1, #1
 800472e:	2002      	movs	r0, #2
 8004730:	f003 faba 	bl	8007ca8 <lcd_print>
 8004734:	e04f      	b.n	80047d6 <menu+0x363e>
			} else if(ssidLength < 16) {
 8004736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004738:	2b0f      	cmp	r3, #15
 800473a:	dc15      	bgt.n	8004768 <menu+0x35d0>
				for(int i=0; i<16-ssidLength; i++) {
 800473c:	2300      	movs	r3, #0
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
 8004740:	e00b      	b.n	800475a <menu+0x35c2>
					lcd_delete_char(2, ssidLength);
 8004742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004744:	b2db      	uxtb	r3, r3
 8004746:	4619      	mov	r1, r3
 8004748:	2002      	movs	r0, #2
 800474a:	f003 fae3 	bl	8007d14 <lcd_delete_char>
					ssidLength++;
 800474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004750:	3301      	adds	r3, #1
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
				for(int i=0; i<16-ssidLength; i++) {
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	3301      	adds	r3, #1
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
 800475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475c:	f1c3 0310 	rsb	r3, r3, #16
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	429a      	cmp	r2, r3
 8004764:	dbed      	blt.n	8004742 <menu+0x35aa>
 8004766:	e036      	b.n	80047d6 <menu+0x363e>
				}
			} else {
				int lcdVal = 1;
 8004768:	2301      	movs	r3, #1
 800476a:	623b      	str	r3, [r7, #32]

				//Eğer ssid 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 800476c:	2300      	movs	r3, #0
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e02e      	b.n	80047d0 <menu+0x3638>
 8004772:	bf00      	nop
 8004774:	20000241 	.word	0x20000241
 8004778:	0800d324 	.word	0x0800d324
 800477c:	40010800 	.word	0x40010800
 8004780:	2000024f 	.word	0x2000024f
 8004784:	2000023f 	.word	0x2000023f
 8004788:	20000118 	.word	0x20000118
 800478c:	2000024c 	.word	0x2000024c
 8004790:	20000220 	.word	0x20000220
 8004794:	20000240 	.word	0x20000240
 8004798:	0800da6c 	.word	0x0800da6c
 800479c:	0800da80 	.word	0x0800da80
 80047a0:	20000190 	.word	0x20000190
 80047a4:	0800da94 	.word	0x0800da94
 80047a8:	2000019c 	.word	0x2000019c
 80047ac:	0800da9c 	.word	0x0800da9c
					lcd_print_char(2, lcdVal, wifiSSID[i]);
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	b2d9      	uxtb	r1, r3
 80047b4:	4a8b      	ldr	r2, [pc, #556]	; (80049e4 <menu+0x384c>)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	2002      	movs	r0, #2
 80047c0:	f003 fa87 	bl	8007cd2 <lcd_print_char>
					lcdVal++;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	3301      	adds	r3, #1
 80047c8:	623b      	str	r3, [r7, #32]
				for(int i=0; i<16; i++) {
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3301      	adds	r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b0f      	cmp	r3, #15
 80047d4:	ddec      	ble.n	80047b0 <menu+0x3618>
				}
			}
		}
	}

	if (menuSayac == 34) {
 80047d6:	4b84      	ldr	r3, [pc, #528]	; (80049e8 <menu+0x3850>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b22      	cmp	r3, #34	; 0x22
 80047dc:	f040 80ac 	bne.w	8004938 <menu+0x37a0>
		calismaSayModu = 0;
 80047e0:	4b82      	ldr	r3, [pc, #520]	; (80049ec <menu+0x3854>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
		int passLength = strlen(wifiPass);
 80047e6:	4882      	ldr	r0, [pc, #520]	; (80049f0 <menu+0x3858>)
 80047e8:	f7fb fd1c 	bl	8000224 <strlen>
 80047ec:	4603      	mov	r3, r0
 80047ee:	61bb      	str	r3, [r7, #24]

		convertArrays(3);
 80047f0:	2003      	movs	r0, #3
 80047f2:	f7fb ffa1 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 80047f6:	2032      	movs	r0, #50	; 0x32
 80047f8:	f003 ffac 	bl	8008754 <HAL_Delay>

		lcd_print(1, 1, "WIFI PASS       ");
 80047fc:	4a7d      	ldr	r2, [pc, #500]	; (80049f4 <menu+0x385c>)
 80047fe:	2101      	movs	r1, #1
 8004800:	2001      	movs	r0, #1
 8004802:	f003 fa51 	bl	8007ca8 <lcd_print>
		if(passLength == 16) {
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b10      	cmp	r3, #16
 800480a:	d105      	bne.n	8004818 <menu+0x3680>
			lcd_print(2, 1, wifiPass);
 800480c:	4a78      	ldr	r2, [pc, #480]	; (80049f0 <menu+0x3858>)
 800480e:	2101      	movs	r1, #1
 8004810:	2002      	movs	r0, #2
 8004812:	f003 fa49 	bl	8007ca8 <lcd_print>
 8004816:	e030      	b.n	800487a <menu+0x36e2>
		} else if(passLength < 16) {
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	dc15      	bgt.n	800484a <menu+0x36b2>
			for(int i=0; i<16-passLength; i++) {
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	e00b      	b.n	800483c <menu+0x36a4>
				lcd_delete_char(2, passLength);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4619      	mov	r1, r3
 800482a:	2002      	movs	r0, #2
 800482c:	f003 fa72 	bl	8007d14 <lcd_delete_char>
				passLength++;
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	3301      	adds	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
			for(int i=0; i<16-passLength; i++) {
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3301      	adds	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f1c3 0310 	rsb	r3, r3, #16
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	429a      	cmp	r2, r3
 8004846:	dbed      	blt.n	8004824 <menu+0x368c>
 8004848:	e017      	b.n	800487a <menu+0x36e2>
			}
		} else {
			int lcdVal = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	613b      	str	r3, [r7, #16]

			//Eğer pass 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e00f      	b.n	8004874 <menu+0x36dc>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	b2d9      	uxtb	r1, r3
 8004858:	4a65      	ldr	r2, [pc, #404]	; (80049f0 <menu+0x3858>)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	2002      	movs	r0, #2
 8004864:	f003 fa35 	bl	8007cd2 <lcd_print_char>
				lcdVal++;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3301      	adds	r3, #1
 800486c:	613b      	str	r3, [r7, #16]
			for(int i=0; i<16; i++) {
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3301      	adds	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b0f      	cmp	r3, #15
 8004878:	ddec      	ble.n	8004854 <menu+0x36bc>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800487a:	2102      	movs	r1, #2
 800487c:	485e      	ldr	r0, [pc, #376]	; (80049f8 <menu+0x3860>)
 800487e:	f004 fd39 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004882:	4603      	mov	r3, r0
 8004884:	2b01      	cmp	r3, #1
 8004886:	d157      	bne.n	8004938 <menu+0x37a0>
 8004888:	2104      	movs	r1, #4
 800488a:	485b      	ldr	r0, [pc, #364]	; (80049f8 <menu+0x3860>)
 800488c:	f004 fd32 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004890:	4603      	mov	r3, r0
 8004892:	2b01      	cmp	r3, #1
 8004894:	d150      	bne.n	8004938 <menu+0x37a0>
 8004896:	4b59      	ldr	r3, [pc, #356]	; (80049fc <menu+0x3864>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	f083 0301 	eor.w	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d049      	beq.n	8004938 <menu+0x37a0>
			takeWifiPass();
 80048a4:	f002 fd56 	bl	8007354 <takeWifiPass>

			convertArrays(3);
 80048a8:	2003      	movs	r0, #3
 80048aa:	f7fb ff45 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 80048ae:	2032      	movs	r0, #50	; 0x32
 80048b0:	f003 ff50 	bl	8008754 <HAL_Delay>

			passLength = strlen(wifiPass);
 80048b4:	484e      	ldr	r0, [pc, #312]	; (80049f0 <menu+0x3858>)
 80048b6:	f7fb fcb5 	bl	8000224 <strlen>
 80048ba:	4603      	mov	r3, r0
 80048bc:	61bb      	str	r3, [r7, #24]

			HAL_Delay(250);
 80048be:	20fa      	movs	r0, #250	; 0xfa
 80048c0:	f003 ff48 	bl	8008754 <HAL_Delay>
			if(passLength == 16) {
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d105      	bne.n	80048d6 <menu+0x373e>
				lcd_print(2, 1, wifiPass);
 80048ca:	4a49      	ldr	r2, [pc, #292]	; (80049f0 <menu+0x3858>)
 80048cc:	2101      	movs	r1, #1
 80048ce:	2002      	movs	r0, #2
 80048d0:	f003 f9ea 	bl	8007ca8 <lcd_print>
 80048d4:	e030      	b.n	8004938 <menu+0x37a0>
			} else if(passLength < 16) {
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b0f      	cmp	r3, #15
 80048da:	dc15      	bgt.n	8004908 <menu+0x3770>
				for(int i=0; i<16-passLength; i++) {
 80048dc:	2300      	movs	r3, #0
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	e00b      	b.n	80048fa <menu+0x3762>
					lcd_delete_char(2, passLength);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	2002      	movs	r0, #2
 80048ea:	f003 fa13 	bl	8007d14 <lcd_delete_char>
					passLength++;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61bb      	str	r3, [r7, #24]
				for(int i=0; i<16-passLength; i++) {
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	3301      	adds	r3, #1
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f1c3 0310 	rsb	r3, r3, #16
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	429a      	cmp	r2, r3
 8004904:	dbed      	blt.n	80048e2 <menu+0x374a>
 8004906:	e017      	b.n	8004938 <menu+0x37a0>
				}
			} else {
				int lcdVal = 1;
 8004908:	2301      	movs	r3, #1
 800490a:	607b      	str	r3, [r7, #4]

				//Eğer pass 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 800490c:	2300      	movs	r3, #0
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	e00f      	b.n	8004932 <menu+0x379a>
					lcd_print_char(2, lcdVal, wifiPass[i]);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	b2d9      	uxtb	r1, r3
 8004916:	4a36      	ldr	r2, [pc, #216]	; (80049f0 <menu+0x3858>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	4413      	add	r3, r2
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	2002      	movs	r0, #2
 8004922:	f003 f9d6 	bl	8007cd2 <lcd_print_char>
					lcdVal++;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3301      	adds	r3, #1
 800492a:	607b      	str	r3, [r7, #4]
				for(int i=0; i<16; i++) {
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	3301      	adds	r3, #1
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b0f      	cmp	r3, #15
 8004936:	ddec      	ble.n	8004912 <menu+0x377a>
				}
			}
		}
	}

	if (menuSayac == 35) {
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <menu+0x3850>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b23      	cmp	r3, #35	; 0x23
 800493e:	d14d      	bne.n	80049dc <menu+0x3844>
		if(dilSecim == 0) {
 8004940:	4b2f      	ldr	r3, [pc, #188]	; (8004a00 <menu+0x3868>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <menu+0x37c6>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004948:	4a2e      	ldr	r2, [pc, #184]	; (8004a04 <menu+0x386c>)
 800494a:	2101      	movs	r1, #1
 800494c:	2001      	movs	r0, #1
 800494e:	f003 f9ab 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004952:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <menu+0x3870>)
 8004954:	2101      	movs	r1, #1
 8004956:	2002      	movs	r0, #2
 8004958:	f003 f9a6 	bl	8007ca8 <lcd_print>
 800495c:	e00d      	b.n	800497a <menu+0x37e2>
		} else if(dilSecim == 1) {
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <menu+0x3868>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d109      	bne.n	800497a <menu+0x37e2>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004966:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <menu+0x3874>)
 8004968:	2101      	movs	r1, #1
 800496a:	2001      	movs	r0, #1
 800496c:	f003 f99c 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <menu+0x3878>)
 8004972:	2101      	movs	r1, #1
 8004974:	2002      	movs	r0, #2
 8004976:	f003 f997 	bl	8007ca8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800497a:	2108      	movs	r1, #8
 800497c:	481e      	ldr	r0, [pc, #120]	; (80049f8 <menu+0x3860>)
 800497e:	f004 fcb9 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004982:	4603      	mov	r3, r0
 8004984:	2b01      	cmp	r3, #1
 8004986:	d129      	bne.n	80049dc <menu+0x3844>
			menuGiris = 0;
 8004988:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <menu+0x387c>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800498e:	bf00      	nop
 8004990:	4821      	ldr	r0, [pc, #132]	; (8004a18 <menu+0x3880>)
 8004992:	f005 fad8 	bl	8009f46 <HAL_I2C_GetError>
 8004996:	4603      	mov	r3, r0
 8004998:	2b04      	cmp	r3, #4
 800499a:	d0f9      	beq.n	8004990 <menu+0x37f8>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800499c:	bf00      	nop
 800499e:	481e      	ldr	r0, [pc, #120]	; (8004a18 <menu+0x3880>)
 80049a0:	f005 fac4 	bl	8009f2c <HAL_I2C_GetState>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d1f9      	bne.n	800499e <menu+0x3806>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80049aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80049ae:	9302      	str	r3, [sp, #8]
 80049b0:	236e      	movs	r3, #110	; 0x6e
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <menu+0x3884>)
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	236e      	movs	r3, #110	; 0x6e
 80049ba:	2200      	movs	r2, #0
 80049bc:	21a0      	movs	r1, #160	; 0xa0
 80049be:	4816      	ldr	r0, [pc, #88]	; (8004a18 <menu+0x3880>)
 80049c0:	f004 ff52 	bl	8009868 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80049c4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80049c8:	f003 fec4 	bl	8008754 <HAL_Delay>

			lcd_clear();
 80049cc:	f003 f998 	bl	8007d00 <lcd_clear>
			HAL_Delay(500);
 80049d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049d4:	f003 febe 	bl	8008754 <HAL_Delay>
			NVIC_SystemReset();
 80049d8:	f7fc fbc8 	bl	800116c <__NVIC_SystemReset>
		}
	}
}
 80049dc:	bf00      	nop
 80049de:	3738      	adds	r7, #56	; 0x38
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	2000019c 	.word	0x2000019c
 80049e8:	20000220 	.word	0x20000220
 80049ec:	20000240 	.word	0x20000240
 80049f0:	200001b0 	.word	0x200001b0
 80049f4:	0800dab0 	.word	0x0800dab0
 80049f8:	40010800 	.word	0x40010800
 80049fc:	2000024f 	.word	0x2000024f
 8004a00:	20000241 	.word	0x20000241
 8004a04:	0800dac4 	.word	0x0800dac4
 8004a08:	0800dad8 	.word	0x0800dad8
 8004a0c:	0800daec 	.word	0x0800daec
 8004a10:	0800db00 	.word	0x0800db00
 8004a14:	2000023d 	.word	0x2000023d
 8004a18:	200003a8 	.word	0x200003a8
 8004a1c:	20000118 	.word	0x20000118

08004a20 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <lcdUpdate+0x9c>)
 8004a32:	2101      	movs	r1, #1
 8004a34:	2002      	movs	r0, #2
 8004a36:	f003 f937 	bl	8007ca8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a3a:	e03b      	b.n	8004ab4 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d105      	bne.n	8004a4e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <lcdUpdate+0x9c>)
 8004a44:	2102      	movs	r1, #2
 8004a46:	2002      	movs	r0, #2
 8004a48:	f003 f92e 	bl	8007ca8 <lcd_print>
}
 8004a4c:	e032      	b.n	8004ab4 <lcdUpdate+0x94>
	} else if(y==3) {
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d105      	bne.n	8004a60 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a54:	4a19      	ldr	r2, [pc, #100]	; (8004abc <lcdUpdate+0x9c>)
 8004a56:	2103      	movs	r1, #3
 8004a58:	2002      	movs	r0, #2
 8004a5a:	f003 f925 	bl	8007ca8 <lcd_print>
}
 8004a5e:	e029      	b.n	8004ab4 <lcdUpdate+0x94>
	} else if(y==4) {
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d105      	bne.n	8004a72 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004a66:	4a15      	ldr	r2, [pc, #84]	; (8004abc <lcdUpdate+0x9c>)
 8004a68:	2104      	movs	r1, #4
 8004a6a:	2002      	movs	r0, #2
 8004a6c:	f003 f91c 	bl	8007ca8 <lcd_print>
}
 8004a70:	e020      	b.n	8004ab4 <lcdUpdate+0x94>
	} else if(y==5) {
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	2b05      	cmp	r3, #5
 8004a76:	d105      	bne.n	8004a84 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004a78:	4a10      	ldr	r2, [pc, #64]	; (8004abc <lcdUpdate+0x9c>)
 8004a7a:	2105      	movs	r1, #5
 8004a7c:	2002      	movs	r0, #2
 8004a7e:	f003 f913 	bl	8007ca8 <lcd_print>
}
 8004a82:	e017      	b.n	8004ab4 <lcdUpdate+0x94>
	} else if(y==6) {
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d105      	bne.n	8004a96 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <lcdUpdate+0x9c>)
 8004a8c:	2106      	movs	r1, #6
 8004a8e:	2002      	movs	r0, #2
 8004a90:	f003 f90a 	bl	8007ca8 <lcd_print>
}
 8004a94:	e00e      	b.n	8004ab4 <lcdUpdate+0x94>
	} else if (y==7) {
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	2b07      	cmp	r3, #7
 8004a9a:	d10b      	bne.n	8004ab4 <lcdUpdate+0x94>
		lcd_clear();
 8004a9c:	f003 f930 	bl	8007d00 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004aa0:	4a07      	ldr	r2, [pc, #28]	; (8004ac0 <lcdUpdate+0xa0>)
 8004aa2:	2104      	movs	r1, #4
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	f003 f8ff 	bl	8007ca8 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004aaa:	4a06      	ldr	r2, [pc, #24]	; (8004ac4 <lcdUpdate+0xa4>)
 8004aac:	2106      	movs	r1, #6
 8004aae:	2002      	movs	r0, #2
 8004ab0:	f003 f8fa 	bl	8007ca8 <lcd_print>
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	0800db14 	.word	0x0800db14
 8004ac0:	0800db18 	.word	0x0800db18
 8004ac4:	0800db20 	.word	0x0800db20

08004ac8 <bekle>:

void bekle() {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
	timer1=millis;
 8004acc:	4b47      	ldr	r3, [pc, #284]	; (8004bec <bekle+0x124>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a47      	ldr	r2, [pc, #284]	; (8004bf0 <bekle+0x128>)
 8004ad2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ad4:	e002      	b.n	8004adc <bekle+0x14>
    	butonKontrol = 1;
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <bekle+0x12c>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004adc:	2101      	movs	r1, #1
 8004ade:	4846      	ldr	r0, [pc, #280]	; (8004bf8 <bekle+0x130>)
 8004ae0:	f004 fc08 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d109      	bne.n	8004afe <bekle+0x36>
 8004aea:	4b40      	ldr	r3, [pc, #256]	; (8004bec <bekle+0x124>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <bekle+0x128>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d0ef      	beq.n	8004ad6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004af6:	e002      	b.n	8004afe <bekle+0x36>
    	butonKontrol = 1;
 8004af8:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <bekle+0x12c>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004afe:	2108      	movs	r1, #8
 8004b00:	483e      	ldr	r0, [pc, #248]	; (8004bfc <bekle+0x134>)
 8004b02:	f004 fbf7 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d109      	bne.n	8004b20 <bekle+0x58>
 8004b0c:	4b37      	ldr	r3, [pc, #220]	; (8004bec <bekle+0x124>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <bekle+0x128>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d0ef      	beq.n	8004af8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b18:	e002      	b.n	8004b20 <bekle+0x58>
    	butonKontrol = 1;
 8004b1a:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <bekle+0x12c>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b20:	2102      	movs	r1, #2
 8004b22:	4835      	ldr	r0, [pc, #212]	; (8004bf8 <bekle+0x130>)
 8004b24:	f004 fbe6 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d109      	bne.n	8004b42 <bekle+0x7a>
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <bekle+0x124>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b2f      	ldr	r3, [pc, #188]	; (8004bf0 <bekle+0x128>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d0ef      	beq.n	8004b1a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b3a:	e002      	b.n	8004b42 <bekle+0x7a>
    	butonKontrol = 1;
 8004b3c:	4b2d      	ldr	r3, [pc, #180]	; (8004bf4 <bekle+0x12c>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b42:	2104      	movs	r1, #4
 8004b44:	482c      	ldr	r0, [pc, #176]	; (8004bf8 <bekle+0x130>)
 8004b46:	f004 fbd5 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d109      	bne.n	8004b64 <bekle+0x9c>
 8004b50:	4b26      	ldr	r3, [pc, #152]	; (8004bec <bekle+0x124>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4b26      	ldr	r3, [pc, #152]	; (8004bf0 <bekle+0x128>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d0ef      	beq.n	8004b3c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b5c:	e002      	b.n	8004b64 <bekle+0x9c>
    	butonKontrol = 1;
 8004b5e:	4b25      	ldr	r3, [pc, #148]	; (8004bf4 <bekle+0x12c>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b64:	2108      	movs	r1, #8
 8004b66:	4824      	ldr	r0, [pc, #144]	; (8004bf8 <bekle+0x130>)
 8004b68:	f004 fbc4 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d109      	bne.n	8004b86 <bekle+0xbe>
 8004b72:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <bekle+0x124>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <bekle+0x128>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d0ef      	beq.n	8004b5e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b7e:	e002      	b.n	8004b86 <bekle+0xbe>
    	butonKontrol = 1;
 8004b80:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <bekle+0x12c>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	481c      	ldr	r0, [pc, #112]	; (8004bfc <bekle+0x134>)
 8004b8a:	f004 fbb3 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <bekle+0xe0>
 8004b94:	4b15      	ldr	r3, [pc, #84]	; (8004bec <bekle+0x124>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <bekle+0x128>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d0ef      	beq.n	8004b80 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ba0:	e002      	b.n	8004ba8 <bekle+0xe0>
    	butonKontrol = 1;
 8004ba2:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <bekle+0x12c>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bac:	4813      	ldr	r0, [pc, #76]	; (8004bfc <bekle+0x134>)
 8004bae:	f004 fba1 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <bekle+0x104>
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <bekle+0x124>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <bekle+0x128>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d0ee      	beq.n	8004ba2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bc4:	e002      	b.n	8004bcc <bekle+0x104>
    	butonKontrol = 1;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <bekle+0x12c>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd0:	480a      	ldr	r0, [pc, #40]	; (8004bfc <bekle+0x134>)
 8004bd2:	f004 fb8f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <bekle+0x120>
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <bekle+0x124>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <bekle+0x128>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d0ee      	beq.n	8004bc6 <bekle+0xfe>
    }

}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	200001fc 	.word	0x200001fc
 8004bf0:	20000204 	.word	0x20000204
 8004bf4:	2000024f 	.word	0x2000024f
 8004bf8:	40010800 	.word	0x40010800
 8004bfc:	40011000 	.word	0x40011000

08004c00 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <checkLCDBacklight+0x24>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <checkLCDBacklight+0x28>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b3b      	cmp	r3, #59	; 0x3b
 8004c10:	d903      	bls.n	8004c1a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c12:	2000      	movs	r0, #0
 8004c14:	f003 f894 	bl	8007d40 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c18:	e002      	b.n	8004c20 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f003 f890 	bl	8007d40 <lcd_backlight>
}
 8004c20:	bf00      	nop
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	200001fc 	.word	0x200001fc
 8004c28:	20000218 	.word	0x20000218

08004c2c <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c30:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <checkBasincSalteri+0x54>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <checkBasincSalteri+0x12>
		basincVar=1;
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <checkBasincSalteri+0x58>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <checkBasincSalteri+0x54>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d119      	bne.n	8004c7a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c4a:	480f      	ldr	r0, [pc, #60]	; (8004c88 <checkBasincSalteri+0x5c>)
 8004c4c:	f004 fb52 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <checkBasincSalteri+0x60>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <checkBasincSalteri+0x64>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d90a      	bls.n	8004c7a <checkBasincSalteri+0x4e>
				basincVar=1;
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <checkBasincSalteri+0x58>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004c6a:	e006      	b.n	8004c7a <checkBasincSalteri+0x4e>
			timer5=millis;
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <checkBasincSalteri+0x60>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <checkBasincSalteri+0x64>)
 8004c72:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <checkBasincSalteri+0x58>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000227 	.word	0x20000227
 8004c84:	20000223 	.word	0x20000223
 8004c88:	40011000 	.word	0x40011000
 8004c8c:	200001fc 	.word	0x200001fc
 8004c90:	20000214 	.word	0x20000214

08004c94 <checkBasGonder>:

void checkBasGonder() {
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <checkBasGonder+0x74>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d10b      	bne.n	8004cb8 <checkBasGonder+0x24>
 8004ca0:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <checkBasGonder+0x78>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <checkBasGonder+0x24>
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <checkBasGonder+0x7c>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004cb0:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <checkBasGonder+0x80>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e009      	b.n	8004ccc <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004cb8:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <checkBasGonder+0x78>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	f083 0301 	eor.w	r3, r3, #1
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004cc6:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <checkBasGonder+0x80>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <checkBasGonder+0x74>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d10b      	bne.n	8004cec <checkBasGonder+0x58>
 8004cd4:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <checkBasGonder+0x84>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <checkBasGonder+0x58>
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <checkBasGonder+0x7c>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004ce4:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <checkBasGonder+0x88>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004cea:	e009      	b.n	8004d00 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <checkBasGonder+0x84>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	f083 0301 	eor.w	r3, r3, #1
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <checkBasGonder+0x88>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr
 8004d08:	20000221 	.word	0x20000221
 8004d0c:	20000255 	.word	0x20000255
 8004d10:	2000022f 	.word	0x2000022f
 8004d14:	2000025c 	.word	0x2000025c
 8004d18:	20000258 	.word	0x20000258
 8004d1c:	2000025d 	.word	0x2000025d

08004d20 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <checkKapiSecimleri+0x98>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d2c:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <checkKapiSecimleri+0x9c>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d32:	4b21      	ldr	r3, [pc, #132]	; (8004db8 <checkKapiSecimleri+0x98>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d10e      	bne.n	8004d58 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d3e:	4820      	ldr	r0, [pc, #128]	; (8004dc0 <checkKapiSecimleri+0xa0>)
 8004d40:	f004 fad8 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004d4a:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <checkKapiSecimleri+0x9c>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	e002      	b.n	8004d58 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004d52:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <checkKapiSecimleri+0x9c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004d58:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <checkKapiSecimleri+0x98>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d10e      	bne.n	8004d7e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d64:	4816      	ldr	r0, [pc, #88]	; (8004dc0 <checkKapiSecimleri+0xa0>)
 8004d66:	f004 fac5 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004d70:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <checkKapiSecimleri+0x9c>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	e002      	b.n	8004d7e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004d78:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <checkKapiSecimleri+0x9c>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <checkKapiSecimleri+0x98>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d116      	bne.n	8004db4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d8a:	480d      	ldr	r0, [pc, #52]	; (8004dc0 <checkKapiSecimleri+0xa0>)
 8004d8c:	f004 fab2 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <checkKapiSecimleri+0x8e>
 8004d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d9a:	4809      	ldr	r0, [pc, #36]	; (8004dc0 <checkKapiSecimleri+0xa0>)
 8004d9c:	f004 faaa 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <checkKapiSecimleri+0x9c>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004dac:	e002      	b.n	8004db4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004dae:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <checkKapiSecimleri+0x9c>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000228 	.word	0x20000228
 8004dbc:	20000273 	.word	0x20000273
 8004dc0:	40010800 	.word	0x40010800

08004dc4 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004dc8:	4b62      	ldr	r3, [pc, #392]	; (8004f54 <checkAktifCalisma+0x190>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f041 833e 	bne.w	800644e <checkAktifCalisma+0x168a>
 8004dd2:	4b61      	ldr	r3, [pc, #388]	; (8004f58 <checkAktifCalisma+0x194>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f041 8339 	bne.w	800644e <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004ddc:	4b5f      	ldr	r3, [pc, #380]	; (8004f5c <checkAktifCalisma+0x198>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d11a      	bne.n	8004e1a <checkAktifCalisma+0x56>
 8004de4:	4b5e      	ldr	r3, [pc, #376]	; (8004f60 <checkAktifCalisma+0x19c>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d116      	bne.n	8004e1a <checkAktifCalisma+0x56>
 8004dec:	4b5d      	ldr	r3, [pc, #372]	; (8004f64 <checkAktifCalisma+0x1a0>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <checkAktifCalisma+0x46>
 8004df4:	4b5c      	ldr	r3, [pc, #368]	; (8004f68 <checkAktifCalisma+0x1a4>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	f083 0301 	eor.w	r3, r3, #1
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <checkAktifCalisma+0x46>
 8004e02:	4b5a      	ldr	r3, [pc, #360]	; (8004f6c <checkAktifCalisma+0x1a8>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d007      	beq.n	8004e1a <checkAktifCalisma+0x56>
 8004e0a:	4b59      	ldr	r3, [pc, #356]	; (8004f70 <checkAktifCalisma+0x1ac>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d018      	beq.n	8004e44 <checkAktifCalisma+0x80>
 8004e12:	4b58      	ldr	r3, [pc, #352]	; (8004f74 <checkAktifCalisma+0x1b0>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d114      	bne.n	8004e44 <checkAktifCalisma+0x80>
 8004e1a:	4b57      	ldr	r3, [pc, #348]	; (8004f78 <checkAktifCalisma+0x1b4>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d010      	beq.n	8004e44 <checkAktifCalisma+0x80>
 8004e22:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <checkAktifCalisma+0x1b8>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e30:	4853      	ldr	r0, [pc, #332]	; (8004f80 <checkAktifCalisma+0x1bc>)
 8004e32:	f004 fa76 	bl	8009322 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004e36:	4b53      	ldr	r3, [pc, #332]	; (8004f84 <checkAktifCalisma+0x1c0>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004e3c:	4b52      	ldr	r3, [pc, #328]	; (8004f88 <checkAktifCalisma+0x1c4>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e008      	b.n	8004e56 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e44:	2200      	movs	r2, #0
 8004e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e4a:	484d      	ldr	r0, [pc, #308]	; (8004f80 <checkAktifCalisma+0x1bc>)
 8004e4c:	f004 fa69 	bl	8009322 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004e50:	4b4c      	ldr	r3, [pc, #304]	; (8004f84 <checkAktifCalisma+0x1c0>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004e56:	4b40      	ldr	r3, [pc, #256]	; (8004f58 <checkAktifCalisma+0x194>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d160      	bne.n	8004f20 <checkAktifCalisma+0x15c>
 8004e5e:	4b46      	ldr	r3, [pc, #280]	; (8004f78 <checkAktifCalisma+0x1b4>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d05c      	beq.n	8004f20 <checkAktifCalisma+0x15c>
 8004e66:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <checkAktifCalisma+0x1b8>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d058      	beq.n	8004f20 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e72:	4843      	ldr	r0, [pc, #268]	; (8004f80 <checkAktifCalisma+0x1bc>)
 8004e74:	f004 fa3e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <checkAktifCalisma+0xc2>
 8004e7e:	4b43      	ldr	r3, [pc, #268]	; (8004f8c <checkAktifCalisma+0x1c8>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d04c      	beq.n	8004f20 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e86:	2102      	movs	r1, #2
 8004e88:	4841      	ldr	r0, [pc, #260]	; (8004f90 <checkAktifCalisma+0x1cc>)
 8004e8a:	f004 fa33 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d145      	bne.n	8004f20 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004e94:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <checkAktifCalisma+0x1d0>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d041      	beq.n	8004f20 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ea0:	4837      	ldr	r0, [pc, #220]	; (8004f80 <checkAktifCalisma+0x1bc>)
 8004ea2:	f004 fa27 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d10e      	bne.n	8004eca <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eb0:	4833      	ldr	r0, [pc, #204]	; (8004f80 <checkAktifCalisma+0x1bc>)
 8004eb2:	f004 fa1f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d106      	bne.n	8004eca <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004ebc:	2140      	movs	r1, #64	; 0x40
 8004ebe:	4834      	ldr	r0, [pc, #208]	; (8004f90 <checkAktifCalisma+0x1cc>)
 8004ec0:	f004 fa18 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d003      	beq.n	8004ed2 <checkAktifCalisma+0x10e>
 8004eca:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <checkAktifCalisma+0x198>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d026      	beq.n	8004f20 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004ed2:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <checkAktifCalisma+0x1a0>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	f083 0301 	eor.w	r3, r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01f      	beq.n	8004f20 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <checkAktifCalisma+0x19c>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f083 0301 	eor.w	r3, r3, #1
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d018      	beq.n	8004f20 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004eee:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <checkAktifCalisma+0x1ac>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	f083 0301 	eor.w	r3, r3, #1
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d011      	beq.n	8004f20 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004efc:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <checkAktifCalisma+0x1d4>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	f083 0301 	eor.w	r3, r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004f0a:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <checkAktifCalisma+0x1d8>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	f083 0301 	eor.w	r3, r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <checkAktifCalisma+0x198>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e002      	b.n	8004f26 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <checkAktifCalisma+0x198>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f26:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <checkAktifCalisma+0x198>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d03a      	beq.n	8004fa4 <checkAktifCalisma+0x1e0>
 8004f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f32:	4817      	ldr	r0, [pc, #92]	; (8004f90 <checkAktifCalisma+0x1cc>)
 8004f34:	f004 f9de 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d132      	bne.n	8004fa4 <checkAktifCalisma+0x1e0>
 8004f3e:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <checkAktifCalisma+0x1dc>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02e      	beq.n	8004fa4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f46:	2201      	movs	r2, #1
 8004f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f4c:	480c      	ldr	r0, [pc, #48]	; (8004f80 <checkAktifCalisma+0x1bc>)
 8004f4e:	f004 f9e8 	bl	8009322 <HAL_GPIO_WritePin>
 8004f52:	e02d      	b.n	8004fb0 <checkAktifCalisma+0x1ec>
 8004f54:	2000023e 	.word	0x2000023e
 8004f58:	2000023d 	.word	0x2000023d
 8004f5c:	20000255 	.word	0x20000255
 8004f60:	20000256 	.word	0x20000256
 8004f64:	20000258 	.word	0x20000258
 8004f68:	20000250 	.word	0x20000250
 8004f6c:	20000233 	.word	0x20000233
 8004f70:	20000257 	.word	0x20000257
 8004f74:	20000232 	.word	0x20000232
 8004f78:	20000272 	.word	0x20000272
 8004f7c:	20000273 	.word	0x20000273
 8004f80:	40010c00 	.word	0x40010c00
 8004f84:	20000274 	.word	0x20000274
 8004f88:	2000025f 	.word	0x2000025f
 8004f8c:	2000025c 	.word	0x2000025c
 8004f90:	40011000 	.word	0x40011000
 8004f94:	20000223 	.word	0x20000223
 8004f98:	2000025a 	.word	0x2000025a
 8004f9c:	2000025b 	.word	0x2000025b
 8004fa0:	2000022e 	.word	0x2000022e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004faa:	4860      	ldr	r0, [pc, #384]	; (800512c <checkAktifCalisma+0x368>)
 8004fac:	f004 f9b9 	bl	8009322 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004fb0:	4b5f      	ldr	r3, [pc, #380]	; (8005130 <checkAktifCalisma+0x36c>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d013      	beq.n	8004fe0 <checkAktifCalisma+0x21c>
 8004fb8:	4b5e      	ldr	r3, [pc, #376]	; (8005134 <checkAktifCalisma+0x370>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d007      	beq.n	8004fd0 <checkAktifCalisma+0x20c>
 8004fc0:	4b5c      	ldr	r3, [pc, #368]	; (8005134 <checkAktifCalisma+0x370>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d003      	beq.n	8004fd0 <checkAktifCalisma+0x20c>
 8004fc8:	4b5b      	ldr	r3, [pc, #364]	; (8005138 <checkAktifCalisma+0x374>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2104      	movs	r1, #4
 8004fd4:	4855      	ldr	r0, [pc, #340]	; (800512c <checkAktifCalisma+0x368>)
 8004fd6:	f004 f9a4 	bl	8009322 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004fda:	4b58      	ldr	r3, [pc, #352]	; (800513c <checkAktifCalisma+0x378>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004fe0:	4b56      	ldr	r3, [pc, #344]	; (800513c <checkAktifCalisma+0x378>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02f      	beq.n	8005048 <checkAktifCalisma+0x284>
 8004fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fec:	484f      	ldr	r0, [pc, #316]	; (800512c <checkAktifCalisma+0x368>)
 8004fee:	f004 f981 	bl	80092f4 <HAL_GPIO_ReadPin>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d106      	bne.n	8005006 <checkAktifCalisma+0x242>
 8004ff8:	4b51      	ldr	r3, [pc, #324]	; (8005140 <checkAktifCalisma+0x37c>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	f083 0301 	eor.w	r3, r3, #1
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <checkAktifCalisma+0x250>
 8005006:	2102      	movs	r1, #2
 8005008:	484e      	ldr	r0, [pc, #312]	; (8005144 <checkAktifCalisma+0x380>)
 800500a:	f004 f973 	bl	80092f4 <HAL_GPIO_ReadPin>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d119      	bne.n	8005048 <checkAktifCalisma+0x284>
 8005014:	4b4c      	ldr	r3, [pc, #304]	; (8005148 <checkAktifCalisma+0x384>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d015      	beq.n	8005048 <checkAktifCalisma+0x284>
 800501c:	4b4b      	ldr	r3, [pc, #300]	; (800514c <checkAktifCalisma+0x388>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d011      	beq.n	8005048 <checkAktifCalisma+0x284>
 8005024:	4b4a      	ldr	r3, [pc, #296]	; (8005150 <checkAktifCalisma+0x38c>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00d      	beq.n	8005048 <checkAktifCalisma+0x284>
 800502c:	4b49      	ldr	r3, [pc, #292]	; (8005154 <checkAktifCalisma+0x390>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	f083 0301 	eor.w	r3, r3, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <checkAktifCalisma+0x284>
			timer2=millis;
 800503a:	4b47      	ldr	r3, [pc, #284]	; (8005158 <checkAktifCalisma+0x394>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a47      	ldr	r2, [pc, #284]	; (800515c <checkAktifCalisma+0x398>)
 8005040:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005042:	4b44      	ldr	r3, [pc, #272]	; (8005154 <checkAktifCalisma+0x390>)
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005048:	4b43      	ldr	r3, [pc, #268]	; (8005158 <checkAktifCalisma+0x394>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b43      	ldr	r3, [pc, #268]	; (800515c <checkAktifCalisma+0x398>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	4a43      	ldr	r2, [pc, #268]	; (8005160 <checkAktifCalisma+0x39c>)
 8005054:	7812      	ldrb	r2, [r2, #0]
 8005056:	4293      	cmp	r3, r2
 8005058:	d303      	bcc.n	8005062 <checkAktifCalisma+0x29e>
 800505a:	4b3e      	ldr	r3, [pc, #248]	; (8005154 <checkAktifCalisma+0x390>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d111      	bne.n	8005086 <checkAktifCalisma+0x2c2>
 8005062:	4b39      	ldr	r3, [pc, #228]	; (8005148 <checkAktifCalisma+0x384>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	f083 0301 	eor.w	r3, r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <checkAktifCalisma+0x2c2>
 8005070:	4b36      	ldr	r3, [pc, #216]	; (800514c <checkAktifCalisma+0x388>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f083 0301 	eor.w	r3, r3, #1
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <checkAktifCalisma+0x2c2>
 800507e:	4b34      	ldr	r3, [pc, #208]	; (8005150 <checkAktifCalisma+0x38c>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005086:	2200      	movs	r2, #0
 8005088:	2104      	movs	r1, #4
 800508a:	4828      	ldr	r0, [pc, #160]	; (800512c <checkAktifCalisma+0x368>)
 800508c:	f004 f949 	bl	8009322 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005090:	4b2a      	ldr	r3, [pc, #168]	; (800513c <checkAktifCalisma+0x378>)
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005096:	4b2f      	ldr	r3, [pc, #188]	; (8005154 <checkAktifCalisma+0x390>)
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 800509c:	4b31      	ldr	r3, [pc, #196]	; (8005164 <checkAktifCalisma+0x3a0>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80050a4:	4b30      	ldr	r3, [pc, #192]	; (8005168 <checkAktifCalisma+0x3a4>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80050aa:	4b2e      	ldr	r3, [pc, #184]	; (8005164 <checkAktifCalisma+0x3a0>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d116      	bne.n	80050e0 <checkAktifCalisma+0x31c>
 80050b2:	4b2e      	ldr	r3, [pc, #184]	; (800516c <checkAktifCalisma+0x3a8>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d112      	bne.n	80050e0 <checkAktifCalisma+0x31c>
 80050ba:	2101      	movs	r1, #1
 80050bc:	4821      	ldr	r0, [pc, #132]	; (8005144 <checkAktifCalisma+0x380>)
 80050be:	f004 f919 	bl	80092f4 <HAL_GPIO_ReadPin>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <checkAktifCalisma+0x31c>
 80050c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050cc:	4817      	ldr	r0, [pc, #92]	; (800512c <checkAktifCalisma+0x368>)
 80050ce:	f004 f911 	bl	80092f4 <HAL_GPIO_ReadPin>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80050d8:	4b23      	ldr	r3, [pc, #140]	; (8005168 <checkAktifCalisma+0x3a4>)
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e011      	b.n	8005104 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80050e0:	4b20      	ldr	r3, [pc, #128]	; (8005164 <checkAktifCalisma+0x3a0>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d10d      	bne.n	8005104 <checkAktifCalisma+0x340>
 80050e8:	2101      	movs	r1, #1
 80050ea:	4816      	ldr	r0, [pc, #88]	; (8005144 <checkAktifCalisma+0x380>)
 80050ec:	f004 f902 	bl	80092f4 <HAL_GPIO_ReadPin>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d106      	bne.n	8005104 <checkAktifCalisma+0x340>
 80050f6:	4b1d      	ldr	r3, [pc, #116]	; (800516c <checkAktifCalisma+0x3a8>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80050fe:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <checkAktifCalisma+0x3a4>)
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005104:	4b17      	ldr	r3, [pc, #92]	; (8005164 <checkAktifCalisma+0x3a0>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d134      	bne.n	8005176 <checkAktifCalisma+0x3b2>
 800510c:	4b17      	ldr	r3, [pc, #92]	; (800516c <checkAktifCalisma+0x3a8>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d130      	bne.n	8005176 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005114:	2101      	movs	r1, #1
 8005116:	480b      	ldr	r0, [pc, #44]	; (8005144 <checkAktifCalisma+0x380>)
 8005118:	f004 f8ec 	bl	80092f4 <HAL_GPIO_ReadPin>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d126      	bne.n	8005170 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <checkAktifCalisma+0x3a4>)
 8005124:	2201      	movs	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e025      	b.n	8005176 <checkAktifCalisma+0x3b2>
 800512a:	bf00      	nop
 800512c:	40010c00 	.word	0x40010c00
 8005130:	20000255 	.word	0x20000255
 8005134:	2000022f 	.word	0x2000022f
 8005138:	20000233 	.word	0x20000233
 800513c:	20000259 	.word	0x20000259
 8005140:	2000025c 	.word	0x2000025c
 8005144:	40011000 	.word	0x40011000
 8005148:	20000272 	.word	0x20000272
 800514c:	20000273 	.word	0x20000273
 8005150:	20000223 	.word	0x20000223
 8005154:	20000251 	.word	0x20000251
 8005158:	200001fc 	.word	0x200001fc
 800515c:	20000208 	.word	0x20000208
 8005160:	20000234 	.word	0x20000234
 8005164:	20000224 	.word	0x20000224
 8005168:	20000277 	.word	0x20000277
 800516c:	20000221 	.word	0x20000221
			} else {
				cerceveVar=0;
 8005170:	4b7f      	ldr	r3, [pc, #508]	; (8005370 <checkAktifCalisma+0x5ac>)
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005176:	4b7f      	ldr	r3, [pc, #508]	; (8005374 <checkAktifCalisma+0x5b0>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d17c      	bne.n	8005278 <checkAktifCalisma+0x4b4>
 800517e:	4b7e      	ldr	r3, [pc, #504]	; (8005378 <checkAktifCalisma+0x5b4>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d078      	beq.n	8005278 <checkAktifCalisma+0x4b4>
 8005186:	4b7d      	ldr	r3, [pc, #500]	; (800537c <checkAktifCalisma+0x5b8>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d074      	beq.n	8005278 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800518e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005192:	487b      	ldr	r0, [pc, #492]	; (8005380 <checkAktifCalisma+0x5bc>)
 8005194:	f004 f8ae 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <checkAktifCalisma+0x3e2>
 800519e:	4b79      	ldr	r3, [pc, #484]	; (8005384 <checkAktifCalisma+0x5c0>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d068      	beq.n	8005278 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80051a6:	4b72      	ldr	r3, [pc, #456]	; (8005370 <checkAktifCalisma+0x5ac>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d064      	beq.n	8005278 <checkAktifCalisma+0x4b4>
 80051ae:	4b76      	ldr	r3, [pc, #472]	; (8005388 <checkAktifCalisma+0x5c4>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	f083 0301 	eor.w	r3, r3, #1
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d05d      	beq.n	8005278 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80051bc:	2104      	movs	r1, #4
 80051be:	4873      	ldr	r0, [pc, #460]	; (800538c <checkAktifCalisma+0x5c8>)
 80051c0:	f004 f898 	bl	80092f4 <HAL_GPIO_ReadPin>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <checkAktifCalisma+0x40e>
 80051ca:	4b71      	ldr	r3, [pc, #452]	; (8005390 <checkAktifCalisma+0x5cc>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d152      	bne.n	8005278 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051d6:	486a      	ldr	r0, [pc, #424]	; (8005380 <checkAktifCalisma+0x5bc>)
 80051d8:	f004 f88c 	bl	80092f4 <HAL_GPIO_ReadPin>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d10e      	bne.n	8005200 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80051e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051e6:	4866      	ldr	r0, [pc, #408]	; (8005380 <checkAktifCalisma+0x5bc>)
 80051e8:	f004 f884 	bl	80092f4 <HAL_GPIO_ReadPin>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d106      	bne.n	8005200 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80051f2:	2140      	movs	r1, #64	; 0x40
 80051f4:	4865      	ldr	r0, [pc, #404]	; (800538c <checkAktifCalisma+0x5c8>)
 80051f6:	f004 f87d 	bl	80092f4 <HAL_GPIO_ReadPin>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d003      	beq.n	8005208 <checkAktifCalisma+0x444>
 8005200:	4b64      	ldr	r3, [pc, #400]	; (8005394 <checkAktifCalisma+0x5d0>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d037      	beq.n	8005278 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005208:	4b63      	ldr	r3, [pc, #396]	; (8005398 <checkAktifCalisma+0x5d4>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	f083 0301 	eor.w	r3, r3, #1
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d030      	beq.n	8005278 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005216:	4b61      	ldr	r3, [pc, #388]	; (800539c <checkAktifCalisma+0x5d8>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	f083 0301 	eor.w	r3, r3, #1
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d029      	beq.n	8005278 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005224:	4b5e      	ldr	r3, [pc, #376]	; (80053a0 <checkAktifCalisma+0x5dc>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	f083 0301 	eor.w	r3, r3, #1
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d022      	beq.n	8005278 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005232:	4b5c      	ldr	r3, [pc, #368]	; (80053a4 <checkAktifCalisma+0x5e0>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	f083 0301 	eor.w	r3, r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005240:	4b59      	ldr	r3, [pc, #356]	; (80053a8 <checkAktifCalisma+0x5e4>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	f083 0301 	eor.w	r3, r3, #1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d014      	beq.n	8005278 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800524e:	4b57      	ldr	r3, [pc, #348]	; (80053ac <checkAktifCalisma+0x5e8>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	f083 0301 	eor.w	r3, r3, #1
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800525c:	2201      	movs	r2, #1
 800525e:	2102      	movs	r1, #2
 8005260:	4847      	ldr	r0, [pc, #284]	; (8005380 <checkAktifCalisma+0x5bc>)
 8005262:	f004 f85e 	bl	8009322 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005266:	4b4b      	ldr	r3, [pc, #300]	; (8005394 <checkAktifCalisma+0x5d0>)
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 800526c:	4b50      	ldr	r3, [pc, #320]	; (80053b0 <checkAktifCalisma+0x5ec>)
 800526e:	2201      	movs	r2, #1
 8005270:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005272:	4b50      	ldr	r3, [pc, #320]	; (80053b4 <checkAktifCalisma+0x5f0>)
 8005274:	2201      	movs	r2, #1
 8005276:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005278:	4b46      	ldr	r3, [pc, #280]	; (8005394 <checkAktifCalisma+0x5d0>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d033      	beq.n	80052e8 <checkAktifCalisma+0x524>
 8005280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005284:	483e      	ldr	r0, [pc, #248]	; (8005380 <checkAktifCalisma+0x5bc>)
 8005286:	f004 f835 	bl	80092f4 <HAL_GPIO_ReadPin>
 800528a:	4603      	mov	r3, r0
 800528c:	2b01      	cmp	r3, #1
 800528e:	d106      	bne.n	800529e <checkAktifCalisma+0x4da>
 8005290:	4b3c      	ldr	r3, [pc, #240]	; (8005384 <checkAktifCalisma+0x5c0>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f083 0301 	eor.w	r3, r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <checkAktifCalisma+0x4f0>
 800529e:	2104      	movs	r1, #4
 80052a0:	483a      	ldr	r0, [pc, #232]	; (800538c <checkAktifCalisma+0x5c8>)
 80052a2:	f004 f827 	bl	80092f4 <HAL_GPIO_ReadPin>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d11d      	bne.n	80052e8 <checkAktifCalisma+0x524>
 80052ac:	4b38      	ldr	r3, [pc, #224]	; (8005390 <checkAktifCalisma+0x5cc>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d019      	beq.n	80052e8 <checkAktifCalisma+0x524>
 80052b4:	4b30      	ldr	r3, [pc, #192]	; (8005378 <checkAktifCalisma+0x5b4>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d015      	beq.n	80052e8 <checkAktifCalisma+0x524>
 80052bc:	4b2f      	ldr	r3, [pc, #188]	; (800537c <checkAktifCalisma+0x5b8>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d011      	beq.n	80052e8 <checkAktifCalisma+0x524>
 80052c4:	4b2a      	ldr	r3, [pc, #168]	; (8005370 <checkAktifCalisma+0x5ac>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <checkAktifCalisma+0x524>
 80052cc:	4b3a      	ldr	r3, [pc, #232]	; (80053b8 <checkAktifCalisma+0x5f4>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	f083 0301 	eor.w	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d006      	beq.n	80052e8 <checkAktifCalisma+0x524>
			timer2=millis;
 80052da:	4b38      	ldr	r3, [pc, #224]	; (80053bc <checkAktifCalisma+0x5f8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a38      	ldr	r2, [pc, #224]	; (80053c0 <checkAktifCalisma+0x5fc>)
 80052e0:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80052e2:	4b35      	ldr	r3, [pc, #212]	; (80053b8 <checkAktifCalisma+0x5f4>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80052e8:	4b34      	ldr	r3, [pc, #208]	; (80053bc <checkAktifCalisma+0x5f8>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <checkAktifCalisma+0x5fc>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	4a34      	ldr	r2, [pc, #208]	; (80053c4 <checkAktifCalisma+0x600>)
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d303      	bcc.n	8005302 <checkAktifCalisma+0x53e>
 80052fa:	4b2f      	ldr	r3, [pc, #188]	; (80053b8 <checkAktifCalisma+0x5f4>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d114      	bne.n	800532c <checkAktifCalisma+0x568>
 8005302:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <checkAktifCalisma+0x5b4>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	f083 0301 	eor.w	r3, r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <checkAktifCalisma+0x568>
 8005310:	4b1a      	ldr	r3, [pc, #104]	; (800537c <checkAktifCalisma+0x5b8>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f083 0301 	eor.w	r3, r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <checkAktifCalisma+0x568>
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <checkAktifCalisma+0x5ac>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	f083 0301 	eor.w	r3, r3, #1
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800532c:	2200      	movs	r2, #0
 800532e:	2102      	movs	r1, #2
 8005330:	4813      	ldr	r0, [pc, #76]	; (8005380 <checkAktifCalisma+0x5bc>)
 8005332:	f003 fff6 	bl	8009322 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <checkAktifCalisma+0x5d0>)
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800533c:	4b1e      	ldr	r3, [pc, #120]	; (80053b8 <checkAktifCalisma+0x5f4>)
 800533e:	2200      	movs	r2, #0
 8005340:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <checkAktifCalisma+0x5d0>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d040      	beq.n	80053cc <checkAktifCalisma+0x608>
 800534a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800534e:	480f      	ldr	r0, [pc, #60]	; (800538c <checkAktifCalisma+0x5c8>)
 8005350:	f003 ffd0 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d138      	bne.n	80053cc <checkAktifCalisma+0x608>
 800535a:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <checkAktifCalisma+0x604>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d034      	beq.n	80053cc <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005362:	2201      	movs	r2, #1
 8005364:	2101      	movs	r1, #1
 8005366:	4806      	ldr	r0, [pc, #24]	; (8005380 <checkAktifCalisma+0x5bc>)
 8005368:	f003 ffdb 	bl	8009322 <HAL_GPIO_WritePin>
 800536c:	e033      	b.n	80053d6 <checkAktifCalisma+0x612>
 800536e:	bf00      	nop
 8005370:	20000277 	.word	0x20000277
 8005374:	2000023d 	.word	0x2000023d
 8005378:	20000272 	.word	0x20000272
 800537c:	20000273 	.word	0x20000273
 8005380:	40010c00 	.word	0x40010c00
 8005384:	2000025d 	.word	0x2000025d
 8005388:	20000271 	.word	0x20000271
 800538c:	40011000 	.word	0x40011000
 8005390:	20000226 	.word	0x20000226
 8005394:	20000258 	.word	0x20000258
 8005398:	20000255 	.word	0x20000255
 800539c:	20000259 	.word	0x20000259
 80053a0:	20000256 	.word	0x20000256
 80053a4:	20000257 	.word	0x20000257
 80053a8:	2000025a 	.word	0x2000025a
 80053ac:	2000025b 	.word	0x2000025b
 80053b0:	20000260 	.word	0x20000260
 80053b4:	20000281 	.word	0x20000281
 80053b8:	20000250 	.word	0x20000250
 80053bc:	200001fc 	.word	0x200001fc
 80053c0:	20000208 	.word	0x20000208
 80053c4:	20000235 	.word	0x20000235
 80053c8:	20000225 	.word	0x20000225
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80053cc:	2200      	movs	r2, #0
 80053ce:	2101      	movs	r1, #1
 80053d0:	4836      	ldr	r0, [pc, #216]	; (80054ac <checkAktifCalisma+0x6e8>)
 80053d2:	f003 ffa6 	bl	8009322 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80053d6:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <checkAktifCalisma+0x6ec>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 8080 	bne.w	80054e0 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053e0:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <checkAktifCalisma+0x6f0>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d003      	beq.n	80053f0 <checkAktifCalisma+0x62c>
 80053e8:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <checkAktifCalisma+0x6f0>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d177      	bne.n	80054e0 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80053f0:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <checkAktifCalisma+0x6f4>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d073      	beq.n	80054e0 <checkAktifCalisma+0x71c>
 80053f8:	4b30      	ldr	r3, [pc, #192]	; (80054bc <checkAktifCalisma+0x6f8>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d06f      	beq.n	80054e0 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005404:	4829      	ldr	r0, [pc, #164]	; (80054ac <checkAktifCalisma+0x6e8>)
 8005406:	f003 ff75 	bl	80092f4 <HAL_GPIO_ReadPin>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d167      	bne.n	80054e0 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005414:	482a      	ldr	r0, [pc, #168]	; (80054c0 <checkAktifCalisma+0x6fc>)
 8005416:	f003 ff6d 	bl	80092f4 <HAL_GPIO_ReadPin>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <checkAktifCalisma+0x664>
 8005420:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <checkAktifCalisma+0x700>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d15b      	bne.n	80054e0 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005428:	2140      	movs	r1, #64	; 0x40
 800542a:	4825      	ldr	r0, [pc, #148]	; (80054c0 <checkAktifCalisma+0x6fc>)
 800542c:	f003 ff62 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005430:	4603      	mov	r3, r0
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10f      	bne.n	8005456 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800543a:	481c      	ldr	r0, [pc, #112]	; (80054ac <checkAktifCalisma+0x6e8>)
 800543c:	f003 ff5a 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005440:	4603      	mov	r3, r0
 8005442:	2b01      	cmp	r3, #1
 8005444:	d107      	bne.n	8005456 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800544a:	4818      	ldr	r0, [pc, #96]	; (80054ac <checkAktifCalisma+0x6e8>)
 800544c:	f003 ff52 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005450:	4603      	mov	r3, r0
 8005452:	2b01      	cmp	r3, #1
 8005454:	d003      	beq.n	800545e <checkAktifCalisma+0x69a>
 8005456:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <checkAktifCalisma+0x704>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d040      	beq.n	80054e0 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800545e:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <checkAktifCalisma+0x708>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	f083 0301 	eor.w	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d039      	beq.n	80054e0 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 800546c:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <checkAktifCalisma+0x70c>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	f083 0301 	eor.w	r3, r3, #1
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d032      	beq.n	80054e0 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800547a:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <checkAktifCalisma+0x710>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	f083 0301 	eor.w	r3, r3, #1
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d02b      	beq.n	80054e0 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005488:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <checkAktifCalisma+0x714>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f083 0301 	eor.w	r3, r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d024      	beq.n	80054e0 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005496:	4b11      	ldr	r3, [pc, #68]	; (80054dc <checkAktifCalisma+0x718>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	f083 0301 	eor.w	r3, r3, #1
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01d      	beq.n	80054e0 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80054a4:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <checkAktifCalisma+0x704>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e01c      	b.n	80054e6 <checkAktifCalisma+0x722>
 80054ac:	40010c00 	.word	0x40010c00
 80054b0:	2000023d 	.word	0x2000023d
 80054b4:	2000022f 	.word	0x2000022f
 80054b8:	20000272 	.word	0x20000272
 80054bc:	20000273 	.word	0x20000273
 80054c0:	40011000 	.word	0x40011000
 80054c4:	20000230 	.word	0x20000230
 80054c8:	20000256 	.word	0x20000256
 80054cc:	20000255 	.word	0x20000255
 80054d0:	20000259 	.word	0x20000259
 80054d4:	20000258 	.word	0x20000258
 80054d8:	20000257 	.word	0x20000257
 80054dc:	2000025b 	.word	0x2000025b
		} else {
			devmotoryukaricalisiyor=0;
 80054e0:	4b64      	ldr	r3, [pc, #400]	; (8005674 <checkAktifCalisma+0x8b0>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80054e6:	4b63      	ldr	r3, [pc, #396]	; (8005674 <checkAktifCalisma+0x8b0>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80054ee:	2201      	movs	r2, #1
 80054f0:	2120      	movs	r1, #32
 80054f2:	4861      	ldr	r0, [pc, #388]	; (8005678 <checkAktifCalisma+0x8b4>)
 80054f4:	f003 ff15 	bl	8009322 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80054f8:	4b60      	ldr	r3, [pc, #384]	; (800567c <checkAktifCalisma+0x8b8>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80054fe:	4b5f      	ldr	r3, [pc, #380]	; (800567c <checkAktifCalisma+0x8b8>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d025      	beq.n	8005552 <checkAktifCalisma+0x78e>
 8005506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800550a:	485d      	ldr	r0, [pc, #372]	; (8005680 <checkAktifCalisma+0x8bc>)
 800550c:	f003 fef2 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d007      	beq.n	8005526 <checkAktifCalisma+0x762>
 8005516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800551a:	4857      	ldr	r0, [pc, #348]	; (8005678 <checkAktifCalisma+0x8b4>)
 800551c:	f003 feea 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005520:	4603      	mov	r3, r0
 8005522:	2b01      	cmp	r3, #1
 8005524:	d115      	bne.n	8005552 <checkAktifCalisma+0x78e>
 8005526:	4b57      	ldr	r3, [pc, #348]	; (8005684 <checkAktifCalisma+0x8c0>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d011      	beq.n	8005552 <checkAktifCalisma+0x78e>
 800552e:	4b56      	ldr	r3, [pc, #344]	; (8005688 <checkAktifCalisma+0x8c4>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <checkAktifCalisma+0x78e>
 8005536:	4b55      	ldr	r3, [pc, #340]	; (800568c <checkAktifCalisma+0x8c8>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f083 0301 	eor.w	r3, r3, #1
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005544:	4b52      	ldr	r3, [pc, #328]	; (8005690 <checkAktifCalisma+0x8cc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a52      	ldr	r2, [pc, #328]	; (8005694 <checkAktifCalisma+0x8d0>)
 800554a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800554c:	4b4f      	ldr	r3, [pc, #316]	; (800568c <checkAktifCalisma+0x8c8>)
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005552:	4b4f      	ldr	r3, [pc, #316]	; (8005690 <checkAktifCalisma+0x8cc>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b4f      	ldr	r3, [pc, #316]	; (8005694 <checkAktifCalisma+0x8d0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	4a4e      	ldr	r2, [pc, #312]	; (8005698 <checkAktifCalisma+0x8d4>)
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	4293      	cmp	r3, r2
 8005562:	d303      	bcc.n	800556c <checkAktifCalisma+0x7a8>
 8005564:	4b49      	ldr	r3, [pc, #292]	; (800568c <checkAktifCalisma+0x8c8>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10d      	bne.n	8005588 <checkAktifCalisma+0x7c4>
 800556c:	4b45      	ldr	r3, [pc, #276]	; (8005684 <checkAktifCalisma+0x8c0>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f083 0301 	eor.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <checkAktifCalisma+0x7c4>
 800557a:	4b43      	ldr	r3, [pc, #268]	; (8005688 <checkAktifCalisma+0x8c4>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f083 0301 	eor.w	r3, r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005588:	2200      	movs	r2, #0
 800558a:	2120      	movs	r1, #32
 800558c:	483a      	ldr	r0, [pc, #232]	; (8005678 <checkAktifCalisma+0x8b4>)
 800558e:	f003 fec8 	bl	8009322 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005592:	4b3a      	ldr	r3, [pc, #232]	; (800567c <checkAktifCalisma+0x8b8>)
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005598:	4b3c      	ldr	r3, [pc, #240]	; (800568c <checkAktifCalisma+0x8c8>)
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800559e:	4b3f      	ldr	r3, [pc, #252]	; (800569c <checkAktifCalisma+0x8d8>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 8088 	bne.w	80056b8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80055a8:	4b3d      	ldr	r3, [pc, #244]	; (80056a0 <checkAktifCalisma+0x8dc>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d003      	beq.n	80055b8 <checkAktifCalisma+0x7f4>
 80055b0:	4b3b      	ldr	r3, [pc, #236]	; (80056a0 <checkAktifCalisma+0x8dc>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d17f      	bne.n	80056b8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80055b8:	4b32      	ldr	r3, [pc, #200]	; (8005684 <checkAktifCalisma+0x8c0>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d07b      	beq.n	80056b8 <checkAktifCalisma+0x8f4>
 80055c0:	4b31      	ldr	r3, [pc, #196]	; (8005688 <checkAktifCalisma+0x8c4>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d077      	beq.n	80056b8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80055c8:	2140      	movs	r1, #64	; 0x40
 80055ca:	482b      	ldr	r0, [pc, #172]	; (8005678 <checkAktifCalisma+0x8b4>)
 80055cc:	f003 fe92 	bl	80092f4 <HAL_GPIO_ReadPin>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d170      	bne.n	80056b8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80055d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055da:	4827      	ldr	r0, [pc, #156]	; (8005678 <checkAktifCalisma+0x8b4>)
 80055dc:	f003 fe8a 	bl	80092f4 <HAL_GPIO_ReadPin>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <checkAktifCalisma+0x82a>
 80055e6:	4b2f      	ldr	r3, [pc, #188]	; (80056a4 <checkAktifCalisma+0x8e0>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d164      	bne.n	80056b8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80055ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055f2:	4823      	ldr	r0, [pc, #140]	; (8005680 <checkAktifCalisma+0x8bc>)
 80055f4:	f003 fe7e 	bl	80092f4 <HAL_GPIO_ReadPin>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d10f      	bne.n	800561e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80055fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005602:	481f      	ldr	r0, [pc, #124]	; (8005680 <checkAktifCalisma+0x8bc>)
 8005604:	f003 fe76 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005608:	4603      	mov	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	d107      	bne.n	800561e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800560e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005612:	481b      	ldr	r0, [pc, #108]	; (8005680 <checkAktifCalisma+0x8bc>)
 8005614:	f003 fe6e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d003      	beq.n	8005626 <checkAktifCalisma+0x862>
 800561e:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <checkAktifCalisma+0x8e4>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d048      	beq.n	80056b8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005626:	4b21      	ldr	r3, [pc, #132]	; (80056ac <checkAktifCalisma+0x8e8>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	f083 0301 	eor.w	r3, r3, #1
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d041      	beq.n	80056b8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005634:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <checkAktifCalisma+0x8ec>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f083 0301 	eor.w	r3, r3, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d03a      	beq.n	80056b8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005642:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <checkAktifCalisma+0x8f0>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	f083 0301 	eor.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d033      	beq.n	80056b8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <checkAktifCalisma+0x8b8>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	f083 0301 	eor.w	r3, r3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d02c      	beq.n	80056b8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <checkAktifCalisma+0x8b0>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	f083 0301 	eor.w	r3, r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d025      	beq.n	80056b8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 800566c:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <checkAktifCalisma+0x8e4>)
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e024      	b.n	80056be <checkAktifCalisma+0x8fa>
 8005674:	20000256 	.word	0x20000256
 8005678:	40011000 	.word	0x40011000
 800567c:	2000025a 	.word	0x2000025a
 8005680:	40010c00 	.word	0x40010c00
 8005684:	20000272 	.word	0x20000272
 8005688:	20000273 	.word	0x20000273
 800568c:	20000252 	.word	0x20000252
 8005690:	200001fc 	.word	0x200001fc
 8005694:	20000208 	.word	0x20000208
 8005698:	20000236 	.word	0x20000236
 800569c:	2000023d 	.word	0x2000023d
 80056a0:	2000022f 	.word	0x2000022f
 80056a4:	20000231 	.word	0x20000231
 80056a8:	20000257 	.word	0x20000257
 80056ac:	20000255 	.word	0x20000255
 80056b0:	20000259 	.word	0x20000259
 80056b4:	20000258 	.word	0x20000258
		} else {
			devmotorasagicalisiyor=0;
 80056b8:	4b96      	ldr	r3, [pc, #600]	; (8005914 <checkAktifCalisma+0xb50>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80056be:	4b95      	ldr	r3, [pc, #596]	; (8005914 <checkAktifCalisma+0xb50>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80056c6:	2201      	movs	r2, #1
 80056c8:	2110      	movs	r1, #16
 80056ca:	4893      	ldr	r0, [pc, #588]	; (8005918 <checkAktifCalisma+0xb54>)
 80056cc:	f003 fe29 	bl	8009322 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80056d0:	4b92      	ldr	r3, [pc, #584]	; (800591c <checkAktifCalisma+0xb58>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80056d6:	4b91      	ldr	r3, [pc, #580]	; (800591c <checkAktifCalisma+0xb58>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d024      	beq.n	8005728 <checkAktifCalisma+0x964>
 80056de:	2140      	movs	r1, #64	; 0x40
 80056e0:	488d      	ldr	r0, [pc, #564]	; (8005918 <checkAktifCalisma+0xb54>)
 80056e2:	f003 fe07 	bl	80092f4 <HAL_GPIO_ReadPin>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d007      	beq.n	80056fc <checkAktifCalisma+0x938>
 80056ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056f0:	4889      	ldr	r0, [pc, #548]	; (8005918 <checkAktifCalisma+0xb54>)
 80056f2:	f003 fdff 	bl	80092f4 <HAL_GPIO_ReadPin>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d115      	bne.n	8005728 <checkAktifCalisma+0x964>
 80056fc:	4b88      	ldr	r3, [pc, #544]	; (8005920 <checkAktifCalisma+0xb5c>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d011      	beq.n	8005728 <checkAktifCalisma+0x964>
 8005704:	4b87      	ldr	r3, [pc, #540]	; (8005924 <checkAktifCalisma+0xb60>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <checkAktifCalisma+0x964>
 800570c:	4b86      	ldr	r3, [pc, #536]	; (8005928 <checkAktifCalisma+0xb64>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f083 0301 	eor.w	r3, r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <checkAktifCalisma+0x964>
			timer2=millis;
 800571a:	4b84      	ldr	r3, [pc, #528]	; (800592c <checkAktifCalisma+0xb68>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a84      	ldr	r2, [pc, #528]	; (8005930 <checkAktifCalisma+0xb6c>)
 8005720:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005722:	4b81      	ldr	r3, [pc, #516]	; (8005928 <checkAktifCalisma+0xb64>)
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005728:	4b80      	ldr	r3, [pc, #512]	; (800592c <checkAktifCalisma+0xb68>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b80      	ldr	r3, [pc, #512]	; (8005930 <checkAktifCalisma+0xb6c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	4a80      	ldr	r2, [pc, #512]	; (8005934 <checkAktifCalisma+0xb70>)
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	4293      	cmp	r3, r2
 8005738:	d303      	bcc.n	8005742 <checkAktifCalisma+0x97e>
 800573a:	4b7b      	ldr	r3, [pc, #492]	; (8005928 <checkAktifCalisma+0xb64>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10d      	bne.n	800575e <checkAktifCalisma+0x99a>
 8005742:	4b77      	ldr	r3, [pc, #476]	; (8005920 <checkAktifCalisma+0xb5c>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	f083 0301 	eor.w	r3, r3, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <checkAktifCalisma+0x99a>
 8005750:	4b74      	ldr	r3, [pc, #464]	; (8005924 <checkAktifCalisma+0xb60>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f083 0301 	eor.w	r3, r3, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800575e:	2200      	movs	r2, #0
 8005760:	2110      	movs	r1, #16
 8005762:	486d      	ldr	r0, [pc, #436]	; (8005918 <checkAktifCalisma+0xb54>)
 8005764:	f003 fddd 	bl	8009322 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005768:	4b6c      	ldr	r3, [pc, #432]	; (800591c <checkAktifCalisma+0xb58>)
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800576e:	4b6e      	ldr	r3, [pc, #440]	; (8005928 <checkAktifCalisma+0xb64>)
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005778:	486f      	ldr	r0, [pc, #444]	; (8005938 <checkAktifCalisma+0xb74>)
 800577a:	f003 fdbb 	bl	80092f4 <HAL_GPIO_ReadPin>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d120      	bne.n	80057c6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005788:	486b      	ldr	r0, [pc, #428]	; (8005938 <checkAktifCalisma+0xb74>)
 800578a:	f003 fdb3 	bl	80092f4 <HAL_GPIO_ReadPin>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d118      	bne.n	80057c6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005794:	2104      	movs	r1, #4
 8005796:	4868      	ldr	r0, [pc, #416]	; (8005938 <checkAktifCalisma+0xb74>)
 8005798:	f003 fdac 	bl	80092f4 <HAL_GPIO_ReadPin>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d111      	bne.n	80057c6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80057a2:	2102      	movs	r1, #2
 80057a4:	4864      	ldr	r0, [pc, #400]	; (8005938 <checkAktifCalisma+0xb74>)
 80057a6:	f003 fda5 	bl	80092f4 <HAL_GPIO_ReadPin>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80057b0:	2101      	movs	r1, #1
 80057b2:	4861      	ldr	r0, [pc, #388]	; (8005938 <checkAktifCalisma+0xb74>)
 80057b4:	f003 fd9e 	bl	80092f4 <HAL_GPIO_ReadPin>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <checkAktifCalisma+0xa02>
			makineStop=1;
 80057be:	4b5f      	ldr	r3, [pc, #380]	; (800593c <checkAktifCalisma+0xb78>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e002      	b.n	80057cc <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80057c6:	4b5d      	ldr	r3, [pc, #372]	; (800593c <checkAktifCalisma+0xb78>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057cc:	4b5c      	ldr	r3, [pc, #368]	; (8005940 <checkAktifCalisma+0xb7c>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d144      	bne.n	800585e <checkAktifCalisma+0xa9a>
 80057d4:	4b5b      	ldr	r3, [pc, #364]	; (8005944 <checkAktifCalisma+0xb80>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d003      	beq.n	80057e4 <checkAktifCalisma+0xa20>
 80057dc:	4b59      	ldr	r3, [pc, #356]	; (8005944 <checkAktifCalisma+0xb80>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d13c      	bne.n	800585e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057e4:	2180      	movs	r1, #128	; 0x80
 80057e6:	484c      	ldr	r0, [pc, #304]	; (8005918 <checkAktifCalisma+0xb54>)
 80057e8:	f003 fd84 	bl	80092f4 <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <checkAktifCalisma+0xa36>
 80057f2:	4b55      	ldr	r3, [pc, #340]	; (8005948 <checkAktifCalisma+0xb84>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <checkAktifCalisma+0xa4e>
 80057fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057fe:	484e      	ldr	r0, [pc, #312]	; (8005938 <checkAktifCalisma+0xb74>)
 8005800:	f003 fd78 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d129      	bne.n	800585e <checkAktifCalisma+0xa9a>
 800580a:	4b4f      	ldr	r3, [pc, #316]	; (8005948 <checkAktifCalisma+0xb84>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d125      	bne.n	800585e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005812:	2104      	movs	r1, #4
 8005814:	4840      	ldr	r0, [pc, #256]	; (8005918 <checkAktifCalisma+0xb54>)
 8005816:	f003 fd6d 	bl	80092f4 <HAL_GPIO_ReadPin>
 800581a:	4603      	mov	r3, r0
 800581c:	2b01      	cmp	r3, #1
 800581e:	d003      	beq.n	8005828 <checkAktifCalisma+0xa64>
 8005820:	4b4a      	ldr	r3, [pc, #296]	; (800594c <checkAktifCalisma+0xb88>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11a      	bne.n	800585e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005828:	2102      	movs	r1, #2
 800582a:	483b      	ldr	r0, [pc, #236]	; (8005918 <checkAktifCalisma+0xb54>)
 800582c:	f003 fd62 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d113      	bne.n	800585e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005836:	4b46      	ldr	r3, [pc, #280]	; (8005950 <checkAktifCalisma+0xb8c>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f083 0301 	eor.w	r3, r3, #1
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005844:	4b3d      	ldr	r3, [pc, #244]	; (800593c <checkAktifCalisma+0xb78>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 800584c:	4b41      	ldr	r3, [pc, #260]	; (8005954 <checkAktifCalisma+0xb90>)
 800584e:	2201      	movs	r2, #1
 8005850:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005852:	4b36      	ldr	r3, [pc, #216]	; (800592c <checkAktifCalisma+0xb68>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a40      	ldr	r2, [pc, #256]	; (8005958 <checkAktifCalisma+0xb94>)
 8005858:	6013      	str	r3, [r2, #0]
			bekle();
 800585a:	f7ff f935 	bl	8004ac8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800585e:	4b33      	ldr	r3, [pc, #204]	; (800592c <checkAktifCalisma+0xb68>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b3d      	ldr	r3, [pc, #244]	; (8005958 <checkAktifCalisma+0xb94>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	4a3c      	ldr	r2, [pc, #240]	; (800595c <checkAktifCalisma+0xb98>)
 800586a:	7812      	ldrb	r2, [r2, #0]
 800586c:	4293      	cmp	r3, r2
 800586e:	d211      	bcs.n	8005894 <checkAktifCalisma+0xad0>
 8005870:	2104      	movs	r1, #4
 8005872:	4829      	ldr	r0, [pc, #164]	; (8005918 <checkAktifCalisma+0xb54>)
 8005874:	f003 fd3e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <checkAktifCalisma+0xad0>
 800587e:	4b33      	ldr	r3, [pc, #204]	; (800594c <checkAktifCalisma+0xb88>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d006      	beq.n	8005894 <checkAktifCalisma+0xad0>
 8005886:	4b2d      	ldr	r3, [pc, #180]	; (800593c <checkAktifCalisma+0xb78>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f083 0301 	eor.w	r3, r3, #1
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005894:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <checkAktifCalisma+0xb90>)
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800589a:	4b29      	ldr	r3, [pc, #164]	; (8005940 <checkAktifCalisma+0xb7c>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d160      	bne.n	8005964 <checkAktifCalisma+0xba0>
 80058a2:	4b28      	ldr	r3, [pc, #160]	; (8005944 <checkAktifCalisma+0xb80>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d003      	beq.n	80058b2 <checkAktifCalisma+0xaee>
 80058aa:	4b26      	ldr	r3, [pc, #152]	; (8005944 <checkAktifCalisma+0xb80>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d158      	bne.n	8005964 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058b2:	2104      	movs	r1, #4
 80058b4:	4818      	ldr	r0, [pc, #96]	; (8005918 <checkAktifCalisma+0xb54>)
 80058b6:	f003 fd1d 	bl	80092f4 <HAL_GPIO_ReadPin>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d003      	beq.n	80058c8 <checkAktifCalisma+0xb04>
 80058c0:	4b22      	ldr	r3, [pc, #136]	; (800594c <checkAktifCalisma+0xb88>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d14d      	bne.n	8005964 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058c8:	2102      	movs	r1, #2
 80058ca:	4813      	ldr	r0, [pc, #76]	; (8005918 <checkAktifCalisma+0xb54>)
 80058cc:	f003 fd12 	bl	80092f4 <HAL_GPIO_ReadPin>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d146      	bne.n	8005964 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	480f      	ldr	r0, [pc, #60]	; (8005918 <checkAktifCalisma+0xb54>)
 80058da:	f003 fd0b 	bl	80092f4 <HAL_GPIO_ReadPin>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d103      	bne.n	80058ec <checkAktifCalisma+0xb28>
 80058e4:	4b18      	ldr	r3, [pc, #96]	; (8005948 <checkAktifCalisma+0xb84>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <checkAktifCalisma+0xb40>
 80058ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058f0:	4811      	ldr	r0, [pc, #68]	; (8005938 <checkAktifCalisma+0xb74>)
 80058f2:	f003 fcff 	bl	80092f4 <HAL_GPIO_ReadPin>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d133      	bne.n	8005964 <checkAktifCalisma+0xba0>
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <checkAktifCalisma+0xb84>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d12f      	bne.n	8005964 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005904:	4b0d      	ldr	r3, [pc, #52]	; (800593c <checkAktifCalisma+0xb78>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d02b      	beq.n	8005964 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800590c:	4b14      	ldr	r3, [pc, #80]	; (8005960 <checkAktifCalisma+0xb9c>)
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	e02a      	b.n	800596a <checkAktifCalisma+0xba6>
 8005914:	20000257 	.word	0x20000257
 8005918:	40011000 	.word	0x40011000
 800591c:	2000025b 	.word	0x2000025b
 8005920:	20000272 	.word	0x20000272
 8005924:	20000273 	.word	0x20000273
 8005928:	20000253 	.word	0x20000253
 800592c:	200001fc 	.word	0x200001fc
 8005930:	20000208 	.word	0x20000208
 8005934:	20000236 	.word	0x20000236
 8005938:	40010c00 	.word	0x40010c00
 800593c:	20000262 	.word	0x20000262
 8005940:	20000229 	.word	0x20000229
 8005944:	20000228 	.word	0x20000228
 8005948:	2000022c 	.word	0x2000022c
 800594c:	20000226 	.word	0x20000226
 8005950:	2000024f 	.word	0x2000024f
 8005954:	20000263 	.word	0x20000263
 8005958:	20000200 	.word	0x20000200
 800595c:	20000239 	.word	0x20000239
 8005960:	20000264 	.word	0x20000264
		} else {
			kapi1butonkontrol=0;
 8005964:	4b8b      	ldr	r3, [pc, #556]	; (8005b94 <checkAktifCalisma+0xdd0>)
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800596a:	4b8b      	ldr	r3, [pc, #556]	; (8005b98 <checkAktifCalisma+0xdd4>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d121      	bne.n	80059b6 <checkAktifCalisma+0xbf2>
 8005972:	4b8a      	ldr	r3, [pc, #552]	; (8005b9c <checkAktifCalisma+0xdd8>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d003      	beq.n	8005982 <checkAktifCalisma+0xbbe>
 800597a:	4b88      	ldr	r3, [pc, #544]	; (8005b9c <checkAktifCalisma+0xdd8>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b03      	cmp	r3, #3
 8005980:	d119      	bne.n	80059b6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005982:	2104      	movs	r1, #4
 8005984:	4886      	ldr	r0, [pc, #536]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005986:	f003 fcb5 	bl	80092f4 <HAL_GPIO_ReadPin>
 800598a:	4603      	mov	r3, r0
 800598c:	2b01      	cmp	r3, #1
 800598e:	d003      	beq.n	8005998 <checkAktifCalisma+0xbd4>
 8005990:	4b84      	ldr	r3, [pc, #528]	; (8005ba4 <checkAktifCalisma+0xde0>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10e      	bne.n	80059b6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005998:	2102      	movs	r1, #2
 800599a:	4881      	ldr	r0, [pc, #516]	; (8005ba0 <checkAktifCalisma+0xddc>)
 800599c:	f003 fcaa 	bl	80092f4 <HAL_GPIO_ReadPin>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d107      	bne.n	80059b6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80059a6:	4b80      	ldr	r3, [pc, #512]	; (8005ba8 <checkAktifCalisma+0xde4>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80059ae:	4b7f      	ldr	r3, [pc, #508]	; (8005bac <checkAktifCalisma+0xde8>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	e002      	b.n	80059bc <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80059b6:	4b7d      	ldr	r3, [pc, #500]	; (8005bac <checkAktifCalisma+0xde8>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80059bc:	4b75      	ldr	r3, [pc, #468]	; (8005b94 <checkAktifCalisma+0xdd0>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d107      	bne.n	80059d4 <checkAktifCalisma+0xc10>
 80059c4:	4b79      	ldr	r3, [pc, #484]	; (8005bac <checkAktifCalisma+0xde8>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d103      	bne.n	80059d4 <checkAktifCalisma+0xc10>
 80059cc:	4b78      	ldr	r3, [pc, #480]	; (8005bb0 <checkAktifCalisma+0xdec>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059d4:	2201      	movs	r2, #1
 80059d6:	2180      	movs	r1, #128	; 0x80
 80059d8:	4876      	ldr	r0, [pc, #472]	; (8005bb4 <checkAktifCalisma+0xdf0>)
 80059da:	f003 fca2 	bl	8009322 <HAL_GPIO_WritePin>
 80059de:	e004      	b.n	80059ea <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059e0:	2200      	movs	r2, #0
 80059e2:	2180      	movs	r1, #128	; 0x80
 80059e4:	4873      	ldr	r0, [pc, #460]	; (8005bb4 <checkAktifCalisma+0xdf0>)
 80059e6:	f003 fc9c 	bl	8009322 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059ea:	4b73      	ldr	r3, [pc, #460]	; (8005bb8 <checkAktifCalisma+0xdf4>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d141      	bne.n	8005a76 <checkAktifCalisma+0xcb2>
 80059f2:	4b6a      	ldr	r3, [pc, #424]	; (8005b9c <checkAktifCalisma+0xdd8>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d003      	beq.n	8005a02 <checkAktifCalisma+0xc3e>
 80059fa:	4b68      	ldr	r3, [pc, #416]	; (8005b9c <checkAktifCalisma+0xdd8>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d139      	bne.n	8005a76 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a06:	4866      	ldr	r0, [pc, #408]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005a08:	f003 fc74 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <checkAktifCalisma+0xc56>
 8005a12:	4b6a      	ldr	r3, [pc, #424]	; (8005bbc <checkAktifCalisma+0xdf8>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <checkAktifCalisma+0xc6e>
 8005a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a1e:	4868      	ldr	r0, [pc, #416]	; (8005bc0 <checkAktifCalisma+0xdfc>)
 8005a20:	f003 fc68 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d125      	bne.n	8005a76 <checkAktifCalisma+0xcb2>
 8005a2a:	4b64      	ldr	r3, [pc, #400]	; (8005bbc <checkAktifCalisma+0xdf8>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d121      	bne.n	8005a76 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a32:	2102      	movs	r1, #2
 8005a34:	485a      	ldr	r0, [pc, #360]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005a36:	f003 fc5d 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d11a      	bne.n	8005a76 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a40:	2104      	movs	r1, #4
 8005a42:	4857      	ldr	r0, [pc, #348]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005a44:	f003 fc56 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d113      	bne.n	8005a76 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005a4e:	4b56      	ldr	r3, [pc, #344]	; (8005ba8 <checkAktifCalisma+0xde4>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005a56:	4b5b      	ldr	r3, [pc, #364]	; (8005bc4 <checkAktifCalisma+0xe00>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	f083 0301 	eor.w	r3, r3, #1
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005a64:	4b58      	ldr	r3, [pc, #352]	; (8005bc8 <checkAktifCalisma+0xe04>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a6a:	4b58      	ldr	r3, [pc, #352]	; (8005bcc <checkAktifCalisma+0xe08>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a58      	ldr	r2, [pc, #352]	; (8005bd0 <checkAktifCalisma+0xe0c>)
 8005a70:	6013      	str	r3, [r2, #0]
			bekle();
 8005a72:	f7ff f829 	bl	8004ac8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005a76:	4b55      	ldr	r3, [pc, #340]	; (8005bcc <checkAktifCalisma+0xe08>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b55      	ldr	r3, [pc, #340]	; (8005bd0 <checkAktifCalisma+0xe0c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	4a54      	ldr	r2, [pc, #336]	; (8005bd4 <checkAktifCalisma+0xe10>)
 8005a82:	7812      	ldrb	r2, [r2, #0]
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d20d      	bcs.n	8005aa4 <checkAktifCalisma+0xce0>
 8005a88:	2102      	movs	r1, #2
 8005a8a:	4845      	ldr	r0, [pc, #276]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005a8c:	f003 fc32 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d006      	beq.n	8005aa4 <checkAktifCalisma+0xce0>
 8005a96:	4b44      	ldr	r3, [pc, #272]	; (8005ba8 <checkAktifCalisma+0xde4>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f083 0301 	eor.w	r3, r3, #1
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005aa4:	4b48      	ldr	r3, [pc, #288]	; (8005bc8 <checkAktifCalisma+0xe04>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005aaa:	4b43      	ldr	r3, [pc, #268]	; (8005bb8 <checkAktifCalisma+0xdf4>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d135      	bne.n	8005b1e <checkAktifCalisma+0xd5a>
 8005ab2:	4b3a      	ldr	r3, [pc, #232]	; (8005b9c <checkAktifCalisma+0xdd8>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d003      	beq.n	8005ac2 <checkAktifCalisma+0xcfe>
 8005aba:	4b38      	ldr	r3, [pc, #224]	; (8005b9c <checkAktifCalisma+0xdd8>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d12d      	bne.n	8005b1e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ac6:	4836      	ldr	r0, [pc, #216]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005ac8:	f003 fc14 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <checkAktifCalisma+0xd16>
 8005ad2:	4b3a      	ldr	r3, [pc, #232]	; (8005bbc <checkAktifCalisma+0xdf8>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00b      	beq.n	8005af2 <checkAktifCalisma+0xd2e>
 8005ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ade:	4838      	ldr	r0, [pc, #224]	; (8005bc0 <checkAktifCalisma+0xdfc>)
 8005ae0:	f003 fc08 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d119      	bne.n	8005b1e <checkAktifCalisma+0xd5a>
 8005aea:	4b34      	ldr	r3, [pc, #208]	; (8005bbc <checkAktifCalisma+0xdf8>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d115      	bne.n	8005b1e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005af2:	2102      	movs	r1, #2
 8005af4:	482a      	ldr	r0, [pc, #168]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005af6:	f003 fbfd 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10e      	bne.n	8005b1e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b00:	2104      	movs	r1, #4
 8005b02:	4827      	ldr	r0, [pc, #156]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005b04:	f003 fbf6 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d107      	bne.n	8005b1e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b0e:	4b26      	ldr	r3, [pc, #152]	; (8005ba8 <checkAktifCalisma+0xde4>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b16:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <checkAktifCalisma+0xe14>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e002      	b.n	8005b24 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b1e:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <checkAktifCalisma+0xe14>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b24:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <checkAktifCalisma+0xdf4>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d11d      	bne.n	8005b68 <checkAktifCalisma+0xda4>
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <checkAktifCalisma+0xdd8>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d003      	beq.n	8005b3c <checkAktifCalisma+0xd78>
 8005b34:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <checkAktifCalisma+0xdd8>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d115      	bne.n	8005b68 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	4818      	ldr	r0, [pc, #96]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005b40:	f003 fbd8 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d10e      	bne.n	8005b68 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b4a:	2104      	movs	r1, #4
 8005b4c:	4814      	ldr	r0, [pc, #80]	; (8005ba0 <checkAktifCalisma+0xddc>)
 8005b4e:	f003 fbd1 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d107      	bne.n	8005b68 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005b58:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <checkAktifCalisma+0xde4>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005b60:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <checkAktifCalisma+0xe18>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e002      	b.n	8005b6e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005b68:	4b1c      	ldr	r3, [pc, #112]	; (8005bdc <checkAktifCalisma+0xe18>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <checkAktifCalisma+0xe14>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <checkAktifCalisma+0xdc2>
 8005b76:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <checkAktifCalisma+0xe18>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d103      	bne.n	8005b86 <checkAktifCalisma+0xdc2>
 8005b7e:	4b12      	ldr	r3, [pc, #72]	; (8005bc8 <checkAktifCalisma+0xe04>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d02c      	beq.n	8005be0 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005b86:	2201      	movs	r2, #1
 8005b88:	2140      	movs	r1, #64	; 0x40
 8005b8a:	480a      	ldr	r0, [pc, #40]	; (8005bb4 <checkAktifCalisma+0xdf0>)
 8005b8c:	f003 fbc9 	bl	8009322 <HAL_GPIO_WritePin>
 8005b90:	e02b      	b.n	8005bea <checkAktifCalisma+0xe26>
 8005b92:	bf00      	nop
 8005b94:	20000264 	.word	0x20000264
 8005b98:	20000229 	.word	0x20000229
 8005b9c:	20000228 	.word	0x20000228
 8005ba0:	40011000 	.word	0x40011000
 8005ba4:	20000226 	.word	0x20000226
 8005ba8:	20000262 	.word	0x20000262
 8005bac:	20000265 	.word	0x20000265
 8005bb0:	20000263 	.word	0x20000263
 8005bb4:	40010800 	.word	0x40010800
 8005bb8:	2000022a 	.word	0x2000022a
 8005bbc:	2000022c 	.word	0x2000022c
 8005bc0:	40010c00 	.word	0x40010c00
 8005bc4:	2000024f 	.word	0x2000024f
 8005bc8:	20000266 	.word	0x20000266
 8005bcc:	200001fc 	.word	0x200001fc
 8005bd0:	20000200 	.word	0x20000200
 8005bd4:	2000023a 	.word	0x2000023a
 8005bd8:	20000267 	.word	0x20000267
 8005bdc:	20000268 	.word	0x20000268
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005be0:	2200      	movs	r2, #0
 8005be2:	2140      	movs	r1, #64	; 0x40
 8005be4:	488d      	ldr	r0, [pc, #564]	; (8005e1c <checkAktifCalisma+0x1058>)
 8005be6:	f003 fb9c 	bl	8009322 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005bea:	4b8d      	ldr	r3, [pc, #564]	; (8005e20 <checkAktifCalisma+0x105c>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <checkAktifCalisma+0xe36>
 8005bf2:	4b8b      	ldr	r3, [pc, #556]	; (8005e20 <checkAktifCalisma+0x105c>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d115      	bne.n	8005c26 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	4889      	ldr	r0, [pc, #548]	; (8005e24 <checkAktifCalisma+0x1060>)
 8005bfe:	f003 fb79 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d003      	beq.n	8005c10 <checkAktifCalisma+0xe4c>
 8005c08:	4b87      	ldr	r3, [pc, #540]	; (8005e28 <checkAktifCalisma+0x1064>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c10:	2102      	movs	r1, #2
 8005c12:	4884      	ldr	r0, [pc, #528]	; (8005e24 <checkAktifCalisma+0x1060>)
 8005c14:	f003 fb6e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d103      	bne.n	8005c26 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c1e:	4b83      	ldr	r3, [pc, #524]	; (8005e2c <checkAktifCalisma+0x1068>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	e002      	b.n	8005c2c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c26:	4b81      	ldr	r3, [pc, #516]	; (8005e2c <checkAktifCalisma+0x1068>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c2c:	4b7c      	ldr	r3, [pc, #496]	; (8005e20 <checkAktifCalisma+0x105c>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d003      	beq.n	8005c3c <checkAktifCalisma+0xe78>
 8005c34:	4b7a      	ldr	r3, [pc, #488]	; (8005e20 <checkAktifCalisma+0x105c>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d111      	bne.n	8005c60 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	4879      	ldr	r0, [pc, #484]	; (8005e24 <checkAktifCalisma+0x1060>)
 8005c40:	f003 fb58 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10a      	bne.n	8005c60 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c4a:	2104      	movs	r1, #4
 8005c4c:	4875      	ldr	r0, [pc, #468]	; (8005e24 <checkAktifCalisma+0x1060>)
 8005c4e:	f003 fb51 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d103      	bne.n	8005c60 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005c58:	4b75      	ldr	r3, [pc, #468]	; (8005e30 <checkAktifCalisma+0x106c>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	e002      	b.n	8005c66 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005c60:	4b73      	ldr	r3, [pc, #460]	; (8005e30 <checkAktifCalisma+0x106c>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005c66:	4b71      	ldr	r3, [pc, #452]	; (8005e2c <checkAktifCalisma+0x1068>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00f      	beq.n	8005c8e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005c6e:	4b71      	ldr	r3, [pc, #452]	; (8005e34 <checkAktifCalisma+0x1070>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d10b      	bne.n	8005c8e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005c76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c7a:	486f      	ldr	r0, [pc, #444]	; (8005e38 <checkAktifCalisma+0x1074>)
 8005c7c:	f003 fb3a 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005c86:	4b6d      	ldr	r3, [pc, #436]	; (8005e3c <checkAktifCalisma+0x1078>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e002      	b.n	8005c94 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005c8e:	4b6b      	ldr	r3, [pc, #428]	; (8005e3c <checkAktifCalisma+0x1078>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005c94:	4b66      	ldr	r3, [pc, #408]	; (8005e30 <checkAktifCalisma+0x106c>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00f      	beq.n	8005cbc <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005c9c:	4b65      	ldr	r3, [pc, #404]	; (8005e34 <checkAktifCalisma+0x1070>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d10b      	bne.n	8005cbc <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ca8:	4863      	ldr	r0, [pc, #396]	; (8005e38 <checkAktifCalisma+0x1074>)
 8005caa:	f003 fb23 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005cb4:	4b62      	ldr	r3, [pc, #392]	; (8005e40 <checkAktifCalisma+0x107c>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	e002      	b.n	8005cc2 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005cbc:	4b60      	ldr	r3, [pc, #384]	; (8005e40 <checkAktifCalisma+0x107c>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cc2:	4b60      	ldr	r3, [pc, #384]	; (8005e44 <checkAktifCalisma+0x1080>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d137      	bne.n	8005d3a <checkAktifCalisma+0xf76>
 8005cca:	4b5f      	ldr	r3, [pc, #380]	; (8005e48 <checkAktifCalisma+0x1084>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d003      	beq.n	8005cda <checkAktifCalisma+0xf16>
 8005cd2:	4b5d      	ldr	r3, [pc, #372]	; (8005e48 <checkAktifCalisma+0x1084>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d12f      	bne.n	8005d3a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cda:	4b54      	ldr	r3, [pc, #336]	; (8005e2c <checkAktifCalisma+0x1068>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d103      	bne.n	8005cea <checkAktifCalisma+0xf26>
 8005ce2:	4b53      	ldr	r3, [pc, #332]	; (8005e30 <checkAktifCalisma+0x106c>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d027      	beq.n	8005d3a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cee:	484d      	ldr	r0, [pc, #308]	; (8005e24 <checkAktifCalisma+0x1060>)
 8005cf0:	f003 fb00 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <checkAktifCalisma+0xf3e>
 8005cfa:	4b4e      	ldr	r3, [pc, #312]	; (8005e34 <checkAktifCalisma+0x1070>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d02:	4b4e      	ldr	r3, [pc, #312]	; (8005e3c <checkAktifCalisma+0x1078>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <checkAktifCalisma+0xf4e>
 8005d0a:	4b4d      	ldr	r3, [pc, #308]	; (8005e40 <checkAktifCalisma+0x107c>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d013      	beq.n	8005d3a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d12:	4b4e      	ldr	r3, [pc, #312]	; (8005e4c <checkAktifCalisma+0x1088>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00f      	beq.n	8005d3a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d1a:	4b4d      	ldr	r3, [pc, #308]	; (8005e50 <checkAktifCalisma+0x108c>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	f083 0301 	eor.w	r3, r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d008      	beq.n	8005d3a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d28:	4b4a      	ldr	r3, [pc, #296]	; (8005e54 <checkAktifCalisma+0x1090>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d2e:	4b4a      	ldr	r3, [pc, #296]	; (8005e58 <checkAktifCalisma+0x1094>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a4a      	ldr	r2, [pc, #296]	; (8005e5c <checkAktifCalisma+0x1098>)
 8005d34:	6013      	str	r3, [r2, #0]
			bekle();
 8005d36:	f7fe fec7 	bl	8004ac8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005d3a:	4b47      	ldr	r3, [pc, #284]	; (8005e58 <checkAktifCalisma+0x1094>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b47      	ldr	r3, [pc, #284]	; (8005e5c <checkAktifCalisma+0x1098>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	4a46      	ldr	r2, [pc, #280]	; (8005e60 <checkAktifCalisma+0x109c>)
 8005d46:	7812      	ldrb	r2, [r2, #0]
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d214      	bcs.n	8005d76 <checkAktifCalisma+0xfb2>
 8005d4c:	4b37      	ldr	r3, [pc, #220]	; (8005e2c <checkAktifCalisma+0x1068>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f083 0301 	eor.w	r3, r3, #1
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d006      	beq.n	8005d68 <checkAktifCalisma+0xfa4>
 8005d5a:	4b35      	ldr	r3, [pc, #212]	; (8005e30 <checkAktifCalisma+0x106c>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	f083 0301 	eor.w	r3, r3, #1
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d106      	bne.n	8005d76 <checkAktifCalisma+0xfb2>
 8005d68:	4b38      	ldr	r3, [pc, #224]	; (8005e4c <checkAktifCalisma+0x1088>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f083 0301 	eor.w	r3, r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005d76:	4b37      	ldr	r3, [pc, #220]	; (8005e54 <checkAktifCalisma+0x1090>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d7c:	4b31      	ldr	r3, [pc, #196]	; (8005e44 <checkAktifCalisma+0x1080>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d12b      	bne.n	8005ddc <checkAktifCalisma+0x1018>
 8005d84:	4b30      	ldr	r3, [pc, #192]	; (8005e48 <checkAktifCalisma+0x1084>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d003      	beq.n	8005d94 <checkAktifCalisma+0xfd0>
 8005d8c:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <checkAktifCalisma+0x1084>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d123      	bne.n	8005ddc <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <checkAktifCalisma+0x1068>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d103      	bne.n	8005da4 <checkAktifCalisma+0xfe0>
 8005d9c:	4b24      	ldr	r3, [pc, #144]	; (8005e30 <checkAktifCalisma+0x106c>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01b      	beq.n	8005ddc <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005da8:	481e      	ldr	r0, [pc, #120]	; (8005e24 <checkAktifCalisma+0x1060>)
 8005daa:	f003 faa3 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <checkAktifCalisma+0xff8>
 8005db4:	4b1f      	ldr	r3, [pc, #124]	; (8005e34 <checkAktifCalisma+0x1070>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005dbc:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <checkAktifCalisma+0x1078>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <checkAktifCalisma+0x1008>
 8005dc4:	4b1e      	ldr	r3, [pc, #120]	; (8005e40 <checkAktifCalisma+0x107c>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005dcc:	4b1f      	ldr	r3, [pc, #124]	; (8005e4c <checkAktifCalisma+0x1088>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005dd4:	4b23      	ldr	r3, [pc, #140]	; (8005e64 <checkAktifCalisma+0x10a0>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005ddc:	4b21      	ldr	r3, [pc, #132]	; (8005e64 <checkAktifCalisma+0x10a0>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005de2:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <checkAktifCalisma+0x1080>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d140      	bne.n	8005e6c <checkAktifCalisma+0x10a8>
 8005dea:	4b17      	ldr	r3, [pc, #92]	; (8005e48 <checkAktifCalisma+0x1084>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d003      	beq.n	8005dfa <checkAktifCalisma+0x1036>
 8005df2:	4b15      	ldr	r3, [pc, #84]	; (8005e48 <checkAktifCalisma+0x1084>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d138      	bne.n	8005e6c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <checkAktifCalisma+0x1068>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <checkAktifCalisma+0x1046>
 8005e02:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <checkAktifCalisma+0x106c>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d030      	beq.n	8005e6c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005e0a:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <checkAktifCalisma+0x1088>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d02c      	beq.n	8005e6c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e12:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <checkAktifCalisma+0x10a4>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e02b      	b.n	8005e72 <checkAktifCalisma+0x10ae>
 8005e1a:	bf00      	nop
 8005e1c:	40010800 	.word	0x40010800
 8005e20:	2000022d 	.word	0x2000022d
 8005e24:	40011000 	.word	0x40011000
 8005e28:	20000226 	.word	0x20000226
 8005e2c:	2000026c 	.word	0x2000026c
 8005e30:	2000026d 	.word	0x2000026d
 8005e34:	2000022c 	.word	0x2000022c
 8005e38:	40010c00 	.word	0x40010c00
 8005e3c:	2000027c 	.word	0x2000027c
 8005e40:	2000027d 	.word	0x2000027d
 8005e44:	2000022b 	.word	0x2000022b
 8005e48:	20000228 	.word	0x20000228
 8005e4c:	20000262 	.word	0x20000262
 8005e50:	2000024f 	.word	0x2000024f
 8005e54:	20000269 	.word	0x20000269
 8005e58:	200001fc 	.word	0x200001fc
 8005e5c:	20000200 	.word	0x20000200
 8005e60:	2000023b 	.word	0x2000023b
 8005e64:	2000026a 	.word	0x2000026a
 8005e68:	2000026b 	.word	0x2000026b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005e6c:	4b8b      	ldr	r3, [pc, #556]	; (800609c <checkAktifCalisma+0x12d8>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005e72:	4b8b      	ldr	r3, [pc, #556]	; (80060a0 <checkAktifCalisma+0x12dc>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d107      	bne.n	8005e8a <checkAktifCalisma+0x10c6>
 8005e7a:	4b8a      	ldr	r3, [pc, #552]	; (80060a4 <checkAktifCalisma+0x12e0>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <checkAktifCalisma+0x10c6>
 8005e82:	4b86      	ldr	r3, [pc, #536]	; (800609c <checkAktifCalisma+0x12d8>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	2120      	movs	r1, #32
 8005e8e:	4886      	ldr	r0, [pc, #536]	; (80060a8 <checkAktifCalisma+0x12e4>)
 8005e90:	f003 fa47 	bl	8009322 <HAL_GPIO_WritePin>
 8005e94:	e004      	b.n	8005ea0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e96:	2200      	movs	r2, #0
 8005e98:	2120      	movs	r1, #32
 8005e9a:	4883      	ldr	r0, [pc, #524]	; (80060a8 <checkAktifCalisma+0x12e4>)
 8005e9c:	f003 fa41 	bl	8009322 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005ea0:	4b82      	ldr	r3, [pc, #520]	; (80060ac <checkAktifCalisma+0x12e8>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00e      	beq.n	8005ec6 <checkAktifCalisma+0x1102>
 8005ea8:	2102      	movs	r1, #2
 8005eaa:	4881      	ldr	r0, [pc, #516]	; (80060b0 <checkAktifCalisma+0x12ec>)
 8005eac:	f003 fa22 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <checkAktifCalisma+0x1102>
 8005eb6:	4b7f      	ldr	r3, [pc, #508]	; (80060b4 <checkAktifCalisma+0x12f0>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d103      	bne.n	8005ec6 <checkAktifCalisma+0x1102>
 8005ebe:	4b7e      	ldr	r3, [pc, #504]	; (80060b8 <checkAktifCalisma+0x12f4>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d112      	bne.n	8005eec <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005ec6:	4b7d      	ldr	r3, [pc, #500]	; (80060bc <checkAktifCalisma+0x12f8>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d066      	beq.n	8005f9c <checkAktifCalisma+0x11d8>
 8005ece:	2104      	movs	r1, #4
 8005ed0:	4877      	ldr	r0, [pc, #476]	; (80060b0 <checkAktifCalisma+0x12ec>)
 8005ed2:	f003 fa0f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d15f      	bne.n	8005f9c <checkAktifCalisma+0x11d8>
 8005edc:	4b75      	ldr	r3, [pc, #468]	; (80060b4 <checkAktifCalisma+0x12f0>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d05b      	beq.n	8005f9c <checkAktifCalisma+0x11d8>
 8005ee4:	4b74      	ldr	r3, [pc, #464]	; (80060b8 <checkAktifCalisma+0x12f4>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d057      	beq.n	8005f9c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005eec:	4b74      	ldr	r3, [pc, #464]	; (80060c0 <checkAktifCalisma+0x12fc>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	4b72      	ldr	r3, [pc, #456]	; (80060c0 <checkAktifCalisma+0x12fc>)
 8005ef6:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005ef8:	4b71      	ldr	r3, [pc, #452]	; (80060c0 <checkAktifCalisma+0x12fc>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b09      	cmp	r3, #9
 8005efe:	d908      	bls.n	8005f12 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005f00:	4b6f      	ldr	r3, [pc, #444]	; (80060c0 <checkAktifCalisma+0x12fc>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005f06:	4b6f      	ldr	r3, [pc, #444]	; (80060c4 <checkAktifCalisma+0x1300>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	4b6d      	ldr	r3, [pc, #436]	; (80060c4 <checkAktifCalisma+0x1300>)
 8005f10:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f12:	4b6c      	ldr	r3, [pc, #432]	; (80060c4 <checkAktifCalisma+0x1300>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b09      	cmp	r3, #9
 8005f18:	d908      	bls.n	8005f2c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f1a:	4b6a      	ldr	r3, [pc, #424]	; (80060c4 <checkAktifCalisma+0x1300>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f20:	4b69      	ldr	r3, [pc, #420]	; (80060c8 <checkAktifCalisma+0x1304>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	4b67      	ldr	r3, [pc, #412]	; (80060c8 <checkAktifCalisma+0x1304>)
 8005f2a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f2c:	4b66      	ldr	r3, [pc, #408]	; (80060c8 <checkAktifCalisma+0x1304>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b09      	cmp	r3, #9
 8005f32:	d908      	bls.n	8005f46 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005f34:	4b64      	ldr	r3, [pc, #400]	; (80060c8 <checkAktifCalisma+0x1304>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005f3a:	4b64      	ldr	r3, [pc, #400]	; (80060cc <checkAktifCalisma+0x1308>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	4b62      	ldr	r3, [pc, #392]	; (80060cc <checkAktifCalisma+0x1308>)
 8005f44:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005f46:	4b61      	ldr	r3, [pc, #388]	; (80060cc <checkAktifCalisma+0x1308>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b09      	cmp	r3, #9
 8005f4c:	d908      	bls.n	8005f60 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005f4e:	4b5f      	ldr	r3, [pc, #380]	; (80060cc <checkAktifCalisma+0x1308>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005f54:	4b5e      	ldr	r3, [pc, #376]	; (80060d0 <checkAktifCalisma+0x130c>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	4b5c      	ldr	r3, [pc, #368]	; (80060d0 <checkAktifCalisma+0x130c>)
 8005f5e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005f60:	4b5b      	ldr	r3, [pc, #364]	; (80060d0 <checkAktifCalisma+0x130c>)
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <checkAktifCalisma+0x1310>)
 8005f66:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005f6a:	4b58      	ldr	r3, [pc, #352]	; (80060cc <checkAktifCalisma+0x1308>)
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	4b59      	ldr	r3, [pc, #356]	; (80060d4 <checkAktifCalisma+0x1310>)
 8005f70:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005f72:	4b55      	ldr	r3, [pc, #340]	; (80060c8 <checkAktifCalisma+0x1304>)
 8005f74:	781a      	ldrb	r2, [r3, #0]
 8005f76:	4b57      	ldr	r3, [pc, #348]	; (80060d4 <checkAktifCalisma+0x1310>)
 8005f78:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005f7a:	4b52      	ldr	r3, [pc, #328]	; (80060c4 <checkAktifCalisma+0x1300>)
 8005f7c:	781a      	ldrb	r2, [r3, #0]
 8005f7e:	4b55      	ldr	r3, [pc, #340]	; (80060d4 <checkAktifCalisma+0x1310>)
 8005f80:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005f82:	4b4f      	ldr	r3, [pc, #316]	; (80060c0 <checkAktifCalisma+0x12fc>)
 8005f84:	781a      	ldrb	r2, [r3, #0]
 8005f86:	4b53      	ldr	r3, [pc, #332]	; (80060d4 <checkAktifCalisma+0x1310>)
 8005f88:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005f8a:	4b53      	ldr	r3, [pc, #332]	; (80060d8 <checkAktifCalisma+0x1314>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005f90:	4b46      	ldr	r3, [pc, #280]	; (80060ac <checkAktifCalisma+0x12e8>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005f96:	4b49      	ldr	r3, [pc, #292]	; (80060bc <checkAktifCalisma+0x12f8>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fa0:	484e      	ldr	r0, [pc, #312]	; (80060dc <checkAktifCalisma+0x1318>)
 8005fa2:	f003 f9a7 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d016      	beq.n	8005fda <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005fac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fb0:	484a      	ldr	r0, [pc, #296]	; (80060dc <checkAktifCalisma+0x1318>)
 8005fb2:	f003 f99f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00e      	beq.n	8005fda <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fc0:	4846      	ldr	r0, [pc, #280]	; (80060dc <checkAktifCalisma+0x1318>)
 8005fc2:	f003 f997 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d006      	beq.n	8005fda <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005fcc:	2140      	movs	r1, #64	; 0x40
 8005fce:	4838      	ldr	r0, [pc, #224]	; (80060b0 <checkAktifCalisma+0x12ec>)
 8005fd0:	f003 f990 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d103      	bne.n	8005fe2 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005fda:	4b41      	ldr	r3, [pc, #260]	; (80060e0 <checkAktifCalisma+0x131c>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	e002      	b.n	8005fe8 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005fe2:	4b3f      	ldr	r3, [pc, #252]	; (80060e0 <checkAktifCalisma+0x131c>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005fe8:	4b3d      	ldr	r3, [pc, #244]	; (80060e0 <checkAktifCalisma+0x131c>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d016      	beq.n	800601e <checkAktifCalisma+0x125a>
 8005ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ff4:	4839      	ldr	r0, [pc, #228]	; (80060dc <checkAktifCalisma+0x1318>)
 8005ff6:	f003 f97d 	bl	80092f4 <HAL_GPIO_ReadPin>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d10e      	bne.n	800601e <checkAktifCalisma+0x125a>
			hataVar=1;
 8006000:	4b38      	ldr	r3, [pc, #224]	; (80060e4 <checkAktifCalisma+0x1320>)
 8006002:	2201      	movs	r2, #1
 8006004:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006006:	2001      	movs	r0, #1
 8006008:	f7fa fd88 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(1);
 800600c:	2001      	movs	r0, #1
 800600e:	f7fa fd2b 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 8006012:	f001 fc47 	bl	80078a4 <convertAndSendData>
			acilstophatasi=1;
 8006016:	4b34      	ldr	r3, [pc, #208]	; (80060e8 <checkAktifCalisma+0x1324>)
 8006018:	2201      	movs	r2, #1
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	e018      	b.n	8006050 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800601e:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <checkAktifCalisma+0x1324>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d014      	beq.n	8006050 <checkAktifCalisma+0x128c>
 8006026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800602a:	482c      	ldr	r0, [pc, #176]	; (80060dc <checkAktifCalisma+0x1318>)
 800602c:	f003 f962 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10c      	bne.n	8006050 <checkAktifCalisma+0x128c>
 8006036:	4b2a      	ldr	r3, [pc, #168]	; (80060e0 <checkAktifCalisma+0x131c>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	f083 0301 	eor.w	r3, r3, #1
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006044:	4b28      	ldr	r3, [pc, #160]	; (80060e8 <checkAktifCalisma+0x1324>)
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800604a:	2001      	movs	r0, #1
 800604c:	f7fe fce8 	bl	8004a20 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006050:	4b26      	ldr	r3, [pc, #152]	; (80060ec <checkAktifCalisma+0x1328>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f083 0301 	eor.w	r3, r3, #1
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d04e      	beq.n	80060fc <checkAktifCalisma+0x1338>
 800605e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006062:	481e      	ldr	r0, [pc, #120]	; (80060dc <checkAktifCalisma+0x1318>)
 8006064:	f003 f946 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <checkAktifCalisma+0x12b2>
 800606e:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <checkAktifCalisma+0x132c>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d042      	beq.n	80060fc <checkAktifCalisma+0x1338>
 8006076:	4b1f      	ldr	r3, [pc, #124]	; (80060f4 <checkAktifCalisma+0x1330>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d13e      	bne.n	80060fc <checkAktifCalisma+0x1338>
			hataVar=1;
 800607e:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <checkAktifCalisma+0x1320>)
 8006080:	2201      	movs	r2, #1
 8006082:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006084:	2002      	movs	r0, #2
 8006086:	f7fa fd49 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(2);
 800608a:	2002      	movs	r0, #2
 800608c:	f7fa fcec 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 8006090:	f001 fc08 	bl	80078a4 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006094:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <checkAktifCalisma+0x1334>)
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e047      	b.n	800612c <checkAktifCalisma+0x1368>
 800609c:	2000026b 	.word	0x2000026b
 80060a0:	2000026a 	.word	0x2000026a
 80060a4:	20000269 	.word	0x20000269
 80060a8:	40010800 	.word	0x40010800
 80060ac:	2000025f 	.word	0x2000025f
 80060b0:	40011000 	.word	0x40011000
 80060b4:	20000226 	.word	0x20000226
 80060b8:	20000262 	.word	0x20000262
 80060bc:	20000260 	.word	0x20000260
 80060c0:	2000021d 	.word	0x2000021d
 80060c4:	2000021e 	.word	0x2000021e
 80060c8:	20000000 	.word	0x20000000
 80060cc:	20000001 	.word	0x20000001
 80060d0:	2000021f 	.word	0x2000021f
 80060d4:	20000118 	.word	0x20000118
 80060d8:	2000024c 	.word	0x2000024c
 80060dc:	40010c00 	.word	0x40010c00
 80060e0:	2000026e 	.word	0x2000026e
 80060e4:	20000275 	.word	0x20000275
 80060e8:	20000270 	.word	0x20000270
 80060ec:	20000277 	.word	0x20000277
 80060f0:	20000281 	.word	0x20000281
 80060f4:	20000224 	.word	0x20000224
 80060f8:	20000271 	.word	0x20000271
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80060fc:	4b9b      	ldr	r3, [pc, #620]	; (800636c <checkAktifCalisma+0x15a8>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d013      	beq.n	800612c <checkAktifCalisma+0x1368>
 8006104:	4b9a      	ldr	r3, [pc, #616]	; (8006370 <checkAktifCalisma+0x15ac>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00f      	beq.n	800612c <checkAktifCalisma+0x1368>
 800610c:	4b99      	ldr	r3, [pc, #612]	; (8006374 <checkAktifCalisma+0x15b0>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f083 0301 	eor.w	r3, r3, #1
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800611a:	4b94      	ldr	r3, [pc, #592]	; (800636c <checkAktifCalisma+0x15a8>)
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006120:	4b95      	ldr	r3, [pc, #596]	; (8006378 <checkAktifCalisma+0x15b4>)
 8006122:	2200      	movs	r2, #0
 8006124:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006126:	2002      	movs	r0, #2
 8006128:	f7fe fc7a 	bl	8004a20 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800612c:	4b93      	ldr	r3, [pc, #588]	; (800637c <checkAktifCalisma+0x15b8>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11e      	bne.n	8006172 <checkAktifCalisma+0x13ae>
 8006134:	4b92      	ldr	r3, [pc, #584]	; (8006380 <checkAktifCalisma+0x15bc>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d11a      	bne.n	8006172 <checkAktifCalisma+0x13ae>
 800613c:	4b91      	ldr	r3, [pc, #580]	; (8006384 <checkAktifCalisma+0x15c0>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d016      	beq.n	8006172 <checkAktifCalisma+0x13ae>
 8006144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006148:	488f      	ldr	r0, [pc, #572]	; (8006388 <checkAktifCalisma+0x15c4>)
 800614a:	f003 f8d3 	bl	80092f4 <HAL_GPIO_ReadPin>
 800614e:	4603      	mov	r3, r0
 8006150:	2b01      	cmp	r3, #1
 8006152:	d10e      	bne.n	8006172 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006154:	4b8d      	ldr	r3, [pc, #564]	; (800638c <checkAktifCalisma+0x15c8>)
 8006156:	2201      	movs	r2, #1
 8006158:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800615a:	2003      	movs	r0, #3
 800615c:	f7fa fcde 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006160:	2003      	movs	r0, #3
 8006162:	f7fa fc81 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 8006166:	f001 fb9d 	bl	80078a4 <convertAndSendData>
			basinchatasi=1;
 800616a:	4b89      	ldr	r3, [pc, #548]	; (8006390 <checkAktifCalisma+0x15cc>)
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	e015      	b.n	800619e <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006172:	4b87      	ldr	r3, [pc, #540]	; (8006390 <checkAktifCalisma+0x15cc>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d011      	beq.n	800619e <checkAktifCalisma+0x13da>
 800617a:	4b80      	ldr	r3, [pc, #512]	; (800637c <checkAktifCalisma+0x15b8>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d10d      	bne.n	800619e <checkAktifCalisma+0x13da>
 8006182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006186:	4883      	ldr	r0, [pc, #524]	; (8006394 <checkAktifCalisma+0x15d0>)
 8006188:	f003 f8b4 	bl	80092f4 <HAL_GPIO_ReadPin>
 800618c:	4603      	mov	r3, r0
 800618e:	2b01      	cmp	r3, #1
 8006190:	d105      	bne.n	800619e <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006192:	4b7f      	ldr	r3, [pc, #508]	; (8006390 <checkAktifCalisma+0x15cc>)
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006198:	2003      	movs	r0, #3
 800619a:	f7fe fc41 	bl	8004a20 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800619e:	4b7e      	ldr	r3, [pc, #504]	; (8006398 <checkAktifCalisma+0x15d4>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <checkAktifCalisma+0x13ea>
 80061a6:	4b7d      	ldr	r3, [pc, #500]	; (800639c <checkAktifCalisma+0x15d8>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01e      	beq.n	80061ec <checkAktifCalisma+0x1428>
 80061ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061b2:	487b      	ldr	r0, [pc, #492]	; (80063a0 <checkAktifCalisma+0x15dc>)
 80061b4:	f003 f89e 	bl	80092f4 <HAL_GPIO_ReadPin>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d116      	bne.n	80061ec <checkAktifCalisma+0x1428>
 80061be:	4b79      	ldr	r3, [pc, #484]	; (80063a4 <checkAktifCalisma+0x15e0>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d003      	beq.n	80061ce <checkAktifCalisma+0x140a>
 80061c6:	4b77      	ldr	r3, [pc, #476]	; (80063a4 <checkAktifCalisma+0x15e0>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d10e      	bne.n	80061ec <checkAktifCalisma+0x1428>
			hataVar=1;
 80061ce:	4b6f      	ldr	r3, [pc, #444]	; (800638c <checkAktifCalisma+0x15c8>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80061d4:	2004      	movs	r0, #4
 80061d6:	f7fa fca1 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(4);
 80061da:	2004      	movs	r0, #4
 80061dc:	f7fa fc44 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 80061e0:	f001 fb60 	bl	80078a4 <convertAndSendData>
			katkapisivicihatasi=1;
 80061e4:	4b70      	ldr	r3, [pc, #448]	; (80063a8 <checkAktifCalisma+0x15e4>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	e01f      	b.n	800622c <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80061ec:	4b6e      	ldr	r3, [pc, #440]	; (80063a8 <checkAktifCalisma+0x15e4>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01b      	beq.n	800622c <checkAktifCalisma+0x1468>
 80061f4:	4b6d      	ldr	r3, [pc, #436]	; (80063ac <checkAktifCalisma+0x15e8>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d017      	beq.n	800622c <checkAktifCalisma+0x1468>
 80061fc:	4b66      	ldr	r3, [pc, #408]	; (8006398 <checkAktifCalisma+0x15d4>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	f083 0301 	eor.w	r3, r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d010      	beq.n	800622c <checkAktifCalisma+0x1468>
 800620a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800620e:	4864      	ldr	r0, [pc, #400]	; (80063a0 <checkAktifCalisma+0x15dc>)
 8006210:	f003 f870 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d108      	bne.n	800622c <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800621a:	4b63      	ldr	r3, [pc, #396]	; (80063a8 <checkAktifCalisma+0x15e4>)
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006220:	4b5e      	ldr	r3, [pc, #376]	; (800639c <checkAktifCalisma+0x15d8>)
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006226:	2004      	movs	r0, #4
 8006228:	f7fe fbfa 	bl	8004a20 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800622c:	4b5a      	ldr	r3, [pc, #360]	; (8006398 <checkAktifCalisma+0x15d4>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <checkAktifCalisma+0x1478>
 8006234:	4b5e      	ldr	r3, [pc, #376]	; (80063b0 <checkAktifCalisma+0x15ec>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01e      	beq.n	800627a <checkAktifCalisma+0x14b6>
 800623c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006240:	4857      	ldr	r0, [pc, #348]	; (80063a0 <checkAktifCalisma+0x15dc>)
 8006242:	f003 f857 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d116      	bne.n	800627a <checkAktifCalisma+0x14b6>
 800624c:	4b55      	ldr	r3, [pc, #340]	; (80063a4 <checkAktifCalisma+0x15e0>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d003      	beq.n	800625c <checkAktifCalisma+0x1498>
 8006254:	4b53      	ldr	r3, [pc, #332]	; (80063a4 <checkAktifCalisma+0x15e0>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d10e      	bne.n	800627a <checkAktifCalisma+0x14b6>
			hataVar=1;
 800625c:	4b4b      	ldr	r3, [pc, #300]	; (800638c <checkAktifCalisma+0x15c8>)
 800625e:	2201      	movs	r2, #1
 8006260:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006262:	2005      	movs	r0, #5
 8006264:	f7fa fc5a 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006268:	2005      	movs	r0, #5
 800626a:	f7fa fbfd 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 800626e:	f001 fb19 	bl	80078a4 <convertAndSendData>
			tablakapisivicihatasi=1;
 8006272:	4b50      	ldr	r3, [pc, #320]	; (80063b4 <checkAktifCalisma+0x15f0>)
 8006274:	2201      	movs	r2, #1
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	e023      	b.n	80062c2 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800627a:	4b4e      	ldr	r3, [pc, #312]	; (80063b4 <checkAktifCalisma+0x15f0>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d01f      	beq.n	80062c2 <checkAktifCalisma+0x14fe>
 8006282:	4b4a      	ldr	r3, [pc, #296]	; (80063ac <checkAktifCalisma+0x15e8>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d01b      	beq.n	80062c2 <checkAktifCalisma+0x14fe>
 800628a:	4b43      	ldr	r3, [pc, #268]	; (8006398 <checkAktifCalisma+0x15d4>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	f083 0301 	eor.w	r3, r3, #1
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d014      	beq.n	80062c2 <checkAktifCalisma+0x14fe>
 8006298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800629c:	4840      	ldr	r0, [pc, #256]	; (80063a0 <checkAktifCalisma+0x15dc>)
 800629e:	f003 f829 	bl	80092f4 <HAL_GPIO_ReadPin>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10c      	bne.n	80062c2 <checkAktifCalisma+0x14fe>
 80062a8:	4b40      	ldr	r3, [pc, #256]	; (80063ac <checkAktifCalisma+0x15e8>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80062b0:	4b40      	ldr	r3, [pc, #256]	; (80063b4 <checkAktifCalisma+0x15f0>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80062b6:	4b3e      	ldr	r3, [pc, #248]	; (80063b0 <checkAktifCalisma+0x15ec>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80062bc:	2005      	movs	r0, #5
 80062be:	f7fe fbaf 	bl	8004a20 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80062c2:	4b30      	ldr	r3, [pc, #192]	; (8006384 <checkAktifCalisma+0x15c0>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d107      	bne.n	80062da <checkAktifCalisma+0x1516>
 80062ca:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <checkAktifCalisma+0x15b0>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <checkAktifCalisma+0x1516>
 80062d2:	4b39      	ldr	r3, [pc, #228]	; (80063b8 <checkAktifCalisma+0x15f4>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80062da:	4b38      	ldr	r3, [pc, #224]	; (80063bc <checkAktifCalisma+0x15f8>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b38      	ldr	r3, [pc, #224]	; (80063c0 <checkAktifCalisma+0x15fc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	4a37      	ldr	r2, [pc, #220]	; (80063c4 <checkAktifCalisma+0x1600>)
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d30d      	bcc.n	8006308 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80062ec:	4b27      	ldr	r3, [pc, #156]	; (800638c <checkAktifCalisma+0x15c8>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80062f2:	2006      	movs	r0, #6
 80062f4:	f7fa fc12 	bl	8000b1c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80062f8:	2006      	movs	r0, #6
 80062fa:	f7fa fbb5 	bl	8000a68 <hata2EEPROM>
			  	convertAndSendData();
 80062fe:	f001 fad1 	bl	80078a4 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006302:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <checkAktifCalisma+0x1604>)
 8006304:	2201      	movs	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006308:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <checkAktifCalisma+0x1604>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d013      	beq.n	8006338 <checkAktifCalisma+0x1574>
 8006310:	2108      	movs	r1, #8
 8006312:	4823      	ldr	r0, [pc, #140]	; (80063a0 <checkAktifCalisma+0x15dc>)
 8006314:	f002 ffee 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <checkAktifCalisma+0x1574>
 800631e:	4b1e      	ldr	r3, [pc, #120]	; (8006398 <checkAktifCalisma+0x15d4>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	f083 0301 	eor.w	r3, r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 800632c:	4b26      	ldr	r3, [pc, #152]	; (80063c8 <checkAktifCalisma+0x1604>)
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006332:	2006      	movs	r0, #6
 8006334:	f7fe fb74 	bl	8004a20 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006338:	4b24      	ldr	r3, [pc, #144]	; (80063cc <checkAktifCalisma+0x1608>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10b      	bne.n	8006358 <checkAktifCalisma+0x1594>
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <checkAktifCalisma+0x15b0>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d107      	bne.n	8006358 <checkAktifCalisma+0x1594>
 8006348:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <checkAktifCalisma+0x160c>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <checkAktifCalisma+0x1594>
 8006350:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <checkAktifCalisma+0x15f4>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d03f      	beq.n	80063d8 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <checkAktifCalisma+0x1610>)
 800635a:	2200      	movs	r2, #0
 800635c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800635e:	4b0f      	ldr	r3, [pc, #60]	; (800639c <checkAktifCalisma+0x15d8>)
 8006360:	2201      	movs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006364:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <checkAktifCalisma+0x15ec>)
 8006366:	2201      	movs	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	e03c      	b.n	80063e6 <checkAktifCalisma+0x1622>
 800636c:	20000271 	.word	0x20000271
 8006370:	20000277 	.word	0x20000277
 8006374:	20000258 	.word	0x20000258
 8006378:	20000281 	.word	0x20000281
 800637c:	20000223 	.word	0x20000223
 8006380:	20000227 	.word	0x20000227
 8006384:	20000274 	.word	0x20000274
 8006388:	40011000 	.word	0x40011000
 800638c:	20000275 	.word	0x20000275
 8006390:	2000027e 	.word	0x2000027e
 8006394:	40010c00 	.word	0x40010c00
 8006398:	2000026e 	.word	0x2000026e
 800639c:	20000282 	.word	0x20000282
 80063a0:	40010800 	.word	0x40010800
 80063a4:	20000228 	.word	0x20000228
 80063a8:	2000027f 	.word	0x2000027f
 80063ac:	20000262 	.word	0x20000262
 80063b0:	20000283 	.word	0x20000283
 80063b4:	20000280 	.word	0x20000280
 80063b8:	20000257 	.word	0x20000257
 80063bc:	200001fc 	.word	0x200001fc
 80063c0:	20000210 	.word	0x20000210
 80063c4:	20000238 	.word	0x20000238
 80063c8:	2000026f 	.word	0x2000026f
 80063cc:	20000255 	.word	0x20000255
 80063d0:	20000256 	.word	0x20000256
 80063d4:	20000276 	.word	0x20000276
		} else {
			makineCalisiyor=1;
 80063d8:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <checkAktifCalisma+0x1690>)
 80063da:	2201      	movs	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80063de:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <checkAktifCalisma+0x1694>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1e      	ldr	r2, [pc, #120]	; (800645c <checkAktifCalisma+0x1698>)
 80063e4:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80063e6:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <checkAktifCalisma+0x169c>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d02f      	beq.n	800644e <checkAktifCalisma+0x168a>
 80063ee:	4b1d      	ldr	r3, [pc, #116]	; (8006464 <checkAktifCalisma+0x16a0>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f083 0301 	eor.w	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d028      	beq.n	800644e <checkAktifCalisma+0x168a>
 80063fc:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <checkAktifCalisma+0x16a4>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f083 0301 	eor.w	r3, r3, #1
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d021      	beq.n	800644e <checkAktifCalisma+0x168a>
 800640a:	4b18      	ldr	r3, [pc, #96]	; (800646c <checkAktifCalisma+0x16a8>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f083 0301 	eor.w	r3, r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01a      	beq.n	800644e <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <checkAktifCalisma+0x16ac>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	f083 0301 	eor.w	r3, r3, #1
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d013      	beq.n	800644e <checkAktifCalisma+0x168a>
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <checkAktifCalisma+0x16b0>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	f083 0301 	eor.w	r3, r3, #1
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00c      	beq.n	800644e <checkAktifCalisma+0x168a>
 8006434:	4b10      	ldr	r3, [pc, #64]	; (8006478 <checkAktifCalisma+0x16b4>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f083 0301 	eor.w	r3, r3, #1
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <checkAktifCalisma+0x168a>
			hataVar=0;
 8006442:	4b07      	ldr	r3, [pc, #28]	; (8006460 <checkAktifCalisma+0x169c>)
 8006444:	2200      	movs	r2, #0
 8006446:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006448:	2007      	movs	r0, #7
 800644a:	f7fe fae9 	bl	8004a20 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800644e:	bf00      	nop
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000276 	.word	0x20000276
 8006458:	200001fc 	.word	0x200001fc
 800645c:	20000210 	.word	0x20000210
 8006460:	20000275 	.word	0x20000275
 8006464:	20000270 	.word	0x20000270
 8006468:	20000271 	.word	0x20000271
 800646c:	2000027e 	.word	0x2000027e
 8006470:	2000027f 	.word	0x2000027f
 8006474:	20000280 	.word	0x20000280
 8006478:	2000026f 	.word	0x2000026f

0800647c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006480:	4b8b      	ldr	r3, [pc, #556]	; (80066b0 <checkDemoModCalisma+0x234>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b01      	cmp	r3, #1
 8006486:	f040 8229 	bne.w	80068dc <checkDemoModCalisma+0x460>
 800648a:	4b8a      	ldr	r3, [pc, #552]	; (80066b4 <checkDemoModCalisma+0x238>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8224 	beq.w	80068dc <checkDemoModCalisma+0x460>
 8006494:	4b88      	ldr	r3, [pc, #544]	; (80066b8 <checkDemoModCalisma+0x23c>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f040 821f 	bne.w	80068dc <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800649e:	2102      	movs	r1, #2
 80064a0:	4886      	ldr	r0, [pc, #536]	; (80066bc <checkDemoModCalisma+0x240>)
 80064a2:	f002 ff27 	bl	80092f4 <HAL_GPIO_ReadPin>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d11d      	bne.n	80064e8 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80064ac:	4b84      	ldr	r3, [pc, #528]	; (80066c0 <checkDemoModCalisma+0x244>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	f083 0301 	eor.w	r3, r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d016      	beq.n	80064e8 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80064ba:	4b82      	ldr	r3, [pc, #520]	; (80066c4 <checkDemoModCalisma+0x248>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	f083 0301 	eor.w	r3, r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00f      	beq.n	80064e8 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80064c8:	4b7f      	ldr	r3, [pc, #508]	; (80066c8 <checkDemoModCalisma+0x24c>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f083 0301 	eor.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80064d6:	2201      	movs	r2, #1
 80064d8:	2104      	movs	r1, #4
 80064da:	487c      	ldr	r0, [pc, #496]	; (80066cc <checkDemoModCalisma+0x250>)
 80064dc:	f002 ff21 	bl	8009322 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80064e0:	4b7b      	ldr	r3, [pc, #492]	; (80066d0 <checkDemoModCalisma+0x254>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e00e      	b.n	8006506 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80064e8:	2102      	movs	r1, #2
 80064ea:	4874      	ldr	r0, [pc, #464]	; (80066bc <checkDemoModCalisma+0x240>)
 80064ec:	f002 ff02 	bl	80092f4 <HAL_GPIO_ReadPin>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d107      	bne.n	8006506 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80064f6:	2200      	movs	r2, #0
 80064f8:	2104      	movs	r1, #4
 80064fa:	4874      	ldr	r0, [pc, #464]	; (80066cc <checkDemoModCalisma+0x250>)
 80064fc:	f002 ff11 	bl	8009322 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006500:	4b73      	ldr	r3, [pc, #460]	; (80066d0 <checkDemoModCalisma+0x254>)
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006506:	4b72      	ldr	r3, [pc, #456]	; (80066d0 <checkDemoModCalisma+0x254>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <checkDemoModCalisma+0xaa>
 800650e:	4b6d      	ldr	r3, [pc, #436]	; (80066c4 <checkDemoModCalisma+0x248>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d107      	bne.n	8006526 <checkDemoModCalisma+0xaa>
 8006516:	4b6c      	ldr	r3, [pc, #432]	; (80066c8 <checkDemoModCalisma+0x24c>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <checkDemoModCalisma+0xaa>
 800651e:	4b68      	ldr	r3, [pc, #416]	; (80066c0 <checkDemoModCalisma+0x244>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00c      	beq.n	8006540 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006526:	2201      	movs	r2, #1
 8006528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800652c:	4867      	ldr	r0, [pc, #412]	; (80066cc <checkDemoModCalisma+0x250>)
 800652e:	f002 fef8 	bl	8009322 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006532:	2201      	movs	r2, #1
 8006534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006538:	4864      	ldr	r0, [pc, #400]	; (80066cc <checkDemoModCalisma+0x250>)
 800653a:	f002 fef2 	bl	8009322 <HAL_GPIO_WritePin>
 800653e:	e00b      	b.n	8006558 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006540:	2200      	movs	r2, #0
 8006542:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006546:	4861      	ldr	r0, [pc, #388]	; (80066cc <checkDemoModCalisma+0x250>)
 8006548:	f002 feeb 	bl	8009322 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800654c:	2200      	movs	r2, #0
 800654e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006552:	485e      	ldr	r0, [pc, #376]	; (80066cc <checkDemoModCalisma+0x250>)
 8006554:	f002 fee5 	bl	8009322 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006558:	2102      	movs	r1, #2
 800655a:	4858      	ldr	r0, [pc, #352]	; (80066bc <checkDemoModCalisma+0x240>)
 800655c:	f002 feca 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006560:	4603      	mov	r3, r0
 8006562:	2b01      	cmp	r3, #1
 8006564:	d10d      	bne.n	8006582 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800656a:	4854      	ldr	r0, [pc, #336]	; (80066bc <checkDemoModCalisma+0x240>)
 800656c:	f002 fec2 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d105      	bne.n	8006582 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006576:	4b56      	ldr	r3, [pc, #344]	; (80066d0 <checkDemoModCalisma+0x254>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	f083 0301 	eor.w	r3, r3, #1
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006582:	2102      	movs	r1, #2
 8006584:	484d      	ldr	r0, [pc, #308]	; (80066bc <checkDemoModCalisma+0x240>)
 8006586:	f002 feb5 	bl	80092f4 <HAL_GPIO_ReadPin>
 800658a:	4603      	mov	r3, r0
 800658c:	2b01      	cmp	r3, #1
 800658e:	d125      	bne.n	80065dc <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006594:	4849      	ldr	r0, [pc, #292]	; (80066bc <checkDemoModCalisma+0x240>)
 8006596:	f002 fead 	bl	80092f4 <HAL_GPIO_ReadPin>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11d      	bne.n	80065dc <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80065a0:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <checkDemoModCalisma+0x254>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	f083 0301 	eor.w	r3, r3, #1
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d016      	beq.n	80065dc <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80065ae:	4b44      	ldr	r3, [pc, #272]	; (80066c0 <checkDemoModCalisma+0x244>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	f083 0301 	eor.w	r3, r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00f      	beq.n	80065dc <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80065bc:	4b42      	ldr	r3, [pc, #264]	; (80066c8 <checkDemoModCalisma+0x24c>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f083 0301 	eor.w	r3, r3, #1
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d008      	beq.n	80065dc <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80065ca:	2201      	movs	r2, #1
 80065cc:	2120      	movs	r1, #32
 80065ce:	483b      	ldr	r0, [pc, #236]	; (80066bc <checkDemoModCalisma+0x240>)
 80065d0:	f002 fea7 	bl	8009322 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80065d4:	4b3b      	ldr	r3, [pc, #236]	; (80066c4 <checkDemoModCalisma+0x248>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	e007      	b.n	80065ec <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80065dc:	2200      	movs	r2, #0
 80065de:	2120      	movs	r1, #32
 80065e0:	4836      	ldr	r0, [pc, #216]	; (80066bc <checkDemoModCalisma+0x240>)
 80065e2:	f002 fe9e 	bl	8009322 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80065e6:	4b37      	ldr	r3, [pc, #220]	; (80066c4 <checkDemoModCalisma+0x248>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065ec:	2102      	movs	r1, #2
 80065ee:	4833      	ldr	r0, [pc, #204]	; (80066bc <checkDemoModCalisma+0x240>)
 80065f0:	f002 fe80 	bl	80092f4 <HAL_GPIO_ReadPin>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d125      	bne.n	8006646 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80065fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065fe:	482f      	ldr	r0, [pc, #188]	; (80066bc <checkDemoModCalisma+0x240>)
 8006600:	f002 fe78 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d11d      	bne.n	8006646 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800660a:	4b31      	ldr	r3, [pc, #196]	; (80066d0 <checkDemoModCalisma+0x254>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	f083 0301 	eor.w	r3, r3, #1
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d016      	beq.n	8006646 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006618:	4b2a      	ldr	r3, [pc, #168]	; (80066c4 <checkDemoModCalisma+0x248>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f083 0301 	eor.w	r3, r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00f      	beq.n	8006646 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006626:	4b26      	ldr	r3, [pc, #152]	; (80066c0 <checkDemoModCalisma+0x244>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	f083 0301 	eor.w	r3, r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006634:	2201      	movs	r2, #1
 8006636:	2110      	movs	r1, #16
 8006638:	4820      	ldr	r0, [pc, #128]	; (80066bc <checkDemoModCalisma+0x240>)
 800663a:	f002 fe72 	bl	8009322 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800663e:	4b22      	ldr	r3, [pc, #136]	; (80066c8 <checkDemoModCalisma+0x24c>)
 8006640:	2201      	movs	r2, #1
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e007      	b.n	8006656 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006646:	2200      	movs	r2, #0
 8006648:	2110      	movs	r1, #16
 800664a:	481c      	ldr	r0, [pc, #112]	; (80066bc <checkDemoModCalisma+0x240>)
 800664c:	f002 fe69 	bl	8009322 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006650:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <checkDemoModCalisma+0x24c>)
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006656:	2104      	movs	r1, #4
 8006658:	4818      	ldr	r0, [pc, #96]	; (80066bc <checkDemoModCalisma+0x240>)
 800665a:	f002 fe4b 	bl	80092f4 <HAL_GPIO_ReadPin>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d139      	bne.n	80066d8 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006664:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <checkDemoModCalisma+0x254>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f083 0301 	eor.w	r3, r3, #1
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d032      	beq.n	80066d8 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <checkDemoModCalisma+0x24c>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	f083 0301 	eor.w	r3, r3, #1
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d02b      	beq.n	80066d8 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006680:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <checkDemoModCalisma+0x248>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f083 0301 	eor.w	r3, r3, #1
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d024      	beq.n	80066d8 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800668e:	2201      	movs	r2, #1
 8006690:	2102      	movs	r1, #2
 8006692:	480e      	ldr	r0, [pc, #56]	; (80066cc <checkDemoModCalisma+0x250>)
 8006694:	f002 fe45 	bl	8009322 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006698:	2201      	movs	r2, #1
 800669a:	2101      	movs	r1, #1
 800669c:	480b      	ldr	r0, [pc, #44]	; (80066cc <checkDemoModCalisma+0x250>)
 800669e:	f002 fe40 	bl	8009322 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80066a2:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <checkDemoModCalisma+0x244>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <checkDemoModCalisma+0x258>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e027      	b.n	8006700 <checkDemoModCalisma+0x284>
 80066b0:	2000023e 	.word	0x2000023e
 80066b4:	20000272 	.word	0x20000272
 80066b8:	2000023d 	.word	0x2000023d
 80066bc:	40011000 	.word	0x40011000
 80066c0:	20000279 	.word	0x20000279
 80066c4:	2000027a 	.word	0x2000027a
 80066c8:	2000027b 	.word	0x2000027b
 80066cc:	40010c00 	.word	0x40010c00
 80066d0:	20000278 	.word	0x20000278
 80066d4:	2000025e 	.word	0x2000025e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80066d8:	2104      	movs	r1, #4
 80066da:	48a0      	ldr	r0, [pc, #640]	; (800695c <checkDemoModCalisma+0x4e0>)
 80066dc:	f002 fe0a 	bl	80092f4 <HAL_GPIO_ReadPin>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d10c      	bne.n	8006700 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80066e6:	2200      	movs	r2, #0
 80066e8:	2102      	movs	r1, #2
 80066ea:	489d      	ldr	r0, [pc, #628]	; (8006960 <checkDemoModCalisma+0x4e4>)
 80066ec:	f002 fe19 	bl	8009322 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066f0:	2200      	movs	r2, #0
 80066f2:	2101      	movs	r1, #1
 80066f4:	489a      	ldr	r0, [pc, #616]	; (8006960 <checkDemoModCalisma+0x4e4>)
 80066f6:	f002 fe14 	bl	8009322 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80066fa:	4b9a      	ldr	r3, [pc, #616]	; (8006964 <checkDemoModCalisma+0x4e8>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006700:	2104      	movs	r1, #4
 8006702:	4896      	ldr	r0, [pc, #600]	; (800695c <checkDemoModCalisma+0x4e0>)
 8006704:	f002 fdf6 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006708:	4603      	mov	r3, r0
 800670a:	2b01      	cmp	r3, #1
 800670c:	d10d      	bne.n	800672a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800670e:	2201      	movs	r2, #1
 8006710:	2180      	movs	r1, #128	; 0x80
 8006712:	4895      	ldr	r0, [pc, #596]	; (8006968 <checkDemoModCalisma+0x4ec>)
 8006714:	f002 fe05 	bl	8009322 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006718:	2201      	movs	r2, #1
 800671a:	2120      	movs	r1, #32
 800671c:	4892      	ldr	r0, [pc, #584]	; (8006968 <checkDemoModCalisma+0x4ec>)
 800671e:	f002 fe00 	bl	8009322 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006722:	4b92      	ldr	r3, [pc, #584]	; (800696c <checkDemoModCalisma+0x4f0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a92      	ldr	r2, [pc, #584]	; (8006970 <checkDemoModCalisma+0x4f4>)
 8006728:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800672a:	4b90      	ldr	r3, [pc, #576]	; (800696c <checkDemoModCalisma+0x4f0>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b90      	ldr	r3, [pc, #576]	; (8006970 <checkDemoModCalisma+0x4f4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b04      	cmp	r3, #4
 8006736:	d909      	bls.n	800674c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006738:	2200      	movs	r2, #0
 800673a:	2180      	movs	r1, #128	; 0x80
 800673c:	488a      	ldr	r0, [pc, #552]	; (8006968 <checkDemoModCalisma+0x4ec>)
 800673e:	f002 fdf0 	bl	8009322 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006742:	2200      	movs	r2, #0
 8006744:	2120      	movs	r1, #32
 8006746:	4888      	ldr	r0, [pc, #544]	; (8006968 <checkDemoModCalisma+0x4ec>)
 8006748:	f002 fdeb 	bl	8009322 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800674c:	2102      	movs	r1, #2
 800674e:	4883      	ldr	r0, [pc, #524]	; (800695c <checkDemoModCalisma+0x4e0>)
 8006750:	f002 fdd0 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006754:	4603      	mov	r3, r0
 8006756:	2b01      	cmp	r3, #1
 8006758:	d108      	bne.n	800676c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800675a:	2201      	movs	r2, #1
 800675c:	2140      	movs	r1, #64	; 0x40
 800675e:	4882      	ldr	r0, [pc, #520]	; (8006968 <checkDemoModCalisma+0x4ec>)
 8006760:	f002 fddf 	bl	8009322 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006764:	4b81      	ldr	r3, [pc, #516]	; (800696c <checkDemoModCalisma+0x4f0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a81      	ldr	r2, [pc, #516]	; (8006970 <checkDemoModCalisma+0x4f4>)
 800676a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800676c:	4b7f      	ldr	r3, [pc, #508]	; (800696c <checkDemoModCalisma+0x4f0>)
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	4b7f      	ldr	r3, [pc, #508]	; (8006970 <checkDemoModCalisma+0x4f4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b04      	cmp	r3, #4
 8006778:	d904      	bls.n	8006784 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800677a:	2200      	movs	r2, #0
 800677c:	2140      	movs	r1, #64	; 0x40
 800677e:	487a      	ldr	r0, [pc, #488]	; (8006968 <checkDemoModCalisma+0x4ec>)
 8006780:	f002 fdcf 	bl	8009322 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006784:	4b7b      	ldr	r3, [pc, #492]	; (8006974 <checkDemoModCalisma+0x4f8>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d058      	beq.n	800683e <checkDemoModCalisma+0x3c2>
 800678c:	4b7a      	ldr	r3, [pc, #488]	; (8006978 <checkDemoModCalisma+0x4fc>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d054      	beq.n	800683e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006794:	4b79      	ldr	r3, [pc, #484]	; (800697c <checkDemoModCalisma+0x500>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	b2da      	uxtb	r2, r3
 800679c:	4b77      	ldr	r3, [pc, #476]	; (800697c <checkDemoModCalisma+0x500>)
 800679e:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80067a0:	4b76      	ldr	r3, [pc, #472]	; (800697c <checkDemoModCalisma+0x500>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b09      	cmp	r3, #9
 80067a6:	d908      	bls.n	80067ba <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80067a8:	4b74      	ldr	r3, [pc, #464]	; (800697c <checkDemoModCalisma+0x500>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80067ae:	4b74      	ldr	r3, [pc, #464]	; (8006980 <checkDemoModCalisma+0x504>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	3301      	adds	r3, #1
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	4b72      	ldr	r3, [pc, #456]	; (8006980 <checkDemoModCalisma+0x504>)
 80067b8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80067ba:	4b71      	ldr	r3, [pc, #452]	; (8006980 <checkDemoModCalisma+0x504>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b09      	cmp	r3, #9
 80067c0:	d908      	bls.n	80067d4 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80067c2:	4b6f      	ldr	r3, [pc, #444]	; (8006980 <checkDemoModCalisma+0x504>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80067c8:	4b6e      	ldr	r3, [pc, #440]	; (8006984 <checkDemoModCalisma+0x508>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	3301      	adds	r3, #1
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	4b6c      	ldr	r3, [pc, #432]	; (8006984 <checkDemoModCalisma+0x508>)
 80067d2:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80067d4:	4b6b      	ldr	r3, [pc, #428]	; (8006984 <checkDemoModCalisma+0x508>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b09      	cmp	r3, #9
 80067da:	d908      	bls.n	80067ee <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80067dc:	4b69      	ldr	r3, [pc, #420]	; (8006984 <checkDemoModCalisma+0x508>)
 80067de:	2200      	movs	r2, #0
 80067e0:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80067e2:	4b69      	ldr	r3, [pc, #420]	; (8006988 <checkDemoModCalisma+0x50c>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	4b67      	ldr	r3, [pc, #412]	; (8006988 <checkDemoModCalisma+0x50c>)
 80067ec:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80067ee:	4b66      	ldr	r3, [pc, #408]	; (8006988 <checkDemoModCalisma+0x50c>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b09      	cmp	r3, #9
 80067f4:	d908      	bls.n	8006808 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80067f6:	4b64      	ldr	r3, [pc, #400]	; (8006988 <checkDemoModCalisma+0x50c>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80067fc:	4b63      	ldr	r3, [pc, #396]	; (800698c <checkDemoModCalisma+0x510>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	b2da      	uxtb	r2, r3
 8006804:	4b61      	ldr	r3, [pc, #388]	; (800698c <checkDemoModCalisma+0x510>)
 8006806:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006808:	4b60      	ldr	r3, [pc, #384]	; (800698c <checkDemoModCalisma+0x510>)
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	4b60      	ldr	r3, [pc, #384]	; (8006990 <checkDemoModCalisma+0x514>)
 800680e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006812:	4b5d      	ldr	r3, [pc, #372]	; (8006988 <checkDemoModCalisma+0x50c>)
 8006814:	781a      	ldrb	r2, [r3, #0]
 8006816:	4b5e      	ldr	r3, [pc, #376]	; (8006990 <checkDemoModCalisma+0x514>)
 8006818:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800681a:	4b5a      	ldr	r3, [pc, #360]	; (8006984 <checkDemoModCalisma+0x508>)
 800681c:	781a      	ldrb	r2, [r3, #0]
 800681e:	4b5c      	ldr	r3, [pc, #368]	; (8006990 <checkDemoModCalisma+0x514>)
 8006820:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006822:	4b57      	ldr	r3, [pc, #348]	; (8006980 <checkDemoModCalisma+0x504>)
 8006824:	781a      	ldrb	r2, [r3, #0]
 8006826:	4b5a      	ldr	r3, [pc, #360]	; (8006990 <checkDemoModCalisma+0x514>)
 8006828:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800682a:	4b54      	ldr	r3, [pc, #336]	; (800697c <checkDemoModCalisma+0x500>)
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	4b58      	ldr	r3, [pc, #352]	; (8006990 <checkDemoModCalisma+0x514>)
 8006830:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006832:	4b58      	ldr	r3, [pc, #352]	; (8006994 <checkDemoModCalisma+0x518>)
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006838:	4b4f      	ldr	r3, [pc, #316]	; (8006978 <checkDemoModCalisma+0x4fc>)
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800683e:	4b56      	ldr	r3, [pc, #344]	; (8006998 <checkDemoModCalisma+0x51c>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f040 8087 	bne.w	8006956 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006848:	4a54      	ldr	r2, [pc, #336]	; (800699c <checkDemoModCalisma+0x520>)
 800684a:	2101      	movs	r1, #1
 800684c:	2002      	movs	r0, #2
 800684e:	f001 fa2b 	bl	8007ca8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006852:	4a53      	ldr	r2, [pc, #332]	; (80069a0 <checkDemoModCalisma+0x524>)
 8006854:	2101      	movs	r1, #1
 8006856:	2001      	movs	r0, #1
 8006858:	f001 fa26 	bl	8007ca8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 800685c:	4b4b      	ldr	r3, [pc, #300]	; (800698c <checkDemoModCalisma+0x510>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	220a      	movs	r2, #10
 8006862:	4950      	ldr	r1, [pc, #320]	; (80069a4 <checkDemoModCalisma+0x528>)
 8006864:	4618      	mov	r0, r3
 8006866:	f005 fd71 	bl	800c34c <itoa>
			lcd_print(2,12,snum);
 800686a:	4a4e      	ldr	r2, [pc, #312]	; (80069a4 <checkDemoModCalisma+0x528>)
 800686c:	210c      	movs	r1, #12
 800686e:	2002      	movs	r0, #2
 8006870:	f001 fa1a 	bl	8007ca8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006874:	4b44      	ldr	r3, [pc, #272]	; (8006988 <checkDemoModCalisma+0x50c>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	220a      	movs	r2, #10
 800687a:	494a      	ldr	r1, [pc, #296]	; (80069a4 <checkDemoModCalisma+0x528>)
 800687c:	4618      	mov	r0, r3
 800687e:	f005 fd65 	bl	800c34c <itoa>
			lcd_print(2,13,snum);
 8006882:	4a48      	ldr	r2, [pc, #288]	; (80069a4 <checkDemoModCalisma+0x528>)
 8006884:	210d      	movs	r1, #13
 8006886:	2002      	movs	r0, #2
 8006888:	f001 fa0e 	bl	8007ca8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 800688c:	4b3d      	ldr	r3, [pc, #244]	; (8006984 <checkDemoModCalisma+0x508>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	220a      	movs	r2, #10
 8006892:	4944      	ldr	r1, [pc, #272]	; (80069a4 <checkDemoModCalisma+0x528>)
 8006894:	4618      	mov	r0, r3
 8006896:	f005 fd59 	bl	800c34c <itoa>
			lcd_print(2,14,snum);
 800689a:	4a42      	ldr	r2, [pc, #264]	; (80069a4 <checkDemoModCalisma+0x528>)
 800689c:	210e      	movs	r1, #14
 800689e:	2002      	movs	r0, #2
 80068a0:	f001 fa02 	bl	8007ca8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80068a4:	4b36      	ldr	r3, [pc, #216]	; (8006980 <checkDemoModCalisma+0x504>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	220a      	movs	r2, #10
 80068aa:	493e      	ldr	r1, [pc, #248]	; (80069a4 <checkDemoModCalisma+0x528>)
 80068ac:	4618      	mov	r0, r3
 80068ae:	f005 fd4d 	bl	800c34c <itoa>
			lcd_print(2,15,snum);
 80068b2:	4a3c      	ldr	r2, [pc, #240]	; (80069a4 <checkDemoModCalisma+0x528>)
 80068b4:	210f      	movs	r1, #15
 80068b6:	2002      	movs	r0, #2
 80068b8:	f001 f9f6 	bl	8007ca8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80068bc:	4b2f      	ldr	r3, [pc, #188]	; (800697c <checkDemoModCalisma+0x500>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	220a      	movs	r2, #10
 80068c2:	4938      	ldr	r1, [pc, #224]	; (80069a4 <checkDemoModCalisma+0x528>)
 80068c4:	4618      	mov	r0, r3
 80068c6:	f005 fd41 	bl	800c34c <itoa>
			lcd_print(2,16,snum);
 80068ca:	4a36      	ldr	r2, [pc, #216]	; (80069a4 <checkDemoModCalisma+0x528>)
 80068cc:	2110      	movs	r1, #16
 80068ce:	2002      	movs	r0, #2
 80068d0:	f001 f9ea 	bl	8007ca8 <lcd_print>
			mesajYazildi=1;
 80068d4:	4b34      	ldr	r3, [pc, #208]	; (80069a8 <checkDemoModCalisma+0x52c>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80068da:	e03c      	b.n	8006956 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80068dc:	4b33      	ldr	r3, [pc, #204]	; (80069ac <checkDemoModCalisma+0x530>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d003      	beq.n	80068ec <checkDemoModCalisma+0x470>
 80068e4:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <checkDemoModCalisma+0x51c>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d134      	bne.n	8006956 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80068ec:	2200      	movs	r2, #0
 80068ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068f2:	481b      	ldr	r0, [pc, #108]	; (8006960 <checkDemoModCalisma+0x4e4>)
 80068f4:	f002 fd15 	bl	8009322 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80068f8:	2200      	movs	r2, #0
 80068fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068fe:	4818      	ldr	r0, [pc, #96]	; (8006960 <checkDemoModCalisma+0x4e4>)
 8006900:	f002 fd0f 	bl	8009322 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006904:	2200      	movs	r2, #0
 8006906:	2104      	movs	r1, #4
 8006908:	4815      	ldr	r0, [pc, #84]	; (8006960 <checkDemoModCalisma+0x4e4>)
 800690a:	f002 fd0a 	bl	8009322 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800690e:	2200      	movs	r2, #0
 8006910:	2102      	movs	r1, #2
 8006912:	4813      	ldr	r0, [pc, #76]	; (8006960 <checkDemoModCalisma+0x4e4>)
 8006914:	f002 fd05 	bl	8009322 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006918:	2200      	movs	r2, #0
 800691a:	2101      	movs	r1, #1
 800691c:	4810      	ldr	r0, [pc, #64]	; (8006960 <checkDemoModCalisma+0x4e4>)
 800691e:	f002 fd00 	bl	8009322 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006922:	2200      	movs	r2, #0
 8006924:	2120      	movs	r1, #32
 8006926:	480d      	ldr	r0, [pc, #52]	; (800695c <checkDemoModCalisma+0x4e0>)
 8006928:	f002 fcfb 	bl	8009322 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800692c:	2200      	movs	r2, #0
 800692e:	2110      	movs	r1, #16
 8006930:	480a      	ldr	r0, [pc, #40]	; (800695c <checkDemoModCalisma+0x4e0>)
 8006932:	f002 fcf6 	bl	8009322 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006936:	2200      	movs	r2, #0
 8006938:	2180      	movs	r1, #128	; 0x80
 800693a:	480b      	ldr	r0, [pc, #44]	; (8006968 <checkDemoModCalisma+0x4ec>)
 800693c:	f002 fcf1 	bl	8009322 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006940:	2200      	movs	r2, #0
 8006942:	2140      	movs	r1, #64	; 0x40
 8006944:	4808      	ldr	r0, [pc, #32]	; (8006968 <checkDemoModCalisma+0x4ec>)
 8006946:	f002 fcec 	bl	8009322 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800694a:	2200      	movs	r2, #0
 800694c:	2120      	movs	r1, #32
 800694e:	4806      	ldr	r0, [pc, #24]	; (8006968 <checkDemoModCalisma+0x4ec>)
 8006950:	f002 fce7 	bl	8009322 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006954:	e7ff      	b.n	8006956 <checkDemoModCalisma+0x4da>
 8006956:	bf00      	nop
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40011000 	.word	0x40011000
 8006960:	40010c00 	.word	0x40010c00
 8006964:	20000279 	.word	0x20000279
 8006968:	40010800 	.word	0x40010800
 800696c:	200001fc 	.word	0x200001fc
 8006970:	2000020c 	.word	0x2000020c
 8006974:	20000278 	.word	0x20000278
 8006978:	2000025e 	.word	0x2000025e
 800697c:	2000021d 	.word	0x2000021d
 8006980:	2000021e 	.word	0x2000021e
 8006984:	20000000 	.word	0x20000000
 8006988:	20000001 	.word	0x20000001
 800698c:	2000021f 	.word	0x2000021f
 8006990:	20000118 	.word	0x20000118
 8006994:	2000024c 	.word	0x2000024c
 8006998:	2000023d 	.word	0x2000023d
 800699c:	0800db24 	.word	0x0800db24
 80069a0:	0800db30 	.word	0x0800db30
 80069a4:	20000188 	.word	0x20000188
 80069a8:	20000254 	.word	0x20000254
 80069ac:	2000023e 	.word	0x2000023e

080069b0 <mainLoop>:

void mainLoop() {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80069b6:	f7fe f923 	bl	8004c00 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80069ba:	2101      	movs	r1, #1
 80069bc:	48ac      	ldr	r0, [pc, #688]	; (8006c70 <mainLoop+0x2c0>)
 80069be:	f002 fc99 	bl	80092f4 <HAL_GPIO_ReadPin>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d136      	bne.n	8006a36 <mainLoop+0x86>
 80069c8:	2108      	movs	r1, #8
 80069ca:	48aa      	ldr	r0, [pc, #680]	; (8006c74 <mainLoop+0x2c4>)
 80069cc:	f002 fc92 	bl	80092f4 <HAL_GPIO_ReadPin>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d12f      	bne.n	8006a36 <mainLoop+0x86>
 80069d6:	2102      	movs	r1, #2
 80069d8:	48a5      	ldr	r0, [pc, #660]	; (8006c70 <mainLoop+0x2c0>)
 80069da:	f002 fc8b 	bl	80092f4 <HAL_GPIO_ReadPin>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d128      	bne.n	8006a36 <mainLoop+0x86>
 80069e4:	2104      	movs	r1, #4
 80069e6:	48a2      	ldr	r0, [pc, #648]	; (8006c70 <mainLoop+0x2c0>)
 80069e8:	f002 fc84 	bl	80092f4 <HAL_GPIO_ReadPin>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d121      	bne.n	8006a36 <mainLoop+0x86>
 80069f2:	2108      	movs	r1, #8
 80069f4:	489e      	ldr	r0, [pc, #632]	; (8006c70 <mainLoop+0x2c0>)
 80069f6:	f002 fc7d 	bl	80092f4 <HAL_GPIO_ReadPin>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d11a      	bne.n	8006a36 <mainLoop+0x86>
 8006a00:	2180      	movs	r1, #128	; 0x80
 8006a02:	489c      	ldr	r0, [pc, #624]	; (8006c74 <mainLoop+0x2c4>)
 8006a04:	f002 fc76 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d113      	bne.n	8006a36 <mainLoop+0x86>
 8006a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a12:	4898      	ldr	r0, [pc, #608]	; (8006c74 <mainLoop+0x2c4>)
 8006a14:	f002 fc6e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d10b      	bne.n	8006a36 <mainLoop+0x86>
 8006a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a22:	4894      	ldr	r0, [pc, #592]	; (8006c74 <mainLoop+0x2c4>)
 8006a24:	f002 fc66 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d103      	bne.n	8006a36 <mainLoop+0x86>
			butonKontrol=0;
 8006a2e:	4b92      	ldr	r3, [pc, #584]	; (8006c78 <mainLoop+0x2c8>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	e003      	b.n	8006a3e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006a36:	4b91      	ldr	r3, [pc, #580]	; (8006c7c <mainLoop+0x2cc>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a91      	ldr	r2, [pc, #580]	; (8006c80 <mainLoop+0x2d0>)
 8006a3c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a3e:	4b91      	ldr	r3, [pc, #580]	; (8006c84 <mainLoop+0x2d4>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d03a      	beq.n	8006abc <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a46:	bf00      	nop
 8006a48:	488f      	ldr	r0, [pc, #572]	; (8006c88 <mainLoop+0x2d8>)
 8006a4a:	f003 fa7c 	bl	8009f46 <HAL_I2C_GetError>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d0f9      	beq.n	8006a48 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006a54:	bf00      	nop
 8006a56:	488c      	ldr	r0, [pc, #560]	; (8006c88 <mainLoop+0x2d8>)
 8006a58:	f003 fa68 	bl	8009f2c <HAL_I2C_GetState>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d1f9      	bne.n	8006a56 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006a62:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a66:	9302      	str	r3, [sp, #8]
 8006a68:	236e      	movs	r3, #110	; 0x6e
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	4b87      	ldr	r3, [pc, #540]	; (8006c8c <mainLoop+0x2dc>)
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	236e      	movs	r3, #110	; 0x6e
 8006a72:	2200      	movs	r2, #0
 8006a74:	21a0      	movs	r1, #160	; 0xa0
 8006a76:	4884      	ldr	r0, [pc, #528]	; (8006c88 <mainLoop+0x2d8>)
 8006a78:	f002 fef6 	bl	8009868 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a80:	f001 fe68 	bl	8008754 <HAL_Delay>

		  hafizaYaz=0;
 8006a84:	4b7f      	ldr	r3, [pc, #508]	; (8006c84 <mainLoop+0x2d4>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006a8a:	4b81      	ldr	r3, [pc, #516]	; (8006c90 <mainLoop+0x2e0>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006a92:	4a80      	ldr	r2, [pc, #512]	; (8006c94 <mainLoop+0x2e4>)
 8006a94:	2101      	movs	r1, #1
 8006a96:	2002      	movs	r0, #2
 8006a98:	f001 f906 	bl	8007ca8 <lcd_print>
 8006a9c:	e008      	b.n	8006ab0 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006a9e:	4b7c      	ldr	r3, [pc, #496]	; (8006c90 <mainLoop+0x2e0>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d104      	bne.n	8006ab0 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006aa6:	4a7c      	ldr	r2, [pc, #496]	; (8006c98 <mainLoop+0x2e8>)
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	2002      	movs	r0, #2
 8006aac:	f001 f8fc 	bl	8007ca8 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ab4:	f001 fe4e 	bl	8008754 <HAL_Delay>
		  lcd_clear();
 8006ab8:	f001 f922 	bl	8007d00 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006abc:	4b77      	ldr	r3, [pc, #476]	; (8006c9c <mainLoop+0x2ec>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f083 0301 	eor.w	r3, r3, #1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d06d      	beq.n	8006ba6 <mainLoop+0x1f6>
 8006aca:	486f      	ldr	r0, [pc, #444]	; (8006c88 <mainLoop+0x2d8>)
 8006acc:	f003 fa2e 	bl	8009f2c <HAL_I2C_GetState>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	d167      	bne.n	8006ba6 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006ad6:	4b72      	ldr	r3, [pc, #456]	; (8006ca0 <mainLoop+0x2f0>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f083 0301 	eor.w	r3, r3, #1
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d044      	beq.n	8006b6e <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006ae4:	4a6f      	ldr	r2, [pc, #444]	; (8006ca4 <mainLoop+0x2f4>)
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	2001      	movs	r0, #1
 8006aea:	f001 f8dd 	bl	8007ca8 <lcd_print>
			  if(dilSecim==0) {
 8006aee:	4b68      	ldr	r3, [pc, #416]	; (8006c90 <mainLoop+0x2e0>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d105      	bne.n	8006b02 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006af6:	4a6c      	ldr	r2, [pc, #432]	; (8006ca8 <mainLoop+0x2f8>)
 8006af8:	2101      	movs	r1, #1
 8006afa:	2002      	movs	r0, #2
 8006afc:	f001 f8d4 	bl	8007ca8 <lcd_print>
 8006b00:	e008      	b.n	8006b14 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006b02:	4b63      	ldr	r3, [pc, #396]	; (8006c90 <mainLoop+0x2e0>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d104      	bne.n	8006b14 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006b0a:	4a68      	ldr	r2, [pc, #416]	; (8006cac <mainLoop+0x2fc>)
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	2002      	movs	r0, #2
 8006b10:	f001 f8ca 	bl	8007ca8 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b18:	f001 fe1c 	bl	8008754 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b1c:	bf00      	nop
 8006b1e:	485a      	ldr	r0, [pc, #360]	; (8006c88 <mainLoop+0x2d8>)
 8006b20:	f003 fa11 	bl	8009f46 <HAL_I2C_GetError>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d0f9      	beq.n	8006b1e <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b2a:	e003      	b.n	8006b34 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b30:	f001 fe10 	bl	8008754 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b34:	4854      	ldr	r0, [pc, #336]	; (8006c88 <mainLoop+0x2d8>)
 8006b36:	f003 f9f9 	bl	8009f2c <HAL_I2C_GetState>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d1f5      	bne.n	8006b2c <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006b40:	4b53      	ldr	r3, [pc, #332]	; (8006c90 <mainLoop+0x2e0>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d105      	bne.n	8006b54 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006b48:	4a59      	ldr	r2, [pc, #356]	; (8006cb0 <mainLoop+0x300>)
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	2002      	movs	r0, #2
 8006b4e:	f001 f8ab 	bl	8007ca8 <lcd_print>
 8006b52:	e008      	b.n	8006b66 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006b54:	4b4e      	ldr	r3, [pc, #312]	; (8006c90 <mainLoop+0x2e0>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d104      	bne.n	8006b66 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006b5c:	4a55      	ldr	r2, [pc, #340]	; (8006cb4 <mainLoop+0x304>)
 8006b5e:	2101      	movs	r1, #1
 8006b60:	2002      	movs	r0, #2
 8006b62:	f001 f8a1 	bl	8007ca8 <lcd_print>
			  }

			  ilkOkuma=1;
 8006b66:	4b4e      	ldr	r3, [pc, #312]	; (8006ca0 <mainLoop+0x2f0>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e014      	b.n	8006b98 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006b6e:	4b48      	ldr	r3, [pc, #288]	; (8006c90 <mainLoop+0x2e0>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d105      	bne.n	8006b82 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006b76:	4a50      	ldr	r2, [pc, #320]	; (8006cb8 <mainLoop+0x308>)
 8006b78:	2101      	movs	r1, #1
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f001 f894 	bl	8007ca8 <lcd_print>
 8006b80:	e008      	b.n	8006b94 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006b82:	4b43      	ldr	r3, [pc, #268]	; (8006c90 <mainLoop+0x2e0>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d104      	bne.n	8006b94 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006b8a:	4a4c      	ldr	r2, [pc, #304]	; (8006cbc <mainLoop+0x30c>)
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	2002      	movs	r0, #2
 8006b90:	f001 f88a 	bl	8007ca8 <lcd_print>
			  }
			  lcd_clear();
 8006b94:	f001 f8b4 	bl	8007d00 <lcd_clear>
		  }

		  lcd_clear();
 8006b98:	f001 f8b2 	bl	8007d00 <lcd_clear>

		  eepromKontrol();
 8006b9c:	f7f9 fb4a 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006ba0:	4b3e      	ldr	r3, [pc, #248]	; (8006c9c <mainLoop+0x2ec>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006ba6:	4b46      	ldr	r3, [pc, #280]	; (8006cc0 <mainLoop+0x310>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d11c      	bne.n	8006be8 <mainLoop+0x238>
 8006bae:	4b45      	ldr	r3, [pc, #276]	; (8006cc4 <mainLoop+0x314>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f083 0301 	eor.w	r3, r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d015      	beq.n	8006be8 <mainLoop+0x238>
 8006bbc:	4b42      	ldr	r3, [pc, #264]	; (8006cc8 <mainLoop+0x318>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d111      	bne.n	8006be8 <mainLoop+0x238>
			lcd_clear();
 8006bc4:	f001 f89c 	bl	8007d00 <lcd_clear>
			HAL_Delay(10);
 8006bc8:	200a      	movs	r0, #10
 8006bca:	f001 fdc3 	bl	8008754 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006bce:	4a3f      	ldr	r2, [pc, #252]	; (8006ccc <mainLoop+0x31c>)
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	f001 f868 	bl	8007ca8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006bd8:	4a3d      	ldr	r2, [pc, #244]	; (8006cd0 <mainLoop+0x320>)
 8006bda:	2101      	movs	r1, #1
 8006bdc:	2002      	movs	r0, #2
 8006bde:	f001 f863 	bl	8007ca8 <lcd_print>
			mesajYazildi=1;
 8006be2:	4b38      	ldr	r3, [pc, #224]	; (8006cc4 <mainLoop+0x314>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006be8:	4b35      	ldr	r3, [pc, #212]	; (8006cc0 <mainLoop+0x310>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d112      	bne.n	8006c16 <mainLoop+0x266>
 8006bf0:	2102      	movs	r1, #2
 8006bf2:	481f      	ldr	r0, [pc, #124]	; (8006c70 <mainLoop+0x2c0>)
 8006bf4:	f002 fb7e 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d10b      	bne.n	8006c16 <mainLoop+0x266>
 8006bfe:	2104      	movs	r1, #4
 8006c00:	481b      	ldr	r0, [pc, #108]	; (8006c70 <mainLoop+0x2c0>)
 8006c02:	f002 fb77 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d104      	bne.n	8006c16 <mainLoop+0x266>
			menuGiris=1;
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <mainLoop+0x310>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c12:	f001 f875 	bl	8007d00 <lcd_clear>
		}

		if(menuGiris==1) {
 8006c16:	4b2a      	ldr	r3, [pc, #168]	; (8006cc0 <mainLoop+0x310>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <mainLoop+0x272>
			menu();
 8006c1e:	f7fa fabb 	bl	8001198 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c26:	4813      	ldr	r0, [pc, #76]	; (8006c74 <mainLoop+0x2c4>)
 8006c28:	f002 fb93 	bl	8009352 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c30:	4828      	ldr	r0, [pc, #160]	; (8006cd4 <mainLoop+0x324>)
 8006c32:	f002 fb5f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <mainLoop+0x2a2>
 8006c3c:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <mainLoop+0x328>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	f083 0301 	eor.w	r3, r3, #1
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <mainLoop+0x2a2>
			stopVar=1;
 8006c4a:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <mainLoop+0x32c>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e002      	b.n	8006c58 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006c52:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <mainLoop+0x32c>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c58:	f7fd ffe8 	bl	8004c2c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c5c:	f7fe f81a 	bl	8004c94 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c60:	f7fe f85e 	bl	8004d20 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c64:	f7fe f8ae 	bl	8004dc4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c68:	f7ff fc08 	bl	800647c <checkDemoModCalisma>
		checkLCDBacklight();
 8006c6c:	e6a3      	b.n	80069b6 <mainLoop+0x6>
 8006c6e:	bf00      	nop
 8006c70:	40010800 	.word	0x40010800
 8006c74:	40011000 	.word	0x40011000
 8006c78:	2000024f 	.word	0x2000024f
 8006c7c:	200001fc 	.word	0x200001fc
 8006c80:	20000218 	.word	0x20000218
 8006c84:	2000024c 	.word	0x2000024c
 8006c88:	200003a8 	.word	0x200003a8
 8006c8c:	20000118 	.word	0x20000118
 8006c90:	20000241 	.word	0x20000241
 8006c94:	0800db44 	.word	0x0800db44
 8006c98:	0800db58 	.word	0x0800db58
 8006c9c:	2000024d 	.word	0x2000024d
 8006ca0:	2000024e 	.word	0x2000024e
 8006ca4:	0800db6c 	.word	0x0800db6c
 8006ca8:	0800db80 	.word	0x0800db80
 8006cac:	0800db94 	.word	0x0800db94
 8006cb0:	0800dba8 	.word	0x0800dba8
 8006cb4:	0800dbbc 	.word	0x0800dbbc
 8006cb8:	0800dbd0 	.word	0x0800dbd0
 8006cbc:	0800dbe4 	.word	0x0800dbe4
 8006cc0:	2000023d 	.word	0x2000023d
 8006cc4:	20000254 	.word	0x20000254
 8006cc8:	2000023e 	.word	0x2000023e
 8006ccc:	0800dbf8 	.word	0x0800dbf8
 8006cd0:	0800dc0c 	.word	0x0800dc0c
 8006cd4:	40010c00 	.word	0x40010c00
 8006cd8:	20000275 	.word	0x20000275
 8006cdc:	20000272 	.word	0x20000272

08006ce0 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	f001 f83c 	bl	8007d64 <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006cec:	2305      	movs	r3, #5
 8006cee:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006cf8:	4ba4      	ldr	r3, [pc, #656]	; (8006f8c <takeMachineID+0x2ac>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	603b      	str	r3, [r7, #0]

    resetEEPROM4Wifi(1);
 8006cfe:	2001      	movs	r0, #1
 8006d00:	f7f9 fda2 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006d04:	2064      	movs	r0, #100	; 0x64
 8006d06:	f001 fd25 	bl	8008754 <HAL_Delay>

    printTemplate(1, 0);
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	f7fa f8b7 	bl	8000e80 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d12:	2108      	movs	r1, #8
 8006d14:	489e      	ldr	r0, [pc, #632]	; (8006f90 <takeMachineID+0x2b0>)
 8006d16:	f002 faed 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d136      	bne.n	8006d8e <takeMachineID+0xae>
        	lcd_cursor(0);
 8006d20:	2000      	movs	r0, #0
 8006d22:	f001 f81f 	bl	8007d64 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006d26:	489b      	ldr	r0, [pc, #620]	; (8006f94 <takeMachineID+0x2b4>)
 8006d28:	f7f9 fa7c 	bl	8000224 <strlen>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b0c      	cmp	r3, #12
 8006d30:	d010      	beq.n	8006d54 <takeMachineID+0x74>
        		lcd_clear();
 8006d32:	f000 ffe5 	bl	8007d00 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006d36:	4a98      	ldr	r2, [pc, #608]	; (8006f98 <takeMachineID+0x2b8>)
 8006d38:	2101      	movs	r1, #1
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	f000 ffb4 	bl	8007ca8 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006d40:	4a96      	ldr	r2, [pc, #600]	; (8006f9c <takeMachineID+0x2bc>)
 8006d42:	2101      	movs	r1, #1
 8006d44:	2002      	movs	r0, #2
 8006d46:	f000 ffaf 	bl	8007ca8 <lcd_print>
        		HAL_Delay(1200);
 8006d4a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d4e:	f001 fd01 	bl	8008754 <HAL_Delay>
        		goto mainSection;
 8006d52:	e7c8      	b.n	8006ce6 <takeMachineID+0x6>
        	} else {
        		memcpy(machineIDInt, &eepromData[idStartPos], machineIDCharacterLimit);
 8006d54:	4b8d      	ldr	r3, [pc, #564]	; (8006f8c <takeMachineID+0x2ac>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a91      	ldr	r2, [pc, #580]	; (8006fa0 <takeMachineID+0x2c0>)
 8006d5a:	441a      	add	r2, r3
 8006d5c:	4b91      	ldr	r3, [pc, #580]	; (8006fa4 <takeMachineID+0x2c4>)
 8006d5e:	6810      	ldr	r0, [r2, #0]
 8006d60:	6851      	ldr	r1, [r2, #4]
 8006d62:	6892      	ldr	r2, [r2, #8]
 8006d64:	6018      	str	r0, [r3, #0]
 8006d66:	6059      	str	r1, [r3, #4]
 8006d68:	609a      	str	r2, [r3, #8]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d6e:	9302      	str	r3, [sp, #8]
 8006d70:	236e      	movs	r3, #110	; 0x6e
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	4b8a      	ldr	r3, [pc, #552]	; (8006fa0 <takeMachineID+0x2c0>)
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	236e      	movs	r3, #110	; 0x6e
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	21a0      	movs	r1, #160	; 0xa0
 8006d7e:	488a      	ldr	r0, [pc, #552]	; (8006fa8 <takeMachineID+0x2c8>)
 8006d80:	f002 fd72 	bl	8009868 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d88:	f001 fce4 	bl	8008754 <HAL_Delay>

            	break;
 8006d8c:	e13c      	b.n	8007008 <takeMachineID+0x328>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006d8e:	2101      	movs	r1, #1
 8006d90:	487f      	ldr	r0, [pc, #508]	; (8006f90 <takeMachineID+0x2b0>)
 8006d92:	f002 faaf 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d111      	bne.n	8006dc0 <takeMachineID+0xe0>
        	if(cursorPosition == 7) {
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b07      	cmp	r3, #7
 8006da0:	d102      	bne.n	8006da8 <takeMachineID+0xc8>
        		cursorPosition = 10;
 8006da2:	230a      	movs	r3, #10
 8006da4:	60bb      	str	r3, [r7, #8]
 8006da6:	e008      	b.n	8006dba <takeMachineID+0xda>
        	} else if (cursorPosition == 14) {
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b0e      	cmp	r3, #14
 8006dac:	d102      	bne.n	8006db4 <takeMachineID+0xd4>
                cursorPosition = 3;
 8006dae:	2303      	movs	r3, #3
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	e002      	b.n	8006dba <takeMachineID+0xda>
            } else {
            	cursorPosition++;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006dba:	2096      	movs	r0, #150	; 0x96
 8006dbc:	f001 fcca 	bl	8008754 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006dc0:	2108      	movs	r1, #8
 8006dc2:	487a      	ldr	r0, [pc, #488]	; (8006fac <takeMachineID+0x2cc>)
 8006dc4:	f002 fa96 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d111      	bne.n	8006df2 <takeMachineID+0x112>
            if (cursorPosition == 3) {
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d102      	bne.n	8006dda <takeMachineID+0xfa>
                cursorPosition = 14;
 8006dd4:	230e      	movs	r3, #14
 8006dd6:	60bb      	str	r3, [r7, #8]
 8006dd8:	e008      	b.n	8006dec <takeMachineID+0x10c>
            } else if(cursorPosition == 10) {
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b0a      	cmp	r3, #10
 8006dde:	d102      	bne.n	8006de6 <takeMachineID+0x106>
            	cursorPosition = 7;
 8006de0:	2307      	movs	r3, #7
 8006de2:	60bb      	str	r3, [r7, #8]
 8006de4:	e002      	b.n	8006dec <takeMachineID+0x10c>
            } else {
            	cursorPosition--;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006dec:	2096      	movs	r0, #150	; 0x96
 8006dee:	f001 fcb1 	bl	8008754 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006df2:	2102      	movs	r1, #2
 8006df4:	4866      	ldr	r0, [pc, #408]	; (8006f90 <takeMachineID+0x2b0>)
 8006df6:	f002 fa7d 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	f040 80a9 	bne.w	8006f54 <takeMachineID+0x274>
        	if(cursorPosition == 3) {
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d10a      	bne.n	8006e1e <takeMachineID+0x13e>
        		machineID[arrayPos] = '0';
 8006e08:	4a62      	ldr	r2, [pc, #392]	; (8006f94 <takeMachineID+0x2b4>)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	2230      	movs	r2, #48	; 0x30
 8006e10:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006e12:	4a63      	ldr	r2, [pc, #396]	; (8006fa0 <takeMachineID+0x2c0>)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	4413      	add	r3, r2
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e07c      	b.n	8006f18 <takeMachineID+0x238>
        	} else if(cursorPosition == 4) {
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d10a      	bne.n	8006e3a <takeMachineID+0x15a>
        		machineID[arrayPos] = '1';
 8006e24:	4a5b      	ldr	r2, [pc, #364]	; (8006f94 <takeMachineID+0x2b4>)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4413      	add	r3, r2
 8006e2a:	2231      	movs	r2, #49	; 0x31
 8006e2c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006e2e:	4a5c      	ldr	r2, [pc, #368]	; (8006fa0 <takeMachineID+0x2c0>)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	4413      	add	r3, r2
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e06e      	b.n	8006f18 <takeMachineID+0x238>
        	} else if(cursorPosition == 5) {
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b05      	cmp	r3, #5
 8006e3e:	d10a      	bne.n	8006e56 <takeMachineID+0x176>
        		machineID[arrayPos] = '2';
 8006e40:	4a54      	ldr	r2, [pc, #336]	; (8006f94 <takeMachineID+0x2b4>)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	2232      	movs	r2, #50	; 0x32
 8006e48:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006e4a:	4a55      	ldr	r2, [pc, #340]	; (8006fa0 <takeMachineID+0x2c0>)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	4413      	add	r3, r2
 8006e50:	2202      	movs	r2, #2
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	e060      	b.n	8006f18 <takeMachineID+0x238>
        	} else if(cursorPosition == 6) {
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	d10a      	bne.n	8006e72 <takeMachineID+0x192>
        		machineID[arrayPos] = '3';
 8006e5c:	4a4d      	ldr	r2, [pc, #308]	; (8006f94 <takeMachineID+0x2b4>)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	2233      	movs	r2, #51	; 0x33
 8006e64:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006e66:	4a4e      	ldr	r2, [pc, #312]	; (8006fa0 <takeMachineID+0x2c0>)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e052      	b.n	8006f18 <takeMachineID+0x238>
        	} else if(cursorPosition == 7) {
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b07      	cmp	r3, #7
 8006e76:	d10a      	bne.n	8006e8e <takeMachineID+0x1ae>
        		machineID[arrayPos] = '4';
 8006e78:	4a46      	ldr	r2, [pc, #280]	; (8006f94 <takeMachineID+0x2b4>)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	2234      	movs	r2, #52	; 0x34
 8006e80:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006e82:	4a47      	ldr	r2, [pc, #284]	; (8006fa0 <takeMachineID+0x2c0>)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	4413      	add	r3, r2
 8006e88:	2204      	movs	r2, #4
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	e044      	b.n	8006f18 <takeMachineID+0x238>
        	} else if(cursorPosition == 10) {
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b0a      	cmp	r3, #10
 8006e92:	d10a      	bne.n	8006eaa <takeMachineID+0x1ca>
        		machineID[arrayPos] = '5';
 8006e94:	4a3f      	ldr	r2, [pc, #252]	; (8006f94 <takeMachineID+0x2b4>)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4413      	add	r3, r2
 8006e9a:	2235      	movs	r2, #53	; 0x35
 8006e9c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006e9e:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <takeMachineID+0x2c0>)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	2205      	movs	r2, #5
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	e036      	b.n	8006f18 <takeMachineID+0x238>
        	} else if(cursorPosition == 11) {
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b0b      	cmp	r3, #11
 8006eae:	d10a      	bne.n	8006ec6 <takeMachineID+0x1e6>
        		machineID[arrayPos] = '6';
 8006eb0:	4a38      	ldr	r2, [pc, #224]	; (8006f94 <takeMachineID+0x2b4>)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	2236      	movs	r2, #54	; 0x36
 8006eb8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006eba:	4a39      	ldr	r2, [pc, #228]	; (8006fa0 <takeMachineID+0x2c0>)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	2206      	movs	r2, #6
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	e028      	b.n	8006f18 <takeMachineID+0x238>
        	} else if(cursorPosition == 12) {
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b0c      	cmp	r3, #12
 8006eca:	d10a      	bne.n	8006ee2 <takeMachineID+0x202>
        		machineID[arrayPos] = '7';
 8006ecc:	4a31      	ldr	r2, [pc, #196]	; (8006f94 <takeMachineID+0x2b4>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	2237      	movs	r2, #55	; 0x37
 8006ed4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006ed6:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <takeMachineID+0x2c0>)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	4413      	add	r3, r2
 8006edc:	2207      	movs	r2, #7
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e01a      	b.n	8006f18 <takeMachineID+0x238>
        	} else if(cursorPosition == 13) {
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b0d      	cmp	r3, #13
 8006ee6:	d10a      	bne.n	8006efe <takeMachineID+0x21e>
        		machineID[arrayPos] = '8';
 8006ee8:	4a2a      	ldr	r2, [pc, #168]	; (8006f94 <takeMachineID+0x2b4>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	2238      	movs	r2, #56	; 0x38
 8006ef0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006ef2:	4a2b      	ldr	r2, [pc, #172]	; (8006fa0 <takeMachineID+0x2c0>)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	2208      	movs	r2, #8
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	e00c      	b.n	8006f18 <takeMachineID+0x238>
        	} else if(cursorPosition == 14) {
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b0e      	cmp	r3, #14
 8006f02:	d109      	bne.n	8006f18 <takeMachineID+0x238>
        		machineID[arrayPos] = '9';
 8006f04:	4a23      	ldr	r2, [pc, #140]	; (8006f94 <takeMachineID+0x2b4>)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4413      	add	r3, r2
 8006f0a:	2239      	movs	r2, #57	; 0x39
 8006f0c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006f0e:	4a24      	ldr	r2, [pc, #144]	; (8006fa0 <takeMachineID+0x2c0>)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	4413      	add	r3, r2
 8006f14:	2209      	movs	r2, #9
 8006f16:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	b2d9      	uxtb	r1, r3
 8006f1c:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <takeMachineID+0x2b4>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4413      	add	r3, r2
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	2001      	movs	r0, #1
 8006f28:	f000 fed3 	bl	8007cd2 <lcd_print_char>

        	writeLoc++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3301      	adds	r3, #1
 8006f36:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	603b      	str	r3, [r7, #0]

        	machineID[machineIDCharacterLimit] = '\0';
 8006f3e:	4b15      	ldr	r3, [pc, #84]	; (8006f94 <takeMachineID+0x2b4>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	731a      	strb	r2, [r3, #12]
        	eepromData[eepromVal] = '\0';
 8006f44:	4a16      	ldr	r2, [pc, #88]	; (8006fa0 <takeMachineID+0x2c0>)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	4413      	add	r3, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	701a      	strb	r2, [r3, #0]

        	HAL_Delay(150);
 8006f4e:	2096      	movs	r0, #150	; 0x96
 8006f50:	f001 fc00 	bl	8008754 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006f54:	2104      	movs	r1, #4
 8006f56:	480e      	ldr	r0, [pc, #56]	; (8006f90 <takeMachineID+0x2b0>)
 8006f58:	f002 f9cc 	bl	80092f4 <HAL_GPIO_ReadPin>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d14b      	bne.n	8006ffa <takeMachineID+0x31a>
            if(strlen(machineID) >= 1) {
 8006f62:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <takeMachineID+0x2b4>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d044      	beq.n	8006ff4 <takeMachineID+0x314>
                machineID[arrayPos] = '\0';
 8006f6a:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <takeMachineID+0x2b4>)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006f74:	4a0a      	ldr	r2, [pc, #40]	; (8006fa0 <takeMachineID+0x2c0>)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	4413      	add	r3, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	dd15      	ble.n	8006fb0 <takeMachineID+0x2d0>
                	writeLoc--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	e016      	b.n	8006fba <takeMachineID+0x2da>
 8006f8c:	20000004 	.word	0x20000004
 8006f90:	40010800 	.word	0x40010800
 8006f94:	20000190 	.word	0x20000190
 8006f98:	0800dc20 	.word	0x0800dc20
 8006f9c:	0800dc34 	.word	0x0800dc34
 8006fa0:	20000118 	.word	0x20000118
 8006fa4:	200001c4 	.word	0x200001c4
 8006fa8:	200003a8 	.word	0x200003a8
 8006fac:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	dc01      	bgt.n	8006fba <takeMachineID+0x2da>
                	writeLoc = 5;
 8006fb6:	2305      	movs	r3, #5
 8006fb8:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd06      	ble.n	8006fce <takeMachineID+0x2ee>
                	arrayPos--;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	e007      	b.n	8006fde <takeMachineID+0x2fe>
                } else if(arrayPos < 0) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da04      	bge.n	8006fde <takeMachineID+0x2fe>
                	arrayPos = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8006fd8:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <takeMachineID+0x330>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	2001      	movs	r0, #1
 8006fea:	f000 fe93 	bl	8007d14 <lcd_delete_char>
                HAL_Delay(50);
 8006fee:	2032      	movs	r0, #50	; 0x32
 8006ff0:	f001 fbb0 	bl	8008754 <HAL_Delay>
            }

            HAL_Delay(150);
 8006ff4:	2096      	movs	r0, #150	; 0x96
 8006ff6:	f001 fbad 	bl	8008754 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	4619      	mov	r1, r3
 8007000:	2002      	movs	r0, #2
 8007002:	f000 fe32 	bl	8007c6a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007006:	e684      	b.n	8006d12 <takeMachineID+0x32>
    }
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20000004 	.word	0x20000004

08007014 <takeWifiSSID>:

void takeWifiSSID() {
 8007014:	b5b0      	push	{r4, r5, r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 800701a:	2001      	movs	r0, #1
 800701c:	f000 fea2 	bl	8007d64 <lcd_cursor>

    resetEEPROM4Wifi(2);
 8007020:	2002      	movs	r0, #2
 8007022:	f7f9 fc11 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8007026:	2064      	movs	r0, #100	; 0x64
 8007028:	f001 fb94 	bl	8008754 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800702c:	2301      	movs	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007030:	2307      	movs	r3, #7
 8007032:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007034:	2301      	movs	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007038:	2300      	movs	r3, #0
 800703a:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800703c:	4ba9      	ldr	r3, [pc, #676]	; (80072e4 <takeWifiSSID+0x2d0>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007042:	2101      	movs	r1, #1
 8007044:	2002      	movs	r0, #2
 8007046:	f7f9 ff1b 	bl	8000e80 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800704a:	2108      	movs	r1, #8
 800704c:	48a6      	ldr	r0, [pc, #664]	; (80072e8 <takeWifiSSID+0x2d4>)
 800704e:	f002 f951 	bl	80092f4 <HAL_GPIO_ReadPin>
 8007052:	4603      	mov	r3, r0
 8007054:	2b01      	cmp	r3, #1
 8007056:	d13a      	bne.n	80070ce <takeWifiSSID+0xba>
            lcd_cursor(0);
 8007058:	2000      	movs	r0, #0
 800705a:	f000 fe83 	bl	8007d64 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 800705e:	48a3      	ldr	r0, [pc, #652]	; (80072ec <takeWifiSSID+0x2d8>)
 8007060:	f7f9 f8e0 	bl	8000224 <strlen>
 8007064:	4603      	mov	r3, r0
 8007066:	2b14      	cmp	r3, #20
 8007068:	d910      	bls.n	800708c <takeWifiSSID+0x78>
                lcd_clear();
 800706a:	f000 fe49 	bl	8007d00 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800706e:	4aa0      	ldr	r2, [pc, #640]	; (80072f0 <takeWifiSSID+0x2dc>)
 8007070:	2101      	movs	r1, #1
 8007072:	2001      	movs	r0, #1
 8007074:	f000 fe18 	bl	8007ca8 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007078:	4a9e      	ldr	r2, [pc, #632]	; (80072f4 <takeWifiSSID+0x2e0>)
 800707a:	2101      	movs	r1, #1
 800707c:	2002      	movs	r0, #2
 800707e:	f000 fe13 	bl	8007ca8 <lcd_print>
                HAL_Delay(1250);
 8007082:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007086:	f001 fb65 	bl	8008754 <HAL_Delay>
                goto mainSSIDSection;
 800708a:	e7c6      	b.n	800701a <takeWifiSSID+0x6>
            } else {
            	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], wifiCharacterLimit);
 800708c:	4b95      	ldr	r3, [pc, #596]	; (80072e4 <takeWifiSSID+0x2d0>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a99      	ldr	r2, [pc, #612]	; (80072f8 <takeWifiSSID+0x2e4>)
 8007092:	441a      	add	r2, r3
 8007094:	4b99      	ldr	r3, [pc, #612]	; (80072fc <takeWifiSSID+0x2e8>)
 8007096:	6811      	ldr	r1, [r2, #0]
 8007098:	6855      	ldr	r5, [r2, #4]
 800709a:	6894      	ldr	r4, [r2, #8]
 800709c:	68d0      	ldr	r0, [r2, #12]
 800709e:	6019      	str	r1, [r3, #0]
 80070a0:	605d      	str	r5, [r3, #4]
 80070a2:	609c      	str	r4, [r3, #8]
 80070a4:	60d8      	str	r0, [r3, #12]
 80070a6:	6911      	ldr	r1, [r2, #16]
 80070a8:	6119      	str	r1, [r3, #16]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80070aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80070ae:	9302      	str	r3, [sp, #8]
 80070b0:	236e      	movs	r3, #110	; 0x6e
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	4b90      	ldr	r3, [pc, #576]	; (80072f8 <takeWifiSSID+0x2e4>)
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	236e      	movs	r3, #110	; 0x6e
 80070ba:	2200      	movs	r2, #0
 80070bc:	21a0      	movs	r1, #160	; 0xa0
 80070be:	4890      	ldr	r0, [pc, #576]	; (8007300 <takeWifiSSID+0x2ec>)
 80070c0:	f002 fbd2 	bl	8009868 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80070c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070c8:	f001 fb44 	bl	8008754 <HAL_Delay>

            	break;
 80070cc:	e13b      	b.n	8007346 <takeWifiSSID+0x332>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80070ce:	2101      	movs	r1, #1
 80070d0:	4885      	ldr	r0, [pc, #532]	; (80072e8 <takeWifiSSID+0x2d4>)
 80070d2:	f002 f90f 	bl	80092f4 <HAL_GPIO_ReadPin>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d14d      	bne.n	8007178 <takeWifiSSID+0x164>
        	if(cursorPosition > 80) {
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b50      	cmp	r3, #80	; 0x50
 80070e0:	dd01      	ble.n	80070e6 <takeWifiSSID+0xd2>
        		cursorPosition = 1;
 80070e2:	2301      	movs	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d13f      	bne.n	800716c <takeWifiSSID+0x158>
            	if(page == 1) {
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d109      	bne.n	8007106 <takeWifiSSID+0xf2>
            		cursorPosition = 1;
 80070f2:	2301      	movs	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
            		page++;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	3301      	adds	r3, #1
 80070fa:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80070fc:	2102      	movs	r1, #2
 80070fe:	2002      	movs	r0, #2
 8007100:	f7f9 febe 	bl	8000e80 <printTemplate>
 8007104:	e035      	b.n	8007172 <takeWifiSSID+0x15e>
            	} else if(page == 2) {
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d109      	bne.n	8007120 <takeWifiSSID+0x10c>
            		cursorPosition = 1;
 800710c:	2301      	movs	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	3301      	adds	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007116:	2103      	movs	r1, #3
 8007118:	2002      	movs	r0, #2
 800711a:	f7f9 feb1 	bl	8000e80 <printTemplate>
 800711e:	e028      	b.n	8007172 <takeWifiSSID+0x15e>
            	} else if(page == 3) {
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b03      	cmp	r3, #3
 8007124:	d109      	bne.n	800713a <takeWifiSSID+0x126>
            		cursorPosition = 1;
 8007126:	2301      	movs	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
            		page++;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	3301      	adds	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007130:	2104      	movs	r1, #4
 8007132:	2002      	movs	r0, #2
 8007134:	f7f9 fea4 	bl	8000e80 <printTemplate>
 8007138:	e01b      	b.n	8007172 <takeWifiSSID+0x15e>
            	} else if(page == 4) {
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b04      	cmp	r3, #4
 800713e:	d109      	bne.n	8007154 <takeWifiSSID+0x140>
            		cursorPosition = 1;
 8007140:	2301      	movs	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
            		page++;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	3301      	adds	r3, #1
 8007148:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800714a:	2105      	movs	r1, #5
 800714c:	2002      	movs	r0, #2
 800714e:	f7f9 fe97 	bl	8000e80 <printTemplate>
 8007152:	e00e      	b.n	8007172 <takeWifiSSID+0x15e>
            	} else if(page == 5) {
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b05      	cmp	r3, #5
 8007158:	d10b      	bne.n	8007172 <takeWifiSSID+0x15e>
            		cursorPosition = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800715e:	2301      	movs	r3, #1
 8007160:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007162:	2101      	movs	r1, #1
 8007164:	2002      	movs	r0, #2
 8007166:	f7f9 fe8b 	bl	8000e80 <printTemplate>
 800716a:	e002      	b.n	8007172 <takeWifiSSID+0x15e>
            	}
            } else {
            	cursorPosition++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007172:	2096      	movs	r0, #150	; 0x96
 8007174:	f001 faee 	bl	8008754 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007178:	2108      	movs	r1, #8
 800717a:	4862      	ldr	r0, [pc, #392]	; (8007304 <takeWifiSSID+0x2f0>)
 800717c:	f002 f8ba 	bl	80092f4 <HAL_GPIO_ReadPin>
 8007180:	4603      	mov	r3, r0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d149      	bne.n	800721a <takeWifiSSID+0x206>
        	if(cursorPosition < 1) {
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	dc01      	bgt.n	8007190 <takeWifiSSID+0x17c>
        		cursorPosition = 80;
 800718c:	2350      	movs	r3, #80	; 0x50
 800718e:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d13b      	bne.n	800720e <takeWifiSSID+0x1fa>
            	if(page == 1) {
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d108      	bne.n	80071ae <takeWifiSSID+0x19a>
            		cursorPosition = 16;
 800719c:	2310      	movs	r3, #16
 800719e:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80071a0:	2305      	movs	r3, #5
 80071a2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80071a4:	2105      	movs	r1, #5
 80071a6:	2002      	movs	r0, #2
 80071a8:	f7f9 fe6a 	bl	8000e80 <printTemplate>
 80071ac:	e032      	b.n	8007214 <takeWifiSSID+0x200>
            	} else if(page == 2) {
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d108      	bne.n	80071c6 <takeWifiSSID+0x1b2>
            		cursorPosition = 16;
 80071b4:	2310      	movs	r3, #16
 80071b6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80071b8:	2301      	movs	r3, #1
 80071ba:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80071bc:	2101      	movs	r1, #1
 80071be:	2002      	movs	r0, #2
 80071c0:	f7f9 fe5e 	bl	8000e80 <printTemplate>
 80071c4:	e026      	b.n	8007214 <takeWifiSSID+0x200>
            	} else if(page == 3) {
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d108      	bne.n	80071de <takeWifiSSID+0x1ca>
            		cursorPosition = 16;
 80071cc:	2310      	movs	r3, #16
 80071ce:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80071d0:	2302      	movs	r3, #2
 80071d2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80071d4:	2102      	movs	r1, #2
 80071d6:	2002      	movs	r0, #2
 80071d8:	f7f9 fe52 	bl	8000e80 <printTemplate>
 80071dc:	e01a      	b.n	8007214 <takeWifiSSID+0x200>
            	} else if(page == 4) {
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d108      	bne.n	80071f6 <takeWifiSSID+0x1e2>
            		cursorPosition = 16;
 80071e4:	2310      	movs	r3, #16
 80071e6:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80071e8:	2303      	movs	r3, #3
 80071ea:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80071ec:	2103      	movs	r1, #3
 80071ee:	2002      	movs	r0, #2
 80071f0:	f7f9 fe46 	bl	8000e80 <printTemplate>
 80071f4:	e00e      	b.n	8007214 <takeWifiSSID+0x200>
            	} else if(page == 5) {
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b05      	cmp	r3, #5
 80071fa:	d10b      	bne.n	8007214 <takeWifiSSID+0x200>
            		cursorPosition = 16;
 80071fc:	2310      	movs	r3, #16
 80071fe:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007200:	2304      	movs	r3, #4
 8007202:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007204:	2104      	movs	r1, #4
 8007206:	2002      	movs	r0, #2
 8007208:	f7f9 fe3a 	bl	8000e80 <printTemplate>
 800720c:	e002      	b.n	8007214 <takeWifiSSID+0x200>
            	}
            } else {
            	cursorPosition--;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3b01      	subs	r3, #1
 8007212:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007214:	2096      	movs	r0, #150	; 0x96
 8007216:	f001 fa9d 	bl	8008754 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800721a:	2102      	movs	r1, #2
 800721c:	4832      	ldr	r0, [pc, #200]	; (80072e8 <takeWifiSSID+0x2d4>)
 800721e:	f002 f869 	bl	80092f4 <HAL_GPIO_ReadPin>
 8007222:	4603      	mov	r3, r0
 8007224:	2b01      	cmp	r3, #1
 8007226:	d131      	bne.n	800728c <takeWifiSSID+0x278>
        	//wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b2d9      	uxtb	r1, r3
 8007230:	4a32      	ldr	r2, [pc, #200]	; (80072fc <takeWifiSSID+0x2e8>)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4413      	add	r3, r2
 8007236:	460a      	mov	r2, r1
 8007238:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b2d9      	uxtb	r1, r3
 8007242:	4a2d      	ldr	r2, [pc, #180]	; (80072f8 <takeWifiSSID+0x2e4>)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4413      	add	r3, r2
 8007248:	460a      	mov	r2, r1
 800724a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition - 1]);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	b2d9      	uxtb	r1, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3b01      	subs	r3, #1
 8007254:	4a2c      	ldr	r2, [pc, #176]	; (8007308 <takeWifiSSID+0x2f4>)
 8007256:	5cd3      	ldrb	r3, [r2, r3]
 8007258:	461a      	mov	r2, r3
 800725a:	2001      	movs	r0, #1
 800725c:	f000 fd39 	bl	8007cd2 <lcd_print_char>

            writeLoc++;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	3301      	adds	r3, #1
 8007264:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	3301      	adds	r3, #1
 800726a:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3301      	adds	r3, #1
 8007270:	607b      	str	r3, [r7, #4]

            //wifiSSID[arrayPosition] = '\0';
            wifiSSIDInt[arrayPosition] = '\0';
 8007272:	4a22      	ldr	r2, [pc, #136]	; (80072fc <takeWifiSSID+0x2e8>)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4413      	add	r3, r2
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 800727c:	4a1e      	ldr	r2, [pc, #120]	; (80072f8 <takeWifiSSID+0x2e4>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	2200      	movs	r2, #0
 8007284:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007286:	2096      	movs	r0, #150	; 0x96
 8007288:	f001 fa64 	bl	8008754 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800728c:	2104      	movs	r1, #4
 800728e:	4816      	ldr	r0, [pc, #88]	; (80072e8 <takeWifiSSID+0x2d4>)
 8007290:	f002 f830 	bl	80092f4 <HAL_GPIO_ReadPin>
 8007294:	4603      	mov	r3, r0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d14e      	bne.n	8007338 <takeWifiSSID+0x324>
        	if(strlen(wifiSSID) >= 1) {
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <takeWifiSSID+0x2d8>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d047      	beq.n	8007332 <takeWifiSSID+0x31e>
        		//wifiSSID[arrayPosition] = '\0';
        		wifiSSIDInt[arrayPosition] = '\0';
 80072a2:	4a16      	ldr	r2, [pc, #88]	; (80072fc <takeWifiSSID+0x2e8>)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4413      	add	r3, r2
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 80072ac:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <takeWifiSSID+0x2e4>)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4413      	add	r3, r2
 80072b2:	2200      	movs	r2, #0
 80072b4:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b07      	cmp	r3, #7
 80072ba:	dd03      	ble.n	80072c4 <takeWifiSSID+0x2b0>
        			writeLoc--;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	3b01      	subs	r3, #1
 80072c0:	613b      	str	r3, [r7, #16]
 80072c2:	e004      	b.n	80072ce <takeWifiSSID+0x2ba>
        		} else if(writeLoc < 7) {
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b06      	cmp	r3, #6
 80072c8:	dc01      	bgt.n	80072ce <takeWifiSSID+0x2ba>
        			writeLoc = 7;
 80072ca:	2307      	movs	r3, #7
 80072cc:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	dd1b      	ble.n	800730c <takeWifiSSID+0x2f8>
        			arrayPosition--;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3b01      	subs	r3, #1
 80072de:	607b      	str	r3, [r7, #4]
 80072e0:	e01c      	b.n	800731c <takeWifiSSID+0x308>
 80072e2:	bf00      	nop
 80072e4:	20000008 	.word	0x20000008
 80072e8:	40010800 	.word	0x40010800
 80072ec:	2000019c 	.word	0x2000019c
 80072f0:	0800dc48 	.word	0x0800dc48
 80072f4:	0800dc5c 	.word	0x0800dc5c
 80072f8:	20000118 	.word	0x20000118
 80072fc:	200001d0 	.word	0x200001d0
 8007300:	200003a8 	.word	0x200003a8
 8007304:	40011000 	.word	0x40011000
 8007308:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	da04      	bge.n	800731c <takeWifiSSID+0x308>
        			arrayPosition = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007316:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <takeWifiSSID+0x33c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	3306      	adds	r3, #6
 8007322:	b2db      	uxtb	r3, r3
 8007324:	4619      	mov	r1, r3
 8007326:	2001      	movs	r0, #1
 8007328:	f000 fcf4 	bl	8007d14 <lcd_delete_char>
        		HAL_Delay(50);
 800732c:	2032      	movs	r0, #50	; 0x32
 800732e:	f001 fa11 	bl	8008754 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007332:	2096      	movs	r0, #150	; 0x96
 8007334:	f001 fa0e 	bl	8008754 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	4619      	mov	r1, r3
 800733e:	2002      	movs	r0, #2
 8007340:	f000 fc93 	bl	8007c6a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007344:	e681      	b.n	800704a <takeWifiSSID+0x36>
    }
}
 8007346:	bf00      	nop
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bdb0      	pop	{r4, r5, r7, pc}
 800734e:	bf00      	nop
 8007350:	20000008 	.word	0x20000008

08007354 <takeWifiPass>:

void takeWifiPass() {
 8007354:	b5b0      	push	{r4, r5, r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af04      	add	r7, sp, #16
	mainPASSSection:

    lcd_cursor(1);
 800735a:	2001      	movs	r0, #1
 800735c:	f000 fd02 	bl	8007d64 <lcd_cursor>

    resetEEPROM4Wifi(3);
 8007360:	2003      	movs	r0, #3
 8007362:	f7f9 fa71 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8007366:	2064      	movs	r0, #100	; 0x64
 8007368:	f001 f9f4 	bl	8008754 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800736c:	2301      	movs	r3, #1
 800736e:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 8007370:	2307      	movs	r3, #7
 8007372:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 8007374:	2301      	movs	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 8007378:	2300      	movs	r3, #0
 800737a:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 800737c:	4bad      	ldr	r3, [pc, #692]	; (8007634 <takeWifiPass+0x2e0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007382:	2101      	movs	r1, #1
 8007384:	2003      	movs	r0, #3
 8007386:	f7f9 fd7b 	bl	8000e80 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800738a:	2108      	movs	r1, #8
 800738c:	48aa      	ldr	r0, [pc, #680]	; (8007638 <takeWifiPass+0x2e4>)
 800738e:	f001 ffb1 	bl	80092f4 <HAL_GPIO_ReadPin>
 8007392:	4603      	mov	r3, r0
 8007394:	2b01      	cmp	r3, #1
 8007396:	d13a      	bne.n	800740e <takeWifiPass+0xba>
            lcd_cursor(0);
 8007398:	2000      	movs	r0, #0
 800739a:	f000 fce3 	bl	8007d64 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800739e:	48a7      	ldr	r0, [pc, #668]	; (800763c <takeWifiPass+0x2e8>)
 80073a0:	f7f8 ff40 	bl	8000224 <strlen>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b14      	cmp	r3, #20
 80073a8:	d910      	bls.n	80073cc <takeWifiPass+0x78>
                lcd_clear();
 80073aa:	f000 fca9 	bl	8007d00 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80073ae:	4aa4      	ldr	r2, [pc, #656]	; (8007640 <takeWifiPass+0x2ec>)
 80073b0:	2101      	movs	r1, #1
 80073b2:	2001      	movs	r0, #1
 80073b4:	f000 fc78 	bl	8007ca8 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80073b8:	4aa2      	ldr	r2, [pc, #648]	; (8007644 <takeWifiPass+0x2f0>)
 80073ba:	2101      	movs	r1, #1
 80073bc:	2002      	movs	r0, #2
 80073be:	f000 fc73 	bl	8007ca8 <lcd_print>
                HAL_Delay(1200);
 80073c2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80073c6:	f001 f9c5 	bl	8008754 <HAL_Delay>
                goto mainPASSSection;
 80073ca:	e7c6      	b.n	800735a <takeWifiPass+0x6>
            } else {
            	memcpy(wifiPassInt, &eepromData[passStartPos], wifiCharacterLimit);
 80073cc:	4b99      	ldr	r3, [pc, #612]	; (8007634 <takeWifiPass+0x2e0>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a9d      	ldr	r2, [pc, #628]	; (8007648 <takeWifiPass+0x2f4>)
 80073d2:	441a      	add	r2, r3
 80073d4:	4b9d      	ldr	r3, [pc, #628]	; (800764c <takeWifiPass+0x2f8>)
 80073d6:	6811      	ldr	r1, [r2, #0]
 80073d8:	6855      	ldr	r5, [r2, #4]
 80073da:	6894      	ldr	r4, [r2, #8]
 80073dc:	68d0      	ldr	r0, [r2, #12]
 80073de:	6019      	str	r1, [r3, #0]
 80073e0:	605d      	str	r5, [r3, #4]
 80073e2:	609c      	str	r4, [r3, #8]
 80073e4:	60d8      	str	r0, [r3, #12]
 80073e6:	6911      	ldr	r1, [r2, #16]
 80073e8:	6119      	str	r1, [r3, #16]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80073ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80073ee:	9302      	str	r3, [sp, #8]
 80073f0:	236e      	movs	r3, #110	; 0x6e
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	4b94      	ldr	r3, [pc, #592]	; (8007648 <takeWifiPass+0x2f4>)
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	236e      	movs	r3, #110	; 0x6e
 80073fa:	2200      	movs	r2, #0
 80073fc:	21a0      	movs	r1, #160	; 0xa0
 80073fe:	4894      	ldr	r0, [pc, #592]	; (8007650 <takeWifiPass+0x2fc>)
 8007400:	f002 fa32 	bl	8009868 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007408:	f001 f9a4 	bl	8008754 <HAL_Delay>

            	break;
 800740c:	e124      	b.n	8007658 <takeWifiPass+0x304>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800740e:	2101      	movs	r1, #1
 8007410:	4889      	ldr	r0, [pc, #548]	; (8007638 <takeWifiPass+0x2e4>)
 8007412:	f001 ff6f 	bl	80092f4 <HAL_GPIO_ReadPin>
 8007416:	4603      	mov	r3, r0
 8007418:	2b01      	cmp	r3, #1
 800741a:	d14d      	bne.n	80074b8 <takeWifiPass+0x164>
        	if(cursorPosition > 80) {
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b50      	cmp	r3, #80	; 0x50
 8007420:	dd01      	ble.n	8007426 <takeWifiPass+0xd2>
        	    cursorPosition = 1;
 8007422:	2301      	movs	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b10      	cmp	r3, #16
 800742a:	d13f      	bne.n	80074ac <takeWifiPass+0x158>
            	if(page == 1) {
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d109      	bne.n	8007446 <takeWifiPass+0xf2>
            		cursorPosition = 1;
 8007432:	2301      	movs	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
            		page++;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	3301      	adds	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800743c:	2102      	movs	r1, #2
 800743e:	2003      	movs	r0, #3
 8007440:	f7f9 fd1e 	bl	8000e80 <printTemplate>
 8007444:	e035      	b.n	80074b2 <takeWifiPass+0x15e>
            	} else if(page == 2) {
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d109      	bne.n	8007460 <takeWifiPass+0x10c>
            		cursorPosition = 1;
 800744c:	2301      	movs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	3301      	adds	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007456:	2103      	movs	r1, #3
 8007458:	2003      	movs	r0, #3
 800745a:	f7f9 fd11 	bl	8000e80 <printTemplate>
 800745e:	e028      	b.n	80074b2 <takeWifiPass+0x15e>
            	} else if(page == 3) {
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b03      	cmp	r3, #3
 8007464:	d109      	bne.n	800747a <takeWifiPass+0x126>
            		cursorPosition = 1;
 8007466:	2301      	movs	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
            		page++;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	3301      	adds	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007470:	2104      	movs	r1, #4
 8007472:	2003      	movs	r0, #3
 8007474:	f7f9 fd04 	bl	8000e80 <printTemplate>
 8007478:	e01b      	b.n	80074b2 <takeWifiPass+0x15e>
            	} else if(page == 4) {
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b04      	cmp	r3, #4
 800747e:	d109      	bne.n	8007494 <takeWifiPass+0x140>
            		cursorPosition = 1;
 8007480:	2301      	movs	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]
            		page++;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	3301      	adds	r3, #1
 8007488:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800748a:	2105      	movs	r1, #5
 800748c:	2003      	movs	r0, #3
 800748e:	f7f9 fcf7 	bl	8000e80 <printTemplate>
 8007492:	e00e      	b.n	80074b2 <takeWifiPass+0x15e>
            	} else if(page == 5) {
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b05      	cmp	r3, #5
 8007498:	d10b      	bne.n	80074b2 <takeWifiPass+0x15e>
            		cursorPosition = 1;
 800749a:	2301      	movs	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800749e:	2301      	movs	r3, #1
 80074a0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80074a2:	2101      	movs	r1, #1
 80074a4:	2003      	movs	r0, #3
 80074a6:	f7f9 fceb 	bl	8000e80 <printTemplate>
 80074aa:	e002      	b.n	80074b2 <takeWifiPass+0x15e>
            	}
            } else {
            	cursorPosition++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80074b2:	2096      	movs	r0, #150	; 0x96
 80074b4:	f001 f94e 	bl	8008754 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80074b8:	2108      	movs	r1, #8
 80074ba:	4866      	ldr	r0, [pc, #408]	; (8007654 <takeWifiPass+0x300>)
 80074bc:	f001 ff1a 	bl	80092f4 <HAL_GPIO_ReadPin>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d149      	bne.n	800755a <takeWifiPass+0x206>
        	if(cursorPosition < 1) {
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	dc01      	bgt.n	80074d0 <takeWifiPass+0x17c>
        	    cursorPosition = 80;
 80074cc:	2350      	movs	r3, #80	; 0x50
 80074ce:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d13b      	bne.n	800754e <takeWifiPass+0x1fa>
            	if(page == 1) {
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d108      	bne.n	80074ee <takeWifiPass+0x19a>
            		cursorPosition = 16;
 80074dc:	2310      	movs	r3, #16
 80074de:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80074e0:	2305      	movs	r3, #5
 80074e2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80074e4:	2105      	movs	r1, #5
 80074e6:	2003      	movs	r0, #3
 80074e8:	f7f9 fcca 	bl	8000e80 <printTemplate>
 80074ec:	e032      	b.n	8007554 <takeWifiPass+0x200>
            	} else if(page == 2) {
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d108      	bne.n	8007506 <takeWifiPass+0x1b2>
            		cursorPosition = 16;
 80074f4:	2310      	movs	r3, #16
 80074f6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80074f8:	2301      	movs	r3, #1
 80074fa:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80074fc:	2101      	movs	r1, #1
 80074fe:	2003      	movs	r0, #3
 8007500:	f7f9 fcbe 	bl	8000e80 <printTemplate>
 8007504:	e026      	b.n	8007554 <takeWifiPass+0x200>
            	} else if(page == 3) {
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d108      	bne.n	800751e <takeWifiPass+0x1ca>
            		cursorPosition = 16;
 800750c:	2310      	movs	r3, #16
 800750e:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007510:	2302      	movs	r3, #2
 8007512:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007514:	2102      	movs	r1, #2
 8007516:	2003      	movs	r0, #3
 8007518:	f7f9 fcb2 	bl	8000e80 <printTemplate>
 800751c:	e01a      	b.n	8007554 <takeWifiPass+0x200>
            	} else if(page == 4) {
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b04      	cmp	r3, #4
 8007522:	d108      	bne.n	8007536 <takeWifiPass+0x1e2>
            		cursorPosition = 16;
 8007524:	2310      	movs	r3, #16
 8007526:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007528:	2303      	movs	r3, #3
 800752a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800752c:	2103      	movs	r1, #3
 800752e:	2003      	movs	r0, #3
 8007530:	f7f9 fca6 	bl	8000e80 <printTemplate>
 8007534:	e00e      	b.n	8007554 <takeWifiPass+0x200>
            	} else if(page == 5) {
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b05      	cmp	r3, #5
 800753a:	d10b      	bne.n	8007554 <takeWifiPass+0x200>
            		cursorPosition = 16;
 800753c:	2310      	movs	r3, #16
 800753e:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007540:	2304      	movs	r3, #4
 8007542:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007544:	2104      	movs	r1, #4
 8007546:	2003      	movs	r0, #3
 8007548:	f7f9 fc9a 	bl	8000e80 <printTemplate>
 800754c:	e002      	b.n	8007554 <takeWifiPass+0x200>
            	}
            } else {
            	cursorPosition--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3b01      	subs	r3, #1
 8007552:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007554:	2096      	movs	r0, #150	; 0x96
 8007556:	f001 f8fd 	bl	8008754 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800755a:	2102      	movs	r1, #2
 800755c:	4836      	ldr	r0, [pc, #216]	; (8007638 <takeWifiPass+0x2e4>)
 800755e:	f001 fec9 	bl	80092f4 <HAL_GPIO_ReadPin>
 8007562:	4603      	mov	r3, r0
 8007564:	2b01      	cmp	r3, #1
 8007566:	d131      	bne.n	80075cc <takeWifiPass+0x278>
        	//wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b2d9      	uxtb	r1, r3
 8007570:	4a36      	ldr	r2, [pc, #216]	; (800764c <takeWifiPass+0x2f8>)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	4413      	add	r3, r2
 8007576:	460a      	mov	r2, r1
 8007578:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b2d9      	uxtb	r1, r3
 8007582:	4a31      	ldr	r2, [pc, #196]	; (8007648 <takeWifiPass+0x2f4>)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	460a      	mov	r2, r1
 800758a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	b2d9      	uxtb	r1, r3
 8007590:	4a2a      	ldr	r2, [pc, #168]	; (800763c <takeWifiPass+0x2e8>)
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4413      	add	r3, r2
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	2001      	movs	r0, #1
 800759c:	f000 fb99 	bl	8007cd2 <lcd_print_char>

            writeLoc++;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	3301      	adds	r3, #1
 80075a4:	613b      	str	r3, [r7, #16]
            arrayPos++;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	3301      	adds	r3, #1
 80075aa:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3301      	adds	r3, #1
 80075b0:	607b      	str	r3, [r7, #4]

            //wifiPass[arrayPos] = '\0';
            wifiPassInt[arrayPos] = '\0';
 80075b2:	4a26      	ldr	r2, [pc, #152]	; (800764c <takeWifiPass+0x2f8>)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4413      	add	r3, r2
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80075bc:	4a22      	ldr	r2, [pc, #136]	; (8007648 <takeWifiPass+0x2f4>)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4413      	add	r3, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80075c6:	2096      	movs	r0, #150	; 0x96
 80075c8:	f001 f8c4 	bl	8008754 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80075cc:	2104      	movs	r1, #4
 80075ce:	481a      	ldr	r0, [pc, #104]	; (8007638 <takeWifiPass+0x2e4>)
 80075d0:	f001 fe90 	bl	80092f4 <HAL_GPIO_ReadPin>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d124      	bne.n	8007624 <takeWifiPass+0x2d0>
            if(strlen(wifiPass) >= 1) {
 80075da:	4b18      	ldr	r3, [pc, #96]	; (800763c <takeWifiPass+0x2e8>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01d      	beq.n	800761e <takeWifiPass+0x2ca>
            	//wifiPass[arrayPos] = '\0';
            	wifiPassInt[arrayPos] = '\0';
 80075e2:	4a1a      	ldr	r2, [pc, #104]	; (800764c <takeWifiPass+0x2f8>)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4413      	add	r3, r2
 80075e8:	2200      	movs	r2, #0
 80075ea:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 80075ec:	4a16      	ldr	r2, [pc, #88]	; (8007648 <takeWifiPass+0x2f4>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4413      	add	r3, r2
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	3b01      	subs	r3, #1
 8007600:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3b01      	subs	r3, #1
 8007606:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	3306      	adds	r3, #6
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4619      	mov	r1, r3
 8007612:	2001      	movs	r0, #1
 8007614:	f000 fb7e 	bl	8007d14 <lcd_delete_char>
            	HAL_Delay(50);
 8007618:	2032      	movs	r0, #50	; 0x32
 800761a:	f001 f89b 	bl	8008754 <HAL_Delay>
            }

            HAL_Delay(150);
 800761e:	2096      	movs	r0, #150	; 0x96
 8007620:	f001 f898 	bl	8008754 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	b2db      	uxtb	r3, r3
 8007628:	4619      	mov	r1, r3
 800762a:	2002      	movs	r0, #2
 800762c:	f000 fb1d 	bl	8007c6a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007630:	e6ab      	b.n	800738a <takeWifiPass+0x36>
 8007632:	bf00      	nop
 8007634:	2000000c 	.word	0x2000000c
 8007638:	40010800 	.word	0x40010800
 800763c:	200001b0 	.word	0x200001b0
 8007640:	0800dc48 	.word	0x0800dc48
 8007644:	0800dc70 	.word	0x0800dc70
 8007648:	20000118 	.word	0x20000118
 800764c:	200001e4 	.word	0x200001e4
 8007650:	200003a8 	.word	0x200003a8
 8007654:	40011000 	.word	0x40011000
    }
}
 8007658:	bf00      	nop
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bdb0      	pop	{r4, r5, r7, pc}

08007660 <mergeData>:

char* mergeData() {
 8007660:	b580      	push	{r7, lr}
 8007662:	b09c      	sub	sp, #112	; 0x70
 8007664:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007666:	2300      	movs	r3, #0
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800766a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800766e:	2228      	movs	r2, #40	; 0x28
 8007670:	2100      	movs	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f004 ff91 	bl	800c59a <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007678:	4b67      	ldr	r3, [pc, #412]	; (8007818 <mergeData+0x1b8>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	713b      	strb	r3, [r7, #4]
 800767e:	4b67      	ldr	r3, [pc, #412]	; (800781c <mergeData+0x1bc>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	717b      	strb	r3, [r7, #5]
 8007684:	4b66      	ldr	r3, [pc, #408]	; (8007820 <mergeData+0x1c0>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	71bb      	strb	r3, [r7, #6]
 800768a:	4b66      	ldr	r3, [pc, #408]	; (8007824 <mergeData+0x1c4>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
 8007690:	4b65      	ldr	r3, [pc, #404]	; (8007828 <mergeData+0x1c8>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	723b      	strb	r3, [r7, #8]
 8007696:	4b65      	ldr	r3, [pc, #404]	; (800782c <mergeData+0x1cc>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	727b      	strb	r3, [r7, #9]
 800769c:	4b64      	ldr	r3, [pc, #400]	; (8007830 <mergeData+0x1d0>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	72bb      	strb	r3, [r7, #10]
 80076a2:	4b64      	ldr	r3, [pc, #400]	; (8007834 <mergeData+0x1d4>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	72fb      	strb	r3, [r7, #11]
 80076a8:	4b63      	ldr	r3, [pc, #396]	; (8007838 <mergeData+0x1d8>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	733b      	strb	r3, [r7, #12]
 80076ae:	4b63      	ldr	r3, [pc, #396]	; (800783c <mergeData+0x1dc>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	737b      	strb	r3, [r7, #13]
 80076b4:	4b62      	ldr	r3, [pc, #392]	; (8007840 <mergeData+0x1e0>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	73bb      	strb	r3, [r7, #14]
 80076ba:	4b62      	ldr	r3, [pc, #392]	; (8007844 <mergeData+0x1e4>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	73fb      	strb	r3, [r7, #15]
 80076c0:	4b61      	ldr	r3, [pc, #388]	; (8007848 <mergeData+0x1e8>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	743b      	strb	r3, [r7, #16]
 80076c6:	4b61      	ldr	r3, [pc, #388]	; (800784c <mergeData+0x1ec>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	747b      	strb	r3, [r7, #17]
 80076cc:	4b60      	ldr	r3, [pc, #384]	; (8007850 <mergeData+0x1f0>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	74bb      	strb	r3, [r7, #18]
 80076d2:	4b60      	ldr	r3, [pc, #384]	; (8007854 <mergeData+0x1f4>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	74fb      	strb	r3, [r7, #19]
 80076d8:	4b5f      	ldr	r3, [pc, #380]	; (8007858 <mergeData+0x1f8>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	753b      	strb	r3, [r7, #20]
 80076de:	4b5f      	ldr	r3, [pc, #380]	; (800785c <mergeData+0x1fc>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	757b      	strb	r3, [r7, #21]
 80076e4:	4b5e      	ldr	r3, [pc, #376]	; (8007860 <mergeData+0x200>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	75bb      	strb	r3, [r7, #22]
 80076ea:	4b5e      	ldr	r3, [pc, #376]	; (8007864 <mergeData+0x204>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	75fb      	strb	r3, [r7, #23]
 80076f0:	4b5d      	ldr	r3, [pc, #372]	; (8007868 <mergeData+0x208>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	763b      	strb	r3, [r7, #24]
 80076f6:	4b5d      	ldr	r3, [pc, #372]	; (800786c <mergeData+0x20c>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	767b      	strb	r3, [r7, #25]
 80076fc:	4b5c      	ldr	r3, [pc, #368]	; (8007870 <mergeData+0x210>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	76bb      	strb	r3, [r7, #26]
 8007702:	4b5c      	ldr	r3, [pc, #368]	; (8007874 <mergeData+0x214>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	76fb      	strb	r3, [r7, #27]
 8007708:	4b5b      	ldr	r3, [pc, #364]	; (8007878 <mergeData+0x218>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	773b      	strb	r3, [r7, #28]
 800770e:	4b5b      	ldr	r3, [pc, #364]	; (800787c <mergeData+0x21c>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	777b      	strb	r3, [r7, #29]
 8007714:	4b5a      	ldr	r3, [pc, #360]	; (8007880 <mergeData+0x220>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	77bb      	strb	r3, [r7, #30]
 800771a:	4b5a      	ldr	r3, [pc, #360]	; (8007884 <mergeData+0x224>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	4b59      	ldr	r3, [pc, #356]	; (8007888 <mergeData+0x228>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f887 3020 	strb.w	r3, [r7, #32]
 8007728:	4b58      	ldr	r3, [pc, #352]	; (800788c <mergeData+0x22c>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007730:	4b57      	ldr	r3, [pc, #348]	; (8007890 <mergeData+0x230>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007738:	4b56      	ldr	r3, [pc, #344]	; (8007894 <mergeData+0x234>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007740:	4b55      	ldr	r3, [pc, #340]	; (8007898 <mergeData+0x238>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007748:	4b54      	ldr	r3, [pc, #336]	; (800789c <mergeData+0x23c>)
 800774a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800774e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007752:	4b52      	ldr	r3, [pc, #328]	; (800789c <mergeData+0x23c>)
 8007754:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007758:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 800775c:	4b4f      	ldr	r3, [pc, #316]	; (800789c <mergeData+0x23c>)
 800775e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007766:	4b4d      	ldr	r3, [pc, #308]	; (800789c <mergeData+0x23c>)
 8007768:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800776c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007770:	4b4a      	ldr	r3, [pc, #296]	; (800789c <mergeData+0x23c>)
 8007772:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007776:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800777a:	4b48      	ldr	r3, [pc, #288]	; (800789c <mergeData+0x23c>)
 800777c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007784:	4b45      	ldr	r3, [pc, #276]	; (800789c <mergeData+0x23c>)
 8007786:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800778e:	4b43      	ldr	r3, [pc, #268]	; (800789c <mergeData+0x23c>)
 8007790:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007794:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007798:	4b40      	ldr	r3, [pc, #256]	; (800789c <mergeData+0x23c>)
 800779a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800779e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80077a2:	4b3e      	ldr	r3, [pc, #248]	; (800789c <mergeData+0x23c>)
 80077a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80077a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80077ac:	2306      	movs	r3, #6
 80077ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80077b2:	2300      	movs	r3, #0
 80077b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077b6:	e015      	b.n	80077e4 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80077b8:	1d3a      	adds	r2, r7, #4
 80077ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077bc:	4413      	add	r3, r2
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077c6:	4936      	ldr	r1, [pc, #216]	; (80078a0 <mergeData+0x240>)
 80077c8:	4618      	mov	r0, r3
 80077ca:	f004 fe75 	bl	800c4b8 <siprintf>
	    strcat(combinedString, temp);
 80077ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80077d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077d6:	4611      	mov	r1, r2
 80077d8:	4618      	mov	r0, r3
 80077da:	f004 fecf 	bl	800c57c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80077de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e0:	3301      	adds	r3, #1
 80077e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	2b2b      	cmp	r3, #43	; 0x2b
 80077e8:	d9e6      	bls.n	80077b8 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80077ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7f8 fd18 	bl	8000224 <strlen>
 80077f4:	4603      	mov	r3, r0
 80077f6:	3301      	adds	r3, #1
 80077f8:	4618      	mov	r0, r3
 80077fa:	f004 fda9 	bl	800c350 <malloc>
 80077fe:	4603      	mov	r3, r0
 8007800:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007806:	4619      	mov	r1, r3
 8007808:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800780a:	f004 ff0b 	bl	800c624 <strcpy>
	return result;
 800780e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007810:	4618      	mov	r0, r3
 8007812:	3770      	adds	r7, #112	; 0x70
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	2000022f 	.word	0x2000022f
 800781c:	20000221 	.word	0x20000221
 8007820:	20000224 	.word	0x20000224
 8007824:	20000225 	.word	0x20000225
 8007828:	20000226 	.word	0x20000226
 800782c:	2000022d 	.word	0x2000022d
 8007830:	20000227 	.word	0x20000227
 8007834:	20000228 	.word	0x20000228
 8007838:	2000022c 	.word	0x2000022c
 800783c:	20000229 	.word	0x20000229
 8007840:	20000239 	.word	0x20000239
 8007844:	2000022a 	.word	0x2000022a
 8007848:	2000023a 	.word	0x2000023a
 800784c:	2000022b 	.word	0x2000022b
 8007850:	2000023b 	.word	0x2000023b
 8007854:	2000022e 	.word	0x2000022e
 8007858:	20000230 	.word	0x20000230
 800785c:	20000231 	.word	0x20000231
 8007860:	20000232 	.word	0x20000232
 8007864:	20000233 	.word	0x20000233
 8007868:	20000234 	.word	0x20000234
 800786c:	20000235 	.word	0x20000235
 8007870:	20000236 	.word	0x20000236
 8007874:	20000237 	.word	0x20000237
 8007878:	20000238 	.word	0x20000238
 800787c:	2000023c 	.word	0x2000023c
 8007880:	2000023e 	.word	0x2000023e
 8007884:	2000021d 	.word	0x2000021d
 8007888:	2000021e 	.word	0x2000021e
 800788c:	20000000 	.word	0x20000000
 8007890:	20000001 	.word	0x20000001
 8007894:	2000021f 	.word	0x2000021f
 8007898:	20000241 	.word	0x20000241
 800789c:	20000118 	.word	0x20000118
 80078a0:	0800dc84 	.word	0x0800dc84

080078a4 <convertAndSendData>:

void convertAndSendData() {
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 80078aa:	4b16      	ldr	r3, [pc, #88]	; (8007904 <convertAndSendData+0x60>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80078b2:	4a15      	ldr	r2, [pc, #84]	; (8007908 <convertAndSendData+0x64>)
 80078b4:	2101      	movs	r1, #1
 80078b6:	2001      	movs	r0, #1
 80078b8:	f000 f9f6 	bl	8007ca8 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80078bc:	4a13      	ldr	r2, [pc, #76]	; (800790c <convertAndSendData+0x68>)
 80078be:	2101      	movs	r1, #1
 80078c0:	2002      	movs	r0, #2
 80078c2:	f000 f9f1 	bl	8007ca8 <lcd_print>
 80078c6:	e009      	b.n	80078dc <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80078c8:	4a11      	ldr	r2, [pc, #68]	; (8007910 <convertAndSendData+0x6c>)
 80078ca:	2101      	movs	r1, #1
 80078cc:	2001      	movs	r0, #1
 80078ce:	f000 f9eb 	bl	8007ca8 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80078d2:	4a10      	ldr	r2, [pc, #64]	; (8007914 <convertAndSendData+0x70>)
 80078d4:	2101      	movs	r1, #1
 80078d6:	2002      	movs	r0, #2
 80078d8:	f000 f9e6 	bl	8007ca8 <lcd_print>
	}

	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 80078dc:	f7ff fec0 	bl	8007660 <mergeData>
 80078e0:	4603      	mov	r3, r0
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <convertAndSendData+0x74>)
 80078e6:	4a0d      	ldr	r2, [pc, #52]	; (800791c <convertAndSendData+0x78>)
 80078e8:	490d      	ldr	r1, [pc, #52]	; (8007920 <convertAndSendData+0x7c>)
 80078ea:	480e      	ldr	r0, [pc, #56]	; (8007924 <convertAndSendData+0x80>)
 80078ec:	f7f9 f82c 	bl	8000948 <sendMachineData>

	HAL_Delay(500);
 80078f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078f4:	f000 ff2e 	bl	8008754 <HAL_Delay>
	lcd_clear();
 80078f8:	f000 fa02 	bl	8007d00 <lcd_clear>
}
 80078fc:	bf00      	nop
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000241 	.word	0x20000241
 8007908:	0800dc88 	.word	0x0800dc88
 800790c:	0800dc9c 	.word	0x0800dc9c
 8007910:	0800dcb0 	.word	0x0800dcb0
 8007914:	0800dcc4 	.word	0x0800dcc4
 8007918:	200001b0 	.word	0x200001b0
 800791c:	2000019c 	.word	0x2000019c
 8007920:	20000190 	.word	0x20000190
 8007924:	20000444 	.word	0x20000444

08007928 <iotSetup>:

void iotSetup() {
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 800792c:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <iotSetup+0x40>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d017      	beq.n	8007964 <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007934:	480d      	ldr	r0, [pc, #52]	; (800796c <iotSetup+0x44>)
 8007936:	f7f8 fc75 	bl	8000224 <strlen>
 800793a:	4603      	mov	r3, r0
 800793c:	2b0c      	cmp	r3, #12
 800793e:	d001      	beq.n	8007944 <iotSetup+0x1c>
			takeMachineID();
 8007940:	f7ff f9ce 	bl	8006ce0 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007944:	480a      	ldr	r0, [pc, #40]	; (8007970 <iotSetup+0x48>)
 8007946:	f7f8 fc6d 	bl	8000224 <strlen>
 800794a:	4603      	mov	r3, r0
 800794c:	2b01      	cmp	r3, #1
 800794e:	d801      	bhi.n	8007954 <iotSetup+0x2c>
			takeWifiSSID();
 8007950:	f7ff fb60 	bl	8007014 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007954:	4807      	ldr	r0, [pc, #28]	; (8007974 <iotSetup+0x4c>)
 8007956:	f7f8 fc65 	bl	8000224 <strlen>
 800795a:	4603      	mov	r3, r0
 800795c:	2b01      	cmp	r3, #1
 800795e:	d801      	bhi.n	8007964 <iotSetup+0x3c>
			takeWifiPass();
 8007960:	f7ff fcf8 	bl	8007354 <takeWifiPass>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
	HAL_Delay(500);
	convertAndSendData();*/
}
 8007964:	bf00      	nop
 8007966:	bd80      	pop	{r7, pc}
 8007968:	2000023f 	.word	0x2000023f
 800796c:	20000190 	.word	0x20000190
 8007970:	2000019c 	.word	0x2000019c
 8007974:	200001b0 	.word	0x200001b0

08007978 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af02      	add	r7, sp, #8
 800797e:	4603      	mov	r3, r0
 8007980:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	f023 030f 	bic.w	r3, r3, #15
 8007988:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007990:	7b7b      	ldrb	r3, [r7, #13]
 8007992:	f043 030c 	orr.w	r3, r3, #12
 8007996:	b2db      	uxtb	r3, r3
 8007998:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800799a:	7b7b      	ldrb	r3, [r7, #13]
 800799c:	f043 0308 	orr.w	r3, r3, #8
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80079a4:	7b3b      	ldrb	r3, [r7, #12]
 80079a6:	f043 030c 	orr.w	r3, r3, #12
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80079ae:	7b3b      	ldrb	r3, [r7, #12]
 80079b0:	f043 0308 	orr.w	r3, r3, #8
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079b8:	bf00      	nop
 80079ba:	4825      	ldr	r0, [pc, #148]	; (8007a50 <lcd_send_cmd+0xd8>)
 80079bc:	f002 fac3 	bl	8009f46 <HAL_I2C_GetError>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d0f9      	beq.n	80079ba <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80079c6:	bf00      	nop
 80079c8:	4821      	ldr	r0, [pc, #132]	; (8007a50 <lcd_send_cmd+0xd8>)
 80079ca:	f002 faaf 	bl	8009f2c <HAL_I2C_GetState>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d1f9      	bne.n	80079c8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80079d4:	4b1f      	ldr	r3, [pc, #124]	; (8007a54 <lcd_send_cmd+0xdc>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d116      	bne.n	8007a0a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]
 80079e0:	e00f      	b.n	8007a02 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	3310      	adds	r3, #16
 80079e6:	443b      	add	r3, r7
 80079e8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	f022 0208 	bic.w	r2, r2, #8
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	3310      	adds	r3, #16
 80079f6:	443b      	add	r3, r7
 80079f8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	3301      	adds	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d9ec      	bls.n	80079e2 <lcd_send_cmd+0x6a>
 8007a08:	e015      	b.n	8007a36 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73bb      	strb	r3, [r7, #14]
 8007a0e:	e00f      	b.n	8007a30 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	3310      	adds	r3, #16
 8007a14:	443b      	add	r3, r7
 8007a16:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	f042 0208 	orr.w	r2, r2, #8
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	3310      	adds	r3, #16
 8007a24:	443b      	add	r3, r7
 8007a26:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	73bb      	strb	r3, [r7, #14]
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d9ec      	bls.n	8007a10 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a36:	f107 0208 	add.w	r2, r7, #8
 8007a3a:	2364      	movs	r3, #100	; 0x64
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	2304      	movs	r3, #4
 8007a40:	214e      	movs	r1, #78	; 0x4e
 8007a42:	4803      	ldr	r0, [pc, #12]	; (8007a50 <lcd_send_cmd+0xd8>)
 8007a44:	f001 fe12 	bl	800966c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	200003a8 	.word	0x200003a8
 8007a54:	2000037e 	.word	0x2000037e

08007a58 <lcd_send_data>:

void lcd_send_data (char data) {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	4603      	mov	r3, r0
 8007a60:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	f023 030f 	bic.w	r3, r3, #15
 8007a68:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007a70:	7b7b      	ldrb	r3, [r7, #13]
 8007a72:	f043 030d 	orr.w	r3, r3, #13
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007a7a:	7b7b      	ldrb	r3, [r7, #13]
 8007a7c:	f043 0309 	orr.w	r3, r3, #9
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007a84:	7b3b      	ldrb	r3, [r7, #12]
 8007a86:	f043 030d 	orr.w	r3, r3, #13
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007a8e:	7b3b      	ldrb	r3, [r7, #12]
 8007a90:	f043 0309 	orr.w	r3, r3, #9
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a98:	bf00      	nop
 8007a9a:	4825      	ldr	r0, [pc, #148]	; (8007b30 <lcd_send_data+0xd8>)
 8007a9c:	f002 fa53 	bl	8009f46 <HAL_I2C_GetError>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d0f9      	beq.n	8007a9a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007aa6:	bf00      	nop
 8007aa8:	4821      	ldr	r0, [pc, #132]	; (8007b30 <lcd_send_data+0xd8>)
 8007aaa:	f002 fa3f 	bl	8009f2c <HAL_I2C_GetState>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b20      	cmp	r3, #32
 8007ab2:	d1f9      	bne.n	8007aa8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007ab4:	4b1f      	ldr	r3, [pc, #124]	; (8007b34 <lcd_send_data+0xdc>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d116      	bne.n	8007aea <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]
 8007ac0:	e00f      	b.n	8007ae2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	3310      	adds	r3, #16
 8007ac6:	443b      	add	r3, r7
 8007ac8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	f022 0208 	bic.w	r2, r2, #8
 8007ad2:	b2d2      	uxtb	r2, r2
 8007ad4:	3310      	adds	r3, #16
 8007ad6:	443b      	add	r3, r7
 8007ad8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d9ec      	bls.n	8007ac2 <lcd_send_data+0x6a>
 8007ae8:	e015      	b.n	8007b16 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007aea:	2300      	movs	r3, #0
 8007aec:	73bb      	strb	r3, [r7, #14]
 8007aee:	e00f      	b.n	8007b10 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	3310      	adds	r3, #16
 8007af4:	443b      	add	r3, r7
 8007af6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	f042 0208 	orr.w	r2, r2, #8
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	3310      	adds	r3, #16
 8007b04:	443b      	add	r3, r7
 8007b06:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	73bb      	strb	r3, [r7, #14]
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d9ec      	bls.n	8007af0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b16:	f107 0208 	add.w	r2, r7, #8
 8007b1a:	2364      	movs	r3, #100	; 0x64
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	2304      	movs	r3, #4
 8007b20:	214e      	movs	r1, #78	; 0x4e
 8007b22:	4803      	ldr	r0, [pc, #12]	; (8007b30 <lcd_send_data+0xd8>)
 8007b24:	f001 fda2 	bl	800966c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	200003a8 	.word	0x200003a8
 8007b34:	2000037e 	.word	0x2000037e

08007b38 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007b40:	e006      	b.n	8007b50 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff ff84 	bl	8007a58 <lcd_send_data>
	while (*str) {
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1f4      	bne.n	8007b42 <lcd_send_string+0xa>
	}
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	f023 030f 	bic.w	r3, r3, #15
 8007b74:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007b7c:	7b7b      	ldrb	r3, [r7, #13]
 8007b7e:	f043 030d 	orr.w	r3, r3, #13
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007b86:	7b7b      	ldrb	r3, [r7, #13]
 8007b88:	f043 0309 	orr.w	r3, r3, #9
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007b90:	7b3b      	ldrb	r3, [r7, #12]
 8007b92:	f043 030d 	orr.w	r3, r3, #13
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007b9a:	7b3b      	ldrb	r3, [r7, #12]
 8007b9c:	f043 0309 	orr.w	r3, r3, #9
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ba4:	bf00      	nop
 8007ba6:	4825      	ldr	r0, [pc, #148]	; (8007c3c <lcd_send_char+0xd8>)
 8007ba8:	f002 f9cd 	bl	8009f46 <HAL_I2C_GetError>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d0f9      	beq.n	8007ba6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bb2:	bf00      	nop
 8007bb4:	4821      	ldr	r0, [pc, #132]	; (8007c3c <lcd_send_char+0xd8>)
 8007bb6:	f002 f9b9 	bl	8009f2c <HAL_I2C_GetState>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d1f9      	bne.n	8007bb4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007bc0:	4b1f      	ldr	r3, [pc, #124]	; (8007c40 <lcd_send_char+0xdc>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d116      	bne.n	8007bf6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73fb      	strb	r3, [r7, #15]
 8007bcc:	e00f      	b.n	8007bee <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	3310      	adds	r3, #16
 8007bd2:	443b      	add	r3, r7
 8007bd4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	f022 0208 	bic.w	r2, r2, #8
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	3310      	adds	r3, #16
 8007be2:	443b      	add	r3, r7
 8007be4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	3301      	adds	r3, #1
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d9ec      	bls.n	8007bce <lcd_send_char+0x6a>
 8007bf4:	e015      	b.n	8007c22 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73bb      	strb	r3, [r7, #14]
 8007bfa:	e00f      	b.n	8007c1c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	3310      	adds	r3, #16
 8007c00:	443b      	add	r3, r7
 8007c02:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	f042 0208 	orr.w	r2, r2, #8
 8007c0c:	b2d2      	uxtb	r2, r2
 8007c0e:	3310      	adds	r3, #16
 8007c10:	443b      	add	r3, r7
 8007c12:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	73bb      	strb	r3, [r7, #14]
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d9ec      	bls.n	8007bfc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007c22:	f107 0208 	add.w	r2, r7, #8
 8007c26:	2364      	movs	r3, #100	; 0x64
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	2304      	movs	r3, #4
 8007c2c:	214e      	movs	r1, #78	; 0x4e
 8007c2e:	4803      	ldr	r0, [pc, #12]	; (8007c3c <lcd_send_char+0xd8>)
 8007c30:	f001 fd1c 	bl	800966c <HAL_I2C_Master_Transmit>
}
 8007c34:	bf00      	nop
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200003a8 	.word	0x200003a8
 8007c40:	2000037e 	.word	0x2000037e

08007c44 <lcd_init>:

void lcd_init (void) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007c48:	2002      	movs	r0, #2
 8007c4a:	f7ff fe95 	bl	8007978 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007c4e:	2028      	movs	r0, #40	; 0x28
 8007c50:	f7ff fe92 	bl	8007978 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007c54:	200c      	movs	r0, #12
 8007c56:	f7ff fe8f 	bl	8007978 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007c5a:	2080      	movs	r0, #128	; 0x80
 8007c5c:	f7ff fe8c 	bl	8007978 <lcd_send_cmd>
	lcd_backlight(1);
 8007c60:	2001      	movs	r0, #1
 8007c62:	f000 f86d 	bl	8007d40 <lcd_backlight>
}
 8007c66:	bf00      	nop
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	4603      	mov	r3, r0
 8007c72:	460a      	mov	r2, r1
 8007c74:	71fb      	strb	r3, [r7, #7]
 8007c76:	4613      	mov	r3, r2
 8007c78:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d106      	bne.n	8007c8e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007c80:	79bb      	ldrb	r3, [r7, #6]
 8007c82:	337f      	adds	r3, #127	; 0x7f
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff fe76 	bl	8007978 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007c8c:	e008      	b.n	8007ca0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d105      	bne.n	8007ca0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007c94:	79bb      	ldrb	r3, [r7, #6]
 8007c96:	3b41      	subs	r3, #65	; 0x41
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff fe6c 	bl	8007978 <lcd_send_cmd>
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	603a      	str	r2, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007cb8:	79ba      	ldrb	r2, [r7, #6]
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff ffd3 	bl	8007c6a <lcd_gotoxy>
	lcd_send_string(str);
 8007cc4:	6838      	ldr	r0, [r7, #0]
 8007cc6:	f7ff ff37 	bl	8007b38 <lcd_send_string>
}
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	4603      	mov	r3, r0
 8007cda:	71fb      	strb	r3, [r7, #7]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	71bb      	strb	r3, [r7, #6]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007ce4:	79ba      	ldrb	r2, [r7, #6]
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	4611      	mov	r1, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff ffbd 	bl	8007c6a <lcd_gotoxy>
    lcd_send_char(ch);
 8007cf0:	797b      	ldrb	r3, [r7, #5]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff ff36 	bl	8007b64 <lcd_send_char>
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <lcd_clear>:

void lcd_clear(void) {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007d04:	2001      	movs	r0, #1
 8007d06:	f7ff fe37 	bl	8007978 <lcd_send_cmd>
    HAL_Delay(2);
 8007d0a:	2002      	movs	r0, #2
 8007d0c:	f000 fd22 	bl	8008754 <HAL_Delay>
}
 8007d10:	bf00      	nop
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	460a      	mov	r2, r1
 8007d1e:	71fb      	strb	r3, [r7, #7]
 8007d20:	4613      	mov	r3, r2
 8007d22:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007d24:	79ba      	ldrb	r2, [r7, #6]
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff ff9d 	bl	8007c6a <lcd_gotoxy>

    lcd_send_char(' ');
 8007d30:	2020      	movs	r0, #32
 8007d32:	f7ff ff17 	bl	8007b64 <lcd_send_char>
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007d4a:	4a05      	ldr	r2, [pc, #20]	; (8007d60 <lcd_backlight+0x20>)
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007d50:	2000      	movs	r0, #0
 8007d52:	f7ff fe11 	bl	8007978 <lcd_send_cmd>
}
 8007d56:	bf00      	nop
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	2000037e 	.word	0x2000037e

08007d64 <lcd_cursor>:

void lcd_cursor(int state) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d106      	bne.n	8007d80 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007d72:	200e      	movs	r0, #14
 8007d74:	f7ff fe00 	bl	8007978 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007d78:	200f      	movs	r0, #15
 8007d7a:	f7ff fdfd 	bl	8007978 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007d7e:	e002      	b.n	8007d86 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007d80:	200c      	movs	r0, #12
 8007d82:	f7ff fdf9 	bl	8007978 <lcd_send_cmd>
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	4a03      	ldr	r2, [pc, #12]	; (8007dac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007da0:	6013      	str	r3, [r2, #0]
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr
 8007dac:	200001fc 	.word	0x200001fc

08007db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007db4:	f000 fc6c 	bl	8008690 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007db8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dbc:	f000 fcca 	bl	8008754 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007dc0:	f000 f89c 	bl	8007efc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007dc4:	f000 f9be 	bl	8008144 <MX_GPIO_Init>
  MX_CAN_Init();
 8007dc8:	f000 f8de 	bl	8007f88 <MX_CAN_Init>
  MX_I2C1_Init();
 8007dcc:	f000 f910 	bl	8007ff0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007dd0:	f000 f93c 	bl	800804c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007dd4:	f000 f98c 	bl	80080f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007dd8:	2201      	movs	r2, #1
 8007dda:	2140      	movs	r1, #64	; 0x40
 8007ddc:	483e      	ldr	r0, [pc, #248]	; (8007ed8 <main+0x128>)
 8007dde:	f001 faa0 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007de2:	2201      	movs	r2, #1
 8007de4:	2180      	movs	r1, #128	; 0x80
 8007de6:	483c      	ldr	r0, [pc, #240]	; (8007ed8 <main+0x128>)
 8007de8:	f001 fa9b 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007dec:	200a      	movs	r0, #10
 8007dee:	f000 fcb1 	bl	8008754 <HAL_Delay>
  lcd_init();
 8007df2:	f7ff ff27 	bl	8007c44 <lcd_init>
  HAL_Delay(10);
 8007df6:	200a      	movs	r0, #10
 8007df8:	f000 fcac 	bl	8008754 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007dfc:	4837      	ldr	r0, [pc, #220]	; (8007edc <main+0x12c>)
 8007dfe:	f003 f943 	bl	800b088 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e02:	bf00      	nop
 8007e04:	4836      	ldr	r0, [pc, #216]	; (8007ee0 <main+0x130>)
 8007e06:	f002 f89e 	bl	8009f46 <HAL_I2C_GetError>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d0f9      	beq.n	8007e04 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e10:	bf00      	nop
 8007e12:	4833      	ldr	r0, [pc, #204]	; (8007ee0 <main+0x130>)
 8007e14:	f002 f88a 	bl	8009f2c <HAL_I2C_GetState>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d1f9      	bne.n	8007e12 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e24:	482c      	ldr	r0, [pc, #176]	; (8007ed8 <main+0x128>)
 8007e26:	f001 fa7c 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e30:	4829      	ldr	r0, [pc, #164]	; (8007ed8 <main+0x128>)
 8007e32:	f001 fa76 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e36:	2200      	movs	r2, #0
 8007e38:	2104      	movs	r1, #4
 8007e3a:	4827      	ldr	r0, [pc, #156]	; (8007ed8 <main+0x128>)
 8007e3c:	f001 fa71 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e40:	2200      	movs	r2, #0
 8007e42:	2102      	movs	r1, #2
 8007e44:	4824      	ldr	r0, [pc, #144]	; (8007ed8 <main+0x128>)
 8007e46:	f001 fa6c 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	4822      	ldr	r0, [pc, #136]	; (8007ed8 <main+0x128>)
 8007e50:	f001 fa67 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e54:	2200      	movs	r2, #0
 8007e56:	2120      	movs	r1, #32
 8007e58:	4822      	ldr	r0, [pc, #136]	; (8007ee4 <main+0x134>)
 8007e5a:	f001 fa62 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2110      	movs	r1, #16
 8007e62:	4820      	ldr	r0, [pc, #128]	; (8007ee4 <main+0x134>)
 8007e64:	f001 fa5d 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2180      	movs	r1, #128	; 0x80
 8007e6c:	481e      	ldr	r0, [pc, #120]	; (8007ee8 <main+0x138>)
 8007e6e:	f001 fa58 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e72:	2200      	movs	r2, #0
 8007e74:	2140      	movs	r1, #64	; 0x40
 8007e76:	481c      	ldr	r0, [pc, #112]	; (8007ee8 <main+0x138>)
 8007e78:	f001 fa53 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2120      	movs	r1, #32
 8007e80:	4819      	ldr	r0, [pc, #100]	; (8007ee8 <main+0x138>)
 8007e82:	f001 fa4e 	bl	8009322 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007e86:	2200      	movs	r2, #0
 8007e88:	2110      	movs	r1, #16
 8007e8a:	4817      	ldr	r0, [pc, #92]	; (8007ee8 <main+0x138>)
 8007e8c:	f001 fa49 	bl	8009322 <HAL_GPIO_WritePin>

  i2cTest();
 8007e90:	f7f8 ff48 	bl	8000d24 <i2cTest>
  HAL_Delay(100);
 8007e94:	2064      	movs	r0, #100	; 0x64
 8007e96:	f000 fc5d 	bl	8008754 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007e9a:	4a14      	ldr	r2, [pc, #80]	; (8007eec <main+0x13c>)
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	f7ff ff02 	bl	8007ca8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007ea4:	4a12      	ldr	r2, [pc, #72]	; (8007ef0 <main+0x140>)
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	2002      	movs	r0, #2
 8007eaa:	f7ff fefd 	bl	8007ca8 <lcd_print>
  HAL_Delay(1000);
 8007eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007eb2:	f000 fc4f 	bl	8008754 <HAL_Delay>
  lcd_clear();
 8007eb6:	f7ff ff23 	bl	8007d00 <lcd_clear>

  eepromKontrol();
 8007eba:	f7f8 f9bb 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007ebe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ec2:	f000 fc47 	bl	8008754 <HAL_Delay>

  backLightTimer = millis;
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <main+0x144>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a0b      	ldr	r2, [pc, #44]	; (8007ef8 <main+0x148>)
 8007ecc:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007ece:	f7ff fd2b 	bl	8007928 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007ed2:	f7fe fd6d 	bl	80069b0 <mainLoop>
 8007ed6:	e7fc      	b.n	8007ed2 <main+0x122>
 8007ed8:	40010c00 	.word	0x40010c00
 8007edc:	200003fc 	.word	0x200003fc
 8007ee0:	200003a8 	.word	0x200003a8
 8007ee4:	40011000 	.word	0x40011000
 8007ee8:	40010800 	.word	0x40010800
 8007eec:	0800dcd8 	.word	0x0800dcd8
 8007ef0:	0800dcec 	.word	0x0800dcec
 8007ef4:	200001fc 	.word	0x200001fc
 8007ef8:	20000218 	.word	0x20000218

08007efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b090      	sub	sp, #64	; 0x40
 8007f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f02:	f107 0318 	add.w	r3, r7, #24
 8007f06:	2228      	movs	r2, #40	; 0x28
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f004 fb45 	bl	800c59a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f10:	1d3b      	adds	r3, r7, #4
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	605a      	str	r2, [r3, #4]
 8007f18:	609a      	str	r2, [r3, #8]
 8007f1a:	60da      	str	r2, [r3, #12]
 8007f1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f30:	2302      	movs	r3, #2
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f40:	f107 0318 	add.w	r3, r7, #24
 8007f44:	4618      	mov	r0, r3
 8007f46:	f002 fc3f 	bl	800a7c8 <HAL_RCC_OscConfig>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007f50:	f000 f9a2 	bl	8008298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f54:	230f      	movs	r3, #15
 8007f56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f66:	2300      	movs	r3, #0
 8007f68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f6a:	1d3b      	adds	r3, r7, #4
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f002 feac 	bl	800accc <HAL_RCC_ClockConfig>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007f7a:	f000 f98d 	bl	8008298 <Error_Handler>
  }
}
 8007f7e:	bf00      	nop
 8007f80:	3740      	adds	r7, #64	; 0x40
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007f8c:	4b16      	ldr	r3, [pc, #88]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007f8e:	4a17      	ldr	r2, [pc, #92]	; (8007fec <MX_CAN_Init+0x64>)
 8007f90:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007f92:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007f94:	2210      	movs	r2, #16
 8007f96:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007f9e:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007fa4:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007faa:	4b0f      	ldr	r3, [pc, #60]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007fb0:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007fc8:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007fce:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007fd4:	4804      	ldr	r0, [pc, #16]	; (8007fe8 <MX_CAN_Init+0x60>)
 8007fd6:	f000 fbe1 	bl	800879c <HAL_CAN_Init>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007fe0:	f000 f95a 	bl	8008298 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007fe4:	bf00      	nop
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20000380 	.word	0x20000380
 8007fec:	40006400 	.word	0x40006400

08007ff0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007ff4:	4b12      	ldr	r3, [pc, #72]	; (8008040 <MX_I2C1_Init+0x50>)
 8007ff6:	4a13      	ldr	r2, [pc, #76]	; (8008044 <MX_I2C1_Init+0x54>)
 8007ff8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007ffa:	4b11      	ldr	r3, [pc, #68]	; (8008040 <MX_I2C1_Init+0x50>)
 8007ffc:	4a12      	ldr	r2, [pc, #72]	; (8008048 <MX_I2C1_Init+0x58>)
 8007ffe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008000:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <MX_I2C1_Init+0x50>)
 8008002:	2200      	movs	r2, #0
 8008004:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008006:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <MX_I2C1_Init+0x50>)
 8008008:	2200      	movs	r2, #0
 800800a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800800c:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <MX_I2C1_Init+0x50>)
 800800e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008012:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008014:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <MX_I2C1_Init+0x50>)
 8008016:	2200      	movs	r2, #0
 8008018:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800801a:	4b09      	ldr	r3, [pc, #36]	; (8008040 <MX_I2C1_Init+0x50>)
 800801c:	2200      	movs	r2, #0
 800801e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008020:	4b07      	ldr	r3, [pc, #28]	; (8008040 <MX_I2C1_Init+0x50>)
 8008022:	2200      	movs	r2, #0
 8008024:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008026:	4b06      	ldr	r3, [pc, #24]	; (8008040 <MX_I2C1_Init+0x50>)
 8008028:	2200      	movs	r2, #0
 800802a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800802c:	4804      	ldr	r0, [pc, #16]	; (8008040 <MX_I2C1_Init+0x50>)
 800802e:	f001 f9a9 	bl	8009384 <HAL_I2C_Init>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008038:	f000 f92e 	bl	8008298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800803c:	bf00      	nop
 800803e:	bd80      	pop	{r7, pc}
 8008040:	200003a8 	.word	0x200003a8
 8008044:	40005400 	.word	0x40005400
 8008048:	00061a80 	.word	0x00061a80

0800804c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008052:	f107 0308 	add.w	r3, r7, #8
 8008056:	2200      	movs	r2, #0
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	605a      	str	r2, [r3, #4]
 800805c:	609a      	str	r2, [r3, #8]
 800805e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008060:	463b      	mov	r3, r7
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008068:	4b1f      	ldr	r3, [pc, #124]	; (80080e8 <MX_TIM1_Init+0x9c>)
 800806a:	4a20      	ldr	r2, [pc, #128]	; (80080ec <MX_TIM1_Init+0xa0>)
 800806c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800806e:	4b1e      	ldr	r3, [pc, #120]	; (80080e8 <MX_TIM1_Init+0x9c>)
 8008070:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008074:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008076:	4b1c      	ldr	r3, [pc, #112]	; (80080e8 <MX_TIM1_Init+0x9c>)
 8008078:	2200      	movs	r2, #0
 800807a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800807c:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <MX_TIM1_Init+0x9c>)
 800807e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008082:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008084:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <MX_TIM1_Init+0x9c>)
 8008086:	2200      	movs	r2, #0
 8008088:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800808a:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <MX_TIM1_Init+0x9c>)
 800808c:	2200      	movs	r2, #0
 800808e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008090:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <MX_TIM1_Init+0x9c>)
 8008092:	2200      	movs	r2, #0
 8008094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008096:	4814      	ldr	r0, [pc, #80]	; (80080e8 <MX_TIM1_Init+0x9c>)
 8008098:	f002 ffa6 	bl	800afe8 <HAL_TIM_Base_Init>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80080a2:	f000 f8f9 	bl	8008298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80080ac:	f107 0308 	add.w	r3, r7, #8
 80080b0:	4619      	mov	r1, r3
 80080b2:	480d      	ldr	r0, [pc, #52]	; (80080e8 <MX_TIM1_Init+0x9c>)
 80080b4:	f003 f950 	bl	800b358 <HAL_TIM_ConfigClockSource>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80080be:	f000 f8eb 	bl	8008298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080c2:	2300      	movs	r3, #0
 80080c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080c6:	2300      	movs	r3, #0
 80080c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80080ca:	463b      	mov	r3, r7
 80080cc:	4619      	mov	r1, r3
 80080ce:	4806      	ldr	r0, [pc, #24]	; (80080e8 <MX_TIM1_Init+0x9c>)
 80080d0:	f003 fb3e 	bl	800b750 <HAL_TIMEx_MasterConfigSynchronization>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80080da:	f000 f8dd 	bl	8008298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80080de:	bf00      	nop
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200003fc 	.word	0x200003fc
 80080ec:	40012c00 	.word	0x40012c00

080080f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80080f4:	4b11      	ldr	r3, [pc, #68]	; (800813c <MX_USART1_UART_Init+0x4c>)
 80080f6:	4a12      	ldr	r2, [pc, #72]	; (8008140 <MX_USART1_UART_Init+0x50>)
 80080f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80080fa:	4b10      	ldr	r3, [pc, #64]	; (800813c <MX_USART1_UART_Init+0x4c>)
 80080fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008102:	4b0e      	ldr	r3, [pc, #56]	; (800813c <MX_USART1_UART_Init+0x4c>)
 8008104:	2200      	movs	r2, #0
 8008106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008108:	4b0c      	ldr	r3, [pc, #48]	; (800813c <MX_USART1_UART_Init+0x4c>)
 800810a:	2200      	movs	r2, #0
 800810c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800810e:	4b0b      	ldr	r3, [pc, #44]	; (800813c <MX_USART1_UART_Init+0x4c>)
 8008110:	2200      	movs	r2, #0
 8008112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008114:	4b09      	ldr	r3, [pc, #36]	; (800813c <MX_USART1_UART_Init+0x4c>)
 8008116:	220c      	movs	r2, #12
 8008118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800811a:	4b08      	ldr	r3, [pc, #32]	; (800813c <MX_USART1_UART_Init+0x4c>)
 800811c:	2200      	movs	r2, #0
 800811e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008120:	4b06      	ldr	r3, [pc, #24]	; (800813c <MX_USART1_UART_Init+0x4c>)
 8008122:	2200      	movs	r2, #0
 8008124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008126:	4805      	ldr	r0, [pc, #20]	; (800813c <MX_USART1_UART_Init+0x4c>)
 8008128:	f003 fb90 	bl	800b84c <HAL_UART_Init>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008132:	f000 f8b1 	bl	8008298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008136:	bf00      	nop
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000444 	.word	0x20000444
 8008140:	40013800 	.word	0x40013800

08008144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800814a:	f107 0310 	add.w	r3, r7, #16
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	605a      	str	r2, [r3, #4]
 8008154:	609a      	str	r2, [r3, #8]
 8008156:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008158:	4b4b      	ldr	r3, [pc, #300]	; (8008288 <MX_GPIO_Init+0x144>)
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	4a4a      	ldr	r2, [pc, #296]	; (8008288 <MX_GPIO_Init+0x144>)
 800815e:	f043 0310 	orr.w	r3, r3, #16
 8008162:	6193      	str	r3, [r2, #24]
 8008164:	4b48      	ldr	r3, [pc, #288]	; (8008288 <MX_GPIO_Init+0x144>)
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f003 0310 	and.w	r3, r3, #16
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008170:	4b45      	ldr	r3, [pc, #276]	; (8008288 <MX_GPIO_Init+0x144>)
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	4a44      	ldr	r2, [pc, #272]	; (8008288 <MX_GPIO_Init+0x144>)
 8008176:	f043 0320 	orr.w	r3, r3, #32
 800817a:	6193      	str	r3, [r2, #24]
 800817c:	4b42      	ldr	r3, [pc, #264]	; (8008288 <MX_GPIO_Init+0x144>)
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008188:	4b3f      	ldr	r3, [pc, #252]	; (8008288 <MX_GPIO_Init+0x144>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	4a3e      	ldr	r2, [pc, #248]	; (8008288 <MX_GPIO_Init+0x144>)
 800818e:	f043 0304 	orr.w	r3, r3, #4
 8008192:	6193      	str	r3, [r2, #24]
 8008194:	4b3c      	ldr	r3, [pc, #240]	; (8008288 <MX_GPIO_Init+0x144>)
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	607b      	str	r3, [r7, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081a0:	4b39      	ldr	r3, [pc, #228]	; (8008288 <MX_GPIO_Init+0x144>)
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4a38      	ldr	r2, [pc, #224]	; (8008288 <MX_GPIO_Init+0x144>)
 80081a6:	f043 0308 	orr.w	r3, r3, #8
 80081aa:	6193      	str	r3, [r2, #24]
 80081ac:	4b36      	ldr	r3, [pc, #216]	; (8008288 <MX_GPIO_Init+0x144>)
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	603b      	str	r3, [r7, #0]
 80081b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80081b8:	2200      	movs	r2, #0
 80081ba:	21f0      	movs	r1, #240	; 0xf0
 80081bc:	4833      	ldr	r0, [pc, #204]	; (800828c <MX_GPIO_Init+0x148>)
 80081be:	f001 f8b0 	bl	8009322 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80081c2:	2200      	movs	r2, #0
 80081c4:	f241 0130 	movw	r1, #4144	; 0x1030
 80081c8:	4831      	ldr	r0, [pc, #196]	; (8008290 <MX_GPIO_Init+0x14c>)
 80081ca:	f001 f8aa 	bl	8009322 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80081ce:	2200      	movs	r2, #0
 80081d0:	f640 4107 	movw	r1, #3079	; 0xc07
 80081d4:	482f      	ldr	r0, [pc, #188]	; (8008294 <MX_GPIO_Init+0x150>)
 80081d6:	f001 f8a4 	bl	8009322 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80081da:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80081de:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e4:	2300      	movs	r3, #0
 80081e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081e8:	f107 0310 	add.w	r3, r7, #16
 80081ec:	4619      	mov	r1, r3
 80081ee:	4828      	ldr	r0, [pc, #160]	; (8008290 <MX_GPIO_Init+0x14c>)
 80081f0:	f000 fe20 	bl	8008e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80081f4:	f248 130f 	movw	r3, #33039	; 0x810f
 80081f8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081fa:	2300      	movs	r3, #0
 80081fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008202:	f107 0310 	add.w	r3, r7, #16
 8008206:	4619      	mov	r1, r3
 8008208:	4820      	ldr	r0, [pc, #128]	; (800828c <MX_GPIO_Init+0x148>)
 800820a:	f000 fe13 	bl	8008e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800820e:	23f0      	movs	r3, #240	; 0xf0
 8008210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008212:	2301      	movs	r3, #1
 8008214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008216:	2300      	movs	r3, #0
 8008218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800821a:	2302      	movs	r3, #2
 800821c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800821e:	f107 0310 	add.w	r3, r7, #16
 8008222:	4619      	mov	r1, r3
 8008224:	4819      	ldr	r0, [pc, #100]	; (800828c <MX_GPIO_Init+0x148>)
 8008226:	f000 fe05 	bl	8008e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800822a:	f241 0330 	movw	r3, #4144	; 0x1030
 800822e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008230:	2301      	movs	r3, #1
 8008232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008234:	2300      	movs	r3, #0
 8008236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008238:	2302      	movs	r3, #2
 800823a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800823c:	f107 0310 	add.w	r3, r7, #16
 8008240:	4619      	mov	r1, r3
 8008242:	4813      	ldr	r0, [pc, #76]	; (8008290 <MX_GPIO_Init+0x14c>)
 8008244:	f000 fdf6 	bl	8008e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008248:	f640 4307 	movw	r3, #3079	; 0xc07
 800824c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800824e:	2301      	movs	r3, #1
 8008250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008252:	2300      	movs	r3, #0
 8008254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008256:	2302      	movs	r3, #2
 8008258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800825a:	f107 0310 	add.w	r3, r7, #16
 800825e:	4619      	mov	r1, r3
 8008260:	480c      	ldr	r0, [pc, #48]	; (8008294 <MX_GPIO_Init+0x150>)
 8008262:	f000 fde7 	bl	8008e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008266:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800826a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008270:	2300      	movs	r3, #0
 8008272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008274:	f107 0310 	add.w	r3, r7, #16
 8008278:	4619      	mov	r1, r3
 800827a:	4806      	ldr	r0, [pc, #24]	; (8008294 <MX_GPIO_Init+0x150>)
 800827c:	f000 fdda 	bl	8008e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008280:	bf00      	nop
 8008282:	3720      	adds	r7, #32
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40021000 	.word	0x40021000
 800828c:	40010800 	.word	0x40010800
 8008290:	40011000 	.word	0x40011000
 8008294:	40010c00 	.word	0x40010c00

08008298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800829c:	bf00      	nop
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr

080082a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082aa:	4b15      	ldr	r3, [pc, #84]	; (8008300 <HAL_MspInit+0x5c>)
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	4a14      	ldr	r2, [pc, #80]	; (8008300 <HAL_MspInit+0x5c>)
 80082b0:	f043 0301 	orr.w	r3, r3, #1
 80082b4:	6193      	str	r3, [r2, #24]
 80082b6:	4b12      	ldr	r3, [pc, #72]	; (8008300 <HAL_MspInit+0x5c>)
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	60bb      	str	r3, [r7, #8]
 80082c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <HAL_MspInit+0x5c>)
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	4a0e      	ldr	r2, [pc, #56]	; (8008300 <HAL_MspInit+0x5c>)
 80082c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082cc:	61d3      	str	r3, [r2, #28]
 80082ce:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <HAL_MspInit+0x5c>)
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80082da:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <HAL_MspInit+0x60>)
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	4a04      	ldr	r2, [pc, #16]	; (8008304 <HAL_MspInit+0x60>)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082f6:	bf00      	nop
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr
 8008300:	40021000 	.word	0x40021000
 8008304:	40010000 	.word	0x40010000

08008308 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008310:	f107 0310 	add.w	r3, r7, #16
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	605a      	str	r2, [r3, #4]
 800831a:	609a      	str	r2, [r3, #8]
 800831c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1c      	ldr	r2, [pc, #112]	; (8008394 <HAL_CAN_MspInit+0x8c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d131      	bne.n	800838c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008328:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <HAL_CAN_MspInit+0x90>)
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	4a1a      	ldr	r2, [pc, #104]	; (8008398 <HAL_CAN_MspInit+0x90>)
 800832e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008332:	61d3      	str	r3, [r2, #28]
 8008334:	4b18      	ldr	r3, [pc, #96]	; (8008398 <HAL_CAN_MspInit+0x90>)
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008340:	4b15      	ldr	r3, [pc, #84]	; (8008398 <HAL_CAN_MspInit+0x90>)
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	4a14      	ldr	r2, [pc, #80]	; (8008398 <HAL_CAN_MspInit+0x90>)
 8008346:	f043 0304 	orr.w	r3, r3, #4
 800834a:	6193      	str	r3, [r2, #24]
 800834c:	4b12      	ldr	r3, [pc, #72]	; (8008398 <HAL_CAN_MspInit+0x90>)
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	60bb      	str	r3, [r7, #8]
 8008356:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008358:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800835c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008362:	2300      	movs	r3, #0
 8008364:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008366:	f107 0310 	add.w	r3, r7, #16
 800836a:	4619      	mov	r1, r3
 800836c:	480b      	ldr	r0, [pc, #44]	; (800839c <HAL_CAN_MspInit+0x94>)
 800836e:	f000 fd61 	bl	8008e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008378:	2302      	movs	r3, #2
 800837a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800837c:	2303      	movs	r3, #3
 800837e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008380:	f107 0310 	add.w	r3, r7, #16
 8008384:	4619      	mov	r1, r3
 8008386:	4805      	ldr	r0, [pc, #20]	; (800839c <HAL_CAN_MspInit+0x94>)
 8008388:	f000 fd54 	bl	8008e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800838c:	bf00      	nop
 800838e:	3720      	adds	r7, #32
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	40006400 	.word	0x40006400
 8008398:	40021000 	.word	0x40021000
 800839c:	40010800 	.word	0x40010800

080083a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083a8:	f107 0310 	add.w	r3, r7, #16
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	605a      	str	r2, [r3, #4]
 80083b2:	609a      	str	r2, [r3, #8]
 80083b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a15      	ldr	r2, [pc, #84]	; (8008410 <HAL_I2C_MspInit+0x70>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d123      	bne.n	8008408 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083c0:	4b14      	ldr	r3, [pc, #80]	; (8008414 <HAL_I2C_MspInit+0x74>)
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	4a13      	ldr	r2, [pc, #76]	; (8008414 <HAL_I2C_MspInit+0x74>)
 80083c6:	f043 0308 	orr.w	r3, r3, #8
 80083ca:	6193      	str	r3, [r2, #24]
 80083cc:	4b11      	ldr	r3, [pc, #68]	; (8008414 <HAL_I2C_MspInit+0x74>)
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80083d8:	23c0      	movs	r3, #192	; 0xc0
 80083da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083dc:	2312      	movs	r3, #18
 80083de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083e0:	2303      	movs	r3, #3
 80083e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083e4:	f107 0310 	add.w	r3, r7, #16
 80083e8:	4619      	mov	r1, r3
 80083ea:	480b      	ldr	r0, [pc, #44]	; (8008418 <HAL_I2C_MspInit+0x78>)
 80083ec:	f000 fd22 	bl	8008e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80083f0:	4b08      	ldr	r3, [pc, #32]	; (8008414 <HAL_I2C_MspInit+0x74>)
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	4a07      	ldr	r2, [pc, #28]	; (8008414 <HAL_I2C_MspInit+0x74>)
 80083f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083fa:	61d3      	str	r3, [r2, #28]
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <HAL_I2C_MspInit+0x74>)
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008408:	bf00      	nop
 800840a:	3720      	adds	r7, #32
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40005400 	.word	0x40005400
 8008414:	40021000 	.word	0x40021000
 8008418:	40010c00 	.word	0x40010c00

0800841c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a0a      	ldr	r2, [pc, #40]	; (8008454 <HAL_I2C_MspDeInit+0x38>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d10d      	bne.n	800844a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <HAL_I2C_MspDeInit+0x3c>)
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	4a09      	ldr	r2, [pc, #36]	; (8008458 <HAL_I2C_MspDeInit+0x3c>)
 8008434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008438:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800843a:	2140      	movs	r1, #64	; 0x40
 800843c:	4807      	ldr	r0, [pc, #28]	; (800845c <HAL_I2C_MspDeInit+0x40>)
 800843e:	f000 fe8d 	bl	800915c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008442:	2180      	movs	r1, #128	; 0x80
 8008444:	4805      	ldr	r0, [pc, #20]	; (800845c <HAL_I2C_MspDeInit+0x40>)
 8008446:	f000 fe89 	bl	800915c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	40005400 	.word	0x40005400
 8008458:	40021000 	.word	0x40021000
 800845c:	40010c00 	.word	0x40010c00

08008460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a0d      	ldr	r2, [pc, #52]	; (80084a4 <HAL_TIM_Base_MspInit+0x44>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d113      	bne.n	800849a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <HAL_TIM_Base_MspInit+0x48>)
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	4a0c      	ldr	r2, [pc, #48]	; (80084a8 <HAL_TIM_Base_MspInit+0x48>)
 8008478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800847c:	6193      	str	r3, [r2, #24]
 800847e:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <HAL_TIM_Base_MspInit+0x48>)
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800848a:	2200      	movs	r2, #0
 800848c:	2100      	movs	r1, #0
 800848e:	2019      	movs	r0, #25
 8008490:	f000 fb57 	bl	8008b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008494:	2019      	movs	r0, #25
 8008496:	f000 fb70 	bl	8008b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	40012c00 	.word	0x40012c00
 80084a8:	40021000 	.word	0x40021000

080084ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084b4:	f107 0310 	add.w	r3, r7, #16
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	605a      	str	r2, [r3, #4]
 80084be:	609a      	str	r2, [r3, #8]
 80084c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a20      	ldr	r2, [pc, #128]	; (8008548 <HAL_UART_MspInit+0x9c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d139      	bne.n	8008540 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80084cc:	4b1f      	ldr	r3, [pc, #124]	; (800854c <HAL_UART_MspInit+0xa0>)
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	4a1e      	ldr	r2, [pc, #120]	; (800854c <HAL_UART_MspInit+0xa0>)
 80084d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084d6:	6193      	str	r3, [r2, #24]
 80084d8:	4b1c      	ldr	r3, [pc, #112]	; (800854c <HAL_UART_MspInit+0xa0>)
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084e4:	4b19      	ldr	r3, [pc, #100]	; (800854c <HAL_UART_MspInit+0xa0>)
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	4a18      	ldr	r2, [pc, #96]	; (800854c <HAL_UART_MspInit+0xa0>)
 80084ea:	f043 0304 	orr.w	r3, r3, #4
 80084ee:	6193      	str	r3, [r2, #24]
 80084f0:	4b16      	ldr	r3, [pc, #88]	; (800854c <HAL_UART_MspInit+0xa0>)
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	60bb      	str	r3, [r7, #8]
 80084fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80084fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008502:	2302      	movs	r3, #2
 8008504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008506:	2303      	movs	r3, #3
 8008508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800850a:	f107 0310 	add.w	r3, r7, #16
 800850e:	4619      	mov	r1, r3
 8008510:	480f      	ldr	r0, [pc, #60]	; (8008550 <HAL_UART_MspInit+0xa4>)
 8008512:	f000 fc8f 	bl	8008e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800851a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008520:	2300      	movs	r3, #0
 8008522:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008524:	f107 0310 	add.w	r3, r7, #16
 8008528:	4619      	mov	r1, r3
 800852a:	4809      	ldr	r0, [pc, #36]	; (8008550 <HAL_UART_MspInit+0xa4>)
 800852c:	f000 fc82 	bl	8008e34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008530:	2200      	movs	r2, #0
 8008532:	2100      	movs	r1, #0
 8008534:	2025      	movs	r0, #37	; 0x25
 8008536:	f000 fb04 	bl	8008b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800853a:	2025      	movs	r0, #37	; 0x25
 800853c:	f000 fb1d 	bl	8008b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008540:	bf00      	nop
 8008542:	3720      	adds	r7, #32
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	40013800 	.word	0x40013800
 800854c:	40021000 	.word	0x40021000
 8008550:	40010800 	.word	0x40010800

08008554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008554:	b480      	push	{r7}
 8008556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008558:	e7fe      	b.n	8008558 <NMI_Handler+0x4>

0800855a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800855a:	b480      	push	{r7}
 800855c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800855e:	e7fe      	b.n	800855e <HardFault_Handler+0x4>

08008560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008564:	e7fe      	b.n	8008564 <MemManage_Handler+0x4>

08008566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008566:	b480      	push	{r7}
 8008568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800856a:	e7fe      	b.n	800856a <BusFault_Handler+0x4>

0800856c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008570:	e7fe      	b.n	8008570 <UsageFault_Handler+0x4>

08008572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008572:	b480      	push	{r7}
 8008574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008576:	bf00      	nop
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr

0800857e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800857e:	b480      	push	{r7}
 8008580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008582:	bf00      	nop
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr

0800858a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800858a:	b480      	push	{r7}
 800858c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800858e:	bf00      	nop
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr

08008596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800859a:	f000 f8bf 	bl	800871c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800859e:	bf00      	nop
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80085a8:	4802      	ldr	r0, [pc, #8]	; (80085b4 <TIM1_UP_IRQHandler+0x10>)
 80085aa:	f002 fdcd 	bl	800b148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80085ae:	bf00      	nop
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	200003fc 	.word	0x200003fc

080085b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80085bc:	4802      	ldr	r0, [pc, #8]	; (80085c8 <USART1_IRQHandler+0x10>)
 80085be:	f003 f9cb 	bl	800b958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80085c2:	bf00      	nop
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000444 	.word	0x20000444

080085cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085d4:	4a14      	ldr	r2, [pc, #80]	; (8008628 <_sbrk+0x5c>)
 80085d6:	4b15      	ldr	r3, [pc, #84]	; (800862c <_sbrk+0x60>)
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085e0:	4b13      	ldr	r3, [pc, #76]	; (8008630 <_sbrk+0x64>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085e8:	4b11      	ldr	r3, [pc, #68]	; (8008630 <_sbrk+0x64>)
 80085ea:	4a12      	ldr	r2, [pc, #72]	; (8008634 <_sbrk+0x68>)
 80085ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085ee:	4b10      	ldr	r3, [pc, #64]	; (8008630 <_sbrk+0x64>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4413      	add	r3, r2
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d207      	bcs.n	800860c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085fc:	f003 ffe6 	bl	800c5cc <__errno>
 8008600:	4603      	mov	r3, r0
 8008602:	220c      	movs	r2, #12
 8008604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800860a:	e009      	b.n	8008620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800860c:	4b08      	ldr	r3, [pc, #32]	; (8008630 <_sbrk+0x64>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008612:	4b07      	ldr	r3, [pc, #28]	; (8008630 <_sbrk+0x64>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4413      	add	r3, r2
 800861a:	4a05      	ldr	r2, [pc, #20]	; (8008630 <_sbrk+0x64>)
 800861c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800861e:	68fb      	ldr	r3, [r7, #12]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	2000c000 	.word	0x2000c000
 800862c:	00000400 	.word	0x00000400
 8008630:	2000048c 	.word	0x2000048c
 8008634:	200005e0 	.word	0x200005e0

08008638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800863c:	bf00      	nop
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr

08008644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008644:	480c      	ldr	r0, [pc, #48]	; (8008678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008646:	490d      	ldr	r1, [pc, #52]	; (800867c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008648:	4a0d      	ldr	r2, [pc, #52]	; (8008680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800864a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800864c:	e002      	b.n	8008654 <LoopCopyDataInit>

0800864e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800864e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008652:	3304      	adds	r3, #4

08008654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008658:	d3f9      	bcc.n	800864e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800865a:	4a0a      	ldr	r2, [pc, #40]	; (8008684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800865c:	4c0a      	ldr	r4, [pc, #40]	; (8008688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800865e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008660:	e001      	b.n	8008666 <LoopFillZerobss>

08008662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008664:	3204      	adds	r2, #4

08008666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008668:	d3fb      	bcc.n	8008662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800866a:	f7ff ffe5 	bl	8008638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800866e:	f003 ffb3 	bl	800c5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008672:	f7ff fb9d 	bl	8007db0 <main>
  bx lr
 8008676:	4770      	bx	lr
  ldr r0, =_sdata
 8008678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800867c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8008680:	0800dd8c 	.word	0x0800dd8c
  ldr r2, =_sbss
 8008684:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8008688:	200005dc 	.word	0x200005dc

0800868c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800868c:	e7fe      	b.n	800868c <ADC1_2_IRQHandler>
	...

08008690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008694:	4b08      	ldr	r3, [pc, #32]	; (80086b8 <HAL_Init+0x28>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a07      	ldr	r2, [pc, #28]	; (80086b8 <HAL_Init+0x28>)
 800869a:	f043 0310 	orr.w	r3, r3, #16
 800869e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086a0:	2003      	movs	r0, #3
 80086a2:	f000 fa43 	bl	8008b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80086a6:	200f      	movs	r0, #15
 80086a8:	f000 f808 	bl	80086bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80086ac:	f7ff fdfa 	bl	80082a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	40022000 	.word	0x40022000

080086bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086c4:	4b12      	ldr	r3, [pc, #72]	; (8008710 <HAL_InitTick+0x54>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	4b12      	ldr	r3, [pc, #72]	; (8008714 <HAL_InitTick+0x58>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	4619      	mov	r1, r3
 80086ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fa5b 	bl	8008b96 <HAL_SYSTICK_Config>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e00e      	b.n	8008708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b0f      	cmp	r3, #15
 80086ee:	d80a      	bhi.n	8008706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086f0:	2200      	movs	r2, #0
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086f8:	f000 fa23 	bl	8008b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80086fc:	4a06      	ldr	r2, [pc, #24]	; (8008718 <HAL_InitTick+0x5c>)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	e000      	b.n	8008708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	200000a0 	.word	0x200000a0
 8008714:	200000a8 	.word	0x200000a8
 8008718:	200000a4 	.word	0x200000a4

0800871c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <HAL_IncTick+0x1c>)
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	4b05      	ldr	r3, [pc, #20]	; (800873c <HAL_IncTick+0x20>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4413      	add	r3, r2
 800872c:	4a03      	ldr	r2, [pc, #12]	; (800873c <HAL_IncTick+0x20>)
 800872e:	6013      	str	r3, [r2, #0]
}
 8008730:	bf00      	nop
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr
 8008738:	200000a8 	.word	0x200000a8
 800873c:	20000490 	.word	0x20000490

08008740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0
  return uwTick;
 8008744:	4b02      	ldr	r3, [pc, #8]	; (8008750 <HAL_GetTick+0x10>)
 8008746:	681b      	ldr	r3, [r3, #0]
}
 8008748:	4618      	mov	r0, r3
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr
 8008750:	20000490 	.word	0x20000490

08008754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800875c:	f7ff fff0 	bl	8008740 <HAL_GetTick>
 8008760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800876c:	d005      	beq.n	800877a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800876e:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <HAL_Delay+0x44>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800877a:	bf00      	nop
 800877c:	f7ff ffe0 	bl	8008740 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	429a      	cmp	r2, r3
 800878a:	d8f7      	bhi.n	800877c <HAL_Delay+0x28>
  {
  }
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	200000a8 	.word	0x200000a8

0800879c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e0ed      	b.n	800898a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fda4 	bl	8008308 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0201 	orr.w	r2, r2, #1
 80087ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087d0:	f7ff ffb6 	bl	8008740 <HAL_GetTick>
 80087d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087d6:	e012      	b.n	80087fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80087d8:	f7ff ffb2 	bl	8008740 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	2b0a      	cmp	r3, #10
 80087e4:	d90b      	bls.n	80087fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2205      	movs	r2, #5
 80087f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e0c5      	b.n	800898a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0e5      	beq.n	80087d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 0202 	bic.w	r2, r2, #2
 800881a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800881c:	f7ff ff90 	bl	8008740 <HAL_GetTick>
 8008820:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008822:	e012      	b.n	800884a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008824:	f7ff ff8c 	bl	8008740 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b0a      	cmp	r3, #10
 8008830:	d90b      	bls.n	800884a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2205      	movs	r2, #5
 8008842:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e09f      	b.n	800898a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e5      	bne.n	8008824 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	7e1b      	ldrb	r3, [r3, #24]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d108      	bne.n	8008872 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	e007      	b.n	8008882 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008880:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	7e5b      	ldrb	r3, [r3, #25]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d108      	bne.n	800889c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	e007      	b.n	80088ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7e9b      	ldrb	r3, [r3, #26]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d108      	bne.n	80088c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0220 	orr.w	r2, r2, #32
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	e007      	b.n	80088d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 0220 	bic.w	r2, r2, #32
 80088d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7edb      	ldrb	r3, [r3, #27]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d108      	bne.n	80088f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0210 	bic.w	r2, r2, #16
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e007      	b.n	8008900 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0210 	orr.w	r2, r2, #16
 80088fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7f1b      	ldrb	r3, [r3, #28]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d108      	bne.n	800891a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0208 	orr.w	r2, r2, #8
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	e007      	b.n	800892a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0208 	bic.w	r2, r2, #8
 8008928:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	7f5b      	ldrb	r3, [r3, #29]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d108      	bne.n	8008944 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f042 0204 	orr.w	r2, r2, #4
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	e007      	b.n	8008954 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0204 	bic.w	r2, r2, #4
 8008952:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	431a      	orrs	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	ea42 0103 	orr.w	r1, r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	1e5a      	subs	r2, r3, #1
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <__NVIC_SetPriorityGrouping>:
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <__NVIC_SetPriorityGrouping+0x44>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089b0:	4013      	ands	r3, r2
 80089b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089c6:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <__NVIC_SetPriorityGrouping+0x44>)
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	60d3      	str	r3, [r2, #12]
}
 80089cc:	bf00      	nop
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	e000ed00 	.word	0xe000ed00

080089dc <__NVIC_GetPriorityGrouping>:
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089e0:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <__NVIC_GetPriorityGrouping+0x18>)
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	0a1b      	lsrs	r3, r3, #8
 80089e6:	f003 0307 	and.w	r3, r3, #7
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	e000ed00 	.word	0xe000ed00

080089f8 <__NVIC_EnableIRQ>:
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	db0b      	blt.n	8008a22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	f003 021f 	and.w	r2, r3, #31
 8008a10:	4906      	ldr	r1, [pc, #24]	; (8008a2c <__NVIC_EnableIRQ+0x34>)
 8008a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	2001      	movs	r0, #1
 8008a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8008a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr
 8008a2c:	e000e100 	.word	0xe000e100

08008a30 <__NVIC_SetPriority>:
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	6039      	str	r1, [r7, #0]
 8008a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	db0a      	blt.n	8008a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	490c      	ldr	r1, [pc, #48]	; (8008a7c <__NVIC_SetPriority+0x4c>)
 8008a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a4e:	0112      	lsls	r2, r2, #4
 8008a50:	b2d2      	uxtb	r2, r2
 8008a52:	440b      	add	r3, r1
 8008a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a58:	e00a      	b.n	8008a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	4908      	ldr	r1, [pc, #32]	; (8008a80 <__NVIC_SetPriority+0x50>)
 8008a60:	79fb      	ldrb	r3, [r7, #7]
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	3b04      	subs	r3, #4
 8008a68:	0112      	lsls	r2, r2, #4
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	440b      	add	r3, r1
 8008a6e:	761a      	strb	r2, [r3, #24]
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bc80      	pop	{r7}
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	e000e100 	.word	0xe000e100
 8008a80:	e000ed00 	.word	0xe000ed00

08008a84 <NVIC_EncodePriority>:
{
 8008a84:	b480      	push	{r7}
 8008a86:	b089      	sub	sp, #36	; 0x24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	f1c3 0307 	rsb	r3, r3, #7
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	bf28      	it	cs
 8008aa2:	2304      	movcs	r3, #4
 8008aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	2b06      	cmp	r3, #6
 8008aac:	d902      	bls.n	8008ab4 <NVIC_EncodePriority+0x30>
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	3b03      	subs	r3, #3
 8008ab2:	e000      	b.n	8008ab6 <NVIC_EncodePriority+0x32>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac2:	43da      	mvns	r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	401a      	ands	r2, r3
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad6:	43d9      	mvns	r1, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008adc:	4313      	orrs	r3, r2
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3724      	adds	r7, #36	; 0x24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr

08008ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008af8:	d301      	bcc.n	8008afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008afa:	2301      	movs	r3, #1
 8008afc:	e00f      	b.n	8008b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008afe:	4a0a      	ldr	r2, [pc, #40]	; (8008b28 <SysTick_Config+0x40>)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b06:	210f      	movs	r1, #15
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b0c:	f7ff ff90 	bl	8008a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b10:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <SysTick_Config+0x40>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b16:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <SysTick_Config+0x40>)
 8008b18:	2207      	movs	r2, #7
 8008b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	e000e010 	.word	0xe000e010

08008b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff ff2d 	bl	8008994 <__NVIC_SetPriorityGrouping>
}
 8008b3a:	bf00      	nop
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b086      	sub	sp, #24
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	4603      	mov	r3, r0
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b54:	f7ff ff42 	bl	80089dc <__NVIC_GetPriorityGrouping>
 8008b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	68b9      	ldr	r1, [r7, #8]
 8008b5e:	6978      	ldr	r0, [r7, #20]
 8008b60:	f7ff ff90 	bl	8008a84 <NVIC_EncodePriority>
 8008b64:	4602      	mov	r2, r0
 8008b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff ff5f 	bl	8008a30 <__NVIC_SetPriority>
}
 8008b72:	bf00      	nop
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	4603      	mov	r3, r0
 8008b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff ff35 	bl	80089f8 <__NVIC_EnableIRQ>
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff ffa2 	bl	8008ae8 <SysTick_Config>
 8008ba4:	4603      	mov	r3, r0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d008      	beq.n	8008bd8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2204      	movs	r2, #4
 8008bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e020      	b.n	8008c1a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 020e 	bic.w	r2, r2, #14
 8008be6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 0201 	bic.w	r2, r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c00:	2101      	movs	r1, #1
 8008c02:	fa01 f202 	lsl.w	r2, r1, r2
 8008c06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bc80      	pop	{r7}
 8008c22:	4770      	bx	lr

08008c24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d005      	beq.n	8008c48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2204      	movs	r2, #4
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	73fb      	strb	r3, [r7, #15]
 8008c46:	e0d6      	b.n	8008df6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 020e 	bic.w	r2, r2, #14
 8008c56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0201 	bic.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4b64      	ldr	r3, [pc, #400]	; (8008e00 <HAL_DMA_Abort_IT+0x1dc>)
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d958      	bls.n	8008d26 <HAL_DMA_Abort_IT+0x102>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a62      	ldr	r2, [pc, #392]	; (8008e04 <HAL_DMA_Abort_IT+0x1e0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d04f      	beq.n	8008d1e <HAL_DMA_Abort_IT+0xfa>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a61      	ldr	r2, [pc, #388]	; (8008e08 <HAL_DMA_Abort_IT+0x1e4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d048      	beq.n	8008d1a <HAL_DMA_Abort_IT+0xf6>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a5f      	ldr	r2, [pc, #380]	; (8008e0c <HAL_DMA_Abort_IT+0x1e8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d040      	beq.n	8008d14 <HAL_DMA_Abort_IT+0xf0>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a5e      	ldr	r2, [pc, #376]	; (8008e10 <HAL_DMA_Abort_IT+0x1ec>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d038      	beq.n	8008d0e <HAL_DMA_Abort_IT+0xea>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a5c      	ldr	r2, [pc, #368]	; (8008e14 <HAL_DMA_Abort_IT+0x1f0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d030      	beq.n	8008d08 <HAL_DMA_Abort_IT+0xe4>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a5b      	ldr	r2, [pc, #364]	; (8008e18 <HAL_DMA_Abort_IT+0x1f4>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d028      	beq.n	8008d02 <HAL_DMA_Abort_IT+0xde>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a52      	ldr	r2, [pc, #328]	; (8008e00 <HAL_DMA_Abort_IT+0x1dc>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d020      	beq.n	8008cfc <HAL_DMA_Abort_IT+0xd8>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a57      	ldr	r2, [pc, #348]	; (8008e1c <HAL_DMA_Abort_IT+0x1f8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d019      	beq.n	8008cf8 <HAL_DMA_Abort_IT+0xd4>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a55      	ldr	r2, [pc, #340]	; (8008e20 <HAL_DMA_Abort_IT+0x1fc>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d012      	beq.n	8008cf4 <HAL_DMA_Abort_IT+0xd0>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a54      	ldr	r2, [pc, #336]	; (8008e24 <HAL_DMA_Abort_IT+0x200>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00a      	beq.n	8008cee <HAL_DMA_Abort_IT+0xca>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a52      	ldr	r2, [pc, #328]	; (8008e28 <HAL_DMA_Abort_IT+0x204>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d102      	bne.n	8008ce8 <HAL_DMA_Abort_IT+0xc4>
 8008ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ce6:	e01b      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cec:	e018      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cf2:	e015      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008cf4:	2310      	movs	r3, #16
 8008cf6:	e013      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e011      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d00:	e00e      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008d02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d06:	e00b      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d0c:	e008      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d12:	e005      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d18:	e002      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008d1a:	2310      	movs	r3, #16
 8008d1c:	e000      	b.n	8008d20 <HAL_DMA_Abort_IT+0xfc>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4a42      	ldr	r2, [pc, #264]	; (8008e2c <HAL_DMA_Abort_IT+0x208>)
 8008d22:	6053      	str	r3, [r2, #4]
 8008d24:	e057      	b.n	8008dd6 <HAL_DMA_Abort_IT+0x1b2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a36      	ldr	r2, [pc, #216]	; (8008e04 <HAL_DMA_Abort_IT+0x1e0>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d04f      	beq.n	8008dd0 <HAL_DMA_Abort_IT+0x1ac>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a34      	ldr	r2, [pc, #208]	; (8008e08 <HAL_DMA_Abort_IT+0x1e4>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d048      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x1a8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a33      	ldr	r2, [pc, #204]	; (8008e0c <HAL_DMA_Abort_IT+0x1e8>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d040      	beq.n	8008dc6 <HAL_DMA_Abort_IT+0x1a2>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a31      	ldr	r2, [pc, #196]	; (8008e10 <HAL_DMA_Abort_IT+0x1ec>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d038      	beq.n	8008dc0 <HAL_DMA_Abort_IT+0x19c>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a30      	ldr	r2, [pc, #192]	; (8008e14 <HAL_DMA_Abort_IT+0x1f0>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d030      	beq.n	8008dba <HAL_DMA_Abort_IT+0x196>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a2e      	ldr	r2, [pc, #184]	; (8008e18 <HAL_DMA_Abort_IT+0x1f4>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d028      	beq.n	8008db4 <HAL_DMA_Abort_IT+0x190>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a26      	ldr	r2, [pc, #152]	; (8008e00 <HAL_DMA_Abort_IT+0x1dc>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d020      	beq.n	8008dae <HAL_DMA_Abort_IT+0x18a>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a2a      	ldr	r2, [pc, #168]	; (8008e1c <HAL_DMA_Abort_IT+0x1f8>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d019      	beq.n	8008daa <HAL_DMA_Abort_IT+0x186>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a29      	ldr	r2, [pc, #164]	; (8008e20 <HAL_DMA_Abort_IT+0x1fc>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d012      	beq.n	8008da6 <HAL_DMA_Abort_IT+0x182>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a27      	ldr	r2, [pc, #156]	; (8008e24 <HAL_DMA_Abort_IT+0x200>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d00a      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x17c>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a26      	ldr	r2, [pc, #152]	; (8008e28 <HAL_DMA_Abort_IT+0x204>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d102      	bne.n	8008d9a <HAL_DMA_Abort_IT+0x176>
 8008d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d98:	e01b      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d9e:	e018      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008da4:	e015      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008da6:	2310      	movs	r3, #16
 8008da8:	e013      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e011      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008db2:	e00e      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008db4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008db8:	e00b      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008dba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dbe:	e008      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dc4:	e005      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dca:	e002      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008dcc:	2310      	movs	r3, #16
 8008dce:	e000      	b.n	8008dd2 <HAL_DMA_Abort_IT+0x1ae>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	4a17      	ldr	r2, [pc, #92]	; (8008e30 <HAL_DMA_Abort_IT+0x20c>)
 8008dd4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
    } 
  }
  return status;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	40020080 	.word	0x40020080
 8008e04:	40020008 	.word	0x40020008
 8008e08:	4002001c 	.word	0x4002001c
 8008e0c:	40020030 	.word	0x40020030
 8008e10:	40020044 	.word	0x40020044
 8008e14:	40020058 	.word	0x40020058
 8008e18:	4002006c 	.word	0x4002006c
 8008e1c:	40020408 	.word	0x40020408
 8008e20:	4002041c 	.word	0x4002041c
 8008e24:	40020430 	.word	0x40020430
 8008e28:	40020444 	.word	0x40020444
 8008e2c:	40020400 	.word	0x40020400
 8008e30:	40020000 	.word	0x40020000

08008e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b08b      	sub	sp, #44	; 0x2c
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e42:	2300      	movs	r3, #0
 8008e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e46:	e179      	b.n	800913c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e48:	2201      	movs	r2, #1
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	4013      	ands	r3, r2
 8008e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	f040 8168 	bne.w	8009136 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	4a96      	ldr	r2, [pc, #600]	; (80090c4 <HAL_GPIO_Init+0x290>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d05e      	beq.n	8008f2e <HAL_GPIO_Init+0xfa>
 8008e70:	4a94      	ldr	r2, [pc, #592]	; (80090c4 <HAL_GPIO_Init+0x290>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d875      	bhi.n	8008f62 <HAL_GPIO_Init+0x12e>
 8008e76:	4a94      	ldr	r2, [pc, #592]	; (80090c8 <HAL_GPIO_Init+0x294>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d058      	beq.n	8008f2e <HAL_GPIO_Init+0xfa>
 8008e7c:	4a92      	ldr	r2, [pc, #584]	; (80090c8 <HAL_GPIO_Init+0x294>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d86f      	bhi.n	8008f62 <HAL_GPIO_Init+0x12e>
 8008e82:	4a92      	ldr	r2, [pc, #584]	; (80090cc <HAL_GPIO_Init+0x298>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d052      	beq.n	8008f2e <HAL_GPIO_Init+0xfa>
 8008e88:	4a90      	ldr	r2, [pc, #576]	; (80090cc <HAL_GPIO_Init+0x298>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d869      	bhi.n	8008f62 <HAL_GPIO_Init+0x12e>
 8008e8e:	4a90      	ldr	r2, [pc, #576]	; (80090d0 <HAL_GPIO_Init+0x29c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d04c      	beq.n	8008f2e <HAL_GPIO_Init+0xfa>
 8008e94:	4a8e      	ldr	r2, [pc, #568]	; (80090d0 <HAL_GPIO_Init+0x29c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d863      	bhi.n	8008f62 <HAL_GPIO_Init+0x12e>
 8008e9a:	4a8e      	ldr	r2, [pc, #568]	; (80090d4 <HAL_GPIO_Init+0x2a0>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d046      	beq.n	8008f2e <HAL_GPIO_Init+0xfa>
 8008ea0:	4a8c      	ldr	r2, [pc, #560]	; (80090d4 <HAL_GPIO_Init+0x2a0>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d85d      	bhi.n	8008f62 <HAL_GPIO_Init+0x12e>
 8008ea6:	2b12      	cmp	r3, #18
 8008ea8:	d82a      	bhi.n	8008f00 <HAL_GPIO_Init+0xcc>
 8008eaa:	2b12      	cmp	r3, #18
 8008eac:	d859      	bhi.n	8008f62 <HAL_GPIO_Init+0x12e>
 8008eae:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <HAL_GPIO_Init+0x80>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008f2f 	.word	0x08008f2f
 8008eb8:	08008f09 	.word	0x08008f09
 8008ebc:	08008f1b 	.word	0x08008f1b
 8008ec0:	08008f5d 	.word	0x08008f5d
 8008ec4:	08008f63 	.word	0x08008f63
 8008ec8:	08008f63 	.word	0x08008f63
 8008ecc:	08008f63 	.word	0x08008f63
 8008ed0:	08008f63 	.word	0x08008f63
 8008ed4:	08008f63 	.word	0x08008f63
 8008ed8:	08008f63 	.word	0x08008f63
 8008edc:	08008f63 	.word	0x08008f63
 8008ee0:	08008f63 	.word	0x08008f63
 8008ee4:	08008f63 	.word	0x08008f63
 8008ee8:	08008f63 	.word	0x08008f63
 8008eec:	08008f63 	.word	0x08008f63
 8008ef0:	08008f63 	.word	0x08008f63
 8008ef4:	08008f63 	.word	0x08008f63
 8008ef8:	08008f11 	.word	0x08008f11
 8008efc:	08008f25 	.word	0x08008f25
 8008f00:	4a75      	ldr	r2, [pc, #468]	; (80090d8 <HAL_GPIO_Init+0x2a4>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d013      	beq.n	8008f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f06:	e02c      	b.n	8008f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	623b      	str	r3, [r7, #32]
          break;
 8008f0e:	e029      	b.n	8008f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	3304      	adds	r3, #4
 8008f16:	623b      	str	r3, [r7, #32]
          break;
 8008f18:	e024      	b.n	8008f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	623b      	str	r3, [r7, #32]
          break;
 8008f22:	e01f      	b.n	8008f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	623b      	str	r3, [r7, #32]
          break;
 8008f2c:	e01a      	b.n	8008f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f36:	2304      	movs	r3, #4
 8008f38:	623b      	str	r3, [r7, #32]
          break;
 8008f3a:	e013      	b.n	8008f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d105      	bne.n	8008f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f44:	2308      	movs	r3, #8
 8008f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	611a      	str	r2, [r3, #16]
          break;
 8008f4e:	e009      	b.n	8008f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f50:	2308      	movs	r3, #8
 8008f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	615a      	str	r2, [r3, #20]
          break;
 8008f5a:	e003      	b.n	8008f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	623b      	str	r3, [r7, #32]
          break;
 8008f60:	e000      	b.n	8008f64 <HAL_GPIO_Init+0x130>
          break;
 8008f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2bff      	cmp	r3, #255	; 0xff
 8008f68:	d801      	bhi.n	8008f6e <HAL_GPIO_Init+0x13a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	e001      	b.n	8008f72 <HAL_GPIO_Init+0x13e>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3304      	adds	r3, #4
 8008f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	2bff      	cmp	r3, #255	; 0xff
 8008f78:	d802      	bhi.n	8008f80 <HAL_GPIO_Init+0x14c>
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	e002      	b.n	8008f86 <HAL_GPIO_Init+0x152>
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	3b08      	subs	r3, #8
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	210f      	movs	r1, #15
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	fa01 f303 	lsl.w	r3, r1, r3
 8008f94:	43db      	mvns	r3, r3
 8008f96:	401a      	ands	r2, r3
 8008f98:	6a39      	ldr	r1, [r7, #32]
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 80c1 	beq.w	8009136 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008fb4:	4b49      	ldr	r3, [pc, #292]	; (80090dc <HAL_GPIO_Init+0x2a8>)
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	4a48      	ldr	r2, [pc, #288]	; (80090dc <HAL_GPIO_Init+0x2a8>)
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	6193      	str	r3, [r2, #24]
 8008fc0:	4b46      	ldr	r3, [pc, #280]	; (80090dc <HAL_GPIO_Init+0x2a8>)
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	60bb      	str	r3, [r7, #8]
 8008fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008fcc:	4a44      	ldr	r2, [pc, #272]	; (80090e0 <HAL_GPIO_Init+0x2ac>)
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	089b      	lsrs	r3, r3, #2
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	220f      	movs	r2, #15
 8008fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4013      	ands	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a3c      	ldr	r2, [pc, #240]	; (80090e4 <HAL_GPIO_Init+0x2b0>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d01f      	beq.n	8009038 <HAL_GPIO_Init+0x204>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a3b      	ldr	r2, [pc, #236]	; (80090e8 <HAL_GPIO_Init+0x2b4>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d019      	beq.n	8009034 <HAL_GPIO_Init+0x200>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a3a      	ldr	r2, [pc, #232]	; (80090ec <HAL_GPIO_Init+0x2b8>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d013      	beq.n	8009030 <HAL_GPIO_Init+0x1fc>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a39      	ldr	r2, [pc, #228]	; (80090f0 <HAL_GPIO_Init+0x2bc>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d00d      	beq.n	800902c <HAL_GPIO_Init+0x1f8>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a38      	ldr	r2, [pc, #224]	; (80090f4 <HAL_GPIO_Init+0x2c0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d007      	beq.n	8009028 <HAL_GPIO_Init+0x1f4>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a37      	ldr	r2, [pc, #220]	; (80090f8 <HAL_GPIO_Init+0x2c4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d101      	bne.n	8009024 <HAL_GPIO_Init+0x1f0>
 8009020:	2305      	movs	r3, #5
 8009022:	e00a      	b.n	800903a <HAL_GPIO_Init+0x206>
 8009024:	2306      	movs	r3, #6
 8009026:	e008      	b.n	800903a <HAL_GPIO_Init+0x206>
 8009028:	2304      	movs	r3, #4
 800902a:	e006      	b.n	800903a <HAL_GPIO_Init+0x206>
 800902c:	2303      	movs	r3, #3
 800902e:	e004      	b.n	800903a <HAL_GPIO_Init+0x206>
 8009030:	2302      	movs	r3, #2
 8009032:	e002      	b.n	800903a <HAL_GPIO_Init+0x206>
 8009034:	2301      	movs	r3, #1
 8009036:	e000      	b.n	800903a <HAL_GPIO_Init+0x206>
 8009038:	2300      	movs	r3, #0
 800903a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903c:	f002 0203 	and.w	r2, r2, #3
 8009040:	0092      	lsls	r2, r2, #2
 8009042:	4093      	lsls	r3, r2
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800904a:	4925      	ldr	r1, [pc, #148]	; (80090e0 <HAL_GPIO_Init+0x2ac>)
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	089b      	lsrs	r3, r3, #2
 8009050:	3302      	adds	r3, #2
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d006      	beq.n	8009072 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009064:	4b25      	ldr	r3, [pc, #148]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	4924      	ldr	r1, [pc, #144]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	4313      	orrs	r3, r2
 800906e:	608b      	str	r3, [r1, #8]
 8009070:	e006      	b.n	8009080 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009072:	4b22      	ldr	r3, [pc, #136]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	43db      	mvns	r3, r3
 800907a:	4920      	ldr	r1, [pc, #128]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 800907c:	4013      	ands	r3, r2
 800907e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d006      	beq.n	800909a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800908c:	4b1b      	ldr	r3, [pc, #108]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	491a      	ldr	r1, [pc, #104]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	4313      	orrs	r3, r2
 8009096:	60cb      	str	r3, [r1, #12]
 8009098:	e006      	b.n	80090a8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800909a:	4b18      	ldr	r3, [pc, #96]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 800909c:	68da      	ldr	r2, [r3, #12]
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	43db      	mvns	r3, r3
 80090a2:	4916      	ldr	r1, [pc, #88]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 80090a4:	4013      	ands	r3, r2
 80090a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d025      	beq.n	8009100 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80090b4:	4b11      	ldr	r3, [pc, #68]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	4910      	ldr	r1, [pc, #64]	; (80090fc <HAL_GPIO_Init+0x2c8>)
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	4313      	orrs	r3, r2
 80090be:	604b      	str	r3, [r1, #4]
 80090c0:	e025      	b.n	800910e <HAL_GPIO_Init+0x2da>
 80090c2:	bf00      	nop
 80090c4:	10320000 	.word	0x10320000
 80090c8:	10310000 	.word	0x10310000
 80090cc:	10220000 	.word	0x10220000
 80090d0:	10210000 	.word	0x10210000
 80090d4:	10120000 	.word	0x10120000
 80090d8:	10110000 	.word	0x10110000
 80090dc:	40021000 	.word	0x40021000
 80090e0:	40010000 	.word	0x40010000
 80090e4:	40010800 	.word	0x40010800
 80090e8:	40010c00 	.word	0x40010c00
 80090ec:	40011000 	.word	0x40011000
 80090f0:	40011400 	.word	0x40011400
 80090f4:	40011800 	.word	0x40011800
 80090f8:	40011c00 	.word	0x40011c00
 80090fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009100:	4b15      	ldr	r3, [pc, #84]	; (8009158 <HAL_GPIO_Init+0x324>)
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	43db      	mvns	r3, r3
 8009108:	4913      	ldr	r1, [pc, #76]	; (8009158 <HAL_GPIO_Init+0x324>)
 800910a:	4013      	ands	r3, r2
 800910c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d006      	beq.n	8009128 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800911a:	4b0f      	ldr	r3, [pc, #60]	; (8009158 <HAL_GPIO_Init+0x324>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	490e      	ldr	r1, [pc, #56]	; (8009158 <HAL_GPIO_Init+0x324>)
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	4313      	orrs	r3, r2
 8009124:	600b      	str	r3, [r1, #0]
 8009126:	e006      	b.n	8009136 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009128:	4b0b      	ldr	r3, [pc, #44]	; (8009158 <HAL_GPIO_Init+0x324>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	43db      	mvns	r3, r3
 8009130:	4909      	ldr	r1, [pc, #36]	; (8009158 <HAL_GPIO_Init+0x324>)
 8009132:	4013      	ands	r3, r2
 8009134:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	3301      	adds	r3, #1
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	fa22 f303 	lsr.w	r3, r2, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	f47f ae7e 	bne.w	8008e48 <HAL_GPIO_Init+0x14>
  }
}
 800914c:	bf00      	nop
 800914e:	bf00      	nop
 8009150:	372c      	adds	r7, #44	; 0x2c
 8009152:	46bd      	mov	sp, r7
 8009154:	bc80      	pop	{r7}
 8009156:	4770      	bx	lr
 8009158:	40010400 	.word	0x40010400

0800915c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800915c:	b480      	push	{r7}
 800915e:	b089      	sub	sp, #36	; 0x24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009166:	2300      	movs	r3, #0
 8009168:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800916a:	e0a6      	b.n	80092ba <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800916c:	2201      	movs	r2, #1
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	fa02 f303 	lsl.w	r3, r2, r3
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	4013      	ands	r3, r2
 8009178:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 8099 	beq.w	80092b4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009182:	4a54      	ldr	r2, [pc, #336]	; (80092d4 <HAL_GPIO_DeInit+0x178>)
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	089b      	lsrs	r3, r3, #2
 8009188:	3302      	adds	r3, #2
 800918a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800918e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	f003 0303 	and.w	r3, r3, #3
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	220f      	movs	r2, #15
 800919a:	fa02 f303 	lsl.w	r3, r2, r3
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	4013      	ands	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a4c      	ldr	r2, [pc, #304]	; (80092d8 <HAL_GPIO_DeInit+0x17c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d01f      	beq.n	80091ec <HAL_GPIO_DeInit+0x90>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a4b      	ldr	r2, [pc, #300]	; (80092dc <HAL_GPIO_DeInit+0x180>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d019      	beq.n	80091e8 <HAL_GPIO_DeInit+0x8c>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a4a      	ldr	r2, [pc, #296]	; (80092e0 <HAL_GPIO_DeInit+0x184>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d013      	beq.n	80091e4 <HAL_GPIO_DeInit+0x88>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a49      	ldr	r2, [pc, #292]	; (80092e4 <HAL_GPIO_DeInit+0x188>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00d      	beq.n	80091e0 <HAL_GPIO_DeInit+0x84>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a48      	ldr	r2, [pc, #288]	; (80092e8 <HAL_GPIO_DeInit+0x18c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d007      	beq.n	80091dc <HAL_GPIO_DeInit+0x80>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a47      	ldr	r2, [pc, #284]	; (80092ec <HAL_GPIO_DeInit+0x190>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d101      	bne.n	80091d8 <HAL_GPIO_DeInit+0x7c>
 80091d4:	2305      	movs	r3, #5
 80091d6:	e00a      	b.n	80091ee <HAL_GPIO_DeInit+0x92>
 80091d8:	2306      	movs	r3, #6
 80091da:	e008      	b.n	80091ee <HAL_GPIO_DeInit+0x92>
 80091dc:	2304      	movs	r3, #4
 80091de:	e006      	b.n	80091ee <HAL_GPIO_DeInit+0x92>
 80091e0:	2303      	movs	r3, #3
 80091e2:	e004      	b.n	80091ee <HAL_GPIO_DeInit+0x92>
 80091e4:	2302      	movs	r3, #2
 80091e6:	e002      	b.n	80091ee <HAL_GPIO_DeInit+0x92>
 80091e8:	2301      	movs	r3, #1
 80091ea:	e000      	b.n	80091ee <HAL_GPIO_DeInit+0x92>
 80091ec:	2300      	movs	r3, #0
 80091ee:	69fa      	ldr	r2, [r7, #28]
 80091f0:	f002 0203 	and.w	r2, r2, #3
 80091f4:	0092      	lsls	r2, r2, #2
 80091f6:	4093      	lsls	r3, r2
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d132      	bne.n	8009264 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80091fe:	4b3c      	ldr	r3, [pc, #240]	; (80092f0 <HAL_GPIO_DeInit+0x194>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	43db      	mvns	r3, r3
 8009206:	493a      	ldr	r1, [pc, #232]	; (80092f0 <HAL_GPIO_DeInit+0x194>)
 8009208:	4013      	ands	r3, r2
 800920a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800920c:	4b38      	ldr	r3, [pc, #224]	; (80092f0 <HAL_GPIO_DeInit+0x194>)
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	43db      	mvns	r3, r3
 8009214:	4936      	ldr	r1, [pc, #216]	; (80092f0 <HAL_GPIO_DeInit+0x194>)
 8009216:	4013      	ands	r3, r2
 8009218:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800921a:	4b35      	ldr	r3, [pc, #212]	; (80092f0 <HAL_GPIO_DeInit+0x194>)
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	43db      	mvns	r3, r3
 8009222:	4933      	ldr	r1, [pc, #204]	; (80092f0 <HAL_GPIO_DeInit+0x194>)
 8009224:	4013      	ands	r3, r2
 8009226:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009228:	4b31      	ldr	r3, [pc, #196]	; (80092f0 <HAL_GPIO_DeInit+0x194>)
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	43db      	mvns	r3, r3
 8009230:	492f      	ldr	r1, [pc, #188]	; (80092f0 <HAL_GPIO_DeInit+0x194>)
 8009232:	4013      	ands	r3, r2
 8009234:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	f003 0303 	and.w	r3, r3, #3
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	220f      	movs	r2, #15
 8009240:	fa02 f303 	lsl.w	r3, r2, r3
 8009244:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009246:	4a23      	ldr	r2, [pc, #140]	; (80092d4 <HAL_GPIO_DeInit+0x178>)
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	089b      	lsrs	r3, r3, #2
 800924c:	3302      	adds	r3, #2
 800924e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	43da      	mvns	r2, r3
 8009256:	481f      	ldr	r0, [pc, #124]	; (80092d4 <HAL_GPIO_DeInit+0x178>)
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	089b      	lsrs	r3, r3, #2
 800925c:	400a      	ands	r2, r1
 800925e:	3302      	adds	r3, #2
 8009260:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	2bff      	cmp	r3, #255	; 0xff
 8009268:	d801      	bhi.n	800926e <HAL_GPIO_DeInit+0x112>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	e001      	b.n	8009272 <HAL_GPIO_DeInit+0x116>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3304      	adds	r3, #4
 8009272:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	2bff      	cmp	r3, #255	; 0xff
 8009278:	d802      	bhi.n	8009280 <HAL_GPIO_DeInit+0x124>
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	e002      	b.n	8009286 <HAL_GPIO_DeInit+0x12a>
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	3b08      	subs	r3, #8
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	210f      	movs	r1, #15
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	fa01 f303 	lsl.w	r3, r1, r3
 8009294:	43db      	mvns	r3, r3
 8009296:	401a      	ands	r2, r3
 8009298:	2104      	movs	r1, #4
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	fa01 f303 	lsl.w	r3, r1, r3
 80092a0:	431a      	orrs	r2, r3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	43db      	mvns	r3, r3
 80092ae:	401a      	ands	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	3301      	adds	r3, #1
 80092b8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	fa22 f303 	lsr.w	r3, r2, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f47f af52 	bne.w	800916c <HAL_GPIO_DeInit+0x10>
  }
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	3724      	adds	r7, #36	; 0x24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bc80      	pop	{r7}
 80092d2:	4770      	bx	lr
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40010800 	.word	0x40010800
 80092dc:	40010c00 	.word	0x40010c00
 80092e0:	40011000 	.word	0x40011000
 80092e4:	40011400 	.word	0x40011400
 80092e8:	40011800 	.word	0x40011800
 80092ec:	40011c00 	.word	0x40011c00
 80092f0:	40010400 	.word	0x40010400

080092f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	887b      	ldrh	r3, [r7, #2]
 8009306:	4013      	ands	r3, r2
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800930c:	2301      	movs	r3, #1
 800930e:	73fb      	strb	r3, [r7, #15]
 8009310:	e001      	b.n	8009316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	bc80      	pop	{r7}
 8009320:	4770      	bx	lr

08009322 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009322:	b480      	push	{r7}
 8009324:	b083      	sub	sp, #12
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	460b      	mov	r3, r1
 800932c:	807b      	strh	r3, [r7, #2]
 800932e:	4613      	mov	r3, r2
 8009330:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009332:	787b      	ldrb	r3, [r7, #1]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d003      	beq.n	8009340 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009338:	887a      	ldrh	r2, [r7, #2]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800933e:	e003      	b.n	8009348 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009340:	887b      	ldrh	r3, [r7, #2]
 8009342:	041a      	lsls	r2, r3, #16
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	611a      	str	r2, [r3, #16]
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr

08009352 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009352:	b480      	push	{r7}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009364:	887a      	ldrh	r2, [r7, #2]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4013      	ands	r3, r2
 800936a:	041a      	lsls	r2, r3, #16
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	43d9      	mvns	r1, r3
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	400b      	ands	r3, r1
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	611a      	str	r2, [r3, #16]
}
 800937a:	bf00      	nop
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	bc80      	pop	{r7}
 8009382:	4770      	bx	lr

08009384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e12b      	b.n	80095ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d106      	bne.n	80093b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7fe fff8 	bl	80083a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2224      	movs	r2, #36	; 0x24
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0201 	bic.w	r2, r2, #1
 80093c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093e8:	f001 fdb8 	bl	800af5c <HAL_RCC_GetPCLK1Freq>
 80093ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	4a81      	ldr	r2, [pc, #516]	; (80095f8 <HAL_I2C_Init+0x274>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d807      	bhi.n	8009408 <HAL_I2C_Init+0x84>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4a80      	ldr	r2, [pc, #512]	; (80095fc <HAL_I2C_Init+0x278>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	bf94      	ite	ls
 8009400:	2301      	movls	r3, #1
 8009402:	2300      	movhi	r3, #0
 8009404:	b2db      	uxtb	r3, r3
 8009406:	e006      	b.n	8009416 <HAL_I2C_Init+0x92>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4a7d      	ldr	r2, [pc, #500]	; (8009600 <HAL_I2C_Init+0x27c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	bf94      	ite	ls
 8009410:	2301      	movls	r3, #1
 8009412:	2300      	movhi	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e0e7      	b.n	80095ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4a78      	ldr	r2, [pc, #480]	; (8009604 <HAL_I2C_Init+0x280>)
 8009422:	fba2 2303 	umull	r2, r3, r2, r3
 8009426:	0c9b      	lsrs	r3, r3, #18
 8009428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6a1b      	ldr	r3, [r3, #32]
 8009444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	4a6a      	ldr	r2, [pc, #424]	; (80095f8 <HAL_I2C_Init+0x274>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d802      	bhi.n	8009458 <HAL_I2C_Init+0xd4>
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	3301      	adds	r3, #1
 8009456:	e009      	b.n	800946c <HAL_I2C_Init+0xe8>
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800945e:	fb02 f303 	mul.w	r3, r2, r3
 8009462:	4a69      	ldr	r2, [pc, #420]	; (8009608 <HAL_I2C_Init+0x284>)
 8009464:	fba2 2303 	umull	r2, r3, r2, r3
 8009468:	099b      	lsrs	r3, r3, #6
 800946a:	3301      	adds	r3, #1
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6812      	ldr	r2, [r2, #0]
 8009470:	430b      	orrs	r3, r1
 8009472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800947e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	495c      	ldr	r1, [pc, #368]	; (80095f8 <HAL_I2C_Init+0x274>)
 8009488:	428b      	cmp	r3, r1
 800948a:	d819      	bhi.n	80094c0 <HAL_I2C_Init+0x13c>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	1e59      	subs	r1, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	fbb1 f3f3 	udiv	r3, r1, r3
 800949a:	1c59      	adds	r1, r3, #1
 800949c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80094a0:	400b      	ands	r3, r1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <HAL_I2C_Init+0x138>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	1e59      	subs	r1, r3, #1
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80094b4:	3301      	adds	r3, #1
 80094b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ba:	e051      	b.n	8009560 <HAL_I2C_Init+0x1dc>
 80094bc:	2304      	movs	r3, #4
 80094be:	e04f      	b.n	8009560 <HAL_I2C_Init+0x1dc>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d111      	bne.n	80094ec <HAL_I2C_Init+0x168>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	1e58      	subs	r0, r3, #1
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6859      	ldr	r1, [r3, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	440b      	add	r3, r1
 80094d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80094da:	3301      	adds	r3, #1
 80094dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bf0c      	ite	eq
 80094e4:	2301      	moveq	r3, #1
 80094e6:	2300      	movne	r3, #0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	e012      	b.n	8009512 <HAL_I2C_Init+0x18e>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	1e58      	subs	r0, r3, #1
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6859      	ldr	r1, [r3, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	0099      	lsls	r1, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009502:	3301      	adds	r3, #1
 8009504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009508:	2b00      	cmp	r3, #0
 800950a:	bf0c      	ite	eq
 800950c:	2301      	moveq	r3, #1
 800950e:	2300      	movne	r3, #0
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <HAL_I2C_Init+0x196>
 8009516:	2301      	movs	r3, #1
 8009518:	e022      	b.n	8009560 <HAL_I2C_Init+0x1dc>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10e      	bne.n	8009540 <HAL_I2C_Init+0x1bc>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	1e58      	subs	r0, r3, #1
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6859      	ldr	r1, [r3, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	440b      	add	r3, r1
 8009530:	fbb0 f3f3 	udiv	r3, r0, r3
 8009534:	3301      	adds	r3, #1
 8009536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800953a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800953e:	e00f      	b.n	8009560 <HAL_I2C_Init+0x1dc>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	1e58      	subs	r0, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6859      	ldr	r1, [r3, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	440b      	add	r3, r1
 800954e:	0099      	lsls	r1, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	fbb0 f3f3 	udiv	r3, r0, r3
 8009556:	3301      	adds	r3, #1
 8009558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800955c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	6809      	ldr	r1, [r1, #0]
 8009564:	4313      	orrs	r3, r2
 8009566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69da      	ldr	r2, [r3, #28]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800958e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	6911      	ldr	r1, [r2, #16]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	68d2      	ldr	r2, [r2, #12]
 800959a:	4311      	orrs	r1, r2
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	6812      	ldr	r2, [r2, #0]
 80095a0:	430b      	orrs	r3, r1
 80095a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	695a      	ldr	r2, [r3, #20]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0201 	orr.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2220      	movs	r2, #32
 80095da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	000186a0 	.word	0x000186a0
 80095fc:	001e847f 	.word	0x001e847f
 8009600:	003d08ff 	.word	0x003d08ff
 8009604:	431bde83 	.word	0x431bde83
 8009608:	10624dd3 	.word	0x10624dd3

0800960c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e021      	b.n	8009662 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2224      	movs	r2, #36	; 0x24
 8009622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 0201 	bic.w	r2, r2, #1
 8009634:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7fe fef0 	bl	800841c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af02      	add	r7, sp, #8
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	607a      	str	r2, [r7, #4]
 8009676:	461a      	mov	r2, r3
 8009678:	460b      	mov	r3, r1
 800967a:	817b      	strh	r3, [r7, #10]
 800967c:	4613      	mov	r3, r2
 800967e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009680:	f7ff f85e 	bl	8008740 <HAL_GetTick>
 8009684:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b20      	cmp	r3, #32
 8009690:	f040 80e0 	bne.w	8009854 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2319      	movs	r3, #25
 800969a:	2201      	movs	r2, #1
 800969c:	4970      	ldr	r1, [pc, #448]	; (8009860 <HAL_I2C_Master_Transmit+0x1f4>)
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 fe5c 	bl	800a35c <I2C_WaitOnFlagUntilTimeout>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80096aa:	2302      	movs	r3, #2
 80096ac:	e0d3      	b.n	8009856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d101      	bne.n	80096bc <HAL_I2C_Master_Transmit+0x50>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e0cc      	b.n	8009856 <HAL_I2C_Master_Transmit+0x1ea>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d007      	beq.n	80096e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0201 	orr.w	r2, r2, #1
 80096e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2221      	movs	r2, #33	; 0x21
 80096f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2210      	movs	r2, #16
 80096fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	893a      	ldrh	r2, [r7, #8]
 8009712:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4a50      	ldr	r2, [pc, #320]	; (8009864 <HAL_I2C_Master_Transmit+0x1f8>)
 8009722:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009724:	8979      	ldrh	r1, [r7, #10]
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	6a3a      	ldr	r2, [r7, #32]
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 fc16 	bl	8009f5c <I2C_MasterRequestWrite>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e08d      	b.n	8009856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800973a:	2300      	movs	r3, #0
 800973c:	613b      	str	r3, [r7, #16]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	613b      	str	r3, [r7, #16]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	613b      	str	r3, [r7, #16]
 800974e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009750:	e066      	b.n	8009820 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	6a39      	ldr	r1, [r7, #32]
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 ff1a 	bl	800a590 <I2C_WaitOnTXEFlagUntilTimeout>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00d      	beq.n	800977e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009766:	2b04      	cmp	r3, #4
 8009768:	d107      	bne.n	800977a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e06b      	b.n	8009856 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	781a      	ldrb	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a6:	3b01      	subs	r3, #1
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b04      	cmp	r3, #4
 80097ba:	d11b      	bne.n	80097f4 <HAL_I2C_Master_Transmit+0x188>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d017      	beq.n	80097f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	781a      	ldrb	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097de:	b29b      	uxth	r3, r3
 80097e0:	3b01      	subs	r3, #1
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	6a39      	ldr	r1, [r7, #32]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 ff11 	bl	800a620 <I2C_WaitOnBTFFlagUntilTimeout>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00d      	beq.n	8009820 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009808:	2b04      	cmp	r3, #4
 800980a:	d107      	bne.n	800981c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800981a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e01a      	b.n	8009856 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009824:	2b00      	cmp	r3, #0
 8009826:	d194      	bne.n	8009752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2220      	movs	r2, #32
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	e000      	b.n	8009856 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009854:	2302      	movs	r3, #2
  }
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	00100002 	.word	0x00100002
 8009864:	ffff0000 	.word	0xffff0000

08009868 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	461a      	mov	r2, r3
 8009876:	4603      	mov	r3, r0
 8009878:	817b      	strh	r3, [r7, #10]
 800987a:	460b      	mov	r3, r1
 800987c:	813b      	strh	r3, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009882:	f7fe ff5d 	bl	8008740 <HAL_GetTick>
 8009886:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b20      	cmp	r3, #32
 8009892:	f040 80d9 	bne.w	8009a48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	2319      	movs	r3, #25
 800989c:	2201      	movs	r2, #1
 800989e:	496d      	ldr	r1, [pc, #436]	; (8009a54 <HAL_I2C_Mem_Write+0x1ec>)
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 fd5b 	bl	800a35c <I2C_WaitOnFlagUntilTimeout>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80098ac:	2302      	movs	r3, #2
 80098ae:	e0cc      	b.n	8009a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d101      	bne.n	80098be <HAL_I2C_Mem_Write+0x56>
 80098ba:	2302      	movs	r3, #2
 80098bc:	e0c5      	b.n	8009a4a <HAL_I2C_Mem_Write+0x1e2>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d007      	beq.n	80098e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 0201 	orr.w	r2, r2, #1
 80098e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2221      	movs	r2, #33	; 0x21
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2240      	movs	r2, #64	; 0x40
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a3a      	ldr	r2, [r7, #32]
 800990e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800991a:	b29a      	uxth	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4a4d      	ldr	r2, [pc, #308]	; (8009a58 <HAL_I2C_Mem_Write+0x1f0>)
 8009924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009926:	88f8      	ldrh	r0, [r7, #6]
 8009928:	893a      	ldrh	r2, [r7, #8]
 800992a:	8979      	ldrh	r1, [r7, #10]
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	4603      	mov	r3, r0
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fb92 	bl	800a060 <I2C_RequestMemoryWrite>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d052      	beq.n	80099e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e081      	b.n	8009a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 fe20 	bl	800a590 <I2C_WaitOnTXEFlagUntilTimeout>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00d      	beq.n	8009972 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	2b04      	cmp	r3, #4
 800995c:	d107      	bne.n	800996e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800996c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e06b      	b.n	8009a4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	781a      	ldrb	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998c:	3b01      	subs	r3, #1
 800998e:	b29a      	uxth	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	b29a      	uxth	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	f003 0304 	and.w	r3, r3, #4
 80099ac:	2b04      	cmp	r3, #4
 80099ae:	d11b      	bne.n	80099e8 <HAL_I2C_Mem_Write+0x180>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d017      	beq.n	80099e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	781a      	ldrb	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099de:	b29b      	uxth	r3, r3
 80099e0:	3b01      	subs	r3, #1
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1aa      	bne.n	8009946 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 fe13 	bl	800a620 <I2C_WaitOnBTFFlagUntilTimeout>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00d      	beq.n	8009a1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	d107      	bne.n	8009a18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e016      	b.n	8009a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	e000      	b.n	8009a4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a48:	2302      	movs	r3, #2
  }
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	00100002 	.word	0x00100002
 8009a58:	ffff0000 	.word	0xffff0000

08009a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08c      	sub	sp, #48	; 0x30
 8009a60:	af02      	add	r7, sp, #8
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	817b      	strh	r3, [r7, #10]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	813b      	strh	r3, [r7, #8]
 8009a72:	4613      	mov	r3, r2
 8009a74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a7a:	f7fe fe61 	bl	8008740 <HAL_GetTick>
 8009a7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b20      	cmp	r3, #32
 8009a8a:	f040 8244 	bne.w	8009f16 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	2319      	movs	r3, #25
 8009a94:	2201      	movs	r2, #1
 8009a96:	4982      	ldr	r1, [pc, #520]	; (8009ca0 <HAL_I2C_Mem_Read+0x244>)
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 fc5f 	bl	800a35c <I2C_WaitOnFlagUntilTimeout>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e237      	b.n	8009f18 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d101      	bne.n	8009ab6 <HAL_I2C_Mem_Read+0x5a>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e230      	b.n	8009f18 <HAL_I2C_Mem_Read+0x4bc>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0301 	and.w	r3, r3, #1
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d007      	beq.n	8009adc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0201 	orr.w	r2, r2, #1
 8009ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2222      	movs	r2, #34	; 0x22
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2240      	movs	r2, #64	; 0x40
 8009af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4a62      	ldr	r2, [pc, #392]	; (8009ca4 <HAL_I2C_Mem_Read+0x248>)
 8009b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b1e:	88f8      	ldrh	r0, [r7, #6]
 8009b20:	893a      	ldrh	r2, [r7, #8]
 8009b22:	8979      	ldrh	r1, [r7, #10]
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	9301      	str	r3, [sp, #4]
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 fb2c 	bl	800a18c <I2C_RequestMemoryRead>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e1ec      	b.n	8009f18 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d113      	bne.n	8009b6e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b46:	2300      	movs	r3, #0
 8009b48:	61fb      	str	r3, [r7, #28]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	61fb      	str	r3, [r7, #28]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	61fb      	str	r3, [r7, #28]
 8009b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	e1c0      	b.n	8009ef0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d11e      	bne.n	8009bb4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b86:	b672      	cpsid	i
}
 8009b88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61bb      	str	r3, [r7, #24]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009bb0:	b662      	cpsie	i
}
 8009bb2:	e035      	b.n	8009c20 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d11e      	bne.n	8009bfa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bcc:	b672      	cpsid	i
}
 8009bce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	617b      	str	r3, [r7, #20]
 8009be4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009bf6:	b662      	cpsie	i
}
 8009bf8:	e012      	b.n	8009c20 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c08:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	613b      	str	r3, [r7, #16]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	613b      	str	r3, [r7, #16]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	613b      	str	r3, [r7, #16]
 8009c1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c20:	e166      	b.n	8009ef0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	f200 811f 	bhi.w	8009e6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d123      	bne.n	8009c7c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fd39 	bl	800a6b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e167      	b.n	8009f18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	691a      	ldr	r2, [r3, #16]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	b2d2      	uxtb	r2, r2
 8009c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	1c5a      	adds	r2, r3, #1
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c64:	3b01      	subs	r3, #1
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	3b01      	subs	r3, #1
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c7a:	e139      	b.n	8009ef0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d152      	bne.n	8009d2a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4906      	ldr	r1, [pc, #24]	; (8009ca8 <HAL_I2C_Mem_Read+0x24c>)
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 fb64 	bl	800a35c <I2C_WaitOnFlagUntilTimeout>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d008      	beq.n	8009cac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e13c      	b.n	8009f18 <HAL_I2C_Mem_Read+0x4bc>
 8009c9e:	bf00      	nop
 8009ca0:	00100002 	.word	0x00100002
 8009ca4:	ffff0000 	.word	0xffff0000
 8009ca8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009cac:	b672      	cpsid	i
}
 8009cae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	691a      	ldr	r2, [r3, #16]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	b2d2      	uxtb	r2, r2
 8009ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	3b01      	subs	r3, #1
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009cf2:	b662      	cpsie	i
}
 8009cf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691a      	ldr	r2, [r3, #16]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	b2d2      	uxtb	r2, r2
 8009d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d12:	3b01      	subs	r3, #1
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d28:	e0e2      	b.n	8009ef0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d30:	2200      	movs	r2, #0
 8009d32:	497b      	ldr	r1, [pc, #492]	; (8009f20 <HAL_I2C_Mem_Read+0x4c4>)
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 fb11 	bl	800a35c <I2C_WaitOnFlagUntilTimeout>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e0e9      	b.n	8009f18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d54:	b672      	cpsid	i
}
 8009d56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	691a      	ldr	r2, [r3, #16]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d74:	3b01      	subs	r3, #1
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	3b01      	subs	r3, #1
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009d8a:	4b66      	ldr	r3, [pc, #408]	; (8009f24 <HAL_I2C_Mem_Read+0x4c8>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	08db      	lsrs	r3, r3, #3
 8009d90:	4a65      	ldr	r2, [pc, #404]	; (8009f28 <HAL_I2C_Mem_Read+0x4cc>)
 8009d92:	fba2 2303 	umull	r2, r3, r2, r3
 8009d96:	0a1a      	lsrs	r2, r3, #8
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	00da      	lsls	r2, r3, #3
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	3b01      	subs	r3, #1
 8009da8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d118      	bne.n	8009de2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2220      	movs	r2, #32
 8009dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	f043 0220 	orr.w	r2, r3, #32
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009dd2:	b662      	cpsie	i
}
 8009dd4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e09a      	b.n	8009f18 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b04      	cmp	r3, #4
 8009dee:	d1d9      	bne.n	8009da4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	691a      	ldr	r2, [r3, #16]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e32:	b662      	cpsie	i
}
 8009e34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	b2d2      	uxtb	r2, r2
 8009e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e68:	e042      	b.n	8009ef0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 fc1e 	bl	800a6b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e04c      	b.n	8009f18 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	691a      	ldr	r2, [r3, #16]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	b2d2      	uxtb	r2, r2
 8009e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b04      	cmp	r3, #4
 8009ebc:	d118      	bne.n	8009ef0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	691a      	ldr	r2, [r3, #16]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	b2d2      	uxtb	r2, r2
 8009eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eda:	3b01      	subs	r3, #1
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f47f ae94 	bne.w	8009c22 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e000      	b.n	8009f18 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f16:	2302      	movs	r3, #2
  }
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3728      	adds	r7, #40	; 0x28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	00010004 	.word	0x00010004
 8009f24:	200000a0 	.word	0x200000a0
 8009f28:	14f8b589 	.word	0x14f8b589

08009f2c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f3a:	b2db      	uxtb	r3, r3
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bc80      	pop	{r7}
 8009f44:	4770      	bx	lr

08009f46 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b083      	sub	sp, #12
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bc80      	pop	{r7}
 8009f5a:	4770      	bx	lr

08009f5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	607a      	str	r2, [r7, #4]
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b08      	cmp	r3, #8
 8009f76:	d006      	beq.n	8009f86 <I2C_MasterRequestWrite+0x2a>
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d003      	beq.n	8009f86 <I2C_MasterRequestWrite+0x2a>
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f84:	d108      	bne.n	8009f98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	e00b      	b.n	8009fb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9c:	2b12      	cmp	r3, #18
 8009f9e:	d107      	bne.n	8009fb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 f9cd 	bl	800a35c <I2C_WaitOnFlagUntilTimeout>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00d      	beq.n	8009fe4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd6:	d103      	bne.n	8009fe0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	e035      	b.n	800a050 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fec:	d108      	bne.n	800a000 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fee:	897b      	ldrh	r3, [r7, #10]
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ffc:	611a      	str	r2, [r3, #16]
 8009ffe:	e01b      	b.n	800a038 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a000:	897b      	ldrh	r3, [r7, #10]
 800a002:	11db      	asrs	r3, r3, #7
 800a004:	b2db      	uxtb	r3, r3
 800a006:	f003 0306 	and.w	r3, r3, #6
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f063 030f 	orn	r3, r3, #15
 800a010:	b2da      	uxtb	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	490e      	ldr	r1, [pc, #56]	; (800a058 <I2C_MasterRequestWrite+0xfc>)
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 fa16 	bl	800a450 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e010      	b.n	800a050 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a02e:	897b      	ldrh	r3, [r7, #10]
 800a030:	b2da      	uxtb	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	4907      	ldr	r1, [pc, #28]	; (800a05c <I2C_MasterRequestWrite+0x100>)
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fa06 	bl	800a450 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	00010008 	.word	0x00010008
 800a05c:	00010002 	.word	0x00010002

0800a060 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af02      	add	r7, sp, #8
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	4608      	mov	r0, r1
 800a06a:	4611      	mov	r1, r2
 800a06c:	461a      	mov	r2, r3
 800a06e:	4603      	mov	r3, r0
 800a070:	817b      	strh	r3, [r7, #10]
 800a072:	460b      	mov	r3, r1
 800a074:	813b      	strh	r3, [r7, #8]
 800a076:	4613      	mov	r3, r2
 800a078:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a088:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	2200      	movs	r2, #0
 800a092:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 f960 	bl	800a35c <I2C_WaitOnFlagUntilTimeout>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00d      	beq.n	800a0be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b0:	d103      	bne.n	800a0ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e05f      	b.n	800a17e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0be:	897b      	ldrh	r3, [r7, #10]
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	6a3a      	ldr	r2, [r7, #32]
 800a0d2:	492d      	ldr	r1, [pc, #180]	; (800a188 <I2C_RequestMemoryWrite+0x128>)
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f9bb 	bl	800a450 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e04c      	b.n	800a17e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	617b      	str	r3, [r7, #20]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	617b      	str	r3, [r7, #20]
 800a0f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fc:	6a39      	ldr	r1, [r7, #32]
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 fa46 	bl	800a590 <I2C_WaitOnTXEFlagUntilTimeout>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00d      	beq.n	800a126 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d107      	bne.n	800a122 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a120:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e02b      	b.n	800a17e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a126:	88fb      	ldrh	r3, [r7, #6]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d105      	bne.n	800a138 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a12c:	893b      	ldrh	r3, [r7, #8]
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	611a      	str	r2, [r3, #16]
 800a136:	e021      	b.n	800a17c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a138:	893b      	ldrh	r3, [r7, #8]
 800a13a:	0a1b      	lsrs	r3, r3, #8
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a148:	6a39      	ldr	r1, [r7, #32]
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 fa20 	bl	800a590 <I2C_WaitOnTXEFlagUntilTimeout>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00d      	beq.n	800a172 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	d107      	bne.n	800a16e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a16c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e005      	b.n	800a17e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a172:	893b      	ldrh	r3, [r7, #8]
 800a174:	b2da      	uxtb	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	00010002 	.word	0x00010002

0800a18c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af02      	add	r7, sp, #8
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	4608      	mov	r0, r1
 800a196:	4611      	mov	r1, r2
 800a198:	461a      	mov	r2, r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	817b      	strh	r3, [r7, #10]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	813b      	strh	r3, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 f8c2 	bl	800a35c <I2C_WaitOnFlagUntilTimeout>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00d      	beq.n	800a1fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ec:	d103      	bne.n	800a1f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e0aa      	b.n	800a350 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1fa:	897b      	ldrh	r3, [r7, #10]
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	461a      	mov	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a208:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	6a3a      	ldr	r2, [r7, #32]
 800a20e:	4952      	ldr	r1, [pc, #328]	; (800a358 <I2C_RequestMemoryRead+0x1cc>)
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f91d 	bl	800a450 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e097      	b.n	800a350 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a220:	2300      	movs	r3, #0
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	617b      	str	r3, [r7, #20]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	617b      	str	r3, [r7, #20]
 800a234:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a238:	6a39      	ldr	r1, [r7, #32]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 f9a8 	bl	800a590 <I2C_WaitOnTXEFlagUntilTimeout>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00d      	beq.n	800a262 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	d107      	bne.n	800a25e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a25c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e076      	b.n	800a350 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a262:	88fb      	ldrh	r3, [r7, #6]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d105      	bne.n	800a274 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a268:	893b      	ldrh	r3, [r7, #8]
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	611a      	str	r2, [r3, #16]
 800a272:	e021      	b.n	800a2b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a274:	893b      	ldrh	r3, [r7, #8]
 800a276:	0a1b      	lsrs	r3, r3, #8
 800a278:	b29b      	uxth	r3, r3
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a284:	6a39      	ldr	r1, [r7, #32]
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f982 	bl	800a590 <I2C_WaitOnTXEFlagUntilTimeout>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00d      	beq.n	800a2ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a296:	2b04      	cmp	r3, #4
 800a298:	d107      	bne.n	800a2aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e050      	b.n	800a350 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2ae:	893b      	ldrh	r3, [r7, #8]
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ba:	6a39      	ldr	r1, [r7, #32]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 f967 	bl	800a590 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00d      	beq.n	800a2e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d107      	bne.n	800a2e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e035      	b.n	800a350 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 f82b 	bl	800a35c <I2C_WaitOnFlagUntilTimeout>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00d      	beq.n	800a328 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a31a:	d103      	bne.n	800a324 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a322:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e013      	b.n	800a350 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a328:	897b      	ldrh	r3, [r7, #10]
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	f043 0301 	orr.w	r3, r3, #1
 800a330:	b2da      	uxtb	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	6a3a      	ldr	r2, [r7, #32]
 800a33c:	4906      	ldr	r1, [pc, #24]	; (800a358 <I2C_RequestMemoryRead+0x1cc>)
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f886 	bl	800a450 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	00010002 	.word	0x00010002

0800a35c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	603b      	str	r3, [r7, #0]
 800a368:	4613      	mov	r3, r2
 800a36a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a36c:	e048      	b.n	800a400 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a374:	d044      	beq.n	800a400 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a376:	f7fe f9e3 	bl	8008740 <HAL_GetTick>
 800a37a:	4602      	mov	r2, r0
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d302      	bcc.n	800a38c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d139      	bne.n	800a400 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	0c1b      	lsrs	r3, r3, #16
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b01      	cmp	r3, #1
 800a394:	d10d      	bne.n	800a3b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	43da      	mvns	r2, r3
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	bf0c      	ite	eq
 800a3a8:	2301      	moveq	r3, #1
 800a3aa:	2300      	movne	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	e00c      	b.n	800a3cc <I2C_WaitOnFlagUntilTimeout+0x70>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	43da      	mvns	r2, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	bf0c      	ite	eq
 800a3c4:	2301      	moveq	r3, #1
 800a3c6:	2300      	movne	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d116      	bne.n	800a400 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ec:	f043 0220 	orr.w	r2, r3, #32
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e023      	b.n	800a448 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	0c1b      	lsrs	r3, r3, #16
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b01      	cmp	r3, #1
 800a408:	d10d      	bne.n	800a426 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	43da      	mvns	r2, r3
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	4013      	ands	r3, r2
 800a416:	b29b      	uxth	r3, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bf0c      	ite	eq
 800a41c:	2301      	moveq	r3, #1
 800a41e:	2300      	movne	r3, #0
 800a420:	b2db      	uxtb	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	e00c      	b.n	800a440 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	43da      	mvns	r2, r3
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	4013      	ands	r3, r2
 800a432:	b29b      	uxth	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	bf0c      	ite	eq
 800a438:	2301      	moveq	r3, #1
 800a43a:	2300      	movne	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	461a      	mov	r2, r3
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	429a      	cmp	r2, r3
 800a444:	d093      	beq.n	800a36e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a45e:	e071      	b.n	800a544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a46a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a46e:	d123      	bne.n	800a4b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a47e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a488:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2220      	movs	r2, #32
 800a494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a4:	f043 0204 	orr.w	r2, r3, #4
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e067      	b.n	800a588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4be:	d041      	beq.n	800a544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4c0:	f7fe f93e 	bl	8008740 <HAL_GetTick>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d302      	bcc.n	800a4d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d136      	bne.n	800a544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	0c1b      	lsrs	r3, r3, #16
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d10c      	bne.n	800a4fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	43da      	mvns	r2, r3
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	bf14      	ite	ne
 800a4f2:	2301      	movne	r3, #1
 800a4f4:	2300      	moveq	r3, #0
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	e00b      	b.n	800a512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	43da      	mvns	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	4013      	ands	r3, r2
 800a506:	b29b      	uxth	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	bf14      	ite	ne
 800a50c:	2301      	movne	r3, #1
 800a50e:	2300      	moveq	r3, #0
 800a510:	b2db      	uxtb	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	d016      	beq.n	800a544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2220      	movs	r2, #32
 800a520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a530:	f043 0220 	orr.w	r2, r3, #32
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e021      	b.n	800a588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	0c1b      	lsrs	r3, r3, #16
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d10c      	bne.n	800a568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	695b      	ldr	r3, [r3, #20]
 800a554:	43da      	mvns	r2, r3
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	4013      	ands	r3, r2
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bf14      	ite	ne
 800a560:	2301      	movne	r3, #1
 800a562:	2300      	moveq	r3, #0
 800a564:	b2db      	uxtb	r3, r3
 800a566:	e00b      	b.n	800a580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	43da      	mvns	r2, r3
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	4013      	ands	r3, r2
 800a574:	b29b      	uxth	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	bf14      	ite	ne
 800a57a:	2301      	movne	r3, #1
 800a57c:	2300      	moveq	r3, #0
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	f47f af6d 	bne.w	800a460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a59c:	e034      	b.n	800a608 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f000 f8e3 	bl	800a76a <I2C_IsAcknowledgeFailed>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e034      	b.n	800a618 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5b4:	d028      	beq.n	800a608 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5b6:	f7fe f8c3 	bl	8008740 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d302      	bcc.n	800a5cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d11d      	bne.n	800a608 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d6:	2b80      	cmp	r3, #128	; 0x80
 800a5d8:	d016      	beq.n	800a608 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	f043 0220 	orr.w	r2, r3, #32
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e007      	b.n	800a618 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b80      	cmp	r3, #128	; 0x80
 800a614:	d1c3      	bne.n	800a59e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a62c:	e034      	b.n	800a698 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f000 f89b 	bl	800a76a <I2C_IsAcknowledgeFailed>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e034      	b.n	800a6a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a644:	d028      	beq.n	800a698 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a646:	f7fe f87b 	bl	8008740 <HAL_GetTick>
 800a64a:	4602      	mov	r2, r0
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	429a      	cmp	r2, r3
 800a654:	d302      	bcc.n	800a65c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d11d      	bne.n	800a698 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	f003 0304 	and.w	r3, r3, #4
 800a666:	2b04      	cmp	r3, #4
 800a668:	d016      	beq.n	800a698 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2220      	movs	r2, #32
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a684:	f043 0220 	orr.w	r2, r3, #32
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e007      	b.n	800a6a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	f003 0304 	and.w	r3, r3, #4
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d1c3      	bne.n	800a62e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6bc:	e049      	b.n	800a752 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	f003 0310 	and.w	r3, r3, #16
 800a6c8:	2b10      	cmp	r3, #16
 800a6ca:	d119      	bne.n	800a700 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f06f 0210 	mvn.w	r2, #16
 800a6d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e030      	b.n	800a762 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a700:	f7fe f81e 	bl	8008740 <HAL_GetTick>
 800a704:	4602      	mov	r2, r0
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d302      	bcc.n	800a716 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d11d      	bne.n	800a752 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a720:	2b40      	cmp	r3, #64	; 0x40
 800a722:	d016      	beq.n	800a752 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73e:	f043 0220 	orr.w	r2, r3, #32
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e007      	b.n	800a762 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75c:	2b40      	cmp	r3, #64	; 0x40
 800a75e:	d1ae      	bne.n	800a6be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a77c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a780:	d11b      	bne.n	800a7ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a78a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2220      	movs	r2, #32
 800a796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a6:	f043 0204 	orr.w	r2, r3, #4
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e000      	b.n	800a7bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bc80      	pop	{r7}
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e272      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 8087 	beq.w	800a8f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a7e8:	4b92      	ldr	r3, [pc, #584]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	f003 030c 	and.w	r3, r3, #12
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	d00c      	beq.n	800a80e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a7f4:	4b8f      	ldr	r3, [pc, #572]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f003 030c 	and.w	r3, r3, #12
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d112      	bne.n	800a826 <HAL_RCC_OscConfig+0x5e>
 800a800:	4b8c      	ldr	r3, [pc, #560]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a80c:	d10b      	bne.n	800a826 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a80e:	4b89      	ldr	r3, [pc, #548]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d06c      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x12c>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d168      	bne.n	800a8f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e24c      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a82e:	d106      	bne.n	800a83e <HAL_RCC_OscConfig+0x76>
 800a830:	4b80      	ldr	r3, [pc, #512]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a7f      	ldr	r2, [pc, #508]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	e02e      	b.n	800a89c <HAL_RCC_OscConfig+0xd4>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10c      	bne.n	800a860 <HAL_RCC_OscConfig+0x98>
 800a846:	4b7b      	ldr	r3, [pc, #492]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a7a      	ldr	r2, [pc, #488]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a84c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a850:	6013      	str	r3, [r2, #0]
 800a852:	4b78      	ldr	r3, [pc, #480]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a77      	ldr	r2, [pc, #476]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a85c:	6013      	str	r3, [r2, #0]
 800a85e:	e01d      	b.n	800a89c <HAL_RCC_OscConfig+0xd4>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a868:	d10c      	bne.n	800a884 <HAL_RCC_OscConfig+0xbc>
 800a86a:	4b72      	ldr	r3, [pc, #456]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a71      	ldr	r2, [pc, #452]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	4b6f      	ldr	r3, [pc, #444]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a6e      	ldr	r2, [pc, #440]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a87c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	e00b      	b.n	800a89c <HAL_RCC_OscConfig+0xd4>
 800a884:	4b6b      	ldr	r3, [pc, #428]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a6a      	ldr	r2, [pc, #424]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a88a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a88e:	6013      	str	r3, [r2, #0]
 800a890:	4b68      	ldr	r3, [pc, #416]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a67      	ldr	r2, [pc, #412]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a89a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d013      	beq.n	800a8cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8a4:	f7fd ff4c 	bl	8008740 <HAL_GetTick>
 800a8a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8aa:	e008      	b.n	800a8be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8ac:	f7fd ff48 	bl	8008740 <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	2b64      	cmp	r3, #100	; 0x64
 800a8b8:	d901      	bls.n	800a8be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e200      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8be:	4b5d      	ldr	r3, [pc, #372]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0f0      	beq.n	800a8ac <HAL_RCC_OscConfig+0xe4>
 800a8ca:	e014      	b.n	800a8f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8cc:	f7fd ff38 	bl	8008740 <HAL_GetTick>
 800a8d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8d2:	e008      	b.n	800a8e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8d4:	f7fd ff34 	bl	8008740 <HAL_GetTick>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2b64      	cmp	r3, #100	; 0x64
 800a8e0:	d901      	bls.n	800a8e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e1ec      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8e6:	4b53      	ldr	r3, [pc, #332]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1f0      	bne.n	800a8d4 <HAL_RCC_OscConfig+0x10c>
 800a8f2:	e000      	b.n	800a8f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0302 	and.w	r3, r3, #2
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d063      	beq.n	800a9ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a902:	4b4c      	ldr	r3, [pc, #304]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f003 030c 	and.w	r3, r3, #12
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00b      	beq.n	800a926 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a90e:	4b49      	ldr	r3, [pc, #292]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f003 030c 	and.w	r3, r3, #12
 800a916:	2b08      	cmp	r3, #8
 800a918:	d11c      	bne.n	800a954 <HAL_RCC_OscConfig+0x18c>
 800a91a:	4b46      	ldr	r3, [pc, #280]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d116      	bne.n	800a954 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a926:	4b43      	ldr	r3, [pc, #268]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d005      	beq.n	800a93e <HAL_RCC_OscConfig+0x176>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d001      	beq.n	800a93e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e1c0      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a93e:	4b3d      	ldr	r3, [pc, #244]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	4939      	ldr	r1, [pc, #228]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a94e:	4313      	orrs	r3, r2
 800a950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a952:	e03a      	b.n	800a9ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d020      	beq.n	800a99e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a95c:	4b36      	ldr	r3, [pc, #216]	; (800aa38 <HAL_RCC_OscConfig+0x270>)
 800a95e:	2201      	movs	r2, #1
 800a960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a962:	f7fd feed 	bl	8008740 <HAL_GetTick>
 800a966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a968:	e008      	b.n	800a97c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a96a:	f7fd fee9 	bl	8008740 <HAL_GetTick>
 800a96e:	4602      	mov	r2, r0
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	2b02      	cmp	r3, #2
 800a976:	d901      	bls.n	800a97c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a978:	2303      	movs	r3, #3
 800a97a:	e1a1      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a97c:	4b2d      	ldr	r3, [pc, #180]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d0f0      	beq.n	800a96a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a988:	4b2a      	ldr	r3, [pc, #168]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	00db      	lsls	r3, r3, #3
 800a996:	4927      	ldr	r1, [pc, #156]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a998:	4313      	orrs	r3, r2
 800a99a:	600b      	str	r3, [r1, #0]
 800a99c:	e015      	b.n	800a9ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a99e:	4b26      	ldr	r3, [pc, #152]	; (800aa38 <HAL_RCC_OscConfig+0x270>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9a4:	f7fd fecc 	bl	8008740 <HAL_GetTick>
 800a9a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9aa:	e008      	b.n	800a9be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9ac:	f7fd fec8 	bl	8008740 <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d901      	bls.n	800a9be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e180      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9be:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1f0      	bne.n	800a9ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0308 	and.w	r3, r3, #8
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d03a      	beq.n	800aa4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d019      	beq.n	800aa12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9de:	4b17      	ldr	r3, [pc, #92]	; (800aa3c <HAL_RCC_OscConfig+0x274>)
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9e4:	f7fd feac 	bl	8008740 <HAL_GetTick>
 800a9e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9ea:	e008      	b.n	800a9fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9ec:	f7fd fea8 	bl	8008740 <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d901      	bls.n	800a9fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e160      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9fe:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <HAL_RCC_OscConfig+0x26c>)
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0f0      	beq.n	800a9ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	f000 face 	bl	800afac <RCC_Delay>
 800aa10:	e01c      	b.n	800aa4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa12:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <HAL_RCC_OscConfig+0x274>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa18:	f7fd fe92 	bl	8008740 <HAL_GetTick>
 800aa1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa1e:	e00f      	b.n	800aa40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa20:	f7fd fe8e 	bl	8008740 <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d908      	bls.n	800aa40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e146      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
 800aa32:	bf00      	nop
 800aa34:	40021000 	.word	0x40021000
 800aa38:	42420000 	.word	0x42420000
 800aa3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa40:	4b92      	ldr	r3, [pc, #584]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	f003 0302 	and.w	r3, r3, #2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e9      	bne.n	800aa20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 0304 	and.w	r3, r3, #4
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 80a6 	beq.w	800aba6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa5e:	4b8b      	ldr	r3, [pc, #556]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10d      	bne.n	800aa86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa6a:	4b88      	ldr	r3, [pc, #544]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	4a87      	ldr	r2, [pc, #540]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aa70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa74:	61d3      	str	r3, [r2, #28]
 800aa76:	4b85      	ldr	r3, [pc, #532]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa7e:	60bb      	str	r3, [r7, #8]
 800aa80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa82:	2301      	movs	r3, #1
 800aa84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa86:	4b82      	ldr	r3, [pc, #520]	; (800ac90 <HAL_RCC_OscConfig+0x4c8>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d118      	bne.n	800aac4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa92:	4b7f      	ldr	r3, [pc, #508]	; (800ac90 <HAL_RCC_OscConfig+0x4c8>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a7e      	ldr	r2, [pc, #504]	; (800ac90 <HAL_RCC_OscConfig+0x4c8>)
 800aa98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa9e:	f7fd fe4f 	bl	8008740 <HAL_GetTick>
 800aaa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaa4:	e008      	b.n	800aab8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aaa6:	f7fd fe4b 	bl	8008740 <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	2b64      	cmp	r3, #100	; 0x64
 800aab2:	d901      	bls.n	800aab8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e103      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aab8:	4b75      	ldr	r3, [pc, #468]	; (800ac90 <HAL_RCC_OscConfig+0x4c8>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d0f0      	beq.n	800aaa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d106      	bne.n	800aada <HAL_RCC_OscConfig+0x312>
 800aacc:	4b6f      	ldr	r3, [pc, #444]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	4a6e      	ldr	r2, [pc, #440]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aad2:	f043 0301 	orr.w	r3, r3, #1
 800aad6:	6213      	str	r3, [r2, #32]
 800aad8:	e02d      	b.n	800ab36 <HAL_RCC_OscConfig+0x36e>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10c      	bne.n	800aafc <HAL_RCC_OscConfig+0x334>
 800aae2:	4b6a      	ldr	r3, [pc, #424]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	4a69      	ldr	r2, [pc, #420]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aae8:	f023 0301 	bic.w	r3, r3, #1
 800aaec:	6213      	str	r3, [r2, #32]
 800aaee:	4b67      	ldr	r3, [pc, #412]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	4a66      	ldr	r2, [pc, #408]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aaf4:	f023 0304 	bic.w	r3, r3, #4
 800aaf8:	6213      	str	r3, [r2, #32]
 800aafa:	e01c      	b.n	800ab36 <HAL_RCC_OscConfig+0x36e>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	2b05      	cmp	r3, #5
 800ab02:	d10c      	bne.n	800ab1e <HAL_RCC_OscConfig+0x356>
 800ab04:	4b61      	ldr	r3, [pc, #388]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	4a60      	ldr	r2, [pc, #384]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab0a:	f043 0304 	orr.w	r3, r3, #4
 800ab0e:	6213      	str	r3, [r2, #32]
 800ab10:	4b5e      	ldr	r3, [pc, #376]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	4a5d      	ldr	r2, [pc, #372]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab16:	f043 0301 	orr.w	r3, r3, #1
 800ab1a:	6213      	str	r3, [r2, #32]
 800ab1c:	e00b      	b.n	800ab36 <HAL_RCC_OscConfig+0x36e>
 800ab1e:	4b5b      	ldr	r3, [pc, #364]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	4a5a      	ldr	r2, [pc, #360]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab24:	f023 0301 	bic.w	r3, r3, #1
 800ab28:	6213      	str	r3, [r2, #32]
 800ab2a:	4b58      	ldr	r3, [pc, #352]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	4a57      	ldr	r2, [pc, #348]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab30:	f023 0304 	bic.w	r3, r3, #4
 800ab34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d015      	beq.n	800ab6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab3e:	f7fd fdff 	bl	8008740 <HAL_GetTick>
 800ab42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab44:	e00a      	b.n	800ab5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab46:	f7fd fdfb 	bl	8008740 <HAL_GetTick>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d901      	bls.n	800ab5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e0b1      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab5c:	4b4b      	ldr	r3, [pc, #300]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab5e:	6a1b      	ldr	r3, [r3, #32]
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d0ee      	beq.n	800ab46 <HAL_RCC_OscConfig+0x37e>
 800ab68:	e014      	b.n	800ab94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab6a:	f7fd fde9 	bl	8008740 <HAL_GetTick>
 800ab6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab70:	e00a      	b.n	800ab88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab72:	f7fd fde5 	bl	8008740 <HAL_GetTick>
 800ab76:	4602      	mov	r2, r0
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d901      	bls.n	800ab88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e09b      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab88:	4b40      	ldr	r3, [pc, #256]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	f003 0302 	and.w	r3, r3, #2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1ee      	bne.n	800ab72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d105      	bne.n	800aba6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab9a:	4b3c      	ldr	r3, [pc, #240]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	4a3b      	ldr	r2, [pc, #236]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800aba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aba4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 8087 	beq.w	800acbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abb0:	4b36      	ldr	r3, [pc, #216]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f003 030c 	and.w	r3, r3, #12
 800abb8:	2b08      	cmp	r3, #8
 800abba:	d061      	beq.n	800ac80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d146      	bne.n	800ac52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abc4:	4b33      	ldr	r3, [pc, #204]	; (800ac94 <HAL_RCC_OscConfig+0x4cc>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abca:	f7fd fdb9 	bl	8008740 <HAL_GetTick>
 800abce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abd0:	e008      	b.n	800abe4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abd2:	f7fd fdb5 	bl	8008740 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d901      	bls.n	800abe4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e06d      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abe4:	4b29      	ldr	r3, [pc, #164]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1f0      	bne.n	800abd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a1b      	ldr	r3, [r3, #32]
 800abf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf8:	d108      	bne.n	800ac0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800abfa:	4b24      	ldr	r3, [pc, #144]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	4921      	ldr	r1, [pc, #132]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac0c:	4b1f      	ldr	r3, [pc, #124]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a19      	ldr	r1, [r3, #32]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	491b      	ldr	r1, [pc, #108]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac24:	4b1b      	ldr	r3, [pc, #108]	; (800ac94 <HAL_RCC_OscConfig+0x4cc>)
 800ac26:	2201      	movs	r2, #1
 800ac28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac2a:	f7fd fd89 	bl	8008740 <HAL_GetTick>
 800ac2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac30:	e008      	b.n	800ac44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac32:	f7fd fd85 	bl	8008740 <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d901      	bls.n	800ac44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e03d      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac44:	4b11      	ldr	r3, [pc, #68]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0f0      	beq.n	800ac32 <HAL_RCC_OscConfig+0x46a>
 800ac50:	e035      	b.n	800acbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac52:	4b10      	ldr	r3, [pc, #64]	; (800ac94 <HAL_RCC_OscConfig+0x4cc>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac58:	f7fd fd72 	bl	8008740 <HAL_GetTick>
 800ac5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac5e:	e008      	b.n	800ac72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac60:	f7fd fd6e 	bl	8008740 <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d901      	bls.n	800ac72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	e026      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac72:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <HAL_RCC_OscConfig+0x4c4>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1f0      	bne.n	800ac60 <HAL_RCC_OscConfig+0x498>
 800ac7e:	e01e      	b.n	800acbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d107      	bne.n	800ac98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e019      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
 800ac8c:	40021000 	.word	0x40021000
 800ac90:	40007000 	.word	0x40007000
 800ac94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ac98:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <HAL_RCC_OscConfig+0x500>)
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a1b      	ldr	r3, [r3, #32]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d106      	bne.n	800acba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d001      	beq.n	800acbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e000      	b.n	800acc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	40021000 	.word	0x40021000

0800accc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e0d0      	b.n	800ae82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ace0:	4b6a      	ldr	r3, [pc, #424]	; (800ae8c <HAL_RCC_ClockConfig+0x1c0>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0307 	and.w	r3, r3, #7
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	429a      	cmp	r2, r3
 800acec:	d910      	bls.n	800ad10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acee:	4b67      	ldr	r3, [pc, #412]	; (800ae8c <HAL_RCC_ClockConfig+0x1c0>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f023 0207 	bic.w	r2, r3, #7
 800acf6:	4965      	ldr	r1, [pc, #404]	; (800ae8c <HAL_RCC_ClockConfig+0x1c0>)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acfe:	4b63      	ldr	r3, [pc, #396]	; (800ae8c <HAL_RCC_ClockConfig+0x1c0>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0307 	and.w	r3, r3, #7
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d001      	beq.n	800ad10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e0b8      	b.n	800ae82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d020      	beq.n	800ad5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0304 	and.w	r3, r3, #4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d005      	beq.n	800ad34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad28:	4b59      	ldr	r3, [pc, #356]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	4a58      	ldr	r2, [pc, #352]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ad2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0308 	and.w	r3, r3, #8
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad40:	4b53      	ldr	r3, [pc, #332]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	4a52      	ldr	r2, [pc, #328]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ad46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad4c:	4b50      	ldr	r3, [pc, #320]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	494d      	ldr	r1, [pc, #308]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d040      	beq.n	800adec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d107      	bne.n	800ad82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad72:	4b47      	ldr	r3, [pc, #284]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d115      	bne.n	800adaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e07f      	b.n	800ae82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d107      	bne.n	800ad9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad8a:	4b41      	ldr	r3, [pc, #260]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d109      	bne.n	800adaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e073      	b.n	800ae82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad9a:	4b3d      	ldr	r3, [pc, #244]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0302 	and.w	r3, r3, #2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e06b      	b.n	800ae82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800adaa:	4b39      	ldr	r3, [pc, #228]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	f023 0203 	bic.w	r2, r3, #3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	4936      	ldr	r1, [pc, #216]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800adb8:	4313      	orrs	r3, r2
 800adba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adbc:	f7fd fcc0 	bl	8008740 <HAL_GetTick>
 800adc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adc2:	e00a      	b.n	800adda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adc4:	f7fd fcbc 	bl	8008740 <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	f241 3288 	movw	r2, #5000	; 0x1388
 800add2:	4293      	cmp	r3, r2
 800add4:	d901      	bls.n	800adda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800add6:	2303      	movs	r3, #3
 800add8:	e053      	b.n	800ae82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adda:	4b2d      	ldr	r3, [pc, #180]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f003 020c 	and.w	r2, r3, #12
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	429a      	cmp	r2, r3
 800adea:	d1eb      	bne.n	800adc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800adec:	4b27      	ldr	r3, [pc, #156]	; (800ae8c <HAL_RCC_ClockConfig+0x1c0>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0307 	and.w	r3, r3, #7
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d210      	bcs.n	800ae1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adfa:	4b24      	ldr	r3, [pc, #144]	; (800ae8c <HAL_RCC_ClockConfig+0x1c0>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f023 0207 	bic.w	r2, r3, #7
 800ae02:	4922      	ldr	r1, [pc, #136]	; (800ae8c <HAL_RCC_ClockConfig+0x1c0>)
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae0a:	4b20      	ldr	r3, [pc, #128]	; (800ae8c <HAL_RCC_ClockConfig+0x1c0>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d001      	beq.n	800ae1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e032      	b.n	800ae82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d008      	beq.n	800ae3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae28:	4b19      	ldr	r3, [pc, #100]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	4916      	ldr	r1, [pc, #88]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0308 	and.w	r3, r3, #8
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d009      	beq.n	800ae5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae46:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	490e      	ldr	r1, [pc, #56]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae5a:	f000 f821 	bl	800aea0 <HAL_RCC_GetSysClockFreq>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	4b0b      	ldr	r3, [pc, #44]	; (800ae90 <HAL_RCC_ClockConfig+0x1c4>)
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	091b      	lsrs	r3, r3, #4
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	490a      	ldr	r1, [pc, #40]	; (800ae94 <HAL_RCC_ClockConfig+0x1c8>)
 800ae6c:	5ccb      	ldrb	r3, [r1, r3]
 800ae6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae72:	4a09      	ldr	r2, [pc, #36]	; (800ae98 <HAL_RCC_ClockConfig+0x1cc>)
 800ae74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ae76:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <HAL_RCC_ClockConfig+0x1d0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fd fc1e 	bl	80086bc <HAL_InitTick>

  return HAL_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	40022000 	.word	0x40022000
 800ae90:	40021000 	.word	0x40021000
 800ae94:	0800dd00 	.word	0x0800dd00
 800ae98:	200000a0 	.word	0x200000a0
 800ae9c:	200000a4 	.word	0x200000a4

0800aea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	60bb      	str	r3, [r7, #8]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aeba:	4b1e      	ldr	r3, [pc, #120]	; (800af34 <HAL_RCC_GetSysClockFreq+0x94>)
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f003 030c 	and.w	r3, r3, #12
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	d002      	beq.n	800aed0 <HAL_RCC_GetSysClockFreq+0x30>
 800aeca:	2b08      	cmp	r3, #8
 800aecc:	d003      	beq.n	800aed6 <HAL_RCC_GetSysClockFreq+0x36>
 800aece:	e027      	b.n	800af20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aed0:	4b19      	ldr	r3, [pc, #100]	; (800af38 <HAL_RCC_GetSysClockFreq+0x98>)
 800aed2:	613b      	str	r3, [r7, #16]
      break;
 800aed4:	e027      	b.n	800af26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	0c9b      	lsrs	r3, r3, #18
 800aeda:	f003 030f 	and.w	r3, r3, #15
 800aede:	4a17      	ldr	r2, [pc, #92]	; (800af3c <HAL_RCC_GetSysClockFreq+0x9c>)
 800aee0:	5cd3      	ldrb	r3, [r2, r3]
 800aee2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d010      	beq.n	800af10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aeee:	4b11      	ldr	r3, [pc, #68]	; (800af34 <HAL_RCC_GetSysClockFreq+0x94>)
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	0c5b      	lsrs	r3, r3, #17
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	4a11      	ldr	r2, [pc, #68]	; (800af40 <HAL_RCC_GetSysClockFreq+0xa0>)
 800aefa:	5cd3      	ldrb	r3, [r2, r3]
 800aefc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a0d      	ldr	r2, [pc, #52]	; (800af38 <HAL_RCC_GetSysClockFreq+0x98>)
 800af02:	fb03 f202 	mul.w	r2, r3, r2
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0c:	617b      	str	r3, [r7, #20]
 800af0e:	e004      	b.n	800af1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a0c      	ldr	r2, [pc, #48]	; (800af44 <HAL_RCC_GetSysClockFreq+0xa4>)
 800af14:	fb02 f303 	mul.w	r3, r2, r3
 800af18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	613b      	str	r3, [r7, #16]
      break;
 800af1e:	e002      	b.n	800af26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af20:	4b05      	ldr	r3, [pc, #20]	; (800af38 <HAL_RCC_GetSysClockFreq+0x98>)
 800af22:	613b      	str	r3, [r7, #16]
      break;
 800af24:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af26:	693b      	ldr	r3, [r7, #16]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	371c      	adds	r7, #28
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bc80      	pop	{r7}
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	40021000 	.word	0x40021000
 800af38:	007a1200 	.word	0x007a1200
 800af3c:	0800dd18 	.word	0x0800dd18
 800af40:	0800dd28 	.word	0x0800dd28
 800af44:	003d0900 	.word	0x003d0900

0800af48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af4c:	4b02      	ldr	r3, [pc, #8]	; (800af58 <HAL_RCC_GetHCLKFreq+0x10>)
 800af4e:	681b      	ldr	r3, [r3, #0]
}
 800af50:	4618      	mov	r0, r3
 800af52:	46bd      	mov	sp, r7
 800af54:	bc80      	pop	{r7}
 800af56:	4770      	bx	lr
 800af58:	200000a0 	.word	0x200000a0

0800af5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af60:	f7ff fff2 	bl	800af48 <HAL_RCC_GetHCLKFreq>
 800af64:	4602      	mov	r2, r0
 800af66:	4b05      	ldr	r3, [pc, #20]	; (800af7c <HAL_RCC_GetPCLK1Freq+0x20>)
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	0a1b      	lsrs	r3, r3, #8
 800af6c:	f003 0307 	and.w	r3, r3, #7
 800af70:	4903      	ldr	r1, [pc, #12]	; (800af80 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af72:	5ccb      	ldrb	r3, [r1, r3]
 800af74:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af78:	4618      	mov	r0, r3
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	40021000 	.word	0x40021000
 800af80:	0800dd10 	.word	0x0800dd10

0800af84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af88:	f7ff ffde 	bl	800af48 <HAL_RCC_GetHCLKFreq>
 800af8c:	4602      	mov	r2, r0
 800af8e:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	0adb      	lsrs	r3, r3, #11
 800af94:	f003 0307 	and.w	r3, r3, #7
 800af98:	4903      	ldr	r1, [pc, #12]	; (800afa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af9a:	5ccb      	ldrb	r3, [r1, r3]
 800af9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	40021000 	.word	0x40021000
 800afa8:	0800dd10 	.word	0x0800dd10

0800afac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800afb4:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <RCC_Delay+0x34>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a0a      	ldr	r2, [pc, #40]	; (800afe4 <RCC_Delay+0x38>)
 800afba:	fba2 2303 	umull	r2, r3, r2, r3
 800afbe:	0a5b      	lsrs	r3, r3, #9
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	fb02 f303 	mul.w	r3, r2, r3
 800afc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800afc8:	bf00      	nop
  }
  while (Delay --);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	1e5a      	subs	r2, r3, #1
 800afce:	60fa      	str	r2, [r7, #12]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1f9      	bne.n	800afc8 <RCC_Delay+0x1c>
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	bc80      	pop	{r7}
 800afde:	4770      	bx	lr
 800afe0:	200000a0 	.word	0x200000a0
 800afe4:	10624dd3 	.word	0x10624dd3

0800afe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e041      	b.n	800b07e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d106      	bne.n	800b014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7fd fa26 	bl	8008460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2202      	movs	r2, #2
 800b018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3304      	adds	r3, #4
 800b024:	4619      	mov	r1, r3
 800b026:	4610      	mov	r0, r2
 800b028:	f000 fa82 	bl	800b530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d001      	beq.n	800b0a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e044      	b.n	800b12a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68da      	ldr	r2, [r3, #12]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f042 0201 	orr.w	r2, r2, #1
 800b0b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a1d      	ldr	r2, [pc, #116]	; (800b134 <HAL_TIM_Base_Start_IT+0xac>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d018      	beq.n	800b0f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a1c      	ldr	r2, [pc, #112]	; (800b138 <HAL_TIM_Base_Start_IT+0xb0>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d013      	beq.n	800b0f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0d4:	d00e      	beq.n	800b0f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a18      	ldr	r2, [pc, #96]	; (800b13c <HAL_TIM_Base_Start_IT+0xb4>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d009      	beq.n	800b0f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a16      	ldr	r2, [pc, #88]	; (800b140 <HAL_TIM_Base_Start_IT+0xb8>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d004      	beq.n	800b0f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a15      	ldr	r2, [pc, #84]	; (800b144 <HAL_TIM_Base_Start_IT+0xbc>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d111      	bne.n	800b118 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	f003 0307 	and.w	r3, r3, #7
 800b0fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b06      	cmp	r3, #6
 800b104:	d010      	beq.n	800b128 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f042 0201 	orr.w	r2, r2, #1
 800b114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b116:	e007      	b.n	800b128 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0201 	orr.w	r2, r2, #1
 800b126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	bc80      	pop	{r7}
 800b132:	4770      	bx	lr
 800b134:	40012c00 	.word	0x40012c00
 800b138:	40013400 	.word	0x40013400
 800b13c:	40000400 	.word	0x40000400
 800b140:	40000800 	.word	0x40000800
 800b144:	40000c00 	.word	0x40000c00

0800b148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	f003 0302 	and.w	r3, r3, #2
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d122      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	f003 0302 	and.w	r3, r3, #2
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d11b      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f06f 0202 	mvn.w	r2, #2
 800b174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	f003 0303 	and.w	r3, r3, #3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f9b4 	bl	800b4f8 <HAL_TIM_IC_CaptureCallback>
 800b190:	e005      	b.n	800b19e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f9a7 	bl	800b4e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f9b6 	bl	800b50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	f003 0304 	and.w	r3, r3, #4
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	d122      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d11b      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f06f 0204 	mvn.w	r2, #4
 800b1c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f98a 	bl	800b4f8 <HAL_TIM_IC_CaptureCallback>
 800b1e4:	e005      	b.n	800b1f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f97d 	bl	800b4e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f98c 	bl	800b50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0308 	and.w	r3, r3, #8
 800b202:	2b08      	cmp	r3, #8
 800b204:	d122      	bne.n	800b24c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0308 	and.w	r3, r3, #8
 800b210:	2b08      	cmp	r3, #8
 800b212:	d11b      	bne.n	800b24c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f06f 0208 	mvn.w	r2, #8
 800b21c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2204      	movs	r2, #4
 800b222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f960 	bl	800b4f8 <HAL_TIM_IC_CaptureCallback>
 800b238:	e005      	b.n	800b246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f953 	bl	800b4e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f962 	bl	800b50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f003 0310 	and.w	r3, r3, #16
 800b256:	2b10      	cmp	r3, #16
 800b258:	d122      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	f003 0310 	and.w	r3, r3, #16
 800b264:	2b10      	cmp	r3, #16
 800b266:	d11b      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f06f 0210 	mvn.w	r2, #16
 800b270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2208      	movs	r2, #8
 800b276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f936 	bl	800b4f8 <HAL_TIM_IC_CaptureCallback>
 800b28c:	e005      	b.n	800b29a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f929 	bl	800b4e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f938 	bl	800b50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d10e      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d107      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f06f 0201 	mvn.w	r2, #1
 800b2c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7fc fd62 	bl	8007d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d6:	2b80      	cmp	r3, #128	; 0x80
 800b2d8:	d10e      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2e4:	2b80      	cmp	r3, #128	; 0x80
 800b2e6:	d107      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 faa1 	bl	800b83a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b302:	2b40      	cmp	r3, #64	; 0x40
 800b304:	d10e      	bne.n	800b324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b310:	2b40      	cmp	r3, #64	; 0x40
 800b312:	d107      	bne.n	800b324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b31c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f8fc 	bl	800b51c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b20      	cmp	r3, #32
 800b330:	d10e      	bne.n	800b350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	d107      	bne.n	800b350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f06f 0220 	mvn.w	r2, #32
 800b348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fa6c 	bl	800b828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d101      	bne.n	800b374 <HAL_TIM_ConfigClockSource+0x1c>
 800b370:	2302      	movs	r3, #2
 800b372:	e0b4      	b.n	800b4de <HAL_TIM_ConfigClockSource+0x186>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2202      	movs	r2, #2
 800b380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b39a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ac:	d03e      	beq.n	800b42c <HAL_TIM_ConfigClockSource+0xd4>
 800b3ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3b2:	f200 8087 	bhi.w	800b4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ba:	f000 8086 	beq.w	800b4ca <HAL_TIM_ConfigClockSource+0x172>
 800b3be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3c2:	d87f      	bhi.n	800b4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3c4:	2b70      	cmp	r3, #112	; 0x70
 800b3c6:	d01a      	beq.n	800b3fe <HAL_TIM_ConfigClockSource+0xa6>
 800b3c8:	2b70      	cmp	r3, #112	; 0x70
 800b3ca:	d87b      	bhi.n	800b4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3cc:	2b60      	cmp	r3, #96	; 0x60
 800b3ce:	d050      	beq.n	800b472 <HAL_TIM_ConfigClockSource+0x11a>
 800b3d0:	2b60      	cmp	r3, #96	; 0x60
 800b3d2:	d877      	bhi.n	800b4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3d4:	2b50      	cmp	r3, #80	; 0x50
 800b3d6:	d03c      	beq.n	800b452 <HAL_TIM_ConfigClockSource+0xfa>
 800b3d8:	2b50      	cmp	r3, #80	; 0x50
 800b3da:	d873      	bhi.n	800b4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3dc:	2b40      	cmp	r3, #64	; 0x40
 800b3de:	d058      	beq.n	800b492 <HAL_TIM_ConfigClockSource+0x13a>
 800b3e0:	2b40      	cmp	r3, #64	; 0x40
 800b3e2:	d86f      	bhi.n	800b4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3e4:	2b30      	cmp	r3, #48	; 0x30
 800b3e6:	d064      	beq.n	800b4b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b3e8:	2b30      	cmp	r3, #48	; 0x30
 800b3ea:	d86b      	bhi.n	800b4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3ec:	2b20      	cmp	r3, #32
 800b3ee:	d060      	beq.n	800b4b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b3f0:	2b20      	cmp	r3, #32
 800b3f2:	d867      	bhi.n	800b4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d05c      	beq.n	800b4b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b3f8:	2b10      	cmp	r3, #16
 800b3fa:	d05a      	beq.n	800b4b2 <HAL_TIM_ConfigClockSource+0x15a>
 800b3fc:	e062      	b.n	800b4c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b40e:	f000 f980 	bl	800b712 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	609a      	str	r2, [r3, #8]
      break;
 800b42a:	e04f      	b.n	800b4cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b43c:	f000 f969 	bl	800b712 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689a      	ldr	r2, [r3, #8]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b44e:	609a      	str	r2, [r3, #8]
      break;
 800b450:	e03c      	b.n	800b4cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b45e:	461a      	mov	r2, r3
 800b460:	f000 f8e0 	bl	800b624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2150      	movs	r1, #80	; 0x50
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 f937 	bl	800b6de <TIM_ITRx_SetConfig>
      break;
 800b470:	e02c      	b.n	800b4cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b47e:	461a      	mov	r2, r3
 800b480:	f000 f8fe 	bl	800b680 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2160      	movs	r1, #96	; 0x60
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 f927 	bl	800b6de <TIM_ITRx_SetConfig>
      break;
 800b490:	e01c      	b.n	800b4cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b49e:	461a      	mov	r2, r3
 800b4a0:	f000 f8c0 	bl	800b624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2140      	movs	r1, #64	; 0x40
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 f917 	bl	800b6de <TIM_ITRx_SetConfig>
      break;
 800b4b0:	e00c      	b.n	800b4cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4610      	mov	r0, r2
 800b4be:	f000 f90e 	bl	800b6de <TIM_ITRx_SetConfig>
      break;
 800b4c2:	e003      	b.n	800b4cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4c8:	e000      	b.n	800b4cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b4ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b083      	sub	sp, #12
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4ee:	bf00      	nop
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bc80      	pop	{r7}
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	bc80      	pop	{r7}
 800b508:	4770      	bx	lr

0800b50a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b512:	bf00      	nop
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	bc80      	pop	{r7}
 800b51a:	4770      	bx	lr

0800b51c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	bc80      	pop	{r7}
 800b52c:	4770      	bx	lr
	...

0800b530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a33      	ldr	r2, [pc, #204]	; (800b610 <TIM_Base_SetConfig+0xe0>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d013      	beq.n	800b570 <TIM_Base_SetConfig+0x40>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a32      	ldr	r2, [pc, #200]	; (800b614 <TIM_Base_SetConfig+0xe4>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d00f      	beq.n	800b570 <TIM_Base_SetConfig+0x40>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b556:	d00b      	beq.n	800b570 <TIM_Base_SetConfig+0x40>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a2f      	ldr	r2, [pc, #188]	; (800b618 <TIM_Base_SetConfig+0xe8>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d007      	beq.n	800b570 <TIM_Base_SetConfig+0x40>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a2e      	ldr	r2, [pc, #184]	; (800b61c <TIM_Base_SetConfig+0xec>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d003      	beq.n	800b570 <TIM_Base_SetConfig+0x40>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a2d      	ldr	r2, [pc, #180]	; (800b620 <TIM_Base_SetConfig+0xf0>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d108      	bne.n	800b582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4313      	orrs	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a22      	ldr	r2, [pc, #136]	; (800b610 <TIM_Base_SetConfig+0xe0>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d013      	beq.n	800b5b2 <TIM_Base_SetConfig+0x82>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a21      	ldr	r2, [pc, #132]	; (800b614 <TIM_Base_SetConfig+0xe4>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d00f      	beq.n	800b5b2 <TIM_Base_SetConfig+0x82>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b598:	d00b      	beq.n	800b5b2 <TIM_Base_SetConfig+0x82>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a1e      	ldr	r2, [pc, #120]	; (800b618 <TIM_Base_SetConfig+0xe8>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d007      	beq.n	800b5b2 <TIM_Base_SetConfig+0x82>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a1d      	ldr	r2, [pc, #116]	; (800b61c <TIM_Base_SetConfig+0xec>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d003      	beq.n	800b5b2 <TIM_Base_SetConfig+0x82>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a1c      	ldr	r2, [pc, #112]	; (800b620 <TIM_Base_SetConfig+0xf0>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d108      	bne.n	800b5c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	689a      	ldr	r2, [r3, #8]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a09      	ldr	r2, [pc, #36]	; (800b610 <TIM_Base_SetConfig+0xe0>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d003      	beq.n	800b5f8 <TIM_Base_SetConfig+0xc8>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a08      	ldr	r2, [pc, #32]	; (800b614 <TIM_Base_SetConfig+0xe4>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d103      	bne.n	800b600 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	691a      	ldr	r2, [r3, #16]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	615a      	str	r2, [r3, #20]
}
 800b606:	bf00      	nop
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bc80      	pop	{r7}
 800b60e:	4770      	bx	lr
 800b610:	40012c00 	.word	0x40012c00
 800b614:	40013400 	.word	0x40013400
 800b618:	40000400 	.word	0x40000400
 800b61c:	40000800 	.word	0x40000800
 800b620:	40000c00 	.word	0x40000c00

0800b624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b624:	b480      	push	{r7}
 800b626:	b087      	sub	sp, #28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6a1b      	ldr	r3, [r3, #32]
 800b634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	f023 0201 	bic.w	r2, r3, #1
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b64e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	011b      	lsls	r3, r3, #4
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	4313      	orrs	r3, r2
 800b658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f023 030a 	bic.w	r3, r3, #10
 800b660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	4313      	orrs	r3, r2
 800b668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	697a      	ldr	r2, [r7, #20]
 800b674:	621a      	str	r2, [r3, #32]
}
 800b676:	bf00      	nop
 800b678:	371c      	adds	r7, #28
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bc80      	pop	{r7}
 800b67e:	4770      	bx	lr

0800b680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b680:	b480      	push	{r7}
 800b682:	b087      	sub	sp, #28
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6a1b      	ldr	r3, [r3, #32]
 800b690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	f023 0210 	bic.w	r2, r3, #16
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b6aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	031b      	lsls	r3, r3, #12
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	011b      	lsls	r3, r3, #4
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	621a      	str	r2, [r3, #32]
}
 800b6d4:	bf00      	nop
 800b6d6:	371c      	adds	r7, #28
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bc80      	pop	{r7}
 800b6dc:	4770      	bx	lr

0800b6de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b085      	sub	sp, #20
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	f043 0307 	orr.w	r3, r3, #7
 800b700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	609a      	str	r2, [r3, #8]
}
 800b708:	bf00      	nop
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bc80      	pop	{r7}
 800b710:	4770      	bx	lr

0800b712 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b712:	b480      	push	{r7}
 800b714:	b087      	sub	sp, #28
 800b716:	af00      	add	r7, sp, #0
 800b718:	60f8      	str	r0, [r7, #12]
 800b71a:	60b9      	str	r1, [r7, #8]
 800b71c:	607a      	str	r2, [r7, #4]
 800b71e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b72c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	021a      	lsls	r2, r3, #8
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	431a      	orrs	r2, r3
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	4313      	orrs	r3, r2
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	609a      	str	r2, [r3, #8]
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bc80      	pop	{r7}
 800b74e:	4770      	bx	lr

0800b750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b760:	2b01      	cmp	r3, #1
 800b762:	d101      	bne.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b764:	2302      	movs	r3, #2
 800b766:	e050      	b.n	800b80a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2202      	movs	r2, #2
 800b774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b78e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	4313      	orrs	r3, r2
 800b798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a1b      	ldr	r2, [pc, #108]	; (800b814 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d018      	beq.n	800b7de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a19      	ldr	r2, [pc, #100]	; (800b818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d013      	beq.n	800b7de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7be:	d00e      	beq.n	800b7de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a15      	ldr	r2, [pc, #84]	; (800b81c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d009      	beq.n	800b7de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a14      	ldr	r2, [pc, #80]	; (800b820 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d004      	beq.n	800b7de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a12      	ldr	r2, [pc, #72]	; (800b824 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d10c      	bne.n	800b7f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	bc80      	pop	{r7}
 800b812:	4770      	bx	lr
 800b814:	40012c00 	.word	0x40012c00
 800b818:	40013400 	.word	0x40013400
 800b81c:	40000400 	.word	0x40000400
 800b820:	40000800 	.word	0x40000800
 800b824:	40000c00 	.word	0x40000c00

0800b828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	bc80      	pop	{r7}
 800b838:	4770      	bx	lr

0800b83a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b083      	sub	sp, #12
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b842:	bf00      	nop
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	bc80      	pop	{r7}
 800b84a:	4770      	bx	lr

0800b84c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e042      	b.n	800b8e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d106      	bne.n	800b878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7fc fe1a 	bl	80084ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2224      	movs	r2, #36	; 0x24
 800b87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68da      	ldr	r2, [r3, #12]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b88e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fcb5 	bl	800c200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	691a      	ldr	r2, [r3, #16]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	695a      	ldr	r2, [r3, #20]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2220      	movs	r2, #32
 800b8d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2220      	movs	r2, #32
 800b8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b900:	b2db      	uxtb	r3, r3
 800b902:	2b20      	cmp	r3, #32
 800b904:	d121      	bne.n	800b94a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <HAL_UART_Transmit_IT+0x26>
 800b90c:	88fb      	ldrh	r3, [r7, #6]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e01a      	b.n	800b94c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	88fa      	ldrh	r2, [r7, #6]
 800b920:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	88fa      	ldrh	r2, [r7, #6]
 800b926:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2221      	movs	r2, #33	; 0x21
 800b932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68da      	ldr	r2, [r3, #12]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b944:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	e000      	b.n	800b94c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b94a:	2302      	movs	r3, #2
  }
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	bc80      	pop	{r7}
 800b954:	4770      	bx	lr
	...

0800b958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b0ba      	sub	sp, #232	; 0xe8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b97e:	2300      	movs	r3, #0
 800b980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b984:	2300      	movs	r3, #0
 800b986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b98e:	f003 030f 	and.w	r3, r3, #15
 800b992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10f      	bne.n	800b9be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b99e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a2:	f003 0320 	and.w	r3, r3, #32
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d009      	beq.n	800b9be <HAL_UART_IRQHandler+0x66>
 800b9aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9ae:	f003 0320 	and.w	r3, r3, #32
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fb63 	bl	800c082 <UART_Receive_IT>
      return;
 800b9bc:	e25b      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 80de 	beq.w	800bb84 <HAL_UART_IRQHandler+0x22c>
 800b9c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d106      	bne.n	800b9e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 80d1 	beq.w	800bb84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00b      	beq.n	800ba06 <HAL_UART_IRQHandler+0xae>
 800b9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d005      	beq.n	800ba06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fe:	f043 0201 	orr.w	r2, r3, #1
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba0a:	f003 0304 	and.w	r3, r3, #4
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <HAL_UART_IRQHandler+0xd2>
 800ba12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d005      	beq.n	800ba2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba22:	f043 0202 	orr.w	r2, r3, #2
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba2e:	f003 0302 	and.w	r3, r3, #2
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00b      	beq.n	800ba4e <HAL_UART_IRQHandler+0xf6>
 800ba36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d005      	beq.n	800ba4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba46:	f043 0204 	orr.w	r2, r3, #4
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba52:	f003 0308 	and.w	r3, r3, #8
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d011      	beq.n	800ba7e <HAL_UART_IRQHandler+0x126>
 800ba5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5e:	f003 0320 	and.w	r3, r3, #32
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d005      	beq.n	800ba7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba76:	f043 0208 	orr.w	r2, r3, #8
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 81f2 	beq.w	800be6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba8c:	f003 0320 	and.w	r3, r3, #32
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <HAL_UART_IRQHandler+0x14e>
 800ba94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba98:	f003 0320 	and.w	r3, r3, #32
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 faee 	bl	800c082 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	bf14      	ite	ne
 800bab4:	2301      	movne	r3, #1
 800bab6:	2300      	moveq	r3, #0
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac2:	f003 0308 	and.w	r3, r3, #8
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d103      	bne.n	800bad2 <HAL_UART_IRQHandler+0x17a>
 800baca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d04f      	beq.n	800bb72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f9f8 	bl	800bec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d041      	beq.n	800bb6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3314      	adds	r3, #20
 800baec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800baf4:	e853 3f00 	ldrex	r3, [r3]
 800baf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bafc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	3314      	adds	r3, #20
 800bb0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb22:	e841 2300 	strex	r3, r2, [r1]
 800bb26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1d9      	bne.n	800bae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d013      	beq.n	800bb62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3e:	4a7e      	ldr	r2, [pc, #504]	; (800bd38 <HAL_UART_IRQHandler+0x3e0>)
 800bb40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fd f86c 	bl	8008c24 <HAL_DMA_Abort_IT>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d016      	beq.n	800bb80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb60:	e00e      	b.n	800bb80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f99c 	bl	800bea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb68:	e00a      	b.n	800bb80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f998 	bl	800bea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb70:	e006      	b.n	800bb80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f994 	bl	800bea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bb7e:	e175      	b.n	800be6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb80:	bf00      	nop
    return;
 800bb82:	e173      	b.n	800be6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	f040 814f 	bne.w	800be2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bb8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb92:	f003 0310 	and.w	r3, r3, #16
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f000 8148 	beq.w	800be2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba0:	f003 0310 	and.w	r3, r3, #16
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 8141 	beq.w	800be2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60bb      	str	r3, [r7, #8]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	60bb      	str	r3, [r7, #8]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	60bb      	str	r3, [r7, #8]
 800bbbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	695b      	ldr	r3, [r3, #20]
 800bbc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 80b6 	beq.w	800bd3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f000 8145 	beq.w	800be70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	f080 813e 	bcs.w	800be70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc00:	699b      	ldr	r3, [r3, #24]
 800bc02:	2b20      	cmp	r3, #32
 800bc04:	f000 8088 	beq.w	800bd18 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	330c      	adds	r3, #12
 800bc0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc16:	e853 3f00 	ldrex	r3, [r3]
 800bc1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	330c      	adds	r3, #12
 800bc30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc34:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc44:	e841 2300 	strex	r3, r2, [r1]
 800bc48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1d9      	bne.n	800bc08 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	3314      	adds	r3, #20
 800bc5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc5e:	e853 3f00 	ldrex	r3, [r3]
 800bc62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc66:	f023 0301 	bic.w	r3, r3, #1
 800bc6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3314      	adds	r3, #20
 800bc74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc84:	e841 2300 	strex	r3, r2, [r1]
 800bc88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1e1      	bne.n	800bc54 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3314      	adds	r3, #20
 800bc96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc9a:	e853 3f00 	ldrex	r3, [r3]
 800bc9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3314      	adds	r3, #20
 800bcb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bcb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bcb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bcba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bcbc:	e841 2300 	strex	r3, r2, [r1]
 800bcc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1e3      	bne.n	800bc90 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	330c      	adds	r3, #12
 800bcdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce0:	e853 3f00 	ldrex	r3, [r3]
 800bce4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bce8:	f023 0310 	bic.w	r3, r3, #16
 800bcec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	330c      	adds	r3, #12
 800bcf6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bcfa:	65ba      	str	r2, [r7, #88]	; 0x58
 800bcfc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd02:	e841 2300 	strex	r3, r2, [r1]
 800bd06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1e3      	bne.n	800bcd6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fc ff4b 	bl	8008bae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f8bf 	bl	800beb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd34:	e09c      	b.n	800be70 <HAL_UART_IRQHandler+0x518>
 800bd36:	bf00      	nop
 800bd38:	0800bf8d 	.word	0x0800bf8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 808e 	beq.w	800be74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8089 	beq.w	800be74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	330c      	adds	r3, #12
 800bd68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6c:	e853 3f00 	ldrex	r3, [r3]
 800bd70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	330c      	adds	r3, #12
 800bd82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd86:	647a      	str	r2, [r7, #68]	; 0x44
 800bd88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1e3      	bne.n	800bd62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3314      	adds	r3, #20
 800bda0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda4:	e853 3f00 	ldrex	r3, [r3]
 800bda8:	623b      	str	r3, [r7, #32]
   return(result);
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	f023 0301 	bic.w	r3, r3, #1
 800bdb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3314      	adds	r3, #20
 800bdba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdbe:	633a      	str	r2, [r7, #48]	; 0x30
 800bdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc6:	e841 2300 	strex	r3, r2, [r1]
 800bdca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e3      	bne.n	800bd9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	330c      	adds	r3, #12
 800bde6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	e853 3f00 	ldrex	r3, [r3]
 800bdee:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f023 0310 	bic.w	r3, r3, #16
 800bdf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	330c      	adds	r3, #12
 800be00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be04:	61fa      	str	r2, [r7, #28]
 800be06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be08:	69b9      	ldr	r1, [r7, #24]
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	e841 2300 	strex	r3, r2, [r1]
 800be10:	617b      	str	r3, [r7, #20]
   return(result);
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e3      	bne.n	800bde0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2202      	movs	r2, #2
 800be1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f844 	bl	800beb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be2a:	e023      	b.n	800be74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be34:	2b00      	cmp	r3, #0
 800be36:	d009      	beq.n	800be4c <HAL_UART_IRQHandler+0x4f4>
 800be38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be40:	2b00      	cmp	r3, #0
 800be42:	d003      	beq.n	800be4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f8b5 	bl	800bfb4 <UART_Transmit_IT>
    return;
 800be4a:	e014      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00e      	beq.n	800be76 <HAL_UART_IRQHandler+0x51e>
 800be58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be60:	2b00      	cmp	r3, #0
 800be62:	d008      	beq.n	800be76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f8f4 	bl	800c052 <UART_EndTransmit_IT>
    return;
 800be6a:	e004      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
    return;
 800be6c:	bf00      	nop
 800be6e:	e002      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
      return;
 800be70:	bf00      	nop
 800be72:	e000      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
      return;
 800be74:	bf00      	nop
  }
}
 800be76:	37e8      	adds	r7, #232	; 0xe8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	bc80      	pop	{r7}
 800be8c:	4770      	bx	lr

0800be8e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be8e:	b480      	push	{r7}
 800be90:	b083      	sub	sp, #12
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800be96:	bf00      	nop
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bc80      	pop	{r7}
 800be9e:	4770      	bx	lr

0800bea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bea8:	bf00      	nop
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	bc80      	pop	{r7}
 800beb0:	4770      	bx	lr

0800beb2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b083      	sub	sp, #12
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	460b      	mov	r3, r1
 800bebc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bebe:	bf00      	nop
 800bec0:	370c      	adds	r7, #12
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bc80      	pop	{r7}
 800bec6:	4770      	bx	lr

0800bec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bec8:	b480      	push	{r7}
 800beca:	b095      	sub	sp, #84	; 0x54
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	330c      	adds	r3, #12
 800bed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beda:	e853 3f00 	ldrex	r3, [r3]
 800bede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	330c      	adds	r3, #12
 800beee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bef0:	643a      	str	r2, [r7, #64]	; 0x40
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bef8:	e841 2300 	strex	r3, r2, [r1]
 800befc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800befe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1e5      	bne.n	800bed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3314      	adds	r3, #20
 800bf0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0c:	6a3b      	ldr	r3, [r7, #32]
 800bf0e:	e853 3f00 	ldrex	r3, [r3]
 800bf12:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	f023 0301 	bic.w	r3, r3, #1
 800bf1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3314      	adds	r3, #20
 800bf22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e5      	bne.n	800bf04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d119      	bne.n	800bf74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	330c      	adds	r3, #12
 800bf46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	e853 3f00 	ldrex	r3, [r3]
 800bf4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	f023 0310 	bic.w	r3, r3, #16
 800bf56:	647b      	str	r3, [r7, #68]	; 0x44
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	330c      	adds	r3, #12
 800bf5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf60:	61ba      	str	r2, [r7, #24]
 800bf62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf64:	6979      	ldr	r1, [r7, #20]
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	e841 2300 	strex	r3, r2, [r1]
 800bf6c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1e5      	bne.n	800bf40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2220      	movs	r2, #32
 800bf78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf82:	bf00      	nop
 800bf84:	3754      	adds	r7, #84	; 0x54
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bc80      	pop	{r7}
 800bf8a:	4770      	bx	lr

0800bf8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f7ff ff7a 	bl	800bea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfac:	bf00      	nop
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b21      	cmp	r3, #33	; 0x21
 800bfc6:	d13e      	bne.n	800c046 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd0:	d114      	bne.n	800bffc <UART_Transmit_IT+0x48>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d110      	bne.n	800bffc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a1b      	ldr	r3, [r3, #32]
 800bff4:	1c9a      	adds	r2, r3, #2
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	621a      	str	r2, [r3, #32]
 800bffa:	e008      	b.n	800c00e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	1c59      	adds	r1, r3, #1
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	6211      	str	r1, [r2, #32]
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c012:	b29b      	uxth	r3, r3
 800c014:	3b01      	subs	r3, #1
 800c016:	b29b      	uxth	r3, r3
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	4619      	mov	r1, r3
 800c01c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10f      	bne.n	800c042 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68da      	ldr	r2, [r3, #12]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c030:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c040:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	e000      	b.n	800c048 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c046:	2302      	movs	r3, #2
  }
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3714      	adds	r7, #20
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bc80      	pop	{r7}
 800c050:	4770      	bx	lr

0800c052 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c052:	b580      	push	{r7, lr}
 800c054:	b082      	sub	sp, #8
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c068:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2220      	movs	r2, #32
 800c06e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7ff ff02 	bl	800be7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b08c      	sub	sp, #48	; 0x30
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b22      	cmp	r3, #34	; 0x22
 800c094:	f040 80ae 	bne.w	800c1f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a0:	d117      	bne.n	800c0d2 <UART_Receive_IT+0x50>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d113      	bne.n	800c0d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ca:	1c9a      	adds	r2, r3, #2
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	629a      	str	r2, [r3, #40]	; 0x28
 800c0d0:	e026      	b.n	800c120 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0e4:	d007      	beq.n	800c0f6 <UART_Receive_IT+0x74>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10a      	bne.n	800c104 <UART_Receive_IT+0x82>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d106      	bne.n	800c104 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	b2da      	uxtb	r2, r3
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	701a      	strb	r2, [r3, #0]
 800c102:	e008      	b.n	800c116 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c110:	b2da      	uxtb	r2, r3
 800c112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c114:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11a:	1c5a      	adds	r2, r3, #1
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c124:	b29b      	uxth	r3, r3
 800c126:	3b01      	subs	r3, #1
 800c128:	b29b      	uxth	r3, r3
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	4619      	mov	r1, r3
 800c12e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c130:	2b00      	cmp	r3, #0
 800c132:	d15d      	bne.n	800c1f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f022 0220 	bic.w	r2, r2, #32
 800c142:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68da      	ldr	r2, [r3, #12]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c152:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	695a      	ldr	r2, [r3, #20]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f022 0201 	bic.w	r2, r2, #1
 800c162:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2220      	movs	r2, #32
 800c168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c176:	2b01      	cmp	r3, #1
 800c178:	d135      	bne.n	800c1e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	330c      	adds	r3, #12
 800c186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	e853 3f00 	ldrex	r3, [r3]
 800c18e:	613b      	str	r3, [r7, #16]
   return(result);
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	f023 0310 	bic.w	r3, r3, #16
 800c196:	627b      	str	r3, [r7, #36]	; 0x24
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	330c      	adds	r3, #12
 800c19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1a0:	623a      	str	r2, [r7, #32]
 800c1a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a4:	69f9      	ldr	r1, [r7, #28]
 800c1a6:	6a3a      	ldr	r2, [r7, #32]
 800c1a8:	e841 2300 	strex	r3, r2, [r1]
 800c1ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1e5      	bne.n	800c180 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 0310 	and.w	r3, r3, #16
 800c1be:	2b10      	cmp	r3, #16
 800c1c0:	d10a      	bne.n	800c1d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	60fb      	str	r3, [r7, #12]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff fe67 	bl	800beb2 <HAL_UARTEx_RxEventCallback>
 800c1e4:	e002      	b.n	800c1ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7ff fe51 	bl	800be8e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	e002      	b.n	800c1f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e000      	b.n	800c1f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c1f4:	2302      	movs	r3, #2
  }
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3730      	adds	r7, #48	; 0x30
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
	...

0800c200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68da      	ldr	r2, [r3, #12]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	430a      	orrs	r2, r1
 800c21c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	689a      	ldr	r2, [r3, #8]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	431a      	orrs	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	695b      	ldr	r3, [r3, #20]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c23a:	f023 030c 	bic.w	r3, r3, #12
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	6812      	ldr	r2, [r2, #0]
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	430b      	orrs	r3, r1
 800c246:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	695b      	ldr	r3, [r3, #20]
 800c24e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	699a      	ldr	r2, [r3, #24]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	430a      	orrs	r2, r1
 800c25c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a2c      	ldr	r2, [pc, #176]	; (800c314 <UART_SetConfig+0x114>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d103      	bne.n	800c270 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c268:	f7fe fe8c 	bl	800af84 <HAL_RCC_GetPCLK2Freq>
 800c26c:	60f8      	str	r0, [r7, #12]
 800c26e:	e002      	b.n	800c276 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c270:	f7fe fe74 	bl	800af5c <HAL_RCC_GetPCLK1Freq>
 800c274:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	4613      	mov	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	009a      	lsls	r2, r3, #2
 800c280:	441a      	add	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28c:	4a22      	ldr	r2, [pc, #136]	; (800c318 <UART_SetConfig+0x118>)
 800c28e:	fba2 2303 	umull	r2, r3, r2, r3
 800c292:	095b      	lsrs	r3, r3, #5
 800c294:	0119      	lsls	r1, r3, #4
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	4613      	mov	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	009a      	lsls	r2, r3, #2
 800c2a0:	441a      	add	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2ac:	4b1a      	ldr	r3, [pc, #104]	; (800c318 <UART_SetConfig+0x118>)
 800c2ae:	fba3 0302 	umull	r0, r3, r3, r2
 800c2b2:	095b      	lsrs	r3, r3, #5
 800c2b4:	2064      	movs	r0, #100	; 0x64
 800c2b6:	fb00 f303 	mul.w	r3, r0, r3
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	011b      	lsls	r3, r3, #4
 800c2be:	3332      	adds	r3, #50	; 0x32
 800c2c0:	4a15      	ldr	r2, [pc, #84]	; (800c318 <UART_SetConfig+0x118>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	095b      	lsrs	r3, r3, #5
 800c2c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2cc:	4419      	add	r1, r3
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	009a      	lsls	r2, r3, #2
 800c2d8:	441a      	add	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2e4:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <UART_SetConfig+0x118>)
 800c2e6:	fba3 0302 	umull	r0, r3, r3, r2
 800c2ea:	095b      	lsrs	r3, r3, #5
 800c2ec:	2064      	movs	r0, #100	; 0x64
 800c2ee:	fb00 f303 	mul.w	r3, r0, r3
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	011b      	lsls	r3, r3, #4
 800c2f6:	3332      	adds	r3, #50	; 0x32
 800c2f8:	4a07      	ldr	r2, [pc, #28]	; (800c318 <UART_SetConfig+0x118>)
 800c2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c2fe:	095b      	lsrs	r3, r3, #5
 800c300:	f003 020f 	and.w	r2, r3, #15
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	440a      	add	r2, r1
 800c30a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c30c:	bf00      	nop
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	40013800 	.word	0x40013800
 800c318:	51eb851f 	.word	0x51eb851f

0800c31c <__itoa>:
 800c31c:	1e93      	subs	r3, r2, #2
 800c31e:	2b22      	cmp	r3, #34	; 0x22
 800c320:	b510      	push	{r4, lr}
 800c322:	460c      	mov	r4, r1
 800c324:	d904      	bls.n	800c330 <__itoa+0x14>
 800c326:	2300      	movs	r3, #0
 800c328:	461c      	mov	r4, r3
 800c32a:	700b      	strb	r3, [r1, #0]
 800c32c:	4620      	mov	r0, r4
 800c32e:	bd10      	pop	{r4, pc}
 800c330:	2a0a      	cmp	r2, #10
 800c332:	d109      	bne.n	800c348 <__itoa+0x2c>
 800c334:	2800      	cmp	r0, #0
 800c336:	da07      	bge.n	800c348 <__itoa+0x2c>
 800c338:	232d      	movs	r3, #45	; 0x2d
 800c33a:	700b      	strb	r3, [r1, #0]
 800c33c:	2101      	movs	r1, #1
 800c33e:	4240      	negs	r0, r0
 800c340:	4421      	add	r1, r4
 800c342:	f000 f8d9 	bl	800c4f8 <__utoa>
 800c346:	e7f1      	b.n	800c32c <__itoa+0x10>
 800c348:	2100      	movs	r1, #0
 800c34a:	e7f9      	b.n	800c340 <__itoa+0x24>

0800c34c <itoa>:
 800c34c:	f7ff bfe6 	b.w	800c31c <__itoa>

0800c350 <malloc>:
 800c350:	4b02      	ldr	r3, [pc, #8]	; (800c35c <malloc+0xc>)
 800c352:	4601      	mov	r1, r0
 800c354:	6818      	ldr	r0, [r3, #0]
 800c356:	f000 b823 	b.w	800c3a0 <_malloc_r>
 800c35a:	bf00      	nop
 800c35c:	200000f8 	.word	0x200000f8

0800c360 <sbrk_aligned>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	4e0e      	ldr	r6, [pc, #56]	; (800c39c <sbrk_aligned+0x3c>)
 800c364:	460c      	mov	r4, r1
 800c366:	6831      	ldr	r1, [r6, #0]
 800c368:	4605      	mov	r5, r0
 800c36a:	b911      	cbnz	r1, 800c372 <sbrk_aligned+0x12>
 800c36c:	f000 f91e 	bl	800c5ac <_sbrk_r>
 800c370:	6030      	str	r0, [r6, #0]
 800c372:	4621      	mov	r1, r4
 800c374:	4628      	mov	r0, r5
 800c376:	f000 f919 	bl	800c5ac <_sbrk_r>
 800c37a:	1c43      	adds	r3, r0, #1
 800c37c:	d00a      	beq.n	800c394 <sbrk_aligned+0x34>
 800c37e:	1cc4      	adds	r4, r0, #3
 800c380:	f024 0403 	bic.w	r4, r4, #3
 800c384:	42a0      	cmp	r0, r4
 800c386:	d007      	beq.n	800c398 <sbrk_aligned+0x38>
 800c388:	1a21      	subs	r1, r4, r0
 800c38a:	4628      	mov	r0, r5
 800c38c:	f000 f90e 	bl	800c5ac <_sbrk_r>
 800c390:	3001      	adds	r0, #1
 800c392:	d101      	bne.n	800c398 <sbrk_aligned+0x38>
 800c394:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c398:	4620      	mov	r0, r4
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	20000498 	.word	0x20000498

0800c3a0 <_malloc_r>:
 800c3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	1ccd      	adds	r5, r1, #3
 800c3a6:	f025 0503 	bic.w	r5, r5, #3
 800c3aa:	3508      	adds	r5, #8
 800c3ac:	2d0c      	cmp	r5, #12
 800c3ae:	bf38      	it	cc
 800c3b0:	250c      	movcc	r5, #12
 800c3b2:	2d00      	cmp	r5, #0
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	db01      	blt.n	800c3bc <_malloc_r+0x1c>
 800c3b8:	42a9      	cmp	r1, r5
 800c3ba:	d905      	bls.n	800c3c8 <_malloc_r+0x28>
 800c3bc:	230c      	movs	r3, #12
 800c3be:	2600      	movs	r6, #0
 800c3c0:	603b      	str	r3, [r7, #0]
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c49c <_malloc_r+0xfc>
 800c3cc:	f000 f868 	bl	800c4a0 <__malloc_lock>
 800c3d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d4:	461c      	mov	r4, r3
 800c3d6:	bb5c      	cbnz	r4, 800c430 <_malloc_r+0x90>
 800c3d8:	4629      	mov	r1, r5
 800c3da:	4638      	mov	r0, r7
 800c3dc:	f7ff ffc0 	bl	800c360 <sbrk_aligned>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	d155      	bne.n	800c492 <_malloc_r+0xf2>
 800c3e6:	f8d8 4000 	ldr.w	r4, [r8]
 800c3ea:	4626      	mov	r6, r4
 800c3ec:	2e00      	cmp	r6, #0
 800c3ee:	d145      	bne.n	800c47c <_malloc_r+0xdc>
 800c3f0:	2c00      	cmp	r4, #0
 800c3f2:	d048      	beq.n	800c486 <_malloc_r+0xe6>
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	4631      	mov	r1, r6
 800c3f8:	4638      	mov	r0, r7
 800c3fa:	eb04 0903 	add.w	r9, r4, r3
 800c3fe:	f000 f8d5 	bl	800c5ac <_sbrk_r>
 800c402:	4581      	cmp	r9, r0
 800c404:	d13f      	bne.n	800c486 <_malloc_r+0xe6>
 800c406:	6821      	ldr	r1, [r4, #0]
 800c408:	4638      	mov	r0, r7
 800c40a:	1a6d      	subs	r5, r5, r1
 800c40c:	4629      	mov	r1, r5
 800c40e:	f7ff ffa7 	bl	800c360 <sbrk_aligned>
 800c412:	3001      	adds	r0, #1
 800c414:	d037      	beq.n	800c486 <_malloc_r+0xe6>
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	442b      	add	r3, r5
 800c41a:	6023      	str	r3, [r4, #0]
 800c41c:	f8d8 3000 	ldr.w	r3, [r8]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d038      	beq.n	800c496 <_malloc_r+0xf6>
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	42a2      	cmp	r2, r4
 800c428:	d12b      	bne.n	800c482 <_malloc_r+0xe2>
 800c42a:	2200      	movs	r2, #0
 800c42c:	605a      	str	r2, [r3, #4]
 800c42e:	e00f      	b.n	800c450 <_malloc_r+0xb0>
 800c430:	6822      	ldr	r2, [r4, #0]
 800c432:	1b52      	subs	r2, r2, r5
 800c434:	d41f      	bmi.n	800c476 <_malloc_r+0xd6>
 800c436:	2a0b      	cmp	r2, #11
 800c438:	d917      	bls.n	800c46a <_malloc_r+0xca>
 800c43a:	1961      	adds	r1, r4, r5
 800c43c:	42a3      	cmp	r3, r4
 800c43e:	6025      	str	r5, [r4, #0]
 800c440:	bf18      	it	ne
 800c442:	6059      	strne	r1, [r3, #4]
 800c444:	6863      	ldr	r3, [r4, #4]
 800c446:	bf08      	it	eq
 800c448:	f8c8 1000 	streq.w	r1, [r8]
 800c44c:	5162      	str	r2, [r4, r5]
 800c44e:	604b      	str	r3, [r1, #4]
 800c450:	4638      	mov	r0, r7
 800c452:	f104 060b 	add.w	r6, r4, #11
 800c456:	f000 f829 	bl	800c4ac <__malloc_unlock>
 800c45a:	f026 0607 	bic.w	r6, r6, #7
 800c45e:	1d23      	adds	r3, r4, #4
 800c460:	1af2      	subs	r2, r6, r3
 800c462:	d0ae      	beq.n	800c3c2 <_malloc_r+0x22>
 800c464:	1b9b      	subs	r3, r3, r6
 800c466:	50a3      	str	r3, [r4, r2]
 800c468:	e7ab      	b.n	800c3c2 <_malloc_r+0x22>
 800c46a:	42a3      	cmp	r3, r4
 800c46c:	6862      	ldr	r2, [r4, #4]
 800c46e:	d1dd      	bne.n	800c42c <_malloc_r+0x8c>
 800c470:	f8c8 2000 	str.w	r2, [r8]
 800c474:	e7ec      	b.n	800c450 <_malloc_r+0xb0>
 800c476:	4623      	mov	r3, r4
 800c478:	6864      	ldr	r4, [r4, #4]
 800c47a:	e7ac      	b.n	800c3d6 <_malloc_r+0x36>
 800c47c:	4634      	mov	r4, r6
 800c47e:	6876      	ldr	r6, [r6, #4]
 800c480:	e7b4      	b.n	800c3ec <_malloc_r+0x4c>
 800c482:	4613      	mov	r3, r2
 800c484:	e7cc      	b.n	800c420 <_malloc_r+0x80>
 800c486:	230c      	movs	r3, #12
 800c488:	4638      	mov	r0, r7
 800c48a:	603b      	str	r3, [r7, #0]
 800c48c:	f000 f80e 	bl	800c4ac <__malloc_unlock>
 800c490:	e797      	b.n	800c3c2 <_malloc_r+0x22>
 800c492:	6025      	str	r5, [r4, #0]
 800c494:	e7dc      	b.n	800c450 <_malloc_r+0xb0>
 800c496:	605b      	str	r3, [r3, #4]
 800c498:	deff      	udf	#255	; 0xff
 800c49a:	bf00      	nop
 800c49c:	20000494 	.word	0x20000494

0800c4a0 <__malloc_lock>:
 800c4a0:	4801      	ldr	r0, [pc, #4]	; (800c4a8 <__malloc_lock+0x8>)
 800c4a2:	f000 b8bd 	b.w	800c620 <__retarget_lock_acquire_recursive>
 800c4a6:	bf00      	nop
 800c4a8:	200005d4 	.word	0x200005d4

0800c4ac <__malloc_unlock>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	; (800c4b4 <__malloc_unlock+0x8>)
 800c4ae:	f000 b8b8 	b.w	800c622 <__retarget_lock_release_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	200005d4 	.word	0x200005d4

0800c4b8 <siprintf>:
 800c4b8:	b40e      	push	{r1, r2, r3}
 800c4ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4be:	b500      	push	{lr}
 800c4c0:	b09c      	sub	sp, #112	; 0x70
 800c4c2:	ab1d      	add	r3, sp, #116	; 0x74
 800c4c4:	9002      	str	r0, [sp, #8]
 800c4c6:	9006      	str	r0, [sp, #24]
 800c4c8:	9107      	str	r1, [sp, #28]
 800c4ca:	9104      	str	r1, [sp, #16]
 800c4cc:	4808      	ldr	r0, [pc, #32]	; (800c4f0 <siprintf+0x38>)
 800c4ce:	4909      	ldr	r1, [pc, #36]	; (800c4f4 <siprintf+0x3c>)
 800c4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d4:	9105      	str	r1, [sp, #20]
 800c4d6:	6800      	ldr	r0, [r0, #0]
 800c4d8:	a902      	add	r1, sp, #8
 800c4da:	9301      	str	r3, [sp, #4]
 800c4dc:	f000 f94c 	bl	800c778 <_svfiprintf_r>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	9b02      	ldr	r3, [sp, #8]
 800c4e4:	701a      	strb	r2, [r3, #0]
 800c4e6:	b01c      	add	sp, #112	; 0x70
 800c4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4ec:	b003      	add	sp, #12
 800c4ee:	4770      	bx	lr
 800c4f0:	200000f8 	.word	0x200000f8
 800c4f4:	ffff0208 	.word	0xffff0208

0800c4f8 <__utoa>:
 800c4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4fa:	b08b      	sub	sp, #44	; 0x2c
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	460b      	mov	r3, r1
 800c500:	466e      	mov	r6, sp
 800c502:	4c1d      	ldr	r4, [pc, #116]	; (800c578 <__utoa+0x80>)
 800c504:	f104 0c20 	add.w	ip, r4, #32
 800c508:	4637      	mov	r7, r6
 800c50a:	6820      	ldr	r0, [r4, #0]
 800c50c:	6861      	ldr	r1, [r4, #4]
 800c50e:	3408      	adds	r4, #8
 800c510:	c703      	stmia	r7!, {r0, r1}
 800c512:	4564      	cmp	r4, ip
 800c514:	463e      	mov	r6, r7
 800c516:	d1f7      	bne.n	800c508 <__utoa+0x10>
 800c518:	7921      	ldrb	r1, [r4, #4]
 800c51a:	6820      	ldr	r0, [r4, #0]
 800c51c:	7139      	strb	r1, [r7, #4]
 800c51e:	1e91      	subs	r1, r2, #2
 800c520:	2922      	cmp	r1, #34	; 0x22
 800c522:	6038      	str	r0, [r7, #0]
 800c524:	f04f 0100 	mov.w	r1, #0
 800c528:	d904      	bls.n	800c534 <__utoa+0x3c>
 800c52a:	7019      	strb	r1, [r3, #0]
 800c52c:	460b      	mov	r3, r1
 800c52e:	4618      	mov	r0, r3
 800c530:	b00b      	add	sp, #44	; 0x2c
 800c532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c534:	1e58      	subs	r0, r3, #1
 800c536:	4684      	mov	ip, r0
 800c538:	fbb5 f7f2 	udiv	r7, r5, r2
 800c53c:	fb02 5617 	mls	r6, r2, r7, r5
 800c540:	3628      	adds	r6, #40	; 0x28
 800c542:	446e      	add	r6, sp
 800c544:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c548:	460c      	mov	r4, r1
 800c54a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c54e:	462e      	mov	r6, r5
 800c550:	42b2      	cmp	r2, r6
 800c552:	463d      	mov	r5, r7
 800c554:	f101 0101 	add.w	r1, r1, #1
 800c558:	d9ee      	bls.n	800c538 <__utoa+0x40>
 800c55a:	2200      	movs	r2, #0
 800c55c:	545a      	strb	r2, [r3, r1]
 800c55e:	1919      	adds	r1, r3, r4
 800c560:	1aa5      	subs	r5, r4, r2
 800c562:	42aa      	cmp	r2, r5
 800c564:	dae3      	bge.n	800c52e <__utoa+0x36>
 800c566:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c56a:	780e      	ldrb	r6, [r1, #0]
 800c56c:	3201      	adds	r2, #1
 800c56e:	7006      	strb	r6, [r0, #0]
 800c570:	f801 5901 	strb.w	r5, [r1], #-1
 800c574:	e7f4      	b.n	800c560 <__utoa+0x68>
 800c576:	bf00      	nop
 800c578:	0800dd2a 	.word	0x0800dd2a

0800c57c <strcat>:
 800c57c:	4602      	mov	r2, r0
 800c57e:	b510      	push	{r4, lr}
 800c580:	7814      	ldrb	r4, [r2, #0]
 800c582:	4613      	mov	r3, r2
 800c584:	3201      	adds	r2, #1
 800c586:	2c00      	cmp	r4, #0
 800c588:	d1fa      	bne.n	800c580 <strcat+0x4>
 800c58a:	3b01      	subs	r3, #1
 800c58c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c590:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c594:	2a00      	cmp	r2, #0
 800c596:	d1f9      	bne.n	800c58c <strcat+0x10>
 800c598:	bd10      	pop	{r4, pc}

0800c59a <memset>:
 800c59a:	4603      	mov	r3, r0
 800c59c:	4402      	add	r2, r0
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d100      	bne.n	800c5a4 <memset+0xa>
 800c5a2:	4770      	bx	lr
 800c5a4:	f803 1b01 	strb.w	r1, [r3], #1
 800c5a8:	e7f9      	b.n	800c59e <memset+0x4>
	...

0800c5ac <_sbrk_r>:
 800c5ac:	b538      	push	{r3, r4, r5, lr}
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	4d05      	ldr	r5, [pc, #20]	; (800c5c8 <_sbrk_r+0x1c>)
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	4608      	mov	r0, r1
 800c5b6:	602b      	str	r3, [r5, #0]
 800c5b8:	f7fc f808 	bl	80085cc <_sbrk>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d102      	bne.n	800c5c6 <_sbrk_r+0x1a>
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	b103      	cbz	r3, 800c5c6 <_sbrk_r+0x1a>
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	200005d8 	.word	0x200005d8

0800c5cc <__errno>:
 800c5cc:	4b01      	ldr	r3, [pc, #4]	; (800c5d4 <__errno+0x8>)
 800c5ce:	6818      	ldr	r0, [r3, #0]
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	200000f8 	.word	0x200000f8

0800c5d8 <__libc_init_array>:
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	2600      	movs	r6, #0
 800c5dc:	4d0c      	ldr	r5, [pc, #48]	; (800c610 <__libc_init_array+0x38>)
 800c5de:	4c0d      	ldr	r4, [pc, #52]	; (800c614 <__libc_init_array+0x3c>)
 800c5e0:	1b64      	subs	r4, r4, r5
 800c5e2:	10a4      	asrs	r4, r4, #2
 800c5e4:	42a6      	cmp	r6, r4
 800c5e6:	d109      	bne.n	800c5fc <__libc_init_array+0x24>
 800c5e8:	f000 fbc6 	bl	800cd78 <_init>
 800c5ec:	2600      	movs	r6, #0
 800c5ee:	4d0a      	ldr	r5, [pc, #40]	; (800c618 <__libc_init_array+0x40>)
 800c5f0:	4c0a      	ldr	r4, [pc, #40]	; (800c61c <__libc_init_array+0x44>)
 800c5f2:	1b64      	subs	r4, r4, r5
 800c5f4:	10a4      	asrs	r4, r4, #2
 800c5f6:	42a6      	cmp	r6, r4
 800c5f8:	d105      	bne.n	800c606 <__libc_init_array+0x2e>
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
 800c5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c600:	4798      	blx	r3
 800c602:	3601      	adds	r6, #1
 800c604:	e7ee      	b.n	800c5e4 <__libc_init_array+0xc>
 800c606:	f855 3b04 	ldr.w	r3, [r5], #4
 800c60a:	4798      	blx	r3
 800c60c:	3601      	adds	r6, #1
 800c60e:	e7f2      	b.n	800c5f6 <__libc_init_array+0x1e>
 800c610:	0800dd84 	.word	0x0800dd84
 800c614:	0800dd84 	.word	0x0800dd84
 800c618:	0800dd84 	.word	0x0800dd84
 800c61c:	0800dd88 	.word	0x0800dd88

0800c620 <__retarget_lock_acquire_recursive>:
 800c620:	4770      	bx	lr

0800c622 <__retarget_lock_release_recursive>:
 800c622:	4770      	bx	lr

0800c624 <strcpy>:
 800c624:	4603      	mov	r3, r0
 800c626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c62a:	f803 2b01 	strb.w	r2, [r3], #1
 800c62e:	2a00      	cmp	r2, #0
 800c630:	d1f9      	bne.n	800c626 <strcpy+0x2>
 800c632:	4770      	bx	lr

0800c634 <_free_r>:
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	4605      	mov	r5, r0
 800c638:	2900      	cmp	r1, #0
 800c63a:	d040      	beq.n	800c6be <_free_r+0x8a>
 800c63c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c640:	1f0c      	subs	r4, r1, #4
 800c642:	2b00      	cmp	r3, #0
 800c644:	bfb8      	it	lt
 800c646:	18e4      	addlt	r4, r4, r3
 800c648:	f7ff ff2a 	bl	800c4a0 <__malloc_lock>
 800c64c:	4a1c      	ldr	r2, [pc, #112]	; (800c6c0 <_free_r+0x8c>)
 800c64e:	6813      	ldr	r3, [r2, #0]
 800c650:	b933      	cbnz	r3, 800c660 <_free_r+0x2c>
 800c652:	6063      	str	r3, [r4, #4]
 800c654:	6014      	str	r4, [r2, #0]
 800c656:	4628      	mov	r0, r5
 800c658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c65c:	f7ff bf26 	b.w	800c4ac <__malloc_unlock>
 800c660:	42a3      	cmp	r3, r4
 800c662:	d908      	bls.n	800c676 <_free_r+0x42>
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	1821      	adds	r1, r4, r0
 800c668:	428b      	cmp	r3, r1
 800c66a:	bf01      	itttt	eq
 800c66c:	6819      	ldreq	r1, [r3, #0]
 800c66e:	685b      	ldreq	r3, [r3, #4]
 800c670:	1809      	addeq	r1, r1, r0
 800c672:	6021      	streq	r1, [r4, #0]
 800c674:	e7ed      	b.n	800c652 <_free_r+0x1e>
 800c676:	461a      	mov	r2, r3
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	b10b      	cbz	r3, 800c680 <_free_r+0x4c>
 800c67c:	42a3      	cmp	r3, r4
 800c67e:	d9fa      	bls.n	800c676 <_free_r+0x42>
 800c680:	6811      	ldr	r1, [r2, #0]
 800c682:	1850      	adds	r0, r2, r1
 800c684:	42a0      	cmp	r0, r4
 800c686:	d10b      	bne.n	800c6a0 <_free_r+0x6c>
 800c688:	6820      	ldr	r0, [r4, #0]
 800c68a:	4401      	add	r1, r0
 800c68c:	1850      	adds	r0, r2, r1
 800c68e:	4283      	cmp	r3, r0
 800c690:	6011      	str	r1, [r2, #0]
 800c692:	d1e0      	bne.n	800c656 <_free_r+0x22>
 800c694:	6818      	ldr	r0, [r3, #0]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	4408      	add	r0, r1
 800c69a:	6010      	str	r0, [r2, #0]
 800c69c:	6053      	str	r3, [r2, #4]
 800c69e:	e7da      	b.n	800c656 <_free_r+0x22>
 800c6a0:	d902      	bls.n	800c6a8 <_free_r+0x74>
 800c6a2:	230c      	movs	r3, #12
 800c6a4:	602b      	str	r3, [r5, #0]
 800c6a6:	e7d6      	b.n	800c656 <_free_r+0x22>
 800c6a8:	6820      	ldr	r0, [r4, #0]
 800c6aa:	1821      	adds	r1, r4, r0
 800c6ac:	428b      	cmp	r3, r1
 800c6ae:	bf01      	itttt	eq
 800c6b0:	6819      	ldreq	r1, [r3, #0]
 800c6b2:	685b      	ldreq	r3, [r3, #4]
 800c6b4:	1809      	addeq	r1, r1, r0
 800c6b6:	6021      	streq	r1, [r4, #0]
 800c6b8:	6063      	str	r3, [r4, #4]
 800c6ba:	6054      	str	r4, [r2, #4]
 800c6bc:	e7cb      	b.n	800c656 <_free_r+0x22>
 800c6be:	bd38      	pop	{r3, r4, r5, pc}
 800c6c0:	20000494 	.word	0x20000494

0800c6c4 <__ssputs_r>:
 800c6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c8:	461f      	mov	r7, r3
 800c6ca:	688e      	ldr	r6, [r1, #8]
 800c6cc:	4682      	mov	sl, r0
 800c6ce:	42be      	cmp	r6, r7
 800c6d0:	460c      	mov	r4, r1
 800c6d2:	4690      	mov	r8, r2
 800c6d4:	680b      	ldr	r3, [r1, #0]
 800c6d6:	d82c      	bhi.n	800c732 <__ssputs_r+0x6e>
 800c6d8:	898a      	ldrh	r2, [r1, #12]
 800c6da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6de:	d026      	beq.n	800c72e <__ssputs_r+0x6a>
 800c6e0:	6965      	ldr	r5, [r4, #20]
 800c6e2:	6909      	ldr	r1, [r1, #16]
 800c6e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6e8:	eba3 0901 	sub.w	r9, r3, r1
 800c6ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6f0:	1c7b      	adds	r3, r7, #1
 800c6f2:	444b      	add	r3, r9
 800c6f4:	106d      	asrs	r5, r5, #1
 800c6f6:	429d      	cmp	r5, r3
 800c6f8:	bf38      	it	cc
 800c6fa:	461d      	movcc	r5, r3
 800c6fc:	0553      	lsls	r3, r2, #21
 800c6fe:	d527      	bpl.n	800c750 <__ssputs_r+0x8c>
 800c700:	4629      	mov	r1, r5
 800c702:	f7ff fe4d 	bl	800c3a0 <_malloc_r>
 800c706:	4606      	mov	r6, r0
 800c708:	b360      	cbz	r0, 800c764 <__ssputs_r+0xa0>
 800c70a:	464a      	mov	r2, r9
 800c70c:	6921      	ldr	r1, [r4, #16]
 800c70e:	f000 fb1c 	bl	800cd4a <memcpy>
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c71c:	81a3      	strh	r3, [r4, #12]
 800c71e:	6126      	str	r6, [r4, #16]
 800c720:	444e      	add	r6, r9
 800c722:	6026      	str	r6, [r4, #0]
 800c724:	463e      	mov	r6, r7
 800c726:	6165      	str	r5, [r4, #20]
 800c728:	eba5 0509 	sub.w	r5, r5, r9
 800c72c:	60a5      	str	r5, [r4, #8]
 800c72e:	42be      	cmp	r6, r7
 800c730:	d900      	bls.n	800c734 <__ssputs_r+0x70>
 800c732:	463e      	mov	r6, r7
 800c734:	4632      	mov	r2, r6
 800c736:	4641      	mov	r1, r8
 800c738:	6820      	ldr	r0, [r4, #0]
 800c73a:	f000 fade 	bl	800ccfa <memmove>
 800c73e:	2000      	movs	r0, #0
 800c740:	68a3      	ldr	r3, [r4, #8]
 800c742:	1b9b      	subs	r3, r3, r6
 800c744:	60a3      	str	r3, [r4, #8]
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	4433      	add	r3, r6
 800c74a:	6023      	str	r3, [r4, #0]
 800c74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c750:	462a      	mov	r2, r5
 800c752:	f000 faa3 	bl	800cc9c <_realloc_r>
 800c756:	4606      	mov	r6, r0
 800c758:	2800      	cmp	r0, #0
 800c75a:	d1e0      	bne.n	800c71e <__ssputs_r+0x5a>
 800c75c:	4650      	mov	r0, sl
 800c75e:	6921      	ldr	r1, [r4, #16]
 800c760:	f7ff ff68 	bl	800c634 <_free_r>
 800c764:	230c      	movs	r3, #12
 800c766:	f8ca 3000 	str.w	r3, [sl]
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	e7e9      	b.n	800c74c <__ssputs_r+0x88>

0800c778 <_svfiprintf_r>:
 800c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	4698      	mov	r8, r3
 800c77e:	898b      	ldrh	r3, [r1, #12]
 800c780:	4607      	mov	r7, r0
 800c782:	061b      	lsls	r3, r3, #24
 800c784:	460d      	mov	r5, r1
 800c786:	4614      	mov	r4, r2
 800c788:	b09d      	sub	sp, #116	; 0x74
 800c78a:	d50e      	bpl.n	800c7aa <_svfiprintf_r+0x32>
 800c78c:	690b      	ldr	r3, [r1, #16]
 800c78e:	b963      	cbnz	r3, 800c7aa <_svfiprintf_r+0x32>
 800c790:	2140      	movs	r1, #64	; 0x40
 800c792:	f7ff fe05 	bl	800c3a0 <_malloc_r>
 800c796:	6028      	str	r0, [r5, #0]
 800c798:	6128      	str	r0, [r5, #16]
 800c79a:	b920      	cbnz	r0, 800c7a6 <_svfiprintf_r+0x2e>
 800c79c:	230c      	movs	r3, #12
 800c79e:	603b      	str	r3, [r7, #0]
 800c7a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7a4:	e0d0      	b.n	800c948 <_svfiprintf_r+0x1d0>
 800c7a6:	2340      	movs	r3, #64	; 0x40
 800c7a8:	616b      	str	r3, [r5, #20]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ae:	2320      	movs	r3, #32
 800c7b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7b4:	2330      	movs	r3, #48	; 0x30
 800c7b6:	f04f 0901 	mov.w	r9, #1
 800c7ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c960 <_svfiprintf_r+0x1e8>
 800c7c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7c6:	4623      	mov	r3, r4
 800c7c8:	469a      	mov	sl, r3
 800c7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ce:	b10a      	cbz	r2, 800c7d4 <_svfiprintf_r+0x5c>
 800c7d0:	2a25      	cmp	r2, #37	; 0x25
 800c7d2:	d1f9      	bne.n	800c7c8 <_svfiprintf_r+0x50>
 800c7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c7d8:	d00b      	beq.n	800c7f2 <_svfiprintf_r+0x7a>
 800c7da:	465b      	mov	r3, fp
 800c7dc:	4622      	mov	r2, r4
 800c7de:	4629      	mov	r1, r5
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	f7ff ff6f 	bl	800c6c4 <__ssputs_r>
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	f000 80a9 	beq.w	800c93e <_svfiprintf_r+0x1c6>
 800c7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ee:	445a      	add	r2, fp
 800c7f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 80a1 	beq.w	800c93e <_svfiprintf_r+0x1c6>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c806:	f10a 0a01 	add.w	sl, sl, #1
 800c80a:	9304      	str	r3, [sp, #16]
 800c80c:	9307      	str	r3, [sp, #28]
 800c80e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c812:	931a      	str	r3, [sp, #104]	; 0x68
 800c814:	4654      	mov	r4, sl
 800c816:	2205      	movs	r2, #5
 800c818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81c:	4850      	ldr	r0, [pc, #320]	; (800c960 <_svfiprintf_r+0x1e8>)
 800c81e:	f000 fa86 	bl	800cd2e <memchr>
 800c822:	9a04      	ldr	r2, [sp, #16]
 800c824:	b9d8      	cbnz	r0, 800c85e <_svfiprintf_r+0xe6>
 800c826:	06d0      	lsls	r0, r2, #27
 800c828:	bf44      	itt	mi
 800c82a:	2320      	movmi	r3, #32
 800c82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c830:	0711      	lsls	r1, r2, #28
 800c832:	bf44      	itt	mi
 800c834:	232b      	movmi	r3, #43	; 0x2b
 800c836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c83a:	f89a 3000 	ldrb.w	r3, [sl]
 800c83e:	2b2a      	cmp	r3, #42	; 0x2a
 800c840:	d015      	beq.n	800c86e <_svfiprintf_r+0xf6>
 800c842:	4654      	mov	r4, sl
 800c844:	2000      	movs	r0, #0
 800c846:	f04f 0c0a 	mov.w	ip, #10
 800c84a:	9a07      	ldr	r2, [sp, #28]
 800c84c:	4621      	mov	r1, r4
 800c84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c852:	3b30      	subs	r3, #48	; 0x30
 800c854:	2b09      	cmp	r3, #9
 800c856:	d94d      	bls.n	800c8f4 <_svfiprintf_r+0x17c>
 800c858:	b1b0      	cbz	r0, 800c888 <_svfiprintf_r+0x110>
 800c85a:	9207      	str	r2, [sp, #28]
 800c85c:	e014      	b.n	800c888 <_svfiprintf_r+0x110>
 800c85e:	eba0 0308 	sub.w	r3, r0, r8
 800c862:	fa09 f303 	lsl.w	r3, r9, r3
 800c866:	4313      	orrs	r3, r2
 800c868:	46a2      	mov	sl, r4
 800c86a:	9304      	str	r3, [sp, #16]
 800c86c:	e7d2      	b.n	800c814 <_svfiprintf_r+0x9c>
 800c86e:	9b03      	ldr	r3, [sp, #12]
 800c870:	1d19      	adds	r1, r3, #4
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	9103      	str	r1, [sp, #12]
 800c876:	2b00      	cmp	r3, #0
 800c878:	bfbb      	ittet	lt
 800c87a:	425b      	neglt	r3, r3
 800c87c:	f042 0202 	orrlt.w	r2, r2, #2
 800c880:	9307      	strge	r3, [sp, #28]
 800c882:	9307      	strlt	r3, [sp, #28]
 800c884:	bfb8      	it	lt
 800c886:	9204      	strlt	r2, [sp, #16]
 800c888:	7823      	ldrb	r3, [r4, #0]
 800c88a:	2b2e      	cmp	r3, #46	; 0x2e
 800c88c:	d10c      	bne.n	800c8a8 <_svfiprintf_r+0x130>
 800c88e:	7863      	ldrb	r3, [r4, #1]
 800c890:	2b2a      	cmp	r3, #42	; 0x2a
 800c892:	d134      	bne.n	800c8fe <_svfiprintf_r+0x186>
 800c894:	9b03      	ldr	r3, [sp, #12]
 800c896:	3402      	adds	r4, #2
 800c898:	1d1a      	adds	r2, r3, #4
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	9203      	str	r2, [sp, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	bfb8      	it	lt
 800c8a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8a6:	9305      	str	r3, [sp, #20]
 800c8a8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c964 <_svfiprintf_r+0x1ec>
 800c8ac:	2203      	movs	r2, #3
 800c8ae:	4650      	mov	r0, sl
 800c8b0:	7821      	ldrb	r1, [r4, #0]
 800c8b2:	f000 fa3c 	bl	800cd2e <memchr>
 800c8b6:	b138      	cbz	r0, 800c8c8 <_svfiprintf_r+0x150>
 800c8b8:	2240      	movs	r2, #64	; 0x40
 800c8ba:	9b04      	ldr	r3, [sp, #16]
 800c8bc:	eba0 000a 	sub.w	r0, r0, sl
 800c8c0:	4082      	lsls	r2, r0
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	3401      	adds	r4, #1
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8cc:	2206      	movs	r2, #6
 800c8ce:	4826      	ldr	r0, [pc, #152]	; (800c968 <_svfiprintf_r+0x1f0>)
 800c8d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8d4:	f000 fa2b 	bl	800cd2e <memchr>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d038      	beq.n	800c94e <_svfiprintf_r+0x1d6>
 800c8dc:	4b23      	ldr	r3, [pc, #140]	; (800c96c <_svfiprintf_r+0x1f4>)
 800c8de:	bb1b      	cbnz	r3, 800c928 <_svfiprintf_r+0x1b0>
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	3307      	adds	r3, #7
 800c8e4:	f023 0307 	bic.w	r3, r3, #7
 800c8e8:	3308      	adds	r3, #8
 800c8ea:	9303      	str	r3, [sp, #12]
 800c8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ee:	4433      	add	r3, r6
 800c8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f2:	e768      	b.n	800c7c6 <_svfiprintf_r+0x4e>
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	2001      	movs	r0, #1
 800c8f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8fc:	e7a6      	b.n	800c84c <_svfiprintf_r+0xd4>
 800c8fe:	2300      	movs	r3, #0
 800c900:	f04f 0c0a 	mov.w	ip, #10
 800c904:	4619      	mov	r1, r3
 800c906:	3401      	adds	r4, #1
 800c908:	9305      	str	r3, [sp, #20]
 800c90a:	4620      	mov	r0, r4
 800c90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c910:	3a30      	subs	r2, #48	; 0x30
 800c912:	2a09      	cmp	r2, #9
 800c914:	d903      	bls.n	800c91e <_svfiprintf_r+0x1a6>
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0c6      	beq.n	800c8a8 <_svfiprintf_r+0x130>
 800c91a:	9105      	str	r1, [sp, #20]
 800c91c:	e7c4      	b.n	800c8a8 <_svfiprintf_r+0x130>
 800c91e:	4604      	mov	r4, r0
 800c920:	2301      	movs	r3, #1
 800c922:	fb0c 2101 	mla	r1, ip, r1, r2
 800c926:	e7f0      	b.n	800c90a <_svfiprintf_r+0x192>
 800c928:	ab03      	add	r3, sp, #12
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	462a      	mov	r2, r5
 800c92e:	4638      	mov	r0, r7
 800c930:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <_svfiprintf_r+0x1f8>)
 800c932:	a904      	add	r1, sp, #16
 800c934:	f3af 8000 	nop.w
 800c938:	1c42      	adds	r2, r0, #1
 800c93a:	4606      	mov	r6, r0
 800c93c:	d1d6      	bne.n	800c8ec <_svfiprintf_r+0x174>
 800c93e:	89ab      	ldrh	r3, [r5, #12]
 800c940:	065b      	lsls	r3, r3, #25
 800c942:	f53f af2d 	bmi.w	800c7a0 <_svfiprintf_r+0x28>
 800c946:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c948:	b01d      	add	sp, #116	; 0x74
 800c94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94e:	ab03      	add	r3, sp, #12
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	462a      	mov	r2, r5
 800c954:	4638      	mov	r0, r7
 800c956:	4b06      	ldr	r3, [pc, #24]	; (800c970 <_svfiprintf_r+0x1f8>)
 800c958:	a904      	add	r1, sp, #16
 800c95a:	f000 f87d 	bl	800ca58 <_printf_i>
 800c95e:	e7eb      	b.n	800c938 <_svfiprintf_r+0x1c0>
 800c960:	0800dd4f 	.word	0x0800dd4f
 800c964:	0800dd55 	.word	0x0800dd55
 800c968:	0800dd59 	.word	0x0800dd59
 800c96c:	00000000 	.word	0x00000000
 800c970:	0800c6c5 	.word	0x0800c6c5

0800c974 <_printf_common>:
 800c974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c978:	4616      	mov	r6, r2
 800c97a:	4699      	mov	r9, r3
 800c97c:	688a      	ldr	r2, [r1, #8]
 800c97e:	690b      	ldr	r3, [r1, #16]
 800c980:	4607      	mov	r7, r0
 800c982:	4293      	cmp	r3, r2
 800c984:	bfb8      	it	lt
 800c986:	4613      	movlt	r3, r2
 800c988:	6033      	str	r3, [r6, #0]
 800c98a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c98e:	460c      	mov	r4, r1
 800c990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c994:	b10a      	cbz	r2, 800c99a <_printf_common+0x26>
 800c996:	3301      	adds	r3, #1
 800c998:	6033      	str	r3, [r6, #0]
 800c99a:	6823      	ldr	r3, [r4, #0]
 800c99c:	0699      	lsls	r1, r3, #26
 800c99e:	bf42      	ittt	mi
 800c9a0:	6833      	ldrmi	r3, [r6, #0]
 800c9a2:	3302      	addmi	r3, #2
 800c9a4:	6033      	strmi	r3, [r6, #0]
 800c9a6:	6825      	ldr	r5, [r4, #0]
 800c9a8:	f015 0506 	ands.w	r5, r5, #6
 800c9ac:	d106      	bne.n	800c9bc <_printf_common+0x48>
 800c9ae:	f104 0a19 	add.w	sl, r4, #25
 800c9b2:	68e3      	ldr	r3, [r4, #12]
 800c9b4:	6832      	ldr	r2, [r6, #0]
 800c9b6:	1a9b      	subs	r3, r3, r2
 800c9b8:	42ab      	cmp	r3, r5
 800c9ba:	dc2b      	bgt.n	800ca14 <_printf_common+0xa0>
 800c9bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9c0:	1e13      	subs	r3, r2, #0
 800c9c2:	6822      	ldr	r2, [r4, #0]
 800c9c4:	bf18      	it	ne
 800c9c6:	2301      	movne	r3, #1
 800c9c8:	0692      	lsls	r2, r2, #26
 800c9ca:	d430      	bmi.n	800ca2e <_printf_common+0xba>
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9d4:	47c0      	blx	r8
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	d023      	beq.n	800ca22 <_printf_common+0xae>
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	6922      	ldr	r2, [r4, #16]
 800c9de:	f003 0306 	and.w	r3, r3, #6
 800c9e2:	2b04      	cmp	r3, #4
 800c9e4:	bf14      	ite	ne
 800c9e6:	2500      	movne	r5, #0
 800c9e8:	6833      	ldreq	r3, [r6, #0]
 800c9ea:	f04f 0600 	mov.w	r6, #0
 800c9ee:	bf08      	it	eq
 800c9f0:	68e5      	ldreq	r5, [r4, #12]
 800c9f2:	f104 041a 	add.w	r4, r4, #26
 800c9f6:	bf08      	it	eq
 800c9f8:	1aed      	subeq	r5, r5, r3
 800c9fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c9fe:	bf08      	it	eq
 800ca00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca04:	4293      	cmp	r3, r2
 800ca06:	bfc4      	itt	gt
 800ca08:	1a9b      	subgt	r3, r3, r2
 800ca0a:	18ed      	addgt	r5, r5, r3
 800ca0c:	42b5      	cmp	r5, r6
 800ca0e:	d11a      	bne.n	800ca46 <_printf_common+0xd2>
 800ca10:	2000      	movs	r0, #0
 800ca12:	e008      	b.n	800ca26 <_printf_common+0xb2>
 800ca14:	2301      	movs	r3, #1
 800ca16:	4652      	mov	r2, sl
 800ca18:	4649      	mov	r1, r9
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	47c0      	blx	r8
 800ca1e:	3001      	adds	r0, #1
 800ca20:	d103      	bne.n	800ca2a <_printf_common+0xb6>
 800ca22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2a:	3501      	adds	r5, #1
 800ca2c:	e7c1      	b.n	800c9b2 <_printf_common+0x3e>
 800ca2e:	2030      	movs	r0, #48	; 0x30
 800ca30:	18e1      	adds	r1, r4, r3
 800ca32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca36:	1c5a      	adds	r2, r3, #1
 800ca38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca3c:	4422      	add	r2, r4
 800ca3e:	3302      	adds	r3, #2
 800ca40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca44:	e7c2      	b.n	800c9cc <_printf_common+0x58>
 800ca46:	2301      	movs	r3, #1
 800ca48:	4622      	mov	r2, r4
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	4638      	mov	r0, r7
 800ca4e:	47c0      	blx	r8
 800ca50:	3001      	adds	r0, #1
 800ca52:	d0e6      	beq.n	800ca22 <_printf_common+0xae>
 800ca54:	3601      	adds	r6, #1
 800ca56:	e7d9      	b.n	800ca0c <_printf_common+0x98>

0800ca58 <_printf_i>:
 800ca58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca5c:	7e0f      	ldrb	r7, [r1, #24]
 800ca5e:	4691      	mov	r9, r2
 800ca60:	2f78      	cmp	r7, #120	; 0x78
 800ca62:	4680      	mov	r8, r0
 800ca64:	460c      	mov	r4, r1
 800ca66:	469a      	mov	sl, r3
 800ca68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca6e:	d807      	bhi.n	800ca80 <_printf_i+0x28>
 800ca70:	2f62      	cmp	r7, #98	; 0x62
 800ca72:	d80a      	bhi.n	800ca8a <_printf_i+0x32>
 800ca74:	2f00      	cmp	r7, #0
 800ca76:	f000 80d5 	beq.w	800cc24 <_printf_i+0x1cc>
 800ca7a:	2f58      	cmp	r7, #88	; 0x58
 800ca7c:	f000 80c1 	beq.w	800cc02 <_printf_i+0x1aa>
 800ca80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca88:	e03a      	b.n	800cb00 <_printf_i+0xa8>
 800ca8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca8e:	2b15      	cmp	r3, #21
 800ca90:	d8f6      	bhi.n	800ca80 <_printf_i+0x28>
 800ca92:	a101      	add	r1, pc, #4	; (adr r1, 800ca98 <_printf_i+0x40>)
 800ca94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca98:	0800caf1 	.word	0x0800caf1
 800ca9c:	0800cb05 	.word	0x0800cb05
 800caa0:	0800ca81 	.word	0x0800ca81
 800caa4:	0800ca81 	.word	0x0800ca81
 800caa8:	0800ca81 	.word	0x0800ca81
 800caac:	0800ca81 	.word	0x0800ca81
 800cab0:	0800cb05 	.word	0x0800cb05
 800cab4:	0800ca81 	.word	0x0800ca81
 800cab8:	0800ca81 	.word	0x0800ca81
 800cabc:	0800ca81 	.word	0x0800ca81
 800cac0:	0800ca81 	.word	0x0800ca81
 800cac4:	0800cc0b 	.word	0x0800cc0b
 800cac8:	0800cb31 	.word	0x0800cb31
 800cacc:	0800cbc5 	.word	0x0800cbc5
 800cad0:	0800ca81 	.word	0x0800ca81
 800cad4:	0800ca81 	.word	0x0800ca81
 800cad8:	0800cc2d 	.word	0x0800cc2d
 800cadc:	0800ca81 	.word	0x0800ca81
 800cae0:	0800cb31 	.word	0x0800cb31
 800cae4:	0800ca81 	.word	0x0800ca81
 800cae8:	0800ca81 	.word	0x0800ca81
 800caec:	0800cbcd 	.word	0x0800cbcd
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	1d1a      	adds	r2, r3, #4
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	602a      	str	r2, [r5, #0]
 800caf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cafc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb00:	2301      	movs	r3, #1
 800cb02:	e0a0      	b.n	800cc46 <_printf_i+0x1ee>
 800cb04:	6820      	ldr	r0, [r4, #0]
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	0607      	lsls	r7, r0, #24
 800cb0a:	f103 0104 	add.w	r1, r3, #4
 800cb0e:	6029      	str	r1, [r5, #0]
 800cb10:	d501      	bpl.n	800cb16 <_printf_i+0xbe>
 800cb12:	681e      	ldr	r6, [r3, #0]
 800cb14:	e003      	b.n	800cb1e <_printf_i+0xc6>
 800cb16:	0646      	lsls	r6, r0, #25
 800cb18:	d5fb      	bpl.n	800cb12 <_printf_i+0xba>
 800cb1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb1e:	2e00      	cmp	r6, #0
 800cb20:	da03      	bge.n	800cb2a <_printf_i+0xd2>
 800cb22:	232d      	movs	r3, #45	; 0x2d
 800cb24:	4276      	negs	r6, r6
 800cb26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb2a:	230a      	movs	r3, #10
 800cb2c:	4859      	ldr	r0, [pc, #356]	; (800cc94 <_printf_i+0x23c>)
 800cb2e:	e012      	b.n	800cb56 <_printf_i+0xfe>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	6820      	ldr	r0, [r4, #0]
 800cb34:	1d19      	adds	r1, r3, #4
 800cb36:	6029      	str	r1, [r5, #0]
 800cb38:	0605      	lsls	r5, r0, #24
 800cb3a:	d501      	bpl.n	800cb40 <_printf_i+0xe8>
 800cb3c:	681e      	ldr	r6, [r3, #0]
 800cb3e:	e002      	b.n	800cb46 <_printf_i+0xee>
 800cb40:	0641      	lsls	r1, r0, #25
 800cb42:	d5fb      	bpl.n	800cb3c <_printf_i+0xe4>
 800cb44:	881e      	ldrh	r6, [r3, #0]
 800cb46:	2f6f      	cmp	r7, #111	; 0x6f
 800cb48:	bf0c      	ite	eq
 800cb4a:	2308      	moveq	r3, #8
 800cb4c:	230a      	movne	r3, #10
 800cb4e:	4851      	ldr	r0, [pc, #324]	; (800cc94 <_printf_i+0x23c>)
 800cb50:	2100      	movs	r1, #0
 800cb52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb56:	6865      	ldr	r5, [r4, #4]
 800cb58:	2d00      	cmp	r5, #0
 800cb5a:	bfa8      	it	ge
 800cb5c:	6821      	ldrge	r1, [r4, #0]
 800cb5e:	60a5      	str	r5, [r4, #8]
 800cb60:	bfa4      	itt	ge
 800cb62:	f021 0104 	bicge.w	r1, r1, #4
 800cb66:	6021      	strge	r1, [r4, #0]
 800cb68:	b90e      	cbnz	r6, 800cb6e <_printf_i+0x116>
 800cb6a:	2d00      	cmp	r5, #0
 800cb6c:	d04b      	beq.n	800cc06 <_printf_i+0x1ae>
 800cb6e:	4615      	mov	r5, r2
 800cb70:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb74:	fb03 6711 	mls	r7, r3, r1, r6
 800cb78:	5dc7      	ldrb	r7, [r0, r7]
 800cb7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb7e:	4637      	mov	r7, r6
 800cb80:	42bb      	cmp	r3, r7
 800cb82:	460e      	mov	r6, r1
 800cb84:	d9f4      	bls.n	800cb70 <_printf_i+0x118>
 800cb86:	2b08      	cmp	r3, #8
 800cb88:	d10b      	bne.n	800cba2 <_printf_i+0x14a>
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	07de      	lsls	r6, r3, #31
 800cb8e:	d508      	bpl.n	800cba2 <_printf_i+0x14a>
 800cb90:	6923      	ldr	r3, [r4, #16]
 800cb92:	6861      	ldr	r1, [r4, #4]
 800cb94:	4299      	cmp	r1, r3
 800cb96:	bfde      	ittt	le
 800cb98:	2330      	movle	r3, #48	; 0x30
 800cb9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cba2:	1b52      	subs	r2, r2, r5
 800cba4:	6122      	str	r2, [r4, #16]
 800cba6:	464b      	mov	r3, r9
 800cba8:	4621      	mov	r1, r4
 800cbaa:	4640      	mov	r0, r8
 800cbac:	f8cd a000 	str.w	sl, [sp]
 800cbb0:	aa03      	add	r2, sp, #12
 800cbb2:	f7ff fedf 	bl	800c974 <_printf_common>
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	d14a      	bne.n	800cc50 <_printf_i+0x1f8>
 800cbba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbbe:	b004      	add	sp, #16
 800cbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	f043 0320 	orr.w	r3, r3, #32
 800cbca:	6023      	str	r3, [r4, #0]
 800cbcc:	2778      	movs	r7, #120	; 0x78
 800cbce:	4832      	ldr	r0, [pc, #200]	; (800cc98 <_printf_i+0x240>)
 800cbd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	6829      	ldr	r1, [r5, #0]
 800cbd8:	061f      	lsls	r7, r3, #24
 800cbda:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbde:	d402      	bmi.n	800cbe6 <_printf_i+0x18e>
 800cbe0:	065f      	lsls	r7, r3, #25
 800cbe2:	bf48      	it	mi
 800cbe4:	b2b6      	uxthmi	r6, r6
 800cbe6:	07df      	lsls	r7, r3, #31
 800cbe8:	bf48      	it	mi
 800cbea:	f043 0320 	orrmi.w	r3, r3, #32
 800cbee:	6029      	str	r1, [r5, #0]
 800cbf0:	bf48      	it	mi
 800cbf2:	6023      	strmi	r3, [r4, #0]
 800cbf4:	b91e      	cbnz	r6, 800cbfe <_printf_i+0x1a6>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	f023 0320 	bic.w	r3, r3, #32
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	2310      	movs	r3, #16
 800cc00:	e7a6      	b.n	800cb50 <_printf_i+0xf8>
 800cc02:	4824      	ldr	r0, [pc, #144]	; (800cc94 <_printf_i+0x23c>)
 800cc04:	e7e4      	b.n	800cbd0 <_printf_i+0x178>
 800cc06:	4615      	mov	r5, r2
 800cc08:	e7bd      	b.n	800cb86 <_printf_i+0x12e>
 800cc0a:	682b      	ldr	r3, [r5, #0]
 800cc0c:	6826      	ldr	r6, [r4, #0]
 800cc0e:	1d18      	adds	r0, r3, #4
 800cc10:	6961      	ldr	r1, [r4, #20]
 800cc12:	6028      	str	r0, [r5, #0]
 800cc14:	0635      	lsls	r5, r6, #24
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	d501      	bpl.n	800cc1e <_printf_i+0x1c6>
 800cc1a:	6019      	str	r1, [r3, #0]
 800cc1c:	e002      	b.n	800cc24 <_printf_i+0x1cc>
 800cc1e:	0670      	lsls	r0, r6, #25
 800cc20:	d5fb      	bpl.n	800cc1a <_printf_i+0x1c2>
 800cc22:	8019      	strh	r1, [r3, #0]
 800cc24:	2300      	movs	r3, #0
 800cc26:	4615      	mov	r5, r2
 800cc28:	6123      	str	r3, [r4, #16]
 800cc2a:	e7bc      	b.n	800cba6 <_printf_i+0x14e>
 800cc2c:	682b      	ldr	r3, [r5, #0]
 800cc2e:	2100      	movs	r1, #0
 800cc30:	1d1a      	adds	r2, r3, #4
 800cc32:	602a      	str	r2, [r5, #0]
 800cc34:	681d      	ldr	r5, [r3, #0]
 800cc36:	6862      	ldr	r2, [r4, #4]
 800cc38:	4628      	mov	r0, r5
 800cc3a:	f000 f878 	bl	800cd2e <memchr>
 800cc3e:	b108      	cbz	r0, 800cc44 <_printf_i+0x1ec>
 800cc40:	1b40      	subs	r0, r0, r5
 800cc42:	6060      	str	r0, [r4, #4]
 800cc44:	6863      	ldr	r3, [r4, #4]
 800cc46:	6123      	str	r3, [r4, #16]
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc4e:	e7aa      	b.n	800cba6 <_printf_i+0x14e>
 800cc50:	462a      	mov	r2, r5
 800cc52:	4649      	mov	r1, r9
 800cc54:	4640      	mov	r0, r8
 800cc56:	6923      	ldr	r3, [r4, #16]
 800cc58:	47d0      	blx	sl
 800cc5a:	3001      	adds	r0, #1
 800cc5c:	d0ad      	beq.n	800cbba <_printf_i+0x162>
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	079b      	lsls	r3, r3, #30
 800cc62:	d413      	bmi.n	800cc8c <_printf_i+0x234>
 800cc64:	68e0      	ldr	r0, [r4, #12]
 800cc66:	9b03      	ldr	r3, [sp, #12]
 800cc68:	4298      	cmp	r0, r3
 800cc6a:	bfb8      	it	lt
 800cc6c:	4618      	movlt	r0, r3
 800cc6e:	e7a6      	b.n	800cbbe <_printf_i+0x166>
 800cc70:	2301      	movs	r3, #1
 800cc72:	4632      	mov	r2, r6
 800cc74:	4649      	mov	r1, r9
 800cc76:	4640      	mov	r0, r8
 800cc78:	47d0      	blx	sl
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	d09d      	beq.n	800cbba <_printf_i+0x162>
 800cc7e:	3501      	adds	r5, #1
 800cc80:	68e3      	ldr	r3, [r4, #12]
 800cc82:	9903      	ldr	r1, [sp, #12]
 800cc84:	1a5b      	subs	r3, r3, r1
 800cc86:	42ab      	cmp	r3, r5
 800cc88:	dcf2      	bgt.n	800cc70 <_printf_i+0x218>
 800cc8a:	e7eb      	b.n	800cc64 <_printf_i+0x20c>
 800cc8c:	2500      	movs	r5, #0
 800cc8e:	f104 0619 	add.w	r6, r4, #25
 800cc92:	e7f5      	b.n	800cc80 <_printf_i+0x228>
 800cc94:	0800dd60 	.word	0x0800dd60
 800cc98:	0800dd71 	.word	0x0800dd71

0800cc9c <_realloc_r>:
 800cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca0:	4680      	mov	r8, r0
 800cca2:	4614      	mov	r4, r2
 800cca4:	460e      	mov	r6, r1
 800cca6:	b921      	cbnz	r1, 800ccb2 <_realloc_r+0x16>
 800cca8:	4611      	mov	r1, r2
 800ccaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccae:	f7ff bb77 	b.w	800c3a0 <_malloc_r>
 800ccb2:	b92a      	cbnz	r2, 800ccc0 <_realloc_r+0x24>
 800ccb4:	f7ff fcbe 	bl	800c634 <_free_r>
 800ccb8:	4625      	mov	r5, r4
 800ccba:	4628      	mov	r0, r5
 800ccbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc0:	f000 f851 	bl	800cd66 <_malloc_usable_size_r>
 800ccc4:	4284      	cmp	r4, r0
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	d802      	bhi.n	800ccd0 <_realloc_r+0x34>
 800ccca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccce:	d812      	bhi.n	800ccf6 <_realloc_r+0x5a>
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	f7ff fb64 	bl	800c3a0 <_malloc_r>
 800ccd8:	4605      	mov	r5, r0
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d0ed      	beq.n	800ccba <_realloc_r+0x1e>
 800ccde:	42bc      	cmp	r4, r7
 800cce0:	4622      	mov	r2, r4
 800cce2:	4631      	mov	r1, r6
 800cce4:	bf28      	it	cs
 800cce6:	463a      	movcs	r2, r7
 800cce8:	f000 f82f 	bl	800cd4a <memcpy>
 800ccec:	4631      	mov	r1, r6
 800ccee:	4640      	mov	r0, r8
 800ccf0:	f7ff fca0 	bl	800c634 <_free_r>
 800ccf4:	e7e1      	b.n	800ccba <_realloc_r+0x1e>
 800ccf6:	4635      	mov	r5, r6
 800ccf8:	e7df      	b.n	800ccba <_realloc_r+0x1e>

0800ccfa <memmove>:
 800ccfa:	4288      	cmp	r0, r1
 800ccfc:	b510      	push	{r4, lr}
 800ccfe:	eb01 0402 	add.w	r4, r1, r2
 800cd02:	d902      	bls.n	800cd0a <memmove+0x10>
 800cd04:	4284      	cmp	r4, r0
 800cd06:	4623      	mov	r3, r4
 800cd08:	d807      	bhi.n	800cd1a <memmove+0x20>
 800cd0a:	1e43      	subs	r3, r0, #1
 800cd0c:	42a1      	cmp	r1, r4
 800cd0e:	d008      	beq.n	800cd22 <memmove+0x28>
 800cd10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd18:	e7f8      	b.n	800cd0c <memmove+0x12>
 800cd1a:	4601      	mov	r1, r0
 800cd1c:	4402      	add	r2, r0
 800cd1e:	428a      	cmp	r2, r1
 800cd20:	d100      	bne.n	800cd24 <memmove+0x2a>
 800cd22:	bd10      	pop	{r4, pc}
 800cd24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd2c:	e7f7      	b.n	800cd1e <memmove+0x24>

0800cd2e <memchr>:
 800cd2e:	4603      	mov	r3, r0
 800cd30:	b510      	push	{r4, lr}
 800cd32:	b2c9      	uxtb	r1, r1
 800cd34:	4402      	add	r2, r0
 800cd36:	4293      	cmp	r3, r2
 800cd38:	4618      	mov	r0, r3
 800cd3a:	d101      	bne.n	800cd40 <memchr+0x12>
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	e003      	b.n	800cd48 <memchr+0x1a>
 800cd40:	7804      	ldrb	r4, [r0, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	428c      	cmp	r4, r1
 800cd46:	d1f6      	bne.n	800cd36 <memchr+0x8>
 800cd48:	bd10      	pop	{r4, pc}

0800cd4a <memcpy>:
 800cd4a:	440a      	add	r2, r1
 800cd4c:	4291      	cmp	r1, r2
 800cd4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cd52:	d100      	bne.n	800cd56 <memcpy+0xc>
 800cd54:	4770      	bx	lr
 800cd56:	b510      	push	{r4, lr}
 800cd58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd5c:	4291      	cmp	r1, r2
 800cd5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd62:	d1f9      	bne.n	800cd58 <memcpy+0xe>
 800cd64:	bd10      	pop	{r4, pc}

0800cd66 <_malloc_usable_size_r>:
 800cd66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd6a:	1f18      	subs	r0, r3, #4
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	bfbc      	itt	lt
 800cd70:	580b      	ldrlt	r3, [r1, r0]
 800cd72:	18c0      	addlt	r0, r0, r3
 800cd74:	4770      	bx	lr
	...

0800cd78 <_init>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr

0800cd84 <_fini>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	bf00      	nop
 800cd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8a:	bc08      	pop	{r3}
 800cd8c:	469e      	mov	lr, r3
 800cd8e:	4770      	bx	lr
